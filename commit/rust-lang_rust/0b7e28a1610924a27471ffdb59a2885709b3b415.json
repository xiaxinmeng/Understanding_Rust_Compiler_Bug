{"sha": "0b7e28a1610924a27471ffdb59a2885709b3b415", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiN2UyOGExNjEwOTI0YTI3NDcxZmZkYjU5YTI4ODU3MDliM2I0MTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-30T02:20:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-30T02:20:55Z"}, "message": "Auto merge of #65068 - estebank:trait-impl-lt-mismatch, r=nikomatsakis\n\nCustom lifetime error for `impl` item doesn't conform to `trait`\n\nPartly addresses #42706, #41343, fix #40900.", "tree": {"sha": "6cbaf618f4e15a4f740a4120843f33f730bbb323", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cbaf618f4e15a4f740a4120843f33f730bbb323"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b7e28a1610924a27471ffdb59a2885709b3b415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7e28a1610924a27471ffdb59a2885709b3b415", "html_url": "https://github.com/rust-lang/rust/commit/0b7e28a1610924a27471ffdb59a2885709b3b415", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b7e28a1610924a27471ffdb59a2885709b3b415/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa69777ea2902208b24b3fd77767d577ceaf6386", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa69777ea2902208b24b3fd77767d577ceaf6386", "html_url": "https://github.com/rust-lang/rust/commit/aa69777ea2902208b24b3fd77767d577ceaf6386"}, {"sha": "213fd1f37f272e352ceb7dcdaddcd90b1da54d61", "url": "https://api.github.com/repos/rust-lang/rust/commits/213fd1f37f272e352ceb7dcdaddcd90b1da54d61", "html_url": "https://github.com/rust-lang/rust/commit/213fd1f37f272e352ceb7dcdaddcd90b1da54d61"}], "stats": {"total": 168, "additions": 115, "deletions": 53}, "files": [{"sha": "cd003aa8dab708cc570b9e6800de28146af9f3f4", "filename": "src/librustc/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7e28a1610924a27471ffdb59a2885709b3b415/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7e28a1610924a27471ffdb59a2885709b3b415/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=0b7e28a1610924a27471ffdb59a2885709b3b415", "patch": "@@ -12,6 +12,7 @@ mod named_anon_conflict;\n mod placeholder_error;\n mod outlives_closure;\n mod static_impl_trait;\n+mod trait_impl_difference;\n mod util;\n \n impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n@@ -73,6 +74,7 @@ impl<'cx, 'tcx> NiceRegionError<'cx, 'tcx> {\n             .or_else(|| self.try_report_anon_anon_conflict())\n             .or_else(|| self.try_report_outlives_closure())\n             .or_else(|| self.try_report_static_impl_trait())\n+            .or_else(|| self.try_report_impl_not_conforming_to_trait())\n     }\n \n     pub fn get_regions(&self) -> (Span, ty::Region<'tcx>, ty::Region<'tcx>) {"}, {"sha": "0194300c507214356bbf9203e3f15176d29796a4", "filename": "src/librustc/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0b7e28a1610924a27471ffdb59a2885709b3b415/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7e28a1610924a27471ffdb59a2885709b3b415/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=0b7e28a1610924a27471ffdb59a2885709b3b415", "patch": "@@ -0,0 +1,59 @@\n+//! Error Reporting for `impl` items that do not match the obligations from their `trait`.\n+\n+use syntax_pos::Span;\n+use crate::ty::Ty;\n+use crate::infer::{ValuePairs, Subtype};\n+use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n+use crate::infer::lexical_region_resolve::RegionResolutionError;\n+use crate::util::common::ErrorReported;\n+use crate::traits::ObligationCauseCode::CompareImplMethodObligation;\n+\n+impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n+    /// Print the error message for lifetime errors when the `impl` doesn't conform to the `trait`.\n+    pub(super) fn try_report_impl_not_conforming_to_trait(&self) -> Option<ErrorReported> {\n+        if let Some(ref error) = self.error {\n+            debug!(\"try_report_impl_not_conforming_to_trait {:?}\", error);\n+            if let RegionResolutionError::SubSupConflict(\n+                _,\n+                var_origin,\n+                sub_origin,\n+                _sub,\n+                sup_origin,\n+                _sup,\n+            ) = error.clone() {\n+                match (&sup_origin, &sub_origin) {\n+                    (&Subtype(ref sup_trace), &Subtype(ref sub_trace)) => {\n+                        if let (\n+                            ValuePairs::Types(sub_expected_found),\n+                            ValuePairs::Types(sup_expected_found),\n+                            CompareImplMethodObligation { trait_item_def_id, .. },\n+                        ) = (&sub_trace.values, &sup_trace.values, &sub_trace.cause.code) {\n+                            if sup_expected_found == sub_expected_found {\n+                                self.emit_err(\n+                                    var_origin.span(),\n+                                    sub_expected_found.expected,\n+                                    sub_expected_found.found,\n+                                    self.tcx().def_span(*trait_item_def_id),\n+                                );\n+                                return Some(ErrorReported);\n+                            }\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n+        }\n+        None\n+    }\n+\n+    fn emit_err(&self, sp: Span, expected: Ty<'tcx>, found: Ty<'tcx>, impl_sp: Span) {\n+        let mut err = self.tcx().sess.struct_span_err(\n+            sp,\n+            \"`impl` item signature doesn't match `trait` item signature\",\n+        );\n+        err.note(&format!(\"expected `{:?}`\\n   found `{:?}`\", expected, found));\n+        err.span_label(sp, &format!(\"found {:?}\", found));\n+        err.span_label(impl_sp, &format!(\"expected {:?}\", expected));\n+        err.emit();\n+    }\n+}"}, {"sha": "eca9a67fcb387ec530c223b80b46e51bea192d50", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b7e28a1610924a27471ffdb59a2885709b3b415/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7e28a1610924a27471ffdb59a2885709b3b415/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs?ref=0b7e28a1610924a27471ffdb59a2885709b3b415", "patch": "@@ -1,3 +1,5 @@\n+// ignore-x86\n+// ^ due to stderr output differences\n use std::ops::Deref;\n trait Trait {}\n \n@@ -6,9 +8,9 @@ struct Struct;\n impl Deref for Struct {\n     type Target = dyn Trait;\n     fn deref(&self) -> &dyn Trait {\n+    //~^ ERROR `impl` item signature doesn't match `trait` item signature\n         unimplemented!();\n     }\n }\n-//~^^^^ ERROR cannot infer an appropriate lifetime for lifetime parameter\n \n fn main() {}"}, {"sha": "d3862e3d4df6092c366c253d61dc9a18ad4680d2", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0b7e28a1610924a27471ffdb59a2885709b3b415/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7e28a1610924a27471ffdb59a2885709b3b415/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=0b7e28a1610924a27471ffdb59a2885709b3b415", "patch": "@@ -1,21 +1,16 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in generic type due to conflicting requirements\n-  --> $DIR/mismatched_trait_impl-2.rs:8:5\n+error: `impl` item signature doesn't match `trait` item signature\n+  --> $DIR/mismatched_trait_impl-2.rs:10:5\n    |\n LL |     fn deref(&self) -> &dyn Trait {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&Struct) -> &dyn Trait\n+   | \n+  ::: $SRC_DIR/libcore/ops/deref.rs:LL:COL\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 8:5...\n-  --> $DIR/mismatched_trait_impl-2.rs:8:5\n+LL |     fn deref(&self) -> &Self::Target;\n+   |     --------------------------------- expected fn(&Struct) -> &(dyn Trait + 'static)\n    |\n-LL | /     fn deref(&self) -> &dyn Trait {\n-LL | |         unimplemented!();\n-LL | |     }\n-   | |_____^\n-   = note: ...but the lifetime must also be valid for the static lifetime...\n-   = note: ...so that the method type is compatible with trait:\n-           expected fn(&Struct) -> &(dyn Trait + 'static)\n-              found fn(&Struct) -> &dyn Trait\n+   = note: expected `fn(&Struct) -> &(dyn Trait + 'static)`\n+              found `fn(&Struct) -> &dyn Trait`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`."}, {"sha": "c245d78ae828fc77f3f494a1c348a3fa3414a691", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.nll.stderr", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0b7e28a1610924a27471ffdb59a2885709b3b415/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7e28a1610924a27471ffdb59a2885709b3b415/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.nll.stderr?ref=0b7e28a1610924a27471ffdb59a2885709b3b415", "patch": "@@ -1,25 +1,14 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter 'a in generic type due to conflicting requirements\n+error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/mismatched_trait_impl.rs:9:5\n    |\n+LL |     fn foo(&self, x: &'a u32, y: &u32) -> &'a u32;\n+   |     ---------------------------------------------- expected fn(&i32, &'a u32, &u32) -> &'a u32\n+...\n LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&i32, &u32, &u32) -> &u32\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 9:5...\n-  --> $DIR/mismatched_trait_impl.rs:9:5\n-   |\n-LL | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n-LL | |         x\n-LL | |     }\n-   | |_____^\n-note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the method body at 9:32...\n-  --> $DIR/mismatched_trait_impl.rs:9:32\n-   |\n-LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n-   |                                ^^\n-   = note: ...so that the method type is compatible with trait:\n-           expected fn(&i32, &'a u32, &u32) -> &'a u32\n-              found fn(&i32, &u32, &u32) -> &u32\n+   = note: expected `fn(&i32, &'a u32, &u32) -> &'a u32`\n+              found `fn(&i32, &u32, &u32) -> &u32`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`."}, {"sha": "b9e02e967c126b6d48974e5a78d9d047709ba465", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7e28a1610924a27471ffdb59a2885709b3b415/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7e28a1610924a27471ffdb59a2885709b3b415/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.rs?ref=0b7e28a1610924a27471ffdb59a2885709b3b415", "patch": "@@ -6,7 +6,7 @@ trait Get {\n }\n \n impl Get for i32 {\n-    fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n+    fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR `impl` item signature doesn't match\n         x //~ ERROR lifetime mismatch\n     }\n }"}, {"sha": "bc302e91c1c518f0b0075ea0d4646c083796a79a", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0b7e28a1610924a27471ffdb59a2885709b3b415/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7e28a1610924a27471ffdb59a2885709b3b415/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=0b7e28a1610924a27471ffdb59a2885709b3b415", "patch": "@@ -1,24 +1,14 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter 'a in generic type due to conflicting requirements\n+error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/mismatched_trait_impl.rs:9:5\n    |\n+LL |     fn foo(&self, x: &'a u32, y: &u32) -> &'a u32;\n+   |     ---------------------------------------------- expected fn(&i32, &'a u32, &u32) -> &'a u32\n+...\n LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&i32, &u32, &u32) -> &u32\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the method body at 9:5...\n-  --> $DIR/mismatched_trait_impl.rs:9:5\n-   |\n-LL | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n-LL | |         x\n-LL | |     }\n-   | |_____^\n-note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the method body at 9:32...\n-  --> $DIR/mismatched_trait_impl.rs:9:32\n-   |\n-LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n-   |                                ^^\n-   = note: ...so that the method type is compatible with trait:\n-           expected fn(&i32, &'a u32, &u32) -> &'a u32\n-              found fn(&i32, &u32, &u32) -> &u32\n+   = note: expected `fn(&i32, &'a u32, &u32) -> &'a u32`\n+              found `fn(&i32, &u32, &u32) -> &u32`\n \n error[E0623]: lifetime mismatch\n   --> $DIR/mismatched_trait_impl.rs:10:9\n@@ -32,4 +22,3 @@ LL |         x\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0495`."}, {"sha": "2ce1a0f45465170d808a29005ed8d4f251c4069f", "filename": "src/test/ui/lifetimes/lifetime-mismatch-between-trait-and-impl.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b7e28a1610924a27471ffdb59a2885709b3b415/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7e28a1610924a27471ffdb59a2885709b3b415/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.rs?ref=0b7e28a1610924a27471ffdb59a2885709b3b415", "patch": "@@ -0,0 +1,12 @@\n+trait Foo {\n+    fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32;\n+}\n+\n+impl Foo for () {\n+    fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {\n+    //~^ ERROR `impl` item signature doesn't match `trait` item signature\n+        if x > y { x } else { y }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d07f305954b6e247d2af1b2f25b5e312d961fe56", "filename": "src/test/ui/lifetimes/lifetime-mismatch-between-trait-and-impl.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b7e28a1610924a27471ffdb59a2885709b3b415/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7e28a1610924a27471ffdb59a2885709b3b415/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr?ref=0b7e28a1610924a27471ffdb59a2885709b3b415", "patch": "@@ -0,0 +1,14 @@\n+error: `impl` item signature doesn't match `trait` item signature\n+  --> $DIR/lifetime-mismatch-between-trait-and-impl.rs:6:5\n+   |\n+LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32;\n+   |     ------------------------------------------- expected fn(&i32, &'a i32) -> &'a i32\n+...\n+LL |     fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&i32, &i32) -> &i32\n+   |\n+   = note: expected `fn(&i32, &'a i32) -> &'a i32`\n+              found `fn(&i32, &i32) -> &i32`\n+\n+error: aborting due to previous error\n+"}, {"sha": "b3cb83f94e053c82dd8c4eb97bff0dbe74807ff2", "filename": "src/test/ui/reject-specialized-drops-8142.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7e28a1610924a27471ffdb59a2885709b3b415/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7e28a1610924a27471ffdb59a2885709b3b415/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs?ref=0b7e28a1610924a27471ffdb59a2885709b3b415", "patch": "@@ -52,6 +52,6 @@ impl<One>         Drop for V<One,One>     { fn drop(&mut self) { } } // REJECT\n //~^ ERROR Implementations of Drop cannot be specialized\n \n impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n-//~^ ERROR cannot infer an appropriate lifetime\n+//~^ ERROR cannot infer an appropriate lifetime for lifetime parameter `'lw`\n \n pub fn main() { }"}]}