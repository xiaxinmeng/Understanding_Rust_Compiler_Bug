{"sha": "21476e7d6ce80640ff39eb091584092076f13359", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNDc2ZTdkNmNlODA2NDBmZjM5ZWIwOTE1ODQwOTIwNzZmMTMzNTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-02T01:48:43Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-20T01:08:42Z"}, "message": "--bless post no async_await gates in tests.", "tree": {"sha": "f2d236d51eaaa1b853460f4642d1adeb238fb899", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2d236d51eaaa1b853460f4642d1adeb238fb899"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21476e7d6ce80640ff39eb091584092076f13359", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21476e7d6ce80640ff39eb091584092076f13359", "html_url": "https://github.com/rust-lang/rust/commit/21476e7d6ce80640ff39eb091584092076f13359", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21476e7d6ce80640ff39eb091584092076f13359/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "228015acd29ceaaed815a0430da462648e44ea42", "url": "https://api.github.com/repos/rust-lang/rust/commits/228015acd29ceaaed815a0430da462648e44ea42", "html_url": "https://github.com/rust-lang/rust/commit/228015acd29ceaaed815a0430da462648e44ea42"}], "stats": {"total": 498, "additions": 248, "deletions": 250}, "files": [{"sha": "bc42a46ae1021bb0163d7975b34f47dde528502c", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,17 +1,17 @@\n error[E0267]: `break` inside of an async block\n-  --> $DIR/async-block-control-flow-static-semantics.rs:35:9\n+  --> $DIR/async-block-control-flow-static-semantics.rs:33:9\n    |\n LL |         break 0u8;\n    |         ^^^^^^^^^ cannot break inside of an async block\n \n error[E0267]: `break` inside of an async block\n-  --> $DIR/async-block-control-flow-static-semantics.rs:42:13\n+  --> $DIR/async-block-control-flow-static-semantics.rs:40:13\n    |\n LL |             break 0u8;\n    |             ^^^^^^^^^ cannot break inside of an async block\n \n error[E0308]: mismatched types\n-  --> $DIR/async-block-control-flow-static-semantics.rs:15:43\n+  --> $DIR/async-block-control-flow-static-semantics.rs:13:43\n    |\n LL | fn return_targets_async_block_not_fn() -> u8 {\n    |    ---------------------------------      ^^ expected u8, found ()\n@@ -22,7 +22,7 @@ LL | fn return_targets_async_block_not_fn() -> u8 {\n               found type `()`\n \n error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n-  --> $DIR/async-block-control-flow-static-semantics.rs:20:39\n+  --> $DIR/async-block-control-flow-static-semantics.rs:18:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected u8, found ()\n@@ -32,7 +32,7 @@ LL |     let _: &dyn Future<Output = ()> = &block;\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n-  --> $DIR/async-block-control-flow-static-semantics.rs:29:39\n+  --> $DIR/async-block-control-flow-static-semantics.rs:27:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected u8, found ()\n@@ -42,7 +42,7 @@ LL |     let _: &dyn Future<Output = ()> = &block;\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == u8`\n-  --> $DIR/async-block-control-flow-static-semantics.rs:24:55\n+  --> $DIR/async-block-control-flow-static-semantics.rs:22:55\n    |\n LL | async fn return_targets_async_block_not_async_fn() -> u8 {\n    |                                                       ^^ expected (), found u8\n@@ -52,7 +52,7 @@ LL | async fn return_targets_async_block_not_async_fn() -> u8 {\n    = note: the return type of a function must have a statically known size\n \n error[E0308]: mismatched types\n-  --> $DIR/async-block-control-flow-static-semantics.rs:50:44\n+  --> $DIR/async-block-control-flow-static-semantics.rs:48:44\n    |\n LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n    |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n@@ -63,7 +63,7 @@ LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/async-block-control-flow-static-semantics.rs:59:50\n+  --> $DIR/async-block-control-flow-static-semantics.rs:57:50\n    |\n LL | fn rethrow_targets_async_block_not_async_fn() -> Result<u8, MyErr> {\n    |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()"}, {"sha": "47441f5e4efcefc2d7c6f352c772dce285777581", "filename": "src/test/ui/async-await/async-error-span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,11 +1,11 @@\n error[E0698]: type inside `async` object must be known in this context\n-  --> $DIR/async-error-span.rs:13:9\n+  --> $DIR/async-error-span.rs:12:9\n    |\n LL |     let a;\n    |         ^ cannot infer type\n    |\n note: the type is part of the `async` object because of this `await`\n-  --> $DIR/async-error-span.rs:14:5\n+  --> $DIR/async-error-span.rs:13:5\n    |\n LL |     get_future().await;\n    |     ^^^^^^^^^^^^^^^^^^"}, {"sha": "6b4fff2dc6844bbe60054690591c0b1a974c0067", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,43 +1,43 @@\n error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:52:5\n+  --> $DIR/async-fn-nonsend.rs:50:5\n    |\n LL |     assert_send(local_dropped_before_await());\n    |     ^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n    |\n    = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `impl std::fmt::Debug`\n    = note: required because it appears within the type `{impl std::fmt::Debug, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:23:39: 28:2 {impl std::fmt::Debug, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:23:39: 28:2 {impl std::fmt::Debug, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:21:39: 26:2 {impl std::fmt::Debug, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:21:39: 26:2 {impl std::fmt::Debug, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n note: required by `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:49:1\n+  --> $DIR/async-fn-nonsend.rs:47:1\n    |\n LL | fn assert_send(_: impl Send) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:54:5\n+  --> $DIR/async-fn-nonsend.rs:52:5\n    |\n LL |     assert_send(non_send_temporary_in_match());\n    |     ^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n    |\n    = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `impl std::fmt::Debug`\n    = note: required because it appears within the type `{fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:30:40: 39:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:30:40: 39:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:28:40: 37:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:28:40: 37:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n note: required by `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:49:1\n+  --> $DIR/async-fn-nonsend.rs:47:1\n    |\n LL | fn assert_send(_: impl Send) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `dyn std::fmt::Write` cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:56:5\n+  --> $DIR/async-fn-nonsend.rs:54:5\n    |\n LL |     assert_send(non_sync_with_method_call());\n    |     ^^^^^^^^^^^ `dyn std::fmt::Write` cannot be sent between threads safely\n@@ -47,18 +47,18 @@ LL |     assert_send(non_sync_with_method_call());\n    = note: required because it appears within the type `std::fmt::Formatter<'_>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&mut std::fmt::Formatter<'_>`\n    = note: required because it appears within the type `for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:41:38: 47:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:41:38: 47:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n note: required by `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:49:1\n+  --> $DIR/async-fn-nonsend.rs:47:1\n    |\n LL | fn assert_send(_: impl Send) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n-  --> $DIR/async-fn-nonsend.rs:56:5\n+  --> $DIR/async-fn-nonsend.rs:54:5\n    |\n LL |     assert_send(non_sync_with_method_call());\n    |     ^^^^^^^^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n@@ -72,12 +72,12 @@ LL |     assert_send(non_sync_with_method_call());\n    = note: required because it appears within the type `std::fmt::Formatter<'_>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&mut std::fmt::Formatter<'_>`\n    = note: required because it appears within the type `for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:41:38: 47:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:41:38: 47:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n note: required by `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:49:1\n+  --> $DIR/async-fn-nonsend.rs:47:1\n    |\n LL | fn assert_send(_: impl Send) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "9694742200ef07d658e0a5606156f0f04f53a4ba", "filename": "src/test/ui/async-await/async-fn-path-elision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0726]: implicit elided lifetime not allowed here\n-  --> $DIR/async-fn-path-elision.rs:8:20\n+  --> $DIR/async-fn-path-elision.rs:5:20\n    |\n LL | async fn error(lt: HasLifetime) {\n    |                    ^^^^^^^^^^^- help: indicate the anonymous lifetime: `<'_>`"}, {"sha": "c95fe17348877a2627a5a6ee480d9af99071c515", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,29 +1,29 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:14:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:12:5\n    |\n LL |     S::f();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:15:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:13:5\n    |\n LL |     f();\n    |     ^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:19:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:17:5\n    |\n LL |     S::f();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:20:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:18:5\n    |\n LL |     f();\n    |     ^^^ call to unsafe function"}, {"sha": "f1a22cda51b2135af61fa189e5a9d9d2e7e07ec6", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-various-positions.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,19 +1,19 @@\n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:6:13\n+  --> $DIR/2015-edition-error-various-positions.rs:5:13\n    |\n LL |     pub mod await {\n    |             ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n note: lint level defined here\n-  --> $DIR/2015-edition-error-various-positions.rs:3:9\n+  --> $DIR/2015-edition-error-various-positions.rs:2:9\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:8:20\n+  --> $DIR/2015-edition-error-various-positions.rs:7:20\n    |\n LL |         pub struct await;\n    |                    ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -22,7 +22,7 @@ LL |         pub struct await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:12:16\n+  --> $DIR/2015-edition-error-various-positions.rs:11:16\n    |\n LL | use outer_mod::await::await;\n    |                ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -31,7 +31,7 @@ LL | use outer_mod::await::await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:12:23\n+  --> $DIR/2015-edition-error-various-positions.rs:11:23\n    |\n LL | use outer_mod::await::await;\n    |                       ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -40,7 +40,7 @@ LL | use outer_mod::await::await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:17:14\n+  --> $DIR/2015-edition-error-various-positions.rs:16:14\n    |\n LL | struct Foo { await: () }\n    |              ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -49,7 +49,7 @@ LL | struct Foo { await: () }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:21:15\n+  --> $DIR/2015-edition-error-various-positions.rs:20:15\n    |\n LL | impl Foo { fn await() {} }\n    |               ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -58,7 +58,7 @@ LL | impl Foo { fn await() {} }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:25:14\n+  --> $DIR/2015-edition-error-various-positions.rs:24:14\n    |\n LL | macro_rules! await {\n    |              ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -67,7 +67,7 @@ LL | macro_rules! await {\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:32:5\n+  --> $DIR/2015-edition-error-various-positions.rs:31:5\n    |\n LL |     await!();\n    |     ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -76,7 +76,7 @@ LL |     await!();\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:35:11\n+  --> $DIR/2015-edition-error-various-positions.rs:34:11\n    |\n LL |     match await { await => {} }\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -85,7 +85,7 @@ LL |     match await { await => {} }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:35:19\n+  --> $DIR/2015-edition-error-various-positions.rs:34:19\n    |\n LL |     match await { await => {} }\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`"}, {"sha": "05f28d0a5b2267f6b680b1649a613778b73205cf", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error-in-non-macro-position.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:7:13\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:6:13\n    |\n LL |     pub mod await {\n    |             ^^^^^ expected identifier, found reserved keyword\n@@ -9,7 +9,7 @@ LL |     pub mod r#await {\n    |             ^^^^^^^\n \n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:8:20\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:7:20\n    |\n LL |         pub struct await;\n    |                    ^^^^^ expected identifier, found reserved keyword\n@@ -19,7 +19,7 @@ LL |         pub struct r#await;\n    |                    ^^^^^^^\n \n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:11:22\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:10:22\n    |\n LL | use self::outer_mod::await::await;\n    |                      ^^^^^ expected identifier, found reserved keyword\n@@ -29,7 +29,7 @@ LL | use self::outer_mod::r#await::await;\n    |                      ^^^^^^^\n \n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:11:29\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:10:29\n    |\n LL | use self::outer_mod::await::await;\n    |                             ^^^^^ expected identifier, found reserved keyword\n@@ -39,7 +39,7 @@ LL | use self::outer_mod::await::r#await;\n    |                             ^^^^^^^\n \n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:14:14\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:13:14\n    |\n LL | struct Foo { await: () }\n    |              ^^^^^ expected identifier, found reserved keyword\n@@ -49,7 +49,7 @@ LL | struct Foo { r#await: () }\n    |              ^^^^^^^\n \n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:17:15\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:16:15\n    |\n LL | impl Foo { fn await() {} }\n    |               ^^^^^ expected identifier, found reserved keyword\n@@ -59,7 +59,7 @@ LL | impl Foo { fn r#await() {} }\n    |               ^^^^^^^\n \n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:20:14\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:19:14\n    |\n LL | macro_rules! await {\n    |              ^^^^^ expected identifier, found reserved keyword"}, {"sha": "7caa9f26bc2f848ab341347a45419b24a15d6e7d", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.stderr", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,133 +1,133 @@\n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:10:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:8:13\n    |\n LL |     let _ = await bar();\n    |             ^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:14:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:12:13\n    |\n LL |     let _ = await? bar();\n    |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await?`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:18:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:16:13\n    |\n LL |     let _ = await bar()?;\n    |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `bar()?.await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:23:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:21:13\n    |\n LL |     let _ = await { bar() };\n    |             ^^^^^^^^^^^^^^^ help: `await` is a postfix operation: `{ bar() }.await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:27:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:25:13\n    |\n LL |     let _ = await(bar());\n    |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `(bar()).await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:31:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:29:13\n    |\n LL |     let _ = await { bar() }?;\n    |             ^^^^^^^^^^^^^^^ help: `await` is a postfix operation: `{ bar() }.await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:35:14\n+  --> $DIR/incorrect-syntax-suggestions.rs:33:14\n    |\n LL |     let _ = (await bar())?;\n    |              ^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:39:24\n+  --> $DIR/incorrect-syntax-suggestions.rs:37:24\n    |\n LL |     let _ = bar().await();\n    |                        ^^ help: `await` is not a method call, remove the parentheses\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:43:24\n+  --> $DIR/incorrect-syntax-suggestions.rs:41:24\n    |\n LL |     let _ = bar().await()?;\n    |                        ^^ help: `await` is not a method call, remove the parentheses\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:55:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:53:13\n    |\n LL |     let _ = await bar();\n    |             ^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:60:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:58:13\n    |\n LL |     let _ = await? bar();\n    |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await?`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:65:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:63:13\n    |\n LL |     let _ = await bar()?;\n    |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `bar()?.await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:70:14\n+  --> $DIR/incorrect-syntax-suggestions.rs:68:14\n    |\n LL |     let _ = (await bar())?;\n    |              ^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:75:24\n+  --> $DIR/incorrect-syntax-suggestions.rs:73:24\n    |\n LL |     let _ = bar().await();\n    |                        ^^ help: `await` is not a method call, remove the parentheses\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:80:24\n+  --> $DIR/incorrect-syntax-suggestions.rs:78:24\n    |\n LL |     let _ = bar().await()?;\n    |                        ^^ help: `await` is not a method call, remove the parentheses\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:108:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:106:13\n    |\n LL |     let _ = await!(bar());\n    |             ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:112:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:110:13\n    |\n LL |     let _ = await!(bar())?;\n    |             ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:117:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:115:17\n    |\n LL |         let _ = await!(bar())?;\n    |                 ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:125:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:123:17\n    |\n LL |         let _ = await!(bar())?;\n    |                 ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: expected expression, found `=>`\n-  --> $DIR/incorrect-syntax-suggestions.rs:133:25\n+  --> $DIR/incorrect-syntax-suggestions.rs:131:25\n    |\n LL |     match await { await => () }\n    |                   ----- ^^ expected expression\n    |                   |\n    |                   while parsing this incorrect await expression\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:133:11\n+  --> $DIR/incorrect-syntax-suggestions.rs:131:11\n    |\n LL |     match await { await => () }\n    |           ^^^^^^^^^^^^^^^^^^^^^ help: `await` is a postfix operation: `{ await => () }.await`\n \n error: expected one of `.`, `?`, `{`, or an operator, found `}`\n-  --> $DIR/incorrect-syntax-suggestions.rs:136:1\n+  --> $DIR/incorrect-syntax-suggestions.rs:134:1\n    |\n LL |     match await { await => () }\n    |     -----                      - expected one of `.`, `?`, `{`, or an operator here\n@@ -138,103 +138,103 @@ LL | }\n    | ^ unexpected token\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:55:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:53:13\n    |\n LL | fn foo9() -> Result<(), ()> {\n    |    ---- this is not `async`\n LL |     let _ = await bar();\n    |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:60:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:58:13\n    |\n LL | fn foo10() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = await? bar();\n    |             ^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:65:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:63:13\n    |\n LL | fn foo11() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = await bar()?;\n    |             ^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:70:14\n+  --> $DIR/incorrect-syntax-suggestions.rs:68:14\n    |\n LL | fn foo12() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = (await bar())?;\n    |              ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:75:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:73:13\n    |\n LL | fn foo13() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await();\n    |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:80:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:78:13\n    |\n LL | fn foo14() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await()?;\n    |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:85:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:83:13\n    |\n LL | fn foo15() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await;\n    |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:89:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:87:13\n    |\n LL | fn foo16() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await?;\n    |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:94:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:92:17\n    |\n LL |     fn foo() -> Result<(), ()> {\n    |        --- this is not `async`\n LL |         let _ = bar().await?;\n    |                 ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:101:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:99:17\n    |\n LL |     let foo = || {\n    |               -- this is not `async`\n LL |         let _ = bar().await?;\n    |                 ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:117:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:115:17\n    |\n LL |     fn foo() -> Result<(), ()> {\n    |        --- this is not `async`\n LL |         let _ = await!(bar())?;\n    |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:125:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:123:17\n    |\n LL |     let foo = || {\n    |               -- this is not `async`\n LL |         let _ = await!(bar())?;\n    |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n-  --> $DIR/incorrect-syntax-suggestions.rs:18:19\n+  --> $DIR/incorrect-syntax-suggestions.rs:16:19\n    |\n LL |     let _ = await bar()?;\n    |                   ^^^^^^ the `?` operator cannot be applied to type `impl std::future::Future`"}, {"sha": "2bf1e77f09b3fb1bf0edcdc46a76906944281533", "filename": "src/test/ui/async-await/dont-print-desugared-async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/dont-print-desugared-async.rs:6:20\n+  --> $DIR/dont-print-desugared-async.rs:5:20\n    |\n LL | async fn async_fn(&ref mut s: &[i32]) {}\n    |                   -^^^^^^^^^"}, {"sha": "c87e0bc221de7a8a47dac3ff816f0640d0e8441d", "filename": "src/test/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/dont-suggest-missing-await.rs:16:18\n+  --> $DIR/dont-suggest-missing-await.rs:14:18\n    |\n LL |         take_u32(x)\n    |                  ^ expected u32, found opaque type"}, {"sha": "aa04a613f47c1298318fbb9184620c0982fd449e", "filename": "src/test/ui/async-await/drop-order/drop-order-locals-are-hidden.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,23 +1,23 @@\n error[E0425]: cannot find value `__arg1` in this scope\n-  --> $DIR/drop-order-locals-are-hidden.rs:7:16\n+  --> $DIR/drop-order-locals-are-hidden.rs:4:16\n    |\n LL |     assert_eq!(__arg1, (1, 2, 3));\n    |                ^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `__arg2` in this scope\n-  --> $DIR/drop-order-locals-are-hidden.rs:8:16\n+  --> $DIR/drop-order-locals-are-hidden.rs:5:16\n    |\n LL |     assert_eq!(__arg2, 4);\n    |                ^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `__arg0` in this scope\n-  --> $DIR/drop-order-locals-are-hidden.rs:12:16\n+  --> $DIR/drop-order-locals-are-hidden.rs:9:16\n    |\n LL |     assert_eq!(__arg0, 1);\n    |                ^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `__arg1` in this scope\n-  --> $DIR/drop-order-locals-are-hidden.rs:13:16\n+  --> $DIR/drop-order-locals-are-hidden.rs:10:16\n    |\n LL |     assert_eq!(__arg1, 2);\n    |                ^^^^^^ not found in this scope"}, {"sha": "d3f88af09d13434ad7ca987432f2ac66f6d1ac6e", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,59 +1,59 @@\n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:5:1\n+  --> $DIR/edition-deny-async-fns-2015.rs:3:1\n    |\n LL | async fn foo() {}\n    | ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:7:12\n+  --> $DIR/edition-deny-async-fns-2015.rs:5:12\n    |\n LL | fn baz() { async fn foo() {} }\n    |            ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:10:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:8:5\n    |\n LL |     async fn bar() {}\n    |     ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:9:1\n+  --> $DIR/edition-deny-async-fns-2015.rs:7:1\n    |\n LL | async fn async_baz() {\n    | ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:16:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:14:5\n    |\n LL |     async fn foo() {}\n    |     ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:20:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:18:5\n    |\n LL |     async fn foo() {}\n    |     ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:38:9\n+  --> $DIR/edition-deny-async-fns-2015.rs:36:9\n    |\n LL |         async fn bar() {}\n    |         ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:28:9\n+  --> $DIR/edition-deny-async-fns-2015.rs:26:9\n    |\n LL |         async fn foo() {}\n    |         ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:33:13\n+  --> $DIR/edition-deny-async-fns-2015.rs:31:13\n    |\n LL |             async fn bar() {}\n    |             ^^^^^\n \n error[E0706]: trait fns cannot be declared `async`\n-  --> $DIR/edition-deny-async-fns-2015.rs:20:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:18:5\n    |\n LL |     async fn foo() {}\n    |     ^^^^^^^^^^^^^^^^^"}, {"sha": "5eb4b548717371107b022ab0fb562d3b7bbb698b", "filename": "src/test/ui/async-await/issue-61452.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,13 +1,13 @@\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-61452.rs:5:5\n+  --> $DIR/issue-61452.rs:4:5\n    |\n LL | pub async fn f(x: Option<usize>) {\n    |                - help: consider changing this to be mutable: `mut x`\n LL |     x.take();\n    |     ^ cannot borrow as mutable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/issue-61452.rs:10:5\n+  --> $DIR/issue-61452.rs:9:5\n    |\n LL | pub async fn g(x: usize) {\n    |                -"}, {"sha": "12fb77d8dd637efccac6bfb1cc21701d142ab6c8", "filename": "src/test/ui/async-await/issue-61949-self-return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error: `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n-  --> $DIR/issue-61949-self-return-type.rs:12:40\n+  --> $DIR/issue-61949-self-return-type.rs:11:40\n    |\n LL |     pub async fn new(_bar: &'a i32) -> Self {\n    |                                        ^^^^"}, {"sha": "6c3c8889da7cee629183bb3bb48a6d60a0cbe811", "filename": "src/test/ui/async-await/issues/issue-51719.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-51719.rs:10:19\n+  --> $DIR/issue-51719.rs:8:19\n    |\n LL |     let _gen = || foo().await;\n    |                -- ^^^^^^^^^^^ only allowed inside `async` functions and blocks"}, {"sha": "e50c78534f852caa846b526cea558a64feac3f30", "filename": "src/test/ui/async-await/issues/issue-51751.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-51751.rs:11:20\n+  --> $DIR/issue-51751.rs:9:20\n    |\n LL | fn main() {\n    |    ---- this is not `async`"}, {"sha": "4d361c824dd6da8de946c3789dc1aa400d66646e", "filename": "src/test/ui/async-await/issues/issue-61187.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0596]: cannot borrow `data` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-61187.rs:8:5\n+  --> $DIR/issue-61187.rs:6:5\n    |\n LL | async fn response(data: Vec<u8>) {\n    |                   ---- help: consider changing this to be mutable: `mut data`"}, {"sha": "cd155f0fc32b6c44f2a2557d339a4d3ae449a910", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,13 +1,13 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:8:5\n+  --> $DIR/issue-62009-1.rs:6:5\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     async { let (); }.await;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:10:5\n+  --> $DIR/issue-62009-1.rs:8:5\n    |\n LL |   fn main() {\n    |      ---- this is not `async`\n@@ -19,19 +19,19 @@ LL | |     }.await;\n    | |___________^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:14:5\n+  --> $DIR/issue-62009-1.rs:12:5\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n ...\n LL |     (|_| 2333).await;\n    |     ^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n-error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:14:5: 14:15]: std::future::Future` is not satisfied\n-  --> $DIR/issue-62009-1.rs:14:5\n+error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]: std::future::Future` is not satisfied\n+  --> $DIR/issue-62009-1.rs:12:5\n    |\n LL |     (|_| 2333).await;\n-   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:14:5: 14:15]`\n+   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n    |\n    = note: required by `std::future::poll_with_tls_context`\n "}, {"sha": "22610fe54a4cb1d8ed2f4eedb0fcf166829bb034", "filename": "src/test/ui/async-await/issues/issue-63388-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/issue-63388-1.rs:14:10\n+  --> $DIR/issue-63388-1.rs:12:10\n    |\n LL |     ) -> &dyn Foo\n    |          ^^^^^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#22r\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-63388-1.rs:15:5\n+  --> $DIR/issue-63388-1.rs:13:5\n    |\n LL |       async fn do_sth<'a>(\n    |                       -- lifetime `'a` defined here"}, {"sha": "a54cadb0cd2517abb6b15a82daf488f2f4d41cce", "filename": "src/test/ui/async-await/issues/issue-63388-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/issue-63388-1.rs:14:10\n+  --> $DIR/issue-63388-1.rs:12:10\n    |\n LL |         &'a self, foo: &dyn Foo\n    |         -------- this parameter and the return type are declared with different lifetimes..."}, {"sha": "7781af89deae2d5b9d80fb171e03cb629e9b1557", "filename": "src/test/ui/async-await/issues/issue-63388-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-63388-2.rs:14:10\n+  --> $DIR/issue-63388-2.rs:12:10\n    |\n LL |     ) -> &dyn Foo\n    |          ^ help: consider using the named lifetime: `&'a`"}, {"sha": "1edeb3d54938968b34816c88ecf5e2210989e390", "filename": "src/test/ui/async-await/issues/issue-63388-2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,25 +1,25 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-63388-2.rs:14:10\n+  --> $DIR/issue-63388-2.rs:12:10\n    |\n LL |     ) -> &dyn Foo\n    |          ^ help: consider using the named lifetime: `&'a`\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `foo` or `bar`\n \n error: cannot infer an appropriate lifetime\n-  --> $DIR/issue-63388-2.rs:13:9\n+  --> $DIR/issue-63388-2.rs:11:9\n    |\n LL |         foo: &dyn Foo, bar: &'a dyn Foo\n    |         ^^^ ...but this borrow...\n LL |     ) -> &dyn Foo\n    |          -------- this return type evaluates to the `'static` lifetime...\n    |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 13:14\n-  --> $DIR/issue-63388-2.rs:13:14\n+note: ...can't outlive the lifetime '_ as defined on the method body at 11:14\n+  --> $DIR/issue-63388-2.rs:11:14\n    |\n LL |         foo: &dyn Foo, bar: &'a dyn Foo\n    |              ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 13:14\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 11:14\n    |\n LL |     ) -> &dyn Foo + '_\n    |          ^^^^^^^^^^^^^"}, {"sha": "49ebf414c550bb4242f3182b6b35aca02bdf8fa1", "filename": "src/test/ui/async-await/issues/non-async-enclosing-span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/non-async-enclosing-span.rs:10:13\n+  --> $DIR/non-async-enclosing-span.rs:9:13\n    |\n LL | fn main() {\n    |    ---- this is not `async`"}, {"sha": "59d7728d41c4cfa2a67d27c3495a8aaa7611f8bf", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-no-fg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error: ambiguous lifetime bound in `impl Trait`\n-  --> $DIR/ret-impl-trait-no-fg.rs:11:64\n+  --> $DIR/ret-impl-trait-no-fg.rs:9:64\n    |\n LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n    |                                                                ^^^^^^^^^^^^^^^^^^ neither `'a` nor `'b` outlives the other"}, {"sha": "d86e84033b8cd688191c48f0926dc1ea2256da36", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-ref.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0506]: cannot assign to `a` because it is borrowed\n-  --> $DIR/ret-ref.rs:18:5\n+  --> $DIR/ret-ref.rs:16:5\n    |\n LL |     let future = multiple_named_lifetimes(&a, &b);\n    |                                           -- borrow of `a` occurs here\n@@ -10,7 +10,7 @@ LL |     let p = future.await;\n    |             ------ borrow later used here\n \n error[E0506]: cannot assign to `b` because it is borrowed\n-  --> $DIR/ret-ref.rs:19:5\n+  --> $DIR/ret-ref.rs:17:5\n    |\n LL |     let future = multiple_named_lifetimes(&a, &b);\n    |                                               -- borrow of `b` occurs here\n@@ -21,7 +21,7 @@ LL |     let p = future.await;\n    |             ------ borrow later used here\n \n error[E0506]: cannot assign to `a` because it is borrowed\n-  --> $DIR/ret-ref.rs:30:5\n+  --> $DIR/ret-ref.rs:28:5\n    |\n LL |     let future = multiple_named_lifetimes(&a, &b);\n    |                                           -- borrow of `a` occurs here"}, {"sha": "edbdfb5652281a02fd78a93e3e751ba54c7589fe", "filename": "src/test/ui/async-await/no-async-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `fn` or `unsafe`, found `const`\n-  --> $DIR/no-async-const.rs:7:11\n+  --> $DIR/no-async-const.rs:5:11\n    |\n LL | pub async const fn x() {}\n    |           ^^^^^ expected one of `fn` or `unsafe` here"}, {"sha": "6d7df57e7b6afee01eddf591ca8877049caf834d", "filename": "src/test/ui/async-await/no-const-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found reserved keyword `async`\n-  --> $DIR/no-const-async.rs:7:11\n+  --> $DIR/no-const-async.rs:5:11\n    |\n LL | pub const async fn x() {}\n    |           ^^^^^ expected identifier, found reserved keyword\n@@ -9,7 +9,7 @@ LL | pub const r#async fn x() {}\n    |           ^^^^^^^\n \n error: expected `:`, found keyword `fn`\n-  --> $DIR/no-const-async.rs:7:17\n+  --> $DIR/no-const-async.rs:5:17\n    |\n LL | pub const async fn x() {}\n    |                 ^^ expected `:`"}, {"sha": "88f147b8d9ddd10ec8fa1fea8261d3a6ac62b970", "filename": "src/test/ui/async-await/no-move-across-await-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `s.x`\n-  --> $DIR/no-move-across-await-struct.rs:10:5\n+  --> $DIR/no-move-across-await-struct.rs:8:5\n    |\n LL |     needs_vec(s.x).await;\n    |               --- value moved here"}, {"sha": "fe98ecd599a2348b9c172c3c826e896f58021846", "filename": "src/test/ui/async-await/no-move-across-await-tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `x.1`\n-  --> $DIR/no-move-across-await-tuple.rs:11:5\n+  --> $DIR/no-move-across-await-tuple.rs:9:5\n    |\n LL |     drop(x.1);\n    |          --- value moved here"}, {"sha": "91d7994654f37448f5ed6f4c5e2f9f613f17ceec", "filename": "src/test/ui/async-await/no-non-guaranteed-initialization.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0381]: use of possibly uninitialized variable: `y`\n-  --> $DIR/no-non-guaranteed-initialization.rs:12:5\n+  --> $DIR/no-non-guaranteed-initialization.rs:10:5\n    |\n LL |     y\n    |     ^ use of possibly uninitialized `y`"}, {"sha": "d9a2db985e54ddc4db7b55fd3b857b686507c604", "filename": "src/test/ui/async-await/partial-initialization-across-await.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,17 +1,17 @@\n error[E0381]: assign to part of possibly uninitialized variable: `t`\n-  --> $DIR/partial-initialization-across-await.rs:15:5\n+  --> $DIR/partial-initialization-across-await.rs:13:5\n    |\n LL |     t.0 = 42;\n    |     ^^^^^^^^ use of possibly uninitialized `t`\n \n error[E0381]: assign to part of possibly uninitialized variable: `t`\n-  --> $DIR/partial-initialization-across-await.rs:24:5\n+  --> $DIR/partial-initialization-across-await.rs:22:5\n    |\n LL |     t.0 = 42;\n    |     ^^^^^^^^ use of possibly uninitialized `t`\n \n error[E0381]: assign to part of possibly uninitialized variable: `t`\n-  --> $DIR/partial-initialization-across-await.rs:33:5\n+  --> $DIR/partial-initialization-across-await.rs:31:5\n    |\n LL |     t.x = 42;\n    |     ^^^^^^^^ use of possibly uninitialized `t`"}, {"sha": "8781a9c444d0a5c50e97277614ffd3f06d0e9555", "filename": "src/test/ui/async-await/recursive-async-impl-trait-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0733]: recursion in an `async fn` requires boxing\n-  --> $DIR/recursive-async-impl-trait-type.rs:7:40\n+  --> $DIR/recursive-async-impl-trait-type.rs:5:40\n    |\n LL | async fn recursive_async_function() -> () {\n    |                                        ^^ an `async fn` cannot invoke itself directly"}, {"sha": "37b30ffe6800f7f6c2de77b970b3e6ada1d474f1", "filename": "src/test/ui/async-await/suggest-missing-await-closure.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.fixed?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n // run-rustfix\n \n-#![feature(async_await, async_closure)]\n+#![feature(async_closure)]\n \n fn take_u32(_x: u32) {}\n "}, {"sha": "7c02a907ce7ad03649175f63ad5ef81411b6f149", "filename": "src/test/ui/async-await/suggest-missing-await.fixed", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.fixed?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,8 +1,6 @@\n // edition:2018\n // run-rustfix\n \n-#![feature(async_await)]\n-\n fn take_u32(_x: u32) {}\n \n async fn make_u32() -> u32 {"}, {"sha": "ccca97ec204b46c5f241cba5711cfea4ae9e6955", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/suggest-missing-await.rs:15:14\n+  --> $DIR/suggest-missing-await.rs:13:14\n    |\n LL |     take_u32(x)\n    |              ^"}, {"sha": "2c4c61a0957f96525215fcc08a700fc957517a0f", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,13 +1,13 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n-  --> $DIR/bound-normalization-fail.rs:6:12\n+  --> $DIR/bound-normalization-fail.rs:5:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:29:32\n+  --> $DIR/bound-normalization-fail.rs:28:32\n    |\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type\n@@ -17,13 +17,13 @@ LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    = note: the return type of a function must have a statically known size\n \n error: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n-  --> $DIR/bound-normalization-fail.rs:45:41\n+  --> $DIR/bound-normalization-fail.rs:44:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:45:41\n+  --> $DIR/bound-normalization-fail.rs:44:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type"}, {"sha": "d048da7f60bebd3845983de2fa86e58bc26a2bee", "filename": "src/test/ui/impl-trait/bound-normalization-pass.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n-  --> $DIR/bound-normalization-pass.rs:6:12\n+  --> $DIR/bound-normalization-pass.rs:5:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "01371b4d5c61f96bfaa9a74db18d8f6487b7ad59", "filename": "src/test/ui/impl-trait/issue-55872-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: the trait bound `impl std::future::Future: std::marker::Copy` is not satisfied\n-  --> $DIR/issue-55872-2.rs:12:5\n+  --> $DIR/issue-55872-2.rs:13:5\n    |\n LL |     type E = impl Copy;\n    |     ^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `impl std::future::Future`\n    |\n    = note: the return type of a function must have a statically known size\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-2.rs:14:28\n+  --> $DIR/issue-55872-2.rs:15:28\n    |\n LL |       fn foo<T>() -> Self::E {\n    |  ____________________________^"}, {"sha": "f67e45b01d27e606d63438ad39ef2ba726ec3638", "filename": "src/test/ui/inference/cannot-infer-async-enabled-impl-trait-bindings.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,13 +1,13 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n-  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:3:12\n+  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:2:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0282]: type annotations needed for `impl std::future::Future`\n-  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:14:9\n+  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:13:9\n    |\n LL |     let fut = async {\n    |         --- consider giving `fut` the explicit type `impl std::future::Future`, with the type parameters specified"}, {"sha": "bf31fb85cf6db5c5eab50fd634a36a740621e01e", "filename": "src/test/ui/inference/cannot-infer-async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed\n-  --> $DIR/cannot-infer-async.rs:12:9\n+  --> $DIR/cannot-infer-async.rs:11:9\n    |\n LL |     let fut = async {\n    |         --- consider giving `fut` a type"}, {"sha": "a585b4fdbe608f974c673070d1eecd71e7ec2db9", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:10:48\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:48\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                          -                     ^^^^^^^^ returning this value requires that `'_` must outlive `'static`"}, {"sha": "2fb152475a1effdf8332d70448c18a5c13e4ecd8", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,17 +1,17 @@\n error: cannot infer an appropriate lifetime\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:10:16\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:16\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                ^^^^                 ---------- this return type evaluates to the `'static` lifetime...\n    |                |\n    |                ...but this borrow...\n    |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 10:26\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:10:26\n+note: ...can't outlive the lifetime '_ as defined on the method body at 8:26\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:26\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                          ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 10:26\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 8:26\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                     ^^^^^^^^^^^^^^^"}, {"sha": "e53d91c360489c1f5e6ac7e627f70d23e1faae80", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:45\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:45\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:50\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:50\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                          -                       ^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n@@ -16,7 +16,7 @@ LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                          lifetime `'_` defined here\n \n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:13:73\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:73\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n    |                          -                                              ^^^^^^^^^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n@@ -25,15 +25,15 @@ LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (\n    |                          lifetime `'_` defined here\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:19:58\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:58\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |                                                          ^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:19:62\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:62\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |                  --              -                           ^^^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'a`"}, {"sha": "57ad026bdcf975d2cc7111d2d894d1bced6c0276", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:45\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:45\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                          ----               ^^^^\n@@ -8,7 +8,7 @@ LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                          this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:13:55\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:55\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n    |                          -----                        ^^^^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (\n    |                          this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:19:58\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:58\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |                                  -----                   ^^^"}, {"sha": "998178dde1df18d8b05351da863c645a0ca8a830", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:15:42\n+  --> $DIR/lt-ref-self-async.rs:13:42\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                                          ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:15:47\n+  --> $DIR/lt-ref-self-async.rs:13:47\n    |\n LL |       async fn ref_self(&self, f: &u32) -> &u32 {\n    |  _______________________-_______________________^\n@@ -19,15 +19,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:21:48\n+  --> $DIR/lt-ref-self-async.rs:19:48\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                                ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:21:53\n+  --> $DIR/lt-ref-self-async.rs:19:53\n    |\n LL |       async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |  _____________________________-_______________________^\n@@ -39,15 +39,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:25:57\n+  --> $DIR/lt-ref-self-async.rs:23:57\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:25:62\n+  --> $DIR/lt-ref-self-async.rs:23:62\n    |\n LL |       async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |  _____________________________________-________________________^\n@@ -59,15 +59,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:29:57\n+  --> $DIR/lt-ref-self-async.rs:27:57\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:29:62\n+  --> $DIR/lt-ref-self-async.rs:27:62\n    |\n LL |       async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |  _____________________________________-________________________^\n@@ -79,15 +79,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:33:66\n+  --> $DIR/lt-ref-self-async.rs:31:66\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:33:71\n+  --> $DIR/lt-ref-self-async.rs:31:71\n    |\n LL |       async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |  _____________________________________________-_________________________^\n@@ -99,15 +99,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:37:62\n+  --> $DIR/lt-ref-self-async.rs:35:62\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                              ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:37:67\n+  --> $DIR/lt-ref-self-async.rs:35:67\n    |\n LL |       async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |  _________________________________________-_________________________^"}, {"sha": "2bc64bdf1f7a2cee037e3ef27a17ee304ca5cf53", "filename": "src/test/ui/self/elision/lt-ref-self-async.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:15:42\n+  --> $DIR/lt-ref-self-async.rs:13:42\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       -----              ^^^^\n@@ -8,7 +8,7 @@ LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:21:48\n+  --> $DIR/lt-ref-self-async.rs:19:48\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -----              ^^^^\n@@ -17,7 +17,7 @@ LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:25:57\n+  --> $DIR/lt-ref-self-async.rs:23:57\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ^^^^\n@@ -26,7 +26,7 @@ LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:29:57\n+  --> $DIR/lt-ref-self-async.rs:27:57\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ^^^^\n@@ -35,7 +35,7 @@ LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:33:66\n+  --> $DIR/lt-ref-self-async.rs:31:66\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ^^^^\n@@ -44,7 +44,7 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:37:62\n+  --> $DIR/lt-ref-self-async.rs:35:62\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                         -----                ^^^^"}, {"sha": "97bc80509dfea51634176f5865e3f8edd5075ef6", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:15:46\n+  --> $DIR/ref-mut-self-async.rs:13:46\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                                              ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:15:51\n+  --> $DIR/ref-mut-self-async.rs:13:51\n    |\n LL |       async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |  _______________________-___________________________^\n@@ -19,15 +19,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:21:52\n+  --> $DIR/ref-mut-self-async.rs:19:52\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                                                    ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:21:57\n+  --> $DIR/ref-mut-self-async.rs:19:57\n    |\n LL |       async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |  _____________________________-___________________________^\n@@ -39,15 +39,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:25:61\n+  --> $DIR/ref-mut-self-async.rs:23:61\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:25:66\n+  --> $DIR/ref-mut-self-async.rs:23:66\n    |\n LL |       async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |  _____________________________________-____________________________^\n@@ -59,15 +59,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:29:61\n+  --> $DIR/ref-mut-self-async.rs:27:61\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:29:66\n+  --> $DIR/ref-mut-self-async.rs:27:66\n    |\n LL |       async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |  _____________________________________-____________________________^\n@@ -79,15 +79,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:33:70\n+  --> $DIR/ref-mut-self-async.rs:31:70\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:33:75\n+  --> $DIR/ref-mut-self-async.rs:31:75\n    |\n LL |       async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |  _____________________________________________-_____________________________^\n@@ -99,15 +99,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:37:70\n+  --> $DIR/ref-mut-self-async.rs:35:70\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:37:75\n+  --> $DIR/ref-mut-self-async.rs:35:75\n    |\n LL |       async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |  _____________________________________________-_____________________________^"}, {"sha": "39a1b30ca53296151b465d4c0e164e56dc0a4aa9", "filename": "src/test/ui/self/elision/ref-mut-self-async.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:15:46\n+  --> $DIR/ref-mut-self-async.rs:13:46\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                       ---------              ^^^^\n@@ -8,7 +8,7 @@ LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:21:52\n+  --> $DIR/ref-mut-self-async.rs:19:52\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                             ---------              ^^^^\n@@ -17,7 +17,7 @@ LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:25:61\n+  --> $DIR/ref-mut-self-async.rs:23:61\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                     ---------               ^^^^\n@@ -26,7 +26,7 @@ LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:29:61\n+  --> $DIR/ref-mut-self-async.rs:27:61\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                     ---------               ^^^^\n@@ -35,7 +35,7 @@ LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:33:70\n+  --> $DIR/ref-mut-self-async.rs:31:70\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                             ---------                ^^^^\n@@ -44,7 +44,7 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:37:70\n+  --> $DIR/ref-mut-self-async.rs:35:70\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                             ---------                ^^^^"}, {"sha": "2905a022e5d6ee0352f10ceeeefb1728110ba6f9", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:15:56\n+  --> $DIR/ref-mut-struct-async.rs:13:56\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                                                        ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:15:61\n+  --> $DIR/ref-mut-struct-async.rs:13:61\n    |\n LL |       async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |  _______________________________-_____________________________^\n@@ -19,15 +19,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:19:65\n+  --> $DIR/ref-mut-struct-async.rs:17:65\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                                                 ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:19:70\n+  --> $DIR/ref-mut-struct-async.rs:17:70\n    |\n LL |       async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |  _______________________________________-______________________________^\n@@ -39,15 +39,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:23:65\n+  --> $DIR/ref-mut-struct-async.rs:21:65\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                                                 ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:23:70\n+  --> $DIR/ref-mut-struct-async.rs:21:70\n    |\n LL |       async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |  _______________________________________-______________________________^\n@@ -59,15 +59,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:27:74\n+  --> $DIR/ref-mut-struct-async.rs:25:74\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                                          ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:27:79\n+  --> $DIR/ref-mut-struct-async.rs:25:79\n    |\n LL |       async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |  _______________________________________________-_______________________________^\n@@ -79,15 +79,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:31:74\n+  --> $DIR/ref-mut-struct-async.rs:29:74\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                                          ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:31:79\n+  --> $DIR/ref-mut-struct-async.rs:29:79\n    |\n LL |       async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |  _______________________________________________-_______________________________^"}, {"sha": "fe4a636ada66898a2d045305534e6099ea5e3d8b", "filename": "src/test/ui/self/elision/ref-mut-struct-async.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:15:56\n+  --> $DIR/ref-mut-struct-async.rs:13:56\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                               -----------              ^^^^\n@@ -8,7 +8,7 @@ LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                               this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:19:65\n+  --> $DIR/ref-mut-struct-async.rs:17:65\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -----------               ^^^^\n@@ -17,7 +17,7 @@ LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:23:65\n+  --> $DIR/ref-mut-struct-async.rs:21:65\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -----------               ^^^^\n@@ -26,7 +26,7 @@ LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:27:74\n+  --> $DIR/ref-mut-struct-async.rs:25:74\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -----------                ^^^^\n@@ -35,7 +35,7 @@ LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u\n    |                                               this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:31:74\n+  --> $DIR/ref-mut-struct-async.rs:29:74\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -----------                ^^^^"}, {"sha": "0eee56654f7d19692e89ba40bdfd234ed26479b6", "filename": "src/test/ui/self/elision/ref-self-async.nll.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:24:42\n+  --> $DIR/ref-self-async.rs:22:42\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                                          ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:24:47\n+  --> $DIR/ref-self-async.rs:22:47\n    |\n LL |       async fn ref_self(&self, f: &u32) -> &u32 {\n    |  _______________________-_______________________^\n@@ -19,15 +19,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:30:48\n+  --> $DIR/ref-self-async.rs:28:48\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                                ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:30:53\n+  --> $DIR/ref-self-async.rs:28:53\n    |\n LL |       async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |  _____________________________-_______________________^\n@@ -39,15 +39,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:34:57\n+  --> $DIR/ref-self-async.rs:32:57\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:34:62\n+  --> $DIR/ref-self-async.rs:32:62\n    |\n LL |       async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |  _____________________________________-________________________^\n@@ -59,15 +59,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:38:57\n+  --> $DIR/ref-self-async.rs:36:57\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:38:62\n+  --> $DIR/ref-self-async.rs:36:62\n    |\n LL |       async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |  _____________________________________-________________________^\n@@ -79,15 +79,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:42:66\n+  --> $DIR/ref-self-async.rs:40:66\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:42:71\n+  --> $DIR/ref-self-async.rs:40:71\n    |\n LL |       async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |  _____________________________________________-_________________________^\n@@ -99,15 +99,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:46:66\n+  --> $DIR/ref-self-async.rs:44:66\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:46:71\n+  --> $DIR/ref-self-async.rs:44:71\n    |\n LL |       async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |  _____________________________________________-_________________________^\n@@ -119,15 +119,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:50:69\n+  --> $DIR/ref-self-async.rs:48:69\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                                                     ^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:50:73\n+  --> $DIR/ref-self-async.rs:48:73\n    |\n LL |       async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |  ____________________________________________-____________________________^"}, {"sha": "2f9e2a01e347cee1030cfb1bbe2f15167041a684", "filename": "src/test/ui/self/elision/ref-self-async.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:24:42\n+  --> $DIR/ref-self-async.rs:22:42\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       -----              ^^^^\n@@ -8,7 +8,7 @@ LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:30:48\n+  --> $DIR/ref-self-async.rs:28:48\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -----              ^^^^\n@@ -17,7 +17,7 @@ LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:34:57\n+  --> $DIR/ref-self-async.rs:32:57\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ^^^^\n@@ -26,7 +26,7 @@ LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:38:57\n+  --> $DIR/ref-self-async.rs:36:57\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ^^^^\n@@ -35,7 +35,7 @@ LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:42:66\n+  --> $DIR/ref-self-async.rs:40:66\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ^^^^\n@@ -44,7 +44,7 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:46:66\n+  --> $DIR/ref-self-async.rs:44:66\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ^^^^\n@@ -53,7 +53,7 @@ LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:50:69\n+  --> $DIR/ref-self-async.rs:48:69\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                            -----                    ^^^"}, {"sha": "8508e42264b4a797514505ad824bd76311e37080", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:15:52\n+  --> $DIR/ref-struct-async.rs:13:52\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                                                    ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:15:57\n+  --> $DIR/ref-struct-async.rs:13:57\n    |\n LL |       async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |  _______________________________-_________________________^\n@@ -19,15 +19,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:19:61\n+  --> $DIR/ref-struct-async.rs:17:61\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:19:66\n+  --> $DIR/ref-struct-async.rs:17:66\n    |\n LL |       async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |  _______________________________________-__________________________^\n@@ -39,15 +39,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:23:61\n+  --> $DIR/ref-struct-async.rs:21:61\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:23:66\n+  --> $DIR/ref-struct-async.rs:21:66\n    |\n LL |       async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |  _______________________________________-__________________________^\n@@ -59,15 +59,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:27:70\n+  --> $DIR/ref-struct-async.rs:25:70\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:27:75\n+  --> $DIR/ref-struct-async.rs:25:75\n    |\n LL |       async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |  _______________________________________________-___________________________^\n@@ -79,15 +79,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:31:66\n+  --> $DIR/ref-struct-async.rs:29:66\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:31:71\n+  --> $DIR/ref-struct-async.rs:29:71\n    |\n LL |       async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |  ___________________________________________-___________________________^"}, {"sha": "222e27ebf0d97bd352d7a9814c5d87868516aaa2", "filename": "src/test/ui/self/elision/ref-struct-async.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21476e7d6ce80640ff39eb091584092076f13359/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr?ref=21476e7d6ce80640ff39eb091584092076f13359", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:15:52\n+  --> $DIR/ref-struct-async.rs:13:52\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                               -------              ^^^^\n@@ -8,7 +8,7 @@ LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                               this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:19:61\n+  --> $DIR/ref-struct-async.rs:17:61\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                       -------               ^^^^\n@@ -17,7 +17,7 @@ LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:23:61\n+  --> $DIR/ref-struct-async.rs:21:61\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                       -------               ^^^^\n@@ -26,7 +26,7 @@ LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:27:70\n+  --> $DIR/ref-struct-async.rs:25:70\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                               -------                ^^^^\n@@ -35,7 +35,7 @@ LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                               this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:31:66\n+  --> $DIR/ref-struct-async.rs:29:66\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                           -------                ^^^^"}]}