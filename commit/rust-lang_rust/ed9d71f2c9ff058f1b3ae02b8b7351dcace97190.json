{"sha": "ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkOWQ3MWYyYzlmZjA1OGYxYjNhZTAyYjhiNzM1MWRjYWNlOTcxOTA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-21T09:25:14Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-21T09:25:14Z"}, "message": "remove nondeterminism by adjusting thresholds", "tree": {"sha": "51744ddc51e2dd5bed1bdfec7558649f5297bc06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51744ddc51e2dd5bed1bdfec7558649f5297bc06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYWkp6AAoJEFbW7qD8Z6xGEdsP/jg46mhLAPaIqZf7ztY2Than\noa4nZ7m1My+fx7kz1umVK+GvjEqdwOOQrv7zBCvRAtAM8yaCdXHeSHY3XQ7PCgZF\nHmiqHulEMQ4wYOxWMo8vhr6QSXZabmK1z4iN+mFAWHw99n0zTs5aP3iAU4XaLscm\n/q1Whmd14k8dn9ftepQZ+i7BgCoUu9HcUKMzEw/l73IHwihLNwbErqxf2QT4CJ0g\ndfzWb3qJCVOQLMrDE27HraRw7ONUrEUL17oxKjJ8xCjmUmCCPlKC3Y+xL1oFPvFK\ncAsEIHmovS+xFOeEDT/Z2GN/yUoOCPHFbiWjrMcPjxDtCrymg08oUNZDCZRO105A\nzcaAjbMhbZCuWFMP2u9bugLYp96uvoMgfrx8w3jp1e4oQVLl8ISz4nzIdJSLrYeJ\njEqCCr5//sb9slKK8tuY3Be2hM0WsJ/KDEc6NMMQzD2QAjwOycb/3Cbo4ir+mc3L\nVzo/2lYmgwtzkYkFGTb7GtbFqn83OjFETD/FqhFrWQk8uXlH7ay4vZ/DnXZxQfsB\nAMaI0tUWE3w6V09YxAZGoDeMlOAmEze6SiQ11PC/LBD/KTpmjAF5EOSE14BE3f6a\nfztMe86fk37mNxAd+zDS7wVDpX9BItA1HWn1n1akail36X0JxiHDKxg8L//NDhOB\nTU4QgC9f8cLHn7S9a6Q3\n=uJqJ\n-----END PGP SIGNATURE-----", "payload": "tree 51744ddc51e2dd5bed1bdfec7558649f5297bc06\nparent 299d7be132584b17c17dd72309605131a8ed9c21\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1482312314 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1482312314 +0100\n\nremove nondeterminism by adjusting thresholds"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "html_url": "https://github.com/rust-lang/rust/commit/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "299d7be132584b17c17dd72309605131a8ed9c21", "url": "https://api.github.com/repos/rust-lang/rust/commits/299d7be132584b17c17dd72309605131a8ed9c21", "html_url": "https://github.com/rust-lang/rust/commit/299d7be132584b17c17dd72309605131a8ed9c21"}], "stats": {"total": 290, "additions": 157, "deletions": 133}, "files": [{"sha": "aa9af2e681d4e659b8a23b80f598f5117dc71e97", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -107,9 +107,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n }\n \n /// Returns an option containing a tuple with the start and end (exclusive) of the range.\n-fn to_const_range(start: Option<Option<ConstVal>>, end: Option<Option<ConstVal>>, limits: RangeLimits,\n-                  array_size: ConstInt)\n-                  -> Option<(ConstInt, ConstInt)> {\n+fn to_const_range(start: Option<Option<ConstVal>>, end: Option<Option<ConstVal>>, limits: RangeLimits, array_size: ConstInt)\n+    -> Option<(ConstInt, ConstInt)> {\n     let start = match start {\n         Some(Some(ConstVal::Integral(x))) => x,\n         Some(_) => return None,"}, {"sha": "24fd5a1483dada8a70af061b49d88c7eb73e4066", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -36,9 +36,11 @@ declare_lint! {\n \n /// **What it does:** Checks for `extern crate` and `use` items annotated with lint attributes\n ///\n-/// **Why is this bad?** Lint attributes have no effect on crate imports. Most likely a `!` was forgotten\n+/// **Why is this bad?** Lint attributes have no effect on crate imports. Most likely a `!` was\n+/// forgotten\n ///\n-/// **Known problems:** Technically one might allow `unused_import` on a `use` item, but it's easier to remove the unused item.\n+/// **Known problems:** Technically one might allow `unused_import` on a `use` item,\n+/// but it's easier to remove the unused item.\n ///\n /// **Example:**\n /// ```rust\n@@ -125,11 +127,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n                                                            attr.span,\n                                                            \"useless lint attribute\",\n                                                            |db| {\n-                                                               sugg.insert(1, '!');\n-                                                               db.span_suggestion(attr.span,\n-                                                                                  \"if you just forgot a `!`, use\",\n-                                                                                  sugg);\n-                                                           });\n+                                            sugg.insert(1, '!');\n+                                            db.span_suggestion(attr.span, \"if you just forgot a `!`, use\", sugg);\n+                                        });\n                                     }\n                                 }\n                             },"}, {"sha": "9a9b97d0e813a44710c2d9ec9dad0fc060603450", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -204,7 +204,8 @@ fn lint_match_arms(cx: &LateContext, expr: &Expr) {\n \n                     if let PatKind::Wild = j.pats[0].node {\n                         // if the last arm is _, then i could be integrated into _\n-                        // note that i.pats[0] cannot be _, because that would mean that we're hiding all the subsequent arms, and rust won't compile\n+                        // note that i.pats[0] cannot be _, because that would mean that we're\n+                        // hiding all the subsequent arms, and rust won't compile\n                         db.span_note(i.body.span,\n                                      &format!(\"`{}` has the same arm body as the `_` wildcard, consider removing it`\",\n                                               lhs));"}, {"sha": "8836af28d095b2ddd3f9325936f0dd569b4ee971", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -169,7 +169,7 @@ fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item, trait_ref\n                            item.span,\n                            \"you are implementing `Clone` explicitly on a `Copy` type\",\n                            |db| {\n-                               db.span_note(item.span, \"consider deriving `Clone` or removing `Copy`\");\n-                           });\n+            db.span_note(item.span, \"consider deriving `Clone` or removing `Copy`\");\n+        });\n     }\n }"}, {"sha": "20c82ee466074070a40b146538774a7648ea3c73", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -268,7 +268,9 @@ fn check_doc(cx: &EarlyContext, valid_idents: &[String], docs: &[(String, Span)]\n                             }\n \n                             lookup_parser = parser.clone();\n-                            if let (Some((false, $c)), Some((false, $c))) = (lookup_parser.next(), lookup_parser.next()) {\n+                            let a = lookup_parser.next();\n+                            let b = lookup_parser.next();\n+                            if let (Some((false, $c)), Some((false, $c))) = (a, b) {\n                                 let mut close_count = 3;\n                                 while let Some((false, $c)) = lookup_parser.next() {\n                                     close_count += 1;"}, {"sha": "2ff31b3a4fece14baf412f1171fec206e50ab72a", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -79,7 +79,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HashMapLint {\n }\n \n fn check_cond<'a, 'tcx, 'b>(cx: &'a LateContext<'a, 'tcx>, check: &'b Expr)\n-                            -> Option<(&'static str, &'b Expr, &'b Expr)> {\n+    -> Option<(&'static str, &'b Expr, &'b Expr)> {\n     if_let_chain! {[\n         let ExprMethodCall(ref name, _, ref params) = check.node,\n         params.len() >= 2,"}, {"sha": "e3bfca0b2f525b9e51e8d4c180434f1e7ffef6b8", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -49,10 +49,13 @@ declare_lint! {\n \n /// **What it does:** Checks for modules that have the same name as their parent module\n ///\n-/// **Why is this bad?** A typical beginner mistake is to have `mod foo;` and again `mod foo { .. }` in `foo.rs`.\n-///                      The expectation is that items inside the inner `mod foo { .. }` are then available\n+/// **Why is this bad?** A typical beginner mistake is to have `mod foo;` and again `mod foo { ..\n+/// }` in `foo.rs`.\n+/// The expectation is that items inside the inner `mod foo { .. }` are then\n+/// available\n ///                      through `foo::x`, but they are only available through `foo::foo::x`.\n-///                      If this is done on purpose, it would be better to choose a more representative module name.\n+/// If this is done on purpose, it would be better to choose a more\n+/// representative module name.\n ///\n /// **Known problems:** None.\n ///\n@@ -111,8 +114,7 @@ fn partial_rmatch(post: &str, name: &str) -> usize {\n \n // FIXME: #600\n #[allow(while_let_on_iterator)]\n-fn check_variant(cx: &EarlyContext, threshold: u64, def: &EnumDef, item_name: &str, item_name_chars: usize,\n-                 span: Span) {\n+fn check_variant(cx: &EarlyContext, threshold: u64, def: &EnumDef, item_name: &str, item_name_chars: usize, span: Span) {\n     if (def.variants.len() as u64) < threshold {\n         return;\n     }"}, {"sha": "d66c8757ef2dfaf8f75c1b75b9ae48241d16af66", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -61,8 +61,10 @@ impl LintPass for Pass {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n-    fn check_fn(&mut self, cx: &LateContext<'a, 'tcx>, _: visit::FnKind<'tcx>, decl: &'tcx FnDecl, body: &'tcx Expr,\n-                _: Span, id: NodeId) {\n+    fn check_fn(\n+        &mut self, cx: &LateContext<'a, 'tcx>, _: visit::FnKind<'tcx>, decl: &'tcx FnDecl, body: &'tcx Expr, _: Span,\n+        id: NodeId\n+    ) {\n         let param_env = ty::ParameterEnvironment::for_item(cx.tcx, id);\n \n         let infcx = cx.tcx.borrowck_fake_infer_ctxt(param_env);"}, {"sha": "f83b3271d506ae207d0968469a41ec763ca71fc7", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -146,7 +146,8 @@ impl<'a, 'tcx> Visitor<'tcx> for DivergenceVisitor<'a, 'tcx> {\n                 }\n             },\n             _ => {\n-                // do not lint expressions referencing objects of type `!`, as that required a diverging expression to begin with\n+                // do not lint expressions referencing objects of type `!`, as that required a diverging expression\n+                // to begin with\n             },\n         }\n         self.maybe_walk_expr(e);"}, {"sha": "58425ff2a40125c0e998de748ffccc752e550ac4", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -69,8 +69,10 @@ impl LintPass for Functions {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n-    fn check_fn(&mut self, cx: &LateContext<'a, 'tcx>, kind: intravisit::FnKind<'tcx>, decl: &'tcx hir::FnDecl,\n-                expr: &'tcx hir::Expr, span: Span, nodeid: ast::NodeId) {\n+    fn check_fn(\n+        &mut self, cx: &LateContext<'a, 'tcx>, kind: intravisit::FnKind<'tcx>, decl: &'tcx hir::FnDecl,\n+        expr: &'tcx hir::Expr, span: Span, nodeid: ast::NodeId\n+    ) {\n         use rustc::hir::map::Node::*;\n \n         let is_impl = if let Some(NodeItem(item)) = cx.tcx.map.find(cx.tcx.map.get_parent_node(nodeid)) {\n@@ -124,8 +126,10 @@ impl<'a, 'tcx> Functions {\n         }\n     }\n \n-    fn check_raw_ptr(&self, cx: &LateContext<'a, 'tcx>, unsafety: hir::Unsafety, decl: &'tcx hir::FnDecl,\n-                     expr: &'tcx hir::Expr, nodeid: ast::NodeId) {\n+    fn check_raw_ptr(\n+        &self, cx: &LateContext<'a, 'tcx>, unsafety: hir::Unsafety, decl: &'tcx hir::FnDecl, expr: &'tcx hir::Expr,\n+        nodeid: ast::NodeId\n+    ) {\n         if unsafety == hir::Unsafety::Normal && cx.access_levels.is_exported(nodeid) {\n             let raw_ptrs = decl.inputs.iter().filter_map(|arg| raw_ptr_arg(cx, arg)).collect::<HashSet<_>>();\n "}, {"sha": "c6efc3fd736de092692af0f8e3a60cd8f9a78fbd", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -150,7 +150,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for UsedVisitor<'a, 'tcx> {\n }\n \n fn check_assign<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: hir::def_id::DefId, block: &'tcx hir::Block)\n-                          -> Option<&'tcx hir::Expr> {\n+    -> Option<&'tcx hir::Expr> {\n     if_let_chain! {[\n         block.expr.is_none(),\n         let Some(expr) = block.stmts.iter().last(),"}, {"sha": "e9f93d0436040363ed9549ac83e9b8b87a53fe79", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -116,10 +116,8 @@ fn check_fn_inner<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl, gene\n     report_extra_lifetimes(cx, decl, generics);\n }\n \n-fn could_use_elision<'a, 'tcx: 'a, T: Iterator<Item = &'tcx Lifetime>>(cx: &LateContext<'a, 'tcx>,\n-                                                                       func: &'tcx FnDecl,\n-                                                                       named_lts: &'tcx [LifetimeDef], bounds_lts: T)\n-                                                                       -> bool {\n+fn could_use_elision<'a, 'tcx: 'a, T: Iterator<Item = &'tcx Lifetime>>(cx: &LateContext<'a, 'tcx>, func: &'tcx FnDecl, named_lts: &'tcx [LifetimeDef], bounds_lts: T)\n+    -> bool {\n     // There are two scenarios where elision works:\n     // * no output references, all input references have different LT\n     // * output references, exactly one input reference with same LT"}, {"sha": "3a7012972ba1a6378054953e1ee9806f5592a406", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -351,11 +351,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                                                    expr.span,\n                                                    \"this loop could be written as a `while let` loop\",\n                                                    |db| {\n-                                                       let sug = format!(\"while let {} = {} {{ .. }}\",\n-                                                                         snippet(cx, arms[0].pats[0].span, \"..\"),\n-                                                                         snippet(cx, matchexpr.span, \"..\"));\n-                                                       db.span_suggestion(expr.span, \"try\", sug);\n-                                                   });\n+                                    let sug = format!(\"while let {} = {} {{ .. }}\",\n+                                                      snippet(cx, arms[0].pats[0].span, \"..\"),\n+                                                      snippet(cx, matchexpr.span, \"..\"));\n+                                    db.span_suggestion(expr.span, \"try\", sug);\n+                                });\n                             }\n                         },\n                         _ => (),\n@@ -379,10 +379,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                                        expr.span,\n                                        \"this loop could be written as a `for` loop\",\n                                        |db| {\n-                                           db.span_suggestion(expr.span,\n-                                                              \"try\",\n-                                                              format!(\"for {} in {} {{ .. }}\", loop_var, iterator));\n-                                       });\n+                        db.span_suggestion(expr.span, \"try\", format!(\"for {} in {} {{ .. }}\", loop_var, iterator));\n+                    });\n                 }\n             }\n         }\n@@ -473,11 +471,11 @@ fn check_for_loop_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat, ar\n                                        expr.span,\n                                        &format!(\"the loop variable `{}` is used to index `{}`\", ident.node, indexed),\n                                        |db| {\n-                                           multispan_sugg(db,\n+                        multispan_sugg(db,\n                                        \"consider using an iterator\".to_string(),\n                                        &[(pat.span, &format!(\"({}, <item>)\", ident.node)),\n                                          (arg.span, &format!(\"{}.iter().enumerate(){}{}\", indexed, take, skip))]);\n-                                       });\n+                    });\n                 } else {\n                     let repl = if starts_at_zero && take.is_empty() {\n                         format!(\"&{}\", indexed)\n@@ -492,10 +490,10 @@ fn check_for_loop_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat, ar\n                                                 ident.node,\n                                                 indexed),\n                                        |db| {\n-                                           multispan_sugg(db,\n-                                                          \"consider using an iterator\".to_string(),\n-                                                          &[(pat.span, \"<item>\"), (arg.span, &repl)]);\n-                                       });\n+                        multispan_sugg(db,\n+                                       \"consider using an iterator\".to_string(),\n+                                       &[(pat.span, \"<item>\"), (arg.span, &repl)]);\n+                    });\n                 }\n             }\n         }"}, {"sha": "b1b52cfb015322528b679cb09571cd646249ebe8", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -322,10 +322,10 @@ fn check_match_ref_pats(cx: &LateContext, ex: &Expr, arms: &[Arm], source: Match\n                                expr.span,\n                                \"you don't need to add `&` to both the expression and the patterns\",\n                                |db| {\n-                                   let inner = Sugg::hir(cx, inner, \"..\");\n-                                   let template = match_template(expr.span, source, inner);\n-                                   db.span_suggestion(expr.span, \"try\", template);\n-                               });\n+                let inner = Sugg::hir(cx, inner, \"..\");\n+                let template = match_template(expr.span, source, inner);\n+                db.span_suggestion(expr.span, \"try\", template);\n+            });\n         } else {\n             span_lint_and_then(cx,\n                                MATCH_REF_PATS,\n@@ -335,8 +335,7 @@ fn check_match_ref_pats(cx: &LateContext, ex: &Expr, arms: &[Arm], source: Match\n                 let ex = Sugg::hir(cx, ex, \"..\");\n                 let template = match_template(expr.span, source, ex.deref());\n                 db.span_suggestion(expr.span,\n-                                   \"instead of prefixing all patterns with `&`, you can \\\n-                                   dereference the expression\",\n+                                   \"instead of prefixing all patterns with `&`, you can dereference the expression\",\n                                    template);\n             });\n         }"}, {"sha": "ebb90c9eef08a1353809a596728074afb6112978", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -695,9 +695,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n /// Checks for the `OR_FUN_CALL` lint.\n fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir::Expr]) {\n     /// Check for `unwrap_or(T::new())` or `unwrap_or(T::default())`.\n-    fn check_unwrap_or_default(cx: &LateContext, name: &str, fun: &hir::Expr, self_expr: &hir::Expr, arg: &hir::Expr,\n-                               or_has_args: bool, span: Span)\n-                               -> bool {\n+    fn check_unwrap_or_default(\n+        cx: &LateContext, name: &str, fun: &hir::Expr, self_expr: &hir::Expr, arg: &hir::Expr, or_has_args: bool,\n+        span: Span\n+    ) -> bool {\n         if or_has_args {\n             return false;\n         }\n@@ -721,11 +722,10 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n                                            span,\n                                            &format!(\"use of `{}` followed by a call to `{}`\", name, path),\n                                            |db| {\n-                                               db.span_suggestion(span,\n-                                                                  \"try this\",\n-                                                                  format!(\"{}.unwrap_or_default()\",\n-                                                                          snippet(cx, self_expr.span, \"_\")));\n-                                           });\n+                            db.span_suggestion(span,\n+                                               \"try this\",\n+                                               format!(\"{}.unwrap_or_default()\", snippet(cx, self_expr.span, \"_\")));\n+                        });\n                         return true;\n                     }\n                 }\n@@ -736,8 +736,10 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n     }\n \n     /// Check for `*or(foo())`.\n-    fn check_general_case(cx: &LateContext, name: &str, fun: &hir::Expr, self_expr: &hir::Expr, arg: &hir::Expr,\n-                          or_has_args: bool, span: Span) {\n+    fn check_general_case(\n+        cx: &LateContext, name: &str, fun: &hir::Expr, self_expr: &hir::Expr, arg: &hir::Expr, or_has_args: bool,\n+        span: Span\n+    ) {\n         // don't lint for constant values\n         // FIXME: can we `expect` here instead of match?\n         if let Some(qualif) = cx.tcx.const_qualif_map.borrow().get(&arg.id) {\n@@ -776,10 +778,10 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n                            span,\n                            &format!(\"use of `{}` followed by a function call\", name),\n                            |db| {\n-                               db.span_suggestion(span,\n+            db.span_suggestion(span,\n                                \"try this\",\n                                format!(\"{}.{}_{}({})\", snippet(cx, self_expr.span, \"_\"), name, suffix, sugg));\n-                           });\n+        });\n     }\n \n     if args.len() == 2 {\n@@ -836,10 +838,10 @@ fn lint_vec_extend(cx: &LateContext, expr: &hir::Expr, args: &[hir::Expr]) {\n                            expr.span,\n                            \"use of `extend` to extend a Vec by a slice\",\n                            |db| {\n-                               db.span_suggestion(expr.span,\n+            db.span_suggestion(expr.span,\n                                \"try this\",\n                                format!(\"{}.extend_from_slice({})\", snippet(cx, args[0].span, \"_\"), slice));\n-                           });\n+        });\n     }\n }\n \n@@ -1223,8 +1225,8 @@ fn lint_single_char_pattern(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr)\n                                arg.span,\n                                \"single-character string constant used as pattern\",\n                                |db| {\n-                                   db.span_suggestion(expr.span, \"try using a char instead:\", hint);\n-                               });\n+                db.span_suggestion(expr.span, \"try using a char instead:\", hint);\n+            });\n         }\n     }\n }"}, {"sha": "bccc1164047327fe4dc2224033db57e4a71ffd98", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -277,11 +277,11 @@ impl EarlyLintPass for MiscEarly {\n                                            expr.span,\n                                            \"Try not to call a closure in the expression where it is declared.\",\n                                            |db| {\n-                                               if decl.inputs.is_empty() {\n-                                                   let hint = snippet(cx, block.span, \"..\").into_owned();\n-                                                   db.span_suggestion(expr.span, \"Try doing something like: \", hint);\n-                                               }\n-                                           });\n+                            if decl.inputs.is_empty() {\n+                                let hint = snippet(cx, block.span, \"..\").into_owned();\n+                                db.span_suggestion(expr.span, \"Try doing something like: \", hint);\n+                            }\n+                        });\n                     }\n                 }\n             },"}, {"sha": "70696ea3908beb1dae77522446eaeeb8d03aa558", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -14,7 +14,10 @@\n // Note: More specifically this lint is largely inspired (aka copied) from *rustc*'s\n // [`missing_doc`].\n //\n-// [`missing_doc`]: https://github.com/rust-lang/rust/blob/d6d05904697d89099b55da3331155392f1db9c00/src/librustc_lint/builtin.rs#L246\n+// [`missing_doc`]:\n+// https://github.\n+// com/rust-lang/rust/blob/d6d05904697d89099b55da3331155392f1db9c00/src/librustc_lint/builtin.\n+// rs#L246\n //\n \n use rustc::hir;"}, {"sha": "5eae3034aff31e9e1f9368cc8c73b861f0340043", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -75,8 +75,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBool {\n                                    e.span,\n                                    \"this if-then-else expression returns a bool literal\",\n                                    |db| {\n-                                       db.span_suggestion(e.span, \"you can reduce it to\", hint);\n-                                   });\n+                    db.span_suggestion(e.span, \"you can reduce it to\", hint);\n+                });\n             };\n             match (fetch_bool_block(then_block), fetch_bool_expr(else_expr)) {\n                 (RetBool(true), RetBool(true)) |\n@@ -124,8 +124,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n                                        e.span,\n                                        \"equality checks against true are unnecessary\",\n                                        |db| {\n-                                           db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n-                                       });\n+                        db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n+                    });\n                 },\n                 (Other, Bool(true)) => {\n                     let hint = snippet(cx, left_side.span, \"..\").into_owned();\n@@ -134,8 +134,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n                                        e.span,\n                                        \"equality checks against true are unnecessary\",\n                                        |db| {\n-                                           db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n-                                       });\n+                        db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n+                    });\n                 },\n                 (Bool(false), Other) => {\n                     let hint = Sugg::hir(cx, right_side, \"..\");\n@@ -144,10 +144,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n                                        e.span,\n                                        \"equality checks against false can be replaced by a negation\",\n                                        |db| {\n-                                           db.span_suggestion(e.span,\n-                                                              \"try simplifying it as shown:\",\n-                                                              (!hint).to_string());\n-                                       });\n+                        db.span_suggestion(e.span, \"try simplifying it as shown:\", (!hint).to_string());\n+                    });\n                 },\n                 (Other, Bool(false)) => {\n                     let hint = Sugg::hir(cx, left_side, \"..\");\n@@ -156,10 +154,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n                                        e.span,\n                                        \"equality checks against false can be replaced by a negation\",\n                                        |db| {\n-                                           db.span_suggestion(e.span,\n-                                                              \"try simplifying it as shown:\",\n-                                                              (!hint).to_string());\n-                                       });\n+                        db.span_suggestion(e.span, \"try simplifying it as shown:\", (!hint).to_string());\n+                    });\n                 },\n                 _ => (),\n             }"}, {"sha": "2a75a19dd28cc9698228e2579f39bb735b6cc726", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -90,8 +90,10 @@ impl LintPass for NewWithoutDefault {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n-    fn check_fn(&mut self, cx: &LateContext<'a, 'tcx>, kind: FnKind<'tcx>, decl: &'tcx hir::FnDecl,\n-                _: &'tcx hir::Expr, span: Span, id: ast::NodeId) {\n+    fn check_fn(\n+        &mut self, cx: &LateContext<'a, 'tcx>, kind: FnKind<'tcx>, decl: &'tcx hir::FnDecl, _: &'tcx hir::Expr,\n+        span: Span, id: ast::NodeId\n+    ) {\n         if in_external_macro(cx, span) {\n             return;\n         }"}, {"sha": "a195673a53bcf4a6411c7aa107db588670b879c3", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -241,15 +241,17 @@ impl<'a, 'tcx> Visitor<'tcx> for SimilarNamesLocalVisitor<'a, 'tcx> {\n         if let Some(ref init) = local.init {\n             self.apply(|this| walk_expr(this, &**init));\n         }\n-        // add the pattern after the expression because the bindings aren't available yet in the init expression\n+        // add the pattern after the expression because the bindings aren't available yet in the init\n+        // expression\n         SimilarNamesNameVisitor(self).visit_pat(&*local.pat);\n     }\n     fn visit_block(&mut self, blk: &'tcx Block) {\n         self.apply(|this| walk_block(this, blk));\n     }\n     fn visit_arm(&mut self, arm: &'tcx Arm) {\n         self.apply(|this| {\n-            // just go through the first pattern, as either all patterns bind the same bindings or rustc would have errored much earlier\n+            // just go through the first pattern, as either all patterns\n+            // bind the same bindings or rustc would have errored much earlier\n             SimilarNamesNameVisitor(this).visit_pat(&arm.pats[0]);\n             this.apply(|this| walk_expr(this, &arm.body));\n         });"}, {"sha": "f2e478865497e4211ad0546b31122549e184108b", "filename": "clippy_lints/src/overflow_check_conditional.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -44,12 +44,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OverflowCheckConditional {\n         ], {\n             if let BinOp_::BiLt = op.node {\n                 if let BinOp_::BiAdd = op2.node {\n-                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, \"You are trying to use classic C overflow conditions that will fail in Rust.\");\n+                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n+                        \"You are trying to use classic C overflow conditions that will fail in Rust.\");\n                 }\n             }\n             if let BinOp_::BiGt = op.node {\n                 if let BinOp_::BiSub = op2.node {\n-                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, \"You are trying to use classic C underflow conditions that will fail in Rust.\");\n+                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n+                        \"You are trying to use classic C underflow conditions that will fail in Rust.\");\n                 }\n             }\n         }}\n@@ -66,12 +68,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OverflowCheckConditional {\n         ], {\n             if let BinOp_::BiGt = op.node {\n                 if let BinOp_::BiAdd = op2.node {\n-                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, \"You are trying to use classic C overflow conditions that will fail in Rust.\");\n+                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n+                        \"You are trying to use classic C overflow conditions that will fail in Rust.\");\n                 }\n             }\n             if let BinOp_::BiLt = op.node {\n                 if let BinOp_::BiSub = op2.node {\n-                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span, \"You are trying to use classic C underflow conditions that will fail in Rust.\");\n+                    span_lint(cx, OVERFLOW_CHECK_CONDITIONAL, expr.span,\n+                        \"You are trying to use classic C underflow conditions that will fail in Rust.\");\n                 }\n             }\n         }}"}, {"sha": "36fd33b22ce4dbea264e81b4293845bf3a4aeb61", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -233,8 +233,8 @@ fn lint_shadow<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, name: Name, span: Span,\n                                         snippet(cx, pattern_span, \"_\"),\n                                         snippet(cx, expr.span, \"..\")),\n                                |db| {\n-                                   db.span_note(prev_span, \"previous binding is here\");\n-                               });\n+                db.span_note(prev_span, \"previous binding is here\");\n+            });\n         } else if contains_self(cx, name, expr) {\n             span_lint_and_then(cx,\n                                SHADOW_REUSE,\n@@ -243,9 +243,9 @@ fn lint_shadow<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, name: Name, span: Span,\n                                         snippet(cx, pattern_span, \"_\"),\n                                         snippet(cx, expr.span, \"..\")),\n                                |db| {\n-                                   db.span_note(expr.span, \"initialization happens here\");\n-                                   db.span_note(prev_span, \"previous binding is here\");\n-                               });\n+                db.span_note(expr.span, \"initialization happens here\");\n+                db.span_note(prev_span, \"previous binding is here\");\n+            });\n         } else {\n             span_lint_and_then(cx,\n                                SHADOW_UNRELATED,\n@@ -254,9 +254,9 @@ fn lint_shadow<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, name: Name, span: Span,\n                                         snippet(cx, pattern_span, \"_\"),\n                                         snippet(cx, expr.span, \"..\")),\n                                |db| {\n-                                   db.span_note(expr.span, \"initialization happens here\");\n-                                   db.span_note(prev_span, \"previous binding is here\");\n-                               });\n+                db.span_note(expr.span, \"initialization happens here\");\n+                db.span_note(prev_span, \"previous binding is here\");\n+            });\n         }\n \n     } else {\n@@ -265,8 +265,8 @@ fn lint_shadow<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, name: Name, span: Span,\n                            span,\n                            &format!(\"`{}` shadows a previous declaration\", snippet(cx, pattern_span, \"_\")),\n                            |db| {\n-                               db.span_note(prev_span, \"previous binding is here\");\n-                           });\n+            db.span_note(prev_span, \"previous binding is here\");\n+        });\n     }\n }\n "}, {"sha": "195b49c72f68427f8f0ebe2cad03e64783f41114", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -152,11 +152,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {\n                                                e.span,\n                                                \"calling `as_bytes()` on a string literal\",\n                                                |db| {\n-                                                   let sugg = format!(\"b{}\", snippet(cx, args[0].span, r#\"\"foo\"\"#));\n-                                                   db.span_suggestion(e.span,\n-                                                                      \"consider using a byte string literal instead\",\n-                                                                      sugg);\n-                                               });\n+                                let sugg = format!(\"b{}\", snippet(cx, args[0].span, r#\"\"foo\"\"#));\n+                                db.span_suggestion(e.span, \"consider using a byte string literal instead\", sugg);\n+                            });\n \n                         }\n                     }"}, {"sha": "e3a9758d2b726d69f55896ba3bcfbdf08524c1c3", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -741,7 +741,7 @@ enum AbsurdComparisonResult {\n \n \n fn detect_absurd_comparison<'a>(cx: &LateContext, op: BinOp_, lhs: &'a Expr, rhs: &'a Expr)\n-                                -> Option<(ExtremeExpr<'a>, AbsurdComparisonResult)> {\n+    -> Option<(ExtremeExpr<'a>, AbsurdComparisonResult)> {\n     use types::ExtremeType::*;\n     use types::AbsurdComparisonResult::*;\n     use utils::comparisons::*;\n@@ -1007,8 +1007,10 @@ fn err_upcast_comparison(cx: &LateContext, span: &Span, expr: &Expr, always: boo\n     }\n }\n \n-fn upcast_comparison_bounds_err(cx: &LateContext, span: &Span, rel: comparisons::Rel,\n-                                lhs_bounds: Option<(FullInt, FullInt)>, lhs: &Expr, rhs: &Expr, invert: bool) {\n+fn upcast_comparison_bounds_err(\n+    cx: &LateContext, span: &Span, rel: comparisons::Rel, lhs_bounds: Option<(FullInt, FullInt)>, lhs: &Expr,\n+    rhs: &Expr, invert: bool\n+) {\n     use utils::comparisons::*;\n \n     if let Some((lb, ub)) = lhs_bounds {"}, {"sha": "ebb7735171eed460e1a26d3f07a58e4ea52892ae", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -41,8 +41,10 @@ impl LintPass for UnusedLabel {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedLabel {\n-    fn check_fn(&mut self, cx: &LateContext<'a, 'tcx>, kind: FnKind<'tcx>, decl: &'tcx hir::FnDecl,\n-                body: &'tcx hir::Expr, span: Span, fn_id: ast::NodeId) {\n+    fn check_fn(\n+        &mut self, cx: &LateContext<'a, 'tcx>, kind: FnKind<'tcx>, decl: &'tcx hir::FnDecl, body: &'tcx hir::Expr,\n+        span: Span, fn_id: ast::NodeId\n+    ) {\n         if in_macro(cx, span) {\n             return;\n         }"}, {"sha": "7c83a7f69a52271210656898fb676acba7be418d", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -9,7 +9,7 @@ use toml;\n \n /// Get the configuration file from arguments.\n pub fn file_from_args(args: &[codemap::Spanned<ast::NestedMetaItemKind>])\n-                      -> Result<Option<path::PathBuf>, (&'static str, codemap::Span)> {\n+    -> Result<Option<path::PathBuf>, (&'static str, codemap::Span)> {\n     for arg in args.iter().filter_map(|a| a.meta_item()) {\n         if arg.name() == \"conf_file\" {\n             return match arg.node {"}, {"sha": "79cf15b6c5f5ebfd6328ab966b6aebe48549252d", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -73,7 +73,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     // }\n     // }\n     //\n-    // fn check_variant(&mut self, cx: &LateContext<'a, 'tcx>, var: &'tcx hir::Variant, _: &hir::Generics) {\n+    // fn check_variant(&mut self, cx: &LateContext<'a, 'tcx>, var: &'tcx hir::Variant, _:\n+    // &hir::Generics) {\n     // if !has_attr(&var.node.attrs) {\n     // return;\n     // }"}, {"sha": "dc25020d3fc95b87e281879d7638f20fbccda3c5", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -317,9 +317,8 @@ pub fn get_trait_def_id(cx: &LateContext, path: &[&str]) -> Option<DefId> {\n \n /// Check whether a type implements a trait.\n /// See also `get_trait_def_id`.\n-pub fn implements_trait<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>, trait_id: DefId,\n-                                  ty_params: Vec<ty::Ty<'tcx>>)\n-                                  -> bool {\n+pub fn implements_trait<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>, trait_id: DefId, ty_params: Vec<ty::Ty<'tcx>>)\n+    -> bool {\n     cx.tcx.populate_implementations_for_trait_if_necessary(trait_id);\n \n     let ty = cx.tcx.erase_regions(&ty);\n@@ -403,7 +402,7 @@ pub fn snippet_block<'a, 'b, T: LintContext<'b>>(cx: &T, span: Span, default: &'\n /// Like `snippet_block`, but add braces if the expr is not an `ExprBlock`.\n /// Also takes an `Option<String>` which can be put inside the braces.\n pub fn expr_block<'a, 'b, T: LintContext<'b>>(cx: &T, expr: &Expr, option: Option<String>, default: &'a str)\n-                                              -> Cow<'a, str> {\n+    -> Cow<'a, str> {\n     let code = snippet_block(cx, expr.span, default);\n     let string = option.unwrap_or_default();\n     if let ExprBlock(_) = expr.node {\n@@ -758,7 +757,7 @@ pub fn return_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, fn_item: NodeId) -> ty::T\n // FIXME: this works correctly for lifetimes bounds (`for <'a> Foo<'a>` == `for <'b> Foo<'b>` but\n // not for type parameters.\n pub fn same_tys<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, a: ty::Ty<'tcx>, b: ty::Ty<'tcx>, parameter_item: NodeId)\n-                          -> bool {\n+    -> bool {\n     let parameter_env = ty::ParameterEnvironment::for_item(cx.tcx, parameter_item);\n     cx.tcx.infer_ctxt(None, Some(parameter_env), Reveal::All).enter(|infcx| {\n         let new_a = a.subst(infcx.tcx, infcx.parameter_environment.free_substs);"}, {"sha": "0d8362496c199b1f20e9684f851d184273cbf6f3", "filename": "rustfmt.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -4,3 +4,7 @@ fn_args_density = \"Compressed\"\n fn_call_width = 80\n fn_args_paren_newline = false\n match_block_trailing_comma = true\n+fn_args_layout = \"Block\"\n+closure_block_indent_threshold = 0\n+fn_return_indent = \"WithWhereClause\"\n+wrap_comments = true"}, {"sha": "35153ebe8af3c29d917422c550f082d1f786ffad", "filename": "src/main.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9d71f2c9ff058f1b3ae02b8b7351dcace97190/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=ed9d71f2c9ff058f1b3ae02b8b7351dcace97190", "patch": "@@ -38,19 +38,22 @@ impl ClippyCompilerCalls {\n }\n \n impl<'a> CompilerCalls<'a> for ClippyCompilerCalls {\n-    fn early_callback(&mut self, matches: &getopts::Matches, sopts: &config::Options, cfg: &ast::CrateConfig,\n-                      descriptions: &rustc_errors::registry::Registry, output: ErrorOutputType)\n-                      -> Compilation {\n+    fn early_callback(\n+        &mut self, matches: &getopts::Matches, sopts: &config::Options, cfg: &ast::CrateConfig,\n+        descriptions: &rustc_errors::registry::Registry, output: ErrorOutputType\n+    ) -> Compilation {\n         self.default.early_callback(matches, sopts, cfg, descriptions, output)\n     }\n-    fn no_input(&mut self, matches: &getopts::Matches, sopts: &config::Options, cfg: &ast::CrateConfig,\n-                odir: &Option<PathBuf>, ofile: &Option<PathBuf>, descriptions: &rustc_errors::registry::Registry)\n-                -> Option<(Input, Option<PathBuf>)> {\n+    fn no_input(\n+        &mut self, matches: &getopts::Matches, sopts: &config::Options, cfg: &ast::CrateConfig, odir: &Option<PathBuf>,\n+        ofile: &Option<PathBuf>, descriptions: &rustc_errors::registry::Registry\n+    ) -> Option<(Input, Option<PathBuf>)> {\n         self.default.no_input(matches, sopts, cfg, odir, ofile, descriptions)\n     }\n-    fn late_callback(&mut self, matches: &getopts::Matches, sess: &Session, input: &Input, odir: &Option<PathBuf>,\n-                     ofile: &Option<PathBuf>)\n-                     -> Compilation {\n+    fn late_callback(\n+        &mut self, matches: &getopts::Matches, sess: &Session, input: &Input, odir: &Option<PathBuf>,\n+        ofile: &Option<PathBuf>\n+    ) -> Compilation {\n         self.default.late_callback(matches, sess, input, odir, ofile)\n     }\n     fn build_controller(&mut self, sess: &Session, matches: &getopts::Matches) -> driver::CompileController<'a> {"}]}