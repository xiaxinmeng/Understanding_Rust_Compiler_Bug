{"sha": "bde855518b9f21fe877e1ed62eaa114861131d15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZTg1NTUxOGI5ZjIxZmU4NzdlMWVkNjJlYWExMTQ4NjExMzFkMTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-02-20T04:52:26Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-02-20T04:52:26Z"}, "message": "RefCell: document panics in Clone, PartialEq, PartialOrd, Ord. Fixes #47400", "tree": {"sha": "c837745a41431ebd27691725fc72978ab6a856ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c837745a41431ebd27691725fc72978ab6a856ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bde855518b9f21fe877e1ed62eaa114861131d15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bde855518b9f21fe877e1ed62eaa114861131d15", "html_url": "https://github.com/rust-lang/rust/commit/bde855518b9f21fe877e1ed62eaa114861131d15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bde855518b9f21fe877e1ed62eaa114861131d15/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a046e9338fb0455c33b13e8fe28da78212dedc", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a046e9338fb0455c33b13e8fe28da78212dedc", "html_url": "https://github.com/rust-lang/rust/commit/27a046e9338fb0455c33b13e8fe28da78212dedc"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "e91b2c793c5e5372727e99bf539f4bdad29c4131", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bde855518b9f21fe877e1ed62eaa114861131d15/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde855518b9f21fe877e1ed62eaa114861131d15/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=bde855518b9f21fe877e1ed62eaa114861131d15", "patch": "@@ -863,6 +863,9 @@ impl<T: ?Sized> !Sync for RefCell<T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Clone> Clone for RefCell<T> {\n+    /// # Panics\n+    ///\n+    /// Panics if the value is currently mutably borrowed.\n     #[inline]\n     fn clone(&self) -> RefCell<T> {\n         RefCell::new(self.borrow().clone())\n@@ -880,6 +883,9 @@ impl<T:Default> Default for RefCell<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + PartialEq> PartialEq for RefCell<T> {\n+    /// # Panics\n+    ///\n+    /// Panics if the value is currently mutably borrowed.\n     #[inline]\n     fn eq(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() == *other.borrow()\n@@ -891,26 +897,41 @@ impl<T: ?Sized + Eq> Eq for RefCell<T> {}\n \n #[stable(feature = \"cell_ord\", since = \"1.10.0\")]\n impl<T: ?Sized + PartialOrd> PartialOrd for RefCell<T> {\n+    /// # Panics\n+    ///\n+    /// Panics if the value is currently mutably borrowed.\n     #[inline]\n     fn partial_cmp(&self, other: &RefCell<T>) -> Option<Ordering> {\n         self.borrow().partial_cmp(&*other.borrow())\n     }\n \n+    /// # Panics\n+    ///\n+    /// Panics if the value is currently mutably borrowed.\n     #[inline]\n     fn lt(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() < *other.borrow()\n     }\n \n+    /// # Panics\n+    ///\n+    /// Panics if the value is currently mutably borrowed.\n     #[inline]\n     fn le(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() <= *other.borrow()\n     }\n \n+    /// # Panics\n+    ///\n+    /// Panics if the value is currently mutably borrowed.\n     #[inline]\n     fn gt(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() > *other.borrow()\n     }\n \n+    /// # Panics\n+    ///\n+    /// Panics if the value is currently mutably borrowed.\n     #[inline]\n     fn ge(&self, other: &RefCell<T>) -> bool {\n         *self.borrow() >= *other.borrow()\n@@ -919,6 +940,9 @@ impl<T: ?Sized + PartialOrd> PartialOrd for RefCell<T> {\n \n #[stable(feature = \"cell_ord\", since = \"1.10.0\")]\n impl<T: ?Sized + Ord> Ord for RefCell<T> {\n+    /// # Panics\n+    ///\n+    /// Panics if the value is currently mutably borrowed.\n     #[inline]\n     fn cmp(&self, other: &RefCell<T>) -> Ordering {\n         self.borrow().cmp(&*other.borrow())"}]}