{"sha": "5490e775df81e08ff605d8cba7b12624245259b4", "node_id": "C_kwDOAAsO6NoAKDU0OTBlNzc1ZGY4MWUwOGZmNjA1ZDhjYmE3YjEyNjI0MjQ1MjU5YjQ", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-21T18:27:44Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-21T18:32:06Z"}, "message": "Format tests with rustfmt (201-224 of 300)", "tree": {"sha": "2f8ec2b6fb697ebeb0b5b82679caabcc763118ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f8ec2b6fb697ebeb0b5b82679caabcc763118ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5490e775df81e08ff605d8cba7b12624245259b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmKyDqoACgkQ+boUO5X/\nbYJzAg/+MdE4xLq+oKnTqnXyV/QKuP8lWn2KQ1Alkg9ogf8+j7IySEvEc89UsFIO\n6GW5RBFohzseKU/AI6Ll7ciWm1jmMRY8GfFNNeneWSW79Vt5hT949MxFe2U2Jl3+\nLlHVdLHyQsNt/tigORpUTTebRfiUZtzFI2BK+zZA87GkGZ0ygY6vJqaV7n12su1m\nNS1KBJm32aG0BRmEeaEyrSLu5LIwYSJgqxPRUKnMfZJUU1f78TXySwQbG+xCWCXO\ndaqhiQXH1929598dwHMYh4gO+7sRw5LdCp4b2egbvG6yu0SwjDPMe4n4D8TQa7kC\nFi8rlQ7FGcNbaMK0vatfBPlB7qXyEY/oHotV/Byhjj2JYJVDHTxPnhh7IYw117Lm\nVU8qaNsVzjpMVcnOTxV39u4ALll0o57At+R68lReNZgtXGBLJP/abgyQAOrc/9J0\nffxuT6HaFMZLl85TGCv5psF0pFEUQjW+BbJE71p4yTNFjVs7no7JvrlS5ptdffa4\nwW3XlhE5BYtFoOy8mV8NqSK0aiWeoLXTTRsXV/YU9C67cDdyBhGwfVc5vTjeLRUb\nVACxSMFoZNrzz6kUDPzUDEbXNOpZg8EWhkEalL/8my61AuOWndPBEedmmMMydNwm\nDS9CAHaxLg0iYv5S9+4oV0wRW+65selX3QX1zyGnCIMGRt8aogI=\n=K1vd\n-----END PGP SIGNATURE-----", "payload": "tree 2f8ec2b6fb697ebeb0b5b82679caabcc763118ba\nparent cbb649adfe172a9ef4b1b91688c14b57c6c3b839\nauthor David Tolnay <dtolnay@gmail.com> 1655836064 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1655836326 -0700\n\nFormat tests with rustfmt (201-224 of 300)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5490e775df81e08ff605d8cba7b12624245259b4", "html_url": "https://github.com/rust-lang/rust/commit/5490e775df81e08ff605d8cba7b12624245259b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5490e775df81e08ff605d8cba7b12624245259b4/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbb649adfe172a9ef4b1b91688c14b57c6c3b839", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbb649adfe172a9ef4b1b91688c14b57c6c3b839", "html_url": "https://github.com/rust-lang/rust/commit/cbb649adfe172a9ef4b1b91688c14b57c6c3b839"}], "stats": {"total": 248, "additions": 143, "deletions": 105}, "files": [{"sha": "d5a4bf27f8973e240fa13fb5be84c52059be90ce", "filename": "tests/fail/concurrency/thread_local_static_dealloc.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -7,7 +7,9 @@\n #[thread_local]\n static mut TLS: u8 = 0;\n \n-fn main() { unsafe {\n-    let dangling_ptr = std::thread::spawn(|| &TLS as *const u8 as usize).join().unwrap();\n-    let _val = *(dangling_ptr as *const u8); //~ ERROR dereferenced after this allocation got freed\n-} }\n+fn main() {\n+    unsafe {\n+        let dangling_ptr = std::thread::spawn(|| &TLS as *const u8 as usize).join().unwrap();\n+        let _val = *(dangling_ptr as *const u8); //~ ERROR dereferenced after this allocation got freed\n+    }\n+}"}, {"sha": "4433f28e3459a81de51db54776896776862bac3a", "filename": "tests/fail/stacked_borrows/interior_mut2.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -7,22 +7,24 @@ unsafe fn unsafe_cell_get<T>(x: &UnsafeCell<T>) -> &'static mut T {\n     mem::transmute(x)\n }\n \n-fn main() { unsafe {\n-    let c = &UnsafeCell::new(UnsafeCell::new(0));\n-    let inner_uniq = &mut *c.get();\n-    let inner_shr = &*inner_uniq;\n-    // stack: [c: SharedReadWrite, inner_uniq: Unique, inner_shr: SharedReadWrite]\n+fn main() {\n+    unsafe {\n+        let c = &UnsafeCell::new(UnsafeCell::new(0));\n+        let inner_uniq = &mut *c.get();\n+        let inner_shr = &*inner_uniq;\n+        // stack: [c: SharedReadWrite, inner_uniq: Unique, inner_shr: SharedReadWrite]\n \n-    let _val = c.get().read(); // invalidates inner_uniq\n-    // stack: [c: SharedReadWrite, inner_uniq: Disabled, inner_shr: SharedReadWrite]\n+        let _val = c.get().read(); // invalidates inner_uniq\n+        // stack: [c: SharedReadWrite, inner_uniq: Disabled, inner_shr: SharedReadWrite]\n \n-    // We have to be careful not to add any raw pointers above inner_uniq in\n-    // the stack, hence the use of unsafe_cell_get.\n-    let _val = *unsafe_cell_get(inner_shr); // this still works\n+        // We have to be careful not to add any raw pointers above inner_uniq in\n+        // the stack, hence the use of unsafe_cell_get.\n+        let _val = *unsafe_cell_get(inner_shr); // this still works\n \n-    *c.get() = UnsafeCell::new(0); // now inner_shr gets invalidated\n-    // stack: [c: SharedReadWrite]\n+        *c.get() = UnsafeCell::new(0); // now inner_shr gets invalidated\n+        // stack: [c: SharedReadWrite]\n \n-    // now this does not work any more\n-    let _val = *inner_shr.get(); //~ ERROR borrow stack\n-} }\n+        // now this does not work any more\n+        let _val = *inner_shr.get(); //~ ERROR borrow stack\n+    }\n+}"}, {"sha": "c1fc695e0d651eb46bfdc5ca3505c379b4c1a762", "filename": "tests/fail/stacked_borrows/issue-miri-1050-1.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -1,6 +1,8 @@\n // error-pattern: pointer to 4 bytes starting at offset 0 is out-of-bounds\n \n-fn main() { unsafe {\n-    let ptr = Box::into_raw(Box::new(0u16));\n-    Box::from_raw(ptr as *mut u32);\n-} }\n+fn main() {\n+    unsafe {\n+        let ptr = Box::into_raw(Box::new(0u16));\n+        Box::from_raw(ptr as *mut u32);\n+    }\n+}"}, {"sha": "7d8809cedcd79a4478084c4a860ff93c8cb73651", "filename": "tests/fail/stacked_borrows/issue-miri-1050-2.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -1,7 +1,9 @@\n // error-pattern: is not a valid pointer\n use std::ptr::NonNull;\n \n-fn main() { unsafe {\n-    let ptr = NonNull::<i32>::dangling();\n-    Box::from_raw(ptr.as_ptr());\n-} }\n+fn main() {\n+    unsafe {\n+        let ptr = NonNull::<i32>::dangling();\n+        Box::from_raw(ptr.as_ptr());\n+    }\n+}"}, {"sha": "a1cb7107eee0d432d6d36e0bdacd347881c485e0", "filename": "tests/fail/stacked_borrows/mut_exclusive_violation1.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -1,28 +1,32 @@\n fn demo_mut_advanced_unique(our: &mut i32) -> i32 {\n-  unknown_code_1(&*our);\n+    unknown_code_1(&*our);\n \n-  // This \"re-asserts\" uniqueness of the reference: After writing, we know\n-  // our tag is at the top of the stack.\n-  *our = 5;\n+    // This \"re-asserts\" uniqueness of the reference: After writing, we know\n+    // our tag is at the top of the stack.\n+    *our = 5;\n \n-  unknown_code_2();\n+    unknown_code_2();\n \n-  // We know this will return 5\n-  *our\n+    // We know this will return 5\n+    *our\n }\n \n // Now comes the evil context\n use std::ptr;\n \n static mut LEAK: *mut i32 = ptr::null_mut();\n \n-fn unknown_code_1(x: &i32) { unsafe {\n-    LEAK = x as *const _ as *mut _;\n-} }\n+fn unknown_code_1(x: &i32) {\n+    unsafe {\n+        LEAK = x as *const _ as *mut _;\n+    }\n+}\n \n-fn unknown_code_2() { unsafe {\n-    *LEAK = 7; //~ ERROR borrow stack\n-} }\n+fn unknown_code_2() {\n+    unsafe {\n+        *LEAK = 7; //~ ERROR borrow stack\n+    }\n+}\n \n fn main() {\n     demo_mut_advanced_unique(&mut 0);"}, {"sha": "a5bf8353bae8c4cea12383252c9cdb78aa8ba9a5", "filename": "tests/fail/stacked_borrows/mut_exclusive_violation2.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -1,10 +1,12 @@\n use std::ptr::NonNull;\n \n-fn main() { unsafe {\n-    let x = &mut 0;\n-    let mut ptr1 = NonNull::from(x);\n-    let mut ptr2 = ptr1.clone();\n-    let raw1 = ptr1.as_mut();\n-    let _raw2 = ptr2.as_mut();\n-    let _val = *raw1; //~ ERROR borrow stack\n-} }\n+fn main() {\n+    unsafe {\n+        let x = &mut 0;\n+        let mut ptr1 = NonNull::from(x);\n+        let mut ptr2 = ptr1.clone();\n+        let raw1 = ptr1.as_mut();\n+        let _raw2 = ptr2.as_mut();\n+        let _val = *raw1; //~ ERROR borrow stack\n+    }\n+}"}, {"sha": "ccdb3dc50579054f3d7d485abaf52a43668fd34f", "filename": "tests/fail/stacked_borrows/return_invalid_mut_option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -10,7 +10,7 @@ fn foo(x: &mut (i32, i32)) -> Option<&mut i32> {\n \n fn main() {\n     match foo(&mut (1, 2)) {\n-        Some(_x) => {}, //~ ERROR borrow stack\n-        None => {},\n+        Some(_x) => {} //~ ERROR borrow stack\n+        None => {}\n     }\n }"}, {"sha": "42b4871c46747593f5c9a8ab53e00bb7e5748ad4", "filename": "tests/fail/stacked_borrows/return_invalid_shr_option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -9,7 +9,7 @@ fn foo(x: &mut (i32, i32)) -> Option<&i32> {\n \n fn main() {\n     match foo(&mut (1, 2)) {\n-        Some(_x) => {}, //~ ERROR borrow stack\n-        None => {},\n+        Some(_x) => {} //~ ERROR borrow stack\n+        None => {}\n     }\n }"}, {"sha": "a08d2b716ee73de15c1d2a90fd018134c3948ffe", "filename": "tests/fail/stacked_borrows/shared_rw_borrows_are_weak1.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -2,13 +2,15 @@\n // *below* an already granted Unique -- so writing to\n // the SharedReadWrite will invalidate the Unique.\n \n-use std::mem;\n use std::cell::Cell;\n+use std::mem;\n \n-fn main() { unsafe {\n-    let x = &mut Cell::new(0);\n-    let y: &mut Cell<i32> = mem::transmute(&mut *x); // launder lifetime\n-    let shr_rw = &*x; // thanks to interior mutability this will be a SharedReadWrite\n-    shr_rw.set(1);\n-    y.get_mut(); //~ ERROR borrow stack\n-} }\n+fn main() {\n+    unsafe {\n+        let x = &mut Cell::new(0);\n+        let y: &mut Cell<i32> = mem::transmute(&mut *x); // launder lifetime\n+        let shr_rw = &*x; // thanks to interior mutability this will be a SharedReadWrite\n+        shr_rw.set(1);\n+        y.get_mut(); //~ ERROR borrow stack\n+    }\n+}"}, {"sha": "07163456cebe724c948763f2967f4a8708dcf9b8", "filename": "tests/fail/stacked_borrows/shared_rw_borrows_are_weak2.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -3,13 +3,15 @@\n // the SharedReadWrite will invalidate the SharedReadWrite.\n // normalize-stderr-test: \"0x[0-9a-fA-F]+\" -> \"$$HEX\"\n \n-use std::mem;\n use std::cell::RefCell;\n+use std::mem;\n \n-fn main() { unsafe {\n-    let x = &mut RefCell::new(0);\n-    let y: &i32 = mem::transmute(&*x.borrow()); // launder lifetime\n-    let shr_rw = &*x; // thanks to interior mutability this will be a SharedReadWrite\n-    shr_rw.replace(1);\n-    let _val = *y; //~ ERROR borrow stack\n-} }\n+fn main() {\n+    unsafe {\n+        let x = &mut RefCell::new(0);\n+        let y: &i32 = mem::transmute(&*x.borrow()); // launder lifetime\n+        let shr_rw = &*x; // thanks to interior mutability this will be a SharedReadWrite\n+        shr_rw.replace(1);\n+        let _val = *y; //~ ERROR borrow stack\n+    }\n+}"}, {"sha": "461a81b8fbac74b10e4f7d2aa41a0f20c1ab8f2c", "filename": "tests/fail/sync/libc_pthread_mutex_destroy_locked.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_destroy_locked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_destroy_locked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_destroy_locked.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -7,7 +7,10 @@ extern crate libc;\n fn main() {\n     unsafe {\n         let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();\n-        assert_eq!(libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, libc::PTHREAD_MUTEX_NORMAL), 0);\n+        assert_eq!(\n+            libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, libc::PTHREAD_MUTEX_NORMAL),\n+            0\n+        );\n         let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n         assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n         assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);"}, {"sha": "7e7af617d5d9cbc5f82cd1fd6820db5e877edd0f", "filename": "tests/fail/sync/libc_pthread_mutex_normal_deadlock.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -7,7 +7,10 @@ extern crate libc;\n fn main() {\n     unsafe {\n         let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();\n-        assert_eq!(libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, libc::PTHREAD_MUTEX_NORMAL), 0);\n+        assert_eq!(\n+            libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, libc::PTHREAD_MUTEX_NORMAL),\n+            0\n+        );\n         let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n         assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n         assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);"}, {"sha": "c8dd84b838a2d26994ad0076a53f07c613c0d124", "filename": "tests/fail/sync/libc_pthread_mutex_normal_unlock_unlocked.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -7,7 +7,10 @@ extern crate libc;\n fn main() {\n     unsafe {\n         let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();\n-        assert_eq!(libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, libc::PTHREAD_MUTEX_NORMAL), 0);\n+        assert_eq!(\n+            libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, libc::PTHREAD_MUTEX_NORMAL),\n+            0\n+        );\n         let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n         assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n         assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);"}, {"sha": "0835287b9e4ff3e63917f9de0df7fd3bc767dafd", "filename": "tests/fail/transmute-pair-uninit.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Ftransmute-pair-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Ftransmute-pair-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute-pair-uninit.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -10,13 +10,15 @@ fn main() {\n     let y = &x;\n     // Now read this bytewise. There should be (`ptr_size + 1`) def bytes followed by\n     // (`ptr_size - 1`) undef bytes (the padding after the bool) in there.\n-    let z : *const u8 = y as *const _ as *const _;\n+    let z: *const u8 = y as *const _ as *const _;\n     let first_undef = mem::size_of::<usize>() as isize + 1;\n     for i in 0..first_undef {\n         let byte = unsafe { *z.offset(i) };\n         assert_eq!(byte, 0);\n     }\n     let v = unsafe { *z.offset(first_undef) };\n     //~^ ERROR uninitialized\n-    if v == 0 { println!(\"it is zero\"); }\n+    if v == 0 {\n+        println!(\"it is zero\");\n+    }\n }"}, {"sha": "f9fa2ace757004880ed9beb3b9606c6342262e54", "filename": "tests/fail/transmute_fat1.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Ftransmute_fat1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Ftransmute_fat1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute_fat1.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -2,13 +2,9 @@\n // normalize-stderr-test: \"\\[u8; (08|16)\\]\" -> \"$$ARRAY\"\n \n fn main() {\n-    #[cfg(target_pointer_width=\"64\")]\n-    let bad = unsafe {\n-        std::mem::transmute::<&[u8], [u8; 16]>(&[1u8])\n-    };\n-    #[cfg(target_pointer_width=\"32\")]\n-    let bad = unsafe {\n-        std::mem::transmute::<&[u8], [u8; 08]>(&[1u8])\n-    };\n-    let _val = bad[0] + bad[bad.len()-1];\n+    #[cfg(target_pointer_width = \"64\")]\n+    let bad = unsafe { std::mem::transmute::<&[u8], [u8; 16]>(&[1u8]) };\n+    #[cfg(target_pointer_width = \"32\")]\n+    let bad = unsafe { std::mem::transmute::<&[u8], [u8; 08]>(&[1u8]) };\n+    let _val = bad[0] + bad[bad.len() - 1];\n }"}, {"sha": "e99d8c967cdddb55fea0eb816bbd406822cedebe", "filename": "tests/fail/unaligned_pointers/alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Funaligned_pointers%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Funaligned_pointers%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Falignment.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     let x_ptr: *mut u8 = x.as_mut_ptr();\n     // At least one of these is definitely unaligned.\n     unsafe {\n-        *(x_ptr        as *mut u32) = 42;\n+        *(x_ptr as *mut u32) = 42;\n         *(x_ptr.add(1) as *mut u32) = 42;\n     }\n }"}, {"sha": "020e7be34f70661c93a18f34c99fc1bdece67d41", "filename": "tests/fail/validity/cast_fn_ptr1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     // Cast a function pointer such that on a call, the argument gets transmuted\n     // from raw ptr to reference. This is ABI-compatible, so it's not the call that\n     // should fail, but validation should.\n-    fn f(_x: &i32) { }\n+    fn f(_x: &i32) {}\n \n     let g: fn(*const i32) = unsafe { std::mem::transmute(f as fn(&i32)) };\n "}, {"sha": "10fc39f56fae3cd745a2229cb27fe746371e61e1", "filename": "tests/fail/validity/cast_fn_ptr2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -2,7 +2,9 @@ fn main() {\n     // Cast a function pointer such that when returning, the return value gets transmuted\n     // from raw ptr to reference. This is ABI-compatible, so it's not the call that\n     // should fail, but validation should.\n-    fn f() -> *const i32 { 0usize as *const i32 }\n+    fn f() -> *const i32 {\n+        0usize as *const i32\n+    }\n \n     let g: fn() -> &'static i32 = unsafe { std::mem::transmute(f as fn() -> *const i32) };\n "}, {"sha": "9722e6492c8297e7d395126057aaa7cb3ef4a102", "filename": "tests/fail/validity/invalid_enum_tag.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -1,6 +1,9 @@\n #[repr(C)]\n pub enum Foo {\n-    A, B, C, D\n+    A,\n+    B,\n+    C,\n+    D,\n }\n \n fn main() {"}, {"sha": "0a2f6f5b152c5f5fb08d704cd771caae52acc899", "filename": "tests/fail/validity/invalid_wide_raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fvalidity%2Finvalid_wide_raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fvalidity%2Finvalid_wide_raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_wide_raw.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -1,11 +1,11 @@\n #![allow(invalid_value)]\n \n fn main() {\n-    trait T { }\n+    trait T {}\n     #[derive(Debug)]\n     struct S {\n         #[allow(dead_code)]\n-        x: * mut dyn T\n+        x: *mut dyn T,\n     }\n     dbg!(S { x: unsafe { std::mem::transmute((0usize, 0usize)) } }); //~ ERROR: encountered dangling vtable pointer in wide pointer\n }"}, {"sha": "a46ce017c5a0f3db0098a68904f83bd41be3977e", "filename": "tests/fail/validity/ref_to_uninhabited1.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited1.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -1,7 +1,9 @@\n #![feature(never_type)]\n-use std::mem::{transmute, forget};\n+use std::mem::{forget, transmute};\n \n-fn main() { unsafe {\n-    let x: Box<!> = transmute(&mut 42); //~ERROR encountered a box pointing to uninhabited type !\n-    forget(x);\n-} }\n+fn main() {\n+    unsafe {\n+        let x: Box<!> = transmute(&mut 42); //~ERROR encountered a box pointing to uninhabited type !\n+        forget(x);\n+    }\n+}"}, {"sha": "0a791d1e7fee89820aabef1e8ff37244af9b6b06", "filename": "tests/fail/validity/ref_to_uninhabited2.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited2.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -2,6 +2,8 @@ use std::mem::transmute;\n \n enum Void {}\n \n-fn main() { unsafe {\n-    let _x: &(i32, Void) = transmute(&42); //~ERROR encountered a reference pointing to uninhabited type (i32, Void)\n-} }\n+fn main() {\n+    unsafe {\n+        let _x: &(i32, Void) = transmute(&42); //~ERROR encountered a reference pointing to uninhabited type (i32, Void)\n+    }\n+}"}, {"sha": "61d903220758580e8b0d8d0401c9f4bec66ff23c", "filename": "tests/fail/validity/too-big-slice.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fvalidity%2Ftoo-big-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fvalidity%2Ftoo-big-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Ftoo-big-slice.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -1,6 +1,8 @@\n use std::mem;\n \n-fn main() { unsafe {\n-    let ptr = Box::into_raw(Box::new(0u8));\n-    let _x: &[u8] = mem::transmute((ptr, usize::MAX)); //~ ERROR: invalid reference metadata: slice is bigger than largest supported object\n-} }\n+fn main() {\n+    unsafe {\n+        let ptr = Box::into_raw(Box::new(0u8));\n+        let _x: &[u8] = mem::transmute((ptr, usize::MAX)); //~ ERROR: invalid reference metadata: slice is bigger than largest supported object\n+    }\n+}"}, {"sha": "280205dccbf238a744c0137a014d9a7f842eb48a", "filename": "tests/fail/validity/too-big-unsized.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fvalidity%2Ftoo-big-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5490e775df81e08ff605d8cba7b12624245259b4/tests%2Ffail%2Fvalidity%2Ftoo-big-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Ftoo-big-unsized.rs?ref=5490e775df81e08ff605d8cba7b12624245259b4", "patch": "@@ -6,8 +6,10 @@ struct MySlice {\n     tail: [u8],\n }\n \n-fn main() { unsafe {\n-    let ptr = Box::into_raw(Box::new(0u8));\n-    // The slice part is actually not \"too big\", but together with the `prefix` field it is.\n-    let _x: &MySlice = mem::transmute((ptr, isize::MAX as usize)); //~ ERROR: invalid reference metadata: total size is bigger than largest supported object\n-} }\n+fn main() {\n+    unsafe {\n+        let ptr = Box::into_raw(Box::new(0u8));\n+        // The slice part is actually not \"too big\", but together with the `prefix` field it is.\n+        let _x: &MySlice = mem::transmute((ptr, isize::MAX as usize)); //~ ERROR: invalid reference metadata: total size is bigger than largest supported object\n+    }\n+}"}]}