{"sha": "9be526e8ebfd318ecc5c6d5a6c40886dffb1be95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZTUyNmU4ZWJmZDMxOGVjYzVjNmQ1YTZjNDA4ODZkZmZiMWJlOTU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-24T11:37:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-28T17:59:57Z"}, "message": "rustc_metadata: Move `has_global_allocator` from session to cstore", "tree": {"sha": "4112dff7b4997c7eb5480c31f9c027337a1ce10b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4112dff7b4997c7eb5480c31f9c027337a1ce10b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95", "html_url": "https://github.com/rust-lang/rust/commit/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c8105e8b743ce1742a91a07dca3b5a23f72178b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8105e8b743ce1742a91a07dca3b5a23f72178b", "html_url": "https://github.com/rust-lang/rust/commit/4c8105e8b743ce1742a91a07dca3b5a23f72178b"}], "stats": {"total": 57, "additions": 29, "deletions": 28}, "files": [{"sha": "5128270148015323a9325b2dc1174f7bef951ddc", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=9be526e8ebfd318ecc5c6d5a6c40886dffb1be95", "patch": "@@ -237,6 +237,7 @@ pub trait CrateStore {\n     fn metadata_encoding_version(&self) -> &[u8];\n     fn injected_panic_runtime(&self) -> Option<CrateNum>;\n     fn allocator_kind(&self) -> Option<AllocatorKind>;\n+    fn has_global_allocator(&self) -> bool;\n }\n \n pub type CrateStoreDyn = dyn CrateStore + sync::Sync;"}, {"sha": "0b9d04ca6a3b5d504e6e781ecedafa735b8b728c", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=9be526e8ebfd318ecc5c6d5a6c40886dffb1be95", "patch": "@@ -133,9 +133,6 @@ pub struct Session {\n     /// false positives about a job server in our environment.\n     pub jobserver: Client,\n \n-    /// Metadata about the allocators for the current crate being compiled.\n-    pub has_global_allocator: Once<bool>,\n-\n     /// Cap lint level specified by a driver specifically.\n     pub driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n \n@@ -1180,7 +1177,6 @@ fn build_session_(\n         print_fuel_crate,\n         print_fuel,\n         jobserver: jobserver::client(),\n-        has_global_allocator: Once::new(),\n         driver_lint_caps,\n         trait_methods_not_found: Lock::new(Default::default()),\n         confused_type_with_std_module: Lock::new(Default::default()),"}, {"sha": "0f3441267f56141601d90be0d3140f811e3fd74e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=9be526e8ebfd318ecc5c6d5a6c40886dffb1be95", "patch": "@@ -3028,4 +3028,8 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         // We want to check if the panic handler was defined in this crate\n         tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())\n     };\n+    providers.has_global_allocator = |tcx, cnum| {\n+        assert_eq!(cnum, LOCAL_CRATE);\n+        tcx.cstore.has_global_allocator()\n+    };\n }"}, {"sha": "3c5468466e4a39ff0084c33b656fd5e7744556b3", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=9be526e8ebfd318ecc5c6d5a6c40886dffb1be95", "patch": "@@ -37,7 +37,11 @@ use rustc_error_codes::*;\n pub struct CStore {\n     metas: IndexVec<CrateNum, Option<Lrc<CrateMetadata>>>,\n     injected_panic_runtime: Option<CrateNum>,\n+    /// This crate needs an allocator and either provides it itself, or finds it in a dependency.\n+    /// If the above is true, then this field denotes the kind of the found allocator.\n     allocator_kind: Option<AllocatorKind>,\n+    /// This crate has a `#[global_allocator]` item.\n+    has_global_allocator: bool,\n }\n \n pub struct CrateLoader<'a> {\n@@ -150,6 +154,10 @@ impl CStore {\n     crate fn allocator_kind(&self) -> Option<AllocatorKind> {\n         self.allocator_kind\n     }\n+\n+    crate fn has_global_allocator(&self) -> bool {\n+        self.has_global_allocator\n+    }\n }\n \n impl<'a> CrateLoader<'a> {\n@@ -170,6 +178,7 @@ impl<'a> CrateLoader<'a> {\n                 metas: IndexVec::from_elem_n(None, 1),\n                 injected_panic_runtime: None,\n                 allocator_kind: None,\n+                has_global_allocator: false,\n             }\n         }\n     }\n@@ -562,7 +571,6 @@ impl<'a> CrateLoader<'a> {\n         });\n         if !any_non_rlib {\n             info!(\"panic runtime injection skipped, only generating rlib\");\n-            self.cstore.injected_panic_runtime = None;\n             return\n         }\n \n@@ -593,7 +601,6 @@ impl<'a> CrateLoader<'a> {\n         // we just don't need one at all, then we're done here and there's\n         // nothing else to do.\n         if !needs_panic_runtime || runtime_found {\n-            self.cstore.injected_panic_runtime = None;\n             return\n         }\n \n@@ -753,7 +760,7 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     fn inject_allocator_crate(&mut self, krate: &ast::Crate) {\n-        let has_global_allocator = match &*global_allocator_spans(krate) {\n+        self.cstore.has_global_allocator = match &*global_allocator_spans(krate) {\n             [span1, span2, ..] => {\n                 self.sess.struct_span_err(*span2, \"cannot define multiple global allocators\")\n                     .span_label(*span2, \"cannot define a new global allocator\")\n@@ -763,7 +770,6 @@ impl<'a> CrateLoader<'a> {\n             }\n             spans => !spans.is_empty()\n         };\n-        self.sess.has_global_allocator.set(has_global_allocator);\n \n         // Check to see if we actually need an allocator. This desire comes\n         // about through the `#![needs_allocator]` attribute and is typically\n@@ -774,7 +780,6 @@ impl<'a> CrateLoader<'a> {\n             needs_allocator = needs_allocator || data.needs_allocator();\n         });\n         if !needs_allocator {\n-            self.cstore.allocator_kind = None;\n             return\n         }\n \n@@ -790,7 +795,6 @@ impl<'a> CrateLoader<'a> {\n                 }\n             });\n         if all_rlib {\n-            self.cstore.allocator_kind = None;\n             return\n         }\n \n@@ -801,8 +805,8 @@ impl<'a> CrateLoader<'a> {\n         // First up we check for global allocators. Look at the crate graph here\n         // and see what's a global allocator, including if we ourselves are a\n         // global allocator.\n-        let mut global_allocator = if has_global_allocator {\n-            Some(None)\n+        let mut global_allocator = if self.cstore.has_global_allocator {\n+            Some(Symbol::intern(\"this crate\"))\n         } else {\n             None\n         };\n@@ -811,19 +815,14 @@ impl<'a> CrateLoader<'a> {\n                 return\n             }\n             match global_allocator {\n-                Some(Some(other_crate)) => {\n+                Some(other_crate) => {\n                     self.sess.err(&format!(\"the `#[global_allocator]` in {} \\\n-                                            conflicts with this global \\\n+                                            conflicts with global \\\n                                             allocator in: {}\",\n                                            other_crate,\n                                            data.name()));\n                 }\n-                Some(None) => {\n-                    self.sess.err(&format!(\"the `#[global_allocator]` in this \\\n-                                            crate conflicts with global \\\n-                                            allocator in: {}\", data.name()));\n-                }\n-                None => global_allocator = Some(Some(data.name())),\n+                None => global_allocator = Some(data.name()),\n             }\n         });\n         if global_allocator.is_some() {\n@@ -848,7 +847,7 @@ impl<'a> CrateLoader<'a> {\n                            add `#[global_allocator]` to a static item \\\n                            that implements the GlobalAlloc trait.\");\n         }\n-        self.cstore.allocator_kind = Some(AllocatorKind::DefaultLib);\n+        self.cstore.allocator_kind = Some(AllocatorKind::Default);\n     }\n \n     fn inject_dependency_if(&self,"}, {"sha": "f21fff956d4fbd8289ec1d5ffe7da94f3e9c47e3", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=9be526e8ebfd318ecc5c6d5a6c40886dffb1be95", "patch": "@@ -536,4 +536,8 @@ impl CrateStore for CStore {\n     fn allocator_kind(&self) -> Option<AllocatorKind> {\n         self.allocator_kind()\n     }\n+\n+    fn has_global_allocator(&self) -> bool {\n+        self.has_global_allocator()\n+    }\n }"}, {"sha": "3a318ddc1e13a5bf61d073c3da154a8d8b54d5f5", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=9be526e8ebfd318ecc5c6d5a6c40886dffb1be95", "patch": "@@ -496,7 +496,6 @@ impl<'tcx> EncodeContext<'tcx> {\n \n         let attrs = tcx.hir().krate_attrs();\n         let has_default_lib_allocator = attr::contains_name(&attrs, sym::default_lib_allocator);\n-        let has_global_allocator = *tcx.sess.has_global_allocator.get();\n \n         let root = self.lazy(CrateRoot {\n             name: tcx.crate_name(LOCAL_CRATE),\n@@ -506,7 +505,7 @@ impl<'tcx> EncodeContext<'tcx> {\n             disambiguator: tcx.sess.local_crate_disambiguator(),\n             panic_strategy: tcx.sess.panic_strategy(),\n             edition: tcx.sess.edition(),\n-            has_global_allocator: has_global_allocator,\n+            has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),\n             has_panic_handler: tcx.has_panic_handler(LOCAL_CRATE),\n             has_default_lib_allocator: has_default_lib_allocator,\n             plugin_registrar_fn: tcx.plugin_registrar_fn(LOCAL_CRATE).map(|id| id.index),"}, {"sha": "cc3eeed04a603145dfab479c458cadf3402f4261", "filename": "src/libsyntax/expand/allocator.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95/src%2Flibsyntax%2Fexpand%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95/src%2Flibsyntax%2Fexpand%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fexpand%2Fallocator.rs?ref=9be526e8ebfd318ecc5c6d5a6c40886dffb1be95", "patch": "@@ -5,16 +5,14 @@ use syntax_pos::Span;\n #[derive(Clone, Copy)]\n pub enum AllocatorKind {\n     Global,\n-    DefaultLib,\n-    DefaultExe,\n+    Default,\n }\n \n impl AllocatorKind {\n     pub fn fn_name(&self, base: &str) -> String {\n         match *self {\n             AllocatorKind::Global => format!(\"__rg_{}\", base),\n-            AllocatorKind::DefaultLib => format!(\"__rdl_{}\", base),\n-            AllocatorKind::DefaultExe => format!(\"__rde_{}\", base),\n+            AllocatorKind::Default => format!(\"__rdl_{}\", base),\n         }\n     }\n }"}, {"sha": "a3079113d01cfa29ef828e9b0821bb6b7d7d098c", "filename": "src/test/ui/allocator/two-allocators3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9be526e8ebfd318ecc5c6d5a6c40886dffb1be95/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.stderr?ref=9be526e8ebfd318ecc5c6d5a6c40886dffb1be95", "patch": "@@ -1,4 +1,4 @@\n-error: the `#[global_allocator]` in system_allocator conflicts with this global allocator in: system_allocator2\n+error: the `#[global_allocator]` in system_allocator conflicts with global allocator in: system_allocator2\n \n error: aborting due to previous error\n "}]}