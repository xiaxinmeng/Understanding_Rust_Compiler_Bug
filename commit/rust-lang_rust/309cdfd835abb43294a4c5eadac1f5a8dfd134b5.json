{"sha": "309cdfd835abb43294a4c5eadac1f5a8dfd134b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwOWNkZmQ4MzVhYmI0MzI5NGE0YzVlYWRhYzFmNWE4ZGZkMTM0YjU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-15T00:32:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-15T01:12:41Z"}, "message": "Remove more uses of 'move' from core::vec", "tree": {"sha": "502456e66db1443d68b5f6ba81f41e27f317b5fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/502456e66db1443d68b5f6ba81f41e27f317b5fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/309cdfd835abb43294a4c5eadac1f5a8dfd134b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/309cdfd835abb43294a4c5eadac1f5a8dfd134b5", "html_url": "https://github.com/rust-lang/rust/commit/309cdfd835abb43294a4c5eadac1f5a8dfd134b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/309cdfd835abb43294a4c5eadac1f5a8dfd134b5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c21f348a45f593ed4452fab9d083283cd4e7ce0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c21f348a45f593ed4452fab9d083283cd4e7ce0", "html_url": "https://github.com/rust-lang/rust/commit/2c21f348a45f593ed4452fab9d083283cd4e7ce0"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "c568faccf8931432849ff4934065056ea687a5ef", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/309cdfd835abb43294a4c5eadac1f5a8dfd134b5/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309cdfd835abb43294a4c5eadac1f5a8dfd134b5/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=309cdfd835abb43294a4c5eadac1f5a8dfd134b5", "patch": "@@ -29,6 +29,7 @@ extern mod rustrt {\n #[abi = \"rust-intrinsic\"]\n extern mod rusti {\n     fn move_val_init<T>(dst: &mut T, -src: T);\n+    fn init<T>() -> T;\n }\n \n \n@@ -483,9 +484,15 @@ pub fn remove<T>(v: &mut ~[T], i: uint) -> T {\n pub fn consume<T>(v: ~[T], f: fn(uint, v: T)) unsafe {\n     let mut v = v; // FIXME(#3488)\n \n-    do as_imm_buf(v) |p, ln| {\n+    do as_mut_buf(v) |p, ln| {\n         for uint::range(0, ln) |i| {\n-            let x = move *ptr::offset(p, i);\n+            // NB: This unsafe operation counts on init writing 0s to the\n+            // holes we create in the vector. That ensures that, if the\n+            // iterator fails then we won't try to clean up the consumed\n+            // elements during unwinding\n+            let mut x = rusti::init();\n+            let p = ptr::mut_offset(p, i);\n+            x <-> *p;\n             f(i, x);\n         }\n     }\n@@ -505,7 +512,9 @@ pub fn pop<T>(v: &mut ~[T]) -> T {\n     }\n     let valptr = ptr::to_mut_unsafe_ptr(&mut v[ln - 1u]);\n     unsafe {\n-        let val = move *valptr;\n+        // XXX: Should be rusti::uninit() - we don't need this zeroed\n+        let mut val = rusti::init();\n+        val <-> *valptr;\n         raw::set_len(v, ln - 1u);\n         val\n     }\n@@ -574,9 +583,11 @@ pub fn push_all_move<T>(v: &mut ~[T], rhs: ~[T]) {\n     let mut rhs = rhs; // FIXME(#3488)\n     reserve(v, v.len() + rhs.len());\n     unsafe {\n-        do as_imm_buf(rhs) |p, len| {\n+        do as_mut_buf(rhs) |p, len| {\n             for uint::range(0, len) |i| {\n-                let x = move *ptr::offset(p, i);\n+                // XXX Should be rusti::uninit() - don't need to zero\n+                let mut x = rusti::init();\n+                x <-> *ptr::mut_offset(p, i);\n                 push(v, x);\n             }\n         }\n@@ -586,12 +597,14 @@ pub fn push_all_move<T>(v: &mut ~[T], rhs: ~[T]) {\n \n /// Shorten a vector, dropping excess elements.\n pub fn truncate<T>(v: &mut ~[T], newlen: uint) {\n-    do as_imm_buf(*v) |p, oldlen| {\n+    do as_mut_buf(*v) |p, oldlen| {\n         assert(newlen <= oldlen);\n         unsafe {\n             // This loop is optimized out for non-drop types.\n             for uint::range(newlen, oldlen) |i| {\n-                let _dropped = move *ptr::offset(p, i);\n+                // XXX Should be rusti::uninit() - don't need to zero\n+                let mut dropped = rusti::init();\n+                dropped <-> *ptr::mut_offset(p, i);\n             }\n             raw::set_len(v, newlen);\n         }\n@@ -614,12 +627,14 @@ pub fn dedup<T: Eq>(v: &mut ~[T]) unsafe {\n             // last_written < next_to_read < ln\n             if *ptr::mut_offset(p, next_to_read) ==\n                 *ptr::mut_offset(p, last_written) {\n-                let _dropped = move *ptr::mut_offset(p, next_to_read);\n+                // XXX Should be rusti::uninit() - don't need to zero\n+                let mut dropped = rusti::init();\n+                dropped <-> *ptr::mut_offset(p, next_to_read);\n             } else {\n                 last_written += 1;\n                 // last_written <= next_to_read < ln\n                 if next_to_read != last_written {\n-                    *ptr::mut_offset(p, last_written) = move\n+                    *ptr::mut_offset(p, last_written) <->\n                         *ptr::mut_offset(p, next_to_read);\n                 }\n             }"}]}