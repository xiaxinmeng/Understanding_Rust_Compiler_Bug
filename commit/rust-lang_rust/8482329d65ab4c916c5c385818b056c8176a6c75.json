{"sha": "8482329d65ab4c916c5c385818b056c8176a6c75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ODIzMjlkNjVhYjRjOTE2YzVjMzg1ODE4YjA1NmM4MTc2YTZjNzU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-06-08T14:42:48Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-06-08T14:42:48Z"}, "message": "source_to_def: skip items with no def", "tree": {"sha": "fc27726da074c677ef7c603740dd674c60ed2419", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc27726da074c677ef7c603740dd674c60ed2419"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8482329d65ab4c916c5c385818b056c8176a6c75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8482329d65ab4c916c5c385818b056c8176a6c75", "html_url": "https://github.com/rust-lang/rust/commit/8482329d65ab4c916c5c385818b056c8176a6c75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8482329d65ab4c916c5c385818b056c8176a6c75/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16e142cd395f264ba5c6c3814ece92431415c089", "url": "https://api.github.com/repos/rust-lang/rust/commits/16e142cd395f264ba5c6c3814ece92431415c089", "html_url": "https://github.com/rust-lang/rust/commit/16e142cd395f264ba5c6c3814ece92431415c089"}], "stats": {"total": 106, "additions": 56, "deletions": 50}, "files": [{"sha": "e8c2ed48e018d125b1e0c344eed7206d12749ece", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 56, "deletions": 50, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/8482329d65ab4c916c5c385818b056c8176a6c75/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8482329d65ab4c916c5c385818b056c8176a6c75/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=8482329d65ab4c916c5c385818b056c8176a6c75", "patch": "@@ -211,62 +211,68 @@ impl SourceToDefCtx<'_, '_> {\n \n     pub(super) fn find_container(&mut self, src: InFile<&SyntaxNode>) -> Option<ChildContainer> {\n         for container in src.cloned().ancestors_with_macros(self.db.upcast()).skip(1) {\n-            let res: ChildContainer = match_ast! {\n-                match (container.value) {\n-                    ast::Module(it) => {\n-                        let def = self.module_to_def(container.with_value(it))?;\n-                        def.into()\n-                    },\n-                    ast::Trait(it) => {\n-                        let def = self.trait_to_def(container.with_value(it))?;\n-                        def.into()\n-                    },\n-                    ast::Impl(it) => {\n-                        let def = self.impl_to_def(container.with_value(it))?;\n-                        def.into()\n-                    },\n-                    ast::Fn(it) => {\n-                        let def = self.fn_to_def(container.with_value(it))?;\n-                        DefWithBodyId::from(def).into()\n-                    },\n-                    ast::Struct(it) => {\n-                        let def = self.struct_to_def(container.with_value(it))?;\n-                        VariantId::from(def).into()\n-                    },\n-                    ast::Enum(it) => {\n-                        let def = self.enum_to_def(container.with_value(it))?;\n-                        def.into()\n-                    },\n-                    ast::Union(it) => {\n-                        let def = self.union_to_def(container.with_value(it))?;\n-                        VariantId::from(def).into()\n-                    },\n-                    ast::Static(it) => {\n-                        let def = self.static_to_def(container.with_value(it))?;\n-                        DefWithBodyId::from(def).into()\n-                    },\n-                    ast::Const(it) => {\n-                        let def = self.const_to_def(container.with_value(it))?;\n-                        DefWithBodyId::from(def).into()\n-                    },\n-                    ast::TypeAlias(it) => {\n-                        let def = self.type_alias_to_def(container.with_value(it))?;\n-                        def.into()\n-                    },\n-                    ast::Variant(it) => {\n-                        let def = self.enum_variant_to_def(container.with_value(it))?;\n-                        VariantId::from(def).into()\n-                    },\n-                    _ => continue,\n-                }\n-            };\n-            return Some(res);\n+            if let Some(res) = self.container_to_def(container) {\n+                return Some(res);\n+            }\n         }\n \n         let def = self.file_to_def(src.file_id.original_file(self.db.upcast())).get(0).copied()?;\n         Some(def.into())\n     }\n \n+    fn container_to_def(&mut self, container: InFile<SyntaxNode>) -> Option<ChildContainer> {\n+        let cont = match_ast! {\n+            match (container.value) {\n+                ast::Module(it) => {\n+                    let def = self.module_to_def(container.with_value(it))?;\n+                    def.into()\n+                },\n+                ast::Trait(it) => {\n+                    let def = self.trait_to_def(container.with_value(it))?;\n+                    def.into()\n+                },\n+                ast::Impl(it) => {\n+                    let def = self.impl_to_def(container.with_value(it))?;\n+                    def.into()\n+                },\n+                ast::Fn(it) => {\n+                    let def = self.fn_to_def(container.with_value(it))?;\n+                    DefWithBodyId::from(def).into()\n+                },\n+                ast::Struct(it) => {\n+                    let def = self.struct_to_def(container.with_value(it))?;\n+                    VariantId::from(def).into()\n+                },\n+                ast::Enum(it) => {\n+                    let def = self.enum_to_def(container.with_value(it))?;\n+                    def.into()\n+                },\n+                ast::Union(it) => {\n+                    let def = self.union_to_def(container.with_value(it))?;\n+                    VariantId::from(def).into()\n+                },\n+                ast::Static(it) => {\n+                    let def = self.static_to_def(container.with_value(it))?;\n+                    DefWithBodyId::from(def).into()\n+                },\n+                ast::Const(it) => {\n+                    let def = self.const_to_def(container.with_value(it))?;\n+                    DefWithBodyId::from(def).into()\n+                },\n+                ast::TypeAlias(it) => {\n+                    let def = self.type_alias_to_def(container.with_value(it))?;\n+                    def.into()\n+                },\n+                ast::Variant(it) => {\n+                    let def = self.enum_variant_to_def(container.with_value(it))?;\n+                    VariantId::from(def).into()\n+                },\n+                _ => return None,\n+            }\n+        };\n+        Some(cont)\n+    }\n+\n     fn find_generic_param_container(&mut self, src: InFile<&SyntaxNode>) -> Option<GenericDefId> {\n         for container in src.cloned().ancestors_with_macros(self.db.upcast()).skip(1) {\n             let res: GenericDefId = match_ast! {"}]}