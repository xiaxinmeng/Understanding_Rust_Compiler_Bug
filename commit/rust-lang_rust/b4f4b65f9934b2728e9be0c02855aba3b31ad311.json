{"sha": "b4f4b65f9934b2728e9be0c02855aba3b31ad311", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZjRiNjVmOTkzNGIyNzI4ZTliZTBjMDI4NTVhYmEzYjMxYWQzMTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-05T06:53:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-05T06:53:56Z"}, "message": "Auto merge of #38098 - luser:windows-commandext, r=alexcrichton\n\nAdd std::os::windows::process::CommandExt. Fixes #37827\n\nThis adds a CommandExt trait for Windows along with an implementation of it\nfor std::process::Command with methods to set the process creation flags that\nare passed to CreateProcess.", "tree": {"sha": "b016cf9e2fc2c3bd023d3d014e1966589a83ddad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b016cf9e2fc2c3bd023d3d014e1966589a83ddad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4f4b65f9934b2728e9be0c02855aba3b31ad311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f4b65f9934b2728e9be0c02855aba3b31ad311", "html_url": "https://github.com/rust-lang/rust/commit/b4f4b65f9934b2728e9be0c02855aba3b31ad311", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4f4b65f9934b2728e9be0c02855aba3b31ad311/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bc551a261de4b62a50761e624dc8fd27c85c4ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc551a261de4b62a50761e624dc8fd27c85c4ce", "html_url": "https://github.com/rust-lang/rust/commit/6bc551a261de4b62a50761e624dc8fd27c85c4ce"}, {"sha": "e6975e974841c59a6e67e8a158b306f29d35d513", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6975e974841c59a6e67e8a158b306f29d35d513", "html_url": "https://github.com/rust-lang/rust/commit/e6975e974841c59a6e67e8a158b306f29d35d513"}], "stats": {"total": 86, "additions": 84, "deletions": 2}, "files": [{"sha": "bfc36d5b21fe86d650683ed6c8e2c98b26783dfe", "filename": "src/libstd/process.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b4f4b65f9934b2728e9be0c02855aba3b31ad311/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f4b65f9934b2728e9be0c02855aba3b31ad311/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=b4f4b65f9934b2728e9be0c02855aba3b31ad311", "patch": "@@ -1167,4 +1167,62 @@ mod tests {\n             Ok(_) => panic!(),\n         }\n     }\n+\n+    /// Test that process creation flags work by debugging a process.\n+    /// Other creation flags make it hard or impossible to detect\n+    /// behavioral changes in the process.\n+    #[test]\n+    #[cfg(windows)]\n+    fn test_creation_flags() {\n+        use os::windows::process::CommandExt;\n+        use sys::c::{BOOL, DWORD, INFINITE};\n+        #[repr(C, packed)]\n+        struct DEBUG_EVENT {\n+            pub event_code: DWORD,\n+            pub process_id: DWORD,\n+            pub thread_id: DWORD,\n+            // This is a union in the real struct, but we don't\n+            // need this data for the purposes of this test.\n+            pub _junk: [u8; 164],\n+        }\n+\n+        extern \"system\" {\n+            fn WaitForDebugEvent(lpDebugEvent: *mut DEBUG_EVENT, dwMilliseconds: DWORD) -> BOOL;\n+            fn ContinueDebugEvent(dwProcessId: DWORD, dwThreadId: DWORD,\n+                                  dwContinueStatus: DWORD) -> BOOL;\n+        }\n+\n+        const DEBUG_PROCESS: DWORD = 1;\n+        const EXIT_PROCESS_DEBUG_EVENT: DWORD = 5;\n+        const DBG_EXCEPTION_NOT_HANDLED: DWORD = 0x80010001;\n+\n+        let mut child = Command::new(\"cmd\")\n+            .creation_flags(DEBUG_PROCESS)\n+            .stdin(Stdio::piped()).spawn().unwrap();\n+        child.stdin.take().unwrap().write_all(b\"exit\\r\\n\").unwrap();\n+        let mut events = 0;\n+        let mut event = DEBUG_EVENT {\n+            event_code: 0,\n+            process_id: 0,\n+            thread_id: 0,\n+            _junk: [0; 164],\n+        };\n+        loop {\n+            if unsafe { WaitForDebugEvent(&mut event as *mut DEBUG_EVENT, INFINITE) } == 0 {\n+                panic!(\"WaitForDebugEvent failed!\");\n+            }\n+            events += 1;\n+\n+            if event.event_code == EXIT_PROCESS_DEBUG_EVENT {\n+                break;\n+            }\n+\n+            if unsafe { ContinueDebugEvent(event.process_id,\n+                                           event.thread_id,\n+                                           DBG_EXCEPTION_NOT_HANDLED) } == 0 {\n+                panic!(\"ContinueDebugEvent failed!\");\n+            }\n+        }\n+        assert!(events > 0);\n+    }\n }"}, {"sha": "0a3221aeae6fa2d4c55786ded472a9236a58e400", "filename": "src/libstd/sys/windows/ext/process.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b4f4b65f9934b2728e9be0c02855aba3b31ad311/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f4b65f9934b2728e9be0c02855aba3b31ad311/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=b4f4b65f9934b2728e9be0c02855aba3b31ad311", "patch": "@@ -15,7 +15,7 @@\n use os::windows::io::{FromRawHandle, RawHandle, AsRawHandle, IntoRawHandle};\n use process;\n use sys;\n-use sys_common::{AsInner, FromInner, IntoInner};\n+use sys_common::{AsInnerMut, AsInner, FromInner, IntoInner};\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl FromRawHandle for process::Stdio {\n@@ -97,3 +97,22 @@ impl ExitStatusExt for process::ExitStatus {\n         process::ExitStatus::from_inner(From::from(raw))\n     }\n }\n+\n+/// Windows-specific extensions to the `std::process::Command` builder\n+#[unstable(feature = \"windows_process_extensions\", issue = \"37827\")]\n+pub trait CommandExt {\n+    /// Sets the [process creation flags][1] to be passed to `CreateProcess`.\n+    ///\n+    /// These will always be ORed with `CREATE_UNICODE_ENVIRONMENT`.\n+    /// [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/ms684863(v=vs.85).aspx\n+    #[unstable(feature = \"windows_process_extensions\", issue = \"37827\")]\n+    fn creation_flags(&mut self, flags: u32) -> &mut process::Command;\n+}\n+\n+#[unstable(feature = \"windows_process_extensions\", issue = \"37827\")]\n+impl CommandExt for process::Command {\n+    fn creation_flags(&mut self, flags: u32) -> &mut process::Command {\n+        self.as_inner_mut().creation_flags(flags);\n+        self\n+    }\n+}"}, {"sha": "969de6b85a6aa93260e1194d8901baef16d057f6", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4f4b65f9934b2728e9be0c02855aba3b31ad311/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f4b65f9934b2728e9be0c02855aba3b31ad311/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=b4f4b65f9934b2728e9be0c02855aba3b31ad311", "patch": "@@ -54,6 +54,7 @@ pub struct Command {\n     args: Vec<OsString>,\n     env: Option<HashMap<OsString, OsString>>,\n     cwd: Option<OsString>,\n+    flags: u32,\n     detach: bool, // not currently exposed in std::process\n     stdin: Option<Stdio>,\n     stdout: Option<Stdio>,\n@@ -84,6 +85,7 @@ impl Command {\n             args: Vec::new(),\n             env: None,\n             cwd: None,\n+            flags: 0,\n             detach: false,\n             stdin: None,\n             stdout: None,\n@@ -124,6 +126,9 @@ impl Command {\n     pub fn stderr(&mut self, stderr: Stdio) {\n         self.stderr = Some(stderr);\n     }\n+    pub fn creation_flags(&mut self, flags: u32) {\n+        self.flags = flags;\n+    }\n \n     pub fn spawn(&mut self, default: Stdio, needs_stdin: bool)\n                  -> io::Result<(Process, StdioPipes)> {\n@@ -157,7 +162,7 @@ impl Command {\n         cmd_str.push(0); // add null terminator\n \n         // stolen from the libuv code.\n-        let mut flags = c::CREATE_UNICODE_ENVIRONMENT;\n+        let mut flags = self.flags | c::CREATE_UNICODE_ENVIRONMENT;\n         if self.detach {\n             flags |= c::DETACHED_PROCESS | c::CREATE_NEW_PROCESS_GROUP;\n         }"}]}