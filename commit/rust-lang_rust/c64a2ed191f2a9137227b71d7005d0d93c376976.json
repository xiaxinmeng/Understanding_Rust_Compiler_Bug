{"sha": "c64a2ed191f2a9137227b71d7005d0d93c376976", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NGEyZWQxOTFmMmE5MTM3MjI3YjcxZDcwMDVkMGQ5M2MzNzY5NzY=", "commit": {"author": {"name": "Ali\u00e9nore Bouttefeux", "email": "alienore.bouttefeux@gmail.com", "date": "2021-04-15T14:58:17Z"}, "committer": {"name": "Ali\u00e9nore Bouttefeux", "email": "alienore.bouttefeux@gmail.com", "date": "2021-04-15T14:58:17Z"}, "message": "elision of generic argument in E0599 if the methode has not been found anywhere and sugetion of type with method when found.", "tree": {"sha": "a6693c9af000e868e579b9b03fa0c4e32b317bfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6693c9af000e868e579b9b03fa0c4e32b317bfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c64a2ed191f2a9137227b71d7005d0d93c376976", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c64a2ed191f2a9137227b71d7005d0d93c376976", "html_url": "https://github.com/rust-lang/rust/commit/c64a2ed191f2a9137227b71d7005d0d93c376976", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c64a2ed191f2a9137227b71d7005d0d93c376976/comments", "author": {"login": "ABouttefeux", "id": 77335613, "node_id": "MDQ6VXNlcjc3MzM1NjEz", "avatar_url": "https://avatars.githubusercontent.com/u/77335613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ABouttefeux", "html_url": "https://github.com/ABouttefeux", "followers_url": "https://api.github.com/users/ABouttefeux/followers", "following_url": "https://api.github.com/users/ABouttefeux/following{/other_user}", "gists_url": "https://api.github.com/users/ABouttefeux/gists{/gist_id}", "starred_url": "https://api.github.com/users/ABouttefeux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ABouttefeux/subscriptions", "organizations_url": "https://api.github.com/users/ABouttefeux/orgs", "repos_url": "https://api.github.com/users/ABouttefeux/repos", "events_url": "https://api.github.com/users/ABouttefeux/events{/privacy}", "received_events_url": "https://api.github.com/users/ABouttefeux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ABouttefeux", "id": 77335613, "node_id": "MDQ6VXNlcjc3MzM1NjEz", "avatar_url": "https://avatars.githubusercontent.com/u/77335613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ABouttefeux", "html_url": "https://github.com/ABouttefeux", "followers_url": "https://api.github.com/users/ABouttefeux/followers", "following_url": "https://api.github.com/users/ABouttefeux/following{/other_user}", "gists_url": "https://api.github.com/users/ABouttefeux/gists{/gist_id}", "starred_url": "https://api.github.com/users/ABouttefeux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ABouttefeux/subscriptions", "organizations_url": "https://api.github.com/users/ABouttefeux/orgs", "repos_url": "https://api.github.com/users/ABouttefeux/repos", "events_url": "https://api.github.com/users/ABouttefeux/events{/privacy}", "received_events_url": "https://api.github.com/users/ABouttefeux/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0894d1e9067f9df1afe612942e1d93901a6e1d8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0894d1e9067f9df1afe612942e1d93901a6e1d8f", "html_url": "https://github.com/rust-lang/rust/commit/0894d1e9067f9df1afe612942e1d93901a6e1d8f"}], "stats": {"total": 335, "additions": 310, "deletions": 25}, "files": [{"sha": "54a1078383fcb9a4a79842f5337a1db5e98d39c4", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 119, "deletions": 1, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/c64a2ed191f2a9137227b71d7005d0d93c376976/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c64a2ed191f2a9137227b71d7005d0d93c376976/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=c64a2ed191f2a9137227b71d7005d0d93c376976", "patch": "@@ -13,6 +13,7 @@ use rustc_hir::{ExprKind, Node, QPath};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::ty::fast_reject::simplify_type;\n use rustc_middle::ty::print::with_crate_prefix;\n+use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{\n     self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n@@ -383,6 +384,52 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         return None;\n                     } else {\n                         span = item_name.span;\n+\n+                        // issue #81576, elision of generic argument when no methode can be found in any implementation\n+                        let mut ty_str_reported = ty_str.clone();\n+                        if let ty::Adt(_, ref generics) = actual.kind() {\n+                            if generics.len() > 0 {\n+                                let candidate_numbers: usize = self\n+                                    .autoderef(span, actual)\n+                                    .map(|(ty, _)| {\n+                                        if let ty::Adt(ref adt_deref, _) = ty.kind() {\n+                                            self.tcx\n+                                                .inherent_impls(adt_deref.did)\n+                                                .iter()\n+                                                .filter_map(|def_id| {\n+                                                    self.associated_item(\n+                                                        *def_id,\n+                                                        item_name,\n+                                                        Namespace::ValueNS,\n+                                                    )\n+                                                })\n+                                                .count()\n+                                        } else {\n+                                            0\n+                                        }\n+                                    })\n+                                    .sum();\n+                                if candidate_numbers == 0 && unsatisfied_predicates.is_empty() {\n+                                    if let Some((path_string, _)) = ty_str.split_once('<') {\n+                                        ty_str_reported = format!(\"{}<\", path_string);\n+                                        for (index, arg) in generics.iter().enumerate() {\n+                                            let arg_replace = match arg.unpack() {\n+                                                GenericArgKind::Lifetime(_) => \"'_\",\n+                                                GenericArgKind::Type(_)\n+                                                | GenericArgKind::Const(_) => \"_\",\n+                                            };\n+                                            ty_str_reported =\n+                                                format!(\"{}{}\", ty_str_reported, arg_replace);\n+                                            if index < generics.len() - 1 {\n+                                                ty_str_reported = format!(\"{}, \", ty_str_reported);\n+                                            }\n+                                        }\n+                                        ty_str_reported = format!(\"{}>\", ty_str_reported);\n+                                    }\n+                                }\n+                            }\n+                        }\n+\n                         let mut err = struct_span_err!(\n                             tcx.sess,\n                             span,\n@@ -391,7 +438,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             item_kind,\n                             item_name,\n                             actual.prefix_string(self.tcx),\n-                            ty_str,\n+                            ty_str_reported,\n                         );\n                         if let Mode::MethodCall = mode {\n                             if let SelfSource::MethodCall(call) = source {\n@@ -449,6 +496,77 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let mut label_span_not_found = || {\n                     if unsatisfied_predicates.is_empty() {\n                         err.span_label(span, format!(\"{item_kind} not found in `{ty_str}`\"));\n+                        if let ty::Adt(ref adt, _) = rcvr_ty.kind() {\n+                            let mut inherent_impls_candidate = self\n+                                .tcx\n+                                .inherent_impls(adt.did)\n+                                .iter()\n+                                .copied()\n+                                .filter(|def_id| {\n+                                    if let Some(assoc) =\n+                                        self.associated_item(*def_id, item_name, Namespace::ValueNS)\n+                                    {\n+                                        // Check for both mode is the same so we avoid suggesting\n+                                        // incorect associated item.\n+                                        match (mode, assoc.fn_has_self_parameter) {\n+                                            (Mode::MethodCall, true) => {\n+                                                if let SelfSource::MethodCall(_) = source {\n+                                                    // We check that the suggest type is actually\n+                                                    // different from the received one\n+                                                    // So we avoid suggestion method with Box<Self>\n+                                                    // for instance\n+                                                    self.tcx.at(span).type_of(*def_id) != actual\n+                                                        && self.tcx.at(span).type_of(*def_id)\n+                                                            != rcvr_ty\n+                                                } else {\n+                                                    false\n+                                                }\n+                                            }\n+                                            (Mode::Path, false) => true,\n+                                            _ => false,\n+                                        }\n+                                    } else {\n+                                        false\n+                                    }\n+                                })\n+                                .collect::<Vec<_>>();\n+                            if inherent_impls_candidate.len() > 0 {\n+                                inherent_impls_candidate.sort();\n+                                inherent_impls_candidate.dedup();\n+                                // number of type to shows at most.\n+                                const LIMIT: usize = 3;\n+                                let mut note = format!(\"The {item_kind} was found for\");\n+                                if inherent_impls_candidate.len() > 1 {\n+                                    for impl_item in inherent_impls_candidate.iter().take(LIMIT - 2)\n+                                    {\n+                                        let impl_ty = self.tcx.at(span).type_of(*impl_item);\n+                                        note = format!(\"{} {},\", note, impl_ty);\n+                                    }\n+                                    let impl_ty = self.tcx.at(span).type_of(\n+                                        inherent_impls_candidate\n+                                            [inherent_impls_candidate.len() - 1],\n+                                    );\n+                                    if inherent_impls_candidate.len() > LIMIT {\n+                                        note = format!(\"{} {},\", note, impl_ty);\n+                                    } else {\n+                                        note = format!(\"{} {} and\", note, impl_ty);\n+                                    }\n+                                }\n+                                let impl_ty = self\n+                                    .tcx\n+                                    .at(span)\n+                                    .type_of(*inherent_impls_candidate.last().unwrap());\n+                                note = format!(\"{} {}\", note, impl_ty);\n+                                if inherent_impls_candidate.len() > LIMIT {\n+                                    note = format!(\n+                                        \"{} and {} more\",\n+                                        note,\n+                                        inherent_impls_candidate.len() - LIMIT\n+                                    );\n+                                }\n+                                err.note(&format!(\"{}.\", note));\n+                            }\n+                        }\n                     } else {\n                         err.span_label(span, format!(\"{item_kind} cannot be called on `{ty_str}` due to unsatisfied trait bounds\"));\n                     }"}, {"sha": "be1b79e936d2480bf43df71e96854daa2888b0e9", "filename": "src/test/ui/auto-ref-slice-plus-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c64a2ed191f2a9137227b71d7005d0d93c376976/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c64a2ed191f2a9137227b71d7005d0d93c376976/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr?ref=c64a2ed191f2a9137227b71d7005d0d93c376976", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `test_mut` found for struct `Vec<{integer}>` in the current scope\n+error[E0599]: no method named `test_mut` found for struct `Vec<_, _>` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:7:7\n    |\n LL |     a.test_mut();\n@@ -11,7 +11,7 @@ note: `MyIter` defines an item `test_mut`, perhaps you need to implement it\n LL | trait MyIter {\n    | ^^^^^^^^^^^^\n \n-error[E0599]: no method named `test` found for struct `Vec<{integer}>` in the current scope\n+error[E0599]: no method named `test` found for struct `Vec<_, _>` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:8:7\n    |\n LL |     a.test();"}, {"sha": "c01af6d7e2561bda39d105731ac26cca58fbbcdf", "filename": "src/test/ui/class-cast-to-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c64a2ed191f2a9137227b71d7005d0d93c376976/src%2Ftest%2Fui%2Fclass-cast-to-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c64a2ed191f2a9137227b71d7005d0d93c376976/src%2Ftest%2Fui%2Fclass-cast-to-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclass-cast-to-trait.stderr?ref=c64a2ed191f2a9137227b71d7005d0d93c376976", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `eat` found for struct `Box<dyn Noisy>` in the current scope\n+error[E0599]: no method named `eat` found for struct `Box<_, _>` in the current scope\n   --> $DIR/class-cast-to-trait.rs:53:8\n    |\n LL |   nyan.eat();"}, {"sha": "2bf32975a6f45cfdb89a7ff49d435adec909e75f", "filename": "src/test/ui/confuse-field-and-method/issue-18343.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c64a2ed191f2a9137227b71d7005d0d93c376976/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c64a2ed191f2a9137227b71d7005d0d93c376976/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr?ref=c64a2ed191f2a9137227b71d7005d0d93c376976", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `closure` found for struct `Obj<[closure@$DIR/issue-18343.rs:6:28: 6:33]>` in the current scope\n+error[E0599]: no method named `closure` found for struct `Obj<_>` in the current scope\n   --> $DIR/issue-18343.rs:7:7\n    |\n LL | struct Obj<F> where F: FnMut() -> u32 {"}, {"sha": "f17a56eba2f7acd58b2b9e795e4d4d0641c0718e", "filename": "src/test/ui/confuse-field-and-method/issue-2392.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c64a2ed191f2a9137227b71d7005d0d93c376976/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c64a2ed191f2a9137227b71d7005d0d93c376976/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr?ref=c64a2ed191f2a9137227b71d7005d0d93c376976", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `closure` found for struct `Obj<[closure@$DIR/issue-2392.rs:35:36: 35:41]>` in the current scope\n+error[E0599]: no method named `closure` found for struct `Obj<_>` in the current scope\n   --> $DIR/issue-2392.rs:36:15\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n@@ -12,7 +12,7 @@ help: to call the function stored in `closure`, surround the field access with p\n LL |     (o_closure.closure)();\n    |     ^                 ^\n \n-error[E0599]: no method named `not_closure` found for struct `Obj<[closure@$DIR/issue-2392.rs:35:36: 35:41]>` in the current scope\n+error[E0599]: no method named `not_closure` found for struct `Obj<_>` in the current scope\n   --> $DIR/issue-2392.rs:38:15\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n@@ -23,7 +23,7 @@ LL |     o_closure.not_closure();\n    |               |\n    |               field, not a method\n \n-error[E0599]: no method named `closure` found for struct `Obj<fn() -> u32 {func}>` in the current scope\n+error[E0599]: no method named `closure` found for struct `Obj<_>` in the current scope\n   --> $DIR/issue-2392.rs:42:12\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n@@ -65,7 +65,7 @@ help: to call the function stored in `boxed_closure`, surround the field access\n LL |     (boxed_closure.boxed_closure)();\n    |     ^                           ^\n \n-error[E0599]: no method named `closure` found for struct `Obj<fn() -> u32 {func}>` in the current scope\n+error[E0599]: no method named `closure` found for struct `Obj<_>` in the current scope\n   --> $DIR/issue-2392.rs:53:12\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n@@ -79,7 +79,7 @@ help: to call the function stored in `closure`, surround the field access with p\n LL |     (w.wrap.closure)();\n    |     ^              ^\n \n-error[E0599]: no method named `not_closure` found for struct `Obj<fn() -> u32 {func}>` in the current scope\n+error[E0599]: no method named `not_closure` found for struct `Obj<_>` in the current scope\n   --> $DIR/issue-2392.rs:55:12\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n@@ -90,7 +90,7 @@ LL |     w.wrap.not_closure();\n    |            |\n    |            field, not a method\n \n-error[E0599]: no method named `closure` found for struct `Obj<Box<(dyn FnOnce() -> u32 + 'static)>>` in the current scope\n+error[E0599]: no method named `closure` found for struct `Obj<_>` in the current scope\n   --> $DIR/issue-2392.rs:58:24\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {"}, {"sha": "5c0f945140a01829626d5f94ffff8ba07df45648", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c64a2ed191f2a9137227b71d7005d0d93c376976/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c64a2ed191f2a9137227b71d7005d0d93c376976/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=c64a2ed191f2a9137227b71d7005d0d93c376976", "patch": "@@ -16,7 +16,7 @@ LL | use no_method_suggested_traits::qux::PrivPub;\n LL | use no_method_suggested_traits::Reexported;\n    |\n \n-error[E0599]: no method named `method` found for struct `Rc<&mut Box<&u32>>` in the current scope\n+error[E0599]: no method named `method` found for struct `Rc<_>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:26:44\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&1u32)).method();\n@@ -46,7 +46,7 @@ help: the following trait is implemented but not in scope; perhaps add a `use` f\n LL | use foo::Bar;\n    |\n \n-error[E0599]: no method named `method` found for struct `Rc<&mut Box<&char>>` in the current scope\n+error[E0599]: no method named `method` found for struct `Rc<_>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:32:43\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&'a')).method();\n@@ -70,7 +70,7 @@ help: the following trait is implemented but not in scope; perhaps add a `use` f\n LL | use no_method_suggested_traits::foo::PubPub;\n    |\n \n-error[E0599]: no method named `method` found for struct `Rc<&mut Box<&i32>>` in the current scope\n+error[E0599]: no method named `method` found for struct `Rc<_>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:37:44\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&1i32)).method();\n@@ -98,7 +98,7 @@ LL |     Foo.method();\n            candidate #3: `no_method_suggested_traits::qux::PrivPub`\n            candidate #4: `Reexported`\n \n-error[E0599]: no method named `method` found for struct `Rc<&mut Box<&Foo>>` in the current scope\n+error[E0599]: no method named `method` found for struct `Rc<_>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:42:43\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&Foo)).method();\n@@ -124,7 +124,7 @@ note: `foo::Bar` defines an item `method2`, perhaps you need to implement it\n LL |     pub trait Bar {\n    |     ^^^^^^^^^^^^^\n \n-error[E0599]: no method named `method2` found for struct `Rc<&mut Box<&u64>>` in the current scope\n+error[E0599]: no method named `method2` found for struct `Rc<_>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:47:44\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&1u64)).method2();\n@@ -150,7 +150,7 @@ note: `foo::Bar` defines an item `method2`, perhaps you need to implement it\n LL |     pub trait Bar {\n    |     ^^^^^^^^^^^^^\n \n-error[E0599]: no method named `method2` found for struct `Rc<&mut Box<&no_method_suggested_traits::Foo>>` in the current scope\n+error[E0599]: no method named `method2` found for struct `Rc<_>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:52:71\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method2();\n@@ -176,7 +176,7 @@ note: `foo::Bar` defines an item `method2`, perhaps you need to implement it\n LL |     pub trait Bar {\n    |     ^^^^^^^^^^^^^\n \n-error[E0599]: no method named `method2` found for struct `Rc<&mut Box<&no_method_suggested_traits::Bar>>` in the current scope\n+error[E0599]: no method named `method2` found for struct `Rc<_>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:56:74\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method2();\n@@ -202,7 +202,7 @@ LL |     Foo.method3();\n    = note: the following trait defines an item `method3`, perhaps you need to implement it:\n            candidate #1: `PubPub`\n \n-error[E0599]: no method named `method3` found for struct `Rc<&mut Box<&Foo>>` in the current scope\n+error[E0599]: no method named `method3` found for struct `Rc<_>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:61:43\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&Foo)).method3();\n@@ -225,7 +225,7 @@ LL |     Bar::X.method3();\n    = note: the following trait defines an item `method3`, perhaps you need to implement it:\n            candidate #1: `PubPub`\n \n-error[E0599]: no method named `method3` found for struct `Rc<&mut Box<&Bar>>` in the current scope\n+error[E0599]: no method named `method3` found for struct `Rc<_>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:65:46\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&Bar::X)).method3();\n@@ -241,7 +241,7 @@ error[E0599]: no method named `method3` found for type `usize` in the current sc\n LL |     1_usize.method3();\n    |             ^^^^^^^ method not found in `usize`\n \n-error[E0599]: no method named `method3` found for struct `Rc<&mut Box<&usize>>` in the current scope\n+error[E0599]: no method named `method3` found for struct `Rc<_>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:70:47\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&1_usize)).method3();\n@@ -253,7 +253,7 @@ error[E0599]: no method named `method3` found for struct `no_method_suggested_tr\n LL |     no_method_suggested_traits::Foo.method3();\n    |                                     ^^^^^^^ method not found in `no_method_suggested_traits::Foo`\n \n-error[E0599]: no method named `method3` found for struct `Rc<&mut Box<&no_method_suggested_traits::Foo>>` in the current scope\n+error[E0599]: no method named `method3` found for struct `Rc<_>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:72:71\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method3();\n@@ -265,7 +265,7 @@ error[E0599]: no method named `method3` found for enum `no_method_suggested_trai\n LL |     no_method_suggested_traits::Bar::X.method3();\n    |                                        ^^^^^^^ method not found in `no_method_suggested_traits::Bar`\n \n-error[E0599]: no method named `method3` found for struct `Rc<&mut Box<&no_method_suggested_traits::Bar>>` in the current scope\n+error[E0599]: no method named `method3` found for struct `Rc<_>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:75:74\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method3();"}, {"sha": "27b128372c0fe2cc7ec5c428e87b4c26c4f98134", "filename": "src/test/ui/issues/issue-30123.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c64a2ed191f2a9137227b71d7005d0d93c376976/src%2Ftest%2Fui%2Fissues%2Fissue-30123.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c64a2ed191f2a9137227b71d7005d0d93c376976/src%2Ftest%2Fui%2Fissues%2Fissue-30123.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30123.stderr?ref=c64a2ed191f2a9137227b71d7005d0d93c376976", "patch": "@@ -3,6 +3,8 @@ error[E0599]: no function or associated item named `new_undirected` found for st\n    |\n LL |     let ug = Graph::<i32, i32>::new_undirected();\n    |                                 ^^^^^^^^^^^^^^ function or associated item not found in `issue_30123_aux::Graph<i32, i32>`\n+   |\n+   = note: The function or associated item was found for issue_30123_aux::Graph<N, E, Undirected>.\n \n error: aborting due to previous error\n "}, {"sha": "f9d11c47687b9c779862339029bb207db906b691", "filename": "src/test/ui/issues/issue-41880.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c64a2ed191f2a9137227b71d7005d0d93c376976/src%2Ftest%2Fui%2Fissues%2Fissue-41880.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c64a2ed191f2a9137227b71d7005d0d93c376976/src%2Ftest%2Fui%2Fissues%2Fissue-41880.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41880.stderr?ref=c64a2ed191f2a9137227b71d7005d0d93c376976", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `iter` found for struct `Iterate<{integer}, [closure@$DIR/issue-41880.rs:26:24: 26:31]>` in the current scope\n+error[E0599]: no method named `iter` found for struct `Iterate<_, _>` in the current scope\n   --> $DIR/issue-41880.rs:27:24\n    |\n LL | pub struct Iterate<T, F> {"}, {"sha": "85ccb0bd0de2abd46b3abcd8ac5a79f44b71181f", "filename": "src/test/ui/methods/method-not-found-generic-arg-elision.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/c64a2ed191f2a9137227b71d7005d0d93c376976/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c64a2ed191f2a9137227b71d7005d0d93c376976/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.rs?ref=c64a2ed191f2a9137227b71d7005d0d93c376976", "patch": "@@ -0,0 +1,90 @@\n+// Test for issue 81576\n+// Remove generic arguments if no method is found for all possible generic argument\n+\n+\n+struct Wrapper2<'a, T, const C: usize> {\n+    x: &'a T,\n+}\n+\n+impl<'a, const C: usize> Wrapper2<'a, i8, C> {\n+    fn method(&self) {}\n+}\n+\n+impl<'a, const C: usize> Wrapper2<'a, i16, C> {\n+    fn method(&self) {}\n+}\n+\n+impl<'a, const C: usize> Wrapper2<'a, i32, C> {\n+    fn method(&self) {}\n+}\n+struct Wrapper<T>(T);\n+\n+\n+\n+impl Wrapper<i8> {\n+    fn method(&self) {}\n+}\n+\n+impl Wrapper<i16> {\n+    fn method(&self) {}\n+}\n+\n+impl Wrapper<i32> {\n+    fn method(&self) {}\n+}\n+\n+impl Wrapper<i64> {\n+    fn method(&self) {}\n+}\n+\n+impl Wrapper<u8> {\n+    fn method(&self) {}\n+}\n+\n+impl Wrapper<u16> {\n+    fn method(&self) {}\n+}\n+\n+struct Point<T> {\n+    x: T,\n+    y: T,\n+}\n+\n+impl Point<f64> {\n+    fn distance(&self) -> f64 {\n+        self.x.hypot(self.y)\n+    }\n+}\n+\n+struct Other;\n+\n+impl Other {\n+    fn other(&self) {}\n+}\n+\n+fn main() {\n+    let point_f64 = Point{ x: 1_f64, y: 1_f64};\n+    let d = point_f64.distance();\n+    let point_i32 = Point{ x: 1_i32, y: 1_i32};\n+    let d = point_i32.distance();\n+    //~^ ERROR no method named `distance` found for struct `Point<i32>\n+    let d = point_i32.other();\n+    //~^ ERROR no method named `other` found for struct `Point<_>\n+    let v = vec![1_i32, 2, 3];\n+    v.iter().map(|x| x * x).extend(std::iter::once(100));\n+    //~^ ERROR no method named `extend` found for struct `Map<_, _>\n+    let wrapper = Wrapper(true);\n+    wrapper.method();\n+    //~^ ERROR no method named `method` found for struct `Wrapper<bool>\n+    wrapper.other();\n+    //~^ ERROR no method named `other` found for struct `Wrapper<_>\n+    let boolean = true;\n+    let wrapper = Wrapper2::<'_, _, 3> {x: &boolean};\n+    wrapper.method();\n+    //~^ ERROR no method named `method` found for struct `Wrapper2<'_, bool, 3_usize>\n+    wrapper.other();\n+    //~^ ERROR no method named `other` found for struct `Wrapper2<'_, _, _>\n+    let a = vec![1, 2, 3];\n+    a.not_found();\n+    //~^ ERROR no method named `not_found` found for struct `Vec<_, _>\n+}"}, {"sha": "80e111390c6ac33b1ffa54dc9d9d3db622f3d3ff", "filename": "src/test/ui/methods/method-not-found-generic-arg-elision.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/c64a2ed191f2a9137227b71d7005d0d93c376976/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c64a2ed191f2a9137227b71d7005d0d93c376976/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr?ref=c64a2ed191f2a9137227b71d7005d0d93c376976", "patch": "@@ -0,0 +1,75 @@\n+error[E0599]: no method named `distance` found for struct `Point<i32>` in the current scope\n+  --> $DIR/method-not-found-generic-arg-elision.rs:69:23\n+   |\n+LL | struct Point<T> {\n+   | --------------- method `distance` not found for this\n+...\n+LL |     let d = point_i32.distance();\n+   |                       ^^^^^^^^ method not found in `Point<i32>`\n+   |\n+   = note: The method was found for Point<f64>.\n+\n+error[E0599]: no method named `other` found for struct `Point<_>` in the current scope\n+  --> $DIR/method-not-found-generic-arg-elision.rs:71:23\n+   |\n+LL | struct Point<T> {\n+   | --------------- method `other` not found for this\n+...\n+LL |     let d = point_i32.other();\n+   |                       ^^^^^ method not found in `Point<i32>`\n+\n+error[E0599]: no method named `extend` found for struct `Map<_, _>` in the current scope\n+  --> $DIR/method-not-found-generic-arg-elision.rs:74:29\n+   |\n+LL |     v.iter().map(|x| x * x).extend(std::iter::once(100));\n+   |                             ^^^^^^ method not found in `Map<std::slice::Iter<'_, i32>, [closure@$DIR/method-not-found-generic-arg-elision.rs:74:18: 74:27]>`\n+\n+error[E0599]: no method named `method` found for struct `Wrapper<bool>` in the current scope\n+  --> $DIR/method-not-found-generic-arg-elision.rs:77:13\n+   |\n+LL | struct Wrapper<T>(T);\n+   | --------------------- method `method` not found for this\n+...\n+LL |     wrapper.method();\n+   |             ^^^^^^ method not found in `Wrapper<bool>`\n+   |\n+   = note: The method was found for Wrapper<i8>, Wrapper<u16>, Wrapper<u16> and 3 more.\n+\n+error[E0599]: no method named `other` found for struct `Wrapper<_>` in the current scope\n+  --> $DIR/method-not-found-generic-arg-elision.rs:79:13\n+   |\n+LL | struct Wrapper<T>(T);\n+   | --------------------- method `other` not found for this\n+...\n+LL |     wrapper.other();\n+   |             ^^^^^ method not found in `Wrapper<bool>`\n+\n+error[E0599]: no method named `method` found for struct `Wrapper2<'_, bool, 3_usize>` in the current scope\n+  --> $DIR/method-not-found-generic-arg-elision.rs:83:13\n+   |\n+LL | struct Wrapper2<'a, T, const C: usize> {\n+   | -------------------------------------- method `method` not found for this\n+...\n+LL |     wrapper.method();\n+   |             ^^^^^^ method not found in `Wrapper2<'_, bool, 3_usize>`\n+   |\n+   = note: The method was found for Wrapper2<'a, i8, C>, Wrapper2<'a, i32, C> and Wrapper2<'a, i32, C>.\n+\n+error[E0599]: no method named `other` found for struct `Wrapper2<'_, _, _>` in the current scope\n+  --> $DIR/method-not-found-generic-arg-elision.rs:85:13\n+   |\n+LL | struct Wrapper2<'a, T, const C: usize> {\n+   | -------------------------------------- method `other` not found for this\n+...\n+LL |     wrapper.other();\n+   |             ^^^^^ method not found in `Wrapper2<'_, bool, 3_usize>`\n+\n+error[E0599]: no method named `not_found` found for struct `Vec<_, _>` in the current scope\n+  --> $DIR/method-not-found-generic-arg-elision.rs:88:7\n+   |\n+LL |     a.not_found();\n+   |       ^^^^^^^^^ method not found in `Vec<{integer}>`\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "fb3462b2cabd4cbdb28dcb51f9576df1e45f06ce", "filename": "src/test/ui/object-pointer-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c64a2ed191f2a9137227b71d7005d0d93c376976/src%2Ftest%2Fui%2Fobject-pointer-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c64a2ed191f2a9137227b71d7005d0d93c376976/src%2Ftest%2Fui%2Fobject-pointer-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-pointer-types.stderr?ref=c64a2ed191f2a9137227b71d7005d0d93c376976", "patch": "@@ -16,7 +16,7 @@ LL |     fn owned(self: Box<Self>);\n LL |     x.owned();\n    |       ^^^^^ method not found in `&mut dyn Foo`\n \n-error[E0599]: no method named `managed` found for struct `Box<(dyn Foo + 'static)>` in the current scope\n+error[E0599]: no method named `managed` found for struct `Box<_, _>` in the current scope\n   --> $DIR/object-pointer-types.rs:23:7\n    |\n LL |     x.managed();"}]}