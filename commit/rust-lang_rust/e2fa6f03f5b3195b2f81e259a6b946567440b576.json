{"sha": "e2fa6f03f5b3195b2f81e259a6b946567440b576", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZmE2ZjAzZjViMzE5NWIyZjgxZTI1OWE2Yjk0NjU2NzQ0MGI1NzY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-04T01:49:23Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-04T20:43:17Z"}, "message": "Translate simple classes\n\n    Programs using classes with fields only (no methods) compile and run,\n    as long as nothing refers to a class in a different crate (todo).\n\n    Also changed the AST representation of classes to have a separate\n    record for constructor info (instead of inlining the fields in the\n    item_class node), and fixed up spans and pretty-printing for\n    classes.", "tree": {"sha": "ed57e10c040505678b037902964f6d543d2cd52f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed57e10c040505678b037902964f6d543d2cd52f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2fa6f03f5b3195b2f81e259a6b946567440b576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2fa6f03f5b3195b2f81e259a6b946567440b576", "html_url": "https://github.com/rust-lang/rust/commit/e2fa6f03f5b3195b2f81e259a6b946567440b576", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2fa6f03f5b3195b2f81e259a6b946567440b576/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d826b735c30a89bfe3aac8acbcda4efc8b5286f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d826b735c30a89bfe3aac8acbcda4efc8b5286f", "html_url": "https://github.com/rust-lang/rust/commit/1d826b735c30a89bfe3aac8acbcda4efc8b5286f"}], "stats": {"total": 725, "additions": 493, "deletions": 232}, "files": [{"sha": "5bf9829b99d31241c802b28586b7b4a9fcf9258e", "filename": "src/rustc/metadata/astencode_gen.rs", "status": "modified", "additions": 179, "deletions": 125, "changes": 304, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmetadata%2Fastencode_gen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmetadata%2Fastencode_gen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode_gen.rs?ref=e2fa6f03f5b3195b2f81e259a6b946567440b576", "patch": "@@ -3783,8 +3783,39 @@ fn serialize_148<S: std::serialization::serializer>(s: S,\n                               })\n                });\n }\n-/*syntax::ast::ty_method*/\n+/*syntax::ast::class_ctor_*/\n fn serialize_156<S: std::serialization::serializer>(s: S,\n+                                                    v:\n+                                                        syntax::ast::class_ctor_) {\n+    s.emit_rec(/*syntax::ast::node_id*//*syntax::ast::fn_decl*/\n+               /*syntax::ast::blk*/\n+               {||\n+                   {\n+                       s.emit_rec_field(\"id\", 0u,\n+                                        {|| serialize_27(s, v.id) });\n+                       s.emit_rec_field(\"dec\", 1u,\n+                                        {|| serialize_38(s, v.dec) });\n+                       s.emit_rec_field(\"body\", 2u,\n+                                        {|| serialize_81(s, v.body) })\n+                   }\n+               });\n+}\n+/*syntax::ast::class_ctor*/\n+fn serialize_155<S: std::serialization::serializer>(s: S,\n+                                                    v:\n+                                                        syntax::ast::class_ctor) {\n+    s.emit_rec(/*syntax::ast::class_ctor_*//*syntax::codemap::span*/\n+               {||\n+                   {\n+                       s.emit_rec_field(\"node\", 0u,\n+                                        {|| serialize_156(s, v.node) });\n+                       s.emit_rec_field(\"span\", 1u,\n+                                        {|| serialize_19(s, v.span) })\n+                   }\n+               });\n+}\n+/*syntax::ast::ty_method*/\n+fn serialize_158<S: std::serialization::serializer>(s: S,\n                                                     v:\n                                                         syntax::ast::ty_method) {\n     s.emit_rec(/*syntax::ast::ident*//*[syntax::ast::attribute]*/\n@@ -3806,19 +3837,19 @@ fn serialize_156<S: std::serialization::serializer>(s: S,\n                });\n }\n /*[syntax::ast::ty_method]*/\n-fn serialize_155<S: std::serialization::serializer>(s: S,\n+fn serialize_157<S: std::serialization::serializer>(s: S,\n                                                     v:\n                                                         [syntax::ast::ty_method]) {\n     s.emit_vec(vec::len(v), /*syntax::ast::ty_method*/\n                {||\n                    vec::iteri(v,\n                               {|i, e|\n-                                  s.emit_vec_elt(i, {|| serialize_156(s, e) })\n+                                  s.emit_vec_elt(i, {|| serialize_158(s, e) })\n                               })\n                });\n }\n /*core::option::t<@syntax::ast::ty>*/\n-fn serialize_157<S: std::serialization::serializer>(s: S,\n+fn serialize_159<S: std::serialization::serializer>(s: S,\n                                                     v:\n                                                         core::option::t<@syntax::ast::ty>) {\n     s.emit_enum(\"core::option::t\",\n@@ -3846,7 +3877,7 @@ fn serialize_157<S: std::serialization::serializer>(s: S,\n                 });\n }\n /*syntax::ast::method*/\n-fn serialize_160<S: std::serialization::serializer>(s: S,\n+fn serialize_162<S: std::serialization::serializer>(s: S,\n                                                     v: syntax::ast::method) {\n \n     s.emit_rec(/*syntax::ast::ident*//*[syntax::ast::attribute]*/\n@@ -3873,20 +3904,20 @@ fn serialize_160<S: std::serialization::serializer>(s: S,\n                });\n }\n /*@syntax::ast::method*/\n-fn serialize_159<S: std::serialization::serializer>(s: S,\n+fn serialize_161<S: std::serialization::serializer>(s: S,\n                                                     v: @syntax::ast::method) {\n \n-    s.emit_box(/*syntax::ast::method*/{|| serialize_160(s, *v) });\n+    s.emit_box(/*syntax::ast::method*/{|| serialize_162(s, *v) });\n }\n /*[@syntax::ast::method]*/\n-fn serialize_158<S: std::serialization::serializer>(s: S,\n+fn serialize_160<S: std::serialization::serializer>(s: S,\n                                                     v:\n                                                         [@syntax::ast::method]) {\n     s.emit_vec(vec::len(v), /*@syntax::ast::method*/\n                {||\n                    vec::iteri(v,\n                               {|i, e|\n-                                  s.emit_vec_elt(i, {|| serialize_159(s, e) })\n+                                  s.emit_vec_elt(i, {|| serialize_161(s, e) })\n                               })\n                });\n }\n@@ -3906,8 +3937,7 @@ fn serialize_28<S: std::serialization::serializer>(s: S,\n                 /*syntax::ast::blk*//*syntax::ast::node_id*/\n                 /*syntax::ast::node_id*/\n                 /*[syntax::ast::ty_param]*//*[@syntax::ast::class_item]*/\n-                /*syntax::ast::node_id*//*syntax::ast::fn_decl*/\n-                /*syntax::ast::blk*/\n+                /*syntax::ast::class_ctor*/\n                 /*[syntax::ast::ty_param]*//*[syntax::ast::ty_method]*/\n                 /*[syntax::ast::ty_param]*/\n                 /*core::option::t<@syntax::ast::ty>*//*@syntax::ast::ty*/\n@@ -4044,8 +4074,8 @@ fn serialize_28<S: std::serialization::serializer>(s: S,\n                                                 }\n                                             })\n                       }\n-                      syntax::ast::item_class(v0, v1, v2, v3, v4) {\n-                        s.emit_enum_variant(\"syntax::ast::item_class\", 7u, 5u,\n+                      syntax::ast::item_class(v0, v1, v2) {\n+                        s.emit_enum_variant(\"syntax::ast::item_class\", 7u, 3u,\n                                             {||\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n@@ -4060,18 +4090,8 @@ fn serialize_28<S: std::serialization::serializer>(s: S,\n                                                                             });\n                                                     s.emit_enum_variant_arg(2u,\n                                                                             {||\n-                                                                                serialize_27(s,\n-                                                                                             v2)\n-                                                                            });\n-                                                    s.emit_enum_variant_arg(3u,\n-                                                                            {||\n-                                                                                serialize_38(s,\n-                                                                                             v3)\n-                                                                            });\n-                                                    s.emit_enum_variant_arg(4u,\n-                                                                            {||\n-                                                                                serialize_81(s,\n-                                                                                             v4)\n+                                                                                serialize_155(s,\n+                                                                                              v2)\n                                                                             })\n                                                 }\n                                             })\n@@ -4087,7 +4107,7 @@ fn serialize_28<S: std::serialization::serializer>(s: S,\n                                                                             });\n                                                     s.emit_enum_variant_arg(1u,\n                                                                             {||\n-                                                                                serialize_155(s,\n+                                                                                serialize_157(s,\n                                                                                               v1)\n                                                                             })\n                                                 }\n@@ -4104,7 +4124,7 @@ fn serialize_28<S: std::serialization::serializer>(s: S,\n                                                                             });\n                                                     s.emit_enum_variant_arg(1u,\n                                                                             {||\n-                                                                                serialize_157(s,\n+                                                                                serialize_159(s,\n                                                                                               v1)\n                                                                             });\n                                                     s.emit_enum_variant_arg(2u,\n@@ -4114,7 +4134,7 @@ fn serialize_28<S: std::serialization::serializer>(s: S,\n                                                                             });\n                                                     s.emit_enum_variant_arg(3u,\n                                                                             {||\n-                                                                                serialize_158(s,\n+                                                                                serialize_160(s,\n                                                                                               v3)\n                                                                             })\n                                                 }\n@@ -7599,8 +7619,51 @@ fn deserialize_148<S: std::serialization::deserializer>(s: S) ->\n                                 })\n                })\n }\n-/*syntax::ast::ty_method*/\n+/*syntax::ast::class_ctor_*/\n fn deserialize_156<S: std::serialization::deserializer>(s: S) ->\n+   syntax::ast::class_ctor_ {\n+\n+    s.read_rec(\n+\n+\n+               /*syntax::ast::node_id*/\n+\n+               /*syntax::ast::fn_decl*/\n+\n+               /*syntax::ast::blk*/\n+\n+               {||\n+                   {id: s.read_rec_field(\"id\", 0u, {|| deserialize_27(s) }),\n+                    dec: s.read_rec_field(\"dec\", 1u, {|| deserialize_38(s) }),\n+                    body:\n+                        s.read_rec_field(\"body\", 2u,\n+                                         {|| deserialize_81(s) }),}\n+               })\n+\n+}\n+/*syntax::ast::class_ctor*/\n+fn deserialize_155<S: std::serialization::deserializer>(s: S) ->\n+   syntax::ast::class_ctor {\n+\n+    s.read_rec(\n+\n+\n+               /*syntax::ast::class_ctor_*/\n+\n+               /*syntax::codemap::span*/\n+\n+               {||\n+                   {node:\n+                        s.read_rec_field(\"node\", 0u,\n+                                         {|| deserialize_156(s) }),\n+                    span:\n+                        s.read_rec_field(\"span\", 1u,\n+                                         {|| deserialize_19(s) }),}\n+               })\n+\n+}\n+/*syntax::ast::ty_method*/\n+fn deserialize_158<S: std::serialization::deserializer>(s: S) ->\n    syntax::ast::ty_method {\n \n     s.read_rec(\n@@ -7632,7 +7695,7 @@ fn deserialize_156<S: std::serialization::deserializer>(s: S) ->\n \n }\n /*[syntax::ast::ty_method]*/\n-fn deserialize_155<S: std::serialization::deserializer>(s: S) ->\n+fn deserialize_157<S: std::serialization::deserializer>(s: S) ->\n    [syntax::ast::ty_method] {\n     s.read_vec(\n \n@@ -7641,12 +7704,12 @@ fn deserialize_155<S: std::serialization::deserializer>(s: S) ->\n                    vec::init_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i,\n-                                                   {|| deserialize_156(s) })\n+                                                   {|| deserialize_158(s) })\n                                 })\n                })\n }\n /*core::option::t<@syntax::ast::ty>*/\n-fn deserialize_157<S: std::serialization::deserializer>(s: S) ->\n+fn deserialize_159<S: std::serialization::deserializer>(s: S) ->\n    core::option::t<@syntax::ast::ty> {\n     s.read_enum(\"core::option::t\",\n \n@@ -7667,7 +7730,7 @@ fn deserialize_157<S: std::serialization::deserializer>(s: S) ->\n                 })\n }\n /*syntax::ast::method*/\n-fn deserialize_160<S: std::serialization::deserializer>(s: S) ->\n+fn deserialize_162<S: std::serialization::deserializer>(s: S) ->\n    syntax::ast::method {\n \n     s.read_rec(\n@@ -7706,14 +7769,14 @@ fn deserialize_160<S: std::serialization::deserializer>(s: S) ->\n \n }\n /*@syntax::ast::method*/\n-fn deserialize_159<S: std::serialization::deserializer>(s: S) ->\n+fn deserialize_161<S: std::serialization::deserializer>(s: S) ->\n    @syntax::ast::method {\n \n-    s.read_box(/*syntax::ast::method*/{|| @deserialize_160(s) })\n+    s.read_box(/*syntax::ast::method*/{|| @deserialize_162(s) })\n \n }\n /*[@syntax::ast::method]*/\n-fn deserialize_158<S: std::serialization::deserializer>(s: S) ->\n+fn deserialize_160<S: std::serialization::deserializer>(s: S) ->\n    [@syntax::ast::method] {\n     s.read_vec(\n \n@@ -7722,7 +7785,7 @@ fn deserialize_158<S: std::serialization::deserializer>(s: S) ->\n                    vec::init_fn(len,\n                                 {|i|\n                                     s.read_vec_elt(i,\n-                                                   {|| deserialize_159(s) })\n+                                                   {|| deserialize_161(s) })\n                                 })\n                })\n }\n@@ -7748,8 +7811,7 @@ fn deserialize_28<S: std::serialization::deserializer>(s: S) ->\n                 /*syntax::ast::node_id*/\n \n                 /*[syntax::ast::ty_param]*//*[@syntax::ast::class_item]*/\n-                /*syntax::ast::node_id*//*syntax::ast::fn_decl*/\n-                /*syntax::ast::blk*/\n+                /*syntax::ast::class_ctor*/\n \n                 /*[syntax::ast::ty_param]*//*[syntax::ast::ty_method]*/\n \n@@ -7848,15 +7910,7 @@ fn deserialize_28<S: std::serialization::deserializer>(s: S) ->\n                                                                                                 }),\n                                                                         s.read_enum_variant_arg(2u,\n                                                                                                 {||\n-                                                                                                    deserialize_27(s)\n-                                                                                                }),\n-                                                                        s.read_enum_variant_arg(3u,\n-                                                                                                {||\n-                                                                                                    deserialize_38(s)\n-                                                                                                }),\n-                                                                        s.read_enum_variant_arg(4u,\n-                                                                                                {||\n-                                                                                                    deserialize_81(s)\n+                                                                                                    deserialize_155(s)\n                                                                                                 }))\n                                               }\n                                               8u {\n@@ -7866,7 +7920,7 @@ fn deserialize_28<S: std::serialization::deserializer>(s: S) ->\n                                                                                                 }),\n                                                                         s.read_enum_variant_arg(1u,\n                                                                                                 {||\n-                                                                                                    deserialize_155(s)\n+                                                                                                    deserialize_157(s)\n                                                                                                 }))\n                                               }\n                                               9u {\n@@ -7876,15 +7930,15 @@ fn deserialize_28<S: std::serialization::deserializer>(s: S) ->\n                                                                                                }),\n                                                                        s.read_enum_variant_arg(1u,\n                                                                                                {||\n-                                                                                                   deserialize_157(s)\n+                                                                                                   deserialize_159(s)\n                                                                                                }),\n                                                                        s.read_enum_variant_arg(2u,\n                                                                                                {||\n                                                                                                    deserialize_29(s)\n                                                                                                }),\n                                                                        s.read_enum_variant_arg(3u,\n                                                                                                {||\n-                                                                                                   deserialize_158(s)\n+                                                                                                   deserialize_160(s)\n                                                                                                }))\n                                               }\n                                             }\n@@ -7927,27 +7981,27 @@ fn deserialize_syntax_ast_item<S: std::serialization::deserializer>(s: S) ->\n     deserialize_0(s)\n }\n /*syntax::ast::crate_num*/\n-fn serialize_163<S: std::serialization::serializer>(s: S,\n+fn serialize_165<S: std::serialization::serializer>(s: S,\n                                                     v:\n                                                         syntax::ast::crate_num) {\n     s.emit_int(v);\n }\n /*syntax::ast::def_id*/\n-fn serialize_162<S: std::serialization::serializer>(s: S,\n+fn serialize_164<S: std::serialization::serializer>(s: S,\n                                                     v: syntax::ast::def_id) {\n \n     s.emit_rec(/*syntax::ast::crate_num*//*syntax::ast::node_id*/\n                {||\n                    {\n                        s.emit_rec_field(\"crate\", 0u,\n-                                        {|| serialize_163(s, v.crate) });\n+                                        {|| serialize_165(s, v.crate) });\n                        s.emit_rec_field(\"node\", 1u,\n                                         {|| serialize_27(s, v.node) })\n                    }\n                });\n }\n /*syntax::ast::prim_ty*/\n-fn serialize_164<S: std::serialization::serializer>(s: S,\n+fn serialize_166<S: std::serialization::serializer>(s: S,\n                                                     v: syntax::ast::prim_ty) {\n \n     s.emit_enum(\"syntax::ast::prim_ty\",\n@@ -8005,13 +8059,13 @@ fn serialize_164<S: std::serialization::serializer>(s: S,\n                 });\n }\n /*@syntax::ast::def*/\n-fn serialize_165<S: std::serialization::serializer>(s: S,\n+fn serialize_167<S: std::serialization::serializer>(s: S,\n                                                     v: @syntax::ast::def) {\n \n-    s.emit_box(/*syntax::ast::def*/{|| serialize_161(s, *v) });\n+    s.emit_box(/*syntax::ast::def*/{|| serialize_163(s, *v) });\n }\n /*syntax::ast::def*/\n-fn serialize_161<S: std::serialization::serializer>(s: S,\n+fn serialize_163<S: std::serialization::serializer>(s: S,\n                                                     v: syntax::ast::def) {\n \n     s.emit_enum(\"syntax::ast::def\",\n@@ -8042,7 +8096,7 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_162(s,\n+                                                                                serialize_164(s,\n                                                                                               v0)\n                                                                             });\n                                                     s.emit_enum_variant_arg(1u,\n@@ -8071,7 +8125,7 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_162(s,\n+                                                                                serialize_164(s,\n                                                                                               v0)\n                                                                             })\n                                                 }\n@@ -8084,7 +8138,7 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_162(s,\n+                                                                                serialize_164(s,\n                                                                                               v0)\n                                                                             })\n                                                 }\n@@ -8096,7 +8150,7 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_162(s,\n+                                                                                serialize_164(s,\n                                                                                               v0)\n                                                                             })\n                                                 }\n@@ -8143,12 +8197,12 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_162(s,\n+                                                                                serialize_164(s,\n                                                                                               v0)\n                                                                             });\n                                                     s.emit_enum_variant_arg(1u,\n                                                                             {||\n-                                                                                serialize_162(s,\n+                                                                                serialize_164(s,\n                                                                                               v1)\n                                                                             })\n                                                 }\n@@ -8160,7 +8214,7 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_162(s,\n+                                                                                serialize_164(s,\n                                                                                               v0)\n                                                                             })\n                                                 }\n@@ -8173,7 +8227,7 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_164(s,\n+                                                                                serialize_166(s,\n                                                                                               v0)\n                                                                             })\n                                                 }\n@@ -8186,7 +8240,7 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_162(s,\n+                                                                                serialize_164(s,\n                                                                                               v0)\n                                                                             });\n                                                     s.emit_enum_variant_arg(1u,\n@@ -8216,7 +8270,7 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_162(s,\n+                                                                                serialize_164(s,\n                                                                                               v0)\n                                                                             })\n                                                 }\n@@ -8233,7 +8287,7 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n                                                                             });\n                                                     s.emit_enum_variant_arg(1u,\n                                                                             {||\n-                                                                                serialize_165(s,\n+                                                                                serialize_167(s,\n                                                                                               v1)\n                                                                             });\n                                                     s.emit_enum_variant_arg(2u,\n@@ -8250,7 +8304,7 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_162(s,\n+                                                                                serialize_164(s,\n                                                                                               v0)\n                                                                             })\n                                                 }\n@@ -8263,12 +8317,12 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_162(s,\n+                                                                                serialize_164(s,\n                                                                                               v0)\n                                                                             });\n                                                     s.emit_enum_variant_arg(1u,\n                                                                             {||\n-                                                                                serialize_162(s,\n+                                                                                serialize_164(s,\n                                                                                               v1)\n                                                                             })\n                                                 }\n@@ -8281,12 +8335,12 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_162(s,\n+                                                                                serialize_164(s,\n                                                                                               v0)\n                                                                             });\n                                                     s.emit_enum_variant_arg(1u,\n                                                                             {||\n-                                                                                serialize_162(s,\n+                                                                                serialize_164(s,\n                                                                                               v1)\n                                                                             })\n                                                 }\n@@ -8298,15 +8352,15 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n fn serialize_syntax_ast_def<S: std::serialization::serializer>(s: S,\n                                                                v:\n                                                                    syntax::ast::def) {\n-    serialize_161(s, v);\n+    serialize_163(s, v);\n }\n /*syntax::ast::crate_num*/\n-fn deserialize_163<S: std::serialization::deserializer>(s: S) ->\n+fn deserialize_165<S: std::serialization::deserializer>(s: S) ->\n    syntax::ast::crate_num {\n     s.read_int()\n }\n /*syntax::ast::def_id*/\n-fn deserialize_162<S: std::serialization::deserializer>(s: S) ->\n+fn deserialize_164<S: std::serialization::deserializer>(s: S) ->\n    syntax::ast::def_id {\n \n     s.read_rec(\n@@ -8319,15 +8373,15 @@ fn deserialize_162<S: std::serialization::deserializer>(s: S) ->\n                {||\n                    {crate:\n                         s.read_rec_field(\"crate\", 0u,\n-                                         {|| deserialize_163(s) }),\n+                                         {|| deserialize_165(s) }),\n                     node:\n                         s.read_rec_field(\"node\", 1u,\n                                          {|| deserialize_27(s) }),}\n                })\n \n }\n /*syntax::ast::prim_ty*/\n-fn deserialize_164<S: std::serialization::deserializer>(s: S) ->\n+fn deserialize_166<S: std::serialization::deserializer>(s: S) ->\n    syntax::ast::prim_ty {\n     s.read_enum(\"syntax::ast::prim_ty\",\n                 /*syntax::ast::int_ty*/\n@@ -8367,14 +8421,14 @@ fn deserialize_164<S: std::serialization::deserializer>(s: S) ->\n                 })\n }\n /*@syntax::ast::def*/\n-fn deserialize_165<S: std::serialization::deserializer>(s: S) ->\n+fn deserialize_167<S: std::serialization::deserializer>(s: S) ->\n    @syntax::ast::def {\n \n-    s.read_box(/*syntax::ast::def*/{|| @deserialize_161(s) })\n+    s.read_box(/*syntax::ast::def*/{|| @deserialize_163(s) })\n \n }\n /*syntax::ast::def*/\n-fn deserialize_161<S: std::serialization::deserializer>(s: S) ->\n+fn deserialize_163<S: std::serialization::deserializer>(s: S) ->\n    syntax::ast::def {\n     s.read_enum(\"syntax::ast::def\",\n                 /*syntax::ast::def_id*//*syntax::ast::purity*/\n@@ -8418,7 +8472,7 @@ fn deserialize_161<S: std::serialization::deserializer>(s: S) ->\n                                               0u {\n                                                 syntax::ast::def_fn(s.read_enum_variant_arg(0u,\n                                                                                             {||\n-                                                                                                deserialize_162(s)\n+                                                                                                deserialize_164(s)\n                                                                                             }),\n                                                                     s.read_enum_variant_arg(1u,\n                                                                                             {||\n@@ -8434,19 +8488,19 @@ fn deserialize_161<S: std::serialization::deserializer>(s: S) ->\n                                               2u {\n                                                 syntax::ast::def_mod(s.read_enum_variant_arg(0u,\n                                                                                              {||\n-                                                                                                 deserialize_162(s)\n+                                                                                                 deserialize_164(s)\n                                                                                              }))\n                                               }\n                                               3u {\n                                                 syntax::ast::def_native_mod(s.read_enum_variant_arg(0u,\n                                                                                                     {||\n-                                                                                                        deserialize_162(s)\n+                                                                                                        deserialize_164(s)\n                                                                                                     }))\n                                               }\n                                               4u {\n                                                 syntax::ast::def_const(s.read_enum_variant_arg(0u,\n                                                                                                {||\n-                                                                                                   deserialize_162(s)\n+                                                                                                   deserialize_164(s)\n                                                                                                }))\n                                               }\n                                               5u {\n@@ -8472,29 +8526,29 @@ fn deserialize_161<S: std::serialization::deserializer>(s: S) ->\n                                               7u {\n                                                 syntax::ast::def_variant(s.read_enum_variant_arg(0u,\n                                                                                                  {||\n-                                                                                                     deserialize_162(s)\n+                                                                                                     deserialize_164(s)\n                                                                                                  }),\n                                                                          s.read_enum_variant_arg(1u,\n                                                                                                  {||\n-                                                                                                     deserialize_162(s)\n+                                                                                                     deserialize_164(s)\n                                                                                                  }))\n                                               }\n                                               8u {\n                                                 syntax::ast::def_ty(s.read_enum_variant_arg(0u,\n                                                                                             {||\n-                                                                                                deserialize_162(s)\n+                                                                                                deserialize_164(s)\n                                                                                             }))\n                                               }\n                                               9u {\n                                                 syntax::ast::def_prim_ty(s.read_enum_variant_arg(0u,\n                                                                                                  {||\n-                                                                                                     deserialize_164(s)\n+                                                                                                     deserialize_166(s)\n                                                                                                  }))\n                                               }\n                                               10u {\n                                                 syntax::ast::def_ty_param(s.read_enum_variant_arg(0u,\n                                                                                                   {||\n-                                                                                                      deserialize_162(s)\n+                                                                                                      deserialize_164(s)\n                                                                                                   }),\n                                                                           s.read_enum_variant_arg(1u,\n                                                                                                   {||\n@@ -8510,7 +8564,7 @@ fn deserialize_161<S: std::serialization::deserializer>(s: S) ->\n                                               12u {\n                                                 syntax::ast::def_use(s.read_enum_variant_arg(0u,\n                                                                                              {||\n-                                                                                                 deserialize_162(s)\n+                                                                                                 deserialize_164(s)\n                                                                                              }))\n                                               }\n                                               13u {\n@@ -8520,7 +8574,7 @@ fn deserialize_161<S: std::serialization::deserializer>(s: S) ->\n                                                                                                }),\n                                                                        s.read_enum_variant_arg(1u,\n                                                                                                {||\n-                                                                                                   deserialize_165(s)\n+                                                                                                   deserialize_167(s)\n                                                                                                }),\n                                                                        s.read_enum_variant_arg(2u,\n                                                                                                {||\n@@ -8530,27 +8584,27 @@ fn deserialize_161<S: std::serialization::deserializer>(s: S) ->\n                                               14u {\n                                                 syntax::ast::def_class(s.read_enum_variant_arg(0u,\n                                                                                                {||\n-                                                                                                   deserialize_162(s)\n+                                                                                                   deserialize_164(s)\n                                                                                                }))\n                                               }\n                                               15u {\n                                                 syntax::ast::def_class_field(s.read_enum_variant_arg(0u,\n                                                                                                      {||\n-                                                                                                         deserialize_162(s)\n+                                                                                                         deserialize_164(s)\n                                                                                                      }),\n                                                                              s.read_enum_variant_arg(1u,\n                                                                                                      {||\n-                                                                                                         deserialize_162(s)\n+                                                                                                         deserialize_164(s)\n                                                                                                      }))\n                                               }\n                                               16u {\n                                                 syntax::ast::def_class_method(s.read_enum_variant_arg(0u,\n                                                                                                       {||\n-                                                                                                          deserialize_162(s)\n+                                                                                                          deserialize_164(s)\n                                                                                                       }),\n                                                                               s.read_enum_variant_arg(1u,\n                                                                                                       {||\n-                                                                                                          deserialize_162(s)\n+                                                                                                          deserialize_164(s)\n                                                                                                       }))\n                                               }\n                                             }\n@@ -8559,10 +8613,10 @@ fn deserialize_161<S: std::serialization::deserializer>(s: S) ->\n }\n fn deserialize_syntax_ast_def<S: std::serialization::deserializer>(s: S) ->\n    syntax::ast::def {\n-    deserialize_161(s)\n+    deserialize_163(s)\n }\n /*middle::typeck::method_origin*/\n-fn serialize_166<S: std::serialization::serializer>(s: S,\n+fn serialize_168<S: std::serialization::serializer>(s: S,\n                                                     v:\n                                                         middle::typeck::method_origin) {\n     s.emit_enum(\"middle::typeck::method_origin\",\n@@ -8578,7 +8632,7 @@ fn serialize_166<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_162(s,\n+                                                                                serialize_164(s,\n                                                                                               v0)\n                                                                             })\n                                                 }\n@@ -8591,7 +8645,7 @@ fn serialize_166<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_162(s,\n+                                                                                serialize_164(s,\n                                                                                               v0)\n                                                                             });\n                                                     s.emit_enum_variant_arg(1u,\n@@ -8619,7 +8673,7 @@ fn serialize_166<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_162(s,\n+                                                                                serialize_164(s,\n                                                                                               v0)\n                                                                             });\n                                                     s.emit_enum_variant_arg(1u,\n@@ -8637,10 +8691,10 @@ fn serialize_middle_typeck_method_origin<S: std::serialization::serializer>(s:\n                                                                                 S,\n                                                                             v:\n                                                                                 middle::typeck::method_origin) {\n-    serialize_166(s, v);\n+    serialize_168(s, v);\n }\n /*middle::typeck::method_origin*/\n-fn deserialize_166<S: std::serialization::deserializer>(s: S) ->\n+fn deserialize_168<S: std::serialization::deserializer>(s: S) ->\n    middle::typeck::method_origin {\n     s.read_enum(\"middle::typeck::method_origin\",\n                 /*syntax::ast::def_id*/\n@@ -8654,13 +8708,13 @@ fn deserialize_166<S: std::serialization::deserializer>(s: S) ->\n                                               0u {\n                                                 middle::typeck::method_static(s.read_enum_variant_arg(0u,\n                                                                                                       {||\n-                                                                                                          deserialize_162(s)\n+                                                                                                          deserialize_164(s)\n                                                                                                       }))\n                                               }\n                                               1u {\n                                                 middle::typeck::method_param(s.read_enum_variant_arg(0u,\n                                                                                                      {||\n-                                                                                                         deserialize_162(s)\n+                                                                                                         deserialize_164(s)\n                                                                                                      }),\n                                                                              s.read_enum_variant_arg(1u,\n                                                                                                      {||\n@@ -8678,7 +8732,7 @@ fn deserialize_166<S: std::serialization::deserializer>(s: S) ->\n                                               2u {\n                                                 middle::typeck::method_iface(s.read_enum_variant_arg(0u,\n                                                                                                      {||\n-                                                                                                         deserialize_162(s)\n+                                                                                                         deserialize_164(s)\n                                                                                                      }),\n                                                                              s.read_enum_variant_arg(1u,\n                                                                                                      {||\n@@ -8692,17 +8746,17 @@ fn deserialize_166<S: std::serialization::deserializer>(s: S) ->\n fn deserialize_middle_typeck_method_origin<S: std::serialization::deserializer>(s:\n                                                                                     S)\n    -> middle::typeck::method_origin {\n-    deserialize_166(s)\n+    deserialize_168(s)\n }\n /*middle::freevars::freevar_entry*/\n-fn serialize_167<S: std::serialization::serializer>(s: S,\n+fn serialize_169<S: std::serialization::serializer>(s: S,\n                                                     v:\n                                                         middle::freevars::freevar_entry) {\n     s.emit_rec(/*syntax::ast::def*//*syntax::codemap::span*/\n                {||\n                    {\n                        s.emit_rec_field(\"def\", 0u,\n-                                        {|| serialize_161(s, v.def) });\n+                                        {|| serialize_163(s, v.def) });\n                        s.emit_rec_field(\"span\", 1u,\n                                         {|| serialize_19(s, v.span) })\n                    }\n@@ -8712,10 +8766,10 @@ fn serialize_middle_freevars_freevar_entry<S: std::serialization::serializer>(s:\n                                                                                   S,\n                                                                               v:\n                                                                                   middle::freevars::freevar_entry) {\n-    serialize_167(s, v);\n+    serialize_169(s, v);\n }\n /*middle::freevars::freevar_entry*/\n-fn deserialize_167<S: std::serialization::deserializer>(s: S) ->\n+fn deserialize_169<S: std::serialization::deserializer>(s: S) ->\n    middle::freevars::freevar_entry {\n \n     s.read_rec(\n@@ -8727,7 +8781,7 @@ fn deserialize_167<S: std::serialization::deserializer>(s: S) ->\n \n                {||\n                    {def:\n-                        s.read_rec_field(\"def\", 0u, {|| deserialize_161(s) }),\n+                        s.read_rec_field(\"def\", 0u, {|| deserialize_163(s) }),\n                     span:\n                         s.read_rec_field(\"span\", 1u,\n                                          {|| deserialize_19(s) }),}\n@@ -8737,19 +8791,19 @@ fn deserialize_167<S: std::serialization::deserializer>(s: S) ->\n fn deserialize_middle_freevars_freevar_entry<S: std::serialization::deserializer>(s:\n                                                                                       S)\n    -> middle::freevars::freevar_entry {\n-    deserialize_167(s)\n+    deserialize_169(s)\n }\n fn serialize_syntax_ast_def_id<S: std::serialization::serializer>(s: S,\n                                                                   v:\n                                                                       syntax::ast::def_id) {\n-    serialize_162(s, v);\n+    serialize_164(s, v);\n }\n fn deserialize_syntax_ast_def_id<S: std::serialization::deserializer>(s: S) ->\n    syntax::ast::def_id {\n-    deserialize_162(s)\n+    deserialize_164(s)\n }\n /*syntax::ast::inlined_item*/\n-fn serialize_168<S: std::serialization::serializer>(s: S,\n+fn serialize_170<S: std::serialization::serializer>(s: S,\n                                                     v:\n                                                         syntax::ast::inlined_item) {\n     s.emit_enum(\"syntax::ast::inlined_item\",\n@@ -8775,12 +8829,12 @@ fn serialize_168<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_162(s,\n+                                                                                serialize_164(s,\n                                                                                               v0)\n                                                                             });\n                                                     s.emit_enum_variant_arg(1u,\n                                                                             {||\n-                                                                                serialize_159(s,\n+                                                                                serialize_161(s,\n                                                                                               v1)\n                                                                             })\n                                                 }\n@@ -8792,10 +8846,10 @@ fn serialize_168<S: std::serialization::serializer>(s: S,\n fn serialize_syntax_ast_inlined_item<S: std::serialization::serializer>(s: S,\n                                                                         v:\n                                                                             syntax::ast::inlined_item) {\n-    serialize_168(s, v);\n+    serialize_170(s, v);\n }\n /*syntax::ast::inlined_item*/\n-fn deserialize_168<S: std::serialization::deserializer>(s: S) ->\n+fn deserialize_170<S: std::serialization::deserializer>(s: S) ->\n    syntax::ast::inlined_item {\n     s.read_enum(\"syntax::ast::inlined_item\",\n                 /*@syntax::ast::item*/\n@@ -8813,11 +8867,11 @@ fn deserialize_168<S: std::serialization::deserializer>(s: S) ->\n                                               1u {\n                                                 syntax::ast::ii_method(s.read_enum_variant_arg(0u,\n                                                                                                {||\n-                                                                                                   deserialize_162(s)\n+                                                                                                   deserialize_164(s)\n                                                                                                }),\n                                                                        s.read_enum_variant_arg(1u,\n                                                                                                {||\n-                                                                                                   deserialize_159(s)\n+                                                                                                   deserialize_161(s)\n                                                                                                }))\n                                               }\n                                             }\n@@ -8827,5 +8881,5 @@ fn deserialize_168<S: std::serialization::deserializer>(s: S) ->\n fn deserialize_syntax_ast_inlined_item<S: std::serialization::deserializer>(s:\n                                                                                 S)\n    -> syntax::ast::inlined_item {\n-    deserialize_168(s)\n+    deserialize_170(s)\n }"}, {"sha": "a8173d51f0619695f2f29418d4e82c72f982498f", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=e2fa6f03f5b3195b2f81e259a6b946567440b576", "patch": "@@ -127,7 +127,7 @@ fn encode_module_item_paths(ebml_w: ebml::writer, module: _mod, path: [str],\n             encode_def_id(ebml_w, local_def(it.id));\n             ebml_w.end_tag();\n           }\n-          item_class(_,_,_,_,_) {\n+          item_class(_,_,_) {\n               fail \"encode: implement item_class\";\n           }\n           item_enum(variants, tps) {\n@@ -384,7 +384,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         encode_enum_variant_info(ecx, ebml_w, item.id, variants,\n                                  path, index, tps);\n       }\n-      item_class(_,_,_,_,_) {\n+      item_class(_,_,_) {\n           fail \"encode: implement item_class\";\n       }\n       item_res(_, tps, _, _, ctor_id) {"}, {"sha": "aa8f7ac53672233e75a3b9a7ca22af9558a82794", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=e2fa6f03f5b3195b2f81e259a6b946567440b576", "patch": "@@ -541,12 +541,12 @@ fn visit_item_with_scope(e: @env, i: @ast::item, sc: scopes, v: vt<scopes>) {\n             v.visit_ty(m.decl.output, msc, v);\n         }\n       }\n-      ast::item_class(tps, members, ctor_id, ctor_decl, ctor_block) {\n+      ast::item_class(tps, members, ctor) {\n         visit::visit_ty_params(tps, sc, v);\n         let class_scope = cons(scope_item(i), @sc);\n         /* visit the constructor... */\n-        visit_fn_with_scope(e, visit::fk_item_fn(i.ident, tps), ctor_decl,\n-                            ctor_block, ctor_block.span, ctor_id,\n+        visit_fn_with_scope(e, visit::fk_item_fn(i.ident, tps), ctor.node.dec,\n+                            ctor.node.body, ctor.span, ctor.node.id,\n                             class_scope, v);\n         /* visit the items */\n         for cm in members {\n@@ -1029,12 +1029,12 @@ fn lookup_in_scope(e: env, sc: scopes, sp: span, name: ident, ns: namespace)\n               ast::item_native_mod(m) {\n                 ret lookup_in_local_native_mod(e, it.id, sp, name, ns);\n               }\n-              ast::item_class(tps, members, ctor_id, _, _) {\n+              ast::item_class(tps, members, ctor) {\n                   if ns == ns_type {\n                     ret lookup_in_ty_params(e, name, tps);\n                   }\n                   if ns == ns_val(value_or_enum) && name == it.ident {\n-                      ret some(ast::def_fn(local_def(ctor_id),\n+                      ret some(ast::def_fn(local_def(ctor.node.id),\n                                            ast::impure_fn));\n                   }\n                   if ns == ns_val(value_or_enum) {\n@@ -1359,7 +1359,7 @@ fn found_def_item(i: @ast::item, ns: namespace) -> option<def> {\n           _ { }\n         }\n       }\n-      ast::item_class(_, _, _, _, _) {\n+      ast::item_class(_, _, _) {\n           if ns == ns_type {\n             ret some(ast::def_class(local_def(i.id)));\n           }\n@@ -1664,16 +1664,16 @@ fn index_mod(md: ast::_mod) -> mod_index {\n                 variant_idx += 1u;\n             }\n           }\n-          ast::item_class(tps, items, ctor_id, ctor_decl, ctor_body) {\n+          ast::item_class(tps, items, ctor) {\n               // add the class name itself\n               add_to_index(index, it.ident, mie_item(it));\n               // add the constructor decl\n               add_to_index(index, it.ident,\n                            mie_item(@{ident: it.ident, attrs: [],\n-                                       id: ctor_id,\n-                                       node:\n-                                         item_fn(ctor_decl, tps, ctor_body),\n-                                       span: ctor_body.span}));\n+                            id: ctor.node.id,\n+                            node:\n+                              item_fn(ctor.node.dec, tps, ctor.node.body),\n+                            span: ctor.node.body.span}));\n               // add the members\n               for ci in items {\n                  add_to_index(index, class_item_ident(ci),"}, {"sha": "12beb363d04a6555e35c53218cb84535de77076c", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 147, "deletions": 22, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=e2fa6f03f5b3195b2f81e259a6b946567440b576", "patch": "@@ -49,6 +49,8 @@ import type_of::*;\n import type_of::type_of; // Issue #1873\n import ast_map::{path, path_mod, path_name};\n \n+import std::smallintmap;\n+\n // Destinations\n \n // These are passed around by the code generating functions to track the\n@@ -1208,6 +1210,15 @@ fn iter_structural_ty(cx: block, av: ValueRef, t: ty::t,\n         }\n         ret next_cx;\n       }\n+      ty::ty_class(did, tps) {\n+          // a class is like a record type\n+        let i: int = 0;\n+        for fld: ty::field in ty::class_items_as_fields(cx.tcx(), did) {\n+            let {bcx: bcx, val: llfld_a} = GEP_tup_like(cx, t, av, [0, i]);\n+            cx = f(bcx, llfld_a, fld.mt.ty);\n+            i += 1;\n+        }\n+      }\n       _ { cx.sess().unimpl(\"type in iter_structural_ty\"); }\n     }\n     ret cx;\n@@ -2096,7 +2107,7 @@ fn monomorphic_fn(ccx: crate_ctxt, fn_id: ast::def_id, substs: [ty::t],\n     alt check map_node {\n       ast_map::node_item(@{node: ast::item_fn(decl, _, body), _}, _) {\n         trans_fn(ccx, pt, decl, body, lldecl, no_self, [],\n-                 psubsts, fn_id.node);\n+                 psubsts, fn_id.node, none);\n       }\n       ast_map::node_item(@{node: ast::item_res(decl, _, _, _, _), _}, _) {\n         trans_res_ctor(ccx, pt, decl, fn_id.node, [], psubsts, lldecl);\n@@ -2112,7 +2123,7 @@ fn monomorphic_fn(ccx: crate_ctxt, fn_id: ast::def_id, substs: [ty::t],\n         let selfty = ty::lookup_item_type(ccx.tcx, impl_def_id).ty;\n         let selfty = ty::substitute_type_params(ccx.tcx, substs, selfty);\n         trans_fn(ccx, pt, mth.decl, mth.body, lldecl,\n-                 impl_self(selfty), [], psubsts, fn_id.node);\n+                 impl_self(selfty), [], psubsts, fn_id.node, none);\n       }\n     }\n     some({llfn: lldecl, fty: mono_ty})\n@@ -2267,17 +2278,26 @@ fn trans_local_var(cx: block, def: ast::def) -> local_var_result {\n         ret {val: ptr, kind: owned};\n       }\n       _ {\n-        cx.sess().unimpl(\"unsupported def type in trans_local_def\");\n+        cx.sess().unimpl(#fmt(\"unsupported def type in trans_local_def: %?\",\n+                              def));\n       }\n     }\n }\n \n-fn trans_path(cx: block, id: ast::node_id)\n+// The third argument (path) ends up getting used when the id\n+// refers to a field within the enclosing class, since the name\n+// gets turned into a record field name.\n+fn trans_path(cx: block, id: ast::node_id, path: @ast::path)\n     -> lval_maybe_callee {\n-    ret trans_var(cx, cx.tcx().def_map.get(id), id);\n+    alt cx.tcx().def_map.find(id) {\n+      none { cx.sess().bug(\"trans_path: unbound node ID\"); }\n+      some(df) {\n+          ret trans_var(cx, df, id, path);\n+      }\n+    }\n }\n \n-fn trans_var(cx: block, def: ast::def, id: ast::node_id)\n+fn trans_var(cx: block, def: ast::def, id: ast::node_id, path: @ast::path)\n     -> lval_maybe_callee {\n     let ccx = cx.ccx();\n     alt def {\n@@ -2313,6 +2333,18 @@ fn trans_var(cx: block, def: ast::def, id: ast::node_id)\n             ret lval_no_env(cx, load_if_immediate(cx, val, tp), owned_imm);\n         }\n       }\n+      ast::def_class_field(parent, did) {\n+          // base is implicitly \"Self\"\n+          alt cx.fcx.self_id {\n+            some(slf) {\n+                let {bcx, val, kind} = trans_rec_field(cx, slf,\n+                    // TODO: only supporting local objects for now\n+                                          path_to_ident(path));\n+                ret lval_no_env(bcx, val, kind);\n+            }\n+            _ { cx.sess().bug(\"unbound self param in class\"); }\n+          }\n+     }\n       _ {\n         let loc = trans_local_var(cx, def);\n         ret lval_no_env(cx, loc.val, loc.kind);\n@@ -2326,6 +2358,7 @@ fn trans_rec_field(bcx: block, base: @ast::expr,\n     let {bcx, val, ty} = autoderef(bcx, val, expr_ty(bcx, base));\n     let fields = alt ty::get(ty).struct {\n             ty::ty_rec(fs) { fs }\n+            ty::ty_class(did,_) { ty::class_items_as_fields(bcx.tcx(), did) }\n             // Constraint?\n             _ { bcx.tcx().sess.span_bug(base.span, \"trans_rec_field:\\\n                  base expr has non-record type\"); }\n@@ -2386,7 +2419,7 @@ fn expr_is_lval(bcx: block, e: @ast::expr) -> bool {\n \n fn trans_callee(bcx: block, e: @ast::expr) -> lval_maybe_callee {\n     alt e.node {\n-      ast::expr_path(_) { ret trans_path(bcx, e.id); }\n+      ast::expr_path(path) { ret trans_path(bcx, e.id, path); }\n       ast::expr_field(base, ident, _) {\n         // Lval means this is a record field, so not a method\n         if !expr_is_lval(bcx, e) {\n@@ -2412,8 +2445,8 @@ fn trans_callee(bcx: block, e: @ast::expr) -> lval_maybe_callee {\n // immediate).\n fn trans_lval(cx: block, e: @ast::expr) -> lval_result {\n     alt e.node {\n-      ast::expr_path(_) {\n-        let v = trans_path(cx, e.id);\n+      ast::expr_path(p) {\n+          let v = trans_path(cx, e.id, p);\n         ret lval_maybe_callee_to_lval(v, expr_ty(cx, e));\n       }\n       ast::expr_field(base, ident, _) {\n@@ -3839,6 +3872,7 @@ fn mk_standard_basic_blocks(llfn: ValueRef) ->\n //  - trans_args\n fn new_fn_ctxt_w_id(ccx: crate_ctxt, path: path,\n                     llfndecl: ValueRef, id: ast::node_id,\n+                    maybe_self_id: option<@ast::expr>,\n                     param_substs: option<param_substs>,\n                     sp: option<span>) -> fn_ctxt {\n     let llbbs = mk_standard_basic_blocks(llfndecl);\n@@ -3860,6 +3894,7 @@ fn new_fn_ctxt_w_id(ccx: crate_ctxt, path: path,\n           mutable lltyparams: [],\n           derived_tydescs: ty::new_ty_hash(),\n           id: id,\n+          self_id: maybe_self_id,\n           param_substs: param_substs,\n           span: sp,\n           path: path,\n@@ -3868,7 +3903,7 @@ fn new_fn_ctxt_w_id(ccx: crate_ctxt, path: path,\n \n fn new_fn_ctxt(ccx: crate_ctxt, path: path, llfndecl: ValueRef,\n                sp: option<span>) -> fn_ctxt {\n-    ret new_fn_ctxt_w_id(ccx, path, llfndecl, -1, none, sp);\n+    ret new_fn_ctxt_w_id(ccx, path, llfndecl, -1, none, none, sp);\n }\n \n // NB: must keep 4 fns in sync:\n@@ -3991,12 +4026,13 @@ fn trans_closure(ccx: crate_ctxt, path: path, decl: ast::fn_decl,\n                  ty_self: self_arg,\n                  tps_bounds: [ty::param_bounds],\n                  param_substs: option<param_substs>,\n-                 id: ast::node_id, maybe_load_env: fn(fn_ctxt)) {\n+                 id: ast::node_id, maybe_self_id: option<@ast::expr>,\n+                 maybe_load_env: fn(fn_ctxt)) {\n     set_uwtable(llfndecl);\n \n     // Set up arguments to the function.\n-    let fcx = new_fn_ctxt_w_id(ccx, path, llfndecl, id, param_substs,\n-                               some(body.span));\n+            let fcx = new_fn_ctxt_w_id(ccx, path, llfndecl, id, maybe_self_id,\n+                  param_substs, some(body.span));\n     create_llargs_for_fn_args(fcx, ty_self, decl.inputs, tps_bounds);\n \n     // Create the first basic block in the function and keep a handle on it to\n@@ -4014,9 +4050,14 @@ fn trans_closure(ccx: crate_ctxt, path: path, decl: ast::fn_decl,\n     // translation calls that don't have a return value (trans_crate,\n     // trans_mod, trans_item, et cetera) and those that do\n     // (trans_block, trans_expr, et cetera).\n-    if option::is_none(body.node.expr) ||\n+\n+    if option::is_none(maybe_self_id) // hack --\n+       /* avoids the need for special cases to assign a type to\n+          the constructor body (since it has no explicit return) */\n+      &&\n+      (option::is_none(body.node.expr) ||\n        ty::type_is_bot(block_ty) ||\n-       ty::type_is_nil(block_ty) {\n+       ty::type_is_nil(block_ty))  {\n         bcx = trans_block(bcx, body, ignore);\n     } else {\n         bcx = trans_block(bcx, body, save_in(fcx.llretptr));\n@@ -4037,12 +4078,13 @@ fn trans_fn(ccx: crate_ctxt,\n             ty_self: self_arg,\n             tps_bounds: [ty::param_bounds],\n             param_substs: option<param_substs>,\n-            id: ast::node_id) {\n+            id: ast::node_id,\n+            maybe_self_id: option<@ast::expr>) {\n     let do_time = ccx.sess.opts.stats;\n     let start = if do_time { time::get_time() }\n                 else { {sec: 0u32, usec: 0u32} };\n     trans_closure(ccx, path, decl, body, llfndecl, ty_self,\n-                  tps_bounds, param_substs, id, {|fcx|\n+                  tps_bounds, param_substs, id, maybe_self_id, {|fcx|\n         if ccx.sess.opts.extra_debuginfo {\n             debuginfo::create_function(fcx);\n         }\n@@ -4058,7 +4100,7 @@ fn trans_res_ctor(ccx: crate_ctxt, path: path, dtor: ast::fn_decl,\n                   param_substs: option<param_substs>, llfndecl: ValueRef) {\n     // Create a function for the constructor\n     let fcx = new_fn_ctxt_w_id(ccx, path, llfndecl, ctor_id,\n-                               param_substs, none);\n+                               none, param_substs, none);\n     create_llargs_for_fn_args(fcx, no_self, dtor.inputs, tps_bounds);\n     let bcx = top_scope_block(fcx, none), lltop = bcx.llbb;\n     let fty = node_id_type(bcx, ctor_id);\n@@ -4100,7 +4142,7 @@ fn trans_enum_variant(ccx: crate_ctxt, enum_id: ast::node_id,\n                      ident: \"arg\" + uint::to_str(i, 10u),\n                      id: varg.id}];\n     }\n-    let fcx = new_fn_ctxt_w_id(ccx, [], llfndecl, variant.node.id,\n+    let fcx = new_fn_ctxt_w_id(ccx, [], llfndecl, variant.node.id, none,\n                                param_substs, none);\n     create_llargs_for_fn_args(fcx, no_self, fn_args,\n                               param_bounds(ccx, ty_params));\n@@ -4261,7 +4303,7 @@ fn trans_item(ccx: crate_ctxt, item: ast::item) {\n         if decl.purity != ast::crust_fn  {\n             trans_fn(ccx, *path + [path_name(item.ident)], decl, body,\n                      llfndecl, no_self, param_bounds(ccx, tps),\n-                     none, item.id);\n+                     none, item.id, none);\n         } else {\n             native::trans_crust_fn(ccx, *path + [path_name(item.ident)],\n                                    decl, body, llfndecl, item.id);\n@@ -4280,7 +4322,7 @@ fn trans_item(ccx: crate_ctxt, item: ast::item) {\n           some(lldtor_decl) {\n             trans_fn(ccx, *path + [path_name(item.ident)], decl, body,\n                      lldtor_decl, no_self, param_bounds(ccx, tps),\n-                     none, dtor_id);\n+                     none, dtor_id, none);\n           }\n           _ {\n             ccx.sess.span_fatal(item.span, \"unbound dtor in trans_item\");\n@@ -4311,6 +4353,83 @@ fn trans_item(ccx: crate_ctxt, item: ast::item) {\n         };\n         native::trans_native_mod(ccx, native_mod, abi);\n       }\n+      ast::item_class(tps, items, ctor) {\n+          alt ccx.item_ids.find(ctor.node.id) {\n+             some(llctor_decl) {\n+             // Translate the ctor\n+             // First, add a preamble that\n+             // generates a new name, obj:\n+             // let obj = { ... } (uninit record fields)\n+                 let sess = ccx.sess;\n+                 let rslt_path_ = {global: false,\n+                                   idents: [\"obj\"],\n+                                   types: []}; // ??\n+                 let rslt_path = @{node: rslt_path_,\n+                                  span: ctor.node.body.span};\n+                 let rslt_id : ast::node_id = sess.next_node_id();\n+                 let rslt_pat : @ast::pat =\n+                     @{id: sess.next_node_id(),\n+                       node: ast::pat_ident(rslt_path, none),\n+                       span: ctor.node.body.span};\n+                 // Set up obj's type\n+                 let rslt_ast_ty : @ast::ty = @{node: ast::ty_infer,\n+                                    span: ctor.node.body.span};\n+                 // kludgy\n+                 let ty_args = [], i = 0u;\n+                 for tp in tps {\n+                   ty_args += [ty::mk_param(ccx.tcx, i,\n+                                            local_def(tps[i].id))];\n+                 }\n+                 let rslt_ty =  ty::mk_class(ccx.tcx,\n+                                                  local_def(item.id),\n+                                             ty_args);\n+                 // Set up a local for obj\n+                 let rslt_loc_ : ast::local_ = {is_mutbl: true,\n+                                  ty: rslt_ast_ty, // ???\n+                                  pat: rslt_pat,\n+                                  init: none::<ast::initializer>,\n+                                  id: rslt_id};\n+                 // Register a type for obj\n+                 smallintmap::insert(*ccx.tcx.node_types,\n+                                     rslt_loc_.id as uint, rslt_ty);\n+                 // Create the decl statement that initializers obj\n+                 let rslt_loc : @ast::local =\n+                     @{node: rslt_loc_, span: ctor.node.body.span};\n+                 let rslt_decl_ : ast::decl_ = ast::decl_local([rslt_loc]);\n+                 let rslt_decl : @ast::decl\n+                     = @{node: rslt_decl_, span: ctor.node.body.span};\n+                 let prologue : @ast::stmt = @{node: ast::stmt_decl(rslt_decl,\n+                                                     sess.next_node_id()),\n+                                              span: ctor.node.body.span};\n+                 let rslt_node_id = sess.next_node_id();\n+                 ccx.tcx.def_map.insert(rslt_node_id,\n+                          ast::def_local(rslt_loc_.id, true));\n+                 // And give the statement a type\n+                 smallintmap::insert(*ccx.tcx.node_types,\n+                                     rslt_node_id as uint, rslt_ty);\n+                 // The result expression of the constructor is now a\n+                 // reference to obj\n+                 let rslt_expr : @ast::expr =\n+                     @{id: rslt_node_id,\n+                       node: ast::expr_path(rslt_path),\n+                       span: ctor.node.body.span};\n+                 let ctor_body_new : ast::blk_ = {stmts: [prologue]\n+                                      + ctor.node.body.node.stmts,\n+                                       expr: some(rslt_expr)\n+                                     with ctor.node.body.node};\n+                 let ctor_body__ : ast::blk = {node: ctor_body_new\n+                                                with ctor.node.body};\n+             trans_fn(ccx, *path + [path_name(item.ident)], ctor.node.dec,\n+                      ctor_body__, llctor_decl, no_self,\n+                      param_bounds(ccx, tps), none, ctor.node.id,\n+                      some(rslt_expr));\n+             // TODO: translate methods!\n+             }\n+             _ {\n+               ccx.sess.span_bug(item.span, \"unbound ctor in trans_item\");\n+             }\n+          }\n+      }\n       _ {/* fall through */ }\n     }\n }\n@@ -4348,7 +4467,7 @@ fn trans_inlined_items(ccx: crate_ctxt, inline_map: inline_map) {\n                 let llfndecl = ccx.item_ids.get(m.id);\n                 trans_fn(ccx, m_path, m.decl, m.body,\n                          llfndecl, impl_self(impl_ty), m_bounds,\n-                         none, m.id);\n+                         none, m.id, none);\n             }\n           }\n         }\n@@ -4605,6 +4724,12 @@ fn collect_item(ccx: crate_ctxt, abi: @mutable option<ast::native_abi>,\n             }\n         }\n       }\n+      ast::item_class(tps,_,ctor) {\n+          // Register the ctor\n+          let t = ty::node_id_to_type(ccx.tcx, ctor.node.id);\n+          register_fn_full(ccx, i.span, my_path, \"ctor\",\n+                           param_bounds(ccx, tps), ctor.node.id, t);\n+      }\n       _ { }\n     }\n }"}, {"sha": "6f85204ffe07c16bbce6912a607a87aa84ec3086", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=e2fa6f03f5b3195b2f81e259a6b946567440b576", "patch": "@@ -470,7 +470,7 @@ fn trans_expr_fn(bcx: block,\n             ccx.tcx, id, proto, cap_clause);\n         let {llbox, cdata_ty, bcx} = build_closure(bcx, cap_vars, ck, id);\n         trans_closure(ccx, sub_path, decl, body, llfn, no_self, [],\n-                      bcx.fcx.param_substs, id, {|fcx|\n+                      bcx.fcx.param_substs, id, none, {|fcx|\n             load_environment(bcx, fcx, cdata_ty, cap_vars, ck);\n         });\n         llbox\n@@ -482,7 +482,7 @@ fn trans_expr_fn(bcx: block,\n       ast::proto_uniq { trans_closure_env(ty::ck_uniq) }\n       ast::proto_bare {\n         trans_closure(ccx, sub_path, decl, body, llfn, no_self, [], none,\n-                      id, {|_fcx|});\n+                      id, none, {|_fcx|});\n         C_null(T_opaque_box_ptr(ccx))\n       }\n     };"}, {"sha": "7b42ca61699066f8730929b7f9b4433d751cb180", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=e2fa6f03f5b3195b2f81e259a6b946567440b576", "patch": "@@ -196,6 +196,10 @@ type fn_ctxt = @{\n     // a user-defined function.\n     id: ast::node_id,\n \n+    // The expr for the \"self\" object (only if this function corresponds\n+    // to a class constructor function)\n+    self_id: option<@ast::expr>,\n+\n     // If this function is being monomorphized, this contains the type\n     // substitutions used.\n     param_substs: option<param_substs>,"}, {"sha": "e713a9979e4bfe9b97de9457e65e53b28f2d496c", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=e2fa6f03f5b3195b2f81e259a6b946567440b576", "patch": "@@ -52,7 +52,7 @@ fn trans_impl(ccx: crate_ctxt, path: path, name: ast::ident,\n             let m_bounds = param_bounds(ccx, tps + m.tps);\n             trans_fn(ccx, sub_path + [path_name(m.ident)], m.decl, m.body,\n                      llfn, impl_self(ty::node_id_to_type(ccx.tcx, id)),\n-                     m_bounds, none, m.id);\n+                     m_bounds, none, m.id, none);\n           }\n           _ {\n             ccx.sess.bug(\"Unbound id in trans_impl\");"}, {"sha": "9753ef6bd3307d9e92379b6a732ab9d8ce3460f1", "filename": "src/rustc/middle/trans/native.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs?ref=e2fa6f03f5b3195b2f81e259a6b946567440b576", "patch": "@@ -274,7 +274,8 @@ fn trans_crust_fn(ccx: crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n             ccx, path + [ast_map::path_name(\"__rust_abi\")]);\n         let llty = type_of_fn_from_ty(ccx, t, []);\n         let llfndecl = decl_internal_cdecl_fn(ccx.llmod, ps, llty);\n-        trans_fn(ccx, path, decl, body, llfndecl, no_self, [], none, id);\n+        trans_fn(ccx, path, decl, body, llfndecl, no_self, [], none, id,\n+                 none);\n         ret llfndecl;\n     }\n "}, {"sha": "e613fdf3cd9f3a00425516f7652c50538367a7dc", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=e2fa6f03f5b3195b2f81e259a6b946567440b576", "patch": "@@ -2,6 +2,9 @@ import common::*;\n import lib::llvm::{TypeRef};\n import syntax::ast;\n import lib::llvm::llvm;\n+import driver::session::session;\n+\n+import ty::*;\n \n fn type_of_explicit_args(cx: crate_ctxt, inputs: [ty::arg]) -> [TypeRef] {\n     vec::map(inputs) {|arg|\n@@ -102,8 +105,25 @@ fn type_of(cx: crate_ctxt, t: ty::t) -> TypeRef {\n       }\n       ty::ty_opaque_closure_ptr(_) { T_opaque_box_ptr(cx) }\n       ty::ty_constr(subt,_) { type_of(cx, subt) }\n-\n-      _ { fail \"type_of not implemented for this kind of type\"; }\n+      ty::ty_class(did, _) {\n+        let tys: [TypeRef] = [];\n+        // TODO: only handles local classes\n+        let cls_items = lookup_class_items(cx.tcx, did);\n+        for ci in cls_items {\n+            // only instance vars are record fields at runtime\n+            alt ci.node.decl {\n+                ast::instance_var(_,_,_,_) {\n+                  let fty = type_of(cx, class_item_type(cx.tcx, ci));\n+                  tys += [fty];\n+                }\n+                _ {}\n+            }\n+        }\n+        T_struct(tys)\n+      }\n+      ty::ty_self(_) { cx.tcx.sess.unimpl(\"type_of: ty_self \\\n+                         not implemented\"); }\n+      ty::ty_var(_) { cx.tcx.sess.bug(\"type_of shouldn't see a ty_var\"); }\n     };\n     cx.lltypes.insert(t, llty);\n     ret llty;"}, {"sha": "6c80234a54bc389fd5cca1a0112c20a107ef6b60", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=e2fa6f03f5b3195b2f81e259a6b946567440b576", "patch": "@@ -56,7 +56,7 @@ fn find_pre_post_item(ccx: crate_ctxt, i: item) {\n              ccx: ccx};\n         find_pre_post_fn(fcx, body);\n       }\n-      item_class(_,_,_,_,_) {\n+      item_class(_,_,_) {\n           fail \"find_pre_post_item: implement item_class\";\n       }\n       item_impl(_, _, _, ms) { for m in ms { find_pre_post_method(ccx, m); } }"}, {"sha": "6895630f879ad5b0196a6f7083d79adda88b7424", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=e2fa6f03f5b3195b2f81e259a6b946567440b576", "patch": "@@ -18,6 +18,8 @@ export arg;\n export args_eq;\n export ast_constr_to_constr;\n export block_ty;\n+export class_item_type;\n+export class_items_as_fields;\n export constr;\n export constr_general;\n export constr_table;\n@@ -37,6 +39,7 @@ export fm_general;\n export get_element_type;\n export is_binopable;\n export is_pred_ty;\n+export lookup_class_items;\n export lookup_item_type;\n export method;\n export method_idx;\n@@ -628,7 +631,7 @@ fn type_is_bool(ty: t) -> bool { get(ty).struct == ty_bool }\n \n fn type_is_structural(ty: t) -> bool {\n     alt get(ty).struct {\n-      ty_rec(_) | ty_tup(_) | ty_enum(_, _) | ty_fn(_) |\n+      ty_rec(_) | ty_class(_,_) | ty_tup(_) | ty_enum(_, _) | ty_fn(_) |\n       ty_iface(_, _) | ty_res(_, _, _) { true }\n       _ { false }\n     }\n@@ -1228,7 +1231,10 @@ fn constrs_eq(cs: [@constr], ds: [@constr]) -> bool {\n }\n \n fn node_id_to_type(cx: ctxt, id: ast::node_id) -> t {\n-    smallintmap::get(*cx.node_types, id as uint)\n+    alt smallintmap::find(*cx.node_types, id as uint) {\n+       some(t) { t }\n+       none { cx.sess.bug(#fmt(\"node_id_to_type: unbound node ID %?\", id)); }\n+    }\n }\n \n fn node_id_to_type_params(cx: ctxt, id: ast::node_id) -> [t] {\n@@ -2292,6 +2298,54 @@ fn lookup_item_type(cx: ctxt, did: ast::def_id) -> ty_param_bounds_and_ty {\n     }\n }\n \n+// Look up the list of items for a given class (in the item map).\n+// Fails if the id is not bound to a class.\n+fn lookup_class_items(cx: ctxt, did: ast::def_id) -> [@class_item] {\n+    alt cx.items.find(did.node) {\n+       some(ast_map::node_item(i,_)) {\n+           alt i.node {\n+              ast::item_class(_, items, _) {\n+                  items\n+              }\n+              _ { cx.sess.bug(\"class ID bound to non-class\"); }\n+           }\n+       }\n+       _ { cx.sess.bug(\"class ID not bound to an item\"); }\n+    }\n+}\n+\n+// Return a list of fields corresponding to the class's items\n+// (as if the class was a record). trans uses this\n+fn class_items_as_fields(cx:ctxt, did: ast::def_id) -> [field] {\n+    let rslt = [];\n+    for ci in lookup_class_items(cx, did) {\n+       rslt += [alt ci.node.decl {\n+         instance_var(i, _, _, id) {\n+             // consider all instance vars mutable, because the\n+             // constructor may mutate all vars\n+             {ident: i, mt: {ty: node_id_to_type(cx, id),\n+                         mutbl: m_mutbl}}\n+         }\n+         class_method(it) {\n+             {ident:it.ident, mt: {ty: node_id_to_type(cx, it.id),\n+                               mutbl: m_const}}\n+         }\n+       }];\n+    }\n+    rslt\n+}\n+\n+// Looks up the type for a given class item. Must be called\n+// post-typechecking.\n+fn class_item_type(cx: ctxt, ci: @ast::class_item) -> t {\n+    alt ci.node.decl {\n+       ast::instance_var(_,_,_,id) { node_id_to_type(cx, id) }\n+       // TODO: only works for local classes\n+       ast::class_method(it) { lookup_item_type(cx,\n+                                 ast_util::local_def(it.id)).ty }\n+    }\n+}\n+\n fn is_binopable(_cx: ctxt, ty: t, op: ast::binop) -> bool {\n     const tycat_other: int = 0;\n     const tycat_bool: int = 1;"}, {"sha": "57d8fc295604fcd66ce171656039e5f0878eb7a1", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=e2fa6f03f5b3195b2f81e259a6b946567440b576", "patch": "@@ -10,7 +10,7 @@ import pat_util::*;\n import middle::ty;\n import middle::ty::{node_id_to_type, arg, block_ty,\n                     expr_ty, field, node_type_table, mk_nil,\n-                    ty_param_bounds_and_ty};\n+                    ty_param_bounds_and_ty, lookup_class_items};\n import util::ppaux::ty_to_str;\n import middle::ty::unify::{ures_ok, ures_err, fix_ok, fix_err};\n import std::smallintmap;\n@@ -375,7 +375,7 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n           ast::def_class(class_id) {\n               alt tcx.items.find(class_id.node) {\n                  some(ast_map::node_item(\n-                  @{node: ast::item_class(tps, _, _, _, _), _}, _)) {\n+                  @{node: ast::item_class(tps, _, _), _}, _)) {\n                      if vec::len(tps) != vec::len(path.node.types) {\n                         tcx.sess.span_err(ast_ty.span, \"incorrect number of \\\n                            type parameters to object type\");\n@@ -492,7 +492,7 @@ fn ty_of_item(tcx: ty::ctxt, mode: mode, it: @ast::item)\n         tcx.tcache.insert(local_def(it.id), tpt);\n         ret tpt;\n       }\n-      ast::item_class(tps,_,_,_,_) {\n+      ast::item_class(tps,_,_) {\n           let {bounds,params} = mk_ty_params(tcx, tps);\n           let t = ty::mk_class(tcx, local_def(it.id), params);\n           let tpt = {bounds: bounds, ty: t};\n@@ -944,7 +944,7 @@ mod collect {\n             write_ty(tcx, it.id, tpt.ty);\n             ensure_iface_methods(tcx, it.id);\n           }\n-          ast::item_class(tps, members, ctor_id, ctor_decl, ctor_block) {\n+          ast::item_class(tps, members, ctor) {\n               // Write the class type\n               let {bounds,params} = mk_ty_params(tcx, tps);\n               let class_ty = ty::mk_class(tcx, local_def(it.id), params);\n@@ -954,9 +954,9 @@ mod collect {\n               // Write the ctor type\n               let t_ctor = ty::mk_fn(tcx,\n                                      ty_of_fn_decl(tcx, m_collect,\n-                                             ast::proto_any, ctor_decl));\n-              write_ty(tcx, ctor_id, t_ctor);\n-              tcx.tcache.insert(local_def(ctor_id),\n+                                             ast::proto_any, ctor.node.dec));\n+              write_ty(tcx, ctor.node.id, t_ctor);\n+              tcx.tcache.insert(local_def(ctor.node.id),\n                                    {bounds: bounds, ty: t_ctor});\n               /* FIXME: check for proper public/privateness */\n               // Write the type of each of the members\n@@ -2549,19 +2549,9 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n               // For now, this code assumes the class is defined in the local\n               // crate\n               // FIXME: handle field references to classes in external crate\n-              let err = \"Class ID is not bound to a class\";\n-              let field_ty = alt fcx.ccx.tcx.items.find(base_id.node) {\n-                      some(ast_map::node_item(i,_)) {\n-                          alt i.node {\n-                             ast::item_class(_, items, _, _, _) {\n-                                 lookup_field_ty(fcx.ccx.tcx, items, field,\n-                                    expr.span)\n-                             }\n-                             _ { fcx.ccx.tcx.sess.span_bug(expr.span, err); }\n-                          }\n-                      }\n-                      _ { fcx.ccx.tcx.sess.span_bug(expr.span, err); }\n-              };\n+              let cls_items = lookup_class_items(tcx, base_id);\n+              let field_ty = lookup_field_ty(fcx.ccx.tcx, cls_items, field,\n+                                             expr.span);\n               // (2) look up what field's type is, and return it\n               // FIXME: actually instantiate any type params\n               write_ty(tcx, id, field_ty);\n@@ -3034,14 +3024,14 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n         for m in ms { check_method(ccx, m); }\n         vec::pop(ccx.self_infos);\n       }\n-      ast::item_class(tps, members, ctor_id, ctor_decl, ctor_body) {\n+      ast::item_class(tps, members, ctor) {\n           let cid = some(it.id);\n           let members_info = class_types(ccx, members);\n           let class_ccx = @{enclosing_class_id:cid,\n                             enclosing_class:members_info with *ccx};\n           // typecheck the ctor\n-          check_fn(class_ccx, ast::proto_bare, ctor_decl, ctor_body, ctor_id,\n-                   none);\n+          check_fn(class_ccx, ast::proto_bare, ctor.node.dec,\n+                   ctor.node.body, ctor.node.id, none);\n           // typecheck the members\n           for m in members { check_class_member(class_ccx, m.node.decl); }\n       }"}, {"sha": "2f0c4bf78393c5b3c9d3274480d66e7576e9bb9e", "filename": "src/rustc/syntax/ast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fast.rs?ref=e2fa6f03f5b3195b2f81e259a6b946567440b576", "patch": "@@ -9,9 +9,6 @@ type ident = str;\n // Functions may or may not have names.\n type fn_ident = option<ident>;\n \n-// FIXME: with typestate constraint, could say\n-// idents and types are the same length, and are\n-// non-empty\n type path_ = {global: bool, idents: [ident], types: [@ty]};\n \n type path = spanned<path_>;\n@@ -499,9 +496,7 @@ enum item_ {\n     item_class([ty_param], /* ty params for class */\n                [@class_item], /* methods, etc. */\n                              /* (not including ctor) */\n-               node_id,  /* ctor id */\n-               fn_decl, /* ctor decl */\n-               blk /* ctor body */\n+               class_ctor\n                ),\n     item_iface([ty_param], [ty_method]),\n     item_impl([ty_param], option<@ty> /* iface */,\n@@ -523,6 +518,11 @@ enum class_mutability { class_mutable, class_immutable }\n \n enum privacy { priv, pub }\n \n+type class_ctor = spanned<class_ctor_>;\n+type class_ctor_ = {id: node_id,\n+                    dec: fn_decl,\n+                    body: blk};\n+\n type native_item =\n     {ident: ident,\n      attrs: [attribute],"}, {"sha": "d8088e39cb6d24c3bcd0311d143a6d0d94576c46", "filename": "src/rustc/syntax/fold.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Ffold.rs?ref=e2fa6f03f5b3195b2f81e259a6b946567440b576", "patch": "@@ -269,12 +269,14 @@ fn noop_fold_item_underscore(i: item_, fld: ast_fold) -> item_ {\n             item_enum(vec::map(variants, fld.fold_variant),\n                       fold_ty_params(typms, fld))\n           }\n-          item_class(typms, items, id, ctor_decl, ctor_body) {\n-              item_class(fold_ty_params(typms, fld),\n+          item_class(typms, items, ctor) {\n+              let ctor_body = fld.fold_block(ctor.node.body);\n+              let ctor_decl = fold_fn_decl(ctor.node.dec, fld);\n+              item_class(typms,\n                          vec::map(items, fld.fold_class_item),\n-                         id,\n-                         fold_fn_decl(ctor_decl, fld),\n-                         fld.fold_block(ctor_body))\n+                         {node: {body: ctor_body,\n+                                     dec: ctor_decl with ctor.node}\n+                             with ctor})\n           }\n           item_impl(tps, ifce, ty, methods) {\n             item_impl(tps, option::map(ifce, fld.fold_ty), fld.fold_ty(ty),"}, {"sha": "e8df2f86305548cfe4edb98638ec5a8aeda8e596", "filename": "src/rustc/syntax/parse/parser.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs?ref=e2fa6f03f5b3195b2f81e259a6b946567440b576", "patch": "@@ -1590,8 +1590,9 @@ fn parse_let(p: parser) -> @ast::decl {\n     ret @spanned(lo, p.last_span.hi, ast::decl_local(locals));\n }\n \n-fn parse_instance_var(p:parser) -> ast::class_member {\n+fn parse_instance_var(p:parser) -> (ast::class_member, codemap::span) {\n     let is_mutbl = ast::class_immutable;\n+    let lo = p.span.lo;\n     expect_word(p, \"let\");\n     if eat_word(p, \"mut\") || eat_word(p, \"mutable\") {\n             is_mutbl = ast::class_mutable;\n@@ -1602,7 +1603,8 @@ fn parse_instance_var(p:parser) -> ast::class_member {\n     let name = parse_ident(p);\n     expect(p, token::COLON);\n     let ty = parse_ty(p, false);\n-    ret ast::instance_var(name, ty, is_mutbl, p.get_id());\n+    ret (ast::instance_var(name, ty, is_mutbl, p.get_id()),\n+         ast_util::mk_sp(lo, p.last_span.hi));\n }\n \n fn parse_stmt(p: parser, first_item_attrs: [ast::attribute]) -> @ast::stmt {\n@@ -1976,27 +1978,33 @@ fn parse_item_class(p: parser, attrs: [ast::attribute]) -> @ast::item {\n     expect(p, token::LBRACE);\n     let items: [@ast::class_item] = [];\n     let ctor_id = p.get_id();\n-    let the_ctor : option<(ast::fn_decl, ast::blk)> = none;\n+    let the_ctor : option<(ast::fn_decl, ast::blk, codemap::span)> = none;\n     while p.token != token::RBRACE {\n         alt parse_class_item(p, class_path) {\n-            ctor_decl(a_fn_decl, blk) {\n-                the_ctor = some((a_fn_decl, blk));\n+           ctor_decl(a_fn_decl, blk, s) {\n+               the_ctor = some((a_fn_decl, blk, s));\n             }\n-            plain_decl(a_decl) {\n+           plain_decl(a_decl, s) {\n                 items += [@{node: {privacy: ast::pub, decl: a_decl},\n-                            span: p.last_span}];\n+                            span: s}];\n             }\n             priv_decls(some_decls) {\n-                items += vec::map(some_decls, {|d|\n+                items += vec::map(some_decls, {|p|\n+                            let (d, s) = p;\n                             @{node: {privacy: ast::priv, decl: d},\n-                                span: p.last_span}});\n+                                span: s}});\n             }\n        }\n     }\n     p.bump();\n     alt the_ctor {\n-       some((ct_d, ct_b)) { ret mk_item(p, lo, p.last_span.hi, class_name,\n-         ast::item_class(ty_params, items, ctor_id, ct_d, ct_b), attrs); }\n+      some((ct_d, ct_b, ct_s)) { ret mk_item(p, lo, p.last_span.hi,\n+                                             class_name,\n+         ast::item_class(ty_params, items,\n+                         {node: {id: ctor_id,\n+                                 dec: ct_d,\n+                                 body: ct_b},\n+                          span: ct_s}), attrs); }\n        /*\n          Is it strange for the parser to check this?\n        */\n@@ -2007,24 +2015,25 @@ fn parse_item_class(p: parser, attrs: [ast::attribute]) -> @ast::item {\n // lets us identify the constructor declaration at\n // parse time\n // we don't really want just the fn_decl...\n-enum class_contents { ctor_decl(ast::fn_decl, ast::blk),\n+enum class_contents { ctor_decl(ast::fn_decl, ast::blk, codemap::span),\n                       // assumed to be public\n-                      plain_decl(ast::class_member),\n+                      plain_decl(ast::class_member, codemap::span),\n                       // contents of a priv section --\n                       // parse_class_item ensures that\n                       // none of these are a ctor decl\n-                      priv_decls([ast::class_member])}\n+                      priv_decls([(ast::class_member, codemap::span)])}\n \n     fn parse_class_item(p:parser, class_name:@ast::path) -> class_contents {\n     if eat_word(p, \"new\") {\n+        let lo = p.last_span.lo;\n         // Can ctors have attrs?\n             // result type is always the type of the class\n         let decl_ = parse_fn_decl(p, ast::impure_fn);\n         let decl = {output: @{node: ast::ty_path(class_name, p.get_id()),\n                                   span: decl_.output.span}\n                     with decl_};\n         let body = parse_block(p);\n-        ret ctor_decl(decl, body);\n+        ret ctor_decl(decl, body, ast_util::mk_sp(lo, p.last_span.hi));\n     }\n     // FIXME: refactor\n     else if eat_word(p, \"priv\") {\n@@ -2033,7 +2042,7 @@ enum class_contents { ctor_decl(ast::fn_decl, ast::blk),\n             while p.token != token::RBRACE {\n                alt parse_item(p, []) {\n                  some(i) {\n-                     results += [ast::class_method(i)];\n+                     results += [(ast::class_method(i), i.span)];\n                  }\n                  _ {\n                      let a_var = parse_instance_var(p);\n@@ -2049,12 +2058,12 @@ enum class_contents { ctor_decl(ast::fn_decl, ast::blk),\n         // Probably need to parse attrs\n         alt parse_item(p, []) {\n          some(i) {\n-             ret plain_decl(ast::class_method(i));\n+             ret plain_decl(ast::class_method(i), i.span);\n          }\n          _ {\n-             let a_var = parse_instance_var(p);\n+             let (a_var, a_span) = parse_instance_var(p);\n              expect(p, token::SEMI);\n-             ret plain_decl(a_var);\n+             ret plain_decl(a_var, a_span);\n          }\n         }\n     }"}, {"sha": "d74d5d92c5fdfe69c0e296954d19f52d35b0a90e", "filename": "src/rustc/syntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fprint%2Fpprust.rs?ref=e2fa6f03f5b3195b2f81e259a6b946567440b576", "patch": "@@ -471,22 +471,24 @@ fn print_item(s: ps, &&item: @ast::item) {\n             bclose(s, item.span);\n         }\n       }\n-      ast::item_class(tps,items,_,ctor_decl,ctor_body) {\n+      ast::item_class(tps,items,ctor) {\n           head(s, \"class\");\n           word_nbsp(s, item.ident);\n           print_type_params(s, tps);\n           bopen(s);\n           hardbreak_if_not_bol(s);\n+          maybe_print_comment(s, ctor.span.lo);\n           head(s, \"new\");\n-          print_fn_args_and_ret(s, ctor_decl);\n+          print_fn_args_and_ret(s, ctor.node.dec);\n           space(s.s);\n-          print_block(s, ctor_body);\n+          print_block(s, ctor.node.body);\n           for ci in items {\n                   /*\n                      FIXME: collect all private items and print them\n                      in a single \"priv\" section\n                    */\n              hardbreak_if_not_bol(s);\n+             maybe_print_comment(s, ci.span.lo);\n              alt ci.node.privacy {\n                 ast::priv {\n                     head(s, \"priv\");\n@@ -516,6 +518,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n                  _ {}\n              }\n           }\n+          bclose(s, item.span);\n        }\n       ast::item_impl(tps, ifce, ty, methods) {\n         head(s, \"impl\");"}, {"sha": "dd1a53942fa3ad55bfbf96c77f6a2f74deffb828", "filename": "src/rustc/syntax/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Frustc%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fvisit.rs?ref=e2fa6f03f5b3195b2f81e259a6b946567440b576", "patch": "@@ -133,13 +133,13 @@ fn visit_item<E>(i: @item, e: E, v: vt<E>) {\n             visit_method_helper(m, e, v)\n         }\n       }\n-      item_class(tps, members, _, ctor_decl, ctor_blk) {\n+      item_class(tps, members, ctor) {\n           v.visit_ty_params(tps, e, v);\n           for m in members {\n              v.visit_class_item(m.span, m.node.privacy, m.node.decl, e, v);\n           }\n-          visit_fn_decl(ctor_decl, e, v);\n-          v.visit_block(ctor_blk, e, v);\n+          visit_fn_decl(ctor.node.dec, e, v);\n+          v.visit_block(ctor.node.body, e, v);\n       }\n       item_iface(tps, methods) {\n         v.visit_ty_params(tps, e, v);"}, {"sha": "3b4df149fa5839fcb9e4f202e8a1d5bb9ad9eae1", "filename": "src/test/run-pass/classes-simple.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa6f03f5b3195b2f81e259a6b946567440b576/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple.rs?ref=e2fa6f03f5b3195b2f81e259a6b946567440b576", "patch": "@@ -1,4 +1,3 @@\n-// xfail-test\n class cat {\n   priv {\n     let mutable meows : uint;\n@@ -12,6 +11,6 @@ class cat {\n fn main() {\n   let nyan : cat = cat(52u, 99);\n   let kitty = cat(1000u, 2);\n-  log(debug, nyan.how_hungry);\n-  log(debug, kitty.how_hungry);\n-}\n\\ No newline at end of file\n+  assert(nyan.how_hungry == 99);\n+  assert(kitty.how_hungry == 2);\n+}"}]}