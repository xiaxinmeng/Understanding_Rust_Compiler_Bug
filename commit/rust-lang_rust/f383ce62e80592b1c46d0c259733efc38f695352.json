{"sha": "f383ce62e80592b1c46d0c259733efc38f695352", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzODNjZTYyZTgwNTkyYjFjNDZkMGMyNTk3MzNlZmMzOGY2OTUzNTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-11-05T23:49:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-11-06T01:35:40Z"}, "message": "rustc: Add some more checks to the stability lint\n\nThis catches uses of unstable traits in\n\n```\ntrait Foo: UnstableTrait { }\n```\n\nand\n\n```\nimpl UnstableTrait for Foo { }\n```", "tree": {"sha": "4dde39a58fefd8a0fe88e774eddc4b824fb1eddc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dde39a58fefd8a0fe88e774eddc4b824fb1eddc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f383ce62e80592b1c46d0c259733efc38f695352", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f383ce62e80592b1c46d0c259733efc38f695352", "html_url": "https://github.com/rust-lang/rust/commit/f383ce62e80592b1c46d0c259733efc38f695352", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f383ce62e80592b1c46d0c259733efc38f695352/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68ac44cb97d9f7fd5e552aabb516f61cbb5b6760", "url": "https://api.github.com/repos/rust-lang/rust/commits/68ac44cb97d9f7fd5e552aabb516f61cbb5b6760", "html_url": "https://github.com/rust-lang/rust/commit/68ac44cb97d9f7fd5e552aabb516f61cbb5b6760"}], "stats": {"total": 99, "additions": 72, "deletions": 27}, "files": [{"sha": "ec522d7078498dc4b9847b60ef2cc662169ad671", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 54, "deletions": 27, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/f383ce62e80592b1c46d0c259733efc38f695352/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f383ce62e80592b1c46d0c259733efc38f695352/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=f383ce62e80592b1c46d0c259733efc38f695352", "patch": "@@ -1581,34 +1581,12 @@ impl Stability {\n \n         cx.span_lint(lint, span, msg.as_slice());\n     }\n-}\n-\n-impl LintPass for Stability {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(DEPRECATED, EXPERIMENTAL, UNSTABLE)\n-    }\n-\n-    fn check_view_item(&mut self, cx: &Context, item: &ast::ViewItem) {\n-        // compiler-generated `extern crate` statements have a dummy span.\n-        if item.span == DUMMY_SP { return }\n-\n-        let id = match item.node {\n-            ast::ViewItemExternCrate(_, _, id) => id,\n-            ast::ViewItemUse(..) => return,\n-        };\n-        let cnum = match cx.tcx.sess.cstore.find_extern_mod_stmt_cnum(id) {\n-            Some(cnum) => cnum,\n-            None => return,\n-        };\n-        let id = ast::DefId { krate: cnum, node: ast::CRATE_NODE_ID };\n-        self.lint(cx, id, item.span);\n-    }\n \n-    fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {\n+    fn is_internal(&self, cx: &Context, span: Span) -> bool {\n         // first, check if the given expression was generated by a macro or not\n         // we need to go back the expn_info tree to check only the arguments\n         // of the initial macro call, not the nested ones.\n-        let mut expnid = e.span.expn_id;\n+        let mut expnid = span.expn_id;\n         let mut is_internal = false;\n         while cx.tcx.sess.codemap().with_expn_info(expnid, |expninfo| {\n             match expninfo {\n@@ -1623,15 +1601,41 @@ impl LintPass for Stability {\n                         true // continue looping\n                     } else {\n                         // was this expression from the current macro arguments ?\n-                        is_internal = !( e.span.lo > info.call_site.lo &&\n-                                         e.span.hi < info.call_site.hi );\n+                        is_internal = !( span.lo > info.call_site.lo &&\n+                                         span.hi < info.call_site.hi );\n                         true // continue looping\n                     }\n                 },\n                 _ => false // stop looping\n             }\n         }) { /* empty while loop body */ }\n-        if is_internal { return; }\n+        return is_internal;\n+    }\n+}\n+\n+impl LintPass for Stability {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DEPRECATED, EXPERIMENTAL, UNSTABLE)\n+    }\n+\n+    fn check_view_item(&mut self, cx: &Context, item: &ast::ViewItem) {\n+        // compiler-generated `extern crate` statements have a dummy span.\n+        if item.span == DUMMY_SP { return }\n+\n+        let id = match item.node {\n+            ast::ViewItemExternCrate(_, _, id) => id,\n+            ast::ViewItemUse(..) => return,\n+        };\n+        let cnum = match cx.tcx.sess.cstore.find_extern_mod_stmt_cnum(id) {\n+            Some(cnum) => cnum,\n+            None => return,\n+        };\n+        let id = ast::DefId { krate: cnum, node: ast::CRATE_NODE_ID };\n+        self.lint(cx, id, item.span);\n+    }\n+\n+    fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {\n+        if self.is_internal(cx, e.span) { return; }\n \n         let mut span = e.span;\n \n@@ -1677,6 +1681,29 @@ impl LintPass for Stability {\n         };\n         self.lint(cx, id, span);\n     }\n+\n+    fn check_item(&mut self, cx: &Context, item: &ast::Item) {\n+        if self.is_internal(cx, item.span) { return }\n+\n+        match item.node {\n+            ast::ItemTrait(_, _, ref supertraits, _) => {\n+                for t in supertraits.iter() {\n+                    match *t {\n+                        ast::TraitTyParamBound(ref t) => {\n+                            let id = ty::trait_ref_to_def_id(cx.tcx, t);\n+                            self.lint(cx, id, t.path.span);\n+                        }\n+                        _ => (/* pass */)\n+                    }\n+                }\n+            }\n+            ast::ItemImpl(_, Some(ref t), _, _) => {\n+                let id = ty::trait_ref_to_def_id(cx.tcx, t);\n+                self.lint(cx, id, t.path.span);\n+            }\n+            _ => (/* pass */)\n+        }\n+    }\n }\n \n declare_lint!(pub UNUSED_IMPORTS, Warn,"}, {"sha": "0be2f31e2827fff2e3b777c80977475a9a139851", "filename": "src/test/auxiliary/lint_stability.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f383ce62e80592b1c46d0c259733efc38f695352/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f383ce62e80592b1c46d0c259733efc38f695352/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_stability.rs?ref=f383ce62e80592b1c46d0c259733efc38f695352", "patch": "@@ -118,6 +118,9 @@ pub trait Trait {\n \n impl Trait for MethodTester {}\n \n+#[experimental]\n+pub trait ExperimentalTrait {}\n+\n #[deprecated]\n pub struct DeprecatedStruct { pub i: int }\n #[experimental]"}, {"sha": "2074d007502304706a2e1ecd0cb064afbdd3e2e0", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f383ce62e80592b1c46d0c259733efc38f695352/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f383ce62e80592b1c46d0c259733efc38f695352/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=f383ce62e80592b1c46d0c259733efc38f695352", "patch": "@@ -141,6 +141,12 @@ mod cross_crate {\n         foo.trait_unmarked(); //~ ERROR use of unmarked item\n         foo.trait_stable();\n     }\n+\n+    struct S;\n+\n+    impl ExperimentalTrait for S { } //~ ERROR use of experimental item\n+\n+    trait LocalTrait : ExperimentalTrait { } //~ ERROR use of experimental item\n }\n \n mod inheritance {\n@@ -444,6 +450,15 @@ mod this_crate {\n         foo.trait_unmarked();\n         foo.trait_stable();\n     }\n+\n+    #[deprecated]\n+    pub trait DeprecatedTrait {}\n+\n+    struct S;\n+\n+    impl DeprecatedTrait for S { } //~ ERROR use of deprecated item\n+\n+    trait LocalTrait : DeprecatedTrait { } //~ ERROR use of deprecated item\n }\n \n fn main() {}"}]}