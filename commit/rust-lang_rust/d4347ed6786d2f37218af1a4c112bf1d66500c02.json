{"sha": "d4347ed6786d2f37218af1a4c112bf1d66500c02", "node_id": "C_kwDOAAsO6NoAKGQ0MzQ3ZWQ2Nzg2ZDJmMzcyMThhZjFhNGMxMTJiZjFkNjY1MDBjMDI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-19T06:04:35Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-19T06:53:23Z"}, "message": "Move condition out of `maybe_recover_colon_colon_in_pat_typo`.", "tree": {"sha": "6d8f5666c3884c4663c281153bb851eee79f9800", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d8f5666c3884c4663c281153bb851eee79f9800"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4347ed6786d2f37218af1a4c112bf1d66500c02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4347ed6786d2f37218af1a4c112bf1d66500c02", "html_url": "https://github.com/rust-lang/rust/commit/d4347ed6786d2f37218af1a4c112bf1d66500c02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4347ed6786d2f37218af1a4c112bf1d66500c02/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a37e0c2ff8b8fb0346e519418e1e7cb2a33bc45", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a37e0c2ff8b8fb0346e519418e1e7cb2a33bc45", "html_url": "https://github.com/rust-lang/rust/commit/7a37e0c2ff8b8fb0346e519418e1e7cb2a33bc45"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "dc02a22b76982abf0343fbcf8eae441b7e16cd8a", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d4347ed6786d2f37218af1a4c112bf1d66500c02/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4347ed6786d2f37218af1a4c112bf1d66500c02/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=d4347ed6786d2f37218af1a4c112bf1d66500c02", "patch": "@@ -1,7 +1,7 @@\n use super::pat::Expected;\n use super::{\n-    BlockMode, CommaRecoveryMode, Parser, PathStyle, RecoverColon, RecoverComma, Restrictions,\n-    SemiColonMode, SeqSep, TokenExpectType, TokenType,\n+    BlockMode, CommaRecoveryMode, Parser, PathStyle, RecoverComma, Restrictions, SemiColonMode,\n+    SeqSep, TokenExpectType, TokenType,\n };\n \n use crate::lexer::UnmatchedBrace;\n@@ -2444,10 +2444,9 @@ impl<'a> Parser<'a> {\n     crate fn maybe_recover_colon_colon_in_pat_typo(\n         &mut self,\n         mut first_pat: P<Pat>,\n-        ra: RecoverColon,\n         expected: Expected,\n     ) -> P<Pat> {\n-        if RecoverColon::Yes != ra || token::Colon != self.token.kind {\n+        if token::Colon != self.token.kind {\n             return first_pat;\n         }\n         if !matches!(first_pat.kind, PatKind::Ident(_, _, None) | PatKind::Path(..))"}, {"sha": "aec3f269956dd6cc068f32189501541868998033", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4347ed6786d2f37218af1a4c112bf1d66500c02/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4347ed6786d2f37218af1a4c112bf1d66500c02/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=d4347ed6786d2f37218af1a4c112bf1d66500c02", "patch": "@@ -100,7 +100,7 @@ impl<'a> Parser<'a> {\n         };\n \n         // Parse the first pattern (`p_0`).\n-        let first_pat = self.parse_pat_no_top_alt(expected)?;\n+        let mut first_pat = self.parse_pat_no_top_alt(expected)?;\n         self.maybe_recover_unexpected_comma(first_pat.span, rc, rt)?;\n \n         // If the next token is not a `|`,\n@@ -111,7 +111,9 @@ impl<'a> Parser<'a> {\n             // This complicated procedure is done purely for diagnostics UX.\n \n             // Check if the user wrote `foo:bar` instead of `foo::bar`.\n-            let first_pat = self.maybe_recover_colon_colon_in_pat_typo(first_pat, ra, expected);\n+            if ra == RecoverColon::Yes {\n+                first_pat = self.maybe_recover_colon_colon_in_pat_typo(first_pat, expected);\n+            }\n \n             if let Some(leading_vert_span) = leading_vert_span {\n                 // If there was a leading vert, treat this as an or-pattern. This improves"}]}