{"sha": "41e80b85cf05e6373b589b876d3ee65823196406", "node_id": "C_kwDOAAsO6NoAKDQxZTgwYjg1Y2YwNWU2MzczYjU4OWI4NzZkM2VlNjU4MjMxOTY0MDY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-12T09:41:35Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-09T22:05:35Z"}, "message": "Directly use AttributeMap inside OwnerInfo.", "tree": {"sha": "dec4743b93f4653a9e25483ab5c80b3e197eabda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dec4743b93f4653a9e25483ab5c80b3e197eabda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41e80b85cf05e6373b589b876d3ee65823196406", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41e80b85cf05e6373b589b876d3ee65823196406", "html_url": "https://github.com/rust-lang/rust/commit/41e80b85cf05e6373b589b876d3ee65823196406", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41e80b85cf05e6373b589b876d3ee65823196406/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c7f85f17c0ddde890ced0ba4445e122c1ffc093", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7f85f17c0ddde890ced0ba4445e122c1ffc093", "html_url": "https://github.com/rust-lang/rust/commit/1c7f85f17c0ddde890ced0ba4445e122c1ffc093"}], "stats": {"total": 70, "additions": 42, "deletions": 28}, "files": [{"sha": "9ba3d0446dd1cabb9543aa63021e37db6654f8ad", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/41e80b85cf05e6373b589b876d3ee65823196406/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41e80b85cf05e6373b589b876d3ee65823196406/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=41e80b85cf05e6373b589b876d3ee65823196406", "patch": "@@ -476,6 +476,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let (nodes, parenting) =\n             index::index_hir(self.sess, self.resolver.definitions(), node, &bodies);\n         let nodes = hir::OwnerNodes { hash, node_hash, nodes, bodies };\n+        let attrs = {\n+            let mut hcx = self.resolver.create_stable_hashing_context();\n+            let mut stable_hasher = StableHasher::new();\n+            attrs.hash_stable(&mut hcx, &mut stable_hasher);\n+            let hash = stable_hasher.finish();\n+            hir::AttributeMap { map: attrs, hash }\n+        };\n \n         hir::OwnerInfo { nodes, parenting, attrs, trait_map }\n     }"}, {"sha": "bb5c0bc1889bfa5c6c2ea2540936acb2db7563b8", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/41e80b85cf05e6373b589b876d3ee65823196406/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41e80b85cf05e6373b589b876d3ee65823196406/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=41e80b85cf05e6373b589b876d3ee65823196406", "patch": "@@ -672,6 +672,23 @@ pub struct ParentedNode<'tcx> {\n     pub node: Node<'tcx>,\n }\n \n+/// Attributes owner by a HIR owner.\n+#[derive(Debug)]\n+pub struct AttributeMap<'tcx> {\n+    pub map: BTreeMap<ItemLocalId, &'tcx [Attribute]>,\n+    pub hash: Fingerprint,\n+}\n+\n+impl<'tcx> AttributeMap<'tcx> {\n+    pub const EMPTY: &'static AttributeMap<'static> =\n+        &AttributeMap { map: BTreeMap::new(), hash: Fingerprint::ZERO };\n+\n+    #[inline]\n+    pub fn get(&self, id: ItemLocalId) -> &'tcx [Attribute] {\n+        self.map.get(&id).copied().unwrap_or(&[])\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct OwnerNodes<'tcx> {\n     /// Pre-computed hash of the full HIR.\n@@ -691,8 +708,8 @@ pub struct OwnerInfo<'hir> {\n     pub nodes: OwnerNodes<'hir>,\n     /// Map from each nested owner to its parent's local id.\n     pub parenting: FxHashMap<LocalDefId, ItemLocalId>,\n-\n-    pub attrs: BTreeMap<ItemLocalId, &'hir [Attribute]>,\n+    /// Collected attributes of the HIR nodes.\n+    pub attrs: AttributeMap<'hir>,\n     /// Map indicating what traits are in scope for places where this\n     /// is relevant; generated by resolve.\n     pub trait_map: FxHashMap<ItemLocalId, Box<[TraitCandidate]>>,"}, {"sha": "93224d388c00fe6053353b6e7a78bccbc6eaec68", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41e80b85cf05e6373b589b876d3ee65823196406/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41e80b85cf05e6373b589b876d3ee65823196406/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=41e80b85cf05e6373b589b876d3ee65823196406", "patch": "@@ -2,6 +2,7 @@\n //!\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/hir.html\n \n+#![feature(const_btree_new)]\n #![feature(crate_visibility_modifier)]\n #![feature(in_band_lifetimes)]\n #![feature(once_cell)]"}, {"sha": "da2aeb9b311bb85ff8543e9c10f4008fa7cc332c", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/41e80b85cf05e6373b589b876d3ee65823196406/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41e80b85cf05e6373b589b876d3ee65823196406/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=41e80b85cf05e6373b589b876d3ee65823196406", "patch": "@@ -1,8 +1,8 @@\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n \n use crate::hir::{\n-    BodyId, Expr, ForeignItem, ForeignItemId, ImplItem, ImplItemId, Item, ItemId, Mod, OwnerNodes,\n-    TraitItem, TraitItemId, Ty, VisibilityKind,\n+    AttributeMap, BodyId, Expr, ForeignItem, ForeignItemId, ImplItem, ImplItemId, Item, ItemId,\n+    Mod, OwnerNodes, TraitItem, TraitItemId, Ty, VisibilityKind,\n };\n use crate::hir_id::{HirId, ItemLocalId};\n use rustc_span::def_id::DefPathHash;\n@@ -218,3 +218,12 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for OwnerNodes<'tcx> {\n         hash.hash_stable(hcx, hasher);\n     }\n }\n+\n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for AttributeMap<'tcx> {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        // We ignore the `map` since it refers to information included in `hash` which is hashed in\n+        // the collector and used for the crate hash.\n+        let AttributeMap { hash, map: _ } = *self;\n+        hash.hash_stable(hcx, hasher);\n+    }\n+}"}, {"sha": "af4c0e4843dca377bfa21718629308bba8203405", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41e80b85cf05e6373b589b876d3ee65823196406/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41e80b85cf05e6373b589b876d3ee65823196406/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=41e80b85cf05e6373b589b876d3ee65823196406", "patch": "@@ -580,7 +580,7 @@ impl<'hir> Map<'hir> {\n         let krate = self.krate();\n         for (owner, info) in krate.owners.iter_enumerated() {\n             if let Some(info) = info {\n-                for (&local_id, attrs) in info.attrs.iter() {\n+                for (&local_id, attrs) in info.attrs.map.iter() {\n                     let id = HirId { owner, local_id };\n                     for a in *attrs {\n                         visitor.visit_attribute(id, a)"}, {"sha": "f941981be79b7c78273750a9ab1e90275a6d7c41", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/41e80b85cf05e6373b589b876d3ee65823196406/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41e80b85cf05e6373b589b876d3ee65823196406/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=41e80b85cf05e6373b589b876d3ee65823196406", "patch": "@@ -8,14 +8,12 @@ pub mod place;\n \n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n-use rustc_ast::Attribute;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::*;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_span::DUMMY_SP;\n-use std::collections::BTreeMap;\n \n /// Top-level HIR node for current owner. This only contains the node for which\n /// `HirId::local_id == 0`, and excludes bodies.\n@@ -36,24 +34,6 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Owner<'tcx> {\n     }\n }\n \n-/// Attributes owner by a HIR owner.\n-#[derive(Copy, Clone, Debug, HashStable)]\n-pub struct AttributeMap<'tcx> {\n-    map: &'tcx BTreeMap<ItemLocalId, &'tcx [Attribute]>,\n-}\n-\n-impl<'tcx> AttributeMap<'tcx> {\n-    fn new(owner_info: &'tcx Option<OwnerInfo<'tcx>>) -> AttributeMap<'tcx> {\n-        const FALLBACK: &'static BTreeMap<ItemLocalId, &'static [Attribute]> = &BTreeMap::new();\n-        let map = owner_info.as_ref().map_or(FALLBACK, |info| &info.attrs);\n-        AttributeMap { map }\n-    }\n-\n-    fn get(&self, id: ItemLocalId) -> &'tcx [Attribute] {\n-        self.map.get(&id).copied().unwrap_or(&[])\n-    }\n-}\n-\n /// Gather the LocalDefId for each item-like within a module, including items contained within\n /// bodies.  The Ids are in visitor order.  This is used to partition a pass between modules.\n #[derive(Debug, HashStable)]\n@@ -105,7 +85,8 @@ pub fn provide(providers: &mut Providers) {\n         });\n         parent\n     };\n-    providers.hir_attrs = |tcx, id| AttributeMap::new(&tcx.hir_crate(()).owners[id]);\n+    providers.hir_attrs =\n+        |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map_or(AttributeMap::EMPTY, |o| &o.attrs);\n     providers.source_span = |tcx, def_id| tcx.resolutions(()).definitions.def_span(def_id);\n     providers.def_span = |tcx, def_id| tcx.hir().span_if_local(def_id).unwrap_or(DUMMY_SP);\n     providers.fn_arg_names = |tcx, id| {"}, {"sha": "e41f5add457fb2782fa9536781d1c2b7e853fb69", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41e80b85cf05e6373b589b876d3ee65823196406/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41e80b85cf05e6373b589b876d3ee65823196406/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=41e80b85cf05e6373b589b876d3ee65823196406", "patch": "@@ -30,7 +30,6 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(core_intrinsics)]\n-#![feature(const_btree_new)]\n #![feature(discriminant_kind)]\n #![feature(exhaustive_patterns)]\n #![feature(if_let_guard)]"}, {"sha": "eb4cc7c750c111f0d68359c67cc935b5c0d5d31a", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41e80b85cf05e6373b589b876d3ee65823196406/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41e80b85cf05e6373b589b876d3ee65823196406/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=41e80b85cf05e6373b589b876d3ee65823196406", "patch": "@@ -77,7 +77,7 @@ rustc_queries! {\n     ///\n     /// This can be conveniently accessed by methods on `tcx.hir()`.\n     /// Avoid calling this query directly.\n-    query hir_attrs(key: LocalDefId) -> rustc_middle::hir::AttributeMap<'tcx> {\n+    query hir_attrs(key: LocalDefId) -> &'tcx hir::AttributeMap<'tcx> {\n         desc { |tcx| \"HIR owner attributes in `{}`\", tcx.def_path_str(key.to_def_id()) }\n     }\n "}]}