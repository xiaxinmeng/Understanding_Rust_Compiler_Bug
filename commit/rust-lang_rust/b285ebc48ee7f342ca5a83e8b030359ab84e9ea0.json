{"sha": "b285ebc48ee7f342ca5a83e8b030359ab84e9ea0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyODVlYmM0OGVlN2YzNDJjYTVhODNlOGIwMzAzNTlhYjg0ZTllYTA=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2016-01-21T21:14:09Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2016-01-26T09:31:54Z"}, "message": "Update expression span when transcribing macro args\n\ncloses #29084\ncloses #28308\ncloses #25385\ncloses #28288\ncloses #31011\ncloses #26480\ncloses #26093\ncloses #26094\ncloses #25386\ncloses #26237\ncloses #25793", "tree": {"sha": "ec9961b9ac6b29208b919c83a3f6e312c5d7d141", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec9961b9ac6b29208b919c83a3f6e312c5d7d141"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0", "html_url": "https://github.com/rust-lang/rust/commit/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faf6d1e87391b25196b35909c3c95e5d873cacf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/faf6d1e87391b25196b35909c3c95e5d873cacf0", "html_url": "https://github.com/rust-lang/rust/commit/faf6d1e87391b25196b35909c3c95e5d873cacf0"}], "stats": {"total": 294, "additions": 292, "deletions": 2}, "files": [{"sha": "c048547f5c979973e8bf8f68dc7f9499080adede", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=b285ebc48ee7f342ca5a83e8b030359ab84e9ea0", "patch": "@@ -10,12 +10,13 @@\n use self::LockstepIterSize::*;\n \n use ast;\n+use ptr;\n use ast::{TokenTree, Ident, Name};\n use codemap::{Span, DUMMY_SP};\n use errors::Handler;\n use ext::tt::macro_parser::{NamedMatch, MatchedSeq, MatchedNonterminal};\n use parse::token::{DocComment, MatchNt, SubstNt};\n-use parse::token::{Token, NtIdent, SpecialMacroVar};\n+use parse::token::{Token, NtIdent, NtExpr, SpecialMacroVar};\n use parse::token;\n use parse::lexer::TokenAndSpan;\n \n@@ -173,6 +174,11 @@ fn lockstep_iter_size(t: &TokenTree, r: &TtReader) -> LockstepIterSize {\n     }\n }\n \n+fn update_span(base: Span, expr: &mut ast::Expr) {\n+    expr.span.lo = base.lo;\n+    expr.span.hi = base.hi;\n+}\n+\n /// Return the next token from the TtReader.\n /// EFFECT: advances the reader's token field\n pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n@@ -279,6 +285,7 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n             }\n             // FIXME #2887: think about span stuff here\n             TokenTree::Token(sp, SubstNt(ident, namep)) => {\n+                //println!(\"SubstNt {:?} {:?}\", ident, sp);\n                 r.stack.last_mut().unwrap().idx += 1;\n                 match lookup_cur_matched(r, ident) {\n                     None => {\n@@ -293,10 +300,18 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n                             // (a) idents can be in lots of places, so it'd be a pain\n                             // (b) we actually can, since it's a token.\n                             MatchedNonterminal(NtIdent(ref sn, b)) => {\n-                                r.cur_span = sn.span;\n+                                r.cur_span = sp;\n                                 r.cur_tok = token::Ident(sn.node, b);\n                                 return ret_val;\n                             }\n+                            MatchedNonterminal(NtExpr(ref expr)) => {\n+                                let mut expr = (**expr).clone();\n+                                update_span(sp, &mut expr);\n+                                // FIXME(pcwalton): Bad copy.\n+                                r.cur_span = sp;\n+                                r.cur_tok = token::Interpolated(NtExpr(ptr::P(expr)));\n+                                return ret_val;\n+                            }\n                             MatchedNonterminal(ref other_whole_nt) => {\n                                 // FIXME(pcwalton): Bad copy.\n                                 r.cur_span = sp;"}, {"sha": "5025b5ef13e2993958e7b0c2db2c9af7b363adb6", "filename": "src/test/compile-fail/issue-25385.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Ftest%2Fcompile-fail%2Fissue-25385.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Ftest%2Fcompile-fail%2Fissue-25385.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25385.rs?ref=b285ebc48ee7f342ca5a83e8b030359ab84e9ea0", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+macro_rules! foo {\n+    ($e:expr) => { $e.foo() }\n+    //~^ ERROR no method named `foo` found for type `i32` in the current scope\n+}\n+\n+fn main() {\n+    let a = 1i32;\n+    foo!(a);\n+\n+    foo!(1.i32.foo());\n+    //~^ ERROR attempted access of field `i32` on type `_`, but no field with that name was found\n+}"}, {"sha": "b2775db5e75a7cbfc947f263d48714e9719cf679", "filename": "src/test/compile-fail/issue-25386.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Ftest%2Fcompile-fail%2Fissue-25386.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Ftest%2Fcompile-fail%2Fissue-25386.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25386.rs?ref=b285ebc48ee7f342ca5a83e8b030359ab84e9ea0", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod stuff {\n+    pub struct Item {\n+        c_object: Box<CObj>,\n+    }\n+    pub struct CObj {\n+        name: Option<String>,\n+    }\n+    impl Item {\n+        pub fn new() -> Item {\n+            Item {\n+                c_object: Box::new(CObj { name: None }),\n+            }\n+        }\n+    }\n+}\n+\n+macro_rules! check_ptr_exist {\n+    ($var:expr, $member:ident) => (\n+        (*$var.c_object).$member.is_some()\n+        //~^ ERROR field `name` of struct `stuff::CObj` is private\n+        //~^^ ERROR field `c_object` of struct `stuff::Item` is private\n+    );\n+}\n+\n+fn main() {\n+    let item = stuff::Item::new();\n+    println!(\"{}\", check_ptr_exist!(item, name));\n+}"}, {"sha": "e4199fcc12688e3210cbf965f22a0df643325e59", "filename": "src/test/compile-fail/issue-25793.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Ftest%2Fcompile-fail%2Fissue-25793.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Ftest%2Fcompile-fail%2Fissue-25793.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25793.rs?ref=b285ebc48ee7f342ca5a83e8b030359ab84e9ea0", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! width(\n+    ($this:expr) => {\n+        $this.width.unwrap()\n+        //~^ ERROR cannot use `self.width` because it was mutably borrowed\n+    }\n+);\n+\n+struct HasInfo {\n+    width: Option<usize>\n+}\n+\n+impl HasInfo {\n+    fn get_size(&mut self, n: usize) -> usize {\n+        n\n+    }\n+\n+    fn get_other(&mut self) -> usize {\n+        self.get_size(width!(self))\n+    }\n+}\n+\n+fn main() {\n+    println!(\"hello?\");\n+}"}, {"sha": "3489a2ca9be1517f920ee2a2c008512acc4d87d5", "filename": "src/test/compile-fail/issue-26093.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Ftest%2Fcompile-fail%2Fissue-26093.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Ftest%2Fcompile-fail%2Fissue-26093.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26093.rs?ref=b285ebc48ee7f342ca5a83e8b030359ab84e9ea0", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! not_an_lvalue {\n+    ($thing:expr) => {\n+        $thing = 42;\n+        //~^ ERROR invalid left-hand side expression\n+    }\n+}\n+\n+fn main() {\n+    not_an_lvalue!(99);\n+}"}, {"sha": "8b4ac7ddab9d3abfc86ebb57bbec56af2d930ba0", "filename": "src/test/compile-fail/issue-26094.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Ftest%2Fcompile-fail%2Fissue-26094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Ftest%2Fcompile-fail%2Fissue-26094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26094.rs?ref=b285ebc48ee7f342ca5a83e8b030359ab84e9ea0", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! some_macro {\n+    ($other: expr) => ({\n+        $other(None)\n+        //~^ this function takes 0 parameters but 1 parameter was supplied\n+    })\n+}\n+\n+fn some_function() {\n+}\n+\n+fn main() {\n+    some_macro!(some_function);\n+}"}, {"sha": "1cfece0d0b7a2b940b1cddd97ae04ce95d150efa", "filename": "src/test/compile-fail/issue-26237.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Ftest%2Fcompile-fail%2Fissue-26237.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Ftest%2Fcompile-fail%2Fissue-26237.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26237.rs?ref=b285ebc48ee7f342ca5a83e8b030359ab84e9ea0", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! macro_panic {\n+    ($not_a_function:expr, $some_argument:ident) => {\n+        $not_a_function($some_argument)\n+        //~^ ERROR expected function, found `_`\n+    }\n+}\n+\n+fn main() {\n+    let mut value_a = 0;\n+    let mut value_b = 0;\n+    macro_panic!(value_a, value_b);\n+}"}, {"sha": "e41db5645aeb30d778ce74c5d03e30a9720c804d", "filename": "src/test/compile-fail/issue-26480.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Ftest%2Fcompile-fail%2Fissue-26480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Ftest%2Fcompile-fail%2Fissue-26480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26480.rs?ref=b285ebc48ee7f342ca5a83e8b030359ab84e9ea0", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern {\n+    fn write(fildes: i32, buf: *const i8, nbyte: u64) -> i64;\n+}\n+\n+#[inline(always)]\n+fn size_of<T>(_: T) -> usize {\n+    ::std::mem::size_of::<T>()\n+}\n+\n+macro_rules! write {\n+    ($arr:expr) => {{\n+        #[allow(non_upper_case_globals)]\n+        const stdout: i32 = 1;\n+        unsafe {\n+            write(stdout, $arr.as_ptr() as *const i8,\n+                  $arr.len() * size_of($arr[0]));\n+            //~^ ERROR mismatched types: expected `u64`, found `usize`\n+        }\n+    }}\n+}\n+\n+macro_rules! cast {\n+    ($x:expr) => ($x as ())\n+    //~^ ERROR non-scalar cast: `i32` as `()`\n+}\n+\n+fn main() {\n+    let hello = ['H', 'e', 'y'];\n+    write!(hello);\n+\n+    cast!(2);\n+}"}, {"sha": "27066dc89841b67a4dbf9dfa5fdf44ecde2db9e4", "filename": "src/test/compile-fail/issue-28308.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Ftest%2Fcompile-fail%2Fissue-28308.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Ftest%2Fcompile-fail%2Fissue-28308.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28308.rs?ref=b285ebc48ee7f342ca5a83e8b030359ab84e9ea0", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    assert!(\"foo\");\n+    //~^ ERROR cannot apply unary operator `!` to type `&'static str`'`\n+}"}, {"sha": "4967cd0024c5998e2c3a7fb17294e1dadd61a230", "filename": "src/test/compile-fail/issue-29084.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Ftest%2Fcompile-fail%2Fissue-29084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Ftest%2Fcompile-fail%2Fissue-29084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-29084.rs?ref=b285ebc48ee7f342ca5a83e8b030359ab84e9ea0", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! foo {\n+    ($d:expr) => {{\n+        fn bar(d: u8) { }\n+        bar(&mut $d);\n+        //~^ ERROR mismatched types: expected `u8`, found `&mut u8`\n+    }}\n+}\n+\n+fn main() {\n+    foo!(0u8);\n+}"}, {"sha": "87c1732b897ac7caf1a5b7bb9207819bd9a82980", "filename": "src/test/compile-fail/issue-31011.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Ftest%2Fcompile-fail%2Fissue-31011.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b285ebc48ee7f342ca5a83e8b030359ab84e9ea0/src%2Ftest%2Fcompile-fail%2Fissue-31011.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31011.rs?ref=b285ebc48ee7f342ca5a83e8b030359ab84e9ea0", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! log {\n+    ( $ctx:expr, $( $args:expr),* ) => {\n+        if $ctx.trace {\n+        //~^ attempted access of field `trace` on type `&T`, but no field with that name was found\n+            println!( $( $args, )* );\n+        }\n+    }\n+}\n+\n+// Create a structure.\n+struct Foo {\n+  trace: bool,\n+}\n+\n+// Generic wrapper calls log! with a structure.\n+fn wrap<T>(context: &T) -> ()\n+{\n+    log!(context, \"entered wrapper\");\n+}\n+\n+fn main() {\n+    // Create a structure.\n+    let x = Foo { trace: true };\n+    log!(x, \"run started\");\n+    // Apply a closure which accesses internal fields.\n+    wrap(&x);\n+    log!(x, \"run finished\");\n+}"}]}