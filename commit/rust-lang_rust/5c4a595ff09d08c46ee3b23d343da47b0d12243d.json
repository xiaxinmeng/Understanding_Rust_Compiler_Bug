{"sha": "5c4a595ff09d08c46ee3b23d343da47b0d12243d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNGE1OTVmZjA5ZDA4YzQ2ZWUzYjIzZDM0M2RhNDdiMGQxMjI0M2Q=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-06T02:28:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-06T02:28:08Z"}, "message": "Rollup merge of #66027 - Mark-Simulacrum:panic-handler-query, r=alexcrichton\n\nMove has_panic_handler to query\n\nMoves us off of a global Once instead re-querying the lang item each time. The conditions on when we set it to true change a little (previously we'd make sure a few more lang items were `Some`) but I think they in practice don't matter, we won't compile later on if we don't have them.", "tree": {"sha": "653ec51e855d5ef2cdf31f41e041b785a0d9b701", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/653ec51e855d5ef2cdf31f41e041b785a0d9b701"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c4a595ff09d08c46ee3b23d343da47b0d12243d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdwi+4CRBK7hj4Ov3rIwAAdHIIADAmmr389gVeMonR1MVqzt/g\n0AG+237TxMaz4qZ4JIyiTLdbKzmB59uqy3vXadURt37YpZwa4qoThpovJQkMBNeD\noH9yq1m+EpwaTWIclX39w/n4Q1EXlcnJshvB3u5RqUbt9jz31FgYt4WYuF7Sdg9o\nPncvRj5Z8hpuMMjzg85Qq9clrKf8pc9AaUIiE2xQuPyemJFKyr8bkYWqxsQw1A5a\nZrlBgFjjwsk/NezaQnzuxa26hbJoDCig10ffTGBCy6XIjvnsRuToqfPXrLLNUeuS\nnquc1LC4hTDQ7zJGN7bhfe7f22LwfvvZq1zIsbLspfUy65DMtnSBWi9zUATgJEM=\n=EC5d\n-----END PGP SIGNATURE-----\n", "payload": "tree 653ec51e855d5ef2cdf31f41e041b785a0d9b701\nparent f746d99f683d1475e1150fc4fa5206fd4cfe7e66\nparent 692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1573007288 +0100\ncommitter GitHub <noreply@github.com> 1573007288 +0100\n\nRollup merge of #66027 - Mark-Simulacrum:panic-handler-query, r=alexcrichton\n\nMove has_panic_handler to query\n\nMoves us off of a global Once instead re-querying the lang item each time. The conditions on when we set it to true change a little (previously we'd make sure a few more lang items were `Some`) but I think they in practice don't matter, we won't compile later on if we don't have them.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c4a595ff09d08c46ee3b23d343da47b0d12243d", "html_url": "https://github.com/rust-lang/rust/commit/5c4a595ff09d08c46ee3b23d343da47b0d12243d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c4a595ff09d08c46ee3b23d343da47b0d12243d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "url": "https://api.github.com/repos/rust-lang/rust/commits/f746d99f683d1475e1150fc4fa5206fd4cfe7e66", "html_url": "https://github.com/rust-lang/rust/commit/f746d99f683d1475e1150fc4fa5206fd4cfe7e66"}, {"sha": "692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431", "url": "https://api.github.com/repos/rust-lang/rust/commits/692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431", "html_url": "https://github.com/rust-lang/rust/commit/692ae3d9fb55c1f19508e5b3c1aadfdd2cd27431"}], "stats": {"total": 17, "additions": 6, "deletions": 11}, "files": [{"sha": "403b32df20e10b1e02579b4d1b730b0a7fb7b11a", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c4a595ff09d08c46ee3b23d343da47b0d12243d/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c4a595ff09d08c46ee3b23d343da47b0d12243d/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=5c4a595ff09d08c46ee3b23d343da47b0d12243d", "patch": "@@ -148,9 +148,6 @@ pub struct Session {\n     /// Metadata about the allocators for the current crate being compiled.\n     pub has_global_allocator: Once<bool>,\n \n-    /// Metadata about the panic handlers for the current crate being compiled.\n-    pub has_panic_handler: Once<bool>,\n-\n     /// Cap lint level specified by a driver specifically.\n     pub driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n \n@@ -1211,7 +1208,6 @@ fn build_session_(\n         print_fuel,\n         jobserver: jobserver::client(),\n         has_global_allocator: Once::new(),\n-        has_panic_handler: Once::new(),\n         driver_lint_caps,\n         trait_methods_not_found: Lock::new(Default::default()),\n         confused_type_with_std_module: Lock::new(Default::default()),"}, {"sha": "0906d9ebd8e7f06f6e465abb8004767970a8ef4a", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c4a595ff09d08c46ee3b23d343da47b0d12243d/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c4a595ff09d08c46ee3b23d343da47b0d12243d/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5c4a595ff09d08c46ee3b23d343da47b0d12243d", "patch": "@@ -3045,4 +3045,9 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         assert_eq!(cnum, LOCAL_CRATE);\n         attr::contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)\n     };\n+    providers.has_panic_handler = |tcx, cnum| {\n+        assert_eq!(cnum, LOCAL_CRATE);\n+        // We want to check if the panic handler was defined in this crate\n+        tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())\n+    };\n }"}, {"sha": "de00e9920e6835977190f27771fee2069874d98b", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c4a595ff09d08c46ee3b23d343da47b0d12243d/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c4a595ff09d08c46ee3b23d343da47b0d12243d/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=5c4a595ff09d08c46ee3b23d343da47b0d12243d", "patch": "@@ -542,7 +542,6 @@ impl<'tcx> EncodeContext<'tcx> {\n         let attrs = tcx.hir().krate_attrs();\n         let has_default_lib_allocator = attr::contains_name(&attrs, sym::default_lib_allocator);\n         let has_global_allocator = *tcx.sess.has_global_allocator.get();\n-        let has_panic_handler = *tcx.sess.has_panic_handler.try_get().unwrap_or(&false);\n \n         let root = self.lazy(CrateRoot {\n             name: tcx.crate_name(LOCAL_CRATE),\n@@ -553,7 +552,7 @@ impl<'tcx> EncodeContext<'tcx> {\n             panic_strategy: tcx.sess.panic_strategy(),\n             edition: tcx.sess.edition(),\n             has_global_allocator: has_global_allocator,\n-            has_panic_handler: has_panic_handler,\n+            has_panic_handler: tcx.has_panic_handler(LOCAL_CRATE),\n             has_default_lib_allocator: has_default_lib_allocator,\n             plugin_registrar_fn: tcx.plugin_registrar_fn(LOCAL_CRATE).map(|id| id.index),\n             proc_macro_decls_static: if is_proc_macro {"}, {"sha": "ee0fe48cc8b9f9e144cda58ea06c81f5e62330d0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c4a595ff09d08c46ee3b23d343da47b0d12243d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c4a595ff09d08c46ee3b23d343da47b0d12243d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5c4a595ff09d08c46ee3b23d343da47b0d12243d", "patch": "@@ -1267,11 +1267,6 @@ fn check_fn<'a, 'tcx>(\n     if let Some(panic_impl_did) = fcx.tcx.lang_items().panic_impl() {\n         if panic_impl_did == fcx.tcx.hir().local_def_id(fn_id) {\n             if let Some(panic_info_did) = fcx.tcx.lang_items().panic_info() {\n-                // at this point we don't care if there are duplicate handlers or if the handler has\n-                // the wrong signature as this value we'll be used when writing metadata and that\n-                // only happens if compilation succeeded\n-                fcx.tcx.sess.has_panic_handler.try_set_same(true);\n-\n                 if declared_ret_ty.kind != ty::Never {\n                     fcx.tcx.sess.span_err(\n                         decl.output.span(),"}]}