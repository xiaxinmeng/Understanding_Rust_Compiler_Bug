{"sha": "80a1cd3d1e5e39db00a68ad6c1dc5686b775a4ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwYTFjZDNkMWU1ZTM5ZGIwMGE2OGFkNmMxZGM1Njg2Yjc3NWE0YWQ=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-06T22:48:23Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-06T22:48:23Z"}, "message": "Redo yesterday's buf_writer-wrapper in a less silly and convoluted way.  Add integer stringifying functions to _int module.", "tree": {"sha": "c7da38fa419c3eaa17d10750fedb7da2e40e1aa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7da38fa419c3eaa17d10750fedb7da2e40e1aa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80a1cd3d1e5e39db00a68ad6c1dc5686b775a4ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80a1cd3d1e5e39db00a68ad6c1dc5686b775a4ad", "html_url": "https://github.com/rust-lang/rust/commit/80a1cd3d1e5e39db00a68ad6c1dc5686b775a4ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80a1cd3d1e5e39db00a68ad6c1dc5686b775a4ad/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "514fb4b321d1d019a7bfcd64518d1162878cbf07", "url": "https://api.github.com/repos/rust-lang/rust/commits/514fb4b321d1d019a7bfcd64518d1162878cbf07", "html_url": "https://github.com/rust-lang/rust/commit/514fb4b321d1d019a7bfcd64518d1162878cbf07"}], "stats": {"total": 102, "additions": 59, "deletions": 43}, "files": [{"sha": "03017259d529a1c778aafe5b8321c9e1e2d52b08", "filename": "src/lib/_int.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/80a1cd3d1e5e39db00a68ad6c1dc5686b775a4ad/src%2Flib%2F_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80a1cd3d1e5e39db00a68ad6c1dc5686b775a4ad/src%2Flib%2F_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_int.rs?ref=80a1cd3d1e5e39db00a68ad6c1dc5686b775a4ad", "patch": "@@ -44,3 +44,47 @@ fn next_power_of_two(uint n) -> uint {\n   }\n   ret tmp + 1u;\n }\n+\n+fn uto_string(mutable uint n, uint radix) -> str\n+{\n+  check (0u < radix && radix <= 16u);\n+  fn digit(uint n) -> str {\n+    alt (n) {\n+      case (0u) { ret \"0\"; }\n+      case (1u) { ret \"1\"; }\n+      case (2u) { ret \"2\"; }\n+      case (3u) { ret \"3\"; }\n+      case (4u) { ret \"4\"; }\n+      case (5u) { ret \"5\"; }\n+      case (6u) { ret \"6\"; }\n+      case (7u) { ret \"7\"; }\n+      case (8u) { ret \"8\"; }\n+      case (9u) { ret \"9\"; }\n+      case (10u) { ret \"A\"; }\n+      case (11u) { ret \"B\"; }\n+      case (12u) { ret \"C\"; }\n+      case (13u) { ret \"D\"; }\n+      case (14u) { ret \"E\"; }\n+      case (15u) { ret \"F\"; }\n+    }\n+  }\n+\n+  if (n == 0u) { ret \"0\"; }\n+\n+  let str s = \"\";\n+  while (n > 0u) {\n+    s = digit(n % radix) + s;\n+    n /= radix;\n+  }\n+  ret s;\n+}\n+\n+fn to_string(mutable int n, uint radix) -> str\n+{\n+  check (0u < radix && radix <= 16u);\n+  if (n < 0) {\n+    ret \"-\" + uto_string((-n) as uint, radix);\n+  } else {\n+    ret uto_string(n as uint, radix);\n+  }\n+}"}, {"sha": "dbd60e63d6ae4b6381ba90266b7a585d602895d4", "filename": "src/lib/_io.rs", "status": "modified", "additions": 15, "deletions": 43, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/80a1cd3d1e5e39db00a68ad6c1dc5686b775a4ad/src%2Flib%2F_io.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80a1cd3d1e5e39db00a68ad6c1dc5686b775a4ad/src%2Flib%2F_io.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_io.rs?ref=80a1cd3d1e5e39db00a68ad6c1dc5686b775a4ad", "patch": "@@ -112,49 +112,21 @@ fn new_buf_writer(str path, vec[fileflag] flags) -> buf_writer {\n   ret fd_buf_writer(fd);\n }\n \n-type formatter[T] = fn(&T x) -> vec[u8];\n-\n-type writer[T] = unsafe obj { fn write(&T x); };\n-\n-fn mk_writer[T](str path,\n-                vec[fileflag] flags,\n-                &formatter[T] fmt)\n-  -> writer[T]\n-{\n-  unsafe obj w[T](buf_writer out, formatter[T] fmt) {\n-    fn write(&T x) {\n-      out.write(fmt(x));\n-    }\n-  }\n-  ret w[T](new_buf_writer(path, flags), fmt);\n-}\n-\n-/* TODO: int_writer, uint_writer, ... */\n-\n-fn str_writer(str path, vec[fileflag] flags) -> writer[str] {\n-  auto fmt = _str.bytes; // FIXME (issue #90)\n-  ret mk_writer[str](path, flags, fmt);\n-}\n-\n-fn vec_writer[T](str path,\n-                 vec[fileflag] flags,\n-                 &formatter[T] inner)\n-  -> writer[vec[T]]\n+type writer =\n+  unsafe obj {\n+    fn write_str(str s);\n+    fn write_int(int n);\n+    fn write_uint(uint n);\n+  };\n+\n+fn file_writer(str path,\n+               vec[fileflag] flags)\n+  -> writer\n {\n-  fn fmt[T](&vec[T] v, &formatter[T] inner) -> vec[u8] {\n-    let vec[u8] res = _str.bytes(\"vec(\");\n-    auto first = true;\n-    for (T x in v) {\n-      if (!first) {\n-        res += _str.bytes(\", \");\n-      } else {\n-        first = false;\n-      }\n-      res += inner(x);\n-    }\n-    res += _str.bytes(\")\\n\");\n-    ret res;\n+  unsafe obj fw(buf_writer out) {\n+    fn write_str(str s)   { out.write(_str.bytes(s)); }\n+    fn write_int(int n)   { out.write(_str.bytes(_int.to_string(n, 10u))); }\n+    fn write_uint(uint n) { out.write(_str.bytes(_int.uto_string(n, 10u))); }\n   }\n-\n-  ret mk_writer[vec[T]](path, flags, bind fmt[T](_, inner));\n+  ret fw(new_buf_writer(path, flags));\n }"}]}