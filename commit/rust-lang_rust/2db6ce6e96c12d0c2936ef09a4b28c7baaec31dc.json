{"sha": "2db6ce6e96c12d0c2936ef09a4b28c7baaec31dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYjZjZTZlOTZjMTJkMGMyOTM2ZWYwOWE0YjI4YzdiYWFlYzMxZGM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-10-31T19:44:31Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-11-12T20:38:23Z"}, "message": "Generate generics on search-index", "tree": {"sha": "dff61c100c1bae31b68f9ab0574005865363fa7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dff61c100c1bae31b68f9ab0574005865363fa7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2db6ce6e96c12d0c2936ef09a4b28c7baaec31dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2db6ce6e96c12d0c2936ef09a4b28c7baaec31dc", "html_url": "https://github.com/rust-lang/rust/commit/2db6ce6e96c12d0c2936ef09a4b28c7baaec31dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2db6ce6e96c12d0c2936ef09a4b28c7baaec31dc/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "965ace59f28c3ffec3faeb1f8c7cfa5adf69cf0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/965ace59f28c3ffec3faeb1f8c7cfa5adf69cf0f", "html_url": "https://github.com/rust-lang/rust/commit/965ace59f28c3ffec3faeb1f8c7cfa5adf69cf0f"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "69eaf24289bfcd13bd5f52997b836aadb59d9732", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2db6ce6e96c12d0c2936ef09a4b28c7baaec31dc/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db6ce6e96c12d0c2936ef09a4b28c7baaec31dc/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=2db6ce6e96c12d0c2936ef09a4b28c7baaec31dc", "patch": "@@ -361,6 +361,7 @@ impl ToJson for IndexItem {\n /// A type used for the search index.\n struct Type {\n     name: Option<String>,\n+    generics: Option<Vec<String>>,\n }\n \n impl ToJson for Type {\n@@ -369,6 +370,9 @@ impl ToJson for Type {\n             Some(ref name) => {\n                 let mut data = BTreeMap::new();\n                 data.insert(\"name\".to_owned(), name.to_json());\n+                if let Some(ref generics) = self.generics {\n+                    data.insert(\"generics\".to_owned(), generics.to_json());\n+                }\n                 Json::Object(data)\n             },\n             None => Json::Null\n@@ -420,7 +424,7 @@ fn init_ids() -> FxHashMap<String, usize> {\n      \"methods\",\n      \"deref-methods\",\n      \"implementations\",\n-     ].into_iter().map(|id| (String::from(*id), 1)).collect()\n+    ].into_iter().map(|id| (String::from(*id), 1)).collect()\n }\n \n /// This method resets the local table of used ID attributes. This is typically\n@@ -667,7 +671,6 @@ fn concise_compared_strs(s1: &str, s2: &str) -> (String, String) {\n     (format!(\"...{}\", concise_str(s1)), format!(\"...{}\", concise_str(s2)))\n }\n \n-\n fn print_message(msg: &str, intro_msg: &mut bool, span: &Span, text: &str) {\n     if !*intro_msg {\n         println!(\"WARNING: documentation for this crate may be rendered \\\n@@ -3956,23 +3959,42 @@ fn get_index_search_type(item: &clean::Item) -> Option<IndexItemFunctionType> {\n }\n \n fn get_index_type(clean_type: &clean::Type) -> Type {\n-    Type { name: get_index_type_name(clean_type).map(|s| s.to_ascii_lowercase()) }\n+    let t = Type {\n+        name: get_index_type_name(clean_type, true).map(|s| s.to_ascii_lowercase()),\n+        generics: get_generics(clean_type),\n+    };\n+    t\n }\n \n-fn get_index_type_name(clean_type: &clean::Type) -> Option<String> {\n+fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option<String> {\n     match *clean_type {\n         clean::ResolvedPath { ref path, .. } => {\n             let segments = &path.segments;\n             Some(segments[segments.len() - 1].name.clone())\n-        },\n-        clean::Generic(ref s) => Some(s.clone()),\n+        }\n+        clean::Generic(ref s) if accept_generic => Some(s.clone()),\n         clean::Primitive(ref p) => Some(format!(\"{:?}\", p)),\n-        clean::BorrowedRef { ref type_, .. } => get_index_type_name(type_),\n+        clean::BorrowedRef { ref type_, .. } => get_index_type_name(type_, accept_generic),\n         // FIXME: add all from clean::Type.\n         _ => None\n     }\n }\n \n+fn get_generics(clean_type: &clean::Type) -> Option<Vec<String>> {\n+    clean_type.generics()\n+              .and_then(|types| {\n+                  let r = types.iter()\n+                               .filter_map(|t| get_index_type_name(t, false))\n+                               .map(|s| s.to_ascii_lowercase())\n+                               .collect::<Vec<_>>();\n+                  if r.is_empty() {\n+                      None\n+                  } else {\n+                      Some(r)\n+                  }\n+              })\n+}\n+\n pub fn cache() -> Arc<Cache> {\n     CACHE_KEY.with(|c| c.borrow().clone())\n }"}]}