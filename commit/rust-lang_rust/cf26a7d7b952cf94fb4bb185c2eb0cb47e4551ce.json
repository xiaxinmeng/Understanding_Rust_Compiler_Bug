{"sha": "cf26a7d7b952cf94fb4bb185c2eb0cb47e4551ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMjZhN2Q3Yjk1MmNmOTRmYjRiYjE4NWMyZWIwY2I0N2U0NTUxY2U=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-11-20T01:31:22Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-29T20:09:10Z"}, "message": "Make it possible to expand stmt macros.", "tree": {"sha": "f1c174a7da697aed0292684e2dbe83d296c4b4cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1c174a7da697aed0292684e2dbe83d296c4b4cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf26a7d7b952cf94fb4bb185c2eb0cb47e4551ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf26a7d7b952cf94fb4bb185c2eb0cb47e4551ce", "html_url": "https://github.com/rust-lang/rust/commit/cf26a7d7b952cf94fb4bb185c2eb0cb47e4551ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf26a7d7b952cf94fb4bb185c2eb0cb47e4551ce/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee076f63f910fe2b132904ad05d0cda178ff1ec6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee076f63f910fe2b132904ad05d0cda178ff1ec6", "html_url": "https://github.com/rust-lang/rust/commit/ee076f63f910fe2b132904ad05d0cda178ff1ec6"}], "stats": {"total": 89, "additions": 72, "deletions": 17}, "files": [{"sha": "01193a0b483f6880d8c0f646c12bf98de2f8533c", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cf26a7d7b952cf94fb4bb185c2eb0cb47e4551ce/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf26a7d7b952cf94fb4bb185c2eb0cb47e4551ce/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=cf26a7d7b952cf94fb4bb185c2eb0cb47e4551ce", "patch": "@@ -44,7 +44,7 @@ type syntax_expander_tt_item_\n enum mac_result {\n     mr_expr(@ast::expr),\n     mr_item(@ast::item),\n-    mr_expr_or_item(fn@()-> @ast::expr, fn@()-> Option<@ast::item>),\n+    mr_any(fn@()-> @ast::expr, fn@()-> Option<@ast::item>, fn@()->@ast::stmt),\n     mr_def(macro_def)\n }\n \n@@ -109,18 +109,18 @@ fn syntax_expander_table() -> HashMap<~str, syntax_extension> {\n                                 ext::deriving::expand_deriving_iter_bytes));\n \n     // Quasi-quoting expanders\n-    syntax_expanders.insert(~\"quote_tokens\",\n-                            builtin_expr_tt(ext::quote::expand_quote_tokens));\n+    syntax_expanders.insert(\n+        ~\"quote_tokens\", builtin_normal_tt(ext::quote::expand_quote_tokens));\n     syntax_expanders.insert(~\"quote_expr\",\n-                            builtin_expr_tt(ext::quote::expand_quote_expr));\n+                            builtin_normal_tt(ext::quote::expand_quote_expr));\n     syntax_expanders.insert(~\"quote_type\",\n-                            builtin_expr_tt(ext::quote::expand_quote_type));\n+                            builtin_normal_tt(ext::quote::expand_quote_type));\n     syntax_expanders.insert(~\"quote_item\",\n-                            builtin_expr_tt(ext::quote::expand_quote_item));\n+                            builtin_normal_tt(ext::quote::expand_quote_item));\n     syntax_expanders.insert(~\"quote_pat\",\n-                            builtin_expr_tt(ext::quote::expand_quote_pat));\n+                            builtin_normal_tt(ext::quote::expand_quote_pat));\n     syntax_expanders.insert(~\"quote_stmt\",\n-                            builtin_expr_tt(ext::quote::expand_quote_stmt));\n+                            builtin_normal_tt(ext::quote::expand_quote_stmt));\n \n     syntax_expanders.insert(~\"line\",\n                             builtin(ext::source_util::expand_line));"}, {"sha": "b997106b4ed01d16fc93b3fe97f8df2638b818b9", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 60, "deletions": 6, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/cf26a7d7b952cf94fb4bb185c2eb0cb47e4551ce/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf26a7d7b952cf94fb4bb185c2eb0cb47e4551ce/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=cf26a7d7b952cf94fb4bb185c2eb0cb47e4551ce", "patch": "@@ -1,7 +1,7 @@\n use std::map::HashMap;\n \n use ast::{crate, expr_, expr_mac, mac_invoc, mac_invoc_tt,\n-             tt_delim, tt_tok, item_mac};\n+          tt_delim, tt_tok, item_mac, stmt_, stmt_mac};\n use fold::*;\n use ext::base::*;\n use ext::qquote::{qq_helper};\n@@ -20,9 +20,9 @@ fn expand_expr(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n       // entry-point for all syntax extensions.\n           expr_mac(mac) => {\n \n-            // Old-style macros, for compatibility, will erase this whole\n-            // block once we've transitioned.\n             match mac.node {\n+              // Old-style macros. For compatibility, will erase this whole\n+              // block once we've transitioned.\n               mac_invoc(pth, args, body) => {\n                 assert (vec::len(pth.idents) > 0u);\n                 /* using idents and token::special_idents would make the\n@@ -81,7 +81,7 @@ fn expand_expr(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n                   Some(normal_tt({expander: exp, span: exp_sp})) => {\n                     let expanded = match exp(cx, mac.span, tts) {\n                       mr_expr(e) => e,\n-                      mr_expr_or_item(expr_maker,_) => expr_maker(),\n+                      mr_any(expr_maker,_,_) => expr_maker(),\n                       _ => cx.span_fatal(\n                           pth.span, fmt!(\"non-expr macro in expr pos: %s\",\n                                          *extname))\n@@ -234,7 +234,7 @@ fn expand_item_mac(exts: HashMap<~str, syntax_extension>,\n             mr_expr(_) => cx.span_fatal(pth.span,\n                                         ~\"expr macro in item position: \" +\n                                         *extname),\n-            mr_expr_or_item(_, item_maker) =>\n+            mr_any(_, item_maker, _) =>\n                 option::chain(item_maker(), |i| {fld.fold_item(i)}),\n             mr_def(mdef) => {\n                 exts.insert(mdef.name, mdef.ext);\n@@ -248,6 +248,59 @@ fn expand_item_mac(exts: HashMap<~str, syntax_extension>,\n     }\n }\n \n+fn expand_stmt(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n+               && s: stmt_, sp: span, fld: ast_fold,\n+               orig: fn@(&&s: stmt_, span, ast_fold) -> (stmt_, span))\n+    -> (stmt_, span)\n+{\n+    return match s {\n+        stmt_mac(mac) => {\n+            match mac.node {\n+                mac_invoc_tt(pth, tts) => {\n+                    assert(vec::len(pth.idents) == 1u);\n+                    let extname = cx.parse_sess().interner.get(pth.idents[0]);\n+                    match exts.find(*extname) {\n+                        None => {\n+                            cx.span_fatal(\n+                                pth.span,\n+                                fmt!(\"macro undefined: '%s'\", *extname))\n+                        }\n+                        Some(normal_tt({expander: exp, span: exp_sp})) => {\n+                            let expanded = match exp(cx, mac.span, tts) {\n+                                mr_expr(e) =>\n+                                @{node: ast::stmt_expr(e, cx.next_id()),\n+                                  span: e.span},\n+                                mr_any(_,_,stmt_mkr) => stmt_mkr(),\n+                                _ => cx.span_fatal(\n+                                    pth.span,\n+                                    fmt!(\"non-stmt macro in stmt pos: %s\",\n+                                         *extname))\n+                            };\n+\n+                            cx.bt_push(ExpandedFrom(\n+                                {call_site: sp,\n+                                 callie: {name: *extname, span: exp_sp}}));\n+                            //keep going, outside-in\n+                            let fully_expanded = fld.fold_stmt(expanded).node;\n+                            cx.bt_pop();\n+\n+                            (fully_expanded, sp)\n+                        }\n+                        _ => {\n+                            cx.span_fatal(pth.span,\n+                                          fmt!(\"'%s' is not a tt-style macro\",\n+                                               *extname))\n+                        }\n+                    }\n+                }\n+                _ => cx.span_bug(mac.span, ~\"naked syntactic bit\")\n+            }\n+        }\n+        _ => orig(s, sp, fld)\n+    };\n+}\n+\n+\n fn new_span(cx: ext_ctxt, sp: span) -> span {\n     /* this discards information in the case of macro-defining macros */\n     return span {lo: sp.lo, hi: sp.hi, expn_info: cx.backtrace()};\n@@ -298,7 +351,8 @@ fn expand_crate(parse_sess: parse::parse_sess,\n         @{fold_expr: |a,b,c| expand_expr(exts, cx, a, b, c, afp.fold_expr),\n           fold_mod: |a,b| expand_mod_items(exts, cx, a, b, afp.fold_mod),\n           fold_item: |a,b| expand_item(exts, cx, a, b, afp.fold_item),\n-          new_span: |a|new_span(cx, a),\n+          fold_stmt: |a,b,c| expand_stmt(exts, cx, a, b, c, afp.fold_stmt),\n+          new_span: |a| new_span(cx, a),\n           .. *afp};\n     let f = make_fold(f_pre);\n     let cm = parse_expr_from_source_str(~\"<core-macros>\","}, {"sha": "1c62c9b2a6da2b4e925379a3be3d5f8857c58ea5", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf26a7d7b952cf94fb4bb185c2eb0cb47e4551ce/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf26a7d7b952cf94fb4bb185c2eb0cb47e4551ce/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=cf26a7d7b952cf94fb4bb185c2eb0cb47e4551ce", "patch": "@@ -1,4 +1,4 @@\n-use base::{ext_ctxt, mac_result, mr_expr_or_item, mr_def, normal_tt};\n+use base::{ext_ctxt, mac_result, mr_any, mr_def, normal_tt};\n use codemap::span;\n use ast::{ident, matcher_, matcher, match_tok,\n              match_nonterminal, match_seq, tt_delim};\n@@ -92,8 +92,9 @@ fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n \n                     // Let the context choose how to interpret the result.\n                     // Weird, but useful for X-macros.\n-                    return mr_expr_or_item(|| p.parse_expr(),\n-                                           || p.parse_item(~[/* no attrs*/]));\n+                    return mr_any(|| p.parse_expr(),\n+                                  || p.parse_item(~[/* no attrs*/]),\n+                                  || p.parse_stmt(~[/* no attrs*/]));\n                   }\n                   failure(sp, msg) => if sp.lo >= best_fail_spot.lo {\n                     best_fail_spot = sp;"}]}