{"sha": "173a8e04807dbdcc714d7dec0da331ee86538131", "node_id": "C_kwDOAAsO6NoAKDE3M2E4ZTA0ODA3ZGJkY2M3MTRkN2RlYzBkYTMzMWVlODY1MzgxMzE", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-10-06T21:07:58Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-10-24T20:05:39Z"}, "message": "Replace from_different_macros with equivalent and simpler check", "tree": {"sha": "4c7cf84e25b859e2f656310b9499c83ace4a7b24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c7cf84e25b859e2f656310b9499c83ace4a7b24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/173a8e04807dbdcc714d7dec0da331ee86538131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/173a8e04807dbdcc714d7dec0da331ee86538131", "html_url": "https://github.com/rust-lang/rust/commit/173a8e04807dbdcc714d7dec0da331ee86538131", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/173a8e04807dbdcc714d7dec0da331ee86538131/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5da7a176b778656d2e6f736f5a23ce6fdb73379d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5da7a176b778656d2e6f736f5a23ce6fdb73379d", "html_url": "https://github.com/rust-lang/rust/commit/5da7a176b778656d2e6f736f5a23ce6fdb73379d"}], "stats": {"total": 20, "additions": 1, "deletions": 19}, "files": [{"sha": "e366d6db77493a806f8893df67b10a7fc7202e92", "filename": "clippy_lints/src/manual_let_else.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/173a8e04807dbdcc714d7dec0da331ee86538131/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/173a8e04807dbdcc714d7dec0da331ee86538131/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_let_else.rs?ref=173a8e04807dbdcc714d7dec0da331ee86538131", "patch": "@@ -11,7 +11,6 @@ use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::sym;\n-use rustc_span::Span;\n use std::ops::ControlFlow;\n \n declare_clippy_lint! {\n@@ -66,7 +65,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualLetElse {\n             if !in_external_macro(cx.sess(), stmt.span);\n             if let StmtKind::Local(local) = stmt.kind;\n             if let Some(init) = local.init;\n-            if !from_different_macros(init.span, stmt.span);\n+            if init.span.ctxt() == stmt.span.ctxt();\n             if let Some(if_let_or_match) = IfLetOrMatch::parse(cx, init);\n             then {\n                 if_let_or_match\n@@ -179,23 +178,6 @@ fn expr_diverges(cx: &LateContext<'_>, expr: &'_ Expr<'_>) -> bool {\n     .is_some()\n }\n \n-/// Returns true if the two spans come from different macro sites,\n-/// or one comes from an invocation and the other is not from a macro at all.\n-fn from_different_macros(span_a: Span, span_b: Span) -> bool {\n-    // This pre-check is a speed up so that we don't build outer_expn_data unless needed.\n-    match (span_a.from_expansion(), span_b.from_expansion()) {\n-        (false, false) => return false,\n-        (true, false) | (false, true) => return true,\n-        // We need to determine if both are from the same macro\n-        (true, true) => (),\n-    }\n-    let data_for_comparison = |sp: Span| {\n-        let expn_data = sp.ctxt().outer_expn_data();\n-        (expn_data.kind, expn_data.call_site)\n-    };\n-    data_for_comparison(span_a) != data_for_comparison(span_b)\n-}\n-\n fn pat_allowed_for_else(cx: &LateContext<'_>, pat: &'_ Pat<'_>) -> bool {\n     // Check whether the pattern contains any bindings, as the\n     // binding might potentially be used in the body."}]}