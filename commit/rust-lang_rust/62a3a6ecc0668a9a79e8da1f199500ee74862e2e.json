{"sha": "62a3a6ecc0668a9a79e8da1f199500ee74862e2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYTNhNmVjYzA2NjhhOWE3OWU4ZGExZjE5OTUwMGVlNzQ4NjJlMmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-25T16:42:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-25T16:42:41Z"}, "message": "Auto merge of #30899 - oli-obk:non-local-const-fn, r=pnkfelix\n\nAlso got rid of some code repetition in `const_eval`", "tree": {"sha": "8391e2f4e5e45249eefd60cd07081a61d3a8b1af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8391e2f4e5e45249eefd60cd07081a61d3a8b1af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62a3a6ecc0668a9a79e8da1f199500ee74862e2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62a3a6ecc0668a9a79e8da1f199500ee74862e2e", "html_url": "https://github.com/rust-lang/rust/commit/62a3a6ecc0668a9a79e8da1f199500ee74862e2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62a3a6ecc0668a9a79e8da1f199500ee74862e2e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86ffe5d18f0207c89fd9ed25cded844a9d7a0c89", "url": "https://api.github.com/repos/rust-lang/rust/commits/86ffe5d18f0207c89fd9ed25cded844a9d7a0c89", "html_url": "https://github.com/rust-lang/rust/commit/86ffe5d18f0207c89fd9ed25cded844a9d7a0c89"}, {"sha": "f2c0ecded5f831eb03c187a2b13f04e959f5e3a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c0ecded5f831eb03c187a2b13f04e959f5e3a3", "html_url": "https://github.com/rust-lang/rust/commit/f2c0ecded5f831eb03c187a2b13f04e959f5e3a3"}], "stats": {"total": 103, "additions": 18, "deletions": 85}, "files": [{"sha": "07171e66077606eb9ee1b13ee96c1cbaac328fbd", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 11, "deletions": 58, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/62a3a6ecc0668a9a79e8da1f199500ee74862e2e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a3a6ecc0668a9a79e8da1f199500ee74862e2e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=62a3a6ecc0668a9a79e8da1f199500ee74862e2e", "patch": "@@ -28,7 +28,7 @@ use util::num::ToPrimitive;\n use util::nodemap::NodeMap;\n \n use graphviz::IntoCow;\n-use syntax::{ast, abi};\n+use syntax::ast;\n use rustc_front::hir::Expr;\n use rustc_front::hir;\n use rustc_front::intravisit::FnKind;\n@@ -1090,19 +1090,16 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n       hir::ExprCall(ref callee, ref args) => {\n           let sub_ty_hint = ty_hint.erase_hint();\n           let callee_val = try!(eval_const_expr_partial(tcx, callee, sub_ty_hint, fn_args));\n-          let (decl, block, constness) = try!(get_fn_def(tcx, e, callee_val));\n-          match (ty_hint, constness) {\n-              (ExprTypeChecked, _) => {\n-                  // no need to check for constness... either check_const\n-                  // already forbids this or we const eval over whatever\n-                  // we want\n-              },\n-              (_, hir::Constness::Const) => {\n-                  // we don't know much about the function, so we force it to be a const fn\n-                  // so compilation will fail later in case the const fn's body is not const\n-              },\n-              _ => signal!(e, NonConstPath),\n-          }\n+          let did = match callee_val {\n+              Function(did) => did,\n+              callee => signal!(e, CallOn(callee)),\n+          };\n+          let (decl, result) = if let Some(fn_like) = lookup_const_fn_by_id(tcx, did) {\n+              (fn_like.decl(), &fn_like.body().expr)\n+          } else {\n+              signal!(e, NonConstPath)\n+          };\n+          let result = result.as_ref().expect(\"const fn has no result expression\");\n           assert_eq!(decl.inputs.len(), args.len());\n \n           let mut call_args = NodeMap();\n@@ -1117,7 +1114,6 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n               let old = call_args.insert(arg.pat.id, arg_val);\n               assert!(old.is_none());\n           }\n-          let result = block.expr.as_ref().unwrap();\n           debug!(\"const call({:?})\", call_args);\n           try!(eval_const_expr_partial(tcx, &**result, ty_hint, Some(&call_args)))\n       },\n@@ -1389,46 +1385,3 @@ pub fn compare_lit_exprs<'tcx>(tcx: &ty::ctxt<'tcx>,\n     };\n     compare_const_vals(&a, &b)\n }\n-\n-\n-// returns Err if callee is not `Function`\n-// `e` is only used for error reporting/spans\n-fn get_fn_def<'a>(tcx: &'a ty::ctxt,\n-                  e: &hir::Expr,\n-                  callee: ConstVal)\n-                  -> Result<(&'a hir::FnDecl, &'a hir::Block, hir::Constness), ConstEvalErr> {\n-    let did = match callee {\n-        Function(did) => did,\n-        callee => signal!(e, CallOn(callee)),\n-    };\n-    debug!(\"fn call: {:?}\", tcx.map.get_if_local(did));\n-    match tcx.map.get_if_local(did) {\n-        None => signal!(e, UnimplementedConstVal(\"calling non-local const fn\")), // non-local\n-        Some(ast_map::NodeItem(it)) => match it.node {\n-            hir::ItemFn(\n-                ref decl,\n-                hir::Unsafety::Normal,\n-                constness,\n-                abi::Abi::Rust,\n-                _, // ducktype generics? types are funky in const_eval\n-                ref block,\n-            ) => Ok((&**decl, &**block, constness)),\n-            _ => signal!(e, NonConstPath),\n-        },\n-        Some(ast_map::NodeImplItem(it)) => match it.node {\n-            hir::ImplItemKind::Method(\n-                hir::MethodSig {\n-                    ref decl,\n-                    unsafety: hir::Unsafety::Normal,\n-                    constness,\n-                    abi: abi::Abi::Rust,\n-                    .. // ducktype generics? types are funky in const_eval\n-                },\n-                ref block,\n-            ) => Ok((decl, block, constness)),\n-            _ => signal!(e, NonConstPath),\n-        },\n-        Some(ast_map::NodeTraitItem(..)) => signal!(e, NonConstPath),\n-        Some(_) => signal!(e, UnimplementedConstVal(\"calling struct, tuple or variant\")),\n-    }\n-}"}, {"sha": "1143d3bd5cd96491e1e5c5116eef414e01843d5a", "filename": "src/test/compile-fail/const-call.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62a3a6ecc0668a9a79e8da1f199500ee74862e2e/src%2Ftest%2Fcompile-fail%2Fconst-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a3a6ecc0668a9a79e8da1f199500ee74862e2e/src%2Ftest%2Fcompile-fail%2Fconst-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-call.rs?ref=62a3a6ecc0668a9a79e8da1f199500ee74862e2e", "patch": "@@ -10,15 +10,10 @@\n \n #![feature(const_fn)]\n \n-const unsafe fn g(x: usize) -> usize {\n-    x\n-}\n-\n fn f(x: usize) -> usize {\n     x\n }\n \n fn main() {\n     let _ = [0; f(2)]; //~ ERROR: non-constant path in constant expression [E0307]\n-    let _ = [0; g(2)]; //~ ERROR: non-constant path in constant expression [E0307]\n }"}, {"sha": "592a312d80048a32f2cfb0d5520250c976ef9d58", "filename": "src/test/compile-fail/const-fn-stability-calls-2.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/86ffe5d18f0207c89fd9ed25cded844a9d7a0c89/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability-calls-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ffe5d18f0207c89fd9ed25cded844a9d7a0c89/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability-calls-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability-calls-2.rs?ref=86ffe5d18f0207c89fd9ed25cded844a9d7a0c89", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test use of const fn from another crate without a feature gate.\n-\n-// aux-build:const_fn_lib.rs\n-\n-extern crate const_fn_lib;\n-\n-use const_fn_lib::foo;\n-\n-fn main() {\n-    let x: [usize; foo()] = [];\n-    //~^ ERROR unimplemented constant expression: calling non-local const fn [E0250]\n-}"}, {"sha": "7b4b751fd7f255d62f3fbcade5319592bb2a062d", "filename": "src/test/run-pass/const-fn-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62a3a6ecc0668a9a79e8da1f199500ee74862e2e/src%2Ftest%2Frun-pass%2Fconst-fn-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a3a6ecc0668a9a79e8da1f199500ee74862e2e/src%2Ftest%2Frun-pass%2Fconst-fn-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-cross-crate.rs?ref=62a3a6ecc0668a9a79e8da1f199500ee74862e2e", "patch": "@@ -22,4 +22,5 @@ const FOO: usize = foo();\n \n fn main() {\n     assert_eq!(FOO, 22);\n+    let _: [i32; foo()] = [42; 22];\n }"}, {"sha": "5961ed8d3390d9ac4a1266e77e9c24622f7270c0", "filename": "src/test/run-pass/const-fn.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62a3a6ecc0668a9a79e8da1f199500ee74862e2e/src%2Ftest%2Frun-pass%2Fconst-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a3a6ecc0668a9a79e8da1f199500ee74862e2e/src%2Ftest%2Frun-pass%2Fconst-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn.rs?ref=62a3a6ecc0668a9a79e8da1f199500ee74862e2e", "patch": "@@ -20,14 +20,20 @@ const fn sub(x: u32, y: u32) -> u32 {\n     x - y\n }\n \n+const unsafe fn div(x: u32, y: u32) -> u32 {\n+    x / y\n+}\n+\n const SUM: u32 = add(44, 22);\n const DIFF: u32 = sub(44, 22);\n+const DIV: u32 = unsafe{div(44, 22)};\n \n fn main() {\n     assert_eq!(SUM, 66);\n     assert!(SUM != 88);\n \n     assert_eq!(DIFF, 22);\n+    assert_eq!(DIV, 2);\n \n     let _: [&'static str; sub(100, 99) as usize] = [\"hi\"];\n }"}]}