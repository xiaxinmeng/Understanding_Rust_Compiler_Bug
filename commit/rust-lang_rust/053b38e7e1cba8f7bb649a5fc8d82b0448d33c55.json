{"sha": "053b38e7e1cba8f7bb649a5fc8d82b0448d33c55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1M2IzOGU3ZTFjYmE4ZjdiYjY0OWE1ZmM4ZDgyYjA0NDhkMzNjNTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-30T07:18:49Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-30T07:18:49Z"}, "message": "core::rt: Fix two multithreading bugs and add a threadring test\n\nThis properly distributes the load now", "tree": {"sha": "139cb953e1aedd723324a33149279750917c6b34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/139cb953e1aedd723324a33149279750917c6b34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/053b38e7e1cba8f7bb649a5fc8d82b0448d33c55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/053b38e7e1cba8f7bb649a5fc8d82b0448d33c55", "html_url": "https://github.com/rust-lang/rust/commit/053b38e7e1cba8f7bb649a5fc8d82b0448d33c55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/053b38e7e1cba8f7bb649a5fc8d82b0448d33c55/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8eb358bb00f161f9e289de6cad8cfecc4c6eb681", "url": "https://api.github.com/repos/rust-lang/rust/commits/8eb358bb00f161f9e289de6cad8cfecc4c6eb681", "html_url": "https://github.com/rust-lang/rust/commit/8eb358bb00f161f9e289de6cad8cfecc4c6eb681"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "a57a87ffba774d294c378e726530ea106dcc7a35", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/053b38e7e1cba8f7bb649a5fc8d82b0448d33c55/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053b38e7e1cba8f7bb649a5fc8d82b0448d33c55/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=053b38e7e1cba8f7bb649a5fc8d82b0448d33c55", "patch": "@@ -131,6 +131,11 @@ pub impl Scheduler {\n \n         let mut self_sched = self;\n \n+        // Always run through the scheduler loop at least once so that\n+        // we enter the sleep state and can then be woken up by other\n+        // schedulers.\n+        self_sched.event_loop.callback(Scheduler::run_sched_once);\n+\n         unsafe {\n             let event_loop: *mut ~EventLoopObject = {\n                 let event_loop: *mut ~EventLoopObject = &mut self_sched.event_loop;\n@@ -258,7 +263,7 @@ pub impl Scheduler {\n                                 let mut handle = handle;\n                                 handle.send(Wake);\n                             }\n-                            None => (/* pass */)\n+                            None => break\n                         }\n                     }\n                 }\n@@ -781,4 +786,63 @@ mod test {\n             }\n         }\n     }\n+\n+    #[test]\n+    fn thread_ring() {\n+        use rt::comm::*;\n+        use iter::Times;\n+        use vec::OwnedVector;\n+        use container::Container;\n+        use comm::{GenericPort, GenericChan};\n+\n+        do run_in_mt_newsched_task {\n+            let (end_port, end_chan) = oneshot();\n+\n+            let n_tasks = 10;\n+            let token = 2000;\n+\n+            let mut (p, ch1) = stream();\n+            ch1.send((token, end_chan));\n+            let mut i = 2;\n+            while i <= n_tasks {\n+                let (next_p, ch) = stream();\n+                let imm_i = i;\n+                let imm_p = p;\n+                do spawntask_random {\n+                    roundtrip(imm_i, n_tasks, &imm_p, &ch);\n+                };\n+                p = next_p;\n+                i += 1;\n+            }\n+            let imm_p = p;\n+            let imm_ch = ch1;\n+            do spawntask_random {\n+                roundtrip(1, n_tasks, &imm_p, &imm_ch);\n+            }\n+\n+            end_port.recv();\n+        }\n+\n+        fn roundtrip(id: int, n_tasks: int,\n+                     p: &Port<(int, ChanOne<()>)>, ch: &Chan<(int, ChanOne<()>)>) {\n+            while (true) {\n+                match p.recv() {\n+                    (1, end_chan) => {\n+                        debug!(\"%d\\n\", id);\n+                        end_chan.send(());\n+                        return;\n+                    }\n+                    (token, end_chan) => {\n+                        debug!(\"thread: %d   got token: %d\", id, token);\n+                        ch.send((token - 1, end_chan));\n+                        if token <= n_tasks {\n+                            return;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+    }\n+\n }"}, {"sha": "e05e2004e0b214da2829c100c95225b7d1009a05", "filename": "src/libstd/rt/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/053b38e7e1cba8f7bb649a5fc8d82b0448d33c55/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053b38e7e1cba8f7bb649a5fc8d82b0448d33c55/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=053b38e7e1cba8f7bb649a5fc8d82b0448d33c55", "patch": "@@ -66,7 +66,7 @@ pub fn run_in_mt_newsched_task(f: ~fn()) {\n     let f_cell = Cell(f);\n \n     do run_in_bare_thread {\n-        static N: uint = 2;\n+        static N: uint = 4;\n \n         let sleepers = SleeperList::new();\n         let work_queue = WorkQueue::new();"}]}