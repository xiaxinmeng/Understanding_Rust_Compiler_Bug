{"sha": "e2ad3be1787cdd36d52fcd2355225156f5460dc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYWQzYmUxNzg3Y2RkMzZkNTJmY2QyMzU1MjI1MTU2ZjU0NjBkYzQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-22T10:02:28Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-24T22:12:23Z"}, "message": "Use `#[prelude_import]` in `libcore`.", "tree": {"sha": "e8fab7a24ca6bff9749199513f18867328fb2b30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8fab7a24ca6bff9749199513f18867328fb2b30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2ad3be1787cdd36d52fcd2355225156f5460dc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ad3be1787cdd36d52fcd2355225156f5460dc4", "html_url": "https://github.com/rust-lang/rust/commit/e2ad3be1787cdd36d52fcd2355225156f5460dc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2ad3be1787cdd36d52fcd2355225156f5460dc4/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "308824acecf902f2b6a9c1538bde0324804ba68e", "url": "https://api.github.com/repos/rust-lang/rust/commits/308824acecf902f2b6a9c1538bde0324804ba68e", "html_url": "https://github.com/rust-lang/rust/commit/308824acecf902f2b6a9c1538bde0324804ba68e"}], "stats": {"total": 213, "additions": 30, "deletions": 183}, "files": [{"sha": "4f486ad7cb8b23cbf47b5e00c329656027df1393", "filename": "src/libcore/any.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -72,12 +72,10 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use fmt;\n-use marker::Send;\n use mem::transmute;\n-use option::Option::{self, Some, None};\n use raw::TraitObject;\n use intrinsics;\n-use marker::{Reflect, Sized};\n+use marker::Reflect;\n \n ///////////////////////////////////////////////////////////////////////////////\n // Any trait"}, {"sha": "9866a39619a82ecfdc3265be60e7e4e4adde7006", "filename": "src/libcore/array.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -20,16 +20,11 @@\n             issue = \"27778\")]\n \n use borrow::{Borrow, BorrowMut};\n-use clone::Clone;\n-use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n-use convert::{AsRef, AsMut};\n-use default::Default;\n+use cmp::Ordering;\n use fmt;\n use hash::{Hash, self};\n-use iter::IntoIterator;\n-use marker::{Copy, Sized, Unsize};\n-use option::Option;\n-use slice::{Iter, IterMut, SliceExt};\n+use marker::Unsize;\n+use slice::{Iter, IterMut};\n \n /// Utility trait implemented only on arrays of fixed size\n ///"}, {"sha": "3d223465c88a03b44dc01bb913d210b50e14d575", "filename": "src/libcore/borrow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -12,8 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use marker::Sized;\n-\n /// A trait for borrowing data.\n ///\n /// In general, there may be several ways to \"borrow\" a piece of data.  The"}, {"sha": "ec35198b68517ae5988fb6bdf864288eb02931cc", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -144,17 +144,10 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use clone::Clone;\n-use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n-use convert::From;\n-use default::Default;\n+use cmp::Ordering;\n use fmt::{self, Debug, Display};\n-use marker::{Copy, PhantomData, Send, Sync, Sized, Unsize};\n-use ops::{Deref, DerefMut, Drop, FnOnce, CoerceUnsized};\n-use option::Option;\n-use option::Option::{None, Some};\n-use result::Result;\n-use result::Result::{Ok, Err};\n+use marker::{PhantomData, Unsize};\n+use ops::{Deref, DerefMut, CoerceUnsized};\n \n /// A mutable memory location that admits only `Copy` data.\n ///"}, {"sha": "64cb6dc23147d86d74149ac5e573925a3a99b021", "filename": "src/libcore/char.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -15,8 +15,6 @@\n #![allow(non_snake_case)]\n #![stable(feature = \"core_char\", since = \"1.2.0\")]\n \n-use prelude::v1::*;\n-\n use char_private::is_printable;\n use iter::FusedIterator;\n use mem::transmute;"}, {"sha": "708e7cc15e7c97f97f89f9f4c326bc02bf2acd97", "filename": "src/libcore/char_private.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fchar_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fchar_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar_private.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -11,8 +11,6 @@\n // NOTE: The following code was generated by \"src/etc/char_private.py\",\n //       do not edit directly!\n \n-use slice::SliceExt;\n-\n fn check(x: u16, singletons: &[u16], normal: &[u16]) -> bool {\n     for &s in singletons {\n         if x == s {"}, {"sha": "748bb62a1f3eb51794c40f8611ca7f4d1d1e4f29", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -44,8 +44,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use marker::Sized;\n-\n /// A common trait for the ability to explicitly duplicate an object.\n ///\n /// Differs from `Copy` in that `Copy` is implicit and extremely inexpensive, while"}, {"sha": "907dd1508d8bee9b7c1012629b974da85473a6e5", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -34,9 +34,6 @@\n \n use self::Ordering::*;\n \n-use marker::Sized;\n-use option::Option::{self, Some};\n-\n /// Trait for equality comparisons which are [partial equivalence\n /// relations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).\n ///\n@@ -571,11 +568,7 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n \n // Implementation of PartialEq, Eq, PartialOrd and Ord for primitive types\n mod impls {\n-    use cmp::{PartialOrd, Ord, PartialEq, Eq, Ordering};\n-    use cmp::Ordering::{Less, Greater, Equal};\n-    use marker::Sized;\n-    use option::Option;\n-    use option::Option::{Some, None};\n+    use cmp::Ordering::{self, Less, Greater, Equal};\n \n     macro_rules! partial_eq_impl {\n         ($($t:ty)*) => ($("}, {"sha": "8e7e2abfc1e174c6dc73267c87218f6b623eb8eb", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -40,9 +40,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use marker::Sized;\n-use result::Result;\n-\n /// A cheap, reference-to-reference conversion.\n ///\n /// `AsRef` is very similar to, but different than, `Borrow`. See"}, {"sha": "85e4b2a0067698b385963e3fce5c586909673056", "filename": "src/libcore/default.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -12,8 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use marker::Sized;\n-\n /// A trait for giving a type a useful default value.\n ///\n /// Sometimes, you want to fall back to some kind of default value, and"}, {"sha": "102e3c0bd7b95f04841117ef16b8cb3c4a4e65a4", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n use fmt::{self, FlagV1};\n \n struct PadAdapter<'a, 'b: 'a> {"}, {"sha": "66ef92928eb06c590dcda324ed897e454c2935ac", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -12,8 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use prelude::v1::*;\n-\n use cell::{UnsafeCell, Cell, RefCell, Ref, RefMut, BorrowState};\n use marker::PhantomData;\n use mem;\n@@ -905,8 +903,6 @@ impl<'a> Formatter<'a> {\n                         prefix: &str,\n                         buf: &str)\n                         -> Result {\n-        use char::CharExt;\n-\n         let mut width = buf.len();\n \n         let mut sign = None;\n@@ -1020,7 +1016,6 @@ impl<'a> Formatter<'a> {\n                        f: F) -> Result\n         where F: FnOnce(&mut Formatter) -> Result,\n     {\n-        use char::CharExt;\n         let align = match self.align {\n             rt::v1::Alignment::Unknown => default,\n             _ => self.align"}, {"sha": "0145897d8f6909568cdba4b3e066ddf6a7242520", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -14,8 +14,6 @@\n \n // FIXME: #6220 Implement floating point formatting\n \n-use prelude::v1::*;\n-\n use fmt;\n use num::Zero;\n use ops::{Div, Rem, Sub};"}, {"sha": "081f0c14ec30c978e44611e66c1650d45a3df8b3", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -71,8 +71,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use prelude::v1::*;\n-\n use fmt;\n use marker;\n use mem;\n@@ -288,8 +286,6 @@ impl<H> Default for BuildHasherDefault<H> {\n //////////////////////////////////////////////////////////////////////////////\n \n mod impls {\n-    use prelude::v1::*;\n-\n     use mem;\n     use slice;\n     use super::*;"}, {"sha": "bd6cae92b050c6bdb80ffde8b5aa537aacae184b", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -10,8 +10,6 @@\n \n //! An implementation of SipHash.\n \n-use prelude::v1::*;\n-\n use marker::PhantomData;\n use ptr;\n "}, {"sha": "b70bf43ac353b9474fd5a50c6e8ce7c8c6785793", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -46,8 +46,6 @@\n             issue = \"0\")]\n #![allow(missing_docs)]\n \n-use marker::Sized;\n-\n extern \"rust-intrinsic\" {\n \n     // NB: These intrinsics take raw pointers because they mutate aliased"}, {"sha": "ea97c87efbb410fad9c24a4aed79cf75f5eba764", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -8,19 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use clone::Clone;\n-use cmp::{Ord, PartialOrd, PartialEq, Ordering};\n-use default::Default;\n-use ops::FnMut;\n-use option::Option::{self, Some, None};\n-use marker::Sized;\n+use cmp::Ordering;\n \n use super::{Chain, Cycle, Cloned, Enumerate, Filter, FilterMap, FlatMap, Fuse};\n use super::{Inspect, Map, Peekable, Scan, Skip, SkipWhile, Take, TakeWhile, Rev};\n use super::{Zip, Sum, Product};\n-use super::ChainState;\n-use super::{DoubleEndedIterator, ExactSizeIterator, Extend, FromIterator};\n-use super::{IntoIterator, ZipImpl};\n+use super::{ChainState, FromIterator, ZipImpl};\n \n fn _assert_is_object_safe(_: &Iterator<Item=()>) {}\n "}, {"sha": "b1d3ab1d1febcd18cb81bd4f4a566aad692342c0", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -299,13 +299,9 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use clone::Clone;\n use cmp;\n-use default::Default;\n use fmt;\n use iter_private::TrustedRandomAccess;\n-use ops::FnMut;\n-use option::Option::{self, Some, None};\n use usize;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "8408e5d88b4cbec4b37d1ddcf492a93b0d9fccc7", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -8,15 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use clone::Clone;\n-use cmp::PartialOrd;\n use mem;\n use ops::{self, Add, Sub};\n-use option::Option::{self, Some, None};\n-use marker::Sized;\n use usize;\n \n-use super::{DoubleEndedIterator, ExactSizeIterator, Iterator, FusedIterator};\n+use super::FusedIterator;\n \n /// Objects that can be stepped over in both directions.\n ///"}, {"sha": "da346eaf1db96d24ee991be0bfe431e201217b52", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -8,14 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use clone::Clone;\n-use default::Default;\n use fmt;\n use marker;\n-use option::Option::{self, Some, None};\n use usize;\n \n-use super::{DoubleEndedIterator, IntoIterator, Iterator, ExactSizeIterator, FusedIterator};\n+use super::FusedIterator;\n \n /// An iterator that repeats an element endlessly.\n ///"}, {"sha": "59e23c4d960567d6af82c729eada07b6becd1c14", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -8,11 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use option::Option::{self, Some};\n-use marker::Sized;\n-\n-use super::Iterator;\n-\n /// Conversion from an `Iterator`.\n ///\n /// By implementing `FromIterator` for a type, you define how it will be"}, {"sha": "83eeef31ab054cd074c3fa515a78f6ead1401594", "filename": "src/libcore/iter_private.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fiter_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fiter_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter_private.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-use iter::ExactSizeIterator;\n-\n /// An iterator whose items are random accessible efficiently\n ///\n /// # Safety"}, {"sha": "1ae4cf8e5ef5f05b37c920206786768eba05d41c", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -91,6 +91,11 @@\n #![feature(unboxed_closures)]\n #![feature(question_mark)]\n #![feature(never_type)]\n+#![feature(prelude_import)]\n+\n+#[prelude_import]\n+#[allow(unused)]\n+use prelude::v1::*;\n \n #[macro_use]\n mod macros;"}, {"sha": "0a46813df7eb82774e94d5e081598a2321963e24", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -16,10 +16,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use clone::Clone;\n use cmp;\n-use default::Default;\n-use option::Option;\n use hash::Hash;\n use hash::Hasher;\n \n@@ -414,8 +411,6 @@ pub struct PhantomData<T:?Sized>;\n impls! { PhantomData }\n \n mod impls {\n-    use super::{Send, Sync, Sized};\n-\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     unsafe impl<'a, T: Sync + ?Sized> Send for &'a T {}\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "3526e555b0ec8268da97ca38cae4f00d29b0c176", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -15,7 +15,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use marker::Sized;\n use intrinsics;\n use ptr;\n "}, {"sha": "47afaf77353ee42803a246a61d1bc98a64bb9ef1", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -13,7 +13,6 @@\n             reason = \"needs an RFC to flesh out the design\",\n             issue = \"27730\")]\n \n-use marker::Sized;\n use ops::{CoerceUnsized, Deref};\n \n /// Unsafe trait to indicate what types are usable with the NonZero struct"}, {"sha": "bc503ba3e46aedc0ccb983818e970680268b5c93", "filename": "src/libcore/num/bignum.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fbignum.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -27,8 +27,6 @@\n             issue = \"0\")]\n #![macro_use]\n \n-use prelude::v1::*;\n-\n use mem;\n use intrinsics;\n \n@@ -494,6 +492,5 @@ define_bignum!(Big32x40: type=Digit32, n=40);\n // this one is used for testing only.\n #[doc(hidden)]\n pub mod tests {\n-    use prelude::v1::*;\n     define_bignum!(Big8x3: type=u8, n=3);\n }"}, {"sha": "604bc7c10dea0aedaa886e976f1c63e392314fce", "filename": "src/libcore/num/dec2flt/algorithm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Falgorithm.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -10,7 +10,6 @@\n \n //! The various algorithms from the paper.\n \n-use prelude::v1::*;\n use cmp::min;\n use cmp::Ordering::{Less, Equal, Greater};\n use num::diy_float::Fp;\n@@ -47,7 +46,6 @@ mod fpu_precision {\n #[cfg(all(target_arch=\"x86\", not(target_feature=\"sse2\")))]\n mod fpu_precision {\n     use mem::size_of;\n-    use ops::Drop;\n \n     /// A structure used to preserve the original value of the FPU control word, so that it can be\n     /// restored when the structure is dropped."}, {"sha": "cd40e399ab95e6639ebb579e0e89776db8179b96", "filename": "src/libcore/num/dec2flt/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -92,7 +92,6 @@\n             reason = \"internal routines only exposed for testing\",\n             issue = \"0\")]\n \n-use prelude::v1::*;\n use fmt;\n use str::FromStr;\n "}, {"sha": "34b41fa9decd295703f903bb48aad4f4d4c5b0cc", "filename": "src/libcore/num/dec2flt/num.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fdec2flt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fdec2flt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fnum.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -12,7 +12,6 @@\n \n // FIXME This module's name is a bit unfortunate, since other modules also import `core::num`.\n \n-use prelude::v1::*;\n use cmp::Ordering::{self, Less, Equal, Greater};\n \n pub use num::bignum::Big32x40 as Big;"}, {"sha": "d20986faa0fc24b1dfde7fcfc65db70ab6c82e6a", "filename": "src/libcore/num/dec2flt/parse.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -20,7 +20,6 @@\n //! modules rely on to not panic (or overflow) in turn.\n //! To make matters worse, all that happens in a single pass over the input.\n //! So, be careful when modifying anything, and double-check with the other modules.\n-use prelude::v1::*;\n use super::num;\n use self::ParseResult::{Valid, ShortcutToInf, ShortcutToZero, Invalid};\n "}, {"sha": "e3b58b6cc7ce94407980d2c351e71b2a982f2565", "filename": "src/libcore/num/dec2flt/rawfp.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Frawfp.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -27,7 +27,6 @@\n //! Many functions in this module only handle normal numbers. The dec2flt routines conservatively\n //! take the universally-correct slow path (Algorithm M) for very small and very large numbers.\n //! That algorithm needs only next_float() which does handle subnormals and zeros.\n-use prelude::v1::*;\n use u32;\n use cmp::Ordering::{Less, Equal, Greater};\n use ops::{Mul, Div, Neg};"}, {"sha": "276667e44aae1a42c65a91e14d2225d805fff8db", "filename": "src/libcore/num/flt2dec/decoder.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -10,8 +10,6 @@\n \n //! Decodes a floating-point value into individual parts and error ranges.\n \n-use prelude::v1::*;\n-\n use {f32, f64};\n use num::FpCategory;\n use num::dec2flt::rawfp::RawFloat;"}, {"sha": "f6c03a59f81e4ed7750a3cda89fc5841e64a3505", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -130,7 +130,6 @@ functions.\n             reason = \"internal routines only exposed for testing\",\n             issue = \"0\")]\n \n-use prelude::v1::*;\n use i16;\n pub use self::decoder::{decode, DecodableFloat, FullDecoded, Decoded};\n "}, {"sha": "6aa4f297e75ba7f79fe6164867c36dd01ee860b5", "filename": "src/libcore/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -15,8 +15,6 @@ Almost direct (but slightly optimized) Rust translation of Figure 3 of [1].\n     quickly and accurately. SIGPLAN Not. 31, 5 (May. 1996), 108-116.\n */\n \n-use prelude::v1::*;\n-\n use cmp::Ordering;\n \n use num::flt2dec::{Decoded, MAX_SIG_DIGITS, round_up};"}, {"sha": "cf70a1978f5e6d53aa3de3fdf7b02fecfd459806", "filename": "src/libcore/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -16,8 +16,6 @@ Rust adaptation of Grisu3 algorithm described in [1]. It uses about\n     accurately with integers. SIGPLAN Not. 45, 6 (June 2010), 233-243.\n */\n \n-use prelude::v1::*;\n-\n use num::diy_float::Fp;\n use num::flt2dec::{Decoded, MAX_SIG_DIGITS, round_up};\n "}, {"sha": "29ee29eb3eb7f61584dbbf0f8b0a1a6708679e81", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -12,17 +12,11 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use char::CharExt;\n-use cmp::PartialOrd;\n-use convert::{From, TryFrom};\n+use convert::TryFrom;\n use fmt;\n use intrinsics;\n-use marker::{Copy, Sized};\n use mem::size_of;\n-use option::Option::{self, Some, None};\n-use result::Result::{self, Ok, Err};\n-use str::{FromStr, StrExt};\n-use slice::SliceExt;\n+use str::FromStr;\n \n /// Provides intentionally-wrapped arithmetic on `T`.\n ///"}, {"sha": "fd1a7c0827fa66f310ebdb5dd33a6abce7942d7a", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -71,10 +71,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use cmp::PartialOrd;\n use fmt;\n-use marker::{Sized, Unsize};\n-use result::Result::{self, Ok, Err};\n+use marker::Unsize;\n \n /// The `Drop` trait is used to run some code when a value goes out of scope.\n /// This is sometimes called a 'destructor'.\n@@ -2184,9 +2182,6 @@ pub trait FnOnce<Args> {\n }\n \n mod impls {\n-    use marker::Sized;\n-    use super::{Fn, FnMut, FnOnce};\n-\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<'a,A,F:?Sized> Fn<A> for &'a F\n         where F : Fn<A>"}, {"sha": "cf52849e019722a71797d4a300983f06f9eab291", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -139,17 +139,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use self::Option::*;\n-\n-use clone::Clone;\n-use convert::From;\n-use default::Default;\n-use iter::{Iterator, FromIterator, IntoIterator, ExactSizeIterator, DoubleEndedIterator};\n-use iter::FusedIterator;\n+use iter::{FromIterator, FusedIterator};\n use mem;\n-use ops::FnOnce;\n-use result::Result::{Ok, Err};\n-use result::Result;\n \n // Note that this is not a lang item per se, but it has a hidden dependency on\n // `Iterator`, which is one. The compiler assumes that the `next` method of"}, {"sha": "f23b407bda4c45af4f830c7b3c1ad5267666779d", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -16,17 +16,14 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use clone::Clone;\n use intrinsics;\n use ops::{CoerceUnsized, Deref};\n use fmt;\n use hash;\n-use option::Option::{self, Some, None};\n-use marker::{Copy, PhantomData, Send, Sized, Sync, Unsize};\n+use marker::{PhantomData, Unsize};\n use mem;\n use nonzero::NonZero;\n \n-use cmp::{PartialEq, Eq, Ord, PartialOrd};\n use cmp::Ordering::{self, Less, Equal, Greater};\n \n // FIXME #19649: intrinsic docs don't render, so these have no docs :("}, {"sha": "49eb5619bc6baafa72ea7b32a6e9259656e67a24", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -236,14 +236,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use self::Result::{Ok, Err};\n-\n-use clone::Clone;\n use fmt;\n-use iter::{Iterator, DoubleEndedIterator, FromIterator, ExactSizeIterator, IntoIterator};\n-use iter::FusedIterator;\n-use ops::FnOnce;\n-use option::Option::{self, None, Some};\n+use iter::{FromIterator, FusedIterator};\n \n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n ///"}, {"sha": "baa41aa7af5b274298181abc13424fe93d949a35", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -33,24 +33,15 @@\n // * The `raw` and `bytes` submodules.\n // * Boilerplate trait implementations.\n \n-use clone::Clone;\n-use cmp::{Ordering, PartialEq, PartialOrd, Eq, Ord};\n-use cmp::Ordering::{Less, Equal, Greater};\n+use cmp::Ordering::{self, Less, Equal, Greater};\n use cmp;\n-use convert::AsRef;\n-use default::Default;\n use fmt;\n use intrinsics::assume;\n use iter::*;\n-use ops::{FnMut, self};\n-use ops::RangeFull;\n-use option::Option;\n-use option::Option::{None, Some};\n-use result::Result;\n-use result::Result::{Ok, Err};\n+use ops::{self, RangeFull};\n use ptr;\n use mem;\n-use marker::{Copy, Send, Sync, self};\n+use marker;\n use iter_private::TrustedRandomAccess;\n \n #[repr(C)]"}, {"sha": "18e43c02c648fb7973fd5eb9b46722fc08e9d7dd", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -18,18 +18,10 @@ use self::pattern::Pattern;\n use self::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n \n use char;\n-use clone::Clone;\n-use convert::AsRef;\n-use default::Default;\n use fmt;\n-use iter::ExactSizeIterator;\n-use iter::{Map, Cloned, Iterator, DoubleEndedIterator, FusedIterator};\n-use marker::Sized;\n+use iter::{Map, Cloned, FusedIterator};\n use mem;\n-use ops::{Fn, FnMut, FnOnce};\n-use option::Option::{self, None, Some};\n-use result::Result::{self, Ok, Err};\n-use slice::{self, SliceExt};\n+use slice;\n \n pub mod pattern;\n \n@@ -1338,11 +1330,9 @@ Section: Trait implementations\n */\n \n mod traits {\n-    use cmp::{Ord, Ordering, PartialEq, PartialOrd, Eq};\n-    use option::Option;\n-    use option::Option::Some;\n+    use cmp::Ordering;\n     use ops;\n-    use str::{StrExt, eq_slice};\n+    use str::eq_slice;\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl Ord for str {"}, {"sha": "7dced2ba7514c2ac492167f882adcede4e7970bb", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -17,8 +17,6 @@\n             reason = \"API not fully fleshed out and ready to be stabilized\",\n             issue = \"27721\")]\n \n-use prelude::v1::*;\n-\n use cmp;\n use fmt;\n use usize;"}, {"sha": "75ddd2021a8f7fa74f9afa82b162f3820b4d6142", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -79,14 +79,8 @@\n \n use self::Ordering::*;\n \n-use marker::{Send, Sync};\n-\n use intrinsics;\n use cell::UnsafeCell;\n-\n-use result::Result::{self, Ok, Err};\n-\n-use default::Default;\n use fmt;\n \n /// A boolean type which can be safely shared between threads."}, {"sha": "c3608b60a31a7ad9d9d422681aee947e0f8add51", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ad3be1787cdd36d52fcd2355225156f5460dc4/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=e2ad3be1787cdd36d52fcd2355225156f5460dc4", "patch": "@@ -10,12 +10,8 @@\n \n // See src/libstd/primitive_docs.rs for documentation.\n \n-use clone::Clone;\n use cmp::*;\n use cmp::Ordering::*;\n-use default::Default;\n-use option::Option;\n-use option::Option::Some;\n \n // FIXME(#19630) Remove this work-around\n macro_rules! e {"}]}