{"sha": "c5fbc5048b805c57671582d70083240617b75c31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZmJjNTA0OGI4MDVjNTc2NzE1ODJkNzAwODMyNDA2MTdiNzVjMzE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-02-26T10:54:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-28T05:04:01Z"}, "message": "rustc: Remove codemap and reachable from metadata encoder", "tree": {"sha": "f7daf843fdad5ebf5b92a3f2d344470900b2bc5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7daf843fdad5ebf5b92a3f2d344470900b2bc5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5fbc5048b805c57671582d70083240617b75c31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5fbc5048b805c57671582d70083240617b75c31", "html_url": "https://github.com/rust-lang/rust/commit/c5fbc5048b805c57671582d70083240617b75c31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5fbc5048b805c57671582d70083240617b75c31/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3a251a41021ae0f8c0d97235d9da9d38e0d9f4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a251a41021ae0f8c0d97235d9da9d38e0d9f4a", "html_url": "https://github.com/rust-lang/rust/commit/e3a251a41021ae0f8c0d97235d9da9d38e0d9f4a"}], "stats": {"total": 18, "additions": 1, "deletions": 17}, "files": [{"sha": "285a7411270fff896675da0bf6f4240cfcacdedc", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbc5048b805c57671582d70083240617b75c31/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbc5048b805c57671582d70083240617b75c31/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=c5fbc5048b805c57671582d70083240617b75c31", "patch": "@@ -40,7 +40,6 @@ use syntax::ast_util::*;\n use syntax::ast_util;\n use syntax::attr::AttrMetaMethods;\n use syntax::attr;\n-use syntax::codemap;\n use syntax::diagnostic::SpanHandler;\n use syntax::parse::token::InternedString;\n use syntax::parse::token::special_idents;\n@@ -73,8 +72,6 @@ pub struct EncodeParams<'a> {\n     link_meta: &'a LinkMeta,\n     cstore: @cstore::CStore,\n     encode_inlined_item: EncodeInlinedItem<'a>,\n-    reachable: @RefCell<HashSet<ast::NodeId>>,\n-    codemap: @codemap::CodeMap,\n }\n \n struct Stats {\n@@ -104,13 +101,6 @@ pub struct EncodeContext<'a> {\n     cstore: &'a cstore::CStore,\n     encode_inlined_item: EncodeInlinedItem<'a>,\n     type_abbrevs: abbrev_map,\n-    reachable: @RefCell<HashSet<ast::NodeId>>,\n-    codemap: @codemap::CodeMap,\n-}\n-\n-pub fn reachable(ecx: &EncodeContext, id: NodeId) -> bool {\n-    let reachable = ecx.reachable.borrow();\n-    reachable.get().contains(&id)\n }\n \n fn encode_name(ebml_w: &mut writer::Encoder, name: Name) {\n@@ -1630,7 +1620,7 @@ impl<'a, 'b> Visitor<()> for MacroDefVisitor<'a, 'b> {\n     fn visit_item(&mut self, item: &Item, _: ()) {\n         match item.node {\n             ItemMac(..) => {\n-                let def = self.ecx.codemap.span_to_snippet(item.span)\n+                let def = self.ecx.tcx.sess.codemap.span_to_snippet(item.span)\n                     .expect(\"Unable to find source for macro\");\n                 self.ebml_w.start_tag(tag_macro_def);\n                 self.ebml_w.wr_str(def);\n@@ -1796,9 +1786,7 @@ fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, krate: &Crate)\n         cstore,\n         encode_inlined_item,\n         link_meta,\n-        reachable,\n         non_inlineable_statics,\n-        codemap,\n         ..\n     } = parms;\n     let type_abbrevs = @RefCell::new(HashMap::new());\n@@ -1814,8 +1802,6 @@ fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, krate: &Crate)\n         cstore: cstore,\n         encode_inlined_item: encode_inlined_item,\n         type_abbrevs: type_abbrevs,\n-        reachable: reachable,\n-        codemap: codemap,\n      };\n \n     let mut ebml_w = writer::Encoder(wr);"}, {"sha": "6a7694b2b81a1aa1dfb698f40987776630b33c4e", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbc5048b805c57671582d70083240617b75c31/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbc5048b805c57671582d70083240617b75c31/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=c5fbc5048b805c57671582d70083240617b75c31", "patch": "@@ -2552,8 +2552,6 @@ pub fn crate_ctxt_to_encode_parms<'r>(cx: &'r CrateContext, ie: encoder::EncodeI\n             link_meta: link_meta,\n             cstore: cx.sess.cstore,\n             encode_inlined_item: ie,\n-            reachable: cx.reachable,\n-            codemap: cx.sess.codemap,\n         }\n }\n "}]}