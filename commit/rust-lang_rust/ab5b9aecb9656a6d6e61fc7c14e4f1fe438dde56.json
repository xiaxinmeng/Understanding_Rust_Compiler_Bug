{"sha": "ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNWI5YWVjYjk2NTZhNmQ2ZTYxZmM3YzE0ZTRmMWZlNDM4ZGRlNTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-04T13:23:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-04T13:23:08Z"}, "message": "Auto merge of #80651 - GroteGnoom:issue-78123-fix, r=Nadrieril\n\nAdd note to non-exhaustive match on reference to empty\n\nRust prints \"type `&A` is non-empty\" even is A is empty.\nThis is the intended behavior, but can be confusing.\nThis commit adds a note to non-exhaustive pattern errors if they are a\nreference to something uninhabited.\n\nI did not add tests to check that the note is not shown for\nnon-references or inhabited references, because this is already done\nin other tests.\n\nMaybe the added test is superfluous, because\n`always-inhabited-union-ref` already checks for this case.\n\nThis does not handle &&Void or &&&void etc. I could add those as special\ncases as well and ignore people who need quadruple\nreferences.\n\nFixes #78123", "tree": {"sha": "75fd2c4bd5bddefb4f3f2535f9953276ff25de22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75fd2c4bd5bddefb4f3f2535f9953276ff25de22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56", "html_url": "https://github.com/rust-lang/rust/commit/ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6163bfdcce6404c5d61d6ab441bf49a831082194", "url": "https://api.github.com/repos/rust-lang/rust/commits/6163bfdcce6404c5d61d6ab441bf49a831082194", "html_url": "https://github.com/rust-lang/rust/commit/6163bfdcce6404c5d61d6ab441bf49a831082194"}, {"sha": "914bc1717877b7f2520e7b95435ee70742a14ba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/914bc1717877b7f2520e7b95435ee70742a14ba3", "html_url": "https://github.com/rust-lang/rust/commit/914bc1717877b7f2520e7b95435ee70742a14ba3"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "a70c1a28176cd82e7d154e9262cf6084e43b418b", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56", "patch": "@@ -503,6 +503,11 @@ fn non_exhaustive_match<'p, 'tcx>(\n             ));\n         }\n     }\n+    if let ty::Ref(_, sub_ty, _) = scrut_ty.kind() {\n+        if cx.tcx.is_ty_uninhabited_from(cx.module, sub_ty, cx.param_env) {\n+            err.note(\"references are always considered inhabited\");\n+        }\n+    }\n     err.emit();\n }\n "}, {"sha": "2ca774a48b66b73339ca92b4260f8c627334d6ae", "filename": "src/test/ui/pattern/usefulness/always-inhabited-union-ref.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr?ref=ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56", "patch": "@@ -6,6 +6,7 @@ LL |     match uninhab_ref() {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&!`\n+   = note: references are always considered inhabited\n \n error[E0004]: non-exhaustive patterns: type `Foo` is non-empty\n   --> $DIR/always-inhabited-union-ref.rs:27:11"}, {"sha": "6c5a331b4b564ebdc5e372b72e38242c75ccf53a", "filename": "src/test/ui/pattern/usefulness/issue-78123-non-exhaustive-reference.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-78123-non-exhaustive-reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-78123-non-exhaustive-reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-78123-non-exhaustive-reference.rs?ref=ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56", "patch": "@@ -0,0 +1,11 @@\n+enum A {}\n+    //~^ NOTE `A` defined here\n+\n+fn f(a: &A) {\n+    match a {}\n+    //~^ ERROR non-exhaustive patterns: type `&A` is non-empty\n+    //~| NOTE the matched value is of type `&A`\n+    //~| NOTE references are always considered inhabited\n+}\n+\n+fn main() {}"}, {"sha": "e992632a91faf3dfdcac41901824f2dd4842400b", "filename": "src/test/ui/pattern/usefulness/issue-78123-non-exhaustive-reference.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-78123-non-exhaustive-reference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-78123-non-exhaustive-reference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-78123-non-exhaustive-reference.stderr?ref=ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56", "patch": "@@ -0,0 +1,16 @@\n+error[E0004]: non-exhaustive patterns: type `&A` is non-empty\n+  --> $DIR/issue-78123-non-exhaustive-reference.rs:5:11\n+   |\n+LL | enum A {}\n+   | --------- `A` defined here\n+...\n+LL |     match a {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&A`\n+   = note: references are always considered inhabited\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "7b999f507739bcb8df27a5e98e76fefef3f79890", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=ab5b9aecb9656a6d6e61fc7c14e4f1fe438dde56", "patch": "@@ -23,6 +23,7 @@ LL |     let _ = match x {};\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `&Void`\n+   = note: references are always considered inhabited\n \n error[E0004]: non-exhaustive patterns: type `(Void,)` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:18:19"}]}