{"sha": "d4b536f540308c52242c9519ff10fda03a08ce61", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YjUzNmY1NDAzMDhjNTIyNDJjOTUxOWZmMTBmZGEwM2EwOGNlNjE=", "commit": {"author": {"name": "Evan Simmons", "email": "esims89@gmail.com", "date": "2018-05-02T18:40:52Z"}, "committer": {"name": "Evan Simmons", "email": "esims89@gmail.com", "date": "2018-05-05T16:45:14Z"}, "message": "Fix 1x..x.0 false positive, pretty suggestion", "tree": {"sha": "d47ed1729fc9761457efeb1a7b3f38ef0a406e15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d47ed1729fc9761457efeb1a7b3f38ef0a406e15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4b536f540308c52242c9519ff10fda03a08ce61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4b536f540308c52242c9519ff10fda03a08ce61", "html_url": "https://github.com/rust-lang/rust/commit/d4b536f540308c52242c9519ff10fda03a08ce61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4b536f540308c52242c9519ff10fda03a08ce61/comments", "author": {"login": "estk", "id": 390090, "node_id": "MDQ6VXNlcjM5MDA5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/390090?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estk", "html_url": "https://github.com/estk", "followers_url": "https://api.github.com/users/estk/followers", "following_url": "https://api.github.com/users/estk/following{/other_user}", "gists_url": "https://api.github.com/users/estk/gists{/gist_id}", "starred_url": "https://api.github.com/users/estk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estk/subscriptions", "organizations_url": "https://api.github.com/users/estk/orgs", "repos_url": "https://api.github.com/users/estk/repos", "events_url": "https://api.github.com/users/estk/events{/privacy}", "received_events_url": "https://api.github.com/users/estk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estk", "id": 390090, "node_id": "MDQ6VXNlcjM5MDA5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/390090?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estk", "html_url": "https://github.com/estk", "followers_url": "https://api.github.com/users/estk/followers", "following_url": "https://api.github.com/users/estk/following{/other_user}", "gists_url": "https://api.github.com/users/estk/gists{/gist_id}", "starred_url": "https://api.github.com/users/estk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estk/subscriptions", "organizations_url": "https://api.github.com/users/estk/orgs", "repos_url": "https://api.github.com/users/estk/repos", "events_url": "https://api.github.com/users/estk/events{/privacy}", "received_events_url": "https://api.github.com/users/estk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0557359ecd3bef978919879abd166129c36b656f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0557359ecd3bef978919879abd166129c36b656f", "html_url": "https://github.com/rust-lang/rust/commit/0557359ecd3bef978919879abd166129c36b656f"}], "stats": {"total": 176, "additions": 108, "deletions": 68}, "files": [{"sha": "553476f63c96c3c921be0a599b6f9ab1ac22bbe9", "filename": "clippy_lints/src/excessive_precision.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d4b536f540308c52242c9519ff10fda03a08ce61/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4b536f540308c52242c9519ff10fda03a08ce61/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=d4b536f540308c52242c9519ff10fda03a08ce61", "patch": "@@ -69,13 +69,16 @@ impl ExcessivePrecision {\n     fn check(&self, sym: &Symbol, fty: &FloatTy) -> Option<String> {\n         let max = max_digits(fty);\n         let sym_str = sym.as_str();\n-        let formatter = FloatFormat::new(&sym_str);\n-        let digits = count_digits(&sym_str);\n+        if dot_zero_exclusion(&sym_str) {\n+            return None\n+        }\n         // Try to bail out if the float is for sure fine.\n         // If its within the 2 decimal digits of being out of precision we\n         // check if the parsed representation is the same as the string\n         // since we'll need the truncated string anyway.\n+        let digits = count_digits(&sym_str);\n         if digits > max as usize {\n+            let formatter = FloatFormat::new(&sym_str);\n             let sr = match *fty {\n                 FloatTy::F32 => sym_str.parse::<f32>().map(|f| formatter.format(f)),\n                 FloatTy::F64 => sym_str.parse::<f64>().map(|f| formatter.format(f)),\n@@ -86,22 +89,42 @@ impl ExcessivePrecision {\n             if sym_str == s {\n                 None\n             } else {\n-                Some(s)\n+                let di = super::literal_representation::DigitInfo::new(&s, true);\n+                Some(di.grouping_hint())\n             }\n         } else {\n             None\n         }\n     }\n }\n \n+/// Should we exclude the float because it has a .0 suffix\n+/// Ex 1_000_000_000.0\n+fn dot_zero_exclusion(s: &str) -> bool {\n+    if let Some(after_dec) = s.split('.').nth(1) {\n+        let mut decpart = after_dec\n+            .chars()\n+            .take_while(|c| *c != 'e' || *c != 'E');\n+\n+        match decpart.next() {\n+            Some('0') => decpart.count() == 0,\n+            _ => false,\n+        }\n+    } else {\n+        false\n+    }\n+}\n+\n fn max_digits(fty: &FloatTy) -> u32 {\n     match fty {\n         FloatTy::F32 => f32::DIGITS,\n         FloatTy::F64 => f64::DIGITS,\n     }\n }\n \n+/// Counts the digits excluding leading zeros\n fn count_digits(s: &str) -> usize {\n+    // Note that s does not contain the f32/64 suffix\n     s.chars()\n         .filter(|c| *c != '-' || *c != '.')\n         .take_while(|c| *c != 'e' || *c != 'E')"}, {"sha": "6c2351d43ddab1e32e417656c5e3127f0fee56cb", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4b536f540308c52242c9519ff10fda03a08ce61/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4b536f540308c52242c9519ff10fda03a08ce61/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=d4b536f540308c52242c9519ff10fda03a08ce61", "patch": "@@ -81,7 +81,7 @@ declare_clippy_lint! {\n }\n \n #[derive(Debug, PartialEq)]\n-enum Radix {\n+pub(super) enum Radix {\n     Binary,\n     Octal,\n     Decimal,\n@@ -99,7 +99,7 @@ impl Radix {\n }\n \n #[derive(Debug)]\n-struct DigitInfo<'a> {\n+pub(super) struct DigitInfo<'a> {\n     /// Characters of a literal between the radix prefix and type suffix.\n     pub digits: &'a str,\n     /// Which radix the literal was represented in.\n@@ -160,7 +160,7 @@ impl<'a> DigitInfo<'a> {\n     }\n \n     /// Returns digits grouped in a sensible way.\n-    fn grouping_hint(&self) -> String {\n+    pub fn grouping_hint(&self) -> String {\n         let group_size = self.radix.suggest_grouping();\n         if self.digits.contains('.') {\n             let mut parts = self.digits.split('.');"}, {"sha": "47e73aa0bcd3563c66b76db735bfdb6e68f6bb41", "filename": "tests/ui/excessive_precision.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d4b536f540308c52242c9519ff10fda03a08ce61/tests%2Fui%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4b536f540308c52242c9519ff10fda03a08ce61/tests%2Fui%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.rs?ref=d4b536f540308c52242c9519ff10fda03a08ce61", "patch": "@@ -3,45 +3,50 @@\n #![allow(print_literal)]\n \n fn main() {\n-    // TODO add prefix tests\n     // Consts\n-    const GOOD32_SUF: f32 = 0.123_456_f32;\n     const GOOD32: f32 = 0.123_456;\n     const GOOD32_SM: f32 = 0.000_000_000_1;\n+    const GOOD32_DOT: f32 = 10_000_000_000.0;\n+    const GOOD32_EDGE: f32 = 1.000_000_8;\n     const GOOD64: f64 = 0.123_456_789_012;\n     const GOOD64_SM: f32 = 0.000_000_000_000_000_1;\n+    const GOOD64_DOT: f32 = 10_000_000_000_000_000.0;\n \n     const BAD32_1: f32 = 0.123_456_789_f32;\n     const BAD32_2: f32 = 0.123_456_789;\n     const BAD32_3: f32 = 0.100_000_000_000_1;\n+    const BAD32_EDGE: f32 = 1.000_000_9;\n \n     const BAD64_1: f64 = 0.123_456_789_012_345_67f64;\n     const BAD64_2: f64 = 0.123_456_789_012_345_67;\n     const BAD64_3: f64 = 0.100_000_000_000_000_000_1;\n \n-    // Literal\n+    // Literal as param\n     println!(\"{}\", 8.888_888_888_888_888_888_888);\n \n-    // TODO add inferred type tests for f32\n-    // TODO add tests cases exactly on the edge\n+    // // TODO add inferred type tests for f32\n     // Locals\n     let good32: f32 = 0.123_456_f32;\n     let good32_2: f32 = 0.123_456;\n \n-    let good64: f64 = 0.123_456_789_012f64;\n     let good64: f64 = 0.123_456_789_012;\n-    let good64_2 = 0.123_456_789_012;\n+    let good64_suf: f64 = 0.123_456_789_012f64;\n+    let good64_inf = 0.123_456_789_012;\n \n-    let bad32_1: f32 = 1.123_456_789_f32;\n-    let bad32_2: f32 = 1.123_456_789;\n+    let bad32: f32 = 1.123_456_789;\n+    let bad32_suf: f32 = 1.123_456_789_f32;\n+    let bad32_inf = 1.123_456_789_f32;\n \n-    let bad64_1: f64 = 0.123_456_789_012_345_67f64;\n-    let bad64_2: f64 = 0.123_456_789_012_345_67;\n-    let bad64_3 = 0.123_456_789_012_345_67;\n+    let bad64: f64 = 0.123_456_789_012_345_67;\n+    let bad64_suf: f64 = 0.123_456_789_012_345_67f64;\n+    let bad64_inf = 0.123_456_789_012_345_67;\n \n-    // TODO Vectors / nested vectors\n-    let vec32: Vec<f32> = vec![0.123_456_789];\n-    let vec64: Vec<f64> = vec![0.123_456_789_123_456_789];\n+    // Vectors\n+    let good_vec32: Vec<f32> = vec![0.123_456];\n+    let good_vec64: Vec<f64> = vec![0.123_456_789];\n+\n+    let bad_vec32: Vec<f32> = vec![0.123_456_789];\n+    let bad_vec64: Vec<f64> = vec![0.123_456_789_123_456_789];\n \n     // Exponential float notation\n     let good_e32: f32 = 1e-10;"}, {"sha": "a167deac03891c4ef9c6270f2f8a69ee24a86c47", "filename": "tests/ui/excessive_precision.stderr", "status": "modified", "additions": 59, "deletions": 47, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/d4b536f540308c52242c9519ff10fda03a08ce61/tests%2Fui%2Fexcessive_precision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4b536f540308c52242c9519ff10fda03a08ce61/tests%2Fui%2Fexcessive_precision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.stderr?ref=d4b536f540308c52242c9519ff10fda03a08ce61", "patch": "@@ -1,100 +1,112 @@\n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:14:26\n+  --> $DIR/excessive_precision.rs:15:26\n    |\n-14 |     const BAD32_1: f32 = 0.123_456_789_f32;\n-   |                          ^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.12345679`\n+15 |     const BAD32_1: f32 = 0.123_456_789_f32;\n+   |                          ^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_79`\n    |\n    = note: `-D excessive-precision` implied by `-D warnings`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:15:26\n+  --> $DIR/excessive_precision.rs:16:26\n    |\n-15 |     const BAD32_2: f32 = 0.123_456_789;\n-   |                          ^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.12345679`\n+16 |     const BAD32_2: f32 = 0.123_456_789;\n+   |                          ^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_79`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:16:26\n+  --> $DIR/excessive_precision.rs:17:26\n    |\n-16 |     const BAD32_3: f32 = 0.100_000_000_000_1;\n+17 |     const BAD32_3: f32 = 0.100_000_000_000_1;\n    |                          ^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.1`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:18:26\n+  --> $DIR/excessive_precision.rs:18:29\n    |\n-18 |     const BAD64_1: f64 = 0.123_456_789_012_345_67f64;\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.12345678901234566`\n+18 |     const BAD32_EDGE: f32 = 1.000_000_9;\n+   |                             ^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.000_001`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:19:26\n+  --> $DIR/excessive_precision.rs:20:26\n    |\n-19 |     const BAD64_2: f64 = 0.123_456_789_012_345_67;\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.12345678901234566`\n+20 |     const BAD64_1: f64 = 0.123_456_789_012_345_67f64;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_789_012_345_66`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:20:26\n+  --> $DIR/excessive_precision.rs:21:26\n    |\n-20 |     const BAD64_3: f64 = 0.100_000_000_000_000_000_1;\n+21 |     const BAD64_2: f64 = 0.123_456_789_012_345_67;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_789_012_345_66`\n+\n+error: float has excessive precision\n+  --> $DIR/excessive_precision.rs:22:26\n+   |\n+22 |     const BAD64_3: f64 = 0.100_000_000_000_000_000_1;\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.1`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:23:20\n+  --> $DIR/excessive_precision.rs:25:20\n+   |\n+25 |     println!(\"{}\", 8.888_888_888_888_888_888_888);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `8.888_888_888_888_89`\n+\n+error: float has excessive precision\n+  --> $DIR/excessive_precision.rs:36:22\n    |\n-23 |     println!(\"{}\", 8.888_888_888_888_888_888_888);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `8.88888888888889`\n+36 |     let bad32: f32 = 1.123_456_789;\n+   |                      ^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.123_456_8`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:35:24\n+  --> $DIR/excessive_precision.rs:37:26\n    |\n-35 |     let bad32_1: f32 = 1.123_456_789_f32;\n-   |                        ^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.1234568`\n+37 |     let bad32_suf: f32 = 1.123_456_789_f32;\n+   |                          ^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.123_456_8`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:36:24\n+  --> $DIR/excessive_precision.rs:38:21\n    |\n-36 |     let bad32_2: f32 = 1.123_456_789;\n-   |                        ^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.1234568`\n+38 |     let bad32_inf = 1.123_456_789_f32;\n+   |                     ^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.123_456_8`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:38:24\n+  --> $DIR/excessive_precision.rs:40:22\n    |\n-38 |     let bad64_1: f64 = 0.123_456_789_012_345_67f64;\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.12345678901234566`\n+40 |     let bad64: f64 = 0.123_456_789_012_345_67;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_789_012_345_66`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:39:24\n+  --> $DIR/excessive_precision.rs:41:26\n    |\n-39 |     let bad64_2: f64 = 0.123_456_789_012_345_67;\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.12345678901234566`\n+41 |     let bad64_suf: f64 = 0.123_456_789_012_345_67f64;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_789_012_345_66`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:40:19\n+  --> $DIR/excessive_precision.rs:42:21\n    |\n-40 |     let bad64_3 = 0.123_456_789_012_345_67;\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.12345678901234566`\n+42 |     let bad64_inf = 0.123_456_789_012_345_67;\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_789_012_345_66`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:43:32\n+  --> $DIR/excessive_precision.rs:48:36\n    |\n-43 |     let vec32: Vec<f32> = vec![0.123_456_789];\n-   |                                ^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.12345679`\n+48 |     let bad_vec32: Vec<f32> = vec![0.123_456_789];\n+   |                                    ^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_79`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:44:32\n+  --> $DIR/excessive_precision.rs:49:36\n    |\n-44 |     let vec64: Vec<f64> = vec![0.123_456_789_123_456_789];\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.12345678912345678`\n+49 |     let bad_vec64: Vec<f64> = vec![0.123_456_789_123_456_789];\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_789_123_456_78`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:48:24\n+  --> $DIR/excessive_precision.rs:53:24\n    |\n-48 |     let bad_e32: f32 = 1.123_456_788_888e-10;\n-   |                        ^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.1234568e-10`\n+53 |     let bad_e32: f32 = 1.123_456_788_888e-10;\n+   |                        ^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.123_456_8e-10`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:51:27\n+  --> $DIR/excessive_precision.rs:56:27\n    |\n-51 |     let bad_bige32: f32 = 1.123_456_788_888E-10;\n-   |                           ^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.1234568E-10`\n+56 |     let bad_bige32: f32 = 1.123_456_788_888E-10;\n+   |                           ^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.123_456_8E-10`\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 18 previous errors\n "}]}