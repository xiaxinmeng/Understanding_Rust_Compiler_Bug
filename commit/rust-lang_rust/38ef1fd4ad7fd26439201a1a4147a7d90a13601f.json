{"sha": "38ef1fd4ad7fd26439201a1a4147a7d90a13601f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZWYxZmQ0YWQ3ZmQyNjQzOTIwMWExYTQxNDdhN2Q5MGExMzYwMWY=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-14T09:59:23Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-16T19:19:06Z"}, "message": "Better filter mod paths", "tree": {"sha": "5966e1410112455b0ec4957befb311bba41f03bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5966e1410112455b0ec4957befb311bba41f03bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38ef1fd4ad7fd26439201a1a4147a7d90a13601f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38ef1fd4ad7fd26439201a1a4147a7d90a13601f", "html_url": "https://github.com/rust-lang/rust/commit/38ef1fd4ad7fd26439201a1a4147a7d90a13601f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38ef1fd4ad7fd26439201a1a4147a7d90a13601f/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee99620754cdcfbab28a2c067dfa31087376d6c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee99620754cdcfbab28a2c067dfa31087376d6c3", "html_url": "https://github.com/rust-lang/rust/commit/ee99620754cdcfbab28a2c067dfa31087376d6c3"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "ff5c0e78ee8c20f2d2ea70859f17b4a925bebc3d", "filename": "crates/assists/src/utils/import_assets.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38ef1fd4ad7fd26439201a1a4147a7d90a13601f/crates%2Fassists%2Fsrc%2Futils%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ef1fd4ad7fd26439201a1a4147a7d90a13601f/crates%2Fassists%2Fsrc%2Futils%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils%2Fimport_assets.rs?ref=38ef1fd4ad7fd26439201a1a4147a7d90a13601f", "patch": "@@ -195,7 +195,7 @@ impl ImportAssets {\n                     }\n                     .map(|path| (path, item))\n                 })\n-                .filter(|(use_path, _)| !use_path.segments.is_empty())\n+                .filter(|(use_path, _)| use_path.len() > 1)\n                 .take(20)\n                 .collect::<Vec<_>>();\n         res.sort_by_key(|(path, _)| path.clone());"}, {"sha": "7ce92a07bf23fa6ebb692cde33e2a0740a5fece5", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/38ef1fd4ad7fd26439201a1a4147a7d90a13601f/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ef1fd4ad7fd26439201a1a4147a7d90a13601f/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=38ef1fd4ad7fd26439201a1a4147a7d90a13601f", "patch": "@@ -47,6 +47,30 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     fuzzy_completion(acc, ctx).unwrap_or_default()\n }\n \n+fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &Type) {\n+    if let Some(Adt::Enum(enum_data)) = ty.as_adt() {\n+        let variants = enum_data.variants(ctx.db);\n+\n+        let module = if let Some(module) = ctx.scope.module() {\n+            // Compute path from the completion site if available.\n+            module\n+        } else {\n+            // Otherwise fall back to the enum's definition site.\n+            enum_data.module(ctx.db)\n+        };\n+\n+        for variant in variants {\n+            if let Some(path) = module.find_use_path(ctx.db, ModuleDef::from(variant)) {\n+                // Variants with trivial paths are already added by the existing completion logic,\n+                // so we should avoid adding these twice\n+                if path.segments.len() > 1 {\n+                    acc.add_qualified_enum_variant(ctx, variant, path);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n // TODO kb add a setting toggle for this feature?\n fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     let _p = profile::span(\"fuzzy_completion\u00ae\");\n@@ -71,6 +95,7 @@ fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n                     ScopeDef::MacroDef(macro_def),\n                 )),\n             })\n+            .filter(|(mod_path, _)| mod_path.len() > 1)\n             .filter_map(|(mod_path, definition)| {\n                 let mut resolution_with_missing_import = render_resolution(\n                     RenderContext::new(ctx),\n@@ -89,36 +114,13 @@ fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n                 resolution_with_missing_import.update_text_edit(text_edits.finish());\n \n                 Some(resolution_with_missing_import)\n-            });\n+            })\n+            .take(20);\n \n     acc.add_all(possible_imports);\n     Some(())\n }\n \n-fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &Type) {\n-    if let Some(Adt::Enum(enum_data)) = ty.as_adt() {\n-        let variants = enum_data.variants(ctx.db);\n-\n-        let module = if let Some(module) = ctx.scope.module() {\n-            // Compute path from the completion site if available.\n-            module\n-        } else {\n-            // Otherwise fall back to the enum's definition site.\n-            enum_data.module(ctx.db)\n-        };\n-\n-        for variant in variants {\n-            if let Some(path) = module.find_use_path(ctx.db, ModuleDef::from(variant)) {\n-                // Variants with trivial paths are already added by the existing completion logic,\n-                // so we should avoid adding these twice\n-                if path.segments.len() > 1 {\n-                    acc.add_qualified_enum_variant(ctx, variant, path);\n-                }\n-            }\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};"}]}