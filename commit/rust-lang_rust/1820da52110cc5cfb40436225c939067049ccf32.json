{"sha": "1820da52110cc5cfb40436225c939067049ccf32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MjBkYTUyMTEwY2M1Y2ZiNDA0MzYyMjVjOTM5MDY3MDQ5Y2NmMzI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-15T18:55:10Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-15T19:12:25Z"}, "message": "Move diagnostic logic to its own module\n\n- Move specialized borrow checker diagnostic for bindings escaping its\n  closure to its own module.\n- Move affected tests to `ui`.", "tree": {"sha": "bef57cf7de150c7d4c47dadfedbcc9568cea9532", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bef57cf7de150c7d4c47dadfedbcc9568cea9532"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1820da52110cc5cfb40436225c939067049ccf32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1820da52110cc5cfb40436225c939067049ccf32", "html_url": "https://github.com/rust-lang/rust/commit/1820da52110cc5cfb40436225c939067049ccf32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1820da52110cc5cfb40436225c939067049ccf32/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a1afd74a643cead4794094e286adc9cf5ae2009", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a1afd74a643cead4794094e286adc9cf5ae2009", "html_url": "https://github.com/rust-lang/rust/commit/1a1afd74a643cead4794094e286adc9cf5ae2009"}], "stats": {"total": 352, "additions": 289, "deletions": 63}, "files": [{"sha": "541c1356dd4abbd73ae604adf5c2a22c499b8786", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 37, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1820da52110cc5cfb40436225c939067049ccf32/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1820da52110cc5cfb40436225c939067049ccf32/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=1820da52110cc5cfb40436225c939067049ccf32", "patch": "@@ -66,7 +66,7 @@ use hir::map as hir_map;\n use hir::def_id::DefId;\n use middle::region;\n use traits::{ObligationCause, ObligationCauseCode};\n-use ty::{self, Region, RegionKind, Ty, TyCtxt, TypeFoldable, TypeVariants};\n+use ty::{self, Region, Ty, TyCtxt, TypeFoldable, TypeVariants};\n use ty::error::TypeError;\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::{Pos, Span};\n@@ -1068,42 +1068,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                sup_origin: SubregionOrigin<'tcx>,\n                                sup_region: Region<'tcx>) {\n \n-        // #45983: when trying to assign the contents of an argument to a binding outside of a\n-        // closure, provide a specific message pointing this out.\n-        if let (&SubregionOrigin::BindingTypeIsNotValidAtDecl(ref external_span),\n-                &RegionKind::ReFree(ref free_region)) = (&sub_origin, sup_region) {\n-            let hir = &self.tcx.hir;\n-            if let Some(node_id) = hir.as_local_node_id(free_region.scope) {\n-                match hir.get(node_id) {\n-                    hir_map::NodeExpr(hir::Expr {\n-                        node: hir::ExprClosure(_, _, _, closure_span, false),\n-                        ..\n-                    }) => {\n-                        let sup_sp = sup_origin.span();\n-                        let origin_sp = var_origin.span();\n-                        let mut err = self.tcx.sess.struct_span_err(\n-                            sup_sp,\n-                            \"borrowed data cannot be moved outside of its closure\");\n-                        err.span_label(sup_sp, \"cannot be moved outside of its closure\");\n-                        if sup_sp == origin_sp {\n-                            err.span_label(*external_span,\n-                                           \"borrowed data cannot be moved into here...\");\n-                            err.span_label(*closure_span,\n-                                           \"...because it cannot outlive this closure\");\n-                        } else {\n-                            err.span_label(*closure_span,\n-                                           \"borrowed data cannot outlive this closure\");\n-                            err.span_label(origin_sp,\n-                                           \"cannot infer an appropriate lifetime\");\n-                        }\n-                        err.emit();\n-                        return;\n-                    }\n-                    _ => {}\n-                }\n-            }\n-        }\n-\n         let mut err = self.report_inference_failure(var_origin);\n \n         self.tcx.note_and_explain_region(region_scope_tree, &mut err,"}, {"sha": "7b0f2933580b39429b2354fb25c0fd2fb1f49741", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1820da52110cc5cfb40436225c939067049ccf32/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1820da52110cc5cfb40436225c939067049ccf32/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=1820da52110cc5cfb40436225c939067049ccf32", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     ///\n     /// It will later be extended to trait objects.\n     pub(super) fn try_report_anon_anon_conflict(&self) -> Option<ErrorReported> {\n-        let NiceRegionError { span, sub, sup, .. } = *self;\n+        let (span, sub, sup) = self.get_regions();\n \n         // Determine whether the sub and sup consist of both anonymous (elided) regions.\n         let anon_reg_sup = self.is_suitable_region(sup)?;"}, {"sha": "59b36a50a2b09d2dcb5c774bec1d1f8bb7581191", "filename": "src/librustc/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1820da52110cc5cfb40436225c939067049ccf32/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1820da52110cc5cfb40436225c939067049ccf32/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=1820da52110cc5cfb40436225c939067049ccf32", "patch": "@@ -18,46 +18,64 @@ use util::common::ErrorReported;\n mod different_lifetimes;\n mod find_anon_type;\n mod named_anon_conflict;\n+mod outlives_closure;\n mod util;\n \n impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     pub fn try_report_nice_region_error(&self, error: &RegionResolutionError<'tcx>) -> bool {\n-        let (span, sub, sup) = match *error {\n-            ConcreteFailure(ref origin, sub, sup) => (origin.span(), sub, sup),\n-            SubSupConflict(_, ref origin, sub, _, sup) => (origin.span(), sub, sup),\n-            _ => return false, // inapplicable\n-        };\n+        match *error {\n+            ConcreteFailure(..) | SubSupConflict(..) => {}\n+            _ => return false,  // inapplicable\n+        }\n \n         if let Some(tables) = self.in_progress_tables {\n             let tables = tables.borrow();\n-            NiceRegionError::new(self.tcx, span, sub, sup, Some(&tables)).try_report().is_some()\n+            NiceRegionError::new(self.tcx, error.clone(), Some(&tables)).try_report().is_some()\n         } else {\n-            NiceRegionError::new(self.tcx, span, sub, sup, None).try_report().is_some()\n+            NiceRegionError::new(self.tcx, error.clone(), None).try_report().is_some()\n         }\n     }\n }\n \n pub struct NiceRegionError<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n-    span: Span,\n-    sub: ty::Region<'tcx>,\n-    sup: ty::Region<'tcx>,\n+    error: Option<RegionResolutionError<'tcx>>,\n+    regions: Option<(Span, ty::Region<'tcx>, ty::Region<'tcx>)>,\n     tables: Option<&'cx ty::TypeckTables<'tcx>>,\n }\n \n impl<'cx, 'gcx, 'tcx> NiceRegionError<'cx, 'gcx, 'tcx> {\n     pub fn new(\n+        tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n+        error: RegionResolutionError<'tcx>,\n+        tables: Option<&'cx ty::TypeckTables<'tcx>>,\n+    ) -> Self {\n+        Self { tcx, error: Some(error), regions: None, tables }\n+    }\n+\n+    pub fn new_from_span(\n         tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n         span: Span,\n         sub: ty::Region<'tcx>,\n         sup: ty::Region<'tcx>,\n         tables: Option<&'cx ty::TypeckTables<'tcx>>,\n     ) -> Self {\n-        Self { tcx, span, sub, sup, tables }\n+        Self { tcx, error: None, regions: Some((span, sub, sup)), tables }\n     }\n \n     pub fn try_report(&self) -> Option<ErrorReported> {\n         self.try_report_named_anon_conflict()\n             .or_else(|| self.try_report_anon_anon_conflict())\n+            .or_else(|| self.try_report_outlives_closure())\n+    }\n+\n+    pub fn get_regions(&self) -> (Span, ty::Region<'tcx>, ty::Region<'tcx>) {\n+        match (&self.error, self.regions) {\n+            (&Some(ConcreteFailure(ref origin, sub, sup)), None) => (origin.span(), sub, sup),\n+            (&Some(SubSupConflict(_, ref origin, sub, _, sup)), None) => (origin.span(), sub, sup),\n+            (None, Some((span, sub, sup))) => (span, sub, sup),\n+            (Some(_), Some(_)) => panic!(\"incorrectly built NiceRegionError\"),\n+            _ => panic!(\"trying to report on an incorrect lifetime failure\"),\n+        }\n     }\n }"}, {"sha": "657480c486c870ab0c82d023f066d1d4251848c5", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1820da52110cc5cfb40436225c939067049ccf32/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1820da52110cc5cfb40436225c939067049ccf32/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=1820da52110cc5cfb40436225c939067049ccf32", "patch": "@@ -18,7 +18,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with arguments containing a named region and\n     /// an anonymous region, emit an descriptive diagnostic error.\n     pub(super) fn try_report_named_anon_conflict(&self) -> Option<ErrorReported> {\n-        let NiceRegionError { span, sub, sup, .. } = *self;\n+        let (span, sub, sup) = self.get_regions();\n \n         debug!(\n             \"try_report_named_anon_conflict(sub={:?}, sup={:?})\","}, {"sha": "f6a99579598ca6a6149b31fa37b399488544b985", "filename": "src/librustc/infer/error_reporting/nice_region_error/outlives_closure.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/1820da52110cc5cfb40436225c939067049ccf32/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1820da52110cc5cfb40436225c939067049ccf32/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs?ref=1820da52110cc5cfb40436225c939067049ccf32", "patch": "@@ -0,0 +1,94 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Error Reporting for Anonymous Region Lifetime Errors\n+//! where both the regions are anonymous.\n+\n+use infer::error_reporting::nice_region_error::NiceRegionError;\n+use infer::SubregionOrigin;\n+use ty::RegionKind;\n+use hir::{Expr, ExprClosure};\n+use hir::map::NodeExpr;\n+use util::common::ErrorReported;\n+use infer::lexical_region_resolve::RegionResolutionError::SubSupConflict;\n+\n+impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n+    /// Print the error message for lifetime errors when binding excapes a closure.\n+    ///\n+    /// Consider a case where we have\n+    ///\n+    /// ```no_run\n+    /// fn with_int<F>(f: F) where F: FnOnce(&isize) {\n+    ///     let x = 3;\n+    ///     f(&x);\n+    /// }\n+    /// fn main() {\n+    ///     let mut x = None;\n+    ///     with_int(|y| x = Some(y));\n+    /// }\n+    /// ```\n+    ///\n+    /// the output will be\n+    ///\n+    /// ```text\n+    ///     let mut x = None;\n+    ///         ----- borrowed data cannot be stored into here...\n+    ///     with_int(|y| x = Some(y));\n+    ///              ---          ^ cannot be stored outside of its closure\n+    ///              |\n+    ///              ...because it cannot outlive this closure\n+    /// ```\n+    pub(super) fn try_report_outlives_closure(&self) -> Option<ErrorReported> {\n+        if let Some(SubSupConflict(origin,\n+                                   ref sub_origin,\n+                                   _,\n+                                   ref sup_origin,\n+                                   sup_region)) = self.error {\n+\n+            // #45983: when trying to assign the contents of an argument to a binding outside of a\n+            // closure, provide a specific message pointing this out.\n+            if let (&SubregionOrigin::BindingTypeIsNotValidAtDecl(ref external_span),\n+                    &RegionKind::ReFree(ref free_region)) = (&sub_origin, sup_region) {\n+                let hir = &self.tcx.hir;\n+                if let Some(node_id) = hir.as_local_node_id(free_region.scope) {\n+                    match hir.get(node_id) {\n+                        NodeExpr(Expr {\n+                            node: ExprClosure(_, _, _, closure_span, false),\n+                            ..\n+                        }) => {\n+                            let sup_sp = sup_origin.span();\n+                            let origin_sp = origin.span();\n+                            let mut err = self.tcx.sess.struct_span_err(\n+                                sup_sp,\n+                                \"borrowed data cannot be stored outside of its closure\");\n+                            err.span_label(sup_sp, \"cannot be stored outside of its closure\");\n+                            if sup_sp == origin_sp {\n+                                err.span_label(*external_span,\n+                                               \"borrowed data cannot be stored into here...\");\n+                                err.span_label(*closure_span,\n+                                               \"...because it cannot outlive this closure\");\n+                            } else {\n+                                err.span_label(*closure_span,\n+                                               \"borrowed data cannot outlive this closure\");\n+                                err.span_label(origin_sp,\n+                                               \"cannot infer an appropriate lifetime\");\n+                            }\n+                            err.emit();\n+                            return Some(ErrorReported);\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+            }\n+        }\n+        None\n+    }\n+}\n+"}, {"sha": "9a2f98d4622f77eb00cfd2d2898e29d049b0af05", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1820da52110cc5cfb40436225c939067049ccf32/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1820da52110cc5cfb40436225c939067049ccf32/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=1820da52110cc5cfb40436225c939067049ccf32", "patch": "@@ -989,7 +989,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         if let (Some(f), Some(o)) = (fr_name, outlived_fr_name) {\n             let tables = infcx.tcx.typeck_tables_of(mir_def_id);\n-            let nice = NiceRegionError::new(infcx.tcx, blame_span, o, f, Some(tables));\n+            let nice = NiceRegionError::new_from_span(infcx.tcx, blame_span, o, f, Some(tables));\n             if let Some(ErrorReported) = nice.try_report() {\n                 return;\n             }"}, {"sha": "a6e5067195f47faad38ee2afe936ffedae4ff572", "filename": "src/test/ui/borrowck/issue-45983.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs?ref=1820da52110cc5cfb40436225c939067049ccf32", "patch": "@@ -15,5 +15,5 @@ fn give_any<F: for<'r> FnOnce(&'r ())>(f: F) {\n fn main() {\n     let x = None;\n     give_any(|y| x = Some(y));\n-    //~^ ERROR borrowed data cannot be moved outside of its closure\n+    //~^ ERROR borrowed data cannot be stored outside of its closure\n }"}, {"sha": "496f15c289c17123db75f108b3b6341c62bbe394", "filename": "src/test/ui/borrowck/issue-45983.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.stderr?ref=1820da52110cc5cfb40436225c939067049ccf32", "patch": "@@ -1,10 +1,10 @@\n-error: borrowed data cannot be moved outside of its closure\n+error: borrowed data cannot be stored outside of its closure\n   --> $DIR/issue-45983.rs:17:27\n    |\n 16 |     let x = None;\n-   |         - borrowed data cannot be moved into here...\n+   |         - borrowed data cannot be stored into here...\n 17 |     give_any(|y| x = Some(y));\n-   |              ---          ^ cannot be moved outside of its closure\n+   |              ---          ^ cannot be stored outside of its closure\n    |              |\n    |              ...because it cannot outlive this closure\n "}, {"sha": "b318bd70cf2d28cfe86c1f77b15824f79af0bf6f", "filename": "src/test/ui/borrowck/issue-7573.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.rs?ref=1820da52110cc5cfb40436225c939067049ccf32", "patch": "@@ -29,8 +29,8 @@ pub fn remove_package_from_database() {\n     let push_id = |installed_id: &CrateId| {\n         //~^ NOTE borrowed data cannot outlive this closure\n         lines_to_use.push(installed_id);\n-        //~^ ERROR borrowed data cannot be moved outside of its closure\n-        //~| NOTE cannot be moved outside of its closure\n+        //~^ ERROR borrowed data cannot be stored outside of its closure\n+        //~| NOTE cannot be stored outside of its closure\n     };\n     list_database(push_id);\n ", "previous_filename": "src/test/compile-fail/issue-7573.rs"}, {"sha": "6c549a029b60298b463d92f801ea16b89539ce21", "filename": "src/test/ui/borrowck/issue-7573.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr?ref=1820da52110cc5cfb40436225c939067049ccf32", "patch": "@@ -0,0 +1,14 @@\n+error: borrowed data cannot be stored outside of its closure\n+  --> $DIR/issue-7573.rs:31:27\n+   |\n+27 |     let mut lines_to_use: Vec<&CrateId> = Vec::new();\n+   |                               - cannot infer an appropriate lifetime\n+28 |         //~^ NOTE cannot infer an appropriate lifetime\n+29 |     let push_id = |installed_id: &CrateId| {\n+   |                   ------------------------ borrowed data cannot outlive this closure\n+30 |         //~^ NOTE borrowed data cannot outlive this closure\n+31 |         lines_to_use.push(installed_id);\n+   |                           ^^^^^^^^^^^^ cannot be stored outside of its closure\n+\n+error: aborting due to previous error\n+"}, {"sha": "1c38dee99a7b0f3fac136e446022a70d8a3c6914", "filename": "src/test/ui/borrowck/regions-escape-bound-fn-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.rs?ref=1820da52110cc5cfb40436225c939067049ccf32", "patch": "@@ -16,5 +16,5 @@ fn with_int<F>(f: F) where F: FnOnce(&isize) {\n fn main() {\n     let mut x = None;\n     with_int(|y| x = Some(y));\n-    //~^ ERROR borrowed data cannot be moved outside of its closure\n+    //~^ ERROR borrowed data cannot be stored outside of its closure\n }", "previous_filename": "src/test/compile-fail/regions-escape-bound-fn-2.rs"}, {"sha": "3d88f4fd52e2e6443e373711c7cf22c34ff9cb7b", "filename": "src/test/ui/borrowck/regions-escape-bound-fn-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.stderr?ref=1820da52110cc5cfb40436225c939067049ccf32", "patch": "@@ -0,0 +1,12 @@\n+error: borrowed data cannot be stored outside of its closure\n+  --> $DIR/regions-escape-bound-fn-2.rs:18:27\n+   |\n+17 |     let mut x = None;\n+   |         ----- borrowed data cannot be stored into here...\n+18 |     with_int(|y| x = Some(y));\n+   |              ---          ^ cannot be stored outside of its closure\n+   |              |\n+   |              ...because it cannot outlive this closure\n+\n+error: aborting due to previous error\n+"}, {"sha": "c22742371acbc2fab407627b5ce5190d522a5420", "filename": "src/test/ui/borrowck/regions-escape-bound-fn.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.rs?ref=1820da52110cc5cfb40436225c939067049ccf32", "patch": "@@ -16,5 +16,5 @@ fn with_int<F>(f: F) where F: FnOnce(&isize) {\n fn main() {\n     let mut x: Option<&isize> = None;\n     with_int(|y| x = Some(y));\n-    //~^ ERROR borrowed data cannot be moved outside of its closure\n+    //~^ ERROR borrowed data cannot be stored outside of its closure\n }", "previous_filename": "src/test/compile-fail/regions-escape-bound-fn.rs"}, {"sha": "306da8b54e4f7c142162301b496672175a01631f", "filename": "src/test/ui/borrowck/regions-escape-bound-fn.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.stderr?ref=1820da52110cc5cfb40436225c939067049ccf32", "patch": "@@ -0,0 +1,12 @@\n+error: borrowed data cannot be stored outside of its closure\n+  --> $DIR/regions-escape-bound-fn.rs:18:27\n+   |\n+18 |     with_int(|y| x = Some(y));\n+   |              ---     -----^-\n+   |              |       |    |\n+   |              |       |    cannot be stored outside of its closure\n+   |              |       cannot infer an appropriate lifetime\n+   |              borrowed data cannot outlive this closure\n+\n+error: aborting due to previous error\n+"}, {"sha": "5a214504df4c15f46f5b2910b1f27a3235ab99e8", "filename": "src/test/ui/borrowck/regions-escape-unboxed-closure.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.rs?ref=1820da52110cc5cfb40436225c939067049ccf32", "patch": "@@ -14,5 +14,5 @@ fn with_int(f: &mut FnMut(&isize)) {\n fn main() {\n     let mut x: Option<&isize> = None;\n     with_int(&mut |y| x = Some(y));\n-    //~^ ERROR borrowed data cannot be moved outside of its closure\n+    //~^ ERROR borrowed data cannot be stored outside of its closure\n }", "previous_filename": "src/test/compile-fail/regions-escape-unboxed-closure.rs"}, {"sha": "5e51be4629539468c7f0c135da0d0f6a707af513", "filename": "src/test/ui/borrowck/regions-escape-unboxed-closure.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.stderr?ref=1820da52110cc5cfb40436225c939067049ccf32", "patch": "@@ -0,0 +1,12 @@\n+error: borrowed data cannot be stored outside of its closure\n+  --> $DIR/regions-escape-unboxed-closure.rs:16:32\n+   |\n+16 |     with_int(&mut |y| x = Some(y));\n+   |                   ---     -----^-\n+   |                   |       |    |\n+   |                   |       |    cannot be stored outside of its closure\n+   |                   |       cannot infer an appropriate lifetime\n+   |                   borrowed data cannot outlive this closure\n+\n+error: aborting due to previous error\n+"}, {"sha": "a464c5853e1c149f3bb62d02c8e447f9e004d0da", "filename": "src/test/ui/closure-expected-type/expect-region-supply-region.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.rs?ref=1820da52110cc5cfb40436225c939067049ccf32", "patch": "@@ -25,7 +25,7 @@ fn expect_bound_supply_nothing() {\n     // it to escape into `f`:\n     let mut f: Option<&u32> = None;\n     closure_expecting_bound(|x| {\n-        f = Some(x); //~ ERROR borrowed data cannot be moved outside of its closure\n+        f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n     });\n }\n \n@@ -35,7 +35,7 @@ fn expect_bound_supply_bound() {\n     // closure:\n     let mut f: Option<&u32> = None;\n     closure_expecting_bound(|x: &u32| {\n-        f = Some(x); //~ ERROR borrowed data cannot be moved outside of its closure\n+        f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n     });\n }\n \n@@ -50,7 +50,7 @@ fn expect_bound_supply_named<'x>() {\n \n         // And we still cannot let `x` escape into `f`.\n         f = Some(x);\n-        //~^ ERROR borrowed data cannot be moved outside of its closure\n+        //~^ ERROR borrowed data cannot be stored outside of its closure\n     });\n }\n ", "previous_filename": "src/test/compile-fail/closure-expected-type/expect-region-supply-region.rs"}, {"sha": "d34b17bb25b5f6ed01701f0c9a59d9b2deb27758", "filename": "src/test/ui/closure-expected-type/expect-region-supply-region.stderr", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1820da52110cc5cfb40436225c939067049ccf32/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr?ref=1820da52110cc5cfb40436225c939067049ccf32", "patch": "@@ -0,0 +1,100 @@\n+error: borrowed data cannot be stored outside of its closure\n+  --> $DIR/expect-region-supply-region.rs:28:18\n+   |\n+27 |     closure_expecting_bound(|x| {\n+   |                             --- borrowed data cannot outlive this closure\n+28 |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n+   |             -----^-\n+   |             |    |\n+   |             |    cannot be stored outside of its closure\n+   |             cannot infer an appropriate lifetime\n+\n+error: borrowed data cannot be stored outside of its closure\n+  --> $DIR/expect-region-supply-region.rs:38:18\n+   |\n+37 |     closure_expecting_bound(|x: &u32| {\n+   |                             --------- borrowed data cannot outlive this closure\n+38 |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n+   |             -----^-\n+   |             |    |\n+   |             |    cannot be stored outside of its closure\n+   |             cannot infer an appropriate lifetime\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expect-region-supply-region.rs:47:33\n+   |\n+47 |     closure_expecting_bound(|x: &'x u32| {\n+   |                                 ^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `&u32`\n+              found type `&'x u32`\n+note: the anonymous lifetime #2 defined on the body at 47:29...\n+  --> $DIR/expect-region-supply-region.rs:47:29\n+   |\n+47 |       closure_expecting_bound(|x: &'x u32| {\n+   |  _____________________________^\n+48 | |         //~^ ERROR mismatched types\n+49 | |         //~| ERROR mismatched types\n+50 | |\n+...  |\n+53 | |         //~^ ERROR borrowed data cannot be stored outside of its closure\n+54 | |     });\n+   | |_____^\n+note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 42:1\n+  --> $DIR/expect-region-supply-region.rs:42:1\n+   |\n+42 | / fn expect_bound_supply_named<'x>() {\n+43 | |     let mut f: Option<&u32> = None;\n+44 | |\n+45 | |     // Here we give a type annotation that `x` should be free. We get\n+...  |\n+54 | |     });\n+55 | | }\n+   | |_^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expect-region-supply-region.rs:47:33\n+   |\n+47 |     closure_expecting_bound(|x: &'x u32| {\n+   |                                 ^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `&u32`\n+              found type `&'x u32`\n+note: the lifetime 'x as defined on the function body at 42:1...\n+  --> $DIR/expect-region-supply-region.rs:42:1\n+   |\n+42 | / fn expect_bound_supply_named<'x>() {\n+43 | |     let mut f: Option<&u32> = None;\n+44 | |\n+45 | |     // Here we give a type annotation that `x` should be free. We get\n+...  |\n+54 | |     });\n+55 | | }\n+   | |_^\n+note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 47:29\n+  --> $DIR/expect-region-supply-region.rs:47:29\n+   |\n+47 |       closure_expecting_bound(|x: &'x u32| {\n+   |  _____________________________^\n+48 | |         //~^ ERROR mismatched types\n+49 | |         //~| ERROR mismatched types\n+50 | |\n+...  |\n+53 | |         //~^ ERROR borrowed data cannot be stored outside of its closure\n+54 | |     });\n+   | |_____^\n+\n+error: borrowed data cannot be stored outside of its closure\n+  --> $DIR/expect-region-supply-region.rs:52:18\n+   |\n+47 |     closure_expecting_bound(|x: &'x u32| {\n+   |                             ------------ borrowed data cannot outlive this closure\n+...\n+52 |         f = Some(x);\n+   |             -----^-\n+   |             |    |\n+   |             |    cannot be stored outside of its closure\n+   |             cannot infer an appropriate lifetime\n+\n+error: aborting due to 5 previous errors\n+"}]}