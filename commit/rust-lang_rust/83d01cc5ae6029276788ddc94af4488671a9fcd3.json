{"sha": "83d01cc5ae6029276788ddc94af4488671a9fcd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZDAxY2M1YWU2MDI5Mjc2Nzg4ZGRjOTRhZjQ0ODg2NzFhOWZjZDM=", "commit": {"author": {"name": "Jakub Vr\u00e1na", "email": "jakub@vrana.cz", "date": "2015-01-07T00:53:45Z"}, "committer": {"name": "Jakub Vr\u00e1na", "email": "jakub@vrana.cz", "date": "2015-01-07T00:53:45Z"}, "message": "Fix a typo in guide", "tree": {"sha": "b00815d6293a62393b16e9c377ce45c2ef63f225", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b00815d6293a62393b16e9c377ce45c2ef63f225"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83d01cc5ae6029276788ddc94af4488671a9fcd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83d01cc5ae6029276788ddc94af4488671a9fcd3", "html_url": "https://github.com/rust-lang/rust/commit/83d01cc5ae6029276788ddc94af4488671a9fcd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83d01cc5ae6029276788ddc94af4488671a9fcd3/comments", "author": {"login": "vrana", "id": 117453, "node_id": "MDQ6VXNlcjExNzQ1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/117453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrana", "html_url": "https://github.com/vrana", "followers_url": "https://api.github.com/users/vrana/followers", "following_url": "https://api.github.com/users/vrana/following{/other_user}", "gists_url": "https://api.github.com/users/vrana/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrana/subscriptions", "organizations_url": "https://api.github.com/users/vrana/orgs", "repos_url": "https://api.github.com/users/vrana/repos", "events_url": "https://api.github.com/users/vrana/events{/privacy}", "received_events_url": "https://api.github.com/users/vrana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vrana", "id": 117453, "node_id": "MDQ6VXNlcjExNzQ1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/117453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrana", "html_url": "https://github.com/vrana", "followers_url": "https://api.github.com/users/vrana/followers", "following_url": "https://api.github.com/users/vrana/following{/other_user}", "gists_url": "https://api.github.com/users/vrana/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrana/subscriptions", "organizations_url": "https://api.github.com/users/vrana/orgs", "repos_url": "https://api.github.com/users/vrana/repos", "events_url": "https://api.github.com/users/vrana/events{/privacy}", "received_events_url": "https://api.github.com/users/vrana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea6f65c5f1a3f84e010d2cef02a0160804e9567a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea6f65c5f1a3f84e010d2cef02a0160804e9567a", "html_url": "https://github.com/rust-lang/rust/commit/ea6f65c5f1a3f84e010d2cef02a0160804e9567a"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "e7f39e46c9373d8bbec43b123de650d9db5b1094", "filename": "src/doc/guide.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83d01cc5ae6029276788ddc94af4488671a9fcd3/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/83d01cc5ae6029276788ddc94af4488671a9fcd3/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=83d01cc5ae6029276788ddc94af4488671a9fcd3", "patch": "@@ -4789,7 +4789,7 @@ of `Option`, we need to provide a concrete type in place of the type\n parameter. For example, if we wanted something like our `OptionalInt`, we would\n need to instantiate an `Option<i32>`. Inside the declaration of our enum,\n wherever we see a `T`, we replace it with the type specified (or inferred by the\n-the compiler).\n+compiler).\n \n ```{rust}\n let x: Option<i32> = Some(5);"}]}