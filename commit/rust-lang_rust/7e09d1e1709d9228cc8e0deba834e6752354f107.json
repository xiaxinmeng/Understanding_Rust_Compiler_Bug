{"sha": "7e09d1e1709d9228cc8e0deba834e6752354f107", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMDlkMWUxNzA5ZDkyMjhjYzhlMGRlYmE4MzRlNjc1MjM1NGYxMDc=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-07-26T13:02:53Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-31T13:15:09Z"}, "message": "async-llvm(18): Instantiate OngoingCrateTranslation before starting translation.", "tree": {"sha": "23d2635540b7a1ea5d408e1911d0987249229fdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23d2635540b7a1ea5d408e1911d0987249229fdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e09d1e1709d9228cc8e0deba834e6752354f107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e09d1e1709d9228cc8e0deba834e6752354f107", "html_url": "https://github.com/rust-lang/rust/commit/7e09d1e1709d9228cc8e0deba834e6752354f107", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e09d1e1709d9228cc8e0deba834e6752354f107/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7d0fa340f904829abf28907c7f1add11a65389e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7d0fa340f904829abf28907c7f1add11a65389e", "html_url": "https://github.com/rust-lang/rust/commit/e7d0fa340f904829abf28907c7f1add11a65389e"}], "stats": {"total": 159, "additions": 84, "deletions": 75}, "files": [{"sha": "b1f4aa69adb9f50e9b949d38fa6d410286e6041d", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e09d1e1709d9228cc8e0deba834e6752354f107/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e09d1e1709d9228cc8e0deba834e6752354f107/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=7e09d1e1709d9228cc8e0deba834e6752354f107", "patch": "@@ -50,7 +50,7 @@ pub use self::NativeLibraryKind::*;\n \n // lonely orphan structs and enums looking for a better home\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, Copy)]\n pub struct LinkMeta {\n     pub crate_hash: Svh,\n }\n@@ -161,15 +161,13 @@ pub struct ExternCrate {\n }\n \n pub struct EncodedMetadata {\n-    pub raw_data: Vec<u8>,\n-    pub hashes: EncodedMetadataHashes,\n+    pub raw_data: Vec<u8>\n }\n \n impl EncodedMetadata {\n     pub fn new() -> EncodedMetadata {\n         EncodedMetadata {\n             raw_data: Vec::new(),\n-            hashes: EncodedMetadataHashes::new(),\n         }\n     }\n }\n@@ -294,7 +292,7 @@ pub trait CrateStore {\n                                  tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  link_meta: &LinkMeta,\n                                  reachable: &NodeSet)\n-                                 -> EncodedMetadata;\n+                                 -> (EncodedMetadata, EncodedMetadataHashes);\n     fn metadata_encoding_version(&self) -> &[u8];\n }\n \n@@ -424,7 +422,7 @@ impl CrateStore for DummyCrateStore {\n                                  tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  link_meta: &LinkMeta,\n                                  reachable: &NodeSet)\n-                                 -> EncodedMetadata {\n+                                 -> (EncodedMetadata, EncodedMetadataHashes) {\n         bug!(\"encode_metadata\")\n     }\n     fn metadata_encoding_version(&self) -> &[u8] { bug!(\"metadata_encoding_version\") }"}, {"sha": "ee9d30b58fef403c9b8bc46c096f49155f92f51b", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e09d1e1709d9228cc8e0deba834e6752354f107/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e09d1e1709d9228cc8e0deba834e6752354f107/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=7e09d1e1709d9228cc8e0deba834e6752354f107", "patch": "@@ -206,7 +206,7 @@ pub fn compile_input(sess: &Session,\n                 println!(\"Pre-trans\");\n                 tcx.print_debug_stats();\n             }\n-            let trans = phase_4_translate_to_llvm(tcx, analysis, &incremental_hashes_map,\n+            let trans = phase_4_translate_to_llvm(tcx, analysis, incremental_hashes_map,\n                                                   &outputs);\n \n             if log_enabled!(::log::LogLevel::Info) {\n@@ -1051,7 +1051,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n /// be discarded.\n pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            analysis: ty::CrateAnalysis,\n-                                           incremental_hashes_map: &IncrementalHashesMap,\n+                                           incremental_hashes_map: IncrementalHashesMap,\n                                            output_filenames: &OutputFilenames)\n                                            -> write::OngoingCrateTranslation {\n     let time_passes = tcx.sess.time_passes();\n@@ -1063,7 +1063,7 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let translation =\n         time(time_passes,\n              \"translation\",\n-             move || trans::trans_crate(tcx, analysis, &incremental_hashes_map, output_filenames));\n+             move || trans::trans_crate(tcx, analysis, incremental_hashes_map, output_filenames));\n \n     translation\n }"}, {"sha": "339e2bdc15734960534873ae46a39402f11a37f9", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e09d1e1709d9228cc8e0deba834e6752354f107/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e09d1e1709d9228cc8e0deba834e6752354f107/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=7e09d1e1709d9228cc8e0deba834e6752354f107", "patch": "@@ -34,7 +34,7 @@ use super::file_format;\n use super::work_product;\n \n pub fn save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                incremental_hashes_map: &IncrementalHashesMap,\n+                                incremental_hashes_map: IncrementalHashesMap,\n                                 metadata_hashes: &EncodedMetadataHashes,\n                                 svh: Svh) {\n     debug!(\"save_dep_graph()\");\n@@ -51,7 +51,7 @@ pub fn save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         eprintln!(\"incremental: {} edges in dep-graph\", query.graph.len_edges());\n     }\n \n-    let mut hcx = HashContext::new(tcx, incremental_hashes_map);\n+    let mut hcx = HashContext::new(tcx, &incremental_hashes_map);\n     let preds = Predecessors::new(&query, &mut hcx);\n     let mut current_metadata_hashes = FxHashMap();\n "}, {"sha": "e8b0dea1e8ac0285d9dc9a0e99d4baf395a9a2c2", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e09d1e1709d9228cc8e0deba834e6752354f107/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e09d1e1709d9228cc8e0deba834e6752354f107/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=7e09d1e1709d9228cc8e0deba834e6752354f107", "patch": "@@ -15,7 +15,8 @@ use schema;\n use rustc::ty::maps::QueryConfig;\n use rustc::middle::cstore::{CrateStore, CrateSource, LibSource, DepKind,\n                             NativeLibrary, MetadataLoader, LinkMeta,\n-                            LinkagePreference, LoadedMacro, EncodedMetadata};\n+                            LinkagePreference, LoadedMacro, EncodedMetadata,\n+                            EncodedMetadataHashes};\n use rustc::hir::def;\n use rustc::middle::lang_items;\n use rustc::session::Session;\n@@ -443,7 +444,7 @@ impl CrateStore for cstore::CStore {\n                                  tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  link_meta: &LinkMeta,\n                                  reachable: &NodeSet)\n-                                 -> EncodedMetadata\n+                                 -> (EncodedMetadata, EncodedMetadataHashes)\n     {\n         encoder::encode_metadata(tcx, link_meta, reachable)\n     }"}, {"sha": "c35d8407c9d3c4f24ee55c5da2beb13d7409bfa6", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e09d1e1709d9228cc8e0deba834e6752354f107/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e09d1e1709d9228cc8e0deba834e6752354f107/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=7e09d1e1709d9228cc8e0deba834e6752354f107", "patch": "@@ -1638,7 +1638,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'a, 'tcx> {\n pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  link_meta: &LinkMeta,\n                                  exported_symbols: &NodeSet)\n-                                 -> EncodedMetadata\n+                                 -> (EncodedMetadata, EncodedMetadataHashes)\n {\n     let mut cursor = Cursor::new(vec![]);\n     cursor.write_all(METADATA_HEADER).unwrap();\n@@ -1681,10 +1681,7 @@ pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     result[header + 2] = (pos >> 8) as u8;\n     result[header + 3] = (pos >> 0) as u8;\n \n-    EncodedMetadata {\n-        raw_data: result,\n-        hashes: metadata_hashes,\n-    }\n+    (EncodedMetadata { raw_data: result }, metadata_hashes)\n }\n \n pub fn get_repr_options<'a, 'tcx, 'gcx>(tcx: &TyCtxt<'a, 'tcx, 'gcx>, did: DefId) -> ReprOptions {"}, {"sha": "bd49ad955f1909a15895842699c81cab10290190", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 70, "deletions": 57, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/7e09d1e1709d9228cc8e0deba834e6752354f107/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e09d1e1709d9228cc8e0deba834e6752354f107/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=7e09d1e1709d9228cc8e0deba834e6752354f107", "patch": "@@ -38,7 +38,7 @@ use llvm;\n use metadata;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::middle::lang_items::StartFnLangItem;\n-use rustc::middle::cstore::EncodedMetadata;\n+use rustc::middle::cstore::{EncodedMetadata, EncodedMetadataHashes};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::dep_graph::AssertDepGraphSafe;\n use rustc::middle::cstore::LinkMeta;\n@@ -729,7 +729,8 @@ fn contains_null(s: &str) -> bool {\n fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n                             link_meta: &LinkMeta,\n                             exported_symbols: &NodeSet)\n-                            -> (ContextRef, ModuleRef, EncodedMetadata) {\n+                            -> (ContextRef, ModuleRef,\n+                                EncodedMetadata, EncodedMetadataHashes) {\n     use std::io::Write;\n     use flate2::Compression;\n     use flate2::write::DeflateEncoder;\n@@ -759,15 +760,18 @@ fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n     }).max().unwrap();\n \n     if kind == MetadataKind::None {\n-        return (metadata_llcx, metadata_llmod, EncodedMetadata::new());\n+        return (metadata_llcx,\n+                metadata_llmod,\n+                EncodedMetadata::new(),\n+                EncodedMetadataHashes::new());\n     }\n \n     let cstore = &tcx.sess.cstore;\n-    let metadata = cstore.encode_metadata(tcx,\n-                                          &link_meta,\n-                                          exported_symbols);\n+    let (metadata, hashes) = cstore.encode_metadata(tcx,\n+                                                    &link_meta,\n+                                                    exported_symbols);\n     if kind == MetadataKind::Uncompressed {\n-        return (metadata_llcx, metadata_llmod, metadata);\n+        return (metadata_llcx, metadata_llmod, metadata, hashes);\n     }\n \n     assert!(kind == MetadataKind::Compressed);\n@@ -795,7 +799,7 @@ fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n         let directive = CString::new(directive).unwrap();\n         llvm::LLVMSetModuleInlineAsm(metadata_llmod, directive.as_ptr())\n     }\n-    return (metadata_llcx, metadata_llmod, metadata);\n+    return (metadata_llcx, metadata_llmod, metadata, hashes);\n }\n \n // Create a `__imp_<symbol> = &symbol` global for every public static `symbol`.\n@@ -919,27 +923,24 @@ pub fn find_exported_symbols(tcx: TyCtxt, reachable: &NodeSet) -> NodeSet {\n \n pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              analysis: ty::CrateAnalysis,\n-                             incremental_hashes_map: &IncrementalHashesMap,\n+                             incremental_hashes_map: IncrementalHashesMap,\n                              output_filenames: &OutputFilenames)\n                              -> OngoingCrateTranslation {\n     // Be careful with this krate: obviously it gives access to the\n     // entire contents of the krate. So if you push any subtasks of\n     // `TransCrate`, you need to be careful to register \"reads\" of the\n     // particular items that will be processed.\n     let krate = tcx.hir.krate();\n-\n     let ty::CrateAnalysis { reachable, .. } = analysis;\n-\n     let check_overflow = tcx.sess.overflow_checks();\n-\n-    let link_meta = link::build_link_meta(incremental_hashes_map);\n-\n+    let link_meta = link::build_link_meta(&incremental_hashes_map);\n     let exported_symbol_node_ids = find_exported_symbols(tcx, &reachable);\n+\n     let shared_ccx = SharedCrateContext::new(tcx,\n                                              check_overflow,\n                                              output_filenames);\n     // Translate the metadata.\n-    let (metadata_llcx, metadata_llmod, metadata) =\n+    let (metadata_llcx, metadata_llmod, metadata, metadata_incr_hashes) =\n         time(tcx.sess.time_passes(), \"write metadata\", || {\n             write_metadata(tcx, &link_meta, &exported_symbol_node_ids)\n         });\n@@ -976,6 +977,11 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ongoing_translation.submit_translated_module_to_llvm(tcx.sess, metadata_module);\n         ongoing_translation.signal_translation_done();\n \n+        assert_and_save_dep_graph(tcx,\n+                                  incremental_hashes_map,\n+                                  metadata_incr_hashes,\n+                                  link_meta);\n+\n         return ongoing_translation;\n     }\n \n@@ -989,6 +995,35 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     assert!(codegen_units.len() <= 1 || !tcx.sess.lto());\n \n+    let linker_info = LinkerInfo::new(&shared_ccx, &exported_symbols);\n+    let subsystem = attr::first_attr_value_str_by_name(&krate.attrs,\n+                                                       \"windows_subsystem\");\n+    let windows_subsystem = subsystem.map(|subsystem| {\n+        if subsystem != \"windows\" && subsystem != \"console\" {\n+            tcx.sess.fatal(&format!(\"invalid windows subsystem `{}`, only \\\n+                                     `windows` and `console` are allowed\",\n+                                    subsystem));\n+        }\n+        subsystem.to_string()\n+    });\n+\n+    let no_integrated_as = tcx.sess.opts.cg.no_integrated_as ||\n+        (tcx.sess.target.target.options.no_integrated_as &&\n+         (output_filenames.outputs.contains_key(&OutputType::Object) ||\n+          output_filenames.outputs.contains_key(&OutputType::Exe)));\n+\n+    let ongoing_translation = write::run_passes(\n+        tcx.sess,\n+        output_filenames,\n+        tcx.crate_name(LOCAL_CRATE),\n+        link_meta,\n+        metadata,\n+        exported_symbols.clone(),\n+        no_builtins,\n+        windows_subsystem,\n+        linker_info,\n+        no_integrated_as);\n+\n     let translation_items = Arc::new(translation_items);\n \n     let mut all_stats = Stats::default();\n@@ -1209,48 +1244,10 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         None\n     };\n \n-    let linker_info = LinkerInfo::new(&shared_ccx, &exported_symbols);\n-\n-    let subsystem = attr::first_attr_value_str_by_name(&krate.attrs,\n-                                                       \"windows_subsystem\");\n-    let windows_subsystem = subsystem.map(|subsystem| {\n-        if subsystem != \"windows\" && subsystem != \"console\" {\n-            tcx.sess.fatal(&format!(\"invalid windows subsystem `{}`, only \\\n-                                     `windows` and `console` are allowed\",\n-                                    subsystem));\n-        }\n-        subsystem.to_string()\n-    });\n-\n-    let outputs = output_filenames;\n-\n-    let no_integrated_as = sess.opts.cg.no_integrated_as ||\n-        (sess.target.target.options.no_integrated_as &&\n-         (outputs.outputs.contains_key(&OutputType::Object) ||\n-          outputs.outputs.contains_key(&OutputType::Exe)));\n-\n-    time(sess.time_passes(),\n-         \"assert dep graph\",\n-         || rustc_incremental::assert_dep_graph(tcx));\n-\n-    time(sess.time_passes(),\n-         \"serialize dep graph\",\n-         || rustc_incremental::save_dep_graph(tcx,\n-                                              incremental_hashes_map,\n-                                              &metadata.hashes,\n-                                              link_meta.crate_hash));\n-    // ---\n-    let ongoing_translation = write::run_passes(\n-        sess,\n-        outputs,\n-        tcx.crate_name(LOCAL_CRATE),\n-        link_meta,\n-        metadata,\n-        exported_symbols,\n-        no_builtins,\n-        windows_subsystem,\n-        linker_info,\n-        no_integrated_as);\n+    assert_and_save_dep_graph(tcx,\n+                              incremental_hashes_map,\n+                              metadata_incr_hashes,\n+                              link_meta);\n \n     ongoing_translation.submit_translated_module_to_llvm(sess, metadata_module);\n \n@@ -1267,6 +1264,22 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     ongoing_translation\n }\n \n+fn assert_and_save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                       incremental_hashes_map: IncrementalHashesMap,\n+                                       metadata_incr_hashes: EncodedMetadataHashes,\n+                                       link_meta: LinkMeta) {\n+    time(tcx.sess.time_passes(),\n+         \"assert dep graph\",\n+         || rustc_incremental::assert_dep_graph(tcx));\n+\n+    time(tcx.sess.time_passes(),\n+         \"serialize dep graph\",\n+         || rustc_incremental::save_dep_graph(tcx,\n+                                              incremental_hashes_map,\n+                                              &metadata_incr_hashes,\n+                                              link_meta.crate_hash));\n+}\n+\n #[inline(never)] // give this a place in the profiler\n fn assert_symbols_are_distinct<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>, trans_items: I)\n     where I: Iterator<Item=&'a TransItem<'tcx>>"}]}