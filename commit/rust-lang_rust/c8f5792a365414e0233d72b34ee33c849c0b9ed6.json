{"sha": "c8f5792a365414e0233d72b34ee33c849c0b9ed6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZjU3OTJhMzY1NDE0ZTAyMzNkNzJiMzRlZTMzYzg0OWMwYjllZDY=", "commit": {"author": {"name": "Daiki Ihara", "email": "sasurau4@gmail.com", "date": "2020-12-07T16:17:13Z"}, "committer": {"name": "Daiki Ihara", "email": "sasurau4@gmail.com", "date": "2020-12-21T06:52:02Z"}, "message": "Add handling file_system_edit in test assists", "tree": {"sha": "aeff533e6655ceaa5b3e45ac4ddb26d80ac1522f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeff533e6655ceaa5b3e45ac4ddb26d80ac1522f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8f5792a365414e0233d72b34ee33c849c0b9ed6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8f5792a365414e0233d72b34ee33c849c0b9ed6", "html_url": "https://github.com/rust-lang/rust/commit/c8f5792a365414e0233d72b34ee33c849c0b9ed6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8f5792a365414e0233d72b34ee33c849c0b9ed6/comments", "author": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3d21ea05a1d1e1a88a983773fd821f6f6470264", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3d21ea05a1d1e1a88a983773fd821f6f6470264", "html_url": "https://github.com/rust-lang/rust/commit/c3d21ea05a1d1e1a88a983773fd821f6f6470264"}], "stats": {"total": 74, "additions": 59, "deletions": 15}, "files": [{"sha": "cd22cf17da2e88534a5acd6f90bf0b9582b20730", "filename": "crates/assists/src/assist_context.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c8f5792a365414e0233d72b34ee33c849c0b9ed6/crates%2Fassists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f5792a365414e0233d72b34ee33c849c0b9ed6/crates%2Fassists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fassist_context.rs?ref=c8f5792a365414e0233d72b34ee33c849c0b9ed6", "patch": "@@ -4,10 +4,10 @@ use std::mem;\n \n use algo::find_covering_element;\n use hir::Semantics;\n-use ide_db::base_db::{FileId, FileRange};\n+use ide_db::base_db::{AnchoredPathBuf, FileId, FileRange};\n use ide_db::{\n     label::Label,\n-    source_change::{SourceChange, SourceFileEdit},\n+    source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n     RootDatabase,\n };\n use syntax::{\n@@ -209,6 +209,7 @@ pub(crate) struct AssistBuilder {\n     file_id: FileId,\n     is_snippet: bool,\n     source_file_edits: Vec<SourceFileEdit>,\n+    file_system_edits: Vec<FileSystemEdit>,\n }\n \n impl AssistBuilder {\n@@ -218,6 +219,7 @@ impl AssistBuilder {\n             file_id,\n             is_snippet: false,\n             source_file_edits: Vec::default(),\n+            file_system_edits: Vec::default(),\n         }\n     }\n \n@@ -282,12 +284,18 @@ impl AssistBuilder {\n             algo::diff(&node, &new).into_text_edit(&mut self.edit);\n         }\n     }\n+    pub(crate) fn create_file(&mut self, dst: AnchoredPathBuf, content: impl Into<String>) {\n+        let file_system_edit = FileSystemEdit::CreateFile { dst: dst.clone() };\n+        self.file_system_edits.push(file_system_edit);\n+        self.edit_file(dst.anchor);\n+        self.insert(TextSize::from(0), content)\n+    }\n \n     fn finish(mut self) -> SourceChange {\n         self.commit();\n         SourceChange {\n             source_file_edits: mem::take(&mut self.source_file_edits),\n-            file_system_edits: Default::default(),\n+            file_system_edits: mem::take(&mut self.file_system_edits),\n             is_snippet: self.is_snippet,\n         }\n     }"}, {"sha": "9002040ce4dd39826da317c917c4bb3db67ef2c9", "filename": "crates/assists/src/tests.rs", "status": "modified", "additions": 48, "deletions": 12, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c8f5792a365414e0233d72b34ee33c849c0b9ed6/crates%2Fassists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f5792a365414e0233d72b34ee33c849c0b9ed6/crates%2Fassists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests.rs?ref=c8f5792a365414e0233d72b34ee33c849c0b9ed6", "patch": "@@ -2,6 +2,7 @@ mod generated;\n \n use hir::Semantics;\n use ide_db::base_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt};\n+use ide_db::source_change::FileSystemEdit;\n use ide_db::RootDatabase;\n use syntax::TextRange;\n use test_utils::{assert_eq_text, extract_offset, extract_range};\n@@ -47,7 +48,7 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n     let before = db.file_text(file_id).to_string();\n     let frange = FileRange { file_id, range: selection.into() };\n \n-    let mut assist = Assist::resolved(&db, &AssistConfig::default(), frange)\n+    let assist = Assist::resolved(&db, &AssistConfig::default(), frange)\n         .into_iter()\n         .find(|assist| assist.assist.id.0 == assist_id)\n         .unwrap_or_else(|| {\n@@ -63,9 +64,12 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n         });\n \n     let actual = {\n-        let change = assist.source_change.source_file_edits.pop().unwrap();\n         let mut actual = before;\n-        change.edit.apply(&mut actual);\n+        for source_file_edit in assist.source_change.source_file_edits {\n+            if source_file_edit.file_id == file_id {\n+                source_file_edit.edit.apply(&mut actual)\n+            }\n+        }\n         actual\n     };\n     assert_eq_text!(&after, &actual);\n@@ -99,20 +103,52 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult, assist_label:\n         (Some(assist), ExpectedResult::After(after)) => {\n             let mut source_change = assist.source_change;\n             assert!(!source_change.source_file_edits.is_empty());\n-            let skip_header = source_change.source_file_edits.len() == 1;\n+            let skip_header = source_change.source_file_edits.len() == 1\n+                && source_change.file_system_edits.len() == 0;\n             source_change.source_file_edits.sort_by_key(|it| it.file_id);\n \n+            let mut created_file_ids = Vec::new();\n             let mut buf = String::new();\n+            for file_system_edit in source_change.file_system_edits.clone() {\n+                match file_system_edit {\n+                    FileSystemEdit::CreateFile { dst } => {\n+                        created_file_ids.push(dst.anchor);\n+                    }\n+                    _ => (),\n+                }\n+            }\n+\n             for source_file_edit in source_change.source_file_edits {\n-                let mut text = db.file_text(source_file_edit.file_id).as_ref().to_owned();\n-                source_file_edit.edit.apply(&mut text);\n-                if !skip_header {\n-                    let sr = db.file_source_root(source_file_edit.file_id);\n-                    let sr = db.source_root(sr);\n-                    let path = sr.path_for_file(&source_file_edit.file_id).unwrap();\n-                    format_to!(buf, \"//- {}\\n\", path)\n+                if created_file_ids.contains(&source_file_edit.file_id) {\n+                    let target_dst = source_change\n+                        .file_system_edits\n+                        .iter()\n+                        .find_map(|f| match f {\n+                            FileSystemEdit::CreateFile { dst } => {\n+                                if dst.anchor == source_file_edit.file_id {\n+                                    Some(&dst.path)\n+                                } else {\n+                                    None\n+                                }\n+                            }\n+                            _ => None,\n+                        })\n+                        .unwrap();\n+                    format_to!(buf, \"//- {}\\n\", target_dst);\n+                    let mut text = String::new();\n+                    source_file_edit.edit.apply(&mut text);\n+                    buf.push_str(&text);\n+                } else {\n+                    let mut text = db.file_text(source_file_edit.file_id).as_ref().to_owned();\n+                    source_file_edit.edit.apply(&mut text);\n+                    if !skip_header {\n+                        let sr = db.file_source_root(source_file_edit.file_id);\n+                        let sr = db.source_root(sr);\n+                        let path = sr.path_for_file(&source_file_edit.file_id).unwrap();\n+                        format_to!(buf, \"//- {}\\n\", path)\n+                    }\n+                    buf.push_str(&text);\n                 }\n-                buf.push_str(&text);\n             }\n \n             assert_eq_text!(after, &buf);"}]}