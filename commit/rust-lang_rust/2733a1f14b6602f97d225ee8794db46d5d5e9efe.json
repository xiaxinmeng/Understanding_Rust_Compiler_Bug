{"sha": "2733a1f14b6602f97d225ee8794db46d5d5e9efe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MzNhMWYxNGI2NjAyZjk3ZDIyNWVlODc5NGRiNDZkNWQ1ZTllZmU=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-04-06T00:31:52Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-04-28T16:51:14Z"}, "message": "undo abstraction over whether to parse attrs in a block\n\nIn principle, it seems like a nice idea to abstract over the two\nfunctions that parse blocks (one with inner attrs allowed, one not).\nHowever, the existing one wound up making things more complex than\njust having two separate functions, especially after the obsolete\nsyntax is (will be) removed.", "tree": {"sha": "ca1dd51854f2281de22c07119f9c905c044d3792", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca1dd51854f2281de22c07119f9c905c044d3792"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2733a1f14b6602f97d225ee8794db46d5d5e9efe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2733a1f14b6602f97d225ee8794db46d5d5e9efe", "html_url": "https://github.com/rust-lang/rust/commit/2733a1f14b6602f97d225ee8794db46d5d5e9efe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2733a1f14b6602f97d225ee8794db46d5d5e9efe/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab03c1e42218a08f6051e5708e6a538d3db9f1f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab03c1e42218a08f6051e5708e6a538d3db9f1f3", "html_url": "https://github.com/rust-lang/rust/commit/ab03c1e42218a08f6051e5708e6a538d3db9f1f3"}], "stats": {"total": 51, "additions": 19, "deletions": 32}, "files": [{"sha": "129517e8a1ec355a4b40d9e733af9880590ecc51", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 19, "deletions": 32, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/2733a1f14b6602f97d225ee8794db46d5d5e9efe/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2733a1f14b6602f97d225ee8794db46d5d5e9efe/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2733a1f14b6602f97d225ee8794db46d5d5e9efe", "patch": "@@ -520,7 +520,7 @@ pub impl Parser {\n               token::LBRACE => {\n                 debug!(\"parse_trait_methods(): parsing provided method\");\n                 let (inner_attrs, body) =\n-                    p.parse_inner_attrs_and_block(true);\n+                    p.parse_inner_attrs_and_block();\n                 let attrs = vec::append(attrs, inner_attrs);\n                 provided(@ast::method {\n                     ident: ident,\n@@ -1975,7 +1975,7 @@ pub impl Parser {\n     fn parse_while_expr(&self) -> @expr {\n         let lo = self.last_span.lo;\n         let cond = self.parse_expr();\n-        let body = self.parse_block_no_value();\n+        let body = self.parse_block();\n         let hi = body.span.hi;\n         return self.mk_expr(lo, hi, expr_while(cond, body));\n     }\n@@ -2003,7 +2003,7 @@ pub impl Parser {\n             }\n \n             let lo = self.last_span.lo;\n-            let body = self.parse_block_no_value();\n+            let body = self.parse_block();\n             let hi = body.span.hi;\n             return self.mk_expr(lo, hi, expr_loop(body, opt_ident));\n         } else {\n@@ -2581,47 +2581,35 @@ pub impl Parser {\n             !classify::expr_requires_semi_to_be_stmt(e);\n     }\n \n+    // parse a block. No inner attrs are allowed.\n     fn parse_block(&self) -> blk {\n-        // disallow inner attrs:\n-        let (attrs, blk) = self.parse_inner_attrs_and_block(false);\n-        assert!(vec::is_empty(attrs));\n-        return blk;\n+        maybe_whole!(self, nt_block);\n+\n+        let lo = self.span.lo;\n+        if self.eat_keyword(&~\"unsafe\") {\n+            self.obsolete(copy *self.span, ObsoleteUnsafeBlock);\n+        }\n+        self.expect(&token::LBRACE);\n+\n+        return self.parse_block_tail_(lo, default_blk, ~[]);\n     }\n \n-    // I claim the existence of the 'parse_attrs' flag strongly\n-    // suggests a name-change or refactoring for this function.\n-    fn parse_inner_attrs_and_block(&self, parse_attrs: bool)\n+    // parse a block. Inner attrs are allowed.\n+    fn parse_inner_attrs_and_block(&self)\n         -> (~[attribute], blk) {\n \n         maybe_whole!(pair_empty self, nt_block);\n \n-        fn maybe_parse_inner_attrs_and_next(p: &Parser, parse_attrs: bool) ->\n-            (~[attribute], ~[attribute]) {\n-            if parse_attrs {\n-                p.parse_inner_attrs_and_next()\n-            } else {\n-                (~[], ~[])\n-            }\n-        }\n-\n         let lo = self.span.lo;\n         if self.eat_keyword(&~\"unsafe\") {\n             self.obsolete(copy *self.span, ObsoleteUnsafeBlock);\n         }\n         self.expect(&token::LBRACE);\n-        let (inner, next) =\n-            maybe_parse_inner_attrs_and_next(self, parse_attrs);\n+        let (inner, next) = self.parse_inner_attrs_and_next();\n \n         (inner, self.parse_block_tail_(lo, default_blk, next))\n     }\n-\n-    fn parse_block_no_value(&self) -> blk {\n-        // We parse blocks that cannot have a value the same as any other\n-        // block; the type checker will make sure that the tail expression (if\n-        // any) has unit type.\n-        return self.parse_block();\n-    }\n-\n+    \n     // Precondition: already parsed the '{' or '#{'\n     // I guess that also means \"already parsed the 'impure'\" if\n     // necessary, and this should take a qualifier.\n@@ -3108,7 +3096,7 @@ pub impl Parser {\n     fn parse_item_fn(&self, purity: purity, abis: AbiSet) -> item_info {\n         let (ident, generics) = self.parse_fn_header();\n         let decl = self.parse_fn_decl();\n-        let (inner_attrs, body) = self.parse_inner_attrs_and_block(true);\n+        let (inner_attrs, body) = self.parse_inner_attrs_and_block();\n         (ident,\n          item_fn(decl, purity, abis, generics, body),\n          Some(inner_attrs))\n@@ -3126,7 +3114,7 @@ pub impl Parser {\n             p.parse_arg()\n         };\n \n-        let (inner_attrs, body) = self.parse_inner_attrs_and_block(true);\n+        let (inner_attrs, body) = self.parse_inner_attrs_and_block();\n         let hi = body.span.hi;\n         let attrs = vec::append(attrs, inner_attrs);\n         @ast::method {\n@@ -4126,7 +4114,6 @@ pub impl Parser {\n     }\n \n     // parse a foreign item; on failure, return iovi_none.\n-    // trying to differentiate this from the other parse_foreign_item....\n     fn parse_foreign_item(\n         &self,\n         attrs: ~[attribute],"}]}