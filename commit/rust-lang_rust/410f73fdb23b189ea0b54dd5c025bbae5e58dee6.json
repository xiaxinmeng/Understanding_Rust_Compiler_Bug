{"sha": "410f73fdb23b189ea0b54dd5c025bbae5e58dee6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMGY3M2ZkYjIzYjE4OWVhMGI1NGRkNWMwMjViYmFlNWU1OGRlZTY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-21T09:39:06Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-21T15:57:19Z"}, "message": "Don't write to retptr when returning nil, pass undef for unused params", "tree": {"sha": "b79873f370394128894434e9a7e77f877e03bc17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b79873f370394128894434e9a7e77f877e03bc17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/410f73fdb23b189ea0b54dd5c025bbae5e58dee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/410f73fdb23b189ea0b54dd5c025bbae5e58dee6", "html_url": "https://github.com/rust-lang/rust/commit/410f73fdb23b189ea0b54dd5c025bbae5e58dee6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/410f73fdb23b189ea0b54dd5c025bbae5e58dee6/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68d50b59280030f515269d3fc75695d2c29db7cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/68d50b59280030f515269d3fc75695d2c29db7cc", "html_url": "https://github.com/rust-lang/rust/commit/68d50b59280030f515269d3fc75695d2c29db7cc"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "bb9c41d936687e1853e45e8a1fd0ad1d85bd36c1", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/410f73fdb23b189ea0b54dd5c025bbae5e58dee6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410f73fdb23b189ea0b54dd5c025bbae5e58dee6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=410f73fdb23b189ea0b54dd5c025bbae5e58dee6", "patch": "@@ -3351,8 +3351,7 @@ fn trans_bind_thunk(cx: @local_ctxt, sp: span, incoming_fty: ty::t,\n     // out the pointer to the target function from the environment. The\n     // target function lives in the first binding spot.\n     let (lltargetfn, lltargetenv, starting_idx) = alt target_fn {\n-      some(fptr) { (fptr, null_env_ptr(bcx), 0)\n-      }\n+      some(fptr) { (fptr, llvm::LLVMGetUndef(T_opaque_closure_ptr(*ccx)), 0) }\n       none. {\n         // Silly check\n         check type_is_tup_like(bcx, closure_ty);\n@@ -3646,12 +3645,7 @@ fn trans_args(cx: @block_ctxt, outer_cx: @block_ctxt, llenv: ValueRef,\n              to_zero: to_zero,\n              to_revoke: to_revoke};\n     }\n-    let retty = ty::ty_fn_ret(tcx, fn_ty);\n-    let llretslot_res = if by_ref {\n-        rslt(cx, alloca(cx, T_ptr(type_of_or_i8(bcx, retty))))\n-    } else { alloc_ty(bcx, retty) };\n-    bcx = llretslot_res.bcx;\n-    let llretslot = llretslot_res.val;\n+    let retty = ty::ty_fn_ret(tcx, fn_ty), full_retty = retty;\n     alt gen {\n       some(g) {\n         lazily_emit_all_generic_info_tydesc_glues(cx, g);\n@@ -3661,6 +3655,13 @@ fn trans_args(cx: @block_ctxt, outer_cx: @block_ctxt, llenv: ValueRef,\n       }\n       _ { }\n     }\n+    let llretslot_res = if ty::type_is_nil(tcx, retty) {\n+        rslt(cx, llvm::LLVMGetUndef(T_ptr(T_nil())))\n+    } else if by_ref {\n+        rslt(cx, alloca(cx, T_ptr(type_of_or_i8(bcx, full_retty))))\n+    } else { alloc_ty(bcx, full_retty) };\n+    bcx = llretslot_res.bcx;\n+    let llretslot = llretslot_res.val;\n     if ty::type_contains_params(tcx, retty) {\n         // It's possible that the callee has some generic-ness somewhere in\n         // its return value -- say a method signature within an obj or a fn\n@@ -3744,7 +3745,9 @@ fn trans_call(in_cx: @block_ctxt, f: @ast::expr,\n     let faddr = f_res.val;\n     let llenv;\n     alt f_res.env {\n-      null_env. { llenv = null_env_ptr(cx); }\n+      null_env. {\n+        llenv = llvm::LLVMGetUndef(T_opaque_closure_ptr(*bcx_ccx(cx)));\n+      }\n       some_env(e) { llenv = e; }\n       is_closure. {\n         // It's a closure. Have to fetch the elements\n@@ -4570,7 +4573,9 @@ fn trans_ret(cx: @block_ctxt, e: option::t<@ast::expr>) -> result {\n         let t = ty::expr_ty(bcx_tcx(cx), x);\n         let lv = trans_lval(cx, x);\n         bcx = lv.bcx;\n-        if ast_util::ret_by_ref(cx.fcx.ret_style) {\n+        if ty::type_is_nil(bcx_tcx(cx), t) {\n+            // Don't write nil\n+        } else if ast_util::ret_by_ref(cx.fcx.ret_style) {\n             assert lv.is_mem;\n             Store(bcx, lv.val, cx.fcx.llretptr);\n         } else {\n@@ -4590,10 +4595,7 @@ fn trans_ret(cx: @block_ctxt, e: option::t<@ast::expr>) -> result {\n             }\n         }\n       }\n-      _ {\n-        let t = llvm::LLVMGetElementType(val_ty(cx.fcx.llretptr));\n-        Store(bcx, C_null(t), cx.fcx.llretptr);\n-      }\n+      _ {}\n     }\n     // run all cleanups and back out.\n \n@@ -5280,7 +5282,8 @@ fn trans_closure(bcx_maybe: option::t<@block_ctxt>,\n     // (trans_block, trans_expr, et cetera).\n     let rslt =\n         if !ty::type_is_bot(cx.ccx.tcx, block_ty) &&\n-               f.proto != ast::proto_iter {\n+           !ty::type_is_nil(cx.ccx.tcx, block_ty) &&\n+           f.proto != ast::proto_iter {\n             trans_block(bcx, f.body, save_in(fcx.llretptr))\n         } else { trans_block(bcx, f.body, return) };\n     bcx = rslt.bcx;"}]}