{"sha": "a12d42ba86fb1ab9541dc173311a021377f8e460", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMmQ0MmJhODZmYjFhYjk1NDFkYzE3MzMxMWEwMjEzNzdmOGU0NjA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-17T18:35:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-17T18:35:19Z"}, "message": "Rollup merge of #69642 - ecstatic-morse:issue-69615, r=oli-obk\n\nUse query to determine whether function needs const checking\n\nResolves #69615.\n\nThe HIR const-checker was checking the `constness` of a function's `fn_sig` to determine whether a function needed const-checking. Now that const trait impls are a thing, this is no longer enough. All code should use the `is_const_fn_raw` query instead, which takes the constness of the impl block into account.\n\nr? @oli-obk", "tree": {"sha": "6d401ab59c5fc020326c2a8544fff5d34afbc53e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d401ab59c5fc020326c2a8544fff5d34afbc53e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a12d42ba86fb1ab9541dc173311a021377f8e460", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJemfbnCRBK7hj4Ov3rIwAAdHIIAIwfuyVsIhEfgjE14VBEqjlb\nAePlwFqWp7dEyWNn6ztn4SpxfsoYtEMUSTephJ+iki8jKITh8TFzq9mK3hbsaJSr\nLgrjPeBTVYXkLyWrXPIxDxgTOrA9LriV4KdjNSRE4m3F8k3sJRdw9SyqVlJOeTXp\nH1AwYa3FQ9PjCpUNjZbaLAwm0vHojN1P2q1op6IXkrWWvBog7Hn6OwKH+VakphYq\nxoXVK/liLZr1rOni1ul3nHrlN2tnV8cDJbq0Xpd/t8vMJ6CWZfFAGy/GIckqV8Ml\nIrsrdoYsBSPvoJBs3wl9p0oKIoK0/oNq2cRZwKzpu1TPZdJT3y+hHEWVplOYVhc=\n=bqrJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 6d401ab59c5fc020326c2a8544fff5d34afbc53e\nparent 8d67f576b56e8fc98a31123e5963f8d00e40611c\nparent eb74096a32702e45bb9cd8d1c2c787c2067272d8\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587148519 +0200\ncommitter GitHub <noreply@github.com> 1587148519 +0200\n\nRollup merge of #69642 - ecstatic-morse:issue-69615, r=oli-obk\n\nUse query to determine whether function needs const checking\n\nResolves #69615.\n\nThe HIR const-checker was checking the `constness` of a function's `fn_sig` to determine whether a function needed const-checking. Now that const trait impls are a thing, this is no longer enough. All code should use the `is_const_fn_raw` query instead, which takes the constness of the impl block into account.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a12d42ba86fb1ab9541dc173311a021377f8e460", "html_url": "https://github.com/rust-lang/rust/commit/a12d42ba86fb1ab9541dc173311a021377f8e460", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a12d42ba86fb1ab9541dc173311a021377f8e460/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d67f576b56e8fc98a31123e5963f8d00e40611c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d67f576b56e8fc98a31123e5963f8d00e40611c", "html_url": "https://github.com/rust-lang/rust/commit/8d67f576b56e8fc98a31123e5963f8d00e40611c"}, {"sha": "eb74096a32702e45bb9cd8d1c2c787c2067272d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb74096a32702e45bb9cd8d1c2c787c2067272d8", "html_url": "https://github.com/rust-lang/rust/commit/eb74096a32702e45bb9cd8d1c2c787c2067272d8"}], "stats": {"total": 69, "additions": 45, "deletions": 24}, "files": [{"sha": "bb33372692d27b97444cf9b9dede3eabb37ab195", "filename": "src/librustc_mir/const_eval/fn_queries.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a12d42ba86fb1ab9541dc173311a021377f8e460/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d42ba86fb1ab9541dc173311a021377f8e460/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs?ref=a12d42ba86fb1ab9541dc173311a021377f8e460", "patch": "@@ -95,8 +95,16 @@ fn is_const_fn_raw(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n \n     let node = tcx.hir().get(hir_id);\n \n-    if let Some(whitelisted) = is_const_intrinsic(tcx, def_id) {\n-        whitelisted\n+    if let hir::Node::ForeignItem(hir::ForeignItem { kind: hir::ForeignItemKind::Fn(..), .. }) =\n+        node\n+    {\n+        // Intrinsics use `rustc_const_{un,}stable` attributes to indicate constness. All other\n+        // foreign items cannot be evaluated at compile-time.\n+        if let Abi::RustIntrinsic | Abi::PlatformIntrinsic = tcx.hir().get_foreign_abi(hir_id) {\n+            tcx.lookup_const_stability(def_id).is_some()\n+        } else {\n+            false\n+        }\n     } else if let Some(fn_like) = FnLikeNode::from_node(node) {\n         if fn_like.constness() == hir::Constness::Const {\n             return true;\n@@ -112,21 +120,6 @@ fn is_const_fn_raw(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     }\n }\n \n-/// Const evaluability whitelist is here to check evaluability at the\n-/// top level beforehand.\n-fn is_const_intrinsic(tcx: TyCtxt<'_>, def_id: DefId) -> Option<bool> {\n-    if tcx.is_closure(def_id) {\n-        return None;\n-    }\n-\n-    match tcx.fn_sig(def_id).abi() {\n-        Abi::RustIntrinsic | Abi::PlatformIntrinsic => {\n-            Some(tcx.lookup_const_stability(def_id).is_some())\n-        }\n-        _ => None,\n-    }\n-}\n-\n /// Checks whether the given item is an `impl` that has a `const` modifier.\n fn is_const_impl_raw(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);"}, {"sha": "f409b040c69d4d76a58e3e7d13e98f5223e3cd26", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a12d42ba86fb1ab9541dc173311a021377f8e460/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d42ba86fb1ab9541dc173311a021377f8e460/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=a12d42ba86fb1ab9541dc173311a021377f8e460", "patch": "@@ -74,16 +74,16 @@ enum ConstKind {\n }\n \n impl ConstKind {\n-    fn for_body(body: &hir::Body<'_>, hir_map: Map<'_>) -> Option<Self> {\n-        let is_const_fn = |id| hir_map.fn_sig_by_hir_id(id).unwrap().header.is_const();\n-\n-        let owner = hir_map.body_owner(body.id());\n-        let const_kind = match hir_map.body_owner_kind(owner) {\n+    fn for_body(body: &hir::Body<'_>, tcx: TyCtxt<'_>) -> Option<Self> {\n+        let owner = tcx.hir().body_owner(body.id());\n+        let const_kind = match tcx.hir().body_owner_kind(owner) {\n             hir::BodyOwnerKind::Const => Self::Const,\n             hir::BodyOwnerKind::Static(Mutability::Mut) => Self::StaticMut,\n             hir::BodyOwnerKind::Static(Mutability::Not) => Self::Static,\n \n-            hir::BodyOwnerKind::Fn if is_const_fn(owner) => Self::ConstFn,\n+            hir::BodyOwnerKind::Fn if tcx.is_const_fn_raw(tcx.hir().local_def_id(owner)) => {\n+                Self::ConstFn\n+            }\n             hir::BodyOwnerKind::Fn | hir::BodyOwnerKind::Closure => return None,\n         };\n \n@@ -211,7 +211,7 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n     }\n \n     fn visit_body(&mut self, body: &'tcx hir::Body<'tcx>) {\n-        let kind = ConstKind::for_body(body, self.tcx.hir());\n+        let kind = ConstKind::for_body(body, self.tcx);\n         self.recurse_into(kind, |this| intravisit::walk_body(this, body));\n     }\n "}, {"sha": "f7af1b506f0dba01b4d8c4239329c8850901e744", "filename": "src/test/ui/rfc-2632-const-trait-impl/hir-const-check.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a12d42ba86fb1ab9541dc173311a021377f8e460/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d42ba86fb1ab9541dc173311a021377f8e460/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs?ref=a12d42ba86fb1ab9541dc173311a021377f8e460", "patch": "@@ -0,0 +1,16 @@\n+// Regression test for #69615.\n+\n+#![feature(const_trait_impl, const_fn)]\n+#![allow(incomplete_features)]\n+\n+pub trait MyTrait {\n+    fn method(&self);\n+}\n+\n+impl const MyTrait for () {\n+    fn method(&self) {\n+        match *self {} //~ ERROR `match` is not allowed in a `const fn`\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "563a9afe5bb84e9231cd943fc403172533476ae5", "filename": "src/test/ui/rfc-2632-const-trait-impl/hir-const-check.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a12d42ba86fb1ab9541dc173311a021377f8e460/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a12d42ba86fb1ab9541dc173311a021377f8e460/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr?ref=a12d42ba86fb1ab9541dc173311a021377f8e460", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: `match` is not allowed in a `const fn`\n+  --> $DIR/hir-const-check.rs:12:9\n+   |\n+LL |         match *self {}\n+   |         ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}