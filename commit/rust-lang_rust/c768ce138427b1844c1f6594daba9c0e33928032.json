{"sha": "c768ce138427b1844c1f6594daba9c0e33928032", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NjhjZTEzODQyN2IxODQ0YzFmNjU5NGRhYmE5YzBlMzM5MjgwMzI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-11-26T21:20:45Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-12-23T18:35:22Z"}, "message": "bootstrap: convert rust-docs to use Tarball", "tree": {"sha": "072f461dbe1fd9ad95d237a5543caaf956886fbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/072f461dbe1fd9ad95d237a5543caaf956886fbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c768ce138427b1844c1f6594daba9c0e33928032", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl/jjewACgkQPgar6Auq\n8ZzIHQ//a8p+zJ1XUxaPCibT7K9yOe2rEBwRsuh/i0fJcY90smBI1XoUGUjsIVVO\nqmT4hKvxtoUMkHmEQdcBmQ+D07NcYbkj7BLoUFKnSGiAMUq2rsiF+eM3O/16izzM\nSPBPN68PeKxieziEhP3740wxebpwGFRMjU0BPlHFoH5ZjWpw9d3vlm7mZr+a9gvu\noqIa+l5DBVzsixx91s9fgWjk0a0y4YujdNtmoFVqyHu+90UCdI/ZtxqMiOh+pSVj\n6Bagumig3Rdzmt8VnUga5jhj0UQVkl5ezShboF//fEUZUueh2RzvjKoui+nbczX0\nAmXRZZiwc9lR4tKwSO5VLZLhPCJ7F+hvO5TFvpnqY59lZpiwWwGilLdJmXqF5knt\nUKw/rxEMlt9LXLHbsIhGIPxzl8KIphcqMS+GoOWEQ6qGh66mK8bNtOKrq5FFwjF9\na0o/IduNIGpROlOybXeY30uoh8Wotkr6RMWZpkgF8WLuHEuFIkxxuSC0b88kf3Yp\nokapJ0WQdlW6P8oanftzrVEzJ06YYaGP1CuyLqwwSGLgyJACDrzkqY2Ppmn/BpMq\nHZjuonLNyfFQM4/gG6pSlvqAcgDwqsMY4CHMD5ivJCfKY4s731Y6DPMNxiMqGHMf\nKrS0NkppxNzrBhPMpZf0orFQaf52p86uma1sGdmkCtYivZ8IWBA=\n=FEcW\n-----END PGP SIGNATURE-----", "payload": "tree 072f461dbe1fd9ad95d237a5543caaf956886fbe\nparent 7be85701cda29bbe715e462be856a61aed5bd4b4\nauthor Pietro Albini <pietro@pietroalbini.org> 1606425645 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1608748522 +0100\n\nbootstrap: convert rust-docs to use Tarball\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c768ce138427b1844c1f6594daba9c0e33928032", "html_url": "https://github.com/rust-lang/rust/commit/c768ce138427b1844c1f6594daba9c0e33928032", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c768ce138427b1844c1f6594daba9c0e33928032/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7be85701cda29bbe715e462be856a61aed5bd4b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7be85701cda29bbe715e462be856a61aed5bd4b4", "html_url": "https://github.com/rust-lang/rust/commit/7be85701cda29bbe715e462be856a61aed5bd4b4"}], "stats": {"total": 64, "additions": 23, "deletions": 41}, "files": [{"sha": "26a621c41caede76129552f8dddb430ecc4aa19f", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 11, "deletions": 34, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c768ce138427b1844c1f6594daba9c0e33928032/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c768ce138427b1844c1f6594daba9c0e33928032/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=c768ce138427b1844c1f6594daba9c0e33928032", "patch": "@@ -55,7 +55,7 @@ pub struct Docs {\n }\n \n impl Step for Docs {\n-    type Output = PathBuf;\n+    type Output = Option<PathBuf>;\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -67,48 +67,25 @@ impl Step for Docs {\n     }\n \n     /// Builds the `rust-docs` installer component.\n-    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+    fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n         let host = self.host;\n-\n-        let name = pkgname(builder, \"rust-docs\");\n-\n         if !builder.config.docs {\n-            return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host.triple));\n+            return None;\n         }\n \n         builder.default_doc(None);\n \n         builder.info(&format!(\"Dist docs ({})\", host));\n         let _time = timeit(builder);\n \n-        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, host.triple));\n-        let _ = fs::remove_dir_all(&image);\n+        let dest = \"share/doc/rust/html\";\n \n-        let dst = image.join(\"share/doc/rust/html\");\n-        t!(fs::create_dir_all(&dst));\n-        let src = builder.doc_out(host);\n-        builder.cp_r(&src, &dst);\n-        builder.install(&builder.src.join(\"src/doc/robots.txt\"), &dst, 0o644);\n-\n-        let mut cmd = rust_installer(builder);\n-        cmd.arg(\"generate\")\n-            .arg(\"--product-name=Rust-Documentation\")\n-            .arg(\"--rel-manifest-dir=rustlib\")\n-            .arg(\"--success-message=Rust-documentation-is-installed.\")\n-            .arg(\"--image-dir\")\n-            .arg(&image)\n-            .arg(\"--work-dir\")\n-            .arg(&tmpdir(builder))\n-            .arg(\"--output-dir\")\n-            .arg(&distdir(builder))\n-            .arg(format!(\"--package-name={}-{}\", name, host.triple))\n-            .arg(\"--component-name=rust-docs\")\n-            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n-            .arg(\"--bulk-dirs=share/doc/rust/html\");\n-        builder.run(&mut cmd);\n-        builder.remove_dir(&image);\n+        let mut tarball = Tarball::new(builder, \"rust-docs\", &host.triple);\n+        tarball.set_product_name(\"Rust Documentation\");\n+        tarball.add_dir(&builder.doc_out(host), dest);\n+        tarball.add_file(&builder.src.join(\"src/doc/robots.txt\"), dest, 0o644);\n \n-        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host.triple))\n+        Some(tarball.generate())\n     }\n }\n \n@@ -1826,7 +1803,7 @@ impl Step for Extended {\n         tarballs.extend(llvm_tools_installer);\n         tarballs.push(analysis_installer);\n         tarballs.push(std_installer);\n-        if builder.config.docs {\n+        if let Some(docs_installer) = docs_installer {\n             tarballs.push(docs_installer);\n         }\n         if target.contains(\"pc-windows-gnu\") {\n@@ -2509,7 +2486,7 @@ impl Step for RustDev {\n         // Copy the include directory as well; needed mostly to build\n         // librustc_llvm properly (e.g., llvm-config.h is in here). But also\n         // just broadly useful to be able to link against the bundled LLVM.\n-        tarball.add_dir(&builder.llvm_out(target).join(\"include\"), \".\");\n+        tarball.add_dir(&builder.llvm_out(target).join(\"include\"), \"include\");\n \n         // Copy libLLVM.so to the target lib dir as well, so the RPATH like\n         // `$ORIGIN/../lib` can find it. It may also be used as a dependency"}, {"sha": "50d58d00a66e405768eb24a6d63bd6b276b507a2", "filename": "src/bootstrap/tarball.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c768ce138427b1844c1f6594daba9c0e33928032/src%2Fbootstrap%2Ftarball.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c768ce138427b1844c1f6594daba9c0e33928032/src%2Fbootstrap%2Ftarball.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftarball.rs?ref=c768ce138427b1844c1f6594daba9c0e33928032", "patch": "@@ -27,6 +27,7 @@ pub(crate) struct Tarball<'a> {\n     pkgname: String,\n     component: String,\n     target: String,\n+    product_name: String,\n     overlay: OverlayKind,\n \n     temp_dir: PathBuf,\n@@ -54,6 +55,7 @@ impl<'a> Tarball<'a> {\n             pkgname,\n             component: component.into(),\n             target: target.into(),\n+            product_name: \"Rust\".into(),\n             overlay: OverlayKind::Rust,\n \n             temp_dir,\n@@ -69,6 +71,10 @@ impl<'a> Tarball<'a> {\n         self.overlay = overlay;\n     }\n \n+    pub(crate) fn set_product_name(&mut self, name: &str) {\n+        self.product_name = name.into();\n+    }\n+\n     pub(crate) fn is_preview(&mut self, is: bool) {\n         self.is_preview = is;\n     }\n@@ -91,12 +97,11 @@ impl<'a> Tarball<'a> {\n         self.builder.install(src.as_ref(), &destdir, perms);\n     }\n \n-    pub(crate) fn add_dir(&self, src: impl AsRef<Path>, destdir: impl AsRef<Path>) {\n-        t!(std::fs::create_dir_all(destdir.as_ref()));\n-        self.builder.cp_r(\n-            src.as_ref(),\n-            &self.image_dir.join(destdir.as_ref()).join(src.as_ref().file_name().unwrap()),\n-        );\n+    pub(crate) fn add_dir(&self, src: impl AsRef<Path>, dest: impl AsRef<Path>) {\n+        let dest = self.image_dir.join(dest.as_ref());\n+\n+        t!(std::fs::create_dir_all(&dest));\n+        self.builder.cp_r(src.as_ref(), &dest);\n     }\n \n     pub(crate) fn generate(self) -> PathBuf {\n@@ -114,7 +119,7 @@ impl<'a> Tarball<'a> {\n         let distdir = crate::dist::distdir(self.builder);\n         let mut cmd = self.builder.tool_cmd(crate::tool::Tool::RustInstaller);\n         cmd.arg(\"generate\")\n-            .arg(\"--product-name=Rust\")\n+            .arg(format!(\"--product-name={}\", self.product_name))\n             .arg(\"--rel-manifest-dir=rustlib\")\n             .arg(format!(\"--success-message={} installed.\", self.component))\n             .arg(\"--image-dir\")"}]}