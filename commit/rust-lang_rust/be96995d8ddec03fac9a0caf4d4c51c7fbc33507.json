{"sha": "be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlOTY5OTVkOGRkZWMwM2ZhYzlhMGNhZjRkNGM1MWM3ZmJjMzM1MDc=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-07-19T23:13:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-19T23:13:24Z"}, "message": "Add portable_simd unstable feature gate (#141)", "tree": {"sha": "674d52319d03099671081f7c78c491be82e1404f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/674d52319d03099671081f7c78c491be82e1404f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg9gcUCRBK7hj4Ov3rIwAAecwIACWOnyFgBci/quhMvnXCQ3+N\nIMbx8+ipWZlG2dhZTr9+xkVwuoSxcDuxlkPmfxyrE9TkF8OJMuI6+hcQzp8He+Yc\nbIWYwmT0rIx0KRXBGrST0vb4kdJPa7sOetLVhTxuRhGbW2Ub+UBE7ZLD/qkYYtOe\nnos8r415LrlRDldxi1hXOmDhNh9N127rm06gg7iwbJnrtF9DJTuSURU/nQTkbPe6\nZAwV+EuI0w9WdwM49rVdxfRT9aZ6cEdR8lZ64khBo/AQOUpRdFIwGwiLdJveihDj\ncztF1cJJ6qSwqmUKlBaiZGAzCU+FwQE2h2RDnz84LacKeK8ru3PQXbp+Xes+tbE=\n=xj0m\n-----END PGP SIGNATURE-----\n", "payload": "tree 674d52319d03099671081f7c78c491be82e1404f\nparent 3954b27787ad3c3d51b45a89503d0f96adb52eb8\nauthor Caleb Zulawski <caleb.zulawski@gmail.com> 1626736404 -0400\ncommitter GitHub <noreply@github.com> 1626736404 -0700\n\nAdd portable_simd unstable feature gate (#141)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "html_url": "https://github.com/rust-lang/rust/commit/be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3954b27787ad3c3d51b45a89503d0f96adb52eb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3954b27787ad3c3d51b45a89503d0f96adb52eb8", "html_url": "https://github.com/rust-lang/rust/commit/3954b27787ad3c3d51b45a89503d0f96adb52eb8"}], "stats": {"total": 78, "additions": 71, "deletions": 7}, "files": [{"sha": "5c2d4390ad082b1d865fae5cdff3ecd00e86c57f", "filename": "crates/core_simd/examples/matrix_inversion.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Fexamples%2Fmatrix_inversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Fexamples%2Fmatrix_inversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fexamples%2Fmatrix_inversion.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -1,7 +1,10 @@\n //! 4x4 matrix inverse\n // Code ported from the `packed_simd` crate\n // Run this code with `cargo test --example matrix_inversion`\n-#![feature(array_chunks)]\n+#![feature(\n+    array_chunks,\n+    portable_simd,\n+)]\n use core_simd::*;\n \n // Gotta define our own 4x4 matrix since Rust doesn't ship multidim arrays yet :^)"}, {"sha": "40e4e18b02642c46beb7062c3edf3e5873c0173f", "filename": "crates/core_simd/examples/nbody.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Fexamples%2Fnbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Fexamples%2Fnbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fexamples%2Fnbody.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -1,3 +1,5 @@\n+#![feature(portable_simd)]\n+\n /// Benchmarks game nbody code\n /// Taken from the `packed_simd` crate\n /// Run this benchmark with `cargo test --example nbody`"}, {"sha": "25c53097bebe08853237b2d929f9b5ba92ac4567", "filename": "crates/core_simd/src/array.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Fsrc%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Fsrc%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Farray.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -25,6 +25,7 @@ where\n     /// SIMD gather: construct a SIMD vector by reading from a slice, using potentially discontiguous indices.\n     /// If an index is out of bounds, that lane instead selects the value from the \"or\" vector.\n     /// ```\n+    /// # #![feature(portable_simd)]\n     /// # use core_simd::*;\n     /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 5]);\n@@ -42,6 +43,7 @@ where\n     /// SIMD gather: construct a SIMD vector by reading from a slice, using potentially discontiguous indices.\n     /// Out-of-bounds indices instead use the default value for that lane (0).\n     /// ```\n+    /// # #![feature(portable_simd)]\n     /// # use core_simd::*;\n     /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 5]);\n@@ -61,6 +63,7 @@ where\n     /// SIMD gather: construct a SIMD vector by reading from a slice, using potentially discontiguous indices.\n     /// Out-of-bounds or masked indices instead select the value from the \"or\" vector.\n     /// ```\n+    /// # #![feature(portable_simd)]\n     /// # use core_simd::*;\n     /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 5]);\n@@ -90,6 +93,7 @@ where\n     /// Out-of-bounds indices are not written.\n     /// `scatter` writes \"in order\", so if an index receives two writes, only the last is guaranteed.\n     /// ```\n+    /// # #![feature(portable_simd)]\n     /// # use core_simd::*;\n     /// let mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 0]);\n@@ -107,6 +111,7 @@ where\n     /// Out-of-bounds or masked indices are not written.\n     /// `scatter_select` writes \"in order\", so if an index receives two writes, only the last is guaranteed.\n     /// ```\n+    /// # #![feature(portable_simd)]\n     /// # use core_simd::*;\n     /// let mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 0]);"}, {"sha": "a64904dee30448d5c05270841aebd30983e0b755", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -1,7 +1,15 @@\n #![no_std]\n #![allow(incomplete_features)]\n-#![feature(repr_simd, platform_intrinsics, simd_ffi, const_generics, stdsimd)]\n+#![feature(\n+    const_generics, \n+    platform_intrinsics,\n+    repr_simd,\n+    simd_ffi,\n+    staged_api,\n+    stdsimd,\n+)]\n #![warn(missing_docs)]\n+#![unstable(feature = \"portable_simd\", issue = \"86656\")]\n //! Portable SIMD module.\n \n #[macro_use]"}, {"sha": "7290a28362f9c97ee1e5cf226be437a3d3245e05", "filename": "crates/core_simd/src/math.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Fsrc%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Fsrc%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmath.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -6,6 +6,7 @@ macro_rules! impl_uint_arith {\n             ///\n             /// # Examples\n             /// ```\n+            /// # #![feature(portable_simd)]\n             /// # use core_simd::*;\n             #[doc = concat!(\"# use core::\", stringify!($n), \"::MAX;\")]\n             #[doc = concat!(\"let x = \", stringify!($name), \"::from_array([2, 1, 0, MAX]);\")]\n@@ -24,6 +25,7 @@ macro_rules! impl_uint_arith {\n             ///\n             /// # Examples\n             /// ```\n+            /// # #![feature(portable_simd)]\n             /// # use core_simd::*;\n             #[doc = concat!(\"# use core::\", stringify!($n), \"::MAX;\")]\n             #[doc = concat!(\"let x = \", stringify!($name), \"::from_array([2, 1, 0, MAX]);\")]\n@@ -48,6 +50,7 @@ macro_rules! impl_int_arith {\n             ///\n             /// # Examples\n             /// ```\n+            /// # #![feature(portable_simd)]\n             /// # use core_simd::*;\n             #[doc = concat!(\"# use core::\", stringify!($n), \"::{MIN, MAX};\")]\n             #[doc = concat!(\"let x = \", stringify!($name), \"::from_array([MIN, 0, 1, MAX]);\")]\n@@ -66,6 +69,7 @@ macro_rules! impl_int_arith {\n             ///\n             /// # Examples\n             /// ```\n+            /// # #![feature(portable_simd)]\n             /// # use core_simd::*;\n             #[doc = concat!(\"# use core::\", stringify!($n), \"::{MIN, MAX};\")]\n             #[doc = concat!(\"let x = \", stringify!($name), \"::from_array([MIN, -2, -1, MAX]);\")]\n@@ -84,6 +88,7 @@ macro_rules! impl_int_arith {\n             ///\n             /// # Examples\n             /// ```\n+            /// # #![feature(portable_simd)]\n             /// # use core_simd::*;\n             #[doc = concat!(\"# use core::\", stringify!($n), \"::{MIN, MAX};\")]\n             #[doc = concat!(\"let xs = \", stringify!($name), \"::from_array([MIN, MIN +1, -5, 0]);\")]\n@@ -101,6 +106,7 @@ macro_rules! impl_int_arith {\n             ///\n             /// # Examples\n             /// ```\n+            /// # #![feature(portable_simd)]\n             /// # use core_simd::*;\n             #[doc = concat!(\"# use core::\", stringify!($n), \"::{MIN, MAX};\")]\n             #[doc = concat!(\"let xs = \", stringify!($name), \"::from_array([MIN, -2, 0, 3]);\")]\n@@ -122,6 +128,7 @@ macro_rules! impl_int_arith {\n             ///\n             /// # Examples\n             /// ```\n+            /// # #![feature(portable_simd)]\n             /// # use core_simd::*;\n             #[doc = concat!(\"# use core::\", stringify!($n), \"::{MIN, MAX};\")]\n             #[doc = concat!(\"let x = \", stringify!($name), \"::from_array([MIN, -2, 3, MAX]);\")]"}, {"sha": "01148a26bad42b861e910175a44dcb829b72bc72", "filename": "crates/core_simd/src/permute.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Fsrc%2Fpermute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Fsrc%2Fpermute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fpermute.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -11,12 +11,13 @@ macro_rules! impl_shuffle_lane {\n             /// than storing and reloading from memory.\n             ///\n             /// ```\n+            /// #![feature(portable_simd)]\n             /// # use core_simd::*;\n-            // let a = f32x4::from_array([1.0, 2.0, 3.0, 4.0]);\n-            // let b = f32x4::from_array([5.0, 6.0, 7.0, 8.0]);\n-            // const IDXS: [u32; 4] = [4,0,3,7];\n-            // let c = f32x4::shuffle::<IDXS>(a,b);\n-            // assert_eq!(f32x4::from_array([5.0, 1.0, 4.0, 8.0]), c);\n+            /// let a = f32x4::from_array([1.0, 2.0, 3.0, 4.0]);\n+            /// let b = f32x4::from_array([5.0, 6.0, 7.0, 8.0]);\n+            /// const IDXS: [u32; 4] = [4,0,3,7];\n+            /// let c = f32x4::shuffle::<IDXS>(a,b);\n+            /// assert_eq!(f32x4::from_array([5.0, 1.0, 4.0, 8.0]), c);\n             /// ```\n             #[inline]\n             pub fn shuffle<const IDX: [u32; $n]>(self, second: Self) -> Self {\n@@ -51,6 +52,7 @@ macro_rules! impl_shuffle_lane {\n             /// This particular permutation is efficient on many architectures.\n             ///\n             /// ```\n+            /// #![feature(portable_simd)]\n             /// # use core_simd::SimdU32;\n             /// let a = SimdU32::from_array([0, 1, 2, 3]);\n             /// let b = SimdU32::from_array([4, 5, 6, 7]);\n@@ -102,6 +104,7 @@ macro_rules! impl_shuffle_lane {\n             /// This particular permutation is efficient on many architectures.\n             ///\n             /// ```\n+            /// #![feature(portable_simd)]\n             /// # use core_simd::SimdU32;\n             /// let a = SimdU32::from_array([0, 4, 1, 5]);\n             /// let b = SimdU32::from_array([2, 6, 3, 7]);"}, {"sha": "dee1d775eb8281cacfc589998f211525a5dd6db6", "filename": "crates/core_simd/src/select.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Fsrc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Fsrc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fselect.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -57,6 +57,7 @@ macro_rules! impl_select {\n             /// that lane mask is true, and `false_values` if that lane mask is false.\n             ///\n             /// ```\n+            /// # #![feature(portable_simd)]\n             /// # use core_simd::{Mask32, SimdI32};\n             /// let a = SimdI32::from_array([0, 1, 2, 3]);\n             /// let b = SimdI32::from_array([4, 5, 6, 7]);\n@@ -67,6 +68,7 @@ macro_rules! impl_select {\n             ///\n             /// `select` can also be used on masks:\n             /// ```\n+            /// # #![feature(portable_simd)]\n             /// # use core_simd::Mask32;\n             /// let a = Mask32::from_array([true, true, false, false]);\n             /// let b = Mask32::from_array([false, false, true, true]);"}, {"sha": "98283110097e160f873dc65d77e4977dc1e84880", "filename": "crates/core_simd/tests/f32_ops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Ff32_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Ff32_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Ff32_ops.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -1,3 +1,5 @@\n+#![feature(portable_simd)]\n+\n #[macro_use]\n mod ops_macros;\n impl_float_tests! { SimdF32, f32, i32 }"}, {"sha": "0818b0c5c5a98506a76616e893df02b8b3e293c2", "filename": "crates/core_simd/tests/f64_ops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Ff64_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Ff64_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Ff64_ops.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -1,3 +1,5 @@\n+#![feature(portable_simd)]\n+\n #[macro_use]\n mod ops_macros;\n impl_float_tests! { SimdF64, f64, i64 }"}, {"sha": "33d92faa5956e63a59fbc0ff3b4f01229ae47482", "filename": "crates/core_simd/tests/i16_ops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fi16_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fi16_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi16_ops.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -1,3 +1,5 @@\n+#![feature(portable_simd)]\n+\n #[macro_use]\n mod ops_macros;\n impl_signed_tests! { SimdI16, i16 }"}, {"sha": "481bca23e83445cb069d87b4af503dbbb424797f", "filename": "crates/core_simd/tests/i32_ops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fi32_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fi32_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi32_ops.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -1,3 +1,5 @@\n+#![feature(portable_simd)]\n+\n #[macro_use]\n mod ops_macros;\n impl_signed_tests! { SimdI32, i32 }"}, {"sha": "5ab0614c8480f9b1595cc6627dc6e22d4497b750", "filename": "crates/core_simd/tests/i64_ops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fi64_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fi64_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi64_ops.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -1,3 +1,5 @@\n+#![feature(portable_simd)]\n+\n #[macro_use]\n mod ops_macros;\n impl_signed_tests! { SimdI64, i64 }"}, {"sha": "0db9ee47a9e23f17e558147e00f7712d4dcbdba7", "filename": "crates/core_simd/tests/i8_ops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fi8_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fi8_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi8_ops.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -1,3 +1,5 @@\n+#![feature(portable_simd)]\n+\n #[macro_use]\n mod ops_macros;\n impl_signed_tests! { SimdI8, i8 }"}, {"sha": "8f5470b685c9894455dee03d8456615075f57d5e", "filename": "crates/core_simd/tests/isize_ops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fisize_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fisize_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fisize_ops.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -1,3 +1,5 @@\n+#![feature(portable_simd)]\n+\n #[macro_use]\n mod ops_macros;\n impl_signed_tests! { SimdIsize, isize }"}, {"sha": "f113b50cb769df9e7959b5adfd6ba2d4d3b6ec72", "filename": "crates/core_simd/tests/mask_ops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fmask_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fmask_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmask_ops.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -1 +1,3 @@\n+#![feature(portable_simd)]\n+\n mod mask_ops_impl;"}, {"sha": "61d8e449744bd7d8d7bd90338f527888b791af51", "filename": "crates/core_simd/tests/masks.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmasks.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -1,3 +1,5 @@\n+#![feature(portable_simd)]\n+\n #[cfg(target_arch = \"wasm32\")]\n use wasm_bindgen_test::*;\n "}, {"sha": "4c771002528fc0ad65196e3f083409909320404e", "filename": "crates/core_simd/tests/permute.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fpermute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fpermute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fpermute.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -1,3 +1,5 @@\n+#![feature(portable_simd)]\n+\n use core_simd::SimdU32;\n \n #[cfg(target_arch = \"wasm32\")]"}, {"sha": "37044a751125a9893f9f83492c9c50b0604e45ba", "filename": "crates/core_simd/tests/round.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fround.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fround.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fround.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -1,3 +1,5 @@\n+#![feature(portable_simd)]\n+\n macro_rules! float_rounding_test {\n     { $vector:ident, $scalar:tt, $int_scalar:tt } => {\n         mod $scalar {"}, {"sha": "11228680dde7243336102a44c6a48ed738f9acd5", "filename": "crates/core_simd/tests/to_bytes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fto_bytes.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -1,3 +1,5 @@\n+#![feature(portable_simd)]\n+\n use core_simd::SimdU32;\n \n #[test]"}, {"sha": "d220dae6456894ca15960d1e1f19026858b6e76e", "filename": "crates/core_simd/tests/u16_ops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fu16_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fu16_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fu16_ops.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -1,3 +1,5 @@\n+#![feature(portable_simd)]\n+\n #[macro_use]\n mod ops_macros;\n impl_unsigned_tests! { SimdU16, u16 }"}, {"sha": "f27cc30a17fc79aefaffb60061ea257804f1f957", "filename": "crates/core_simd/tests/u32_ops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fu32_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fu32_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fu32_ops.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -1,3 +1,5 @@\n+#![feature(portable_simd)]\n+\n #[macro_use]\n mod ops_macros;\n impl_unsigned_tests! { SimdU32, u32 }"}, {"sha": "ec3df39c53c362238a1c7f8844cb4e332774f95c", "filename": "crates/core_simd/tests/u64_ops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fu64_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fu64_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fu64_ops.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -1,3 +1,5 @@\n+#![feature(portable_simd)]\n+\n #[macro_use]\n mod ops_macros;\n impl_unsigned_tests! { SimdU64, u64 }"}, {"sha": "2c52a52b9216f4376b473c629cfc98a7b230fe7b", "filename": "crates/core_simd/tests/u8_ops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fu8_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fu8_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fu8_ops.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -1,3 +1,5 @@\n+#![feature(portable_simd)]\n+\n #[macro_use]\n mod ops_macros;\n impl_unsigned_tests! { SimdU8, u8 }"}, {"sha": "070edc4e266fa6e0c35e58210c6e4ef2f09493a7", "filename": "crates/core_simd/tests/usize_ops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fusize_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be96995d8ddec03fac9a0caf4d4c51c7fbc33507/crates%2Fcore_simd%2Ftests%2Fusize_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fusize_ops.rs?ref=be96995d8ddec03fac9a0caf4d4c51c7fbc33507", "patch": "@@ -1,3 +1,5 @@\n+#![feature(portable_simd)]\n+\n #[macro_use]\n mod ops_macros;\n impl_unsigned_tests! { SimdUsize, usize }"}]}