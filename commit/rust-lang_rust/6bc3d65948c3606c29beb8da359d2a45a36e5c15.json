{"sha": "6bc3d65948c3606c29beb8da359d2a45a36e5c15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYzNkNjU5NDhjMzYwNmMyOWJlYjhkYTM1OWQyYTQ1YTM2ZTVjMTU=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2017-04-04T15:31:57Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2017-04-04T15:31:57Z"}, "message": "rustdoc: properly indent fn signatures in traits", "tree": {"sha": "fed96c85b21bd6ec21d44c89b15a731b755c8add", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fed96c85b21bd6ec21d44c89b15a731b755c8add"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bc3d65948c3606c29beb8da359d2a45a36e5c15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc3d65948c3606c29beb8da359d2a45a36e5c15", "html_url": "https://github.com/rust-lang/rust/commit/6bc3d65948c3606c29beb8da359d2a45a36e5c15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bc3d65948c3606c29beb8da359d2a45a36e5c15/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3643d8165909c4a7959ed6cf9f3d1bd9cf3661b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3643d8165909c4a7959ed6cf9f3d1bd9cf3661b4", "html_url": "https://github.com/rust-lang/rust/commit/3643d8165909c4a7959ed6cf9f3d1bd9cf3661b4"}], "stats": {"total": 78, "additions": 48, "deletions": 30}, "files": [{"sha": "9e45ccaff32baee543793594b2d9e835d3a7d2e5", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6bc3d65948c3606c29beb8da359d2a45a36e5c15/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc3d65948c3606c29beb8da359d2a45a36e5c15/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=6bc3d65948c3606c29beb8da359d2a45a36e5c15", "patch": "@@ -41,8 +41,6 @@ pub struct UnsafetySpace(pub hir::Unsafety);\n /// with a space after it.\n #[derive(Copy, Clone)]\n pub struct ConstnessSpace(pub hir::Constness);\n-/// Wrapper struct for properly emitting a method declaration.\n-pub struct Method<'a>(pub &'a clean::FnDecl, pub usize);\n /// Similar to VisSpace, but used for mutability\n #[derive(Copy, Clone)]\n pub struct MutableSpace(pub clean::Mutability);\n@@ -55,10 +53,23 @@ pub struct TyParamBounds<'a>(pub &'a [clean::TyParamBound]);\n pub struct CommaSep<'a, T: 'a>(pub &'a [T]);\n pub struct AbiSpace(pub Abi);\n \n+/// Wrapper struct for properly emitting a method declaration.\n+pub struct Method<'a> {\n+    /// The declaration to emit.\n+    pub decl: &'a clean::FnDecl,\n+    /// The length of the function's \"name\", used to determine line-wrapping.\n+    pub name_len: usize,\n+    /// The number of spaces to indent each successive line with, if line-wrapping is necessary.\n+    pub indent: usize,\n+}\n+\n /// Wrapper struct for emitting a where clause from Generics.\n pub struct WhereClause<'a>{\n+    /// The Generics from which to emit a where clause.\n     pub gens: &'a clean::Generics,\n+    /// The number of spaces to indent each line with.\n     pub indent: usize,\n+    /// Whether the where clause needs to add a comma and newline after the last bound.\n     pub end_newline: bool,\n }\n \n@@ -936,8 +947,7 @@ impl fmt::Display for clean::FnDecl {\n \n impl<'a> fmt::Display for Method<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let decl = self.0;\n-        let indent = self.1;\n+        let &Method { decl, name_len, indent } = self;\n         let amp = if f.alternate() { \"&\" } else { \"&amp;\" };\n         let mut args = String::new();\n         let mut args_plain = String::new();\n@@ -1004,15 +1014,19 @@ impl<'a> fmt::Display for Method<'a> {\n             format!(\"{}\", decl.output)\n         };\n \n-        let pad = repeat(\" \").take(indent).collect::<String>();\n+        let pad = repeat(\" \").take(name_len).collect::<String>();\n         let plain = format!(\"{pad}({args}){arrow}\",\n                         pad = pad,\n                         args = args_plain,\n                         arrow = arrow_plain);\n \n         let output = if plain.len() > 80 {\n-            let pad = \"<br>&nbsp;&nbsp;&nbsp;&nbsp;\";\n-            format!(\"({args}<br>){arrow}\", args = args.replace(\"<br>\", pad), arrow = arrow)\n+            let full_pad = format!(\"<br>{}\", repeat(\"&nbsp;\").take(indent + 4).collect::<String>());\n+            let close_pad = format!(\"<br>{}\", repeat(\"&nbsp;\").take(indent).collect::<String>());\n+            format!(\"({args}{close}){arrow}\",\n+                    args = args.replace(\"<br>\", &full_pad),\n+                    close = close_pad,\n+                    arrow = arrow)\n         } else {\n             format!(\"({args}){arrow}\", args = args.replace(\"<br>\", \"\"), arrow = arrow)\n         };"}, {"sha": "be69f6b8ec2233a1dbe5ffcbf2aff6d0339a0fe1", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6bc3d65948c3606c29beb8da359d2a45a36e5c15/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc3d65948c3606c29beb8da359d2a45a36e5c15/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=6bc3d65948c3606c29beb8da359d2a45a36e5c15", "patch": "@@ -1995,13 +1995,13 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         UnstableFeatures::Allow => f.constness,\n         _ => hir::Constness::NotConst\n     };\n-    let indent = format!(\"{}{}{}{:#}fn {}{:#}\",\n-                         VisSpace(&it.visibility),\n-                         ConstnessSpace(vis_constness),\n-                         UnsafetySpace(f.unsafety),\n-                         AbiSpace(f.abi),\n-                         it.name.as_ref().unwrap(),\n-                         f.generics).len();\n+    let name_len = format!(\"{}{}{}{:#}fn {}{:#}\",\n+                           VisSpace(&it.visibility),\n+                           ConstnessSpace(vis_constness),\n+                           UnsafetySpace(f.unsafety),\n+                           AbiSpace(f.abi),\n+                           it.name.as_ref().unwrap(),\n+                           f.generics).len();\n     write!(w, \"<pre class='rust fn'>\")?;\n     render_attributes(w, it)?;\n     write!(w, \"{vis}{constness}{unsafety}{abi}fn \\\n@@ -2013,7 +2013,11 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n            name = it.name.as_ref().unwrap(),\n            generics = f.generics,\n            where_clause = WhereClause { gens: &f.generics, indent: 0, end_newline: true },\n-           decl = Method(&f.decl, indent))?;\n+           decl = Method {\n+               decl: &f.decl,\n+               name_len: name_len,\n+               indent: 0,\n+           })?;\n     document(w, cx, it)\n }\n \n@@ -2326,21 +2330,17 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n             UnstableFeatures::Allow => constness,\n             _ => hir::Constness::NotConst\n         };\n-        let prefix = format!(\"{}{}{:#}fn {}{:#}\",\n-                             ConstnessSpace(vis_constness),\n-                             UnsafetySpace(unsafety),\n-                             AbiSpace(abi),\n-                             name,\n-                             *g);\n-        let mut indent = prefix.len();\n-        let (where_indent, end_newline) = if parent == ItemType::Trait {\n-            indent += 4;\n+        let mut head_len = format!(\"{}{}{:#}fn {}{:#}\",\n+                                   ConstnessSpace(vis_constness),\n+                                   UnsafetySpace(unsafety),\n+                                   AbiSpace(abi),\n+                                   name,\n+                                   *g).len();\n+        let (indent, end_newline) = if parent == ItemType::Trait {\n+            head_len += 4;\n             (4, false)\n-        } else if parent == ItemType::Impl {\n-            (0, true)\n         } else {\n-            let prefix = prefix + &format!(\"{:#}\", Method(d, indent));\n-            (prefix.lines().last().unwrap().len() + 1, true)\n+            (0, true)\n         };\n         write!(w, \"{}{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n                    {generics}{decl}{where_clause}\",\n@@ -2350,10 +2350,14 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n                href = href,\n                name = name,\n                generics = *g,\n-               decl = Method(d, indent),\n+               decl = Method {\n+                   decl: d,\n+                   name_len: head_len,\n+                   indent: indent,\n+               },\n                where_clause = WhereClause {\n                    gens: g,\n-                   indent: where_indent,\n+                   indent: indent,\n                    end_newline: end_newline,\n                })\n     }"}]}