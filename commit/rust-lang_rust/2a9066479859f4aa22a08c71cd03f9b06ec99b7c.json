{"sha": "2a9066479859f4aa22a08c71cd03f9b06ec99b7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhOTA2NjQ3OTg1OWY0YWEyMmEwOGM3MWNkMDNmOWIwNmVjOTliN2M=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-18T06:48:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-18T06:48:43Z"}, "message": "Rollup merge of #72143 - rust-lang:steveklabnik-must-use, r=sfackler\n\nmake offset must_use\n\nhttps://djugei.github.io/bad-at-unsafe/ describes an error a user had when trying to use offset:\n\n> At first I just assumed that the .add() and .offset() methods on pointers would mutate the pointer. They do not. Instead they return a new pointer, which gets dropped silently if you don't use it. Unlike for example Result, which is must_use annotated.\n\nThis PR only adds `offset`, because I wanted to float the idea; I'm imagining that there's more than just `add` and `offset` that could use this. I am also very open to re-wording the warning.\n\nr? @rust-lang/libs", "tree": {"sha": "6d0af71a057da2b3f23dc2a492fa782f8136a3ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d0af71a057da2b3f23dc2a492fa782f8136a3ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a9066479859f4aa22a08c71cd03f9b06ec99b7c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJewi/LCRBK7hj4Ov3rIwAAdHIIAJZBP2yyN50tagQULUZv4tPY\nCDr6Kl6KBaatv5I5abFDC7e9Awf5QO1VDou1Qx300/UpmNER+rN9dWdggfBFabG6\n0HI3SQSjaIGE9HyUQntV8Luhx36FvmhwWQxL8VA5gVekJPK+F1PK60HHfUnO/Fuf\nLmFfkZWFP6z/vFm2kMaOP25rDGBbz9pI6X/981Op8dVZ1eBlRP+/4e03n+p+sXS5\n0jO07uLisgNTGG2P9kO0b11xwzgzulvQBVVjVq4tTdjvB2P6snTHCON/eBa4A4DY\ncdWFlhUNIwQbj0KqXeqR5J+b3Ybk5zlXnzH4oDo8SxFz/hO0rJPM7YXOxNBFgvY=\n=aZLF\n-----END PGP SIGNATURE-----\n", "payload": "tree 6d0af71a057da2b3f23dc2a492fa782f8136a3ff\nparent 35d86693acd1cabc61531d3daf24f49eb9404899\nparent aea0186fe5e583b101016e40da55bd9adcd0bc27\nauthor Ralf Jung <post@ralfj.de> 1589784523 +0200\ncommitter GitHub <noreply@github.com> 1589784523 +0200\n\nRollup merge of #72143 - rust-lang:steveklabnik-must-use, r=sfackler\n\nmake offset must_use\n\nhttps://djugei.github.io/bad-at-unsafe/ describes an error a user had when trying to use offset:\n\n> At first I just assumed that the .add() and .offset() methods on pointers would mutate the pointer. They do not. Instead they return a new pointer, which gets dropped silently if you don't use it. Unlike for example Result, which is must_use annotated.\n\nThis PR only adds `offset`, because I wanted to float the idea; I'm imagining that there's more than just `add` and `offset` that could use this. I am also very open to re-wording the warning.\n\nr? @rust-lang/libs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9066479859f4aa22a08c71cd03f9b06ec99b7c", "html_url": "https://github.com/rust-lang/rust/commit/2a9066479859f4aa22a08c71cd03f9b06ec99b7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a9066479859f4aa22a08c71cd03f9b06ec99b7c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35d86693acd1cabc61531d3daf24f49eb9404899", "url": "https://api.github.com/repos/rust-lang/rust/commits/35d86693acd1cabc61531d3daf24f49eb9404899", "html_url": "https://github.com/rust-lang/rust/commit/35d86693acd1cabc61531d3daf24f49eb9404899"}, {"sha": "aea0186fe5e583b101016e40da55bd9adcd0bc27", "url": "https://api.github.com/repos/rust-lang/rust/commits/aea0186fe5e583b101016e40da55bd9adcd0bc27", "html_url": "https://github.com/rust-lang/rust/commit/aea0186fe5e583b101016e40da55bd9adcd0bc27"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "a60380137e11e816ae84214a868143db91944af3", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9066479859f4aa22a08c71cd03f9b06ec99b7c/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9066479859f4aa22a08c71cd03f9b06ec99b7c/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=2a9066479859f4aa22a08c71cd03f9b06ec99b7c", "patch": "@@ -1311,6 +1311,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::pointer::offset`](../../std/primitive.pointer.html#method.offset).\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n \n     /// Calculates the offset from a pointer, potentially wrapping.\n@@ -1327,6 +1328,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::pointer::wrapping_offset`](../../std/primitive.pointer.html#method.wrapping_offset).\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     pub fn arith_offset<T>(dst: *const T, offset: isize) -> *const T;\n \n     /// Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with"}, {"sha": "85ba5fc0638ea18fc84e80df6b152257ebfa07a2", "filename": "src/libcore/ptr/const_ptr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a9066479859f4aa22a08c71cd03f9b06ec99b7c/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9066479859f4aa22a08c71cd03f9b06ec99b7c/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fconst_ptr.rs?ref=2a9066479859f4aa22a08c71cd03f9b06ec99b7c", "patch": "@@ -150,6 +150,7 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub unsafe fn offset(self, count: isize) -> *const T\n     where\n@@ -208,6 +209,7 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[stable(feature = \"ptr_wrapping_offset\", since = \"1.16.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub fn wrapping_offset(self, count: isize) -> *const T\n     where\n@@ -390,6 +392,7 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub unsafe fn add(self, count: usize) -> Self\n     where\n@@ -451,6 +454,7 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub unsafe fn sub(self, count: usize) -> Self\n     where\n@@ -506,6 +510,7 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub fn wrapping_add(self, count: usize) -> Self\n     where\n@@ -561,6 +566,7 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub fn wrapping_sub(self, count: usize) -> Self\n     where"}, {"sha": "0781d7e6cac452c63a4d7376ce73b4c07ec08848", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a9066479859f4aa22a08c71cd03f9b06ec99b7c/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9066479859f4aa22a08c71cd03f9b06ec99b7c/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=2a9066479859f4aa22a08c71cd03f9b06ec99b7c", "patch": "@@ -144,6 +144,7 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub unsafe fn offset(self, count: isize) -> *mut T\n     where\n@@ -201,6 +202,7 @@ impl<T: ?Sized> *mut T {\n     /// assert_eq!(&data, &[0, 2, 0, 4, 0]);\n     /// ```\n     #[stable(feature = \"ptr_wrapping_offset\", since = \"1.16.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub fn wrapping_offset(self, count: isize) -> *mut T\n     where\n@@ -436,6 +438,7 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub unsafe fn add(self, count: usize) -> Self\n     where\n@@ -497,6 +500,7 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub unsafe fn sub(self, count: usize) -> Self\n     where\n@@ -552,6 +556,7 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub fn wrapping_add(self, count: usize) -> Self\n     where\n@@ -607,6 +612,7 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub fn wrapping_sub(self, count: usize) -> Self\n     where"}]}