{"sha": "e86b95480fac70673bd837e7fcfa45458bd52eb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NmI5NTQ4MGZhYzcwNjczYmQ4MzdlN2ZjZmE0NTQ1OGJkNTJlYjc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-17T12:56:54Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-17T12:56:54Z"}, "message": "Directly invoke the main function in JIT mode\n\nFixes #1151", "tree": {"sha": "055907e85d4acadd213d4d3767b559afb788dfa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/055907e85d4acadd213d4d3767b559afb788dfa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e86b95480fac70673bd837e7fcfa45458bd52eb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e86b95480fac70673bd837e7fcfa45458bd52eb7", "html_url": "https://github.com/rust-lang/rust/commit/e86b95480fac70673bd837e7fcfa45458bd52eb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e86b95480fac70673bd837e7fcfa45458bd52eb7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "218b383f8f00808a08c08e131470e1ab5c2e6749", "url": "https://api.github.com/repos/rust-lang/rust/commits/218b383f8f00808a08c08e131470e1ab5c2e6749", "html_url": "https://github.com/rust-lang/rust/commit/218b383f8f00808a08c08e131470e1ab5c2e6749"}], "stats": {"total": 74, "additions": 52, "deletions": 22}, "files": [{"sha": "dec95d6571469397bedd247cb7e2315dab2d049e", "filename": "src/driver/jit.rs", "status": "modified", "additions": 52, "deletions": 22, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/e86b95480fac70673bd837e7fcfa45458bd52eb7/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86b95480fac70673bd837e7fcfa45458bd52eb7/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=e86b95480fac70673bd837e7fcfa45458bd52eb7", "patch": "@@ -7,6 +7,7 @@ use std::os::raw::{c_char, c_int};\n \n use rustc_codegen_ssa::CrateInfo;\n use rustc_middle::mir::mono::MonoItem;\n+use rustc_session::config::EntryFnType;\n \n use cranelift_jit::{JITBuilder, JITModule};\n \n@@ -32,16 +33,6 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n     let mut jit_module = JITModule::new(jit_builder);\n     assert_eq!(pointer_ty(tcx), jit_module.target_config().pointer_type());\n \n-    let sig = Signature {\n-        params: vec![\n-            AbiParam::new(jit_module.target_config().pointer_type()),\n-            AbiParam::new(jit_module.target_config().pointer_type()),\n-        ],\n-        returns: vec![AbiParam::new(jit_module.target_config().pointer_type() /*isize*/)],\n-        call_conv: CallConv::triple_default(&crate::target_triple(tcx.sess)),\n-    };\n-    let main_func_id = jit_module.declare_function(\"main\", Linkage::Import, &sig).unwrap();\n-\n     let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n     let mono_items = cgus\n         .iter()\n@@ -86,24 +77,17 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n         tcx.sess.fatal(\"Inline asm is not supported in JIT mode\");\n     }\n \n-    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module, &mut unwind_context);\n     crate::allocator::codegen(tcx, &mut jit_module, &mut unwind_context);\n \n     tcx.sess.abort_if_errors();\n \n     jit_module.finalize_definitions();\n-\n     let _unwind_register_guard = unsafe { unwind_context.register_jit(&jit_module) };\n \n-    let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n-\n     println!(\n         \"Rustc codegen cranelift will JIT run the executable, because -Cllvm-args=mode=jit was passed\"\n     );\n \n-    let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n-        unsafe { ::std::mem::transmute(finalized_main) };\n-\n     let args = ::std::env::var(\"CG_CLIF_JIT_ARGS\").unwrap_or_else(|_| String::new());\n     let args = std::iter::once(&*tcx.crate_name(LOCAL_CRATE).as_str().to_string())\n         .chain(args.split(' '))\n@@ -118,12 +102,58 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n     BACKEND_CONFIG.with(|tls_backend_config| {\n         assert!(tls_backend_config.borrow_mut().replace(backend_config).is_none())\n     });\n-    CURRENT_MODULE\n-        .with(|current_module| assert!(current_module.borrow_mut().replace(jit_module).is_none()));\n \n-    let ret = f(args.len() as c_int, argv.as_ptr());\n+    let (main_def_id, entry_ty) = tcx.entry_fn(LOCAL_CRATE).unwrap();\n+    let instance = Instance::mono(tcx, main_def_id.to_def_id()).polymorphize(tcx);\n+\n+    match entry_ty {\n+        EntryFnType::Main => {\n+            // FIXME set program arguments somehow\n \n-    std::process::exit(ret);\n+            let main_sig = Signature {\n+                params: vec![],\n+                returns: vec![],\n+                call_conv: CallConv::triple_default(&crate::target_triple(tcx.sess)),\n+            };\n+            let main_func_id = jit_module\n+                .declare_function(tcx.symbol_name(instance).name, Linkage::Import, &main_sig)\n+                .unwrap();\n+            let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n+\n+            CURRENT_MODULE.with(|current_module| {\n+                assert!(current_module.borrow_mut().replace(jit_module).is_none())\n+            });\n+\n+            let f: extern \"C\" fn() = unsafe { ::std::mem::transmute(finalized_main) };\n+            f();\n+            std::process::exit(0);\n+        }\n+        EntryFnType::Start => {\n+            let start_sig = Signature {\n+                params: vec![\n+                    AbiParam::new(jit_module.target_config().pointer_type()),\n+                    AbiParam::new(jit_module.target_config().pointer_type()),\n+                ],\n+                returns: vec![AbiParam::new(\n+                    jit_module.target_config().pointer_type(), /*isize*/\n+                )],\n+                call_conv: CallConv::triple_default(&crate::target_triple(tcx.sess)),\n+            };\n+            let start_func_id = jit_module\n+                .declare_function(tcx.symbol_name(instance).name, Linkage::Import, &start_sig)\n+                .unwrap();\n+            let finalized_start: *const u8 = jit_module.get_finalized_function(start_func_id);\n+\n+            CURRENT_MODULE.with(|current_module| {\n+                assert!(current_module.borrow_mut().replace(jit_module).is_none())\n+            });\n+\n+            let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n+                unsafe { ::std::mem::transmute(finalized_start) };\n+            let ret = f(args.len() as c_int, argv.as_ptr());\n+            std::process::exit(ret);\n+        }\n+    }\n }\n \n #[no_mangle]\n@@ -220,7 +250,7 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n     imported_symbols\n }\n \n-pub(super) fn codegen_shim<'tcx>(cx: &mut CodegenCx<'_, 'tcx>, inst: Instance<'tcx>) {\n+fn codegen_shim<'tcx>(cx: &mut CodegenCx<'_, 'tcx>, inst: Instance<'tcx>) {\n     let tcx = cx.tcx;\n \n     let pointer_type = cx.module.target_config().pointer_type();"}]}