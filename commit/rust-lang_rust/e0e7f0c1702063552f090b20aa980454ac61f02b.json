{"sha": "e0e7f0c1702063552f090b20aa980454ac61f02b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZTdmMGMxNzAyMDYzNTUyZjA5MGIyMGFhOTgwNDU0YWM2MWYwMmI=", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2021-09-01T06:11:20Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2021-09-01T06:11:20Z"}, "message": "Move \"complete macro call if cursor at `!` token\" logic to `MacroRender`", "tree": {"sha": "f1593f0f81e64f7c095e06839cd0442bbdc07ba0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1593f0f81e64f7c095e06839cd0442bbdc07ba0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0e7f0c1702063552f090b20aa980454ac61f02b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e7f0c1702063552f090b20aa980454ac61f02b", "html_url": "https://github.com/rust-lang/rust/commit/e0e7f0c1702063552f090b20aa980454ac61f02b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0e7f0c1702063552f090b20aa980454ac61f02b/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0d2b44250528a847782abf984bf2c15c017abd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0d2b44250528a847782abf984bf2c15c017abd8", "html_url": "https://github.com/rust-lang/rust/commit/c0d2b44250528a847782abf984bf2c15c017abd8"}], "stats": {"total": 82, "additions": 42, "deletions": 40}, "files": [{"sha": "d81cb5391cb09e7002bdb556c64b098076b8fd9b", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e0e7f0c1702063552f090b20aa980454ac61f02b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e7f0c1702063552f090b20aa980454ac61f02b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=e0e7f0c1702063552f090b20aa980454ac61f02b", "patch": "@@ -304,31 +304,4 @@ pub mod prelude {\n             \"#]],\n         );\n     }\n-\n-    #[test]\n-    fn completes_macro_call_if_cursor_at_bang_token() {\n-        // Regression test for https://github.com/rust-analyzer/rust-analyzer/issues/9904\n-        cov_mark::check!(completes_macro_call_if_cursor_at_bang_token);\n-        check_edit(\n-            \"foo!\",\n-            r#\"\n-macro_rules! foo {\n-    () => {}\n-}\n-\n-fn main() {\n-    foo!$0\n-}\n-\"#,\n-            r#\"\n-macro_rules! foo {\n-    () => {}\n-}\n-\n-fn main() {\n-    foo!($0)\n-}\n-\"#,\n-        );\n-    }\n }"}, {"sha": "a112f573918e8051cdbe94a1429f4578cdc7a45a", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e0e7f0c1702063552f090b20aa980454ac61f02b/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e7f0c1702063552f090b20aa980454ac61f02b/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=e0e7f0c1702063552f090b20aa980454ac61f02b", "patch": "@@ -236,21 +236,14 @@ impl<'a> CompletionContext<'a> {\n         let kind = self.token.kind();\n         if kind == IDENT || kind == LIFETIME_IDENT || kind == UNDERSCORE || kind.is_keyword() {\n             cov_mark::hit!(completes_if_prefix_is_keyword);\n-            return self.original_token.text_range();\n+            self.original_token.text_range()\n         } else if kind == CHAR {\n             // assume we are completing a lifetime but the user has only typed the '\n             cov_mark::hit!(completes_if_lifetime_without_idents);\n-            return TextRange::at(self.original_token.text_range().start(), TextSize::from(1));\n-        } else if kind == BANG {\n-            if let Some(n) = self.token.parent() {\n-                if n.kind() == SyntaxKind::MACRO_CALL {\n-                    cov_mark::hit!(completes_macro_call_if_cursor_at_bang_token);\n-                    return n.text_range();\n-                }\n-            }\n+            TextRange::at(self.original_token.text_range().start(), TextSize::from(1))\n+        } else {\n+            TextRange::empty(self.position.offset)\n         }\n-\n-        TextRange::empty(self.position.offset)\n     }\n \n     pub(crate) fn previous_token_is(&self, kind: SyntaxKind) -> bool {\n@@ -402,6 +395,10 @@ impl<'a> CompletionContext<'a> {\n         }\n     }\n \n+    pub(crate) fn is_immediately_after_macro_bang(&self) -> bool {\n+        self.token.kind() == BANG && self.token.parent().map_or(false, |it| it.kind() == MACRO_CALL)\n+    }\n+\n     /// A version of [`SemanticsScope::process_all_names`] that filters out `#[doc(hidden)]` items.\n     pub(crate) fn process_all_names(&self, f: &mut dyn FnMut(Name, ScopeDef)) {\n         self.scope.process_all_names(&mut |name, def| {"}, {"sha": "d1b549df1bb9df0339d48e47ffb5755c39001a1c", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e0e7f0c1702063552f090b20aa980454ac61f02b/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e7f0c1702063552f090b20aa980454ac61f02b/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=e0e7f0c1702063552f090b20aa980454ac61f02b", "patch": "@@ -41,8 +41,13 @@ impl<'a> MacroRender<'a> {\n     }\n \n     fn render(&self, import_to_add: Option<ImportEdit>) -> Option<CompletionItem> {\n-        let mut item =\n-            CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), &self.label());\n+        let source_range = if self.ctx.completion.is_immediately_after_macro_bang() {\n+            cov_mark::hit!(completes_macro_call_if_cursor_at_bang_token);\n+            self.ctx.completion.token.parent().map(|it| it.text_range())\n+        } else {\n+            Some(self.ctx.source_range())\n+        }?;\n+        let mut item = CompletionItem::new(CompletionKind::Reference, source_range, &self.label());\n         item.kind(SymbolKind::Macro)\n             .set_documentation(self.docs.clone())\n             .set_deprecated(self.ctx.is_deprecated(self.macro_))\n@@ -230,4 +235,31 @@ fn main() { foo! {$0} }\n \"#,\n         )\n     }\n+\n+    #[test]\n+    fn completes_macro_call_if_cursor_at_bang_token() {\n+        // Regression test for https://github.com/rust-analyzer/rust-analyzer/issues/9904\n+        cov_mark::check!(completes_macro_call_if_cursor_at_bang_token);\n+        check_edit(\n+            \"foo!\",\n+            r#\"\n+macro_rules! foo {\n+    () => {}\n+}\n+\n+fn main() {\n+    foo!$0\n+}\n+\"#,\n+            r#\"\n+macro_rules! foo {\n+    () => {}\n+}\n+\n+fn main() {\n+    foo!($0)\n+}\n+\"#,\n+        );\n+    }\n }"}]}