{"sha": "ed2ecb647ce3b420416357c29262f16423efd799", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMmVjYjY0N2NlM2I0MjA0MTYzNTdjMjkyNjJmMTY0MjNlZmQ3OTk=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-02-13T22:48:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-13T22:48:09Z"}, "message": "Merge pull request #2187 from brotzeit/master\n\ndon't print verbose output when formatting with stdin", "tree": {"sha": "c7b98349c7deb49c35a76635729f2e22403650c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7b98349c7deb49c35a76635729f2e22403650c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed2ecb647ce3b420416357c29262f16423efd799", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJag2spCRBK7hj4Ov3rIwAAdHIIAJzkdvedIAOJ+vIycos5yjMO\ntYnx94/Av+3rNLHNZm65qx+sNWL6dh8aM4wIIBygTF3VC87YnfFGaJy6M6GQY++u\nbRKK7Ey4mf7OeXpUdgNT0ibPVlOHZVE/6x6Bn8TslzZ0wSsAwuiH5f/Rkp1RJwk8\ntHCxGEuoyAUiCaddOh3EFlOgeMOLCp2vzJrrNb0IJopwdyZjYVlXrmUCXToml9pR\nCHxkuexiXmpwTj9oyNAkXCDoqDoNamr2dhGL152Cy8U3f0nzOlkM8t/s57+0vlsz\n3LOfhY60zcrRJiZp3Dmg/jDwn+njRzcU/qMaRp6Mj06i73gpzOfmz9xF0hMogd8=\n=O2u1\n-----END PGP SIGNATURE-----\n", "payload": "tree c7b98349c7deb49c35a76635729f2e22403650c4\nparent 67d36c70199322b262479aca949871ff97ec6358\nparent 32953d04ded37430db2d52ca02057866003ff93a\nauthor Nick Cameron <nrc@ncameron.org> 1518562089 +1300\ncommitter GitHub <noreply@github.com> 1518562089 +1300\n\nMerge pull request #2187 from brotzeit/master\n\ndon't print verbose output when formatting with stdin"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed2ecb647ce3b420416357c29262f16423efd799", "html_url": "https://github.com/rust-lang/rust/commit/ed2ecb647ce3b420416357c29262f16423efd799", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed2ecb647ce3b420416357c29262f16423efd799/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67d36c70199322b262479aca949871ff97ec6358", "url": "https://api.github.com/repos/rust-lang/rust/commits/67d36c70199322b262479aca949871ff97ec6358", "html_url": "https://github.com/rust-lang/rust/commit/67d36c70199322b262479aca949871ff97ec6358"}, {"sha": "32953d04ded37430db2d52ca02057866003ff93a", "url": "https://api.github.com/repos/rust-lang/rust/commits/32953d04ded37430db2d52ca02057866003ff93a", "html_url": "https://github.com/rust-lang/rust/commit/32953d04ded37430db2d52ca02057866003ff93a"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "cc55226dd20738803d7862c3f52bb886a6e21472", "filename": "rustfmt-core/src/lib.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ed2ecb647ce3b420416357c29262f16423efd799/rustfmt-core%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2ecb647ce3b420416357c29262f16423efd799/rustfmt-core%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Flib.rs?ref=ed2ecb647ce3b420416357c29262f16423efd799", "patch": "@@ -75,6 +75,8 @@ mod types;\n mod vertical;\n pub mod visitor;\n \n+const STDIN: &'static str = \"<stdin>\";\n+\n // A map of the files of a crate, with their new content\n pub type FileMap = Vec<FileRecord>;\n \n@@ -294,6 +296,15 @@ impl fmt::Display for FormatReport {\n     }\n }\n \n+fn should_emit_verbose<F>(path: &FileName, config: &Config, f: F)\n+where\n+    F: Fn(),\n+{\n+    if config.verbose() && path.to_string() != STDIN {\n+        f();\n+    }\n+}\n+\n // Formatting which depends on the AST.\n fn format_ast<F>(\n     krate: &ast::Crate,\n@@ -316,9 +327,7 @@ where\n         if skip_children && path != *main_file {\n             continue;\n         }\n-        if config.verbose() {\n-            println!(\"Formatting {}\", path);\n-        }\n+        should_emit_verbose(&path, config, || println!(\"Formatting {}\", path));\n         let filemap = parse_session\n             .codemap()\n             .lookup_char_pos(module.inner.lo())\n@@ -676,7 +685,7 @@ pub fn format_input<T: Write>(\n \n     summary.mark_format_time();\n \n-    if config.verbose() {\n+    should_emit_verbose(&main_file, config, || {\n         fn duration_to_f32(d: Duration) -> f32 {\n             d.as_secs() as f32 + d.subsec_nanos() as f32 / 1_000_000_000f32\n         }\n@@ -685,8 +694,8 @@ pub fn format_input<T: Write>(\n             \"Spent {0:.3} secs in the parsing phase, and {1:.3} secs in the formatting phase\",\n             duration_to_f32(summary.get_parse_time().unwrap()),\n             duration_to_f32(summary.get_format_time().unwrap()),\n-        );\n-    }\n+        )\n+    });\n \n     match format_result {\n         Ok((file_map, has_diff)) => {"}]}