{"sha": "e0eb29c936602553f7952a4d12c7d193bc3a7513", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZWIyOWM5MzY2MDI1NTNmNzk1MmE0ZDEyYzdkMTkzYmMzYTc1MTM=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-03-31T18:03:38Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-05-05T16:58:57Z"}, "message": "Applying PR suggestions (mostly typos)\nCo-authored-by: flip1995 <hello@philkrones.com>\nCo-authored-by: phansch <dev@phansch.net>", "tree": {"sha": "db5fd3d1c466b9718e2b3274face78210385acae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db5fd3d1c466b9718e2b3274face78210385acae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0eb29c936602553f7952a4d12c7d193bc3a7513", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0eb29c936602553f7952a4d12c7d193bc3a7513", "html_url": "https://github.com/rust-lang/rust/commit/e0eb29c936602553f7952a4d12c7d193bc3a7513", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0eb29c936602553f7952a4d12c7d193bc3a7513/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62cafe2c02440cb1cc7cc9cbf1abe63942a19e51", "url": "https://api.github.com/repos/rust-lang/rust/commits/62cafe2c02440cb1cc7cc9cbf1abe63942a19e51", "html_url": "https://github.com/rust-lang/rust/commit/62cafe2c02440cb1cc7cc9cbf1abe63942a19e51"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "23a035f9715db093a4cee9515dceffed096ad5af", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0eb29c936602553f7952a4d12c7d193bc3a7513/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e0eb29c936602553f7952a4d12c7d193bc3a7513/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=e0eb29c936602553f7952a4d12c7d193bc3a7513", "patch": "@@ -52,7 +52,7 @@ rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\" }\n deny-warnings = []\n integration = [\"tempfile\"]\n internal-lints = [\"clippy_lints/internal-lints\"]\n-metadata-collector-lint = [\"clippy_lints/metadata-collector-lint\"]\n+metadata-collector-lint = [\"internal-lints\", \"clippy_lints/metadata-collector-lint\"]\n \n [package.metadata.rust-analyzer]\n # This package uses #[feature(rustc_private)]"}, {"sha": "e85637ca758884abee452581dfea267e164c905a", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e0eb29c936602553f7952a4d12c7d193bc3a7513/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0eb29c936602553f7952a4d12c7d193bc3a7513/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=e0eb29c936602553f7952a4d12c7d193bc3a7513", "patch": "@@ -27,8 +27,9 @@ use std::io::prelude::*;\n use std::path::Path;\n \n use crate::utils::internal_lints::is_lint_ref_type;\n-use crate::utils::{\n-    last_path_segment, match_function_call, match_path, match_type, paths, span_lint, walk_ptrs_ty_depth,\n+use clippy_utils::{\n+    diagnostics::span_lint, last_path_segment, match_function_call, match_path, paths, ty::match_type,\n+    ty::walk_ptrs_ty_depth,\n };\n \n /// This is the output file of the lint collector.\n@@ -107,7 +108,7 @@ pub struct MetadataCollector {\n     ///\n     /// We use a Heap here to have the lints added in alphabetic order in the export\n     lints: BinaryHeap<LintMetadata>,\n-    applicability_into: FxHashMap<String, ApplicabilityInfo>,\n+    applicability_info: FxHashMap<String, ApplicabilityInfo>,\n }\n \n impl Drop for MetadataCollector {\n@@ -120,7 +121,7 @@ impl Drop for MetadataCollector {\n             return;\n         }\n \n-        let mut applicability_info = std::mem::take(&mut self.applicability_into);\n+        let mut applicability_info = std::mem::take(&mut self.applicability_info);\n \n         // Mapping the final data\n         let mut lints = std::mem::take(&mut self.lints).into_sorted_vec();\n@@ -272,7 +273,7 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n             }\n \n             for (lint_name, applicability, is_multi_part) in emission_info.drain(..) {\n-                let app_info = self.applicability_into.entry(lint_name).or_default();\n+                let app_info = self.applicability_info.entry(lint_name).or_default();\n                 app_info.applicability = applicability;\n                 app_info.is_multi_part_suggestion = is_multi_part;\n             }\n@@ -354,7 +355,7 @@ fn lint_collection_error_item(cx: &LateContext<'_>, item: &Item<'_>, message: &s\n         cx,\n         INTERNAL_METADATA_COLLECTOR,\n         item.ident.span,\n-        &format!(\"Metadata collection error for `{}`: {}\", item.ident.name, message),\n+        &format!(\"metadata collection error for `{}`: {}\", item.ident.name, message),\n     );\n }\n \n@@ -569,7 +570,7 @@ impl<'a, 'hir> IsMultiSpanScanner<'a, 'hir> {\n     }\n \n     /// Add a new single expression suggestion to the counter\n-    fn add_singe_span_suggestion(&mut self) {\n+    fn add_single_span_suggestion(&mut self) {\n         self.suggestion_count += 1;\n     }\n \n@@ -604,7 +605,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for IsMultiSpanScanner<'a, 'hir> {\n                     .any(|func_path| match_function_call(self.cx, fn_expr, func_path).is_some());\n                 if found_function {\n                     // These functions are all multi part suggestions\n-                    self.add_singe_span_suggestion()\n+                    self.add_single_span_suggestion()\n                 }\n             },\n             ExprKind::MethodCall(path, _path_span, arg, _arg_span) => {\n@@ -616,7 +617,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for IsMultiSpanScanner<'a, 'hir> {\n                             if *is_multi_part {\n                                 self.add_multi_part_suggestion();\n                             } else {\n-                                self.add_singe_span_suggestion();\n+                                self.add_single_span_suggestion();\n                             }\n                             break;\n                         }"}, {"sha": "a4efae54894fb10463ba54f745c594830604b047", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0eb29c936602553f7952a4d12c7d193bc3a7513/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0eb29c936602553f7952a4d12c7d193bc3a7513/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=e0eb29c936602553f7952a4d12c7d193bc3a7513", "patch": "@@ -1,4 +1,12 @@\n //! Clippy wrappers around rustc's diagnostic functions.\n+//!\n+//! These functions are used by the `INTERNAL_METADATA_COLLECTOR` lint to collect the corresponding\n+//! lint applicability. Please make sure that you update the `LINT_EMISSION_FUNCTIONS` variable in\n+//! `clippy_lints::utils::internal_lints::metadata_collector` when a new function is added\n+//! or renamed.\n+//!\n+//! Thank you!\n+//! ~The `INTERNAL_METADATA_COLLECTOR` lint\n \n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir::HirId;"}]}