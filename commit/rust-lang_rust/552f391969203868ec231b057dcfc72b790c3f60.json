{"sha": "552f391969203868ec231b057dcfc72b790c3f60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MmYzOTE5NjkyMDM4NjhlYzIzMWIwNTdkY2ZjNzJiNzkwYzNmNjA=", "commit": {"author": {"name": "oli", "email": "oli@uhura.edef.eu", "date": "2020-10-21T10:27:58Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-04T21:40:38Z"}, "message": "Make `encode_optimized_mir` always perform its action and instead require the callers to know whether they actually want this", "tree": {"sha": "e507a2c634f952dd2bfc78be95a137187e0318ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e507a2c634f952dd2bfc78be95a137187e0318ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/552f391969203868ec231b057dcfc72b790c3f60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/552f391969203868ec231b057dcfc72b790c3f60", "html_url": "https://github.com/rust-lang/rust/commit/552f391969203868ec231b057dcfc72b790c3f60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/552f391969203868ec231b057dcfc72b790c3f60/comments", "author": null, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68ff5f0a1872a771c72643bc7ed8544493865814", "url": "https://api.github.com/repos/rust-lang/rust/commits/68ff5f0a1872a771c72643bc7ed8544493865814", "html_url": "https://github.com/rust-lang/rust/commit/68ff5f0a1872a771c72643bc7ed8544493865814"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "c65f765e268f886c27152ace62f63f0290bb4535", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/552f391969203868ec231b057dcfc72b790c3f60/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552f391969203868ec231b057dcfc72b790c3f60/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=552f391969203868ec231b057dcfc72b790c3f60", "patch": "@@ -1118,18 +1118,16 @@ impl EncodeContext<'a, 'tcx> {\n \n     fn encode_optimized_mir(&mut self, def_id: LocalDefId) {\n         debug!(\"EntryBuilder::encode_mir({:?})\", def_id);\n-        if self.tcx.mir_keys(LOCAL_CRATE).contains(&def_id) {\n-            record!(self.tables.mir[def_id.to_def_id()] <- self.tcx.optimized_mir(def_id));\n+        record!(self.tables.mir[def_id.to_def_id()] <- self.tcx.optimized_mir(def_id));\n \n-            let unused = self.tcx.unused_generic_params(def_id);\n-            if !unused.is_empty() {\n-                record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);\n-            }\n+        let unused = self.tcx.unused_generic_params(def_id);\n+        if !unused.is_empty() {\n+            record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);\n+        }\n \n-            let abstract_const = self.tcx.mir_abstract_const(def_id);\n-            if let Ok(Some(abstract_const)) = abstract_const {\n-                record!(self.tables.mir_abstract_consts[def_id.to_def_id()] <- abstract_const);\n-            }\n+        let abstract_const = self.tcx.mir_abstract_const(def_id);\n+        if let Ok(Some(abstract_const)) = abstract_const {\n+            record!(self.tables.mir_abstract_consts[def_id.to_def_id()] <- abstract_const);\n         }\n     }\n \n@@ -1413,8 +1411,10 @@ impl EncodeContext<'a, 'tcx> {\n                 let needs_inline = (generics.requires_monomorphization(tcx)\n                     || tcx.codegen_fn_attrs(def_id).requests_inline())\n                     && !self.metadata_output_only();\n+\n+                let is_const_fn = sig.header.constness == hir::Constness::Const;\n                 let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n-                needs_inline || sig.header.constness == hir::Constness::Const || always_encode_mir\n+                needs_inline || is_const_fn || always_encode_mir\n             }\n             _ => false,\n         };"}]}