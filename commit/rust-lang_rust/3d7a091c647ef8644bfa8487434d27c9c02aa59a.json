{"sha": "3d7a091c647ef8644bfa8487434d27c9c02aa59a", "node_id": "C_kwDOAAsO6NoAKDNkN2EwOTFjNjQ3ZWY4NjQ0YmZhODQ4NzQzNGQyN2M5YzAyYWE1OWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-20T17:23:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-20T17:23:22Z"}, "message": "Auto merge of #110612 - matthiaskrgr:rollup-y2hbjws, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #108795 (Add support for the x86_64h-apple-darwin target)\n - #110558 (Add Call terminator to SMIR)\n - #110565 (linkchecker: running from a directory separate from the book)\n - #110599 (Remove an unused `&[Ty]` <-> `&[GenericArg]`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d856831f38bfab47f03a0d4d7f2cfceac8d460ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d856831f38bfab47f03a0d4d7f2cfceac8d460ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d7a091c647ef8644bfa8487434d27c9c02aa59a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d7a091c647ef8644bfa8487434d27c9c02aa59a", "html_url": "https://github.com/rust-lang/rust/commit/3d7a091c647ef8644bfa8487434d27c9c02aa59a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d7a091c647ef8644bfa8487434d27c9c02aa59a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a57fa08f483620c2b4f33c6b5dcdbbf2b4c08ad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a57fa08f483620c2b4f33c6b5dcdbbf2b4c08ad8", "html_url": "https://github.com/rust-lang/rust/commit/a57fa08f483620c2b4f33c6b5dcdbbf2b4c08ad8"}, {"sha": "c430d6111a9c607bc7371112135d3209a8ed2028", "url": "https://api.github.com/repos/rust-lang/rust/commits/c430d6111a9c607bc7371112135d3209a8ed2028", "html_url": "https://github.com/rust-lang/rust/commit/c430d6111a9c607bc7371112135d3209a8ed2028"}], "stats": {"total": 206, "additions": 177, "deletions": 29}, "files": [{"sha": "73c9c86f76a2338cf112a986a36319e605786f57", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3d7a091c647ef8644bfa8487434d27c9c02aa59a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7a091c647ef8644bfa8487434d27c9c02aa59a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=3d7a091c647ef8644bfa8487434d27c9c02aa59a", "patch": "@@ -21,7 +21,6 @@ use std::marker::PhantomData;\n use std::mem;\n use std::num::NonZeroUsize;\n use std::ops::{ControlFlow, Deref};\n-use std::slice;\n \n /// An entity in the Rust type system, which can be one of\n /// several kinds (types, lifetimes, and consts).\n@@ -55,18 +54,6 @@ pub enum GenericArgKind<'tcx> {\n     Const(ty::Const<'tcx>),\n }\n \n-/// This function goes from `&'a [Ty<'tcx>]` to `&'a [GenericArg<'tcx>]`\n-///\n-/// This is sound as, for types, `GenericArg` is just\n-/// `NonZeroUsize::new_unchecked(ty as *const _ as usize)` as\n-/// long as we use `0` for the `TYPE_TAG`.\n-pub fn ty_slice_as_generic_args<'a, 'tcx>(ts: &'a [Ty<'tcx>]) -> &'a [GenericArg<'tcx>] {\n-    assert_eq!(TYPE_TAG, 0);\n-    // SAFETY: the whole slice is valid and immutable.\n-    // `Ty` and `GenericArg` is explained above.\n-    unsafe { slice::from_raw_parts(ts.as_ptr().cast(), ts.len()) }\n-}\n-\n impl<'tcx> GenericArgKind<'tcx> {\n     #[inline]\n     fn pack(self) -> GenericArg<'tcx> {"}, {"sha": "09cb6fd22d5e6250e6b0530468365d55e8467d47", "filename": "compiler/rustc_smir/src/rustc_smir/mod.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3d7a091c647ef8644bfa8487434d27c9c02aa59a/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7a091c647ef8644bfa8487434d27c9c02aa59a/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs?ref=3d7a091c647ef8644bfa8487434d27c9c02aa59a", "patch": "@@ -128,6 +128,18 @@ fn rustc_place_to_place(place: &rustc_middle::mir::Place<'_>) -> stable_mir::mir\n     stable_mir::mir::Place { local: place.local.as_usize() }\n }\n \n+fn rustc_unwind_to_unwind(\n+    unwind: &rustc_middle::mir::UnwindAction,\n+) -> stable_mir::mir::UnwindAction {\n+    use rustc_middle::mir::UnwindAction;\n+    match unwind {\n+        UnwindAction::Continue => stable_mir::mir::UnwindAction::Continue,\n+        UnwindAction::Unreachable => stable_mir::mir::UnwindAction::Unreachable,\n+        UnwindAction::Terminate => stable_mir::mir::UnwindAction::Terminate,\n+        UnwindAction::Cleanup(bb) => stable_mir::mir::UnwindAction::Cleanup(bb.as_usize()),\n+    }\n+}\n+\n fn rustc_terminator_to_terminator(\n     terminator: &rustc_middle::mir::Terminator<'_>,\n ) -> stable_mir::mir::Terminator {\n@@ -151,7 +163,15 @@ fn rustc_terminator_to_terminator(\n         Return => Terminator::Return,\n         Unreachable => Terminator::Unreachable,\n         Drop { .. } => todo!(),\n-        Call { .. } => todo!(),\n+        Call { func, args, destination, target, unwind, from_hir_call: _, fn_span: _ } => {\n+            Terminator::Call {\n+                func: rustc_op_to_op(func),\n+                args: args.iter().map(|arg| rustc_op_to_op(arg)).collect(),\n+                destination: rustc_place_to_place(destination),\n+                target: target.map(|t| t.as_usize()),\n+                unwind: rustc_unwind_to_unwind(unwind),\n+            }\n+        }\n         Assert { .. } => todo!(),\n         Yield { .. } => todo!(),\n         GeneratorDrop => todo!(),"}, {"sha": "bd5e6b68a12fab04fb4123b46c60d3225969fa38", "filename": "compiler/rustc_smir/src/stable_mir/mir/body.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d7a091c647ef8644bfa8487434d27c9c02aa59a/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7a091c647ef8644bfa8487434d27c9c02aa59a/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmir%2Fbody.rs?ref=3d7a091c647ef8644bfa8487434d27c9c02aa59a", "patch": "@@ -33,7 +33,7 @@ pub enum Terminator {\n         args: Vec<Operand>,\n         destination: Place,\n         target: Option<usize>,\n-        cleanup: Option<usize>,\n+        unwind: UnwindAction,\n     },\n     Assert {\n         cond: Operand,\n@@ -44,6 +44,14 @@ pub enum Terminator {\n     },\n }\n \n+#[derive(Clone, Debug)]\n+pub enum UnwindAction {\n+    Continue,\n+    Unreachable,\n+    Terminate,\n+    Cleanup(usize),\n+}\n+\n #[derive(Clone, Debug)]\n pub enum Statement {\n     Assign(Place, Operand),"}, {"sha": "4c7f64b20785b10a3717c141a4c54662ee7ab673", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3d7a091c647ef8644bfa8487434d27c9c02aa59a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7a091c647ef8644bfa8487434d27c9c02aa59a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=3d7a091c647ef8644bfa8487434d27c9c02aa59a", "patch": "@@ -19,6 +19,7 @@ pub enum Arch {\n     I386,\n     I686,\n     X86_64,\n+    X86_64h,\n     X86_64_sim,\n     X86_64_macabi,\n     Arm64_macabi,\n@@ -36,6 +37,7 @@ impl Arch {\n             I386 => \"i386\",\n             I686 => \"i686\",\n             X86_64 | X86_64_sim | X86_64_macabi => \"x86_64\",\n+            X86_64h => \"x86_64h\",\n         }\n     }\n \n@@ -44,13 +46,13 @@ impl Arch {\n             Armv7 | Armv7k | Armv7s => \"arm\",\n             Arm64 | Arm64_32 | Arm64_macabi | Arm64_sim => \"aarch64\",\n             I386 | I686 => \"x86\",\n-            X86_64 | X86_64_sim | X86_64_macabi => \"x86_64\",\n+            X86_64 | X86_64_sim | X86_64_macabi | X86_64h => \"x86_64\",\n         })\n     }\n \n     fn target_abi(self) -> &'static str {\n         match self {\n-            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 => \"\",\n+            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 | X86_64h => \"\",\n             X86_64_macabi | Arm64_macabi => \"macabi\",\n             // x86_64-apple-ios is a simulator target, even though it isn't\n             // declared that way in the target like the other ones...\n@@ -67,6 +69,10 @@ impl Arch {\n             Arm64_32 => \"apple-s4\",\n             I386 | I686 => \"yonah\",\n             X86_64 | X86_64_sim => \"core2\",\n+            // Note: `core-avx2` is slightly more advanced than `x86_64h`, see\n+            // comments (and disabled features) in `x86_64h_apple_darwin` for\n+            // details.\n+            X86_64h => \"core-avx2\",\n             X86_64_macabi => \"core2\",\n             Arm64_macabi => \"apple-a12\",\n             Arm64_sim => \"apple-a12\",\n@@ -182,8 +188,13 @@ fn deployment_target(var_name: &str) -> Option<(u32, u32)> {\n }\n \n fn macos_default_deployment_target(arch: Arch) -> (u32, u32) {\n-    // Note: Arm64_sim is not included since macOS has no simulator.\n-    if matches!(arch, Arm64 | Arm64_macabi) { (11, 0) } else { (10, 7) }\n+    match arch {\n+        // Note: Arm64_sim is not included since macOS has no simulator.\n+        Arm64 | Arm64_macabi => (11, 0),\n+        // x86_64h-apple-darwin only supports macOS 10.8 and later\n+        X86_64h => (10, 8),\n+        _ => (10, 7),\n+    }\n }\n \n fn macos_deployment_target(arch: Arch) -> (u32, u32) {\n@@ -227,7 +238,7 @@ fn link_env_remove(arch: Arch, os: &'static str) -> StaticCow<[StaticCow<str>]>\n         // of the linking environment that's wrong and reversed.\n         match arch {\n             Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 | X86_64_sim\n-            | Arm64_sim => {\n+            | X86_64h | Arm64_sim => {\n                 cvs![\"MACOSX_DEPLOYMENT_TARGET\"]\n             }\n             X86_64_macabi | Arm64_macabi => cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"],"}, {"sha": "10d38c34919c5cde8d535d6bdc15376c4ca1f562", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d7a091c647ef8644bfa8487434d27c9c02aa59a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7a091c647ef8644bfa8487434d27c9c02aa59a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=3d7a091c647ef8644bfa8487434d27c9c02aa59a", "patch": "@@ -1112,6 +1112,7 @@ supported_targets! {\n \n     (\"aarch64-apple-darwin\", aarch64_apple_darwin),\n     (\"x86_64-apple-darwin\", x86_64_apple_darwin),\n+    (\"x86_64h-apple-darwin\", x86_64h_apple_darwin),\n     (\"i686-apple-darwin\", i686_apple_darwin),\n \n     // FIXME(#106649): Remove aarch64-fuchsia in favor of aarch64-unknown-fuchsia"}, {"sha": "54f7490b2c052b8d6d9dd6221e217c591267ba8a", "filename": "compiler/rustc_target/src/spec/x86_64h_apple_darwin.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3d7a091c647ef8644bfa8487434d27c9c02aa59a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64h_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7a091c647ef8644bfa8487434d27c9c02aa59a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64h_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64h_apple_darwin.rs?ref=3d7a091c647ef8644bfa8487434d27c9c02aa59a", "patch": "@@ -0,0 +1,44 @@\n+use super::apple_base::{macos_llvm_target, opts, Arch};\n+use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, SanitizerSet};\n+use crate::spec::{StackProbeType, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let arch = Arch::X86_64h;\n+    let mut base = opts(\"macos\", arch);\n+    base.max_atomic_width = Some(128);\n+    base.frame_pointer = FramePointer::Always;\n+    base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-m64\"]);\n+    base.stack_probes = StackProbeType::X86;\n+    base.supported_sanitizers =\n+        SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::LEAK | SanitizerSet::THREAD;\n+\n+    // x86_64h is core2-avx without a few of the features which would otherwise\n+    // be guaranteed, so we need to disable those. This imitates clang's logic:\n+    // - https://github.com/llvm/llvm-project/blob/bd1f7c417/clang/lib/Driver/ToolChains/Arch/X86.cpp#L77-L78\n+    // - https://github.com/llvm/llvm-project/blob/bd1f7c417/clang/lib/Driver/ToolChains/Arch/X86.cpp#L133-L141\n+    //\n+    // FIXME: Sadly, turning these off here disables them in such a way that they\n+    // aren't re-enabled by `-Ctarget-cpu=native` (on a machine that has them).\n+    // It would be nice if this were not the case, but fixing it seems tricky\n+    // (and given that the main use-case for this target is for use in universal\n+    // binaries, probably not that important).\n+    base.features = \"-rdrnd,-aes,-pclmul,-rtm,-fsgsbase\".into();\n+    // Double-check that the `cpu` is what we expect (if it's not the list above\n+    // may need updating).\n+    assert_eq!(\n+        base.cpu, \"core-avx2\",\n+        \"you need to adjust the feature list in x86_64h-apple-darwin if you change this\",\n+    );\n+\n+    Target {\n+        // Clang automatically chooses a more specific target based on\n+        // MACOSX_DEPLOYMENT_TARGET. To enable cross-language LTO to work\n+        // correctly, we do too.\n+        llvm_target: macos_llvm_target(arch).into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .into(),\n+        arch: arch.target_arch(),\n+        options: TargetOptions { mcount: \"\\u{1}mcount\".into(), ..base },\n+    }\n+}"}, {"sha": "48efa67191ae945634bf7633d613f3e0a23b3a96", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d7a091c647ef8644bfa8487434d27c9c02aa59a/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/3d7a091c647ef8644bfa8487434d27c9c02aa59a/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=3d7a091c647ef8644bfa8487434d27c9c02aa59a", "patch": "@@ -42,6 +42,7 @@\n     - [wasm64-unknown-unknown](platform-support/wasm64-unknown-unknown.md)\n     - [x86_64-fortanix-unknown-sgx](platform-support/x86_64-fortanix-unknown-sgx.md)\n     - [x86_64-unknown-none](platform-support/x86_64-unknown-none.md)\n+    - [x86_64h-apple-darwin](platform-support/x86_64h-apple-darwin.md)\n - [Targets](targets/index.md)\n     - [Built-in Targets](targets/built-in.md)\n     - [Custom Targets](targets/custom.md)"}, {"sha": "75f97c1fc1edee8a37968bbb48012f745f3cf897", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d7a091c647ef8644bfa8487434d27c9c02aa59a/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/3d7a091c647ef8644bfa8487434d27c9c02aa59a/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=3d7a091c647ef8644bfa8487434d27c9c02aa59a", "patch": "@@ -327,5 +327,6 @@ target | std | host | notes\n `x86_64-uwp-windows-gnu` | \u2713 |  |\n `x86_64-uwp-windows-msvc` | \u2713 |  |\n `x86_64-wrs-vxworks` | ? |  |\n+`x86_64h-apple-darwin` | \u2713 | \u2713 | macOS with late-gen Intel (at least Haswell)\n \n [runs on NVIDIA GPUs]: https://github.com/japaric-archived/nvptx#targets"}, {"sha": "1a6f7bb834cf534169d8752f0024346ac6e93c45", "filename": "src/doc/rustc/src/platform-support/x86_64h-apple-darwin.md", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3d7a091c647ef8644bfa8487434d27c9c02aa59a/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fx86_64h-apple-darwin.md", "raw_url": "https://github.com/rust-lang/rust/raw/3d7a091c647ef8644bfa8487434d27c9c02aa59a/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fx86_64h-apple-darwin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fx86_64h-apple-darwin.md?ref=3d7a091c647ef8644bfa8487434d27c9c02aa59a", "patch": "@@ -0,0 +1,57 @@\n+# `x86_64h-apple-darwin`\n+\n+**Tier: 3**\n+\n+Target for macOS on late-generation `x86_64` Apple chips, usable as the\n+`x86_64h` entry in universal binaries, and equivalent to LLVM's\n+`x86_64h-apple-macosx*` targets.\n+\n+## Target maintainers\n+\n+- Thom Chiovoloni `thom@shift.click` <https://github.com/thomcc>\n+\n+## Requirements\n+\n+This target is an `x86_64` target that only supports Apple's late-gen\n+(Haswell-compatible) Intel chips. It enables a set of target features available\n+on these chips (AVX2 and similar), and MachO binaries built with this target may\n+be used as the `x86_64h` entry in universal binaries (\"fat\" MachO binaries), and\n+will fail to load on machines that do not support this.\n+\n+It should support the full standard library (`std` and `alloc` either with\n+default or user-defined allocators). This target is probably most useful when\n+targetted via cross-compilation (including from `x86_64-apple-darwin`), but if\n+built manually, the host tools work.\n+\n+It is similar to `x86_64-apple-darwin` in nearly all respects, although the\n+minimum supported OS version is slightly higher (it requires 10.8 rather than\n+`x86_64-apple-darwin`'s 10.7).\n+\n+## Building the target\n+\n+Users on Apple targets can build this by adding it to the `target` list in\n+`config.toml`, or with `-Zbuild-std`.\n+\n+## Building Rust programs\n+\n+Rust does not yet ship pre-compiled artifacts for this target. To compile for\n+this target, you will either need to build Rust with the target enabled (see\n+\"Building the target\" above), or build your own copy of `core` by using\n+`build-std` or similar.\n+\n+## Testing\n+\n+Code built with this target can be run on the set of Intel macOS machines that\n+support running `x86_64h` binaries (relatively recent Intel macs). The Rust test\n+suite seems to work.\n+\n+## Cross-compilation toolchains and C code\n+\n+Cross-compilation to this target from Apple hosts should generally work without\n+much configuration, so long as XCode and the CommandLineTools are installed.\n+Targetting it from non-Apple hosts is difficult, but no moreso than targetting\n+`x86_64-apple-darwin`.\n+\n+When compiling C code for this target, either the \"`x86_64h-apple-macosx*`\" LLVM\n+targets should be used, or an argument like `-arch x86_64h` should be passed to\n+the C compiler."}, {"sha": "6c1e668a7f0d01772a91ddc961b1f1923c78982b", "filename": "src/tools/linkchecker/linkcheck.sh", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3d7a091c647ef8644bfa8487434d27c9c02aa59a/src%2Ftools%2Flinkchecker%2Flinkcheck.sh", "raw_url": "https://github.com/rust-lang/rust/raw/3d7a091c647ef8644bfa8487434d27c9c02aa59a/src%2Ftools%2Flinkchecker%2Flinkcheck.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Flinkcheck.sh?ref=3d7a091c647ef8644bfa8487434d27c9c02aa59a", "patch": "@@ -16,15 +16,13 @@\n #\n # --all     Check all books. This can help make sure you don't break links\n #           from other books into your book.\n+#\n+# --path <book-path>\n+#           Path to the root directory for the book. Default to the current\n+#           working directory if omitted.\n \n set -e\n \n-if [ ! -f book.toml ] && [ ! -f src/SUMMARY.md ]\n-then\n-    echo \"Run command in root directory of the book.\"\n-    exit 1\n-fi\n-\n html_dir=\"$(rustc +nightly --print sysroot)/share/doc/rust/html\"\n \n if [ ! -d \"$html_dir\" ]\n@@ -38,6 +36,8 @@ fi\n export MDBOOK_OUTPUT__HTML__INPUT_404=\"\"\n \n book_name=\"\"\n+# Default to the current directory\n+book_path=\".\"\n # Iterative will avoid cleaning up, so you can quickly run it repeatedly.\n iterative=0\n # If \"1\", test all books, else only this book.\n@@ -52,6 +52,10 @@ do\n         --all)\n             all_books=1\n             ;;\n+        --path)\n+            book_path=\"${2:-.}\"\n+            shift\n+            ;;\n         *)\n             if [ -n \"$book_name\" ]\n             then\n@@ -70,6 +74,12 @@ then\n     exit 1\n fi\n \n+if [ ! -f \"$book_path/book.toml\" ] && [ ! -f \"$book_path/src/SUMMARY.md\" ]\n+then\n+    echo \"Run command in root directory of the book or provide a path to the book\"\n+    exit 1\n+fi\n+\n if [ ! -d \"$html_dir/$book_name\" ]\n then\n     echo \"book name \\\"$book_name\\\" not found in sysroot \\\"$html_dir\\\"\"\n@@ -93,11 +103,11 @@ then\n fi\n \n echo \"Building book \\\"$book_name\\\"...\"\n-mdbook build\n+mdbook build \"$book_path\"\n \n cp -R \"$html_dir\" linkcheck\n rm -rf \"linkcheck/$book_name\"\n-cp -R book \"linkcheck/$book_name\"\n+cp -R \"$book_path/book\" \"linkcheck/$book_name\"\n \n if [ \"$all_books\" = \"1\" ]\n then"}, {"sha": "95f27efa7715c45cac3f8dd3110ad34eea36f07e", "filename": "tests/ui-fulldeps/stable-mir/crate-info.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d7a091c647ef8644bfa8487434d27c9c02aa59a/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7a091c647ef8644bfa8487434d27c9c02aa59a/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs?ref=3d7a091c647ef8644bfa8487434d27c9c02aa59a", "patch": "@@ -33,7 +33,6 @@ fn test_stable_mir(tcx: TyCtxt<'_>) {\n \n     // Find items in the local crate.\n     let items = stable_mir::all_local_items();\n-    assert!(get_item(tcx, &items, (DefKind::Fn, \"foo_bar\")).is_some());\n     assert!(get_item(tcx, &items, (DefKind::Fn, \"foo::bar\")).is_some());\n \n     // Find the `std` crate.\n@@ -52,6 +51,15 @@ fn test_stable_mir(tcx: TyCtxt<'_>) {\n         stable_mir::mir::Terminator::Return => {}\n         other => panic!(\"{other:?}\"),\n     }\n+\n+    let foo_bar = get_item(tcx, &items, (DefKind::Fn, \"foo_bar\")).unwrap();\n+    let body = foo_bar.body();\n+    assert_eq!(body.blocks.len(), 4);\n+    let block = &body.blocks[0];\n+    match &block.terminator {\n+        stable_mir::mir::Terminator::Call { .. } => {}\n+        other => panic!(\"{other:?}\"),\n+    }\n }\n \n // Use internal API to find a function in a crate."}]}