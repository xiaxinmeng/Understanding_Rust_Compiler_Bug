{"sha": "d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYmU1YjZjN2EyMGI4YjMzZjYxY2QwZGI0YTNjYmJkZDdhNTQ0OGE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-13T10:48:55Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-13T10:52:13Z"}, "message": "Remove tests for objs, adjust tests that use objs", "tree": {"sha": "80212e4fe6672ea2a8fb09567c0cfb925b842073", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80212e4fe6672ea2a8fb09567c0cfb925b842073"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a", "html_url": "https://github.com/rust-lang/rust/commit/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24102d50ad2335c1da5c10ddab8996534b2760dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/24102d50ad2335c1da5c10ddab8996534b2760dc", "html_url": "https://github.com/rust-lang/rust/commit/24102d50ad2335c1da5c10ddab8996534b2760dc"}], "stats": {"total": 987, "additions": 16, "deletions": 971}, "files": [{"sha": "ef1e96eaefc66b100c27f31bc1eda166f3e2eb3c", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a", "patch": "@@ -159,7 +159,6 @@ fn doc_item(rd: rustdoc, item: @ast::item) {\n         ast::item_mod(_mod) { }\n         ast::item_ty(ty, typarams) { }\n         ast::item_tag(variant, typarams) { }\n-        ast::item_obj(_obj, typarams, node_id) { }\n         ast::item_res(_, _, _, _, _) { }\n     };\n }"}, {"sha": "7145c0fc1054b3801117132bbe3d273454a358cc", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a", "patch": "@@ -13,12 +13,11 @@ import str;\n \n fn LINE_LENGTH() -> uint { ret 60u; }\n \n-obj myrandom(mutable last: u32) {\n-    fn next(mx: u32) -> u32 {\n-        last = (last * 3877u32 + 29573u32) % 139968u32;\n-        let ans = mx * last / 139968u32;\n-        ret ans;\n-    }\n+type myrandom = @{mutable last: u32};\n+\n+fn myrandom_next(r: myrandom, mx: u32) -> u32 {\n+    r.last = (r.last * 3877u32 + 29573u32) % 139968u32;\n+    mx * r.last / 139968u32\n }\n \n type aminoacids = {ch: char, prob: u32};\n@@ -45,10 +44,11 @@ fn select_random(r: u32, genelist: [aminoacids]) -> char {\n \n fn make_random_fasta(id: str, desc: str, genelist: [aminoacids], n: int) {\n     log(debug, \">\" + id + \" \" + desc);\n-    let rng = myrandom(std::rand::mk_rng().next());\n+    let rng = @{mutable last: std::rand::mk_rng().next()};\n     let op: str = \"\";\n-    uint::range(0u, n as uint) {|i|\n-        str::push_byte(op, select_random(rng.next(100u32), genelist) as u8);\n+    uint::range(0u, n as uint) {|_i|\n+        str::push_byte(op, select_random(myrandom_next(rng, 100u32),\n+                                         genelist) as u8);\n         if str::byte_len(op) >= LINE_LENGTH() {\n             log(debug, op);\n             op = \"\";\n@@ -73,7 +73,7 @@ fn make_repeat_fasta(id: str, desc: str, s: str, n: int) {\n \n fn acid(ch: char, prob: u32) -> aminoacids { ret {ch: ch, prob: prob}; }\n \n-fn main(args: [str]) {\n+fn main() {\n     let iub: [aminoacids] =\n         make_cumulative([acid('a', 27u32), acid('c', 12u32), acid('g', 12u32),\n                          acid('t', 27u32), acid('B', 2u32), acid('D', 2u32),"}, {"sha": "764cb7bdb41c80c2c8ee4790520339f3a59b483b", "filename": "src/test/compile-fail/anon-obj-overriding-wrong-type.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fcompile-fail%2Fanon-obj-overriding-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fcompile-fail%2Fanon-obj-overriding-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fanon-obj-overriding-wrong-type.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,22 +0,0 @@\n-//error-pattern: with one of a different type\n-use std;\n-\n-fn main() {\n-\n-    obj a() {\n-        fn foo() -> int { ret 2; }\n-        fn bar() -> int { ret self.foo(); }\n-    }\n-\n-    let my_a = a();\n-\n-    // Attempting to override a method with one of a different type.\n-    let my_b =\n-        obj () {\n-            fn foo() -> str { ret \"hello\"; }\n-            with\n-            my_a\n-        };\n-\n-    log(error, my_b.foo());\n-}"}, {"sha": "67a6221df017cb08a9b8e801967e7971a49a2e12", "filename": "src/test/compile-fail/bad-env-capture3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs?ref=d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a", "patch": "@@ -1,5 +1,5 @@\n // error-pattern: attempted dynamic environment-capture\n-obj foo(x: int) {\n+fn foo(x: int) {\n     fn mth() {\n         fn bar() { log(debug, x); }\n     }"}, {"sha": "2a59af3fe8097389200e17e7d5570ecfe943287a", "filename": "src/test/compile-fail/bad-type-env-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Fcompile-fail%2Fbad-type-env-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Fcompile-fail%2Fbad-type-env-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-type-env-capture.rs?ref=d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a", "patch": "@@ -1,6 +1,6 @@\n // xfail-test\n // error-pattern: attempted dynamic environment-capture\n fn foo<T>() {\n-    obj bar(b: T) { }\n+    fn bar(b: T) { }\n }\n fn main() { }"}, {"sha": "630cd288a4924c8e13926fe4e51ec276f689bbb7", "filename": "src/test/compile-fail/binop-sub-obj.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fcompile-fail%2Fbinop-sub-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fcompile-fail%2Fbinop-sub-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-sub-obj.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,3 +0,0 @@\n-// error-pattern:- cannot be applied to type `obj\n-\n-fn main() { let x = obj () { } - obj () { }; }"}, {"sha": "85d8c7850cfbc9e47157c9258ff8e99f98b9bbb8", "filename": "src/test/compile-fail/constructor-as-cast.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fcompile-fail%2Fconstructor-as-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fcompile-fail%2Fconstructor-as-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconstructor-as-cast.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,10 +0,0 @@\n-// error-pattern: unresolved name: base\n-type base =\n-    obj {\n-        fn foo();\n-    };\n-obj derived() {\n-    fn foo() { }\n-    fn bar() { }\n-}\n-fn main() { let d: derived = derived(); let b: base = base(d); }"}, {"sha": "fc893dea43850914f52f283ab48e28f1d1674653", "filename": "src/test/compile-fail/direct-obj-fn-call.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fcompile-fail%2Fdirect-obj-fn-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fcompile-fail%2Fdirect-obj-fn-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdirect-obj-fn-call.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,7 +0,0 @@\n-// error-pattern: attempted access of field hello\n-\n-obj x() {\n-    fn hello() { #debug(\"hello\"); }\n-}\n-\n-fn main() { x.hello(); }"}, {"sha": "0857ac990c0a393c94f3e6818d3478928bc24a0d", "filename": "src/test/compile-fail/extend-non-object.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fcompile-fail%2Fextend-non-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fcompile-fail%2Fextend-non-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextend-non-object.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,13 +0,0 @@\n-//error-pattern:x does not have object type\n-use std;\n-\n-fn main() {\n-    let x = 3;\n-\n-    let anon_obj =\n-        obj () {\n-            fn foo() -> int { ret 3; }\n-            with\n-            x\n-        };\n-}"}, {"sha": "876c668e8c619cb2993f4a350f30cebd87a4dc39", "filename": "src/test/compile-fail/no-self-dispatch.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fcompile-fail%2Fno-self-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fcompile-fail%2Fno-self-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-self-dispatch.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,6 +0,0 @@\n-// error-pattern: unresolved name\n-obj oT() {\n-    fn get() -> int { ret 3; }\n-    fn foo() { let c = get(); }\n-}\n-fn main() { }"}, {"sha": "3ca98a5c1ce8b1d2140ea91d4919ff0bcfa9e63b", "filename": "src/test/compile-fail/not-a-pred-3.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fcompile-fail%2Fnot-a-pred-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fcompile-fail%2Fnot-a-pred-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-a-pred-3.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,13 +0,0 @@\n-// -*- rust -*-\n-\n-// error-pattern: expected the constraint name\n-\n-obj f() {\n-    fn g(q: int) -> bool { ret true; }\n-}\n-\n-fn main() {\n-    let z = f();\n-    // should fail to typecheck, as z.g isn't an explicit name\n-    check (z.g(42));\n-}"}, {"sha": "a7ccb47511471b60129469bd4e4965ac8858c11d", "filename": "src/test/compile-fail/not-a-pred.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Fcompile-fail%2Fnot-a-pred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Fcompile-fail%2Fnot-a-pred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-a-pred.rs?ref=d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a", "patch": "@@ -3,6 +3,6 @@\n \n fn f(a: int, b: int) : lt(a, b) { }\n \n-obj lt(a: int, b: int) { }\n+fn lt(a: int, b: int) { }\n \n fn main() { let a: int = 10; let b: int = 23; check (lt(a, b)); f(a, b); }"}, {"sha": "8de59268482c0b0368836e2391d6a5268f840337", "filename": "src/test/compile-fail/self-call-non-obj.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fcompile-fail%2Fself-call-non-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fcompile-fail%2Fself-call-non-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fself-call-non-obj.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,10 +0,0 @@\n-// error-pattern:unresolved name: self\n-\n-// Fix for issue #707.\n-fn main() {\n-\n-    fn foo() -> int { ret 3(); }\n-\n-    self.foo();\n-\n-}"}, {"sha": "21069a4832e27b08f942187a682e345be1731fde", "filename": "src/test/compile-fail/self-missing-method.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fcompile-fail%2Fself-missing-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fcompile-fail%2Fself-missing-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fself-missing-method.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,12 +0,0 @@\n-// error-pattern:attempted access of field m on type fn\n-fn main() {\n-\n-  obj foo() {\n-      fn m() {\n-          self();\n-      }\n-  }\n-\n-  let a = foo;\n-  a.m();\n-}"}, {"sha": "559e69275c7d20b05968f7b6b0c537e4d08ea942", "filename": "src/test/compile-fail/writing-to-immutable-obj.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-obj.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,5 +0,0 @@\n-// error-pattern:assigning to immutable object field\n-obj objy(x: int) {\n-    fn foo() { x = 5; }\n-}\n-fn main() { }"}, {"sha": "d6454759ad54533d0e8b733c0f023bb97811c843", "filename": "src/test/pretty/anon-obj.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fpretty%2Fanon-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Fpretty%2Fanon-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fanon-obj.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,14 +0,0 @@\n-// pp-exact\n-\n-fn main() {\n-    let my_obj =\n-        obj () {\n-            fn foo() { }\n-        };\n-    let my_ext_obj =\n-        obj () {\n-            fn foo() { }\n-            with\n-            my_obj\n-        };\n-}"}, {"sha": "039d25be381675a2d2f3b5c6744940ac6f1b74b7", "filename": "src/test/run-pass/anon-obj-backwarding-2.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-backwarding-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-backwarding-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-backwarding-2.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,25 +0,0 @@\n-use std;\n-\n-fn main() {\n-\n-    obj a() {\n-        fn foo() -> int { ret 2; }\n-        fn bar() -> int { ret self.foo(); }\n-    }\n-\n-    let my_a = a();\n-\n-    let my_b =\n-        obj () {\n-            fn baz() -> int { ret self.foo(); }\n-            with\n-            my_a\n-        };\n-\n-    assert (my_a.foo() == 2);\n-    assert (my_a.bar() == 2);\n-    assert (my_b.foo() == 2);\n-    assert (my_b.baz() == 2);\n-    assert (my_b.bar() == 2);\n-\n-}"}, {"sha": "4b8664eed9300656b9d6158ca6470656b6822aff", "filename": "src/test/run-pass/anon-obj-backwarding.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-backwarding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-backwarding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-backwarding.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,23 +0,0 @@\n-use std;\n-\n-fn main() {\n-\n-    obj inner() {\n-        fn a() -> int { ret 2; }\n-        fn m() -> uint { ret 3u; }\n-        fn z() -> uint { ret self.m(); }\n-    }\n-\n-    let my_inner = inner();\n-\n-    let my_outer =\n-        obj () {\n-            fn b() -> uint { ret 5u; }\n-            fn n() -> str { ret \"world!\"; }\n-            with\n-            my_inner\n-        };\n-\n-    assert (my_inner.z() == 3u);\n-    assert (my_outer.z() == 3u);\n-}"}, {"sha": "c1024afc6ecf928f55646d0b63297ed1be072042", "filename": "src/test/run-pass/anon-obj-cats.rs", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-cats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-cats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-cats.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,46 +0,0 @@\n-fn main() {\n-\n-    // The Internet made me do it.\n-\n-    obj cat() {\n-        fn ack() -> str { ret \"ack\"; }\n-        fn meow() -> str { ret \"meow\"; }\n-        fn zzz() -> str { ret self.meow(); }\n-    }\n-\n-    let shortcat = cat();\n-\n-    let longcat =\n-        obj () {\n-            fn lol() -> str { ret \"lol\"; }\n-            fn nyan() -> str { ret \"nyan\"; }\n-            with\n-            shortcat\n-        };\n-\n-    let longercat =\n-        obj () {\n-            fn meow() -> str { ret \"zzz\"; }\n-            with\n-            shortcat\n-        };\n-\n-    let evenlongercat =\n-        obj () {\n-            fn meow() -> str { ret \"zzzzzz\"; }\n-            with\n-            longercat\n-        };\n-\n-    // Tests self-call.\n-    assert (shortcat.zzz() == \"meow\");\n-\n-    // Tests forwarding/backwarding + self-call.\n-    assert (longcat.zzz() == \"meow\");\n-\n-    // Tests forwarding/backwarding + self-call + override.\n-    assert (longercat.zzz() == \"zzz\");\n-\n-    // Tests two-level forwarding/backwarding + self-call + override.\n-    assert (evenlongercat.zzz() == \"zzzzzz\");\n-}"}, {"sha": "c9c47e29008560dc1accaecef8beb56cd1c38f4f", "filename": "src/test/run-pass/anon-obj-degenerate.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-degenerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-degenerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-degenerate.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,20 +0,0 @@\n-use std;\n-\n-fn main() {\n-\n-    obj a() {\n-        fn foo() -> int { ret 2; }\n-        fn bar() -> int { ret self.foo(); }\n-    }\n-\n-    let my_a = a();\n-\n-    // Degenerate anonymous object: one that doesn't add any new\n-    // methods or fields.\n-\n-    let my_d = obj () { with my_a };\n-\n-    assert (my_d.foo() == 2);\n-    assert (my_d.bar() == 2);\n-\n-}"}, {"sha": "3e782ce56de4149e4522d37eb92210fe2a2a3a0a", "filename": "src/test/run-pass/anon-obj-no-inner-obj-simple.rs", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-no-inner-obj-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-no-inner-obj-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-no-inner-obj-simple.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,43 +0,0 @@\n-use std;\n-\n-fn main() {\n-\n-    // Anonymous object that doesn't extend an existing one.\n-    let my_obj =\n-        obj () {\n-            fn foo() -> int { ret 2; }\n-            fn bar() -> int { ret 3; }\n-            fn baz() -> str { \"hello!\" }\n-        };\n-\n-    assert (my_obj.foo() == 2);\n-    assert (my_obj.bar() == 3);\n-    assert (my_obj.baz() == \"hello!\");\n-\n-    // Make sure the result is extendable.\n-    let my_ext_obj =\n-        obj () {\n-            fn foo() -> int { ret 3; }\n-            fn quux() -> str { ret self.baz(); }\n-            with\n-            my_obj\n-        };\n-\n-    assert (my_ext_obj.foo() == 3);\n-    assert (my_ext_obj.bar() == 3);\n-    assert (my_ext_obj.baz() == \"hello!\");\n-    assert (my_ext_obj.quux() == \"hello!\");\n-\n-    // And again.\n-    let my_ext_ext_obj =\n-        obj () {\n-            fn baz() -> str { \"world!\" }\n-            with\n-            my_ext_obj\n-        };\n-\n-    assert (my_ext_ext_obj.foo() == 3);\n-    assert (my_ext_ext_obj.bar() == 3);\n-    assert (my_ext_ext_obj.baz() == \"world!\");\n-    assert (my_ext_ext_obj.quux() == \"world!\");\n-}"}, {"sha": "7326144d18ad79494197e2abde33d733604719cb", "filename": "src/test/run-pass/anon-obj-no-inner-obj.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-no-inner-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-no-inner-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-no-inner-obj.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,20 +0,0 @@\n-//xfail-test\n-use std;\n-\n-// This is failing not because it's an anonymous object from nothing\n-// -- that park seems to work fine -- but, rather, because methods\n-// that are added to an object at the same time can't refer to each\n-// other (issue #822).\n-\n-fn main() {\n-\n-    // Anonymous object that doesn't extend an existing one.\n-    let my_obj = obj () {\n-        fn foo() -> int { ret 2; }\n-        fn bar() -> int { ret self.foo(); }\n-    };\n-\n-    assert (my_obj.foo() == 2);\n-    assert (my_obj.bar() == 2);\n-\n-}"}, {"sha": "3eb7c72d864d3949462c66731c6c5526fda7d333", "filename": "src/test/run-pass/anon-obj-overriding-reduced.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-overriding-reduced.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-overriding-reduced.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-overriding-reduced.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,18 +0,0 @@\n-// Reduced test case for issue #543.\n-fn main() {\n-\n-    obj a() {\n-        fn foo() -> int { ret 2; }\n-    }\n-\n-    let my_a = a();\n-\n-    let my_b =\n-        obj () {\n-            fn foo() -> int { ret 3; }\n-            with\n-            my_a\n-        };\n-\n-    assert (my_b.foo() == 3);\n-}"}, {"sha": "e9551900b26278402b5101f6bbe2e75c99a5fda9", "filename": "src/test/run-pass/anon-obj-overriding.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-overriding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-overriding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-overriding.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,39 +0,0 @@\n-use std;\n-\n-fn main() {\n-\n-    obj a() {\n-        fn foo() -> int { ret 2; }\n-        fn bar() -> int { ret self.foo(); }\n-    }\n-\n-    let my_a = a();\n-\n-    // An anonymous object that overloads the 'foo' method.\n-    let my_b =\n-        obj () {\n-            fn foo() -> int { ret 3; }\n-            with\n-            my_a\n-        };\n-\n-    assert (my_b.foo() == 3);\n-    assert (my_b.bar() == 3);\n-\n-    let my_c =\n-        obj () {\n-            fn baz(x: int, y: int) -> int { ret x + y + self.foo(); }\n-            with\n-            my_b\n-        };\n-\n-    let my_d =\n-        obj () {\n-            fn baz(x: int, y: int) -> int { ret x + y + self.foo(); }\n-            with\n-            my_a\n-        };\n-\n-    assert (my_c.baz(1, 2) == 6);\n-    assert (my_d.baz(1, 2) == 5);\n-}"}, {"sha": "6340b128554789d53fc0a480f2bf26b6e654b00a", "filename": "src/test/run-pass/anon-obj-refer-to-parallel-method.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-refer-to-parallel-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-refer-to-parallel-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-refer-to-parallel-method.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,22 +0,0 @@\n-//xfail-test\n-\n-// Test case for issue #822.\n-fn main() {\n-    obj a() {\n-        fn foo() -> int {\n-            ret 2;\n-        }\n-    }\n-\n-    let my_a = a();\n-\n-    let my_b = obj() {\n-        fn bar() -> int {\n-            ret self.baz();\n-        }\n-        fn baz() -> int {\n-            ret 3;\n-        }\n-        with my_a\n-    };\n-}"}, {"sha": "807f1275d8a51998012322003023f34ce433fdd6", "filename": "src/test/run-pass/anon-obj-with-self-call-2.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-with-self-call-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-with-self-call-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-with-self-call-2.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,16 +0,0 @@\n-// Reduced test case for issue #540.\n-fn main() {\n-    obj a() {\n-        fn foo() -> int { ret 2; }\n-    }\n-\n-    let my_a = a();\n-    let my_b =\n-        obj () {\n-            fn baz() -> int { ret self.foo(); }\n-            with\n-            my_a\n-        };\n-\n-    assert (my_b.baz() == 2);\n-}"}, {"sha": "76faa9decc40545fea16ba1febba16e0db535627", "filename": "src/test/run-pass/anon-obj-with-self-call.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-with-self-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-obj-with-self-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-with-self-call.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,31 +0,0 @@\n-use std;\n-\n-fn main() {\n-\n-    obj a() {\n-        fn foo() -> int { ret 2; }\n-        fn bar() -> int { ret self.foo(); }\n-    }\n-\n-    let my_a = a();\n-\n-    let my_b =\n-        obj () {\n-            fn baz() -> int { ret self.foo(); }\n-            with\n-            my_a\n-        };\n-\n-    assert (my_b.baz() == 2);\n-\n-    let my_c =\n-        obj () {\n-            fn foo() -> int { ret 3; }\n-            fn baz() -> int { ret self.foo(); }\n-            with\n-            my_a\n-        };\n-\n-    assert (my_c.baz() == 3);\n-    assert (my_c.bar() == 3);\n-}"}, {"sha": "226c2b9fd21eb3f694c5068d6512a79d04523491", "filename": "src/test/run-pass/anon-objs-with-fields.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-objs-with-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fanon-objs-with-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-objs-with-fields.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,26 +0,0 @@\n-//xfail-test\n-use std;\n-\n-fn main() {\n-\n-    obj a() {\n-        fn foo() -> int { ret 2; }\n-        fn bar() -> int { ret self.foo(); }\n-    }\n-\n-    let my_a = a();\n-\n-    // Extending an object with a new field.  Adding support for this\n-    // is issue #538.\n-\n-    // Right now, this fails with \"unresolved name: quux\".\n-    let my_c =\n-        obj (quux: int = 3) {\n-            fn baz() -> int { ret quux + 4; }\n-            with\n-            my_a\n-        };\n-\n-    assert (my_c.baz() == 7);\n-\n-}\n\\ No newline at end of file"}, {"sha": "930fbe545b597596fe278493a752c4cbdef9ad7f", "filename": "src/test/run-pass/autoderef-objfn.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fautoderef-objfn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fautoderef-objfn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-objfn.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,11 +0,0 @@\n-\n-\n-\n-// -*- rust -*-\n-obj clam() {\n-    fn chowder() { #debug(\"in clam chowder\"); }\n-}\n-\n-fn foo(c: @clam) { c.chowder(); }\n-\n-fn main() { let c: clam = clam(); foo(@c); }"}, {"sha": "a76b17cc10a0b2bbd492c660b98aaa245f6c110e", "filename": "src/test/run-pass/bind-obj-ctor.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fbind-obj-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fbind-obj-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-obj-ctor.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,17 +0,0 @@\n-\n-\n-fn main() {\n-    // Testcase for issue #59.\n-\n-    obj simple(x: int, y: int) {\n-        fn sum() -> int { ret x + y; }\n-    }\n-    let obj0 = simple(1, 2);\n-    let ctor0 = bind simple(1, _);\n-    let ctor1 = bind simple(_, 2);\n-    let obj1 = ctor0(2);\n-    let obj2 = ctor1(1);\n-    assert (obj0.sum() == 3);\n-    assert (obj1.sum() == 3);\n-    assert (obj2.sum() == 3);\n-}"}, {"sha": "2f0430cda57b66f0831f7f5ccbf3e9543ebdedef", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a", "patch": "@@ -132,29 +132,6 @@ fn test_native_fn() {\n     */\n }\n \n-fn test_obj() {\n-    let o1 = obj () { };\n-    let o2 = obj () { };\n-\n-    assert (o1 == o1);\n-\n-    // FIXME (#815): This doesn't work on linux only. Wierd.\n-    //assert (o1 != o2);\n-    //assert (!(o1 == o2));\n-\n-    obj constr1(i: int) { }\n-    obj constr2(i: int) { }\n-\n-    let o5 = constr1(10);\n-    let o6 = constr1(10);\n-    let o7 = constr1(11);\n-    let o8 = constr2(11);\n-\n-    assert (o5 != o6);\n-    assert (o6 != o7);\n-    assert (o7 != o8);\n-}\n-\n fn main() {\n     test_nil();\n     test_bool();\n@@ -166,5 +143,4 @@ fn main() {\n     test_task();\n     test_fn();\n     test_native_fn();\n-    test_obj();\n }"}, {"sha": "46187c3b53b059db54c8031ae98a60882853bc03", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a", "patch": "@@ -24,13 +24,6 @@ tag tg { foo; }\n \n tag tg { bar; }\n \n-#[cfg(bogus)]\n-obj o() {\n-    fn f() { ret bogus; }\n-}\n-\n-obj o() { }\n-\n #[cfg(bogus)]\n resource r(i: int) { }\n "}, {"sha": "af01d9a35e7e07adcf6ee01c4bf7d9e4a7df38d0", "filename": "src/test/run-pass/cycle-collection5.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs?ref=d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a", "patch": "@@ -1,10 +1,9 @@\n type foo = { mutable z : fn@() };\n \n fn nop() { }\n-fn nop_foo(_y: o, _x : @foo) { }\n+fn nop_foo(_y: @int, _x : @foo) { }\n \n-obj o() {\n-}\n+fn o() -> @int { @10 }\n \n fn main() {\n     let w = @{ mutable z: bind nop() };"}, {"sha": "e327c7a6cf0b55b57000fdcb0fd98e16c9f720d8", "filename": "src/test/run-pass/first-class-method.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Ffirst-class-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Ffirst-class-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffirst-class-method.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,9 +0,0 @@\n-// xfail-test\n-\n-// Test case for issue #758.\n-obj foo() { fn f() { } }\n-\n-fn main() {\n-    let my_foo = foo();\n-    let f = my_foo.f;\n-}"}, {"sha": "1c8f900b2e067f6a83fbb20d4401712b94ffe53b", "filename": "src/test/run-pass/foreach-unique-drop.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fforeach-unique-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fforeach-unique-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-unique-drop.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,8 +0,0 @@\n-\n-obj ob<K: copy>(k: K) {\n-    fn foo(it: block(~{a: K})) { it(~{a: k}); }\n-}\n-\n-fn x(o: ob<str>) { o.foo() {|_i|}; }\n-\n-fn main() { let o = ob::<str>(\"hi\" + \"there\"); x(o); }"}, {"sha": "2c4e1804af539a2e6a329dad9b51828bea9ae5d8", "filename": "src/test/run-pass/generic-obj-with-derived-type.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,18 +0,0 @@\n-\n-\n-obj handle<T: copy>(data: T) {\n-    fn get() -> T { ret data; }\n-}\n-\n-fn main() {\n-    type rgb = {x: u8, y: u8, z: u8};\n-\n-    let h: handle<rgb> = handle::<rgb>({x: 1 as u8, y: 2 as u8, z: 3 as u8});\n-    #debug(\"constructed object\");\n-    log(debug, h.get().x);\n-    log(debug, h.get().y);\n-    log(debug, h.get().z);\n-    assert (h.get().x == 1 as u8);\n-    assert (h.get().y == 2 as u8);\n-    assert (h.get().z == 3 as u8);\n-}"}, {"sha": "5eedeecb5bc1a969d1cb210a1745fb220fbed423", "filename": "src/test/run-pass/generic-obj.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,23 +0,0 @@\n-\n-\n-obj buf<T: copy>(data: {_0: T, _1: T, _2: T}) {\n-    fn get(i: int) -> T {\n-        if i == 0 {\n-            ret data._0;\n-        } else { if i == 1 { ret data._1; } else { ret data._2; } }\n-    }\n-    fn take(t: T) { }\n-    fn take2(t: T) { }\n-}\n-\n-fn main() {\n-    let b: buf<int> = buf::<int>({_0: 1, _1: 2, _2: 3});\n-    #debug(\"constructed object\");\n-    log(debug, b.get(0));\n-    log(debug, b.get(1));\n-    log(debug, b.get(2));\n-    assert (b.get(0) == 1);\n-    assert (b.get(1) == 2);\n-    assert (b.get(2) == 3);\n-    b.take2(0);\n-}"}, {"sha": "71b5a7e9e42e086c972bd6d18d84ab9a00795d79", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a", "patch": "@@ -59,14 +59,6 @@ fn test_box_rec() {\n     assert *i == 1;\n }\n \n-fn test_obj() {\n-    obj o(_f: r) {}\n-    let i = @mutable 0;\n-    let rr = r(i);\n-    { let _oo = o(rr); }\n-    assert *i == 1;\n-}\n-\n fn main() {\n     test_box();\n     test_rec();\n@@ -75,5 +67,4 @@ fn main() {\n     test_tup();\n     test_unique();\n     test_box_rec();\n-    test_obj();\n }"}, {"sha": "d5f07efc086499639acae137dee4f19779fad678", "filename": "src/test/run-pass/interface-narrowing.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Finterface-narrowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Finterface-narrowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finterface-narrowing.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,17 +0,0 @@\n-//xfail-test\n-\n-// Test case for issue #115.\n-type base =\n-  obj {\n-    fn foo();\n-  };\n-\n-obj derived() {\n-  fn foo() {}\n-  fn bar() {}\n-}\n-\n-fn main() {\n-  let d = derived();\n-  let b:base = d as base;\n-}"}, {"sha": "31316f3d1ef00cd6eafa7617a7d5435ec8b7fba9", "filename": "src/test/run-pass/issue-718.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fissue-718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fissue-718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-718.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,22 +0,0 @@\n-fn main() {\n-\n-    obj a() {\n-        fn foo() -> int { ret 2; }\n-    }\n-\n-    let my_a = a();\n-\n-    let my_b = obj () { with my_a };\n-\n-    assert (my_b.foo() == 2);\n-\n-    let my_c = obj () { with my_b };\n-\n-    assert (my_c.foo() == 2);\n-\n-    // ...One more for good measure.\n-    let my_d = obj () { with my_b };\n-\n-    assert (my_d.foo() == 2);\n-}\n-"}, {"sha": "eba33e5e67f47648149cd13b483f26984b1f82bf", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a", "patch": "@@ -31,13 +31,6 @@ mod test_single_attr_outer {\n     #[attr = \"val\"]\n     #[abi = \"cdecl\"]\n     native mod rustrt { }\n-\n-    #[attr = \"val\"]\n-    type t = obj { };\n-\n-\n-    #[attr = \"val\"]\n-    obj o() { }\n }\n \n mod test_multi_attr_outer {\n@@ -61,12 +54,7 @@ mod test_multi_attr_outer {\n \n     #[attr1 = \"val\"]\n     #[attr2 = \"val\"]\n-    type t = obj { };\n-\n-\n-    #[attr1 = \"val\"]\n-    #[attr2 = \"val\"]\n-    obj o() { }\n+    type t = {x: int};\n }\n \n mod test_stmt_single_attr_outer {\n@@ -89,13 +77,6 @@ mod test_stmt_single_attr_outer {\n         native mod rustrt {\n         }\n         */\n-\n-        #[attr = \"val\"]\n-        type t = obj { };\n-\n-        #[attr = \"val\"]\n-        obj o() { }\n-\n     }\n }\n \n@@ -123,15 +104,6 @@ mod test_stmt_multi_attr_outer {\n         native mod rustrt {\n         }\n         */\n-\n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n-        type t = obj { };\n-\n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n-        obj o() { }\n-\n     }\n }\n "}, {"sha": "f664ef50ee2444e1c23212c94072d2663c857c95", "filename": "src/test/run-pass/nested-obj-self.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fnested-obj-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fnested-obj-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-obj-self.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,28 +0,0 @@\n-\n-\n-fn main() {\n-    obj foo() {\n-        fn m1() -> str { ret \"foo.m1\"; }\n-        fn m2() -> str { ret self.m1(); }\n-        fn m3() -> str {\n-            let s1: str = self.m2();\n-            assert (s1 == \"foo.m1\");\n-            obj bar() {\n-                fn m1() -> str { ret \"bar.m1\"; }\n-                fn m2() -> str { ret self.m1(); }\n-            }\n-            let b = bar();\n-            let s3: str = b.m2();\n-            let s4: str = self.m2();\n-            assert (s4 == \"foo.m1\");\n-            ret s3;\n-        }\n-    }\n-    let a = foo();\n-    let s1: str = a.m1();\n-    assert (s1 == \"foo.m1\");\n-    let s2: str = a.m2();\n-    assert (s2 == \"foo.m1\");\n-    let s3: str = a.m3();\n-    assert (s3 == \"bar.m1\");\n-}"}, {"sha": "26c27435ce1d8a0b12dd6cc08becde34217fb52a", "filename": "src/test/run-pass/obj-as.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fobj-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fobj-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-as.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,20 +0,0 @@\n-// xfail-test\n-obj big() {\n-    fn one() -> int { ret 1; }\n-    fn two() -> int { ret 2; }\n-    fn three() -> int { ret 3; }\n-}\n-\n-type small =\n-    obj {\n-        fn one() -> int ;\n-    };\n-\n-fn main() {\n-    let b: big = big();\n-    assert (b.one() == 1);\n-    assert (b.two() == 2);\n-    assert (b.three() == 3);\n-    let s: small = b as small;\n-    assert (s.one() == 1);\n-}\n\\ No newline at end of file"}, {"sha": "3da7f5a29fa8cc1014d3cae3ea128c8ed4b1aa15", "filename": "src/test/run-pass/obj-docs.rs", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fobj-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fobj-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-docs.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,57 +0,0 @@\n-// Sanity-check the code examples that appear in the object system\n-// documentation.\n-use std;\n-import comm::chan;\n-import comm::send;\n-import comm::port;\n-\n-fn main() {\n-\n-    // Ref.Item.Obj\n-    obj counter(state: @mutable int) {\n-        fn incr() { *state += 1; }\n-        fn get() -> int { ret *state; }\n-    }\n-\n-    let c: counter = counter(@mutable 1);\n-\n-    c.incr();\n-    c.incr();\n-    assert (c.get() == 3);\n-\n-    obj my_obj() {\n-        fn get() -> int { ret 3; }\n-        fn foo() -> int {\n-            let c = self.get();\n-            ret c + 2; // returns 5\n-        }\n-    }\n-\n-    let o = my_obj();\n-    assert (o.foo() == 5);\n-\n-    // Ref.Type.Obj\n-    type taker =\n-        obj {\n-            fn take(int);\n-        };\n-\n-    obj adder(x: @mutable int) {\n-        fn take(y: int) { *x += y; }\n-    }\n-\n-    obj sender(c: chan<int>) {\n-        fn take(z: int) { send(c, copy z); }\n-    }\n-\n-    fn give_ints(t: taker) { t.take(1); t.take(2); t.take(3); }\n-\n-    let p = port();\n-\n-    let t1: taker = adder(@mutable 0);\n-    let t2: taker = sender(chan(p));\n-\n-    give_ints(t1);\n-    give_ints(t2);\n-}\n-"}, {"sha": "a823784e1b0c692ec323c39c7fbe6734e65f0998", "filename": "src/test/run-pass/obj-drop.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fobj-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fobj-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-drop.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,8 +0,0 @@\n-\n-\n-fn main() {\n-    obj handle(i: @int) { }\n-    // This just tests whether the obj leaks its box state members.\n-\n-    let ob = handle(@0xf00f00);\n-}"}, {"sha": "f1f998b376f1aacedf73cba50a12a46c3cbacbbb", "filename": "src/test/run-pass/obj-recursion.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fobj-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fobj-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-recursion.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,19 +0,0 @@\n-\n-\n-type adder =\n-    obj {\n-        fn add();\n-    };\n-\n-obj leaf_adder(x: int) {\n-    fn add() { #debug(\"leaf\"); log(debug, x); }\n-}\n-\n-obj delegate_adder(a: adder) {\n-    fn add() { a.add(); }\n-}\n-\n-fn main() {\n-    let x = delegate_adder(delegate_adder(delegate_adder(leaf_adder(10))));\n-    x.add();\n-}"}, {"sha": "4c1f8d54ced447a9e8e908fb64804210bbf8406d", "filename": "src/test/run-pass/obj-return-polytypes.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,13 +0,0 @@\n-\n-\n-\n-// -*- rust -*-\n-tag clam<T> { signed(int); unsigned(uint); }\n-\n-fn getclam<T>() -> clam<T> { ret signed::<T>(42); }\n-\n-obj impatience<T: copy>() {\n-    fn moreclam() -> clam<T> { be getclam::<T>(); }\n-}\n-\n-fn main() { }"}, {"sha": "cf321594586d35c47b665a6ca250ed86dda1bce8", "filename": "src/test/run-pass/obj-self-2.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fobj-self-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fobj-self-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-self-2.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,12 +0,0 @@\n-\n-\n-fn main() {\n-    obj foo() {\n-        fn m1(i: int) { let i = i + 1; #debug(\"hi!\"); }\n-        fn m2(i: int) { let i = i + 1; self.m1(i); }\n-    }\n-    let a = foo();\n-    let i: int = 0;\n-    a.m1(i);\n-    a.m2(i);\n-}"}, {"sha": "16aa3a609711fcc5bf6184d73ca48f20db559394", "filename": "src/test/run-pass/obj-self-3.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fobj-self-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fobj-self-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-self-3.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,17 +0,0 @@\n-\n-\n-fn main() {\n-    obj foo() {\n-        fn m1(i: int) -> int { let i = i + 1; ret i; }\n-        fn m2(i: int) -> int { ret self.m1(i); }\n-        fn m3(i: int) -> int { let i = i + 1; ret self.m1(i); }\n-    }\n-    let a = foo();\n-    let i: int = 0;\n-    i = a.m1(i);\n-    assert (i == 1);\n-    i = a.m2(i);\n-    assert (i == 2);\n-    i = a.m3(i);\n-    assert (i == 4);\n-}"}, {"sha": "e13a39f099868c33b5c67e7ecc2f5577722db564", "filename": "src/test/run-pass/obj-self-4.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fobj-self-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fobj-self-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-self-4.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,22 +0,0 @@\n-fn main() {\n-    obj foo(mutable i: int) {\n-        fn inc_by(incr: int) -> int { i += incr; ret i; }\n-        fn inc_by_5() -> int { ret self.inc_by(5); }\n-\n-        // A test case showing that issue #324 is resolved.  (It used to\n-        // be that commenting out this (unused!) function produced a\n-        // type error.)\n-        // fn wrapper(int incr) -> int {\n-        //     ret self.inc_by(incr);\n-        // }\n-        fn get() -> int { ret i; }\n-    }\n-    let rs: int;\n-    let o = foo(5);\n-    rs = o.get();\n-    assert (rs == 5);\n-    rs = o.inc_by(3);\n-    assert (rs == 8);\n-    rs = o.get();\n-    assert (rs == 8);\n-}"}, {"sha": "588135c9121aebc28982816565e9b05fb457241f", "filename": "src/test/run-pass/obj-self.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fobj-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fobj-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-self.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,11 +0,0 @@\n-\n-\n-fn main() {\n-    obj foo() {\n-        fn m1() { #debug(\"hi!\"); }\n-        fn m2() { self.m1(); }\n-    }\n-    let a = foo();\n-    a.m1();\n-    a.m2();\n-}"}, {"sha": "5ceab392c2e914c6e0a4aa99e99bcd5faa9eb63d", "filename": "src/test/run-pass/obj-with-vec.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fobj-with-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fobj-with-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-with-vec.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,10 +0,0 @@\n-\n-\n-fn main() {\n-    obj buf(data: [u8]) {\n-        fn get(i: int) -> u8 { ret data[i]; }\n-    }\n-    let b = buf([1 as u8, 2 as u8, 3 as u8]);\n-    log(debug, b.get(1));\n-    assert (b.get(1) == 2 as u8);\n-}"}, {"sha": "5c2315d67d0dcf9680574623812887a988dee969", "filename": "src/test/run-pass/simple-anon-objs.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fsimple-anon-objs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fsimple-anon-objs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-anon-objs.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,29 +0,0 @@\n-use std;\n-\n-fn main() {\n-    obj normal() {\n-        fn foo() -> int { ret 2; }\n-    }\n-    let my_normal_obj = normal();\n-\n-    // Extending an object with a new method\n-    let my_anon_obj =\n-        obj () {\n-            fn bar() -> int { ret 3; }\n-            with\n-            my_normal_obj\n-        };\n-\n-    assert (my_normal_obj.foo() == 2);\n-    assert (my_anon_obj.bar() == 3);\n-\n-    let another_anon_obj =\n-        obj () {\n-            fn baz() -> int { ret 4; }\n-            with\n-            my_anon_obj\n-        };\n-\n-    assert (another_anon_obj.baz() == 4);\n-\n-}"}, {"sha": "fe85e2852ba2c4f42b1498b843fe2a9fc81ab9ae", "filename": "src/test/run-pass/simple-obj.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fsimple-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fsimple-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-obj.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,9 +0,0 @@\n-\n-\n-\n-// -*- rust -*-\n-obj x() {\n-    fn hello() { #debug(\"hello, object world\"); }\n-}\n-\n-fn main() { let mx = x(); mx.hello(); }"}, {"sha": "a9d93917c4be5bb67840f7c2b39a173701de6d94", "filename": "src/test/run-pass/standalone-method.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fstandalone-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fstandalone-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstandalone-method.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,20 +0,0 @@\n-// xfail-test\n-\n-// Test case for issue #435.\n-obj foo(x: int) {\n-    fn add5(n: int) -> int { ret n + x; }\n-}\n-\n-fn add5(n: int) -> int { ret n + 5; }\n-\n-fn main() {\n-    let fiveplusseven = bind add5(7);\n-    assert (add5(7) == 12);\n-    assert (fiveplusseven() == 12);\n-\n-    let my_foo = foo(5);\n-    let fiveplusseven_too = bind my_foo.add5(7);\n-    assert (my_foo.add5(7) == 12);\n-    assert (fiveplusseven_too() == 12);\n-}\n-"}, {"sha": "102a226e2986789f2953ee6d0e60eac8fe65331e", "filename": "src/test/run-pass/stateful-obj.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fstateful-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Fstateful-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstateful-obj.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,19 +0,0 @@\n-\n-\n-\n-// -*- rust -*-\n-obj counter(mutable x: int) {\n-    fn hello() -> int { ret 12345; }\n-    fn incr() { x = x + 1; }\n-    fn get() -> int { ret x; }\n-}\n-\n-fn main() {\n-    let y = counter(0);\n-    assert (y.hello() == 12345);\n-    log(debug, y.get());\n-    y.incr();\n-    y.incr();\n-    log(debug, y.get());\n-    assert (y.get() == 2);\n-}"}, {"sha": "529bb14a9b6072cccd2e2e36d78004f86a5c0467", "filename": "src/test/run-pass/tag-and-generic-obj.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Ftag-and-generic-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24102d50ad2335c1da5c10ddab8996534b2760dc/src%2Ftest%2Frun-pass%2Ftag-and-generic-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-and-generic-obj.rs?ref=24102d50ad2335c1da5c10ddab8996534b2760dc", "patch": "@@ -1,9 +0,0 @@\n-\n-\n-tag colour { red; green; }\n-\n-obj foo<T>() {\n-    fn meth(x: T) { }\n-}\n-\n-fn main() { foo::<colour>().meth(red); }"}, {"sha": "f029dcd61a294179cdf715fafedafb37e6043609", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=d2be5b6c7a20b8b33f61cd0db4a3cbbdd7a5448a", "patch": "@@ -12,7 +12,6 @@ fn main() {\n     test00();\n     // test01();\n     test02();\n-    test03();\n     test04();\n     test05();\n     test06();\n@@ -78,18 +77,6 @@ fn test02() {\n     log(debug, value);\n }\n \n-obj vector(mutable x: int, y: int) {\n-    fn length() -> int { x = x + 2; ret x + y; }\n-}\n-\n-fn test03() {\n-    #debug(\"Creating object ...\");\n-    let v: vector = vector(1, 2);\n-    #debug(\"created object ...\");\n-    let t: vector = v;\n-    log(debug, v.length());\n-}\n-\n fn test04_start() {\n     #debug(\"Started task\");\n     let i: int = 1024 * 1024;"}]}