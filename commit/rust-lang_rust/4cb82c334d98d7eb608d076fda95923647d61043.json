{"sha": "4cb82c334d98d7eb608d076fda95923647d61043", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYjgyYzMzNGQ5OGQ3ZWI2MDhkMDc2ZmRhOTU5MjM2NDdkNjEwNDM=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2020-01-14T16:49:14Z"}, "committer": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2020-01-14T16:49:14Z"}, "message": "More UI friendly labels", "tree": {"sha": "022280d4db4a933ad44d1f80362d41386463346c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/022280d4db4a933ad44d1f80362d41386463346c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cb82c334d98d7eb608d076fda95923647d61043", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb82c334d98d7eb608d076fda95923647d61043", "html_url": "https://github.com/rust-lang/rust/commit/4cb82c334d98d7eb608d076fda95923647d61043", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cb82c334d98d7eb608d076fda95923647d61043/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e406f2bed66cbe13ef6441a3fb84791a3ca09299", "url": "https://api.github.com/repos/rust-lang/rust/commits/e406f2bed66cbe13ef6441a3fb84791a3ca09299", "html_url": "https://github.com/rust-lang/rust/commit/e406f2bed66cbe13ef6441a3fb84791a3ca09299"}], "stats": {"total": 78, "additions": 43, "deletions": 35}, "files": [{"sha": "6d9af390551f504d9afcb7b8cc14b8602243a6a1", "filename": "crates/ra_assists/src/assists/add_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -28,7 +28,7 @@ use crate::{Assist, AssistCtx, AssistId};\n pub(crate) fn add_derive(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let node_start = derive_insertion_offset(&nominal)?;\n-    ctx.add_assist(AssistId(\"add_derive\"), \"add `#[derive]`\", |edit| {\n+    ctx.add_assist(AssistId(\"add_derive\"), \"Add `#[derive]`\", |edit| {\n         let derive_attr = nominal\n             .attrs()\n             .filter_map(|x| x.as_simple_call())"}, {"sha": "b63ca50d0fddd1807080bbf5664092c18c883226", "filename": "crates/ra_assists/src/assists/add_explicit_type.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -47,10 +47,14 @@ pub(crate) fn add_explicit_type(ctx: AssistCtx<impl HirDatabase>) -> Option<Assi\n         return None;\n     }\n \n-    ctx.add_assist(AssistId(\"add_explicit_type\"), \"add explicit type\", |edit| {\n-        edit.target(pat_range);\n-        edit.insert(name_range.end(), format!(\": {}\", ty.display(db)));\n-    })\n+    ctx.add_assist(\n+        AssistId(\"add_explicit_type\"),\n+        format!(\"Insert Explicit Type '{}'\", ty.display(db)),\n+        |edit| {\n+            edit.target(pat_range);\n+            edit.insert(name_range.end(), format!(\": {}\", ty.display(db)));\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "4b326c83738bbe04e3151b231d4c95cf9a8ddf53", "filename": "crates/ra_assists/src/assists/add_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -30,7 +30,7 @@ use crate::{Assist, AssistCtx, AssistId};\n pub(crate) fn add_impl(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let name = nominal.name()?;\n-    ctx.add_assist(AssistId(\"add_impl\"), \"add impl\", |edit| {\n+    ctx.add_assist(AssistId(\"add_impl\"), format!(\"Implement {}\", name.text().as_str()), |edit| {\n         edit.target(nominal.syntax().text_range());\n         let type_params = nominal.type_param_list();\n         let start_offset = nominal.syntax().text_range().end();"}, {"sha": "bf6cfe865adad02bb6cd3a36c7d595c5495a0f2c", "filename": "crates/ra_assists/src/assists/add_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -72,7 +72,7 @@ pub(crate) fn add_import(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         }\n     };\n \n-    ctx.add_assist(AssistId(\"add_import\"), format!(\"import {}\", fmt_segments(&segments)), |edit| {\n+    ctx.add_assist(AssistId(\"add_import\"), format!(\"Import {}\", fmt_segments(&segments)), |edit| {\n         apply_auto_import(&position, &path, &segments, edit.text_edit_builder());\n     })\n }"}, {"sha": "89a1d58b83fbca140f459d1473fc2551eece982d", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -48,7 +48,7 @@ pub(crate) fn add_missing_impl_members(ctx: AssistCtx<impl HirDatabase>) -> Opti\n         ctx,\n         AddMissingImplMembersMode::NoDefaultMethods,\n         \"add_impl_missing_members\",\n-        \"add missing impl members\",\n+        \"Implement Missing Members\",\n     )\n }\n \n@@ -89,7 +89,7 @@ pub(crate) fn add_missing_default_members(ctx: AssistCtx<impl HirDatabase>) -> O\n         ctx,\n         AddMissingImplMembersMode::DefaultMethodsOnly,\n         \"add_impl_default_members\",\n-        \"add impl default members\",\n+        \"Implement Default Members\",\n     )\n }\n "}, {"sha": "9102c2325228436e3c35ceed3d14e0a260db9ac9", "filename": "crates/ra_assists/src/assists/add_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -43,7 +43,7 @@ pub(crate) fn add_new(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     // Return early if we've found an existing new fn\n     let impl_block = find_struct_impl(&ctx, &strukt)?;\n \n-    ctx.add_assist(AssistId(\"add_new\"), \"add new fn\", |edit| {\n+    ctx.add_assist(AssistId(\"add_new\"), \"Add Default Constructor\", |edit| {\n         edit.target(strukt.syntax().text_range());\n \n         let mut buf = String::with_capacity(512);"}, {"sha": "95585d8312ff2df9bcff80e5933609cac3824c58", "filename": "crates/ra_assists/src/assists/apply_demorgan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -39,7 +39,7 @@ pub(crate) fn apply_demorgan(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist>\n     let not_lhs = invert_boolean_expression(&lhs)?;\n     let not_rhs = invert_boolean_expression(&rhs)?;\n \n-    ctx.add_assist(AssistId(\"apply_demorgan\"), \"apply demorgan's law\", |edit| {\n+    ctx.add_assist(AssistId(\"apply_demorgan\"), \"Apply Demorgan's Law\", |edit| {\n         edit.target(op_range);\n         edit.replace(op_range, opposite_op);\n         edit.replace(lhs_range, format!(\"!({}\", not_lhs.syntax().text()));"}, {"sha": "a5127704055923e5a591a1a6fbf6cdd88b4af697", "filename": "crates/ra_assists/src/assists/change_visibility.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -57,7 +57,7 @@ fn add_vis(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         (vis_offset(field.syntax()), ident.text_range())\n     };\n \n-    ctx.add_assist(AssistId(\"change_visibility\"), \"make pub(crate)\", |edit| {\n+    ctx.add_assist(AssistId(\"change_visibility\"), \"Change Visibility to pub(crate)\", |edit| {\n         edit.target(target);\n         edit.insert(offset, \"pub(crate) \");\n         edit.set_cursor(offset);\n@@ -77,14 +77,18 @@ fn vis_offset(node: &SyntaxNode) -> TextUnit {\n \n fn change_vis(ctx: AssistCtx<impl HirDatabase>, vis: ast::Visibility) -> Option<Assist> {\n     if vis.syntax().text() == \"pub\" {\n-        return ctx.add_assist(AssistId(\"change_visibility\"), \"change to pub(crate)\", |edit| {\n-            edit.target(vis.syntax().text_range());\n-            edit.replace(vis.syntax().text_range(), \"pub(crate)\");\n-            edit.set_cursor(vis.syntax().text_range().start())\n-        });\n+        return ctx.add_assist(\n+            AssistId(\"change_visibility\"),\n+            \"Change Visibility to pub(crate)\",\n+            |edit| {\n+                edit.target(vis.syntax().text_range());\n+                edit.replace(vis.syntax().text_range(), \"pub(crate)\");\n+                edit.set_cursor(vis.syntax().text_range().start())\n+            },\n+        );\n     }\n     if vis.syntax().text() == \"pub(crate)\" {\n-        return ctx.add_assist(AssistId(\"change_visibility\"), \"change to pub\", |edit| {\n+        return ctx.add_assist(AssistId(\"change_visibility\"), \"Change Visibility to pub\", |edit| {\n             edit.target(vis.syntax().text_range());\n             edit.replace(vis.syntax().text_range(), \"pub\");\n             edit.set_cursor(vis.syntax().text_range().start());"}, {"sha": "6b6319959fde4df597df1897496713e0332735bd", "filename": "crates/ra_assists/src/assists/early_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -95,7 +95,7 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Opt\n     then_block.syntax().last_child_or_token().filter(|t| t.kind() == R_CURLY)?;\n     let cursor_position = ctx.frange.range.start();\n \n-    ctx.add_assist(AssistId(\"convert_to_guarded_return\"), \"convert to guarded return\", |edit| {\n+    ctx.add_assist(AssistId(\"convert_to_guarded_return\"), \"Convert to Guarded Return\", |edit| {\n         let if_indent_level = IndentLevel::from_node(&if_expr.syntax());\n         let new_block = match if_let_pat {\n             None => {"}, {"sha": "90ddfc3d0b38fa297c95790d058f0fdf9abe1a27", "filename": "crates/ra_assists/src/assists/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -57,7 +57,7 @@ pub(crate) fn fill_match_arms(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n \n     let db = ctx.db;\n \n-    ctx.add_assist(AssistId(\"fill_match_arms\"), \"fill match arms\", |edit| {\n+    ctx.add_assist(AssistId(\"fill_match_arms\"), \"Fill Match Arms\", |edit| {\n         let indent_level = IndentLevel::from_node(match_arm_list.syntax());\n \n         let new_arm_list = {"}, {"sha": "808248d884a051fc9db5903a028c86119f88d7f4", "filename": "crates/ra_assists/src/assists/flip_binexpr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -34,7 +34,7 @@ pub(crate) fn flip_binexpr(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         return None;\n     }\n \n-    ctx.add_assist(AssistId(\"flip_binexpr\"), \"flip binary expression\", |edit| {\n+    ctx.add_assist(AssistId(\"flip_binexpr\"), \"Flip Binary Expression\", |edit| {\n         edit.target(op_range);\n         if let FlipAction::FlipAndReplaceOp(new_op) = action {\n             edit.replace(op_range, new_op);"}, {"sha": "b274681b3dda2a644fb13917da6ec8aa5d521312", "filename": "crates/ra_assists/src/assists/flip_comma.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn flip_comma(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         return None;\n     }\n \n-    ctx.add_assist(AssistId(\"flip_comma\"), \"flip comma\", |edit| {\n+    ctx.add_assist(AssistId(\"flip_comma\"), \"Flip Comma\", |edit| {\n         edit.target(comma.text_range());\n         edit.replace(prev.text_range(), next.to_string());\n         edit.replace(next.text_range(), prev.to_string());"}, {"sha": "b691c9509f9477eb192b947bd852028a7cd7934d", "filename": "crates/ra_assists/src/assists/flip_trait_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_trait_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_trait_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_trait_bound.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -33,7 +33,7 @@ pub(crate) fn flip_trait_bound(ctx: AssistCtx<impl HirDatabase>) -> Option<Assis\n         non_trivia_sibling(plus.clone().into(), Direction::Next)?,\n     );\n \n-    ctx.add_assist(AssistId(\"flip_trait_bound\"), \"flip trait bound\", |edit| {\n+    ctx.add_assist(AssistId(\"flip_trait_bound\"), \"Flip Trait Bounds\", |edit| {\n         edit.target(plus.text_range());\n         edit.replace(before.text_range(), after.to_string());\n         edit.replace(after.text_range(), before.to_string());"}, {"sha": "754ada70775025cfc31c661d410be5c63eb9d955", "filename": "crates/ra_assists/src/assists/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -93,7 +93,7 @@ pub(crate) fn inline_local_varialbe(ctx: AssistCtx<impl HirDatabase>) -> Option<\n \n     ctx.add_assist(\n         AssistId(\"inline_local_variable\"),\n-        \"inline local variable\",\n+        \"Inline Variable\",\n         move |edit: &mut AssistBuilder| {\n             edit.delete(delete_range);\n             for (desc, should_wrap) in refs.iter().zip(wrap_in_parens) {"}, {"sha": "7ac79d9103a9bebdfdf2370a82fa158045a3a2e2", "filename": "crates/ra_assists/src/assists/introduce_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -43,7 +43,7 @@ pub(crate) fn introduce_variable(ctx: AssistCtx<impl HirDatabase>) -> Option<Ass\n     if indent.kind() != WHITESPACE {\n         return None;\n     }\n-    ctx.add_assist(AssistId(\"introduce_variable\"), \"introduce variable\", move |edit| {\n+    ctx.add_assist(AssistId(\"introduce_variable\"), \"Extract into Variable\", move |edit| {\n         let mut buf = String::new();\n \n         let cursor_offset = if wrap_in_block {"}, {"sha": "05bd2b037823391b053a40c9ef3f70877730e6f9", "filename": "crates/ra_assists/src/assists/invert_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -41,7 +41,7 @@ pub(crate) fn invert_if(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         let else_node = else_block.syntax();\n         let else_range = else_node.text_range();\n         let then_range = then_node.text_range();\n-        return ctx.add_assist(AssistId(\"invert_if\"), \"invert if branches\", |edit| {\n+        return ctx.add_assist(AssistId(\"invert_if\"), \"Invert If\", |edit| {\n             edit.target(if_range);\n             edit.replace(cond_range, flip_cond.syntax().text());\n             edit.replace(else_range, then_node.text());"}, {"sha": "6406e1febe89657222b5e8255f77d61f249f855e", "filename": "crates/ra_assists/src/assists/merge_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -52,7 +52,7 @@ pub(crate) fn merge_match_arms(ctx: AssistCtx<impl HirDatabase>) -> Option<Assis\n \n     let cursor_to_end = current_arm.syntax().text_range().end() - ctx.frange.range.start();\n \n-    ctx.add_assist(AssistId(\"merge_match_arms\"), \"merge match arms\", |edit| {\n+    ctx.add_assist(AssistId(\"merge_match_arms\"), \"Merge Match Arms\", |edit| {\n         fn contains_placeholder(a: &MatchArm) -> bool {\n             a.pats().any(|x| match x {\n                 ra_syntax::ast::Pat::PlaceholderPat(..) => true,"}, {"sha": "6e6c1d67d7136d01d5441780d73c68cab65f6976", "filename": "crates/ra_assists/src/assists/move_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -46,7 +46,7 @@ pub(crate) fn move_bounds_to_where_clause(ctx: AssistCtx<impl HirDatabase>) -> O\n         _ => return None,\n     };\n \n-    ctx.add_assist(AssistId(\"move_bounds_to_where_clause\"), \"move_bounds_to_where_clause\", |edit| {\n+    ctx.add_assist(AssistId(\"move_bounds_to_where_clause\"), \"Move to Where Clause\", |edit| {\n         let new_params = type_param_list\n             .type_params()\n             .filter(|it| it.type_bound_list().is_some())"}, {"sha": "59ba9e3f38963ab50e390dff113c31cb52af36a4", "filename": "crates/ra_assists/src/assists/move_guard.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -41,7 +41,7 @@ pub(crate) fn move_guard_to_arm_body(ctx: AssistCtx<impl HirDatabase>) -> Option\n     let arm_expr = match_arm.expr()?;\n     let buf = format!(\"if {} {{ {} }}\", guard_conditions.syntax().text(), arm_expr.syntax().text());\n \n-    ctx.add_assist(AssistId(\"move_guard_to_arm_body\"), \"move guard to arm body\", |edit| {\n+    ctx.add_assist(AssistId(\"move_guard_to_arm_body\"), \"Move Guard to Arm Body\", |edit| {\n         edit.target(guard.syntax().text_range());\n         let offseting_amount = match space_before_guard.and_then(|it| it.into_token()) {\n             Some(tok) => {"}, {"sha": "3583b636a97c23bc653b65c5e972bf3077e305ae", "filename": "crates/ra_assists/src/assists/raw_string.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -25,7 +25,7 @@ use crate::{Assist, AssistCtx, AssistId};\n pub(crate) fn make_raw_string(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(STRING).and_then(ast::String::cast)?;\n     let value = token.value()?;\n-    ctx.add_assist(AssistId(\"make_raw_string\"), \"make raw string\", |edit| {\n+    ctx.add_assist(AssistId(\"make_raw_string\"), \"Rewrite as Raw String\", |edit| {\n         edit.target(token.syntax().text_range());\n         let max_hash_streak = count_hashes(&value);\n         let mut hashes = String::with_capacity(max_hash_streak + 1);\n@@ -54,7 +54,7 @@ pub(crate) fn make_raw_string(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n pub(crate) fn make_usual_string(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(RAW_STRING).and_then(ast::RawString::cast)?;\n     let value = token.value()?;\n-    ctx.add_assist(AssistId(\"make_usual_string\"), \"make usual string\", |edit| {\n+    ctx.add_assist(AssistId(\"make_usual_string\"), \"Rewrite as Regular String\", |edit| {\n         edit.target(token.syntax().text_range());\n         // parse inside string to escape `\"`\n         let escaped = value.escape_default().to_string();\n@@ -79,7 +79,7 @@ pub(crate) fn make_usual_string(ctx: AssistCtx<impl HirDatabase>) -> Option<Assi\n // ```\n pub(crate) fn add_hash(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(RAW_STRING)?;\n-    ctx.add_assist(AssistId(\"add_hash\"), \"add hash to raw string\", |edit| {\n+    ctx.add_assist(AssistId(\"add_hash\"), \"Add # to Raw String\", |edit| {\n         edit.target(token.text_range());\n         edit.insert(token.text_range().start() + TextUnit::of_char('r'), \"#\");\n         edit.insert(token.text_range().end(), \"#\");"}, {"sha": "cf211ab840ac672f0a9b7ea19fe49f941a0e3486", "filename": "crates/ra_assists/src/assists/remove_dbg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -58,7 +58,7 @@ pub(crate) fn remove_dbg(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         text.slice(without_parens).to_string()\n     };\n \n-    ctx.add_assist(AssistId(\"remove_dbg\"), \"remove dbg!()\", |edit| {\n+    ctx.add_assist(AssistId(\"remove_dbg\"), \"Remove dbg!()\", |edit| {\n         edit.target(macro_call.syntax().text_range());\n         edit.replace(macro_range, macro_content);\n         edit.set_cursor(cursor_pos);"}, {"sha": "dacbf8758c167b82e4a579ab5ef2e6b9f7a9614d", "filename": "crates/ra_assists/src/assists/replace_if_let_with_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -42,7 +42,7 @@ pub(crate) fn replace_if_let_with_match(ctx: AssistCtx<impl HirDatabase>) -> Opt\n         ast::ElseBranch::IfExpr(_) => return None,\n     };\n \n-    ctx.add_assist(AssistId(\"replace_if_let_with_match\"), \"replace with match\", |edit| {\n+    ctx.add_assist(AssistId(\"replace_if_let_with_match\"), \"Replace with Match\", |edit| {\n         let match_expr = build_match_expr(expr, pat, then_block, else_block);\n         edit.target(if_expr.syntax().text_range());\n         edit.replace_node_and_indent(if_expr.syntax(), match_expr);"}, {"sha": "d36df069acd62ce39ef1e7e29697aead07b6f40a", "filename": "crates/ra_assists/src/assists/split_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb82c334d98d7eb608d076fda95923647d61043/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs?ref=4cb82c334d98d7eb608d076fda95923647d61043", "patch": "@@ -32,7 +32,7 @@ pub(crate) fn split_import(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         None => top_path.syntax().text_range().end(),\n     };\n \n-    ctx.add_assist(AssistId(\"split_import\"), \"split import\", |edit| {\n+    ctx.add_assist(AssistId(\"split_import\"), \"Split Import\", |edit| {\n         edit.target(colon_colon.text_range());\n         edit.insert(l_curly, \"{\");\n         edit.insert(r_curly, \"}\");"}]}