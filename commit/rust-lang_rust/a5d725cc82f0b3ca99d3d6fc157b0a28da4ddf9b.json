{"sha": "a5d725cc82f0b3ca99d3d6fc157b0a28da4ddf9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZDcyNWNjODJmMGIzY2E5OWQzZDZmYzE1N2IwYTI4ZGE0ZGRmOWI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-30T20:18:22Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-30T20:18:22Z"}, "message": "cleanup: Refactor away `DtorKind`", "tree": {"sha": "f02c3ea78ea22570271d3b7e34ab5906deadce48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f02c3ea78ea22570271d3b7e34ab5906deadce48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5d725cc82f0b3ca99d3d6fc157b0a28da4ddf9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d725cc82f0b3ca99d3d6fc157b0a28da4ddf9b", "html_url": "https://github.com/rust-lang/rust/commit/a5d725cc82f0b3ca99d3d6fc157b0a28da4ddf9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5d725cc82f0b3ca99d3d6fc157b0a28da4ddf9b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0", "html_url": "https://github.com/rust-lang/rust/commit/4a4f8ff0a3eeb0855f03ad88c2f11f12761041f0"}], "stats": {"total": 27, "additions": 2, "deletions": 25}, "files": [{"sha": "5ab45e746e7f25e67763af997ff915812cf60631", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a5d725cc82f0b3ca99d3d6fc157b0a28da4ddf9b/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d725cc82f0b3ca99d3d6fc157b0a28da4ddf9b/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a5d725cc82f0b3ca99d3d6fc157b0a28da4ddf9b", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n pub use self::Variance::*;\n-pub use self::DtorKind::*;\n pub use self::AssociatedItemContainer::*;\n pub use self::BorrowKind::*;\n pub use self::IntVarValue::*;\n@@ -120,21 +119,6 @@ pub struct Resolutions {\n     pub maybe_unused_trait_imports: NodeSet,\n }\n \n-#[derive(Copy, Clone)]\n-pub enum DtorKind {\n-    NoDtor,\n-    TraitDtor\n-}\n-\n-impl DtorKind {\n-    pub fn is_present(&self) -> bool {\n-        match *self {\n-            TraitDtor => true,\n-            _ => false\n-        }\n-    }\n-}\n-\n #[derive(Clone, Copy, PartialEq, Eq, Debug)]\n pub enum AssociatedItemContainer {\n     TraitContainer(DefId),\n@@ -1480,7 +1464,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n \n     /// Returns whether this type has a destructor.\n     pub fn has_dtor(&self) -> bool {\n-        self.dtor_kind().is_present()\n+        self.destructor.get().is_some()\n     }\n \n     /// Asserts this is a struct and returns the struct's unique\n@@ -1543,13 +1527,6 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         self.destructor.set(Some(dtor));\n     }\n \n-    pub fn dtor_kind(&self) -> DtorKind {\n-        match self.destructor.get() {\n-            Some(_) => TraitDtor,\n-            None => NoDtor,\n-        }\n-    }\n-\n     /// Returns a simpler type such that `Self: Sized` if and only\n     /// if that type is Sized, or `TyErr` if this type is recursive.\n     ///"}, {"sha": "1415ca6029f530f885a8f469243db2aaf4dc6dac", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5d725cc82f0b3ca99d3d6fc157b0a28da4ddf9b/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d725cc82f0b3ca99d3d6fc157b0a28da4ddf9b/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=a5d725cc82f0b3ca99d3d6fc157b0a28da4ddf9b", "patch": "@@ -235,7 +235,7 @@ pub fn implement_drop_glue<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, g: DropGlueKi\n             bcx.call(dtor, &[ptr.llval], None);\n             bcx\n         }\n-        ty::TyAdt(def, ..) if def.dtor_kind().is_present() && !skip_dtor => {\n+        ty::TyAdt(def, ..) if def.has_dtor() && !skip_dtor => {\n             let shallow_drop = def.is_union();\n             let tcx = bcx.tcx();\n "}]}