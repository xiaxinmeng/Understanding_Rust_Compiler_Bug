{"sha": "660d993c642a2f88b84d5e1f0d8602b8136b9b4e", "node_id": "C_kwDOAAsO6NoAKDY2MGQ5OTNjNjQyYTJmODhiODRkNWUxZjBkODYwMmI4MTM2YjliNGU", "commit": {"author": {"name": "Benjamin Lamowski", "email": "benjamin.lamowski@kernkonzept.com", "date": "2021-05-31T12:34:23Z"}, "committer": {"name": "Benjamin Lamowski", "email": "benjamin.lamowski@kernkonzept.com", "date": "2022-01-21T15:50:33Z"}, "message": "adapt L4Bender implementation\n\n- Fix style errors.\n\n- L4-bender does not yet support dynamic linking.\n\n- Stack unwinding is not yet supported for x86_64-unknown-l4re-uclibc.\n  For now, just abort on panics.\n\n- Use GNU-style linker options where possible. As suggested by review:\n    - Use standard GNU-style ld syntax for relro flags.\n    - Use standard GNU-style optimization flags and logic.\n    - Use standard GNU-style ld syntax for --subsystem.\n\n- Don't read environment variables in L4Bender linker. Thanks to\n  CARGO_ENCODED_RUSTFLAGS introduced in #9601, l4-bender's arguments can\n  now be passed from the L4Re build system without resorting to custom\n  parsing of environment variables.", "tree": {"sha": "a6b843d5b483424e2838cb4b52a2e3116559bf29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6b843d5b483424e2838cb4b52a2e3116559bf29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/660d993c642a2f88b84d5e1f0d8602b8136b9b4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/660d993c642a2f88b84d5e1f0d8602b8136b9b4e", "html_url": "https://github.com/rust-lang/rust/commit/660d993c642a2f88b84d5e1f0d8602b8136b9b4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/660d993c642a2f88b84d5e1f0d8602b8136b9b4e/comments", "author": {"login": "atopia", "id": 1710873, "node_id": "MDQ6VXNlcjE3MTA4NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1710873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atopia", "html_url": "https://github.com/atopia", "followers_url": "https://api.github.com/users/atopia/followers", "following_url": "https://api.github.com/users/atopia/following{/other_user}", "gists_url": "https://api.github.com/users/atopia/gists{/gist_id}", "starred_url": "https://api.github.com/users/atopia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atopia/subscriptions", "organizations_url": "https://api.github.com/users/atopia/orgs", "repos_url": "https://api.github.com/users/atopia/repos", "events_url": "https://api.github.com/users/atopia/events{/privacy}", "received_events_url": "https://api.github.com/users/atopia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "atopia", "id": 1710873, "node_id": "MDQ6VXNlcjE3MTA4NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1710873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atopia", "html_url": "https://github.com/atopia", "followers_url": "https://api.github.com/users/atopia/followers", "following_url": "https://api.github.com/users/atopia/following{/other_user}", "gists_url": "https://api.github.com/users/atopia/gists{/gist_id}", "starred_url": "https://api.github.com/users/atopia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atopia/subscriptions", "organizations_url": "https://api.github.com/users/atopia/orgs", "repos_url": "https://api.github.com/users/atopia/repos", "events_url": "https://api.github.com/users/atopia/events{/privacy}", "received_events_url": "https://api.github.com/users/atopia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d98428711e6fe1b2a7f6d963d4b337beaa3dc285", "url": "https://api.github.com/repos/rust-lang/rust/commits/d98428711e6fe1b2a7f6d963d4b337beaa3dc285", "html_url": "https://github.com/rust-lang/rust/commit/d98428711e6fe1b2a7f6d963d4b337beaa3dc285"}], "stats": {"total": 163, "additions": 74, "deletions": 89}, "files": [{"sha": "3fb56f42b8cca9600befa67d5de5bc4f06f61f21", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 62, "deletions": 80, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/660d993c642a2f88b84d5e1f0d8602b8136b9b4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660d993c642a2f88b84d5e1f0d8602b8136b9b4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=660d993c642a2f88b84d5e1f0d8602b8136b9b4e", "patch": "@@ -3,7 +3,6 @@ use super::command::Command;\n use super::symbol_export;\n use rustc_span::symbol::sym;\n \n-use std::env;\n use std::ffi::{OsStr, OsString};\n use std::fs::{self, File};\n use std::io::prelude::*;\n@@ -150,9 +149,7 @@ pub fn get_linker<'a>(\n \n         LinkerFlavor::BpfLinker => Box::new(BpfLinker { cmd, sess }) as Box<dyn Linker>,\n \n-        LinkerFlavor::L4Bender => {\n-                Box::new(L4Bender::new(cmd, sess)) as Box<dyn Linker>\n-        },\n+        LinkerFlavor::L4Bender => Box::new(L4Bender::new(cmd, sess)) as Box<dyn Linker>,\n     }\n }\n \n@@ -1367,10 +1364,10 @@ pub struct L4Bender<'a> {\n }\n \n impl<'a> Linker for L4Bender<'a> {\n-    fn link_dylib(&mut self, _lib: Symbol) {\n-        panic!(\"dylibs not supported yet\")\n+    fn link_dylib(&mut self, _lib: Symbol, _verbatim: bool, _as_needed: bool) {\n+        bug!(\"dylibs are not supported on L4Re\");\n     }\n-    fn link_staticlib(&mut self, lib: Symbol) {\n+    fn link_staticlib(&mut self, lib: Symbol, _verbatim: bool) {\n         self.hint_static();\n         self.cmd.arg(format!(\"-PC{}\", lib));\n     }\n@@ -1382,36 +1379,44 @@ impl<'a> Linker for L4Bender<'a> {\n         self.cmd.arg(\"-L\").arg(path);\n     }\n     fn framework_path(&mut self, _: &Path) {\n-        bug!(\"Frameworks are not supported on L4Re!\");\n-    }\n-    fn output_filename(&mut self, path: &Path) { self.cmd.arg(\"-o\").arg(path); }\n-    fn add_object(&mut self, path: &Path) { self.cmd.arg(path); }\n-    // not sure about pie on L4Re\n-    fn position_independent_executable(&mut self) { }\n-    fn no_position_independent_executable(&mut self) { }\n-    fn full_relro(&mut self) { self.cmd.arg(\"-z,relro,-z,now\"); }\n-    fn partial_relro(&mut self) { self.cmd.arg(\"-z,relro\"); }\n-    fn no_relro(&mut self) { self.cmd.arg(\"-z,norelro\"); }\n-    fn build_static_executable(&mut self) { self.cmd.arg(\"-static\"); }\n+        bug!(\"frameworks are not supported on L4Re\");\n+    }\n+    fn output_filename(&mut self, path: &Path) {\n+        self.cmd.arg(\"-o\").arg(path);\n+    }\n+\n+    fn add_object(&mut self, path: &Path) {\n+        self.cmd.arg(path);\n+    }\n+\n+    fn full_relro(&mut self) {\n+        self.cmd.arg(\"-zrelro\");\n+        self.cmd.arg(\"-znow\");\n+    }\n+\n+    fn partial_relro(&mut self) {\n+        self.cmd.arg(\"-zrelro\");\n+    }\n+\n+    fn no_relro(&mut self) {\n+        self.cmd.arg(\"-znorelro\");\n+    }\n+\n     fn cmd(&mut self) -> &mut Command {\n         &mut self.cmd\n     }\n \n+    fn set_output_kind(&mut self, _output_kind: LinkOutputKind, _out_filename: &Path) {}\n+\n     fn link_rust_dylib(&mut self, _: Symbol, _: &Path) {\n         panic!(\"Rust dylibs not supported\");\n     }\n \n-    fn link_framework(&mut self, _: Symbol) {\n-        bug!(\"Frameworks not supported on L4Re.\");\n+    fn link_framework(&mut self, _framework: Symbol, _as_needed: bool) {\n+        bug!(\"frameworks not supported on L4Re\");\n     }\n \n-    // Here we explicitly ask that the entire archive is included into the\n-    // result artifact. For more details see #15460, but the gist is that\n-    // the linker will strip away any unused objects in the archive if we\n-    // don't otherwise explicitly reference them. This can occur for\n-    // libraries which are just providing bindings, libraries with generic\n-    // functions, etc.\n-    fn link_whole_staticlib(&mut self, lib: Symbol, _: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, lib: Symbol, _verbatim: bool, _search_path: &[PathBuf]) {\n         self.hint_static();\n         self.cmd.arg(\"--whole-archive\").arg(format!(\"-l{}\", lib));\n         self.cmd.arg(\"--no-whole-archive\");\n@@ -1428,17 +1433,28 @@ impl<'a> Linker for L4Bender<'a> {\n         }\n     }\n \n+    fn no_gc_sections(&mut self) {\n+        self.cmd.arg(\"--no-gc-sections\");\n+    }\n+\n     fn optimize(&mut self) {\n-        self.cmd.arg(\"-O2\");\n+        // GNU-style linkers support optimization with -O. GNU ld doesn't\n+        // need a numeric argument, but other linkers do.\n+        if self.sess.opts.optimize == config::OptLevel::Default\n+            || self.sess.opts.optimize == config::OptLevel::Aggressive\n+        {\n+            self.cmd.arg(\"-O1\");\n+        }\n     }\n \n-    fn pgo_gen(&mut self) { }\n+    fn pgo_gen(&mut self) {}\n \n     fn debuginfo(&mut self, strip: Strip) {\n         match strip {\n             Strip::None => {}\n             Strip::Debuginfo => {\n-                self.cmd().arg(\"--strip-debug\"); }\n+                self.cmd().arg(\"--strip-debug\");\n+            }\n             Strip::Symbols => {\n                 self.cmd().arg(\"--strip-all\");\n             }\n@@ -1449,72 +1465,38 @@ impl<'a> Linker for L4Bender<'a> {\n         self.cmd.arg(\"-nostdlib\");\n     }\n \n-    fn build_dylib(&mut self, _: &Path) {\n-        bug!(\"not implemented\");\n-    }\n-\n-    fn export_symbols(&mut self, _: &Path, _: CrateType) {\n+    fn export_symbols(&mut self, _: &Path, _: CrateType, _: &[String]) {\n         // ToDo, not implemented, copy from GCC\n+        self.sess.warn(\"exporting symbols not implemented yet for L4Bender\");\n         return;\n     }\n \n     fn subsystem(&mut self, subsystem: &str) {\n-        self.cmd.arg(&format!(\"--subsystem,{}\", subsystem));\n+        self.cmd.arg(&format!(\"--subsystem {}\", subsystem));\n     }\n \n-    fn finalize(&mut self) {\n+    fn reset_per_library_state(&mut self) {\n         self.hint_static(); // Reset to default before returning the composed command line.\n     }\n \n-    fn group_start(&mut self) { self.cmd.arg(\"--start-group\"); }\n-    fn group_end(&mut self) { self.cmd.arg(\"--end-group\"); }\n-    fn linker_plugin_lto(&mut self) {\n-        // do nothing\n-    }\n-    fn control_flow_guard(&mut self) {\n-        self.sess.warn(\"Windows Control Flow Guard is not supported by this linker.\");\n+    fn group_start(&mut self) {\n+        self.cmd.arg(\"--start-group\");\n     }\n \n-    fn no_crt_objects(&mut self) { }\n-}\n+    fn group_end(&mut self) {\n+        self.cmd.arg(\"--end-group\");\n+    }\n \n-impl<'a> L4Bender<'a> {\n-    pub fn new(mut cmd: Command, sess: &'a Session) -> L4Bender<'a> {\n-        if let Ok(l4bender_args) = env::var(\"L4_BENDER_ARGS\") {\n-            L4Bender::split_cmd_args(&mut cmd, &l4bender_args);\n-        }\n+    fn linker_plugin_lto(&mut self) {}\n \n-        cmd.arg(\"--\"); // separate direct l4-bender args from linker args\n+    fn control_flow_guard(&mut self) {}\n \n-        L4Bender {\n-            cmd: cmd,\n-            sess: sess,\n-            hinted_static: false,\n-        }\n-    }\n+    fn no_crt_objects(&mut self) {}\n+}\n \n-    /// This parses a shell-escaped string and unquotes the arguments. It doesn't attempt to\n-    /// completely understand shell, but should instead allow passing arguments like\n-    /// `-Dlinker=\"ld -m x86_64\"`, and a copy without quotes, but spaces preserved, is added as an\n-    /// argument to the given Command. This means that constructs as \\\" are not understood, so\n-    /// quote wisely.\n-    fn split_cmd_args(cmd: &mut Command, shell_args: &str) {\n-        let mut arg = String::new();\n-        let mut quoted = false;\n-        for character in shell_args.chars() {\n-            match character {\n-                ' ' if !quoted => {\n-                    cmd.arg(&arg);\n-                    arg.clear();\n-                },\n-                '\"' | '\\'' => quoted = !quoted,\n-                _ => arg.push(character),\n-            };\n-        }\n-        if arg.len() > 0 {\n-            cmd.arg(&arg);\n-            arg.clear();\n-        }\n+impl<'a> L4Bender<'a> {\n+    pub fn new(cmd: Command, sess: &'a Session) -> L4Bender<'a> {\n+        L4Bender { cmd: cmd, sess: sess, hinted_static: false }\n     }\n \n     fn hint_static(&mut self) {"}, {"sha": "9e7973f63a9709b0d707990efe4520fd066d4e58", "filename": "compiler/rustc_target/src/spec/l4re_base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/660d993c642a2f88b84d5e1f0d8602b8136b9b4e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660d993c642a2f88b84d5e1f0d8602b8136b9b4e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs?ref=660d993c642a2f88b84d5e1f0d8602b8136b9b4e", "patch": "@@ -1,16 +1,16 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, PanicStrategy, TargetOptions};\n+use crate::spec::{LinkerFlavor, PanicStrategy, TargetOptions};\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"l4re\".to_string(),\n         env: \"uclibc\".to_string(),\n-        linker_flavor: LinkerFlavor::Ld,\n+        linker_flavor: LinkerFlavor::L4Bender,\n         executables: true,\n         panic_strategy: PanicStrategy::Abort,\n         linker: Some(\"l4-bender\".to_string()),\n-        pre_link_args: args,\n-        os_family: Some(\"unix\".to_string()),\n+        linker_is_gnu: false,\n+        families: vec![\"unix\".to_string()],\n         ..Default::default()\n     }\n }"}, {"sha": "64c7c1c5f6fbea3759f58b47f080e7a4cc5de61f", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_l4re_uclibc.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/660d993c642a2f88b84d5e1f0d8602b8136b9b4e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660d993c642a2f88b84d5e1f0d8602b8136b9b4e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs?ref=660d993c642a2f88b84d5e1f0d8602b8136b9b4e", "patch": "@@ -1,20 +1,19 @@\n-use crate::spec::Target;\n+use crate::spec::{PanicStrategy, Target};\n \n pub fn target() -> Target {\n     let mut base = super::l4re_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n+    base.crt_static_allows_dylibs = false;\n+    base.dynamic_linking = false;\n+    base.panic_strategy = PanicStrategy::Abort;\n \n     Target {\n         llvm_target: \"x86_64-unknown-l4re-uclibc\".to_string(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"l4re\".to_string(),\n-        target_env: \"uclibc\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::L4Bender,\n         options: base,\n     }\n }"}, {"sha": "7f05c82ac284bdfc9c279c8ff0f4a221a3235464", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/660d993c642a2f88b84d5e1f0d8602b8136b9b4e/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660d993c642a2f88b84d5e1f0d8602b8136b9b4e/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=660d993c642a2f88b84d5e1f0d8602b8136b9b4e", "patch": "@@ -39,6 +39,10 @@ cfg_if::cfg_if! {\n     } else if #[cfg(target_os = \"hermit\")] {\n         #[path = \"hermit.rs\"]\n         mod real_imp;\n+    } else if #[cfg(target_os = \"l4re\")] {\n+        // L4Re is unix family but does not yet support unwinding.\n+        #[path = \"dummy.rs\"]\n+        mod real_imp;\n     } else if #[cfg(target_env = \"msvc\")] {\n         #[path = \"seh.rs\"]\n         mod real_imp;"}]}