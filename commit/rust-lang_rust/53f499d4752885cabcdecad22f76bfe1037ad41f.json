{"sha": "53f499d4752885cabcdecad22f76bfe1037ad41f", "node_id": "C_kwDOAAsO6NoAKDUzZjQ5OWQ0NzUyODg1Y2FiY2RlY2FkMjJmNzZiZmUxMDM3YWQ0MWY", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-14T00:05:12Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-14T00:40:06Z"}, "message": "rustdoc-search: use ES6 Map for `Result` instead of Object", "tree": {"sha": "81eaa0ac414c00a2a6616307f97bc35e735741ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81eaa0ac414c00a2a6616307f97bc35e735741ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53f499d4752885cabcdecad22f76bfe1037ad41f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53f499d4752885cabcdecad22f76bfe1037ad41f", "html_url": "https://github.com/rust-lang/rust/commit/53f499d4752885cabcdecad22f76bfe1037ad41f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53f499d4752885cabcdecad22f76bfe1037ad41f/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8642c96a33bfc7470af01aabd1f9ad238178b8c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8642c96a33bfc7470af01aabd1f9ad238178b8c4", "html_url": "https://github.com/rust-lang/rust/commit/8642c96a33bfc7470af01aabd1f9ad238178b8c4"}], "stats": {"total": 61, "additions": 40, "deletions": 21}, "files": [{"sha": "4c81a0979c1a7f6a7c50b007a3c3d1ee4fc1f194", "filename": "src/librustdoc/html/static/js/externs.js", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/53f499d4752885cabcdecad22f76bfe1037ad41f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js", "raw_url": "https://github.com/rust-lang/rust/raw/53f499d4752885cabcdecad22f76bfe1037ad41f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js?ref=53f499d4752885cabcdecad22f76bfe1037ad41f", "patch": "@@ -65,6 +65,11 @@ let Row;\n  */\n let ResultsTable;\n \n+/**\n+ * @typedef {Map<String, ResultObject>}\n+ */\n+let Results;\n+\n /**\n  * @typedef {{\n  *     desc: string,\n@@ -80,7 +85,7 @@ let ResultsTable;\n  *     ty: number,\n  * }}\n  */\n-let Results;\n+let ResultObject;\n \n /**\n  * A pair of [inputs, outputs], or 0 for null. This is stored in the search index."}, {"sha": "40cdc55bbc3becc8f3a203e86ba8209627f044c1", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/53f499d4752885cabcdecad22f76bfe1037ad41f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/53f499d4752885cabcdecad22f76bfe1037ad41f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=53f499d4752885cabcdecad22f76bfe1037ad41f", "patch": "@@ -903,8 +903,16 @@ function initSearch(rawSearchIndex) {\n      * @return {ResultsTable}\n      */\n     function execQuery(parsedQuery, searchWords, filterCrates, currentCrate) {\n-        const results_others = {}, results_in_args = {}, results_returned = {};\n+        const results_others = new Map(), results_in_args = new Map(),\n+            results_returned = new Map();\n \n+        /**\n+         * Add extra data to result objects, and filter items that have been\n+         * marked for removal.\n+         *\n+         * @param {[ResultObject]} results\n+         * @returns {[ResultObject]}\n+         */\n         function transformResults(results) {\n             const duplicates = new Set();\n             const out = [];\n@@ -934,24 +942,30 @@ function initSearch(rawSearchIndex) {\n             return out;\n         }\n \n+        /**\n+         * This function takes a result map, and sorts it by various criteria, including edit\n+         * distance, substring match, and the crate it comes from.\n+         *\n+         * @param {Results} results\n+         * @param {boolean} isType\n+         * @param {string} preferredCrate\n+         * @returns {[ResultObject]}\n+         */\n         function sortResults(results, isType, preferredCrate) {\n-            const userQuery = parsedQuery.userQuery;\n-            const ar = [];\n-            for (const entry in results) {\n-                if (hasOwnPropertyRustdoc(results, entry)) {\n-                    const result = results[entry];\n-                    result.word = searchWords[result.id];\n-                    result.item = searchIndex[result.id] || {};\n-                    ar.push(result);\n-                }\n-            }\n-            results = ar;\n             // if there are no results then return to default and fail\n-            if (results.length === 0) {\n+            if (results.size === 0) {\n                 return [];\n             }\n \n-            results.sort((aaa, bbb) => {\n+            const userQuery = parsedQuery.userQuery;\n+            const result_list = [];\n+            for (const result of results.values()) {\n+                result.word = searchWords[result.id];\n+                result.item = searchIndex[result.id] || {};\n+                result_list.push(result);\n+            }\n+\n+            result_list.sort((aaa, bbb) => {\n                 let a, b;\n \n                 // sort by exact match with regard to the last word (mismatch goes later)\n@@ -1060,7 +1074,7 @@ function initSearch(rawSearchIndex) {\n                 nameSplit = hasPath ? null : parsedQuery.elems[0].path;\n             }\n \n-            for (const result of results) {\n+            for (const result of result_list) {\n                 // this validation does not make sense when searching by types\n                 if (result.dontValidate) {\n                     continue;\n@@ -1073,7 +1087,7 @@ function initSearch(rawSearchIndex) {\n                     result.id = -1;\n                 }\n             }\n-            return transformResults(results);\n+            return transformResults(result_list);\n         }\n \n         /**\n@@ -1487,19 +1501,19 @@ function initSearch(rawSearchIndex) {\n         function addIntoResults(results, fullId, id, index, dist, path_dist, maxEditDistance) {\n             const inBounds = dist <= maxEditDistance || index !== -1;\n             if (dist === 0 || (!parsedQuery.literalSearch && inBounds)) {\n-                if (results[fullId] !== undefined) {\n-                    const result = results[fullId];\n+                if (results.has(fullId)) {\n+                    const result = results.get(fullId);\n                     if (result.dontValidate || result.dist <= dist) {\n                         return;\n                     }\n                 }\n-                results[fullId] = {\n+                results.set(fullId, {\n                     id: id,\n                     index: index,\n                     dontValidate: parsedQuery.literalSearch,\n                     dist: dist,\n                     path_dist: path_dist,\n-                };\n+                });\n             }\n         }\n "}]}