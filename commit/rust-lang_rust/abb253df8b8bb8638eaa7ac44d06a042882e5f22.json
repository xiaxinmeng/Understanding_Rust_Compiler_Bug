{"sha": "abb253df8b8bb8638eaa7ac44d06a042882e5f22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYjI1M2RmOGI4YmI4NjM4ZWFhN2FjNDRkMDZhMDQyODgyZTVmMjI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-19T04:44:48Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-20T20:58:53Z"}, "message": "Rationalise result and error types", "tree": {"sha": "7bcc6552a5d436c9d3fccbb0a17e5c666b8081b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bcc6552a5d436c9d3fccbb0a17e5c666b8081b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abb253df8b8bb8638eaa7ac44d06a042882e5f22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abb253df8b8bb8638eaa7ac44d06a042882e5f22", "html_url": "https://github.com/rust-lang/rust/commit/abb253df8b8bb8638eaa7ac44d06a042882e5f22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abb253df8b8bb8638eaa7ac44d06a042882e5f22/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "432b1cb253f2b95f3fde4c79d65824efe64aeaf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/432b1cb253f2b95f3fde4c79d65824efe64aeaf4", "html_url": "https://github.com/rust-lang/rust/commit/432b1cb253f2b95f3fde4c79d65824efe64aeaf4"}], "stats": {"total": 89, "additions": 33, "deletions": 56}, "files": [{"sha": "c7f8124c1c792088e7ac2ebc54e6702f9ea5454b", "filename": "src/config/summary.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abb253df8b8bb8638eaa7ac44d06a042882e5f22/src%2Fconfig%2Fsummary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb253df8b8bb8638eaa7ac44d06a042882e5f22/src%2Fconfig%2Fsummary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fsummary.rs?ref=abb253df8b8bb8638eaa7ac44d06a042882e5f22", "patch": "@@ -11,7 +11,6 @@\n use std::default::Default;\n use std::time::{Duration, Instant};\n \n-#[must_use]\n #[derive(Debug, Default, Clone, Copy)]\n pub struct Summary {\n     // Encountered e.g. an IO error."}, {"sha": "a5e1ada89022f8792459e94072be72281e785a70", "filename": "src/lib.rs", "status": "modified", "additions": 10, "deletions": 28, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/abb253df8b8bb8638eaa7ac44d06a042882e5f22/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb253df8b8bb8638eaa7ac44d06a042882e5f22/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=abb253df8b8bb8638eaa7ac44d06a042882e5f22", "patch": "@@ -206,7 +206,7 @@ impl FormattingError {\n }\n \n #[derive(Clone)]\n-pub struct FormatReport {\n+struct FormatReport {\n     // Maps stringified file paths to their associated formatting errors.\n     internal: Rc<RefCell<(FormatErrorMap, ReportedErrors)>>,\n }\n@@ -756,21 +756,21 @@ pub fn format_input<T: Write>(\n     input: Input,\n     config: &Config,\n     out: Option<&mut T>,\n-) -> Result<(Summary, FileMap, FormatReport), (io::Error, Summary)> {\n-    syntax::with_globals(|| format_input_inner(input, config, out))\n+) -> Result<Summary, (ErrorKind, Summary)> {\n+    syntax::with_globals(|| format_input_inner(input, config, out)).map(|tup| tup.0)\n }\n \n fn format_input_inner<T: Write>(\n     input: Input,\n     config: &Config,\n     mut out: Option<&mut T>,\n-) -> Result<(Summary, FileMap, FormatReport), (io::Error, Summary)> {\n+) -> Result<(Summary, FileMap, FormatReport), (ErrorKind, Summary)> {\n     let mut summary = Summary::default();\n     if config.disable_all_formatting() {\n         // When the input is from stdin, echo back the input.\n         if let Input::Text(ref buf) = input {\n             if let Err(e) = io::stdout().write_all(buf.as_bytes()) {\n-                return Err((e, summary));\n+                return Err((From::from(e), summary));\n             }\n         }\n         return Ok((summary, FileMap::new(), FormatReport::new()));\n@@ -890,7 +890,7 @@ fn format_input_inner<T: Write>(\n \n             Ok((summary, file_map, report))\n         }\n-        Err(e) => Err((e, summary)),\n+        Err(e) => Err((From::from(e), summary)),\n     }\n }\n \n@@ -913,33 +913,20 @@ struct ModifiedLines {\n     pub chunks: Vec<ModifiedChunk>,\n }\n \n-/// The successful result of formatting via `get_modified_lines()`.\n-#[cfg(test)]\n-struct ModifiedLinesResult {\n-    /// The high level summary details\n-    pub summary: Summary,\n-    /// The result Filemap\n-    pub filemap: FileMap,\n-    /// Map of formatting errors\n-    pub report: FormatReport,\n-    /// The sets of updated lines.\n-    pub modified_lines: ModifiedLines,\n-}\n-\n /// Format a file and return a `ModifiedLines` data structure describing\n /// the changed ranges of lines.\n #[cfg(test)]\n fn get_modified_lines(\n     input: Input,\n     config: &Config,\n-) -> Result<ModifiedLinesResult, (io::Error, Summary)> {\n+) -> Result<ModifiedLines, (ErrorKind, Summary)> {\n     use std::io::BufRead;\n \n     let mut data = Vec::new();\n \n     let mut config = config.clone();\n     config.set().write_mode(config::WriteMode::Modified);\n-    let (summary, filemap, report) = format_input(input, &config, Some(&mut data))?;\n+    format_input(input, &config, Some(&mut data))?;\n \n     let mut lines = data.lines();\n     let mut chunks = Vec::new();\n@@ -963,12 +950,7 @@ fn get_modified_lines(\n             lines: added_lines,\n         });\n     }\n-    Ok(ModifiedLinesResult {\n-        summary,\n-        filemap,\n-        report,\n-        modified_lines: ModifiedLines { chunks },\n-    })\n+    Ok(ModifiedLines { chunks })\n }\n \n #[derive(Debug)]\n@@ -982,7 +964,7 @@ pub fn format_and_emit_report(input: Input, config: &Config) -> Result<Summary,\n         return Err(format_err!(\"Version mismatch\"));\n     }\n     let out = &mut stdout();\n-    match format_input(input, config, Some(out)) {\n+    match syntax::with_globals(|| format_input_inner(input, config, Some(out))) {\n         Ok((summary, _, report)) => {\n             if report.has_warnings() {\n                 match term::stderr() {"}, {"sha": "00c03a3c8791162868dbe2e5186c68b776bcaf88", "filename": "src/rewrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abb253df8b8bb8638eaa7ac44d06a042882e5f22/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb253df8b8bb8638eaa7ac44d06a042882e5f22/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=abb253df8b8bb8638eaa7ac44d06a042882e5f22", "patch": "@@ -39,7 +39,7 @@ pub struct RewriteContext<'a> {\n     // When rewriting chain, veto going multi line except the last element\n     pub force_one_line_chain: RefCell<bool>,\n     pub snippet_provider: &'a SnippetProvider<'a>,\n-    pub report: FormatReport,\n+    pub(crate) report: FormatReport,\n }\n \n impl<'a> RewriteContext<'a> {"}, {"sha": "b4089cc1cfe1f4e5961d45c80604ca21845c9f24", "filename": "src/test/mod.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/abb253df8b8bb8638eaa7ac44d06a042882e5f22/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb253df8b8bb8638eaa7ac44d06a042882e5f22/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=abb253df8b8bb8638eaa7ac44d06a042882e5f22", "patch": "@@ -10,6 +10,8 @@\n \n extern crate assert_cli;\n \n+use syntax;\n+\n use std::collections::{HashMap, HashSet};\n use std::env;\n use std::fs;\n@@ -143,7 +145,7 @@ fn modified_test() {\n     let filename = \"tests/writemode/source/modified.rs\";\n     let result = get_modified_lines(Input::File(filename.into()), &Config::default()).unwrap();\n     assert_eq!(\n-        result.modified_lines,\n+        result,\n         ModifiedLines {\n             chunks: vec![\n                 ModifiedChunk {\n@@ -240,19 +242,13 @@ fn self_tests() {\n #[test]\n fn stdin_formatting_smoke_test() {\n     let input = Input::Text(\"fn main () {}\".to_owned());\n-    let config = Config::default();\n-    let (error_summary, file_map, _report) =\n-        format_input::<io::Stdout>(input, &config, None).unwrap();\n+    let mut config = Config::default();\n+    config.set().write_mode(WriteMode::Display);\n+    let mut buf: Vec<u8> = vec![];\n+    let error_summary = format_input(input, &config, Some(&mut buf)).unwrap();\n     assert!(error_summary.has_no_errors());\n-    for &(ref file_name, ref text) in &file_map {\n-        if let FileName::Custom(ref file_name) = *file_name {\n-            if file_name == \"stdin\" {\n-                assert_eq!(text.to_string(), \"fn main() {}\\n\");\n-                return;\n-            }\n-        }\n-    }\n-    panic!(\"no stdin\");\n+    //eprintln!(\"{:?}\", );\n+    assert_eq!(buf, \"fn main() {}\\n\".as_bytes());\n }\n \n // FIXME(#1990) restore this test\n@@ -284,8 +280,7 @@ fn format_lines_errors_are_reported() {\n     let input = Input::Text(format!(\"fn {}() {{}}\", long_identifier));\n     let mut config = Config::default();\n     config.set().error_on_line_overflow(true);\n-    let (error_summary, _file_map, _report) =\n-        format_input::<io::Stdout>(input, &config, None).unwrap();\n+    let error_summary = format_input::<io::Stdout>(input, &config, None).unwrap();\n     assert!(error_summary.has_formatting_errors());\n }\n \n@@ -296,8 +291,7 @@ fn format_lines_errors_are_reported_with_tabs() {\n     let mut config = Config::default();\n     config.set().error_on_line_overflow(true);\n     config.set().hard_tabs(true);\n-    let (error_summary, _file_map, _report) =\n-        format_input::<io::Stdout>(input, &config, None).unwrap();\n+    let error_summary = format_input::<io::Stdout>(input, &config, None).unwrap();\n     assert!(error_summary.has_formatting_errors());\n }\n \n@@ -382,7 +376,8 @@ fn read_config(filename: &Path) -> Config {\n fn format_file<P: Into<PathBuf>>(filepath: P, config: &Config) -> (Summary, FileMap, FormatReport) {\n     let filepath = filepath.into();\n     let input = Input::File(filepath);\n-    format_input::<io::Stdout>(input, config, None).unwrap()\n+    //format_input::<io::Stdout>(input, config, None).unwrap()\n+    syntax::with_globals(|| format_input_inner::<io::Stdout>(input, config, None)).unwrap()\n }\n \n pub enum IdempotentCheckError {\n@@ -757,8 +752,7 @@ impl ConfigCodeBlock {\n         });\n     }\n \n-    fn formatted_has_diff(&self, file_map: &FileMap) -> bool {\n-        let &(ref _file_name, ref text) = file_map.first().unwrap();\n+    fn formatted_has_diff(&self, text: &str) -> bool {\n         let compare = make_diff(self.code_block.as_ref().unwrap(), text, DIFF_CONTEXT_SIZE);\n         if !compare.is_empty() {\n             self.print_diff(compare);\n@@ -778,12 +772,14 @@ impl ConfigCodeBlock {\n         }\n \n         let input = Input::Text(self.code_block.as_ref().unwrap().to_owned());\n-        let config = self.get_block_config();\n+        let mut config = self.get_block_config();\n+        config.set().write_mode(WriteMode::Display);\n+        let mut buf: Vec<u8> = vec![];\n \n-        let (error_summary, file_map, _report) =\n-            format_input::<io::Stdout>(input, &config, None).unwrap();\n+        let error_summary = format_input(input, &config, Some(&mut buf)).unwrap();\n \n-        !self.has_parsing_errors(error_summary) && !self.formatted_has_diff(&file_map)\n+        !self.has_parsing_errors(error_summary)\n+            && !self.formatted_has_diff(&String::from_utf8(buf).unwrap())\n     }\n \n     // Extract a code block from the iterator. Behavior:"}, {"sha": "bf1f95381d9fccb454e061a4c73d9e3dd2ccb164", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abb253df8b8bb8638eaa7ac44d06a042882e5f22/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abb253df8b8bb8638eaa7ac44d06a042882e5f22/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=abb253df8b8bb8638eaa7ac44d06a042882e5f22", "patch": "@@ -70,7 +70,7 @@ pub struct FmtVisitor<'a> {\n     pub snippet_provider: &'a SnippetProvider<'a>,\n     pub line_number: usize,\n     pub skipped_range: Vec<(usize, usize)>,\n-    pub report: FormatReport,\n+    pub(crate) report: FormatReport,\n }\n \n impl<'b, 'a: 'b> FmtVisitor<'a> {\n@@ -561,7 +561,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         )\n     }\n \n-    pub fn from_codemap(\n+    pub(crate) fn from_codemap(\n         parse_session: &'a ParseSess,\n         config: &'a Config,\n         snippet_provider: &'a SnippetProvider,"}]}