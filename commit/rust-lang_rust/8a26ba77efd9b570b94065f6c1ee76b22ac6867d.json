{"sha": "8a26ba77efd9b570b94065f6c1ee76b22ac6867d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMjZiYTc3ZWZkOWI1NzBiOTQwNjVmNmMxZWU3NmIyMmFjNjg2N2Q=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-22T13:15:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-22T13:15:35Z"}, "message": "Rollup merge of #63624 - estebank:unreachable-macro, r=petrochenkov\n\nWhen declaring a declarative macro in an item it's only accessible inside it\n\nFix #63164.\nr? @petrochenkov", "tree": {"sha": "a6be4faf11bf3e2e8ef83f67a1c478156c58473a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6be4faf11bf3e2e8ef83f67a1c478156c58473a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a26ba77efd9b570b94065f6c1ee76b22ac6867d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdXpV3CRBK7hj4Ov3rIwAAdHIIAClmnNDaSxPXqRzVubWEcXVL\n/nyWRTVaScEiNn5jYjQhESJ7AryEK0AqEQVz3TrmBvZSeEchyQOUOxHeiV8lVhPb\nEi7BgaiWSW8aE54BsoMawJ7Gc0l9ToXk8Nc5RJoFiqdmVUv3kF5pSHYJ58X3/F9Y\nsb/N0BL9Z1+Hvd9QhZYtD3B4CtV/l+YCPxbpaedmu24vtjB9QV46/OaQ5QsKvlk5\nck0UbLKEJHDfxuiHG7pzHm/HZl+x5t/Sqt90wBUcjnVYwFx7FrIi72wxwAlyCW62\nw+Sd1CHWW7Lj6f00iwSl8Qc4m8wQ1lQngg54haz6gbzr6276fgVEcXASWiem6QM=\n=hQMV\n-----END PGP SIGNATURE-----\n", "payload": "tree a6be4faf11bf3e2e8ef83f67a1c478156c58473a\nparent 201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba\nparent 4971667f175e7e3d84b7a87f46633b3e069e48ba\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1566479735 +0200\ncommitter GitHub <noreply@github.com> 1566479735 +0200\n\nRollup merge of #63624 - estebank:unreachable-macro, r=petrochenkov\n\nWhen declaring a declarative macro in an item it's only accessible inside it\n\nFix #63164.\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a26ba77efd9b570b94065f6c1ee76b22ac6867d", "html_url": "https://github.com/rust-lang/rust/commit/8a26ba77efd9b570b94065f6c1ee76b22ac6867d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a26ba77efd9b570b94065f6c1ee76b22ac6867d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba", "html_url": "https://github.com/rust-lang/rust/commit/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba"}, {"sha": "4971667f175e7e3d84b7a87f46633b3e069e48ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/4971667f175e7e3d84b7a87f46633b3e069e48ba", "html_url": "https://github.com/rust-lang/rust/commit/4971667f175e7e3d84b7a87f46633b3e069e48ba"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "f80e527dfd9b70b131778f9f889d690984f690b6", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a26ba77efd9b570b94065f6c1ee76b22ac6867d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a26ba77efd9b570b94065f6c1ee76b22ac6867d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=8a26ba77efd9b570b94065f6c1ee76b22ac6867d", "patch": "@@ -514,8 +514,7 @@ impl<'hir> Map<'hir> {\n         &self.forest.krate.attrs\n     }\n \n-    pub fn get_module(&self, module: DefId) -> (&'hir Mod, Span, HirId)\n-    {\n+    pub fn get_module(&self, module: DefId) -> (&'hir Mod, Span, HirId) {\n         let hir_id = self.as_local_hir_id(module).unwrap();\n         self.read(hir_id);\n         match self.find_entry(hir_id).unwrap().node {\n@@ -525,7 +524,7 @@ impl<'hir> Map<'hir> {\n                 ..\n             }) => (m, span, hir_id),\n             Node::Crate => (&self.forest.krate.module, self.forest.krate.span, hir_id),\n-            _ => panic!(\"not a module\")\n+            node => panic!(\"not a module: {:?}\", node),\n         }\n     }\n \n@@ -679,6 +678,16 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    /// Wether `hir_id` corresponds to a `mod` or a crate.\n+    pub fn is_hir_id_module(&self, hir_id: HirId) -> bool {\n+        match self.lookup(hir_id) {\n+            Some(Entry { node: Node::Item(Item { node: ItemKind::Mod(_), .. }), .. }) |\n+            Some(Entry { node: Node::Crate, .. }) => true,\n+            _ => false,\n+        }\n+    }\n+\n+\n     /// If there is some error when walking the parents (e.g., a node does not\n     /// have a parent in the map or a node can't be found), then we return the\n     /// last good `HirId` we found. Note that reaching the crate root (`id == 0`),"}, {"sha": "146058963b69dd67e549c6f01ae81dd587194ef6", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8a26ba77efd9b570b94065f6c1ee76b22ac6867d/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a26ba77efd9b570b94065f6c1ee76b22ac6867d/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=8a26ba77efd9b570b94065f6c1ee76b22ac6867d", "patch": "@@ -508,11 +508,7 @@ impl EmbargoVisitor<'tcx> {\n         }\n     }\n \n-    fn update_macro_reachable_mod(\n-        &mut self,\n-        reachable_mod: hir::HirId,\n-        defining_mod: DefId,\n-    ) {\n+    fn update_macro_reachable_mod(&mut self, reachable_mod: hir::HirId, defining_mod: DefId) {\n         let module_def_id = self.tcx.hir().local_def_id(reachable_mod);\n         let module = self.tcx.hir().get_module(module_def_id).0;\n         for item_id in &module.item_ids {\n@@ -524,19 +520,13 @@ impl EmbargoVisitor<'tcx> {\n                 self.update_macro_reachable_def(hir_id, def_kind, vis, defining_mod);\n             }\n         }\n-\n         if let Some(exports) = self.tcx.module_exports(module_def_id) {\n             for export in exports {\n                 if export.vis.is_accessible_from(defining_mod, self.tcx) {\n                     if let Res::Def(def_kind, def_id) = export.res {\n                         let vis = def_id_visibility(self.tcx, def_id).0;\n                         if let Some(hir_id) = self.tcx.hir().as_local_hir_id(def_id) {\n-                            self.update_macro_reachable_def(\n-                                hir_id,\n-                                def_kind,\n-                                vis,\n-                                defining_mod,\n-                            );\n+                            self.update_macro_reachable_def(hir_id, def_kind, vis, defining_mod);\n                         }\n                     }\n                 }\n@@ -892,10 +882,14 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             self.tcx.hir().local_def_id(md.hir_id)\n         ).unwrap();\n         let mut module_id = self.tcx.hir().as_local_hir_id(macro_module_def_id).unwrap();\n+        if !self.tcx.hir().is_hir_id_module(module_id) {\n+            // `module_id` doesn't correspond to a `mod`, return early (#63164).\n+            return;\n+        }\n         let level = if md.vis.node.is_pub() { self.get(module_id) } else { None };\n         let new_level = self.update(md.hir_id, level);\n         if new_level.is_none() {\n-            return\n+            return;\n         }\n \n         loop {"}, {"sha": "d354fe4a7dbfa509d462c96712cf2b5375992d9f", "filename": "src/test/ui/macros/macro-in-fn.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a26ba77efd9b570b94065f6c1ee76b22ac6867d/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a26ba77efd9b570b94065f6c1ee76b22ac6867d/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-fn.rs?ref=8a26ba77efd9b570b94065f6c1ee76b22ac6867d", "patch": "@@ -0,0 +1,8 @@\n+// run-pass\n+#![feature(decl_macro)]\n+\n+pub fn moo() {\n+    pub macro ABC() {{}}\n+}\n+\n+fn main() {}"}]}