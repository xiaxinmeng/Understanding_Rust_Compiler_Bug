{"sha": "978de5cf8bfd2ff82696fc8d5369b41e147431c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3OGRlNWNmOGJmZDJmZjgyNjk2ZmM4ZDUzNjliNDFlMTQ3NDMxYzM=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-08T15:01:19Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-10T13:32:56Z"}, "message": "Implement type inference for enum variants", "tree": {"sha": "27a25a5f2fb20a4afffed97cbb5b678b251d254b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27a25a5f2fb20a4afffed97cbb5b678b251d254b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/978de5cf8bfd2ff82696fc8d5369b41e147431c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/978de5cf8bfd2ff82696fc8d5369b41e147431c3", "html_url": "https://github.com/rust-lang/rust/commit/978de5cf8bfd2ff82696fc8d5369b41e147431c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/978de5cf8bfd2ff82696fc8d5369b41e147431c3/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aca14c591fea40b2f803bbf5f02c1571732348fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/aca14c591fea40b2f803bbf5f02c1571732348fb", "html_url": "https://github.com/rust-lang/rust/commit/aca14c591fea40b2f803bbf5f02c1571732348fb"}], "stats": {"total": 263, "additions": 218, "deletions": 45}, "files": [{"sha": "f1b98cdd76ef0fce202981dd83d8f31e75b5f97d", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 85, "deletions": 20, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=978de5cf8bfd2ff82696fc8d5369b41e147431c3", "patch": "@@ -1,10 +1,19 @@\n use std::sync::Arc;\n \n use ra_db::Cancelable;\n-use ra_syntax::ast::{self, NameOwner, StructFlavor, AstNode};\n+use ra_syntax::{\n+    SyntaxNode,\n+    ast::{self, NameOwner, StructFlavor, AstNode}\n+};\n \n use crate::{\n+<<<<<<< HEAD\n     DefId, Name, AsName, Struct, Enum, HirDatabase, DefKind,\n+=======\n+    DefId, DefLoc, Name, AsName, Struct, Enum, EnumVariant,\n+    VariantData, StructField, HirDatabase, DefKind,\n+    SourceItemId,\n+>>>>>>> 95ac72a3... Implement type inference for enum variants\n     type_ref::TypeRef,\n };\n \n@@ -45,33 +54,39 @@ impl StructData {\n     }\n }\n \n-impl Enum {\n-    pub(crate) fn new(def_id: DefId) -> Self {\n-        Enum { def_id }\n-    }\n+fn get_def_id(\n+    db: &impl HirDatabase,\n+    same_file_loc: &DefLoc,\n+    node: &SyntaxNode,\n+    expected_kind: DefKind,\n+) -> DefId {\n+    let file_id = same_file_loc.source_item_id.file_id;\n+    let file_items = db.file_items(file_id);\n+\n+    let item_id = file_items.id_of(file_id, node);\n+    let source_item_id = SourceItemId {\n+        item_id: Some(item_id),\n+        ..same_file_loc.source_item_id\n+    };\n+    let loc = DefLoc {\n+        kind: expected_kind,\n+        source_item_id: source_item_id,\n+        ..*same_file_loc\n+    };\n+    loc.id(db)\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct EnumData {\n     pub(crate) name: Option<Name>,\n-    pub(crate) variants: Vec<(Name, Arc<VariantData>)>,\n+    // TODO: keep track of names also since we already have them?\n+    // then we won't need additional db lookups\n+    pub(crate) variants: Option<Vec<EnumVariant>>,\n }\n \n impl EnumData {\n-    fn new(enum_def: &ast::EnumDef) -> Self {\n+    fn new(enum_def: &ast::EnumDef, variants: Option<Vec<EnumVariant>>) -> Self {\n         let name = enum_def.name().map(|n| n.as_name());\n-        let variants = if let Some(evl) = enum_def.variant_list() {\n-            evl.variants()\n-                .map(|v| {\n-                    (\n-                        v.name().map(|n| n.as_name()).unwrap_or_else(Name::missing),\n-                        Arc::new(VariantData::new(v.flavor())),\n-                    )\n-                })\n-                .collect()\n-        } else {\n-            Vec::new()\n-        };\n         EnumData { name, variants }\n     }\n \n@@ -83,7 +98,57 @@ impl EnumData {\n         assert!(def_loc.kind == DefKind::Enum);\n         let syntax = db.file_item(def_loc.source_item_id);\n         let enum_def = ast::EnumDef::cast(&syntax).expect(\"enum def should point to EnumDef node\");\n-        Ok(Arc::new(EnumData::new(enum_def)))\n+        let variants = enum_def.variant_list().map(|vl| {\n+            vl.variants()\n+                .map(|ev| {\n+                    let def_id = get_def_id(db, &def_loc, ev.syntax(), DefKind::EnumVariant);\n+                    EnumVariant::new(def_id)\n+                })\n+                .collect()\n+        });\n+        Ok(Arc::new(EnumData::new(enum_def, variants)))\n+    }\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct EnumVariantData {\n+    pub(crate) name: Option<Name>,\n+    pub(crate) variant_data: Arc<VariantData>,\n+    pub(crate) parent_enum: Enum,\n+}\n+\n+impl EnumVariantData {\n+    fn new(variant_def: &ast::EnumVariant, parent_enum: Enum) -> EnumVariantData {\n+        let name = variant_def.name().map(|n| n.as_name());\n+        let variant_data = VariantData::new(variant_def.flavor());\n+        let variant_data = Arc::new(variant_data);\n+        EnumVariantData {\n+            name,\n+            variant_data,\n+            parent_enum,\n+        }\n+    }\n+\n+    pub(crate) fn enum_variant_data_query(\n+        db: &impl HirDatabase,\n+        def_id: DefId,\n+    ) -> Cancelable<Arc<EnumVariantData>> {\n+        let def_loc = def_id.loc(db);\n+        assert!(def_loc.kind == DefKind::EnumVariant);\n+        let syntax = db.file_item(def_loc.source_item_id);\n+        let variant_def = ast::EnumVariant::cast(&syntax)\n+            .expect(\"enum variant def should point to EnumVariant node\");\n+        let enum_node = syntax\n+            .parent()\n+            .expect(\"enum variant should have enum variant list ancestor\")\n+            .parent()\n+            .expect(\"enum variant list should have enum ancestor\");\n+        let enum_def_id = get_def_id(db, &def_loc, enum_node, DefKind::Enum);\n+\n+        Ok(Arc::new(EnumVariantData::new(\n+            variant_def,\n+            Enum::new(enum_def_id),\n+        )))\n     }\n }\n "}, {"sha": "c7d1bf0a625802f3631f270968e9fbeb5339347d", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=978de5cf8bfd2ff82696fc8d5369b41e147431c3", "patch": "@@ -44,6 +44,7 @@ pub enum Def {\n     Module(Module),\n     Struct(Struct),\n     Enum(Enum),\n+    EnumVariant(EnumVariant),\n     Function(Function),\n     Item,\n }\n@@ -188,6 +189,10 @@ pub struct Enum {\n }\n \n impl Enum {\n+    pub(crate) fn new(def_id: DefId) -> Self {\n+        Enum { def_id }\n+    }\n+\n     pub fn def_id(&self) -> DefId {\n         self.def_id\n     }\n@@ -196,11 +201,38 @@ impl Enum {\n         Ok(db.enum_data(self.def_id)?.name.clone())\n     }\n \n-    pub fn variants(&self, db: &impl HirDatabase) -> Cancelable<Vec<(Name, Arc<VariantData>)>> {\n+    pub fn variants(&self, db: &impl HirDatabase) -> Cancelable<Option<Vec<EnumVariant>>> {\n         Ok(db.enum_data(self.def_id)?.variants.clone())\n     }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct EnumVariant {\n+    pub(crate) def_id: DefId,\n+}\n+\n+impl EnumVariant {\n+    pub(crate) fn new(def_id: DefId) -> Self {\n+        EnumVariant { def_id }\n+    }\n+\n+    pub fn def_id(&self) -> DefId {\n+        self.def_id\n+    }\n+\n+    pub fn parent_enum(&self, db: &impl HirDatabase) -> Cancelable<Enum> {\n+        Ok(db.enum_variant_data(self.def_id)?.parent_enum.clone())\n+    }\n+\n+    pub fn name(&self, db: &impl HirDatabase) -> Cancelable<Option<Name>> {\n+        Ok(db.enum_variant_data(self.def_id)?.name.clone())\n+    }\n+\n+    pub fn variant_data(&self, db: &impl HirDatabase) -> Cancelable<Arc<VariantData>> {\n+        Ok(db.enum_variant_data(self.def_id)?.variant_data.clone())\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Function {\n     pub(crate) def_id: DefId,"}, {"sha": "d7d62e8634b5b9b26a21a8c54abe5a9fb60d0a6e", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=978de5cf8bfd2ff82696fc8d5369b41e147431c3", "patch": "@@ -13,6 +13,7 @@ impl Module {\n     pub(crate) fn new(def_id: DefId) -> Self {\n         crate::code_model_api::Module { def_id }\n     }\n+\n     pub(crate) fn from_module_id(\n         db: &impl HirDatabase,\n         source_root_id: SourceRootId,\n@@ -85,26 +86,30 @@ impl Module {\n         let module_id = loc.module_id.crate_root(&module_tree);\n         Module::from_module_id(db, loc.source_root_id, module_id)\n     }\n+\n     /// Finds a child module with the specified name.\n     pub fn child_impl(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n         let loc = self.def_id.loc(db);\n         let module_tree = db.module_tree(loc.source_root_id)?;\n         let child_id = ctry!(loc.module_id.child(&module_tree, name));\n         Module::from_module_id(db, loc.source_root_id, child_id).map(Some)\n     }\n+\n     pub fn parent_impl(&self, db: &impl HirDatabase) -> Cancelable<Option<Module>> {\n         let loc = self.def_id.loc(db);\n         let module_tree = db.module_tree(loc.source_root_id)?;\n         let parent_id = ctry!(loc.module_id.parent(&module_tree));\n         Module::from_module_id(db, loc.source_root_id, parent_id).map(Some)\n     }\n+\n     /// Returns a `ModuleScope`: a set of items, visible in this module.\n     pub fn scope_impl(&self, db: &impl HirDatabase) -> Cancelable<ModuleScope> {\n         let loc = self.def_id.loc(db);\n         let item_map = db.item_map(loc.source_root_id)?;\n         let res = item_map.per_module[&loc.module_id].clone();\n         Ok(res)\n     }\n+\n     pub fn resolve_path_impl(\n         &self,\n         db: &impl HirDatabase,\n@@ -126,15 +131,43 @@ impl Module {\n         );\n \n         let segments = &path.segments;\n-        for name in segments.iter() {\n+        for (idx, name) in segments.iter().enumerate() {\n             let curr = if let Some(r) = curr_per_ns.as_ref().take_types() {\n                 r\n             } else {\n                 return Ok(PerNs::none());\n             };\n             let module = match curr.resolve(db)? {\n                 Def::Module(it) => it,\n-                // TODO here would be the place to handle enum variants...\n+                Def::Enum(e) => {\n+                    if segments.len() == idx + 1 {\n+                        // enum variant\n+                        let matching_variant = e.variants(db)?.map(|variants| {\n+                            variants\n+                                .into_iter()\n+                                // FIXME: replace by match lol\n+                                .find(|variant| {\n+                                    variant\n+                                        .name(db)\n+                                        .map(|o| o.map(|ref n| n == name))\n+                                        .unwrap_or(Some(false))\n+                                        .unwrap_or(false)\n+                                })\n+                        });\n+\n+                        if let Some(Some(variant)) = matching_variant {\n+                            return Ok(PerNs::both(variant.def_id(), e.def_id()));\n+                        } else {\n+                            return Ok(PerNs::none());\n+                        }\n+                    } else if segments.len() == idx {\n+                        // enum\n+                        return Ok(PerNs::types(e.def_id()));\n+                    } else {\n+                        // malformed enum?\n+                        return Ok(PerNs::none());\n+                    }\n+                }\n                 _ => return Ok(PerNs::none()),\n             };\n             let scope = module.scope(db)?;\n@@ -146,6 +179,7 @@ impl Module {\n         }\n         Ok(curr_per_ns)\n     }\n+\n     pub fn problems_impl(\n         &self,\n         db: &impl HirDatabase,"}, {"sha": "9a6ef8083c87a5689e968f9dd78d560896c3142d", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=978de5cf8bfd2ff82696fc8d5369b41e147431c3", "patch": "@@ -12,7 +12,7 @@ use crate::{\n     module_tree::{ModuleId, ModuleTree},\n     nameres::{ItemMap, InputModuleItems},\n     ty::{InferenceResult, Ty},\n-    adt::{StructData, EnumData},\n+    adt::{StructData, EnumData, EnumVariantData},\n     impl_block::ModuleImplBlocks,\n };\n \n@@ -47,6 +47,11 @@ pub trait HirDatabase: SyntaxDatabase\n         use fn crate::adt::EnumData::enum_data_query;\n     }\n \n+    fn enum_variant_data(def_id: DefId) -> Cancelable<Arc<EnumVariantData>> {\n+        type EnumVariantDataQuery;\n+        use fn crate::adt::EnumVariantData::enum_variant_data_query;\n+    }\n+\n     fn infer(def_id: DefId) -> Cancelable<Arc<InferenceResult>> {\n         type InferQuery;\n         use fn crate::ty::infer;"}, {"sha": "db0107e53bc0a6136fc5e37b252e6ec07f43c92b", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=978de5cf8bfd2ff82696fc8d5369b41e147431c3", "patch": "@@ -3,7 +3,7 @@ use ra_syntax::{TreePtr, SyntaxKind, SyntaxNode, SourceFile, AstNode, ast};\n use ra_arena::{Arena, RawId, impl_arena_id};\n \n use crate::{\n-    HirDatabase, PerNs, Def, Function, Struct, Enum, ImplBlock, Crate,\n+    HirDatabase, PerNs, Def, Function, Struct, Enum, EnumVariant, ImplBlock, Crate,\n     module_tree::ModuleId,\n };\n \n@@ -145,6 +145,7 @@ pub(crate) enum DefKind {\n     Function,\n     Struct,\n     Enum,\n+    EnumVariant,\n     Item,\n \n     StructCtor,\n@@ -170,10 +171,8 @@ impl DefId {\n                 let struct_def = Struct::new(self);\n                 Def::Struct(struct_def)\n             }\n-            DefKind::Enum => {\n-                let enum_def = Enum::new(self);\n-                Def::Enum(enum_def)\n-            }\n+            DefKind::Enum => Def::Enum(Enum::new(self)),\n+            DefKind::EnumVariant => Def::EnumVariant(EnumVariant::new(self)),\n             DefKind::StructCtor => Def::Item,\n             DefKind::Item => Def::Item,\n         };\n@@ -258,7 +257,9 @@ impl SourceFileItems {\n         // change parent's id. This means that, say, adding a new function to a\n         // trait does not chage ids of top-level items, which helps caching.\n         bfs(source_file.syntax(), |it| {\n-            if let Some(module_item) = ast::ModuleItem::cast(it) {\n+            if let Some(enum_variant) = ast::EnumVariant::cast(it) {\n+                self.alloc(enum_variant.syntax().to_owned());\n+            } else if let Some(module_item) = ast::ModuleItem::cast(it) {\n                 self.alloc(module_item.syntax().to_owned());\n             } else if let Some(macro_call) = ast::MacroCall::cast(it) {\n                 self.alloc(macro_call.syntax().to_owned());"}, {"sha": "74957ffc90353b46f2d1cbcde2a05fda6fceb3b9", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=978de5cf8bfd2ff82696fc8d5369b41e147431c3", "patch": "@@ -56,6 +56,6 @@ pub use self::code_model_api::{\n     Crate, CrateDependency,\n     Def,\n     Module, ModuleSource, Problem,\n-    Struct, Enum,\n+    Struct, Enum, EnumVariant,\n     Function, FnSignature,\n };"}, {"sha": "6f93bb59de92b38084b212ea4cfcfb65f8e9d221", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=978de5cf8bfd2ff82696fc8d5369b41e147431c3", "patch": "@@ -233,6 +233,7 @@ salsa::database_storage! {\n             fn type_for_field() for db::TypeForFieldQuery;\n             fn struct_data() for db::StructDataQuery;\n             fn enum_data() for db::EnumDataQuery;\n+            fn enum_variant_data() for db::EnumVariantDataQuery;\n             fn impls_in_module() for db::ImplsInModuleQuery;\n             fn body_hir() for db::BodyHirQuery;\n             fn body_syntax_mapping() for db::BodySyntaxMappingQuery;"}, {"sha": "18c41a0155772acd83007906038edd103f61f292", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=978de5cf8bfd2ff82696fc8d5369b41e147431c3", "patch": "@@ -30,7 +30,7 @@ use join_to_string::join;\n use ra_db::Cancelable;\n \n use crate::{\n-    Def, DefId, Module, Function, Struct, Enum, Path, Name, ImplBlock,\n+    Def, DefId, Module, Function, Struct, Enum, EnumVariant, Path, Name, ImplBlock,\n     FnSignature, FnScopes,\n     db::HirDatabase,\n     type_ref::{TypeRef, Mutability},\n@@ -453,6 +453,12 @@ pub fn type_for_enum(db: &impl HirDatabase, s: Enum) -> Cancelable<Ty> {\n     })\n }\n \n+pub fn type_for_enum_variant(db: &impl HirDatabase, ev: EnumVariant) -> Cancelable<Ty> {\n+    let enum_parent = ev.parent_enum(db)?;\n+\n+    type_for_enum(db, enum_parent)\n+}\n+\n pub(super) fn type_for_def(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Ty> {\n     let def = def_id.resolve(db)?;\n     match def {\n@@ -463,6 +469,7 @@ pub(super) fn type_for_def(db: &impl HirDatabase, def_id: DefId) -> Cancelable<T\n         Def::Function(f) => type_for_fn(db, f),\n         Def::Struct(s) => type_for_struct(db, s),\n         Def::Enum(e) => type_for_enum(db, e),\n+        Def::EnumVariant(ev) => type_for_enum_variant(db, ev),\n         Def::Item => {\n             log::debug!(\"trying to get type for item of unknown type {:?}\", def_id);\n             Ok(Ty::Unknown)\n@@ -477,12 +484,9 @@ pub(super) fn type_for_field(\n ) -> Cancelable<Option<Ty>> {\n     let def = def_id.resolve(db)?;\n     let variant_data = match def {\n-        Def::Struct(s) => {\n-            let variant_data = s.variant_data(db)?;\n-            variant_data\n-        }\n+        Def::Struct(s) => s.variant_data(db)?,\n+        Def::EnumVariant(ev) => ev.variant_data(db)?,\n         // TODO: unions\n-        // TODO: enum variants\n         _ => panic!(\n             \"trying to get type for field in non-struct/variant {:?}\",\n             def_id\n@@ -788,6 +792,10 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let ty = type_for_struct(self.db, s)?;\n                 (ty, Some(def_id))\n             }\n+            Def::EnumVariant(ev) => {\n+                let ty = type_for_enum_variant(self.db, ev)?;\n+                (ty, Some(def_id))\n+            }\n             _ => (Ty::Unknown, None),\n         })\n     }"}, {"sha": "d8c0af32682d71fc0bbde62f01dca67bc0eb888b", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=978de5cf8bfd2ff82696fc8d5369b41e147431c3", "patch": "@@ -94,6 +94,22 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn infer_enum() {\n+    check_inference(\n+        r#\"\n+enum E {\n+  V1 { field: u32 },\n+  V2\n+}\n+fn test() {\n+  E::V1 { field: 1 };\n+  E::V2;\n+}\"#,\n+        \"enum.txt\",\n+    );\n+}\n+\n #[test]\n fn infer_refs() {\n     check_inference("}, {"sha": "481eb0bc72127d55250492f504f567bde2ca6173", "filename": "crates/ra_hir/src/ty/tests/data/enum.txt", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fenum.txt", "raw_url": "https://github.com/rust-lang/rust/raw/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fenum.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fenum.txt?ref=978de5cf8bfd2ff82696fc8d5369b41e147431c3", "patch": "@@ -0,0 +1,4 @@\n+[48; 82) '{   E:...:V2; }': ()\n+[52; 70) 'E::V1 ...d: 1 }': E\n+[67; 68) '1': u32\n+[74; 79) 'E::V2': E"}, {"sha": "6a55670d192cb271fbe6e72cc14651cf7110942a", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=978de5cf8bfd2ff82696fc8d5369b41e147431c3", "patch": "@@ -21,14 +21,20 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) -> C\n                     .add_to(acc)\n             });\n         }\n-        hir::Def::Enum(e) => e\n-            .variants(ctx.db)?\n-            .into_iter()\n-            .for_each(|(name, _variant)| {\n-                CompletionItem::new(CompletionKind::Reference, name.to_string())\n-                    .kind(CompletionItemKind::EnumVariant)\n-                    .add_to(acc)\n-            }),\n+        hir::Def::Enum(e) => {\n+            e.variants(ctx.db)?\n+                .unwrap_or(vec![])\n+                .into_iter()\n+                .for_each(|variant| {\n+                    let variant_name = variant.name(ctx.db);\n+\n+                    if let Ok(Some(name)) = variant_name {\n+                        CompletionItem::new(CompletionKind::Reference, name.to_string())\n+                            .kind(CompletionItemKind::EnumVariant)\n+                            .add_to(acc)\n+                    }\n+                })\n+        }\n         _ => return Ok(()),\n     };\n     Ok(())"}, {"sha": "efdf261bef8c8d1a55b9c2c40d5d2615b9a4dc6e", "filename": "crates/ra_ide_api/src/db.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978de5cf8bfd2ff82696fc8d5369b41e147431c3/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdb.rs?ref=978de5cf8bfd2ff82696fc8d5369b41e147431c3", "patch": "@@ -122,6 +122,7 @@ salsa::database_storage! {\n             fn type_for_field() for hir::db::TypeForFieldQuery;\n             fn struct_data() for hir::db::StructDataQuery;\n             fn enum_data() for hir::db::EnumDataQuery;\n+            fn enum_variant_data() for hir::db::EnumVariantDataQuery;\n             fn impls_in_module() for hir::db::ImplsInModuleQuery;\n             fn body_hir() for hir::db::BodyHirQuery;\n             fn body_syntax_mapping() for hir::db::BodySyntaxMappingQuery;"}]}