{"sha": "c064b6560b7ce0adeb9bbf5d7dcf12b1acb0c807", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNjRiNjU2MGI3Y2UwYWRlYjliYmY1ZDdkY2YxMmIxYWNiMGM4MDc=", "commit": {"author": {"name": "Sebastian Pop", "email": "spop@amazon.com", "date": "2021-04-29T16:15:50Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@amazon.com", "date": "2021-04-29T23:05:40Z"}, "message": "[Arm64] use isb instruction instead of yield in spin loops\n\nOn arm64 we have seen on several databases that ISB (instruction synchronization\nbarrier) is better to use than yield in a spin loop.  The yield instruction is a\nnop.  The isb instruction puts the processor to sleep for some short time.  isb\nis a good equivalent to the pause instruction on x86.\n\nBelow is an experiment that shows the effects of yield and isb on Arm64 and the\ntime of a pause instruction on x86 Intel processors.  The micro-benchmarks use\nhttps://github.com/google/benchmark.git\n\n$ cat a.cc\nstatic void BM_scalar_increment(benchmark::State& state) {\n  int i = 0;\n  for (auto _ : state)\n    benchmark::DoNotOptimize(i++);\n}\nBENCHMARK(BM_scalar_increment);\nstatic void BM_yield(benchmark::State& state) {\n  for (auto _ : state)\n    asm volatile(\"yield\"::);\n}\nBENCHMARK(BM_yield);\nstatic void BM_isb(benchmark::State& state) {\n  for (auto _ : state)\n    asm volatile(\"isb\"::);\n}\nBENCHMARK(BM_isb);\nBENCHMARK_MAIN();\n\n$ g++ -o run a.cc -O2 -lbenchmark -lpthread\n$ ./run\n\n--------------------------------------------------------------\nBenchmark                    Time             CPU   Iterations\n--------------------------------------------------------------\n\nAWS Graviton2 (Neoverse-N1) processor:\nBM_scalar_increment      0.485 ns        0.485 ns   1000000000\nBM_yield                 0.400 ns        0.400 ns   1000000000\nBM_isb                    13.2 ns         13.2 ns     52993304\n\nAWS Graviton (A-72) processor:\nBM_scalar_increment      0.897 ns        0.874 ns    801558633\nBM_yield                 0.877 ns        0.875 ns    800002377\nBM_isb                    13.0 ns         12.7 ns     55169412\n\nApple Arm64 M1 processor:\nBM_scalar_increment      0.315 ns        0.315 ns   1000000000\nBM_yield                 0.313 ns        0.313 ns   1000000000\nBM_isb                    9.06 ns         9.06 ns     77259282\n\nstatic void BM_pause(benchmark::State& state) {\n  for (auto _ : state)\n    asm volatile(\"pause\"::);\n}\nBENCHMARK(BM_pause);\n\nIntel Skylake processor:\nBM_scalar_increment      0.295 ns        0.295 ns   1000000000\nBM_pause                  41.7 ns         41.7 ns     16780553\n\nTested on Graviton2 aarch64-linux with `./x.py test`.", "tree": {"sha": "58ff69b68f68e2f4a18d11443e9032f0d60b2ade", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58ff69b68f68e2f4a18d11443e9032f0d60b2ade"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c064b6560b7ce0adeb9bbf5d7dcf12b1acb0c807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c064b6560b7ce0adeb9bbf5d7dcf12b1acb0c807", "html_url": "https://github.com/rust-lang/rust/commit/c064b6560b7ce0adeb9bbf5d7dcf12b1acb0c807", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c064b6560b7ce0adeb9bbf5d7dcf12b1acb0c807/comments", "author": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39eee173fbcc21462d255b364b87715cd33b62db", "url": "https://api.github.com/repos/rust-lang/rust/commits/39eee173fbcc21462d255b364b87715cd33b62db", "html_url": "https://github.com/rust-lang/rust/commit/39eee173fbcc21462d255b364b87715cd33b62db"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "8e7c95abd6872b3973cf9a10c223ba234138a830", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c064b6560b7ce0adeb9bbf5d7dcf12b1acb0c807/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c064b6560b7ce0adeb9bbf5d7dcf12b1acb0c807/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=c064b6560b7ce0adeb9bbf5d7dcf12b1acb0c807", "patch": "@@ -128,7 +128,7 @@ pub fn spin_loop() {\n         #[cfg(target_arch = \"aarch64\")]\n         {\n             // SAFETY: the `cfg` attr ensures that we only execute this on aarch64 targets.\n-            unsafe { crate::arch::aarch64::__yield() };\n+            unsafe { crate::arch::aarch64::__isb(crate::arch::aarch64::SY) };\n         }\n         #[cfg(target_arch = \"arm\")]\n         {"}]}