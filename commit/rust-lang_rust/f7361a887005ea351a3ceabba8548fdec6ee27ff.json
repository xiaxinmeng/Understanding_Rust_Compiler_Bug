{"sha": "f7361a887005ea351a3ceabba8548fdec6ee27ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MzYxYTg4NzAwNWVhMzUxYTNjZWFiYmE4NTQ4ZmRlYzZlZTI3ZmY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-20T11:48:08Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-24T07:06:43Z"}, "message": "This method of once-diagnostics doesn't allow nesting", "tree": {"sha": "91399d459c3ac0384ef9ba2535936ff748ab1d15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91399d459c3ac0384ef9ba2535936ff748ab1d15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7361a887005ea351a3ceabba8548fdec6ee27ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAloXxQMACgkQpp+NIls6\n19lMkxAAg6NfIBZmhyTvGYFnlpy66uJajvLYDi6yl5i88maCj5kzESBr/ms+Olto\nrCb8y0WHR4q1H2HX1PUr+wN/lFp3GWUx4Ug+81CydyjM0Rl2ArsgCh8By/u2Tshg\n4EakZvh1/oXYMTuvW50pcJQRMoNksjh5hsHwJ6ZzyonlrQgg3JzIQ6U/90Vdg+qu\nkSnx0mXTWuDfg0arCOP3TeQv1U2eOb+ZKSfHQPQZKG7Y4Ppy6iQcIcY9Gq1/xPoI\nXDEwDSrsVeBaQMdkPy198moeP/Z+zfzgZ32ViYMOKFa/77/r6/UVNnVVAX5U2t8X\nDmUDMfxw2KvY/5XD4FrMkfiiynMZOQxLT3D9Q4aUPII2K2tXvVdU+ww+9lWHv3B9\nmbziTJ5431Jsytt+pqmERa5iRCh2ovwKv+uho89eTXrl2HX1SPhX9xOmxlsA9imM\n0bISDo4HS9Byzwsdl2MXcx8eqb4dFxJPMgANqiLUB0ssaFiOQFSsINjBNqhxNBpJ\nOC43SeaG0AgU0S+Ho3QtwilCswqwDtbT6lkwelX4ehPEeiZPW/+NhvfQuBXlTRaZ\nbjm4PEdYCFouJd31rj6/5XDhI0nC1ougkW80GYrTyr6I1tlFDSvfE88mJeZO9pG4\nt3wLw+b6KD80p22BHlRGkcfVsPETOiDs0oHqepMO4DxKmX2igEI=\n=z5gi\n-----END PGP SIGNATURE-----", "payload": "tree 91399d459c3ac0384ef9ba2535936ff748ab1d15\nparent 7e07fd3e8d83b5feec2d6c3e5fb57de73681a9f3\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1511178488 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1511507203 +0100\n\nThis method of once-diagnostics doesn't allow nesting\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7361a887005ea351a3ceabba8548fdec6ee27ff", "html_url": "https://github.com/rust-lang/rust/commit/f7361a887005ea351a3ceabba8548fdec6ee27ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7361a887005ea351a3ceabba8548fdec6ee27ff/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e07fd3e8d83b5feec2d6c3e5fb57de73681a9f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e07fd3e8d83b5feec2d6c3e5fb57de73681a9f3", "html_url": "https://github.com/rust-lang/rust/commit/7e07fd3e8d83b5feec2d6c3e5fb57de73681a9f3"}], "stats": {"total": 20, "additions": 5, "deletions": 15}, "files": [{"sha": "b2f4acb21a8cfa16d893cc8bde89cbdbb35c9515", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f7361a887005ea351a3ceabba8548fdec6ee27ff/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7361a887005ea351a3ceabba8548fdec6ee27ff/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=f7361a887005ea351a3ceabba8548fdec6ee27ff", "patch": "@@ -355,7 +355,6 @@ impl Session {\n \n     /// Analogous to calling methods on the given `DiagnosticBuilder`, but\n     /// deduplicates on lint ID, span (if any), and message for this `Session`\n-    /// if we're not outputting in JSON mode.\n     fn diag_once<'a, 'b>(&'a self,\n                          diag_builder: &'b mut DiagnosticBuilder<'a>,\n                          method: DiagnosticBuilderMethod,\n@@ -371,20 +370,11 @@ impl Session {\n             }\n         };\n \n-        match self.opts.error_format {\n-            // when outputting JSON for tool consumption, the tool might want\n-            // the duplicates\n-            config::ErrorOutputType::Json(_) => {\n-                do_method()\n-            },\n-            _ => {\n-                let lint_id = DiagnosticMessageId::LintId(lint::LintId::of(lint));\n-                let id_span_message = (lint_id, span, message.to_owned());\n-                let fresh = self.one_time_diagnostics.borrow_mut().insert(id_span_message);\n-                if fresh {\n-                    do_method()\n-                }\n-            }\n+        let lint_id = DiagnosticMessageId::LintId(lint::LintId::of(lint));\n+        let id_span_message = (lint_id, span, message.to_owned());\n+        let fresh = self.one_time_diagnostics.borrow_mut().insert(id_span_message);\n+        if fresh {\n+            do_method()\n         }\n     }\n "}]}