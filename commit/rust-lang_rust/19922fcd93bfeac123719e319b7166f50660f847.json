{"sha": "19922fcd93bfeac123719e319b7166f50660f847", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5OTIyZmNkOTNiZmVhYzEyMzcxOWUzMTliNzE2NmY1MDY2MGY4NDc=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-27T21:21:15Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-31T01:04:19Z"}, "message": "Feed the interner to the pretty-printer, in anticipation of pretty-printing token trees.", "tree": {"sha": "6eab8aa33d8d72ae8bb02fd4c946010737e28e8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6eab8aa33d8d72ae8bb02fd4c946010737e28e8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19922fcd93bfeac123719e319b7166f50660f847", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19922fcd93bfeac123719e319b7166f50660f847", "html_url": "https://github.com/rust-lang/rust/commit/19922fcd93bfeac123719e319b7166f50660f847", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19922fcd93bfeac123719e319b7166f50660f847/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e9c475527b0a4cbf43b14c028370b0f784fd99f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e9c475527b0a4cbf43b14c028370b0f784fd99f", "html_url": "https://github.com/rust-lang/rust/commit/4e9c475527b0a4cbf43b14c028370b0f784fd99f"}], "stats": {"total": 52, "additions": 33, "deletions": 19}, "files": [{"sha": "908dff102f7785a54bf3331f855074bf0b991e25", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/19922fcd93bfeac123719e319b7166f50660f847/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19922fcd93bfeac123719e319b7166f50660f847/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=19922fcd93bfeac123719e319b7166f50660f847", "patch": "@@ -263,6 +263,9 @@ fn check_variants_T<T: copy>(\n                 let str3 =\n                     @as_str(|a|pprust::print_crate(\n                         codemap,\n+                        // Assuming we're not generating any token_trees\n+                        @syntax::util::interner::mk::<@~str>(\n+                            |x| str::hash(*x), |x,y| str::eq(*x,*y)),\n                         diagnostic::mk_span_handler(handler, codemap),\n                         crate2,\n                         filename,\n@@ -420,13 +423,18 @@ fn parse_and_print(code: @~str) -> ~str {\n     let crate = parse::parse_crate_from_source_str(\n         filename, code, ~[], sess);\n     io::with_str_reader(*code, |rdr| {\n-        as_str(|a| pprust::print_crate(sess.cm,\n-                                       sess.span_diagnostic,\n-                                       crate,\n-                                       filename,\n-                                       rdr, a,\n-                                       pprust::no_ann(),\n-                                       false) )\n+        as_str(|a|\n+               pprust::print_crate(\n+                   sess.cm,\n+                   // Assuming there are no token_trees\n+                   @syntax::util::interner::mk::<@~str>(\n+                       |x| str::hash(*x), |x,y| str::eq(*x,*y)),\n+                   sess.span_diagnostic,\n+                   crate,\n+                   filename,\n+                   rdr, a,\n+                   pprust::no_ann(),\n+                   false) )\n     })\n }\n \n@@ -565,13 +573,17 @@ fn check_variants(files: ~[~str], cx: context) {\n                 s, ~[], sess);\n         io::with_str_reader(*s, |rdr| {\n             #error(\"%s\",\n-                   as_str(|a| pprust::print_crate(sess.cm,\n-                                                  sess.span_diagnostic,\n-                                                  crate,\n-                                                  file,\n-                                                  rdr, a,\n-                                                  pprust::no_ann(),\n-                                                  false) ))\n+                   as_str(|a| pprust::print_crate(\n+                       sess.cm,\n+                       // Assuming no token_trees\n+                       @syntax::util::interner::mk::<@~str>(\n+                            |x| str::hash(*x), |x,y| str::eq(*x,*y)),\n+                       sess.span_diagnostic,\n+                       crate,\n+                       file,\n+                       rdr, a,\n+                       pprust::no_ann(),\n+                       false) ))\n         });\n         check_variants_of_ast(*crate, sess.cm, file, cx);\n     }"}, {"sha": "3e23d066c758cd54294d0883e044a6ebfa1f94fb", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/19922fcd93bfeac123719e319b7166f50660f847/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19922fcd93bfeac123719e319b7166f50660f847/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=19922fcd93bfeac123719e319b7166f50660f847", "patch": "@@ -28,7 +28,7 @@ fn no_ann() -> pp_ann {\n type ps =\n     @{s: pp::printer,\n       cm: option<codemap>,\n-      //in: interner::interner<@~str>,\n+      intr: @interner::interner<@~str>,\n       comments: option<~[comments::cmnt]>,\n       literals: option<~[comments::lit]>,\n       mut cur_cmnt: uint,\n@@ -49,7 +49,8 @@ fn end(s: ps) {\n fn rust_printer(writer: io::writer) -> ps {\n     ret @{s: pp::mk_printer(writer, default_columns),\n           cm: none::<codemap>,\n-        //in: interner::mk::<@~str>(|x| str::hash(*x), |x,y| str::eq(*x, *y)),\n+          intr: @interner::mk::<@~str>(|x| str::hash(*x),\n+                                       |x,y| str::eq(*x, *y)),\n           comments: none::<~[comments::cmnt]>,\n           literals: none::<~[comments::lit]>,\n           mut cur_cmnt: 0u,\n@@ -66,7 +67,7 @@ const default_columns: uint = 78u;\n // Requires you to pass an input filename and reader so that\n // it can scan the input text for comments and literals to\n // copy forward.\n-fn print_crate(cm: codemap, //in: interner::interner<@~str>,\n+fn print_crate(cm: codemap, intr: @interner::interner<@~str>,\n                span_diagnostic: diagnostic::span_handler,\n                crate: @ast::crate, filename: ~str, in: io::reader,\n                out: io::writer, ann: pp_ann, is_expanded: bool) {\n@@ -75,7 +76,7 @@ fn print_crate(cm: codemap, //in: interner::interner<@~str>,\n     let s =\n         @{s: pp::mk_printer(out, default_columns),\n           cm: some(cm),\n-          //in: in,\n+          intr: intr,\n           comments: some(r.cmnts),\n           // If the code is post expansion, don't use the table of\n           // literals, since it doesn't correspond with the literals"}, {"sha": "e88c92d2110ca64d450add014bc2cf090a0fe726", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19922fcd93bfeac123719e319b7166f50660f847/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19922fcd93bfeac123719e319b7166f50660f847/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=19922fcd93bfeac123719e319b7166f50660f847", "patch": "@@ -327,7 +327,8 @@ fn pretty_print_input(sess: session, cfg: ast::crate_cfg, input: input,\n     let is_expanded = upto != cu_parse;\n     let src = codemap::get_filemap(sess.codemap, source_name(input)).src;\n     do io::with_str_reader(*src) |rdr| {\n-        pprust::print_crate(sess.codemap, sess.span_diagnostic, crate,\n+        pprust::print_crate(sess.codemap, sess.parse_sess.interner,\n+                            sess.span_diagnostic, crate,\n                             source_name(input),\n                             rdr, io::stdout(), ann, is_expanded);\n     }"}]}