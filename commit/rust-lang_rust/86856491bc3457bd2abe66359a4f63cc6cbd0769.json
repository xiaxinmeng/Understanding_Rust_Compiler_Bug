{"sha": "86856491bc3457bd2abe66359a4f63cc6cbd0769", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ODU2NDkxYmMzNDU3YmQyYWJlNjYzNTlhNGY2M2NjNmNiZDA3Njk=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-25T07:08:08Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-25T07:08:08Z"}, "message": "Format source codes", "tree": {"sha": "94e6143822dcff66731f1f0e67a0d51c902b62da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94e6143822dcff66731f1f0e67a0d51c902b62da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86856491bc3457bd2abe66359a4f63cc6cbd0769", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86856491bc3457bd2abe66359a4f63cc6cbd0769", "html_url": "https://github.com/rust-lang/rust/commit/86856491bc3457bd2abe66359a4f63cc6cbd0769", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86856491bc3457bd2abe66359a4f63cc6cbd0769/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2580d7a3107b99fb7cc43dd19d833396f2522e9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2580d7a3107b99fb7cc43dd19d833396f2522e9f", "html_url": "https://github.com/rust-lang/rust/commit/2580d7a3107b99fb7cc43dd19d833396f2522e9f"}], "stats": {"total": 76, "additions": 31, "deletions": 45}, "files": [{"sha": "0c73b64c6b22fd137d3d398e8fa7ea07e668633a", "filename": "src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86856491bc3457bd2abe66359a4f63cc6cbd0769/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86856491bc3457bd2abe66359a4f63cc6cbd0769/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=86856491bc3457bd2abe66359a4f63cc6cbd0769", "patch": "@@ -448,6 +448,8 @@ create_config! {\n         \"Report all, none or unnumbered occurrences of FIXME in source file comments\";\n     chain_indent: IndentStyle, IndentStyle::Block, \"Indentation of chain\";\n     chain_one_line_max: usize, 60, \"Maximum length of a chain to fit on a single line\";\n+    chain_split_single_child: bool, false, \"Split a chain with a single child if its length \\\n+                                            exceeds `chain_one_line_max`\";\n     reorder_imports: bool, false, \"Reorder import statements alphabetically\";\n     reorder_imports_in_group: bool, false, \"Reorder import statements in group\";\n     reorder_imported_names: bool, false,"}, {"sha": "4a415a5cc82ef4f7c12b014867e2d686701aedc1", "filename": "src/expr.rs", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/86856491bc3457bd2abe66359a4f63cc6cbd0769/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86856491bc3457bd2abe66359a4f63cc6cbd0769/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=86856491bc3457bd2abe66359a4f63cc6cbd0769", "patch": "@@ -98,20 +98,16 @@ fn format_expr(expr: &ast::Expr,\n         }\n         ast::ExprKind::Tup(ref items) => rewrite_tuple(context, items, expr.span, shape),\n         ast::ExprKind::While(ref cond, ref block, label) => {\n-            ControlFlow::new_while(None, cond, block, label, expr.span)\n-                .rewrite(context, shape)\n+            ControlFlow::new_while(None, cond, block, label, expr.span).rewrite(context, shape)\n         }\n         ast::ExprKind::WhileLet(ref pat, ref cond, ref block, label) => {\n-            ControlFlow::new_while(Some(pat), cond, block, label, expr.span)\n-                .rewrite(context, shape)\n+            ControlFlow::new_while(Some(pat), cond, block, label, expr.span).rewrite(context, shape)\n         }\n         ast::ExprKind::ForLoop(ref pat, ref cond, ref block, label) => {\n-            ControlFlow::new_for(pat, cond, block, label, expr.span)\n-                .rewrite(context, shape)\n+            ControlFlow::new_for(pat, cond, block, label, expr.span).rewrite(context, shape)\n         }\n         ast::ExprKind::Loop(ref block, label) => {\n-            ControlFlow::new_loop(block, label, expr.span)\n-                .rewrite(context, shape)\n+            ControlFlow::new_loop(block, label, expr.span).rewrite(context, shape)\n         }\n         ast::ExprKind::Block(ref block) => block.rewrite(context, shape),\n         ast::ExprKind::If(ref cond, ref if_block, ref else_block) => {\n@@ -179,12 +175,11 @@ fn format_expr(expr: &ast::Expr,\n         ast::ExprKind::Mac(ref mac) => {\n             // Failure to rewrite a marco should not imply failure to\n             // rewrite the expression.\n-            rewrite_macro(mac, None, context, shape, MacroPosition::Expression)\n-                .or_else(|| {\n-                             wrap_str(context.snippet(expr.span),\n-                                      context.config.max_width(),\n-                                      shape)\n-                         })\n+            rewrite_macro(mac, None, context, shape, MacroPosition::Expression).or_else(|| {\n+                wrap_str(context.snippet(expr.span),\n+                         context.config.max_width(),\n+                         shape)\n+            })\n         }\n         ast::ExprKind::Ret(None) => {\n             wrap_str(\"return\".to_owned(), context.config.max_width(), shape)\n@@ -324,8 +319,7 @@ pub fn rewrite_pair<LHS, RHS>(lhs: &LHS,\n                                   .checked_sub(shape.used_width() + prefix.len() + infix.len()));\n     let rhs_shape = match context.config.control_style() {\n         Style::Default => {\n-            try_opt!(shape.sub_width(suffix.len() + prefix.len()))\n-                .visual_indent(prefix.len())\n+            try_opt!(shape.sub_width(suffix.len() + prefix.len())).visual_indent(prefix.len())\n         }\n         Style::Rfc => try_opt!(shape.block_left(context.config.tab_spaces())),\n     };\n@@ -516,8 +510,7 @@ fn rewrite_closure(capture: ast::CaptureBy,\n \n     // 1 = space between `|...|` and body.\n     let extra_offset = extra_offset(&prefix, shape) + 1;\n-    let body_shape = try_opt!(shape.sub_width(extra_offset))\n-        .add_offset(extra_offset);\n+    let body_shape = try_opt!(shape.sub_width(extra_offset)).add_offset(extra_offset);\n \n     if let ast::ExprKind::Block(ref block) = body.node {\n         // The body of the closure is an empty block.\n@@ -859,8 +852,8 @@ impl<'a> ControlFlow<'a> {\n \n             let new_width = try_opt!(new_width.checked_sub(if_str.len()));\n             let else_expr = &else_node.stmts[0];\n-            let else_str = try_opt!(else_expr.rewrite(context,\n-                                                      Shape::legacy(new_width, Indent::empty())));\n+            let else_str =\n+                try_opt!(else_expr.rewrite(context, Shape::legacy(new_width, Indent::empty())));\n \n             if if_str.contains('\\n') || else_str.contains('\\n') {\n                 return None;"}, {"sha": "2d1fa33a90e3d746936f850cd8de7153a01986fb", "filename": "src/file_lines.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86856491bc3457bd2abe66359a4f63cc6cbd0769/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86856491bc3457bd2abe66359a4f63cc6cbd0769/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=86856491bc3457bd2abe66359a4f63cc6cbd0769", "patch": "@@ -135,8 +135,7 @@ impl FileLines {\n             Some(ref map) => map,\n         };\n \n-        match canonicalize_path_string(file_name)\n-                  .and_then(|file| map.get(&file)) {\n+        match canonicalize_path_string(file_name).and_then(|file| map.get(&file)) {\n             Some(ranges) => ranges.iter().any(f),\n             None => false,\n         }"}, {"sha": "37ffb4792ebe1ed56341e9fb059bbc6cec13ad82", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86856491bc3457bd2abe66359a4f63cc6cbd0769/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86856491bc3457bd2abe66359a4f63cc6cbd0769/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=86856491bc3457bd2abe66359a4f63cc6cbd0769", "patch": "@@ -1125,8 +1125,7 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n \n     let generics_indent = indent + result.len();\n     let generics_span = mk_sp(context.codemap.span_after(span, \"type\"), ty.span.lo);\n-    let shape = try_opt!(Shape::indented(generics_indent, context.config)\n-                             .sub_width(\" =\".len()));\n+    let shape = try_opt!(Shape::indented(generics_indent, context.config).sub_width(\" =\".len()));\n     let generics_str = try_opt!(rewrite_generics(context, generics, shape, generics_span));\n \n     result.push_str(&generics_str);"}, {"sha": "3448f8a446a2390c0ed80918163bb723d7406401", "filename": "src/lists.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86856491bc3457bd2abe66359a4f63cc6cbd0769/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86856491bc3457bd2abe66359a4f63cc6cbd0769/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=86856491bc3457bd2abe66359a4f63cc6cbd0769", "patch": "@@ -430,8 +430,7 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n             let post_snippet_trimmed = if post_snippet.starts_with(',') {\n                 post_snippet[1..].trim_matches(white_space)\n             } else if post_snippet.ends_with(',') {\n-                post_snippet[..(post_snippet.len() - 1)]\n-                    .trim_matches(white_space)\n+                post_snippet[..(post_snippet.len() - 1)].trim_matches(white_space)\n             } else {\n                 post_snippet\n             };\n@@ -529,8 +528,7 @@ pub fn struct_lit_shape(shape: Shape,\n                         -> Option<(Option<Shape>, Shape)> {\n     let v_shape = match context.config.struct_lit_style() {\n         IndentStyle::Visual => {\n-            try_opt!(try_opt!(shape.shrink_left(prefix_width))\n-                         .sub_width(suffix_width))\n+            try_opt!(try_opt!(shape.shrink_left(prefix_width)).sub_width(suffix_width))\n         }\n         IndentStyle::Block => {\n             let shape = shape.block_indent(context.config.tab_spaces());"}, {"sha": "3c6c54f42cfa89d14b033117f31409be9c5367c9", "filename": "src/macros.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86856491bc3457bd2abe66359a4f63cc6cbd0769/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86856491bc3457bd2abe66359a4f63cc6cbd0769/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=86856491bc3457bd2abe66359a4f63cc6cbd0769", "patch": "@@ -172,11 +172,12 @@ pub fn rewrite_macro(mac: &ast::Mac,\n         MacroStyle::Parens => {\n             // Format macro invocation as function call, forcing no trailing\n             // comma because not all macros support them.\n-            rewrite_call(context, &macro_name, &expr_vec, mac.span, shape)\n-                .map(|rw| match position {\n-                         MacroPosition::Item => format!(\"{};\", rw),\n-                         _ => rw,\n-                     })\n+            rewrite_call(context, &macro_name, &expr_vec, mac.span, shape).map(|rw| {\n+                match position {\n+                    MacroPosition::Item => format!(\"{};\", rw),\n+                    _ => rw,\n+                }\n+            })\n         }\n         MacroStyle::Brackets => {\n             let mac_shape = try_opt!(shape.shrink_left(macro_name.len()));"}, {"sha": "3d2c3b0ac9f3c64643df0979bf290c6c8b8986b5", "filename": "src/modules.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86856491bc3457bd2abe66359a4f63cc6cbd0769/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86856491bc3457bd2abe66359a4f63cc6cbd0769/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=86856491bc3457bd2abe66359a4f63cc6cbd0769", "patch": "@@ -68,8 +68,7 @@ fn module_file(id: ast::Ident,\n         return path;\n     }\n \n-    match parser::Parser::default_submod_path(id, dir_path, codemap)\n-              .result {\n+    match parser::Parser::default_submod_path(id, dir_path, codemap).result {\n         Ok(parser::ModulePathSuccess { path, .. }) => path,\n         Err(_) => panic!(\"Couldn't find module {}\", id),\n     }"}, {"sha": "365d205aef100a4187fe1018aa7f3d764a19c043", "filename": "src/string.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86856491bc3457bd2abe66359a4f63cc6cbd0769/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86856491bc3457bd2abe66359a4f63cc6cbd0769/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=86856491bc3457bd2abe66359a4f63cc6cbd0769", "patch": "@@ -35,8 +35,7 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n     let re = Regex::new(r\"([^\\\\](\\\\\\\\)*)\\\\[\\n\\r][[:space:]]*\").unwrap();\n     let stripped_str = re.replace_all(orig, \"$1\");\n \n-    let graphemes = UnicodeSegmentation::graphemes(&*stripped_str, false)\n-        .collect::<Vec<&str>>();\n+    let graphemes = UnicodeSegmentation::graphemes(&*stripped_str, false).collect::<Vec<&str>>();\n     let shape = fmt.shape.visual_indent(0);\n     let indent = shape.indent.to_string(fmt.config);\n     let punctuation = \":,;.\";"}, {"sha": "e80c558e51eadd1449bc1eb7adbd3140998d8dfb", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86856491bc3457bd2abe66359a4f63cc6cbd0769/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86856491bc3457bd2abe66359a4f63cc6cbd0769/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=86856491bc3457bd2abe66359a4f63cc6cbd0769", "patch": "@@ -332,8 +332,7 @@ pub fn wrap_str<S: AsRef<str>>(s: S, max_width: usize, shape: Shape) -> Option<S\n \n impl Rewrite for String {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        wrap_str(self, context.config.max_width(), shape)\n-            .map(ToOwned::to_owned)\n+        wrap_str(self, context.config.max_width(), shape).map(ToOwned::to_owned)\n     }\n }\n "}, {"sha": "58e44ee538100fc397e24674c6f964991c145335", "filename": "tests/system.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/86856491bc3457bd2abe66359a4f63cc6cbd0769/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86856491bc3457bd2abe66359a4f63cc6cbd0769/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=86856491bc3457bd2abe66359a4f63cc6cbd0769", "patch": "@@ -55,8 +55,7 @@ fn system_tests() {\n // the only difference is the coverage mode\n #[test]\n fn coverage_tests() {\n-    let files = fs::read_dir(\"tests/coverage/source\")\n-        .expect(\"Couldn't read source dir\");\n+    let files = fs::read_dir(\"tests/coverage/source\").expect(\"Couldn't read source dir\");\n     let files = files.map(get_path_string);\n     let (_reports, count, fails) = check_files(files);\n \n@@ -83,8 +82,7 @@ fn assert_output(source: &str, expected_filename: &str) {\n     let _ = filemap::write_all_files(&file_map, &mut out, &config);\n     let output = String::from_utf8(out).unwrap();\n \n-    let mut expected_file = fs::File::open(&expected_filename)\n-        .expect(\"Couldn't open target\");\n+    let mut expected_file = fs::File::open(&expected_filename).expect(\"Couldn't open target\");\n     let mut expected_text = String::new();\n     expected_file\n         .read_to_string(&mut expected_text)\n@@ -279,8 +277,7 @@ fn get_config(config_file: Option<&str>) -> Config {\n         }\n     };\n \n-    let mut def_config_file = fs::File::open(config_file_name)\n-        .expect(\"Couldn't open config\");\n+    let mut def_config_file = fs::File::open(config_file_name).expect(\"Couldn't open config\");\n     let mut def_config = String::new();\n     def_config_file\n         .read_to_string(&mut def_config)"}]}