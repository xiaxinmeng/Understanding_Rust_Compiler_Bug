{"sha": "886cfd68212bb0b4487d6a822476c350a6eb114f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NmNmZDY4MjEyYmIwYjQ0ODdkNmE4MjI0NzZjMzUwYTZlYjExNGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-18T10:41:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-18T10:41:46Z"}, "message": "Merge #6276\n\n6276: Extract call_info and completion into separate crates r=matklad a=popzxc\n\nAs it was discussed in [zulip](https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Completion.20refactoring), we need to move `completions` into a separate crate.\r\n\r\nUnfortunately, the dependency on `call_info::ActiveParameter` doesn't look easy to get rid of, and it seems to be a topic for a separate PR, thus I also extracted `call_info` into a separate crate (on which both `ide` and `completion` crates depend).\r\n\r\nAdditionally, a few `FIXME`s in doc-comments were resolved in order to make `tidy` happy.\r\n\n\nCo-authored-by: Igor Aleksanov <popzxc@yandex.ru>", "tree": {"sha": "5b144eabe1eaf62aa1ec5b804ee6fff00f5f84e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b144eabe1eaf62aa1ec5b804ee6fff00f5f84e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/886cfd68212bb0b4487d6a822476c350a6eb114f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfjBvqCRBK7hj4Ov3rIwAAdHIIAHMgdxXZNaaxErhu2JJdKxtx\n6gDHpGFTbw1dz3COkEUuvHC+Ale2H8cMuQswbFl9AG/mw1oRiepJ7CSslGqptOfj\n+z/dJJfJeiFmxW/2vVvShoie9tpdz9HMhjH4NQ4dLXvi9ZOzx5Xa7AQ2Dr+xcqQb\nUllYiCxtBNXZgPR85s+JSBkW66En9+QGQu5/GRdeeZauqsaz5ks2iTHB/dU+EOUJ\nAB2HunHL9ruU7p4I6uPYK30RvbxUalTwXMREWb1BoBHTbVFjpfwlIDum72zrvJEB\nHylKJQLcLCehXXi1EBdAKRSqOOZm9RbgsCc6mX49N/Qq0xLpKq055Z0LcwGKphQ=\n=Xspl\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b144eabe1eaf62aa1ec5b804ee6fff00f5f84e9\nparent 2067a410f31810f6e1941a86cdea0247c3b7d6f4\nparent 9e7c952bbddc2e6763c49f0511a295362e9893d6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1603017706 +0000\ncommitter GitHub <noreply@github.com> 1603017706 +0000\n\nMerge #6276\n\n6276: Extract call_info and completion into separate crates r=matklad a=popzxc\n\nAs it was discussed in [zulip](https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Completion.20refactoring), we need to move `completions` into a separate crate.\r\n\r\nUnfortunately, the dependency on `call_info::ActiveParameter` doesn't look easy to get rid of, and it seems to be a topic for a separate PR, thus I also extracted `call_info` into a separate crate (on which both `ide` and `completion` crates depend).\r\n\r\nAdditionally, a few `FIXME`s in doc-comments were resolved in order to make `tidy` happy.\r\n\n\nCo-authored-by: Igor Aleksanov <popzxc@yandex.ru>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/886cfd68212bb0b4487d6a822476c350a6eb114f", "html_url": "https://github.com/rust-lang/rust/commit/886cfd68212bb0b4487d6a822476c350a6eb114f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/886cfd68212bb0b4487d6a822476c350a6eb114f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2067a410f31810f6e1941a86cdea0247c3b7d6f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2067a410f31810f6e1941a86cdea0247c3b7d6f4", "html_url": "https://github.com/rust-lang/rust/commit/2067a410f31810f6e1941a86cdea0247c3b7d6f4"}, {"sha": "9e7c952bbddc2e6763c49f0511a295362e9893d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e7c952bbddc2e6763c49f0511a295362e9893d6", "html_url": "https://github.com/rust-lang/rust/commit/9e7c952bbddc2e6763c49f0511a295362e9893d6"}], "stats": {"total": 564, "additions": 337, "deletions": 227}, "files": [{"sha": "fa08b615225ea4f2f74136e93c63125c9a3bcc5d", "filename": "Cargo.lock", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -127,6 +127,20 @@ version = \"1.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"08c48aae112d48ed9f069b33538ea9e3e90aa263cfa3d1c24309612b1f7472de\"\n \n+[[package]]\n+name = \"call_info\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"base_db\",\n+ \"either\",\n+ \"expect-test\",\n+ \"hir\",\n+ \"ide_db\",\n+ \"stdx\",\n+ \"syntax\",\n+ \"test_utils\",\n+]\n+\n [[package]]\n name = \"cargo_metadata\"\n version = \"0.11.4\"\n@@ -249,6 +263,26 @@ dependencies = [\n  \"cc\",\n ]\n \n+[[package]]\n+name = \"completion\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"assists\",\n+ \"base_db\",\n+ \"call_info\",\n+ \"expect-test\",\n+ \"hir\",\n+ \"ide_db\",\n+ \"itertools\",\n+ \"log\",\n+ \"profile\",\n+ \"rustc-hash\",\n+ \"stdx\",\n+ \"syntax\",\n+ \"test_utils\",\n+ \"text_edit\",\n+]\n+\n [[package]]\n name = \"const_fn\"\n version = \"0.4.2\"\n@@ -609,7 +643,9 @@ version = \"0.0.0\"\n dependencies = [\n  \"assists\",\n  \"base_db\",\n+ \"call_info\",\n  \"cfg\",\n+ \"completion\",\n  \"either\",\n  \"expect-test\",\n  \"hir\","}, {"sha": "98c0bd6dbe55e65a3745ffc29e402cff37afcbba", "filename": "crates/call_info/Cargo.toml", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcall_info%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcall_info%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcall_info%2FCargo.toml?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -0,0 +1,26 @@\n+[package]\n+name = \"call_info\"\n+version = \"0.0.0\"\n+description = \"TBD\"\n+license = \"MIT OR Apache-2.0\"\n+authors = [\"rust-analyzer developers\"]\n+edition = \"2018\"\n+\n+[lib]\n+doctest = false\n+\n+[dependencies]\n+either = \"1.5.3\"\n+\n+stdx = { path = \"../stdx\", version = \"0.0.0\" }\n+syntax = { path = \"../syntax\", version = \"0.0.0\" }\n+base_db = { path = \"../base_db\", version = \"0.0.0\" }\n+ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n+test_utils = { path = \"../test_utils\", version = \"0.0.0\" }\n+\n+# call_info crate should depend only on the top-level `hir` package. if you need\n+# something from some `hir_xxx` subpackage, reexport the API via `hir`.\n+hir = { path = \"../hir\", version = \"0.0.0\" }\n+\n+[dev-dependencies]\n+expect-test = \"1.0\""}, {"sha": "c45406c2536e275e39d0ef2f6717d06918dd8764", "filename": "crates/call_info/src/lib.rs", "status": "renamed", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcall_info%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcall_info%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcall_info%2Fsrc%2Flib.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -1,4 +1,5 @@\n-//! FIXME: write short doc here\n+//! This crate provides primitives for tracking the information about a call site.\n+use base_db::FilePosition;\n use either::Either;\n use hir::{HasAttrs, HirDisplay, Semantics, Type};\n use ide_db::RootDatabase;\n@@ -9,8 +10,6 @@ use syntax::{\n };\n use test_utils::mark;\n \n-use crate::FilePosition;\n-\n /// Contains information about a call site. Specifically the\n /// `FunctionSignature`and current parameter.\n #[derive(Debug)]\n@@ -40,7 +39,7 @@ impl CallInfo {\n }\n \n /// Computes parameter information for the given call expression.\n-pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<CallInfo> {\n+pub fn call_info(db: &RootDatabase, position: FilePosition) -> Option<CallInfo> {\n     let sema = Semantics::new(db);\n     let file = sema.parse(position.file_id);\n     let file = file.syntax();\n@@ -141,13 +140,13 @@ fn call_info_impl(\n }\n \n #[derive(Debug)]\n-pub(crate) struct ActiveParameter {\n-    pub(crate) ty: Type,\n-    pub(crate) name: String,\n+pub struct ActiveParameter {\n+    pub ty: Type,\n+    pub name: String,\n }\n \n impl ActiveParameter {\n-    pub(crate) fn at(db: &RootDatabase, position: FilePosition) -> Option<Self> {\n+    pub fn at(db: &RootDatabase, position: FilePosition) -> Option<Self> {\n         let sema = Semantics::new(db);\n         let file = sema.parse(position.file_id);\n         let file = file.syntax();\n@@ -156,7 +155,7 @@ impl ActiveParameter {\n         Self::at_token(&sema, token)\n     }\n \n-    pub(crate) fn at_token(sema: &Semantics<RootDatabase>, token: SyntaxToken) -> Option<Self> {\n+    pub fn at_token(sema: &Semantics<RootDatabase>, token: SyntaxToken) -> Option<Self> {\n         let (signature, active_parameter) = call_info_impl(&sema, token)?;\n \n         let idx = active_parameter?;\n@@ -172,7 +171,7 @@ impl ActiveParameter {\n }\n \n #[derive(Debug)]\n-pub(crate) enum FnCallNode {\n+pub enum FnCallNode {\n     CallExpr(ast::CallExpr),\n     MethodCallExpr(ast::MethodCallExpr),\n }\n@@ -196,7 +195,7 @@ impl FnCallNode {\n         })\n     }\n \n-    pub(crate) fn with_node_exact(node: &SyntaxNode) -> Option<FnCallNode> {\n+    pub fn with_node_exact(node: &SyntaxNode) -> Option<FnCallNode> {\n         match_ast! {\n             match node {\n                 ast::CallExpr(it) => Some(FnCallNode::CallExpr(it)),\n@@ -206,7 +205,7 @@ impl FnCallNode {\n         }\n     }\n \n-    pub(crate) fn name_ref(&self) -> Option<ast::NameRef> {\n+    pub fn name_ref(&self) -> Option<ast::NameRef> {\n         match self {\n             FnCallNode::CallExpr(call_expr) => Some(match call_expr.expr()? {\n                 ast::Expr::PathExpr(path_expr) => path_expr.path()?.segment()?.name_ref()?,\n@@ -229,14 +228,28 @@ impl FnCallNode {\n \n #[cfg(test)]\n mod tests {\n+    use base_db::{fixture::ChangeFixture, FilePosition};\n     use expect_test::{expect, Expect};\n-    use test_utils::mark;\n-\n-    use crate::fixture;\n+    use ide_db::RootDatabase;\n+    use test_utils::{mark, RangeOrOffset};\n+\n+    /// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n+    pub(crate) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {\n+        let change_fixture = ChangeFixture::parse(ra_fixture);\n+        let mut database = RootDatabase::default();\n+        database.apply_change(change_fixture.change);\n+        let (file_id, range_or_offset) =\n+            change_fixture.file_position.expect(\"expected a marker (<|>)\");\n+        let offset = match range_or_offset {\n+            RangeOrOffset::Range(_) => panic!(),\n+            RangeOrOffset::Offset(it) => it,\n+        };\n+        (database, FilePosition { file_id, offset })\n+    }\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let (analysis, position) = fixture::position(ra_fixture);\n-        let call_info = analysis.call_info(position).unwrap();\n+        let (db, position) = position(ra_fixture);\n+        let call_info = crate::call_info(&db, position);\n         let actual = match call_info {\n             Some(call_info) => {\n                 let docs = match &call_info.doc {", "previous_filename": "crates/ide/src/call_info.rs"}, {"sha": "99087c73fb081b4df51c0c71126649254eb64e44", "filename": "crates/completion/Cargo.toml", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2FCargo.toml?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -0,0 +1,32 @@\n+[package]\n+name = \"completion\"\n+version = \"0.0.0\"\n+description = \"TBD\"\n+license = \"MIT OR Apache-2.0\"\n+authors = [\"rust-analyzer developers\"]\n+edition = \"2018\"\n+\n+[lib]\n+doctest = false\n+\n+[dependencies]\n+itertools = \"0.9.0\"\n+log = \"0.4.8\"\n+rustc-hash = \"1.1.0\"\n+\n+syntax = { path = \"../syntax\", version = \"0.0.0\" }\n+text_edit = { path = \"../text_edit\", version = \"0.0.0\" }\n+base_db = { path = \"../base_db\", version = \"0.0.0\" }\n+ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n+profile = { path = \"../profile\", version = \"0.0.0\" }\n+test_utils = { path = \"../test_utils\", version = \"0.0.0\" }\n+assists = { path = \"../assists\", version = \"0.0.0\" }\n+call_info = { path = \"../call_info\", version = \"0.0.0\" }\n+\n+# completions crate should depend only on the top-level `hir` package. if you need\n+# something from some `hir_xxx` subpackage, reexport the API via `hir`.\n+hir = { path = \"../hir\", version = \"0.0.0\" }\n+\n+[dev-dependencies]\n+expect-test = \"1.0\"\n+stdx = { path = \"../stdx\", version = \"0.0.0\" }"}, {"sha": "ea8ad256a489162e65bedeeef845d270b8055c8e", "filename": "crates/completion/src/complete_attribute.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcomplete_attribute.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -6,7 +6,7 @@\n use rustc_hash::FxHashSet;\n use syntax::{ast, AstNode, SyntaxKind};\n \n-use crate::completion::{\n+use crate::{\n     completion_context::CompletionContext,\n     completion_item::{CompletionItem, CompletionItemKind, CompletionKind, Completions},\n     generated_features::FEATURES,\n@@ -389,7 +389,7 @@ const DEFAULT_LINT_COMPLETIONS: &[LintCompletion] = &[\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::completion::{test_utils::completion_list, CompletionKind};\n+    use crate::{test_utils::completion_list, CompletionKind};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let actual = completion_list(ra_fixture, CompletionKind::Attribute);", "previous_filename": "crates/ide/src/completion/complete_attribute.rs"}, {"sha": "0eabb48aed88ab20a888136a7c0f8b155d9c91ad", "filename": "crates/completion/src/complete_dot.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcomplete_dot.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -4,7 +4,7 @@ use hir::{HasVisibility, Type};\n use rustc_hash::FxHashSet;\n use test_utils::mark;\n \n-use crate::completion::{completion_context::CompletionContext, completion_item::Completions};\n+use crate::{completion_context::CompletionContext, completion_item::Completions};\n \n /// Complete dot accesses, i.e. fields or methods.\n pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -64,7 +64,7 @@ mod tests {\n     use expect_test::{expect, Expect};\n     use test_utils::mark;\n \n-    use crate::completion::{test_utils::completion_list, CompletionKind};\n+    use crate::{test_utils::completion_list, CompletionKind};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let actual = completion_list(ra_fixture, CompletionKind::Reference);", "previous_filename": "crates/ide/src/completion/complete_dot.rs"}, {"sha": "918996727acea281158f6a2aad16f12d8bfb5a41", "filename": "crates/completion/src/complete_fn_param.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_fn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_fn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcomplete_fn_param.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -6,7 +6,7 @@ use syntax::{\n     match_ast, AstNode,\n };\n \n-use crate::completion::{CompletionContext, CompletionItem, CompletionKind, Completions};\n+use crate::{CompletionContext, CompletionItem, CompletionKind, Completions};\n \n /// Complete repeated parameters, both name and type. For example, if all\n /// functions in a file have a `spam: &mut Spam` parameter, a completion with\n@@ -68,7 +68,7 @@ pub(super) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::completion::{test_utils::completion_list, CompletionKind};\n+    use crate::{test_utils::completion_list, CompletionKind};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let actual = completion_list(ra_fixture, CompletionKind::Magic);", "previous_filename": "crates/ide/src/completion/complete_fn_param.rs"}, {"sha": "ace914f3f87b0ce4f9a4f7c0597b68a8da932cbb", "filename": "crates/completion/src/complete_keyword.rs", "status": "renamed", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcomplete_keyword.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -1,11 +1,9 @@\n-//! FIXME: write short doc here\n+//! Completes keywords.\n \n use syntax::{ast, SyntaxKind};\n use test_utils::mark;\n \n-use crate::completion::{\n-    CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n-};\n+use crate::{CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions};\n \n pub(super) fn complete_use_tree_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n     // complete keyword \"crate\" in use stmt\n@@ -177,7 +175,7 @@ fn complete_return(\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::completion::{\n+    use crate::{\n         test_utils::{check_edit, completion_list},\n         CompletionKind,\n     };", "previous_filename": "crates/ide/src/completion/complete_keyword.rs"}, {"sha": "d1d8c23d2c5274fe2ad137116c068081924b00cf", "filename": "crates/completion/src/complete_macro_in_item_position.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_macro_in_item_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_macro_in_item_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcomplete_macro_in_item_position.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -1,6 +1,6 @@\n-//! FIXME: write short doc here\n+//! Completes macro invocations used in item position.\n \n-use crate::completion::{CompletionContext, Completions};\n+use crate::{CompletionContext, Completions};\n \n pub(super) fn complete_macro_in_item_position(acc: &mut Completions, ctx: &CompletionContext) {\n     // Show only macros in top level.\n@@ -17,7 +17,7 @@ pub(super) fn complete_macro_in_item_position(acc: &mut Completions, ctx: &Compl\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::completion::{test_utils::completion_list, CompletionKind};\n+    use crate::{test_utils::completion_list, CompletionKind};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let actual = completion_list(ra_fixture, CompletionKind::Reference);", "previous_filename": "crates/ide/src/completion/complete_macro_in_item_position.rs"}, {"sha": "35a57aba346d6f19b06e6f4dfe0488e004da5dba", "filename": "crates/completion/src/complete_mod.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcomplete_mod.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -150,7 +150,7 @@ fn module_chain_to_containing_module_file(\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::{test_utils::completion_list, CompletionKind};\n+    use crate::{test_utils::completion_list, CompletionKind};\n     use expect_test::{expect, Expect};\n \n     fn check(ra_fixture: &str, expect: Expect) {", "previous_filename": "crates/ide/src/completion/complete_mod.rs"}, {"sha": "5606dcdd9c96fd8d1461074afd290d90044bcde2", "filename": "crates/completion/src/complete_pattern.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcomplete_pattern.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -1,6 +1,6 @@\n-//! FIXME: write short doc here\n+//! Completes constats and paths in patterns.\n \n-use crate::completion::{CompletionContext, Completions};\n+use crate::{CompletionContext, Completions};\n \n /// Completes constats and paths in patterns.\n pub(super) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -35,7 +35,7 @@ pub(super) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::completion::{test_utils::completion_list, CompletionKind};\n+    use crate::{test_utils::completion_list, CompletionKind};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let actual = completion_list(ra_fixture, CompletionKind::Reference);", "previous_filename": "crates/ide/src/completion/complete_pattern.rs"}, {"sha": "700573cf2ce2ab707c11704f84734215f422bd63", "filename": "crates/completion/src/complete_postfix.rs", "status": "renamed", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcomplete_postfix.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! Postfix completions, like `Ok(10).ifl<|>` => `if let Ok() = Ok(10) { <|> }`.\n \n mod format_like;\n \n@@ -11,11 +11,9 @@ use text_edit::TextEdit;\n \n use self::format_like::add_format_like_completions;\n use crate::{\n-    completion::{\n-        completion_config::SnippetCap,\n-        completion_context::CompletionContext,\n-        completion_item::{Builder, CompletionKind, Completions},\n-    },\n+    completion_config::SnippetCap,\n+    completion_context::CompletionContext,\n+    completion_item::{Builder, CompletionKind, Completions},\n     CompletionItem, CompletionItemKind,\n };\n \n@@ -263,7 +261,7 @@ fn postfix_snippet(\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::completion::{\n+    use crate::{\n         test_utils::{check_edit, completion_list},\n         CompletionKind,\n     };", "previous_filename": "crates/ide/src/completion/complete_postfix.rs"}, {"sha": "205c384e214121ed2674b6785a43f2ac512c6fe7", "filename": "crates/completion/src/complete_postfix/format_like.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_postfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_postfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcomplete_postfix%2Fformat_like.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -14,7 +14,7 @@\n //   + `logw` -> `log::warn!(...)`\n //   + `loge` -> `log::error!(...)`\n \n-use crate::completion::{\n+use crate::{\n     complete_postfix::postfix_snippet, completion_config::SnippetCap,\n     completion_context::CompletionContext, completion_item::Completions,\n };", "previous_filename": "crates/ide/src/completion/complete_postfix/format_like.rs"}, {"sha": "80b271fdf9dba4589a8151b121d750a85bb8b499", "filename": "crates/completion/src/complete_qualified_path.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_qualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_qualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcomplete_qualified_path.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -5,7 +5,7 @@ use rustc_hash::FxHashSet;\n use syntax::AstNode;\n use test_utils::mark;\n \n-use crate::completion::{CompletionContext, Completions};\n+use crate::{CompletionContext, Completions};\n \n pub(super) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n     let path = match &ctx.path_qual {\n@@ -149,7 +149,7 @@ mod tests {\n     use expect_test::{expect, Expect};\n     use test_utils::mark;\n \n-    use crate::completion::{\n+    use crate::{\n         test_utils::{check_edit, completion_list},\n         CompletionKind,\n     };", "previous_filename": "crates/ide/src/completion/complete_qualified_path.rs"}, {"sha": "129ddc0559e54489b6aeb217cd751f7b0968a00f", "filename": "crates/completion/src/complete_record.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_record.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_record.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcomplete_record.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -1,5 +1,5 @@\n //! Complete fields in record literals and patterns.\n-use crate::completion::{CompletionContext, Completions};\n+use crate::{CompletionContext, Completions};\n \n pub(super) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     let missing_fields = match (ctx.record_pat_syntax.as_ref(), ctx.record_lit_syntax.as_ref()) {\n@@ -20,7 +20,7 @@ pub(super) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::completion::{test_utils::completion_list, CompletionKind};\n+    use crate::{test_utils::completion_list, CompletionKind};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let actual = completion_list(ra_fixture, CompletionKind::Reference);", "previous_filename": "crates/ide/src/completion/complete_record.rs"}, {"sha": "06096722b47618a74c45ea9e5c153d52afa8a8c1", "filename": "crates/completion/src/complete_snippet.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcomplete_snippet.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -1,6 +1,6 @@\n-//! FIXME: write short doc here\n+//! This file provides snippet completions, like `pd` => `eprintln!(...)`.\n \n-use crate::completion::{\n+use crate::{\n     completion_config::SnippetCap, completion_item::Builder, CompletionContext, CompletionItem,\n     CompletionItemKind, CompletionKind, Completions,\n };\n@@ -71,7 +71,7 @@ fn ${1:feature}() {\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::completion::{test_utils::completion_list, CompletionKind};\n+    use crate::{test_utils::completion_list, CompletionKind};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let actual = completion_list(ra_fixture, CompletionKind::Snippet);", "previous_filename": "crates/ide/src/completion/complete_snippet.rs"}, {"sha": "c06af99e22663f4dfbcb5fb6bee51534027c4468", "filename": "crates/completion/src/complete_trait_impl.rs", "status": "renamed", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcomplete_trait_impl.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -35,15 +35,18 @@ use assists::utils::get_missing_assoc_items;\n use hir::{self, HasAttrs, HasSource};\n use syntax::{\n     ast::{self, edit, Impl},\n+    display::function_declaration,\n     AstNode, SyntaxKind, SyntaxNode, TextRange, T,\n };\n use text_edit::TextEdit;\n \n use crate::{\n-    completion::{\n-        CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n-    },\n-    display::function_declaration,\n+    CompletionContext,\n+    CompletionItem,\n+    CompletionItemKind,\n+    CompletionKind,\n+    Completions,\n+    // display::function_declaration,\n };\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -237,7 +240,7 @@ fn make_const_compl_syntax(const_: &ast::Const) -> String {\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::completion::{\n+    use crate::{\n         test_utils::{check_edit, completion_list},\n         CompletionKind,\n     };", "previous_filename": "crates/ide/src/completion/complete_trait_impl.rs"}, {"sha": "5464a160dd629cf08117cc953eef90152be884ba", "filename": "crates/completion/src/complete_unqualified_path.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_unqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcomplete_unqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcomplete_unqualified_path.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -4,7 +4,7 @@ use hir::{Adt, ModuleDef, ScopeDef, Type};\n use syntax::AstNode;\n use test_utils::mark;\n \n-use crate::completion::{CompletionContext, Completions};\n+use crate::{CompletionContext, Completions};\n \n pub(super) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n     if !(ctx.is_trivial_path || ctx.is_pat_binding_or_const) {\n@@ -68,7 +68,7 @@ mod tests {\n     use expect_test::{expect, Expect};\n     use test_utils::mark;\n \n-    use crate::completion::{\n+    use crate::{\n         test_utils::{check_edit, completion_list},\n         CompletionKind,\n     };", "previous_filename": "crates/ide/src/completion/complete_unqualified_path.rs"}, {"sha": "71b49ace8bfb0e38a746ff34866d9f3a3cfb46dc", "filename": "crates/completion/src/completion_config.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcompletion_config.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcompletion_config.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletion_config.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "previous_filename": "crates/ide/src/completion/completion_config.rs"}, {"sha": "dc4e136c68e79490b98819e030d5283271ae6637", "filename": "crates/completion/src/completion_context.rs", "status": "renamed", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletion_context.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -1,6 +1,7 @@\n-//! FIXME: write short doc here\n+//! See `CompletionContext` structure.\n \n-use base_db::SourceDatabase;\n+use base_db::{FilePosition, SourceDatabase};\n+use call_info::ActiveParameter;\n use hir::{Local, ScopeDef, Semantics, SemanticsScope, Type};\n use ide_db::RootDatabase;\n use syntax::{\n@@ -13,18 +14,14 @@ use test_utils::mark;\n use text_edit::Indel;\n \n use crate::{\n-    call_info::ActiveParameter,\n-    completion::{\n-        patterns::{\n-            fn_is_prev, for_is_prev2, has_bind_pat_parent, has_block_expr_parent,\n-            has_field_list_parent, has_impl_as_prev_sibling, has_impl_parent,\n-            has_item_list_or_source_file_parent, has_ref_parent, has_trait_as_prev_sibling,\n-            has_trait_parent, if_is_prev, inside_impl_trait_block, is_in_loop_body, is_match_arm,\n-            unsafe_is_prev,\n-        },\n-        CompletionConfig,\n+    patterns::{\n+        fn_is_prev, for_is_prev2, has_bind_pat_parent, has_block_expr_parent,\n+        has_field_list_parent, has_impl_as_prev_sibling, has_impl_parent,\n+        has_item_list_or_source_file_parent, has_ref_parent, has_trait_as_prev_sibling,\n+        has_trait_parent, if_is_prev, inside_impl_trait_block, is_in_loop_body, is_match_arm,\n+        unsafe_is_prev,\n     },\n-    FilePosition,\n+    CompletionConfig,\n };\n \n /// `CompletionContext` is created early during completion to figure out, where", "previous_filename": "crates/ide/src/completion/completion_context.rs"}, {"sha": "f8be0ad2b4093cc69a51c308ab210e027ae13a99", "filename": "crates/completion/src/completion_item.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletion_item.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -1,12 +1,12 @@\n-//! FIXME: write short doc here\n+//! See `CompletionItem` structure.\n \n use std::fmt;\n \n use hir::Documentation;\n use syntax::TextRange;\n use text_edit::TextEdit;\n \n-use crate::completion::completion_config::SnippetCap;\n+use crate::completion_config::SnippetCap;\n \n /// `CompletionItem` describes a single completion variant in the editor pop-up.\n /// It is basically a POD with various properties. To construct a\n@@ -360,15 +360,15 @@ impl<'a> Into<CompletionItem> for Builder {\n \n /// Represents an in-progress set of completions being built.\n #[derive(Debug, Default)]\n-pub(crate) struct Completions {\n+pub struct Completions {\n     buf: Vec<CompletionItem>,\n }\n \n impl Completions {\n-    pub(crate) fn add(&mut self, item: impl Into<CompletionItem>) {\n+    pub fn add(&mut self, item: impl Into<CompletionItem>) {\n         self.buf.push(item.into())\n     }\n-    pub(crate) fn add_all<I>(&mut self, items: I)\n+    pub fn add_all<I>(&mut self, items: I)\n     where\n         I: IntoIterator,\n         I::Item: Into<CompletionItem>,", "previous_filename": "crates/ide/src/completion/completion_item.rs"}, {"sha": "090cad2db3837efe90bb85cc7c15152cf947c7ec", "filename": "crates/completion/src/generated_features.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fgenerated_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fgenerated_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fgenerated_features.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "previous_filename": "crates/ide/src/completion/generated_features.rs"}, {"sha": "9988fe7dfcfc0396983933127b058d288243ccf9", "filename": "crates/completion/src/lib.rs", "status": "renamed", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -1,3 +1,5 @@\n+//! `completions` crate provides utilities for generating completions of user input.\n+\n mod completion_config;\n mod completion_item;\n mod completion_context;\n@@ -21,17 +23,15 @@ mod complete_macro_in_item_position;\n mod complete_trait_impl;\n mod complete_mod;\n \n+use base_db::FilePosition;\n use ide_db::RootDatabase;\n \n use crate::{\n-    completion::{\n-        completion_context::CompletionContext,\n-        completion_item::{CompletionKind, Completions},\n-    },\n-    FilePosition,\n+    completion_context::CompletionContext,\n+    completion_item::{CompletionKind, Completions},\n };\n \n-pub use crate::completion::{\n+pub use crate::{\n     completion_config::CompletionConfig,\n     completion_item::{CompletionItem, CompletionItemKind, CompletionScore, InsertTextFormat},\n };\n@@ -105,7 +105,7 @@ pub use crate::completion::{\n /// `foo` *should* be present among the completion variants. Filtering by\n /// identifier prefix/fuzzy match should be done higher in the stack, together\n /// with ordering of completions (currently this is done by the client).\n-pub(crate) fn completions(\n+pub fn completions(\n     db: &RootDatabase,\n     config: &CompletionConfig,\n     position: FilePosition,\n@@ -139,18 +139,18 @@ pub(crate) fn completions(\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::completion_config::CompletionConfig;\n-    use crate::fixture;\n+    use crate::completion_config::CompletionConfig;\n+    use crate::test_utils;\n \n     struct DetailAndDocumentation<'a> {\n         detail: &'a str,\n         documentation: &'a str,\n     }\n \n     fn check_detail_and_documentation(ra_fixture: &str, expected: DetailAndDocumentation) {\n-        let (analysis, position) = fixture::position(ra_fixture);\n+        let (db, position) = test_utils::position(ra_fixture);\n         let config = CompletionConfig::default();\n-        let completions = analysis.completions(&config, position).unwrap().unwrap();\n+        let completions: Vec<_> = crate::completions(&db, &config, position).unwrap().into();\n         for item in completions {\n             if item.detail() == Some(expected.detail) {\n                 let opt = item.documentation();\n@@ -163,14 +163,18 @@ mod tests {\n     }\n \n     fn check_no_completion(ra_fixture: &str) {\n-        let (analysis, position) = fixture::position(ra_fixture);\n+        let (db, position) = test_utils::position(ra_fixture);\n         let config = CompletionConfig::default();\n-        analysis.completions(&config, position).unwrap();\n \n-        let completions: Option<Vec<String>> = analysis\n-            .completions(&config, position)\n-            .unwrap()\n-            .and_then(|completions| if completions.is_empty() { None } else { Some(completions) })\n+        let completions: Option<Vec<String>> = crate::completions(&db, &config, position)\n+            .and_then(|completions| {\n+                let completions: Vec<_> = completions.into();\n+                if completions.is_empty() {\n+                    None\n+                } else {\n+                    Some(completions)\n+                }\n+            })\n             .map(|completions| {\n                 completions.into_iter().map(|completion| format!(\"{:?}\", completion)).collect()\n             });", "previous_filename": "crates/ide/src/completion.rs"}, {"sha": "b0f35f9bf5bc5a4e502b53c986212b999cd26962", "filename": "crates/completion/src/patterns.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fpatterns.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -9,7 +9,7 @@ use syntax::{\n };\n \n #[cfg(test)]\n-use crate::completion::test_utils::{check_pattern_is_applicable, check_pattern_is_not_applicable};\n+use crate::test_utils::{check_pattern_is_applicable, check_pattern_is_not_applicable};\n \n pub(crate) fn has_trait_parent(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element)", "previous_filename": "crates/ide/src/completion/patterns.rs"}, {"sha": "0a0dc1ce507f51dad1c90f5a792bb1d9223f14f2", "filename": "crates/completion/src/presentation.rs", "status": "renamed", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fpresentation.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -3,16 +3,17 @@\n \n use hir::{HasAttrs, HasSource, HirDisplay, ModPath, ScopeDef, StructKind, Type};\n use itertools::Itertools;\n-use syntax::ast::NameOwner;\n+use syntax::{ast::NameOwner, display::*};\n use test_utils::mark;\n \n use crate::{\n-    completion::{\n+    // display::{const_label, function_declaration, macro_label, type_label},\n+    CompletionScore,\n+    RootDatabase,\n+    {\n         completion_item::Builder, CompletionContext, CompletionItem, CompletionItemKind,\n         CompletionKind, Completions,\n     },\n-    display::{const_label, function_declaration, macro_label, type_label},\n-    CompletionScore, RootDatabase,\n };\n \n impl Completions {\n@@ -487,13 +488,8 @@ mod tests {\n     use test_utils::mark;\n \n     use crate::{\n-        completion::{\n-            test_utils::{\n-                check_edit, check_edit_with_config, do_completion, get_all_completion_items,\n-            },\n-            CompletionConfig, CompletionKind,\n-        },\n-        CompletionScore,\n+        test_utils::{check_edit, check_edit_with_config, do_completion, get_all_completion_items},\n+        CompletionConfig, CompletionKind, CompletionScore,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n@@ -1277,7 +1273,6 @@ fn go(world: &WorldSnapshot) { go(w<|>) }\n \n     #[test]\n     fn too_many_arguments() {\n-        mark::check!(too_many_arguments);\n         check_scores(\n             r#\"\n struct Foo;", "previous_filename": "crates/ide/src/completion/presentation.rs"}, {"sha": "f2cf2561f337df5959ea87a3694ea7ccb691ac4b", "filename": "crates/completion/src/test_utils.rs", "status": "renamed", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Ftest_utils.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -1,15 +1,27 @@\n //! Runs completion for testing purposes.\n \n+use base_db::{fixture::ChangeFixture, FileLoader, FilePosition};\n use hir::Semantics;\n+use ide_db::RootDatabase;\n use itertools::Itertools;\n use stdx::{format_to, trim_indent};\n use syntax::{AstNode, NodeOrToken, SyntaxElement};\n-use test_utils::assert_eq_text;\n+use test_utils::{assert_eq_text, RangeOrOffset};\n \n-use crate::{\n-    completion::{completion_item::CompletionKind, CompletionConfig},\n-    fixture, CompletionItem,\n-};\n+use crate::{completion_item::CompletionKind, CompletionConfig, CompletionItem};\n+\n+/// Creates analysis from a multi-file fixture, returns positions marked with <|>.\n+pub(crate) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {\n+    let change_fixture = ChangeFixture::parse(ra_fixture);\n+    let mut database = RootDatabase::default();\n+    database.apply_change(change_fixture.change);\n+    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker (<|>)\");\n+    let offset = match range_or_offset {\n+        RangeOrOffset::Range(_) => panic!(),\n+        RangeOrOffset::Offset(it) => it,\n+    };\n+    (database, FilePosition { file_id, offset })\n+}\n \n pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionItem> {\n     do_completion_with_config(CompletionConfig::default(), code, kind)\n@@ -79,47 +91,40 @@ pub(crate) fn check_edit_with_config(\n     ra_fixture_after: &str,\n ) {\n     let ra_fixture_after = trim_indent(ra_fixture_after);\n-    let (analysis, position) = fixture::position(ra_fixture_before);\n+    let (db, position) = position(ra_fixture_before);\n     let completions: Vec<CompletionItem> =\n-        analysis.completions(&config, position).unwrap().unwrap().into();\n+        crate::completions(&db, &config, position).unwrap().into();\n     let (completion,) = completions\n         .iter()\n         .filter(|it| it.lookup() == what)\n         .collect_tuple()\n         .unwrap_or_else(|| panic!(\"can't find {:?} completion in {:#?}\", what, completions));\n-    let mut actual = analysis.file_text(position.file_id).unwrap().to_string();\n+    let mut actual = db.file_text(position.file_id).to_string();\n     completion.text_edit().apply(&mut actual);\n     assert_eq_text!(&ra_fixture_after, &actual)\n }\n \n pub(crate) fn check_pattern_is_applicable(code: &str, check: fn(SyntaxElement) -> bool) {\n-    let (analysis, pos) = fixture::position(code);\n-    analysis\n-        .with_db(|db| {\n-            let sema = Semantics::new(db);\n-            let original_file = sema.parse(pos.file_id);\n-            let token = original_file.syntax().token_at_offset(pos.offset).left_biased().unwrap();\n-            assert!(check(NodeOrToken::Token(token)));\n-        })\n-        .unwrap();\n+    let (db, pos) = position(code);\n+\n+    let sema = Semantics::new(&db);\n+    let original_file = sema.parse(pos.file_id);\n+    let token = original_file.syntax().token_at_offset(pos.offset).left_biased().unwrap();\n+    assert!(check(NodeOrToken::Token(token)));\n }\n \n pub(crate) fn check_pattern_is_not_applicable(code: &str, check: fn(SyntaxElement) -> bool) {\n-    let (analysis, pos) = fixture::position(code);\n-    analysis\n-        .with_db(|db| {\n-            let sema = Semantics::new(db);\n-            let original_file = sema.parse(pos.file_id);\n-            let token = original_file.syntax().token_at_offset(pos.offset).left_biased().unwrap();\n-            assert!(!check(NodeOrToken::Token(token)));\n-        })\n-        .unwrap();\n+    let (db, pos) = position(code);\n+    let sema = Semantics::new(&db);\n+    let original_file = sema.parse(pos.file_id);\n+    let token = original_file.syntax().token_at_offset(pos.offset).left_biased().unwrap();\n+    assert!(!check(NodeOrToken::Token(token)));\n }\n \n pub(crate) fn get_all_completion_items(\n     config: CompletionConfig,\n     code: &str,\n ) -> Vec<CompletionItem> {\n-    let (analysis, position) = fixture::position(code);\n-    analysis.completions(&config, position).unwrap().unwrap().into()\n+    let (db, position) = position(code);\n+    crate::completions(&db, &config, position).unwrap().into()\n }", "previous_filename": "crates/ide/src/completion/test_utils.rs"}, {"sha": "63299dc31dcf66aae2a1dea5cdb62c95135dfdbc", "filename": "crates/ide/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2FCargo.toml?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -30,6 +30,8 @@ profile = { path = \"../profile\", version = \"0.0.0\" }\n test_utils = { path = \"../test_utils\", version = \"0.0.0\" }\n assists = { path = \"../assists\", version = \"0.0.0\" }\n ssr = { path = \"../ssr\", version = \"0.0.0\" }\n+call_info = { path = \"../call_info\", version = \"0.0.0\" }\n+completion = { path = \"../completion\", version = \"0.0.0\" }\n \n # ide should depend only on the top-level `hir` package. if you need\n # something from some `hir_xxx` subpackage, reexport the API via `hir`."}, {"sha": "9d6433fe078c50cee58bc9645efb597b1bc00662", "filename": "crates/ide/src/call_hierarchy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -2,13 +2,13 @@\n \n use indexmap::IndexMap;\n \n+use call_info::FnCallNode;\n use hir::Semantics;\n use ide_db::RootDatabase;\n use syntax::{ast, match_ast, AstNode, TextRange};\n \n use crate::{\n-    call_info::FnCallNode, display::ToNav, goto_definition, references, FilePosition,\n-    NavigationTarget, RangeInfo,\n+    display::ToNav, goto_definition, references, FilePosition, NavigationTarget, RangeInfo,\n };\n \n #[derive(Debug, Clone)]"}, {"sha": "0650915c531450960cc0ef3479efcdf494fc8edc", "filename": "crates/ide/src/display.rs", "status": "modified", "additions": 1, "deletions": 80, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fide%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fide%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -4,87 +4,8 @@\n mod navigation_target;\n mod short_label;\n \n-use syntax::{\n-    ast::{self, AstNode, AttrsOwner, GenericParamsOwner, NameOwner},\n-    SyntaxKind::{ATTR, COMMENT},\n-};\n-\n-use ast::VisibilityOwner;\n-use stdx::format_to;\n-\n pub use navigation_target::NavigationTarget;\n pub(crate) use navigation_target::{ToNav, TryToNav};\n pub(crate) use short_label::ShortLabel;\n \n-pub(crate) fn function_declaration(node: &ast::Fn) -> String {\n-    let mut buf = String::new();\n-    if let Some(vis) = node.visibility() {\n-        format_to!(buf, \"{} \", vis);\n-    }\n-    if node.async_token().is_some() {\n-        format_to!(buf, \"async \");\n-    }\n-    if node.const_token().is_some() {\n-        format_to!(buf, \"const \");\n-    }\n-    if node.unsafe_token().is_some() {\n-        format_to!(buf, \"unsafe \");\n-    }\n-    if let Some(abi) = node.abi() {\n-        // Keyword `extern` is included in the string.\n-        format_to!(buf, \"{} \", abi);\n-    }\n-    if let Some(name) = node.name() {\n-        format_to!(buf, \"fn {}\", name)\n-    }\n-    if let Some(type_params) = node.generic_param_list() {\n-        format_to!(buf, \"{}\", type_params);\n-    }\n-    if let Some(param_list) = node.param_list() {\n-        let params: Vec<String> = param_list\n-            .self_param()\n-            .into_iter()\n-            .map(|self_param| self_param.to_string())\n-            .chain(param_list.params().map(|param| param.to_string()))\n-            .collect();\n-        // Useful to inline parameters\n-        format_to!(buf, \"({})\", params.join(\", \"));\n-    }\n-    if let Some(ret_type) = node.ret_type() {\n-        if ret_type.ty().is_some() {\n-            format_to!(buf, \" {}\", ret_type);\n-        }\n-    }\n-    if let Some(where_clause) = node.where_clause() {\n-        format_to!(buf, \"\\n{}\", where_clause);\n-    }\n-    buf\n-}\n-\n-pub(crate) fn const_label(node: &ast::Const) -> String {\n-    let label: String = node\n-        .syntax()\n-        .children_with_tokens()\n-        .filter(|child| !(child.kind() == COMMENT || child.kind() == ATTR))\n-        .map(|node| node.to_string())\n-        .collect();\n-\n-    label.trim().to_owned()\n-}\n-\n-pub(crate) fn type_label(node: &ast::TypeAlias) -> String {\n-    let label: String = node\n-        .syntax()\n-        .children_with_tokens()\n-        .filter(|child| !(child.kind() == COMMENT || child.kind() == ATTR))\n-        .map(|node| node.to_string())\n-        .collect();\n-\n-    label.trim().to_owned()\n-}\n-\n-pub(crate) fn macro_label(node: &ast::MacroCall) -> String {\n-    let name = node.name().map(|name| name.syntax().text().to_string()).unwrap_or_default();\n-    let vis = if node.has_atom_attr(\"macro_export\") { \"#[macro_export]\\n\" } else { \"\" };\n-    format!(\"{}macro_rules! {}\", vis, name)\n-}\n+pub(crate) use syntax::display::{function_declaration, macro_label};"}, {"sha": "cecfae4c7018eb41c2e82a768ab8fd8043af7c72", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -23,8 +23,6 @@ mod prime_caches;\n mod display;\n \n mod call_hierarchy;\n-mod call_info;\n-mod completion;\n mod diagnostics;\n mod expand_macro;\n mod extend_selection;\n@@ -65,10 +63,6 @@ use crate::display::ToNav;\n \n pub use crate::{\n     call_hierarchy::CallItem,\n-    call_info::CallInfo,\n-    completion::{\n-        CompletionConfig, CompletionItem, CompletionItemKind, CompletionScore, InsertTextFormat,\n-    },\n     diagnostics::{Diagnostic, DiagnosticsConfig, Fix, Severity},\n     display::NavigationTarget,\n     expand_macro::ExpandedMacro,\n@@ -86,6 +80,10 @@ pub use crate::{\n         Highlight, HighlightModifier, HighlightModifiers, HighlightTag, HighlightedRange,\n     },\n };\n+pub use call_info::CallInfo;\n+pub use completion::{\n+    CompletionConfig, CompletionItem, CompletionItemKind, CompletionScore, InsertTextFormat,\n+};\n \n pub use assists::{\n     utils::MergeBehaviour, Assist, AssistConfig, AssistId, AssistKind, ResolvedAssist,"}, {"sha": "acd91b26c0705b6cd576045d52e7f0401ff536a6", "filename": "crates/ide/src/syntax_highlighting/injection.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -3,14 +3,12 @@\n use std::{collections::BTreeMap, convert::TryFrom};\n \n use ast::{HasQuotes, HasStringValue};\n+use call_info::ActiveParameter;\n use hir::Semantics;\n use itertools::Itertools;\n use syntax::{ast, AstToken, SyntaxNode, SyntaxToken, TextRange, TextSize};\n \n-use crate::{\n-    call_info::ActiveParameter, Analysis, Highlight, HighlightModifier, HighlightTag,\n-    HighlightedRange, RootDatabase,\n-};\n+use crate::{Analysis, Highlight, HighlightModifier, HighlightTag, HighlightedRange, RootDatabase};\n \n use super::HighlightedRangeStack;\n "}, {"sha": "8d2c7eae447d15ec17474d82bf6a9cff2f905822", "filename": "crates/syntax/src/display.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fdisplay.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -0,0 +1,83 @@\n+//! This module contains utilities for turning SyntaxNodes and HIR types\n+//! into types that may be used to render in a UI.\n+\n+use crate::{\n+    ast::{self, AstNode, AttrsOwner, GenericParamsOwner, NameOwner},\n+    SyntaxKind::{ATTR, COMMENT},\n+};\n+\n+use ast::VisibilityOwner;\n+use stdx::format_to;\n+\n+pub fn function_declaration(node: &ast::Fn) -> String {\n+    let mut buf = String::new();\n+    if let Some(vis) = node.visibility() {\n+        format_to!(buf, \"{} \", vis);\n+    }\n+    if node.async_token().is_some() {\n+        format_to!(buf, \"async \");\n+    }\n+    if node.const_token().is_some() {\n+        format_to!(buf, \"const \");\n+    }\n+    if node.unsafe_token().is_some() {\n+        format_to!(buf, \"unsafe \");\n+    }\n+    if let Some(abi) = node.abi() {\n+        // Keyword `extern` is included in the string.\n+        format_to!(buf, \"{} \", abi);\n+    }\n+    if let Some(name) = node.name() {\n+        format_to!(buf, \"fn {}\", name)\n+    }\n+    if let Some(type_params) = node.generic_param_list() {\n+        format_to!(buf, \"{}\", type_params);\n+    }\n+    if let Some(param_list) = node.param_list() {\n+        let params: Vec<String> = param_list\n+            .self_param()\n+            .into_iter()\n+            .map(|self_param| self_param.to_string())\n+            .chain(param_list.params().map(|param| param.to_string()))\n+            .collect();\n+        // Useful to inline parameters\n+        format_to!(buf, \"({})\", params.join(\", \"));\n+    }\n+    if let Some(ret_type) = node.ret_type() {\n+        if ret_type.ty().is_some() {\n+            format_to!(buf, \" {}\", ret_type);\n+        }\n+    }\n+    if let Some(where_clause) = node.where_clause() {\n+        format_to!(buf, \"\\n{}\", where_clause);\n+    }\n+    buf\n+}\n+\n+pub fn const_label(node: &ast::Const) -> String {\n+    let label: String = node\n+        .syntax()\n+        .children_with_tokens()\n+        .filter(|child| !(child.kind() == COMMENT || child.kind() == ATTR))\n+        .map(|node| node.to_string())\n+        .collect();\n+\n+    label.trim().to_owned()\n+}\n+\n+pub fn type_label(node: &ast::TypeAlias) -> String {\n+    let label: String = node\n+        .syntax()\n+        .children_with_tokens()\n+        .filter(|child| !(child.kind() == COMMENT || child.kind() == ATTR))\n+        .map(|node| node.to_string())\n+        .collect();\n+\n+    label.trim().to_owned()\n+}\n+\n+pub fn macro_label(node: &ast::MacroCall) -> String {\n+    let name = node.name().map(|name| name.syntax().text().to_string()).unwrap_or_default();\n+    let vis = if node.has_atom_attr(\"macro_export\") { \"#[macro_export]\\n\" } else { \"\" };\n+    format!(\"{}macro_rules! {}\", vis, name)\n+}"}, {"sha": "849a1cdd6358e3b81878b816ea347c7c3e6083a7", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -32,6 +32,7 @@ mod ptr;\n #[cfg(test)]\n mod tests;\n \n+pub mod display;\n pub mod algo;\n pub mod ast;\n #[doc(hidden)]"}, {"sha": "46006940746155fdc3c505d9206bc7d752a21462", "filename": "xtask/tests/tidy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886cfd68212bb0b4487d6a822476c350a6eb114f/xtask%2Ftests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886cfd68212bb0b4487d6a822476c350a6eb114f/xtask%2Ftests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy.rs?ref=886cfd68212bb0b4487d6a822476c350a6eb114f", "patch": "@@ -213,7 +213,7 @@ fn check_todo(path: &Path, text: &str) {\n         // `ast::make`.\n         \"ast/make.rs\",\n         // The documentation in string literals may contain anything for its own purposes\n-        \"completion/generated_features.rs\",\n+        \"completion/src/generated_features.rs\",\n     ];\n     if need_todo.iter().any(|p| path.ends_with(p)) {\n         return;"}]}