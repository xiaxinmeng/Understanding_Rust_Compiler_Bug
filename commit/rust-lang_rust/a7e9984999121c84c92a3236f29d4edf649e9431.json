{"sha": "a7e9984999121c84c92a3236f29d4edf649e9431", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZTk5ODQ5OTkxMjFjODRjOTJhMzIzNmYyOWQ0ZWRmNjQ5ZTk0MzE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-20T18:23:37Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-20T18:23:37Z"}, "message": "rustc: Build tydescs for types, and make all take and drop operations go through the tydescs for simplicity (LLVM inlines them).", "tree": {"sha": "d5b9ca02c255a0ea3ed9de5338041f4b1cf8ead8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5b9ca02c255a0ea3ed9de5338041f4b1cf8ead8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7e9984999121c84c92a3236f29d4edf649e9431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7e9984999121c84c92a3236f29d4edf649e9431", "html_url": "https://github.com/rust-lang/rust/commit/a7e9984999121c84c92a3236f29d4edf649e9431", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7e9984999121c84c92a3236f29d4edf649e9431/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad5e9202763887ec4a0a588c8b3f60fa6e63ddc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad5e9202763887ec4a0a588c8b3f60fa6e63ddc9", "html_url": "https://github.com/rust-lang/rust/commit/ad5e9202763887ec4a0a588c8b3f60fa6e63ddc9"}], "stats": {"total": 81, "additions": 54, "deletions": 27}, "files": [{"sha": "fc44440ab81a30a6ec1e0f99798ca21afac1830c", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a7e9984999121c84c92a3236f29d4edf649e9431/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7e9984999121c84c92a3236f29d4edf649e9431/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=a7e9984999121c84c92a3236f29d4edf649e9431", "patch": "@@ -28,6 +28,17 @@ const int vec_elt_alloc = 1;\n const int vec_elt_fill = 2;\n const int vec_elt_data = 3;\n \n+const int tydesc_field_first_param = 0;\n+const int tydesc_field_size = 1;\n+const int tydesc_field_align = 2;\n+const int tydesc_field_copy_glue_off = 3;\n+const int tydesc_field_drop_glue_off = 4;\n+const int tydesc_field_free_glue_off = 5;\n+const int tydesc_field_sever_glue_off = 6;\n+const int tydesc_field_mark_glue_off = 7;\n+const int tydesc_field_obj_drop_glue_off = 8;\n+const int tydesc_field_is_stateful = 9;\n+\n \n /* Both obj and fn are two-word \"bindings\": One word points to some static\n  * dispatch information (vtbl, thunk, callee), and the other points to some"}, {"sha": "c40b2d0dd8a2f2495ee97a74500619806b5c456e", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 43, "deletions": 27, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a7e9984999121c84c92a3236f29d4edf649e9431/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7e9984999121c84c92a3236f29d4edf649e9431/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a7e9984999121c84c92a3236f29d4edf649e9431", "patch": "@@ -68,7 +68,7 @@ state type crate_ctxt = rec(session.session sess,\n                             hashmap[ast.def_id, ValueRef] item_ids,\n                             hashmap[ast.def_id, @ast.item] items,\n                             hashmap[ast.def_id, @tag_info] tags,\n-                            hashmap[@typeck.ty, @ty_info] types,\n+                            hashmap[@typeck.ty, ValueRef] tydescs,\n                             @glue_fns glues,\n                             namegen names,\n                             str path);\n@@ -471,19 +471,6 @@ fn C_struct(vec[ValueRef] elts) -> ValueRef {\n                              False);\n }\n \n-fn C_tydesc(TypeRef t) -> ValueRef {\n-    ret C_struct(vec(C_null(T_ptr(T_opaque())),        // first_param\n-                     llvm.LLVMSizeOf(t),               // size\n-                     llvm.LLVMAlignOf(t),              // align\n-                     C_null(T_ptr(T_opaque())),        // copy_glue_off\n-                     C_null(T_ptr(T_opaque())),        // drop_glue_off\n-                     C_null(T_ptr(T_opaque())),        // free_glue_off\n-                     C_null(T_ptr(T_opaque())),        // sever_glue_off\n-                     C_null(T_ptr(T_opaque())),        // mark_glue_off\n-                     C_null(T_ptr(T_opaque())),        // obj_drop_glue_off\n-                     C_null(T_ptr(T_opaque()))));      // is_stateful\n-}\n-\n fn decl_fn(ModuleRef llmod, str name, uint cc, TypeRef llty) -> ValueRef {\n     let ValueRef llfn =\n         llvm.LLVMAddFunction(llmod, _str.buf(name), llty);\n@@ -576,21 +563,48 @@ fn trans_malloc(@block_ctxt cx, @typeck.ty t) -> result {\n }\n \n \n-// Glue and referent count twiddling\n+// Type descriptor and type glue stuff\n+\n+// Given a type and a field index into its corresponding type descriptor,\n+// returns an LLVM ValueRef of that field from the tydesc, generating the\n+// tydesc if necessary.\n+fn field_of_tydesc(@block_ctxt cx, @typeck.ty ty, int field) -> ValueRef {\n+    auto tydesc = get_tydesc(cx.fcx.ccx, ty);\n+    ret cx.build.GEP(tydesc, vec(C_int(0), C_int(field)));\n+}\n \n-fn get_ty_info(@crate_ctxt cx, @typeck.ty ty) -> @ty_info {\n-    if (!cx.types.contains_key(ty)) {\n-        make_ty_info(cx, ty);\n+fn get_tydesc(@crate_ctxt cx, @typeck.ty ty) -> ValueRef {\n+    if (!cx.tydescs.contains_key(ty)) {\n+        make_tydesc(cx, ty);\n     }\n-    ret cx.types.get(ty);\n+    ret cx.tydescs.get(ty);\n }\n \n-fn make_ty_info(@crate_ctxt cx, @typeck.ty ty) {\n+fn make_tydesc(@crate_ctxt cx, @typeck.ty ty) {\n     auto tg = make_take_glue;\n     auto take_glue = make_generic_glue(cx, ty, \"take\", tg);\n     auto dg = make_drop_glue;\n     auto drop_glue = make_generic_glue(cx, ty, \"drop\", dg);\n-    cx.types.insert(ty, @rec(take_glue=take_glue, drop_glue=drop_glue));\n+\n+    auto llty = type_of(cx, ty);\n+    auto pvoid = T_ptr(T_i8());\n+    auto glue_fn_ty = T_ptr(T_fn(vec(T_taskptr(), pvoid), T_void()));\n+    auto tydesc = C_struct(vec(C_null(pvoid),\n+                               llvm.LLVMSizeOf(llty),\n+                               llvm.LLVMAlignOf(llty),\n+                               take_glue,             // copy_glue_off\n+                               drop_glue,             // drop_glue_off\n+                               C_null(glue_fn_ty),    // free_glue_off\n+                               C_null(glue_fn_ty),    // sever_glue_off\n+                               C_null(glue_fn_ty),    // mark_glue_off\n+                               C_null(glue_fn_ty),    // obj_drop_glue_off\n+                               C_null(glue_fn_ty)));  // is_stateful\n+\n+    auto name = sanitize(cx.names.next(\"tydesc_\" + typeck.ty_to_str(ty)));\n+    auto gvar = llvm.LLVMAddGlobal(cx.llmod, val_ty(tydesc), _str.buf(name));\n+    llvm.LLVMSetInitializer(gvar, tydesc);\n+    llvm.LLVMSetGlobalConstant(gvar, True);\n+    cx.tydescs.insert(ty, gvar);\n }\n \n fn make_generic_glue(@crate_ctxt cx, @typeck.ty t, str name,\n@@ -970,8 +984,9 @@ fn incr_all_refcnts(@block_ctxt cx,\n                     @typeck.ty t) -> result {\n     if (!typeck.type_is_scalar(t)) {\n         auto llrawptr = cx.build.BitCast(v, T_ptr(T_i8()));\n-        cx.build.FastCall(get_ty_info(cx.fcx.ccx, t).take_glue,\n-                          vec(cx.fcx.lltaskptr, llrawptr));\n+        auto llfnptr = field_of_tydesc(cx, t, abi.tydesc_field_copy_glue_off);\n+        auto llfn = cx.build.Load(llfnptr);\n+        cx.build.FastCall(llfn, vec(cx.fcx.lltaskptr, llrawptr));\n     }\n     ret res(cx, C_nil());\n }\n@@ -993,8 +1008,9 @@ fn drop_ty(@block_ctxt cx,\n            @typeck.ty t) -> result {\n     if (!typeck.type_is_scalar(t)) {\n         auto llrawptr = cx.build.BitCast(v, T_ptr(T_i8()));\n-        cx.build.FastCall(get_ty_info(cx.fcx.ccx, t).drop_glue,\n-                          vec(cx.fcx.lltaskptr, llrawptr));\n+        auto llfnptr = field_of_tydesc(cx, t, abi.tydesc_field_drop_glue_off);\n+        auto llfn = cx.build.Load(llfnptr);\n+        cx.build.FastCall(llfn, vec(cx.fcx.lltaskptr, llrawptr));\n     }\n     ret res(cx, C_nil());\n }\n@@ -2833,7 +2849,7 @@ fn trans_crate(session.session sess, @ast.crate crate, str output) {\n     auto glues = make_glues(llmod);\n     auto hasher = typeck.hash_ty;\n     auto eqer = typeck.eq_ty;\n-    auto types = map.mk_hashmap[@typeck.ty,@ty_info](hasher, eqer);\n+    auto tydescs = map.mk_hashmap[@typeck.ty,ValueRef](hasher, eqer);\n \n     auto cx = @rec(sess = sess,\n                    llmod = llmod,\n@@ -2844,7 +2860,7 @@ fn trans_crate(session.session sess, @ast.crate crate, str output) {\n                    item_ids = new_def_hash[ValueRef](),\n                    items = new_def_hash[@ast.item](),\n                    tags = new_def_hash[@tag_info](),\n-                   types = types,\n+                   tydescs = tydescs,\n                    glues = glues,\n                    names = namegen(0),\n                    path = \"_rust\");"}]}