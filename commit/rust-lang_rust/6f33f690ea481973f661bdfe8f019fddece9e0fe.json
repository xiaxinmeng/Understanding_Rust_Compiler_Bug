{"sha": "6f33f690ea481973f661bdfe8f019fddece9e0fe", "node_id": "C_kwDOAAsO6NoAKDZmMzNmNjkwZWE0ODE5NzNmNjYxYmRmZThmMDE5ZmRkZWNlOWUwZmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-12T16:47:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-12T16:47:45Z"}, "message": "Auto merge of #8112 - Alexendoo:disallowed_methods_primitives, r=flip1995\n\nAllow primitive types in disallowed_methods\n\nFixes #8079\n\nchangelog: `disallowed_methods`: Now can disallow methods of primitive types", "tree": {"sha": "49ea6fe6966f4577143abfcbe87b8e4145a7a204", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49ea6fe6966f4577143abfcbe87b8e4145a7a204"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f33f690ea481973f661bdfe8f019fddece9e0fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f33f690ea481973f661bdfe8f019fddece9e0fe", "html_url": "https://github.com/rust-lang/rust/commit/6f33f690ea481973f661bdfe8f019fddece9e0fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f33f690ea481973f661bdfe8f019fddece9e0fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c82ae1c1200e28ed349b38b6f60e2f84888d663", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c82ae1c1200e28ed349b38b6f60e2f84888d663", "html_url": "https://github.com/rust-lang/rust/commit/7c82ae1c1200e28ed349b38b6f60e2f84888d663"}, {"sha": "04eb27aeaf283415011d7786fa4091f0ceaf8a11", "url": "https://api.github.com/repos/rust-lang/rust/commits/04eb27aeaf283415011d7786fa4091f0ceaf8a11", "html_url": "https://github.com/rust-lang/rust/commit/04eb27aeaf283415011d7786fa4091f0ceaf8a11"}], "stats": {"total": 96, "additions": 67, "deletions": 29}, "files": [{"sha": "73c00d97020bedf2a6badb9b698b89a59ce9b4de", "filename": "clippy_lints/src/disallowed_methods.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6f33f690ea481973f661bdfe8f019fddece9e0fe/clippy_lints%2Fsrc%2Fdisallowed_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f33f690ea481973f661bdfe8f019fddece9e0fe/clippy_lints%2Fsrc%2Fdisallowed_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_methods.rs?ref=6f33f690ea481973f661bdfe8f019fddece9e0fe", "patch": "@@ -59,7 +59,7 @@ declare_clippy_lint! {\n #[derive(Clone, Debug)]\n pub struct DisallowedMethods {\n     conf_disallowed: Vec<conf::DisallowedMethod>,\n-    disallowed: DefIdMap<Option<String>>,\n+    disallowed: DefIdMap<usize>,\n }\n \n impl DisallowedMethods {\n@@ -75,17 +75,10 @@ impl_lint_pass!(DisallowedMethods => [DISALLOWED_METHODS]);\n \n impl<'tcx> LateLintPass<'tcx> for DisallowedMethods {\n     fn check_crate(&mut self, cx: &LateContext<'_>) {\n-        for conf in &self.conf_disallowed {\n-            let (path, reason) = match conf {\n-                conf::DisallowedMethod::Simple(path) => (path, None),\n-                conf::DisallowedMethod::WithReason { path, reason } => (\n-                    path,\n-                    reason.as_ref().map(|reason| format!(\"{} (from clippy.toml)\", reason)),\n-                ),\n-            };\n-            let segs: Vec<_> = path.split(\"::\").collect();\n+        for (index, conf) in self.conf_disallowed.iter().enumerate() {\n+            let segs: Vec<_> = conf.path().split(\"::\").collect();\n             if let Res::Def(_, id) = clippy_utils::path_to_res(cx, &segs) {\n-                self.disallowed.insert(id, reason);\n+                self.disallowed.insert(id, index);\n             }\n         }\n     }\n@@ -95,15 +88,17 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedMethods {\n             Some(def_id) => def_id,\n             None => return,\n         };\n-        let reason = match self.disallowed.get(&def_id) {\n-            Some(reason) => reason,\n+        let conf = match self.disallowed.get(&def_id) {\n+            Some(&index) => &self.conf_disallowed[index],\n             None => return,\n         };\n-        let func_path = cx.tcx.def_path_str(def_id);\n-        let msg = format!(\"use of a disallowed method `{}`\", func_path);\n+        let msg = format!(\"use of a disallowed method `{}`\", conf.path());\n         span_lint_and_then(cx, DISALLOWED_METHODS, expr.span, &msg, |diag| {\n-            if let Some(reason) = reason {\n-                diag.note(reason);\n+            if let conf::DisallowedMethod::WithReason {\n+                reason: Some(reason), ..\n+            } = conf\n+            {\n+                diag.note(&format!(\"{} (from clippy.toml)\", reason));\n             }\n         });\n     }"}, {"sha": "d6deb50cc907379f7b66b633c8eaf77b298976a4", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f33f690ea481973f661bdfe8f019fddece9e0fe/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f33f690ea481973f661bdfe8f019fddece9e0fe/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=6f33f690ea481973f661bdfe8f019fddece9e0fe", "patch": "@@ -23,6 +23,14 @@ pub enum DisallowedMethod {\n     WithReason { path: String, reason: Option<String> },\n }\n \n+impl DisallowedMethod {\n+    pub fn path(&self) -> &str {\n+        let (Self::Simple(path) | Self::WithReason { path, .. }) = self;\n+\n+        path\n+    }\n+}\n+\n /// A single disallowed type, used by the `DISALLOWED_TYPES` lint.\n #[derive(Clone, Debug, Deserialize)]\n #[serde(untagged)]"}, {"sha": "44f634b6519438d8e539362bed28640ddb606a2e", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6f33f690ea481973f661bdfe8f019fddece9e0fe/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f33f690ea481973f661bdfe8f019fddece9e0fe/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=6f33f690ea481973f661bdfe8f019fddece9e0fe", "patch": "@@ -70,16 +70,16 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::hir_id::{HirIdMap, HirIdSet};\n use rustc_hir::intravisit::{walk_expr, ErasedMap, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n use rustc_hir::{\n-    def, Arm, BindingAnnotation, Block, BlockCheckMode, Body, Constness, Destination, Expr, ExprKind, FnDecl,\n-    ForeignItem, GenericArgs, HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local,\n-    MatchSource, Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem,\n-    TraitItemKind, TraitRef, TyKind, UnOp,\n+    def, lang_items, Arm, BindingAnnotation, Block, BlockCheckMode, Body, Constness, Destination, Expr, ExprKind,\n+    FnDecl, ForeignItem, GenericArgs, HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local,\n+    MatchSource, Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, Target,\n+    TraitItem, TraitItemKind, TraitRef, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::exports::Export;\n@@ -525,18 +525,34 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n             .iter()\n             .find(|item| item.ident.name.as_str() == name)\n     }\n+    fn find_primitive(tcx: TyCtxt<'_>, name: &str) -> Option<DefId> {\n+        if let Some(&(index, Target::Impl)) = lang_items::ITEM_REFS.get(&Symbol::intern(name)) {\n+            tcx.lang_items().items()[index]\n+        } else {\n+            None\n+        }\n+    }\n+    fn find_crate(tcx: TyCtxt<'_>, name: &str) -> Option<DefId> {\n+        tcx.crates(())\n+            .iter()\n+            .find(|&&num| tcx.crate_name(num).as_str() == name)\n+            .map(CrateNum::as_def_id)\n+    }\n \n-    let (krate, first, path) = match *path {\n-        [krate, first, ref path @ ..] => (krate, first, path),\n+    let (base, first, path) = match *path {\n+        [base, first, ref path @ ..] => (base, first, path),\n         [primitive] => {\n             return PrimTy::from_name(Symbol::intern(primitive)).map_or(Res::Err, Res::PrimTy);\n         },\n         _ => return Res::Err,\n     };\n     let tcx = cx.tcx;\n-    let crates = tcx.crates(());\n-    let krate = try_res!(crates.iter().find(|&&num| tcx.crate_name(num).as_str() == krate));\n-    let first = try_res!(item_child_by_name(tcx, krate.as_def_id(), first));\n+    let first = try_res!(\n+        find_primitive(tcx, base)\n+            .or_else(|| find_crate(tcx, base))\n+            .and_then(|id| item_child_by_name(tcx, id, first))\n+    );\n+\n     let last = path\n         .iter()\n         .copied()"}, {"sha": "c902d21123dce0dc9d8200531fe6669275776aba", "filename": "tests/ui-toml/toml_disallowed_methods/clippy.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f33f690ea481973f661bdfe8f019fddece9e0fe/tests%2Fui-toml%2Ftoml_disallowed_methods%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6f33f690ea481973f661bdfe8f019fddece9e0fe/tests%2Fui-toml%2Ftoml_disallowed_methods%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_methods%2Fclippy.toml?ref=6f33f690ea481973f661bdfe8f019fddece9e0fe", "patch": "@@ -1,6 +1,8 @@\n disallowed-methods = [\n     # just a string is shorthand for path only\n     \"std::iter::Iterator::sum\",\n+    \"f32::clamp\",\n+    \"slice::sort_unstable\",\n     # can give path and reason with an inline table\n     { path = \"regex::Regex::is_match\", reason = \"no matching allowed\" },\n     # can use an inline table but omit reason"}, {"sha": "338b3b5b28f429b9700d5849886109698f758242", "filename": "tests/ui-toml/toml_disallowed_methods/conf_disallowed_methods.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f33f690ea481973f661bdfe8f019fddece9e0fe/tests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f33f690ea481973f661bdfe8f019fddece9e0fe/tests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.rs?ref=6f33f690ea481973f661bdfe8f019fddece9e0fe", "patch": "@@ -7,6 +7,11 @@ fn main() {\n     let re = Regex::new(r\"ab.*c\").unwrap();\n     re.is_match(\"abc\");\n \n-    let a = vec![1, 2, 3, 4];\n+    let mut a = vec![1, 2, 3, 4];\n     a.iter().sum::<i32>();\n+\n+    a.sort_unstable();\n+\n+    let _ = 2.0f32.clamp(3.0f32, 4.0f32);\n+    let _ = 2.0f64.clamp(3.0f64, 4.0f64);\n }"}, {"sha": "5533676aea287b80677e8ec9f9cd0423dd52e405", "filename": "tests/ui-toml/toml_disallowed_methods/conf_disallowed_methods.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f33f690ea481973f661bdfe8f019fddece9e0fe/tests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f33f690ea481973f661bdfe8f019fddece9e0fe/tests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.stderr?ref=6f33f690ea481973f661bdfe8f019fddece9e0fe", "patch": "@@ -20,5 +20,17 @@ error: use of a disallowed method `std::iter::Iterator::sum`\n LL |     a.iter().sum::<i32>();\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: use of a disallowed method `slice::sort_unstable`\n+  --> $DIR/conf_disallowed_methods.rs:13:5\n+   |\n+LL |     a.sort_unstable();\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: use of a disallowed method `f32::clamp`\n+  --> $DIR/conf_disallowed_methods.rs:15:13\n+   |\n+LL |     let _ = 2.0f32.clamp(3.0f32, 4.0f32);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n "}]}