{"sha": "88ec89d3fe42029dd6005822191dc97de07d930c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZWM4OWQzZmU0MjAyOWRkNjAwNTgyMjE5MWRjOTdkZTA3ZDkzMGM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-02T18:32:37Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-02T18:32:37Z"}, "message": "fix numerous dynamic borrow failures", "tree": {"sha": "860ac5bf62c6dfb03a7b1bcd5bae1958bebf03f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/860ac5bf62c6dfb03a7b1bcd5bae1958bebf03f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88ec89d3fe42029dd6005822191dc97de07d930c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88ec89d3fe42029dd6005822191dc97de07d930c", "html_url": "https://github.com/rust-lang/rust/commit/88ec89d3fe42029dd6005822191dc97de07d930c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88ec89d3fe42029dd6005822191dc97de07d930c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f886342be75ef465a8e0ffe6f4e7c237fb8fd67", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f886342be75ef465a8e0ffe6f4e7c237fb8fd67", "html_url": "https://github.com/rust-lang/rust/commit/5f886342be75ef465a8e0ffe6f4e7c237fb8fd67"}], "stats": {"total": 142, "additions": 77, "deletions": 65}, "files": [{"sha": "d25147fcde118433572d686d8ae5aae1d18475f2", "filename": "src/libcore/unstable/lang.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibcore%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibcore%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Flang.rs?ref=88ec89d3fe42029dd6005822191dc97de07d930c", "patch": "@@ -133,7 +133,7 @@ pub unsafe fn exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n \n /// Because this code is so perf. sensitive, use a static constant so that\n /// debug printouts are compiled out most of the time.\n-static ENABLE_DEBUG_PTR: bool = false;\n+static ENABLE_DEBUG_PTR: bool = true;\n \n #[inline]\n pub fn debug_ptr<T>(tag: &'static str, p: *const T) {"}, {"sha": "43616ebfd3032fda9ef5a6668eaaf963063709ab", "filename": "src/libcore/util.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=88ec89d3fe42029dd6005822191dc97de07d930c", "patch": "@@ -26,19 +26,20 @@ pub fn ignore<T>(_x: T) { }\n \n /// Sets `*ptr` to `new_value`, invokes `op()`, and then restores the\n /// original value of `*ptr`.\n+///\n+/// NB: This function accepts `@mut T` and not `&mut T` to avoid\n+/// an obvious borrowck hazard. Typically passing in `&mut T` will\n+/// cause borrow check errors because it freezes whatever location\n+/// that `&mut T` is stored in (either statically or dynamically).\n #[inline(always)]\n-pub fn with<T:Copy,R>(\n-    ptr: &mut T,\n-    new_value: T,\n+pub fn with<T,R>(\n+    ptr: @mut T,\n+    mut value: T,\n     op: &fn() -> R) -> R\n {\n-    // NDM: if swap operator were defined somewhat differently,\n-    // we wouldn't need to copy...\n-\n-    let old_value = *ptr;\n-    *ptr = new_value;\n+    value <-> *ptr;\n     let result = op();\n-    *ptr = old_value;\n+    *ptr = value;\n     return result;\n }\n "}, {"sha": "59a6e6469e2bb1ddda9f9fea89c0cd636ff3fd20", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=88ec89d3fe42029dd6005822191dc97de07d930c", "patch": "@@ -112,7 +112,6 @@ use util::ppaux::ty_to_str;\n \n use core::cast::transmute;\n use core::hashmap::HashMap;\n-use core::util::with;\n use syntax::ast::*;\n use syntax::codemap::span;\n use syntax::parse::token::special_idents;\n@@ -343,9 +342,10 @@ pub impl IrMaps {\n }\n \n fn visit_item(item: @item, self: @mut IrMaps, v: vt<@mut IrMaps>) {\n-    do with(&mut self.cur_item, item.id) {\n-        visit::visit_item(item, self, v)\n-    }\n+    let old_cur_item = self.cur_item;\n+    self.cur_item = item.id;\n+    visit::visit_item(item, self, v);\n+    self.cur_item = old_cur_item;\n }\n \n fn visit_fn(fk: &visit::fn_kind,\n@@ -762,11 +762,13 @@ pub impl Liveness {\n             None => {\n                 // Vanilla 'break' or 'loop', so use the enclosing\n                 // loop scope\n-                let loop_scope = &mut *self.loop_scope;\n-                if loop_scope.len() == 0 {\n+                let len = { // FIXME(#5074) stage0\n+                    let loop_scope = &mut *self.loop_scope;\n+                    loop_scope.len()\n+                };\n+                if len == 0 {\n                     self.tcx.sess.span_bug(sp, ~\"break outside loop\");\n-                }\n-                else {\n+                } else {\n                     // FIXME(#5275): this shouldn't have to be a method...\n                     self.last_loop_scope()\n                 }"}, {"sha": "06eb2542235e4f56c645ecf8447c6a0b383fe4d2", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=88ec89d3fe42029dd6005822191dc97de07d930c", "patch": "@@ -949,7 +949,8 @@ pub fn determine_rp_in_crate(sess: Session,\n         let cx = &mut *cx;\n         while cx.worklist.len() != 0 {\n             let c_id = cx.worklist.pop();\n-            let c_variance = *cx.region_paramd_items.get(&c_id);\n+            let c_variance = { *cx.region_paramd_items.get(&c_id) };\n+            // NOTE cleanup scopes cause an exaggerated lock here\n             debug!(\"popped %d from worklist\", c_id);\n             match cx.dep_map.find(&c_id) {\n               None => {}"}, {"sha": "8e83ea7e32e3b39a18bfe84810ae147f7788282c", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=88ec89d3fe42029dd6005822191dc97de07d930c", "patch": "@@ -779,9 +779,9 @@ pub fn Resolver(session: Session,\n         unresolved_imports: 0,\n \n         current_module: current_module,\n-        value_ribs: ~[],\n-        type_ribs: ~[],\n-        label_ribs: ~[],\n+        value_ribs: @mut ~[],\n+        type_ribs: @mut ~[],\n+        label_ribs: @mut ~[],\n \n         xray_context: NoXray,\n         current_trait_refs: None,\n@@ -830,13 +830,13 @@ pub struct Resolver {\n \n     // The current set of local scopes, for values.\n     // FIXME #4948: Reuse ribs to avoid allocation.\n-    value_ribs: ~[@Rib],\n+    value_ribs: @mut ~[@Rib],\n \n     // The current set of local scopes, for types.\n-    type_ribs: ~[@Rib],\n+    type_ribs: @mut ~[@Rib],\n \n     // The current set of local scopes, for labels.\n-    label_ribs: ~[@Rib],\n+    label_ribs: @mut ~[@Rib],\n \n     // Whether the current context is an X-ray context. An X-ray context is\n     // allowed to access private names of any module.\n@@ -4313,19 +4313,18 @@ pub impl Resolver {\n                 }\n \n                 pat_struct(path, _, _) => {\n-                    let structs: &mut HashSet<def_id> = &mut self.structs;\n                     match self.resolve_path(path, TypeNS, false, visitor) {\n                         Some(def_ty(class_id))\n-                                if structs.contains(&class_id) => {\n+                                if self.structs.contains(&class_id) => {\n                             let class_def = def_struct(class_id);\n                             self.record_def(pattern.id, class_def);\n                         }\n-                        Some(definition @ def_struct(class_id))\n-                                if structs.contains(&class_id) => {\n+                        Some(definition @ def_struct(class_id)) => {\n+                            assert!(self.structs.contains(&class_id));\n                             self.record_def(pattern.id, definition);\n                         }\n                         Some(definition @ def_variant(_, variant_id))\n-                                if structs.contains(&variant_id) => {\n+                                if self.structs.contains(&variant_id) => {\n                             self.record_def(pattern.id, definition);\n                         }\n                         result => {\n@@ -4627,12 +4626,12 @@ pub impl Resolver {\n         let search_result;\n         match namespace {\n             ValueNS => {\n-                search_result = self.search_ribs(&mut self.value_ribs, ident,\n+                search_result = self.search_ribs(self.value_ribs, ident,\n                                                  span,\n                                                  DontAllowCapturingSelf);\n             }\n             TypeNS => {\n-                search_result = self.search_ribs(&mut self.type_ribs, ident,\n+                search_result = self.search_ribs(self.type_ribs, ident,\n                                                  span, AllowCapturingSelf);\n             }\n         }\n@@ -4822,15 +4821,14 @@ pub impl Resolver {\n \n             expr_struct(path, _, _) => {\n                 // Resolve the path to the structure it goes to.\n-                let structs: &mut HashSet<def_id> = &mut self.structs;\n                 match self.resolve_path(path, TypeNS, false, visitor) {\n                     Some(def_ty(class_id)) | Some(def_struct(class_id))\n-                            if structs.contains(&class_id) => {\n+                            if self.structs.contains(&class_id) => {\n                         let class_def = def_struct(class_id);\n                         self.record_def(expr.id, class_def);\n                     }\n                     Some(definition @ def_variant(_, class_id))\n-                            if structs.contains(&class_id) => {\n+                            if self.structs.contains(&class_id) => {\n                         self.record_def(expr.id, definition);\n                     }\n                     _ => {\n@@ -4856,7 +4854,7 @@ pub impl Resolver {\n             }\n \n             expr_break(Some(label)) | expr_again(Some(label)) => {\n-                match self.search_ribs(&mut self.label_ribs, label, expr.span,\n+                match self.search_ribs(self.label_ribs, label, expr.span,\n                                        DontAllowCapturingSelf) {\n                     None =>\n                         self.session.span_err(expr.span,"}, {"sha": "c177d5ab0eb3a47d7596fb5947406324907194bb", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=88ec89d3fe42029dd6005822191dc97de07d930c", "patch": "@@ -244,11 +244,14 @@ fn lookup_vtable(vcx: &VtableContext,\n                     // Nothing found. Continue.\n                 }\n                 Some(implementations) => {\n-                    let implementations: &mut ~[@Impl] = *implementations;\n+                    let len = { // FIXME(#5074): stage0 requires it\n+                        let implementations: &mut ~[@Impl] = *implementations;\n+                        implementations.len()\n+                    };\n \n                     // implementations is the list of all impls in scope for\n                     // trait_ref. (Usually, there's just one.)\n-                    for uint::range(0, implementations.len()) |i| {\n+                    for uint::range(0, len) |i| {\n                         let im = implementations[i];\n \n                         // im is one specific impl of trait_ref."}, {"sha": "d779c20b3e81c82daec35aa1966a72a1052d0f9b", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=88ec89d3fe42029dd6005822191dc97de07d930c", "patch": "@@ -240,8 +240,8 @@ pub impl CoherenceChecker {\n \n     fn check_implementation(&self,\n                             item: @item, associated_traits: ~[@trait_ref]) {\n-        let self_type = self.crate_context.tcx.tcache.get(\n-            &local_def(item.id));\n+        let tcx = self.crate_context.tcx;\n+        let self_type = ty::lookup_item_type(tcx, local_def(item.id));\n \n         // If there are no traits, then this implementation must have a\n         // base type.\n@@ -452,10 +452,8 @@ pub impl CoherenceChecker {\n     }\n \n     fn check_implementation_coherence(&self) {\n-        let coherence_info = &mut self.crate_context.coherence_info;\n-        let extension_methods = &coherence_info.extension_methods;\n-\n-        for extension_methods.each_key |&trait_id| {\n+        let coherence_info = self.crate_context.coherence_info;\n+        for coherence_info.extension_methods.each_key |&trait_id| {\n             self.check_implementation_coherence_of(trait_id);\n         }\n     }\n@@ -514,13 +512,16 @@ pub impl CoherenceChecker {\n     }\n \n     fn iter_impls_of_trait(&self, trait_def_id: def_id, f: &fn(@Impl)) {\n-        let coherence_info = &mut self.crate_context.coherence_info;\n-        let extension_methods = &coherence_info.extension_methods;\n+        let coherence_info = self.crate_context.coherence_info;\n+        let extension_methods = &*coherence_info.extension_methods;\n \n         match extension_methods.find(&trait_def_id) {\n             Some(impls) => {\n-                let impls: &mut ~[@Impl] = *impls;\n-                for uint::range(0, impls.len()) |i| {\n+                let len = { // FIXME(#5074) stage0 requires this\n+                    let impls: &mut ~[@Impl] = *impls;\n+                    impls.len()\n+                };\n+                for uint::range(0, len) |i| {\n                     f(impls[i]);\n                 }\n             }\n@@ -1014,7 +1015,7 @@ pub impl CoherenceChecker {\n     //\n \n     fn populate_destructor_table(&self) {\n-        let coherence_info = &mut self.crate_context.coherence_info;\n+        let coherence_info = self.crate_context.coherence_info;\n         let tcx = self.crate_context.tcx;\n         let drop_trait = tcx.lang_items.drop_trait();\n         let impls_opt = coherence_info.extension_methods.find(&drop_trait);"}, {"sha": "b818f666444f6c8820ec60832e033e942419ca0b", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=88ec89d3fe42029dd6005822191dc97de07d930c", "patch": "@@ -16,6 +16,7 @@ use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::InferStr;\n use middle::typeck::infer::{cres, InferCtxt};\n+use middle::typeck::infer::fold_regions_in_sig;\n use middle::typeck::isr_alist;\n use syntax::ast;\n use syntax::ast::{Many, Once, extern_fn, impure_fn, m_const, m_imm, m_mutbl};\n@@ -188,7 +189,8 @@ impl Combine for Glb {\n         let new_vars =\n             self.infcx.region_vars.vars_created_since_snapshot(snapshot);\n         let sig1 =\n-            self.infcx.fold_regions_in_sig(\n+            fold_regions_in_sig(\n+                self.infcx.tcx,\n                 &sig0,\n                 |r, _in_fn| generalize_region(self, snapshot,\n                                               new_vars, a_isr, a_vars, b_vars,"}, {"sha": "34e006c9615a7df04c490f38916036f48002f892", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=88ec89d3fe42029dd6005822191dc97de07d930c", "patch": "@@ -16,6 +16,7 @@ use middle::typeck::infer::lattice::*;\n use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::InferStr;\n use middle::typeck::infer::{cres, InferCtxt};\n+use middle::typeck::infer::fold_regions_in_sig;\n use middle::typeck::isr_alist;\n use util::common::indent;\n use util::ppaux::mt_to_str;\n@@ -141,7 +142,8 @@ impl Combine for Lub {\n         let new_vars =\n             self.infcx.region_vars.vars_created_since_snapshot(snapshot);\n         let sig1 =\n-            self.infcx.fold_regions_in_sig(\n+            fold_regions_in_sig(\n+                self.infcx.tcx,\n                 &sig0,\n                 |r, _in_fn| generalize_region(self, snapshot, new_vars,\n                                               a_isr, r));"}, {"sha": "899b8cfd7edeba92f5710b85d78e28b994bf85e0", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=88ec89d3fe42029dd6005822191dc97de07d930c", "patch": "@@ -574,7 +574,7 @@ pub impl InferCtxt {\n     }\n \n     /// Execute `f` and commit the bindings if successful\n-    fn commit<T,E>(&mut self, f: &fn() -> Result<T,E>) -> Result<T,E> {\n+    fn commit<T,E>(@mut self, f: &fn() -> Result<T,E>) -> Result<T,E> {\n         assert!(!self.in_snapshot());\n \n         debug!(\"commit()\");\n@@ -589,7 +589,7 @@ pub impl InferCtxt {\n     }\n \n     /// Execute `f`, unroll bindings on failure\n-    fn try<T,E>(&mut self, f: &fn() -> Result<T,E>) -> Result<T,E> {\n+    fn try<T,E>(@mut self, f: &fn() -> Result<T,E>) -> Result<T,E> {\n         debug!(\"try()\");\n         do indent {\n             let snapshot = self.start_snapshot();\n@@ -603,7 +603,7 @@ pub impl InferCtxt {\n     }\n \n     /// Execute `f` then unroll any bindings it creates\n-    fn probe<T,E>(&mut self, f: &fn() -> Result<T,E>) -> Result<T,E> {\n+    fn probe<T,E>(@mut self, f: &fn() -> Result<T,E>) -> Result<T,E> {\n         debug!(\"probe()\");\n         do indent {\n             let snapshot = self.start_snapshot();\n@@ -783,15 +783,14 @@ pub impl InferCtxt {\n             });\n         (fn_sig, isr)\n     }\n+}\n \n-    fn fold_regions_in_sig(\n-        &mut self,\n-        fn_sig: &ty::FnSig,\n-        fldr: &fn(r: ty::Region, in_fn: bool) -> ty::Region) -> ty::FnSig\n-    {\n-        do ty::fold_sig(fn_sig) |t| {\n-            ty::fold_regions(self.tcx, t, fldr)\n-        }\n+pub fn fold_regions_in_sig(\n+    tcx: ty::ctxt,\n+    fn_sig: &ty::FnSig,\n+    fldr: &fn(r: ty::Region, in_fn: bool) -> ty::Region) -> ty::FnSig\n+{\n+    do ty::fold_sig(fn_sig) |t| {\n+        ty::fold_regions(tcx, t, fldr)\n     }\n-\n-}\n+}\n\\ No newline at end of file"}, {"sha": "1ecb38854c8155af03ceffcf0edb9080f792f4ef", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=88ec89d3fe42029dd6005822191dc97de07d930c", "patch": "@@ -76,6 +76,9 @@ pub mod middle {\n     }\n     pub mod ty;\n     pub mod subst;\n+    #[cfg(stage0)] #[path = \"resolve_stage0.rs\"]\n+    pub mod resolve;\n+    #[cfg(not(stage0))]\n     pub mod resolve;\n     #[path = \"typeck/mod.rs\"]\n     pub mod typeck;"}, {"sha": "1c822b520f6af61607ff04258462292b98224b68", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ec89d3fe42029dd6005822191dc97de07d930c/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=88ec89d3fe42029dd6005822191dc97de07d930c", "patch": "@@ -355,7 +355,7 @@ pub impl CodeMap {\n     }\n \n     pub fn span_to_str(&self, sp: span) -> ~str {\n-        let files = &mut *self.files;\n+        let files = &*self.files;\n         if files.len() == 0 && sp == dummy_sp() {\n             return ~\"no-location\";\n         }"}]}