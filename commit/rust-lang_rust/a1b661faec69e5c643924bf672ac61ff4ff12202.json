{"sha": "a1b661faec69e5c643924bf672ac61ff4ff12202", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYjY2MWZhZWM2OWU1YzY0MzkyNGJmNjcyYWM2MWZmNGZmMTIyMDI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-11T12:48:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-11T12:48:06Z"}, "message": "fine grained on typed tests", "tree": {"sha": "4ff25038c52dc1767579135bb5387b0fb184c83d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ff25038c52dc1767579135bb5387b0fb184c83d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1b661faec69e5c643924bf672ac61ff4ff12202", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1b661faec69e5c643924bf672ac61ff4ff12202", "html_url": "https://github.com/rust-lang/rust/commit/a1b661faec69e5c643924bf672ac61ff4ff12202", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1b661faec69e5c643924bf672ac61ff4ff12202/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9e70e3160261fbb5c9bcd48a9feed22406c63cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9e70e3160261fbb5c9bcd48a9feed22406c63cc", "html_url": "https://github.com/rust-lang/rust/commit/d9e70e3160261fbb5c9bcd48a9feed22406c63cc"}], "stats": {"total": 91, "additions": 48, "deletions": 43}, "files": [{"sha": "c8f3dfe448e5aa4477cfa5f3068ba0caf2cc60ba", "filename": "crates/ra_ide_api_light/src/typing.rs", "status": "modified", "additions": 48, "deletions": 43, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/a1b661faec69e5c643924bf672ac61ff4ff12202/crates%2Fra_ide_api_light%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b661faec69e5c643924bf672ac61ff4ff12202/crates%2Fra_ide_api_light%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Ftyping.rs?ref=a1b661faec69e5c643924bf672ac61ff4ff12202", "patch": "@@ -133,12 +133,18 @@ mod tests {\n \n     #[test]\n     fn test_on_eq_typed() {\n-        fn do_check(before: &str, after: &str) {\n+        fn type_eq(before: &str, after: &str) {\n             let (offset, before) = extract_offset(before);\n+            let mut edit = TextEditBuilder::default();\n+            edit.insert(offset, \"=\".to_string());\n+            let before = edit.finish().apply(&before);\n             let file = SourceFile::parse(&before);\n-            let result = on_eq_typed(&file, offset).unwrap();\n-            let actual = result.edit.apply(&before);\n-            assert_eq_text!(after, &actual);\n+            if let Some(result) = on_eq_typed(&file, offset) {\n+                let actual = result.edit.apply(&before);\n+                assert_eq_text!(after, &actual);\n+            } else {\n+                assert_eq_text!(&before, after)\n+            };\n         }\n \n         //     do_check(r\"\n@@ -150,10 +156,10 @@ mod tests {\n         //     let foo =;\n         // }\n         // \");\n-        do_check(\n+        type_eq(\n             r\"\n fn foo() {\n-    let foo <|>= 1 + 1\n+    let foo <|> 1 + 1\n }\n \",\n             r\"\n@@ -175,24 +181,27 @@ fn foo() {\n         // \");\n     }\n \n+    fn type_dot(before: &str, after: &str) {\n+        let (offset, before) = extract_offset(before);\n+        let mut edit = TextEditBuilder::default();\n+        edit.insert(offset, \".\".to_string());\n+        let before = edit.finish().apply(&before);\n+        let file = SourceFile::parse(&before);\n+        if let Some(result) = on_dot_typed(&file, offset) {\n+            let actual = result.edit.apply(&before);\n+            assert_eq_text!(after, &actual);\n+        } else {\n+            assert_eq_text!(&before, after)\n+        };\n+    }\n+\n     #[test]\n-    fn test_on_dot_typed() {\n-        fn do_check(before: &str, after: &str) {\n-            let (offset, before) = extract_offset(before);\n-            let file = SourceFile::parse(&before);\n-            if let Some(result) = on_dot_typed(&file, offset) {\n-                let actual = result.edit.apply(&before);\n-                assert_eq_text!(after, &actual);\n-            } else {\n-                assert_eq_text!(&before, after)\n-            };\n-        }\n-        // indent if continuing chain call\n-        do_check(\n+    fn indents_new_chain_call() {\n+        type_dot(\n             r\"\n             pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n                 self.child_impl(db, name)\n-                <|>.\n+                <|>\n             }\n             \",\n             r\"\n@@ -202,13 +211,11 @@ fn foo() {\n             }\n             \",\n         );\n-\n-        // do not indent if already indented\n-        do_check(\n+        type_dot(\n             r\"\n             pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n                 self.child_impl(db, name)\n-                    <|>.\n+                    <|>\n             }\n             \",\n             r\"\n@@ -217,15 +224,17 @@ fn foo() {\n                     .\n             }\n             \",\n-        );\n+        )\n+    }\n \n-        // indent if the previous line is already indented\n-        do_check(\n+    #[test]\n+    fn indents_continued_chain_call() {\n+        type_dot(\n             r\"\n             pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n                 self.child_impl(db, name)\n                     .first()\n-                <|>.\n+                <|>\n             }\n             \",\n             r\"\n@@ -236,14 +245,12 @@ fn foo() {\n             }\n             \",\n         );\n-\n-        // don't indent if indent matches previous line\n-        do_check(\n+        type_dot(\n             r\"\n             pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n                 self.child_impl(db, name)\n                     .first()\n-                    <|>.\n+                    <|>\n             }\n             \",\n             r\"\n@@ -254,12 +261,14 @@ fn foo() {\n             }\n             \",\n         );\n+    }\n \n-        // don't indent if there is no method call on previous line\n-        do_check(\n+    #[test]\n+    fn dont_indent_freestanding_dot() {\n+        type_dot(\n             r\"\n             pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n-                <|>.\n+                <|>\n             }\n             \",\n             r\"\n@@ -268,19 +277,15 @@ fn foo() {\n             }\n             \",\n         );\n-\n-        // indent to match previous expr\n-        do_check(\n+        type_dot(\n             r\"\n             pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n-                self.child_impl(db, name)\n-            <|>.\n-                }\n+            <|>\n+            }\n             \",\n             r\"\n             pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n-                self.child_impl(db, name)\n-                    .\n+            .\n             }\n             \",\n         );"}]}