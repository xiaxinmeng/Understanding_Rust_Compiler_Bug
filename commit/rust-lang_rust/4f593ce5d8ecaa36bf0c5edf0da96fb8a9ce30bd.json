{"sha": "4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd", "node_id": "C_kwDOAAsO6NoAKDRmNTkzY2U1ZDhlY2FhMzZiZjBjNWVkZjBkYTk2ZmI4YTljZTMwYmQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-01T08:49:51Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-01T08:49:51Z"}, "message": "Create `format_args` as late as possible", "tree": {"sha": "07a5273a9459ae8fe703281f3d1928f8880c8b8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07a5273a9459ae8fe703281f3d1928f8880c8b8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd", "html_url": "https://github.com/rust-lang/rust/commit/4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66797fa54f9c5def2ba0294065fabd7d1054e7a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/66797fa54f9c5def2ba0294065fabd7d1054e7a1", "html_url": "https://github.com/rust-lang/rust/commit/66797fa54f9c5def2ba0294065fabd7d1054e7a1"}], "stats": {"total": 80, "additions": 29, "deletions": 51}, "files": [{"sha": "e379e6470623759eabab4567b6d8de519713ba92", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd", "patch": "@@ -73,7 +73,7 @@ pub(crate) fn replace_regions_in_mir<'tcx>(\n     // Replace all remaining regions with fresh inference variables.\n     renumber::renumber_mir(infcx, body, promoted);\n \n-    dump_mir(infcx.tcx, None, \"renumber\", &0, body, |_, _| Ok(()));\n+    dump_mir(infcx.tcx, false, \"renumber\", &0, body, |_, _| Ok(()));\n \n     universal_regions\n }\n@@ -331,7 +331,7 @@ pub(super) fn dump_mir_results<'tcx>(\n         return;\n     }\n \n-    dump_mir(infcx.tcx, None, \"nll\", &0, body, |pass_where, out| {\n+    dump_mir(infcx.tcx, false, \"nll\", &0, body, |pass_where, out| {\n         match pass_where {\n             // Before the CFG, dump out the values for each region variable.\n             PassWhere::BeforeCFG => {\n@@ -358,15 +358,13 @@ pub(super) fn dump_mir_results<'tcx>(\n \n     // Also dump the inference graph constraints as a graphviz file.\n     let _: io::Result<()> = try {\n-        let mut file =\n-            create_dump_file(infcx.tcx, \"regioncx.all.dot\", None, \"nll\", &0, body.source)?;\n+        let mut file = create_dump_file(infcx.tcx, \"regioncx.all.dot\", false, \"nll\", &0, body)?;\n         regioncx.dump_graphviz_raw_constraints(&mut file)?;\n     };\n \n     // Also dump the inference graph constraints as a graphviz file.\n     let _: io::Result<()> = try {\n-        let mut file =\n-            create_dump_file(infcx.tcx, \"regioncx.scc.dot\", None, \"nll\", &0, body.source)?;\n+        let mut file = create_dump_file(infcx.tcx, \"regioncx.scc.dot\", false, \"nll\", &0, body)?;\n         regioncx.dump_graphviz_scc_constraints(&mut file)?;\n     };\n }"}, {"sha": "2a4ff4b8810dbc513171e07fb969e8f299e033f3", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd", "patch": "@@ -16,7 +16,6 @@ use rustc_middle::mir::interpret::{\n     Pointer, Provenance,\n };\n use rustc_middle::mir::visit::Visitor;\n-use rustc_middle::mir::MirSource;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_target::abi::Size;\n@@ -74,7 +73,7 @@ pub enum PassWhere {\n #[inline]\n pub fn dump_mir<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n-    pass_num: Option<&dyn Display>,\n+    pass_num: bool,\n     pass_name: &str,\n     disambiguator: &dyn Display,\n     body: &Body<'tcx>,\n@@ -111,7 +110,7 @@ pub fn dump_enabled<'tcx>(tcx: TyCtxt<'tcx>, pass_name: &str, def_id: DefId) ->\n \n fn dump_matched_mir_node<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n-    pass_num: Option<&dyn Display>,\n+    pass_num: bool,\n     pass_name: &str,\n     disambiguator: &dyn Display,\n     body: &Body<'tcx>,\n@@ -120,8 +119,7 @@ fn dump_matched_mir_node<'tcx, F>(\n     F: FnMut(PassWhere, &mut dyn Write) -> io::Result<()>,\n {\n     let _: io::Result<()> = try {\n-        let mut file =\n-            create_dump_file(tcx, \"mir\", pass_num, pass_name, disambiguator, body.source)?;\n+        let mut file = create_dump_file(tcx, \"mir\", pass_num, pass_name, disambiguator, body)?;\n         // see notes on #41697 above\n         let def_path =\n             ty::print::with_forced_impl_filename_line!(tcx.def_path_str(body.source.def_id()));\n@@ -143,16 +141,14 @@ fn dump_matched_mir_node<'tcx, F>(\n \n     if tcx.sess.opts.unstable_opts.dump_mir_graphviz {\n         let _: io::Result<()> = try {\n-            let mut file =\n-                create_dump_file(tcx, \"dot\", pass_num, pass_name, disambiguator, body.source)?;\n+            let mut file = create_dump_file(tcx, \"dot\", pass_num, pass_name, disambiguator, body)?;\n             write_mir_fn_graphviz(tcx, body, false, &mut file)?;\n         };\n     }\n \n     if let Some(spanview) = tcx.sess.opts.unstable_opts.dump_mir_spanview {\n         let _: io::Result<()> = try {\n-            let file_basename =\n-                dump_file_basename(tcx, pass_num, pass_name, disambiguator, body.source);\n+            let file_basename = dump_file_basename(tcx, pass_num, pass_name, disambiguator, body);\n             let mut file = create_dump_file_with_basename(tcx, &file_basename, \"html\")?;\n             if body.source.def_id().is_local() {\n                 write_mir_fn_spanview(tcx, body, spanview, &file_basename, &mut file)?;\n@@ -165,11 +161,12 @@ fn dump_matched_mir_node<'tcx, F>(\n /// where we should dump a MIR representation output files.\n fn dump_file_basename<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    pass_num: Option<&dyn Display>,\n+    pass_num: bool,\n     pass_name: &str,\n     disambiguator: &dyn Display,\n-    source: MirSource<'tcx>,\n+    body: &Body<'tcx>,\n ) -> String {\n+    let source = body.source;\n     let promotion_id = match source.promoted {\n         Some(id) => format!(\"-{:?}\", id),\n         None => String::new(),\n@@ -178,9 +175,10 @@ fn dump_file_basename<'tcx>(\n     let pass_num = if tcx.sess.opts.unstable_opts.dump_mir_exclude_pass_number {\n         String::new()\n     } else {\n-        match pass_num {\n-            None => \".-------\".to_string(),\n-            Some(pass_num) => format!(\".{}\", pass_num),\n+        if pass_num {\n+            format!(\".{:03}-{:03}\", body.phase.phase_index(), body.pass_count)\n+        } else {\n+            \".-------\".to_string()\n         }\n     };\n \n@@ -250,14 +248,14 @@ fn create_dump_file_with_basename(\n pub fn create_dump_file<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     extension: &str,\n-    pass_num: Option<&dyn Display>,\n+    pass_num: bool,\n     pass_name: &str,\n     disambiguator: &dyn Display,\n-    source: MirSource<'tcx>,\n+    body: &Body<'tcx>,\n ) -> io::Result<io::BufWriter<fs::File>> {\n     create_dump_file_with_basename(\n         tcx,\n-        &dump_file_basename(tcx, pass_num, pass_name, disambiguator, source),\n+        &dump_file_basename(tcx, pass_num, pass_name, disambiguator, body),\n         extension,\n     )\n }"}, {"sha": "6ddbe69e17e75fae367d832918ccaefd9bfecfd1", "filename": "compiler/rustc_mir_dataflow/src/framework/engine.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs?ref=4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd", "patch": "@@ -294,14 +294,7 @@ where\n         None if tcx.sess.opts.unstable_opts.dump_mir_dataflow\n             && dump_enabled(tcx, A::NAME, def_id) =>\n         {\n-            create_dump_file(\n-                tcx,\n-                \".dot\",\n-                None,\n-                A::NAME,\n-                &pass_name.unwrap_or(\"-----\"),\n-                body.source,\n-            )?\n+            create_dump_file(tcx, \".dot\", false, A::NAME, &pass_name.unwrap_or(\"-----\"), body)?\n         }\n \n         _ => return Ok(()),"}, {"sha": "d6a298fade42e889e5b4521693a3f54bb47f2805", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd", "patch": "@@ -638,7 +638,7 @@ pub(super) fn dump_coverage_spanview<'tcx>(\n     let def_id = mir_source.def_id();\n \n     let span_viewables = span_viewables(tcx, mir_body, basic_coverage_blocks, &coverage_spans);\n-    let mut file = create_dump_file(tcx, \"html\", None, pass_name, &0, mir_source)\n+    let mut file = create_dump_file(tcx, \"html\", false, pass_name, &0, mir_body)\n         .expect(\"Unexpected error creating MIR spanview HTML file\");\n     let crate_name = tcx.crate_name(def_id.krate);\n     let item_name = tcx.def_path(def_id).to_filename_friendly_no_crate();\n@@ -739,7 +739,7 @@ pub(super) fn dump_coverage_graphviz<'tcx>(\n                 .join(\"\\n  \")\n         ));\n     }\n-    let mut file = create_dump_file(tcx, \"dot\", None, pass_name, &0, mir_source)\n+    let mut file = create_dump_file(tcx, \"dot\", false, pass_name, &0, mir_body)\n         .expect(\"Unexpected error creating BasicCoverageBlock graphviz DOT file\");\n     graphviz_writer\n         .write_graphviz(tcx, &mut file)"}, {"sha": "97485c4f57b12ea872de807daf68c6ca9fe7ec8a", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd", "patch": "@@ -787,7 +787,7 @@ fn dest_prop_mir_dump<'body, 'tcx>(\n     round: usize,\n ) {\n     let mut reachable = None;\n-    dump_mir(tcx, None, \"DestinationPropagation-dataflow\", &round, body, |pass_where, w| {\n+    dump_mir(tcx, false, \"DestinationPropagation-dataflow\", &round, body, |pass_where, w| {\n         let reachable = reachable.get_or_insert_with(|| traversal::reachable_as_bitset(body));\n \n         match pass_where {"}, {"sha": "8922298ecafcb3fa35dbb9cee7a818aebb2e9240", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd", "patch": "@@ -1000,7 +1000,7 @@ fn create_generator_drop_shim<'tcx>(\n     // unrelated code from the resume part of the function\n     simplify::remove_dead_blocks(tcx, &mut body);\n \n-    dump_mir(tcx, None, \"generator_drop\", &0, &body, |_, _| Ok(()));\n+    dump_mir(tcx, false, \"generator_drop\", &0, &body, |_, _| Ok(()));\n \n     body\n }\n@@ -1171,7 +1171,7 @@ fn create_generator_resume_function<'tcx>(\n     // unrelated code from the drop part of the function\n     simplify::remove_dead_blocks(tcx, body);\n \n-    dump_mir(tcx, None, \"generator_resume\", &0, body, |_, _| Ok(()));\n+    dump_mir(tcx, false, \"generator_resume\", &0, body, |_, _| Ok(()));\n }\n \n fn insert_clean_drop(body: &mut Body<'_>) -> BasicBlock {\n@@ -1394,14 +1394,14 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         // This is expanded to a drop ladder in `elaborate_generator_drops`.\n         let drop_clean = insert_clean_drop(body);\n \n-        dump_mir(tcx, None, \"generator_pre-elab\", &0, body, |_, _| Ok(()));\n+        dump_mir(tcx, false, \"generator_pre-elab\", &0, body, |_, _| Ok(()));\n \n         // Expand `drop(generator_struct)` to a drop ladder which destroys upvars.\n         // If any upvars are moved out of, drop elaboration will handle upvar destruction.\n         // However we need to also elaborate the code generated by `insert_clean_drop`.\n         elaborate_generator_drops(tcx, body);\n \n-        dump_mir(tcx, None, \"generator_post-transform\", &0, body, |_, _| Ok(()));\n+        dump_mir(tcx, false, \"generator_post-transform\", &0, body, |_, _| Ok(()));\n \n         // Create a copy of our MIR and use it to create the drop shim for the generator\n         let drop_shim = create_generator_drop_shim(tcx, &transform, gen_ty, body, drop_clean);"}, {"sha": "6288d006e9470b8b18ff6973c32afaf236c98ee2", "filename": "compiler/rustc_mir_transform/src/pass_manager.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fpass_manager.rs?ref=4f593ce5d8ecaa36bf0c5edf0da96fb8a9ce30bd", "patch": "@@ -160,11 +160,9 @@ pub fn dump_mir_for_pass<'tcx>(\n     pass_name: &str,\n     is_after: bool,\n ) {\n-    let phase_index = body.phase.phase_index();\n-\n     mir::dump_mir(\n         tcx,\n-        Some(&format_args!(\"{:03}-{:03}\", phase_index, body.pass_count)),\n+        true,\n         pass_name,\n         if is_after { &\"after\" } else { &\"before\" },\n         body,\n@@ -173,14 +171,5 @@ pub fn dump_mir_for_pass<'tcx>(\n }\n \n pub fn dump_mir_for_phase_change<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n-    let phase_index = body.phase.phase_index();\n-\n-    mir::dump_mir(\n-        tcx,\n-        Some(&format_args!(\"{:03}-000\", phase_index)),\n-        body.phase.name(),\n-        &\"after\",\n-        body,\n-        |_, _| Ok(()),\n-    )\n+    mir::dump_mir(tcx, true, body.phase.name(), &\"after\", body, |_, _| Ok(()))\n }"}]}