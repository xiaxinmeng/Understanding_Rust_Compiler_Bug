{"sha": "0917e131d57b8fb84b462dad13cadbe051f5d011", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MTdlMTMxZDU3YjhmYjg0YjQ2MmRhZDEzY2FkYmUwNTFmNWQwMTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-02T08:06:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-02T08:06:41Z"}, "message": "auto merge of #5187 : ben0x539/rust/docs-unit-struct, r=catamorphism\n\nThis adds a few words about unit-like struct types (`struct Foo;`) in the sections for `struct` items, structure expressions and structure types (and fixes an adjacent typo or two). The added text is at the same time triply redundant because of how the sections are split and rather brief because I don't think there's that much to say about field-less structs without digressing into `impl`s and generic functions and whatnot, but it's probably better than nothing for a start.\r\n\r\nThe added arm for the grammar of struct expressions is really awkward. It's just\r\n\r\n    | expr_path\r\n\r\nwhich is clearly not unambiguously a struct expression, but it didn't feel right not to add anything to the grammar chunk (and I can't tell whether the arm for enum-like structs is somehow unambiguous with regular enum expressions, either). Is this okay?", "tree": {"sha": "c41cf79fd9dca509f4c295803d66496755044f7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c41cf79fd9dca509f4c295803d66496755044f7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0917e131d57b8fb84b462dad13cadbe051f5d011", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0917e131d57b8fb84b462dad13cadbe051f5d011", "html_url": "https://github.com/rust-lang/rust/commit/0917e131d57b8fb84b462dad13cadbe051f5d011", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0917e131d57b8fb84b462dad13cadbe051f5d011/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f91f32938358d65945e5214f664b8f0453d4a28", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f91f32938358d65945e5214f664b8f0453d4a28", "html_url": "https://github.com/rust-lang/rust/commit/3f91f32938358d65945e5214f664b8f0453d4a28"}, {"sha": "332c0460290ade81edf44b55d47edcb4990a3b5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/332c0460290ade81edf44b55d47edcb4990a3b5a", "html_url": "https://github.com/rust-lang/rust/commit/332c0460290ade81edf44b55d47edcb4990a3b5a"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "e928a5d5fb4bf62ae7b6260ae804e8e15a588be3", "filename": "doc/rust.md", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0917e131d57b8fb84b462dad13cadbe051f5d011/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/0917e131d57b8fb84b462dad13cadbe051f5d011/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=0917e131d57b8fb84b462dad13cadbe051f5d011", "patch": "@@ -1085,6 +1085,15 @@ let p = Point(10, 11);\n let px: int = match p { Point(x, _) => x };\n ~~~~\n \n+A _unit-like struct_ is a structure without any fields, defined by leaving off the fields list entirely.\n+Such types will have a single value, just like the [unit value `()`](#unit-and-boolean-literals) of the unit type.\n+For example:\n+\n+~~~~\n+struct Cookie;\n+let c = [Cookie, Cookie, Cookie, Cookie];\n+~~~~\n+\n ### Enumerations\n \n An _enumeration_ is a simultaneous definition of a nominal [enumerated type](#enumerated-types) as well as a set of *constructors*,\n@@ -1590,7 +1599,8 @@ struct_expr : expr_path '{' ident ':' expr\n                       [ ',' ident ':' expr ] *\n                       [ \"..\" expr ] '}' |\n               expr_path '(' expr\n-                      [ ',' expr ] * ')'\n+                      [ ',' expr ] * ')' |\n+              expr_path\n ~~~~~~~~\n \n There are several forms of structure expressions.\n@@ -1600,23 +1610,28 @@ providing the field values of a new instance of the structure.\n A field name can be any identifier, and is separated from its value expression by a colon.\n To indicate that a field is mutable, the `mut` keyword is written before its name.\n \n-A _tuple structure expression_ constists of the [path](#paths) of a [structure item](#structures),\n+A _tuple structure expression_ consists of the [path](#paths) of a [structure item](#structures),\n followed by a parenthesized list of one or more comma-separated expressions\n (in other words, the path of a structured item followed by a tuple expression).\n The structure item must be a tuple structure item.\n \n+A _unit-like structure expression_ consists only of the [path](#paths) of a [structure item](#structures).\n+\n The following are examples of structure expressions:\n \n ~~~~\n # struct Point { x: float, y: float }\n # struct TuplePoint(float, float);\n # mod game { pub struct User { name: &str, age: uint, score: uint } }\n+# struct Cookie; fn some_fn<T>(t: T) {}\n Point {x: 10f, y: 20f};\n TuplePoint(10f, 20f);\n let u = game::User {name: \"Joe\", age: 35u, score: 100_000};\n+some_fn::<Cookie>(Cookie);\n ~~~~\n \n A structure expression forms a new value of the named structure type.\n+Note that for a given *unit-like* structure type, this will always be the same value.\n \n A structure expression can terminate with the syntax `..` followed by an expression to denote a functional update.\n The expression following `..` (the base) must be of the same structure type as the new structure type being formed.\n@@ -2643,7 +2658,10 @@ the resulting `struct` value will always be laid out in memory in the order spec\n The fields of a `struct` may be qualified by [visibility modifiers](#visibility-modifiers),\n to restrict access to implementation-private data in a structure.\n \n-A `tuple struct` type is just like a structure type, except that the fields are anonymous.\n+A _tuple struct_ type is just like a structure type, except that the fields are anonymous.\n+\n+A _unit-like struct_ type is like a structure type, except that it has no fields.\n+The one value constructed by the associated [structure expression](#structure-expression) is the only value that inhabits such a type.\n \n ### Enumerated types\n "}]}