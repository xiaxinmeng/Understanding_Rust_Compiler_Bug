{"sha": "40a62a998fafc81d8b21260a151831b5d79537d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYTYyYTk5OGZhZmM4MWQ4YjIxMjYwYTE1MTgzMWI1ZDc5NTM3ZDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-12T11:05:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-12T11:05:56Z"}, "message": "Auto merge of #83813 - cbeuw:remap-std, r=michaelwoerister\n\nFix `--remap-path-prefix` not correctly remapping `rust-src` component paths and unify handling of path mapping with virtualized paths\n\nThis PR fixes #73167 (\"Binaries end up containing path to the rust-src component despite `--remap-path-prefix`\") by preventing real local filesystem paths from reaching compilation output if the path is supposed to be remapped.\n\n`RealFileName::Named` introduced in #72767 is now renamed as `LocalPath`, because this variant wraps a (most likely) valid local filesystem path.\n\n`RealFileName::Devirtualized` is renamed as `Remapped` to be used for remapped path from a real path via `--remap-path-prefix` argument, as well as real path inferred from a virtualized (during compiler bootstrapping) `/rustc/...` path. The `local_path` field is now an `Option<PathBuf>`, as it will be set to `None` before serialisation, so it never reaches any build output. Attempting to serialise a non-`None` `local_path` will cause an assertion faliure.\n\nWhen a path is remapped, a `RealFileName::Remapped` variant is created. The original path is preserved in `local_path` field and the remapped path is saved in `virtual_name` field. Previously, the `local_path` is directly modified which goes against its purpose of \"suitable for reading from the file system on the local host\".\n\n`rustc_span::SourceFile`'s fields `unmapped_path` (introduced by #44940) and `name_was_remapped` (introduced by #41508 when `--remap-path-prefix` feature originally added) are removed, as these two pieces of information can be inferred from the `name` field: if it's anything other than a `FileName::Real(_)`, or if it is a `FileName::Real(RealFileName::LocalPath(_))`, then clearly `name_was_remapped` would've been false and `unmapped_path` would've been `None`. If it is a `FileName::Real(RealFileName::Remapped{local_path, virtual_name})`, then `name_was_remapped` would've been true and `unmapped_path` would've been `Some(local_path)`.\n\ncc `@eddyb` who implemented `/rustc/...` path devirtualisation", "tree": {"sha": "7976452937aa2ef9e0cd5cd3cbfe6e3b4232cee0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7976452937aa2ef9e0cd5cd3cbfe6e3b4232cee0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40a62a998fafc81d8b21260a151831b5d79537d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40a62a998fafc81d8b21260a151831b5d79537d8", "html_url": "https://github.com/rust-lang/rust/commit/40a62a998fafc81d8b21260a151831b5d79537d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40a62a998fafc81d8b21260a151831b5d79537d8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "809722dc134093c00e471e0c85876adeb3747d1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/809722dc134093c00e471e0c85876adeb3747d1e", "html_url": "https://github.com/rust-lang/rust/commit/809722dc134093c00e471e0c85876adeb3747d1e"}, {"sha": "e162eeb1f0492822cc810decee23d6d9b9c084f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e162eeb1f0492822cc810decee23d6d9b9c084f0", "html_url": "https://github.com/rust-lang/rust/commit/e162eeb1f0492822cc810decee23d6d9b9c084f0"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "c12d6d0f1414306a13c698059eb544493129766a", "filename": "src/common.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40a62a998fafc81d8b21260a151831b5d79537d8/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40a62a998fafc81d8b21260a151831b5d79537d8/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=40a62a998fafc81d8b21260a151831b5d79537d8", "patch": "@@ -334,7 +334,9 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n         let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n         let caller = self.tcx.sess.source_map().lookup_char_pos(topmost.lo());\n         let const_loc = self.tcx.const_caller_location((\n-            rustc_span::symbol::Symbol::intern(&caller.file.name.to_string()),\n+            rustc_span::symbol::Symbol::intern(\n+                &caller.file.name.prefer_remapped().to_string_lossy(),\n+            ),\n             caller.line as u32,\n             caller.col_display as u32 + 1,\n         ));"}, {"sha": "9eb067706309e12cebc5a06146d24e433da1f6e0", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40a62a998fafc81d8b21260a151831b5d79537d8/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40a62a998fafc81d8b21260a151831b5d79537d8/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=40a62a998fafc81d8b21260a151831b5d79537d8", "patch": "@@ -66,7 +66,7 @@ fn line_program_add_file(\n ) -> FileId {\n     match &file.name {\n         FileName::Real(path) => {\n-            let (dir_path, file_name) = split_path_dir_and_file(path.stable_name());\n+            let (dir_path, file_name) = split_path_dir_and_file(path.remapped_path_if_available());\n             let dir_name = osstr_as_utf8_bytes(dir_path.as_os_str());\n             let file_name = osstr_as_utf8_bytes(file_name);\n \n@@ -87,7 +87,7 @@ fn line_program_add_file(\n         filename => {\n             let dir_id = line_program.default_directory();\n             let dummy_file_name = LineString::new(\n-                filename.to_string().into_bytes(),\n+                filename.prefer_remapped().to_string().into_bytes(),\n                 line_program.encoding(),\n                 line_strings,\n             );"}, {"sha": "61e54a76f29ba514956cb25c6066ef6182190e79", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40a62a998fafc81d8b21260a151831b5d79537d8/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40a62a998fafc81d8b21260a151831b5d79537d8/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=40a62a998fafc81d8b21260a151831b5d79537d8", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> DebugContext<'tcx> {\n         // FIXME: how to get version when building out of tree?\n         // Normally this would use option_env!(\"CFG_VERSION\").\n         let producer = format!(\"cg_clif (rustc {})\", \"unknown version\");\n-        let comp_dir = tcx.sess.working_dir.0.to_string_lossy().into_owned();\n+        let comp_dir = tcx.sess.working_dir.to_string_lossy(false).into_owned();\n         let (name, file_info) = match tcx.sess.local_crate_source_file.clone() {\n             Some(path) => {\n                 let name = path.to_string_lossy().into_owned();"}]}