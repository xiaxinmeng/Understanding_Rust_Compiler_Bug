{"sha": "c905f5e1b0315f9637b2f7e52c807e46b2e24ee6", "node_id": "C_kwDOAAsO6NoAKGM5MDVmNWUxYjAzMTVmOTYzN2IyZjdlNTJjODA3ZTQ2YjJlMjRlZTY", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-05T00:18:57Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-05T16:51:17Z"}, "message": "Account for type error on method arg caused by earlier inference\n\n```rust\nfn main() {\n    let v = Vec::new();\n    v.push(0);\n    v.push(0);\n    v.push(\"\");\n}\n```\n\nnow produces\n\n```\nerror[E0308]: mismatched types\n  --> $DIR/point-at-inference-3.rs:6:12\n   |\nLL |     v.push(0);\n   |            - this is of type `{integer}`, which makes `v` to be inferred as `Vec<{integer}>`\n...\nLL |     v.push(\"\");\n   |       ---- ^^ expected integer, found `&str`\n   |       |\n   |       arguments to this function are incorrect\n   |\nnote: associated function defined here\n  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n```", "tree": {"sha": "80bb3b0828e3283eb956188e22ba1e03055fa654", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80bb3b0828e3283eb956188e22ba1e03055fa654"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c905f5e1b0315f9637b2f7e52c807e46b2e24ee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c905f5e1b0315f9637b2f7e52c807e46b2e24ee6", "html_url": "https://github.com/rust-lang/rust/commit/c905f5e1b0315f9637b2f7e52c807e46b2e24ee6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c905f5e1b0315f9637b2f7e52c807e46b2e24ee6/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad82eedfa190b3cd39a535a6e858d79f69c89ff2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad82eedfa190b3cd39a535a6e858d79f69c89ff2", "html_url": "https://github.com/rust-lang/rust/commit/ad82eedfa190b3cd39a535a6e858d79f69c89ff2"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "cff74cd9693dc21685aafb0466b53ccada58c99c", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c905f5e1b0315f9637b2f7e52c807e46b2e24ee6/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c905f5e1b0315f9637b2f7e52c807e46b2e24ee6/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=c905f5e1b0315f9637b2f7e52c807e46b2e24ee6", "patch": "@@ -213,7 +213,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         (expected, Some(err))\n     }\n \n-    fn point_at_expr_source_of_inferred_type(\n+    pub fn point_at_expr_source_of_inferred_type(\n         &self,\n         err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,\n@@ -387,6 +387,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         )),\n                     );\n                     break;\n+                } else if !param_args.is_empty() {\n+                    break;\n                 }\n                 prev = ty;\n             } else {"}, {"sha": "7d6b4aaebf4ea93c4313699c7d0208c065273088", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c905f5e1b0315f9637b2f7e52c807e46b2e24ee6/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c905f5e1b0315f9637b2f7e52c807e46b2e24ee6/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=c905f5e1b0315f9637b2f7e52c807e46b2e24ee6", "patch": "@@ -798,6 +798,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 full_call_span,\n                 format!(\"arguments to this {} are incorrect\", call_name),\n             );\n+            if let (Some(callee_ty), hir::ExprKind::MethodCall(_, rcvr, _, _)) =\n+                (callee_ty, &call_expr.kind)\n+            {\n+                // Type that would have accepted this argument if it hadn't been inferred earlier.\n+                // FIXME: We leave an inference variable for now, but it'd be nice to get a more\n+                // specific type to increase the accuracy of the diagnostic.\n+                let expected = self.infcx.next_ty_var(TypeVariableOrigin {\n+                    kind: TypeVariableOriginKind::MiscVariable,\n+                    span: full_call_span,\n+                });\n+                self.point_at_expr_source_of_inferred_type(&mut err, rcvr, expected, callee_ty);\n+            }\n             // Call out where the function is defined\n             self.label_fn_like(\n                 &mut err,"}, {"sha": "893306d41054d80ebfd9209e6ad21955ef18c8c9", "filename": "src/test/ui/type/type-check/point-at-inference-3.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c905f5e1b0315f9637b2f7e52c807e46b2e24ee6/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c905f5e1b0315f9637b2f7e52c807e46b2e24ee6/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-3.rs?ref=c905f5e1b0315f9637b2f7e52c807e46b2e24ee6", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    let v = Vec::new();\n+    v.push(0);\n+    //~^ NOTE this is of type `{integer}`, which makes `v` to be inferred as `Vec<{integer}>`\n+    v.push(0);\n+    v.push(\"\"); //~ ERROR mismatched types\n+    //~^ NOTE expected integer, found `&str`\n+    //~| NOTE arguments to this function are incorrect\n+    //~| NOTE associated function defined here\n+}"}, {"sha": "01264edf6b6e25e2b80195860e65fe5421c6e363", "filename": "src/test/ui/type/type-check/point-at-inference-3.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c905f5e1b0315f9637b2f7e52c807e46b2e24ee6/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c905f5e1b0315f9637b2f7e52c807e46b2e24ee6/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fpoint-at-inference-3.stderr?ref=c905f5e1b0315f9637b2f7e52c807e46b2e24ee6", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/point-at-inference-3.rs:6:12\n+   |\n+LL |     v.push(0);\n+   |            - this is of type `{integer}`, which makes `v` to be inferred as `Vec<{integer}>`\n+...\n+LL |     v.push(\"\");\n+   |       ---- ^^ expected integer, found `&str`\n+   |       |\n+   |       arguments to this function are incorrect\n+   |\n+note: associated function defined here\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}