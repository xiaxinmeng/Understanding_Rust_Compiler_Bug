{"sha": "bc19a776312eda23e8add1d9f6db4d9d7401d9cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMTlhNzc2MzEyZWRhMjNlOGFkZDFkOWY2ZGI0ZDlkNzQwMWQ5Y2I=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-05-28T01:37:49Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-08-21T01:02:23Z"}, "message": "Add #[repr(C)] to all the things!", "tree": {"sha": "0c0b48ee6caf520010b9a81ae1cbe8ccb579301d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c0b48ee6caf520010b9a81ae1cbe8ccb579301d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc19a776312eda23e8add1d9f6db4d9d7401d9cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc19a776312eda23e8add1d9f6db4d9d7401d9cb", "html_url": "https://github.com/rust-lang/rust/commit/bc19a776312eda23e8add1d9f6db4d9d7401d9cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc19a776312eda23e8add1d9f6db4d9d7401d9cb/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e8ff999589a7b4c7f62f7128f3e028a7b3ea64f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e8ff999589a7b4c7f62f7128f3e028a7b3ea64f", "html_url": "https://github.com/rust-lang/rust/commit/6e8ff999589a7b4c7f62f7128f3e028a7b3ea64f"}], "stats": {"total": 127, "additions": 125, "deletions": 2}, "files": [{"sha": "a8e12ed4b192867673d3cfbe6e6cc75a9fc93f54", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 102, "deletions": 2, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/bc19a776312eda23e8add1d9f6db4d9d7401d9cb/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc19a776312eda23e8add1d9f6db4d9d7401d9cb/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=bc19a776312eda23e8add1d9f6db4d9d7401d9cb", "patch": "@@ -370,6 +370,7 @@ pub mod types {\n \n                 pub type pthread_t = c_ulong;\n \n+                #[repr(C)]\n                 pub struct glob_t {\n                     pub gl_pathc: size_t,\n                     pub gl_pathv: *mut *mut c_char,\n@@ -382,11 +383,13 @@ pub mod types {\n                     pub __unused5: *mut c_void,\n                 }\n \n+                #[repr(C)]\n                 pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n+                #[repr(C)]\n                 pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n@@ -403,42 +406,51 @@ pub mod types {\n                 pub type sa_family_t = u16;\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n+                #[repr(C)]\n                 pub struct sockaddr {\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8, ..14],\n                 }\n+                #[repr(C)]\n                 pub struct sockaddr_storage {\n                     pub ss_family: sa_family_t,\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8, ..112],\n                 }\n+                #[repr(C)]\n                 pub struct sockaddr_in {\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8, ..8],\n                 }\n+                #[repr(C)]\n                 pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n+                #[repr(C)]\n                 pub struct sockaddr_in6 {\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n                     pub sin6_flowinfo: u32,\n                     pub sin6_addr: in6_addr,\n                     pub sin6_scope_id: u32,\n                 }\n+                #[repr(C)]\n                 pub struct in6_addr {\n                     pub s6_addr: [u16, ..8]\n                 }\n+                #[repr(C)]\n                 pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n+                #[repr(C)]\n                 pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n+                #[repr(C)]\n                 pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n@@ -460,6 +472,7 @@ pub mod types {\n \n                     pub ai_next: *mut addrinfo,\n                 }\n+                #[repr(C)]\n                 pub struct sockaddr_un {\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char, ..108]\n@@ -534,6 +547,7 @@ pub mod types {\n                 pub type blksize_t = i32;\n                 pub type blkcnt_t = i32;\n \n+                #[repr(C)]\n                 pub struct stat {\n                     pub st_dev: dev_t,\n                     pub __pad1: c_short,\n@@ -557,11 +571,13 @@ pub mod types {\n                     pub __unused5: c_long,\n                 }\n \n+                #[repr(C)]\n                 pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n+                #[repr(C)]\n                 pub struct pthread_attr_t {\n                     pub __size: [u32, ..9]\n                 }\n@@ -576,6 +592,7 @@ pub mod types {\n                 pub type blksize_t = u32;\n                 pub type blkcnt_t = u32;\n \n+                #[repr(C)]\n                 pub struct stat {\n                     pub st_dev: c_ulonglong,\n                     pub __pad0: [c_uchar, ..4],\n@@ -598,11 +615,13 @@ pub mod types {\n                     pub st_ino: c_ulonglong,\n                 }\n \n+                #[repr(C)]\n                 pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n+                #[repr(C)]\n                 pub struct pthread_attr_t {\n                     pub __size: [u32, ..9]\n                 }\n@@ -619,6 +638,7 @@ pub mod types {\n                 pub type blksize_t = i32;\n                 pub type blkcnt_t = i32;\n \n+                #[repr(C)]\n                 pub struct stat {\n                     pub st_dev: c_ulong,\n                     pub st_pad1: [c_long, ..3],\n@@ -642,11 +662,13 @@ pub mod types {\n                     pub st_pad5: [c_long, ..14],\n                 }\n \n+                #[repr(C)]\n                 pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n+                #[repr(C)]\n                 pub struct pthread_attr_t {\n                     pub __size: [u32, ..9]\n                 }\n@@ -703,6 +725,7 @@ pub mod types {\n                 pub type nlink_t = u64;\n                 pub type blksize_t = i64;\n                 pub type blkcnt_t = i64;\n+                #[repr(C)]\n                 pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n@@ -724,11 +747,13 @@ pub mod types {\n                     pub __unused: [c_long, ..3],\n                 }\n \n+                #[repr(C)]\n                 pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n+                #[repr(C)]\n                 pub struct pthread_attr_t {\n                     pub __size: [u64, ..7]\n                 }\n@@ -753,6 +778,7 @@ pub mod types {\n \n                 pub type pthread_t = uintptr_t;\n \n+                #[repr(C)]\n                 pub struct glob_t {\n                     pub gl_pathc:  size_t,\n                     pub __unused1: size_t,\n@@ -769,11 +795,13 @@ pub mod types {\n                     pub __unused8: *mut c_void,\n                 }\n \n+                #[repr(C)]\n                 pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n+                #[repr(C)]\n                 pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n@@ -790,28 +818,33 @@ pub mod types {\n                 pub type sa_family_t = u8;\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n+                #[repr(C)]\n                 pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8, ..14],\n                 }\n+                #[repr(C)]\n                 pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8, ..6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8, ..112],\n                 }\n+                #[repr(C)]\n                 pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8, ..8],\n                 }\n+                #[repr(C)]\n                 pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n+                #[repr(C)]\n                 pub struct sockaddr_in6 {\n                     pub sin6_len: u8,\n                     pub sin6_family: sa_family_t,\n@@ -820,17 +853,21 @@ pub mod types {\n                     pub sin6_addr: in6_addr,\n                     pub sin6_scope_id: u32,\n                 }\n+                #[repr(C)]\n                 pub struct in6_addr {\n                     pub s6_addr: [u16, ..8]\n                 }\n+                #[repr(C)]\n                 pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n+                #[repr(C)]\n                 pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n+                #[repr(C)]\n                 pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n@@ -841,6 +878,7 @@ pub mod types {\n                     pub ai_addr: *mut sockaddr,\n                     pub ai_next: *mut addrinfo,\n                 }\n+                #[repr(C)]\n                 pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n@@ -899,6 +937,7 @@ pub mod types {\n                 pub type blksize_t = i64;\n                 pub type blkcnt_t = i64;\n                 pub type fflags_t = u32;\n+                #[repr(C)]\n                 pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n@@ -924,6 +963,7 @@ pub mod types {\n                     pub __unused: [uint8_t, ..2],\n                 }\n \n+                #[repr(C)]\n                 pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n@@ -951,6 +991,7 @@ pub mod types {\n \n                 pub type pthread_t = uintptr_t;\n \n+                #[repr(C)]\n                 pub struct glob_t {\n                     pub gl_pathc:  size_t,\n                     pub __unused1: size_t,\n@@ -967,11 +1008,13 @@ pub mod types {\n                     pub __unused8: *mut c_void,\n                 }\n \n+                #[repr(C)]\n                 pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n+                #[repr(C)]\n                 pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n@@ -988,28 +1031,33 @@ pub mod types {\n                 pub type sa_family_t = u8;\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n+                #[repr(C)]\n                 pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8, ..14],\n                 }\n+                #[repr(C)]\n                 pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8, ..6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8, ..112],\n                 }\n+                #[repr(C)]\n                 pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8, ..8],\n                 }\n+                #[repr(C)]\n                 pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n+                #[repr(C)]\n                 pub struct sockaddr_in6 {\n                     pub sin6_len: u8,\n                     pub sin6_family: sa_family_t,\n@@ -1018,17 +1066,21 @@ pub mod types {\n                     pub sin6_addr: in6_addr,\n                     pub sin6_scope_id: u32,\n                 }\n+                #[repr(C)]\n                 pub struct in6_addr {\n                     pub s6_addr: [u16, ..8]\n                 }\n+                #[repr(C)]\n                 pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n+                #[repr(C)]\n                 pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n+                #[repr(C)]\n                 pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n@@ -1039,6 +1091,7 @@ pub mod types {\n                     pub ai_addr: *mut sockaddr,\n                     pub ai_next: *mut addrinfo,\n                 }\n+                #[repr(C)]\n                 pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n@@ -1099,6 +1152,7 @@ pub mod types {\n                 pub type blkcnt_t = i64;\n                 pub type fflags_t = u32;\n \n+                #[repr(C)]\n                 pub struct stat {\n                     pub st_ino: ino_t,\n                     pub st_nlink: nlink_t,\n@@ -1123,6 +1177,7 @@ pub mod types {\n                     pub st_qspare1: int64_t,\n                     pub st_qspare2: int64_t,\n                 }\n+                #[repr(C)]\n                 pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n@@ -1150,6 +1205,7 @@ pub mod types {\n \n                 // pub Note: this is the struct called stat64 in win32. Not stat,\n                 // nor stati64.\n+                #[repr(C)]\n                 pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n@@ -1165,16 +1221,19 @@ pub mod types {\n                 }\n \n                 // note that this is called utimbuf64 in win32\n+                #[repr(C)]\n                 pub struct utimbuf {\n                     pub actime: time64_t,\n                     pub modtime: time64_t,\n                 }\n \n+                #[repr(C)]\n                 pub struct timeval {\n                     pub tv_sec: c_long,\n                     pub tv_usec: c_long,\n                 }\n \n+                #[repr(C)]\n                 pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n@@ -1184,50 +1243,59 @@ pub mod types {\n             }\n \n             pub mod bsd44 {\n-                use types::os::arch::c95::{c_char, c_int, c_uint, size_t};\n+                use types::os::arch::c95::{c_char, c_int, c_uint, size_t, uintptr_t};\n \n                 pub type SOCKET = uint;\n                 pub type socklen_t = c_int;\n                 pub type sa_family_t = u16;\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n+                #[repr(C)]\n                 pub struct sockaddr {\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8, ..14],\n                 }\n+                #[repr(C)]\n                 pub struct sockaddr_storage {\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8, ..6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8, ..112],\n                 }\n+                #[repr(C)]\n                 pub struct sockaddr_in {\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8, ..8],\n                 }\n+                #[repr(C)]\n                 pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n+                #[repr(C)]\n                 pub struct sockaddr_in6 {\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n                     pub sin6_flowinfo: u32,\n                     pub sin6_addr: in6_addr,\n                     pub sin6_scope_id: u32,\n                 }\n+                #[repr(C)]\n                 pub struct in6_addr {\n                     pub s6_addr: [u16, ..8]\n                 }\n+                #[repr(C)]\n                 pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n+                #[repr(C)]\n                 pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n+                #[repr(C)]\n                 pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n@@ -1238,6 +1306,7 @@ pub mod types {\n                     pub ai_addr: *mut sockaddr,\n                     pub ai_next: *mut addrinfo,\n                 }\n+                #[repr(C)]\n                 pub struct sockaddr_un {\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char, ..108]\n@@ -1320,7 +1389,7 @@ pub mod types {\n                 use types::os::arch::c95::{c_char, c_int, c_uint, size_t};\n                 use types::os::arch::c95::{c_long, c_ulong};\n                 use types::os::arch::c95::{wchar_t};\n-                use types::os::arch::c99::{c_ulonglong, c_longlong};\n+                use types::os::arch::c99::{c_ulonglong, c_longlong, uintptr_t};\n \n                 pub type BOOL = c_int;\n                 pub type BYTE = u8;\n@@ -1354,6 +1423,7 @@ pub mod types {\n                 pub type LPWCH = *mut WCHAR;\n                 pub type LPCH = *mut CHAR;\n \n+                #[repr(C)]\n                 pub struct SECURITY_ATTRIBUTES {\n                     pub nLength: DWORD,\n                     pub lpSecurityDescriptor: LPVOID,\n@@ -1377,6 +1447,7 @@ pub mod types {\n                 pub type time64_t = i64;\n                 pub type int64 = i64;\n \n+                #[repr(C)]\n                 pub struct STARTUPINFO {\n                     pub cb: DWORD,\n                     pub lpReserved: LPWSTR,\n@@ -1399,6 +1470,7 @@ pub mod types {\n                 }\n                 pub type LPSTARTUPINFO = *mut STARTUPINFO;\n \n+                #[repr(C)]\n                 pub struct PROCESS_INFORMATION {\n                     pub hProcess: HANDLE,\n                     pub hThread: HANDLE,\n@@ -1407,6 +1479,7 @@ pub mod types {\n                 }\n                 pub type LPPROCESS_INFORMATION = *mut PROCESS_INFORMATION;\n \n+                #[repr(C)]\n                 pub struct SYSTEM_INFO {\n                     pub wProcessorArchitecture: WORD,\n                     pub wReserved: WORD,\n@@ -1422,6 +1495,7 @@ pub mod types {\n                 }\n                 pub type LPSYSTEM_INFO = *mut SYSTEM_INFO;\n \n+                #[repr(C)]\n                 pub struct MEMORY_BASIC_INFORMATION {\n                     pub BaseAddress: LPVOID,\n                     pub AllocationBase: LPVOID,\n@@ -1433,6 +1507,7 @@ pub mod types {\n                 }\n                 pub type LPMEMORY_BASIC_INFORMATION = *mut MEMORY_BASIC_INFORMATION;\n \n+                #[repr(C)]\n                 pub struct OVERLAPPED {\n                     pub Internal: *mut c_ulong,\n                     pub InternalHigh: *mut c_ulong,\n@@ -1443,27 +1518,31 @@ pub mod types {\n \n                 pub type LPOVERLAPPED = *mut OVERLAPPED;\n \n+                #[repr(C)]\n                 pub struct FILETIME {\n                     pub dwLowDateTime: DWORD,\n                     pub dwHighDateTime: DWORD,\n                 }\n \n                 pub type LPFILETIME = *mut FILETIME;\n \n+                #[repr(C)]\n                 pub struct GUID {\n                     pub Data1: DWORD,\n                     pub Data2: WORD,\n                     pub Data3: WORD,\n                     pub Data4: [BYTE, ..8],\n                 }\n \n+                #[repr(C)]\n                 pub struct WSAPROTOCOLCHAIN {\n                     pub ChainLen: c_int,\n                     pub ChainEntries: [DWORD, ..MAX_PROTOCOL_CHAIN as uint],\n                 }\n \n                 pub type LPWSAPROTOCOLCHAIN = *mut WSAPROTOCOLCHAIN;\n \n+                #[repr(C)]\n                 pub struct WSAPROTOCOL_INFO {\n                     pub dwServiceFlags1: DWORD,\n                     pub dwServiceFlags2: DWORD,\n@@ -1506,6 +1585,7 @@ pub mod types {\n \n                 pub type pthread_t = uintptr_t;\n \n+                #[repr(C)]\n                 pub struct glob_t {\n                     pub gl_pathc:  size_t,\n                     pub __unused1: c_int,\n@@ -1522,11 +1602,13 @@ pub mod types {\n                     pub __unused8: *mut c_void,\n                 }\n \n+                #[repr(C)]\n                 pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n+                #[repr(C)]\n                 pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n@@ -1544,28 +1626,33 @@ pub mod types {\n                 pub type sa_family_t = u8;\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n+                #[repr(C)]\n                 pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8, ..14],\n                 }\n+                #[repr(C)]\n                 pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8, ..6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8, ..112],\n                 }\n+                #[repr(C)]\n                 pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8, ..8],\n                 }\n+                #[repr(C)]\n                 pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n+                #[repr(C)]\n                 pub struct sockaddr_in6 {\n                     pub sin6_len: u8,\n                     pub sin6_family: sa_family_t,\n@@ -1574,17 +1661,21 @@ pub mod types {\n                     pub sin6_addr: in6_addr,\n                     pub sin6_scope_id: u32,\n                 }\n+                #[repr(C)]\n                 pub struct in6_addr {\n                     pub s6_addr: [u16, ..8]\n                 }\n+                #[repr(C)]\n                 pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n+                #[repr(C)]\n                 pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n+                #[repr(C)]\n                 pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n@@ -1595,6 +1686,7 @@ pub mod types {\n                     pub ai_addr: *mut sockaddr,\n                     pub ai_next: *mut addrinfo,\n                 }\n+                #[repr(C)]\n                 pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n@@ -1652,6 +1744,7 @@ pub mod types {\n                 pub type blksize_t = i64;\n                 pub type blkcnt_t = i32;\n \n+                #[repr(C)]\n                 pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_mode: mode_t,\n@@ -1677,11 +1770,13 @@ pub mod types {\n                     pub st_qspare: [int64_t, ..2],\n                 }\n \n+                #[repr(C)]\n                 pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n+                #[repr(C)]\n                 pub struct pthread_attr_t {\n                     pub __sig: c_long,\n                     pub __opaque: [c_char, ..36]\n@@ -1692,6 +1787,7 @@ pub mod types {\n             pub mod bsd44 {\n             }\n             pub mod extra {\n+                #[repr(C)]\n                 pub struct mach_timebase_info {\n                     pub numer: u32,\n                     pub denom: u32,\n@@ -1750,6 +1846,7 @@ pub mod types {\n                 pub type blksize_t = i64;\n                 pub type blkcnt_t = i32;\n \n+                #[repr(C)]\n                 pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_mode: mode_t,\n@@ -1775,11 +1872,13 @@ pub mod types {\n                     pub st_qspare: [int64_t, ..2],\n                 }\n \n+                #[repr(C)]\n                 pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n+                #[repr(C)]\n                 pub struct pthread_attr_t {\n                     pub __sig: c_long,\n                     pub __opaque: [c_char, ..56]\n@@ -1790,6 +1889,7 @@ pub mod types {\n             pub mod bsd44 {\n             }\n             pub mod extra {\n+                #[repr(C)]\n                 pub struct mach_timebase_info {\n                     pub numer: u32,\n                     pub denom: u32,"}, {"sha": "1f8584cbd096074a8cd7304d15a21e453d48b6d9", "filename": "src/libnative/io/c_unix.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bc19a776312eda23e8add1d9f6db4d9d7401d9cb/src%2Flibnative%2Fio%2Fc_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc19a776312eda23e8add1d9f6db4d9d7401d9cb/src%2Flibnative%2Fio%2Fc_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fc_unix.rs?ref=bc19a776312eda23e8add1d9f6db4d9d7401d9cb", "patch": "@@ -91,6 +91,7 @@ extern {\n mod select {\n     pub static FD_SETSIZE: uint = 1024;\n \n+    #[repr(C)]\n     pub struct fd_set {\n         fds_bits: [i32, ..(FD_SETSIZE / 32)]\n     }\n@@ -109,6 +110,7 @@ mod select {\n \n     pub static FD_SETSIZE: uint = 1024;\n \n+    #[repr(C)]\n     pub struct fd_set {\n         // FIXME: shouldn't this be a c_ulong?\n         fds_bits: [uint, ..(FD_SETSIZE / uint::BITS)]\n@@ -139,6 +141,7 @@ mod signal {\n     // This definition is not as accurate as it could be, {pid, uid, status} is\n     // actually a giant union. Currently we're only interested in these fields,\n     // however.\n+    #[repr(C)]\n     pub struct siginfo {\n         si_signo: libc::c_int,\n         si_errno: libc::c_int,\n@@ -148,17 +151,21 @@ mod signal {\n         pub status: libc::c_int,\n     }\n \n+    #[repr(C)]\n     pub struct sigaction {\n         pub sa_handler: extern fn(libc::c_int),\n         pub sa_mask: sigset_t,\n         pub sa_flags: libc::c_ulong,\n         sa_restorer: *mut libc::c_void,\n     }\n \n+    #[repr(C)]\n     #[cfg(target_word_size = \"32\")]\n     pub struct sigset_t {\n         __val: [libc::c_ulong, ..32],\n     }\n+\n+    #[repr(C)]\n     #[cfg(target_word_size = \"64\")]\n     pub struct sigset_t {\n         __val: [libc::c_ulong, ..16],\n@@ -182,6 +189,7 @@ mod signal {\n     // This definition is not as accurate as it could be, {pid, uid, status} is\n     // actually a giant union. Currently we're only interested in these fields,\n     // however.\n+    #[repr(C)]\n     pub struct siginfo {\n         si_signo: libc::c_int,\n         si_code: libc::c_int,\n@@ -191,6 +199,7 @@ mod signal {\n         pub status: libc::c_int,\n     }\n \n+    #[repr(C)]\n     pub struct sigaction {\n         pub sa_flags: libc::c_uint,\n         pub sa_handler: extern fn(libc::c_int),\n@@ -199,6 +208,7 @@ mod signal {\n         sa_resv: [libc::c_int, ..1],\n     }\n \n+    #[repr(C)]\n     pub struct sigset_t {\n         __val: [libc::c_ulong, ..32],\n     }\n@@ -231,6 +241,7 @@ mod signal {\n \n     // This structure has more fields, but we're not all that interested in\n     // them.\n+    #[repr(C)]\n     pub struct siginfo {\n         pub si_signo: libc::c_int,\n         pub si_errno: libc::c_int,\n@@ -242,6 +253,7 @@ mod signal {\n \n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"ios\")]\n+    #[repr(C)]\n     pub struct sigaction {\n         pub sa_handler: extern fn(libc::c_int),\n         sa_tramp: *mut libc::c_void,\n@@ -251,6 +263,7 @@ mod signal {\n \n     #[cfg(target_os = \"freebsd\")]\n     #[cfg(target_os = \"dragonfly\")]\n+    #[repr(C)]\n     pub struct sigaction {\n         pub sa_handler: extern fn(libc::c_int),\n         pub sa_flags: libc::c_int,"}, {"sha": "305c18480f6690911110129febeb7134b644b2cf", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc19a776312eda23e8add1d9f6db4d9d7401d9cb/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc19a776312eda23e8add1d9f6db4d9d7401d9cb/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=bc19a776312eda23e8add1d9f6db4d9d7401d9cb", "patch": "@@ -65,6 +65,7 @@ static HOEDOWN_EXTENSIONS: libc::c_uint =\n \n type hoedown_document = libc::c_void;  // this is opaque to us\n \n+#[repr(C)]\n struct hoedown_renderer {\n     opaque: *mut hoedown_html_renderer_state,\n     blockcode: Option<extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n@@ -78,6 +79,7 @@ struct hoedown_renderer {\n     other: [libc::size_t, ..28],\n }\n \n+#[repr(C)]\n struct hoedown_html_renderer_state {\n     opaque: *mut libc::c_void,\n     toc_data: html_toc_data,\n@@ -87,6 +89,7 @@ struct hoedown_html_renderer_state {\n                                           *mut libc::c_void)>,\n }\n \n+#[repr(C)]\n struct html_toc_data {\n     header_count: libc::c_int,\n     current_level: libc::c_int,\n@@ -100,6 +103,7 @@ struct MyOpaque {\n     toc_builder: Option<TocBuilder>,\n }\n \n+#[repr(C)]\n struct hoedown_buffer {\n     data: *const u8,\n     size: libc::size_t,"}, {"sha": "c0f674d1eece8210de04ce1c47f92e0a8074e794", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bc19a776312eda23e8add1d9f6db4d9d7401d9cb/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc19a776312eda23e8add1d9f6db4d9d7401d9cb/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=bc19a776312eda23e8add1d9f6db4d9d7401d9cb", "patch": "@@ -103,6 +103,7 @@ pub type uv_buf_len_t = libc::size_t;\n pub type uv_buf_len_t = libc::c_ulong;\n \n // see libuv/include/uv-unix.h\n+#[repr(C)]\n #[cfg(unix)]\n pub struct uv_buf_t {\n     pub base: *mut u8,\n@@ -114,6 +115,7 @@ pub type uv_os_socket_t = c_int;\n \n // see libuv/include/uv-win.h\n #[cfg(windows)]\n+#[repr(C)]\n pub struct uv_buf_t {\n     pub len: uv_buf_len_t,\n     pub base: *mut u8,\n@@ -135,6 +137,7 @@ pub enum uv_poll_event {\n     UV_WRITABLE = 2,\n }\n \n+#[repr(C)]\n pub struct uv_process_options_t {\n     pub exit_cb: uv_exit_cb,\n     pub file: *const libc::c_char,\n@@ -178,11 +181,13 @@ pub type uv_tty_t = c_void;\n pub type uv_signal_t = c_void;\n pub type uv_shutdown_t = c_void;\n \n+#[repr(C)]\n pub struct uv_timespec_t {\n     pub tv_sec: libc::c_long,\n     pub tv_nsec: libc::c_long\n }\n \n+#[repr(C)]\n pub struct uv_stat_t {\n     pub st_dev: libc::uint64_t,\n     pub st_mode: libc::uint64_t,"}, {"sha": "769ad2a8468d9f15ea501e5b2b1c59f3cf22eed9", "filename": "src/libstd/io/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc19a776312eda23e8add1d9f6db4d9d7401d9cb/src%2Flibstd%2Fio%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc19a776312eda23e8add1d9f6db4d9d7401d9cb/src%2Flibstd%2Fio%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftest.rs?ref=bc19a776312eda23e8add1d9f6db4d9d7401d9cb", "patch": "@@ -146,6 +146,7 @@ mod darwin_fd_limit {\n \n     use libc;\n     type rlim_t = libc::uint64_t;\n+    #[repr(C)]\n     struct rlimit {\n         rlim_cur: rlim_t,\n         rlim_max: rlim_t"}]}