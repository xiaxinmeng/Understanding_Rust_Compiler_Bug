{"sha": "34716a31db9371501fe98100a7aa1566f37c1d23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NzE2YTMxZGI5MzcxNTAxZmU5ODEwMGE3YWExNTY2ZjM3YzFkMjM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-01-06T06:30:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-06T06:30:23Z"}, "message": "Rollup merge of #67915 - lzutao:Self, r=Centril\n\nUse Self instead of $type\n\nr? @Dylan-DPC", "tree": {"sha": "6e9574bac0128d5184af68d208b2ee8d9e98e416", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e9574bac0128d5184af68d208b2ee8d9e98e416"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34716a31db9371501fe98100a7aa1566f37c1d23", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeEtP/CRBK7hj4Ov3rIwAAdHIIAFhza2j7/pVjwWdmcCBlZwOc\nT4XpYvsHiHqqKhqPPWdvt8aXZTwJoKBxzJZLMWqybozC+q1lrsq0kR0oZ5i7EVxf\noymnLarEU50w4E97EEq90NWPgut1Pa7Kaq7hTc556mmPzkYF1/SPy9iMVinA8uYD\njUoXL5cotPbBZdc58mY2Hv2rckiFDEUPn4GkEEEACu1qW+lgXyvhfck2NEXVUMmX\n+Nbmk5UKvVQobYPFzmEz78XvdQQucNmO1DMmaPrg7Y3uHR6R99e8i7fdemaLYXGn\n8DDA09kCtSIQie4hRnQPSrcm7cU6iYh+EeLpZbBHPpLetVLrwz2ukz8BOeHl4zY=\n=CC7f\n-----END PGP SIGNATURE-----\n", "payload": "tree 6e9574bac0128d5184af68d208b2ee8d9e98e416\nparent 162154f3768c8d6cd20a67353aaecf741c5e6ba2\nparent c7dbf5ad540402bb6f8f09d9d7f903316232cea5\nauthor Dylan DPC <dylan.dpc@gmail.com> 1578292223 +0530\ncommitter GitHub <noreply@github.com> 1578292223 +0530\n\nRollup merge of #67915 - lzutao:Self, r=Centril\n\nUse Self instead of $type\n\nr? @Dylan-DPC\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34716a31db9371501fe98100a7aa1566f37c1d23", "html_url": "https://github.com/rust-lang/rust/commit/34716a31db9371501fe98100a7aa1566f37c1d23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34716a31db9371501fe98100a7aa1566f37c1d23/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "162154f3768c8d6cd20a67353aaecf741c5e6ba2", "url": "https://api.github.com/repos/rust-lang/rust/commits/162154f3768c8d6cd20a67353aaecf741c5e6ba2", "html_url": "https://github.com/rust-lang/rust/commit/162154f3768c8d6cd20a67353aaecf741c5e6ba2"}, {"sha": "c7dbf5ad540402bb6f8f09d9d7f903316232cea5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7dbf5ad540402bb6f8f09d9d7f903316232cea5", "html_url": "https://github.com/rust-lang/rust/commit/c7dbf5ad540402bb6f8f09d9d7f903316232cea5"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "752199c94b8aed8802df0ab7997afe4e48da1183", "filename": "src/libcore/convert/num.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/34716a31db9371501fe98100a7aa1566f37c1d23/src%2Flibcore%2Fconvert%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34716a31db9371501fe98100a7aa1566f37c1d23/src%2Flibcore%2Fconvert%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert%2Fnum.rs?ref=34716a31db9371501fe98100a7aa1566f37c1d23", "patch": "@@ -47,8 +47,8 @@ macro_rules! impl_from {\n         #[doc = $doc]\n         impl From<$Small> for $Large {\n             #[inline]\n-            fn from(small: $Small) -> $Large {\n-                small as $Large\n+            fn from(small: $Small) -> Self {\n+                small as Self\n             }\n         }\n     };\n@@ -177,7 +177,7 @@ macro_rules! try_from_unbounded {\n             /// is outside of the range of the target type.\n             #[inline]\n             fn try_from(value: $source) -> Result<Self, Self::Error> {\n-                Ok(value as $target)\n+                Ok(value as Self)\n             }\n         }\n     )*}\n@@ -194,9 +194,9 @@ macro_rules! try_from_lower_bounded {\n             /// number type. This returns an error if the source value\n             /// is outside of the range of the target type.\n             #[inline]\n-            fn try_from(u: $source) -> Result<$target, TryFromIntError> {\n+            fn try_from(u: $source) -> Result<Self, Self::Error> {\n                 if u >= 0 {\n-                    Ok(u as $target)\n+                    Ok(u as Self)\n                 } else {\n                     Err(TryFromIntError(()))\n                 }\n@@ -216,11 +216,11 @@ macro_rules! try_from_upper_bounded {\n             /// number type. This returns an error if the source value\n             /// is outside of the range of the target type.\n             #[inline]\n-            fn try_from(u: $source) -> Result<$target, TryFromIntError> {\n-                if u > (<$target>::max_value() as $source) {\n+            fn try_from(u: $source) -> Result<Self, Self::Error> {\n+                if u > (Self::max_value() as $source) {\n                     Err(TryFromIntError(()))\n                 } else {\n-                    Ok(u as $target)\n+                    Ok(u as Self)\n                 }\n             }\n         }\n@@ -238,13 +238,13 @@ macro_rules! try_from_both_bounded {\n             /// number type. This returns an error if the source value\n             /// is outside of the range of the target type.\n             #[inline]\n-            fn try_from(u: $source) -> Result<$target, TryFromIntError> {\n-                let min = <$target>::min_value() as $source;\n-                let max = <$target>::max_value() as $source;\n+            fn try_from(u: $source) -> Result<Self, Self::Error> {\n+                let min = Self::min_value() as $source;\n+                let max = Self::max_value() as $source;\n                 if u < min || u > max {\n                     Err(TryFromIntError(()))\n                 } else {\n-                    Ok(u as $target)\n+                    Ok(u as Self)\n                 }\n             }\n         }\n@@ -385,10 +385,10 @@ macro_rules! nzint_impl_from {\n         #[doc = $doc]\n         impl From<$Small> for $Large {\n             #[inline]\n-            fn from(small: $Small) -> $Large {\n+            fn from(small: $Small) -> Self {\n                 // SAFETY: input type guarantees the value is non-zero\n                 unsafe {\n-                    <$Large>::new_unchecked(small.get().into())\n+                    Self::new_unchecked(small.get().into())\n                 }\n             }\n         }"}, {"sha": "d562639a6588d172c133accfd329c0d5ee74d5f9", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34716a31db9371501fe98100a7aa1566f37c1d23/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34716a31db9371501fe98100a7aa1566f37c1d23/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=34716a31db9371501fe98100a7aa1566f37c1d23", "patch": "@@ -24,8 +24,8 @@ trait Int:\n \n macro_rules! doit {\n     ($($t:ident)*) => ($(impl Int for $t {\n-        fn zero() -> $t { 0 }\n-        fn from_u8(u: u8) -> $t { u as $t }\n+        fn zero() -> Self { 0 }\n+        fn from_u8(u: u8) -> Self { u as Self }\n         fn to_u8(&self) -> u8 { *self as u8 }\n         fn to_u16(&self) -> u16 { *self as u16 }\n         fn to_u32(&self) -> u32 { *self as u32 }"}, {"sha": "55f30794af6522045fd9d51998a73c838373b0ed", "filename": "src/libcore/iter/traits/accum.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/34716a31db9371501fe98100a7aa1566f37c1d23/src%2Flibcore%2Fiter%2Ftraits%2Faccum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34716a31db9371501fe98100a7aa1566f37c1d23/src%2Flibcore%2Fiter%2Ftraits%2Faccum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Faccum.rs?ref=34716a31db9371501fe98100a7aa1566f37c1d23", "patch": "@@ -44,28 +44,28 @@ macro_rules! integer_sum_product {\n     (@impls $zero:expr, $one:expr, #[$attr:meta], $($a:ty)*) => ($(\n         #[$attr]\n         impl Sum for $a {\n-            fn sum<I: Iterator<Item=$a>>(iter: I) -> $a {\n+            fn sum<I: Iterator<Item=Self>>(iter: I) -> Self {\n                 iter.fold($zero, Add::add)\n             }\n         }\n \n         #[$attr]\n         impl Product for $a {\n-            fn product<I: Iterator<Item=$a>>(iter: I) -> $a {\n+            fn product<I: Iterator<Item=Self>>(iter: I) -> Self {\n                 iter.fold($one, Mul::mul)\n             }\n         }\n \n         #[$attr]\n         impl<'a> Sum<&'a $a> for $a {\n-            fn sum<I: Iterator<Item=&'a $a>>(iter: I) -> $a {\n+            fn sum<I: Iterator<Item=&'a Self>>(iter: I) -> Self {\n                 iter.fold($zero, Add::add)\n             }\n         }\n \n         #[$attr]\n         impl<'a> Product<&'a $a> for $a {\n-            fn product<I: Iterator<Item=&'a $a>>(iter: I) -> $a {\n+            fn product<I: Iterator<Item=&'a Self>>(iter: I) -> Self {\n                 iter.fold($one, Mul::mul)\n             }\n         }\n@@ -84,28 +84,28 @@ macro_rules! float_sum_product {\n     ($($a:ident)*) => ($(\n         #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl Sum for $a {\n-            fn sum<I: Iterator<Item=$a>>(iter: I) -> $a {\n+            fn sum<I: Iterator<Item=Self>>(iter: I) -> Self {\n                 iter.fold(0.0, Add::add)\n             }\n         }\n \n         #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl Product for $a {\n-            fn product<I: Iterator<Item=$a>>(iter: I) -> $a {\n+            fn product<I: Iterator<Item=Self>>(iter: I) -> Self {\n                 iter.fold(1.0, Mul::mul)\n             }\n         }\n \n         #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl<'a> Sum<&'a $a> for $a {\n-            fn sum<I: Iterator<Item=&'a $a>>(iter: I) -> $a {\n+            fn sum<I: Iterator<Item=&'a Self>>(iter: I) -> Self {\n                 iter.fold(0.0, Add::add)\n             }\n         }\n \n         #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl<'a> Product<&'a $a> for $a {\n-            fn product<I: Iterator<Item=&'a $a>>(iter: I) -> $a {\n+            fn product<I: Iterator<Item=&'a Self>>(iter: I) -> Self {\n                 iter.fold(1.0, Mul::mul)\n             }\n         }"}, {"sha": "b4b595f330e22ac556e6c245819d91c7536e7b65", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34716a31db9371501fe98100a7aa1566f37c1d23/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34716a31db9371501fe98100a7aa1566f37c1d23/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=34716a31db9371501fe98100a7aa1566f37c1d23", "patch": "@@ -505,15 +505,15 @@ macro_rules! impls {\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<T: ?Sized> Clone for $t<T> {\n-            fn clone(&self) -> $t<T> {\n-                $t\n+            fn clone(&self) -> Self {\n+                Self\n             }\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<T: ?Sized> Default for $t<T> {\n-            fn default() -> $t<T> {\n-                $t\n+            fn default() -> Self {\n+                Self\n             }\n         }\n "}, {"sha": "6f16b93d0488aa6278a24591f6a5c952e828f86d", "filename": "src/libcore/num/bignum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34716a31db9371501fe98100a7aa1566f37c1d23/src%2Flibcore%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34716a31db9371501fe98100a7aa1566f37c1d23/src%2Flibcore%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fbignum.rs?ref=34716a31db9371501fe98100a7aa1566f37c1d23", "patch": "@@ -455,8 +455,8 @@ macro_rules! define_bignum {\n         }\n \n         impl crate::clone::Clone for $name {\n-            fn clone(&self) -> $name {\n-                $name { size: self.size, base: self.base }\n+            fn clone(&self) -> Self {\n+                Self { size: self.size, base: self.base }\n             }\n         }\n "}, {"sha": "3fd576a8d3580699a88c9a93a8dc5721bc34ebcf", "filename": "src/test/ui/issues/issue-8460.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34716a31db9371501fe98100a7aa1566f37c1d23/src%2Ftest%2Fui%2Fissues%2Fissue-8460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34716a31db9371501fe98100a7aa1566f37c1d23/src%2Ftest%2Fui%2Fissues%2Fissue-8460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460.rs?ref=34716a31db9371501fe98100a7aa1566f37c1d23", "patch": "@@ -11,8 +11,8 @@ trait Int {\n }\n macro_rules! doit {\n     ($($t:ident)*) => ($(impl Int for $t {\n-        fn zero() -> $t { 0 }\n-        fn one() -> $t { 1 }\n+        fn zero() -> Self { 0 }\n+        fn one() -> Self { 1 }\n     })*)\n }\n doit! { i8 i16 i32 i64 isize }"}]}