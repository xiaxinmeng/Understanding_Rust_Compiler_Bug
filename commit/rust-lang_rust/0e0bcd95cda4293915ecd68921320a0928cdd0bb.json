{"sha": "0e0bcd95cda4293915ecd68921320a0928cdd0bb", "node_id": "C_kwDOAAsO6NoAKDBlMGJjZDk1Y2RhNDI5MzkxNWVjZDY4OTIxMzIwYTA5MjhjZGQwYmI", "commit": {"author": {"name": "Krasimir Georgiev", "email": "krasimir@google.com", "date": "2022-11-04T16:27:28Z"}, "committer": {"name": "Krasimir Georgiev", "email": "krasimir@google.com", "date": "2022-11-08T11:19:14Z"}, "message": "prevent uninitialized access in black_box for zero-sized-types", "tree": {"sha": "55bc7801d79ea5e89ab474b6fafd280c5d879f85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55bc7801d79ea5e89ab474b6fafd280c5d879f85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e0bcd95cda4293915ecd68921320a0928cdd0bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e0bcd95cda4293915ecd68921320a0928cdd0bb", "html_url": "https://github.com/rust-lang/rust/commit/0e0bcd95cda4293915ecd68921320a0928cdd0bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e0bcd95cda4293915ecd68921320a0928cdd0bb/comments", "author": {"login": "krasimirgg", "id": 29306214, "node_id": "MDQ6VXNlcjI5MzA2MjE0", "avatar_url": "https://avatars.githubusercontent.com/u/29306214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krasimirgg", "html_url": "https://github.com/krasimirgg", "followers_url": "https://api.github.com/users/krasimirgg/followers", "following_url": "https://api.github.com/users/krasimirgg/following{/other_user}", "gists_url": "https://api.github.com/users/krasimirgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/krasimirgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krasimirgg/subscriptions", "organizations_url": "https://api.github.com/users/krasimirgg/orgs", "repos_url": "https://api.github.com/users/krasimirgg/repos", "events_url": "https://api.github.com/users/krasimirgg/events{/privacy}", "received_events_url": "https://api.github.com/users/krasimirgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krasimirgg", "id": 29306214, "node_id": "MDQ6VXNlcjI5MzA2MjE0", "avatar_url": "https://avatars.githubusercontent.com/u/29306214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krasimirgg", "html_url": "https://github.com/krasimirgg", "followers_url": "https://api.github.com/users/krasimirgg/followers", "following_url": "https://api.github.com/users/krasimirgg/following{/other_user}", "gists_url": "https://api.github.com/users/krasimirgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/krasimirgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krasimirgg/subscriptions", "organizations_url": "https://api.github.com/users/krasimirgg/orgs", "repos_url": "https://api.github.com/users/krasimirgg/repos", "events_url": "https://api.github.com/users/krasimirgg/events{/privacy}", "received_events_url": "https://api.github.com/users/krasimirgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47c008e440e59d793c2883f7dd712481dc965045", "url": "https://api.github.com/repos/rust-lang/rust/commits/47c008e440e59d793c2883f7dd712481dc965045", "html_url": "https://github.com/rust-lang/rust/commit/47c008e440e59d793c2883f7dd712481dc965045"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "cf590a43826e53407aab00b691ad66fe0744a3cd", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0e0bcd95cda4293915ecd68921320a0928cdd0bb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0bcd95cda4293915ecd68921320a0928cdd0bb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=0e0bcd95cda4293915ecd68921320a0928cdd0bb", "patch": "@@ -340,17 +340,26 @@ impl<'ll, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n \n             sym::black_box => {\n                 args[0].val.store(self, result);\n-\n+                let result_val_span = [result.llval];\n                 // We need to \"use\" the argument in some way LLVM can't introspect, and on\n                 // targets that support it we can typically leverage inline assembly to do\n                 // this. LLVM's interpretation of inline assembly is that it's, well, a black\n                 // box. This isn't the greatest implementation since it probably deoptimizes\n                 // more than we want, but it's so far good enough.\n+                //\n+                // For zero-sized types, the location pointed to by the result may be\n+                // uninitialized. Do not \"use\" the result in this case; instead just clobber\n+                // the memory.\n+                let (constraint, inputs): (&str, &[_]) = if result.layout.is_zst() {\n+                    (\"~{memory}\", &[])\n+                } else {\n+                    (\"r,~{memory}\", &result_val_span)\n+                };\n                 crate::asm::inline_asm_call(\n                     self,\n                     \"\",\n-                    \"r,~{memory}\",\n-                    &[result.llval],\n+                    constraint,\n+                    inputs,\n                     self.type_void(),\n                     true,\n                     false,"}, {"sha": "6d9b70ad6b1c2c45ab759ab49eec3cb4b05361c0", "filename": "src/test/ui/sanitize/memory-passing.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0e0bcd95cda4293915ecd68921320a0928cdd0bb/src%2Ftest%2Fui%2Fsanitize%2Fmemory-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0bcd95cda4293915ecd68921320a0928cdd0bb/src%2Ftest%2Fui%2Fsanitize%2Fmemory-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fmemory-passing.rs?ref=0e0bcd95cda4293915ecd68921320a0928cdd0bb", "patch": "@@ -0,0 +1,32 @@\n+// needs-sanitizer-support\n+// needs-sanitizer-memory\n+//\n+// revisions: unoptimized optimized\n+//\n+// [optimized]compile-flags: -Z sanitizer=memory -Zsanitizer-memory-track-origins -O\n+// [unoptimized]compile-flags: -Z sanitizer=memory -Zsanitizer-memory-track-origins\n+//\n+// run-pass\n+//\n+// This test case intentionally limits the usage of the std,\n+// since it will be linked with an uninstrumented version of it.\n+\n+#![feature(core_intrinsics)]\n+#![feature(start)]\n+#![allow(invalid_value)]\n+\n+use std::hint::black_box;\n+\n+fn calling_black_box_on_zst_ok() {\n+    // It's OK to call black_box on a value of a zero-sized type, even if its\n+    // underlying the memory location is uninitialized. For non-zero-sized types,\n+    // this would be an MSAN error.\n+    let zst = ();\n+    black_box(zst);\n+}\n+\n+#[start]\n+fn main(_: isize, _: *const *const u8) -> isize {\n+    calling_black_box_on_zst_ok();\n+    0\n+}"}]}