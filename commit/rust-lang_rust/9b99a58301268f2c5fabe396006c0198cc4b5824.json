{"sha": "9b99a58301268f2c5fabe396006c0198cc4b5824", "node_id": "C_kwDOAAsO6NoAKDliOTlhNTgzMDEyNjhmMmM1ZmFiZTM5NjAwNmMwMTk4Y2M0YjU4MjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-15T20:56:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-15T20:56:07Z"}, "message": "Auto merge of #108012 - compiler-errors:issue-107999, r=oli-obk\n\nDon't ICE in `might_permit_raw_init` if reference is polymorphic\n\nEmitting optimized MIR for a polymorphic function may require computing layout of a type that isn't (yet) known. This happens in the instcombine pass, for example. Let's fail gracefully in that condition.\n\ncc `@saethlin`\nfixes #107999", "tree": {"sha": "a99585f9e41946e87c121f20cbd5a6e66a45c719", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a99585f9e41946e87c121f20cbd5a6e66a45c719"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b99a58301268f2c5fabe396006c0198cc4b5824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b99a58301268f2c5fabe396006c0198cc4b5824", "html_url": "https://github.com/rust-lang/rust/commit/9b99a58301268f2c5fabe396006c0198cc4b5824", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b99a58301268f2c5fabe396006c0198cc4b5824/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14bc2e60c236d3b349142cda071cafc9ceee2d3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/14bc2e60c236d3b349142cda071cafc9ceee2d3a", "html_url": "https://github.com/rust-lang/rust/commit/14bc2e60c236d3b349142cda071cafc9ceee2d3a"}, {"sha": "c75610891d8910d350e537acea82571d21d8cf9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c75610891d8910d350e537acea82571d21d8cf9d", "html_url": "https://github.com/rust-lang/rust/commit/c75610891d8910d350e537acea82571d21d8cf9d"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "0d2367c2f83d324e291a5830efe67e39c69479dd", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9b99a58301268f2c5fabe396006c0198cc4b5824/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b99a58301268f2c5fabe396006c0198cc4b5824/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=9b99a58301268f2c5fabe396006c0198cc4b5824", "patch": "@@ -640,7 +640,8 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         sym::assert_inhabited | sym::assert_zero_valid | sym::assert_mem_uninitialized_valid => {\n             intrinsic_args!(fx, args => (); intrinsic);\n \n-            let layout = fx.layout_of(substs.type_at(0));\n+            let ty = substs.type_at(0);\n+            let layout = fx.layout_of(ty);\n             if layout.abi.is_uninhabited() {\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic_nounwind(\n@@ -653,7 +654,10 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             }\n \n             if intrinsic == sym::assert_zero_valid\n-                && !fx.tcx.permits_zero_init(fx.param_env().and(layout))\n+                && !fx\n+                    .tcx\n+                    .permits_zero_init(fx.param_env().and(ty))\n+                    .expect(\"expected to have layout during codegen\")\n             {\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic_nounwind(\n@@ -669,7 +673,10 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             }\n \n             if intrinsic == sym::assert_mem_uninitialized_valid\n-                && !fx.tcx.permits_uninit_init(fx.param_env().and(layout))\n+                && !fx\n+                    .tcx\n+                    .permits_uninit_init(fx.param_env().and(ty))\n+                    .expect(\"expected to have layout during codegen\")\n             {\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic_nounwind("}]}