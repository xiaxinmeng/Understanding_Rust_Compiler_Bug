{"sha": "cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYWEwZjRiOTFiMjdhYmZiM2I0ZmJhNGQwYmIzMWE1ZTNkYTdjODk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-24T21:19:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-26T02:42:59Z"}, "message": "Fail typechecking for bad binop/type combinations\n\nIncludes assignment operations. Add regression tests for lots of less useful,\nless used or unexpected combinations, as well as a selection of compile-fail\ntests. Closes #500 (again!)", "tree": {"sha": "f975de28d5b1e8bb19c7ead52757a83ba5af1977", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f975de28d5b1e8bb19c7ead52757a83ba5af1977"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89", "html_url": "https://github.com/rust-lang/rust/commit/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51d07830baddf3bbcee7352986050721abdca131", "url": "https://api.github.com/repos/rust-lang/rust/commits/51d07830baddf3bbcee7352986050721abdca131", "html_url": "https://github.com/rust-lang/rust/commit/51d07830baddf3bbcee7352986050721abdca131"}], "stats": {"total": 344, "additions": 331, "deletions": 13}, "files": [{"sha": "69a59b4210509d8908d34bd7d2689e2fa3e1d09c", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89", "patch": "@@ -54,6 +54,7 @@ export get_element_type;\n export hash_ty;\n export idx_nil;\n export is_lval;\n+export is_binopable;\n export item_table;\n export lookup_item_type;\n export method;\n@@ -2792,6 +2793,96 @@ fn strip_boxes(&ctxt cx, &ty::t t) -> ty::t {\n     }\n     fail;\n }\n+\n+fn is_binopable(&ctxt cx, t ty, ast::binop op) -> bool {\n+\n+    const int tycat_other = 0;\n+    const int tycat_bool = 1;\n+    const int tycat_int = 2;\n+    const int tycat_float = 3;\n+    const int tycat_str = 4;\n+    const int tycat_vec = 5;\n+    const int tycat_struct = 6;\n+\n+    const int opcat_add = 0;\n+    const int opcat_sub = 1;\n+    const int opcat_mult = 2;\n+    const int opcat_shift = 3;\n+    const int opcat_rel = 4;\n+    const int opcat_eq = 5;\n+    const int opcat_bit = 6;\n+    const int opcat_logic = 7;\n+\n+    fn opcat(ast::binop op) -> int {\n+        alt (op) {\n+            case (ast::add) { opcat_add }\n+            case (ast::sub) { opcat_sub }\n+            case (ast::mul) { opcat_mult }\n+            case (ast::div) { opcat_mult }\n+            case (ast::rem) { opcat_mult }\n+            case (ast::and) { opcat_logic }\n+            case (ast::or) { opcat_logic }\n+            case (ast::bitxor) { opcat_bit }\n+            case (ast::bitand) { opcat_bit }\n+            case (ast::bitor) { opcat_bit }\n+            case (ast::lsl) { opcat_shift }\n+            case (ast::lsr) { opcat_shift }\n+            case (ast::asr) { opcat_shift }\n+            case (ast::eq) { opcat_eq }\n+            case (ast::ne) { opcat_eq }\n+            case (ast::lt) { opcat_rel }\n+            case (ast::le) { opcat_rel }\n+            case (ast::ge) { opcat_rel }\n+            case (ast::gt) { opcat_rel }\n+        }\n+    }\n+\n+    fn tycat(&ctxt cx, t ty) -> int {\n+        alt (struct(cx, strip_boxes(cx, ty))) {\n+            case (ty_bool) { tycat_bool }\n+            case (ty_int) { tycat_int }\n+            case (ty_uint) { tycat_int }\n+            case (ty_machine(ty_i8)) { tycat_int }\n+            case (ty_machine(ty_i16)) { tycat_int }\n+            case (ty_machine(ty_i32)) { tycat_int }\n+            case (ty_machine(ty_i64)) { tycat_int }\n+            case (ty_machine(ty_u8)) { tycat_int }\n+            case (ty_machine(ty_u16)) { tycat_int }\n+            case (ty_machine(ty_u32)) { tycat_int }\n+            case (ty_machine(ty_u64)) { tycat_int }\n+            case (ty_float) { tycat_float }\n+            case (ty_machine(ty_f32)) { tycat_float }\n+            case (ty_machine(ty_f64)) { tycat_float }\n+            case (ty_char) { tycat_int }\n+            case (ty_ptr(_)) { tycat_int }\n+            case (ty_str) { tycat_str }\n+            case (ty_istr) { tycat_str }\n+            case (ty_vec(_)) { tycat_vec }\n+            case (ty_ivec(_)) { tycat_vec }\n+            case (ty_tup(_)) { tycat_struct }\n+            case (ty_rec(_)) { tycat_struct }\n+            case (ty_tag(_, _)) { tycat_struct }\n+            case (_) { tycat_other }\n+        }\n+    }\n+\n+    const bool t = true;\n+    const bool f = false;\n+\n+    /*.          add,     shift,   bit\n+      .             sub,     rel,     logic\n+      .                mult,    eq,         */\n+    auto tbl = [[f, f, f, f, t, t, f, f], /*other*/\n+                [f, f, f, f, t, t, t, t], /*bool*/\n+                [t, t, t, t, t, t, t, f], /*int*/\n+                [t, t, t, f, t, t, f, f], /*float*/\n+                [t, f, f, f, t, t, f, f], /*str*/\n+                [t, f, f, f, t, t, f, f], /*vec*/\n+                [f, f, f, f, t, t, f, f]];/*struct*/\n+\n+    ret tbl.(tycat(cx, ty)).(opcat(op));\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "b851f5e9fb984a1a62be8d8a2f5657d202c55e39", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89", "patch": "@@ -1476,6 +1476,19 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n         write::ty_only_fixup(fcx, id, if_t);\n     }\n \n+    // Checks the compatibility \n+    fn check_binop_type_compat(&@fn_ctxt fcx, common::span span,\n+                               ty::t ty, ast::binop binop) {\n+        auto resolved_t = resolve_type_vars_if_possible(fcx, ty);\n+        if (!ty::is_binopable(fcx.ccx.tcx, resolved_t, binop)) {\n+            auto binopstr = ast::binop_to_str(binop);\n+            auto t_str = ty_to_str(fcx.ccx.tcx, resolved_t);\n+            auto errmsg = \"binary operation \" + binopstr\n+                + \" cannot be applied to type `\" + t_str + \"`\";\n+            fcx.ccx.tcx.sess.span_fatal(span, errmsg);\n+        }\n+    }\n+\n     auto id = expr.id;\n     alt (expr.node) {\n         case (ast::expr_lit(?lit)) {\n@@ -1490,19 +1503,17 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n             auto rhs_t = expr_ty(fcx.ccx.tcx, rhs);\n \n             demand::autoderef(fcx, rhs.span, lhs_t, rhs_t, AUTODEREF_OK);\n-\n-            // FIXME: Binops have a bit more subtlety than this.\n-\n-            auto t = strip_boxes(fcx, expr.span, lhs_t);\n-            alt (binop) {\n-                case (ast::eq) { t = ty::mk_bool(fcx.ccx.tcx); }\n-                case (ast::lt) { t = ty::mk_bool(fcx.ccx.tcx); }\n-                case (ast::le) { t = ty::mk_bool(fcx.ccx.tcx); }\n-                case (ast::ne) { t = ty::mk_bool(fcx.ccx.tcx); }\n-                case (ast::ge) { t = ty::mk_bool(fcx.ccx.tcx); }\n-                case (ast::gt) { t = ty::mk_bool(fcx.ccx.tcx); }\n-                case (_) {/* fall through */ }\n-            }\n+            check_binop_type_compat(fcx, expr.span, lhs_t, binop);\n+\n+            auto t = alt (binop) {\n+                case (ast::eq) { ty::mk_bool(fcx.ccx.tcx) }\n+                case (ast::lt) { ty::mk_bool(fcx.ccx.tcx) }\n+                case (ast::le) { ty::mk_bool(fcx.ccx.tcx) }\n+                case (ast::ne) { ty::mk_bool(fcx.ccx.tcx) }\n+                case (ast::ge) { ty::mk_bool(fcx.ccx.tcx) }\n+                case (ast::gt) { ty::mk_bool(fcx.ccx.tcx) }\n+                case (_) { strip_boxes(fcx, expr.span, lhs_t) }\n+            };\n             write::ty_only_fixup(fcx, id, t);\n         }\n         case (ast::expr_unary(?unop, ?oper)) {\n@@ -1646,6 +1657,8 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n         case (ast::expr_assign_op(?op, ?lhs, ?rhs)) {\n             require_impure(fcx.ccx.tcx.sess, fcx.purity, expr.span);\n             check_assignment(fcx, expr.span, lhs, rhs, id);\n+            check_binop_type_compat(fcx, expr.span,\n+                                    expr_ty(fcx.ccx.tcx, lhs), op);\n         }\n         case (ast::expr_send(?lhs, ?rhs)) {\n             require_impure(fcx.ccx.tcx.sess, fcx.purity, expr.span);"}, {"sha": "6283494fc30745003b4cfa59b2721e6d098d090e", "filename": "src/test/compile-fail/binop-add-tup-assign.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Ftest%2Fcompile-fail%2Fbinop-add-tup-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Ftest%2Fcompile-fail%2Fbinop-add-tup-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-add-tup-assign.rs?ref=cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89", "patch": "@@ -0,0 +1,7 @@\n+// xfail-stage0\n+// error-pattern:+ cannot be applied to type `tup(bool)`\n+\n+fn main() {\n+  auto x = tup(true);\n+  x += tup(false);\n+}\n\\ No newline at end of file"}, {"sha": "2c45d9ae541a9d5f79a36a4a4be8e0a03f52f85f", "filename": "src/test/compile-fail/binop-add-tup.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Ftest%2Fcompile-fail%2Fbinop-add-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Ftest%2Fcompile-fail%2Fbinop-add-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-add-tup.rs?ref=cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89", "patch": "@@ -0,0 +1,6 @@\n+// xfail-stage0\n+// error-pattern:+ cannot be applied to type `tup(bool)`\n+\n+fn main() {\n+  auto x = tup(true) + tup(false);\n+}\n\\ No newline at end of file"}, {"sha": "d66a3696638c7cf2b0308d6b2576924ea4139911", "filename": "src/test/compile-fail/binop-bitxor-str.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs?ref=cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89", "patch": "@@ -0,0 +1,6 @@\n+// xfail-stage0\n+// error-pattern:\\^ cannot be applied to type `str`\n+\n+fn main() {\n+  auto x = \"a\" ^ \"b\";\n+}\n\\ No newline at end of file"}, {"sha": "55448c83be3e008837652d16a729b3d600a3aaf6", "filename": "src/test/compile-fail/binop-logic-float.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Ftest%2Fcompile-fail%2Fbinop-logic-float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Ftest%2Fcompile-fail%2Fbinop-logic-float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-logic-float.rs?ref=cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89", "patch": "@@ -0,0 +1,6 @@\n+// xfail-stage0\n+// error-pattern:|| cannot be applied to type `f32`\n+\n+fn main() {\n+  auto x = 1.0_f32 || 2.0_f32;\n+}\n\\ No newline at end of file"}, {"sha": "e777c2ee2edd31a1cc26c7e3f4bd74e58bb665b8", "filename": "src/test/compile-fail/binop-logic-int.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Ftest%2Fcompile-fail%2Fbinop-logic-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Ftest%2Fcompile-fail%2Fbinop-logic-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-logic-int.rs?ref=cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89", "patch": "@@ -0,0 +1,6 @@\n+// xfail-stage0\n+// error-pattern:&& cannot be applied to type `int`\n+\n+fn main() {\n+  auto x = 1 && 2;\n+}\n\\ No newline at end of file"}, {"sha": "6ab45421ab9ca873093fc996a62e3c708176f97f", "filename": "src/test/compile-fail/binop-mul-bool.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Ftest%2Fcompile-fail%2Fbinop-mul-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Ftest%2Fcompile-fail%2Fbinop-mul-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-mul-bool.rs?ref=cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89", "patch": "@@ -0,0 +1,6 @@\n+// xfail-stage0\n+// error-pattern:* cannot be applied to type `bool`\n+\n+fn main() {\n+  auto x = true * false;\n+}\n\\ No newline at end of file"}, {"sha": "8c06de847b0462f1cd67d8aac72c7f09ddb87f8f", "filename": "src/test/compile-fail/binop-shift-port.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Ftest%2Fcompile-fail%2Fbinop-shift-port.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Ftest%2Fcompile-fail%2Fbinop-shift-port.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-shift-port.rs?ref=cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89", "patch": "@@ -0,0 +1,8 @@\n+// xfail-stage0\n+// error-pattern:>> cannot be applied to type `port\\[int\\]`\n+\n+fn main() {\n+  let port[int] p1 = port();\n+  let port[int] p2 = port();\n+  auto x = p1 >> p2;\n+}\n\\ No newline at end of file"}, {"sha": "54f5584bb6f0a4e06ccff4ddf8a8ff283fc36b7b", "filename": "src/test/compile-fail/binop-sub-obj.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Ftest%2Fcompile-fail%2Fbinop-sub-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Ftest%2Fcompile-fail%2Fbinop-sub-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-sub-obj.rs?ref=cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89", "patch": "@@ -0,0 +1,6 @@\n+// xfail-stage0\n+// error-pattern:\\- cannot be applied to type `obj\n+\n+fn main() {\n+  auto x = obj(){} - obj(){};\n+}\n\\ No newline at end of file"}, {"sha": "e9679f960dd6502b5aeaf993ec98d21eee627829", "filename": "src/test/run-pass/binops.rs", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89", "patch": "@@ -0,0 +1,162 @@\n+// Binop corner cases\n+\n+fn test_nil() {\n+  assert () == ();\n+  assert !(() != ());\n+  // FIXME (#576): The current implementation of relational ops on nil\n+  // is nonsensical\n+  assert () < ();\n+  assert () <= ();\n+  assert !(() > ());\n+  assert !(() >= ());\n+}\n+\n+fn test_bool() {\n+  assert !(true < false);\n+  assert !(true <= false);\n+  assert (true > false);\n+  assert (true >= false);\n+\n+  assert (false < true);\n+  assert (false <= true);\n+  assert !(false > true);\n+  assert !(false >= true);\n+\n+  // Bools support bitwise binops\n+  assert (false & false == false);\n+  assert (true & false == false);\n+  assert (true & true == true);\n+  assert (false | false == false);\n+  assert (true | false == true);\n+  assert (true | true == true);\n+  assert (false ^ false == false);\n+  assert (true ^ false == true);\n+  assert (true ^ true == false);\n+}\n+\n+fn test_char() {\n+  auto ch10 = 10 as char;\n+  auto ch4 = 4 as char;\n+  auto ch2 = 2 as char;\n+  assert ch10 + ch4 == 14 as char;\n+  assert ch10 - ch4 == 6 as char;\n+  assert ch10 * ch4 == 40 as char;\n+  assert ch10 / ch4 == ch2;\n+  assert ch10 % ch4 == ch2;\n+  assert ch10 >> ch2 == ch2;\n+  assert ch10 >>> ch2 == ch2;\n+  assert ch10 << ch4 == 160 as char;\n+  assert ch10 | ch4 == 14 as char;\n+  assert ch10 & ch2 == ch2;\n+  assert ch10 ^ ch2 == 8 as char;\n+}\n+\n+fn test_box() {\n+  assert @10 == 10;\n+  assert 0xFF & @0xF0 == 0xF0;\n+  assert tup(1, 3) < @tup(1, 4);\n+  assert @rec(a = 'x') != @rec(a = 'y');\n+}\n+\n+fn test_port() {\n+  let port[int] p1 = port();\n+  let port[int] p2 = port();\n+\n+  // FIXME (#577) comparison of ports\n+  // assert (p1 != p2);\n+  // assert !(p1 < p2);\n+  // etc\n+}\n+\n+fn test_chan() {\n+  let port[int] p = port();\n+  auto ch1 = chan(p);\n+  auto ch2 = chan(p);\n+\n+  // FIXME (#577) comparison of channels\n+  // assert (ch1 != ch2);\n+  // etc\n+}\n+\n+fn test_ptr() {\n+  // FIXME: Don't know what binops apply to pointers. Don't know how\n+  // to make or use pointers\n+}\n+\n+fn test_task() {\n+  fn f() {}\n+  auto t1 = spawn f();\n+  auto t2 = spawn f();\n+  // FIXME (#577) comparison of tasks\n+  //assert t1 != t2;\n+}\n+\n+fn test_fn() {\n+  fn f() {}\n+  fn g() {}\n+  fn h(int i) {}\n+  auto f1 = f;\n+  auto f2 = f;\n+  auto g1 = g;\n+  auto h1 = h;\n+  auto h2 = h;\n+  assert (f1 == f2);\n+  assert (f1 == f);\n+\n+  assert (f1 == g1);\n+  assert (h1 == h2);\n+  assert !(f1 != f2);\n+  assert !(h1 < h2);\n+  assert (h1 <= h2);\n+  assert !(h1 > h2);\n+  assert (h1 >= h2);\n+}\n+\n+native \"rust\" mod native_mod {\n+  fn str_byte_len(str s) -> vec[u8];\n+  fn str_alloc(uint n_bytes) -> str;\n+}\n+\n+// FIXME: comparison of native fns\n+fn test_native_fn() {\n+  /*assert (native_mod::str_byte_len == native_mod::str_byte_len);\n+    assert (native_mod::str_byte_len != native_mod::str_alloc);*/\n+}\n+\n+fn test_obj() {\n+  auto o1 = obj() { };\n+  auto o2 = obj() { };\n+\n+  assert (o1 == o2);\n+  assert !(o1 != o2);\n+  assert !(o1 < o2);\n+  assert (o1 <= o2);\n+  assert !(o1 > o2);\n+  assert (o1 >= o2);\n+\n+  obj constr1(int i) { };\n+  obj constr2(int i) { };\n+\n+  auto o5 = constr1(10);\n+  auto o6 = constr1(10);\n+  auto o7 = constr1(11);\n+  auto o8 = constr2(11);\n+\n+  assert (o5 == o6);\n+  assert (o6 == o7);\n+  assert (o7 == o8);\n+}\n+\n+fn main() {\n+  test_nil();\n+  test_bool();\n+  test_char();\n+  test_box();\n+  test_port();\n+  test_chan();\n+  test_ptr();\n+  test_task();\n+  test_fn();\n+  test_native_fn();\n+  test_obj();\n+}\n\\ No newline at end of file"}, {"sha": "e9a74162ed6be20a95f2bbd0f5e9c07dcc2bc36e", "filename": "src/test/run-pass/bitwise.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Ftest%2Frun-pass%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89/src%2Ftest%2Frun-pass%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitwise.rs?ref=cfaa0f4b91b27abfb3b4fba4d0bb31a5e3da7c89", "patch": "@@ -18,4 +18,5 @@ fn main() {\n     assert (0xf0 >> 4 == 0xf);\n     assert (-16 >>> 2 == -4);\n     assert (0b1010_1010 | 0b0101_0101 == 0xff);\n+    assert (-1000 >> 3 == 536870787);\n }\n\\ No newline at end of file"}]}