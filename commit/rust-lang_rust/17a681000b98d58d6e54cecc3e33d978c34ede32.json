{"sha": "17a681000b98d58d6e54cecc3e33d978c34ede32", "node_id": "C_kwDOAAsO6NoAKDE3YTY4MTAwMGI5OGQ1OGQ2ZTU0Y2VjYzNlMzNkOTc4YzM0ZWRlMzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-19T11:30:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-19T11:30:44Z"}, "message": "Auto merge of #111641 - michaelwoerister:debugger-visualizer-fixes, r=cjgillot\n\nFix dependency tracking for debugger visualizers\n\nThis PR fixes dependency tracking for debugger visualizer files by changing the `debugger_visualizers` query to an `eval_always` query that scans the AST while it is still available. This way the set of visualizer files is already available when dep-info is emitted. Since the query is turned into an `eval_always` query, dependency tracking will now reliably detect changes to the visualizer script files themselves.\n\nTODO:\n - [x] perf.rlo\n - [x] Needs a bit more documentation in some places\n - [x] Needs regression test for the incr. comp. case\n\nFixes https://github.com/rust-lang/rust/issues/111226\nFixes https://github.com/rust-lang/rust/issues/111227\nFixes https://github.com/rust-lang/rust/issues/111295\n\nr? `@wesleywiser`\ncc `@gibbyfree`", "tree": {"sha": "7bca5b2d6bee8274e4dc95d0fd6968ac51a08a22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bca5b2d6bee8274e4dc95d0fd6968ac51a08a22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17a681000b98d58d6e54cecc3e33d978c34ede32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17a681000b98d58d6e54cecc3e33d978c34ede32", "html_url": "https://github.com/rust-lang/rust/commit/17a681000b98d58d6e54cecc3e33d978c34ede32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17a681000b98d58d6e54cecc3e33d978c34ede32/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d17294d18040f872e5c33e38cf9ce8da860f609", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d17294d18040f872e5c33e38cf9ce8da860f609", "html_url": "https://github.com/rust-lang/rust/commit/2d17294d18040f872e5c33e38cf9ce8da860f609"}, {"sha": "987655aadea337ea902ebee12923db2f75b44c89", "url": "https://api.github.com/repos/rust-lang/rust/commits/987655aadea337ea902ebee12923db2f75b44c89", "html_url": "https://github.com/rust-lang/rust/commit/987655aadea337ea902ebee12923db2f75b44c89"}], "stats": {"total": 391, "additions": 246, "deletions": 145}, "files": [{"sha": "211f5cb0a2a3cb4b3d13df45955f6520a1607424", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -58,7 +58,7 @@ use rustc_errors::{\n use rustc_fluent_macro::fluent_messages;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, LifetimeRes, Namespace, PartialRes, PerNS, Res};\n-use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n+use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::{ConstArg, GenericArg, ItemLocalId, ParamName, TraitCandidate};\n use rustc_index::{Idx, IndexSlice, IndexVec};\n@@ -435,6 +435,7 @@ pub fn lower_to_hir(tcx: TyCtxt<'_>, (): ()) -> hir::Crate<'_> {\n     // Queries that borrow `resolver_for_lowering`.\n     tcx.ensure_with_value().output_filenames(());\n     tcx.ensure_with_value().early_lint_checks(());\n+    tcx.ensure_with_value().debugger_visualizers(LOCAL_CRATE);\n     let (mut resolver, krate) = tcx.resolver_for_lowering(()).steal();\n \n     let ast_index = index_crate(&resolver.node_id_to_def_id, &krate);"}, {"sha": "37f30917609aef11ab1d286fc5183abc45e70645", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/gdb.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -9,10 +9,9 @@ use rustc_ast::attr;\n use rustc_codegen_ssa::base::collect_debugger_visualizers_transitive;\n use rustc_codegen_ssa::traits::*;\n use rustc_hir::def_id::LOCAL_CRATE;\n-use rustc_middle::bug;\n+use rustc_middle::{bug, middle::debugger_visualizer::DebuggerVisualizerType};\n use rustc_session::config::{CrateType, DebugInfo};\n use rustc_span::symbol::sym;\n-use rustc_span::DebuggerVisualizerType;\n \n /// Inserts a side-effect free instruction sequence that makes sure that the\n /// .debug_gdb_scripts global is referenced, so it isn't removed by the linker."}, {"sha": "d1a2e705498900db322c74751cf16af1e1a09f10", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -9,6 +9,7 @@ use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_metadata::find_native_static_library;\n use rustc_metadata::fs::{emit_wrapper_file, METADATA_FILENAME};\n+use rustc_middle::middle::debugger_visualizer::DebuggerVisualizerFile;\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, LdImpl, Strip};\n@@ -21,7 +22,6 @@ use rustc_session::utils::NativeLibKind;\n /// need out of the shared crate context before we get rid of it.\n use rustc_session::{filesearch, Session};\n use rustc_span::symbol::Symbol;\n-use rustc_span::DebuggerVisualizerFile;\n use rustc_target::spec::crt_objects::{CrtObjects, LinkSelfContainedDefault};\n use rustc_target::spec::{Cc, LinkOutputKind, LinkerFlavor, LinkerFlavorCli, Lld, PanicStrategy};\n use rustc_target::spec::{RelocModel, RelroLevel, SanitizerSet, SplitDebuginfo};"}, {"sha": "15c7847155d2f0a509181ee8d9c8779f68acda64", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -23,6 +23,7 @@ use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::lang_items::LangItem;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n+use rustc_middle::middle::debugger_visualizer::{DebuggerVisualizerFile, DebuggerVisualizerType};\n use rustc_middle::middle::exported_symbols;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n use rustc_middle::middle::lang_items;\n@@ -35,7 +36,6 @@ use rustc_session::config::{self, CrateType, EntryFnType, OutputType};\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::Symbol;\n-use rustc_span::{DebuggerVisualizerFile, DebuggerVisualizerType};\n use rustc_target::abi::{Align, FIRST_VARIANT};\n \n use std::collections::BTreeSet;"}, {"sha": "31854c7f4c4e0cb6501d9b3631c9266cf0243e18", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -28,6 +28,7 @@ use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_fluent_macro::fluent_messages;\n use rustc_hir::def_id::CrateNum;\n use rustc_middle::dep_graph::WorkProduct;\n+use rustc_middle::middle::debugger_visualizer::DebuggerVisualizerFile;\n use rustc_middle::middle::dependency_format::Dependencies;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n use rustc_middle::query::{ExternProviders, Providers};\n@@ -38,7 +39,6 @@ use rustc_session::cstore::{self, CrateSource};\n use rustc_session::utils::NativeLibKind;\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n-use rustc_span::DebuggerVisualizerFile;\n use std::collections::BTreeSet;\n use std::io;\n use std::path::{Path, PathBuf};"}, {"sha": "42d8d228091789a7325e597cda767c5c943eb78b", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -487,6 +487,11 @@ fn write_out_deps(tcx: TyCtxt<'_>, outputs: &OutputFilenames, out_filenames: &[P\n             files.push(normalize_path(profile_sample.as_path().to_path_buf()));\n         }\n \n+        // Debugger visualizer files\n+        for debugger_visualizer in tcx.debugger_visualizers(LOCAL_CRATE) {\n+            files.push(normalize_path(debugger_visualizer.path.clone().unwrap()));\n+        }\n+\n         if sess.binary_dep_depinfo() {\n             if let Some(ref backend) = sess.opts.unstable_opts.codegen_backend {\n                 if backend.contains('.') {"}, {"sha": "834e2453ee0f176fe64e8bb2f1eb641ce95ed706", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -19,6 +19,7 @@ use rustc_hir::definitions::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc_hir::diagnostic_items::DiagnosticItems;\n use rustc_index::{Idx, IndexVec};\n use rustc_middle::metadata::ModChild;\n+use rustc_middle::middle::debugger_visualizer::DebuggerVisualizerFile;\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};\n use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::ty::codec::TyDecoder;\n@@ -958,7 +959,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .decode((self, sess))\n     }\n \n-    fn get_debugger_visualizers(self) -> Vec<rustc_span::DebuggerVisualizerFile> {\n+    fn get_debugger_visualizers(self) -> Vec<DebuggerVisualizerFile> {\n         self.root.debugger_visualizers.decode(self).collect::<Vec<_>>()\n     }\n "}, {"sha": "40723f4195988b9fbc03c1d71ce09517575f8d81", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -19,6 +19,7 @@ use rustc_hir::definitions::DefPathData;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::hir::nested_filter;\n+use rustc_middle::middle::debugger_visualizer::DebuggerVisualizerFile;\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::middle::exported_symbols::{\n     metadata_symbol_name, ExportedSymbol, SymbolExportInfo,\n@@ -36,9 +37,7 @@ use rustc_session::config::{CrateType, OptLevel};\n use rustc_session::cstore::{ForeignModule, LinkagePreference, NativeLib};\n use rustc_span::hygiene::{ExpnIndex, HygieneEncodeContext, MacroKind};\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::{\n-    self, DebuggerVisualizerFile, ExternalSource, FileName, SourceFile, Span, SyntaxContext,\n-};\n+use rustc_span::{self, ExternalSource, FileName, SourceFile, Span, SyntaxContext};\n use std::borrow::Borrow;\n use std::collections::hash_map::Entry;\n use std::hash::Hash;\n@@ -1855,7 +1854,16 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n     fn encode_debugger_visualizers(&mut self) -> LazyArray<DebuggerVisualizerFile> {\n         empty_proc_macro!(self);\n-        self.lazy_array(self.tcx.debugger_visualizers(LOCAL_CRATE).iter())\n+        self.lazy_array(\n+            self.tcx\n+                .debugger_visualizers(LOCAL_CRATE)\n+                .iter()\n+                // Erase the path since it may contain privacy sensitive data\n+                // that we don't want to end up in crate metadata.\n+                // The path is only needed for the local crate because of\n+                // `--emit dep-info`.\n+                .map(DebuggerVisualizerFile::path_erased),\n+        )\n     }\n \n     fn encode_crate_deps(&mut self) -> LazyArray<CrateDep> {"}, {"sha": "97e67fcf8fdd0aa838a69a98a2ee101cd8ac668e", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -2,6 +2,7 @@ use crate::creader::CrateMetadataRef;\n use decoder::Metadata;\n use def_path_hash_map::DefPathHashMapRef;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_middle::middle::debugger_visualizer::DebuggerVisualizerFile;\n use table::TableBuilder;\n \n use rustc_ast as ast;\n@@ -245,7 +246,7 @@ pub(crate) struct CrateRoot {\n     proc_macro_data: Option<ProcMacroData>,\n \n     tables: LazyTables,\n-    debugger_visualizers: LazyArray<rustc_span::DebuggerVisualizerFile>,\n+    debugger_visualizers: LazyArray<DebuggerVisualizerFile>,\n \n     exported_symbols: LazyArray<(ExportedSymbol<'static>, SymbolExportInfo)>,\n "}, {"sha": "3b59df778dc98f1a6486fb4cef98ce8645406c0f", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -1,4 +1,5 @@\n use crate::hir::{ModuleItems, Owner};\n+use crate::middle::debugger_visualizer::DebuggerVisualizerFile;\n use crate::query::LocalCrate;\n use crate::ty::TyCtxt;\n use rustc_ast as ast;\n@@ -1165,11 +1166,26 @@ pub(super) fn crate_hash(tcx: TyCtxt<'_>, _: LocalCrate) -> Svh {\n \n     source_file_names.sort_unstable();\n \n+    // We have to take care of debugger visualizers explicitly. The HIR (and\n+    // thus `hir_body_hash`) contains the #[debugger_visualizer] attributes but\n+    // these attributes only store the file path to the visualizer file, not\n+    // their content. Yet that content is exported into crate metadata, so any\n+    // changes to it need to be reflected in the crate hash.\n+    let debugger_visualizers: Vec<_> = tcx\n+        .debugger_visualizers(LOCAL_CRATE)\n+        .iter()\n+        // We ignore the path to the visualizer file since it's not going to be\n+        // encoded in crate metadata and we already hash the full contents of\n+        // the file.\n+        .map(DebuggerVisualizerFile::path_erased)\n+        .collect();\n+\n     let crate_hash: Fingerprint = tcx.with_stable_hashing_context(|mut hcx| {\n         let mut stable_hasher = StableHasher::new();\n         hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);\n         upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);\n         source_file_names.hash_stable(&mut hcx, &mut stable_hasher);\n+        debugger_visualizers.hash_stable(&mut hcx, &mut stable_hasher);\n         if tcx.sess.opts.incremental_relative_spans() {\n             let definitions = tcx.definitions_untracked();\n             let mut owner_spans: Vec<_> = krate"}, {"sha": "a0497d805dad06c447e0996563dae0807f8b5780", "filename": "compiler/rustc_middle/src/middle/debugger_visualizer.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fdebugger_visualizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fdebugger_visualizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fdebugger_visualizer.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -0,0 +1,38 @@\n+use rustc_data_structures::sync::Lrc;\n+use std::path::PathBuf;\n+\n+#[derive(HashStable)]\n+#[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug, Encodable, Decodable)]\n+pub enum DebuggerVisualizerType {\n+    Natvis,\n+    GdbPrettyPrinter,\n+}\n+\n+/// A single debugger visualizer file.\n+#[derive(HashStable)]\n+#[derive(Clone, Debug, Hash, PartialEq, Eq, PartialOrd, Ord, Encodable, Decodable)]\n+pub struct DebuggerVisualizerFile {\n+    /// The complete debugger visualizer source.\n+    pub src: Lrc<[u8]>,\n+    /// Indicates which visualizer type this targets.\n+    pub visualizer_type: DebuggerVisualizerType,\n+    /// The file path to the visualizer file. This is used for reporting\n+    /// visualizer files in dep-info. Before it is written to crate metadata,\n+    /// the path is erased to `None`, so as not to emit potentially privacy\n+    /// sensitive data.\n+    pub path: Option<PathBuf>,\n+}\n+\n+impl DebuggerVisualizerFile {\n+    pub fn new(src: Lrc<[u8]>, visualizer_type: DebuggerVisualizerType, path: PathBuf) -> Self {\n+        DebuggerVisualizerFile { src, visualizer_type, path: Some(path) }\n+    }\n+\n+    pub fn path_erased(&self) -> Self {\n+        DebuggerVisualizerFile {\n+            src: self.src.clone(),\n+            visualizer_type: self.visualizer_type,\n+            path: None,\n+        }\n+    }\n+}"}, {"sha": "85c5af9ca13cbf73b9888be6fd84904a6960a192", "filename": "compiler/rustc_middle/src/middle/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -1,4 +1,5 @@\n pub mod codegen_fn_attrs;\n+pub mod debugger_visualizer;\n pub mod dependency_format;\n pub mod exported_symbols;\n pub mod lang_items;"}, {"sha": "f5b42c804871761ca3ea7491a820d95684ba0d5b", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -12,6 +12,7 @@ use crate::infer::canonical::{self, Canonical};\n use crate::lint::LintExpectation;\n use crate::metadata::ModChild;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n+use crate::middle::debugger_visualizer::DebuggerVisualizerFile;\n use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};\n use crate::middle::lib_features::LibFeatures;\n use crate::middle::privacy::EffectiveVisibilities;\n@@ -1784,12 +1785,18 @@ rustc_queries! {\n         desc { \"looking at the source for a crate\" }\n         separate_provide_extern\n     }\n+\n     /// Returns the debugger visualizers defined for this crate.\n-    query debugger_visualizers(_: CrateNum) -> &'tcx Vec<rustc_span::DebuggerVisualizerFile> {\n+    /// NOTE: This query has to be marked `eval_always` because it reads data\n+    ///       directly from disk that is not tracked anywhere else. I.e. it\n+    ///       represents a genuine input to the query system.\n+    query debugger_visualizers(_: CrateNum) -> &'tcx Vec<DebuggerVisualizerFile> {\n         arena_cache\n         desc { \"looking up the debugger visualizers for this crate\" }\n         separate_provide_extern\n+        eval_always\n     }\n+\n     query postorder_cnums(_: ()) -> &'tcx [CrateNum] {\n         eval_always\n         desc { \"generating a postorder list of CrateNums\" }"}, {"sha": "a2e77d9cdfe38588b19c1a924ddc2488dc8d766e", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -56,6 +56,7 @@ trivially_parameterized_over_tcx! {\n     std::string::String,\n     crate::metadata::ModChild,\n     crate::middle::codegen_fn_attrs::CodegenFnAttrs,\n+    crate::middle::debugger_visualizer::DebuggerVisualizerFile,\n     crate::middle::exported_symbols::SymbolExportInfo,\n     crate::middle::resolve_bound_vars::ObjectLifetimeDefault,\n     crate::mir::ConstQualifs,\n@@ -91,7 +92,6 @@ trivially_parameterized_over_tcx! {\n     rustc_session::cstore::ForeignModule,\n     rustc_session::cstore::LinkagePreference,\n     rustc_session::cstore::NativeLib,\n-    rustc_span::DebuggerVisualizerFile,\n     rustc_span::ExpnData,\n     rustc_span::ExpnHash,\n     rustc_span::ExpnId,"}, {"sha": "41f92227e7c2d21172fe93c1d12298eec3ecced0", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 5, "deletions": 48, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -8,7 +8,6 @@ use crate::{errors, fluent_generated as fluent};\n use rustc_ast::{ast, AttrStyle, Attribute, LitKind, MetaItemKind, MetaItemLit, NestedMetaItem};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{Applicability, IntoDiagnosticArg, MultiSpan};\n-use rustc_expand::base::resolve_path;\n use rustc_feature::{AttributeDuplicates, AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n@@ -1916,6 +1915,10 @@ impl CheckAttrVisitor<'_> {\n \n     /// Checks if the items on the `#[debugger_visualizer]` attribute are valid.\n     fn check_debugger_visualizer(&self, attr: &Attribute, target: Target) -> bool {\n+        // Here we only check that the #[debugger_visualizer] attribute is attached\n+        // to nothing other than a module. All other checks are done in the\n+        // `debugger_visualizer` query where they need to be done for decoding\n+        // anyway.\n         match target {\n             Target::Mod => {}\n             _ => {\n@@ -1924,53 +1927,7 @@ impl CheckAttrVisitor<'_> {\n             }\n         }\n \n-        let Some(hints) = attr.meta_item_list() else {\n-            self.tcx.sess.emit_err(errors::DebugVisualizerInvalid { span: attr.span });\n-            return false;\n-        };\n-\n-        let hint = match hints.len() {\n-            1 => &hints[0],\n-            _ => {\n-                self.tcx.sess.emit_err(errors::DebugVisualizerInvalid { span: attr.span });\n-                return false;\n-            }\n-        };\n-\n-        let Some(meta_item) = hint.meta_item() else {\n-            self.tcx.sess.emit_err(errors::DebugVisualizerInvalid { span: attr.span });\n-            return false;\n-        };\n-\n-        let visualizer_path = match (meta_item.name_or_empty(), meta_item.value_str()) {\n-            (sym::natvis_file, Some(value)) => value,\n-            (sym::gdb_script_file, Some(value)) => value,\n-            (_, _) => {\n-                self.tcx.sess.emit_err(errors::DebugVisualizerInvalid { span: meta_item.span });\n-                return false;\n-            }\n-        };\n-\n-        let file =\n-            match resolve_path(&self.tcx.sess.parse_sess, visualizer_path.as_str(), attr.span) {\n-                Ok(file) => file,\n-                Err(mut err) => {\n-                    err.emit();\n-                    return false;\n-                }\n-            };\n-\n-        match std::fs::File::open(&file) {\n-            Ok(_) => true,\n-            Err(error) => {\n-                self.tcx.sess.emit_err(errors::DebugVisualizerUnreadable {\n-                    span: meta_item.span,\n-                    file: &file,\n-                    error,\n-                });\n-                false\n-            }\n-        }\n+        true\n     }\n \n     /// Outputs an error for `#[allow_internal_unstable]` which can only be applied to macros."}, {"sha": "3483f7da528badd675f7b6720f1bdb7f45bda2ee", "filename": "compiler/rustc_passes/src/debugger_visualizer.rs", "status": "modified", "additions": 67, "deletions": 57, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -1,60 +1,69 @@\n //! Detecting usage of the `#[debugger_visualizer]` attribute.\n \n-use hir::CRATE_HIR_ID;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_ast::Attribute;\n use rustc_data_structures::sync::Lrc;\n use rustc_expand::base::resolve_path;\n-use rustc_hir as hir;\n-use rustc_hir::HirId;\n-use rustc_middle::query::{LocalCrate, Providers};\n-use rustc_middle::ty::TyCtxt;\n-use rustc_span::{sym, DebuggerVisualizerFile, DebuggerVisualizerType};\n+use rustc_middle::{\n+    middle::debugger_visualizer::{DebuggerVisualizerFile, DebuggerVisualizerType},\n+    query::{LocalCrate, Providers},\n+    ty::TyCtxt,\n+};\n+use rustc_session::Session;\n+use rustc_span::sym;\n \n-use crate::errors::DebugVisualizerUnreadable;\n+use crate::errors::{DebugVisualizerInvalid, DebugVisualizerUnreadable};\n \n-fn check_for_debugger_visualizer(\n-    tcx: TyCtxt<'_>,\n-    hir_id: HirId,\n-    debugger_visualizers: &mut FxHashSet<DebuggerVisualizerFile>,\n-) {\n-    let attrs = tcx.hir().attrs(hir_id);\n-    for attr in attrs {\n+impl DebuggerVisualizerCollector<'_> {\n+    fn check_for_debugger_visualizer(&mut self, attr: &Attribute) {\n         if attr.has_name(sym::debugger_visualizer) {\n-            let Some(list) = attr.meta_item_list() else {\n-                continue\n+            let Some(hints) = attr.meta_item_list() else {\n+                self.sess.emit_err(DebugVisualizerInvalid { span: attr.span });\n+                return;\n             };\n \n-            let meta_item = match list.len() {\n-                1 => match list[0].meta_item() {\n-                    Some(meta_item) => meta_item,\n-                    _ => continue,\n-                },\n-                _ => continue,\n+            let hint = if hints.len() == 1 {\n+                &hints[0]\n+            } else {\n+                self.sess.emit_err(DebugVisualizerInvalid { span: attr.span });\n+                return;\n             };\n \n-            let visualizer_type = match meta_item.name_or_empty() {\n-                sym::natvis_file => DebuggerVisualizerType::Natvis,\n-                sym::gdb_script_file => DebuggerVisualizerType::GdbPrettyPrinter,\n-                _ => continue,\n+            let Some(meta_item) = hint.meta_item() else {\n+                self.sess.emit_err(DebugVisualizerInvalid { span: attr.span });\n+                return;\n             };\n \n-            let file = match meta_item.value_str() {\n-                Some(value) => {\n-                    match resolve_path(&tcx.sess.parse_sess, value.as_str(), attr.span) {\n-                        Ok(file) => file,\n-                        _ => continue,\n+            let (visualizer_type, visualizer_path) =\n+                match (meta_item.name_or_empty(), meta_item.value_str()) {\n+                    (sym::natvis_file, Some(value)) => (DebuggerVisualizerType::Natvis, value),\n+                    (sym::gdb_script_file, Some(value)) => {\n+                        (DebuggerVisualizerType::GdbPrettyPrinter, value)\n                     }\n-                }\n-                None => continue,\n-            };\n+                    (_, _) => {\n+                        self.sess.emit_err(DebugVisualizerInvalid { span: meta_item.span });\n+                        return;\n+                    }\n+                };\n+\n+            let file =\n+                match resolve_path(&self.sess.parse_sess, visualizer_path.as_str(), attr.span) {\n+                    Ok(file) => file,\n+                    Err(mut err) => {\n+                        err.emit();\n+                        return;\n+                    }\n+                };\n \n             match std::fs::read(&file) {\n                 Ok(contents) => {\n-                    debugger_visualizers\n-                        .insert(DebuggerVisualizerFile::new(Lrc::from(contents), visualizer_type));\n+                    self.visualizers.push(DebuggerVisualizerFile::new(\n+                        Lrc::from(contents),\n+                        visualizer_type,\n+                        file,\n+                    ));\n                 }\n                 Err(error) => {\n-                    tcx.sess.emit_err(DebugVisualizerUnreadable {\n+                    self.sess.emit_err(DebugVisualizerUnreadable {\n                         span: meta_item.span,\n                         file: &file,\n                         error,\n@@ -65,29 +74,30 @@ fn check_for_debugger_visualizer(\n     }\n }\n \n-/// Traverses and collects the debugger visualizers for a specific crate.\n-fn debugger_visualizers(tcx: TyCtxt<'_>, _: LocalCrate) -> Vec<DebuggerVisualizerFile> {\n-    // Initialize the collector.\n-    let mut debugger_visualizers = FxHashSet::default();\n+struct DebuggerVisualizerCollector<'a> {\n+    sess: &'a Session,\n+    visualizers: Vec<DebuggerVisualizerFile>,\n+}\n \n-    // Collect debugger visualizers in this crate.\n-    tcx.hir().for_each_module(|id| {\n-        check_for_debugger_visualizer(\n-            tcx,\n-            tcx.hir().local_def_id_to_hir_id(id),\n-            &mut debugger_visualizers,\n-        )\n-    });\n+impl<'ast> rustc_ast::visit::Visitor<'ast> for DebuggerVisualizerCollector<'_> {\n+    fn visit_attribute(&mut self, attr: &'ast Attribute) {\n+        self.check_for_debugger_visualizer(attr);\n+        rustc_ast::visit::walk_attribute(self, attr);\n+    }\n+}\n \n-    // Collect debugger visualizers on the crate attributes.\n-    check_for_debugger_visualizer(tcx, CRATE_HIR_ID, &mut debugger_visualizers);\n+/// Traverses and collects the debugger visualizers for a specific crate.\n+fn debugger_visualizers(tcx: TyCtxt<'_>, _: LocalCrate) -> Vec<DebuggerVisualizerFile> {\n+    let resolver_and_krate = tcx.resolver_for_lowering(()).borrow();\n+    let krate = &*resolver_and_krate.1;\n \n-    // Extract out the found debugger_visualizer items.\n-    let mut visualizers = debugger_visualizers.into_iter().collect::<Vec<_>>();\n+    let mut visitor = DebuggerVisualizerCollector { sess: tcx.sess, visualizers: Vec::new() };\n+    rustc_ast::visit::Visitor::visit_crate(&mut visitor, krate);\n \n-    // Sort the visualizers so we always get a deterministic query result.\n-    visualizers.sort();\n-    visualizers\n+    // We are collecting visualizers in AST-order, which is deterministic,\n+    // so we don't need to do any explicit sorting in order to get a\n+    // deterministic query result\n+    visitor.visualizers\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "8d70aa47f781e61ba08f73b07a4c8b3209b09ff1", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -1257,29 +1257,6 @@ impl SourceFileHash {\n     }\n }\n \n-#[derive(HashStable_Generic)]\n-#[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug, Encodable, Decodable)]\n-pub enum DebuggerVisualizerType {\n-    Natvis,\n-    GdbPrettyPrinter,\n-}\n-\n-/// A single debugger visualizer file.\n-#[derive(HashStable_Generic)]\n-#[derive(Clone, Debug, Hash, PartialEq, Eq, PartialOrd, Ord, Encodable, Decodable)]\n-pub struct DebuggerVisualizerFile {\n-    /// The complete debugger visualizer source.\n-    pub src: Lrc<[u8]>,\n-    /// Indicates which visualizer type this targets.\n-    pub visualizer_type: DebuggerVisualizerType,\n-}\n-\n-impl DebuggerVisualizerFile {\n-    pub fn new(src: Lrc<[u8]>, visualizer_type: DebuggerVisualizerType) -> Self {\n-        DebuggerVisualizerFile { src, visualizer_type }\n-    }\n-}\n-\n #[derive(Clone)]\n pub enum SourceFileLines {\n     /// The source file lines, in decoded (random-access) form."}, {"sha": "be3a5d3aa0f03abd3535efdee7debed079088229", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -35,6 +35,7 @@ const EXTENSION_EXCEPTION_PATHS: &[&str] = &[\n     \"tests/ui/macros/syntax-extension-source-utils-files/includeme.fragment\", // more include\n     \"tests/ui/unused-crate-deps/test.mk\", // why would you use make\n     \"tests/ui/proc-macro/auxiliary/included-file.txt\", // more include\n+    \"tests/ui/invalid/foo.natvis.xml\", // sample debugger visualizer\n ];\n \n fn check_entries(tests_path: &Path, bad: &mut bool) {"}, {"sha": "0877998a74fe7864b1ade280bbc74f530f969397", "filename": "tests/run-make/debugger-visualizer-dep-info/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2FMakefile?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -0,0 +1,9 @@\n+include ../tools.mk\n+\n+# This test makes sure that files referenced via #[debugger_visualizer] are\n+# included in `--emit dep-info` output.\n+\n+all:\n+\t$(RUSTC) --emit dep-info main.rs\n+\t$(CGREP) \"foo.py\" < $(TMPDIR)/main.d\n+\t$(CGREP) \"my_visualizers/bar.natvis\" < $(TMPDIR)/main.d"}, {"sha": "1bb8bf6d7fd4c8d09aea89b47de20fb8bbb61626", "filename": "tests/run-make/debugger-visualizer-dep-info/foo.py", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2Ffoo.py", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2Ffoo.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2Ffoo.py?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -0,0 +1 @@\n+# empty"}, {"sha": "3aede2215eac23485aa8c3db7c7710f7dfdcb0c7", "filename": "tests/run-make/debugger-visualizer-dep-info/main.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2Fmain.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -0,0 +1,12 @@\n+#![debugger_visualizer(gdb_script_file = \"foo.py\")]\n+\n+fn main() {\n+    const _UNUSED: u32 = {\n+        mod inner {\n+            #![debugger_visualizer(natvis_file = \"my_visualizers/bar.natvis\")]\n+            pub const XYZ: u32 = 123;\n+        }\n+\n+        inner::XYZ + 1\n+    };\n+}"}, {"sha": "c341a403902b9c6eb2ccdd2cb62b9ba88ddaf37a", "filename": "tests/run-make/debugger-visualizer-dep-info/my_visualizers/bar.natvis", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2Fmy_visualizers%2Fbar.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2Fmy_visualizers%2Fbar.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fdebugger-visualizer-dep-info%2Fmy_visualizers%2Fbar.natvis?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -0,0 +1 @@\n+<!-- empty -->"}, {"sha": "8cfe41597adf89085b5b413584d2e537efafa3e8", "filename": "tests/run-make/incremental-debugger-visualizer/Makefile", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/tests%2Frun-make%2Fincremental-debugger-visualizer%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/tests%2Frun-make%2Fincremental-debugger-visualizer%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fincremental-debugger-visualizer%2FMakefile?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -0,0 +1,49 @@\n+include ../tools.mk\n+\n+# This test makes sure that changes to files referenced via #[debugger_visualizer]\n+# are picked up when compiling incrementally.\n+\n+# We have to copy the source to $(TMPDIR) because Github CI mounts the source\n+# directory as readonly. We need to apply modifications to some of the source\n+# file.\n+SRC_DIR := $(TMPDIR)/src\n+INCR_CACHE_DIR := $(TMPDIR)/incremental\n+\n+all:\n+\trm -rf $(TMPDIR)/*\n+\tmkdir $(SRC_DIR)\n+\tcp ./foo.rs $(SRC_DIR)\n+\techo \"GDB script v1\" > $(SRC_DIR)/foo.py\n+\techo \"Natvis v1\" > $(SRC_DIR)/foo.natvis\n+\t$(RUSTC) $(SRC_DIR)/foo.rs \\\n+\t  --crate-type=rlib \\\n+\t  --emit metadata \\\n+\t  -C incremental=$(INCR_CACHE_DIR) \\\n+\t  -Z incremental-verify-ich\n+\t$(CGREP) \"GDB script v1\" < $(TMPDIR)/libfoo.rmeta\n+\t$(CGREP) \"Natvis v1\" < $(TMPDIR)/libfoo.rmeta\n+\n+\t# Change only the GDB script and check that the change has been picked up\n+\techo \"GDB script v2\" > $(SRC_DIR)/foo.py\n+\t$(RUSTC) $(SRC_DIR)/foo.rs \\\n+\t  --crate-type=rlib \\\n+\t  --emit metadata \\\n+\t  -C incremental=$(INCR_CACHE_DIR) \\\n+\t  -Z incremental-verify-ich\n+\n+\t$(CGREP) \"GDB script v2\" < $(TMPDIR)/libfoo.rmeta\n+\t$(CGREP) -v \"GDB script v1\" < $(TMPDIR)/libfoo.rmeta\n+\t$(CGREP) \"Natvis v1\" < $(TMPDIR)/libfoo.rmeta\n+\n+\t# Now change the Natvis version and check that the change has been picked up\n+\techo \"Natvis v2\" > $(SRC_DIR)/foo.natvis\n+\t$(RUSTC) $(SRC_DIR)/foo.rs \\\n+\t  --crate-type=rlib \\\n+\t  --emit metadata \\\n+\t  -C incremental=$(INCR_CACHE_DIR) \\\n+\t  -Z incremental-verify-ich\n+\n+\t$(CGREP) \"GDB script v2\" < $(TMPDIR)/libfoo.rmeta\n+\t$(CGREP) -v \"GDB script v1\" < $(TMPDIR)/libfoo.rmeta\n+\t$(CGREP) \"Natvis v2\" < $(TMPDIR)/libfoo.rmeta\n+\t$(CGREP) -v \"Natvis v1\" < $(TMPDIR)/libfoo.rmeta"}, {"sha": "8daa36a12d3810245379f2d3d5f7dd6c961f18a4", "filename": "tests/run-make/incremental-debugger-visualizer/foo.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/tests%2Frun-make%2Fincremental-debugger-visualizer%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/tests%2Frun-make%2Fincremental-debugger-visualizer%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fincremental-debugger-visualizer%2Ffoo.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -0,0 +1,6 @@\n+#![debugger_visualizer(natvis_file = \"./foo.natvis\")]\n+#![debugger_visualizer(gdb_script_file = \"./foo.py\")]\n+\n+pub struct Foo {\n+    pub x: u32,\n+}"}, {"sha": "c341a403902b9c6eb2ccdd2cb62b9ba88ddaf37a", "filename": "tests/ui/invalid/foo.natvis.xml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/tests%2Fui%2Finvalid%2Ffoo.natvis.xml", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/tests%2Fui%2Finvalid%2Ffoo.natvis.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid%2Ffoo.natvis.xml?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -0,0 +1 @@\n+<!-- empty -->"}, {"sha": "1efb9555c242a5c5368e5b64ab3a704bf53bfd5c", "filename": "tests/ui/invalid/invalid-debugger-visualizer-target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.rs?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -1,2 +1,2 @@\n-#[debugger_visualizer(natvis_file = \"../foo.natvis\")] //~ ERROR attribute should be applied to a module\n+#[debugger_visualizer(natvis_file = \"./foo.natvis.xml\")] //~ ERROR attribute should be applied to a module\n fn main() {}"}, {"sha": "c8a4d68137923ca44bda565b67b013bc9fa69eaf", "filename": "tests/ui/invalid/invalid-debugger-visualizer-target.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17a681000b98d58d6e54cecc3e33d978c34ede32/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17a681000b98d58d6e54cecc3e33d978c34ede32/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.stderr?ref=17a681000b98d58d6e54cecc3e33d978c34ede32", "patch": "@@ -1,8 +1,8 @@\n error: attribute should be applied to a module\n   --> $DIR/invalid-debugger-visualizer-target.rs:1:1\n    |\n-LL | #[debugger_visualizer(natvis_file = \"../foo.natvis\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[debugger_visualizer(natvis_file = \"./foo.natvis.xml\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}