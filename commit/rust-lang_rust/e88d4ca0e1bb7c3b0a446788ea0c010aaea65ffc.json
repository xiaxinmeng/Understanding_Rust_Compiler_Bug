{"sha": "e88d4ca0e1bb7c3b0a446788ea0c010aaea65ffc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OGQ0Y2EwZTFiYjdjM2IwYTQ0Njc4OGVhMGMwMTBhYWVhNjVmZmM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-18T17:12:28Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-03T10:39:34Z"}, "message": "Make accesses to union fields unsafe", "tree": {"sha": "31c42de603fd42f5737f49013166c2cf066c18fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31c42de603fd42f5737f49013166c2cf066c18fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e88d4ca0e1bb7c3b0a446788ea0c010aaea65ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e88d4ca0e1bb7c3b0a446788ea0c010aaea65ffc", "html_url": "https://github.com/rust-lang/rust/commit/e88d4ca0e1bb7c3b0a446788ea0c010aaea65ffc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e88d4ca0e1bb7c3b0a446788ea0c010aaea65ffc/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3b41c18a8dfbcfec4b2a9e8d9e6a921189e3eea", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3b41c18a8dfbcfec4b2a9e8d9e6a921189e3eea", "html_url": "https://github.com/rust-lang/rust/commit/f3b41c18a8dfbcfec4b2a9e8d9e6a921189e3eea"}], "stats": {"total": 81, "additions": 63, "deletions": 18}, "files": [{"sha": "e52eba68da19871f7f77da88ea6fb266485ce86c", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e88d4ca0e1bb7c3b0a446788ea0c010aaea65ffc/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88d4ca0e1bb7c3b0a446788ea0c010aaea65ffc/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=e88d4ca0e1bb7c3b0a446788ea0c010aaea65ffc", "patch": "@@ -13,15 +13,14 @@\n use self::RootUnsafeContext::*;\n \n use dep_graph::DepNode;\n-use hir::def::Def;\n use ty::{self, Ty, TyCtxt};\n use ty::MethodCall;\n \n use syntax::ast;\n use syntax_pos::Span;\n-use hir;\n-use hir::intravisit;\n-use hir::intravisit::{FnKind, Visitor};\n+use hir::{self, PatKind};\n+use hir::def::Def;\n+use hir::intravisit::{self, FnKind, Visitor};\n \n #[derive(Copy, Clone)]\n struct UnsafeContext {\n@@ -178,11 +177,28 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n                     self.require_unsafe(expr.span, \"use of mutable static\");\n                 }\n             }\n+            hir::ExprField(ref base_expr, field) => {\n+                if let ty::TyUnion(..) = self.tcx.expr_ty_adjusted(base_expr).sty {\n+                    self.require_unsafe(field.span, \"access to union field\");\n+                }\n+            }\n             _ => {}\n         }\n \n         intravisit::walk_expr(self, expr);\n     }\n+\n+    fn visit_pat(&mut self, pat: &hir::Pat) {\n+        if let PatKind::Struct(_, ref fields, _) = pat.node {\n+            if let ty::TyUnion(..) = self.tcx.pat_ty(pat).sty {\n+                for field in fields {\n+                    self.require_unsafe(field.span, \"matching on union field\");\n+                }\n+            }\n+        }\n+\n+        intravisit::walk_pat(self, pat);\n+    }\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {"}, {"sha": "762ac5d8751376dfae9a1a60f67a09727bd22094", "filename": "src/test/compile-fail/union-unsafe.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e88d4ca0e1bb7c3b0a446788ea0c010aaea65ffc/src%2Ftest%2Fcompile-fail%2Funion-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88d4ca0e1bb7c3b0a446788ea0c010aaea65ffc/src%2Ftest%2Fcompile-fail%2Funion-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion-unsafe.rs?ref=e88d4ca0e1bb7c3b0a446788ea0c010aaea65ffc", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+union U {\n+    a: u8\n+}\n+\n+fn main() {\n+    let u = U { a: 10 }; // OK\n+    let a = u.a; //~ ERROR access to union field requires unsafe function or block\n+    let U { a } = u; //~ ERROR matching on union field requires unsafe function or block\n+    if let U { a: 11 } = u {} //~ ERROR matching on union field requires unsafe function or block\n+    let U { .. } = u; // OK\n+}"}, {"sha": "afbfe5bf92be792a09145fe440a7ca17c127beef", "filename": "src/test/run-pass/union-basic.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e88d4ca0e1bb7c3b0a446788ea0c010aaea65ffc/src%2Ftest%2Frun-pass%2Funion-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88d4ca0e1bb7c3b0a446788ea0c010aaea65ffc/src%2Ftest%2Frun-pass%2Funion-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion-basic.rs?ref=e88d4ca0e1bb7c3b0a446788ea0c010aaea65ffc", "patch": "@@ -42,14 +42,18 @@ fn main() {\n     assert_eq!(align_of::<Y>(), 2);\n \n     let u = U { a: 10 };\n-    assert_eq!(u.a, 10);\n-    let U { a } = u;\n-    assert_eq!(a, 10);\n+    unsafe {\n+        assert_eq!(u.a, 10);\n+        let U { a } = u;\n+        assert_eq!(a, 10);\n+    }\n \n     let mut w: W = unsafe { zeroed() };\n-    assert_eq!(w.a, 0);\n-    assert_eq!(w.b, 0);\n-    // w.a = 1;\n-    // assert_eq!(w.a, 0);\n-    // assert_eq!(w.b, 0);\n+    unsafe {\n+        assert_eq!(w.a, 0);\n+        assert_eq!(w.b, 0);\n+        // w.a = 1;\n+        // assert_eq!(w.a, 0);\n+        // assert_eq!(w.b, 0);\n+    }\n }"}, {"sha": "a57c1103a9b4ad7ac2dfdea2054817641c2da6ff", "filename": "src/test/run-pass/union-pat-refutability.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e88d4ca0e1bb7c3b0a446788ea0c010aaea65ffc/src%2Ftest%2Frun-pass%2Funion-pat-refutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88d4ca0e1bb7c3b0a446788ea0c010aaea65ffc/src%2Ftest%2Frun-pass%2Funion-pat-refutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion-pat-refutability.rs?ref=e88d4ca0e1bb7c3b0a446788ea0c010aaea65ffc", "patch": "@@ -41,12 +41,14 @@ union W {\n }\n \n fn refut(w: W) {\n-    match w {\n-        W { a: 10 } => {\n-            panic!();\n-        }\n-        W { b } => {\n-            assert_eq!(b, 11);\n+    unsafe {\n+        match w {\n+            W { a: 10 } => {\n+                panic!();\n+            }\n+            W { b } => {\n+                assert_eq!(b, 11);\n+            }\n         }\n     }\n }"}]}