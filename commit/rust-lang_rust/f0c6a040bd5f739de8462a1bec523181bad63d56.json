{"sha": "f0c6a040bd5f739de8462a1bec523181bad63d56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYzZhMDQwYmQ1ZjczOWRlODQ2MmExYmVjNTIzMTgxYmFkNjNkNTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-25T18:14:41Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-25T18:14:41Z"}, "message": "remove dead code", "tree": {"sha": "a94b037fb6bcabebc8f19283b8e721489d0d7fc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a94b037fb6bcabebc8f19283b8e721489d0d7fc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0c6a040bd5f739de8462a1bec523181bad63d56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c6a040bd5f739de8462a1bec523181bad63d56", "html_url": "https://github.com/rust-lang/rust/commit/f0c6a040bd5f739de8462a1bec523181bad63d56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0c6a040bd5f739de8462a1bec523181bad63d56/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50a7598773eaa57379d81c3d917ab4c84d867a51", "url": "https://api.github.com/repos/rust-lang/rust/commits/50a7598773eaa57379d81c3d917ab4c84d867a51", "html_url": "https://github.com/rust-lang/rust/commit/50a7598773eaa57379d81c3d917ab4c84d867a51"}], "stats": {"total": 25, "additions": 5, "deletions": 20}, "files": [{"sha": "d5ad9decbf3610f916ba5dd0a9b136e3a1113d25", "filename": "crates/ra_hir/src/module_tree.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f0c6a040bd5f739de8462a1bec523181bad63d56/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c6a040bd5f739de8462a1bec523181bad63d56/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs?ref=f0c6a040bd5f739de8462a1bec523181bad63d56", "patch": "@@ -1,6 +1,5 @@\n use std::sync::Arc;\n \n-use rustc_hash::{FxHashMap, FxHashSet};\n use arrayvec::ArrayVec;\n use relative_path::RelativePathBuf;\n use ra_db::{FileId, SourceRoot, CrateId};\n@@ -147,28 +146,21 @@ impl ModuleTree {\n         let file_id = crate_graph.crate_root(crate_id);\n         let source_root_id = db.file_source_root(file_id);\n \n-        let mut roots = FxHashMap::default();\n-        let mut visited = FxHashSet::default();\n-\n         let source_root = db.source_root(source_root_id);\n         let source = SourceItemId {\n             file_id: file_id.into(),\n             item_id: None,\n         };\n-        let module_id = self.init_subtree(db, &source_root, &mut visited, &mut roots, None, source);\n-        roots.insert(file_id, module_id);\n+        self.init_subtree(db, &source_root, None, source);\n     }\n \n     fn init_subtree(\n         &mut self,\n         db: &impl HirDatabase,\n         source_root: &SourceRoot,\n-        visited: &mut FxHashSet<SourceItemId>,\n-        roots: &mut FxHashMap<FileId, ModuleId>,\n         parent: Option<LinkId>,\n         source: SourceItemId,\n     ) -> ModuleId {\n-        visited.insert(source);\n         let id = self.alloc_mod(ModuleData {\n             source,\n             parent,\n@@ -187,28 +179,21 @@ impl ModuleTree {\n                 let (points_to, problem) = resolve_submodule(db, source.file_id, &sub.name);\n                 let points_to = points_to\n                     .into_iter()\n-                    .map(|file_id| match roots.remove(&file_id) {\n-                        Some(module_id) => {\n-                            self.mods[module_id].parent = Some(link);\n-                            module_id\n-                        }\n-                        None => self.init_subtree(\n+                    .map(|file_id| {\n+                        self.init_subtree(\n                             db,\n                             source_root,\n-                            visited,\n-                            roots,\n                             Some(link),\n                             SourceItemId {\n                                 file_id: file_id.into(),\n                                 item_id: None,\n                             },\n-                        ),\n+                        )\n                     })\n                     .collect::<Vec<_>>();\n                 (points_to, problem)\n             } else {\n-                let points_to =\n-                    self.init_subtree(db, source_root, visited, roots, Some(link), sub.source);\n+                let points_to = self.init_subtree(db, source_root, Some(link), sub.source);\n                 (vec![points_to], None)\n             };\n "}]}