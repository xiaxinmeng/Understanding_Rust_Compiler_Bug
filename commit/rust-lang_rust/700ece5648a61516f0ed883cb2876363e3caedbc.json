{"sha": "700ece5648a61516f0ed883cb2876363e3caedbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMGVjZTU2NDhhNjE1MTZmMGVkODgzY2IyODc2MzYzZTNjYWVkYmM=", "commit": {"author": {"name": "Wim Looman", "email": "wim@nemo157.com", "date": "2018-05-27T14:04:45Z"}, "committer": {"name": "Wim Looman", "email": "wim.looman@kiwi.ki", "date": "2018-06-15T14:53:34Z"}, "message": "Allow configuring the trivial copy size limit", "tree": {"sha": "c5c0fb7fea59e2f1c1ffcb3d3503d89d4a700d6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5c0fb7fea59e2f1c1ffcb3d3503d89d4a700d6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/700ece5648a61516f0ed883cb2876363e3caedbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/700ece5648a61516f0ed883cb2876363e3caedbc", "html_url": "https://github.com/rust-lang/rust/commit/700ece5648a61516f0ed883cb2876363e3caedbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/700ece5648a61516f0ed883cb2876363e3caedbc/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7547a4ddef11f0b08ce2b92032012bf34872e4fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7547a4ddef11f0b08ce2b92032012bf34872e4fd", "html_url": "https://github.com/rust-lang/rust/commit/7547a4ddef11f0b08ce2b92032012bf34872e4fd"}], "stats": {"total": 79, "additions": 74, "deletions": 5}, "files": [{"sha": "bac479deda66032481a72b9a1de3b760efa780c1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/700ece5648a61516f0ed883cb2876363e3caedbc/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/700ece5648a61516f0ed883cb2876363e3caedbc/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=700ece5648a61516f0ed883cb2876363e3caedbc", "patch": "@@ -400,7 +400,10 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box large_enum_variant::LargeEnumVariant::new(conf.enum_variant_size_threshold));\n     reg.register_late_lint_pass(box explicit_write::Pass);\n     reg.register_late_lint_pass(box needless_pass_by_value::NeedlessPassByValue);\n-    reg.register_late_lint_pass(box trivially_copy_pass_by_ref::TriviallyCopyPassByRef);\n+    reg.register_late_lint_pass(box trivially_copy_pass_by_ref::TriviallyCopyPassByRef::new(\n+            conf.trivial_copy_size_limit,\n+            &reg.sess.target,\n+    ));\n     reg.register_early_lint_pass(box literal_representation::LiteralDigitGrouping);\n     reg.register_early_lint_pass(box literal_representation::LiteralRepresentation::new(\n             conf.literal_representation_threshold"}, {"sha": "4c8d0c9dab8e141e1c18155532d47a7c9b7828e9", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/700ece5648a61516f0ed883cb2876363e3caedbc/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/700ece5648a61516f0ed883cb2876363e3caedbc/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=700ece5648a61516f0ed883cb2876363e3caedbc", "patch": "@@ -1,8 +1,11 @@\n+use std::cmp;\n+\n use rustc::hir::*;\n use rustc::hir::map::*;\n use rustc::hir::intravisit::FnKind;\n use rustc::lint::*;\n use rustc::ty::TypeVariants;\n+use rustc::session::config::Config as SessionConfig;\n use rustc_target::spec::abi::Abi;\n use rustc_target::abi::LayoutOf;\n use syntax::ast::NodeId;\n@@ -17,6 +20,14 @@ use crate::utils::{in_macro, is_copy, is_self, span_lint_and_sugg, snippet};\n /// be passed through registers if they fit into two or less general purpose\n /// registers.\n ///\n+/// **Known problems:** This lint is target register size dependent, it is\n+/// limited to 32-bit to try and reduce portability problems between 32 and\n+/// 64-bit, but if you are compiling for 8 or 16-bit targets then the limit\n+/// will be different.\n+///\n+/// The configuration option `trivial_copy_size_limit` can be set to override\n+/// this limit for a project.\n+///\n /// **Example:**\n /// ```rust\n /// fn foo(v: &u32) {\n@@ -33,7 +44,24 @@ declare_clippy_lint! {\n     \"functions taking small copyable arguments by reference\"\n }\n \n-pub struct TriviallyCopyPassByRef;\n+pub struct TriviallyCopyPassByRef {\n+    limit: u64,\n+}\n+\n+impl TriviallyCopyPassByRef {\n+    pub fn new(limit: Option<u64>, target: &SessionConfig) -> Self {\n+        let limit = limit.unwrap_or_else(|| {\n+            let bit_width = target.usize_ty.bit_width().expect(\"usize should have a width\") as u64;\n+            // Cap the calculated bit width at 32-bits to reduce\n+            // portability problems between 32 and 64-bit targets\n+            let bit_width = cmp::min(bit_width, 32);\n+            let byte_width = bit_width / 8;\n+            // Use a limit of 2 times the register bit width\n+            byte_width * 2\n+        });\n+        Self { limit }\n+    }\n+}\n \n impl LintPass for TriviallyCopyPassByRef {\n     fn get_lints(&self) -> LintArray {\n@@ -94,7 +122,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n                 if let TypeVariants::TyRef(_, ty, Mutability::MutImmutable) = ty.sty;\n                 if is_copy(cx, ty);\n                 if let Some(size) = cx.layout_of(ty).ok().map(|l| l.size.bytes());\n-                if size < 16;\n+                if size <= self.limit;\n                 if let Ty_::TyRptr(_, MutTy { ty: ref decl_ty, .. }) = input.node;\n                 then {\n                     let value_type = if is_self(arg) {"}, {"sha": "d3c7d9013232714810e3df59ad1221132b665b0d", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/700ece5648a61516f0ed883cb2876363e3caedbc/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/700ece5648a61516f0ed883cb2876363e3caedbc/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=700ece5648a61516f0ed883cb2876363e3caedbc", "patch": "@@ -156,6 +156,8 @@ define_Conf! {\n     (verbose_bit_mask_threshold, \"verbose_bit_mask_threshold\", 1 => u64),\n     /// Lint: DECIMAL_LITERAL_REPRESENTATION. The lower bound for linting decimal literals\n     (literal_representation_threshold, \"literal_representation_threshold\", 16384 => u64),\n+    /// Lint: TRIVIALLY_COPY_PASS_BY_REF. The maximum size (in bytes) to consider a `Copy` type for passing by value instead of by reference.\n+    (trivial_copy_size_limit, \"trivial_copy_size_limit\", None => Option<u64>),\n }\n \n /// Search for the configuration file."}, {"sha": "3b96f1fd000bb0323c3ab37ae533ffd5637cc78f", "filename": "tests/ui-toml/toml_trivially_copy/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/700ece5648a61516f0ed883cb2876363e3caedbc/tests%2Fui-toml%2Ftoml_trivially_copy%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/700ece5648a61516f0ed883cb2876363e3caedbc/tests%2Fui-toml%2Ftoml_trivially_copy%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_trivially_copy%2Fclippy.toml?ref=700ece5648a61516f0ed883cb2876363e3caedbc", "patch": "@@ -0,0 +1 @@\n+trivial-copy-size-limit = 2"}, {"sha": "bee092a5765a9844637aa92c194aeeff1f4afcbc", "filename": "tests/ui-toml/toml_trivially_copy/test.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/700ece5648a61516f0ed883cb2876363e3caedbc/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/700ece5648a61516f0ed883cb2876363e3caedbc/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs?ref=700ece5648a61516f0ed883cb2876363e3caedbc", "patch": "@@ -0,0 +1,19 @@\n+#![allow(many_single_char_names)]\n+\n+#[derive(Copy, Clone)]\n+struct Foo(u8);\n+\n+#[derive(Copy, Clone)]\n+struct Bar(u32);\n+\n+fn good(a: &mut u32, b: u32, c: &Bar, d: &u32) {\n+}\n+\n+fn bad(x: &u16, y: &Foo) {\n+}\n+\n+fn main() {\n+    let (mut a, b, c, d, x, y) = (0, 0, Bar(0), 0, 0, Foo(0));\n+    good(&mut a, b, &c, &d);\n+    bad(&x, &y);\n+}"}, {"sha": "2d36c47c5da1bf5ded3456f86c276e604ba0b1e5", "filename": "tests/ui-toml/toml_trivially_copy/test.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/700ece5648a61516f0ed883cb2876363e3caedbc/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/700ece5648a61516f0ed883cb2876363e3caedbc/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.stderr?ref=700ece5648a61516f0ed883cb2876363e3caedbc", "patch": "@@ -0,0 +1,16 @@\n+error: this argument is passed by reference, but would be more efficient if passed by value\n+  --> $DIR/test.rs:12:11\n+   |\n+12 | fn bad(x: &u16, y: &Foo) {\n+   |           ^^^^ help: consider passing by value instead: `u16`\n+   |\n+   = note: `-D trivially-copy-pass-by-ref` implied by `-D warnings`\n+\n+error: this argument is passed by reference, but would be more efficient if passed by value\n+  --> $DIR/test.rs:12:20\n+   |\n+12 | fn bad(x: &u16, y: &Foo) {\n+   |                    ^^^^ help: consider passing by value instead: `Foo`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "05a04fb377ad70c7ee8bf61d366707bfb19e1be0", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/700ece5648a61516f0ed883cb2876363e3caedbc/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/700ece5648a61516f0ed883cb2876363e3caedbc/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=700ece5648a61516f0ed883cb2876363e3caedbc", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `third-party`\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `third-party`\n \n error: aborting due to previous error\n "}, {"sha": "7508cdc7b4336452636578ae4c047daf7633ab28", "filename": "tests/ui/useless_asref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/700ece5648a61516f0ed883cb2876363e3caedbc/tests%2Fui%2Fuseless_asref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/700ece5648a61516f0ed883cb2876363e3caedbc/tests%2Fui%2Fuseless_asref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_asref.rs?ref=700ece5648a61516f0ed883cb2876363e3caedbc", "patch": "@@ -1,5 +1,5 @@\n #![deny(useless_asref)]\n-\n+#![allow(trivially_copy_pass_by_ref)]\n use std::fmt::Debug;\n \n struct FakeAsRef;"}]}