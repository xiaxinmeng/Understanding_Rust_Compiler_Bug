{"sha": "4e7e822f39fca4ccf146a71dbb1098b76ecea1af", "node_id": "C_kwDOAAsO6NoAKDRlN2U4MjJmMzlmY2E0Y2NmMTQ2YTcxZGJiMTA5OGI3NmVjZWExYWY", "commit": {"author": {"name": "Commeownist", "email": "commeownist@yandex.ru", "date": "2021-09-26T13:30:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-26T13:30:45Z"}, "message": "Impove handling of registers in inline asm (#82)\n\n* Correctly handle st(0) register in the clobbers list\r\n* Gate the clobbers based on enabled target features", "tree": {"sha": "d6a43082547ff9d929199b2715a606dda28dcaf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6a43082547ff9d929199b2715a606dda28dcaf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e7e822f39fca4ccf146a71dbb1098b76ecea1af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhUHYFCRBK7hj4Ov3rIwAA4jgIACyegK+1pV5E4L9xzhAe1oU6\nBJYD2cYlwx1z3MzR7n7oyvzGdTxHOK+MtjW2AEeMTLTKJQ0sBSOygA6iM99CKW36\nU1t8XQW10ZwZ118M3bXjAkuRKlOvokiFDU/u+vwWbbrSvlE2MJQ306LwVQr6MKWk\nWPKCzcikPKMXFs1egya7+iQvaZ2hfHDAukMoew5Zu7ecvOS4+72DlGS54w1UikHw\n9Gc7hd9P3mVctyo1Hm+16NPM7jHHuLdVg4CD4nV4uFj6zS1WtfzFfCx9I2Whv4uK\newRrtidg5tbr9Fja5CcwrT4fH5egkmH9sETc/3vZdbzHZoujxJAPtwhJc4uBvs8=\n=eeOo\n-----END PGP SIGNATURE-----\n", "payload": "tree d6a43082547ff9d929199b2715a606dda28dcaf3\nparent 0f4b616a08eda85247e6123120b8cba01dc4383b\nauthor Commeownist <commeownist@yandex.ru> 1632663045 +0300\ncommitter GitHub <noreply@github.com> 1632663045 -0400\n\nImpove handling of registers in inline asm (#82)\n\n* Correctly handle st(0) register in the clobbers list\r\n* Gate the clobbers based on enabled target features"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e7e822f39fca4ccf146a71dbb1098b76ecea1af", "html_url": "https://github.com/rust-lang/rust/commit/4e7e822f39fca4ccf146a71dbb1098b76ecea1af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e7e822f39fca4ccf146a71dbb1098b76ecea1af/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f4b616a08eda85247e6123120b8cba01dc4383b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4b616a08eda85247e6123120b8cba01dc4383b", "html_url": "https://github.com/rust-lang/rust/commit/0f4b616a08eda85247e6123120b8cba01dc4383b"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "3b77097e9ad00230b058ab0ef63762cb9eabbc96", "filename": "src/asm.rs", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4e7e822f39fca4ccf146a71dbb1098b76ecea1af/src%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7e822f39fca4ccf146a71dbb1098b76ecea1af/src%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fasm.rs?ref=4e7e822f39fca4ccf146a71dbb1098b76ecea1af", "patch": "@@ -6,7 +6,7 @@ use rustc_codegen_ssa::traits::{AsmBuilderMethods, AsmMethods, BaseTypeMethods,\n \n use rustc_hir::LlvmInlineAsmInner;\n use rustc_middle::{bug, ty::Instance};\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n use rustc_target::asm::*;\n \n use std::borrow::Cow;\n@@ -173,7 +173,20 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                             continue\n                         },\n                         (Register(reg_name), None) => {\n-                            clobbers.push(reg_name);\n+                            // `clobber_abi` can add lots of clobbers that are not supported by the target,\n+                            // such as AVX-512 registers, so we just ignore unsupported registers\n+                            let is_target_supported = reg.reg_class().supported_types(asm_arch).iter()\n+                                .any(|&(_, feature)| {\n+                                    if let Some(feature) = feature {\n+                                        self.tcx.sess.target_features.contains(&Symbol::intern(feature))\n+                                    } else {\n+                                        true // Register class is unconditionally supported\n+                                    }\n+                                });\n+\n+                            if is_target_supported && !clobbers.contains(&reg_name) {\n+                                clobbers.push(reg_name);\n+                            }\n                             continue\n                         }\n                     };\n@@ -526,16 +539,20 @@ fn reg_to_gcc(reg: InlineAsmRegOrRegClass) -> ConstraintOrRegister {\n     let constraint = match reg {\n         // For vector registers LLVM wants the register name to match the type size.\n         InlineAsmRegOrRegClass::Reg(reg) => {\n-            // TODO(antoyo): add support for vector register.\n-            match reg.name() {\n-                \"ax\" => \"a\",\n-                \"bx\" => \"b\",\n-                \"cx\" => \"c\",\n-                \"dx\" => \"d\",\n-                \"si\" => \"S\",\n-                \"di\" => \"D\",\n-                // For registers like r11, we have to create a register variable: https://stackoverflow.com/a/31774784/389119\n-                name => return ConstraintOrRegister::Register(name), \n+            match reg {\n+                InlineAsmReg::X86(_) => {\n+                    // TODO(antoyo): add support for vector register.\n+                    //\n+                    // // For explicit registers, we have to create a register variable: https://stackoverflow.com/a/31774784/389119\n+                    return ConstraintOrRegister::Register(match reg.name() {\n+                        // Some of registers' names does not map 1-1 from rust to gcc\n+                        \"st(0)\" => \"st\",\n+\n+                        name => name,\n+                    });\n+                }\n+\n+                _ => unimplemented!(),\n             }\n         },\n         InlineAsmRegOrRegClass::RegClass(reg) => match reg {"}]}