{"sha": "69890b2df447e7d3febff1a0f8974f3fcf694128", "node_id": "C_kwDOAAsO6NoAKDY5ODkwYjJkZjQ0N2U3ZDNmZWJmZjFhMGY4OTc0ZjNmY2Y2OTQxMjg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-18T23:21:12Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-19T16:15:28Z"}, "message": "trait solver: PointerSized", "tree": {"sha": "cabafd2f5e65c53043f0ab1dfab0fdd00007a625", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cabafd2f5e65c53043f0ab1dfab0fdd00007a625"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69890b2df447e7d3febff1a0f8974f3fcf694128", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69890b2df447e7d3febff1a0f8974f3fcf694128", "html_url": "https://github.com/rust-lang/rust/commit/69890b2df447e7d3febff1a0f8974f3fcf694128", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69890b2df447e7d3febff1a0f8974f3fcf694128/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f53f5b4463a28b44d036342f0a849390495f6a9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f53f5b4463a28b44d036342f0a849390495f6a9b", "html_url": "https://github.com/rust-lang/rust/commit/f53f5b4463a28b44d036342f0a849390495f6a9b"}], "stats": {"total": 77, "additions": 75, "deletions": 2}, "files": [{"sha": "52155aa0f1894b29a773312974c00b455631ff8a", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/69890b2df447e7d3febff1a0f8974f3fcf694128/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69890b2df447e7d3febff1a0f8974f3fcf694128/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=69890b2df447e7d3febff1a0f8974f3fcf694128", "patch": "@@ -117,6 +117,11 @@ pub(super) trait GoalKind<'tcx>: TypeFoldable<'tcx> + Copy + Eq {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx>;\n+\n+    fn consider_builtin_pointer_sized_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx>;\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {\n@@ -237,6 +242,8 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             || lang_items.clone_trait() == Some(trait_def_id)\n         {\n             G::consider_builtin_copy_clone_candidate(self, goal)\n+        } else if lang_items.pointer_sized() == Some(trait_def_id) {\n+            G::consider_builtin_pointer_sized_candidate(self, goal)\n         } else {\n             Err(NoSolution)\n         };"}, {"sha": "3f3d32efe7f5325207fcbcde696ba7f3085bf1e8", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/69890b2df447e7d3febff1a0f8974f3fcf694128/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69890b2df447e7d3febff1a0f8974f3fcf694128/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=69890b2df447e7d3febff1a0f8974f3fcf694128", "patch": "@@ -351,6 +351,13 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n     ) -> QueryResult<'tcx> {\n         bug!(\"`Copy`/`Clone` does not have an associated type: {:?}\", goal);\n     }\n+\n+    fn consider_builtin_pointer_sized_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        bug!(\"`PointerSized` does not have an associated type: {:?}\", goal);\n+    }\n }\n \n /// This behavior is also implemented in `rustc_ty_utils` and in the old `project` code."}, {"sha": "f68a296922aae27a83bc5dc92e09c67acd57c259", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/69890b2df447e7d3febff1a0f8974f3fcf694128/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69890b2df447e7d3febff1a0f8974f3fcf694128/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=69890b2df447e7d3febff1a0f8974f3fcf694128", "patch": "@@ -4,13 +4,13 @@ use std::iter;\n \n use super::assembly::{self, Candidate, CandidateSource};\n use super::infcx_ext::InferCtxtExt;\n-use super::{EvalCtxt, Goal, QueryResult};\n+use super::{Certainty, EvalCtxt, Goal, QueryResult};\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::InferCtxt;\n use rustc_infer::traits::query::NoSolution;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n-use rustc_middle::ty::TraitPredicate;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{TraitPredicate, TypeVisitable};\n use rustc_span::DUMMY_SP;\n \n mod structural_traits;\n@@ -127,6 +127,29 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n             structural_traits::instantiate_constituent_tys_for_copy_clone_trait,\n         )\n     }\n+\n+    fn consider_builtin_pointer_sized_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        if goal.predicate.self_ty().has_non_region_infer() {\n+            return ecx.make_canonical_response(Certainty::Maybe(MaybeCause::Ambiguity));\n+        }\n+\n+        let tcx = ecx.tcx();\n+        let self_ty = tcx.erase_regions(goal.predicate.self_ty());\n+\n+        if let Ok(layout) = tcx.layout_of(goal.param_env.and(self_ty))\n+            &&  let usize_layout = tcx.layout_of(ty::ParamEnv::empty().and(tcx.types.usize)).unwrap().layout\n+            && layout.layout.size() == usize_layout.size()\n+            && layout.layout.align().abi == usize_layout.align().abi\n+        {\n+            // FIXME: We could make this faster by making a no-constraints response\n+            ecx.make_canonical_response(Certainty::Yes)\n+        } else {\n+            Err(NoSolution)\n+        }\n+    }\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {"}, {"sha": "15681cd132ec64b583380bbff700f3119bace75f", "filename": "tests/ui/traits/new-solver/pointer-sized.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69890b2df447e7d3febff1a0f8974f3fcf694128/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69890b2df447e7d3febff1a0f8974f3fcf694128/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-sized.rs?ref=69890b2df447e7d3febff1a0f8974f3fcf694128", "patch": "@@ -0,0 +1,12 @@\n+#![feature(pointer_sized_trait)]\n+\n+use std::marker::PointerSized;\n+\n+fn require_pointer_sized(_: impl PointerSized) {}\n+\n+fn main() {\n+    require_pointer_sized(1usize);\n+    require_pointer_sized(1u16);\n+    //~^ ERROR `u16` needs to be a pointer-sized type\n+    require_pointer_sized(&1i16);\n+}"}, {"sha": "b250b1331bbf9ef1083cc1349d7b6e74ec91e7f7", "filename": "tests/ui/traits/new-solver/pointer-sized.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/69890b2df447e7d3febff1a0f8974f3fcf694128/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69890b2df447e7d3febff1a0f8974f3fcf694128/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-sized.stderr?ref=69890b2df447e7d3febff1a0f8974f3fcf694128", "patch": "@@ -0,0 +1,24 @@\n+error[E0277]: `u16` needs to be a pointer-sized type\n+  --> $DIR/pointer-sized.rs:9:27\n+   |\n+LL |     require_pointer_sized(1u16);\n+   |     --------------------- ^^^^ the trait `PointerSized` is not implemented for `u16`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = note: the trait bound `u16: PointerSized` is not satisfied\n+note: required by a bound in `require_pointer_sized`\n+  --> $DIR/pointer-sized.rs:5:34\n+   |\n+LL | fn require_pointer_sized(_: impl PointerSized) {}\n+   |                                  ^^^^^^^^^^^^ required by this bound in `require_pointer_sized`\n+help: consider borrowing here\n+   |\n+LL |     require_pointer_sized(&1u16);\n+   |                           +\n+LL |     require_pointer_sized(&mut 1u16);\n+   |                           ++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}