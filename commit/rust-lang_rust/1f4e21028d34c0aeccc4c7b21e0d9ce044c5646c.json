{"sha": "1f4e21028d34c0aeccc4c7b21e0d9ce044c5646c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNGUyMTAyOGQzNGMwYWVjY2M0YzdiMjFlMGQ5Y2UwNDRjNTY0NmM=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-18T09:39:17Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-18T09:39:17Z"}, "message": "Move the const casting code into its dedicated file", "tree": {"sha": "94668e00048161c5a5c34a27e83bc71779cc6672", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94668e00048161c5a5c34a27e83bc71779cc6672"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f4e21028d34c0aeccc4c7b21e0d9ce044c5646c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f4e21028d34c0aeccc4c7b21e0d9ce044c5646c", "html_url": "https://github.com/rust-lang/rust/commit/1f4e21028d34c0aeccc4c7b21e0d9ce044c5646c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f4e21028d34c0aeccc4c7b21e0d9ce044c5646c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb5b268aa856f788fbf44b5e86c04c75cb7f47c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb5b268aa856f788fbf44b5e86c04c75cb7f47c2", "html_url": "https://github.com/rust-lang/rust/commit/fb5b268aa856f788fbf44b5e86c04c75cb7f47c2"}], "stats": {"total": 276, "additions": 145, "deletions": 131}, "files": [{"sha": "7bcf4ef6588d53d9335a767b077016d5b798b817", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 143, "deletions": 3, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e21028d34c0aeccc4c7b21e0d9ce044c5646c/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e21028d34c0aeccc4c7b21e0d9ce044c5646c/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=1f4e21028d34c0aeccc4c7b21e0d9ce044c5646c", "patch": "@@ -1,13 +1,153 @@\n-use rustc::ty::Ty;\n-use rustc::ty::layout::LayoutOf;\n+use rustc::ty::{self, Ty};\n+use rustc::ty::layout::{self, LayoutOf};\n use syntax::ast::{FloatTy, IntTy, UintTy};\n \n use rustc_apfloat::ieee::{Single, Double};\n use super::{EvalContext, Machine};\n-use rustc::mir::interpret::{Scalar, EvalResult, Pointer, PointerArithmetic};\n+use rustc::mir::interpret::{Scalar, EvalResult, Pointer, PointerArithmetic, Value, EvalErrorKind};\n+use rustc::mir::CastKind;\n use rustc_apfloat::Float;\n+use interpret::eval_context::ValTy;\n+use interpret::Place;\n \n impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n+    crate fn cast(\n+        &mut self,\n+        src: ValTy<'tcx>,\n+        kind: CastKind,\n+        dest_ty: Ty<'tcx>,\n+        dest: Place,\n+    ) -> EvalResult<'tcx> {\n+        use rustc::mir::CastKind::*;\n+        match kind {\n+            Unsize => {\n+                let src_layout = self.layout_of(src.ty)?;\n+                let dst_layout = self.layout_of(dest_ty)?;\n+                self.unsize_into(src.value, src_layout, dest, dst_layout)?;\n+            }\n+\n+            Misc => {\n+                if self.type_is_fat_ptr(src.ty) {\n+                    match (src.value, self.type_is_fat_ptr(dest_ty)) {\n+                        (Value::ByRef { .. }, _) |\n+                        // pointers to extern types\n+                        (Value::Scalar(_),_) |\n+                        // slices and trait objects to other slices/trait objects\n+                        (Value::ScalarPair(..), true) => {\n+                            let valty = ValTy {\n+                                value: src.value,\n+                                ty: dest_ty,\n+                            };\n+                            self.write_value(valty, dest)?;\n+                        }\n+                        // slices and trait objects to thin pointers (dropping the metadata)\n+                        (Value::ScalarPair(data, _), false) => {\n+                            let valty = ValTy {\n+                                value: Value::Scalar(data),\n+                                ty: dest_ty,\n+                            };\n+                            self.write_value(valty, dest)?;\n+                        }\n+                    }\n+                } else {\n+                    let src_layout = self.layout_of(src.ty)?;\n+                    match src_layout.variants {\n+                        layout::Variants::Single { index } => {\n+                            if let Some(def) = src.ty.ty_adt_def() {\n+                                let discr_val = def\n+                                    .discriminant_for_variant(*self.tcx, index)\n+                                    .val;\n+                                let defined = self\n+                                    .layout_of(dest_ty)\n+                                    .unwrap()\n+                                    .size\n+                                    .bits() as u8;\n+                                return self.write_scalar(\n+                                    dest,\n+                                    Scalar::Bits {\n+                                        bits: discr_val,\n+                                        defined,\n+                                    },\n+                                    dest_ty);\n+                            }\n+                        }\n+                        layout::Variants::Tagged { .. } |\n+                        layout::Variants::NicheFilling { .. } => {},\n+                    }\n+\n+                    let src_val = self.value_to_scalar(src)?;\n+                    let dest_val = self.cast_scalar(src_val, src.ty, dest_ty)?;\n+                    let valty = ValTy {\n+                        value: Value::Scalar(dest_val),\n+                        ty: dest_ty,\n+                    };\n+                    self.write_value(valty, dest)?;\n+                }\n+            }\n+\n+            ReifyFnPointer => {\n+                match src.ty.sty {\n+                    ty::TyFnDef(def_id, substs) => {\n+                        if self.tcx.has_attr(def_id, \"rustc_args_required_const\") {\n+                            bug!(\"reifying a fn ptr that requires \\\n+                                    const arguments\");\n+                        }\n+                        let instance: EvalResult<'tcx, _> = ty::Instance::resolve(\n+                            *self.tcx,\n+                            self.param_env,\n+                            def_id,\n+                            substs,\n+                        ).ok_or_else(|| EvalErrorKind::TooGeneric.into());\n+                        let fn_ptr = self.memory.create_fn_alloc(instance?);\n+                        let valty = ValTy {\n+                            value: Value::Scalar(fn_ptr.into()),\n+                            ty: dest_ty,\n+                        };\n+                        self.write_value(valty, dest)?;\n+                    }\n+                    ref other => bug!(\"reify fn pointer on {:?}\", other),\n+                }\n+            }\n+\n+            UnsafeFnPointer => {\n+                match dest_ty.sty {\n+                    ty::TyFnPtr(_) => {\n+                        let mut src = src;\n+                        src.ty = dest_ty;\n+                        self.write_value(src, dest)?;\n+                    }\n+                    ref other => bug!(\"fn to unsafe fn cast on {:?}\", other),\n+                }\n+            }\n+\n+            ClosureFnPointer => {\n+                match src.ty.sty {\n+                    ty::TyClosure(def_id, substs) => {\n+                        let substs = self.tcx.subst_and_normalize_erasing_regions(\n+                            self.substs(),\n+                            ty::ParamEnv::reveal_all(),\n+                            &substs,\n+                        );\n+                        let instance = ty::Instance::resolve_closure(\n+                            *self.tcx,\n+                            def_id,\n+                            substs,\n+                            ty::ClosureKind::FnOnce,\n+                        );\n+                        let fn_ptr = self.memory.create_fn_alloc(instance);\n+                        let valty = ValTy {\n+                            value: Value::Scalar(fn_ptr.into()),\n+                            ty: dest_ty,\n+                        };\n+                        self.write_value(valty, dest)?;\n+                    }\n+                    ref other => bug!(\"closure fn pointer on {:?}\", other),\n+                }\n+            }\n+        }\n+        Ok(())\n+    }\n+\n     pub(super) fn cast_scalar(\n         &self,\n         val: Scalar,"}, {"sha": "fac6e8b69efaba35e83ff9922a710e5f83370d61", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 128, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e21028d34c0aeccc4c7b21e0d9ce044c5646c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e21028d34c0aeccc4c7b21e0d9ce044c5646c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=1f4e21028d34c0aeccc4c7b21e0d9ce044c5646c", "patch": "@@ -770,134 +770,8 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n \n             Cast(kind, ref operand, cast_ty) => {\n                 debug_assert_eq!(self.monomorphize(cast_ty, self.substs()), dest_ty);\n-                use rustc::mir::CastKind::*;\n                 let src = self.eval_operand(operand)?;\n-                match kind {\n-                    Unsize => {\n-                        let src_layout = self.layout_of(src.ty)?;\n-                        let dst_layout = self.layout_of(dest_ty)?;\n-                        self.unsize_into(src.value, src_layout, dest, dst_layout)?;\n-                    }\n-\n-                    Misc => {\n-                        if self.type_is_fat_ptr(src.ty) {\n-                            match (src.value, self.type_is_fat_ptr(dest_ty)) {\n-                                (Value::ByRef { .. }, _) |\n-                                // pointers to extern types\n-                                (Value::Scalar(_),_) |\n-                                // slices and trait objects to other slices/trait objects\n-                                (Value::ScalarPair(..), true) => {\n-                                    let valty = ValTy {\n-                                        value: src.value,\n-                                        ty: dest_ty,\n-                                    };\n-                                    self.write_value(valty, dest)?;\n-                                }\n-                                // slices and trait objects to thin pointers (dropping the metadata)\n-                                (Value::ScalarPair(data, _), false) => {\n-                                    let valty = ValTy {\n-                                        value: Value::Scalar(data),\n-                                        ty: dest_ty,\n-                                    };\n-                                    self.write_value(valty, dest)?;\n-                                }\n-                            }\n-                        } else {\n-                            let src_layout = self.layout_of(src.ty)?;\n-                            match src_layout.variants {\n-                                layout::Variants::Single { index } => {\n-                                    if let Some(def) = src.ty.ty_adt_def() {\n-                                        let discr_val = def\n-                                            .discriminant_for_variant(*self.tcx, index)\n-                                            .val;\n-                                        let defined = self\n-                                            .layout_of(dest_ty)\n-                                            .unwrap()\n-                                            .size\n-                                            .bits() as u8;\n-                                        return self.write_scalar(\n-                                            dest,\n-                                            Scalar::Bits {\n-                                                bits: discr_val,\n-                                                defined,\n-                                            },\n-                                            dest_ty);\n-                                    }\n-                                }\n-                                layout::Variants::Tagged { .. } |\n-                                layout::Variants::NicheFilling { .. } => {},\n-                            }\n-\n-                            let src_val = self.value_to_scalar(src)?;\n-                            let dest_val = self.cast_scalar(src_val, src.ty, dest_ty)?;\n-                            let valty = ValTy {\n-                                value: Value::Scalar(dest_val),\n-                                ty: dest_ty,\n-                            };\n-                            self.write_value(valty, dest)?;\n-                        }\n-                    }\n-\n-                    ReifyFnPointer => {\n-                        match src.ty.sty {\n-                            ty::TyFnDef(def_id, substs) => {\n-                                if self.tcx.has_attr(def_id, \"rustc_args_required_const\") {\n-                                    bug!(\"reifying a fn ptr that requires \\\n-                                          const arguments\");\n-                                }\n-                                let instance: EvalResult<'tcx, _> = ty::Instance::resolve(\n-                                    *self.tcx,\n-                                    self.param_env,\n-                                    def_id,\n-                                    substs,\n-                                ).ok_or_else(|| EvalErrorKind::TooGeneric.into());\n-                                let fn_ptr = self.memory.create_fn_alloc(instance?);\n-                                let valty = ValTy {\n-                                    value: Value::Scalar(fn_ptr.into()),\n-                                    ty: dest_ty,\n-                                };\n-                                self.write_value(valty, dest)?;\n-                            }\n-                            ref other => bug!(\"reify fn pointer on {:?}\", other),\n-                        }\n-                    }\n-\n-                    UnsafeFnPointer => {\n-                        match dest_ty.sty {\n-                            ty::TyFnPtr(_) => {\n-                                let mut src = src;\n-                                src.ty = dest_ty;\n-                                self.write_value(src, dest)?;\n-                            }\n-                            ref other => bug!(\"fn to unsafe fn cast on {:?}\", other),\n-                        }\n-                    }\n-\n-                    ClosureFnPointer => {\n-                        match src.ty.sty {\n-                            ty::TyClosure(def_id, substs) => {\n-                                let substs = self.tcx.subst_and_normalize_erasing_regions(\n-                                    self.substs(),\n-                                    ty::ParamEnv::reveal_all(),\n-                                    &substs,\n-                                );\n-                                let instance = ty::Instance::resolve_closure(\n-                                    *self.tcx,\n-                                    def_id,\n-                                    substs,\n-                                    ty::ClosureKind::FnOnce,\n-                                );\n-                                let fn_ptr = self.memory.create_fn_alloc(instance);\n-                                let valty = ValTy {\n-                                    value: Value::Scalar(fn_ptr.into()),\n-                                    ty: dest_ty,\n-                                };\n-                                self.write_value(valty, dest)?;\n-                            }\n-                            ref other => bug!(\"closure fn pointer on {:?}\", other),\n-                        }\n-                    }\n-                }\n+                self.cast(src, kind, dest_ty, dest)?;\n             }\n \n             Discriminant(ref place) => {\n@@ -1564,7 +1438,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         }\n     }\n \n-    fn unsize_into(\n+    crate fn unsize_into(\n         &mut self,\n         src: Value,\n         src_layout: TyLayout<'tcx>,"}]}