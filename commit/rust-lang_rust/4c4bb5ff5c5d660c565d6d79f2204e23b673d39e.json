{"sha": "4c4bb5ff5c5d660c565d6d79f2204e23b673d39e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNGJiNWZmNWM1ZDY2MGM1NjVkNmQ3OWYyMjA0ZTIzYjY3M2QzOWU=", "commit": {"author": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-02-08T20:53:05Z"}, "committer": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-02-08T22:15:24Z"}, "message": "driver: Extract handling of --explain to separate function", "tree": {"sha": "a9012fd1d07fdeabb9d14bb0f07420acffe272c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9012fd1d07fdeabb9d14bb0f07420acffe272c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c4bb5ff5c5d660c565d6d79f2204e23b673d39e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c4bb5ff5c5d660c565d6d79f2204e23b673d39e", "html_url": "https://github.com/rust-lang/rust/commit/4c4bb5ff5c5d660c565d6d79f2204e23b673d39e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c4bb5ff5c5d660c565d6d79f2204e23b673d39e/comments", "author": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9951ac4be90848bbc12e8187886047ae35795c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9951ac4be90848bbc12e8187886047ae35795c8d", "html_url": "https://github.com/rust-lang/rust/commit/9951ac4be90848bbc12e8187886047ae35795c8d"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "5b0ee3cf973b07219886555aa6bcb4ceaec627bf", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4c4bb5ff5c5d660c565d6d79f2204e23b673d39e/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4bb5ff5c5d660c565d6d79f2204e23b673d39e/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=4c4bb5ff5c5d660c565d6d79f2204e23b673d39e", "patch": "@@ -329,35 +329,38 @@ pub trait CompilerCalls<'a> {\n #[derive(Copy, Clone)]\n pub struct RustcDefaultCalls;\n \n+fn handle_explain(code: &str,\n+                  descriptions: &diagnostics::registry::Registry,\n+                  output: ErrorOutputType) {\n+    let normalised = if !code.starts_with(\"E\") {\n+        format!(\"E{0:0>4}\", code)\n+    } else {\n+        code.to_string()\n+    };\n+    match descriptions.find_description(&normalised) {\n+        Some(ref description) => {\n+            // Slice off the leading newline and print.\n+            print!(\"{}\", &description[1..]);\n+        }\n+        None => {\n+            early_error(output, &format!(\"no extended information for {}\", code));\n+        }\n+    }\n+}\n+\n impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n     fn early_callback(&mut self,\n                       matches: &getopts::Matches,\n                       _sopts: &config::Options,\n                       descriptions: &diagnostics::registry::Registry,\n                       output: ErrorOutputType)\n                       -> Compilation {\n-        match matches.opt_str(\"explain\") {\n-            Some(ref code) => {\n-                let normalised = if !code.starts_with(\"E\") {\n-                    format!(\"E{0:0>4}\", code)\n-                } else {\n-                    code.to_string()\n-                };\n-                match descriptions.find_description(&normalised) {\n-                    Some(ref description) => {\n-                        // Slice off the leading newline and print.\n-                        print!(\"{}\", &description[1..]);\n-                    }\n-                    None => {\n-                        early_error(output, &format!(\"no extended information for {}\", code));\n-                    }\n-                }\n-                return Compilation::Stop;\n-            }\n-            None => (),\n+        if let Some(ref code) = matches.opt_str(\"explain\") {\n+            handle_explain(code, descriptions, output);\n+            return Compilation::Stop;\n         }\n \n-        return Compilation::Continue;\n+        Compilation::Continue\n     }\n \n     fn no_input(&mut self,"}]}