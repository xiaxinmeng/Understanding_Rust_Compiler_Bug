{"sha": "8ed6f3e78ffacab3e9beabde0016c9d66a8e3f13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZDZmM2U3OGZmYWNhYjNlOWJlYWJkZTAwMTZjOWQ2NmE4ZTNmMTM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-27T23:16:07Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:01:58Z"}, "message": "libsyntax: De-`@mut` the handler", "tree": {"sha": "07e2c20b1256af54b969a79485e4518257360b55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07e2c20b1256af54b969a79485e4518257360b55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ed6f3e78ffacab3e9beabde0016c9d66a8e3f13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed6f3e78ffacab3e9beabde0016c9d66a8e3f13", "html_url": "https://github.com/rust-lang/rust/commit/8ed6f3e78ffacab3e9beabde0016c9d66a8e3f13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ed6f3e78ffacab3e9beabde0016c9d66a8e3f13/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2b7367a88fa2608df73e06e3ac058350532fb2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b7367a88fa2608df73e06e3ac058350532fb2e", "html_url": "https://github.com/rust-lang/rust/commit/a2b7367a88fa2608df73e06e3ac058350532fb2e"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "76327c27898f99b671efe3ac744896926e3eb0aa", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8ed6f3e78ffacab3e9beabde0016c9d66a8e3f13/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed6f3e78ffacab3e9beabde0016c9d66a8e3f13/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=8ed6f3e78ffacab3e9beabde0016c9d66a8e3f13", "patch": "@@ -31,7 +31,7 @@ pub trait Emitter {\n // accepts span information for source-location\n // reporting.\n pub struct SpanHandler {\n-    handler: @mut Handler,\n+    handler: @Handler,\n     cm: @codemap::CodeMap,\n }\n \n@@ -56,7 +56,7 @@ impl SpanHandler {\n     pub fn span_unimpl(@self, sp: Span, msg: &str) -> ! {\n         self.span_bug(sp, ~\"unimplemented \" + msg);\n     }\n-    pub fn handler(@self) -> @mut Handler {\n+    pub fn handler(@self) -> @Handler {\n         self.handler\n     }\n }\n@@ -70,24 +70,24 @@ pub struct Handler {\n }\n \n impl Handler {\n-    pub fn fatal(@mut self, msg: &str) -> ! {\n+    pub fn fatal(@self, msg: &str) -> ! {\n         self.emit.emit(None, msg, fatal);\n         fail!();\n     }\n-    pub fn err(@mut self, msg: &str) {\n+    pub fn err(@self, msg: &str) {\n         self.emit.emit(None, msg, error);\n         self.bump_err_count();\n     }\n-    pub fn bump_err_count(@mut self) {\n+    pub fn bump_err_count(@self) {\n         self.err_count.set(self.err_count.get() + 1u);\n     }\n-    pub fn err_count(@mut self) -> uint {\n+    pub fn err_count(@self) -> uint {\n         self.err_count.get()\n     }\n-    pub fn has_errors(@mut self) -> bool {\n+    pub fn has_errors(@self) -> bool {\n         self.err_count.get()> 0u\n     }\n-    pub fn abort_if_errors(@mut self) {\n+    pub fn abort_if_errors(@self) {\n         let s;\n         match self.err_count.get() {\n           0u => return,\n@@ -99,19 +99,19 @@ impl Handler {\n         }\n         self.fatal(s);\n     }\n-    pub fn warn(@mut self, msg: &str) {\n+    pub fn warn(@self, msg: &str) {\n         self.emit.emit(None, msg, warning);\n     }\n-    pub fn note(@mut self, msg: &str) {\n+    pub fn note(@self, msg: &str) {\n         self.emit.emit(None, msg, note);\n     }\n-    pub fn bug(@mut self, msg: &str) -> ! {\n+    pub fn bug(@self, msg: &str) -> ! {\n         self.fatal(ice_msg(msg));\n     }\n-    pub fn unimpl(@mut self, msg: &str) -> ! {\n+    pub fn unimpl(@self, msg: &str) -> ! {\n         self.bug(~\"unimplemented \" + msg);\n     }\n-    pub fn emit(@mut self,\n+    pub fn emit(@self,\n             cmsp: Option<(&codemap::CodeMap, Span)>,\n             msg: &str,\n             lvl: level) {\n@@ -124,21 +124,21 @@ pub fn ice_msg(msg: &str) -> ~str {\n             \\nWe would appreciate a bug report: {}\", msg, BUG_REPORT_URL)\n }\n \n-pub fn mk_span_handler(handler: @mut Handler, cm: @codemap::CodeMap)\n+pub fn mk_span_handler(handler: @Handler, cm: @codemap::CodeMap)\n                        -> @SpanHandler {\n     @SpanHandler {\n         handler: handler,\n         cm: cm,\n     }\n }\n \n-pub fn mk_handler(emitter: Option<@Emitter>) -> @mut Handler {\n+pub fn mk_handler(emitter: Option<@Emitter>) -> @Handler {\n     let emit: @Emitter = match emitter {\n         Some(e) => e,\n         None => @DefaultEmitter as @Emitter\n     };\n \n-    @mut Handler {\n+    @Handler {\n         err_count: Cell::new(0),\n         emit: emit,\n     }"}]}