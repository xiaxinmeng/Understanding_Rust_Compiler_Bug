{"sha": "343b3f010c23d2ff23dd08b62541a2dd9461916e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0M2IzZjAxMGMyM2QyZmYyM2RkMDhiNjI1NDFhMmRkOTQ2MTkxNmU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-02T20:49:38Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-02T21:45:38Z"}, "message": "switch assignment check back to testing layout equality", "tree": {"sha": "3b3d0bc0922c6d86cb3e9395cc73c852e2be98f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b3d0bc0922c6d86cb3e9395cc73c852e2be98f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/343b3f010c23d2ff23dd08b62541a2dd9461916e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/343b3f010c23d2ff23dd08b62541a2dd9461916e", "html_url": "https://github.com/rust-lang/rust/commit/343b3f010c23d2ff23dd08b62541a2dd9461916e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/343b3f010c23d2ff23dd08b62541a2dd9461916e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "351b7d099a90868c8021485af4221ec35c84fcd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/351b7d099a90868c8021485af4221ec35c84fcd2", "html_url": "https://github.com/rust-lang/rust/commit/351b7d099a90868c8021485af4221ec35c84fcd2"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "10d3101ebb87a73e951265349b94a7521c670175", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/343b3f010c23d2ff23dd08b62541a2dd9461916e/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343b3f010c23d2ff23dd08b62541a2dd9461916e/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=343b3f010c23d2ff23dd08b62541a2dd9461916e", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::ty::query::TyCtxtAt;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_span::source_map::DUMMY_SP;\n-use rustc_target::abi::{Align, HasDataLayout, LayoutOf, Size, TargetDataLayout};\n+use rustc_target::abi::{Abi, Align, HasDataLayout, LayoutOf, Size, TargetDataLayout};\n \n use super::{\n     Immediate, MPlaceTy, Machine, MemPlace, MemPlaceMeta, Memory, OpTy, Operand, Place, PlaceTy,\n@@ -212,20 +212,25 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> LayoutOf for InterpCx<'mir, 'tcx, M> {\n \n /// Test if it is valid for a MIR assignment to assign `src`-typed place to `dest`-typed value.\n /// This test should be symmetric, as it is primarily about layout compatibility.\n-pub(super) fn mir_assign_valid_types<'tcx>(src: Ty<'tcx>, dest: Ty<'tcx>) -> bool {\n-    src == dest\n-        || match (&src.kind, &dest.kind) {\n-            (ty::Ref(_, src_pointee, _), ty::Ref(_, dest_pointee, _)) => {\n-                // After optimizations, there can be assignments that change reference mutability.\n-                // This does not affect reference layout, so that is fine.\n-                src_pointee == dest_pointee\n-            }\n-            (ty::FnPtr(_), ty::FnPtr(_)) => {\n-                // All function pointers have equal layout, and thus can be assigned.\n-                true\n-            }\n-            _ => false,\n-        }\n+pub(super) fn mir_assign_valid_types<'tcx>(\n+    src: TyAndLayout<'tcx>,\n+    dest: TyAndLayout<'tcx>,\n+) -> bool {\n+    if src.ty == dest.ty {\n+        // Equal types, all is good.\n+        return true;\n+    }\n+    // Type-changing assignments can happen for (at least) two reasons:\n+    // - `&mut T` -> `&T` gets optimized from a reborrow to a mere assignment.\n+    // - Subtyping is used. While all normal lifetimes are erased, higher-ranked lifetime\n+    //   bounds are still around and can lead to type differences.\n+    // There is no good way to check the latter, so we compare layouts instead -- but only\n+    // for values with `Scalar`/`ScalarPair` abi.\n+    // FIXME: Do something more accurate, type-based.\n+    match &src.abi {\n+        Abi::Scalar(..) | Abi::ScalarPair(..) => src.layout == dest.layout,\n+        _ => false,\n+    }\n }\n \n /// Use the already known layout if given (but sanity check in debug mode),\n@@ -241,7 +246,7 @@ pub(super) fn from_known_layout<'tcx>(\n             if cfg!(debug_assertions) {\n                 let check_layout = compute()?;\n                 assert!(\n-                    mir_assign_valid_types(check_layout.ty, known_layout.ty),\n+                    mir_assign_valid_types(check_layout, known_layout),\n                     \"expected type differs from actual type.\\nexpected: {:?}\\nactual: {:?}\",\n                     known_layout.ty,\n                     check_layout.ty,"}, {"sha": "ec299cdd2134b284a65c4000707425fea9630dda", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/343b3f010c23d2ff23dd08b62541a2dd9461916e/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343b3f010c23d2ff23dd08b62541a2dd9461916e/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=343b3f010c23d2ff23dd08b62541a2dd9461916e", "patch": "@@ -868,7 +868,7 @@ where\n         // We do NOT compare the types for equality, because well-typed code can\n         // actually \"transmute\" `&mut T` to `&T` in an assignment without a cast.\n         assert!(\n-            mir_assign_valid_types(src.layout.ty, dest.layout.ty),\n+            mir_assign_valid_types(src.layout, dest.layout),\n             \"type mismatch when copying!\\nsrc: {:?},\\ndest: {:?}\",\n             src.layout.ty,\n             dest.layout.ty,\n@@ -922,7 +922,7 @@ where\n         src: OpTy<'tcx, M::PointerTag>,\n         dest: PlaceTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx> {\n-        if mir_assign_valid_types(src.layout.ty, dest.layout.ty) {\n+        if mir_assign_valid_types(src.layout, dest.layout) {\n             // Fast path: Just use normal `copy_op`\n             return self.copy_op(src, dest);\n         }"}]}