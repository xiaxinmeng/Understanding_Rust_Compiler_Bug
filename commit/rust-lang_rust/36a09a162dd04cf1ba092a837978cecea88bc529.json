{"sha": "36a09a162dd04cf1ba092a837978cecea88bc529", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YTA5YTE2MmRkMDRjZjFiYTA5MmE4Mzc5NzhjZWNlYTg4YmM1Mjk=", "commit": {"author": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2015-03-02T11:26:36Z"}, "committer": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2015-03-03T02:55:37Z"}, "message": "metadata: Flatten `tag_table_id` and `tag_table_val` tags.\n\nThis avoids a biggish eight-byte `tag_table_id` tag in favor of\nautoserialized integer tags, which are smaller and can be later\nused to encode them in the optimal number of bytes. `NodeId` was\nu32 after all.\n\nPreviously:\n\n                       <------------- len1 -------------->\n    tag_table_* <len1> tag_table_id 88 <nodeid in 8 bytes>\n                       tag_table_val <len2> <actual data>\n                                            <-- len2 --->\n\nNow:\n\n                      <--------------- len --------------->\n    tag_table_* <len> U32 <nodeid in 4 bytes> <actual data>", "tree": {"sha": "cec657ac8f1f57ac8c302970d4d08f6d6aa1523c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cec657ac8f1f57ac8c302970d4d08f6d6aa1523c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36a09a162dd04cf1ba092a837978cecea88bc529", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36a09a162dd04cf1ba092a837978cecea88bc529", "html_url": "https://github.com/rust-lang/rust/commit/36a09a162dd04cf1ba092a837978cecea88bc529", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36a09a162dd04cf1ba092a837978cecea88bc529/comments", "author": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b6e43c07f18243873d7cff428cca8cf8283467b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b6e43c07f18243873d7cff428cca8cf8283467b", "html_url": "https://github.com/rust-lang/rust/commit/7b6e43c07f18243873d7cff428cca8cf8283467b"}], "stats": {"total": 100, "additions": 35, "deletions": 65}, "files": [{"sha": "a58ef53de9a7135591de41d12b98c66777411a62", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36a09a162dd04cf1ba092a837978cecea88bc529/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a09a162dd04cf1ba092a837978cecea88bc529/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=36a09a162dd04cf1ba092a837978cecea88bc529", "patch": "@@ -127,8 +127,7 @@ pub enum astencode_tag { // Reserves 0x50 -- 0x6f\n     tag_id_range = 0x52,\n \n     tag_table = 0x53,\n-    tag_table_id = 0x54,\n-    tag_table_val = 0x55,\n+    // GAP 0x54, 0x55\n     tag_table_def = 0x56,\n     tag_table_node_type = 0x57,\n     tag_table_item_subst = 0x58,"}, {"sha": "7a75d844838a6c2a16e333cf382e153fe676e4a6", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 34, "deletions": 63, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/36a09a162dd04cf1ba092a837978cecea88bc529/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a09a162dd04cf1ba092a837978cecea88bc529/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=36a09a162dd04cf1ba092a837978cecea88bc529", "patch": "@@ -413,9 +413,8 @@ fn decode_ast(par_doc: rbml::Doc) -> ast::InlinedItem {\n // ______________________________________________________________________\n // Encoding and decoding of ast::def\n \n-fn decode_def(dcx: &DecodeContext, doc: rbml::Doc) -> def::Def {\n-    let mut dsr = reader::Decoder::new(doc);\n-    let def: def::Def = Decodable::decode(&mut dsr).unwrap();\n+fn decode_def(dcx: &DecodeContext, dsr: &mut reader::Decoder) -> def::Def {\n+    let def: def::Def = Decodable::decode(dsr).unwrap();\n     def.tr(dcx)\n }\n \n@@ -1114,7 +1113,7 @@ impl<'a> write_tag_and_id for Encoder<'a> {\n     }\n \n     fn id(&mut self, id: ast::NodeId) {\n-        self.wr_tagged_u64(c::tag_table_id as uint, id as u64);\n+        id.encode(self).unwrap();\n     }\n }\n \n@@ -1151,51 +1150,44 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n     if let Some(def) = tcx.def_map.borrow().get(&id).map(|d| d.full_def()) {\n         rbml_w.tag(c::tag_table_def, |rbml_w| {\n             rbml_w.id(id);\n-            rbml_w.tag(c::tag_table_val, |rbml_w| def.encode(rbml_w).unwrap());\n+            def.encode(rbml_w).unwrap();\n         })\n     }\n \n     if let Some(ty) = tcx.node_types.borrow().get(&id) {\n         rbml_w.tag(c::tag_table_node_type, |rbml_w| {\n             rbml_w.id(id);\n-            rbml_w.tag(c::tag_table_val, |rbml_w| {\n-                rbml_w.emit_ty(ecx, *ty);\n-            })\n+            rbml_w.emit_ty(ecx, *ty);\n         })\n     }\n \n     if let Some(item_substs) = tcx.item_substs.borrow().get(&id) {\n         rbml_w.tag(c::tag_table_item_subst, |rbml_w| {\n             rbml_w.id(id);\n-            rbml_w.tag(c::tag_table_val, |rbml_w| {\n-                rbml_w.emit_substs(ecx, &item_substs.substs);\n-            })\n+            rbml_w.emit_substs(ecx, &item_substs.substs);\n         })\n     }\n \n     if let Some(fv) = tcx.freevars.borrow().get(&id) {\n         rbml_w.tag(c::tag_table_freevars, |rbml_w| {\n             rbml_w.id(id);\n-            rbml_w.tag(c::tag_table_val, |rbml_w| {\n-                rbml_w.emit_from_vec(fv, |rbml_w, fv_entry| {\n-                    Ok(encode_freevar_entry(rbml_w, fv_entry))\n-                });\n-            })\n+            rbml_w.emit_from_vec(fv, |rbml_w, fv_entry| {\n+                Ok(encode_freevar_entry(rbml_w, fv_entry))\n+            });\n         });\n \n         for freevar in fv {\n             rbml_w.tag(c::tag_table_upvar_capture_map, |rbml_w| {\n                 rbml_w.id(id);\n-                rbml_w.tag(c::tag_table_val, |rbml_w| {\n-                    let var_id = freevar.def.def_id().node;\n-                    let upvar_id = ty::UpvarId {\n-                        var_id: var_id,\n-                        closure_expr_id: id\n-                    };\n-                    let upvar_capture = tcx.upvar_capture_map.borrow()[upvar_id].clone();\n-                    var_id.encode(rbml_w);\n-                    upvar_capture.encode(rbml_w);\n-                })\n+\n+                let var_id = freevar.def.def_id().node;\n+                let upvar_id = ty::UpvarId {\n+                    var_id: var_id,\n+                    closure_expr_id: id\n+                };\n+                let upvar_capture = tcx.upvar_capture_map.borrow()[upvar_id].clone();\n+                var_id.encode(rbml_w);\n+                upvar_capture.encode(rbml_w);\n             })\n         }\n     }\n@@ -1204,37 +1196,29 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n     if let Some(type_scheme) = tcx.tcache.borrow().get(&lid) {\n         rbml_w.tag(c::tag_table_tcache, |rbml_w| {\n             rbml_w.id(id);\n-            rbml_w.tag(c::tag_table_val, |rbml_w| {\n-                rbml_w.emit_type_scheme(ecx, type_scheme.clone());\n-            })\n+            rbml_w.emit_type_scheme(ecx, type_scheme.clone());\n         })\n     }\n \n     if let Some(type_param_def) = tcx.ty_param_defs.borrow().get(&id) {\n         rbml_w.tag(c::tag_table_param_defs, |rbml_w| {\n             rbml_w.id(id);\n-            rbml_w.tag(c::tag_table_val, |rbml_w| {\n-                rbml_w.emit_type_param_def(ecx, type_param_def)\n-            })\n+            rbml_w.emit_type_param_def(ecx, type_param_def)\n         })\n     }\n \n     let method_call = MethodCall::expr(id);\n     if let Some(method) = tcx.method_map.borrow().get(&method_call) {\n         rbml_w.tag(c::tag_table_method_map, |rbml_w| {\n             rbml_w.id(id);\n-            rbml_w.tag(c::tag_table_val, |rbml_w| {\n-                encode_method_callee(ecx, rbml_w, method_call.adjustment, method)\n-            })\n+            encode_method_callee(ecx, rbml_w, method_call.adjustment, method)\n         })\n     }\n \n     if let Some(trait_ref) = tcx.object_cast_map.borrow().get(&id) {\n         rbml_w.tag(c::tag_table_object_cast_map, |rbml_w| {\n             rbml_w.id(id);\n-            rbml_w.tag(c::tag_table_val, |rbml_w| {\n-                rbml_w.emit_trait_ref(ecx, &*trait_ref.0);\n-            })\n+            rbml_w.emit_trait_ref(ecx, &*trait_ref.0);\n         })\n     }\n \n@@ -1245,9 +1229,7 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n                 if let Some(method) = tcx.method_map.borrow().get(&method_call) {\n                     rbml_w.tag(c::tag_table_method_map, |rbml_w| {\n                         rbml_w.id(id);\n-                        rbml_w.tag(c::tag_table_val, |rbml_w| {\n-                            encode_method_callee(ecx, rbml_w, method_call.adjustment, method)\n-                        })\n+                        encode_method_callee(ecx, rbml_w, method_call.adjustment, method)\n                     })\n                 }\n             }\n@@ -1258,10 +1240,8 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n                     if let Some(method) = tcx.method_map.borrow().get(&method_call) {\n                         rbml_w.tag(c::tag_table_method_map, |rbml_w| {\n                             rbml_w.id(id);\n-                            rbml_w.tag(c::tag_table_val, |rbml_w| {\n-                                encode_method_callee(ecx, rbml_w,\n-                                                     method_call.adjustment, method)\n-                            })\n+                            encode_method_callee(ecx, rbml_w,\n+                                                 method_call.adjustment, method)\n                         })\n                     }\n                 }\n@@ -1273,36 +1253,28 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n \n         rbml_w.tag(c::tag_table_adjustments, |rbml_w| {\n             rbml_w.id(id);\n-            rbml_w.tag(c::tag_table_val, |rbml_w| {\n-                rbml_w.emit_auto_adjustment(ecx, adjustment);\n-            })\n+            rbml_w.emit_auto_adjustment(ecx, adjustment);\n         })\n     }\n \n     if let Some(closure_type) = tcx.closure_tys.borrow().get(&ast_util::local_def(id)) {\n         rbml_w.tag(c::tag_table_closure_tys, |rbml_w| {\n             rbml_w.id(id);\n-            rbml_w.tag(c::tag_table_val, |rbml_w| {\n-                rbml_w.emit_closure_type(ecx, closure_type);\n-            })\n+            rbml_w.emit_closure_type(ecx, closure_type);\n         })\n     }\n \n     if let Some(closure_kind) = tcx.closure_kinds.borrow().get(&ast_util::local_def(id)) {\n         rbml_w.tag(c::tag_table_closure_kinds, |rbml_w| {\n             rbml_w.id(id);\n-            rbml_w.tag(c::tag_table_val, |rbml_w| {\n-                encode_closure_kind(rbml_w, *closure_kind)\n-            })\n+            encode_closure_kind(rbml_w, *closure_kind)\n         })\n     }\n \n     for &qualif in tcx.const_qualif_map.borrow().get(&id).iter() {\n         rbml_w.tag(c::tag_table_const_qualif, |rbml_w| {\n             rbml_w.id(id);\n-            rbml_w.tag(c::tag_table_val, |rbml_w| {\n-                qualif.encode(rbml_w).unwrap()\n-            })\n+            qualif.encode(rbml_w).unwrap()\n         })\n     }\n }\n@@ -1830,8 +1802,9 @@ fn decode_side_tables(dcx: &DecodeContext,\n                       ast_doc: rbml::Doc) {\n     let tbl_doc = ast_doc.get(c::tag_table as uint);\n     reader::docs(tbl_doc, |tag, entry_doc| {\n-        let id0 = entry_doc.get(c::tag_table_id as uint).as_int();\n-        let id = dcx.tr_id(id0 as ast::NodeId);\n+        let mut entry_dsr = reader::Decoder::new(entry_doc);\n+        let id0: ast::NodeId = Decodable::decode(&mut entry_dsr).unwrap();\n+        let id = dcx.tr_id(id0);\n \n         debug!(\">> Side table document with tag 0x{:x} \\\n                 found for id {} (orig {})\",\n@@ -1844,13 +1817,11 @@ fn decode_side_tables(dcx: &DecodeContext,\n                             tag));\n             }\n             Some(value) => {\n-                let val_doc = entry_doc.get(c::tag_table_val as uint);\n-                let mut val_dsr = reader::Decoder::new(val_doc);\n-                let val_dsr = &mut val_dsr;\n+                let val_dsr = &mut entry_dsr;\n \n                 match value {\n                     c::tag_table_def => {\n-                        let def = decode_def(dcx, val_doc);\n+                        let def = decode_def(dcx, val_dsr);\n                         dcx.tcx.def_map.borrow_mut().insert(id, def::PathResolution {\n                             base_def: def,\n                             // This doesn't matter cross-crate."}]}