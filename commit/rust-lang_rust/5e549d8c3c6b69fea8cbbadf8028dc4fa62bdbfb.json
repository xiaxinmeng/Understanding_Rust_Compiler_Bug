{"sha": "5e549d8c3c6b69fea8cbbadf8028dc4fa62bdbfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNTQ5ZDhjM2M2YjY5ZmVhOGNiYmFkZjgwMjhkYzRmYTYyYmRiZmI=", "commit": {"author": {"name": "Colin Sherratt", "email": "colin.sherratt@gmail.com", "date": "2014-11-11T02:57:52Z"}, "committer": {"name": "Colin Sherratt", "email": "colin.sherratt@gmail.com", "date": "2014-11-14T08:41:07Z"}, "message": "Manually reset the ringbuffer before or after the ringbuffer push/pop tests.", "tree": {"sha": "9a482c012ef7babe16a2993e9c65d9643977edf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a482c012ef7babe16a2993e9c65d9643977edf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e549d8c3c6b69fea8cbbadf8028dc4fa62bdbfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e549d8c3c6b69fea8cbbadf8028dc4fa62bdbfb", "html_url": "https://github.com/rust-lang/rust/commit/5e549d8c3c6b69fea8cbbadf8028dc4fa62bdbfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e549d8c3c6b69fea8cbbadf8028dc4fa62bdbfb/comments", "author": {"login": "csherratt", "id": 26073376, "node_id": "MDQ6VXNlcjI2MDczMzc2", "avatar_url": "https://avatars.githubusercontent.com/u/26073376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csherratt", "html_url": "https://github.com/csherratt", "followers_url": "https://api.github.com/users/csherratt/followers", "following_url": "https://api.github.com/users/csherratt/following{/other_user}", "gists_url": "https://api.github.com/users/csherratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/csherratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csherratt/subscriptions", "organizations_url": "https://api.github.com/users/csherratt/orgs", "repos_url": "https://api.github.com/users/csherratt/repos", "events_url": "https://api.github.com/users/csherratt/events{/privacy}", "received_events_url": "https://api.github.com/users/csherratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csherratt", "id": 26073376, "node_id": "MDQ6VXNlcjI2MDczMzc2", "avatar_url": "https://avatars.githubusercontent.com/u/26073376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csherratt", "html_url": "https://github.com/csherratt", "followers_url": "https://api.github.com/users/csherratt/followers", "following_url": "https://api.github.com/users/csherratt/following{/other_user}", "gists_url": "https://api.github.com/users/csherratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/csherratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csherratt/subscriptions", "organizations_url": "https://api.github.com/users/csherratt/orgs", "repos_url": "https://api.github.com/users/csherratt/repos", "events_url": "https://api.github.com/users/csherratt/events{/privacy}", "received_events_url": "https://api.github.com/users/csherratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cae9add8c9471126aa405cacecac2623232083a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cae9add8c9471126aa405cacecac2623232083a", "html_url": "https://github.com/rust-lang/rust/commit/4cae9add8c9471126aa405cacecac2623232083a"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "1024a2828b3ddcc1ba9da29d3682ac6b4fc22dd6", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5e549d8c3c6b69fea8cbbadf8028dc4fa62bdbfb/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e549d8c3c6b69fea8cbbadf8028dc4fa62bdbfb/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=5e549d8c3c6b69fea8cbbadf8028dc4fa62bdbfb", "patch": "@@ -209,7 +209,7 @@ impl<T> RingBuf<T> {\n         assert!(i < self.len());\n         assert!(j < self.len());\n         let ri = wrap_index(self.tail + i, self.cap);\n-        let rj = wrap_index(self.tail + j, self.cap);;\n+        let rj = wrap_index(self.tail + j, self.cap);\n         unsafe {\n             ptr::swap(self.ptr.offset(ri as int), self.ptr.offset(rj as int))\n         }\n@@ -972,53 +972,58 @@ mod tests {\n     #[bench]\n     fn bench_new(b: &mut test::Bencher) {\n         b.iter(|| {\n-            let _: RingBuf<u64> = RingBuf::new();\n+            let ring: RingBuf<u64> = RingBuf::new();\n+            test::black_box(ring);\n         })\n     }\n \n     #[bench]\n     fn bench_push_back_100(b: &mut test::Bencher) {\n-        let mut deq = RingBuf::with_capacity(100);\n+        let mut deq = RingBuf::with_capacity(101);\n         b.iter(|| {\n             for i in range(0i, 100) {\n                 deq.push_back(i);\n             }\n-            deq.clear();\n+            deq.head = 0;\n+            deq.tail = 0;\n         })\n     }\n \n     #[bench]\n     fn bench_push_front_100(b: &mut test::Bencher) {\n-        let mut deq = RingBuf::with_capacity(100);\n+        let mut deq = RingBuf::with_capacity(101);\n         b.iter(|| {\n             for i in range(0i, 100) {\n                 deq.push_front(i);\n             }\n-            deq.clear();\n+            deq.head = 0;\n+            deq.tail = 0;\n         })\n     }\n \n     #[bench]\n-    fn bench_pop_100(b: &mut test::Bencher) {\n-        let mut deq = RingBuf::with_capacity(100);\n+    fn bench_pop_back_100(b: &mut test::Bencher) {\n+        let mut deq: RingBuf<int> = RingBuf::with_capacity(101);\n \n         b.iter(|| {\n-            for i in range(0i, 100) {\n-                deq.push_back(i);\n+            deq.head = 100;\n+            deq.tail = 0;\n+            while !deq.is_empty() {\n+                test::black_box(deq.pop_back());\n             }\n-            while None != deq.pop_back() {}\n         })\n     }\n \n     #[bench]\n     fn bench_pop_front_100(b: &mut test::Bencher) {\n-        let mut deq = RingBuf::with_capacity(100);\n+        let mut deq: RingBuf<int> = RingBuf::with_capacity(101);\n \n         b.iter(|| {\n-            for i in range(0i, 100) {\n-                deq.push_back(i);\n+            deq.head = 100;\n+            deq.tail = 0;\n+            while !deq.is_empty() {\n+                test::black_box(deq.pop_front());\n             }\n-            while None != deq.pop_front() {}\n         })\n     }\n \n@@ -1029,6 +1034,7 @@ mod tests {\n             for i in range(0i, 1025) {\n                 deq.push_front(i);\n             }\n+            test::black_box(deq);\n         })\n     }\n \n@@ -1041,7 +1047,7 @@ mod tests {\n             for &i in ring.iter() {\n                 sum += i;\n             }\n-            sum\n+            test::black_box(sum);\n         })\n     }\n \n@@ -1050,9 +1056,11 @@ mod tests {\n         let mut ring: RingBuf<int> = range(0i, 1000).collect();\n \n         b.iter(|| {\n+            let mut sum = 0;\n             for i in ring.iter_mut() {\n-                *i += 1;\n+                sum += *i;\n             }\n+            test::black_box(sum);\n         })\n     }\n "}]}