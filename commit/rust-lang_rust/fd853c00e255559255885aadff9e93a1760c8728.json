{"sha": "fd853c00e255559255885aadff9e93a1760c8728", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkODUzYzAwZTI1NTU1OTI1NTg4NWFhZGZmOWU5M2ExNzYwYzg3Mjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-27T16:24:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-27T16:24:45Z"}, "message": "Auto merge of #83484 - JulianKnodt:infer, r=oli-obk,lcnr\n\nAdd hir::GenericArg::Infer\n\nIn order to extend inference to consts, make an Infer type on hir::GenericArg.", "tree": {"sha": "49fd574977dbf99203919c48b27fb35438117d0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49fd574977dbf99203919c48b27fb35438117d0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd853c00e255559255885aadff9e93a1760c8728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd853c00e255559255885aadff9e93a1760c8728", "html_url": "https://github.com/rust-lang/rust/commit/fd853c00e255559255885aadff9e93a1760c8728", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd853c00e255559255885aadff9e93a1760c8728/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc9dd0dd293ab82945e35888ed6d7ab802761ef", "html_url": "https://github.com/rust-lang/rust/commit/3bc9dd0dd293ab82945e35888ed6d7ab802761ef"}, {"sha": "8759f00c73641d44b3ab7a2290e3c58168d3e30f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8759f00c73641d44b3ab7a2290e3c58168d3e30f", "html_url": "https://github.com/rust-lang/rust/commit/8759f00c73641d44b3ab7a2290e3c58168d3e30f"}], "stats": {"total": 632, "additions": 524, "deletions": 108}, "files": [{"sha": "8cab83707dcbc8d9f3948bedbcb5a585ade2e46c", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -336,14 +336,17 @@ pub enum ParamKindOrd {\n     // is active. Specifically, if it's only `min_const_generics`, it will still require\n     // ordering consts after types.\n     Const { unordered: bool },\n+    // `Infer` is not actually constructed directly from the AST, but is implicitly constructed\n+    // during HIR lowering, and `ParamKindOrd` will implicitly order inferred variables last.\n+    Infer,\n }\n \n impl Ord for ParamKindOrd {\n     fn cmp(&self, other: &Self) -> Ordering {\n         use ParamKindOrd::*;\n         let to_int = |v| match v {\n             Lifetime => 0,\n-            Type | Const { unordered: true } => 1,\n+            Infer | Type | Const { unordered: true } => 1,\n             // technically both consts should be ordered equally,\n             // but only one is ever encountered at a time, so this is\n             // fine.\n@@ -371,6 +374,7 @@ impl fmt::Display for ParamKindOrd {\n             ParamKindOrd::Lifetime => \"lifetime\".fmt(f),\n             ParamKindOrd::Type => \"type\".fmt(f),\n             ParamKindOrd::Const { .. } => \"const\".fmt(f),\n+            ParamKindOrd::Infer => \"infer\".fmt(f),\n         }\n     }\n }"}, {"sha": "3bd42ba6090dd560cec8d860759d166aaf637b97", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 52, "deletions": 41, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -51,7 +51,7 @@ use rustc_hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{DefId, DefIdMap, DefPathHash, LocalDefId, CRATE_DEF_ID};\n use rustc_hir::definitions::{DefKey, DefPathData, Definitions};\n use rustc_hir::intravisit;\n-use rustc_hir::{ConstArg, GenericArg, ParamName};\n+use rustc_hir::{ConstArg, GenericArg, InferKind, ParamName};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_session::lint::builtin::{BARE_TRAIT_OBJECTS, MISSING_ABI};\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n@@ -1243,48 +1243,59 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         match arg {\n             ast::GenericArg::Lifetime(lt) => GenericArg::Lifetime(self.lower_lifetime(&lt)),\n             ast::GenericArg::Type(ty) => {\n-                // We parse const arguments as path types as we cannot distinguish them during\n-                // parsing. We try to resolve that ambiguity by attempting resolution in both the\n-                // type and value namespaces. If we resolved the path in the value namespace, we\n-                // transform it into a generic const argument.\n-                if let TyKind::Path(ref qself, ref path) = ty.kind {\n-                    if let Some(partial_res) = self.resolver.get_partial_res(ty.id) {\n-                        let res = partial_res.base_res();\n-                        if !res.matches_ns(Namespace::TypeNS) {\n-                            debug!(\n-                                \"lower_generic_arg: Lowering type argument as const argument: {:?}\",\n-                                ty,\n-                            );\n-\n-                            // Construct a AnonConst where the expr is the \"ty\"'s path.\n-\n-                            let parent_def_id = self.current_hir_id_owner.0;\n-                            let node_id = self.resolver.next_node_id();\n-\n-                            // Add a definition for the in-band const def.\n-                            self.resolver.create_def(\n-                                parent_def_id,\n-                                node_id,\n-                                DefPathData::AnonConst,\n-                                ExpnId::root(),\n-                                ty.span,\n-                            );\n-\n-                            let path_expr = Expr {\n-                                id: ty.id,\n-                                kind: ExprKind::Path(qself.clone(), path.clone()),\n-                                span: ty.span,\n-                                attrs: AttrVec::new(),\n-                                tokens: None,\n-                            };\n-\n-                            let ct = self.with_new_scopes(|this| hir::AnonConst {\n-                                hir_id: this.lower_node_id(node_id),\n-                                body: this.lower_const_body(path_expr.span, Some(&path_expr)),\n-                            });\n-                            return GenericArg::Const(ConstArg { value: ct, span: ty.span });\n+                match ty.kind {\n+                    TyKind::Infer if self.sess.features_untracked().generic_arg_infer => {\n+                        let hir_id = self.lower_node_id(ty.id);\n+                        return GenericArg::Infer(hir::InferArg {\n+                            hir_id,\n+                            span: ty.span,\n+                            kind: InferKind::Type,\n+                        });\n+                    }\n+                    // We parse const arguments as path types as we cannot distinguish them during\n+                    // parsing. We try to resolve that ambiguity by attempting resolution in both the\n+                    // type and value namespaces. If we resolved the path in the value namespace, we\n+                    // transform it into a generic const argument.\n+                    TyKind::Path(ref qself, ref path) => {\n+                        if let Some(partial_res) = self.resolver.get_partial_res(ty.id) {\n+                            let res = partial_res.base_res();\n+                            if !res.matches_ns(Namespace::TypeNS) {\n+                                debug!(\n+                                    \"lower_generic_arg: Lowering type argument as const argument: {:?}\",\n+                                    ty,\n+                                );\n+\n+                                // Construct a AnonConst where the expr is the \"ty\"'s path.\n+\n+                                let parent_def_id = self.current_hir_id_owner.0;\n+                                let node_id = self.resolver.next_node_id();\n+\n+                                // Add a definition for the in-band const def.\n+                                self.resolver.create_def(\n+                                    parent_def_id,\n+                                    node_id,\n+                                    DefPathData::AnonConst,\n+                                    ExpnId::root(),\n+                                    ty.span,\n+                                );\n+\n+                                let path_expr = Expr {\n+                                    id: ty.id,\n+                                    kind: ExprKind::Path(qself.clone(), path.clone()),\n+                                    span: ty.span,\n+                                    attrs: AttrVec::new(),\n+                                    tokens: None,\n+                                };\n+\n+                                let ct = self.with_new_scopes(|this| hir::AnonConst {\n+                                    hir_id: this.lower_node_id(node_id),\n+                                    body: this.lower_const_body(path_expr.span, Some(&path_expr)),\n+                                });\n+                                return GenericArg::Const(ConstArg { value: ct, span: ty.span });\n+                            }\n                         }\n                     }\n+                    _ => {}\n                 }\n                 GenericArg::Type(self.lower_ty_direct(&ty, itctx))\n             }"}, {"sha": "803e4a2e59def959db56855bde3910bd70a22329", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -680,6 +680,9 @@ declare_features! (\n     /// Allows `cfg(target_abi = \"...\")`.\n     (active, cfg_target_abi, \"1.55.0\", Some(80970), None),\n \n+    /// Infer generic args for both consts and types.\n+    (active, generic_arg_infer, \"1.55.0\", Some(85077), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "db7fe6cb12ff130ce1f230ed29e04ef40f1142ae", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 57, "deletions": 13, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -254,11 +254,38 @@ pub struct ConstArg {\n     pub span: Span,\n }\n \n+#[derive(Copy, Clone, Encodable, Debug, HashStable_Generic)]\n+pub enum InferKind {\n+    Const,\n+    Type,\n+}\n+\n+impl InferKind {\n+    #[inline]\n+    pub fn is_type(self) -> bool {\n+        matches!(self, InferKind::Type)\n+    }\n+}\n+\n+#[derive(Encodable, Debug, HashStable_Generic)]\n+pub struct InferArg {\n+    pub hir_id: HirId,\n+    pub kind: InferKind,\n+    pub span: Span,\n+}\n+\n+impl InferArg {\n+    pub fn to_ty(&self) -> Ty<'_> {\n+        Ty { kind: TyKind::Infer, span: self.span, hir_id: self.hir_id }\n+    }\n+}\n+\n #[derive(Debug, HashStable_Generic)]\n pub enum GenericArg<'hir> {\n     Lifetime(Lifetime),\n     Type(Ty<'hir>),\n     Const(ConstArg),\n+    Infer(InferArg),\n }\n \n impl GenericArg<'_> {\n@@ -267,6 +294,7 @@ impl GenericArg<'_> {\n             GenericArg::Lifetime(l) => l.span,\n             GenericArg::Type(t) => t.span,\n             GenericArg::Const(c) => c.span,\n+            GenericArg::Infer(i) => i.span,\n         }\n     }\n \n@@ -275,6 +303,7 @@ impl GenericArg<'_> {\n             GenericArg::Lifetime(l) => l.hir_id,\n             GenericArg::Type(t) => t.hir_id,\n             GenericArg::Const(c) => c.value.hir_id,\n+            GenericArg::Infer(i) => i.hir_id,\n         }\n     }\n \n@@ -291,6 +320,7 @@ impl GenericArg<'_> {\n             GenericArg::Lifetime(_) => \"lifetime\",\n             GenericArg::Type(_) => \"type\",\n             GenericArg::Const(_) => \"constant\",\n+            GenericArg::Infer(_) => \"inferred\",\n         }\n     }\n \n@@ -301,6 +331,7 @@ impl GenericArg<'_> {\n             GenericArg::Const(_) => {\n                 ast::ParamKindOrd::Const { unordered: feats.unordered_const_ty_params() }\n             }\n+            GenericArg::Infer(_) => ast::ParamKindOrd::Infer,\n         }\n     }\n }\n@@ -342,27 +373,36 @@ impl GenericArgs<'_> {\n                         break;\n                     }\n                     GenericArg::Const(_) => {}\n+                    GenericArg::Infer(_) => {}\n                 }\n             }\n         }\n         panic!(\"GenericArgs::inputs: not a `Fn(T) -> U`\");\n     }\n \n-    pub fn own_counts(&self) -> GenericParamCount {\n-        // We could cache this as a property of `GenericParamCount`, but\n-        // the aim is to refactor this away entirely eventually and the\n-        // presence of this method will be a constant reminder.\n-        let mut own_counts: GenericParamCount = Default::default();\n+    #[inline]\n+    pub fn has_type_params(&self) -> bool {\n+        self.args.iter().any(|arg| matches!(arg, GenericArg::Type(_)))\n+    }\n \n-        for arg in self.args {\n-            match arg {\n-                GenericArg::Lifetime(_) => own_counts.lifetimes += 1,\n-                GenericArg::Type(_) => own_counts.types += 1,\n-                GenericArg::Const(_) => own_counts.consts += 1,\n-            };\n-        }\n+    #[inline]\n+    pub fn num_type_params(&self) -> usize {\n+        self.args.iter().filter(|arg| matches!(arg, GenericArg::Type(_))).count()\n+    }\n \n-        own_counts\n+    #[inline]\n+    pub fn num_lifetime_params(&self) -> usize {\n+        self.args.iter().filter(|arg| matches!(arg, GenericArg::Lifetime(_))).count()\n+    }\n+\n+    #[inline]\n+    pub fn has_lifetime_params(&self) -> bool {\n+        self.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n+    }\n+\n+    #[inline]\n+    pub fn num_generic_params(&self) -> usize {\n+        self.args.iter().filter(|arg| !matches!(arg, GenericArg::Lifetime(_))).count()\n     }\n \n     /// The span encompassing the text inside the surrounding brackets.\n@@ -485,6 +525,7 @@ pub struct GenericParamCount {\n     pub lifetimes: usize,\n     pub types: usize,\n     pub consts: usize,\n+    pub infer: usize,\n }\n \n /// Represents lifetimes and type parameters attached to a declaration\n@@ -3130,6 +3171,8 @@ pub enum Node<'hir> {\n     Visibility(&'hir Visibility<'hir>),\n \n     Crate(&'hir Mod<'hir>),\n+\n+    Infer(&'hir InferArg),\n }\n \n impl<'hir> Node<'hir> {\n@@ -3198,6 +3241,7 @@ impl<'hir> Node<'hir> {\n             | Node::Local(Local { hir_id, .. })\n             | Node::Lifetime(Lifetime { hir_id, .. })\n             | Node::Param(Param { hir_id, .. })\n+            | Node::Infer(InferArg { hir_id, .. })\n             | Node::GenericParam(GenericParam { hir_id, .. }) => Some(*hir_id),\n             Node::TraitRef(TraitRef { hir_ref_id, .. }) => Some(*hir_ref_id),\n             Node::PathSegment(PathSegment { hir_id, .. }) => *hir_id,"}, {"sha": "17835493cda62e2304b8808e1ee85dfa171fbf9a", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -436,11 +436,15 @@ pub trait Visitor<'v>: Sized {\n     fn visit_label(&mut self, label: &'v Label) {\n         walk_label(self, label)\n     }\n+    fn visit_infer(&mut self, inf: &'v InferArg) {\n+        walk_inf(self, inf);\n+    }\n     fn visit_generic_arg(&mut self, generic_arg: &'v GenericArg<'v>) {\n         match generic_arg {\n             GenericArg::Lifetime(lt) => self.visit_lifetime(lt),\n             GenericArg::Type(ty) => self.visit_ty(ty),\n             GenericArg::Const(ct) => self.visit_anon_const(&ct.value),\n+            GenericArg::Infer(inf) => self.visit_infer(inf),\n         }\n     }\n     fn visit_lifetime(&mut self, lifetime: &'v Lifetime) {\n@@ -747,6 +751,10 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty<'v>) {\n     }\n }\n \n+pub fn walk_inf<'v, V: Visitor<'v>>(visitor: &mut V, inf: &'v InferArg) {\n+    visitor.visit_id(inf.hir_id);\n+}\n+\n pub fn walk_qpath<'v, V: Visitor<'v>>(\n     visitor: &mut V,\n     qpath: &'v QPath<'v>,"}, {"sha": "90ceb1d5c91ec001267ab5045b2687b52bffe2c0", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -103,6 +103,7 @@ impl<'a> State<'a> {\n             Node::TraitRef(a) => self.print_trait_ref(&a),\n             Node::Binding(a) | Node::Pat(a) => self.print_pat(&a),\n             Node::Arm(a) => self.print_arm(&a),\n+            Node::Infer(_) => self.s.word(\"_\"),\n             Node::Block(a) => {\n                 // Containing cbox, will be closed by print-block at `}`.\n                 self.cbox(INDENT_UNIT);\n@@ -437,14 +438,14 @@ impl<'a> State<'a> {\n                 self.print_anon_const(e);\n                 self.s.word(\")\");\n             }\n-            hir::TyKind::Infer => {\n-                self.s.word(\"_\");\n-            }\n             hir::TyKind::Err => {\n                 self.popen();\n                 self.s.word(\"/*ERROR*/\");\n                 self.pclose();\n             }\n+            hir::TyKind::Infer => {\n+                self.s.word(\"_\");\n+            }\n         }\n         self.end()\n     }\n@@ -1851,6 +1852,7 @@ impl<'a> State<'a> {\n                         GenericArg::Lifetime(_) => {}\n                         GenericArg::Type(ty) => s.print_type(ty),\n                         GenericArg::Const(ct) => s.print_anon_const(&ct.value),\n+                        GenericArg::Infer(_inf) => s.word(\"_\"),\n                     },\n                 );\n             }"}, {"sha": "052efa851f7cf5477a17fd8cb8c6f8afb28f0747", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -244,6 +244,11 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         hir_visit::walk_ty(self, t);\n     }\n \n+    fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n+        lint_callback!(self, check_infer, inf);\n+        hir_visit::walk_inf(self, inf);\n+    }\n+\n     fn visit_name(&mut self, sp: Span, name: Symbol) {\n         lint_callback!(self, check_name, sp, name);\n     }"}, {"sha": "2d047ac7a0814f6e01dcf303d934ccb39fd62ad4", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -33,6 +33,7 @@ macro_rules! late_lint_methods {\n             fn check_expr(a: &$hir hir::Expr<$hir>);\n             fn check_expr_post(a: &$hir hir::Expr<$hir>);\n             fn check_ty(a: &$hir hir::Ty<$hir>);\n+            fn check_infer(a: &$hir hir::InferArg);\n             fn check_generic_arg(a: &$hir hir::GenericArg<$hir>);\n             fn check_generic_param(a: &$hir hir::GenericParam<$hir>);\n             fn check_generics(a: &$hir hir::Generics<$hir>);"}, {"sha": "5c166c74004a3a7ff15ac57a0d254f8b8d055b4e", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -336,6 +336,14 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n+    fn visit_infer(&mut self, inf: &'hir InferArg) {\n+        self.insert(inf.span, inf.hir_id, Node::Infer(inf));\n+\n+        self.with_parent(inf.hir_id, |this| {\n+            intravisit::walk_inf(this, inf);\n+        });\n+    }\n+\n     fn visit_trait_ref(&mut self, tr: &'hir TraitRef<'hir>) {\n         self.insert(tr.path.span, tr.hir_ref_id, Node::TraitRef(tr));\n "}, {"sha": "b1606ef8f636b14319f24c51230a2d5fe7d6a739", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -276,6 +276,7 @@ impl<'hir> Map<'hir> {\n             Node::Stmt(_)\n             | Node::PathSegment(_)\n             | Node::Ty(_)\n+            | Node::Infer(_)\n             | Node::TraitRef(_)\n             | Node::Pat(_)\n             | Node::Binding(_)\n@@ -871,6 +872,7 @@ impl<'hir> Map<'hir> {\n                 node: VisibilityKind::Restricted { ref path, .. },\n                 ..\n             }) => path.span,\n+            Node::Infer(i) => i.span,\n             Node::Visibility(v) => bug!(\"unexpected Visibility {:?}\", v),\n             Node::Local(local) => local.span,\n             Node::MacroDef(macro_def) => macro_def.span,\n@@ -1118,6 +1120,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {\n         Some(Node::Param(_)) => node_str(\"param\"),\n         Some(Node::Arm(_)) => node_str(\"arm\"),\n         Some(Node::Block(_)) => node_str(\"block\"),\n+        Some(Node::Infer(_)) => node_str(\"infer\"),\n         Some(Node::Local(_)) => node_str(\"local\"),\n         Some(Node::Ctor(..)) => format!(\"ctor {}{}\", path_str(), id_str),\n         Some(Node::Lifetime(_)) => node_str(\"lifetime\"),"}, {"sha": "cd91ecdf2bad3cbce953fb8b975b9283afff481b", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -1188,6 +1188,14 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n         self.maybe_typeck_results = old_maybe_typeck_results;\n     }\n \n+    fn visit_generic_arg(&mut self, generic_arg: &'tcx hir::GenericArg<'tcx>) {\n+        match generic_arg {\n+            hir::GenericArg::Type(t) => self.visit_ty(t),\n+            hir::GenericArg::Infer(inf) => self.visit_infer(inf),\n+            hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}\n+        }\n+    }\n+\n     fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {\n         self.span = hir_ty.span;\n         if let Some(typeck_results) = self.maybe_typeck_results {\n@@ -1207,6 +1215,30 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n         intravisit::walk_ty(self, hir_ty);\n     }\n \n+    fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n+        self.span = inf.span;\n+        if let Some(typeck_results) = self.maybe_typeck_results {\n+            if let Some(ty) = typeck_results.node_type_opt(inf.hir_id) {\n+                if self.visit(ty).is_break() {\n+                    return;\n+                }\n+            }\n+        } else {\n+            let local_id = self.tcx.hir().local_def_id(inf.hir_id);\n+            if let Some(did) = self.tcx.opt_const_param_of(local_id) {\n+                if self.visit_def_id(did, \"inferred\", &\"\").is_break() {\n+                    return;\n+                }\n+            }\n+\n+            // FIXME see above note for same issue.\n+            if self.visit(rustc_typeck::hir_ty_to_ty(self.tcx, &inf.to_ty())).is_break() {\n+                return;\n+            }\n+        }\n+        intravisit::walk_inf(self, inf);\n+    }\n+\n     fn visit_trait_ref(&mut self, trait_ref: &'tcx hir::TraitRef<'tcx>) {\n         self.span = trait_ref.path.span;\n         if self.maybe_typeck_results.is_none() {\n@@ -1443,6 +1475,14 @@ impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a\n         NestedVisitorMap::None\n     }\n \n+    fn visit_generic_arg(&mut self, generic_arg: &'v hir::GenericArg<'v>) {\n+        match generic_arg {\n+            hir::GenericArg::Type(t) => self.visit_ty(t),\n+            hir::GenericArg::Infer(inf) => self.visit_ty(&inf.to_ty()),\n+            hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}\n+        }\n+    }\n+\n     fn visit_ty(&mut self, ty: &hir::Ty<'_>) {\n         if let hir::TyKind::Path(hir::QPath::Resolved(_, ref path)) = ty.kind {\n             if self.inner.path_is_private_type(path) {"}, {"sha": "e18dae0b8eebb0284abf256070a36ce42577a05b", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -2550,6 +2550,12 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 GenericArg::Const(ct) => {\n                     self.visit_anon_const(&ct.value);\n                 }\n+                GenericArg::Infer(inf) => {\n+                    self.visit_id(inf.hir_id);\n+                    if inf.kind.is_type() {\n+                        i += 1;\n+                    }\n+                }\n             }\n         }\n "}, {"sha": "536ebdef426b899b312995cf959178f16bd9d8c4", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -622,6 +622,7 @@ symbols! {\n         generator,\n         generator_state,\n         generators,\n+        generic_arg_infer,\n         generic_associated_types,\n         generic_param_attrs,\n         get_context,"}, {"sha": "eb6265dec89c08bd4ba8147908db7fab87f4b349", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -39,8 +39,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         );\n \n         if let GenericParamDefKind::Const { .. } = param.kind {\n-            if let GenericArg::Type(hir::Ty { kind: hir::TyKind::Infer, .. }) = arg {\n+            if matches!(arg, GenericArg::Type(hir::Ty { kind: hir::TyKind::Infer, .. })) {\n                 err.help(\"const arguments cannot yet be inferred with `_`\");\n+                if sess.is_nightly_build() {\n+                    err.help(\n+                        \"add `#![feature(generic_arg_infer)]` to the crate attributes to enable\",\n+                    );\n+                }\n             }\n         }\n \n@@ -249,14 +254,22 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     (Some(&arg), Some(&param)) => {\n                         match (arg, &param.kind, arg_count.explicit_late_bound) {\n                             (GenericArg::Lifetime(_), GenericParamDefKind::Lifetime, _)\n-                            | (GenericArg::Type(_), GenericParamDefKind::Type { .. }, _)\n-                            | (GenericArg::Const(_), GenericParamDefKind::Const { .. }, _) => {\n+                            | (\n+                                GenericArg::Type(_) | GenericArg::Infer(_),\n+                                GenericParamDefKind::Type { .. },\n+                                _,\n+                            )\n+                            | (\n+                                GenericArg::Const(_) | GenericArg::Infer(_),\n+                                GenericParamDefKind::Const { .. },\n+                                _,\n+                            ) => {\n                                 substs.push(ctx.provided_kind(param, arg));\n                                 args.next();\n                                 params.next();\n                             }\n                             (\n-                                GenericArg::Type(_) | GenericArg::Const(_),\n+                                GenericArg::Infer(_) | GenericArg::Type(_) | GenericArg::Const(_),\n                                 GenericParamDefKind::Lifetime,\n                                 _,\n                             ) => {\n@@ -325,6 +338,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                                     .features()\n                                                     .unordered_const_ty_params(),\n                                             },\n+                                            GenericArg::Infer(_) => ParamKindOrd::Infer,\n                                         }),\n                                         Some(&format!(\n                                             \"reorder the arguments: {}: `<{}>`\",\n@@ -446,8 +460,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let default_counts = gen_params.own_defaults();\n         let param_counts = gen_params.own_counts();\n         let named_type_param_count = param_counts.types - has_self as usize;\n-        let arg_counts = gen_args.own_counts();\n-        let infer_lifetimes = gen_pos != GenericArgPosition::Type && arg_counts.lifetimes == 0;\n+        let infer_lifetimes =\n+            gen_pos != GenericArgPosition::Type && !gen_args.has_lifetime_params();\n \n         if gen_pos != GenericArgPosition::Type && !gen_args.bindings.is_empty() {\n             Self::prohibit_assoc_ty_binding(tcx, gen_args.bindings[0].span);\n@@ -505,7 +519,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let min_expected_lifetime_args = if infer_lifetimes { 0 } else { param_counts.lifetimes };\n         let max_expected_lifetime_args = param_counts.lifetimes;\n-        let num_provided_lifetime_args = arg_counts.lifetimes;\n+        let num_provided_lifetime_args = gen_args.num_lifetime_params();\n \n         let lifetimes_correct = check_lifetime_args(\n             min_expected_lifetime_args,\n@@ -576,14 +590,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     - default_counts.consts\n             };\n             debug!(\"expected_min: {:?}\", expected_min);\n-            debug!(\"arg_counts.lifetimes: {:?}\", arg_counts.lifetimes);\n+            debug!(\"arg_counts.lifetimes: {:?}\", gen_args.num_lifetime_params());\n \n             check_types_and_consts(\n                 expected_min,\n                 param_counts.consts + named_type_param_count,\n-                arg_counts.consts + arg_counts.types,\n+                gen_args.num_generic_params(),\n                 param_counts.lifetimes + has_self as usize,\n-                arg_counts.lifetimes,\n+                gen_args.num_lifetime_params(),\n             )\n         };\n \n@@ -622,7 +636,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 .args\n                 .iter()\n                 .filter_map(|arg| match arg {\n-                    GenericArg::Type(_) | GenericArg::Const(_) => Some(arg.span()),\n+                    GenericArg::Infer(_) | GenericArg::Type(_) | GenericArg::Const(_) => {\n+                        Some(arg.span())\n+                    }\n                     _ => None,\n                 })\n                 .collect::<Vec<_>>();\n@@ -659,8 +675,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         position: GenericArgPosition,\n     ) -> ExplicitLateBound {\n         let param_counts = def.own_counts();\n-        let arg_counts = args.own_counts();\n-        let infer_lifetimes = position != GenericArgPosition::Type && arg_counts.lifetimes == 0;\n+        let infer_lifetimes = position != GenericArgPosition::Type && !args.has_lifetime_params();\n \n         if infer_lifetimes {\n             return ExplicitLateBound::No;\n@@ -673,7 +688,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let span = args.args[0].span();\n \n             if position == GenericArgPosition::Value\n-                && arg_counts.lifetimes != param_counts.lifetimes\n+                && args.num_lifetime_params() != param_counts.lifetimes\n             {\n                 let mut err = tcx.sess.struct_span_err(span, msg);\n                 err.span_note(span_late, note);"}, {"sha": "9871b14754e6223b96d8f96926ec970c4f326a97", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -461,6 +461,43 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         )\n                         .into()\n                     }\n+                    (&GenericParamDefKind::Const { has_default }, hir::GenericArg::Infer(inf)) => {\n+                        if has_default {\n+                            tcx.const_param_default(param.def_id).into()\n+                        } else if self.astconv.allow_ty_infer() {\n+                            // FIXME(const_generics): Actually infer parameter here?\n+                            todo!()\n+                        } else {\n+                            self.inferred_params.push(inf.span);\n+                            tcx.ty_error().into()\n+                        }\n+                    }\n+                    (\n+                        &GenericParamDefKind::Type { has_default, .. },\n+                        hir::GenericArg::Infer(inf),\n+                    ) => {\n+                        if has_default {\n+                            tcx.check_optional_stability(\n+                                param.def_id,\n+                                Some(arg.id()),\n+                                arg.span(),\n+                                None,\n+                                |_, _| {\n+                                    // Default generic parameters may not be marked\n+                                    // with stability attributes, i.e. when the\n+                                    // default parameter was defined at the same time\n+                                    // as the rest of the type. As such, we ignore missing\n+                                    // stability attributes.\n+                                },\n+                            );\n+                        }\n+                        if self.astconv.allow_ty_infer() {\n+                            self.astconv.ast_ty_to_ty(&inf.to_ty()).into()\n+                        } else {\n+                            self.inferred_params.push(inf.span);\n+                            tcx.ty_error().into()\n+                        }\n+                    }\n                     _ => unreachable!(),\n                 }\n             }\n@@ -1930,6 +1967,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         has_err = true;\n                         (ct.span, \"const\")\n                     }\n+                    hir::GenericArg::Infer(inf) => {\n+                        if err_for_ty {\n+                            continue;\n+                        }\n+                        has_err = true;\n+                        err_for_ty = true;\n+                        (inf.span, \"generic\")\n+                    }\n                 };\n                 let mut err = struct_span_err!(\n                     self.tcx().sess,"}, {"sha": "f5776ae7cf66a47a1ec812bf5fbb9d6ebb024575", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -581,6 +581,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    pub fn node_ty_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {\n+        match self.typeck_results.borrow().node_types().get(id) {\n+            Some(&t) => Some(t),\n+            None if self.is_tainted_by_errors() => Some(self.tcx.ty_error()),\n+            None => None,\n+        }\n+    }\n+\n     /// Registers an obligation for checking later, during regionck, that `arg` is well-formed.\n     pub fn register_wf_obligation(\n         &self,\n@@ -1471,6 +1479,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     (GenericParamDefKind::Const { .. }, GenericArg::Const(ct)) => {\n                         self.fcx.const_arg_to_const(&ct.value, param.def_id).into()\n                     }\n+                    (GenericParamDefKind::Type { .. }, GenericArg::Infer(inf)) => {\n+                        self.fcx.ty_infer(Some(param), inf.span).into()\n+                    }\n+                    (GenericParamDefKind::Const { .. }, GenericArg::Infer(inf)) => {\n+                        let tcx = self.fcx.tcx();\n+                        self.fcx.ct_infer(tcx.type_of(param.def_id), Some(param), inf.span).into()\n+                    }\n                     _ => unreachable!(),\n                 }\n             }"}, {"sha": "3aceaba882d6cc4cc804b3215d7cd5c4bfba60e1", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -366,6 +366,13 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                     (GenericParamDefKind::Const { .. }, GenericArg::Const(ct)) => {\n                         self.cfcx.const_arg_to_const(&ct.value, param.def_id).into()\n                     }\n+                    (GenericParamDefKind::Type { .. }, GenericArg::Infer(inf)) => {\n+                        self.cfcx.ty_infer(Some(param), inf.span).into()\n+                    }\n+                    (GenericParamDefKind::Const { .. }, GenericArg::Infer(inf)) => {\n+                        let tcx = self.cfcx.tcx();\n+                        self.cfcx.ct_infer(tcx.type_of(param.def_id), Some(param), inf.span).into()\n+                    }\n                     _ => unreachable!(),\n                 }\n             }"}, {"sha": "e6eac16667d4ed4a4e2014e0ea222393545ad308", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -331,6 +331,15 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n         let ty = self.resolve(ty, &hir_ty.span);\n         self.write_ty_to_typeck_results(hir_ty.hir_id, ty);\n     }\n+\n+    fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n+        intravisit::walk_inf(self, inf);\n+        // Ignore cases where the inference is a const.\n+        if let Some(ty) = self.fcx.node_ty_opt(inf.hir_id) {\n+            let ty = self.resolve(ty, &inf.span);\n+            self.write_ty_to_typeck_results(inf.hir_id, ty);\n+        }\n+    }\n }\n \n impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {"}, {"sha": "997fdcefe037ac6587f6fecfb21bc7ae2ac394e2", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -129,6 +129,16 @@ impl<'v> Visitor<'v> for PlaceholderHirTyCollector {\n         }\n         intravisit::walk_ty(self, t)\n     }\n+    fn visit_generic_arg(&mut self, generic_arg: &'v hir::GenericArg<'v>) {\n+        match generic_arg {\n+            hir::GenericArg::Infer(inf) => {\n+                self.0.push(inf.span);\n+                intravisit::walk_inf(self, inf);\n+            }\n+            hir::GenericArg::Type(t) => self.visit_ty(t),\n+            _ => {}\n+        }\n+    }\n }\n \n struct CollectItemTypesVisitor<'tcx> {\n@@ -1714,13 +1724,11 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n }\n \n fn are_suggestable_generic_args(generic_args: &[hir::GenericArg<'_>]) -> bool {\n-    generic_args\n-        .iter()\n-        .filter_map(|arg| match arg {\n-            hir::GenericArg::Type(ty) => Some(ty),\n-            _ => None,\n-        })\n-        .any(is_suggestable_infer_ty)\n+    generic_args.iter().any(|arg| match arg {\n+        hir::GenericArg::Type(ty) => is_suggestable_infer_ty(ty),\n+        hir::GenericArg::Infer(_) => true,\n+        _ => false,\n+    })\n }\n \n /// Whether `ty` is a type with `_` placeholders that can be inferred. Used in diagnostics only to"}, {"sha": "96b3fa9aa0143e0011e6e18d2a5b7872cda398fb", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -20,6 +20,9 @@ use super::{bad_placeholder_type, is_suggestable_infer_ty};\n ///\n /// This should be called using the query `tcx.opt_const_param_of`.\n pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<DefId> {\n+    // FIXME(generic_arg_infer): allow for returning DefIds of inference of\n+    // GenericArg::Infer below. This may require a change where GenericArg::Infer has some flag\n+    // for const or type.\n     use hir::*;\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n "}, {"sha": "27c2f6cc87e178cec69fcac04d0c6560643d116b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -1768,6 +1768,7 @@ impl Clean<GenericArgs> for hir::GenericArgs<'_> {\n                         hir::GenericArg::Lifetime(_) => GenericArg::Lifetime(Lifetime::elided()),\n                         hir::GenericArg::Type(ty) => GenericArg::Type(ty.clean(cx)),\n                         hir::GenericArg::Const(ct) => GenericArg::Const(ct.clean(cx)),\n+                        hir::GenericArg::Infer(_inf) => GenericArg::Infer,\n                     })\n                     .collect(),\n                 bindings: self.bindings.clean(cx),"}, {"sha": "2460fa127f116324dfaa239fec29e2d2e636b278", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -2007,6 +2007,7 @@ crate enum GenericArg {\n     Lifetime(Lifetime),\n     Type(Type),\n     Const(Constant),\n+    Infer,\n }\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]"}, {"sha": "cd74006530b44d69921178cf8468d159b38e9dc3", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -1424,6 +1424,7 @@ impl clean::GenericArg {\n             clean::GenericArg::Lifetime(lt) => fmt::Display::fmt(&lt.print(), f),\n             clean::GenericArg::Type(ty) => fmt::Display::fmt(&ty.print(cx), f),\n             clean::GenericArg::Const(ct) => fmt::Display::fmt(&ct.print(cx.tcx()), f),\n+            clean::GenericArg::Infer => fmt::Display::fmt(\"_\", f),\n         })\n     }\n }"}, {"sha": "f3eeea6c6ae0be5b6c4aed560d6bb22a258cbe1b", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -140,6 +140,7 @@ impl FromWithTcx<clean::GenericArg> for GenericArg {\n             Lifetime(l) => GenericArg::Lifetime(l.0.to_string()),\n             Type(t) => GenericArg::Type(t.into_tcx(tcx)),\n             Const(c) => GenericArg::Const(c.into_tcx(tcx)),\n+            Infer => GenericArg::Infer,\n         }\n     }\n }"}, {"sha": "38ba87322c2385f6d86c29f9b3c84e3b1c96de33", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -127,6 +127,7 @@ pub enum GenericArg {\n     Lifetime(String),\n     Type(Type),\n     Const(Constant),\n+    Infer,\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]"}, {"sha": "08f6454fa2dfefcac006150720974f861c126a03", "filename": "src/test/ui/const-generics/issues/issue-62878.full.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -4,13 +4,13 @@ error[E0770]: the type of const parameters must not depend on other generic para\n LL | fn foo<const N: usize, const A: [u8; N]>() {}\n    |                                      ^ the type must not depend on the parameter `N`\n \n-error[E0747]: type provided when a constant was expected\n-  --> $DIR/issue-62878.rs:10:11\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-62878.rs:10:14\n    |\n LL |     foo::<_, {[1]}>();\n-   |           ^\n+   |              ^^^^^\n    |\n-   = help: const arguments cannot yet be inferred with `_`\n+   = note: this may fail depending on what value the parameter takes\n \n error[E0308]: mismatched types\n   --> $DIR/issue-62878.rs:10:15\n@@ -20,5 +20,5 @@ LL |     foo::<_, {[1]}>();\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0308, E0747, E0770.\n+Some errors have detailed explanations: E0308, E0770.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "fb6257696b96d5a66abd2ff05bdaedf9725ac01b", "filename": "src/test/ui/const-generics/issues/issue-62878.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -1,5 +1,5 @@\n // revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, feature(const_generics, generic_arg_infer))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n fn foo<const N: usize, const A: [u8; N]>() {}\n@@ -8,6 +8,6 @@ fn foo<const N: usize, const A: [u8; N]>() {}\n \n fn main() {\n     foo::<_, {[1]}>();\n-    //[full]~^ ERROR type provided when a constant was expected\n-    //[full]~| ERROR mismatched types\n+    //[full]~^ ERROR mismatched types\n+    //[full]~| ERROR constant expression\n }"}, {"sha": "57d6941587a435084415f852ebf43f6f066342d0", "filename": "src/test/ui/const-generics/min_const_generics/inferred_const.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finferred_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finferred_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finferred_const.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -1,8 +1,9 @@\n-#![feature(min_const_generics)]\n-fn foo<const N: usize, const K: usize>(data: [u32; N]) -> [u32; K] {\n+#![feature(generic_arg_infer)]\n+// run-pass\n+\n+fn foo<const N: usize, const K: usize>(_data: [u32; N]) -> [u32; K] {\n     [0; K]\n }\n fn main() {\n-    let a = foo::<_, 2>([0, 1, 2]);\n-               //~^ ERROR type provided when a constant was expected\n+    let _a = foo::<_, 2>([0, 1, 2]);\n }"}, {"sha": "c17f02d58f325d57d073a7167baac194cca4de9d", "filename": "src/test/ui/feature-gates/feature-gate-generic_arg_infer.normal.stderr", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.normal.stderr?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -1,10 +1,11 @@\n error[E0747]: type provided when a constant was expected\n-  --> $DIR/inferred_const.rs:6:19\n+  --> $DIR/feature-gate-generic_arg_infer.rs:11:20\n    |\n-LL |     let a = foo::<_, 2>([0, 1, 2]);\n-   |                   ^\n+LL |     let _x = foo::<_>([1,2]);\n+   |                    ^\n    |\n    = help: const arguments cannot yet be inferred with `_`\n+   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n \n error: aborting due to previous error\n ", "previous_filename": "src/test/ui/const-generics/min_const_generics/inferred_const.stderr"}, {"sha": "4729773b12ef04d9c8f9186313209b881f9aec1c", "filename": "src/test/ui/feature-gates/feature-gate-generic_arg_infer.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -0,0 +1,13 @@\n+// [feature] run-pass\n+// revisions: normal feature\n+\n+#![cfg_attr(feature, feature(generic_arg_infer))]\n+\n+fn foo<const N: usize>(_: [u8; N]) -> [u8; N] {\n+  [0; N]\n+}\n+\n+fn main() {\n+    let _x = foo::<_>([1,2]);\n+    //[normal]~^ ERROR: type provided when a constant was expected\n+}"}, {"sha": "1b67ccd6c433786a7239ceee8a939b2976cf9dec", "filename": "src/test/ui/inference/infer-arg-test.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Finference%2Finfer-arg-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Finference%2Finfer-arg-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finfer-arg-test.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -0,0 +1,24 @@\n+#![feature(generic_arg_infer)]\n+\n+struct All<'a, T, const N: usize> {\n+  v: &'a T,\n+}\n+\n+struct BadInfer<_>;\n+//~^ ERROR expected identifier\n+//~| ERROR parameter `_` is never used\n+\n+fn all_fn<'a, T, const N: usize>() {}\n+\n+fn bad_infer_fn<_>() {}\n+//~^ ERROR expected identifier\n+\n+\n+fn main() {\n+  let a: All<_, _, _>;\n+  all_fn();\n+  let v: [u8; _];\n+  //~^ ERROR in expressions\n+  let v: [u8; 10] = [0; _];\n+  //~^ ERROR in expressions\n+}"}, {"sha": "30e171eac21214b8c421ce8e8bbb5c002d578700", "filename": "src/test/ui/inference/infer-arg-test.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Finference%2Finfer-arg-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Finference%2Finfer-arg-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finfer-arg-test.stderr?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -0,0 +1,36 @@\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/infer-arg-test.rs:7:17\n+   |\n+LL | struct BadInfer<_>;\n+   |                 ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/infer-arg-test.rs:13:17\n+   |\n+LL | fn bad_infer_fn<_>() {}\n+   |                 ^ expected identifier, found reserved identifier\n+\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/infer-arg-test.rs:20:15\n+   |\n+LL |   let v: [u8; _];\n+   |               ^ `_` not allowed here\n+\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/infer-arg-test.rs:22:25\n+   |\n+LL |   let v: [u8; 10] = [0; _];\n+   |                         ^ `_` not allowed here\n+\n+error[E0392]: parameter `_` is never used\n+  --> $DIR/infer-arg-test.rs:7:17\n+   |\n+LL | struct BadInfer<_>;\n+   |                 ^ unused parameter\n+   |\n+   = help: consider removing `_`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `_` to be a const parameter, use `const _: usize` instead\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "8a1156b8fc8ad132846417a474b6e650591491fb", "filename": "src/test/ui/object-lifetime-default-inferred.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Fobject-lifetime-default-inferred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Fobject-lifetime-default-inferred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime-default-inferred.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -0,0 +1,35 @@\n+// run-pass\n+// Test that even with prior inferred parameters, object lifetimes of objects after are still\n+// valid.\n+\n+// pretty-expanded FIXME #23616\n+\n+#![allow(dead_code)]\n+#![feature(generic_arg_infer)]\n+\n+trait Test {\n+    fn foo(&self) { }\n+}\n+\n+struct Foo;\n+impl Test for Foo {}\n+\n+struct SomeStruct<'a> {\n+    t: &'a dyn Test,\n+    u: &'a (dyn Test+'a),\n+}\n+\n+fn a<'a, const N: usize>(_: [u8; N], t: &'a (dyn Test+'a), mut ss: SomeStruct<'a>) {\n+    ss.t = t;\n+}\n+\n+fn b<'a, T>(_: T, t: &'a (dyn Test+'a), mut ss: SomeStruct<'a>) {\n+    ss.u = t;\n+}\n+\n+fn main() {\n+    // Inside a function body, we can just infer both\n+    // lifetimes, to allow &'tmp (Display+'static).\n+    a::<_>([], &Foo as &dyn Test, SomeStruct{t:&Foo,u:&Foo});\n+    b::<_>(0u8, &Foo as &dyn Test, SomeStruct{t:&Foo,u:&Foo});\n+}"}, {"sha": "02af61e8539677c7530f13b08745ffe359b01db7", "filename": "src/test/ui/parser/issue-14303-fncall.full.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.full.stderr?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -1,5 +1,5 @@\n error[E0747]: type provided when a lifetime was expected\n-  --> $DIR/issue-14303-fncall.rs:13:26\n+  --> $DIR/issue-14303-fncall.rs:16:26\n    |\n LL |         .collect::<Vec<S<_, 'a>>>();\n    |                          ^", "previous_filename": "src/test/ui/parser/issue-14303-fncall.stderr"}, {"sha": "9f3359b3f68a9c5a87d65de568d5a34abd9a804e", "filename": "src/test/ui/parser/issue-14303-fncall.generic_arg.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.generic_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.generic_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.generic_arg.stderr?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -0,0 +1,9 @@\n+error[E0747]: inferred provided when a lifetime was expected\n+  --> $DIR/issue-14303-fncall.rs:16:26\n+   |\n+LL |         .collect::<Vec<S<_, 'a>>>();\n+   |                          ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "976a79a59b1f88adca4256d47549d95d07e642d7", "filename": "src/test/ui/parser/issue-14303-fncall.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -1,6 +1,9 @@\n-// can't run rustfix because it doesn't handle multipart suggestions correctly\n+// revisions: full generic_arg\n // compile-flags: -Zborrowck=mir\n+// can't run rustfix because it doesn't handle multipart suggestions correctly\n // we need the above to avoid ast borrowck failure in recovered code\n+#![cfg_attr(generic_arg, feature(generic_arg_infer))]\n+\n \n struct S<'a, T> {\n     a: &'a T,\n@@ -11,7 +14,8 @@ fn foo<'a, 'b>(start: &'a usize, end: &'a usize) {\n     let _x = (*start..*end)\n         .map(|x| S { a: start, b: end })\n         .collect::<Vec<S<_, 'a>>>();\n-        //~^ ERROR type provided when a lifetime was expected\n+        //[generic_arg]~^ ERROR inferred provided when a lifetime was expected\n+        //[full]~^^ ERROR type provided when a lifetime was expected\n }\n \n fn main() {}"}, {"sha": "278d049224401e336ae581a7371a09fc1df014b2", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.full.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.full.stderr?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed for `Option<_>`\n-  --> $DIR/issue-42234-unknown-receiver-type.rs:7:7\n+  --> $DIR/issue-42234-unknown-receiver-type.rs:10:7\n    |\n LL |     let x: Option<_> = None;\n    |         - consider giving `x` the explicit type `Option<_>`, where the type parameter `T` is specified\n@@ -9,7 +9,7 @@ LL |     x.unwrap().method_that_could_exist_on_some_type();\n    = note: type must be known at this point\n \n error[E0282]: type annotations needed\n-  --> $DIR/issue-42234-unknown-receiver-type.rs:13:10\n+  --> $DIR/issue-42234-unknown-receiver-type.rs:16:10\n    |\n LL |         .sum::<_>()\n    |          ^^^ cannot infer type", "previous_filename": "src/test/ui/span/issue-42234-unknown-receiver-type.stderr"}, {"sha": "8d4ed4aea6a6c565a1b9c69774e2dc8b16424bc8", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.generic_arg.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.generic_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.generic_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.generic_arg.stderr?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -0,0 +1,21 @@\n+error[E0282]: type annotations needed for `Option<_>`\n+  --> $DIR/issue-42234-unknown-receiver-type.rs:10:7\n+   |\n+LL |     let x: Option<_> = None;\n+   |         - consider giving `x` the explicit type `Option<_>`, where the type parameter `T` is specified\n+LL |     x.unwrap().method_that_could_exist_on_some_type();\n+   |       ^^^^^^ cannot infer type for type parameter `T`\n+   |\n+   = note: type must be known at this point\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-42234-unknown-receiver-type.rs:16:16\n+   |\n+LL |         .sum::<_>()\n+   |                ^ cannot infer type for type parameter `S` declared on the associated function `sum`\n+   |\n+   = note: type must be known at this point\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "15b00de44b93395b26a18c090be28268201d0d2a", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -1,3 +1,6 @@\n+// revisions: full generic_arg\n+#![cfg_attr(generic_arg, feature(generic_arg_infer))]\n+\n // When the type of a method call's receiver is unknown, the span should point\n // to the receiver (and not the entire call, as was previously the case before\n // the fix of which this tests)."}, {"sha": "ad4898d1ccbb5575676414ac158934ed12f7c201", "filename": "src/tools/clippy/clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -5,7 +5,7 @@ use std::collections::BTreeMap;\n \n use rustc_errors::DiagnosticBuilder;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, walk_inf, NestedVisitorMap, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, GenericArg, Item, ItemKind, QPath, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n@@ -295,6 +295,14 @@ impl<'a, 'tcx> Visitor<'tcx> for ImplicitHasherTypeVisitor<'a, 'tcx> {\n         walk_ty(self, t);\n     }\n \n+    fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n+        if let Some(target) = ImplicitHasherType::new(self.cx, &inf.to_ty()) {\n+            self.found.push(target);\n+        }\n+\n+        walk_inf(self, inf);\n+    }\n+\n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }"}, {"sha": "b438d680d2cbded0f1c99b8c2ed210da86147722", "filename": "src/tools/clippy/clippy_lints/src/types/type_complexity.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{walk_ty, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_ty, walk_inf, NestedVisitorMap, Visitor};\n use rustc_hir::{GenericParamKind, TyKind};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n@@ -39,6 +39,11 @@ struct TypeComplexityVisitor {\n impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n     type Map = Map<'tcx>;\n \n+    fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n+      self.score += 1;\n+      walk_inf(self, inf);\n+    }\n+\n     fn visit_ty(&mut self, ty: &'tcx hir::Ty<'_>) {\n         let (add_score, sub_nest) = match ty.kind {\n             // _, &x and *x have only small overhead; don't mess with nesting level"}, {"sha": "d5ee717accd26461c728990ce8a69465985580fc", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -8,8 +8,9 @@ use rustc_hir::{\n     self as hir,\n     def::{CtorOf, DefKind, Res},\n     def_id::LocalDefId,\n-    intravisit::{walk_ty, NestedVisitorMap, Visitor},\n-    Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Path, QPath, TyKind,\n+    intravisit::{walk_ty, walk_inf, NestedVisitorMap, Visitor},\n+    Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Path,\n+    QPath, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n@@ -263,6 +264,11 @@ struct SkipTyCollector {\n impl<'tcx> Visitor<'tcx> for SkipTyCollector {\n     type Map = Map<'tcx>;\n \n+    fn visit_infer(&mut self, inf: &hir::InferArg) {\n+      self.types_to_skip.push(inf.hir_id);\n+\n+      walk_inf(self, inf)\n+    }\n     fn visit_ty(&mut self, hir_ty: &hir::Ty<'_>) {\n         self.types_to_skip.push(hir_ty.hir_id);\n "}, {"sha": "6ea360a88a63e3c5169b14ac41571190fc61b0c1", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -288,6 +288,8 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (GenericArg::Const(l), GenericArg::Const(r)) => self.eq_body(l.value.body, r.value.body),\n             (GenericArg::Lifetime(l_lt), GenericArg::Lifetime(r_lt)) => Self::eq_lifetime(l_lt, r_lt),\n             (GenericArg::Type(l_ty), GenericArg::Type(r_ty)) => self.eq_ty(l_ty, r_ty),\n+            (GenericArg::Infer(l_inf), GenericArg::Infer(r_inf)) =>\n+              self.eq_ty(&l_inf.to_ty(), &r_inf.to_ty()),\n             _ => false,\n         }\n     }\n@@ -885,7 +887,11 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n \n     pub fn hash_ty(&mut self, ty: &Ty<'_>) {\n         std::mem::discriminant(&ty.kind).hash(&mut self.s);\n-        match ty.kind {\n+        self.hash_tykind(&ty.kind);\n+    }\n+\n+    pub fn hash_tykind(&mut self, ty: &TyKind<'_>) {\n+        match ty {\n             TyKind::Slice(ty) => {\n                 self.hash_ty(ty);\n             },\n@@ -898,7 +904,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n             TyKind::Rptr(lifetime, ref mut_ty) => {\n-                self.hash_lifetime(lifetime);\n+                self.hash_lifetime(*lifetime);\n                 self.hash_ty(mut_ty.ty);\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n@@ -918,7 +924,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 bfn.decl.c_variadic.hash(&mut self.s);\n             },\n             TyKind::Tup(ty_list) => {\n-                for ty in ty_list {\n+                for ty in *ty_list {\n                     self.hash_ty(ty);\n                 }\n             },\n@@ -927,7 +933,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_generic_args(arg_list);\n             },\n             TyKind::TraitObject(_, lifetime, _) => {\n-                self.hash_lifetime(lifetime);\n+                self.hash_lifetime(*lifetime);\n             },\n             TyKind::Typeof(anon_const) => {\n                 self.hash_body(anon_const.body);\n@@ -949,6 +955,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 GenericArg::Lifetime(l) => self.hash_lifetime(l),\n                 GenericArg::Type(ref ty) => self.hash_ty(ty),\n                 GenericArg::Const(ref ca) => self.hash_body(ca.value.body),\n+                GenericArg::Infer(ref inf) => self.hash_ty(&inf.to_ty()),\n             }\n         }\n     }"}, {"sha": "e914dc1c222f681549855fd75bbbd2b6ccbb3202", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd853c00e255559255885aadff9e93a1760c8728/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=fd853c00e255559255885aadff9e93a1760c8728", "patch": "@@ -180,7 +180,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n }\n \n // FIXME: Per https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/infer/at/struct.At.html#method.normalize\n-// this function can be removed once the `normalizie` method does not panic when normalization does\n+// this function can be removed once the `normalize` method does not panic when normalization does\n // not succeed\n /// Checks if `Ty` is normalizable. This function is useful\n /// to avoid crashes on `layout_of`."}]}