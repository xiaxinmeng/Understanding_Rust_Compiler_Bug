{"sha": "1cee3fe00e08ee1f34583df9a20e1e8c0068a139", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZWUzZmUwMGUwOGVlMWYzNDU4M2RmOWEyMGUxZThjMDA2OGExMzk=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-09-28T11:29:35Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-10-02T23:10:29Z"}, "message": "Resolve reviews", "tree": {"sha": "26e7d9be34d79508cf06146a39fc41b5509478b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26e7d9be34d79508cf06146a39fc41b5509478b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cee3fe00e08ee1f34583df9a20e1e8c0068a139", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cee3fe00e08ee1f34583df9a20e1e8c0068a139", "html_url": "https://github.com/rust-lang/rust/commit/1cee3fe00e08ee1f34583df9a20e1e8c0068a139", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cee3fe00e08ee1f34583df9a20e1e8c0068a139/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3f403aa5020e8890e23e054ad08624955180720", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f403aa5020e8890e23e054ad08624955180720", "html_url": "https://github.com/rust-lang/rust/commit/a3f403aa5020e8890e23e054ad08624955180720"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "c5da0af6f4d1018ad97147baa37c38c4ec1af7e8", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cee3fe00e08ee1f34583df9a20e1e8c0068a139/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cee3fe00e08ee1f34583df9a20e1e8c0068a139/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=1cee3fe00e08ee1f34583df9a20e1e8c0068a139", "patch": "@@ -343,7 +343,7 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n \n             let stats = terminal_stats(&expr);\n             let mut simplified = expr.simplify();\n-            for simple in Bool::Not(Box::new(expr.clone())).simplify() {\n+            for simple in Bool::Not(Box::new(expr)).simplify() {\n                 match simple {\n                     Bool::Not(_) | Bool::True | Bool::False => {},\n                     _ => simplified.push(Bool::Not(Box::new(simple.clone()))),"}, {"sha": "5a2baf2e8ba470eb85dc36cf4b2f6d99a24a357a", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1cee3fe00e08ee1f34583df9a20e1e8c0068a139/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cee3fe00e08ee1f34583df9a20e1e8c0068a139/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=1cee3fe00e08ee1f34583df9a20e1e8c0068a139", "patch": "@@ -137,9 +137,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                 statement_index: bbdata.statements.len(),\n             };\n \n-            if from_borrow\n-                && (cannot_move_out || possible_borrower.only_borrowers(&[arg][..], cloned, loc) != Some(true))\n-            {\n+            if from_borrow && (cannot_move_out || !possible_borrower.only_borrowers(&[arg], cloned, loc)) {\n                 continue;\n             }\n \n@@ -171,7 +169,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                     block: bb,\n                     statement_index: mir.basic_blocks()[bb].statements.len(),\n                 };\n-                if cannot_move_out || possible_borrower.only_borrowers(&[arg, cloned][..], local, loc) != Some(true) {\n+                if cannot_move_out || !possible_borrower.only_borrowers(&[arg, cloned], local, loc) {\n                     continue;\n                 }\n                 local\n@@ -564,29 +562,29 @@ fn rvalue_locals(rvalue: &mir::Rvalue<'_>, mut visit: impl FnMut(mir::Local)) {\n struct PossibleBorrower<'a, 'tcx> {\n     map: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n     maybe_live: DataflowResultsCursor<'a, 'tcx, MaybeStorageLive<'a, 'tcx>>,\n+    // Caches to avoid allocation of `BitSet` on every query\n     bitset: (BitSet<mir::Local>, BitSet<mir::Local>),\n }\n \n impl PossibleBorrower<'_, '_> {\n-    fn only_borrowers<'a>(\n-        &mut self,\n-        borrowers: impl IntoIterator<Item = &'a mir::Local>,\n-        borrowed: mir::Local,\n-        at: mir::Location,\n-    ) -> Option<bool> {\n+    fn only_borrowers(&mut self, borrowers: &[mir::Local], borrowed: mir::Local, at: mir::Location) -> bool {\n         self.maybe_live.seek(at);\n \n         self.bitset.0.clear();\n         let maybe_live = &mut self.maybe_live;\n-        for b in self.map.get(&borrowed)?.iter().filter(move |b| maybe_live.contains(*b)) {\n-            self.bitset.0.insert(b);\n+        if let Some(bitset) = self.map.get(&borrowed) {\n+            for b in bitset.iter().filter(move |b| maybe_live.contains(*b)) {\n+                self.bitset.0.insert(b);\n+            }\n+        } else {\n+            return false;\n         }\n \n         self.bitset.1.clear();\n         for b in borrowers {\n             self.bitset.1.insert(*b);\n         }\n \n-        Some(self.bitset.0 == self.bitset.1)\n+        self.bitset.0 == self.bitset.1\n     }\n }"}]}