{"sha": "a9f6babcda1479f4e5566d1aadbf9a0d99aa3182", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZjZiYWJjZGExNDc5ZjRlNTU2NmQxYWFkYmY5YTBkOTlhYTMxODI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-23T19:13:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-23T23:10:45Z"}, "message": "convert privacy access levels into a query", "tree": {"sha": "31a11cb43940d1fe2adaea62bcfec69ce70a84a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31a11cb43940d1fe2adaea62bcfec69ce70a84a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182", "html_url": "https://github.com/rust-lang/rust/commit/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69c9d9b3b806148846459cd0e4e30f300686dd97", "url": "https://api.github.com/repos/rust-lang/rust/commits/69c9d9b3b806148846459cd0e4e30f300686dd97", "html_url": "https://github.com/rust-lang/rust/commit/69c9d9b3b806148846459cd0e4e30f300686dd97"}], "stats": {"total": 103, "additions": 68, "deletions": 35}, "files": [{"sha": "5ee9258852b0b8bb75892e79ff02403afa68ec33", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=a9f6babcda1479f4e5566d1aadbf9a0d99aa3182", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use hir::def_id::CrateNum;\n use std::fmt::Debug;\n use std::sync::Arc;\n \n@@ -81,7 +82,7 @@ pub enum DepNode<D: Clone + Debug> {\n     TypeckItemType(D),\n     UnusedTraitCheck,\n     CheckConst(D),\n-    Privacy,\n+    PrivacyAccessLevels(CrateNum),\n     IntrinsicCheck(D),\n     MatchCheck(D),\n \n@@ -230,7 +231,7 @@ impl<D: Clone + Debug> DepNode<D> {\n             CheckEntryFn => Some(CheckEntryFn),\n             Variance => Some(Variance),\n             UnusedTraitCheck => Some(UnusedTraitCheck),\n-            Privacy => Some(Privacy),\n+            PrivacyAccessLevels(k) => Some(PrivacyAccessLevels(k)),\n             Reachability => Some(Reachability),\n             DeadCheck => Some(DeadCheck),\n             LateLintCheck => Some(LateLintCheck),"}, {"sha": "d35f965e2ffd767332f88977af762b6db35d14de", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=a9f6babcda1479f4e5566d1aadbf9a0d99aa3182", "patch": "@@ -44,9 +44,10 @@ use std::ops::Deref;\n use syntax::attr;\n use syntax::ast;\n use syntax::symbol::Symbol;\n-use syntax_pos::{MultiSpan, Span};\n+use syntax_pos::{DUMMY_SP, MultiSpan, Span};\n use errors::{self, Diagnostic, DiagnosticBuilder};\n use hir;\n+use hir::def_id::LOCAL_CRATE;\n use hir::intravisit as hir_visit;\n use syntax::visit as ast_visit;\n \n@@ -1231,10 +1232,11 @@ fn check_lint_name_cmdline(sess: &Session, lint_cx: &LintStore,\n /// Perform lint checking on a crate.\n ///\n /// Consumes the `lint_store` field of the `Session`.\n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             access_levels: &AccessLevels) {\n+pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let _task = tcx.dep_graph.in_task(DepNode::LateLintCheck);\n \n+    let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n+\n     let krate = tcx.hir.krate();\n \n     // We want to own the lint store, so move it out of the session."}, {"sha": "8926ff5c1fbbb080dce5afbfe165418548395d66", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=a9f6babcda1479f4e5566d1aadbf9a0d99aa3182", "patch": "@@ -21,12 +21,13 @@ use hir::itemlikevisit::ItemLikeVisitor;\n use middle::privacy;\n use ty::{self, TyCtxt};\n use hir::def::Def;\n-use hir::def_id::{DefId};\n+use hir::def_id::{DefId, LOCAL_CRATE};\n use lint;\n use util::nodemap::FxHashSet;\n \n use syntax::{ast, codemap};\n use syntax::attr;\n+use syntax::codemap::DUMMY_SP;\n use syntax_pos;\n \n // Any local node that may call something in its body block should be\n@@ -592,9 +593,9 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n     }\n }\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             access_levels: &privacy::AccessLevels) {\n+pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let _task = tcx.dep_graph.in_task(DepNode::DeadCheck);\n+    let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n     let krate = tcx.hir.krate();\n     let live_symbols = find_live(tcx, access_levels, krate);\n     let mut visitor = DeadVisitor { tcx: tcx, live_symbols: live_symbols };"}, {"sha": "b0e39442af98c9997f9885949d3b2e56e07d3178", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=a9f6babcda1479f4e5566d1aadbf9a0d99aa3182", "patch": "@@ -27,7 +27,9 @@ use util::nodemap::{NodeSet, FxHashSet};\n use syntax::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n+use syntax::codemap::DUMMY_SP;\n use hir;\n+use hir::def_id::LOCAL_CRATE;\n use hir::intravisit::{Visitor, NestedVisitorMap};\n use hir::itemlikevisit::ItemLikeVisitor;\n use hir::intravisit;\n@@ -359,11 +361,11 @@ impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a,\n     }\n }\n \n-pub fn find_reachable<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                access_levels: &privacy::AccessLevels)\n-                                -> NodeSet {\n+pub fn find_reachable<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> NodeSet {\n     let _task = tcx.dep_graph.in_task(DepNode::Reachability);\n \n+    let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n+\n     let any_library = tcx.sess.crate_types.borrow().iter().any(|ty| {\n         *ty == config::CrateTypeRlib || *ty == config::CrateTypeDylib ||\n         *ty == config::CrateTypeProcMacro"}, {"sha": "4115b4669f4b20874938c929313f10030c394bb8", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=a9f6babcda1479f4e5566d1aadbf9a0d99aa3182", "patch": "@@ -656,10 +656,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n /// Given the list of enabled features that were not language features (i.e. that\n /// were expected to be library features), and the list of features used from\n /// libraries, identify activated features that don't exist and error about them.\n-pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                 access_levels: &AccessLevels) {\n+pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let sess = &tcx.sess;\n \n+    let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n+\n     if tcx.stability.borrow().staged_api[&LOCAL_CRATE] && tcx.sess.features.borrow().staged_api {\n         let _task = tcx.dep_graph.in_task(DepNode::StabilityIndex);\n         let krate = tcx.hir.krate();"}, {"sha": "da4e58addd71b08b9d3d5da76f664b80550ac863", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=a9f6babcda1479f4e5566d1aadbf9a0d99aa3182", "patch": "@@ -11,6 +11,7 @@\n use dep_graph::{DepGraph, DepNode, DepTrackingMap, DepTrackingMapConfig};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use middle::const_val::ConstVal;\n+use middle::privacy::AccessLevels;\n use mir;\n use ty::{self, Ty, TyCtxt};\n \n@@ -189,6 +190,12 @@ impl<'tcx> QueryDescription for queries::mir_shims<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::privacy_access_levels<'tcx> {\n+    fn describe(_: TyCtxt, _: CrateNum) -> String {\n+        format!(\"privacy access levels\")\n+    }\n+}\n+\n macro_rules! define_maps {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n@@ -406,6 +413,9 @@ define_maps! { <'tcx>\n     /// other items, such as enum variant explicit discriminants.\n     pub monomorphic_const_eval: MonomorphicConstEval(DefId) -> Result<ConstVal<'tcx>, ()>,\n \n+    /// Performs the privacy check and computes \"access levels\".\n+    pub privacy_access_levels: PrivacyAccessLevels(CrateNum) -> Rc<AccessLevels>,\n+\n     pub mir_shims: mir_shim(ty::InstanceDef<'tcx>) -> &'tcx RefCell<mir::Mir<'tcx>>\n }\n "}, {"sha": "4283b10ec624fb01bf47458b9a53fb0e8f905c6d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a9f6babcda1479f4e5566d1aadbf9a0d99aa3182", "patch": "@@ -17,11 +17,11 @@ pub use self::fold::TypeFoldable;\n \n use dep_graph::{self, DepNode};\n use hir::{map as hir_map, FreevarMap, TraitMap};\n-use middle;\n use hir::def::{Def, CtorKind, ExportMap};\n use hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use middle::const_val::ConstVal;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n+use middle::privacy::AccessLevels;\n use middle::region::{CodeExtent, ROOT_CODE_EXTENT};\n use middle::resolve_lifetime::ObjectLifetimeDefault;\n use mir::Mir;\n@@ -108,9 +108,12 @@ mod sty;\n \n /// The complete set of all analyses described in this module. This is\n /// produced by the driver and fed to trans and later passes.\n+///\n+/// NB: These contents are being migrated into queries using the\n+/// *on-demand* infrastructure.\n #[derive(Clone)]\n pub struct CrateAnalysis {\n-    pub access_levels: middle::privacy::AccessLevels,\n+    pub access_levels: Rc<AccessLevels>,\n     pub reachable: NodeSet,\n     pub name: String,\n     pub glob_map: Option<hir::GlobMap>,"}, {"sha": "e8b9be4a903c3f9828a750f9eb2d5d6e4cf7a71c", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=a9f6babcda1479f4e5566d1aadbf9a0d99aa3182", "patch": "@@ -48,6 +48,7 @@ use std::fs;\n use std::io::{self, Write};\n use std::iter;\n use std::path::{Path, PathBuf};\n+use std::rc::Rc;\n use syntax::{ast, diagnostics, visit};\n use syntax::attr;\n use syntax::ext::base::ExtCtxt;\n@@ -807,7 +808,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n         expanded_crate: krate,\n         defs: resolver.definitions,\n         analysis: ty::CrateAnalysis {\n-            access_levels: AccessLevels::default(),\n+            access_levels: Rc::new(AccessLevels::default()),\n             reachable: NodeSet(),\n             name: crate_name.to_string(),\n             glob_map: if resolver.make_glob_map { Some(resolver.glob_map) } else { None },\n@@ -888,6 +889,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n     let mut local_providers = ty::maps::Providers::default();\n     mir::provide(&mut local_providers);\n+    rustc_privacy::provide(&mut local_providers);\n     typeck::provide(&mut local_providers);\n     ty::provide(&mut local_providers);\n \n@@ -931,9 +933,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n              || consts::check_crate(tcx));\n \n         analysis.access_levels =\n-            time(time_passes, \"privacy checking\", || {\n-                rustc_privacy::check_crate(tcx)\n-            });\n+            time(time_passes, \"privacy checking\", || rustc_privacy::check_crate(tcx));\n \n         time(time_passes,\n              \"intrinsic checking\",\n@@ -1000,19 +1000,15 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n         analysis.reachable =\n             time(time_passes,\n                  \"reachability checking\",\n-                 || reachable::find_reachable(tcx, &analysis.access_levels));\n+                 || reachable::find_reachable(tcx));\n \n-        time(time_passes, \"death checking\", || {\n-            middle::dead::check_crate(tcx, &analysis.access_levels);\n-        });\n+        time(time_passes, \"death checking\", || middle::dead::check_crate(tcx));\n \n         time(time_passes, \"unused lib feature checking\", || {\n-            stability::check_unused_or_stable_features(tcx, &analysis.access_levels)\n+            stability::check_unused_or_stable_features(tcx)\n         });\n \n-        time(time_passes,\n-             \"lint checking\",\n-             || lint::check_crate(tcx, &analysis.access_levels));\n+        time(time_passes, \"lint checking\", || lint::check_crate(tcx));\n \n         // The above three passes generate errors w/o aborting\n         if sess.err_count() > 0 {"}, {"sha": "64821f5d44bf495d4126bc25516121db4720d933", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=a9f6babcda1479f4e5566d1aadbf9a0d99aa3182", "patch": "@@ -17,6 +17,7 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![deny(warnings)]\n \n+#![cfg_attr(stage0, feature(field_init_shorthand))]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n@@ -25,23 +26,24 @@ extern crate rustc;\n #[macro_use] extern crate syntax;\n extern crate syntax_pos;\n \n-use rustc::dep_graph::DepNode;\n use rustc::hir::{self, PatKind};\n use rustc::hir::def::Def;\n-use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n+use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, CrateNum, DefId};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::itemlikevisit::DeepVisitor;\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n use rustc::lint;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n use rustc::ty::{self, TyCtxt, Ty, TypeFoldable};\n use rustc::ty::fold::TypeVisitor;\n+use rustc::ty::maps::Providers;\n use rustc::util::nodemap::NodeSet;\n use syntax::ast;\n-use syntax_pos::Span;\n+use syntax_pos::{DUMMY_SP, Span};\n \n use std::cmp;\n use std::mem::replace;\n+use std::rc::Rc;\n \n pub mod diagnostics;\n \n@@ -1203,8 +1205,23 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n     fn visit_pat(&mut self, _: &'tcx hir::Pat) {}\n }\n \n-pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> AccessLevels {\n-    let _task = tcx.dep_graph.in_task(DepNode::Privacy);\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n+        privacy_access_levels,\n+        ..*providers\n+    };\n+}\n+\n+pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Rc<AccessLevels> {\n+    tcx.dep_graph.with_ignore(|| { // FIXME\n+        ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE)\n+    })\n+}\n+\n+fn privacy_access_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                   krate: CrateNum)\n+                                   -> Rc<AccessLevels> {\n+    assert_eq!(krate, LOCAL_CRATE);\n \n     let krate = tcx.hir.krate();\n \n@@ -1266,7 +1283,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> AccessLevels {\n         krate.visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));\n     }\n \n-    visitor.access_levels\n+    Rc::new(visitor.access_levels)\n }\n \n __build_diagnostic_array! { librustc_privacy, DIAGNOSTICS }"}, {"sha": "a47d5f9937a02c337745038043e5d09735b9c2b2", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f6babcda1479f4e5566d1aadbf9a0d99aa3182/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=a9f6babcda1479f4e5566d1aadbf9a0d99aa3182", "patch": "@@ -184,8 +184,8 @@ pub fn run_core(search_paths: SearchPaths,\n         // Convert from a NodeId set to a DefId set since we don't always have easy access\n         // to the map from defid -> nodeid\n         let access_levels = AccessLevels {\n-            map: access_levels.map.into_iter()\n-                                  .map(|(k, v)| (tcx.hir.local_def_id(k), v))\n+            map: access_levels.map.iter()\n+                                  .map(|(&k, &v)| (tcx.hir.local_def_id(k), v))\n                                   .collect()\n         };\n "}]}