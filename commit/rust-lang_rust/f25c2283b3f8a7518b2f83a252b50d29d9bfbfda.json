{"sha": "f25c2283b3f8a7518b2f83a252b50d29d9bfbfda", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNWMyMjgzYjNmOGE3NTE4YjJmODNhMjUyYjUwZDI5ZDliZmJmZGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-15T19:27:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-15T19:27:29Z"}, "message": "Auto merge of #43635 - ids1024:backtrace-redox, r=alexcrichton\n\nMake backtraces work on Redox, copying Unix implementation\n\nThe `backtrace/` directory here is the same as the Unix one, except for adding an implementation of `get_executable_filename`.", "tree": {"sha": "81e0cf4ecfa74ef8b45750580d7b02172a7e8d70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81e0cf4ecfa74ef8b45750580d7b02172a7e8d70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f25c2283b3f8a7518b2f83a252b50d29d9bfbfda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f25c2283b3f8a7518b2f83a252b50d29d9bfbfda", "html_url": "https://github.com/rust-lang/rust/commit/f25c2283b3f8a7518b2f83a252b50d29d9bfbfda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f25c2283b3f8a7518b2f83a252b50d29d9bfbfda/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82be83cf744611a016fb09ae1afbffc04b3ed2e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/82be83cf744611a016fb09ae1afbffc04b3ed2e1", "html_url": "https://github.com/rust-lang/rust/commit/82be83cf744611a016fb09ae1afbffc04b3ed2e1"}, {"sha": "9d67d5a71dafe105167acf0e8b960f5aa118652b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d67d5a71dafe105167acf0e8b960f5aa118652b", "html_url": "https://github.com/rust-lang/rust/commit/9d67d5a71dafe105167acf0e8b960f5aa118652b"}], "stats": {"total": 242, "additions": 197, "deletions": 45}, "files": [{"sha": "40ea5dfe1152f0fc5160879bb71bfe1fae2595f6", "filename": "src/libbacktrace/config.sub", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f25c2283b3f8a7518b2f83a252b50d29d9bfbfda/src%2Flibbacktrace%2Fconfig.sub", "raw_url": "https://github.com/rust-lang/rust/raw/f25c2283b3f8a7518b2f83a252b50d29d9bfbfda/src%2Flibbacktrace%2Fconfig.sub", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fconfig.sub?ref=f25c2283b3f8a7518b2f83a252b50d29d9bfbfda", "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Configuration validation subroutine script.\n-#   Copyright 1992-2016 Free Software Foundation, Inc.\n+#   Copyright 1992-2017 Free Software Foundation, Inc.\n \n-timestamp='2016-01-01'\n+timestamp='2017-04-02'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -67,7 +67,7 @@ Report bugs and patches to <config-patches@gnu.org>.\"\n version=\"\\\n GNU config.sub ($timestamp)\n \n-Copyright 1992-2016 Free Software Foundation, Inc.\n+Copyright 1992-2017 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -117,7 +117,7 @@ case $maybe_os in\n   nto-qnx* | linux-gnu* | linux-android* | linux-dietlibc | linux-newlib* | \\\n   linux-musl* | linux-uclibc* | uclinux-uclibc* | uclinux-gnu* | kfreebsd*-gnu* | \\\n   knetbsd*-gnu* | netbsd*-gnu* | netbsd*-eabi* | \\\n-  kopensolaris*-gnu* | \\\n+  kopensolaris*-gnu* | cloudabi*-eabi* | \\\n   storm-chaos* | os2-emx* | rtmk-nova*)\n     os=-$maybe_os\n     basic_machine=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`\n@@ -263,7 +263,7 @@ case $basic_machine in\n \t| fido | fr30 | frv | ft32 \\\n \t| h8300 | h8500 | hppa | hppa1.[01] | hppa2.0 | hppa2.0[nw] | hppa64 \\\n \t| hexagon \\\n-\t| i370 | i860 | i960 | ia64 \\\n+\t| i370 | i860 | i960 | ia16 | ia64 \\\n \t| ip2k | iq2000 \\\n \t| k1om \\\n \t| le32 | le64 \\\n@@ -301,6 +301,7 @@ case $basic_machine in\n \t| open8 | or1k | or1knd | or32 \\\n \t| pdp10 | pdp11 | pj | pjl \\\n \t| powerpc | powerpc64 | powerpc64le | powerpcle \\\n+\t| pru \\\n \t| pyramid \\\n \t| riscv32 | riscv64 \\\n \t| rl78 | rx \\\n@@ -314,6 +315,7 @@ case $basic_machine in\n \t| ubicom32 \\\n \t| v850 | v850e | v850e1 | v850e2 | v850es | v850e2v3 \\\n \t| visium \\\n+\t| wasm32 \\\n \t| we32k \\\n \t| x86 | xc16x | xstormy16 | xtensa \\\n \t| z8k | z80)\n@@ -387,7 +389,7 @@ case $basic_machine in\n \t| h8300-* | h8500-* \\\n \t| hppa-* | hppa1.[01]-* | hppa2.0-* | hppa2.0[nw]-* | hppa64-* \\\n \t| hexagon-* \\\n-\t| i*86-* | i860-* | i960-* | ia64-* \\\n+\t| i*86-* | i860-* | i960-* | ia16-* | ia64-* \\\n \t| ip2k-* | iq2000-* \\\n \t| k1om-* \\\n \t| le32-* | le64-* \\\n@@ -428,6 +430,7 @@ case $basic_machine in\n \t| orion-* \\\n \t| pdp10-* | pdp11-* | pj-* | pjl-* | pn-* | power-* \\\n \t| powerpc-* | powerpc64-* | powerpc64le-* | powerpcle-* \\\n+\t| pru-* \\\n \t| pyramid-* \\\n \t| riscv32-* | riscv64-* \\\n \t| rl78-* | romp-* | rs6000-* | rx-* \\\n@@ -444,6 +447,7 @@ case $basic_machine in\n \t| v850-* | v850e-* | v850e1-* | v850es-* | v850e2-* | v850e2v3-* \\\n \t| vax-* \\\n \t| visium-* \\\n+\t| wasm32-* \\\n \t| we32k-* \\\n \t| x86-* | x86_64-* | xc16x-* | xps100-* \\\n \t| xstormy16-* | xtensa*-* \\\n@@ -643,6 +647,14 @@ case $basic_machine in\n \t\tbasic_machine=m68k-bull\n \t\tos=-sysv3\n \t\t;;\n+\te500v[12])\n+\t\tbasic_machine=powerpc-unknown\n+\t\tos=$os\"spe\"\n+\t\t;;\n+\te500v[12]-*)\n+\t\tbasic_machine=powerpc-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tos=$os\"spe\"\n+\t\t;;\n \tebmon29k)\n \t\tbasic_machine=a29k-amd\n \t\tos=-ebmon\n@@ -938,6 +950,9 @@ case $basic_machine in\n \tnsr-tandem)\n \t\tbasic_machine=nsr-tandem\n \t\t;;\n+\tnsx-tandem)\n+\t\tbasic_machine=nsx-tandem\n+\t\t;;\n \top50n-* | op60c-*)\n \t\tbasic_machine=hppa1.1-oki\n \t\tos=-proelf\n@@ -1022,7 +1037,7 @@ case $basic_machine in\n \tppc-* | ppcbe-*)\n \t\tbasic_machine=powerpc-`echo $basic_machine | sed 's/^[^-]*-//'`\n \t\t;;\n-\tppcle | powerpclittle | ppc-le | powerpc-little)\n+\tppcle | powerpclittle)\n \t\tbasic_machine=powerpcle-unknown\n \t\t;;\n \tppcle-* | powerpclittle-*)\n@@ -1032,7 +1047,7 @@ case $basic_machine in\n \t\t;;\n \tppc64-*) basic_machine=powerpc64-`echo $basic_machine | sed 's/^[^-]*-//'`\n \t\t;;\n-\tppc64le | powerpc64little | ppc64-le | powerpc64-little)\n+\tppc64le | powerpc64little)\n \t\tbasic_machine=powerpc64le-unknown\n \t\t;;\n \tppc64le-* | powerpc64little-*)\n@@ -1233,6 +1248,9 @@ case $basic_machine in\n \t\tbasic_machine=a29k-wrs\n \t\tos=-vxworks\n \t\t;;\n+\twasm32)\n+\t\tbasic_machine=wasm32-unknown\n+\t\t;;\n \tw65*)\n \t\tbasic_machine=w65-wdc\n \t\tos=-none\n@@ -1382,14 +1400,14 @@ case $os in\n \t      | -nindy* | -vxsim* | -vxworks* | -ebmon* | -hms* | -mvs* \\\n \t      | -clix* | -riscos* | -uniplus* | -iris* | -rtu* | -xenix* \\\n \t      | -hiux* | -386bsd* | -knetbsd* | -mirbsd* | -netbsd* \\\n-\t      | -bitrig* | -openbsd* | -solidbsd* \\\n+\t      | -bitrig* | -openbsd* | -solidbsd* | -libertybsd* \\\n \t      | -ekkobsd* | -kfreebsd* | -freebsd* | -riscix* | -lynxos* \\\n \t      | -bosx* | -nextstep* | -cxux* | -aout* | -elf* | -oabi* \\\n \t      | -ptx* | -coff* | -ecoff* | -winnt* | -domain* | -vsta* \\\n \t      | -udi* | -eabi* | -lites* | -ieee* | -go32* | -aux* \\\n-\t      | -chorusos* | -chorusrdb* | -cegcc* \\\n+\t      | -chorusos* | -chorusrdb* | -cegcc* | -glidix* \\\n \t      | -cygwin* | -msys* | -pe* | -psos* | -moss* | -proelf* | -rtems* \\\n-\t      | -mingw32* | -mingw64* | -linux-gnu* | -linux-android* \\\n+\t      | -midipix* | -mingw32* | -mingw64* | -linux-gnu* | -linux-android* \\\n \t      | -linux-newlib* | -linux-musl* | -linux-uclibc* \\\n \t      | -uxpv* | -beos* | -mpeix* | -udk* | -moxiebox* \\\n \t      | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* | -opened* \\\n@@ -1399,7 +1417,7 @@ case $os in\n \t      | -morphos* | -superux* | -rtmk* | -rtmk-nova* | -windiss* \\\n \t      | -powermax* | -dnix* | -nx6 | -nx7 | -sei* | -dragonfly* \\\n \t      | -skyos* | -haiku* | -rdos* | -toppers* | -drops* | -es* \\\n-\t      | -onefs* | -tirtos*)\n+\t      | -onefs* | -tirtos* | -phoenix* | -fuchsia* | -redox*)\n \t# Remember, each alternative MUST END IN *, to match a version number.\n \t\t;;\n \t-qnx*)\n@@ -1531,6 +1549,8 @@ case $os in\n \t\t;;\n \t-nacl*)\n \t\t;;\n+\t-ios)\n+\t\t;;\n \t-none)\n \t\t;;\n \t*)\n@@ -1626,6 +1646,9 @@ case $basic_machine in\n \tsparc-* | *-sun)\n \t\tos=-sunos4.1.1\n \t\t;;\n+\tpru-*)\n+\t\tos=-elf\n+\t\t;;\n \t*-be)\n \t\tos=-beos\n \t\t;;"}, {"sha": "ab304f4c9652a53ebd6004a7f451606496666d0f", "filename": "src/libstd/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f25c2283b3f8a7518b2f83a252b50d29d9bfbfda/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25c2283b3f8a7518b2f83a252b50d29d9bfbfda/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=f25c2283b3f8a7518b2f83a252b50d29d9bfbfda", "patch": "@@ -21,7 +21,7 @@ fn main() {\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n     let host = env::var(\"HOST\").expect(\"HOST was not set\");\n     if cfg!(feature = \"backtrace\") && !target.contains(\"apple\") && !target.contains(\"msvc\") &&\n-        !target.contains(\"emscripten\") && !target.contains(\"fuchsia\") && !target.contains(\"redox\") {\n+        !target.contains(\"emscripten\") && !target.contains(\"fuchsia\") {\n         let _ = build_libbacktrace(&host, &target);\n     }\n "}, {"sha": "6cafe3e69bac12bc99f338ef3b0ca637e86d99cb", "filename": "src/libstd/sys/redox/backtrace.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/82be83cf744611a016fb09ae1afbffc04b3ed2e1/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82be83cf744611a016fb09ae1afbffc04b3ed2e1/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace.rs?ref=82be83cf744611a016fb09ae1afbffc04b3ed2e1", "patch": "@@ -1,32 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use io;\n-use sys_common::backtrace::Frame;\n-\n-pub use sys_common::gnu::libbacktrace::{foreach_symbol_fileline, resolve_symname};\n-pub struct BacktraceContext;\n-\n-#[inline(never)]\n-pub fn unwind_backtrace(_frames: &mut [Frame])\n-    -> io::Result<(usize, BacktraceContext)>\n-{\n-    Ok((0, BacktraceContext))\n-}\n-\n-pub mod gnu {\n-    use io;\n-    use fs;\n-    use libc::c_char;\n-\n-    pub fn get_executable_filename() -> io::Result<(Vec<c_char>, fs::File)> {\n-        Err(io::Error::new(io::ErrorKind::Other, \"Not implemented\"))\n-    }\n-}"}, {"sha": "40b957d847b0f23088b0a3f98141c1e44b765529", "filename": "src/libstd/sys/redox/backtrace/mod.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f25c2283b3f8a7518b2f83a252b50d29d9bfbfda/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25c2283b3f8a7518b2f83a252b50d29d9bfbfda/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Fmod.rs?ref=f25c2283b3f8a7518b2f83a252b50d29d9bfbfda", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// See sys/unix/backtrace/mod.rs for an explanation of the method used here.\n+\n+pub use self::tracing::unwind_backtrace;\n+pub use self::printing::{foreach_symbol_fileline, resolve_symname};\n+\n+// tracing impls:\n+mod tracing;\n+// symbol resolvers:\n+mod printing;\n+\n+pub mod gnu {\n+    use io;\n+    use fs;\n+    use libc::c_char;\n+    use vec::Vec;\n+    use ffi::OsStr;\n+    use os::unix::ffi::OsStrExt;\n+    use io::Read;\n+\n+    pub fn get_executable_filename() -> io::Result<(Vec<c_char>, fs::File)> {\n+        let mut exefile = fs::File::open(\"sys:exe\")?;\n+        let mut exename = Vec::new();\n+        exefile.read_to_end(&mut exename)?;\n+        if exename.last() == Some(&b'\\n') {\n+            exename.pop();\n+        }\n+        let file = fs::File::open(OsStr::from_bytes(&exename))?;\n+        Ok((exename.into_iter().map(|c| c as c_char).collect(), file))\n+    }\n+}\n+\n+pub struct BacktraceContext;"}, {"sha": "3e937dbe623e728a1d97dff88ddf220f5c5ed339", "filename": "src/libstd/sys/redox/backtrace/printing.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f25c2283b3f8a7518b2f83a252b50d29d9bfbfda/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Fprinting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25c2283b3f8a7518b2f83a252b50d29d9bfbfda/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Fprinting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Fprinting.rs?ref=f25c2283b3f8a7518b2f83a252b50d29d9bfbfda", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub use sys_common::gnu::libbacktrace::{foreach_symbol_fileline, resolve_symname};"}, {"sha": "cfeabaddda9859fea27aa88a3da3da5d40d7d50d", "filename": "src/libstd/sys/redox/backtrace/tracing.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/f25c2283b3f8a7518b2f83a252b50d29d9bfbfda/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Ftracing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25c2283b3f8a7518b2f83a252b50d29d9bfbfda/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Ftracing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Ftracing.rs?ref=f25c2283b3f8a7518b2f83a252b50d29d9bfbfda", "patch": "@@ -0,0 +1,106 @@\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use error::Error;\n+use io;\n+use libc;\n+use sys::backtrace::BacktraceContext;\n+use sys_common::backtrace::Frame;\n+\n+use unwind as uw;\n+\n+struct Context<'a> {\n+    idx: usize,\n+    frames: &'a mut [Frame],\n+}\n+\n+#[derive(Debug)]\n+struct UnwindError(uw::_Unwind_Reason_Code);\n+\n+impl Error for UnwindError {\n+    fn description(&self) -> &'static str {\n+        \"unexpected return value while unwinding\"\n+    }\n+}\n+\n+impl ::fmt::Display for UnwindError {\n+    fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result {\n+        write!(f, \"{}: {:?}\", self.description(), self.0)\n+    }\n+}\n+\n+#[inline(never)] // if we know this is a function call, we can skip it when\n+                 // tracing\n+pub fn unwind_backtrace(frames: &mut [Frame])\n+    -> io::Result<(usize, BacktraceContext)>\n+{\n+    let mut cx = Context {\n+        idx: 0,\n+        frames: frames,\n+    };\n+    let result_unwind = unsafe {\n+        uw::_Unwind_Backtrace(trace_fn,\n+                              &mut cx as *mut Context\n+                              as *mut libc::c_void)\n+    };\n+    // See libunwind:src/unwind/Backtrace.c for the return values.\n+    // No, there is no doc.\n+    match result_unwind {\n+        // These return codes seem to be benign and need to be ignored for backtraces\n+        // to show up properly on all tested platforms.\n+        uw::_URC_END_OF_STACK | uw::_URC_FATAL_PHASE1_ERROR | uw::_URC_FAILURE => {\n+            Ok((cx.idx, BacktraceContext))\n+        }\n+        _ => {\n+            Err(io::Error::new(io::ErrorKind::Other,\n+                               UnwindError(result_unwind)))\n+        }\n+    }\n+}\n+\n+extern fn trace_fn(ctx: *mut uw::_Unwind_Context,\n+                   arg: *mut libc::c_void) -> uw::_Unwind_Reason_Code {\n+    let cx = unsafe { &mut *(arg as *mut Context) };\n+    let mut ip_before_insn = 0;\n+    let mut ip = unsafe {\n+        uw::_Unwind_GetIPInfo(ctx, &mut ip_before_insn) as *mut libc::c_void\n+    };\n+    if !ip.is_null() && ip_before_insn == 0 {\n+        // this is a non-signaling frame, so `ip` refers to the address\n+        // after the calling instruction. account for that.\n+        ip = (ip as usize - 1) as *mut _;\n+    }\n+\n+    // dladdr() on osx gets whiny when we use FindEnclosingFunction, and\n+    // it appears to work fine without it, so we only use\n+    // FindEnclosingFunction on non-osx platforms. In doing so, we get a\n+    // slightly more accurate stack trace in the process.\n+    //\n+    // This is often because panic involves the last instruction of a\n+    // function being \"call std::rt::begin_unwind\", with no ret\n+    // instructions after it. This means that the return instruction\n+    // pointer points *outside* of the calling function, and by\n+    // unwinding it we go back to the original function.\n+    let symaddr = if cfg!(target_os = \"macos\") || cfg!(target_os = \"ios\") {\n+        ip\n+    } else {\n+        unsafe { uw::_Unwind_FindEnclosingFunction(ip) }\n+    };\n+\n+    if cx.idx < cx.frames.len() {\n+        cx.frames[cx.idx] = Frame {\n+            symbol_addr: symaddr,\n+            exact_position: ip,\n+        };\n+        cx.idx += 1;\n+    }\n+\n+    uw::_URC_NO_REASON\n+}"}, {"sha": "cb8cb90e9ca7afac208baafed43bcc180d32c542", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f25c2283b3f8a7518b2f83a252b50d29d9bfbfda/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25c2283b3f8a7518b2f83a252b50d29d9bfbfda/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=f25c2283b3f8a7518b2f83a252b50d29d9bfbfda", "patch": "@@ -41,5 +41,7 @@ fn main() {\n         println!(\"cargo:rustc-link-lib=unwind\");\n     } else if target.contains(\"haiku\") {\n         println!(\"cargo:rustc-link-lib=gcc_s\");\n+    } else if target.contains(\"redox\") {\n+        println!(\"cargo:rustc-link-lib=gcc\");\n     }\n }"}]}