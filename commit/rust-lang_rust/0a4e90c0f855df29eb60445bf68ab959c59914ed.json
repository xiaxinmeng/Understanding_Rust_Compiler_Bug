{"sha": "0a4e90c0f855df29eb60445bf68ab959c59914ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNGU5MGMwZjg1NWRmMjllYjYwNDQ1YmY2OGFiOTU5YzU5OTE0ZWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-24T22:18:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-24T22:18:45Z"}, "message": "Merge #5527\n\n5527: Link metrics r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "74bb0e9ccaec846efcbcd959a6de69aedc45ac5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74bb0e9ccaec846efcbcd959a6de69aedc45ac5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a4e90c0f855df29eb60445bf68ab959c59914ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfG15FCRBK7hj4Ov3rIwAAdHIIACY4EI6EjYk7n2cWZhi3a/IV\n83GmL5r4/rWUD0cMvUAxX6D5h6GyeatxhgQoKdQqYdcHPH/XjB8itrNhvCBXFIV9\nyt9Dc3JES7ekiZDJeT0g2N7bxEchsivFX3o5wOM7ZsKhmwW+mlR0yPc9gvdI+h6Z\nMxcfxwcwWASjt0TShFEi9+p0S2j1CMJ50RJhNuMjSLY1MtbFQD0qhLL1sEkI1R5o\n6hcjvO3YO7iU7eVm+SvOorYo771mKkC0812yLiKu4hmD3XDYSKTlqTktv3un7SAw\n0OoOFEjlBie9X27Z7CfYmYsz+8p1XfIWPK82qtL1xbiyMo2L2L3XEeBPBIb+AQM=\n=93o9\n-----END PGP SIGNATURE-----\n", "payload": "tree 74bb0e9ccaec846efcbcd959a6de69aedc45ac5e\nparent a09a00a56049c705dcddc33773a27d5ce976b02e\nparent 2aa9d4a699c666b1305e4fd33b6a7861b227a4dc\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1595629125 +0000\ncommitter GitHub <noreply@github.com> 1595629125 +0000\n\nMerge #5527\n\n5527: Link metrics r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a4e90c0f855df29eb60445bf68ab959c59914ed", "html_url": "https://github.com/rust-lang/rust/commit/0a4e90c0f855df29eb60445bf68ab959c59914ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a4e90c0f855df29eb60445bf68ab959c59914ed/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a09a00a56049c705dcddc33773a27d5ce976b02e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a09a00a56049c705dcddc33773a27d5ce976b02e", "html_url": "https://github.com/rust-lang/rust/commit/a09a00a56049c705dcddc33773a27d5ce976b02e"}, {"sha": "2aa9d4a699c666b1305e4fd33b6a7861b227a4dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa9d4a699c666b1305e4fd33b6a7861b227a4dc", "html_url": "https://github.com/rust-lang/rust/commit/2aa9d4a699c666b1305e4fd33b6a7861b227a4dc"}], "stats": {"total": 85, "additions": 52, "deletions": 33}, "files": [{"sha": "16c980400cf69d0327b54b2e4e8c9f339cfe822a", "filename": "README.md", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0a4e90c0f855df29eb60445bf68ab959c59914ed/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a4e90c0f855df29eb60445bf68ab959c59914ed/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=0a4e90c0f855df29eb60445bf68ab959c59914ed", "patch": "@@ -2,11 +2,8 @@\n   <img src=\"https://user-images.githubusercontent.com/1711539/72443316-5a79f280-37ae-11ea-858f-035209ece2dd.png\" alt=\"rust-analyzer logo\">\n </p>\n \n-rust-analyzer is an **experimental** modular compiler frontend for the Rust\n-language. It is a part of a larger rls-2.0 effort to create excellent IDE\n-support for Rust. If you want to get involved, check the rls-2.0 working group:\n-\n-https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0\n+rust-analyzer is an **experimental** modular compiler frontend for the Rust language.\n+It is a part of a larger rls-2.0 effort to create excellent IDE support for Rust.\n \n Work on rust-analyzer is sponsored by\n \n@@ -25,8 +22,8 @@ If you want to **contribute** to rust-analyzer or are just curious about how\n things work under the hood, check the [./docs/dev](./docs/dev) folder.\n \n If you want to **use** rust-analyzer's language server with your editor of\n-choice, check [the manual](https://rust-analyzer.github.io/manual.html) folder. It also contains some tips & tricks to help\n-you be more productive when using rust-analyzer.\n+choice, check [the manual](https://rust-analyzer.github.io/manual.html) folder.\n+It also contains some tips & tricks to help you be more productive when using rust-analyzer.\n \n ## Communication\n \n@@ -40,8 +37,9 @@ https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frls-2.2E0\n \n ## Quick Links\n \n-* API docs: https://rust-analyzer.github.io/rust-analyzer/ra_ide/\n * Website: https://rust-analyzer.github.io/\n+* Metrics: https://rust-analyzer.github.io/metrics/\n+* API docs: https://rust-analyzer.github.io/rust-analyzer/ra_ide/\n \n ## License\n "}, {"sha": "b69b884e546660c5122c90b6495f1f0d66697a01", "filename": "xtask/src/main.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a4e90c0f855df29eb60445bf68ab959c59914ed/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4e90c0f855df29eb60445bf68ab959c59914ed/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=0a4e90c0f855df29eb60445bf68ab959c59914ed", "patch": "@@ -15,7 +15,7 @@ use xtask::{\n     codegen::{self, Mode},\n     dist::DistCmd,\n     install::{ClientOpt, InstallCmd, Malloc, ServerOpt},\n-    metrics::run_metrics,\n+    metrics::MetricsCmd,\n     not_bash::pushd,\n     pre_commit, project_root,\n     release::{PromoteCmd, ReleaseCmd},\n@@ -118,7 +118,11 @@ FLAGS:\n             args.finish()?;\n             DistCmd { nightly, client_version }.run()\n         }\n-        \"metrics\" => run_metrics(),\n+        \"metrics\" => {\n+            let dry_run = args.contains(\"--dry-run\");\n+            args.finish()?;\n+            MetricsCmd { dry_run }.run()\n+        }\n         _ => {\n             eprintln!(\n                 \"\\"}, {"sha": "6c042d695134f37b5d428056755d9c3352fc74d9", "filename": "xtask/src/metrics.rs", "status": "modified", "additions": 40, "deletions": 23, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/0a4e90c0f855df29eb60445bf68ab959c59914ed/xtask%2Fsrc%2Fmetrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4e90c0f855df29eb60445bf68ab959c59914ed/xtask%2Fsrc%2Fmetrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmetrics.rs?ref=0a4e90c0f855df29eb60445bf68ab959c59914ed", "patch": "@@ -12,36 +12,53 @@ use crate::not_bash::{fs2, pushd, rm_rf, run};\n \n type Unit = &'static str;\n \n-pub fn run_metrics() -> Result<()> {\n-    let mut metrics = Metrics::new()?;\n-    metrics.measure_build()?;\n-\n-    {\n-        let _d = pushd(\"target\");\n-        let metrics_token = env::var(\"METRICS_TOKEN\").unwrap();\n-        let repo = format!(\"https://{}@github.com/rust-analyzer/metrics.git\", metrics_token);\n-        run!(\"git clone --depth 1 {}\", repo)?;\n-        let _d = pushd(\"metrics\");\n-\n-        let mut file = std::fs::OpenOptions::new().append(true).open(\"metrics.json\")?;\n-        writeln!(file, \"{}\", metrics.json())?;\n-        run!(\"git add .\")?;\n-        run!(\"git -c user.name=Bot -c user.email=dummy@example.com commit --message \ud83d\udcc8\")?;\n-        run!(\"git push origin master\")?;\n-    }\n-    eprintln!(\"{:#?}\", metrics);\n-    Ok(())\n+pub struct MetricsCmd {\n+    pub dry_run: bool,\n+}\n+\n+impl MetricsCmd {\n+    pub fn run(self) -> Result<()> {\n+        let mut metrics = Metrics::new()?;\n+        if !self.dry_run {\n+            rm_rf(\"./target/release\")?;\n+        }\n+\n+        metrics.measure_build()?;\n+        metrics.measure_analysis_stats_self()?;\n+\n+        if !self.dry_run {\n+            let _d = pushd(\"target\");\n+            let metrics_token = env::var(\"METRICS_TOKEN\").unwrap();\n+            let repo = format!(\"https://{}@github.com/rust-analyzer/metrics.git\", metrics_token);\n+            run!(\"git clone --depth 1 {}\", repo)?;\n+            let _d = pushd(\"metrics\");\n+\n+            let mut file = std::fs::OpenOptions::new().append(true).open(\"metrics.json\")?;\n+            writeln!(file, \"{}\", metrics.json())?;\n+            run!(\"git add .\")?;\n+            run!(\"git -c user.name=Bot -c user.email=dummy@example.com commit --message \ud83d\udcc8\")?;\n+            run!(\"git push origin master\")?;\n+        }\n+        eprintln!(\"{:#?}\", metrics);\n+        Ok(())\n+    }\n }\n \n impl Metrics {\n     fn measure_build(&mut self) -> Result<()> {\n         run!(\"cargo fetch\")?;\n-        rm_rf(\"./target/release\")?;\n \n-        let build = Instant::now();\n+        let time = Instant::now();\n         run!(\"cargo build --release --package rust-analyzer --bin rust-analyzer\")?;\n-        let build = build.elapsed();\n-        self.report(\"build\", build.as_millis() as u64, \"ms\");\n+        let time = time.elapsed();\n+        self.report(\"build\", time.as_millis() as u64, \"ms\");\n+        Ok(())\n+    }\n+    fn measure_analysis_stats_self(&mut self) -> Result<()> {\n+        let time = Instant::now();\n+        run!(\"./target/release/rust-analyzer analysis-stats .\")?;\n+        let time = time.elapsed();\n+        self.report(\"analysis-stats/self\", time.as_millis() as u64, \"ms\");\n         Ok(())\n     }\n }"}]}