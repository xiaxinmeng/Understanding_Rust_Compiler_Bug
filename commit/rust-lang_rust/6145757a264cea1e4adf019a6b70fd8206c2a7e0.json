{"sha": "6145757a264cea1e4adf019a6b70fd8206c2a7e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNDU3NTdhMjY0Y2VhMWU0YWRmMDE5YTZiNzBmZDgyMDZjMmE3ZTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-28T20:12:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-28T20:12:07Z"}, "message": "Rollup merge of #64852 - Baranowski:param_note_52082, r=estebank\n\nPrint ParamTy span when accessing a field (#52082)", "tree": {"sha": "7f197d538411598b949ed44cd93ad69d909d09f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f197d538411598b949ed44cd93ad69d909d09f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6145757a264cea1e4adf019a6b70fd8206c2a7e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdj76XCRBK7hj4Ov3rIwAAdHIIAEJOIOEXnaSCwLF4isyTaWm6\n0d7HPlJSq+fgEajYIKfzVERFL/+LHTQKNS3lrrkwlib0Jbo/aNtnSJWsRAXKmb+z\nTS7ILIKFBDqlwEu0MoeJRBsP5KxdIAHqN8mry73NzlhMqTajWnH0qHcGlJnhYOZY\nv6PbqxKcIJyrekTov4FW1EDPSV2OHsLBWN7GCeUayTcFCV9dBLFDZR5fUppUFlzy\nYep8vqTwadPwBDPV1HjfRytIivdCcd2PyHNL3NilWwUaMJKjIScjfe1zpNFB67Ib\nQXjk1vozTvxghWD6aD2VGLkleF40KoOz6W3xqtUJX81C3ANsRwsi4mXIst8Qj3U=\n=EZyi\n-----END PGP SIGNATURE-----\n", "payload": "tree 7f197d538411598b949ed44cd93ad69d909d09f0\nparent 69a3009cbf1b2be92b0520d11d29d11445918817\nparent 9ad99c30cbf344b763602698b67c04ec3ce3de56\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569701527 +0200\ncommitter GitHub <noreply@github.com> 1569701527 +0200\n\nRollup merge of #64852 - Baranowski:param_note_52082, r=estebank\n\nPrint ParamTy span when accessing a field (#52082)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6145757a264cea1e4adf019a6b70fd8206c2a7e0", "html_url": "https://github.com/rust-lang/rust/commit/6145757a264cea1e4adf019a6b70fd8206c2a7e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6145757a264cea1e4adf019a6b70fd8206c2a7e0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69a3009cbf1b2be92b0520d11d29d11445918817", "url": "https://api.github.com/repos/rust-lang/rust/commits/69a3009cbf1b2be92b0520d11d29d11445918817", "html_url": "https://github.com/rust-lang/rust/commit/69a3009cbf1b2be92b0520d11d29d11445918817"}, {"sha": "9ad99c30cbf344b763602698b67c04ec3ce3de56", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad99c30cbf344b763602698b67c04ec3ce3de56", "html_url": "https://github.com/rust-lang/rust/commit/9ad99c30cbf344b763602698b67c04ec3ce3de56"}], "stats": {"total": 214, "additions": 188, "deletions": 26}, "files": [{"sha": "6bed321d27f82a92bd7037a82b3b890cca5786c9", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 54, "deletions": 24, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/6145757a264cea1e4adf019a6b70fd8206c2a7e0/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6145757a264cea1e4adf019a6b70fd8206c2a7e0/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=6145757a264cea1e4adf019a6b70fd8206c2a7e0", "patch": "@@ -1394,30 +1394,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else if self.method_exists(field, expr_t, expr.hir_id, true) {\n             self.ban_take_value_of_method(expr, expr_t, field);\n         } else if !expr_t.is_primitive_ty() {\n-            let mut err = self.no_such_field_err(field.span, field, expr_t);\n-\n-            match expr_t.kind {\n-                ty::Adt(def, _) if !def.is_enum() => {\n-                    self.suggest_fields_on_recordish(&mut err, def, field);\n-                }\n-                ty::Array(_, len) => {\n-                    self.maybe_suggest_array_indexing(&mut err, expr, base, field, len);\n-                }\n-                ty::RawPtr(..) => {\n-                    self.suggest_first_deref_field(&mut err, expr, base, field);\n-                }\n-                _ => {}\n-            }\n-\n-            if field.name == kw::Await {\n-                // We know by construction that `<expr>.await` is either on Rust 2015\n-                // or results in `ExprKind::Await`. Suggest switching the edition to 2018.\n-                err.note(\"to `.await` a `Future`, switch to Rust 2018\");\n-                err.help(\"set `edition = \\\"2018\\\"` in `Cargo.toml`\");\n-                err.note(\"for more on editions, read https://doc.rust-lang.org/edition-guide\");\n-            }\n-\n-            err.emit();\n+            self.ban_nonexisting_field(field, base, expr, expr_t);\n         } else {\n             type_error_struct!(\n                 self.tcx().sess,\n@@ -1433,6 +1410,42 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.tcx().types.err\n     }\n \n+    fn ban_nonexisting_field(\n+        &self,\n+        field: ast::Ident,\n+        base: &'tcx hir::Expr,\n+        expr: &'tcx hir::Expr,\n+        expr_t: Ty<'tcx>,\n+    ) {\n+        let mut err = self.no_such_field_err(field.span, field, expr_t);\n+\n+        match expr_t.peel_refs().kind {\n+            ty::Array(_, len) => {\n+                self.maybe_suggest_array_indexing(&mut err, expr, base, field, len);\n+            }\n+            ty::RawPtr(..) => {\n+                self.suggest_first_deref_field(&mut err, expr, base, field);\n+            }\n+            ty::Adt(def, _) if !def.is_enum() => {\n+                self.suggest_fields_on_recordish(&mut err, def, field);\n+            }\n+            ty::Param(param_ty) => {\n+                self.point_at_param_definition(&mut err, param_ty);\n+            }\n+            _ => {}\n+        }\n+\n+        if field.name == kw::Await {\n+            // We know by construction that `<expr>.await` is either on Rust 2015\n+            // or results in `ExprKind::Await`. Suggest switching the edition to 2018.\n+            err.note(\"to `.await` a `Future`, switch to Rust 2018\");\n+            err.help(\"set `edition = \\\"2018\\\"` in `Cargo.toml`\");\n+            err.note(\"for more on editions, read https://doc.rust-lang.org/edition-guide\");\n+        }\n+\n+        err.emit();\n+    }\n+\n     fn ban_private_field_access(\n         &self,\n         expr: &hir::Expr,\n@@ -1495,6 +1508,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n+    fn point_at_param_definition(&self, err: &mut DiagnosticBuilder<'_>, param: ty::ParamTy) {\n+        let generics = self.tcx.generics_of(self.body_id.owner_def_id());\n+        let generic_param = generics.type_param(&param, self.tcx);\n+        if let ty::GenericParamDefKind::Type{synthetic: Some(..), ..} = generic_param.kind {\n+            return;\n+        }\n+        let param_def_id = generic_param.def_id;\n+        let param_hir_id = match self.tcx.hir().as_local_hir_id(param_def_id) {\n+            Some(x) => x,\n+            None    => return,\n+        };\n+        let param_span = self.tcx.hir().span(param_hir_id);\n+        let param_name = self.tcx.hir().ty_param_name(param_hir_id);\n+\n+        err.span_label(param_span, &format!(\"type parameter '{}' declared here\", param_name));\n+    }\n+\n     fn suggest_fields_on_recordish(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,"}, {"sha": "7bd0eaf77a95d7369dec79a8ed5921a9b42806c1", "filename": "src/test/ui/derived-errors/issue-30580.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6145757a264cea1e4adf019a6b70fd8206c2a7e0/src%2Ftest%2Fui%2Fderived-errors%2Fissue-30580.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6145757a264cea1e4adf019a6b70fd8206c2a7e0/src%2Ftest%2Fui%2Fderived-errors%2Fissue-30580.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderived-errors%2Fissue-30580.stderr?ref=6145757a264cea1e4adf019a6b70fd8206c2a7e0", "patch": "@@ -2,7 +2,7 @@ error[E0609]: no field `c` on type `&Foo`\n   --> $DIR/issue-30580.rs:12:11\n    |\n LL |         b.c;\n-   |           ^\n+   |           ^ help: a field with a similar name exists: `a`\n \n error: aborting due to previous error\n "}, {"sha": "c7618e0835b8d93e613213b76d5da9f21f64200c", "filename": "src/test/ui/issues/issue-31011.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6145757a264cea1e4adf019a6b70fd8206c2a7e0/src%2Ftest%2Fui%2Fissues%2Fissue-31011.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6145757a264cea1e4adf019a6b70fd8206c2a7e0/src%2Ftest%2Fui%2Fissues%2Fissue-31011.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31011.stderr?ref=6145757a264cea1e4adf019a6b70fd8206c2a7e0", "patch": "@@ -4,6 +4,9 @@ error[E0609]: no field `trace` on type `&T`\n LL |         if $ctx.trace {\n    |                 ^^^^^\n ...\n+LL | fn wrap<T>(context: &T) -> ()\n+   |         - type parameter 'T' declared here\n+LL | {\n LL |     log!(context, \"entered wrapper\");\n    |     --------------------------------- in this macro invocation\n "}, {"sha": "6526ef58a447978e0e096812f2dafc4464f55b2d", "filename": "src/test/ui/structs/struct-pat-derived-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6145757a264cea1e4adf019a6b70fd8206c2a7e0/src%2Ftest%2Fui%2Fstructs%2Fstruct-pat-derived-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6145757a264cea1e4adf019a6b70fd8206c2a7e0/src%2Ftest%2Fui%2Fstructs%2Fstruct-pat-derived-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-pat-derived-error.stderr?ref=6145757a264cea1e4adf019a6b70fd8206c2a7e0", "patch": "@@ -2,7 +2,7 @@ error[E0609]: no field `d` on type `&A`\n   --> $DIR/struct-pat-derived-error.rs:8:31\n    |\n LL |         let A { x, y } = self.d;\n-   |                               ^\n+   |                               ^ help: a field with a similar name exists: `b`\n \n error[E0026]: struct `A` does not have fields named `x`, `y`\n   --> $DIR/struct-pat-derived-error.rs:8:17"}, {"sha": "c57e8149574c94d3b2b90b050c1e9ce7de83f5cd", "filename": "src/test/ui/typeck/issue-52082-type-param-shadows-existing-type.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6145757a264cea1e4adf019a6b70fd8206c2a7e0/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6145757a264cea1e4adf019a6b70fd8206c2a7e0/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.rs?ref=6145757a264cea1e4adf019a6b70fd8206c2a7e0", "patch": "@@ -0,0 +1,54 @@\n+// Fix issue 52082: Confusing error if accidentially defining a type paramter with the same name as\n+// an existing type\n+//\n+// To this end, make sure that when trying to retrieve a field of a (reference to) type parameter,\n+// rustc points to the point where the parameter was defined.\n+#[derive(Debug)]\n+struct Point\n+{\n+    x: i32,\n+    y: i32\n+}\n+\n+impl Point\n+{\n+    fn add(a: &Point, b: &Point) -> Point\n+    {\n+        Point {x: a.x + b.x, y: a.y + b.y}\n+    }\n+}\n+\n+trait Eq\n+{\n+    fn equals_ref<T>(a: &T, b: &T) -> bool;\n+    fn equals_val<T>(a: T, b: T) -> bool;\n+}\n+\n+impl Eq for Point\n+{\n+    fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n+    {\n+        a.x == b.x && a.y == b.y //~ ERROR no field `x` on type `&Point` [E0609]\n+                                 //~|ERROR no field `x` on type `&Point` [E0609]\n+                                 //~|ERROR no field `y` on type `&Point` [E0609]\n+                                 //~|ERROR no field `y` on type `&Point` [E0609]\n+    }\n+\n+    fn equals_val<Point>(a: Point, b: Point) -> bool\n+    {\n+        a.x == b.x && a.y == b.y //~ ERROR no field `x` on type `Point` [E0609]\n+                                 //~|ERROR no field `x` on type `Point` [E0609]\n+                                 //~|ERROR no field `y` on type `Point` [E0609]\n+                                 //~|ERROR no field `y` on type `Point` [E0609]\n+    }\n+}\n+\n+fn main()\n+{\n+    let p1 = Point {x:  0, y: 10};\n+    let p2 = Point {x: 20, y: 42};\n+    println!(\"{:?}\", Point::add(&p1, &p2));\n+    println!(\"p1: {:?}, p2: {:?}\", p1, p2);\n+    println!(\"&p1 == &p2: {:?}\", Point::equals_ref(&p1, &p2));\n+    println!(\"p1 == p2: {:?}\", Point::equals_val(p1, p2));\n+}"}, {"sha": "4be4c91dfc2c3ffbd4cbac25a471e8aa3f8bb0d4", "filename": "src/test/ui/typeck/issue-52082-type-param-shadows-existing-type.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/6145757a264cea1e4adf019a6b70fd8206c2a7e0/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6145757a264cea1e4adf019a6b70fd8206c2a7e0/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.stderr?ref=6145757a264cea1e4adf019a6b70fd8206c2a7e0", "patch": "@@ -0,0 +1,75 @@\n+error[E0609]: no field `x` on type `&Point`\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:31:11\n+   |\n+LL |     fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n+LL |         a.x == b.x && a.y == b.y\n+   |           ^\n+\n+error[E0609]: no field `x` on type `&Point`\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:31:18\n+   |\n+LL |     fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n+LL |         a.x == b.x && a.y == b.y\n+   |                  ^\n+\n+error[E0609]: no field `y` on type `&Point`\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:31:25\n+   |\n+LL |     fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n+LL |         a.x == b.x && a.y == b.y\n+   |                         ^\n+\n+error[E0609]: no field `y` on type `&Point`\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:31:32\n+   |\n+LL |     fn equals_ref<Point>(a: &Point, b: &Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n+LL |         a.x == b.x && a.y == b.y\n+   |                                ^\n+\n+error[E0609]: no field `x` on type `Point`\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:39:11\n+   |\n+LL |     fn equals_val<Point>(a: Point, b: Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n+LL |         a.x == b.x && a.y == b.y\n+   |           ^\n+\n+error[E0609]: no field `x` on type `Point`\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:39:18\n+   |\n+LL |     fn equals_val<Point>(a: Point, b: Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n+LL |         a.x == b.x && a.y == b.y\n+   |                  ^\n+\n+error[E0609]: no field `y` on type `Point`\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:39:25\n+   |\n+LL |     fn equals_val<Point>(a: Point, b: Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n+LL |         a.x == b.x && a.y == b.y\n+   |                         ^\n+\n+error[E0609]: no field `y` on type `Point`\n+  --> $DIR/issue-52082-type-param-shadows-existing-type.rs:39:32\n+   |\n+LL |     fn equals_val<Point>(a: Point, b: Point) -> bool\n+   |                   ----- type parameter 'Point' declared here\n+LL |     {\n+LL |         a.x == b.x && a.y == b.y\n+   |                                ^\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0609`."}]}