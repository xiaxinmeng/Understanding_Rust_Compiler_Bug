{"sha": "2f438e31f577bbb9367b9abbcbb5ce77ce54e979", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNDM4ZTMxZjU3N2JiYjkzNjdiOWFiYmNiYjVjZTc3Y2U1NGU5Nzk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-22T16:14:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-22T16:14:32Z"}, "message": "Rollup merge of #84343 - camsteffen:closure-tree, r=varkor\n\nRemove `ScopeTree::closure_tree`\n\nSeems to be dead code since #50649.", "tree": {"sha": "3d6e13358dd6a850a644cd391f34af2e262465fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d6e13358dd6a850a644cd391f34af2e262465fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f438e31f577bbb9367b9abbcbb5ce77ce54e979", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJggaDoCRBK7hj4Ov3rIwAAlxQIACVMjL5JiDvwGTFG8g7zxok9\nws7mGtNIvjoQtYJo2WHTvzkW0cKsdn4K04bK7k9ufWaRNqmmt6NrCZiP9/icabt9\nOVaLDbs63D3jIdxnm9THJX6gJYBxyz/ytaHtiTJJvLVfMVqM2VISalRWdy8QY9jl\nku1gAAM6cgKd/Dx8a7jU4yUvBIQCrLuv3cWF5XGBI0o2H7x+GC6AQd+5QgLwFY6o\nJFgqvOvavPTIWur9A933HdpxSiaqIXESYTdEoW4k0NVq7J5ID2yYaBgp6fPYdmEV\n3ly6J1vySrAt7E1NHHMFzKdSpQf/o+Mmvo/jmIcbXjiNUVFV6YjL6OQP7O9ZsW8=\n=L9lc\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d6e13358dd6a850a644cd391f34af2e262465fe\nparent 25c15cdbe070f49d708f34750df2632e38bd4846\nparent c9c14d0c1f04f888fbd4ec8b254b61fff84db7d4\nauthor Dylan DPC <dylan.dpc@gmail.com> 1619108072 +0200\ncommitter GitHub <noreply@github.com> 1619108072 +0200\n\nRollup merge of #84343 - camsteffen:closure-tree, r=varkor\n\nRemove `ScopeTree::closure_tree`\n\nSeems to be dead code since #50649.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f438e31f577bbb9367b9abbcbb5ce77ce54e979", "html_url": "https://github.com/rust-lang/rust/commit/2f438e31f577bbb9367b9abbcbb5ce77ce54e979", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f438e31f577bbb9367b9abbcbb5ce77ce54e979/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25c15cdbe070f49d708f34750df2632e38bd4846", "url": "https://api.github.com/repos/rust-lang/rust/commits/25c15cdbe070f49d708f34750df2632e38bd4846", "html_url": "https://github.com/rust-lang/rust/commit/25c15cdbe070f49d708f34750df2632e38bd4846"}, {"sha": "c9c14d0c1f04f888fbd4ec8b254b61fff84db7d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9c14d0c1f04f888fbd4ec8b254b61fff84db7d4", "html_url": "https://github.com/rust-lang/rust/commit/c9c14d0c1f04f888fbd4ec8b254b61fff84db7d4"}], "stats": {"total": 49, "additions": 2, "deletions": 47}, "files": [{"sha": "f44267a404bf301ae3ea8ebf884f52b91319617d", "filename": "compiler/rustc_middle/src/middle/region.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2f438e31f577bbb9367b9abbcbb5ce77ce54e979/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f438e31f577bbb9367b9abbcbb5ce77ce54e979/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs?ref=2f438e31f577bbb9367b9abbcbb5ce77ce54e979", "patch": "@@ -235,18 +235,6 @@ pub struct ScopeTree {\n     /// escape into 'static and should have no local cleanup scope.\n     rvalue_scopes: FxHashMap<hir::ItemLocalId, Option<Scope>>,\n \n-    /// Encodes the hierarchy of fn bodies. Every fn body (including\n-    /// closures) forms its own distinct region hierarchy, rooted in\n-    /// the block that is the fn body. This map points from the ID of\n-    /// that root block to the ID of the root block for the enclosing\n-    /// fn, if any. Thus the map structures the fn bodies into a\n-    /// hierarchy based on their lexical mapping. This is used to\n-    /// handle the relationships between regions in a fn and in a\n-    /// closure defined by that fn. See the \"Modeling closures\"\n-    /// section of the README in infer::region_constraints for\n-    /// more details.\n-    closure_tree: FxHashMap<hir::ItemLocalId, hir::ItemLocalId>,\n-\n     /// If there are any `yield` nested within a scope, this map\n     /// stores the `Span` of the last one and its index in the\n     /// postorder of the Visitor traversal on the HIR.\n@@ -356,23 +344,6 @@ impl ScopeTree {\n         self.destruction_scopes.get(&n).cloned()\n     }\n \n-    /// Records that `sub_closure` is defined within `sup_closure`. These IDs\n-    /// should be the ID of the block that is the fn body, which is\n-    /// also the root of the region hierarchy for that fn.\n-    pub fn record_closure_parent(\n-        &mut self,\n-        sub_closure: hir::ItemLocalId,\n-        sup_closure: hir::ItemLocalId,\n-    ) {\n-        debug!(\n-            \"record_closure_parent(sub_closure={:?}, sup_closure={:?})\",\n-            sub_closure, sup_closure\n-        );\n-        assert!(sub_closure != sup_closure);\n-        let previous = self.closure_tree.insert(sub_closure, sup_closure);\n-        assert!(previous.is_none());\n-    }\n-\n     pub fn record_var_scope(&mut self, var: hir::ItemLocalId, lifetime: Scope) {\n         debug!(\"record_var_scope(sub={:?}, sup={:?})\", var, lifetime);\n         assert!(var != lifetime.item_local_id());\n@@ -474,7 +445,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for ScopeTree {\n             ref var_map,\n             ref destruction_scopes,\n             ref rvalue_scopes,\n-            ref closure_tree,\n             ref yield_in_scope,\n         } = *self;\n \n@@ -488,7 +458,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for ScopeTree {\n         var_map.hash_stable(hcx, hasher);\n         destruction_scopes.hash_stable(hcx, hasher);\n         rvalue_scopes.hash_stable(hcx, hasher);\n-        closure_tree.hash_stable(hcx, hasher);\n         yield_in_scope.hash_stable(hcx, hasher);\n     }\n }"}, {"sha": "14a373c59423fbbdeef6940bca513eb8d63fd551", "filename": "compiler/rustc_passes/src/region.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2f438e31f577bbb9367b9abbcbb5ce77ce54e979/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f438e31f577bbb9367b9abbcbb5ce77ce54e979/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fregion.rs?ref=2f438e31f577bbb9367b9abbcbb5ce77ce54e979", "patch": "@@ -23,14 +23,6 @@ use std::mem;\n \n #[derive(Debug, Copy, Clone)]\n pub struct Context {\n-    /// The root of the current region tree. This is typically the id\n-    /// of the innermost fn body. Each fn forms its own disjoint tree\n-    /// in the region hierarchy. These fn bodies are themselves\n-    /// arranged into a tree. See the \"Modeling closures\" section of\n-    /// the README in `rustc_trait_selection::infer::region_constraints`\n-    /// for more details.\n-    root_id: Option<hir::ItemLocalId>,\n-\n     /// The scope that contains any new variables declared, plus its depth in\n     /// the scope tree.\n     var_parent: Option<(Scope, ScopeDepth)>,\n@@ -743,11 +735,6 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n         let outer_pessimistic_yield = mem::replace(&mut self.pessimistic_yield, false);\n         self.terminating_scopes.insert(body.value.hir_id.local_id);\n \n-        if let Some(root_id) = self.cx.root_id {\n-            self.scope_tree.record_closure_parent(body.value.hir_id.local_id, root_id);\n-        }\n-        self.cx.root_id = Some(body.value.hir_id.local_id);\n-\n         self.enter_scope(Scope { id: body.value.hir_id.local_id, data: ScopeData::CallSite });\n         self.enter_scope(Scope { id: body.value.hir_id.local_id, data: ScopeData::Arguments });\n \n@@ -824,7 +811,7 @@ fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> &ScopeTree {\n             tcx,\n             scope_tree: ScopeTree::default(),\n             expr_and_pat_count: 0,\n-            cx: Context { root_id: None, parent: None, var_parent: None },\n+            cx: Context { parent: None, var_parent: None },\n             terminating_scopes: Default::default(),\n             pessimistic_yield: false,\n             fixup_scopes: vec![],"}, {"sha": "ac5ec24eeeeb53eee69ab3c17a50a7a4c3efb9f5", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f438e31f577bbb9367b9abbcbb5ce77ce54e979/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f438e31f577bbb9367b9abbcbb5ce77ce54e979/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=2f438e31f577bbb9367b9abbcbb5ce77ce54e979", "patch": "@@ -439,8 +439,7 @@ fn virtual_call_violation_for_method<'tcx>(\n         return Some(MethodViolationCode::WhereClauseReferencesSelf);\n     }\n \n-    let receiver_ty =\n-        tcx.liberate_late_bound_regions(method.def_id, sig.map_bound(|sig| sig.inputs()[0]));\n+    let receiver_ty = tcx.liberate_late_bound_regions(method.def_id, sig.input(0));\n \n     // Until `unsized_locals` is fully implemented, `self: Self` can't be dispatched on.\n     // However, this is already considered object-safe. We allow it as a special case here."}]}