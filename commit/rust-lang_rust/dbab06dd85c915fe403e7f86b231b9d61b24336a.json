{"sha": "dbab06dd85c915fe403e7f86b231b9d61b24336a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYWIwNmRkODVjOTE1ZmU0MDNlN2Y4NmIyMzFiOWQ2MWIyNDMzNmE=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-11T15:11:08Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-11T15:11:08Z"}, "message": "Deny bare trait objects in in src/libpanic_unwind", "tree": {"sha": "064136f9399deac303d945e764bd51e2f5bc78df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/064136f9399deac303d945e764bd51e2f5bc78df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbab06dd85c915fe403e7f86b231b9d61b24336a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbab06dd85c915fe403e7f86b231b9d61b24336a", "html_url": "https://github.com/rust-lang/rust/commit/dbab06dd85c915fe403e7f86b231b9d61b24336a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbab06dd85c915fe403e7f86b231b9d61b24336a/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11432ba98043ee0ade961bdedb4b785bf06c086e", "url": "https://api.github.com/repos/rust-lang/rust/commits/11432ba98043ee0ade961bdedb4b785bf06c086e", "html_url": "https://github.com/rust-lang/rust/commit/11432ba98043ee0ade961bdedb4b785bf06c086e"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "a24c659689139d6f7b6f3760f109ad0b1b56b647", "filename": "src/libpanic_unwind/dwarf/eh.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbab06dd85c915fe403e7f86b231b9d61b24336a/src%2Flibpanic_unwind%2Fdwarf%2Feh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbab06dd85c915fe403e7f86b231b9d61b24336a/src%2Flibpanic_unwind%2Fdwarf%2Feh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fdwarf%2Feh.rs?ref=dbab06dd85c915fe403e7f86b231b9d61b24336a", "patch": "@@ -48,8 +48,8 @@ pub const DW_EH_PE_indirect: u8 = 0x80;\n pub struct EHContext<'a> {\n     pub ip: usize, // Current instruction pointer\n     pub func_start: usize, // Address of the current function\n-    pub get_text_start: &'a Fn() -> usize, // Get address of the code section\n-    pub get_data_start: &'a Fn() -> usize, // Get address of the data section\n+    pub get_text_start: &'a dyn Fn() -> usize, // Get address of the code section\n+    pub get_data_start: &'a dyn Fn() -> usize, // Get address of the data section\n }\n \n pub enum EHAction {"}, {"sha": "87efc23abc81d7bec015bfff038a1e2fa2c3f9ed", "filename": "src/libpanic_unwind/emcc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbab06dd85c915fe403e7f86b231b9d61b24336a/src%2Flibpanic_unwind%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbab06dd85c915fe403e7f86b231b9d61b24336a/src%2Flibpanic_unwind%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Femcc.rs?ref=dbab06dd85c915fe403e7f86b231b9d61b24336a", "patch": "@@ -29,20 +29,20 @@ pub fn payload() -> *mut u8 {\n     ptr::null_mut()\n }\n \n-pub unsafe fn cleanup(ptr: *mut u8) -> Box<Any + Send> {\n+pub unsafe fn cleanup(ptr: *mut u8) -> Box<dyn Any + Send> {\n     assert!(!ptr.is_null());\n     let ex = ptr::read(ptr as *mut _);\n     __cxa_free_exception(ptr as *mut _);\n     ex\n }\n \n-pub unsafe fn panic(data: Box<Any + Send>) -> u32 {\n+pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n     let sz = mem::size_of_val(&data);\n     let exception = __cxa_allocate_exception(sz);\n     if exception == ptr::null_mut() {\n         return uw::_URC_FATAL_PHASE1_ERROR as u32;\n     }\n-    let exception = exception as *mut Box<Any + Send>;\n+    let exception = exception as *mut Box<dyn Any + Send>;\n     ptr::write(exception, data);\n     __cxa_throw(exception as *mut _, ptr::null_mut(), ptr::null_mut());\n "}, {"sha": "11ebcf5c01ea79e3ca62052577c394afd3c951c8", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbab06dd85c915fe403e7f86b231b9d61b24336a/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbab06dd85c915fe403e7f86b231b9d61b24336a/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=dbab06dd85c915fe403e7f86b231b9d61b24336a", "patch": "@@ -67,10 +67,10 @@ use dwarf::eh::{self, EHContext, EHAction};\n #[repr(C)]\n struct Exception {\n     _uwe: uw::_Unwind_Exception,\n-    cause: Option<Box<Any + Send>>,\n+    cause: Option<Box<dyn Any + Send>>,\n }\n \n-pub unsafe fn panic(data: Box<Any + Send>) -> u32 {\n+pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n     let exception = Box::new(Exception {\n         _uwe: uw::_Unwind_Exception {\n             exception_class: rust_exception_class(),\n@@ -94,7 +94,7 @@ pub fn payload() -> *mut u8 {\n     ptr::null_mut()\n }\n \n-pub unsafe fn cleanup(ptr: *mut u8) -> Box<Any + Send> {\n+pub unsafe fn cleanup(ptr: *mut u8) -> Box<dyn Any + Send> {\n     let my_ep = ptr as *mut Exception;\n     let cause = (*my_ep).cause.take();\n     uw::_Unwind_DeleteException(ptr as *mut _);"}, {"sha": "f8cd29fc0861fe4d7a43b8fe646a6bb2d5322166", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbab06dd85c915fe403e7f86b231b9d61b24336a/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbab06dd85c915fe403e7f86b231b9d61b24336a/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=dbab06dd85c915fe403e7f86b231b9d61b24336a", "patch": "@@ -22,6 +22,7 @@\n //! More documentation about each implementation can be found in the respective\n //! module.\n \n+#![deny(bare_trait_objects)]\n #![no_std]\n #![unstable(feature = \"panic_unwind\", issue = \"32837\")]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -117,6 +118,6 @@ pub unsafe extern \"C\" fn __rust_maybe_catch_panic(f: fn(*mut u8),\n #[no_mangle]\n #[unwind(allowed)]\n pub unsafe extern \"C\" fn __rust_start_panic(payload: usize) -> u32 {\n-    let payload = payload as *mut &mut BoxMeUp;\n+    let payload = payload as *mut &mut dyn BoxMeUp;\n     imp::panic(Box::from_raw((*payload).box_me_up()))\n }"}, {"sha": "8cbc4a623fa052ebf44664614dfeac7f1e036cfd", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbab06dd85c915fe403e7f86b231b9d61b24336a/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbab06dd85c915fe403e7f86b231b9d61b24336a/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=dbab06dd85c915fe403e7f86b231b9d61b24336a", "patch": "@@ -43,7 +43,7 @@\n //!   throwing. Note that throwing an exception into Rust is undefined behavior\n //!   anyway, so this should be fine.\n //! * We've got some data to transmit across the unwinding boundary,\n-//!   specifically a `Box<Any + Send>`. Like with Dwarf exceptions\n+//!   specifically a `Box<dyn Any + Send>`. Like with Dwarf exceptions\n //!   these two pointers are stored as a payload in the exception itself. On\n //!   MSVC, however, there's no need for an extra heap allocation because the\n //!   call stack is preserved while filter functions are being executed. This\n@@ -243,7 +243,7 @@ static mut TYPE_DESCRIPTOR2: _TypeDescriptor = _TypeDescriptor {\n     name: imp::NAME2,\n };\n \n-pub unsafe fn panic(data: Box<Any + Send>) -> u32 {\n+pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n     use core::intrinsics::atomic_store;\n \n     // _CxxThrowException executes entirely on this stack frame, so there's no\n@@ -297,7 +297,7 @@ pub fn payload() -> [u64; 2] {\n     [0; 2]\n }\n \n-pub unsafe fn cleanup(payload: [u64; 2]) -> Box<Any + Send> {\n+pub unsafe fn cleanup(payload: [u64; 2]) -> Box<dyn Any + Send> {\n     mem::transmute(raw::TraitObject {\n         data: payload[0] as *mut _,\n         vtable: payload[1] as *mut _,"}, {"sha": "0b08e54c6739a0684c41cf9478e87b35027f8e82", "filename": "src/libpanic_unwind/seh64_gnu.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbab06dd85c915fe403e7f86b231b9d61b24336a/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbab06dd85c915fe403e7f86b231b9d61b24336a/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh64_gnu.rs?ref=dbab06dd85c915fe403e7f86b231b9d61b24336a", "patch": "@@ -37,10 +37,10 @@ const RUST_PANIC: c::DWORD = ETYPE | (1 << 24) | MAGIC;\n \n #[repr(C)]\n struct PanicData {\n-    data: Box<Any + Send>,\n+    data: Box<dyn Any + Send>,\n }\n \n-pub unsafe fn panic(data: Box<Any + Send>) -> u32 {\n+pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n     let panic_ctx = Box::new(PanicData { data: data });\n     let params = [Box::into_raw(panic_ctx) as c::ULONG_PTR];\n     c::RaiseException(RUST_PANIC,\n@@ -54,7 +54,7 @@ pub fn payload() -> *mut u8 {\n     ptr::null_mut()\n }\n \n-pub unsafe fn cleanup(ptr: *mut u8) -> Box<Any + Send> {\n+pub unsafe fn cleanup(ptr: *mut u8) -> Box<dyn Any + Send> {\n     let panic_ctx = Box::from_raw(ptr as *mut PanicData);\n     return panic_ctx.data;\n }"}, {"sha": "7150560b4a13d809d29a0e4d0ab3cc2d3e9ad640", "filename": "src/libpanic_unwind/wasm32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbab06dd85c915fe403e7f86b231b9d61b24336a/src%2Flibpanic_unwind%2Fwasm32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbab06dd85c915fe403e7f86b231b9d61b24336a/src%2Flibpanic_unwind%2Fwasm32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fwasm32.rs?ref=dbab06dd85c915fe403e7f86b231b9d61b24336a", "patch": "@@ -20,10 +20,10 @@ pub fn payload() -> *mut u8 {\n     0 as *mut u8\n }\n \n-pub unsafe fn cleanup(_ptr: *mut u8) -> Box<Any + Send> {\n+pub unsafe fn cleanup(_ptr: *mut u8) -> Box<dyn Any + Send> {\n     intrinsics::abort()\n }\n \n-pub unsafe fn panic(_data: Box<Any + Send>) -> u32 {\n+pub unsafe fn panic(_data: Box<dyn Any + Send>) -> u32 {\n     intrinsics::abort()\n }"}]}