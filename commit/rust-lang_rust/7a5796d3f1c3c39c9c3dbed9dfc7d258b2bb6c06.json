{"sha": "7a5796d3f1c3c39c9c3dbed9dfc7d258b2bb6c06", "node_id": "C_kwDOAAsO6NoAKDdhNTc5NmQzZjFjM2MzOWM5YzNkYmVkOWRmYzdkMjU4YjJiYjZjMDY", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-01-05T05:40:46Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-01-20T23:28:07Z"}, "message": "use lazy_static to compile `Regex::new` instances once instead on each test", "tree": {"sha": "ea7ab7623a149b732903075d9a062f53764b9832", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea7ab7623a149b732903075d9a062f53764b9832"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a5796d3f1c3c39c9c3dbed9dfc7d258b2bb6c06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a5796d3f1c3c39c9c3dbed9dfc7d258b2bb6c06", "html_url": "https://github.com/rust-lang/rust/commit/7a5796d3f1c3c39c9c3dbed9dfc7d258b2bb6c06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a5796d3f1c3c39c9c3dbed9dfc7d258b2bb6c06/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8985e5ee825a2fb1e5eb2050f0b3fd8e2913d322", "url": "https://api.github.com/repos/rust-lang/rust/commits/8985e5ee825a2fb1e5eb2050f0b3fd8e2913d322", "html_url": "https://github.com/rust-lang/rust/commit/8985e5ee825a2fb1e5eb2050f0b3fd8e2913d322"}], "stats": {"total": 63, "additions": 32, "deletions": 31}, "files": [{"sha": "d06e48df11b52b3bb67ddb0008181228b63df889", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/7a5796d3f1c3c39c9c3dbed9dfc7d258b2bb6c06/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a5796d3f1c3c39c9c3dbed9dfc7d258b2bb6c06/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=7a5796d3f1c3c39c9c3dbed9dfc7d258b2bb6c06", "patch": "@@ -3486,10 +3486,12 @@ impl<'test> TestCx<'test> {\n         // with placeholders as we do not want tests needing updated when compiler source code\n         // changes.\n         // eg. $SRC_DIR/libcore/mem.rs:323:14 becomes $SRC_DIR/libcore/mem.rs:LL:COL\n-        normalized = Regex::new(\"SRC_DIR(.+):\\\\d+:\\\\d+(: \\\\d+:\\\\d+)?\")\n-            .unwrap()\n-            .replace_all(&normalized, \"SRC_DIR$1:LL:COL\")\n-            .into_owned();\n+        lazy_static! {\n+            static ref SRC_DIR_RE: Regex =\n+                Regex::new(\"SRC_DIR(.+):\\\\d+:\\\\d+(: \\\\d+:\\\\d+)?\").unwrap();\n+        }\n+\n+        normalized = SRC_DIR_RE.replace_all(&normalized, \"SRC_DIR$1:LL:COL\").into_owned();\n \n         normalized = Self::normalize_platform_differences(&normalized);\n         normalized = normalized.replace(\"\\t\", \"\\\\t\"); // makes tabs visible\n@@ -3498,38 +3500,37 @@ impl<'test> TestCx<'test> {\n         // since they duplicate actual errors and make the output hard to read.\n         // This mirrors the regex in src/tools/tidy/src/style.rs, please update\n         // both if either are changed.\n-        normalized =\n-            Regex::new(\"\\\\s*//(\\\\[.*\\\\])?~.*\").unwrap().replace_all(&normalized, \"\").into_owned();\n+        lazy_static! {\n+            static ref ANNOTATION_RE: Regex = Regex::new(\"\\\\s*//(\\\\[.*\\\\])?~.*\").unwrap();\n+        }\n+\n+        normalized = ANNOTATION_RE.replace_all(&normalized, \"\").into_owned();\n+\n+        // This code normalizes various hashes in v0 symbol mangling that is\n+        // emitted in the ui and mir-opt tests.\n+        lazy_static! {\n+            static ref V0_CRATE_HASH_PREFIX_RE: Regex =\n+                Regex::new(r\"_R.*?Cs[0-9a-zA-Z]+_\").unwrap();\n+            static ref V0_CRATE_HASH_RE: Regex = Regex::new(r\"Cs[0-9a-zA-Z]+_\").unwrap();\n+        }\n \n-        // This code normalizes various hashes in both\n-        // v0 and legacy symbol names that are emitted in\n-        // the ui and mir-opt tests.\n-        //\n-        // Some tests still require normalization with headers.\n-        const V0_CRATE_HASH_PREFIX_REGEX: &str = r\"_R.*?Cs[0-9a-zA-Z]+_\";\n-        const V0_CRATE_HASH_REGEX: &str = r\"Cs[0-9a-zA-Z]+_\";\n         const V0_CRATE_HASH_PLACEHOLDER: &str = r\"CsCRATE_HASH_\";\n-        const V0_BACK_REF_PREFIX_REGEX: &str = r\"\\(_R.*?B[0-9a-zA-Z]_\";\n-        const V0_BACK_REF_REGEX: &str = r\"B[0-9a-zA-Z]_\";\n-        const V0_BACK_REF_PLACEHOLDER: &str = r\"B<REF>_\";\n-        // Normalize v0 crate hashes (see RFC 2603)\n-        let symbol_mangle_prefix_re = Regex::new(V0_CRATE_HASH_PREFIX_REGEX).unwrap();\n-        if symbol_mangle_prefix_re.is_match(&normalized) {\n+        if V0_CRATE_HASH_PREFIX_RE.is_match(&normalized) {\n             // Normalize crate hash\n-            normalized = Regex::new(V0_CRATE_HASH_REGEX)\n-                .unwrap()\n-                .replace_all(&normalized, V0_CRATE_HASH_PLACEHOLDER)\n-                .into_owned();\n+            normalized =\n+                V0_CRATE_HASH_RE.replace_all(&normalized, V0_CRATE_HASH_PLACEHOLDER).into_owned();\n         }\n-        let back_ref_prefix_re = Regex::new(V0_BACK_REF_PREFIX_REGEX).unwrap();\n-        if back_ref_prefix_re.is_match(&normalized) {\n+\n+        lazy_static! {\n+            static ref V0_BACK_REF_PREFIX_RE: Regex = Regex::new(r\"\\(_R.*?B[0-9a-zA-Z]_\").unwrap();\n+            static ref V0_BACK_REF_RE: Regex = Regex::new(r\"B[0-9a-zA-Z]_\").unwrap();\n+        }\n+\n+        const V0_BACK_REF_PLACEHOLDER: &str = r\"B<REF>_\";\n+        if V0_BACK_REF_PREFIX_RE.is_match(&normalized) {\n             // Normalize back references (see RFC 2603)\n-            let back_ref_regex = format!(\"{}\", V0_BACK_REF_REGEX);\n-            let back_ref_placeholder = format!(\"{}\", V0_BACK_REF_PLACEHOLDER);\n-            normalized = Regex::new(&back_ref_regex)\n-                .unwrap()\n-                .replace_all(&normalized, back_ref_placeholder)\n-                .into_owned();\n+            normalized =\n+                V0_BACK_REF_RE.replace_all(&normalized, V0_BACK_REF_PLACEHOLDER).into_owned();\n         }\n \n         // Custom normalization rules"}]}