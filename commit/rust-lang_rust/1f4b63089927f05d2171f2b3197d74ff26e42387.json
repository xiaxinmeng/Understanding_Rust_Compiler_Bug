{"sha": "1f4b63089927f05d2171f2b3197d74ff26e42387", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNGI2MzA4OTkyN2YwNWQyMTcxZjJiMzE5N2Q3NGZmMjZlNDIzODc=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2017-10-12T12:51:31Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2017-11-03T18:13:20Z"}, "message": "add `auto` keyword, parse `auto trait`, lower to HIR\n\nAdds an `IsAuto` field to `ItemTrait` which flags if the trait was\ndeclared as an `auto trait`.\n\nAuto traits cannot have generics nor super traits.", "tree": {"sha": "6bcb85457d9083864757f91f407546a3ec863f59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bcb85457d9083864757f91f407546a3ec863f59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f4b63089927f05d2171f2b3197d74ff26e42387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f4b63089927f05d2171f2b3197d74ff26e42387", "html_url": "https://github.com/rust-lang/rust/commit/1f4b63089927f05d2171f2b3197d74ff26e42387", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f4b63089927f05d2171f2b3197d74ff26e42387/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06506bb751ae952b67d76a2ebe21edb8ec96acb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/06506bb751ae952b67d76a2ebe21edb8ec96acb9", "html_url": "https://github.com/rust-lang/rust/commit/06506bb751ae952b67d76a2ebe21edb8ec96acb9"}], "stats": {"total": 153, "additions": 122, "deletions": 31}, "files": [{"sha": "c23a5fb1f7ebba3338c4aeb6343b617445b5cc81", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=1f4b63089927f05d2171f2b3197d74ff26e42387", "patch": "@@ -520,7 +520,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_id(item.id);\n             visitor.visit_variant_data(struct_definition, item.name, generics, item.id, item.span);\n         }\n-        ItemTrait(_, ref generics, ref bounds, ref trait_item_refs) => {\n+        ItemTrait(.., ref generics, ref bounds, ref trait_item_refs) => {\n             visitor.visit_id(item.id);\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_ty_param_bound, bounds);"}, {"sha": "7214904887e43ea3ed67e3a52ca85e017c1010f5", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=1f4b63089927f05d2171f2b3197d74ff26e42387", "patch": "@@ -198,7 +198,7 @@ impl<'a> LoweringContext<'a> {\n                     ItemKind::Union(_, ref generics) |\n                     ItemKind::Enum(_, ref generics) |\n                     ItemKind::Ty(_, ref generics) |\n-                    ItemKind::Trait(_, ref generics, ..) => {\n+                    ItemKind::Trait(_, _, ref generics, ..) => {\n                         let def_id = self.lctx.resolver.definitions().local_def_id(item.id);\n                         let count = generics.lifetimes.len();\n                         self.lctx.type_def_lifetime_params.insert(def_id, count);\n@@ -1515,10 +1515,11 @@ impl<'a> LoweringContext<'a> {\n                               self.lower_ty(ty),\n                               new_impl_items)\n             }\n-            ItemKind::Trait(unsafety, ref generics, ref bounds, ref items) => {\n+            ItemKind::Trait(is_auto, unsafety, ref generics, ref bounds, ref items) => {\n                 let bounds = self.lower_bounds(bounds);\n                 let items = items.iter().map(|item| self.lower_trait_item_ref(item)).collect();\n-                hir::ItemTrait(self.lower_unsafety(unsafety),\n+                hir::ItemTrait(self.lower_is_auto(is_auto),\n+                               self.lower_unsafety(unsafety),\n                                self.lower_generics(generics),\n                                bounds,\n                                items)\n@@ -1741,6 +1742,13 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n+    fn lower_is_auto(&mut self, u: IsAuto) -> hir::IsAuto {\n+        match u {\n+            IsAuto::Yes => hir::IsAuto::Yes,\n+            IsAuto::No => hir::IsAuto::No,\n+        }\n+    }\n+\n     fn lower_unsafety(&mut self, u: Unsafety) -> hir::Unsafety {\n         match u {\n             Unsafety::Unsafe => hir::Unsafety::Unsafe,"}, {"sha": "8b75735c61cfc26731ccad14a3eef13154216b5a", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=1f4b63089927f05d2171f2b3197d74ff26e42387", "patch": "@@ -1500,6 +1500,13 @@ pub struct FnDecl {\n     pub has_implicit_self: bool,\n }\n \n+/// Is the trait definition an auto trait?\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum IsAuto {\n+    Yes,\n+    No\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Unsafety {\n     Unsafe,\n@@ -1811,7 +1818,7 @@ pub enum Item_ {\n     /// A union definition, e.g. `union Foo<A, B> {x: A, y: B}`\n     ItemUnion(VariantData, Generics),\n     /// Represents a Trait Declaration\n-    ItemTrait(Unsafety, Generics, TyParamBounds, HirVec<TraitItemRef>),\n+    ItemTrait(IsAuto, Unsafety, Generics, TyParamBounds, HirVec<TraitItemRef>),\n \n     /// Auto trait implementations\n     ///"}, {"sha": "7b4881f5486dc0b756ad233a7a16176a5a10e951", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=1f4b63089927f05d2171f2b3197d74ff26e42387", "patch": "@@ -717,9 +717,10 @@ impl<'a> State<'a> {\n                 }\n                 self.bclose(item.span)?;\n             }\n-            hir::ItemTrait(unsafety, ref generics, ref bounds, ref trait_items) => {\n+            hir::ItemTrait(is_auto, unsafety, ref generics, ref bounds, ref trait_items) => {\n                 self.head(\"\")?;\n                 self.print_visibility(&item.vis)?;\n+                self.print_is_auto(is_auto)?;\n                 self.print_unsafety(unsafety)?;\n                 self.word_nbsp(\"trait\")?;\n                 self.print_name(item.name)?;\n@@ -2274,6 +2275,13 @@ impl<'a> State<'a> {\n             hir::Unsafety::Unsafe => self.word_nbsp(\"unsafe\"),\n         }\n     }\n+\n+    pub fn print_is_auto(&mut self, s: hir::IsAuto) -> io::Result<()> {\n+        match s {\n+            hir::IsAuto::Yes => self.word_nbsp(\"auto\"),\n+            hir::IsAuto::No => Ok(()),\n+        }\n+    }\n }\n \n // Dup'ed from parse::classify, but adapted for the HIR."}, {"sha": "f0fe6205fb6d0bfb29624df39c7cd28c64a07103", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=1f4b63089927f05d2171f2b3197d74ff26e42387", "patch": "@@ -944,7 +944,7 @@ impl_stable_hash_for!(enum hir::Item_ {\n     ItemEnum(enum_def, generics),\n     ItemStruct(variant_data, generics),\n     ItemUnion(variant_data, generics),\n-    ItemTrait(unsafety, generics, bounds, item_refs),\n+    ItemTrait(is_auto, unsafety, generics, bounds, item_refs),\n     ItemAutoImpl(unsafety, trait_ref),\n     ItemImpl(unsafety, impl_polarity, impl_defaultness, generics, trait_ref, ty, impl_item_refs)\n });\n@@ -1126,6 +1126,10 @@ impl_stable_hash_for!(enum hir::Mutability {\n     MutImmutable\n });\n \n+impl_stable_hash_for!(enum hir::IsAuto {\n+    Yes,\n+    No\n+});\n \n impl_stable_hash_for!(enum hir::Unsafety {\n     Unsafe,"}, {"sha": "4c7ce4c09e25b4372b935ad8e4d845f33635d108", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=1f4b63089927f05d2171f2b3197d74ff26e42387", "patch": "@@ -332,7 +332,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             hir::ItemEnum(_, ref generics) |\n             hir::ItemStruct(_, ref generics) |\n             hir::ItemUnion(_, ref generics) |\n-            hir::ItemTrait(_, ref generics, ..) |\n+            hir::ItemTrait(_, _, ref generics, ..) |\n             hir::ItemImpl(_, _, _, ref generics, ..) => {\n                 // These kinds of items have only early bound lifetime parameters.\n                 let mut index = if let hir::ItemTrait(..) = item.node {\n@@ -688,7 +688,7 @@ fn compute_object_lifetime_defaults(sess: &Session, hir_map: &Map)\n             hir::ItemUnion(_, ref generics) |\n             hir::ItemEnum(_, ref generics) |\n             hir::ItemTy(_, ref generics) |\n-            hir::ItemTrait(_, ref generics, ..) => {\n+            hir::ItemTrait(_, _, ref generics, ..) => {\n                 let result = object_lifetime_defaults_for_item(hir_map, generics);\n \n                 // Debugging aid.\n@@ -844,7 +844,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 index += 1; // Self comes first.\n             }\n             match parent.node {\n-                hir::ItemTrait(_, ref generics, ..) |\n+                hir::ItemTrait(_, _, ref generics, ..) |\n                 hir::ItemImpl(_, _, _, ref generics, ..) => {\n                     index += (generics.lifetimes.len() + generics.ty_params.len()) as u32;\n                 }"}, {"sha": "994e85d1d368ecdb4b5dacaa5a06e43d408ad2a9", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=1f4b63089927f05d2171f2b3197d74ff26e42387", "patch": "@@ -228,7 +228,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnsafeCode {\n \n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         match it.node {\n-            hir::ItemTrait(hir::Unsafety::Unsafe, ..) => {\n+            hir::ItemTrait(_, hir::Unsafety::Unsafe, ..) => {\n                 self.report_unsafe(cx, it.span, \"declaration of an `unsafe` trait\")\n             }\n "}, {"sha": "73b2c64122f07356717dac1e3d830a14771ad8b4", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1f4b63089927f05d2171f2b3197d74ff26e42387", "patch": "@@ -1854,7 +1854,7 @@ impl<'a> Resolver<'a> {\n                                             item.id,\n                                             impl_items),\n \n-            ItemKind::Trait(_, ref generics, ref bounds, ref trait_items) => {\n+            ItemKind::Trait(.., ref generics, ref bounds, ref trait_items) => {\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind), |this| {\n                     let local_def_id = this.definitions.local_def_id(item.id);"}, {"sha": "41288c88ede90c05c762d9512a413b258e76e881", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=1f4b63089927f05d2171f2b3197d74ff26e42387", "patch": "@@ -1232,7 +1232,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                  ref impl_items) => {\n                 self.process_impl(item, ty_params, trait_ref, &typ, impl_items)\n             }\n-            Trait(_, ref generics, ref trait_refs, ref methods) =>\n+            Trait(_, _, ref generics, ref trait_refs, ref methods) =>\n                 self.process_trait(item, generics, trait_refs, methods),\n             Mod(ref m) => {\n                 self.process_mod(item);"}, {"sha": "80c1b0ebeb0b2d307518dd11bd0f27fbebe5477b", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=1f4b63089927f05d2171f2b3197d74ff26e42387", "patch": "@@ -477,8 +477,13 @@ impl Sig for ast::Item {\n                 sig.text.push_str(\" {}\");\n                 Ok(sig)\n             }\n-            ast::ItemKind::Trait(unsafety, ref generics, ref bounds, _) => {\n+            ast::ItemKind::Trait(is_auto, unsafety, ref generics, ref bounds, _) => {\n                 let mut text = String::new();\n+\n+                if is_auto == ast::IsAuto::Yes {\n+                    text.push_str(\"auto \");\n+                }\n+\n                 if unsafety == ast::Unsafety::Unsafe {\n                     text.push_str(\"unsafe \");\n                 }"}, {"sha": "72b40d877085b84480b35273e02e6dd6523169e1", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=1f4b63089927f05d2171f2b3197d74ff26e42387", "patch": "@@ -273,7 +273,7 @@ fn type_param_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 ItemEnum(_, ref generics) |\n                 ItemStruct(_, ref generics) |\n                 ItemUnion(_, ref generics) => generics,\n-                ItemTrait(_, ref generics, ..) => {\n+                ItemTrait(_, _, ref generics, ..) => {\n                     // Implied `Self: Trait` and supertrait bounds.\n                     if param_id == item_node_id {\n                         result.predicates.push(ty::TraitRef {\n@@ -670,7 +670,7 @@ fn super_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     };\n \n     let (generics, bounds) = match item.node {\n-        hir::ItemTrait(_, ref generics, ref supertraits, _) => (generics, supertraits),\n+        hir::ItemTrait(.., ref generics, ref supertraits, _) => (generics, supertraits),\n         _ => span_bug!(item.span,\n                        \"super_predicates invoked on non-trait\"),\n     };\n@@ -713,7 +713,7 @@ fn trait_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let item = tcx.hir.expect_item(node_id);\n \n     let unsafety = match item.node {\n-        hir::ItemTrait(unsafety, ..) => unsafety,\n+        hir::ItemTrait(_, unsafety, ..) => unsafety,\n         _ => span_bug!(item.span, \"trait_def_of_item invoked on non-trait\"),\n     };\n \n@@ -888,7 +888,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     generics\n                 }\n \n-                ItemTrait(_, ref generics, ..) => {\n+                ItemTrait(_, _, ref generics, ..) => {\n                     // Add in the self type parameter.\n                     //\n                     // Something of a hack: use the node id for the trait, also as\n@@ -1350,7 +1350,7 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     generics\n                 }\n \n-                ItemTrait(_, ref generics, .., ref items) => {\n+                ItemTrait(_, _, ref generics, .., ref items) => {\n                     is_trait = Some((ty::TraitRef {\n                         def_id,\n                         substs: Substs::identity_for_item(tcx, def_id)"}, {"sha": "99dff4edaade751cfcf5492bcd0969ee1f2e2428", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1f4b63089927f05d2171f2b3197d74ff26e42387", "patch": "@@ -1581,6 +1581,13 @@ impl FnDecl {\n     }\n }\n \n+/// Is the trait definition an auto trait?\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum IsAuto {\n+    Yes,\n+    No\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Unsafety {\n     Unsafe,\n@@ -1942,8 +1949,8 @@ pub enum ItemKind {\n     Union(VariantData, Generics),\n     /// A Trait declaration (`trait` or `pub trait`).\n     ///\n-    /// E.g. `trait Foo { .. }` or `trait Foo<T> { .. }`\n-    Trait(Unsafety, Generics, TyParamBounds, Vec<TraitItem>),\n+    /// E.g. `trait Foo { .. }`, `trait Foo<T> { .. }` or `auto trait Foo {}`\n+    Trait(IsAuto, Unsafety, Generics, TyParamBounds, Vec<TraitItem>),\n     /// Auto trait implementation.\n     ///\n     /// E.g. `impl Trait for .. {}` or `impl<T> Trait<T> for .. {}`"}, {"sha": "cc63bffec48a1652eca563e33bc0b58096eb8768", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=1f4b63089927f05d2171f2b3197d74ff26e42387", "patch": "@@ -926,7 +926,8 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n             folder.fold_ty(ty),\n             impl_items.move_flat_map(|item| folder.fold_impl_item(item)),\n         ),\n-        ItemKind::Trait(unsafety, generics, bounds, items) => ItemKind::Trait(\n+        ItemKind::Trait(is_auto, unsafety, generics, bounds, items) => ItemKind::Trait(\n+            is_auto,\n             unsafety,\n             folder.fold_generics(generics),\n             folder.fold_bounds(bounds),"}, {"sha": "c94fcf461c73a76c65155a41df7d30167ff030cb", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1f4b63089927f05d2171f2b3197d74ff26e42387", "patch": "@@ -16,12 +16,13 @@ use ast::{Mod, Arg, Arm, Attribute, BindingMode, TraitItemKind};\n use ast::Block;\n use ast::{BlockCheckMode, CaptureBy};\n use ast::{Constness, Crate};\n+use ast::Generics;\n use ast::Defaultness;\n use ast::EnumDef;\n use ast::{Expr, ExprKind, RangeLimits};\n use ast::{Field, FnDecl};\n use ast::{ForeignItem, ForeignItemKind, FunctionRetTy};\n-use ast::{Ident, ImplItem, Item, ItemKind};\n+use ast::{Ident, ImplItem, IsAuto, Item, ItemKind};\n use ast::{Lifetime, LifetimeDef, Lit, LitKind, UintTy};\n use ast::Local;\n use ast::MacStmtStyle;\n@@ -5078,7 +5079,17 @@ impl<'a> Parser<'a> {\n                 }\n             }\n         }\n-        Ok((ident, ItemKind::Trait(unsafety, tps, bounds, trait_items), None))\n+        Ok((ident, ItemKind::Trait(IsAuto::No, unsafety, tps, bounds, trait_items), None))\n+    }\n+\n+    fn parse_item_auto_trait(&mut self, unsafety: Unsafety) -> PResult<'a, ItemInfo> {\n+        let ident = self.parse_ident()?;\n+        self.expect(&token::OpenDelim(token::Brace))?;\n+        self.expect(&token::CloseDelim(token::Brace))?;\n+        // Auto traits cannot have generics, super traits nor contain items.\n+        Ok((ident,\n+            ItemKind::Trait(IsAuto::Yes, unsafety, Generics::default(), Vec::new(), Vec::new()),\n+            None))\n     }\n \n     /// Parses items implementations variants\n@@ -6127,6 +6138,37 @@ impl<'a> Parser<'a> {\n                                     maybe_append(attrs, extra_attrs));\n             return Ok(Some(item));\n         }\n+        if self.eat_keyword(keywords::Auto) {\n+            self.expect_keyword(keywords::Trait)?;\n+            // AUTO TRAIT ITEM\n+            let (ident,\n+                 item_,\n+                 extra_attrs) = self.parse_item_auto_trait(ast::Unsafety::Normal)?;\n+            let prev_span = self.prev_span;\n+            let item = self.mk_item(lo.to(prev_span),\n+                                    ident,\n+                                    item_,\n+                                    visibility,\n+                                    maybe_append(attrs, extra_attrs));\n+            return Ok(Some(item));\n+        }\n+        if self.check_keyword(keywords::Unsafe) &&\n+            self.look_ahead(1, |t| t.is_keyword(keywords::Auto)) {\n+            self.expect_keyword(keywords::Unsafe)?;\n+            self.expect_keyword(keywords::Auto)?;\n+            self.expect_keyword(keywords::Trait)?;\n+            // UNSAFE AUTO TRAIT ITEM\n+            let (ident,\n+                 item_,\n+                 extra_attrs) = self.parse_item_auto_trait(ast::Unsafety::Unsafe)?;\n+            let prev_span = self.prev_span;\n+            let item = self.mk_item(lo.to(prev_span),\n+                                    ident,\n+                                    item_,\n+                                    visibility,\n+                                    maybe_append(attrs, extra_attrs));\n+            return Ok(Some(item));\n+        }\n         if self.eat_keyword(keywords::Struct) {\n             // STRUCT ITEM\n             let (ident, item_, extra_attrs) = self.parse_item_struct()?;"}, {"sha": "1fbc632f8e57cd5591e4d0c4af7442d376a88fc9", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1f4b63089927f05d2171f2b3197d74ff26e42387", "patch": "@@ -1338,9 +1338,10 @@ impl<'a> State<'a> {\n                 }\n                 self.bclose(item.span)?;\n             }\n-            ast::ItemKind::Trait(unsafety, ref generics, ref bounds, ref trait_items) => {\n+            ast::ItemKind::Trait(is_auto, unsafety, ref generics, ref bounds, ref trait_items) => {\n                 self.head(\"\")?;\n                 self.print_visibility(&item.vis)?;\n+                self.print_is_auto(is_auto)?;\n                 self.print_unsafety(unsafety)?;\n                 self.word_nbsp(\"trait\")?;\n                 self.print_ident(item.ident)?;\n@@ -3123,6 +3124,13 @@ impl<'a> State<'a> {\n             ast::Unsafety::Unsafe => self.word_nbsp(\"unsafe\"),\n         }\n     }\n+\n+    pub fn print_is_auto(&mut self, s: ast::IsAuto) -> io::Result<()> {\n+        match s {\n+            ast::IsAuto::Yes => self.word_nbsp(\"auto\"),\n+            ast::IsAuto::No => Ok(()),\n+        }\n+    }\n }\n \n fn repeat(s: &str, n: usize) -> String { iter::repeat(s).take(n).collect() }"}, {"sha": "c2e90f0bb13a32f30d19bf688c7a13e89ecc35a2", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=1f4b63089927f05d2171f2b3197d74ff26e42387", "patch": "@@ -300,7 +300,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_variant_data(struct_definition, item.ident,\n                                      generics, item.id, item.span);\n         }\n-        ItemKind::Trait(_, ref generics, ref bounds, ref methods) => {\n+        ItemKind::Trait(.., ref generics, ref bounds, ref methods) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n             walk_list!(visitor, visit_trait_item, methods);"}, {"sha": "26e6f27e20f40d5f7774d52c12bc8f19450bcc7e", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4b63089927f05d2171f2b3197d74ff26e42387/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=1f4b63089927f05d2171f2b3197d74ff26e42387", "patch": "@@ -309,11 +309,12 @@ declare_keywords! {\n     (54, Yield,          \"yield\")\n \n     // Weak keywords, have special meaning only in specific contexts.\n-    (55, Catch,          \"catch\")\n-    (56, Default,        \"default\")\n-    (57, Dyn,            \"dyn\")\n-    (58, StaticLifetime, \"'static\")\n-    (59, Union,          \"union\")\n+    (55, Auto,           \"auto\")\n+    (56, Catch,          \"catch\")\n+    (57, Default,        \"default\")\n+    (58, Dyn,            \"dyn\")\n+    (59, StaticLifetime, \"'static\")\n+    (60, Union,          \"union\")\n }\n \n // If an interner exists in TLS, return it. Otherwise, prepare a fresh one."}]}