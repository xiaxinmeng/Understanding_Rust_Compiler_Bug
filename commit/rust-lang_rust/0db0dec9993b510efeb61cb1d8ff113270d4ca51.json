{"sha": "0db0dec9993b510efeb61cb1d8ff113270d4ca51", "node_id": "C_kwDOAAsO6NoAKDBkYjBkZWM5OTkzYjUxMGVmZWI2MWNiMWQ4ZmYxMTMyNzBkNGNhNTE", "commit": {"author": {"name": "Jonas Goronczy", "email": "goronczy.jonas@gmail.com", "date": "2022-02-22T18:38:34Z"}, "committer": {"name": "Jonas Goronczy", "email": "goronczy.jonas@gmail.com", "date": "2022-02-22T18:38:34Z"}, "message": "Replaced fold with for loop", "tree": {"sha": "8af258e9faa8a7e2d516bc5a7cf373ac9de27065", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8af258e9faa8a7e2d516bc5a7cf373ac9de27065"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0db0dec9993b510efeb61cb1d8ff113270d4ca51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0db0dec9993b510efeb61cb1d8ff113270d4ca51", "html_url": "https://github.com/rust-lang/rust/commit/0db0dec9993b510efeb61cb1d8ff113270d4ca51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0db0dec9993b510efeb61cb1d8ff113270d4ca51/comments", "author": {"login": "jo-goro", "id": 13321616, "node_id": "MDQ6VXNlcjEzMzIxNjE2", "avatar_url": "https://avatars.githubusercontent.com/u/13321616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jo-goro", "html_url": "https://github.com/jo-goro", "followers_url": "https://api.github.com/users/jo-goro/followers", "following_url": "https://api.github.com/users/jo-goro/following{/other_user}", "gists_url": "https://api.github.com/users/jo-goro/gists{/gist_id}", "starred_url": "https://api.github.com/users/jo-goro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jo-goro/subscriptions", "organizations_url": "https://api.github.com/users/jo-goro/orgs", "repos_url": "https://api.github.com/users/jo-goro/repos", "events_url": "https://api.github.com/users/jo-goro/events{/privacy}", "received_events_url": "https://api.github.com/users/jo-goro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jo-goro", "id": 13321616, "node_id": "MDQ6VXNlcjEzMzIxNjE2", "avatar_url": "https://avatars.githubusercontent.com/u/13321616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jo-goro", "html_url": "https://github.com/jo-goro", "followers_url": "https://api.github.com/users/jo-goro/followers", "following_url": "https://api.github.com/users/jo-goro/following{/other_user}", "gists_url": "https://api.github.com/users/jo-goro/gists{/gist_id}", "starred_url": "https://api.github.com/users/jo-goro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jo-goro/subscriptions", "organizations_url": "https://api.github.com/users/jo-goro/orgs", "repos_url": "https://api.github.com/users/jo-goro/repos", "events_url": "https://api.github.com/users/jo-goro/events{/privacy}", "received_events_url": "https://api.github.com/users/jo-goro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f721456c4ad2a26ffed5c083fdd25e2cab9709d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f721456c4ad2a26ffed5c083fdd25e2cab9709d7", "html_url": "https://github.com/rust-lang/rust/commit/f721456c4ad2a26ffed5c083fdd25e2cab9709d7"}], "stats": {"total": 59, "additions": 27, "deletions": 32}, "files": [{"sha": "1cdd4187af4e6d48c0bb10a3f5f8a3fcc5f9e4e0", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 27, "deletions": 32, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0db0dec9993b510efeb61cb1d8ff113270d4ca51/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0db0dec9993b510efeb61cb1d8ff113270d4ca51/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=0db0dec9993b510efeb61cb1d8ff113270d4ca51", "patch": "@@ -11,16 +11,14 @@ use ide_db::{\n     search::FileReference,\n     RootDatabase,\n };\n-use itertools::Itertools;\n+use itertools::{Itertools, Position};\n use rustc_hash::FxHashSet;\n use syntax::{\n     ast::{\n         self, edit::IndentLevel, edit_in_place::Indent, make, AstNode, HasAttrs, HasGenericParams,\n         HasName, HasVisibility,\n     },\n-    match_ast,\n-    ted::{self, Position},\n-    SyntaxElement,\n+    match_ast, ted, SyntaxElement,\n     SyntaxKind::*,\n     SyntaxNode, T,\n };\n@@ -304,11 +302,11 @@ fn create_struct_def(\n             _ => tok,\n         })\n         .collect();\n-    ted::insert_all(Position::first_child_of(strukt.syntax()), variant_attrs);\n+    ted::insert_all(ted::Position::first_child_of(strukt.syntax()), variant_attrs);\n \n     // copy attributes from enum\n     ted::insert_all(\n-        Position::first_child_of(strukt.syntax()),\n+        ted::Position::first_child_of(strukt.syntax()),\n         enum_.attrs().map(|it| it.syntax().clone_for_update().into()).collect(),\n     );\n     strukt\n@@ -319,36 +317,33 @@ fn update_variant(variant: &ast::Variant, generics: Option<ast::GenericParamList\n     let ty = generics\n         .filter(|generics| generics.generic_params().count() > 0)\n         .map(|generics| {\n-            let generic_str = generics\n-                .generic_params()\n-                .with_position()\n-                .map(|p| match p {\n-                    itertools::Position::First(p) | itertools::Position::Middle(p) => (p, true),\n-                    itertools::Position::Last(p) | itertools::Position::Only(p) => (p, false),\n-                })\n-                .fold(String::with_capacity(8), |mut s, (p, more)| {\n-                    match p {\n-                        ast::GenericParam::ConstParam(konst) => {\n-                            if let Some(name) = konst.name() {\n-                                s.push_str(name.text().as_str());\n-                            }\n+            let mut generic_str = String::with_capacity(8);\n+\n+            for (p, more) in generics.generic_params().with_position().map(|p| match p {\n+                Position::First(p) | Position::Middle(p) => (p, true),\n+                Position::Last(p) | Position::Only(p) => (p, false),\n+            }) {\n+                match p {\n+                    ast::GenericParam::ConstParam(konst) => {\n+                        if let Some(name) = konst.name() {\n+                            generic_str.push_str(name.text().as_str());\n                         }\n-                        ast::GenericParam::LifetimeParam(lt) => {\n-                            if let Some(lt) = lt.lifetime() {\n-                                s.push_str(lt.text().as_str());\n-                            }\n-                        }\n-                        ast::GenericParam::TypeParam(ty) => {\n-                            if let Some(name) = ty.name() {\n-                                s.push_str(name.text().as_str());\n-                            }\n+                    }\n+                    ast::GenericParam::LifetimeParam(lt) => {\n+                        if let Some(lt) = lt.lifetime() {\n+                            generic_str.push_str(lt.text().as_str());\n                         }\n                     }\n-                    if more {\n-                        s.push_str(\", \");\n+                    ast::GenericParam::TypeParam(ty) => {\n+                        if let Some(name) = ty.name() {\n+                            generic_str.push_str(name.text().as_str());\n+                        }\n                     }\n-                    s\n-                });\n+                }\n+                if more {\n+                    generic_str.push_str(\", \");\n+                }\n+            }\n \n             make::ty(&format!(\"{}<{}>\", &name.text(), &generic_str))\n         })"}]}