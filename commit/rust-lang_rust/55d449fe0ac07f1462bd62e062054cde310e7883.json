{"sha": "55d449fe0ac07f1462bd62e062054cde310e7883", "node_id": "C_kwDOAAsO6NoAKDU1ZDQ0OWZlMGFjMDdmMTQ2MmJkNjJlMDYyMDU0Y2RlMzEwZTc4ODM", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2023-02-16T21:55:53Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2023-02-16T22:12:15Z"}, "message": "Clarify `DerivedObligationCause` may hold alias id", "tree": {"sha": "d5251824ba84707d092e314de6ab4d5e82591f3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5251824ba84707d092e314de6ab4d5e82591f3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55d449fe0ac07f1462bd62e062054cde310e7883", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJFBAABCAAvFiEEvrRBFuOXsbT1OVTHfUwvbCISJTIFAmPuqksRHGVnZ3lhbEBn\nbWFpbC5jb20ACgkQfUwvbCISJTJjZA//U5p3u/aJnIYWSWa/4dztWaftCQpdjRf1\n5gqR+tCauLhRLWkl/DX6+UeN/oAJlshMOmKUZ8mf7irGDiX7na3AN6w6WQYOaSoq\nY8hWeoUrA4cW4vZebLSviskEkfkPh2dzLtNF9qeJUhTz62L3H0Uo7eT+RyK/C29i\n37z1KZaCXcvyBqSfFnAbDdqA4WYFNL6sxMcrS/GodYhWcnmO2JXMYVcZ+OCBYf2v\nJ4m9t++XtMkelLp5An2/wsM6wsa1x+qjhziNGGVTbgRjIi4t7OBiVGZrh6PBQ78j\neonNuSoGnl33gE514Bd4OKfsnZ9rLikwXtlLW5D5JgzCTpVvvw+6bsuEWdmJohYl\n+Z2gqiNK5iABwxUbcl/akI3MNa+LUKZlIOGf7JCCmK9w04HUR1yhMAErno17x+ew\ny72r+3zl0+6zlPR7Qo7R/qI4kq6V1QYpcZRNJ5KMCLEROVgmXqYJXXARc2/Gb9jR\nraVJR5BYlc90aCGnDa2xxfrpNcOHwEVVxgkMkLbF6VcKl9bKIvnl5HT1ab/4dHcy\n8iwEiVVCz0qm1tLmdibWPSv/YiSwu1YMD6ZfWsFK9ryqs9UaYUycVUgyW6L2XTME\n+0PEBZ8TpBVT0YxsRjtK+EzJAjXOpo5ORB8/jv+fOTnx/lll9Sjsre2Shy+G5+/l\nfMmfHAxK/Qg=\n=cl6E\n-----END PGP SIGNATURE-----", "payload": "tree d5251824ba84707d092e314de6ab4d5e82591f3f\nparent a1468ae00d559e0647c98a6015a35c50e5551704\nauthor Alan Egerton <eggyal@gmail.com> 1676584553 +0000\ncommitter Alan Egerton <eggyal@gmail.com> 1676585535 +0000\n\nClarify `DerivedObligationCause` may hold alias id\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55d449fe0ac07f1462bd62e062054cde310e7883", "html_url": "https://github.com/rust-lang/rust/commit/55d449fe0ac07f1462bd62e062054cde310e7883", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55d449fe0ac07f1462bd62e062054cde310e7883/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1468ae00d559e0647c98a6015a35c50e5551704", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1468ae00d559e0647c98a6015a35c50e5551704", "html_url": "https://github.com/rust-lang/rust/commit/a1468ae00d559e0647c98a6015a35c50e5551704"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "0aa5b075d19741a57ee1d2f98d8f4b92ab768bff", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55d449fe0ac07f1462bd62e062054cde310e7883/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d449fe0ac07f1462bd62e062054cde310e7883/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=55d449fe0ac07f1462bd62e062054cde310e7883", "patch": "@@ -477,14 +477,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // This is the \"trait\" (meaning, the predicate \"proved\" by this `impl`) which provides the `Self` type we care about.\n         // For the purposes of this function, we hope that it is a `struct` type, and that our current `expr` is a literal of\n         // that struct type.\n-        let impl_trait_self_ref = if self.tcx.is_trait_alias(obligation.impl_def_id) {\n+        let impl_trait_self_ref = if self.tcx.is_trait_alias(obligation.impl_or_alias_def_id) {\n             self.tcx.mk_trait_ref(\n-                obligation.impl_def_id,\n-                ty::InternalSubsts::identity_for_item(self.tcx, obligation.impl_def_id),\n+                obligation.impl_or_alias_def_id,\n+                ty::InternalSubsts::identity_for_item(self.tcx, obligation.impl_or_alias_def_id),\n             )\n         } else {\n             self.tcx\n-                .impl_trait_ref(obligation.impl_def_id)\n+                .impl_trait_ref(obligation.impl_or_alias_def_id)\n                 .map(|impl_def| impl_def.skip_binder())\n                 // It is possible that this is absent. In this case, we make no progress.\n                 .ok_or(expr)?\n@@ -494,7 +494,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let impl_self_ty: Ty<'tcx> = impl_trait_self_ref.self_ty();\n \n         let impl_predicates: ty::GenericPredicates<'tcx> =\n-            self.tcx.predicates_of(obligation.impl_def_id);\n+            self.tcx.predicates_of(obligation.impl_or_alias_def_id);\n         let Some(impl_predicate_index) = obligation.impl_def_predicate_index else {\n             // We don't have the index, so we can only guess.\n             return Err(expr);"}, {"sha": "a805dad062eb7f317fc236aad0c665b8b8d81593", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55d449fe0ac07f1462bd62e062054cde310e7883/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d449fe0ac07f1462bd62e062054cde310e7883/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=55d449fe0ac07f1462bd62e062054cde310e7883", "patch": "@@ -1576,7 +1576,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                                 traits::ImplDerivedObligation(Box::new(\n                                     traits::ImplDerivedObligationCause {\n                                         derived,\n-                                        impl_def_id,\n+                                        impl_or_alias_def_id: impl_def_id,\n                                         impl_def_predicate_index: None,\n                                         span,\n                                     },"}, {"sha": "ef30cd55c0ed086d8c0b6dfa00223b10ee425aac", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55d449fe0ac07f1462bd62e062054cde310e7883/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d449fe0ac07f1462bd62e062054cde310e7883/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=55d449fe0ac07f1462bd62e062054cde310e7883", "patch": "@@ -616,7 +616,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ObligationCauseCode::ImplDerivedObligation(data)\n                         if matches!(p.kind().skip_binder(), ty::PredicateKind::Clause(_)) =>\n                     {\n-                        Some((p, parent, data.impl_def_id, data))\n+                        Some((p, parent, data.impl_or_alias_def_id, data))\n                     }\n                     _ => None,\n                 })"}, {"sha": "68b39c5f00fb181d4d797135bfee37a46331d425", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55d449fe0ac07f1462bd62e062054cde310e7883/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d449fe0ac07f1462bd62e062054cde310e7883/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=55d449fe0ac07f1462bd62e062054cde310e7883", "patch": "@@ -158,7 +158,7 @@ impl<'tcx> Elaborator<'tcx> {\n                                 traits::ImplDerivedObligation(Box::new(\n                                     traits::ImplDerivedObligationCause {\n                                         derived,\n-                                        impl_def_id: data.def_id(),\n+                                        impl_or_alias_def_id: data.def_id(),\n                                         impl_def_predicate_index: Some(index),\n                                         span,\n                                     },"}, {"sha": "6231dd9b6f54a245e2b21f99805a23f0f806f204", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55d449fe0ac07f1462bd62e062054cde310e7883/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d449fe0ac07f1462bd62e062054cde310e7883/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=55d449fe0ac07f1462bd62e062054cde310e7883", "patch": "@@ -474,7 +474,11 @@ pub enum WellFormedLoc {\n #[derive(TypeVisitable, TypeFoldable)]\n pub struct ImplDerivedObligationCause<'tcx> {\n     pub derived: DerivedObligationCause<'tcx>,\n-    pub impl_def_id: DefId,\n+    /// The `DefId` of the `impl` that gave rise to the `derived` obligation.\n+    /// If the `derived` obligation arose from a trait alias, which conceptually has a synthetic impl,\n+    /// then this will be the `DefId` of that trait alias. Care should therefore be taken to handle\n+    /// that exceptional case where appropriate.\n+    pub impl_or_alias_def_id: DefId,\n     /// The index of the derived predicate in the parent impl's predicates.\n     pub impl_def_predicate_index: Option<usize>,\n     pub span: Span,"}, {"sha": "9f4adb44b930ea3cc36b18ca5b0433db0aa556d2", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55d449fe0ac07f1462bd62e062054cde310e7883/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d449fe0ac07f1462bd62e062054cde310e7883/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=55d449fe0ac07f1462bd62e062054cde310e7883", "patch": "@@ -3143,7 +3143,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     parent_trait_pred.print_modifiers_and_trait_path()\n                 );\n                 let mut is_auto_trait = false;\n-                match self.tcx.hir().get_if_local(data.impl_def_id) {\n+                match self.tcx.hir().get_if_local(data.impl_or_alias_def_id) {\n                     Some(Node::Item(hir::Item {\n                         kind: hir::ItemKind::Trait(is_auto, ..),\n                         ident,"}, {"sha": "0167f4026102e5ca072952ae70df9ecce43d479f", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55d449fe0ac07f1462bd62e062054cde310e7883/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d449fe0ac07f1462bd62e062054cde310e7883/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=55d449fe0ac07f1462bd62e062054cde310e7883", "patch": "@@ -1189,7 +1189,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             let cause = obligation.derived_cause(|derived| {\n                 ImplDerivedObligation(Box::new(ImplDerivedObligationCause {\n                     derived,\n-                    impl_def_id,\n+                    impl_or_alias_def_id: impl_def_id,\n                     impl_def_predicate_index: None,\n                     span: obligation.cause.span,\n                 }))"}, {"sha": "26f869ac1fef6b5cd9874a98081304db0ab2c328", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55d449fe0ac07f1462bd62e062054cde310e7883/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d449fe0ac07f1462bd62e062054cde310e7883/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=55d449fe0ac07f1462bd62e062054cde310e7883", "patch": "@@ -2657,7 +2657,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             let cause = cause.clone().derived_cause(parent_trait_pred, |derived| {\n                 ImplDerivedObligation(Box::new(ImplDerivedObligationCause {\n                     derived,\n-                    impl_def_id: def_id,\n+                    impl_or_alias_def_id: def_id,\n                     impl_def_predicate_index: Some(index),\n                     span,\n                 }))"}]}