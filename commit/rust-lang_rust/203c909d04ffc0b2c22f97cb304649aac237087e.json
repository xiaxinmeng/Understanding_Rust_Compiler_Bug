{"sha": "203c909d04ffc0b2c22f97cb304649aac237087e", "node_id": "C_kwDOAAsO6NoAKDIwM2M5MDlkMDRmZmMwYjJjMjJmOTdjYjMwNDY0OWFhYzIzNzA4N2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-17T19:43:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-17T19:43:39Z"}, "message": "Auto merge of #10661 - timvisee:manual-slice-size-calc-suggestion, r=Manishearth\n\nAdd `manual_slice_size_calculation` applicable suggestion\n\nContinuation of https://github.com/rust-lang/rust-clippy/pull/10659#issuecomment-1511688869.\n\nThis adds applicable suggestions to the `manual_slice_size_calculation` lint:\n\n```\nerror: manual slice size calculation\n  --> $DIR/manual_slice_size_calculation.rs:11:13\n   |\nLL |     let _ = s_i32.len() * size_of::<i32>(); // WARNING\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::mem::size_of_val(s_i32)`\n   |\n   = note: `-D clippy::manual-slice-size-calculation` implied by `-D warnings`\n```\n\nchangelog: [`manual_slice_size_calculation`]: add machine applicable suggestion", "tree": {"sha": "f1c2ca0d6bd832033db66a4fbc3dcdebc449f9a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1c2ca0d6bd832033db66a4fbc3dcdebc449f9a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/203c909d04ffc0b2c22f97cb304649aac237087e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/203c909d04ffc0b2c22f97cb304649aac237087e", "html_url": "https://github.com/rust-lang/rust/commit/203c909d04ffc0b2c22f97cb304649aac237087e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/203c909d04ffc0b2c22f97cb304649aac237087e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e57deaace54648bf4e35bf121f23f92df4e6e0c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e57deaace54648bf4e35bf121f23f92df4e6e0c6", "html_url": "https://github.com/rust-lang/rust/commit/e57deaace54648bf4e35bf121f23f92df4e6e0c6"}, {"sha": "a2580db6420aa6ea3ab34c467bb795e9e39ba449", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2580db6420aa6ea3ab34c467bb795e9e39ba449", "html_url": "https://github.com/rust-lang/rust/commit/a2580db6420aa6ea3ab34c467bb795e9e39ba449"}], "stats": {"total": 99, "additions": 68, "deletions": 31}, "files": [{"sha": "a5bb1c6f9bcf7aed88f3f75f3e0ce327fdd29e51", "filename": "clippy_lints/src/manual_slice_size_calculation.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/203c909d04ffc0b2c22f97cb304649aac237087e/clippy_lints%2Fsrc%2Fmanual_slice_size_calculation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203c909d04ffc0b2c22f97cb304649aac237087e/clippy_lints%2Fsrc%2Fmanual_slice_size_calculation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_slice_size_calculation.rs?ref=203c909d04ffc0b2c22f97cb304649aac237087e", "patch": "@@ -1,5 +1,8 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::{expr_or_init, in_constant};\n+// run-rustfix\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_context;\n+use clippy_utils::{expr_or_init, in_constant, std_or_core};\n+use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n@@ -42,15 +45,22 @@ impl<'tcx> LateLintPass<'tcx> for ManualSliceSizeCalculation {\n         if !in_constant(cx, expr.hir_id)\n             && let ExprKind::Binary(ref op, left, right) = expr.kind\n             && BinOpKind::Mul == op.node\n-            && let Some(_receiver) = simplify(cx, left, right)\n+            && let Some(receiver) = simplify(cx, left, right)\n         {\n-            span_lint_and_help(\n+            let ctxt = expr.span.ctxt();\n+            let mut app = Applicability::MachineApplicable;\n+            let val_name = snippet_with_context(cx, receiver.span, ctxt, \"slice\", &mut app).0;\n+            let Some(sugg) = std_or_core(cx) else { return };\n+\n+            span_lint_and_sugg(\n                 cx,\n                 MANUAL_SLICE_SIZE_CALCULATION,\n-                expr.span,\n-                \"manual slice size calculation\",\n-                None,\n-                \"consider using std::mem::size_of_val instead\");\n+                    expr.span,\n+                    \"manual slice size calculation\",\n+                    \"try\",\n+                    format!(\"{sugg}::mem::size_of_val({val_name})\"),\n+                    Applicability::MachineApplicable,\n+                );\n         }\n     }\n }"}, {"sha": "2b18dd58c6346e075cbd9ca61d6ae0df24e66725", "filename": "tests/ui/manual_slice_size_calculation.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/203c909d04ffc0b2c22f97cb304649aac237087e/tests%2Fui%2Fmanual_slice_size_calculation.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/203c909d04ffc0b2c22f97cb304649aac237087e/tests%2Fui%2Fmanual_slice_size_calculation.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_slice_size_calculation.fixed?ref=203c909d04ffc0b2c22f97cb304649aac237087e", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+#![allow(unused)]\n+#![warn(clippy::manual_slice_size_calculation)]\n+\n+use core::mem::{align_of, size_of};\n+\n+fn main() {\n+    let v_i32 = Vec::<i32>::new();\n+    let s_i32 = v_i32.as_slice();\n+\n+    // True positives:\n+    let _ = std::mem::size_of_val(s_i32); // WARNING\n+    let _ = std::mem::size_of_val(s_i32); // WARNING\n+    let _ = std::mem::size_of_val(s_i32) * 5; // WARNING\n+\n+    let len = s_i32.len();\n+    let size = size_of::<i32>();\n+    let _ = std::mem::size_of_val(s_i32); // WARNING\n+    let _ = std::mem::size_of_val(s_i32); // WARNING\n+    let _ = std::mem::size_of_val(s_i32); // WARNING\n+\n+    // True negatives:\n+    let _ = size_of::<i32>() + s_i32.len(); // Ok, not a multiplication\n+    let _ = size_of::<i32>() * s_i32.partition_point(|_| true); // Ok, not len()\n+    let _ = size_of::<i32>() * v_i32.len(); // Ok, not a slice\n+    let _ = align_of::<i32>() * s_i32.len(); // Ok, not size_of()\n+    let _ = size_of::<u32>() * s_i32.len(); // Ok, different types\n+\n+    // False negatives:\n+    let _ = 5 * size_of::<i32>() * s_i32.len(); // Ok (MISSED OPPORTUNITY)\n+    let _ = size_of::<i32>() * 5 * s_i32.len(); // Ok (MISSED OPPORTUNITY)\n+}\n+\n+const fn _const(s_i32: &[i32]) {\n+    // True negative:\n+    let _ = s_i32.len() * size_of::<i32>(); // Ok, can't use size_of_val in const\n+}"}, {"sha": "04adab76df25c95a609071e4234433b914b8b926", "filename": "tests/ui/manual_slice_size_calculation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/203c909d04ffc0b2c22f97cb304649aac237087e/tests%2Fui%2Fmanual_slice_size_calculation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203c909d04ffc0b2c22f97cb304649aac237087e/tests%2Fui%2Fmanual_slice_size_calculation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_slice_size_calculation.rs?ref=203c909d04ffc0b2c22f97cb304649aac237087e", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n #![allow(unused)]\n #![warn(clippy::manual_slice_size_calculation)]\n "}, {"sha": "a6217652b8830719d1c6db8d47e98b57c6ccc301", "filename": "tests/ui/manual_slice_size_calculation.stderr", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/203c909d04ffc0b2c22f97cb304649aac237087e/tests%2Fui%2Fmanual_slice_size_calculation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/203c909d04ffc0b2c22f97cb304649aac237087e/tests%2Fui%2Fmanual_slice_size_calculation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_slice_size_calculation.stderr?ref=203c909d04ffc0b2c22f97cb304649aac237087e", "patch": "@@ -1,51 +1,40 @@\n error: manual slice size calculation\n-  --> $DIR/manual_slice_size_calculation.rs:11:13\n+  --> $DIR/manual_slice_size_calculation.rs:12:13\n    |\n LL |     let _ = s_i32.len() * size_of::<i32>(); // WARNING\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::mem::size_of_val(s_i32)`\n    |\n-   = help: consider using std::mem::size_of_val instead\n    = note: `-D clippy::manual-slice-size-calculation` implied by `-D warnings`\n \n error: manual slice size calculation\n-  --> $DIR/manual_slice_size_calculation.rs:12:13\n+  --> $DIR/manual_slice_size_calculation.rs:13:13\n    |\n LL |     let _ = size_of::<i32>() * s_i32.len(); // WARNING\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using std::mem::size_of_val instead\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::mem::size_of_val(s_i32)`\n \n error: manual slice size calculation\n-  --> $DIR/manual_slice_size_calculation.rs:13:13\n+  --> $DIR/manual_slice_size_calculation.rs:14:13\n    |\n LL |     let _ = size_of::<i32>() * s_i32.len() * 5; // WARNING\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using std::mem::size_of_val instead\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::mem::size_of_val(s_i32)`\n \n error: manual slice size calculation\n-  --> $DIR/manual_slice_size_calculation.rs:17:13\n+  --> $DIR/manual_slice_size_calculation.rs:18:13\n    |\n LL |     let _ = len * size_of::<i32>(); // WARNING\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using std::mem::size_of_val instead\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::mem::size_of_val(s_i32)`\n \n error: manual slice size calculation\n-  --> $DIR/manual_slice_size_calculation.rs:18:13\n+  --> $DIR/manual_slice_size_calculation.rs:19:13\n    |\n LL |     let _ = s_i32.len() * size; // WARNING\n-   |             ^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using std::mem::size_of_val instead\n+   |             ^^^^^^^^^^^^^^^^^^ help: try: `std::mem::size_of_val(s_i32)`\n \n error: manual slice size calculation\n-  --> $DIR/manual_slice_size_calculation.rs:19:13\n+  --> $DIR/manual_slice_size_calculation.rs:20:13\n    |\n LL |     let _ = len * size; // WARNING\n-   |             ^^^^^^^^^^\n-   |\n-   = help: consider using std::mem::size_of_val instead\n+   |             ^^^^^^^^^^ help: try: `std::mem::size_of_val(s_i32)`\n \n error: aborting due to 6 previous errors\n "}]}