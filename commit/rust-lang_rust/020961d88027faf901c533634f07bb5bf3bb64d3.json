{"sha": "020961d88027faf901c533634f07bb5bf3bb64d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMDk2MWQ4ODAyN2ZhZjkwMWM1MzM2MzRmMDdiYjViZjNiYjY0ZDM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-11-18T16:15:16Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-12-21T00:17:19Z"}, "message": "Prohibit access to private statics from other crates through macros 2.0", "tree": {"sha": "2529299f3a90506d2918cc18c413fcf93b3e92eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2529299f3a90506d2918cc18c413fcf93b3e92eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/020961d88027faf901c533634f07bb5bf3bb64d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/020961d88027faf901c533634f07bb5bf3bb64d3", "html_url": "https://github.com/rust-lang/rust/commit/020961d88027faf901c533634f07bb5bf3bb64d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/020961d88027faf901c533634f07bb5bf3bb64d3/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "190adc0e193d9b7154b54b4800e2059acb72448b", "url": "https://api.github.com/repos/rust-lang/rust/commits/190adc0e193d9b7154b54b4800e2059acb72448b", "html_url": "https://github.com/rust-lang/rust/commit/190adc0e193d9b7154b54b4800e2059acb72448b"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "fc2e2ca662031a7f792b0cbdc53774b247979434", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/020961d88027faf901c533634f07bb5bf3bb64d3/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020961d88027faf901c533634f07bb5bf3bb64d3/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=020961d88027faf901c533634f07bb5bf3bb64d3", "patch": "@@ -783,11 +783,16 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n     }\n \n     // Prohibit access to associated items with insufficient nominal visibility.\n+    //\n+    // Additionally, until better reachability analysis for macros 2.0 is available,\n+    // we prohibit access to private statics from other crates, this allows to give\n+    // more code internal visibility at link time. (Access to private functions\n+    // is already prohibited by type privacy for funciton types.)\n     fn visit_qpath(&mut self, qpath: &'tcx hir::QPath, id: ast::NodeId, span: Span) {\n         let def = match *qpath {\n             hir::QPath::Resolved(_, ref path) => match path.def {\n                 Def::Method(..) | Def::AssociatedConst(..) |\n-                Def::AssociatedTy(..) => Some(path.def),\n+                Def::AssociatedTy(..) | Def::Static(..) => Some(path.def),\n                 _ => None,\n             }\n             hir::QPath::TypeRelative(..) => {\n@@ -797,7 +802,8 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n         };\n         if let Some(def) = def {\n             let def_id = def.def_id();\n-            if !self.item_is_accessible(def_id) {\n+            let is_local_static = if let Def::Static(..) = def { def_id.is_local() } else { false };\n+            if !self.item_is_accessible(def_id) && !is_local_static {\n                 let name = match *qpath {\n                     hir::QPath::Resolved(_, ref path) => format!(\"{}\", path),\n                     hir::QPath::TypeRelative(_, ref segment) => segment.name.to_string(),"}, {"sha": "fc43765f63ce826ef34a0aebe8de703694253ca3", "filename": "src/test/compile-fail/auxiliary/private-inferred-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/020961d88027faf901c533634f07bb5bf3bb64d3/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fprivate-inferred-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020961d88027faf901c533634f07bb5bf3bb64d3/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fprivate-inferred-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fprivate-inferred-type.rs?ref=020961d88027faf901c533634f07bb5bf3bb64d3", "patch": "@@ -11,6 +11,7 @@\n #![feature(decl_macro)]\n \n fn priv_fn() {}\n+static PRIV_STATIC: u8 = 0;\n enum PrivEnum { Variant }\n pub enum PubEnum { Variant }\n trait PrivTrait { fn method() {} }\n@@ -34,6 +35,7 @@ impl Pub<u8> {\n \n pub macro m() {\n     priv_fn;\n+    PRIV_STATIC;\n     PrivEnum::Variant;\n     PubEnum::Variant;\n     <u8 as PrivTrait>::method;"}, {"sha": "0c393f02323ec04a3757f16aa641798c773227bb", "filename": "src/test/compile-fail/private-inferred-type-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/020961d88027faf901c533634f07bb5bf3bb64d3/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020961d88027faf901c533634f07bb5bf3bb64d3/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type-3.rs?ref=020961d88027faf901c533634f07bb5bf3bb64d3", "patch": "@@ -11,6 +11,7 @@\n // aux-build:private-inferred-type.rs\n \n // error-pattern:type `fn() {ext::priv_fn}` is private\n+// error-pattern:static `PRIV_STATIC` is private\n // error-pattern:type `ext::PrivEnum` is private\n // error-pattern:type `fn() {<u8 as ext::PrivTrait>::method}` is private\n // error-pattern:type `fn(u8) -> ext::PrivTupleStruct {ext::PrivTupleStruct::{{constructor}}}` is pr"}, {"sha": "c50d7f59b8e0a2392e6b9a188b405bfe6833df85", "filename": "src/test/compile-fail/private-inferred-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/020961d88027faf901c533634f07bb5bf3bb64d3/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020961d88027faf901c533634f07bb5bf3bb64d3/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs?ref=020961d88027faf901c533634f07bb5bf3bb64d3", "patch": "@@ -15,6 +15,7 @@\n \n mod m {\n     fn priv_fn() {}\n+    static PRIV_STATIC: u8 = 0;\n     enum PrivEnum { Variant }\n     pub enum PubEnum { Variant }\n     trait PrivTrait { fn method() {} }\n@@ -47,6 +48,7 @@ mod m {\n \n     pub macro m() {\n         priv_fn; //~ ERROR type `fn() {m::priv_fn}` is private\n+        PRIV_STATIC; // OK, not cross-crate\n         PrivEnum::Variant; //~ ERROR type `m::PrivEnum` is private\n         PubEnum::Variant; // OK\n         <u8 as PrivTrait>::method; //~ ERROR type `fn() {<u8 as m::PrivTrait>::method}` is private"}]}