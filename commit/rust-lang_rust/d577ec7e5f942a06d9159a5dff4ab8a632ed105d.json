{"sha": "d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NzdlYzdlNWY5NDJhMDZkOTE1OWE1ZGZmNGFiOGE2MzJlZDEwNWQ=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-08-28T09:11:01Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:11:59Z"}, "message": "New files and folders for traits\nMoved common enums to common", "tree": {"sha": "4493e3c0b65af26388eeb656a8ce71f203924592", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4493e3c0b65af26388eeb656a8ce71f203924592"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "html_url": "https://github.com/rust-lang/rust/commit/d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a2670e3078aecd0422a00f658f9d26fd1da39f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a2670e3078aecd0422a00f658f9d26fd1da39f5", "html_url": "https://github.com/rust-lang/rust/commit/7a2670e3078aecd0422a00f658f9d26fd1da39f5"}], "stats": {"total": 360, "additions": 188, "deletions": 172}, "files": [{"sha": "5859446d32ef448e87ccaa4bdd444c997f54a2ed", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -19,7 +19,7 @@ use type_::Type;\n use type_of::{LayoutLlvmExt, PointerKind};\n use value::Value;\n \n-use traits::BuilderMethods;\n+use interfaces::BuilderMethods;\n \n use rustc_target::abi::{HasDataLayout, LayoutOf, Size, TyLayout, Abi as LayoutAbi};\n use rustc::ty::{self, Ty};"}, {"sha": "5efa4d547ba782aa2c4207b6e6800a5f2b8f451b", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -16,7 +16,7 @@ use builder::Builder;\n use value::Value;\n \n use rustc::hir;\n-use traits::BuilderMethods;\n+use interfaces::BuilderMethods;\n \n use mir::place::PlaceRef;\n use mir::operand::OperandValue;"}, {"sha": "c0e4fc92139726e088e6a8c4ca54f2cd1c381de5", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -55,7 +55,7 @@ use builder::{Builder, MemFlags};\n use callee;\n use common::{C_bool, C_bytes_in_context, C_usize};\n use rustc_mir::monomorphize::item::DefPathBasedNames;\n-use common::{C_struct_in_context, C_array, val_ty};\n+use common::{C_struct_in_context, C_array, val_ty, IntPredicate, RealPredicate};\n use consts;\n use context::CodegenCx;\n use debuginfo;\n@@ -75,7 +75,7 @@ use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::indexed_vec::Idx;\n \n-use traits::{IntPredicate, RealPredicate, BuilderMethods};\n+use interfaces::BuilderMethods;\n \n use std::any::Any;\n use std::cmp;"}, {"sha": "6decc18561444de7323793b134ef3e60e32049d1", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -10,15 +10,15 @@\n \n use llvm::{AtomicRmwBinOp, AtomicOrdering, SynchronizationScope, AsmDialect};\n use llvm::{self, False, OperandBundleDef, BasicBlock};\n-use common::*;\n+use common::{self, *};\n use type_;\n use value::Value;\n use libc::{c_uint, c_char};\n use rustc::ty::TyCtxt;\n use rustc::ty::layout::{Align, Size};\n use rustc::session::{config, Session};\n use rustc_data_structures::small_c_str::SmallCStr;\n-use traits::{self, BuilderMethods};\n+use interfaces::BuilderMethods;\n use syntax;\n \n use std::borrow::Cow;\n@@ -194,7 +194,7 @@ impl BuilderMethods<'a, 'll, 'tcx> for Builder<'a, 'll, 'tcx> {\n                   args: &[&'ll Value],\n                   then: &'ll BasicBlock,\n                   catch: &'ll BasicBlock,\n-                  bundle: Option<&traits::OperandBundleDef<'ll, &'ll Value>>) -> &'ll Value {\n+                  bundle: Option<&common::OperandBundleDef<'ll, &'ll Value>>) -> &'ll Value {\n         self.count_insn(\"invoke\");\n \n         debug!(\"Invoke {:?} with args ({:?})\",\n@@ -495,7 +495,7 @@ impl BuilderMethods<'a, 'll, 'tcx> for Builder<'a, 'll, 'tcx> {\n     fn atomic_load(\n         &self,\n         ptr: &'ll Value,\n-        order: traits::AtomicOrdering,\n+        order: common::AtomicOrdering,\n         size: Size,\n     ) -> &'ll Value {\n         self.count_insn(\"load.atomic\");\n@@ -582,7 +582,7 @@ impl BuilderMethods<'a, 'll, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n    fn atomic_store(&self, val: &'ll Value, ptr: &'ll Value,\n-                   order: traits::AtomicOrdering, size: Size) {\n+                   order: common::AtomicOrdering, size: Size) {\n         debug!(\"Store {:?} -> {:?}\", val, ptr);\n         self.count_insn(\"store.atomic\");\n         let ptr = self.check_store(val, ptr);\n@@ -708,15 +708,15 @@ impl BuilderMethods<'a, 'll, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     /* Comparisons */\n-    fn icmp(&self, op: traits::IntPredicate, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n+    fn icmp(&self, op: IntPredicate, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n         self.count_insn(\"icmp\");\n         let op = llvm::IntPredicate::from_generic(op);\n         unsafe {\n             llvm::LLVMBuildICmp(self.llbuilder, op as c_uint, lhs, rhs, noname())\n         }\n     }\n \n-    fn fcmp(&self, op: traits::RealPredicate, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n+    fn fcmp(&self, op: RealPredicate, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n         self.count_insn(\"fcmp\");\n         unsafe {\n             llvm::LLVMBuildFCmp(self.llbuilder, op as c_uint, lhs, rhs, noname())\n@@ -1066,8 +1066,8 @@ impl BuilderMethods<'a, 'll, 'tcx> for Builder<'a, 'll, 'tcx> {\n         dst: &'ll Value,\n         cmp: &'ll Value,\n         src: &'ll Value,\n-        order: traits::AtomicOrdering,\n-        failure_order: traits::AtomicOrdering,\n+        order: common::AtomicOrdering,\n+        failure_order: common::AtomicOrdering,\n         weak: bool,\n     ) -> &'ll Value {\n         let weak = if weak { llvm::True } else { llvm::False };\n@@ -1085,10 +1085,10 @@ impl BuilderMethods<'a, 'll, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n     fn atomic_rmw(\n         &self,\n-        op: traits::AtomicRmwBinOp,\n+        op: common::AtomicRmwBinOp,\n         dst: &'ll Value,\n         src: &'ll Value,\n-        order: traits::AtomicOrdering,\n+        order: common::AtomicOrdering,\n     ) -> &'ll Value {\n         unsafe {\n             llvm::LLVMBuildAtomicRMW(\n@@ -1101,7 +1101,7 @@ impl BuilderMethods<'a, 'll, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn atomic_fence(&self, order: traits::AtomicOrdering, scope: traits::SynchronizationScope) {\n+    fn atomic_fence(&self, order: common::AtomicOrdering, scope: common::SynchronizationScope) {\n         unsafe {\n             llvm::LLVMRustBuildAtomicFence(\n                 self.llbuilder,\n@@ -1227,7 +1227,7 @@ impl BuilderMethods<'a, 'll, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     fn call(&self, llfn: &'ll Value, args: &[&'ll Value],\n-                bundle: Option<&traits::OperandBundleDef<'ll, &'ll Value>>) -> &'ll Value {\n+                bundle: Option<&common::OperandBundleDef<'ll, &'ll Value>>) -> &'ll Value {\n         self.count_insn(\"call\");\n \n         debug!(\"Call {:?} with args ({:?})\","}, {"sha": "88a8080819c06905fad4faa37a3604cdb6e4b737", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 82, "deletions": 1, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -28,7 +28,7 @@ use value::Value;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::{HasDataLayout, LayoutOf};\n use rustc::hir;\n-use traits::{BuilderMethods, OperandBundleDef};\n+use interfaces::BuilderMethods;\n \n use libc::{c_uint, c_char};\n \n@@ -49,6 +49,87 @@ pub fn type_is_freeze<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bo\n     ty.is_freeze(tcx, ty::ParamEnv::reveal_all(), DUMMY_SP)\n }\n \n+pub struct OperandBundleDef<'a, Value : 'a> {\n+    pub name: &'a str,\n+    pub val: Value\n+}\n+\n+impl OperandBundleDef<'ll, &'ll Value> {\n+    pub fn new(name: &'ll str, val: &'ll Value) -> Self {\n+        OperandBundleDef {\n+            name,\n+            val\n+        }\n+    }\n+}\n+\n+pub enum IntPredicate {\n+    IntEQ,\n+    IntNE,\n+    IntUGT,\n+    IntUGE,\n+    IntULT,\n+    IntULE,\n+    IntSGT,\n+    IntSGE,\n+    IntSLT,\n+    IntSLE\n+}\n+\n+#[allow(dead_code)]\n+pub enum RealPredicate {\n+    RealPredicateFalse,\n+    RealOEQ,\n+    RealOGT,\n+    RealOGE,\n+    RealOLT,\n+    RealOLE,\n+    RealONE,\n+    RealORD,\n+    RealUNO,\n+    RealUEQ,\n+    RealUGT,\n+    RealUGE,\n+    RealULT,\n+    RealULE,\n+    RealUNE,\n+    RealPredicateTrue\n+}\n+\n+pub enum AtomicRmwBinOp {\n+    AtomicXchg,\n+    AtomicAdd,\n+    AtomicSub,\n+    AtomicAnd,\n+    AtomicNand,\n+    AtomicOr,\n+    AtomicXor,\n+    AtomicMax,\n+    AtomicMin,\n+    AtomicUMax,\n+    AtomicUMin\n+}\n+\n+pub enum AtomicOrdering {\n+    #[allow(dead_code)]\n+    NotAtomic,\n+    Unordered,\n+    Monotonic,\n+    // Consume,  // Not specified yet.\n+    Acquire,\n+    Release,\n+    AcquireRelease,\n+    SequentiallyConsistent,\n+}\n+\n+pub enum SynchronizationScope {\n+    // FIXME: figure out if this variant is needed at all.\n+    #[allow(dead_code)]\n+    Other,\n+    SingleThread,\n+    CrossThread,\n+}\n+\n /*\n * A note on nomenclature of linking: \"extern\", \"foreign\", and \"upcall\".\n *"}, {"sha": "c9652824ddbe29103f81b6496a5cfc062790b3bb", "filename": "src/librustc_codegen_llvm/debuginfo/gdb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -18,7 +18,7 @@ use declare;\n use rustc::session::config::DebugInfo;\n use type_::Type;\n use value::Value;\n-use traits::BuilderMethods;\n+use interfaces::BuilderMethods;\n \n use syntax::attr;\n "}, {"sha": "b7f70a674916564142c38775c4614fa616720234", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -45,7 +45,7 @@ use syntax_pos::{self, Span, Pos};\n use syntax::ast;\n use syntax::symbol::{Symbol, InternedString};\n use rustc::ty::layout::{self, LayoutOf};\n-use traits::BuilderMethods;\n+use interfaces::BuilderMethods;\n \n pub mod gdb;\n mod utils;"}, {"sha": "8785ecfa05b635283d41b7633ffcbc3150671634", "filename": "src/librustc_codegen_llvm/debuginfo/source_loc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -17,7 +17,7 @@ use super::FunctionDebugContext;\n use llvm;\n use llvm::debuginfo::DIScope;\n use builder::Builder;\n-use traits::BuilderMethods;\n+use interfaces::BuilderMethods;\n \n use libc::c_uint;\n use syntax_pos::{Span, Pos};"}, {"sha": "5b6dc7f738d40ab38c17d094c1fe3fbea0a5cb36", "filename": "src/librustc_codegen_llvm/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fglue.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -20,7 +20,7 @@ use meth;\n use rustc::ty::layout::LayoutOf;\n use rustc::ty::{self, Ty};\n use value::Value;\n-use traits::{IntPredicate,BuilderMethods};\n+use interfaces::BuilderMethods;\n \n pub fn size_and_align_of_dst(\n     bx: &Builder<'_, 'll, 'tcx>,"}, {"sha": "994ddd65d3df88051aff7c0e61b3e907a72aaa0d", "filename": "src/librustc_codegen_llvm/interfaces/builder.rs", "status": "renamed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -14,92 +14,11 @@ use rustc::ty::TyCtxt;\n use rustc::ty::layout::{Align, Size};\n use rustc::session::Session;\n use builder::MemFlags;\n-use value::Value;\n \n use std::borrow::Cow;\n use std::ops::Range;\n use syntax::ast::AsmDialect;\n \n-pub struct OperandBundleDef<'a, Value : 'a> {\n-    pub name: &'a str,\n-    pub val: Value\n-}\n-\n-impl OperandBundleDef<'ll, &'ll Value> {\n-    pub fn new(name: &'ll str, val: &'ll Value) -> Self {\n-        OperandBundleDef {\n-            name,\n-            val\n-        }\n-    }\n-}\n-\n-pub enum IntPredicate {\n-    IntEQ,\n-    IntNE,\n-    IntUGT,\n-    IntUGE,\n-    IntULT,\n-    IntULE,\n-    IntSGT,\n-    IntSGE,\n-    IntSLT,\n-    IntSLE\n-}\n-\n-#[allow(dead_code)]\n-pub enum RealPredicate {\n-    RealPredicateFalse,\n-    RealOEQ,\n-    RealOGT,\n-    RealOGE,\n-    RealOLT,\n-    RealOLE,\n-    RealONE,\n-    RealORD,\n-    RealUNO,\n-    RealUEQ,\n-    RealUGT,\n-    RealUGE,\n-    RealULT,\n-    RealULE,\n-    RealUNE,\n-    RealPredicateTrue\n-}\n-\n-pub enum AtomicRmwBinOp {\n-    AtomicXchg,\n-    AtomicAdd,\n-    AtomicSub,\n-    AtomicAnd,\n-    AtomicNand,\n-    AtomicOr,\n-    AtomicXor,\n-    AtomicMax,\n-    AtomicMin,\n-    AtomicUMax,\n-    AtomicUMin\n-}\n-\n-pub enum AtomicOrdering {\n-    #[allow(dead_code)]\n-    NotAtomic,\n-    Unordered,\n-    Monotonic,\n-    // Consume,  // Not specified yet.\n-    Acquire,\n-    Release,\n-    AcquireRelease,\n-    SequentiallyConsistent,\n-}\n-\n-pub enum SynchronizationScope {\n-    // FIXME: figure out if this variant is needed at all.\n-    #[allow(dead_code)]\n-    Other,\n-    SingleThread,\n-    CrossThread,\n-}\n \n \n pub trait BuilderMethods<'a, 'll :'a, 'tcx: 'll> {", "previous_filename": "src/librustc_codegen_llvm/traits.rs"}, {"sha": "d0cd8e6a696ede82510ffd85596a0116891e1372", "filename": "src/librustc_codegen_llvm/interfaces/mod.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod builder;\n+\n+pub use self::builder::BuilderMethods;"}, {"sha": "f75fe0c4c0e3232c94c32c56523fd30a2a925772", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -31,7 +31,7 @@ use syntax::symbol::Symbol;\n use builder::Builder;\n use value::Value;\n \n-use traits::{BuilderMethods, AtomicRmwBinOp, SynchronizationScope};\n+use interfaces::BuilderMethods;\n \n use rustc::session::Session;\n use syntax_pos::Span;\n@@ -439,7 +439,7 @@ pub fn codegen_intrinsic_call(\n         // This requires that atomic intrinsics follow a specific naming pattern:\n         // \"atomic_<operation>[_<ordering>]\", and no ordering means SeqCst\n         name if name.starts_with(\"atomic_\") => {\n-            use traits::AtomicOrdering::*;\n+            use self::AtomicOrdering::*;\n \n             let split: Vec<&str> = name.split('_').collect();\n "}, {"sha": "43942b0db85c32cef6d42d3f0460abd1078a416a", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -102,7 +102,7 @@ mod back {\n     pub mod wasm;\n }\n \n-mod traits;\n+mod interfaces;\n \n mod abi;\n mod allocator;"}, {"sha": "2bbb82f31968139b556c3171ecca83b57da259a2", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -19,7 +19,7 @@ use libc::{c_uint, c_int, size_t, c_char};\n use libc::{c_ulonglong, c_void};\n \n use std::marker::PhantomData;\n-use traits;\n+use common;\n use syntax;\n \n use super::RustString;\n@@ -144,18 +144,18 @@ pub enum IntPredicate {\n }\n \n impl IntPredicate {\n-    pub fn from_generic(intpre: traits::IntPredicate) -> Self {\n+    pub fn from_generic(intpre: common::IntPredicate) -> Self {\n         match intpre {\n-            traits::IntPredicate::IntEQ => IntPredicate::IntEQ,\n-            traits::IntPredicate::IntNE => IntPredicate::IntNE,\n-            traits::IntPredicate::IntUGT => IntPredicate::IntUGT,\n-            traits::IntPredicate::IntUGE => IntPredicate::IntUGE,\n-            traits::IntPredicate::IntULT => IntPredicate::IntULT,\n-            traits::IntPredicate::IntULE => IntPredicate::IntULE,\n-            traits::IntPredicate::IntSGT => IntPredicate::IntSGT,\n-            traits::IntPredicate::IntSGE => IntPredicate::IntSGE,\n-            traits::IntPredicate::IntSLT => IntPredicate::IntSLT,\n-            traits::IntPredicate::IntSLE => IntPredicate::IntSLE,\n+            common::IntPredicate::IntEQ => IntPredicate::IntEQ,\n+            common::IntPredicate::IntNE => IntPredicate::IntNE,\n+            common::IntPredicate::IntUGT => IntPredicate::IntUGT,\n+            common::IntPredicate::IntUGE => IntPredicate::IntUGE,\n+            common::IntPredicate::IntULT => IntPredicate::IntULT,\n+            common::IntPredicate::IntULE => IntPredicate::IntULE,\n+            common::IntPredicate::IntSGT => IntPredicate::IntSGT,\n+            common::IntPredicate::IntSGE => IntPredicate::IntSGE,\n+            common::IntPredicate::IntSLT => IntPredicate::IntSLT,\n+            common::IntPredicate::IntSLE => IntPredicate::IntSLE,\n         }\n     }\n }\n@@ -183,24 +183,24 @@ pub enum RealPredicate {\n }\n \n impl RealPredicate {\n-    pub fn from_generic(realpred: traits::RealPredicate) -> Self {\n+    pub fn from_generic(realpred: common::RealPredicate) -> Self {\n         match realpred {\n-            traits::RealPredicate::RealPredicateFalse => RealPredicate::RealPredicateFalse,\n-            traits::RealPredicate::RealOEQ => RealPredicate::RealOEQ,\n-            traits::RealPredicate::RealOGT => RealPredicate::RealOGT,\n-            traits::RealPredicate::RealOGE => RealPredicate::RealOGE,\n-            traits::RealPredicate::RealOLT => RealPredicate::RealOLT,\n-            traits::RealPredicate::RealOLE => RealPredicate::RealOLE,\n-            traits::RealPredicate::RealONE => RealPredicate::RealONE,\n-            traits::RealPredicate::RealORD => RealPredicate::RealORD,\n-            traits::RealPredicate::RealUNO => RealPredicate::RealUNO,\n-            traits::RealPredicate::RealUEQ => RealPredicate::RealUEQ,\n-            traits::RealPredicate::RealUGT => RealPredicate::RealUGT,\n-            traits::RealPredicate::RealUGE => RealPredicate::RealUGE,\n-            traits::RealPredicate::RealULT => RealPredicate::RealULT,\n-            traits::RealPredicate::RealULE => RealPredicate::RealULE,\n-            traits::RealPredicate::RealUNE => RealPredicate::RealUNE,\n-            traits::RealPredicate::RealPredicateTrue => RealPredicate::RealPredicateTrue\n+            common::RealPredicate::RealPredicateFalse => RealPredicate::RealPredicateFalse,\n+            common::RealPredicate::RealOEQ => RealPredicate::RealOEQ,\n+            common::RealPredicate::RealOGT => RealPredicate::RealOGT,\n+            common::RealPredicate::RealOGE => RealPredicate::RealOGE,\n+            common::RealPredicate::RealOLT => RealPredicate::RealOLT,\n+            common::RealPredicate::RealOLE => RealPredicate::RealOLE,\n+            common::RealPredicate::RealONE => RealPredicate::RealONE,\n+            common::RealPredicate::RealORD => RealPredicate::RealORD,\n+            common::RealPredicate::RealUNO => RealPredicate::RealUNO,\n+            common::RealPredicate::RealUEQ => RealPredicate::RealUEQ,\n+            common::RealPredicate::RealUGT => RealPredicate::RealUGT,\n+            common::RealPredicate::RealUGE => RealPredicate::RealUGE,\n+            common::RealPredicate::RealULT => RealPredicate::RealULT,\n+            common::RealPredicate::RealULE => RealPredicate::RealULE,\n+            common::RealPredicate::RealUNE => RealPredicate::RealUNE,\n+            common::RealPredicate::RealPredicateTrue => RealPredicate::RealPredicateTrue\n         }\n     }\n }\n@@ -246,19 +246,19 @@ pub enum AtomicRmwBinOp {\n }\n \n impl AtomicRmwBinOp {\n-    pub fn from_generic(op : traits::AtomicRmwBinOp) -> Self {\n+    pub fn from_generic(op : common::AtomicRmwBinOp) -> Self {\n         match op {\n-            traits::AtomicRmwBinOp::AtomicXchg => AtomicRmwBinOp::AtomicXchg,\n-            traits::AtomicRmwBinOp::AtomicAdd => AtomicRmwBinOp::AtomicAdd,\n-            traits::AtomicRmwBinOp::AtomicSub => AtomicRmwBinOp::AtomicSub,\n-            traits::AtomicRmwBinOp::AtomicAnd => AtomicRmwBinOp::AtomicAnd,\n-            traits::AtomicRmwBinOp::AtomicNand => AtomicRmwBinOp::AtomicNand,\n-            traits::AtomicRmwBinOp::AtomicOr => AtomicRmwBinOp::AtomicOr,\n-            traits::AtomicRmwBinOp::AtomicXor => AtomicRmwBinOp::AtomicXor,\n-            traits::AtomicRmwBinOp::AtomicMax => AtomicRmwBinOp::AtomicMax,\n-            traits::AtomicRmwBinOp::AtomicMin => AtomicRmwBinOp::AtomicMin,\n-            traits::AtomicRmwBinOp::AtomicUMax => AtomicRmwBinOp::AtomicUMax,\n-            traits::AtomicRmwBinOp::AtomicUMin => AtomicRmwBinOp::AtomicUMin\n+            common::AtomicRmwBinOp::AtomicXchg => AtomicRmwBinOp::AtomicXchg,\n+            common::AtomicRmwBinOp::AtomicAdd => AtomicRmwBinOp::AtomicAdd,\n+            common::AtomicRmwBinOp::AtomicSub => AtomicRmwBinOp::AtomicSub,\n+            common::AtomicRmwBinOp::AtomicAnd => AtomicRmwBinOp::AtomicAnd,\n+            common::AtomicRmwBinOp::AtomicNand => AtomicRmwBinOp::AtomicNand,\n+            common::AtomicRmwBinOp::AtomicOr => AtomicRmwBinOp::AtomicOr,\n+            common::AtomicRmwBinOp::AtomicXor => AtomicRmwBinOp::AtomicXor,\n+            common::AtomicRmwBinOp::AtomicMax => AtomicRmwBinOp::AtomicMax,\n+            common::AtomicRmwBinOp::AtomicMin => AtomicRmwBinOp::AtomicMin,\n+            common::AtomicRmwBinOp::AtomicUMax => AtomicRmwBinOp::AtomicUMax,\n+            common::AtomicRmwBinOp::AtomicUMin => AtomicRmwBinOp::AtomicUMin\n         }\n     }\n }\n@@ -279,15 +279,15 @@ pub enum AtomicOrdering {\n }\n \n impl AtomicOrdering {\n-    pub fn from_generic(ao : traits::AtomicOrdering) -> Self {\n+    pub fn from_generic(ao : common::AtomicOrdering) -> Self {\n         match ao {\n-            traits::AtomicOrdering::NotAtomic => AtomicOrdering::NotAtomic,\n-            traits::AtomicOrdering::Unordered => AtomicOrdering::Unordered,\n-            traits::AtomicOrdering::Monotonic => AtomicOrdering::Monotonic,\n-            traits::AtomicOrdering::Acquire => AtomicOrdering::Acquire,\n-            traits::AtomicOrdering::Release => AtomicOrdering::Release,\n-            traits::AtomicOrdering::AcquireRelease => AtomicOrdering::AcquireRelease,\n-            traits::AtomicOrdering::SequentiallyConsistent =>\n+            common::AtomicOrdering::NotAtomic => AtomicOrdering::NotAtomic,\n+            common::AtomicOrdering::Unordered => AtomicOrdering::Unordered,\n+            common::AtomicOrdering::Monotonic => AtomicOrdering::Monotonic,\n+            common::AtomicOrdering::Acquire => AtomicOrdering::Acquire,\n+            common::AtomicOrdering::Release => AtomicOrdering::Release,\n+            common::AtomicOrdering::AcquireRelease => AtomicOrdering::AcquireRelease,\n+            common::AtomicOrdering::SequentiallyConsistent =>\n                 AtomicOrdering::SequentiallyConsistent\n         }\n     }\n@@ -306,11 +306,11 @@ pub enum SynchronizationScope {\n }\n \n impl SynchronizationScope {\n-    pub fn from_generic(sc : traits::SynchronizationScope) -> Self {\n+    pub fn from_generic(sc : common::SynchronizationScope) -> Self {\n         match sc {\n-            traits::SynchronizationScope::Other => SynchronizationScope::Other,\n-            traits::SynchronizationScope::SingleThread => SynchronizationScope::SingleThread,\n-            traits::SynchronizationScope::CrossThread => SynchronizationScope::CrossThread,\n+            common::SynchronizationScope::Other => SynchronizationScope::Other,\n+            common::SynchronizationScope::SingleThread => SynchronizationScope::SingleThread,\n+            common::SynchronizationScope::CrossThread => SynchronizationScope::CrossThread,\n         }\n     }\n }"}, {"sha": "3b85690e8784c79ee780c809452c3dfecd7282d1", "filename": "src/librustc_codegen_llvm/llvm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -28,7 +28,7 @@ use std::ffi::CStr;\n use std::cell::RefCell;\n use libc::{self, c_uint, c_char, size_t};\n use rustc_data_structures::small_c_str::SmallCStr;\n-use traits;\n+use common;\n \n pub mod archive_ro;\n pub mod diagnostic;\n@@ -273,7 +273,7 @@ impl OperandBundleDef<'a> {\n         OperandBundleDef { raw: def }\n     }\n \n-    pub fn from_generic(bundle : &traits::OperandBundleDef<'a, &'a Value>) -> Self {\n+    pub fn from_generic(bundle : &common::OperandBundleDef<'a, &'a Value>) -> Self {\n         Self::new(bundle.name, &[bundle.val])\n     }\n }"}, {"sha": "46508211c5b36b29e8de219edad52063983f8be7", "filename": "src/librustc_codegen_llvm/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmeth.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -17,7 +17,7 @@ use monomorphize;\n use type_::Type;\n use value::Value;\n \n-use traits::BuilderMethods;\n+use interfaces::BuilderMethods;\n \n use rustc::ty::{self, Ty};\n use rustc::ty::layout::HasDataLayout;"}, {"sha": "a95b0e9001e94287552fe8d7c284193b745a9422", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -18,15 +18,15 @@ use abi::{Abi, ArgType, ArgTypeExt, FnType, FnTypeExt, LlvmType, PassMode};\n use base;\n use callee;\n use builder::{Builder, MemFlags};\n-use common::{self, C_bool, C_str_slice, C_struct, C_u32, C_uint_big, C_undef};\n+use common::{self, C_bool, C_str_slice, C_struct, C_u32, C_uint_big, C_undef, IntPredicate};\n use consts;\n use meth;\n use monomorphize;\n use type_of::LayoutLlvmExt;\n use type_::Type;\n use value::Value;\n \n-use traits::{IntPredicate,BuilderMethods};\n+use interfaces::BuilderMethods;\n \n use syntax::symbol::Symbol;\n use syntax_pos::Pos;"}, {"sha": "44cd11bd79e640fc0788e10487f0ce9d7bf40302", "filename": "src/librustc_codegen_llvm/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -26,7 +26,7 @@ use type_::Type;\n use syntax::ast::Mutability;\n use syntax::source_map::Span;\n use value::Value;\n-use traits::BuilderMethods;\n+use interfaces::BuilderMethods;\n \n use super::super::callee;\n use super::FunctionCx;"}, {"sha": "783e96d90e3f3511b2c9aaadf252c9485982a01a", "filename": "src/librustc_codegen_llvm/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -26,7 +26,7 @@ use monomorphize::Instance;\n use abi::{ArgTypeExt, FnType, FnTypeExt, PassMode};\n use type_::Type;\n use value::Value;\n-use traits::BuilderMethods;\n+use interfaces::BuilderMethods;\n \n use syntax_pos::{DUMMY_SP, NO_EXPANSION, BytePos, Span};\n use syntax::symbol::keywords;"}, {"sha": "88b2d07edd1a8a194ea52750c5bf223913f6b4ca", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -21,7 +21,7 @@ use type_of::LayoutLlvmExt;\n use type_::Type;\n use glue;\n \n-use traits::BuilderMethods;\n+use interfaces::BuilderMethods;\n \n use std::fmt;\n "}, {"sha": "cc0ed33d44d56a1678964241a5771df8eff227d8", "filename": "src/librustc_codegen_llvm/mir/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -15,15 +15,15 @@ use rustc::mir;\n use rustc::mir::tcx::PlaceTy;\n use base;\n use builder::Builder;\n-use common::{CodegenCx, C_undef, C_usize, C_u8, C_u32, C_uint, C_null, C_uint_big};\n+use common::{CodegenCx, C_undef, C_usize, C_u8, C_u32, C_uint, C_null, C_uint_big, IntPredicate};\n use consts;\n use type_of::LayoutLlvmExt;\n use type_::Type;\n use value::Value;\n use glue;\n use mir::constant::const_alloc_to_llvm;\n \n-use traits::{IntPredicate,BuilderMethods};\n+use interfaces::BuilderMethods;\n \n use super::{FunctionCx, LocalRef};\n use super::operand::{OperandRef, OperandValue};"}, {"sha": "577d73be2ed228150130a0e2d7824cb437af8689", "filename": "src/librustc_codegen_llvm/mir/rvalue.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -20,14 +20,17 @@ use base;\n use builder::Builder;\n use callee;\n use common::{self, val_ty};\n-use common::{C_bool, C_u8, C_i32, C_u32, C_u64, C_undef, C_null, C_usize, C_uint, C_uint_big};\n+use common::{\n+    C_bool, C_u8, C_i32, C_u32, C_u64, C_undef, C_null, C_usize,\n+    C_uint, C_uint_big, IntPredicate, RealPredicate\n+};\n use consts;\n use monomorphize;\n use type_::Type;\n use type_of::LayoutLlvmExt;\n use value::Value;\n \n-use traits::{IntPredicate, RealPredicate, BuilderMethods};\n+use interfaces::BuilderMethods;\n \n use super::{FunctionCx, LocalRef};\n use super::operand::{OperandRef, OperandValue};"}, {"sha": "dc19e3c5c5b076e1f0aa9a4e996c4b4a5975b843", "filename": "src/librustc_codegen_llvm/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d577ec7e5f942a06d9159a5dff4ab8a632ed105d/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs?ref=d577ec7e5f942a06d9159a5dff4ab8a632ed105d", "patch": "@@ -12,7 +12,7 @@ use rustc::mir;\n \n use asm;\n use builder::Builder;\n-use traits::BuilderMethods;\n+use interfaces::BuilderMethods;\n \n use super::FunctionCx;\n use super::LocalRef;"}]}