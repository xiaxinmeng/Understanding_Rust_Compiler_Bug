{"sha": "3e1139a7dc08ce57b83f650d042719b025a30d23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMTEzOWE3ZGMwOGNlNTdiODNmNjUwZDA0MjcxOWIwMjVhMzBkMjM=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-11-23T15:21:16Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-11-28T15:55:21Z"}, "message": "Rust implementation of integration test", "tree": {"sha": "4ca82f3dbdfd2964f62727d000f58c37301021ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ca82f3dbdfd2964f62727d000f58c37301021ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e1139a7dc08ce57b83f650d042719b025a30d23", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl3f7ekACgkQLO/Nsn7Q\nvnk/cw//V3rjaHUNA098O8GWANAUfD1dC7Qj8DMSYOcEQZwZWNXk5xUbx3Shyv21\nUVrq/N3N6gSS7iVa+7FL+L9qPZJqcYYVcfd560Dc4VqvcxL8F2OdkJ4mWJJ8a5D6\nFIB0c/hx8CipJ8GAdDD+odcrf1Z0Yh9i5ivsaIKSCAyfyDkvOQqaHprmQ3jIHuYU\nFSqiuE1jgap+SEyrRwTxZ4dOUA9dMVO90qbrDA37qDhm7fJY/RAcWI+vwSMFTEt7\nZGg93iTLT4pRSh6lFjxfFuwtNAPUdgB6IbYuw6A+tdewo6SBNcVL9xam+X+cOe/u\nS8q2k66LOyDeedBt/vYIkvLNpxp7w7z+JduClnffNVl8ytLC+uulfa4ZJYRlpxGk\nn8NJlud2xEVE9TaiNcm/pLBXOAWDizmOWlUtTnBoFXAer5pzPD/4dVAqcdIyLgh+\nQz+cSE5lYqnV0Pj2mRJMWstpNEf1TyoDtxz2WUQrCG5Qg+mA/db1nA2vLqLwQb3a\ncB+j5UAyoowojVBDOTbmfiG4cKAbXnA1kIbQxl8SKu7uQEJVB3M1e3aQA/rv7LYJ\n9JpcFtqHI2UdxR/HQ/pn3UjROhIg3W53oiyTCIU8SWJ4ukSXMj93t6mAmXWxkAsk\nhwOEqA/aPNq69wv51KymQXdB0gWxxmP74mM0cQb/yJA8ooKTvNo=\n=7GqZ\n-----END PGP SIGNATURE-----", "payload": "tree 4ca82f3dbdfd2964f62727d000f58c37301021ef\nparent b5a6714155c46c75df55cd5116de343811763727\nauthor flip1995 <hello@philkrones.com> 1574522476 +0100\ncommitter flip1995 <hello@philkrones.com> 1574956521 +0100\n\nRust implementation of integration test\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e1139a7dc08ce57b83f650d042719b025a30d23", "html_url": "https://github.com/rust-lang/rust/commit/3e1139a7dc08ce57b83f650d042719b025a30d23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e1139a7dc08ce57b83f650d042719b025a30d23/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5a6714155c46c75df55cd5116de343811763727", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5a6714155c46c75df55cd5116de343811763727", "html_url": "https://github.com/rust-lang/rust/commit/b5a6714155c46c75df55cd5116de343811763727"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "dabc4a62e6d667e09579962acdbc1de35f392d0f", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e1139a7dc08ce57b83f650d042719b025a30d23/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3e1139a7dc08ce57b83f650d042719b025a30d23/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=3e1139a7dc08ce57b83f650d042719b025a30d23", "patch": "@@ -38,6 +38,8 @@ clippy_lints = { version = \"0.0.212\", path = \"clippy_lints\" }\n regex = \"1\"\n semver = \"0.9\"\n rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\"}\n+git2 = { version = \"0.10\", optional = true }\n+tempfile = { version = \"3.1.0\", optional = true }\n \n [dev-dependencies]\n cargo_metadata = \"0.9.0\"\n@@ -58,3 +60,4 @@ rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\"}\n \n [features]\n deny-warnings = []\n+integration = [\"git2\", \"tempfile\"]"}, {"sha": "4d084ae34e33684434760272326096cde996bb83", "filename": "tests/integration.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/3e1139a7dc08ce57b83f650d042719b025a30d23/tests%2Fintegration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e1139a7dc08ce57b83f650d042719b025a30d23/tests%2Fintegration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fintegration.rs?ref=3e1139a7dc08ce57b83f650d042719b025a30d23", "patch": "@@ -0,0 +1,75 @@\n+#![cfg(feature = \"integration\")]\n+\n+use git2::Repository;\n+use tempfile;\n+\n+use std::env;\n+use std::process::Command;\n+\n+#[cfg_attr(feature = \"integration\", test)]\n+fn integration_test() {\n+    let repo_name = env::var(\"INTEGRATION\").expect(\"`INTEGRATION` var not set\");\n+    let repo_url = format!(\"https://github.com/{}\", repo_name);\n+    let crate_name = repo_name\n+        .split('/')\n+        .nth(1)\n+        .expect(\"repo name should have format `<org>/<name>`\");\n+\n+    let repo_dir = tempfile::tempdir()\n+        .expect(\"couldn't create temp dir\")\n+        .path()\n+        .join(crate_name);\n+\n+    Repository::clone(&repo_url, &repo_dir).expect(\"clone of repo failed\");\n+\n+    let root_dir = std::path::PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n+    let target_dir = std::path::Path::new(&root_dir).join(\"target\");\n+    let clippy_binary = target_dir.join(env!(\"PROFILE\")).join(\"cargo-clippy\");\n+\n+    let output = Command::new(clippy_binary)\n+        .current_dir(repo_dir)\n+        .env(\"RUST_BACKTRACE\", \"full\")\n+        .env(\"CARGO_TARGET_DIR\", target_dir)\n+        .args(&[\n+            \"clippy\",\n+            \"--all-targets\",\n+            \"--all-features\",\n+            \"--\",\n+            \"--cap-lints\",\n+            \"warn\",\n+            \"-Wclippy::pedantic\",\n+            \"-Wclippy::nursery\",\n+        ])\n+        .output()\n+        .expect(\"unable to run clippy\");\n+\n+    let stderr = String::from_utf8_lossy(&output.stderr);\n+    if stderr.contains(\"internal compiler error\") {\n+        let backtrace_start = stderr\n+            .find(\"thread 'rustc' panicked at\")\n+            .expect(\"start of backtrace not found\");\n+        let backtrace_end = stderr\n+            .rfind(\"error: internal compiler error\")\n+            .expect(\"end of backtrace not found\");\n+\n+        panic!(\n+            \"internal compiler error\\nBacktrace:\\n\\n{}\",\n+            &stderr[backtrace_start..backtrace_end]\n+        );\n+    } else if stderr.contains(\"query stack during panic\") {\n+        panic!(\"query stack during panic in the output\");\n+    } else if stderr.contains(\"E0463\") {\n+        panic!(\"error: E0463\");\n+    }\n+\n+    match output.status.code() {\n+        Some(code) => {\n+            if code == 0 {\n+                eprintln!(\"Compilation successful\");\n+            } else {\n+                eprintln!(\"Compilation failed. Exit code: {}\", code);\n+            }\n+        },\n+        None => panic!(\"Process terminated by signal\"),\n+    }\n+}"}]}