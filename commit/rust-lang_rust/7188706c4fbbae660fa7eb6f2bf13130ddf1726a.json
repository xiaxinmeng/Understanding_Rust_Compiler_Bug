{"sha": "7188706c4fbbae660fa7eb6f2bf13130ddf1726a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxODg3MDZjNGZiYmFlNjYwZmE3ZWI2ZjJiZjEzMTMwZGRmMTcyNmE=", "commit": {"author": {"name": "A.J. Gardner", "email": "aaron.j.gardner@gmail.com", "date": "2018-01-20T20:32:33Z"}, "committer": {"name": "A.J. Gardner", "email": "aaron.j.gardner@gmail.com", "date": "2018-01-21T00:34:53Z"}, "message": "Teach rustc about DW_AT_noreturn and a few more DIFlags", "tree": {"sha": "a390d02cffe5789f648c506082d42b6886749618", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a390d02cffe5789f648c506082d42b6886749618"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7188706c4fbbae660fa7eb6f2bf13130ddf1726a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7188706c4fbbae660fa7eb6f2bf13130ddf1726a", "html_url": "https://github.com/rust-lang/rust/commit/7188706c4fbbae660fa7eb6f2bf13130ddf1726a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7188706c4fbbae660fa7eb6f2bf13130ddf1726a/comments", "author": {"login": "mrhota", "id": 403641, "node_id": "MDQ6VXNlcjQwMzY0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/403641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrhota", "html_url": "https://github.com/mrhota", "followers_url": "https://api.github.com/users/mrhota/followers", "following_url": "https://api.github.com/users/mrhota/following{/other_user}", "gists_url": "https://api.github.com/users/mrhota/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrhota/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrhota/subscriptions", "organizations_url": "https://api.github.com/users/mrhota/orgs", "repos_url": "https://api.github.com/users/mrhota/repos", "events_url": "https://api.github.com/users/mrhota/events{/privacy}", "received_events_url": "https://api.github.com/users/mrhota/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mrhota", "id": 403641, "node_id": "MDQ6VXNlcjQwMzY0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/403641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrhota", "html_url": "https://github.com/mrhota", "followers_url": "https://api.github.com/users/mrhota/followers", "following_url": "https://api.github.com/users/mrhota/following{/other_user}", "gists_url": "https://api.github.com/users/mrhota/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrhota/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrhota/subscriptions", "organizations_url": "https://api.github.com/users/mrhota/orgs", "repos_url": "https://api.github.com/users/mrhota/repos", "events_url": "https://api.github.com/users/mrhota/events{/privacy}", "received_events_url": "https://api.github.com/users/mrhota/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15a1e2844dfea7850be5c6c901b67ceff370b0eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/15a1e2844dfea7850be5c6c901b67ceff370b0eb", "html_url": "https://github.com/rust-lang/rust/commit/15a1e2844dfea7850be5c6c901b67ceff370b0eb"}], "stats": {"total": 56, "additions": 54, "deletions": 2}, "files": [{"sha": "8602c559da9b6f76a645fb279f2332144a78c597", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7188706c4fbbae660fa7eb6f2bf13130ddf1726a/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7188706c4fbbae660fa7eb6f2bf13130ddf1726a/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=7188706c4fbbae660fa7eb6f2bf13130ddf1726a", "patch": "@@ -498,6 +498,10 @@ pub mod debuginfo {\n             const FlagStaticMember        = (1 << 12);\n             const FlagLValueReference     = (1 << 13);\n             const FlagRValueReference     = (1 << 14);\n+            const FlagExternalTypeRef     = (1 << 15);\n+            const FlagIntroducedVirtual   = (1 << 18);\n+            const FlagBitField            = (1 << 19);\n+            const FlagNoReturn            = (1 << 20);\n             const FlagMainSubprogram      = (1 << 21);\n         }\n     }"}, {"sha": "9071eb776d5295dc25231789591d74dae9ad5251", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7188706c4fbbae660fa7eb6f2bf13130ddf1726a/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7188706c4fbbae660fa7eb6f2bf13130ddf1726a/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=7188706c4fbbae660fa7eb6f2bf13130ddf1726a", "patch": "@@ -270,6 +270,9 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         }\n         None => {}\n     };\n+    if sig.output().is_never() {\n+        flags = flags | DIFlags::FlagNoReturn;\n+    }\n \n     let fn_metadata = unsafe {\n         llvm::LLVMRustDIBuilderCreateFunction("}, {"sha": "2e8207d1cbbd9a540a2c8050d169015f1f1b7f88", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7188706c4fbbae660fa7eb6f2bf13130ddf1726a/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7188706c4fbbae660fa7eb6f2bf13130ddf1726a/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=7188706c4fbbae660fa7eb6f2bf13130ddf1726a", "patch": "@@ -457,9 +457,13 @@ enum class LLVMRustDIFlags : uint32_t {\n   FlagStaticMember = (1 << 12),\n   FlagLValueReference = (1 << 13),\n   FlagRValueReference = (1 << 14),\n-  FlagMainSubprogram      = (1 << 21),\n+  FlagExternalTypeRef = (1 << 15),\n+  FlagIntroducedVirtual = (1 << 18),\n+  FlagBitField = (1 << 19),\n+  FlagNoReturn = (1 << 20),\n+  FlagMainSubprogram = (1 << 21),\n   // Do not add values that are not supported by the minimum LLVM\n-  // version we support!\n+  // version we support! see llvm/include/llvm/IR/DebugInfoFlags.def\n };\n \n inline LLVMRustDIFlags operator&(LLVMRustDIFlags A, LLVMRustDIFlags B) {\n@@ -545,6 +549,18 @@ static unsigned fromRust(LLVMRustDIFlags Flags) {\n     Result |= DINode::DIFlags::FlagRValueReference;\n   }\n #if LLVM_RUSTLLVM || LLVM_VERSION_GE(4, 0)\n+  if (isSet(Flags & LLVMRustDIFlags::FlagExternalTypeRef)) {\n+    Result |= DINode::DIFlags::FlagExternalTypeRef;\n+  }\n+  if (isSet(Flags & LLVMRustDIFlags::FlagIntroducedVirtual)) {\n+    Result |= DINode::DIFlags::FlagIntroducedVirtual;\n+  }\n+  if (isSet(Flags & LLVMRustDIFlags::FlagBitField)) {\n+    Result |= DINode::DIFlags::FlagBitField;\n+  }\n+  if (isSet(Flags & LLVMRustDIFlags::FlagNoReturn)) {\n+    Result |= DINode::DIFlags::FlagNoReturn;\n+  }\n   if (isSet(Flags & LLVMRustDIFlags::FlagMainSubprogram)) {\n     Result |= DINode::DIFlags::FlagMainSubprogram;\n   }"}, {"sha": "473fed8e046f77b273c27663370003fa4df4769f", "filename": "src/test/codegen/noreturnflag.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7188706c4fbbae660fa7eb6f2bf13130ddf1726a/src%2Ftest%2Fcodegen%2Fnoreturnflag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7188706c4fbbae660fa7eb6f2bf13130ddf1726a/src%2Ftest%2Fcodegen%2Fnoreturnflag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnoreturnflag.rs?ref=7188706c4fbbae660fa7eb6f2bf13130ddf1726a", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+// min-llvm-version 3.8\n+\n+// compile-flags: -g -C no-prepopulate-passes\n+\n+// CHECK-LABEL: foo\n+// CHECK: {{.*}}DISubprogram{{.*}} name: \"foo\",{{.*}}DIFlagNoReturn{{.*}}\n+\n+#[no_mangle]\n+pub fn foo() -> ! {\n+    loop {}\n+}\n+\n+// CHECK-LABEL: main\n+// CHECK: {{.*}}DISubprogram{{.*}}name: \"main\",{{.*}}DIFlagMainSubprogram{{.*}}\n+\n+pub fn main() {\n+    foo();\n+}"}]}