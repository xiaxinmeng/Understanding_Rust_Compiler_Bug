{"sha": "bd6a2236e1b57050729071c6178d5c3937a38141", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNmEyMjM2ZTFiNTcwNTA3MjkwNzFjNjE3OGQ1YzM5MzdhMzgxNDE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T04:41:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:29Z"}, "message": "librustc: De-`@mut` `FunctionContext::llreturn`", "tree": {"sha": "0d0030c23d0d6cf311c2625a46c33289e14fa727", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d0030c23d0d6cf311c2625a46c33289e14fa727"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd6a2236e1b57050729071c6178d5c3937a38141", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6a2236e1b57050729071c6178d5c3937a38141", "html_url": "https://github.com/rust-lang/rust/commit/bd6a2236e1b57050729071c6178d5c3937a38141", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd6a2236e1b57050729071c6178d5c3937a38141/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a07cee26a43024867d4b554b996bb5fc881dcb32", "url": "https://api.github.com/repos/rust-lang/rust/commits/a07cee26a43024867d4b554b996bb5fc881dcb32", "html_url": "https://github.com/rust-lang/rust/commit/a07cee26a43024867d4b554b996bb5fc881dcb32"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "c2749ba44922c71260804f6021624370519934d3", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bd6a2236e1b57050729071c6178d5c3937a38141/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6a2236e1b57050729071c6178d5c3937a38141/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=bd6a2236e1b57050729071c6178d5c3937a38141", "patch": "@@ -1688,7 +1688,7 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n           llretptr: Cell::new(None),\n           entry_bcx: None,\n           alloca_insert_pt: Cell::new(None),\n-          llreturn: None,\n+          llreturn: Cell::new(None),\n           llself: None,\n           personality: None,\n           caller_expects_out_pointer: uses_outptr,\n@@ -1843,7 +1843,7 @@ pub fn copy_args_to_allocas(fcx: @mut FunctionContext,\n pub fn finish_fn(fcx: @mut FunctionContext, last_bcx: @Block) {\n     let _icx = push_ctxt(\"finish_fn\");\n \n-    let ret_cx = match fcx.llreturn {\n+    let ret_cx = match fcx.llreturn.get() {\n         Some(llreturn) => {\n             if !last_bcx.terminated.get() {\n                 Br(last_bcx, llreturn);\n@@ -1949,15 +1949,16 @@ pub fn trans_closure(ccx: @CrateContext,\n         bcx = controlflow::trans_block(bcx, body, dest);\n     }\n \n-    match fcx.llreturn {\n+    match fcx.llreturn.get() {\n         Some(llreturn) => cleanup_and_Br(bcx, bcx_top, llreturn),\n         None => bcx = cleanup_block(bcx, Some(bcx_top.llbb))\n     };\n \n     // Put return block after all other blocks.\n     // This somewhat improves single-stepping experience in debugger.\n     unsafe {\n-        for &llreturn in fcx.llreturn.iter() {\n+        let llreturn = fcx.llreturn.get();\n+        for &llreturn in llreturn.iter() {\n             llvm::LLVMMoveBasicBlockAfter(llreturn, bcx.llbb);\n         }\n     }"}, {"sha": "d204b281a4f62690389bdddeed18d127b9eaa0cb", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd6a2236e1b57050729071c6178d5c3937a38141/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6a2236e1b57050729071c6178d5c3937a38141/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=bd6a2236e1b57050729071c6178d5c3937a38141", "patch": "@@ -222,7 +222,7 @@ pub struct FunctionContext {\n     // A marker for the place where we want to insert the function's static\n     // allocas, so that LLVM will coalesce them into a single alloca call.\n     alloca_insert_pt: Cell<Option<ValueRef>>,\n-    llreturn: Option<BasicBlockRef>,\n+    llreturn: Cell<Option<BasicBlockRef>>,\n     // The 'self' value currently in use in this function, if there\n     // is one.\n     //\n@@ -300,11 +300,11 @@ impl FunctionContext {\n     }\n \n     pub fn get_llreturn(&mut self) -> BasicBlockRef {\n-        if self.llreturn.is_none() {\n-            self.llreturn = Some(base::mk_return_basic_block(self.llfn));\n+        if self.llreturn.get().is_none() {\n+            self.llreturn.set(Some(base::mk_return_basic_block(self.llfn)));\n         }\n \n-        self.llreturn.unwrap()\n+        self.llreturn.get().unwrap()\n     }\n }\n "}, {"sha": "15e7ed4593dade5a259c5937bc4a550e5335d32b", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd6a2236e1b57050729071c6178d5c3937a38141/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6a2236e1b57050729071c6178d5c3937a38141/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=bd6a2236e1b57050729071c6178d5c3937a38141", "patch": "@@ -310,7 +310,7 @@ impl Reflector {\n                 let arg = BitCast(bcx, arg, llptrty);\n                 let ret = adt::trans_get_discr(bcx, repr, arg, Some(Type::i64()));\n                 Store(bcx, ret, fcx.llretptr.get().unwrap());\n-                match fcx.llreturn {\n+                match fcx.llreturn.get() {\n                     Some(llreturn) => cleanup_and_Br(bcx, bcx, llreturn),\n                     None => bcx = cleanup_block(bcx, Some(bcx.llbb))\n                 };"}]}