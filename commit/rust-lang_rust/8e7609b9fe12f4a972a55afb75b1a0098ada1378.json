{"sha": "8e7609b9fe12f4a972a55afb75b1a0098ada1378", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNzYwOWI5ZmUxMmY0YTk3MmE1NWFmYjc1YjFhMDA5OGFkYTEzNzg=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-07T18:24:22Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-19T05:03:29Z"}, "message": "Propagate `rustc_const_unstable` to children", "tree": {"sha": "3b801fccad796cf7200f562309262046489c1126", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b801fccad796cf7200f562309262046489c1126"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e7609b9fe12f4a972a55afb75b1a0098ada1378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7609b9fe12f4a972a55afb75b1a0098ada1378", "html_url": "https://github.com/rust-lang/rust/commit/8e7609b9fe12f4a972a55afb75b1a0098ada1378", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e7609b9fe12f4a972a55afb75b1a0098ada1378/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a5abcac7f43dde694ae202678b8271e8b57279f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a5abcac7f43dde694ae202678b8271e8b57279f", "html_url": "https://github.com/rust-lang/rust/commit/0a5abcac7f43dde694ae202678b8271e8b57279f"}], "stats": {"total": 65, "additions": 54, "deletions": 11}, "files": [{"sha": "d9296deb1d963911339375d0eaa8f6a9ac3b66a5", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 54, "deletions": 11, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/8e7609b9fe12f4a972a55afb75b1a0098ada1378/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7609b9fe12f4a972a55afb75b1a0098ada1378/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=8e7609b9fe12f4a972a55afb75b1a0098ada1378", "patch": "@@ -9,7 +9,7 @@ use rustc::session::parse::feature_err;\n use rustc::session::Session;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n-use rustc_attr::{self as attr, Stability};\n+use rustc_attr::{self as attr, ConstStability, Stability};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n@@ -41,6 +41,7 @@ struct Annotator<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     index: &'a mut Index<'tcx>,\n     parent_stab: Option<&'tcx Stability>,\n+    parent_const_stab: Option<&'tcx ConstStability>,\n     parent_depr: Option<DeprecationEntry>,\n     in_trait_impl: bool,\n }\n@@ -64,6 +65,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         }\n \n         // This crate explicitly wants staged API.\n+\n         debug!(\"annotate(id = {:?}, attrs = {:?})\", hir_id, attrs);\n         if let Some(..) = attr::find_deprecation(&self.tcx.sess.parse_sess, attrs, item_sp) {\n             self.tcx.sess.span_err(\n@@ -72,13 +74,25 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n                                              use `#[rustc_deprecated]` instead\",\n             );\n         }\n-        let (stab, const_stab) =\n-            attr::find_stability(&self.tcx.sess.parse_sess, attrs, item_sp);\n-        if let Some(const_stab) = const_stab {\n+\n+        let (stab, const_stab) = attr::find_stability(&self.tcx.sess.parse_sess, attrs, item_sp);\n+\n+        let const_stab = const_stab.map(|const_stab| {\n             let const_stab = self.tcx.intern_const_stability(const_stab);\n             self.index.const_stab_map.insert(hir_id, const_stab);\n+            const_stab\n+        });\n+\n+        if const_stab.is_none() {\n+            debug!(\"annotate: const_stab not found, parent = {:?}\", self.parent_const_stab);\n+            if let Some(parent) = self.parent_const_stab {\n+                if parent.level.is_unstable() {\n+                    self.index.const_stab_map.insert(hir_id, parent);\n+                }\n+            }\n         }\n-        if let Some(mut stab) = stab {\n+\n+        let stab = stab.map(|mut stab| {\n             // Error if prohibited, or can't inherit anything from a container.\n             if kind == AnnotationKind::Prohibited\n                 || (kind == AnnotationKind::Container\n@@ -137,18 +151,46 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             }\n \n             self.index.stab_map.insert(hir_id, stab);\n+            stab\n+        });\n \n-            let orig_parent_stab = replace(&mut self.parent_stab, Some(stab));\n-            visit_children(self);\n-            self.parent_stab = orig_parent_stab;\n-        } else {\n-            debug!(\"annotate: not found, parent = {:?}\", self.parent_stab);\n+        if stab.is_none() {\n+            debug!(\"annotate: stab not found, parent = {:?}\", self.parent_stab);\n             if let Some(stab) = self.parent_stab {\n                 if stab.level.is_unstable() {\n                     self.index.stab_map.insert(hir_id, stab);\n                 }\n             }\n-            visit_children(self);\n+        }\n+\n+        self.recurse_with_stability_attrs(stab, const_stab, visit_children);\n+    }\n+\n+    fn recurse_with_stability_attrs(\n+        &mut self,\n+        stab: Option<&'tcx Stability>,\n+        const_stab: Option<&'tcx ConstStability>,\n+        f: impl FnOnce(&mut Self),\n+    ) {\n+        // These will be `Some` if this item changes the corresponding stability attribute.\n+        let mut replaced_parent_stab = None;\n+        let mut replaced_parent_const_stab = None;\n+\n+        if let Some(stab) = stab {\n+            replaced_parent_stab = Some(replace(&mut self.parent_stab, Some(stab)));\n+        }\n+        if let Some(const_stab) = const_stab {\n+            replaced_parent_const_stab =\n+                Some(replace(&mut self.parent_const_stab, Some(const_stab)));\n+        }\n+\n+        f(self);\n+\n+        if let Some(orig_parent_stab) = replaced_parent_stab {\n+            self.parent_stab = orig_parent_stab;\n+        }\n+        if let Some(orig_parent_const_stab) = replaced_parent_const_stab {\n+            self.parent_const_stab = orig_parent_const_stab;\n         }\n     }\n \n@@ -388,6 +430,7 @@ fn new_index(tcx: TyCtxt<'tcx>) -> Index<'tcx> {\n             tcx,\n             index: &mut index,\n             parent_stab: None,\n+            parent_const_stab: None,\n             parent_depr: None,\n             in_trait_impl: false,\n         };"}]}