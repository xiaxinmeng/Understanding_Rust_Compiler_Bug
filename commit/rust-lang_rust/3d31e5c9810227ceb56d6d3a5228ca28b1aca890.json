{"sha": "3d31e5c9810227ceb56d6d3a5228ca28b1aca890", "node_id": "C_kwDOAAsO6NoAKDNkMzFlNWM5ODEwMjI3Y2ViNTZkNmQzYTUyMjhjYTI4YjFhY2E4OTA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-25T16:30:23Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-30T12:11:19Z"}, "message": "s/WithStableHash/WithCachedTypeInfo/", "tree": {"sha": "4394b120584c2394dd8b8e9356816701f90789ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4394b120584c2394dd8b8e9356816701f90789ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d31e5c9810227ceb56d6d3a5228ca28b1aca890", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d31e5c9810227ceb56d6d3a5228ca28b1aca890", "html_url": "https://github.com/rust-lang/rust/commit/3d31e5c9810227ceb56d6d3a5228ca28b1aca890", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d31e5c9810227ceb56d6d3a5228ca28b1aca890/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8de4b138455add55bde6de5553a933a2ab79b71f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8de4b138455add55bde6de5553a933a2ab79b71f", "html_url": "https://github.com/rust-lang/rust/commit/8de4b138455add55bde6de5553a933a2ab79b71f"}], "stats": {"total": 89, "additions": 45, "deletions": 44}, "files": [{"sha": "9985aeaab57da396683259b972b981f364bde732", "filename": "compiler/rustc_data_structures/src/intern.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3d31e5c9810227ceb56d6d3a5228ca28b1aca890/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d31e5c9810227ceb56d6d3a5228ca28b1aca890/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs?ref=3d31e5c9810227ceb56d6d3a5228ca28b1aca890", "patch": "@@ -118,33 +118,33 @@ where\n /// This is useful if you have values that you intern but never (can?) use for stable\n /// hashing.\n #[derive(Copy, Clone)]\n-pub struct WithStableHash<T> {\n+pub struct WithCachedTypeInfo<T> {\n     pub internee: T,\n     pub stable_hash: Fingerprint,\n }\n \n-impl<T: PartialEq> PartialEq for WithStableHash<T> {\n+impl<T: PartialEq> PartialEq for WithCachedTypeInfo<T> {\n     #[inline]\n     fn eq(&self, other: &Self) -> bool {\n         self.internee.eq(&other.internee)\n     }\n }\n \n-impl<T: Eq> Eq for WithStableHash<T> {}\n+impl<T: Eq> Eq for WithCachedTypeInfo<T> {}\n \n-impl<T: Ord> PartialOrd for WithStableHash<T> {\n-    fn partial_cmp(&self, other: &WithStableHash<T>) -> Option<Ordering> {\n+impl<T: Ord> PartialOrd for WithCachedTypeInfo<T> {\n+    fn partial_cmp(&self, other: &WithCachedTypeInfo<T>) -> Option<Ordering> {\n         Some(self.internee.cmp(&other.internee))\n     }\n }\n \n-impl<T: Ord> Ord for WithStableHash<T> {\n-    fn cmp(&self, other: &WithStableHash<T>) -> Ordering {\n+impl<T: Ord> Ord for WithCachedTypeInfo<T> {\n+    fn cmp(&self, other: &WithCachedTypeInfo<T>) -> Ordering {\n         self.internee.cmp(&other.internee)\n     }\n }\n \n-impl<T> Deref for WithStableHash<T> {\n+impl<T> Deref for WithCachedTypeInfo<T> {\n     type Target = T;\n \n     #[inline]\n@@ -153,7 +153,7 @@ impl<T> Deref for WithStableHash<T> {\n     }\n }\n \n-impl<T: Hash> Hash for WithStableHash<T> {\n+impl<T: Hash> Hash for WithCachedTypeInfo<T> {\n     #[inline]\n     fn hash<H: Hasher>(&self, s: &mut H) {\n         if self.stable_hash != Fingerprint::ZERO {\n@@ -164,7 +164,7 @@ impl<T: Hash> Hash for WithStableHash<T> {\n     }\n }\n \n-impl<T: HashStable<CTX>, CTX> HashStable<CTX> for WithStableHash<T> {\n+impl<T: HashStable<CTX>, CTX> HashStable<CTX> for WithCachedTypeInfo<T> {\n     fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n         if self.stable_hash == Fingerprint::ZERO || cfg!(debug_assertions) {\n             // No cached hash available. This can only mean that incremental is disabled."}, {"sha": "3f3d92d68e33ae1dd93990c935d190432e35e4c9", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d31e5c9810227ceb56d6d3a5228ca28b1aca890/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d31e5c9810227ceb56d6d3a5228ca28b1aca890/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=3d31e5c9810227ceb56d6d3a5228ca28b1aca890", "patch": "@@ -88,8 +88,8 @@ macro_rules! arena_types {\n             [] hir_id_set: rustc_hir::HirIdSet,\n \n             // Interned types\n-            [] tys: rustc_data_structures::intern::WithStableHash<rustc_middle::ty::TyS<'tcx>>,\n-            [] predicates: rustc_data_structures::intern::WithStableHash<rustc_middle::ty::PredicateS<'tcx>>,\n+            [] tys: rustc_data_structures::intern::WithCachedTypeInfo<rustc_middle::ty::TyS<'tcx>>,\n+            [] predicates: rustc_data_structures::intern::WithCachedTypeInfo<rustc_middle::ty::PredicateS<'tcx>>,\n             [] consts: rustc_middle::ty::ConstS<'tcx>,\n \n             // Note that this deliberately duplicates items in the `rustc_hir::arena`,"}, {"sha": "3af3444b86c3860e93ee9970823e85edbdbcc290", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3d31e5c9810227ceb56d6d3a5228ca28b1aca890/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d31e5c9810227ceb56d6d3a5228ca28b1aca890/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=3d31e5c9810227ceb56d6d3a5228ca28b1aca890", "patch": "@@ -27,7 +27,7 @@ use crate::ty::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef, UserSubst\n use rustc_ast as ast;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::intern::{Interned, WithStableHash};\n+use rustc_data_structures::intern::{Interned, WithCachedTypeInfo};\n use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n@@ -136,13 +136,13 @@ pub struct CtxtInterners<'tcx> {\n \n     // Specifically use a speedy hash algorithm for these hash sets, since\n     // they're accessed quite often.\n-    type_: InternedSet<'tcx, WithStableHash<TyS<'tcx>>>,\n+    type_: InternedSet<'tcx, WithCachedTypeInfo<TyS<'tcx>>>,\n     const_lists: InternedSet<'tcx, List<ty::Const<'tcx>>>,\n     substs: InternedSet<'tcx, InternalSubsts<'tcx>>,\n     canonical_var_infos: InternedSet<'tcx, List<CanonicalVarInfo<'tcx>>>,\n     region: InternedSet<'tcx, RegionKind<'tcx>>,\n     poly_existential_predicates: InternedSet<'tcx, List<PolyExistentialPredicate<'tcx>>>,\n-    predicate: InternedSet<'tcx, WithStableHash<PredicateS<'tcx>>>,\n+    predicate: InternedSet<'tcx, WithCachedTypeInfo<PredicateS<'tcx>>>,\n     predicates: InternedSet<'tcx, List<Predicate<'tcx>>>,\n     projs: InternedSet<'tcx, List<ProjectionKind>>,\n     place_elems: InternedSet<'tcx, List<PlaceElem<'tcx>>>,\n@@ -200,7 +200,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n                     };\n \n                     InternedInSet(\n-                        self.arena.alloc(WithStableHash { internee: ty_struct, stable_hash }),\n+                        self.arena.alloc(WithCachedTypeInfo { internee: ty_struct, stable_hash }),\n                     )\n                 })\n                 .0,\n@@ -253,7 +253,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n \n                     InternedInSet(\n                         self.arena\n-                            .alloc(WithStableHash { internee: predicate_struct, stable_hash }),\n+                            .alloc(WithCachedTypeInfo { internee: predicate_struct, stable_hash }),\n                     )\n                 })\n                 .0,\n@@ -2167,48 +2167,48 @@ impl<'tcx, T: 'tcx + ?Sized> IntoPointer for InternedInSet<'tcx, T> {\n }\n \n #[allow(rustc::usage_of_ty_tykind)]\n-impl<'tcx> Borrow<TyKind<'tcx>> for InternedInSet<'tcx, WithStableHash<TyS<'tcx>>> {\n+impl<'tcx> Borrow<TyKind<'tcx>> for InternedInSet<'tcx, WithCachedTypeInfo<TyS<'tcx>>> {\n     fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {\n         &self.0.kind\n     }\n }\n \n-impl<'tcx> PartialEq for InternedInSet<'tcx, WithStableHash<TyS<'tcx>>> {\n-    fn eq(&self, other: &InternedInSet<'tcx, WithStableHash<TyS<'tcx>>>) -> bool {\n+impl<'tcx> PartialEq for InternedInSet<'tcx, WithCachedTypeInfo<TyS<'tcx>>> {\n+    fn eq(&self, other: &InternedInSet<'tcx, WithCachedTypeInfo<TyS<'tcx>>>) -> bool {\n         // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals\n         // `x == y`.\n         self.0.kind == other.0.kind\n     }\n }\n \n-impl<'tcx> Eq for InternedInSet<'tcx, WithStableHash<TyS<'tcx>>> {}\n+impl<'tcx> Eq for InternedInSet<'tcx, WithCachedTypeInfo<TyS<'tcx>>> {}\n \n-impl<'tcx> Hash for InternedInSet<'tcx, WithStableHash<TyS<'tcx>>> {\n+impl<'tcx> Hash for InternedInSet<'tcx, WithCachedTypeInfo<TyS<'tcx>>> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n         // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.\n         self.0.kind.hash(s)\n     }\n }\n \n impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>>\n-    for InternedInSet<'tcx, WithStableHash<PredicateS<'tcx>>>\n+    for InternedInSet<'tcx, WithCachedTypeInfo<PredicateS<'tcx>>>\n {\n     fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {\n         &self.0.kind\n     }\n }\n \n-impl<'tcx> PartialEq for InternedInSet<'tcx, WithStableHash<PredicateS<'tcx>>> {\n-    fn eq(&self, other: &InternedInSet<'tcx, WithStableHash<PredicateS<'tcx>>>) -> bool {\n+impl<'tcx> PartialEq for InternedInSet<'tcx, WithCachedTypeInfo<PredicateS<'tcx>>> {\n+    fn eq(&self, other: &InternedInSet<'tcx, WithCachedTypeInfo<PredicateS<'tcx>>>) -> bool {\n         // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals\n         // `x == y`.\n         self.0.kind == other.0.kind\n     }\n }\n \n-impl<'tcx> Eq for InternedInSet<'tcx, WithStableHash<PredicateS<'tcx>>> {}\n+impl<'tcx> Eq for InternedInSet<'tcx, WithCachedTypeInfo<PredicateS<'tcx>>> {}\n \n-impl<'tcx> Hash for InternedInSet<'tcx, WithStableHash<PredicateS<'tcx>>> {\n+impl<'tcx> Hash for InternedInSet<'tcx, WithCachedTypeInfo<PredicateS<'tcx>>> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n         // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.\n         self.0.kind.hash(s)"}, {"sha": "d3cbd2e03cfb5c0adb4ea1b24cce9ab3e1f5d86f", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3d31e5c9810227ceb56d6d3a5228ca28b1aca890/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d31e5c9810227ceb56d6d3a5228ca28b1aca890/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=3d31e5c9810227ceb56d6d3a5228ca28b1aca890", "patch": "@@ -32,7 +32,7 @@ use rustc_ast::node_id::NodeMap;\n use rustc_attr as attr;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n-use rustc_data_structures::intern::{Interned, WithStableHash};\n+use rustc_data_structures::intern::{Interned, WithCachedTypeInfo};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_hir as hir;\n@@ -495,19 +495,20 @@ pub(crate) struct TyS<'tcx> {\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable)]\n #[rustc_diagnostic_item = \"Ty\"]\n #[rustc_pass_by_value]\n-pub struct Ty<'tcx>(Interned<'tcx, WithStableHash<TyS<'tcx>>>);\n+pub struct Ty<'tcx>(Interned<'tcx, WithCachedTypeInfo<TyS<'tcx>>>);\n \n impl<'tcx> TyCtxt<'tcx> {\n     /// A \"bool\" type used in rustc_mir_transform unit tests when we\n     /// have not spun up a TyCtxt.\n-    pub const BOOL_TY_FOR_UNIT_TESTING: Ty<'tcx> = Ty(Interned::new_unchecked(&WithStableHash {\n-        internee: TyS {\n-            kind: ty::Bool,\n-            flags: TypeFlags::empty(),\n-            outer_exclusive_binder: DebruijnIndex::from_usize(0),\n-        },\n-        stable_hash: Fingerprint::ZERO,\n-    }));\n+    pub const BOOL_TY_FOR_UNIT_TESTING: Ty<'tcx> =\n+        Ty(Interned::new_unchecked(&WithCachedTypeInfo {\n+            internee: TyS {\n+                kind: ty::Bool,\n+                flags: TypeFlags::empty(),\n+                outer_exclusive_binder: DebruijnIndex::from_usize(0),\n+            },\n+            stable_hash: Fingerprint::ZERO,\n+        }));\n }\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TyS<'tcx> {\n@@ -550,7 +551,7 @@ pub(crate) struct PredicateS<'tcx> {\n /// Use this rather than `PredicateS`, whenever possible.\n #[derive(Clone, Copy, PartialEq, Eq, Hash, HashStable)]\n #[rustc_pass_by_value]\n-pub struct Predicate<'tcx>(Interned<'tcx, WithStableHash<PredicateS<'tcx>>>);\n+pub struct Predicate<'tcx>(Interned<'tcx, WithCachedTypeInfo<PredicateS<'tcx>>>);\n \n impl<'tcx> Predicate<'tcx> {\n     /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.\n@@ -1028,7 +1029,7 @@ impl<'tcx> Term<'tcx> {\n         unsafe {\n             match ptr & TAG_MASK {\n                 TYPE_TAG => TermKind::Ty(Ty(Interned::new_unchecked(\n-                    &*((ptr & !TAG_MASK) as *const WithStableHash<ty::TyS<'tcx>>),\n+                    &*((ptr & !TAG_MASK) as *const WithCachedTypeInfo<ty::TyS<'tcx>>),\n                 ))),\n                 CONST_TAG => TermKind::Const(ty::Const(Interned::new_unchecked(\n                     &*((ptr & !TAG_MASK) as *const ty::ConstS<'tcx>),\n@@ -1072,7 +1073,7 @@ impl<'tcx> TermKind<'tcx> {\n             TermKind::Ty(ty) => {\n                 // Ensure we can use the tag bits.\n                 assert_eq!(mem::align_of_val(&*ty.0.0) & TAG_MASK, 0);\n-                (TYPE_TAG, ty.0.0 as *const WithStableHash<ty::TyS<'tcx>> as usize)\n+                (TYPE_TAG, ty.0.0 as *const WithCachedTypeInfo<ty::TyS<'tcx>> as usize)\n             }\n             TermKind::Const(ct) => {\n                 // Ensure we can use the tag bits.\n@@ -2694,6 +2695,6 @@ mod size_asserts {\n     // tidy-alphabetical-start\n     static_assert_size!(PredicateS<'_>, 48);\n     static_assert_size!(TyS<'_>, 40);\n-    static_assert_size!(WithStableHash<TyS<'_>>, 56);\n+    static_assert_size!(WithCachedTypeInfo<TyS<'_>>, 56);\n     // tidy-alphabetical-end\n }"}, {"sha": "f69035f619ff6ef9a5ae3a636f178bf7b7c4fffb", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d31e5c9810227ceb56d6d3a5228ca28b1aca890/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d31e5c9810227ceb56d6d3a5228ca28b1aca890/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=3d31e5c9810227ceb56d6d3a5228ca28b1aca890", "patch": "@@ -6,7 +6,7 @@ use crate::ty::sty::{ClosureSubsts, GeneratorSubsts, InlineConstSubsts};\n use crate::ty::visit::{TypeVisitable, TypeVisitor};\n use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n \n-use rustc_data_structures::intern::{Interned, WithStableHash};\n+use rustc_data_structures::intern::{Interned, WithCachedTypeInfo};\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Decodable, Encodable};\n@@ -84,7 +84,7 @@ impl<'tcx> GenericArgKind<'tcx> {\n             GenericArgKind::Type(ty) => {\n                 // Ensure we can use the tag bits.\n                 assert_eq!(mem::align_of_val(&*ty.0.0) & TAG_MASK, 0);\n-                (TYPE_TAG, ty.0.0 as *const WithStableHash<ty::TyS<'tcx>> as usize)\n+                (TYPE_TAG, ty.0.0 as *const WithCachedTypeInfo<ty::TyS<'tcx>> as usize)\n             }\n             GenericArgKind::Const(ct) => {\n                 // Ensure we can use the tag bits.\n@@ -162,7 +162,7 @@ impl<'tcx> GenericArg<'tcx> {\n                     &*((ptr & !TAG_MASK) as *const ty::RegionKind<'tcx>),\n                 ))),\n                 TYPE_TAG => GenericArgKind::Type(Ty(Interned::new_unchecked(\n-                    &*((ptr & !TAG_MASK) as *const WithStableHash<ty::TyS<'tcx>>),\n+                    &*((ptr & !TAG_MASK) as *const WithCachedTypeInfo<ty::TyS<'tcx>>),\n                 ))),\n                 CONST_TAG => GenericArgKind::Const(ty::Const(Interned::new_unchecked(\n                     &*((ptr & !TAG_MASK) as *const ty::ConstS<'tcx>),"}]}