{"sha": "ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd", "node_id": "C_kwDOAAsO6NoAKGFiMGQ5ZGZlZmVlMjUzNWZmYTFhNWNhOGFiZTNiNjRhOGU1OTcwZmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-28T05:06:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-28T05:06:46Z"}, "message": "Rollup merge of #103609 - BoxyUwU:fix_impl_self_cycle, r=compiler-errors\n\nEmit a nicer error on `impl Self {`\n\ncurrently it emits a \"cycle detected error\" but this PR makes it emit a more user friendly error specifically saying that `Self` is disallowed in that position. this is a pretty hacky fix so i dont expect this to be merged (I basically only made this PR because i wanted to see if CI passes)\n\nr? ``@compiler-errors``", "tree": {"sha": "929424f3bae98d917899737e59e18e3950177206", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/929424f3bae98d917899737e59e18e3950177206"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjW2NmCRBK7hj4Ov3rIwAAKLoIAJJew2FwRk9agSGpe+t4r5iy\nwqNGzg4J2AKazw08C/4SL6BXpO1mHWc7/PalkzWavKSf2r1/nt02glQ3hneANWN1\ntk3xfH4FJRNIK7zgbILuQ2FDN3iczNe5ZRcrcCPZRI7t3DS5HjYVB/tXE7VWsTJ1\n29PBNlL4lxmlST9g0hd2WopDgjvBc7MV0T73jWYvb3Q9Mymy6tvAf8vRzuqwuk68\ncgru46dOZduLRHblVHFjUSZOdOmjm4UNuhegczrWe/nEmqTECO3SMXP9L0kdsLOV\nWgXPD8+aj0VlDV4lnTMmEutH5TwhFtdl3YvDKLui+F/khKCL8dKsMBn8eJ62gCc=\n=P/c6\n-----END PGP SIGNATURE-----\n", "payload": "tree 929424f3bae98d917899737e59e18e3950177206\nparent 112fd022cd42698f644333206ef5335069b1ea13\nparent b3425587a669d81b45f0d14f7fd6ae6108bf9444\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666933606 +0200\ncommitter GitHub <noreply@github.com> 1666933606 +0200\n\nRollup merge of #103609 - BoxyUwU:fix_impl_self_cycle, r=compiler-errors\n\nEmit a nicer error on `impl Self {`\n\ncurrently it emits a \"cycle detected error\" but this PR makes it emit a more user friendly error specifically saying that `Self` is disallowed in that position. this is a pretty hacky fix so i dont expect this to be merged (I basically only made this PR because i wanted to see if CI passes)\n\nr? ``@compiler-errors``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd", "html_url": "https://github.com/rust-lang/rust/commit/ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "112fd022cd42698f644333206ef5335069b1ea13", "url": "https://api.github.com/repos/rust-lang/rust/commits/112fd022cd42698f644333206ef5335069b1ea13", "html_url": "https://github.com/rust-lang/rust/commit/112fd022cd42698f644333206ef5335069b1ea13"}, {"sha": "b3425587a669d81b45f0d14f7fd6ae6108bf9444", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3425587a669d81b45f0d14f7fd6ae6108bf9444", "html_url": "https://github.com/rust-lang/rust/commit/b3425587a669d81b45f0d14f7fd6ae6108bf9444"}], "stats": {"total": 150, "additions": 74, "deletions": 76}, "files": [{"sha": "62f004da0cae34f162975e40f4075064ba89efbc", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd", "patch": "@@ -146,3 +146,7 @@ hir_analysis_const_impl_for_non_const_trait =\n \n hir_analysis_const_bound_for_non_const_trait =\n     ~const can only be applied to `#[const_trait]` traits\n+\n+hir_analysis_self_in_impl_self =\n+    `Self` is not valid in the self type of an impl block\n+    .note = replace `Self` with a different type"}, {"sha": "9a9e40a3f43a7212ca78de76773bcb7113ea4583", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd", "patch": "@@ -2418,6 +2418,30 @@ impl<'hir> Ty<'hir> {\n         }\n         final_ty\n     }\n+\n+    pub fn find_self_aliases(&self) -> Vec<Span> {\n+        use crate::intravisit::Visitor;\n+        struct MyVisitor(Vec<Span>);\n+        impl<'v> Visitor<'v> for MyVisitor {\n+            fn visit_ty(&mut self, t: &'v Ty<'v>) {\n+                if matches!(\n+                    &t.kind,\n+                    TyKind::Path(QPath::Resolved(\n+                        _,\n+                        Path { res: crate::def::Res::SelfTyAlias { .. }, .. },\n+                    ))\n+                ) {\n+                    self.0.push(t.span);\n+                    return;\n+                }\n+                crate::intravisit::walk_ty(self, t);\n+            }\n+        }\n+\n+        let mut my_visitor = MyVisitor(vec![]);\n+        my_visitor.visit_ty(self);\n+        my_visitor.0\n+    }\n }\n \n /// Not represented directly in the AST; referred to by name through a `ty_path`."}, {"sha": "20903a68d6d935622beaabe532b0b01ea0212a25", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd", "patch": "@@ -319,7 +319,15 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     }\n                 }\n                 ItemKind::TyAlias(self_ty, _) => icx.to_ty(self_ty),\n-                ItemKind::Impl(hir::Impl { self_ty, .. }) => icx.to_ty(*self_ty),\n+                ItemKind::Impl(hir::Impl { self_ty, .. }) => {\n+                    match self_ty.find_self_aliases() {\n+                        spans if spans.len() > 0 => {\n+                            tcx.sess.emit_err(crate::errors::SelfInImplSelf { span: spans.into(), note: (), });\n+                            tcx.ty_error()\n+                        },\n+                        _ => icx.to_ty(*self_ty),\n+                    }\n+                },\n                 ItemKind::Fn(..) => {\n                     let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n                     tcx.mk_fn_def(def_id.to_def_id(), substs)"}, {"sha": "6ed8244d119debd7ad82e5739bf1ab32c0db35e8", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd", "patch": "@@ -1,7 +1,7 @@\n //! Errors emitted by `rustc_hir_analysis`.\n \n-use rustc_errors::IntoDiagnostic;\n use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, Handler};\n+use rustc_errors::{IntoDiagnostic, MultiSpan};\n use rustc_macros::{Diagnostic, LintDiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_span::{symbol::Ident, Span, Symbol};\n@@ -270,3 +270,12 @@ pub struct ConstBoundForNonConstTrait {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_self_in_impl_self)]\n+pub struct SelfInImplSelf {\n+    #[primary_span]\n+    pub span: MultiSpan,\n+    #[note]\n+    pub note: (),\n+}"}, {"sha": "6d7fe7c50a230a80447186611e7a8c0b0d56e904", "filename": "src/test/ui/resolve/issue-23305.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.rs?ref=ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd", "patch": "@@ -3,6 +3,6 @@ pub trait ToNbt<T> {\n }\n \n impl dyn ToNbt<Self> {}\n-//~^ ERROR cycle detected\n+//~^ ERROR `Self` is not valid in the self type of an impl block\n \n fn main() {}"}, {"sha": "aad1b583a3244c8d86dbd97fdd584c987a8cf742", "filename": "src/test/ui/resolve/issue-23305.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr?ref=ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd", "patch": "@@ -1,22 +1,10 @@\n-error[E0391]: cycle detected when computing type of `<impl at $DIR/issue-23305.rs:5:1: 5:21>`\n+error: `Self` is not valid in the self type of an impl block\n   --> $DIR/issue-23305.rs:5:16\n    |\n LL | impl dyn ToNbt<Self> {}\n    |                ^^^^\n    |\n-   = note: ...which immediately requires computing type of `<impl at $DIR/issue-23305.rs:5:1: 5:21>` again\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/issue-23305.rs:1:1\n-   |\n-LL | / pub trait ToNbt<T> {\n-LL | |     fn new(val: T) -> Self;\n-LL | | }\n-LL | |\n-...  |\n-LL | |\n-LL | | fn main() {}\n-   | |____________^\n+   = note: replace `Self` with a different type\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0391`."}, {"sha": "d0872d1b76f20e762a1bc5748d80357a2f9771e6", "filename": "src/test/ui/resolve/resolve-self-in-impl.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.rs?ref=ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd", "patch": "@@ -11,10 +11,11 @@ impl Tr for S where Self: Copy {} // OK\n impl Tr for S where S<Self>: Copy {} // OK\n impl Tr for S where Self::A: Copy {} // OK\n \n-impl Tr for Self {} //~ ERROR cycle detected\n-impl Tr for S<Self> {} //~ ERROR cycle detected\n-impl Self {} //~ ERROR cycle detected\n-impl S<Self> {} //~ ERROR cycle detected\n+impl Tr for Self {} //~ ERROR `Self` is not valid in the self type of an impl block\n+impl Tr for S<Self> {} //~ ERROR `Self` is not valid in the self type of an impl block\n+impl Self {} //~ ERROR `Self` is not valid in the self type of an impl block\n+impl S<Self> {} //~ ERROR `Self` is not valid in the self type of an impl block\n+impl (Self, Self) {} //~ ERROR `Self` is not valid in the self type of an impl block\n impl Tr<Self::A> for S {} //~ ERROR cycle detected\n \n fn main() {}"}, {"sha": "9f9ed68898f6c37401472a15ad3ca3bd34534955", "filename": "src/test/ui/resolve/resolve-self-in-impl.stderr", "status": "modified", "additions": 19, "deletions": 55, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr?ref=ab0d9dfefee2535ffa1a5ca8abe3b64a8e5970fd", "patch": "@@ -1,86 +1,50 @@\n-error[E0391]: cycle detected when computing type of `<impl at $DIR/resolve-self-in-impl.rs:14:1: 14:17>`\n+error: `Self` is not valid in the self type of an impl block\n   --> $DIR/resolve-self-in-impl.rs:14:13\n    |\n LL | impl Tr for Self {}\n    |             ^^^^\n    |\n-   = note: ...which immediately requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:14:1: 14:17>` again\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/resolve-self-in-impl.rs:1:1\n-   |\n-LL | / #![feature(associated_type_defaults)]\n-LL | |\n-LL | | struct S<T = u8>(T);\n-LL | | trait Tr<T = u8> {\n-...  |\n-LL | |\n-LL | | fn main() {}\n-   | |____________^\n+   = note: replace `Self` with a different type\n \n-error[E0391]: cycle detected when computing type of `<impl at $DIR/resolve-self-in-impl.rs:15:1: 15:20>`\n+error: `Self` is not valid in the self type of an impl block\n   --> $DIR/resolve-self-in-impl.rs:15:15\n    |\n LL | impl Tr for S<Self> {}\n    |               ^^^^\n    |\n-   = note: ...which immediately requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:15:1: 15:20>` again\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/resolve-self-in-impl.rs:1:1\n-   |\n-LL | / #![feature(associated_type_defaults)]\n-LL | |\n-LL | | struct S<T = u8>(T);\n-LL | | trait Tr<T = u8> {\n-...  |\n-LL | |\n-LL | | fn main() {}\n-   | |____________^\n+   = note: replace `Self` with a different type\n \n-error[E0391]: cycle detected when computing type of `<impl at $DIR/resolve-self-in-impl.rs:16:1: 16:10>`\n+error: `Self` is not valid in the self type of an impl block\n   --> $DIR/resolve-self-in-impl.rs:16:6\n    |\n LL | impl Self {}\n    |      ^^^^\n    |\n-   = note: ...which immediately requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:16:1: 16:10>` again\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/resolve-self-in-impl.rs:1:1\n-   |\n-LL | / #![feature(associated_type_defaults)]\n-LL | |\n-LL | | struct S<T = u8>(T);\n-LL | | trait Tr<T = u8> {\n-...  |\n-LL | |\n-LL | | fn main() {}\n-   | |____________^\n+   = note: replace `Self` with a different type\n \n-error[E0391]: cycle detected when computing type of `<impl at $DIR/resolve-self-in-impl.rs:17:1: 17:13>`\n+error: `Self` is not valid in the self type of an impl block\n   --> $DIR/resolve-self-in-impl.rs:17:8\n    |\n LL | impl S<Self> {}\n    |        ^^^^\n    |\n-   = note: ...which immediately requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:17:1: 17:13>` again\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/resolve-self-in-impl.rs:1:1\n+   = note: replace `Self` with a different type\n+\n+error: `Self` is not valid in the self type of an impl block\n+  --> $DIR/resolve-self-in-impl.rs:18:7\n    |\n-LL | / #![feature(associated_type_defaults)]\n-LL | |\n-LL | | struct S<T = u8>(T);\n-LL | | trait Tr<T = u8> {\n-...  |\n-LL | |\n-LL | | fn main() {}\n-   | |____________^\n+LL | impl (Self, Self) {}\n+   |       ^^^^  ^^^^\n+   |\n+   = note: replace `Self` with a different type\n \n-error[E0391]: cycle detected when computing trait implemented by `<impl at $DIR/resolve-self-in-impl.rs:18:1: 18:23>`\n-  --> $DIR/resolve-self-in-impl.rs:18:1\n+error[E0391]: cycle detected when computing trait implemented by `<impl at $DIR/resolve-self-in-impl.rs:19:1: 19:23>`\n+  --> $DIR/resolve-self-in-impl.rs:19:1\n    |\n LL | impl Tr<Self::A> for S {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: ...which immediately requires computing trait implemented by `<impl at $DIR/resolve-self-in-impl.rs:18:1: 18:23>` again\n+   = note: ...which immediately requires computing trait implemented by `<impl at $DIR/resolve-self-in-impl.rs:19:1: 19:23>` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/resolve-self-in-impl.rs:1:1\n    |\n@@ -93,6 +57,6 @@ LL | |\n LL | | fn main() {}\n    | |____________^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0391`."}]}