{"sha": "e1a575cb077d2070cc4527fa43bf9ef790f89f04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYTU3NWNiMDc3ZDIwNzBjYzQ1MjdmYTQzYmY5ZWY3OTBmODlmMDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-02T11:46:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-02T11:46:58Z"}, "message": "Auto merge of #33289 - birkenfeld:chain-find, r=bluss\n\nImplement find() on Chain iterators\n\nThis results in a roughly 2x speedup compared to the default impl\n\"inherited\" from Iterator.\n\nBenchmark: https://gist.github.com/birkenfeld/aa9b92cb7d55666dd4821207527eaf5b", "tree": {"sha": "eabbda78efcc84bac11c9d5a6bf85147b37b3287", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eabbda78efcc84bac11c9d5a6bf85147b37b3287"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1a575cb077d2070cc4527fa43bf9ef790f89f04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a575cb077d2070cc4527fa43bf9ef790f89f04", "html_url": "https://github.com/rust-lang/rust/commit/e1a575cb077d2070cc4527fa43bf9ef790f89f04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1a575cb077d2070cc4527fa43bf9ef790f89f04/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3c2c71988c1b2707c6c2ba19f14dc1ffe6a56fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c2c71988c1b2707c6c2ba19f14dc1ffe6a56fc", "html_url": "https://github.com/rust-lang/rust/commit/d3c2c71988c1b2707c6c2ba19f14dc1ffe6a56fc"}, {"sha": "e6201cfb5cabc636a1dbfb1e543e5485639497a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6201cfb5cabc636a1dbfb1e543e5485639497a4", "html_url": "https://github.com/rust-lang/rust/commit/e6201cfb5cabc636a1dbfb1e543e5485639497a4"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "17f7c0a773e6821be1b831fafd22d6dd0aaa8868", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e1a575cb077d2070cc4527fa43bf9ef790f89f04/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a575cb077d2070cc4527fa43bf9ef790f89f04/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=e1a575cb077d2070cc4527fa43bf9ef790f89f04", "patch": "@@ -541,6 +541,23 @@ impl<A, B> Iterator for Chain<A, B> where\n         }\n     }\n \n+    #[inline]\n+    fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item> where\n+        P: FnMut(&Self::Item) -> bool,\n+    {\n+        match self.state {\n+            ChainState::Both => match self.a.find(&mut predicate) {\n+                None => {\n+                    self.state = ChainState::Back;\n+                    self.b.find(predicate)\n+                }\n+                v => v\n+            },\n+            ChainState::Front => self.a.find(predicate),\n+            ChainState::Back => self.b.find(predicate),\n+        }\n+    }\n+\n     #[inline]\n     fn last(self) -> Option<A::Item> {\n         match self.state {"}, {"sha": "56b10d0b79b41f98bb04d0f5fcb251bfd7d2db23", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e1a575cb077d2070cc4527fa43bf9ef790f89f04/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a575cb077d2070cc4527fa43bf9ef790f89f04/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=e1a575cb077d2070cc4527fa43bf9ef790f89f04", "patch": "@@ -133,6 +133,19 @@ fn test_iterator_chain_count() {\n     assert_eq!(zs.iter().chain(&ys).count(), 4);\n }\n \n+#[test]\n+fn test_iterator_chain_find() {\n+    let xs = [0, 1, 2, 3, 4, 5];\n+    let ys = [30, 40, 50, 60];\n+    let mut iter = xs.iter().chain(&ys);\n+    assert_eq!(iter.find(|&&i| i == 4), Some(&4));\n+    assert_eq!(iter.next(), Some(&5));\n+    assert_eq!(iter.find(|&&i| i == 40), Some(&40));\n+    assert_eq!(iter.next(), Some(&50));\n+    assert_eq!(iter.find(|&&i| i == 100), None);\n+    assert_eq!(iter.next(), None);\n+}\n+\n #[test]\n fn test_filter_map() {\n     let it = (0..).step_by(1).take(10)"}]}