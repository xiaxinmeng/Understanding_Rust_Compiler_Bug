{"sha": "c3d45775c438c57450317ccc859d3af10ce08972", "node_id": "C_kwDOAAsO6NoAKGMzZDQ1Nzc1YzQzOGM1NzQ1MDMxN2NjYzg1OWQzYWYxMGNlMDg5NzI", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2021-11-01T04:12:43Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2021-11-01T04:12:43Z"}, "message": "Fix `match_overlapping_arm` false negative\n\nFixes #7816", "tree": {"sha": "8c7c2634e3adee255148ed7154fb9a831a34dc50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c7c2634e3adee255148ed7154fb9a831a34dc50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3d45775c438c57450317ccc859d3af10ce08972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3d45775c438c57450317ccc859d3af10ce08972", "html_url": "https://github.com/rust-lang/rust/commit/c3d45775c438c57450317ccc859d3af10ce08972", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3d45775c438c57450317ccc859d3af10ce08972/comments", "author": null, "committer": null, "parents": [{"sha": "310ecb0a5c0d9161679c256052822f34c6eb548a", "url": "https://api.github.com/repos/rust-lang/rust/commits/310ecb0a5c0d9161679c256052822f34c6eb548a", "html_url": "https://github.com/rust-lang/rust/commit/310ecb0a5c0d9161679c256052822f34c6eb548a"}], "stats": {"total": 69, "additions": 44, "deletions": 25}, "files": [{"sha": "3511defc59c6609dd78500cbefaf3ad6ce958c5f", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c3d45775c438c57450317ccc859d3af10ce08972/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3d45775c438c57450317ccc859d3af10ce08972/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=c3d45775c438c57450317ccc859d3af10ce08972", "patch": "@@ -34,7 +34,6 @@ use rustc_span::source_map::{Span, Spanned};\n use rustc_span::sym;\n use std::cmp::Ordering;\n use std::collections::hash_map::Entry;\n-use std::iter;\n use std::ops::Bound;\n \n declare_clippy_lint! {\n@@ -1703,12 +1702,6 @@ where\n     }\n \n     impl<'a, T: Copy> Kind<'a, T> {\n-        fn range(&self) -> &'a SpannedRange<T> {\n-            match *self {\n-                Kind::Start(_, r) | Kind::End(_, r) => r,\n-            }\n-        }\n-\n         fn value(self) -> Bound<T> {\n             match self {\n                 Kind::Start(t, _) => Bound::Included(t),\n@@ -1726,7 +1719,19 @@ where\n     impl<'a, T: Copy + Ord> Ord for Kind<'a, T> {\n         fn cmp(&self, other: &Self) -> Ordering {\n             match (self.value(), other.value()) {\n-                (Bound::Included(a), Bound::Included(b)) | (Bound::Excluded(a), Bound::Excluded(b)) => a.cmp(&b),\n+                (Bound::Included(a), Bound::Included(b)) | (Bound::Excluded(a), Bound::Excluded(b)) => {\n+                    let value_cmp = a.cmp(&b);\n+                    // In the case of ties, starts come before ends\n+                    if value_cmp == Ordering::Equal {\n+                        match (self, other) {\n+                            (Kind::Start(..), Kind::End(..)) => Ordering::Less,\n+                            (Kind::End(..), Kind::Start(..)) => Ordering::Greater,\n+                            _ => Ordering::Equal,\n+                        }\n+                    } else {\n+                        value_cmp\n+                    }\n+                },\n                 // Range patterns cannot be unbounded (yet)\n                 (Bound::Unbounded, _) | (_, Bound::Unbounded) => unimplemented!(),\n                 (Bound::Included(a), Bound::Excluded(b)) => match a.cmp(&b) {\n@@ -1750,24 +1755,17 @@ where\n \n     values.sort();\n \n-    for (a, b) in iter::zip(&values, values.iter().skip(1)) {\n-        match (a, b) {\n-            (&Kind::Start(_, ra), &Kind::End(_, rb)) => {\n-                if ra.node != rb.node {\n-                    return Some((ra, rb));\n-                }\n-            },\n-            (&Kind::End(a, _), &Kind::Start(b, _)) if a != Bound::Included(b) => (),\n-            _ => {\n-                // skip if the range `a` is completely included into the range `b`\n-                if let Ordering::Equal | Ordering::Less = a.cmp(b) {\n-                    let kind_a = Kind::End(a.range().node.1, a.range());\n-                    let kind_b = Kind::End(b.range().node.1, b.range());\n-                    if let Ordering::Equal | Ordering::Greater = kind_a.cmp(&kind_b) {\n-                        return None;\n+    let mut started = vec![];\n+\n+    for value in values {\n+        match value {\n+            Kind::Start(_, r) => started.push(r),\n+            Kind::End(_, er) => {\n+                if let Some(sr) = started.pop() {\n+                    if sr != er {\n+                        return Some((er, sr));\n                     }\n                 }\n-                return Some((a.range(), b.range()));\n             },\n         }\n     }"}, {"sha": "c25f59c62a5c7558635ff0f6763045f551a17d08", "filename": "tests/ui/match_overlapping_arm.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c3d45775c438c57450317ccc859d3af10ce08972/tests%2Fui%2Fmatch_overlapping_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3d45775c438c57450317ccc859d3af10ce08972/tests%2Fui%2Fmatch_overlapping_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_overlapping_arm.rs?ref=c3d45775c438c57450317ccc859d3af10ce08972", "patch": "@@ -100,6 +100,15 @@ fn overlapping() {\n         _ => (),\n     }\n \n+    // Issue #7816 - overlap after included range\n+    match 42 {\n+        5..=10 => (),\n+        0..=20 => (),\n+        21..=30 => (),\n+        21..=40 => (),\n+        _ => (),\n+    }\n+\n     // Issue #7829\n     match 0 {\n         -1..=1 => (),"}, {"sha": "69f794edb6a3ddf11697f8ab58338c856740ef3d", "filename": "tests/ui/match_overlapping_arm.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c3d45775c438c57450317ccc859d3af10ce08972/tests%2Fui%2Fmatch_overlapping_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3d45775c438c57450317ccc859d3af10ce08972/tests%2Fui%2Fmatch_overlapping_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_overlapping_arm.stderr?ref=c3d45775c438c57450317ccc859d3af10ce08972", "patch": "@@ -71,5 +71,17 @@ note: overlaps with this\n LL |         ..26 => println!(\"..26\"),\n    |         ^^^^\n \n-error: aborting due to 6 previous errors\n+error: some ranges overlap\n+  --> $DIR/match_overlapping_arm.rs:107:9\n+   |\n+LL |         21..=30 => (),\n+   |         ^^^^^^^\n+   |\n+note: overlaps with this\n+  --> $DIR/match_overlapping_arm.rs:108:9\n+   |\n+LL |         21..=40 => (),\n+   |         ^^^^^^^\n+\n+error: aborting due to 7 previous errors\n "}]}