{"sha": "408d4ec0ef40a2ce650fab8d730a79f08d35054a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwOGQ0ZWMwZWY0MGEyY2U2NTBmYWI4ZDczMGE3OWYwOGQzNTA1NGE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-30T22:33:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-01T04:31:32Z"}, "message": "rt: Remove upcall_alloc_c_stack/call_c_stack, et. al.\n\nWe are using upcall_call_shim_on_c_stack now", "tree": {"sha": "1406a67fb35e4dec6160fa8bd2072b4ea91bfcf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1406a67fb35e4dec6160fa8bd2072b4ea91bfcf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/408d4ec0ef40a2ce650fab8d730a79f08d35054a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/408d4ec0ef40a2ce650fab8d730a79f08d35054a", "html_url": "https://github.com/rust-lang/rust/commit/408d4ec0ef40a2ce650fab8d730a79f08d35054a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/408d4ec0ef40a2ce650fab8d730a79f08d35054a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "037ca7f7cb00c5eb2def4b766c01aac4c07a9fb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/037ca7f7cb00c5eb2def4b766c01aac4c07a9fb4", "html_url": "https://github.com/rust-lang/rust/commit/037ca7f7cb00c5eb2def4b766c01aac4c07a9fb4"}], "stats": {"total": 129, "additions": 0, "deletions": 129}, "files": [{"sha": "3d7063d201a802bad266cac631db4e41fece4679", "filename": "src/rt/arch/i386/ccall.S", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/408d4ec0ef40a2ce650fab8d730a79f08d35054a/src%2Frt%2Farch%2Fi386%2Fccall.S", "raw_url": "https://github.com/rust-lang/rust/raw/408d4ec0ef40a2ce650fab8d730a79f08d35054a/src%2Frt%2Farch%2Fi386%2Fccall.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fccall.S?ref=408d4ec0ef40a2ce650fab8d730a79f08d35054a", "patch": "@@ -1,51 +1,5 @@\n     .text\n \n-// upcall_call_c_stack(void (*fn)(), void *arg_struct)\n-//\n-// Note that we could use |enter| and |leave| but the manuals tell me they're\n-// slower.\n-#if defined(__APPLE__) || defined(_WIN32)\n-.globl _upcall_call_c_stack\n-.globl _upcall_call_c_stack_i64\n-.globl _upcall_call_c_stack_float\n-_upcall_call_c_stack:\n-_upcall_call_c_stack_i64:\n-_upcall_call_c_stack_float:\n-#else\n-.globl upcall_call_c_stack\n-.globl upcall_call_c_stack_i64\n-.globl upcall_call_c_stack_float\n-upcall_call_c_stack:\n-upcall_call_c_stack_i64:\n-upcall_call_c_stack_float:\n-#endif\n-    pushl %ebp\n-    movl %esp,%ebp          // save esp\n-    movl 8(%esp),%eax       // eax = callee\n-    movl 12(%esp),%esp      // switch stack\n-    calll *%eax\n-    movl %ebp,%esp          // would like to use \"leave\" but it's slower\n-    popl %ebp\n-    ret\n-\n-#if defined(__APPLE__) || defined(_WIN32)\n-.globl _upcall_call_c_stack_shim\n-_upcall_call_c_stack_shim:\n-#else\n-.globl upcall_call_c_stack_shim\n-upcall_call_c_stack_shim:\n-#endif\n-    pushl %ebp\n-    movl %esp,%ebp          // save esp\n-    movl 8(%ebp),%eax       // eax = callee\n-    movl 12(%ebp),%esp      // switch stack\n-    subl $12,%esp           // maintain 16-byte alignment\n-    pushl 12(%ebp)          // push ptr to argument block\n-    calll *%eax\n-    movl %ebp,%esp          // would like to use \"leave\" but it's slower\n-    popl %ebp\n-    ret\n-\n #if defined(__APPLE__) || defined(_WIN32)\n .globl _asm_call_on_stack\n _asm_call_on_stack:"}, {"sha": "bfec8fc97958934d02b8fe00688ea36ca60fd02b", "filename": "src/rt/arch/x86_64/ccall.S", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/408d4ec0ef40a2ce650fab8d730a79f08d35054a/src%2Frt%2Farch%2Fx86_64%2Fccall.S", "raw_url": "https://github.com/rust-lang/rust/raw/408d4ec0ef40a2ce650fab8d730a79f08d35054a/src%2Frt%2Farch%2Fx86_64%2Fccall.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fccall.S?ref=408d4ec0ef40a2ce650fab8d730a79f08d35054a", "patch": "@@ -6,74 +6,6 @@\n         \n         .text\n \n-// upcall_call_c_stack(void (*fn)(), void *new_esp)\n-//\n-// Note that we could use |enter| and |leave| but the manuals tell me they're\n-// slower.\n-#if defined(__APPLE__) || defined(_WIN32)\n-.globl _upcall_call_c_stack\n-.globl _upcall_call_c_stack_i64\n-.globl _upcall_call_c_stack_float\n-_upcall_call_c_stack:\n-_upcall_call_c_stack_i64:\n-_upcall_call_c_stack_float:\n-#else\n-.globl upcall_call_c_stack\n-.globl upcall_call_c_stack_i64\n-.globl upcall_call_c_stack_float\n-upcall_call_c_stack:\n-upcall_call_c_stack_i64:\n-upcall_call_c_stack_float:\n-#endif\n-    push %rbp\n-    mov %rsp,%rbp          // save rsp\n-    mov ARG1,%rsp          // switch stack\n-\n-    // Hack: the arguments to the function are sitting\n-    // on the stack right now, as in i386 calling\n-    // convention.  We need them in registers.\n-    // For now, we just load them into registers.\n-    //\n-    // This is a total hack because it does not consider\n-    // the actual arguments of the target function.\n-    // It fails if there are non-INTEGER class arguments,\n-    // which would get pushed on the stack, or if there are\n-    // additional arguments beyond those that will get\n-    // passed in registers.\n-    mov ARG0,%r11     // Remember target address\n-    mov  0(%rsp),RUSTRT_ARG0_S\n-    mov  8(%rsp),RUSTRT_ARG1_S\n-    mov 16(%rsp),RUSTRT_ARG2_S\n-    mov 24(%rsp),RUSTRT_ARG3_S\n-#   ifdef RUSTRT_ARG4_S        \n-    mov 32(%rsp),RUSTRT_ARG4_S\n-#   endif\n-#   ifdef RUSTRT_ARG5_S        \n-    mov 40(%rsp),RUSTRT_ARG5_S\n-#   endif\n-        \n-    call *%r11\n-    mov %rbp,%rsp          // would like to use \"leave\" but it's slower\n-    pop %rbp\n-    ret\n-\n-#if defined(__APPLE__) || defined(_WIN32)\n-.globl _upcall_call_c_stack_shim\n-_upcall_call_c_stack_shim:\n-#else\n-.globl upcall_call_c_stack_shim\n-upcall_call_c_stack_shim:\n-#endif\n-    push %rbp\n-    mov %rsp,%rbp          // save rsp\n-    mov ARG1,%rsp          // switch stack\n-    mov ARG0,%r11          // Remember target address\n-    mov ARG1,ARG0          // setup the parameter shim expects\n-    call *%r11\n-    mov %rbp,%rsp\n-    pop %rbp\n-    ret\n-\n #if defined(__APPLE__) || defined(_WIN32)\n .globl _asm_call_on_stack\n _asm_call_on_stack:"}, {"sha": "839a9231f453eb19365f0e8ced8fa9711dd5cc0b", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/408d4ec0ef40a2ce650fab8d730a79f08d35054a/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/408d4ec0ef40a2ce650fab8d730a79f08d35054a/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=408d4ec0ef40a2ce650fab8d730a79f08d35054a", "patch": "@@ -209,16 +209,6 @@ upcall_dynastack_free(void *ptr) {\n     return rust_scheduler::get_task()->dynastack.free(ptr);\n }\n \n-/**\n- * Allocates |nbytes| bytes in the C stack and returns a pointer to the start\n- * of the allocated space.\n- */\n-extern \"C\" CDECL void *\n-upcall_alloc_c_stack(size_t nbytes) {\n-    rust_scheduler *sched = rust_scheduler::get_task()->sched;\n-    return sched->c_context.alloc_stack(nbytes);\n-}\n-\n /**\n  * Allocates |nbytes| bytes in the C stack and returns a pointer to the start\n  * of the allocated space."}, {"sha": "a62c7ab06f5c4c19aa1dd2c1d6e18cb086966359", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/408d4ec0ef40a2ce650fab8d730a79f08d35054a/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/408d4ec0ef40a2ce650fab8d730a79f08d35054a/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=408d4ec0ef40a2ce650fab8d730a79f08d35054a", "patch": "@@ -53,11 +53,6 @@ start_task\n vec_reserve_shared\n vec_from_buf_shared\n unsupervise\n-upcall_alloc_c_stack\n-upcall_call_c_stack\n-upcall_call_c_stack_i64\n-upcall_call_c_stack_float\n-upcall_call_c_stack_shim\n upcall_cmp_type\n upcall_dynastack_alloc\n upcall_dynastack_alloc_2"}]}