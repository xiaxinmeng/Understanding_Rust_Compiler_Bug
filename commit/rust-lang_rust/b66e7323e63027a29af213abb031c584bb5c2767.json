{"sha": "b66e7323e63027a29af213abb031c584bb5c2767", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NmU3MzIzZTYzMDI3YTI5YWYyMTNhYmIwMzFjNTg0YmI1YzI3Njc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-22T22:36:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-22T22:36:36Z"}, "message": "Rollup merge of #64674 - estebank:knock-down-the-wall, r=Centril\n\nPropagate `types.err` in locals further to avoid spurious knock-down errors\n\nFix #33575, fix #44504.", "tree": {"sha": "ea661b10a798c8387eba6dfad106c19729d20018", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea661b10a798c8387eba6dfad106c19729d20018"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b66e7323e63027a29af213abb031c584bb5c2767", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdh/d0CRBK7hj4Ov3rIwAAdHIIAFvwOT+ORi2/0xk2bXBDs8By\n+EJVNq/0pcyn0PN4TouxJpaZfRcYyveuxrojTfP2DLoKo6uKaxQp1u2sRywMe2l2\n/aHCtPBheqpMprHCjJobrnWIScLiZTU4uJKWF4uWXVOqp4nMZuy4VIg1rDSh5JjY\nqstRe3JsSx+X+j1qR9VdJy4jA794SlDVTj8QhnO+N2xNUmWjU2PmZQWjqfZRL5mk\nCEBSZh6YuLzg6KWGhrfV+/G4G+fn2SLPRj9oLBLEEAtKKbIAgrOe2s2kjB8Re1F7\nb8X8dAKEzpUkkDxghlFVcKvlYCKhj0M5YLRIuCplpbjmv2Iw3VNTuz3ViSTeiKY=\n=34Yg\n-----END PGP SIGNATURE-----\n", "payload": "tree ea661b10a798c8387eba6dfad106c19729d20018\nparent da58e11d0265ee8412a21d63cf972955754769b6\nparent daed67481511b65475069214cd8325ca9d018509\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569191796 +0200\ncommitter GitHub <noreply@github.com> 1569191796 +0200\n\nRollup merge of #64674 - estebank:knock-down-the-wall, r=Centril\n\nPropagate `types.err` in locals further to avoid spurious knock-down errors\n\nFix #33575, fix #44504.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b66e7323e63027a29af213abb031c584bb5c2767", "html_url": "https://github.com/rust-lang/rust/commit/b66e7323e63027a29af213abb031c584bb5c2767", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b66e7323e63027a29af213abb031c584bb5c2767/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da58e11d0265ee8412a21d63cf972955754769b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/da58e11d0265ee8412a21d63cf972955754769b6", "html_url": "https://github.com/rust-lang/rust/commit/da58e11d0265ee8412a21d63cf972955754769b6"}, {"sha": "daed67481511b65475069214cd8325ca9d018509", "url": "https://api.github.com/repos/rust-lang/rust/commits/daed67481511b65475069214cd8325ca9d018509", "html_url": "https://github.com/rust-lang/rust/commit/daed67481511b65475069214cd8325ca9d018509"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "d98e1f3e1283fa3306bbd4492109846e971e504e", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b66e7323e63027a29af213abb031c584bb5c2767/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b66e7323e63027a29af213abb031c584bb5c2767/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=b66e7323e63027a29af213abb031c584bb5c2767", "patch": "@@ -163,7 +163,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n         // Just ignore error types.\n         if a.references_error() || b.references_error() {\n-            return success(vec![], b, vec![]);\n+            return success(vec![], self.fcx.tcx.types.err, vec![]);\n         }\n \n         if a.is_never() {\n@@ -821,7 +821,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let (adjustments, _) = self.register_infer_ok_obligations(ok);\n         self.apply_adjustments(expr, adjustments);\n-        Ok(target)\n+        Ok(if expr_ty.references_error() {\n+            self.tcx.types.err\n+        } else {\n+            target\n+        })\n     }\n \n     /// Same as `try_coerce()`, but without side-effects."}, {"sha": "de3ed96b03345e579c1d02b4562ff4d562ba4179", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b66e7323e63027a29af213abb031c584bb5c2767/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b66e7323e63027a29af213abb031c584bb5c2767/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b66e7323e63027a29af213abb031c584bb5c2767", "patch": "@@ -153,7 +153,7 @@ use self::method::{MethodCallee, SelfSource};\n use self::TupleArgumentsFlag::*;\n \n /// The type of a local binding, including the revealed type for anon types.\n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Debug)]\n pub struct LocalTy<'tcx> {\n     decl_ty: Ty<'tcx>,\n     revealed_ty: Ty<'tcx>\n@@ -3754,15 +3754,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if let Some(ref init) = local.init {\n             let init_ty = self.check_decl_initializer(local, &init);\n-            if init_ty.references_error() {\n-                self.write_ty(local.hir_id, init_ty);\n-            }\n+            self.overwrite_local_ty_if_err(local, t, init_ty);\n         }\n \n         self.check_pat_top(&local.pat, t, None);\n         let pat_ty = self.node_ty(local.pat.hir_id);\n-        if pat_ty.references_error() {\n-            self.write_ty(local.hir_id, pat_ty);\n+        self.overwrite_local_ty_if_err(local, t, pat_ty);\n+    }\n+\n+    fn overwrite_local_ty_if_err(&self, local: &'tcx hir::Local, decl_ty: Ty<'tcx>, ty: Ty<'tcx>) {\n+        if ty.references_error() {\n+            // Override the types everywhere with `types.err` to avoid knock down errors.\n+            self.write_ty(local.hir_id, ty);\n+            self.write_ty(local.pat.hir_id, ty);\n+            let local_ty = LocalTy {\n+                decl_ty,\n+                revealed_ty: ty,\n+            };\n+            self.locals.borrow_mut().insert(local.hir_id, local_ty);\n+            self.locals.borrow_mut().insert(local.pat.hir_id, local_ty);\n         }\n     }\n "}, {"sha": "09c499452adb687b737843c63ed5c2d4bc8c33e8", "filename": "src/test/ui/issues/issue-33575.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b66e7323e63027a29af213abb031c584bb5c2767/src%2Ftest%2Fui%2Fissues%2Fissue-33575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b66e7323e63027a29af213abb031c584bb5c2767/src%2Ftest%2Fui%2Fissues%2Fissue-33575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33575.rs?ref=b66e7323e63027a29af213abb031c584bb5c2767", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let baz = ().foo(); //~ ERROR no method named `foo` found for type `()` in the current scope\n+    <i32 as std::str::FromStr>::from_str(&baz); // No complaints about `str` being unsized\n+}"}, {"sha": "e6b74d262c340d4f04985e24d1206579378e8296", "filename": "src/test/ui/issues/issue-33575.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b66e7323e63027a29af213abb031c584bb5c2767/src%2Ftest%2Fui%2Fissues%2Fissue-33575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b66e7323e63027a29af213abb031c584bb5c2767/src%2Ftest%2Fui%2Fissues%2Fissue-33575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33575.stderr?ref=b66e7323e63027a29af213abb031c584bb5c2767", "patch": "@@ -0,0 +1,9 @@\n+error[E0599]: no method named `foo` found for type `()` in the current scope\n+  --> $DIR/issue-33575.rs:2:18\n+   |\n+LL |     let baz = ().foo();\n+   |                  ^^^ method not found in `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}