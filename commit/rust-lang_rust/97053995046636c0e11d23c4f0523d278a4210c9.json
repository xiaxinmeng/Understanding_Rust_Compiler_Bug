{"sha": "97053995046636c0e11d23c4f0523d278a4210c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MDUzOTk1MDQ2NjM2YzBlMTFkMjNjNGYwNTIzZDI3OGE0MjEwYzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-23T22:46:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-23T22:46:05Z"}, "message": "auto merge of #9301 : luqmana/rust/ncm, r=brson\n\nGet rid of the crate_map arg!\r\n\r\nr? @brson", "tree": {"sha": "8a2a04f82865e25eb612cd49e5287e3da4c4e7a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a2a04f82865e25eb612cd49e5287e3da4c4e7a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97053995046636c0e11d23c4f0523d278a4210c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97053995046636c0e11d23c4f0523d278a4210c9", "html_url": "https://github.com/rust-lang/rust/commit/97053995046636c0e11d23c4f0523d278a4210c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97053995046636c0e11d23c4f0523d278a4210c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e77c25e0dd8d6b4fc28c1ca4248a4f47d99d9b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e77c25e0dd8d6b4fc28c1ca4248a4f47d99d9b8", "html_url": "https://github.com/rust-lang/rust/commit/2e77c25e0dd8d6b4fc28c1ca4248a4f47d99d9b8"}, {"sha": "20a10ff9c922722da66d52caacee544c7e1ab03d", "url": "https://api.github.com/repos/rust-lang/rust/commits/20a10ff9c922722da66d52caacee544c7e1ab03d", "html_url": "https://github.com/rust-lang/rust/commit/20a10ff9c922722da66d52caacee544c7e1ab03d"}], "stats": {"total": 188, "additions": 167, "deletions": 21}, "files": [{"sha": "441cc1bfae264cabff1b60ea61cf19edcfeecf26", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/97053995046636c0e11d23c4f0523d278a4210c9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97053995046636c0e11d23c4f0523d278a4210c9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=97053995046636c0e11d23c4f0523d278a4210c9", "patch": "@@ -2416,11 +2416,6 @@ pub fn create_entry_wrapper(ccx: @mut CrateContext,\n         unsafe {\n             llvm::LLVMPositionBuilderAtEnd(bld, llbb);\n \n-            let crate_map = ccx.crate_map;\n-            let opaque_crate_map = do \"crate_map\".with_c_str |buf| {\n-                llvm::LLVMBuildPointerCast(bld, crate_map, Type::i8p().to_ref(), buf)\n-            };\n-\n             let (start_fn, args) = if use_start_lang_item {\n                 let start_def_id = match ccx.tcx.lang_items.require(StartFnLangItem) {\n                     Ok(id) => id,\n@@ -2443,8 +2438,7 @@ pub fn create_entry_wrapper(ccx: @mut CrateContext,\n                         C_null(Type::opaque_box(ccx).ptr_to()),\n                         opaque_rust_main,\n                         llvm::LLVMGetParam(llfn, 0),\n-                        llvm::LLVMGetParam(llfn, 1),\n-                        opaque_crate_map\n+                        llvm::LLVMGetParam(llfn, 1)\n                      ]\n                 };\n                 (start_fn, args)\n@@ -2453,8 +2447,7 @@ pub fn create_entry_wrapper(ccx: @mut CrateContext,\n                 let args = ~[\n                     C_null(Type::opaque_box(ccx).ptr_to()),\n                     llvm::LLVMGetParam(llfn, 0 as c_uint),\n-                    llvm::LLVMGetParam(llfn, 1 as c_uint),\n-                    opaque_crate_map\n+                    llvm::LLVMGetParam(llfn, 1 as c_uint)\n                 ];\n \n                 (rust_main, args)\n@@ -2635,13 +2628,16 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n                         }\n                         ast::foreign_item_static(*) => {\n                             let ident = foreign::link_name(ccx, ni);\n-                            let g = do ident.with_c_str |buf| {\n-                                unsafe {\n+                            unsafe {\n+                                let g = do ident.with_c_str |buf| {\n                                     let ty = type_of(ccx, ty);\n                                     llvm::LLVMAddGlobal(ccx.llmod, ty.to_ref(), buf)\n+                                };\n+                                if attr::contains_name(ni.attrs, \"weak_linkage\") {\n+                                    lib::llvm::SetLinkage(g, lib::llvm::ExternalWeakLinkage);\n                                 }\n-                            };\n-                            g\n+                                g\n+                            }\n                         }\n                     }\n                 }\n@@ -2959,7 +2955,14 @@ pub fn decl_crate_map(sess: session::Session, mapmeta: LinkMeta,\n             llvm::LLVMAddGlobal(llmod, maptype.to_ref(), buf)\n         }\n     };\n-    lib::llvm::SetLinkage(map, lib::llvm::ExternalLinkage);\n+    // On windows we'd like to export the toplevel cratemap\n+    // such that we can find it from libstd.\n+    if targ_cfg.os == session::OsWin32 && \"toplevel\" == mapname {\n+        lib::llvm::SetLinkage(map, lib::llvm::DLLExportLinkage);\n+    } else {\n+        lib::llvm::SetLinkage(map, lib::llvm::ExternalLinkage);\n+    }\n+\n     return map;\n }\n \n@@ -3114,6 +3117,26 @@ pub fn trans_crate(sess: session::Session,\n \n     decl_gc_metadata(ccx, llmod_id);\n     fill_crate_map(ccx, ccx.crate_map);\n+\n+    // NOTE win32: wart with exporting crate_map symbol\n+    // We set the crate map (_rust_crate_map_toplevel) to use dll_export\n+    // linkage but that ends up causing the linker to look for a\n+    // __rust_crate_map_toplevel symbol (extra underscore) which it will\n+    // subsequently fail to find. So to mitigate that we just introduce\n+    // an alias from the symbol it expects to the one that actually exists.\n+    if ccx.sess.targ_cfg.os == session::OsWin32 &&\n+       !*ccx.sess.building_library {\n+\n+        let maptype = val_ty(ccx.crate_map).to_ref();\n+\n+        do \"__rust_crate_map_toplevel\".with_c_str |buf| {\n+            unsafe {\n+                llvm::LLVMAddAlias(ccx.llmod, maptype,\n+                                   ccx.crate_map, buf);\n+            }\n+        }\n+    }\n+\n     glue::emit_tydescs(ccx);\n     write_abi_version(ccx);\n     if ccx.sess.opts.debuginfo {"}, {"sha": "45a65f954a3a91e824948e1d3e5bebdfae705065", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97053995046636c0e11d23c4f0523d278a4210c9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97053995046636c0e11d23c4f0523d278a4210c9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=97053995046636c0e11d23c4f0523d278a4210c9", "patch": "@@ -402,8 +402,7 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n                     bound_lifetime_names: opt_vec::Empty,\n                     inputs: ~[\n                         ty::mk_int(),\n-                        ty::mk_imm_ptr(tcx, ty::mk_imm_ptr(tcx, ty::mk_u8())),\n-                        ty::mk_imm_ptr(tcx, ty::mk_u8())\n+                        ty::mk_imm_ptr(tcx, ty::mk_imm_ptr(tcx, ty::mk_u8()))\n                     ],\n                     output: ty::mk_int()\n                 }"}, {"sha": "f73aa1fad67dce05b1792edfa133a3fc3a88398b", "filename": "src/libstd/rt/crate_map.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/97053995046636c0e11d23c4f0523d278a4210c9/src%2Flibstd%2Frt%2Fcrate_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97053995046636c0e11d23c4f0523d278a4210c9/src%2Flibstd%2Frt%2Fcrate_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcrate_map.rs?ref=97053995046636c0e11d23c4f0523d278a4210c9", "patch": "@@ -16,7 +16,21 @@ use vec;\n use hashmap::HashSet;\n use container::MutableSet;\n \n-pub struct ModEntry{\n+// Need to tell the linker on OS X to not barf on undefined symbols\n+// and instead look them up at runtime, which we need to resolve\n+// the crate_map properly.\n+#[cfg(target_os = \"macos\")]\n+#[link_args = \"-undefined dynamic_lookup\"]\n+extern {}\n+\n+#[cfg(not(stage0), not(windows))]\n+extern {\n+    #[weak_linkage]\n+    #[link_name = \"_rust_crate_map_toplevel\"]\n+    static CRATE_MAP: CrateMap;\n+}\n+\n+pub struct ModEntry {\n     name: *c_char,\n     log_level: *mut u32\n }\n@@ -34,6 +48,30 @@ struct CrateMap {\n     children: [*CrateMap, ..1]\n }\n \n+#[cfg(not(stage0), not(windows))]\n+pub fn get_crate_map() -> *CrateMap {\n+    &'static CRATE_MAP as *CrateMap\n+}\n+\n+#[cfg(not(stage0), windows)]\n+#[fixed_stack_segment]\n+#[inline(never)]\n+pub fn get_crate_map() -> *CrateMap {\n+    use c_str::ToCStr;\n+    use unstable::dynamic_lib::dl;\n+\n+    let sym = unsafe {\n+        let module = dl::open_internal();\n+        let sym = do \"__rust_crate_map_toplevel\".with_c_str |buf| {\n+            dl::symbol(module, buf)\n+        };\n+        dl::close(module);\n+        sym\n+    };\n+\n+    sym as *CrateMap\n+}\n+\n unsafe fn version(crate_map: *CrateMap) -> i32 {\n     match (*crate_map).version {\n         1 => return 1,"}, {"sha": "26072079bcc18e1c6270d54b16a4a6aeccf1e14b", "filename": "src/libstd/rt/logging.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/97053995046636c0e11d23c4f0523d278a4210c9/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97053995046636c0e11d23c4f0523d278a4210c9/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=97053995046636c0e11d23c4f0523d278a4210c9", "patch": "@@ -12,6 +12,7 @@ use libc::{uintptr_t, exit, STDERR_FILENO};\n use option::{Some, None, Option};\n use rt::util::dumb_println;\n use rt::crate_map::{ModEntry, iter_crate_map};\n+#[cfg(not(stage0))] use rt::crate_map::get_crate_map;\n use str::StrSlice;\n use str::raw::from_c_str;\n use u32;\n@@ -211,6 +212,7 @@ impl Logger for StdErrLogger {\n /// Configure logging by traversing the crate map and setting the\n /// per-module global logging flags based on the logging spec\n #[fixed_stack_segment] #[inline(never)]\n+#[cfg(stage0)]\n pub fn init(crate_map: *u8) {\n     use os;\n \n@@ -224,6 +226,22 @@ pub fn init(crate_map: *u8) {\n         }\n     }\n }\n+#[cfg(not(stage0))]\n+pub fn init() {\n+    use os;\n+\n+    let crate_map = get_crate_map() as *u8;\n+\n+    let log_spec = os::getenv(\"RUST_LOG\");\n+    match log_spec {\n+        Some(spec) => {\n+            update_log_settings(crate_map, spec);\n+        }\n+        None => {\n+            update_log_settings(crate_map, ~\"\");\n+        }\n+    }\n+}\n \n #[fixed_stack_segment] #[inline(never)]\n pub fn console_on() { unsafe { rust_log_console_on() } }"}, {"sha": "85a379cab5a040b03a198a6bab6ec4b3cfa3e264", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/97053995046636c0e11d23c4f0523d278a4210c9/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97053995046636c0e11d23c4f0523d278a4210c9/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=97053995046636c0e11d23c4f0523d278a4210c9", "patch": "@@ -172,11 +172,11 @@ pub mod borrowck;\n ///\n /// * `argc` & `argv` - The argument vector. On Unix this information is used\n ///   by os::args.\n-/// * `crate_map` - Runtime information about the executing crate, mostly for logging\n ///\n /// # Return value\n ///\n /// The return value is used as the process return code. 0 on success, 101 on error.\n+#[cfg(stage0)]\n pub fn start(argc: int, argv: **u8, crate_map: *u8, main: ~fn()) -> int {\n \n     init(argc, argv, crate_map);\n@@ -185,25 +185,44 @@ pub fn start(argc: int, argv: **u8, crate_map: *u8, main: ~fn()) -> int {\n \n     return exit_code;\n }\n+#[cfg(not(stage0))]\n+pub fn start(argc: int, argv: **u8, main: ~fn()) -> int {\n+\n+    init(argc, argv);\n+    let exit_code = run(main);\n+    cleanup();\n+\n+    return exit_code;\n+}\n \n /// Like `start` but creates an additional scheduler on the current thread,\n /// which in most cases will be the 'main' thread, and pins the main task to it.\n ///\n /// This is appropriate for running code that must execute on the main thread,\n /// such as the platform event loop and GUI.\n+#[cfg(stage0)]\n pub fn start_on_main_thread(argc: int, argv: **u8, crate_map: *u8, main: ~fn()) -> int {\n     init(argc, argv, crate_map);\n     let exit_code = run_on_main_thread(main);\n     cleanup();\n \n     return exit_code;\n }\n+#[cfg(not(stage0))]\n+pub fn start_on_main_thread(argc: int, argv: **u8, main: ~fn()) -> int {\n+    init(argc, argv);\n+    let exit_code = run_on_main_thread(main);\n+    cleanup();\n+\n+    return exit_code;\n+}\n \n /// One-time runtime initialization.\n ///\n /// Initializes global state, including frobbing\n /// the crate's logging flags, registering GC\n /// metadata, and storing the process arguments.\n+#[cfg(stage0)]\n pub fn init(argc: int, argv: **u8, crate_map: *u8) {\n     // XXX: Derefing these pointers is not safe.\n     // Need to propagate the unsafety to `start`.\n@@ -213,6 +232,16 @@ pub fn init(argc: int, argv: **u8, crate_map: *u8) {\n         logging::init(crate_map);\n     }\n }\n+#[cfg(not(stage0))]\n+pub fn init(argc: int, argv: **u8) {\n+    // XXX: Derefing these pointers is not safe.\n+    // Need to propagate the unsafety to `start`.\n+    unsafe {\n+        args::init(argc, argv);\n+        env::init();\n+        logging::init();\n+    }\n+}\n \n /// One-time runtime cleanup.\n pub fn cleanup() {"}, {"sha": "41ff79bc8845815db4eda5382c676bb04473eb62", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97053995046636c0e11d23c4f0523d278a4210c9/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97053995046636c0e11d23c4f0523d278a4210c9/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=97053995046636c0e11d23c4f0523d278a4210c9", "patch": "@@ -138,7 +138,7 @@ mod test {\n #[cfg(target_os = \"android\")]\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n-mod dl {\n+pub mod dl {\n     use c_str::ToCStr;\n     use libc;\n     use path;\n@@ -207,7 +207,7 @@ mod dl {\n }\n \n #[cfg(target_os = \"win32\")]\n-mod dl {\n+pub mod dl {\n     use os;\n     use libc;\n     use path;"}, {"sha": "baa705514894bf69daa1ee806dbd342a56ccb061", "filename": "src/libstd/unstable/lang.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/97053995046636c0e11d23c4f0523d278a4210c9/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97053995046636c0e11d23c4f0523d278a4210c9/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=97053995046636c0e11d23c4f0523d278a4210c9", "patch": "@@ -93,6 +93,7 @@ pub unsafe fn check_not_borrowed(a: *u8,\n     borrowck::check_not_borrowed(a, file, line)\n }\n \n+#[cfg(stage0)]\n #[lang=\"start\"]\n pub fn start(main: *u8, argc: int, argv: **c_char,\n              crate_map: *u8) -> int {\n@@ -105,3 +106,16 @@ pub fn start(main: *u8, argc: int, argv: **c_char,\n         };\n     }\n }\n+\n+#[cfg(not(stage0))]\n+#[lang=\"start\"]\n+pub fn start(main: *u8, argc: int, argv: **c_char) -> int {\n+    use rt;\n+\n+    unsafe {\n+        return do rt::start(argc, argv as **u8) {\n+            let main: extern \"Rust\" fn() = transmute(main);\n+            main();\n+        };\n+    }\n+}"}, {"sha": "4c9d388dbd77ba0a43eb150603ebb8582db6b3c1", "filename": "src/test/run-pass/attr-start.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97053995046636c0e11d23c4f0523d278a4210c9/src%2Ftest%2Frun-pass%2Fattr-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97053995046636c0e11d23c4f0523d278a4210c9/src%2Ftest%2Frun-pass%2Fattr-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-start.rs?ref=97053995046636c0e11d23c4f0523d278a4210c9", "patch": "@@ -11,6 +11,12 @@\n //xfail-fast\n \n #[start]\n+#[cfg(stage0)]\n fn start(_argc: int, _argv: **u8, _crate_map: *u8) -> int {\n     return 0;\n }\n+#[start]\n+#[cfg(not(stage0))]\n+fn start(_argc: int, _argv: **u8) -> int {\n+    return 0;\n+}"}, {"sha": "d7824a6524fe56280df78d3a71a3bf04af8e8bdb", "filename": "src/test/run-pass/core-rt-smoke.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97053995046636c0e11d23c4f0523d278a4210c9/src%2Ftest%2Frun-pass%2Fcore-rt-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97053995046636c0e11d23c4f0523d278a4210c9/src%2Ftest%2Frun-pass%2Fcore-rt-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-rt-smoke.rs?ref=97053995046636c0e11d23c4f0523d278a4210c9", "patch": "@@ -13,8 +13,16 @@\n // A simple test of starting the runtime manually\n \n #[start]\n+#[cfg(stage0)]\n fn start(argc: int, argv: **u8, crate_map: *u8) -> int {\n     do std::rt::start(argc, argv, crate_map) {\n         info!(\"creating my own runtime is joy\");\n     }\n }\n+#[start]\n+#[cfg(not(stage0))]\n+fn start(argc: int, argv: **u8) -> int {\n+    do std::rt::start(argc, argv) {\n+        info!(\"creating my own runtime is joy\");\n+    }\n+}"}, {"sha": "05e761378857961bee225a32a06adcf45db2258c", "filename": "src/test/run-pass/rt-start-main-thread.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/97053995046636c0e11d23c4f0523d278a4210c9/src%2Ftest%2Frun-pass%2Frt-start-main-thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97053995046636c0e11d23c4f0523d278a4210c9/src%2Ftest%2Frun-pass%2Frt-start-main-thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-start-main-thread.rs?ref=97053995046636c0e11d23c4f0523d278a4210c9", "patch": "@@ -11,11 +11,22 @@\n // xfail-fast\n \n #[start]\n+#[cfg(stage0)]\n fn start(argc: int, argv: **u8, crate_map: *u8) -> int {\n     do std::rt::start_on_main_thread(argc, argv, crate_map) {\n         info!(\"running on main thread\");\n         do spawn {\n             info!(\"running on another thread\");\n         }\n     }\n-}\n\\ No newline at end of file\n+}\n+#[start]\n+#[cfg(not(stage0))]\n+fn start(argc: int, argv: **u8) -> int {\n+    do std::rt::start_on_main_thread(argc, argv) {\n+        info!(\"running on main thread\");\n+        do spawn {\n+            info!(\"running on another thread\");\n+        }\n+    }\n+}"}]}