{"sha": "8aff1122c63ac294215a07f6f7fa992d29bb412d", "node_id": "C_kwDOAAsO6NoAKDhhZmYxMTIyYzYzYWMyOTQyMTVhMDdmNmY3ZmE5OTJkMjliYjQxMmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-14T16:10:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-14T16:10:31Z"}, "message": "Rollup merge of #112611 - compiler-errors:unconstrained-lt-in-rpitit, r=oli-obk\n\nError on unconstrained lifetime in RPITIT\n\nFixes #109468\n\nThe only thing is that I had to split `tests/ui/impl-trait/in-trait/method-signature-matches.rs` into a bunch of different revisions because some error aren't being emitted if all the different examples are all together in one file :thinking:\n\nr? `@oli-obk` just because i know you'll review it, feel free to re-roll", "tree": {"sha": "2ad7950a44d890d66c3344303b7c1dc5ae02e0a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ad7950a44d890d66c3344303b7c1dc5ae02e0a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8aff1122c63ac294215a07f6f7fa992d29bb412d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkieZ3CRBK7hj4Ov3rIwAAFhIIAApZA1aXjV/JZzT3LQDA3jd1\ni+Aej4DQEJyk8A7l8sTK518xeZLMGrpjuBO8U6RVX/AGfuqAKNW9z6f96wlOlM6t\nx+7mkr09Ejgvbnl0Xls7+HOEgy+xWTaPSEDoOfGs7iI/uV5sWjEJXv46zPX0+MfO\npOqjfaYrpOM6VLMWKqAsKkSe59R7VkbnZEVR6gfSo4OBOTJVVORHj0HlYm40Kj3p\n6mDeTF9RhX2ONKQ+cPtrdRrflMFpszX4umd5uDQJ5fOFcTCMngVfIRU4dX8eyUbd\nnJT68vbTZwiCoSB+e2GcbpjYisxVCVv7PU0zAmIqOc4ylEV9iG09aO2HbiMYmhM=\n=npqh\n-----END PGP SIGNATURE-----\n", "payload": "tree 2ad7950a44d890d66c3344303b7c1dc5ae02e0a9\nparent 7240943b2869fc47241ee6557c4645d04f2d274c\nparent bc78d0cbf1efb76fa6d7c80bb029a4b6d9af92c3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686759031 +0200\ncommitter GitHub <noreply@github.com> 1686759031 +0200\n\nRollup merge of #112611 - compiler-errors:unconstrained-lt-in-rpitit, r=oli-obk\n\nError on unconstrained lifetime in RPITIT\n\nFixes #109468\n\nThe only thing is that I had to split `tests/ui/impl-trait/in-trait/method-signature-matches.rs` into a bunch of different revisions because some error aren't being emitted if all the different examples are all together in one file :thinking:\n\nr? `@oli-obk` just because i know you'll review it, feel free to re-roll\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8aff1122c63ac294215a07f6f7fa992d29bb412d", "html_url": "https://github.com/rust-lang/rust/commit/8aff1122c63ac294215a07f6f7fa992d29bb412d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8aff1122c63ac294215a07f6f7fa992d29bb412d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7240943b2869fc47241ee6557c4645d04f2d274c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7240943b2869fc47241ee6557c4645d04f2d274c", "html_url": "https://github.com/rust-lang/rust/commit/7240943b2869fc47241ee6557c4645d04f2d274c"}, {"sha": "bc78d0cbf1efb76fa6d7c80bb029a4b6d9af92c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc78d0cbf1efb76fa6d7c80bb029a4b6d9af92c3", "html_url": "https://github.com/rust-lang/rust/commit/bc78d0cbf1efb76fa6d7c80bb029a4b6d9af92c3"}], "stats": {"total": 290, "additions": 188, "deletions": 102}, "files": [{"sha": "4fbe68b8b6c542ce3e908229eefdf2663a688c4d", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 38, "deletions": 21, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8aff1122c63ac294215a07f6f7fa992d29bb412d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aff1122c63ac294215a07f6f7fa992d29bb412d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=8aff1122c63ac294215a07f6f7fa992d29bb412d", "patch": "@@ -45,12 +45,7 @@ pub(super) fn compare_impl_method<'tcx>(\n     debug!(\"compare_impl_method(impl_trait_ref={:?})\", impl_trait_ref);\n \n     let _: Result<_, ErrorGuaranteed> = try {\n-        compare_self_type(tcx, impl_m, trait_m, impl_trait_ref)?;\n-        compare_number_of_generics(tcx, impl_m, trait_m, false)?;\n-        compare_generic_param_kinds(tcx, impl_m, trait_m, false)?;\n-        compare_number_of_method_arguments(tcx, impl_m, trait_m)?;\n-        compare_synthetic_generics(tcx, impl_m, trait_m)?;\n-        compare_asyncness(tcx, impl_m, trait_m)?;\n+        check_method_is_structurally_compatible(tcx, impl_m, trait_m, impl_trait_ref, false)?;\n         compare_method_predicate_entailment(\n             tcx,\n             impl_m,\n@@ -61,6 +56,26 @@ pub(super) fn compare_impl_method<'tcx>(\n     };\n }\n \n+/// Checks a bunch of different properties of the impl/trait methods for\n+/// compatibility, such as asyncness, number of argument, self receiver kind,\n+/// and number of early- and late-bound generics.\n+fn check_method_is_structurally_compatible<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    impl_m: ty::AssocItem,\n+    trait_m: ty::AssocItem,\n+    impl_trait_ref: ty::TraitRef<'tcx>,\n+    delay: bool,\n+) -> Result<(), ErrorGuaranteed> {\n+    compare_self_type(tcx, impl_m, trait_m, impl_trait_ref, delay)?;\n+    compare_number_of_generics(tcx, impl_m, trait_m, delay)?;\n+    compare_generic_param_kinds(tcx, impl_m, trait_m, delay)?;\n+    compare_number_of_method_arguments(tcx, impl_m, trait_m, delay)?;\n+    compare_synthetic_generics(tcx, impl_m, trait_m, delay)?;\n+    compare_asyncness(tcx, impl_m, trait_m, delay)?;\n+    check_region_bounds_on_impl_item(tcx, impl_m, trait_m, delay)?;\n+    Ok(())\n+}\n+\n /// This function is best explained by example. Consider a trait with it's implementation:\n ///\n /// ```rust\n@@ -177,9 +192,6 @@ fn compare_method_predicate_entailment<'tcx>(\n     let impl_m_predicates = tcx.predicates_of(impl_m.def_id);\n     let trait_m_predicates = tcx.predicates_of(trait_m.def_id);\n \n-    // Check region bounds.\n-    check_region_bounds_on_impl_item(tcx, impl_m, trait_m, false)?;\n-\n     // Create obligations for each predicate declared by the impl\n     // definition in the context of the trait's parameter\n     // environment. We can't just use `impl_env.caller_bounds`,\n@@ -534,6 +546,7 @@ fn compare_asyncness<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_m: ty::AssocItem,\n     trait_m: ty::AssocItem,\n+    delay: bool,\n ) -> Result<(), ErrorGuaranteed> {\n     if tcx.asyncness(trait_m.def_id) == hir::IsAsync::Async {\n         match tcx.fn_sig(impl_m.def_id).skip_binder().skip_binder().output().kind() {\n@@ -544,11 +557,14 @@ fn compare_asyncness<'tcx>(\n                 // We don't know if it's ok, but at least it's already an error.\n             }\n             _ => {\n-                return Err(tcx.sess.emit_err(crate::errors::AsyncTraitImplShouldBeAsync {\n-                    span: tcx.def_span(impl_m.def_id),\n-                    method_name: trait_m.name,\n-                    trait_item_span: tcx.hir().span_if_local(trait_m.def_id),\n-                }));\n+                return Err(tcx\n+                    .sess\n+                    .create_err(crate::errors::AsyncTraitImplShouldBeAsync {\n+                        span: tcx.def_span(impl_m.def_id),\n+                        method_name: trait_m.name,\n+                        trait_item_span: tcx.hir().span_if_local(trait_m.def_id),\n+                    })\n+                    .emit_unless(delay));\n             }\n         };\n     }\n@@ -602,9 +618,7 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n \n     // First, check a few of the same things as `compare_impl_method`,\n     // just so we don't ICE during substitution later.\n-    compare_number_of_generics(tcx, impl_m, trait_m, true)?;\n-    compare_generic_param_kinds(tcx, impl_m, trait_m, true)?;\n-    check_region_bounds_on_impl_item(tcx, impl_m, trait_m, true)?;\n+    check_method_is_structurally_compatible(tcx, impl_m, trait_m, impl_trait_ref, true)?;\n \n     let trait_to_impl_substs = impl_trait_ref.substs;\n \n@@ -1097,6 +1111,7 @@ fn compare_self_type<'tcx>(\n     impl_m: ty::AssocItem,\n     trait_m: ty::AssocItem,\n     impl_trait_ref: ty::TraitRef<'tcx>,\n+    delay: bool,\n ) -> Result<(), ErrorGuaranteed> {\n     // Try to give more informative error messages about self typing\n     // mismatches. Note that any mismatch will also be detected\n@@ -1145,7 +1160,7 @@ fn compare_self_type<'tcx>(\n             } else {\n                 err.note_trait_signature(trait_m.name, trait_m.signature(tcx));\n             }\n-            return Err(err.emit());\n+            return Err(err.emit_unless(delay));\n         }\n \n         (true, false) => {\n@@ -1166,7 +1181,7 @@ fn compare_self_type<'tcx>(\n                 err.note_trait_signature(trait_m.name, trait_m.signature(tcx));\n             }\n \n-            return Err(err.emit());\n+            return Err(err.emit_unless(delay));\n         }\n     }\n \n@@ -1352,6 +1367,7 @@ fn compare_number_of_method_arguments<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_m: ty::AssocItem,\n     trait_m: ty::AssocItem,\n+    delay: bool,\n ) -> Result<(), ErrorGuaranteed> {\n     let impl_m_fty = tcx.fn_sig(impl_m.def_id);\n     let trait_m_fty = tcx.fn_sig(trait_m.def_id);\n@@ -1422,7 +1438,7 @@ fn compare_number_of_method_arguments<'tcx>(\n             ),\n         );\n \n-        return Err(err.emit());\n+        return Err(err.emit_unless(delay));\n     }\n \n     Ok(())\n@@ -1432,6 +1448,7 @@ fn compare_synthetic_generics<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_m: ty::AssocItem,\n     trait_m: ty::AssocItem,\n+    delay: bool,\n ) -> Result<(), ErrorGuaranteed> {\n     // FIXME(chrisvittal) Clean up this function, list of FIXME items:\n     //     1. Better messages for the span labels\n@@ -1551,7 +1568,7 @@ fn compare_synthetic_generics<'tcx>(\n                 }\n                 _ => unreachable!(),\n             }\n-            error_found = Some(err.emit());\n+            error_found = Some(err.emit_unless(delay));\n         }\n     }\n     if let Some(reported) = error_found { Err(reported) } else { Ok(()) }"}, {"sha": "5526dd4b007dd32d33b1fbad417629d3084e540b", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8aff1122c63ac294215a07f6f7fa992d29bb412d/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aff1122c63ac294215a07f6f7fa992d29bb412d/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs?ref=8aff1122c63ac294215a07f6f7fa992d29bb412d", "patch": "@@ -106,10 +106,23 @@ fn enforce_impl_params_are_constrained(tcx: TyCtxt<'_>, impl_def_id: LocalDefId)\n                     if item.defaultness(tcx).has_value() {\n                         cgp::parameters_for(&tcx.type_of(def_id).subst_identity(), true)\n                     } else {\n-                        Vec::new()\n+                        vec![]\n                     }\n                 }\n-                ty::AssocKind::Fn | ty::AssocKind::Const => Vec::new(),\n+                ty::AssocKind::Fn => {\n+                    if !tcx.lower_impl_trait_in_trait_to_assoc_ty()\n+                        && item.defaultness(tcx).has_value()\n+                        && tcx.impl_method_has_trait_impl_trait_tys(item.def_id)\n+                        && let Ok(table) = tcx.collect_return_position_impl_trait_in_trait_tys(def_id)\n+                    {\n+                        table.values().copied().flat_map(|ty| {\n+                            cgp::parameters_for(&ty.subst_identity(), true)\n+                        }).collect()\n+                    } else {\n+                        vec![]\n+                    }\n+                }\n+                ty::AssocKind::Const => vec![],\n             }\n         })\n         .collect();"}, {"sha": "f604ada6ac760b1757983d5f625abf83bc210649", "filename": "tests/ui/impl-trait/in-trait/method-signature-matches.lt.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8aff1122c63ac294215a07f6f7fa992d29bb412d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.lt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aff1122c63ac294215a07f6f7fa992d29bb412d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.lt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.lt.stderr?ref=8aff1122c63ac294215a07f6f7fa992d29bb412d", "patch": "@@ -0,0 +1,21 @@\n+error[E0053]: method `early` has an incompatible type for trait\n+  --> $DIR/method-signature-matches.rs:58:27\n+   |\n+LL |     fn early<'late, T>(_: &'late ()) {}\n+   |                     -     ^^^^^^^^^\n+   |                     |     |\n+   |                     |     expected type parameter `T`, found `()`\n+   |                     |     help: change the parameter type to match the trait: `&'early T`\n+   |                     this type parameter\n+   |\n+note: type in trait\n+  --> $DIR/method-signature-matches.rs:53:28\n+   |\n+LL |     fn early<'early, T>(x: &'early T) -> impl Sized;\n+   |                            ^^^^^^^^^\n+   = note: expected signature `fn(&'early T)`\n+              found signature `fn(&())`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "d3183b92e8400acc7f6d949ac3a88f3357cba14f", "filename": "tests/ui/impl-trait/in-trait/method-signature-matches.mismatch.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8aff1122c63ac294215a07f6f7fa992d29bb412d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aff1122c63ac294215a07f6f7fa992d29bb412d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.mismatch.stderr?ref=8aff1122c63ac294215a07f6f7fa992d29bb412d", "patch": "@@ -0,0 +1,20 @@\n+error[E0053]: method `owo` has an incompatible type for trait\n+  --> $DIR/method-signature-matches.rs:14:15\n+   |\n+LL |     fn owo(_: u8) {}\n+   |               ^^\n+   |               |\n+   |               expected `()`, found `u8`\n+   |               help: change the parameter type to match the trait: `()`\n+   |\n+note: type in trait\n+  --> $DIR/method-signature-matches.rs:9:15\n+   |\n+LL |     fn owo(x: ()) -> impl Sized;\n+   |               ^^\n+   = note: expected signature `fn(())`\n+              found signature `fn(u8)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "80fda1c9fe14e4f1f6e4d510e39d5ea75b74c022", "filename": "tests/ui/impl-trait/in-trait/method-signature-matches.mismatch_async.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8aff1122c63ac294215a07f6f7fa992d29bb412d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.mismatch_async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aff1122c63ac294215a07f6f7fa992d29bb412d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.mismatch_async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.mismatch_async.stderr?ref=8aff1122c63ac294215a07f6f7fa992d29bb412d", "patch": "@@ -0,0 +1,20 @@\n+error[E0053]: method `owo` has an incompatible type for trait\n+  --> $DIR/method-signature-matches.rs:25:21\n+   |\n+LL |     async fn owo(_: u8) {}\n+   |                     ^^\n+   |                     |\n+   |                     expected `()`, found `u8`\n+   |                     help: change the parameter type to match the trait: `()`\n+   |\n+note: type in trait\n+  --> $DIR/method-signature-matches.rs:20:21\n+   |\n+LL |     async fn owo(x: ()) {}\n+   |                     ^^\n+   = note: expected signature `fn(()) -> _`\n+              found signature `fn(u8) -> _`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "294f93b30d0eed722dd6ebcaac46f783b7a14473", "filename": "tests/ui/impl-trait/in-trait/method-signature-matches.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8aff1122c63ac294215a07f6f7fa992d29bb412d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aff1122c63ac294215a07f6f7fa992d29bb412d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.rs?ref=8aff1122c63ac294215a07f6f7fa992d29bb412d", "patch": "@@ -1,51 +1,62 @@\n // edition: 2021\n+// revisions: mismatch mismatch_async too_many too_few lt\n \n #![feature(return_position_impl_trait_in_trait, async_fn_in_trait)]\n #![allow(incomplete_features)]\n \n+#[cfg(mismatch)]\n trait Uwu {\n     fn owo(x: ()) -> impl Sized;\n }\n \n+#[cfg(mismatch)]\n impl Uwu for () {\n     fn owo(_: u8) {}\n-    //~^ ERROR method `owo` has an incompatible type for trait\n+    //[mismatch]~^ ERROR method `owo` has an incompatible type for trait\n }\n \n+#[cfg(mismatch_async)]\n trait AsyncUwu {\n     async fn owo(x: ()) {}\n }\n \n+#[cfg(mismatch_async)]\n impl AsyncUwu for () {\n     async fn owo(_: u8) {}\n-    //~^ ERROR method `owo` has an incompatible type for trait\n+    //[mismatch_async]~^ ERROR method `owo` has an incompatible type for trait\n }\n \n+#[cfg(too_many)]\n trait TooMuch {\n     fn calm_down_please() -> impl Sized;\n }\n \n+#[cfg(too_many)]\n impl TooMuch for () {\n     fn calm_down_please(_: (), _: (), _: ()) {}\n-    //~^ ERROR method `calm_down_please` has 3 parameters but the declaration in trait `TooMuch::calm_down_please` has 0\n+    //[too_many]~^ ERROR method `calm_down_please` has 3 parameters but the declaration in trait `TooMuch::calm_down_please` has 0\n }\n \n+#[cfg(too_few)]\n trait TooLittle {\n     fn come_on_a_little_more_effort(_: (), _: (), _: ()) -> impl Sized;\n }\n \n+#[cfg(too_few)]\n impl TooLittle for () {\n     fn come_on_a_little_more_effort() {}\n-    //~^ ERROR method `come_on_a_little_more_effort` has 0 parameters but the declaration in trait `TooLittle::come_on_a_little_more_effort` has 3\n+    //[too_few]~^ ERROR method `come_on_a_little_more_effort` has 0 parameters but the declaration in trait `TooLittle::come_on_a_little_more_effort` has 3\n }\n \n+#[cfg(lt)]\n trait Lifetimes {\n     fn early<'early, T>(x: &'early T) -> impl Sized;\n }\n \n+#[cfg(lt)]\n impl Lifetimes for () {\n     fn early<'late, T>(_: &'late ()) {}\n-    //~^ ERROR method `early` has an incompatible type for trait\n+    //[lt]~^ ERROR method `early` has an incompatible type for trait\n }\n \n fn main() {}"}, {"sha": "3ec62020e6c89c41077a681f599a9856cc2cb05a", "filename": "tests/ui/impl-trait/in-trait/method-signature-matches.stderr", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/7240943b2869fc47241ee6557c4645d04f2d274c/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7240943b2869fc47241ee6557c4645d04f2d274c/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.stderr?ref=7240943b2869fc47241ee6557c4645d04f2d274c", "patch": "@@ -1,74 +0,0 @@\n-error[E0053]: method `owo` has an incompatible type for trait\n-  --> $DIR/method-signature-matches.rs:11:15\n-   |\n-LL |     fn owo(_: u8) {}\n-   |               ^^\n-   |               |\n-   |               expected `()`, found `u8`\n-   |               help: change the parameter type to match the trait: `()`\n-   |\n-note: type in trait\n-  --> $DIR/method-signature-matches.rs:7:15\n-   |\n-LL |     fn owo(x: ()) -> impl Sized;\n-   |               ^^\n-   = note: expected signature `fn(())`\n-              found signature `fn(u8)`\n-\n-error[E0053]: method `owo` has an incompatible type for trait\n-  --> $DIR/method-signature-matches.rs:20:21\n-   |\n-LL |     async fn owo(_: u8) {}\n-   |                     ^^\n-   |                     |\n-   |                     expected `()`, found `u8`\n-   |                     help: change the parameter type to match the trait: `()`\n-   |\n-note: type in trait\n-  --> $DIR/method-signature-matches.rs:16:21\n-   |\n-LL |     async fn owo(x: ()) {}\n-   |                     ^^\n-   = note: expected signature `fn(()) -> _`\n-              found signature `fn(u8) -> _`\n-\n-error[E0050]: method `calm_down_please` has 3 parameters but the declaration in trait `TooMuch::calm_down_please` has 0\n-  --> $DIR/method-signature-matches.rs:29:28\n-   |\n-LL |     fn calm_down_please() -> impl Sized;\n-   |     ------------------------------------ trait requires 0 parameters\n-...\n-LL |     fn calm_down_please(_: (), _: (), _: ()) {}\n-   |                            ^^^^^^^^^^^^^^^^ expected 0 parameters, found 3\n-\n-error[E0050]: method `come_on_a_little_more_effort` has 0 parameters but the declaration in trait `TooLittle::come_on_a_little_more_effort` has 3\n-  --> $DIR/method-signature-matches.rs:38:5\n-   |\n-LL |     fn come_on_a_little_more_effort(_: (), _: (), _: ()) -> impl Sized;\n-   |                                        ---------------- trait requires 3 parameters\n-...\n-LL |     fn come_on_a_little_more_effort() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 3 parameters, found 0\n-\n-error[E0053]: method `early` has an incompatible type for trait\n-  --> $DIR/method-signature-matches.rs:47:27\n-   |\n-LL |     fn early<'late, T>(_: &'late ()) {}\n-   |                     -     ^^^^^^^^^\n-   |                     |     |\n-   |                     |     expected type parameter `T`, found `()`\n-   |                     |     help: change the parameter type to match the trait: `&'early T`\n-   |                     this type parameter\n-   |\n-note: type in trait\n-  --> $DIR/method-signature-matches.rs:43:28\n-   |\n-LL |     fn early<'early, T>(x: &'early T) -> impl Sized;\n-   |                            ^^^^^^^^^\n-   = note: expected signature `fn(&'early T)`\n-              found signature `fn(&())`\n-\n-error: aborting due to 5 previous errors\n-\n-Some errors have detailed explanations: E0050, E0053.\n-For more information about an error, try `rustc --explain E0050`."}, {"sha": "24bcfeb748fd0b58a2c8ef7a7e1ffc23779a91ea", "filename": "tests/ui/impl-trait/in-trait/method-signature-matches.too_few.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8aff1122c63ac294215a07f6f7fa992d29bb412d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.too_few.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aff1122c63ac294215a07f6f7fa992d29bb412d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.too_few.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.too_few.stderr?ref=8aff1122c63ac294215a07f6f7fa992d29bb412d", "patch": "@@ -0,0 +1,12 @@\n+error[E0050]: method `come_on_a_little_more_effort` has 0 parameters but the declaration in trait `TooLittle::come_on_a_little_more_effort` has 3\n+  --> $DIR/method-signature-matches.rs:47:5\n+   |\n+LL |     fn come_on_a_little_more_effort(_: (), _: (), _: ()) -> impl Sized;\n+   |                                        ---------------- trait requires 3 parameters\n+...\n+LL |     fn come_on_a_little_more_effort() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 3 parameters, found 0\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0050`."}, {"sha": "616cbd2905c794ac17a8e0181f6618008f003f95", "filename": "tests/ui/impl-trait/in-trait/method-signature-matches.too_many.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8aff1122c63ac294215a07f6f7fa992d29bb412d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.too_many.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aff1122c63ac294215a07f6f7fa992d29bb412d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.too_many.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.too_many.stderr?ref=8aff1122c63ac294215a07f6f7fa992d29bb412d", "patch": "@@ -0,0 +1,12 @@\n+error[E0050]: method `calm_down_please` has 3 parameters but the declaration in trait `TooMuch::calm_down_please` has 0\n+  --> $DIR/method-signature-matches.rs:36:28\n+   |\n+LL |     fn calm_down_please() -> impl Sized;\n+   |     ------------------------------------ trait requires 0 parameters\n+...\n+LL |     fn calm_down_please(_: (), _: (), _: ()) {}\n+   |                            ^^^^^^^^^^^^^^^^ expected 0 parameters, found 3\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0050`."}, {"sha": "bf088ae8b25ccb48f8b68bfcba469e499fb441c5", "filename": "tests/ui/impl-trait/in-trait/unconstrained-lt.current.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8aff1122c63ac294215a07f6f7fa992d29bb412d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Funconstrained-lt.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aff1122c63ac294215a07f6f7fa992d29bb412d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Funconstrained-lt.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Funconstrained-lt.current.stderr?ref=8aff1122c63ac294215a07f6f7fa992d29bb412d", "patch": "@@ -0,0 +1,9 @@\n+error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/unconstrained-lt.rs:10:6\n+   |\n+LL | impl<'a, T> Foo for T {\n+   |      ^^ unconstrained lifetime parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "bf088ae8b25ccb48f8b68bfcba469e499fb441c5", "filename": "tests/ui/impl-trait/in-trait/unconstrained-lt.next.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8aff1122c63ac294215a07f6f7fa992d29bb412d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Funconstrained-lt.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aff1122c63ac294215a07f6f7fa992d29bb412d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Funconstrained-lt.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Funconstrained-lt.next.stderr?ref=8aff1122c63ac294215a07f6f7fa992d29bb412d", "patch": "@@ -0,0 +1,9 @@\n+error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/unconstrained-lt.rs:10:6\n+   |\n+LL | impl<'a, T> Foo for T {\n+   |      ^^ unconstrained lifetime parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "f966be43a6ef8977c744ee97873dcc0a380e208d", "filename": "tests/ui/impl-trait/in-trait/unconstrained-lt.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8aff1122c63ac294215a07f6f7fa992d29bb412d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Funconstrained-lt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aff1122c63ac294215a07f6f7fa992d29bb412d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Funconstrained-lt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Funconstrained-lt.rs?ref=8aff1122c63ac294215a07f6f7fa992d29bb412d", "patch": "@@ -0,0 +1,16 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+\n+trait Foo {\n+    fn test() -> impl Sized;\n+}\n+\n+impl<'a, T> Foo for T {\n+    //~^ ERROR the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n+\n+    fn test() -> &'a () { &() }\n+}\n+\n+fn main() {}"}]}