{"sha": "8d9dc2b74931a30ad3ee4be09e065468afc9a566", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkOWRjMmI3NDkzMWEzMGFkM2VlNGJlMDllMDY1NDY4YWZjOWE1NjY=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-12-15T13:47:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-15T13:47:38Z"}, "message": "Rollup merge of #56710 - jethrogb:jb/sgx-target-features, r=alexcrichton\n\nAlways set the RDRAND and RDSEED features on SGX\n\nNot sure if this is 100% correct.\n\nThis [Intel article](https://software.intel.com/en-us/articles/intel-software-guard-extensions-tutorial-part-5-enclave-development) goes in great depth regarding using (untrusted) CPUID to see whether RDRAND/RDSEED is supported, and explains what happens to the enclave if the CPUID result is faked.\n\nI'd say that an implementation of SGX that doesn't make RDRAND available to the enclave is so severely limited/broken that it's ok if you get #UD in that case. The case is less clear for RDSEED, but it so far every processor released by Intel with SGX support also has RDSEED (including Gemini Lake).\n\ncc @briansmith", "tree": {"sha": "42836d469af9d866902d2bdf465c3a3bff76036e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42836d469af9d866902d2bdf465c3a3bff76036e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d9dc2b74931a30ad3ee4be09e065468afc9a566", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcFQX6CRBK7hj4Ov3rIwAAdHIIAKIlNaheuxGeCjQLCygmjPD5\nAxdRJvV+p4iIyhuaOcQFLgymxasWaalmhGumcTflZ4Ka2VmWp8HRlLfIzhdtE1UO\nYytusv+L0P1MtFG9KqAHsf2eizycNUclaPkgYJrpyOqZ6uavxtE6ncfskYHhBuMR\n02dUqVYc8ib9A2doigIr/jagnzptr9nSl8H0EzOpWwWUfBgpcY/58FhIcHKABmeQ\nN3FlFrn9sXVudS7mnkZtEIWvubYN2eqLzSbpfLivceRCleUQ1PaCdgw82UuM3OCN\ntkNM6Vnbyf/9iVcCnFHMjnmaRF8IvCbuQXvZb8FNqb4K7tkAfng6akVveuoU58g=\n=rIKg\n-----END PGP SIGNATURE-----\n", "payload": "tree 42836d469af9d866902d2bdf465c3a3bff76036e\nparent b5b67298ec536a7ce4382b8afbf59c145a4ed308\nparent 5acab2d7d1bd210a2fd62334b07a4d154463d412\nauthor Pietro Albini <pietro@pietroalbini.org> 1544881658 +0100\ncommitter GitHub <noreply@github.com> 1544881658 +0100\n\nRollup merge of #56710 - jethrogb:jb/sgx-target-features, r=alexcrichton\n\nAlways set the RDRAND and RDSEED features on SGX\n\nNot sure if this is 100% correct.\n\nThis [Intel article](https://software.intel.com/en-us/articles/intel-software-guard-extensions-tutorial-part-5-enclave-development) goes in great depth regarding using (untrusted) CPUID to see whether RDRAND/RDSEED is supported, and explains what happens to the enclave if the CPUID result is faked.\n\nI'd say that an implementation of SGX that doesn't make RDRAND available to the enclave is so severely limited/broken that it's ok if you get #UD in that case. The case is less clear for RDSEED, but it so far every processor released by Intel with SGX support also has RDSEED (including Gemini Lake).\n\ncc @briansmith\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9dc2b74931a30ad3ee4be09e065468afc9a566", "html_url": "https://github.com/rust-lang/rust/commit/8d9dc2b74931a30ad3ee4be09e065468afc9a566", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d9dc2b74931a30ad3ee4be09e065468afc9a566/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5b67298ec536a7ce4382b8afbf59c145a4ed308", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5b67298ec536a7ce4382b8afbf59c145a4ed308", "html_url": "https://github.com/rust-lang/rust/commit/b5b67298ec536a7ce4382b8afbf59c145a4ed308"}, {"sha": "5acab2d7d1bd210a2fd62334b07a4d154463d412", "url": "https://api.github.com/repos/rust-lang/rust/commits/5acab2d7d1bd210a2fd62334b07a4d154463d412", "html_url": "https://github.com/rust-lang/rust/commit/5acab2d7d1bd210a2fd62334b07a4d154463d412"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "5b6d8abc5ef3e51c0244e07c971266f1588b7a8f", "filename": "src/librustc_target/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d9dc2b74931a30ad3ee4be09e065468afc9a566/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9dc2b74931a30ad3ee4be09e065468afc9a566/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=8d9dc2b74931a30ad3ee4be09e065468afc9a566", "patch": "@@ -49,6 +49,7 @@ pub fn target() -> Result<Target, String> {\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Abort,\n         cpu: \"x86-64\".into(),\n+        features: \"+rdrnd,+rdseed\".into(),\n         position_independent_executables: true,\n         pre_link_args: iter::once(\n                 (LinkerFlavor::Gcc, PRE_LINK_ARGS.iter().cloned().map(String::from).collect())"}]}