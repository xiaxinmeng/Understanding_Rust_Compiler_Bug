{"sha": "1065c2bf1db2aaf78286b1f9f3c13237baac155b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNjVjMmJmMWRiMmFhZjc4Mjg2YjFmOWYzYzEzMjM3YmFhYzE1NWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-29T13:45:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-29T13:45:32Z"}, "message": "Freshen dev docs a tiny bits", "tree": {"sha": "6ac553962eaba80e563cc05d0bbf6dd1095e6434", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ac553962eaba80e563cc05d0bbf6dd1095e6434"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1065c2bf1db2aaf78286b1f9f3c13237baac155b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1065c2bf1db2aaf78286b1f9f3c13237baac155b", "html_url": "https://github.com/rust-lang/rust/commit/1065c2bf1db2aaf78286b1f9f3c13237baac155b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1065c2bf1db2aaf78286b1f9f3c13237baac155b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2fd252f9de23d5801b1ca10c067654bf7d6ef4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2fd252f9de23d5801b1ca10c067654bf7d6ef4f", "html_url": "https://github.com/rust-lang/rust/commit/d2fd252f9de23d5801b1ca10c067654bf7d6ef4f"}], "stats": {"total": 86, "additions": 38, "deletions": 48}, "files": [{"sha": "a2be9985869f00c372d74c7c0776fa26345cc162", "filename": "docs/dev/README.md", "status": "modified", "additions": 36, "deletions": 48, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/1065c2bf1db2aaf78286b1f9f3c13237baac155b/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/1065c2bf1db2aaf78286b1f9f3c13237baac155b/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=1065c2bf1db2aaf78286b1f9f3c13237baac155b", "patch": "@@ -26,15 +26,6 @@ Discussion happens in this Zulip stream:\n \n https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0\n \n-# Work List\n-\n-We have this \"work list\" paper document:\n-\n-https://paper.dropbox.com/doc/RLS-2.0-work-list--AZ3BgHKKCtqszbsi3gi6sjchAQ-42vbnxzuKq2lKwW0mkn8Y\n-\n-It shows what everyone is working on right now. If you want to (this is not\n-mandatory), add yourself to the list!\n-\n # Issue Labels\n \n * [good-first-issue](https://github.com/rust-analyzer/rust-analyzer/labels/good%20first%20issue)\n@@ -50,10 +41,12 @@ mandatory), add yourself to the list!\n \n # CI\n \n-We use Travis for CI. Most of the things, including formatting, are checked by\n+We use GitHub Actions for CI. Most of the things, including formatting, are checked by\n `cargo test` so, if `cargo test` passes locally, that's a good sign that CI will\n-be green as well. We use bors-ng to enforce the [not rocket\n-science](https://graydon2.dreamwidth.org/1597.html) rule.\n+be green as well. The only exception is that long-running by default a skipped locally.\n+Use `env RUN_SLOW_TESTS=1 cargo test` to run the full suite.\n+\n+We use bors-ng to enforce the [not rocket science](https://graydon2.dreamwidth.org/1597.html) rule.\n \n You can run `cargo xtask install-pre-commit-hook` to install git-hook to run rustfmt on commit.\n \n@@ -81,42 +74,37 @@ relevant test and execute it (VS Code includes an action for running a single\n test).\n \n However, launching a VS Code instance with locally build language server is\n-possible. There's even a VS Code task for this, so just <kbd>F5</kbd> should\n-work (thanks, [@andrew-w-ross](https://github.com/andrew-w-ross)!).\n-\n-I often just install development version with `cargo xtask install --server --jemalloc` and\n-restart the host VS Code.\n-\n-See [./debugging.md](./debugging.md) for how to attach to rust-analyzer with\n-debugger, and don't forget that rust-analyzer has useful `pd` snippet and `dbg`\n-postfix completion for printf debugging :-)\n-\n-# Working With VS Code Extension\n-\n-To work on the VS Code extension, launch code inside `editors/code` and use `F5`\n-to launch/debug. To automatically apply formatter and linter suggestions, use\n-`npm run fix`.\n-\n-Tests are located inside `src/test` and are named `*.test.ts`. They use the\n-[Mocha](https://mochajs.org) test framework and the builtin Node\n-[assert](https://nodejs.org/api/assert.html) module. Unlike normal Node tests\n-they must be hosted inside a VS Code instance. This can be done in one of two\n-ways:\n-\n-1. When `F5` debugging in VS Code select the `Extension Tests` configuration\n-   from the drop-down at the top of the Debug View. This will launch a temporary\n-   instance of VS Code. The test results will appear in the \"Debug Console\" tab\n-   of the primary VS Code instance.\n-\n-2. Run `npm test` from the command line. Although this is initiated from the\n-   command line it is not headless; it will also launch a temporary instance of\n-   VS Code.\n-\n-Due to the requirements of running the tests inside VS Code they are **not run\n-on CI**. When making changes to the extension please ensure the tests are not\n-broken locally before opening a Pull Request.\n-\n-To install **only** the VS Code extension, use `cargo xtask install --client-code`.\n+possible. There's \"Run Extension (Dev Server)\" launch configuration for this.\n+\n+In general, I use one of the following workflows for fixing bugs and\n+implementing features.\n+\n+If the problem concerns only internal parts of rust-analyzer (ie, I don't need\n+to touch `ra_lsp_server` crate or typescript code), there is a unit-test for it.\n+So, I use **Rust Analyzer: Run** action in VS Code to run this single test, and\n+then just do printf-driven development/debugging. As a sanity check after I'm\n+done, I use `cargo xtask install --server` and **Reload Window** action in VS\n+Code to sanity check that the thing works as I expect.\n+\n+If the problem concerns only the VS Code extension, I use **Run Extension**\n+launch configuration from `launch.json`. Notably, this uses the usual\n+`ra_lsp_server` binary from `PATH`. After I am done with the fix, I use `cargo\n+xtask install --client-code` to try the new extension for real.\n+\n+If I need to fix something in the `ra_lsp_server` crate, I feel sad because it's\n+on the boundary between the two processes, and working there is slow. I usually\n+just `cargo xtask install --server` and poke changes from my live environment.\n+Note that this uses `--release`, which is usually faster overall, because\n+loading stdlib into debug version of rust-analyzer takes a lot of time. To speed\n+things up, sometimes I open a temporary hello-world project which has\n+`\"rust-analyzer.withSysroot\": false` in `.code/settings.json`. This flag causes\n+rust-analyzer to skip loading the sysroot, which greatly reduces the amount of\n+things rust-analyzer needs to do, and makes printf's more useful. Note that you\n+should only use `eprint!` family of macros for debugging: stdout is used for LSP\n+communication, and `print!` would break it.\n+\n+If I need to fix something simultaneously in the server and in the client, I\n+feel even more sad. I don't have a specific workflow for this case.\n \n # Logging\n "}, {"sha": "1ccf4dca244534d4fea1b68b24fbedc1bd162415", "filename": "docs/dev/debugging.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1065c2bf1db2aaf78286b1f9f3c13237baac155b/docs%2Fdev%2Fdebugging.md", "raw_url": "https://github.com/rust-lang/rust/raw/1065c2bf1db2aaf78286b1f9f3c13237baac155b/docs%2Fdev%2Fdebugging.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fdebugging.md?ref=1065c2bf1db2aaf78286b1f9f3c13237baac155b", "patch": "@@ -1,5 +1,7 @@\n # Debugging vs Code plugin and the Language Server\n \n+**NOTE:** the information here is mostly obsolete\n+\n Install [LLDB](https://lldb.llvm.org/) and the [LLDB Extension](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb).\n \n Checkout rust rust-analyzer and open it in vscode."}]}