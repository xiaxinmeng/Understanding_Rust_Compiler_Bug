{"sha": "8b6f3ddf2347509f9ff90c34e48673a25624d6e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNmYzZGRmMjM0NzUwOWY5ZmY5MGMzNGU0ODY3M2EyNTYyNGQ2ZTU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2018-12-15T12:00:15Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-02-01T14:43:55Z"}, "message": "Initial implementation work", "tree": {"sha": "33e1088a025f84a55b2dca68eca912874e98e113", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33e1088a025f84a55b2dca68eca912874e98e113"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b6f3ddf2347509f9ff90c34e48673a25624d6e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlxUWysACgkQtAh+UQ6Y\nsWQI1hAArqMUZnMbt7am58Gw78pxlrue8EwxaT8Xj/LaoQRLyE/AE8OlP5Y5pg9V\n+JigLHPqppVutKj2Dt+QyBsJh/fI1zCOk2oEWL8P/23Aj6h+wZIk5d6d8VOLBK2Z\no433Wri2yMLf3eY8tbv0J05o1D7tVhOvfqRrVChyQp86W6dajn68bM8iBqSqyi2t\nne+Ipot2B5UcLSOx1kiilkN4KzRUbyOCGSvM60CJAd4AwD3AV/lQMo3ua6Wec2/9\n4Qdo+XzEDMTHxNWE2c+uEOg2gnK+G9FMeWG2rpbTrFx2rSMjHKjXljKgmgG3mc3u\ndg+TbHjkgSuJzgL2yyKoo9aJefZpPKA6fTHNZrEh5PqpA83AcdgNU8DvMU99nnTg\ngNke8nyUh2XKKlDbdJTM6u3d1oYH2BQfNd/cT1LuyLr4CRDcakrK6ZRzOPX+11lA\nEjO99Gchnd3lgd/p7vNOiPcAdY4BnluDi8J55jWLuy1PGSlu2QXp/wFqhiKWts2K\nT3opebZr/aQILVO7r3+TDtw+lVqv+tH8vUamIhcTc2WkEegMcnm3Ot5E7ReClhKh\nJd75/9d4sxjXwzP0OC4W2/cxg1Cb5bxI7xCozg6/TNHJHcpGOZ0ai6q6OCk6uIS+\nuNNXa+VxKKnt603vf59sG3G/A4kJubYsbN3P6Dx+TAP4ZxNp13k=\n=9JiB\n-----END PGP SIGNATURE-----", "payload": "tree 33e1088a025f84a55b2dca68eca912874e98e113\nparent 1aa250635e9fd2646116726c88a31c15eb4ab74e\nauthor Aaron Hill <aa1ronham@gmail.com> 1544875215 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1549032235 -0500\n\nInitial implementation work\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b6f3ddf2347509f9ff90c34e48673a25624d6e5", "html_url": "https://github.com/rust-lang/rust/commit/8b6f3ddf2347509f9ff90c34e48673a25624d6e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b6f3ddf2347509f9ff90c34e48673a25624d6e5/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aa250635e9fd2646116726c88a31c15eb4ab74e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa250635e9fd2646116726c88a31c15eb4ab74e", "html_url": "https://github.com/rust-lang/rust/commit/1aa250635e9fd2646116726c88a31c15eb4ab74e"}], "stats": {"total": 169, "additions": 164, "deletions": 5}, "files": [{"sha": "16f7f9903f7d5d508ab08d5c69576f8a26def325", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b6f3ddf2347509f9ff90c34e48673a25624d6e5/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6f3ddf2347509f9ff90c34e48673a25624d6e5/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=8b6f3ddf2347509f9ff90c34e48673a25624d6e5", "patch": "@@ -125,6 +125,12 @@ declare_lint! {\n     \"detect private items in public interfaces not caught by the old implementation\"\n }\n \n+declare_lint! {\n+    pub LEAKED_PRIVATE_DEPENDENCY,\n+    Warn,\n+    \"public interface leaks type from a private dependency\"\n+}\n+\n declare_lint! {\n     pub PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n     Deny,"}, {"sha": "5c2aa882a06c6defce6366fef810f1a3859bc176", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8b6f3ddf2347509f9ff90c34e48673a25624d6e5/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6f3ddf2347509f9ff90c34e48673a25624d6e5/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=8b6f3ddf2347509f9ff90c34e48673a25624d6e5", "patch": "@@ -411,6 +411,10 @@ top_level_options!(\n         remap_path_prefix: Vec<(PathBuf, PathBuf)> [UNTRACKED],\n \n         edition: Edition [TRACKED],\n+\n+        // The list of crates to consider public for\n+        // checking leaked private dependency types in public interfaces\n+        extern_public: FxHashSet<String> [UNTRACKED],\n     }\n );\n \n@@ -606,6 +610,7 @@ impl Default for Options {\n             cli_forced_thinlto_off: false,\n             remap_path_prefix: Vec::new(),\n             edition: DEFAULT_EDITION,\n+            extern_public: FxHashSet::default()\n         }\n     }\n }\n@@ -1648,6 +1653,13 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n                                     for the compiler to emit\",\n             \"[bin|lib|rlib|dylib|cdylib|staticlib|proc-macro]\",\n         ),\n+        opt::multi_s(\n+            \"\",\n+            \"extern-public\",\n+            \"Comma separated list of crates to consider 'public'\n+                                     for linting purposes\",\n+            \"CRATES\",\n+        ),\n         opt::opt_s(\n             \"\",\n             \"crate-name\",\n@@ -1905,6 +1917,17 @@ pub fn build_session_options_and_crate_config(\n     let crate_types = parse_crate_types_from_list(unparsed_crate_types)\n         .unwrap_or_else(|e| early_error(error_format, &e[..]));\n \n+    if matches.opt_present(\"extern-public\") && !nightly_options::is_nightly_build() {\n+        early_error(\n+            ErrorOutputType::default(),\n+            \"'--extern-public' is unstable and only \\\n+            available for nightly builds of rustc.\"\n+        )\n+    }\n+\n+    let extern_public: FxHashSet<String> = matches.opt_strs(\"extern-public\").\n+        iter().cloned().collect();\n+\n     let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n     let mut debugging_opts = build_debugging_options(matches, error_format);\n@@ -2287,6 +2310,7 @@ pub fn build_session_options_and_crate_config(\n             cli_forced_thinlto_off: disable_thinlto,\n             remap_path_prefix,\n             edition,\n+            extern_public\n         },\n         cfg,\n     )"}, {"sha": "b0846822b24e16953bcdc5d18d8b16e2c4c319e0", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b6f3ddf2347509f9ff90c34e48673a25624d6e5/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6f3ddf2347509f9ff90c34e48673a25624d6e5/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8b6f3ddf2347509f9ff90c34e48673a25624d6e5", "patch": "@@ -1883,3 +1883,5 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExplicitOutlivesRequirements {\n     }\n \n }\n+\n+"}, {"sha": "e2e63b418c72cbd6ff420dc23346f8fb2629e519", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b6f3ddf2347509f9ff90c34e48673a25624d6e5/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6f3ddf2347509f9ff90c34e48673a25624d6e5/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=8b6f3ddf2347509f9ff90c34e48673a25624d6e5", "patch": "@@ -229,6 +229,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n             edition: None,\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(LEAKED_PRIVATE_DEPENDENCY),\n+            reference: \"issue #44663 <https://github.com/rust-lang/rust/issues/44663>\",\n+            edition: None,\n+        },\n         FutureIncompatibleInfo {\n             id: LintId::of(PUB_USE_OF_PRIVATE_EXTERN_CRATE),\n             reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\","}, {"sha": "c7cdb30521bf0f48aa6b3d0153ce72925338986c", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 124, "deletions": 5, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/8b6f3ddf2347509f9ff90c34e48673a25624d6e5/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6f3ddf2347509f9ff90c34e48673a25624d6e5/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=8b6f3ddf2347509f9ff90c34e48673a25624d6e5", "patch": "@@ -1458,6 +1458,7 @@ struct SearchInterfaceForPrivateItemsVisitor<'a, 'tcx: 'a> {\n     has_pub_restricted: bool,\n     has_old_errors: bool,\n     in_assoc_ty: bool,\n+    public_crates: FxHashSet<CrateNum>\n }\n \n impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n@@ -1514,22 +1515,134 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n                 self.tcx.lint_node(lint::builtin::PRIVATE_IN_PUBLIC, node_id, self.span,\n                                    &format!(\"{} (error {})\", msg, err_code));\n             }\n+\n+            if self.leaks_private_dep(trait_ref.def_id) {\n+                self.tcx.lint_node(lint::builtin::LEAKED_PRIVATE_DEPENDENCY,\n+                                   node_id,\n+                                   self.span,\n+                                   &format!(\"trait `{}` from private dependency '{}' in public \\\n+                                             interface\", trait_ref,\n+                                             trait_ref.def_id.krate));\n+\n+            }\n         }\n-        false\n+    }\n+\n+    /// An item is 'leaked' from a private dependency if all\n+    /// of the following are true:\n+    /// 1. It's contained within a public type\n+    /// 2. It does not come from a crate marked as public\n+    fn leaks_private_dep(&self, item_id: DefId) -> bool {\n+        // Never do any leak checking if the feature is not enabled\n+        if !self.tcx.features().public_private_dependencies {\n+            return false\n+        }\n+        self.required_visibility == ty::Visibility::Public &&\n+            !item_id.is_local() &&\n+            !self.public_crates.contains(&item_id.krate)\n     }\n }\n \n-impl<'a, 'tcx> DefIdVisitor<'a, 'tcx> for SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx> { self.tcx }\n-    fn visit_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {\n-        self.check_def_id(def_id, kind, descr)\n+impl<'a, 'tcx: 'a> TypeVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n+        let ty_def_id = match ty.sty {\n+            ty::Adt(adt, _) => Some(adt.did),\n+            ty::Foreign(did) => Some(did),\n+            ty::Dynamic(ref obj, ..) => Some(obj.principal().def_id()),\n+            ty::Projection(ref proj) => {\n+                if self.required_visibility == ty::Visibility::Invisible {\n+                    // Conservatively approximate the whole type alias as public without\n+                    // recursing into its components when determining impl publicity.\n+                    // For example, `impl <Type as Trait>::Alias {...}` may be a public impl\n+                    // even if both `Type` and `Trait` are private.\n+                    // Ideally, associated types should be substituted in the same way as\n+                    // free type aliases, but this isn't done yet.\n+                    return false;\n+                }\n+                let trait_ref = proj.trait_ref(self.tcx);\n+                Some(trait_ref.def_id)\n+            }\n+            _ => None\n+        };\n+\n+        if let Some(def_id) = ty_def_id {\n+            // Non-local means public (private items can't leave their crate, modulo bugs).\n+            if let Some(node_id) = self.tcx.hir().as_local_node_id(def_id) {\n+                let hir_vis = match self.tcx.hir().find(node_id) {\n+                    Some(Node::Item(item)) => &item.vis,\n+                    Some(Node::ForeignItem(item)) => &item.vis,\n+                    _ => bug!(\"expected item of foreign item\"),\n+                };\n+\n+                let vis = ty::Visibility::from_hir(hir_vis, node_id, self.tcx);\n+\n+                if !vis.is_at_least(self.min_visibility, self.tcx) {\n+                    self.min_visibility = vis;\n+                }\n+                if !vis.is_at_least(self.required_visibility, self.tcx) {\n+                    let vis_adj = match hir_vis.node {\n+                        hir::VisibilityKind::Crate(_) => \"crate-visible\",\n+                        hir::VisibilityKind::Restricted { .. } => \"restricted\",\n+                        _ => \"private\"\n+                    };\n+\n+                    if self.has_pub_restricted || self.has_old_errors || self.in_assoc_ty {\n+                        let mut err = struct_span_err!(self.tcx.sess, self.span, E0446,\n+                            \"{} type `{}` in public interface\", vis_adj, ty);\n+                        err.span_label(self.span, format!(\"can't leak {} type\", vis_adj));\n+                        err.span_label(hir_vis.span, format!(\"`{}` declared as {}\", ty, vis_adj));\n+                        err.emit();\n+                    } else {\n+                        self.tcx.lint_node(lint::builtin::PRIVATE_IN_PUBLIC,\n+                                           node_id,\n+                                           self.span,\n+                                           &format!(\"{} type `{}` in public \\\n+                                                     interface (error E0446)\", vis_adj, ty));\n+                    }\n+                }\n+\n+                if self.leaks_private_dep(def_id) {\n+                    self.tcx.lint_node(lint::builtin::LEAKED_PRIVATE_DEPENDENCY,\n+                                       node_id,\n+                                       self.span,\n+                                       &format!(\"type '{}' from private dependency '{}' in \\\n+                                                public interface\", ty, def_id.krate));\n+                }\n+            }\n+        }\n+\n+        ty.super_visit_with(self)\n+    }\n+}\n+\n+/*struct LeakedPrivateDependenciesVisitor<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    public_crates: FxHashSet<CrateNum>\n+}\n+\n+impl<'a, 'tcx> LeakedPrivateDependenciesVisitor<'a, 'tcx> {\n+    fn is_private_dep(&self, item_id: DefId) {\n+        !item_id.is_local() && !self.public_crates.contains(item_id.krate)\n     }\n+\n }\n \n+impl<'a, 'tcx> Visitor<'tcx> for LeakedPrivateDependenciesVisitor<'a, 'tcx> {\n+    fn nested_visit_map<'this>(&'this mut self) -> nestedvisitormap<'this, 'tcx> {\n+        nestedvisitormap::onlybodies(&self.tcx.hir())\n+    }\n+\n+    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+\n+    }\n+\n+}*/\n+\n struct PrivateItemsInPublicInterfacesVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     has_pub_restricted: bool,\n     old_error_set: &'a NodeSet,\n+    public_crates: FxHashSet<CrateNum>\n }\n \n impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n@@ -1566,6 +1679,7 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n             has_pub_restricted: self.has_pub_restricted,\n             has_old_errors,\n             in_assoc_ty: false,\n+            public_crates: self.public_crates.clone()\n         }\n     }\n \n@@ -1690,6 +1804,10 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Lrc<AccessLevels> {\n fn check_mod_privacy<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n     let empty_tables = ty::TypeckTables::empty(None);\n \n+    let public_crates: FxHashSet<CrateNum> = tcx.sess.opts.extern_public.iter().flat_map(|c| {\n+        tcx.crates().iter().find(|&&krate| &tcx.crate_name(krate) == c).cloned()\n+    }).collect();\n+\n     // Check privacy of names not checked in previous compilation stages.\n     let mut visitor = NamePrivacyVisitor {\n         tcx,\n@@ -1767,6 +1885,7 @@ fn privacy_access_levels<'tcx>(\n             tcx,\n             has_pub_restricted,\n             old_error_set: &visitor.old_error_set,\n+            public_crates\n         };\n         krate.visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));\n     }"}, {"sha": "55eb6723188b934b9ce42bdf13226aad0537801a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b6f3ddf2347509f9ff90c34e48673a25624d6e5/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6f3ddf2347509f9ff90c34e48673a25624d6e5/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8b6f3ddf2347509f9ff90c34e48673a25624d6e5", "patch": "@@ -462,6 +462,9 @@ declare_features! (\n \n     // #[optimize(X)]\n     (active, optimize_attribute, \"1.34.0\", Some(54882), None),\n+\n+    // Allows using the 'leaked private dependencies' lint\n+    (active, public_private_dependencies, \"1.32.0\", Some(44663), None),\n );\n \n declare_features! ("}]}