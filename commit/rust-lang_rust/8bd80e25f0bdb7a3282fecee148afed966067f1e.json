{"sha": "8bd80e25f0bdb7a3282fecee148afed966067f1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZDgwZTI1ZjBiZGI3YTMyODJmZWNlZTE0OGFmZWQ5NjYwNjdmMWU=", "commit": {"author": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2020-12-02T01:32:10Z"}, "committer": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2020-12-02T02:22:47Z"}, "message": "Make some of MaybeUninit's methods const", "tree": {"sha": "eeb5faff5e53330cd056308ac94f1fbb588c0fb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eeb5faff5e53330cd056308ac94f1fbb588c0fb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bd80e25f0bdb7a3282fecee148afed966067f1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bd80e25f0bdb7a3282fecee148afed966067f1e", "html_url": "https://github.com/rust-lang/rust/commit/8bd80e25f0bdb7a3282fecee148afed966067f1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bd80e25f0bdb7a3282fecee148afed966067f1e/comments", "author": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18aa5ee209df502e48180b1b607520cfd370990f", "url": "https://api.github.com/repos/rust-lang/rust/commits/18aa5ee209df502e48180b1b607520cfd370990f", "html_url": "https://github.com/rust-lang/rust/commit/18aa5ee209df502e48180b1b607520cfd370990f"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "c751f4f7eb6c6d2c3aa692ca2f42f633a67edffd", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8bd80e25f0bdb7a3282fecee148afed966067f1e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd80e25f0bdb7a3282fecee148afed966067f1e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=8bd80e25f0bdb7a3282fecee148afed966067f1e", "patch": "@@ -407,6 +407,30 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             sym::transmute => {\n                 self.copy_op_transmute(args[0], dest)?;\n             }\n+            sym::assert_inhabited | sym::assert_zero_valid | sym::assert_uninit_valid => {\n+                let ty = instance.substs.type_at(0);\n+                let layout = self.layout_of(ty)?;\n+\n+                if layout.abi.is_uninhabited() {\n+                    throw_ub_format!(\"attempted to instantiate uninhabited type `{}`\", ty);\n+                }\n+                if intrinsic_name == sym::assert_zero_valid\n+                    && !layout.might_permit_raw_init(self, /*zero:*/ true).unwrap()\n+                {\n+                    throw_ub_format!(\n+                        \"attempted to zero-initialize type `{}`, which is invalid\",\n+                        ty\n+                    );\n+                }\n+                if intrinsic_name == sym::assert_uninit_valid\n+                    && !layout.might_permit_raw_init(self, /*zero:*/ false).unwrap()\n+                {\n+                    throw_ub_format!(\n+                        \"attempted to leave type `{}` uninitialized, which is invalid\",\n+                        ty\n+                    );\n+                }\n+            }\n             sym::simd_insert => {\n                 let index = u64::from(self.read_scalar(args[1])?.to_u32()?);\n                 let elem = args[2];"}, {"sha": "c0fcfb3a13952a4e08446e240b1ef7b4bda94bf4", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bd80e25f0bdb7a3282fecee148afed966067f1e/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd80e25f0bdb7a3282fecee148afed966067f1e/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=8bd80e25f0bdb7a3282fecee148afed966067f1e", "patch": "@@ -815,6 +815,7 @@ extern \"rust-intrinsic\" {\n     /// This will statically either panic, or do nothing.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n+    #[rustc_const_unstable(feature = \"const_maybe_assume_init\", issue = \"none\")]\n     pub fn assert_inhabited<T>();\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` does not permit"}, {"sha": "5d56a22bfa53abc7fbe2605a51a2aceaa38560e8", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bd80e25f0bdb7a3282fecee148afed966067f1e/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd80e25f0bdb7a3282fecee148afed966067f1e/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=8bd80e25f0bdb7a3282fecee148afed966067f1e", "patch": "@@ -100,6 +100,7 @@\n #![feature(const_type_name)]\n #![feature(const_likely)]\n #![feature(const_unreachable_unchecked)]\n+#![feature(const_maybe_assume_init)]\n #![feature(custom_inner_attributes)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]"}, {"sha": "cb32c909717a48ed14ab31935c761703204087d8", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8bd80e25f0bdb7a3282fecee148afed966067f1e/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd80e25f0bdb7a3282fecee148afed966067f1e/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=8bd80e25f0bdb7a3282fecee148afed966067f1e", "patch": "@@ -314,8 +314,10 @@ impl<T> MaybeUninit<T> {\n     /// let data = read(&mut buf);\n     /// ```\n     #[unstable(feature = \"maybe_uninit_uninit_array\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_assume_init\", issue = \"none\")]\n+    #[rustc_allow_const_fn_unstable(const_maybe_assume_init)]\n     #[inline(always)]\n-    pub fn uninit_array<const LEN: usize>() -> [Self; LEN] {\n+    pub const fn uninit_array<const LEN: usize>() -> [Self; LEN] {\n         // SAFETY: An uninitialized `[MaybeUninit<_>; LEN]` is valid.\n         unsafe { MaybeUninit::<[MaybeUninit<T>; LEN]>::uninit().assume_init() }\n     }\n@@ -503,9 +505,10 @@ impl<T> MaybeUninit<T> {\n     /// // `x` had not been initialized yet, so this last line caused undefined behavior. \u26a0\ufe0f\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_assume_init\", issue = \"none\")]\n     #[inline(always)]\n     #[rustc_diagnostic_item = \"assume_init\"]\n-    pub unsafe fn assume_init(self) -> T {\n+    pub const unsafe fn assume_init(self) -> T {\n         // SAFETY: the caller must guarantee that `self` is initialized.\n         // This also means that `self` must be a `value` variant.\n         unsafe {"}]}