{"sha": "e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a", "node_id": "C_kwDOAAsO6NoAKGU2YTI3YTY4ZmE4YTkxOWZmN2U0ZDE4ZjJjZDBlMjU2YTc0OWI4NWE", "commit": {"author": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2021-09-03T03:43:56Z"}, "committer": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2021-09-29T03:32:53Z"}, "message": "implement `#[global_allocator]`", "tree": {"sha": "692627e1a9df28fe67e02bce8ca5d37963557a43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/692627e1a9df28fe67e02bce8ca5d37963557a43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a", "html_url": "https://github.com/rust-lang/rust/commit/e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a/comments", "author": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cf851f6d43bff1e8ac1421cbf3c6a8d20f89560", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf851f6d43bff1e8ac1421cbf3c6a8d20f89560", "html_url": "https://github.com/rust-lang/rust/commit/6cf851f6d43bff1e8ac1421cbf3c6a8d20f89560"}], "stats": {"total": 197, "additions": 157, "deletions": 40}, "files": [{"sha": "1b577688c33b2aa33e27b9140e5c28bab8ac308c", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 85, "deletions": 36, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a", "patch": "@@ -6,6 +6,7 @@ use std::{\n use log::trace;\n \n use rustc_apfloat::Float;\n+use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_hir::{\n     def::DefKind,\n     def_id::{CrateNum, DefId, LOCAL_CRATE},\n@@ -27,11 +28,13 @@ use super::backtrace::EvalContextExt as _;\n use crate::*;\n \n /// Returned by `emulate_foreign_item_by_name`.\n-pub enum EmulateByNameResult {\n+pub enum EmulateByNameResult<'mir, 'tcx> {\n     /// The caller is expected to jump to the return block.\n     NeedsJumping,\n     /// Jumping has already been taken care of.\n     AlreadyJumped,\n+    /// A MIR body has been found for the function\n+    MirBody(&'mir mir::Body<'tcx>),\n     /// The item is not supported.\n     NotSupported,\n }\n@@ -281,6 +284,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.go_to_block(ret);\n             }\n             EmulateByNameResult::AlreadyJumped => (),\n+            EmulateByNameResult::MirBody(mir) => return Ok(Some(mir)),\n             EmulateByNameResult::NotSupported => {\n                 if let Some(body) = this.lookup_exported_symbol(link_name)? {\n                     return Ok(Some(body));\n@@ -294,6 +298,36 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(None)\n     }\n \n+    /// Emulates calling the internal __rust_* allocator functions\n+    fn emulate_allocator(\n+        &mut self,\n+        symbol: Symbol,\n+        default: impl FnOnce(&mut MiriEvalContext<'mir, 'tcx>) -> InterpResult<'tcx>,\n+    ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n+        let this = self.eval_context_mut();\n+\n+        let allocator_kind = if let Some(allocator_kind) = this.tcx.allocator_kind(()) {\n+            allocator_kind\n+        } else {\n+            // in real code, this symbol does not exist without an allocator\n+            return Ok(EmulateByNameResult::NotSupported);\n+        };\n+\n+        match allocator_kind {\n+            AllocatorKind::Global => {\n+                let body = this\n+                    .lookup_exported_symbol(symbol)?\n+                    .expect(\"symbol should be present if there is a global allocator\");\n+\n+                Ok(EmulateByNameResult::MirBody(body))\n+            }\n+            AllocatorKind::Default => {\n+                default(this)?;\n+                Ok(EmulateByNameResult::NeedsJumping)\n+            }\n+        }\n+    }\n+\n     /// Emulates calling a foreign item using its name.\n     fn emulate_foreign_item_by_name(\n         &mut self,\n@@ -302,7 +336,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n         ret: mir::BasicBlock,\n-    ) -> InterpResult<'tcx, EmulateByNameResult> {\n+    ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n \n         // Here we dispatch all the shims for foreign functions. If you have a platform specific\n@@ -362,63 +396,78 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // Rust allocation\n-            // (Usually these would be forwarded to to `#[global_allocator]`; we instead implement a generic\n-            // allocation that also checks that all conditions are met, such as not permitting zero-sized allocations.)\n             \"__rust_alloc\" => {\n                 let &[ref size, ref align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let size = this.read_scalar(size)?.to_machine_usize(this)?;\n                 let align = this.read_scalar(align)?.to_machine_usize(this)?;\n-                Self::check_alloc_request(size, align)?;\n-                let ptr = this.memory.allocate(\n-                    Size::from_bytes(size),\n-                    Align::from_bytes(align).unwrap(),\n-                    MiriMemoryKind::Rust.into(),\n-                )?;\n-                this.write_pointer(ptr, dest)?;\n+\n+                return this.emulate_allocator(Symbol::intern(\"__rg_alloc\"), |this| {\n+                    Self::check_alloc_request(size, align)?;\n+\n+                    let ptr = this.memory.allocate(\n+                        Size::from_bytes(size),\n+                        Align::from_bytes(align).unwrap(),\n+                        MiriMemoryKind::Rust.into(),\n+                    )?;\n+\n+                    this.write_pointer(ptr, dest)\n+                });\n             }\n             \"__rust_alloc_zeroed\" => {\n                 let &[ref size, ref align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let size = this.read_scalar(size)?.to_machine_usize(this)?;\n                 let align = this.read_scalar(align)?.to_machine_usize(this)?;\n-                Self::check_alloc_request(size, align)?;\n-                let ptr = this.memory.allocate(\n-                    Size::from_bytes(size),\n-                    Align::from_bytes(align).unwrap(),\n-                    MiriMemoryKind::Rust.into(),\n-                )?;\n-                // We just allocated this, the access is definitely in-bounds.\n-                this.memory.write_bytes(ptr.into(), iter::repeat(0u8).take(usize::try_from(size).unwrap())).unwrap();\n-                this.write_pointer(ptr, dest)?;\n+\n+                return this.emulate_allocator(Symbol::intern(\"__rg_alloc_zeroed\"), |this| {\n+                    Self::check_alloc_request(size, align)?;\n+\n+                    let ptr = this.memory.allocate(\n+                        Size::from_bytes(size),\n+                        Align::from_bytes(align).unwrap(),\n+                        MiriMemoryKind::Rust.into(),\n+                    )?;\n+\n+                    // We just allocated this, the access is definitely in-bounds.\n+                    this.memory.write_bytes(ptr.into(), iter::repeat(0u8).take(usize::try_from(size).unwrap())).unwrap();\n+                    this.write_pointer(ptr, dest)\n+                });\n             }\n             \"__rust_dealloc\" => {\n                 let &[ref ptr, ref old_size, ref align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n                 let old_size = this.read_scalar(old_size)?.to_machine_usize(this)?;\n                 let align = this.read_scalar(align)?.to_machine_usize(this)?;\n-                // No need to check old_size/align; we anyway check that they match the allocation.\n-                this.memory.deallocate(\n-                    ptr,\n-                    Some((Size::from_bytes(old_size), Align::from_bytes(align).unwrap())),\n-                    MiriMemoryKind::Rust.into(),\n-                )?;\n+\n+                return this.emulate_allocator(Symbol::intern(\"__rg_dealloc\"), |this| {\n+                    // No need to check old_size/align; we anyway check that they match the allocation.\n+                    this.memory.deallocate(\n+                        ptr,\n+                        Some((Size::from_bytes(old_size), Align::from_bytes(align).unwrap())),\n+                        MiriMemoryKind::Rust.into(),\n+                    )\n+                });\n             }\n             \"__rust_realloc\" => {\n                 let &[ref ptr, ref old_size, ref align, ref new_size] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n                 let old_size = this.read_scalar(old_size)?.to_machine_usize(this)?;\n                 let align = this.read_scalar(align)?.to_machine_usize(this)?;\n                 let new_size = this.read_scalar(new_size)?.to_machine_usize(this)?;\n-                Self::check_alloc_request(new_size, align)?;\n                 // No need to check old_size; we anyway check that they match the allocation.\n-                let align = Align::from_bytes(align).unwrap();\n-                let new_ptr = this.memory.reallocate(\n-                    ptr,\n-                    Some((Size::from_bytes(old_size), align)),\n-                    Size::from_bytes(new_size),\n-                    align,\n-                    MiriMemoryKind::Rust.into(),\n-                )?;\n-                this.write_pointer(new_ptr, dest)?;\n+\n+                return this.emulate_allocator(Symbol::intern(\"__rg_realloc\"), |this| {\n+                    Self::check_alloc_request(new_size, align)?;\n+\n+                    let align = Align::from_bytes(align).unwrap();\n+                    let new_ptr = this.memory.reallocate(\n+                        ptr,\n+                        Some((Size::from_bytes(old_size), align)),\n+                        Size::from_bytes(new_size),\n+                        align,\n+                        MiriMemoryKind::Rust.into(),\n+                    )?;\n+                    this.write_pointer(new_ptr, dest)\n+                });\n             }\n \n             // C memory handling functions"}, {"sha": "83b4032cd98a5e0d6f1ec3d3f2324cdcda4e01e6", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a", "patch": "@@ -21,7 +21,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n         ret: mir::BasicBlock,\n-    ) -> InterpResult<'tcx, EmulateByNameResult> {\n+    ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n \n         match &*link_name.as_str() {"}, {"sha": "8d0f8487f5e134316eeb4c884255d8b7844d9940", "filename": "src/shims/posix/linux/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs?ref=e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a", "patch": "@@ -18,7 +18,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n         _ret: mir::BasicBlock,\n-    ) -> InterpResult<'tcx, EmulateByNameResult> {\n+    ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n \n         match &*link_name.as_str() {"}, {"sha": "8147b1442907dba7da922407e4be1282260ec4ae", "filename": "src/shims/posix/macos/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs?ref=e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a", "patch": "@@ -16,7 +16,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n         _ret: mir::BasicBlock,\n-    ) -> InterpResult<'tcx, EmulateByNameResult> {\n+    ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n \n         match &*link_name.as_str() {"}, {"sha": "61a1759ffee5528280de6a17a5b6095b112caa4f", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a", "patch": "@@ -18,7 +18,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n         _ret: mir::BasicBlock,\n-    ) -> InterpResult<'tcx, EmulateByNameResult> {\n+    ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n \n         // Windows API stubs."}, {"sha": "fb0e7986bb5e6042caebb2a7508e4f0a0e348cf3", "filename": "tests/compile-fail/alloc/no_global_allocator.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a/tests%2Fcompile-fail%2Falloc%2Fno_global_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a/tests%2Fcompile-fail%2Falloc%2Fno_global_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falloc%2Fno_global_allocator.rs?ref=e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a", "patch": "@@ -0,0 +1,25 @@\n+// Make sure we pretend the allocation symbols don't exist when there is no allocator\n+\n+#![feature(lang_items, start)]\n+#![no_std]\n+\n+extern \"Rust\" {\n+    fn __rust_alloc(size: usize, align: usize) -> *mut u8;\n+}\n+\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n+    unsafe {\n+        __rust_alloc(1, 1); //~ERROR: unsupported operation: can't call foreign function: __rust_alloc\n+    }\n+\n+    0\n+}\n+\n+#[panic_handler]\n+fn panic_handler(_: &core::panic::PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+fn eh_personality() {}"}, {"sha": "24a56c663f06079bb220cc328bb1cb141aa7bf58", "filename": "tests/run-pass/global_allocator.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a/tests%2Frun-pass%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a/tests%2Frun-pass%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fglobal_allocator.rs?ref=e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a", "patch": "@@ -0,0 +1,41 @@\n+#![feature(allocator_api, slice_ptr_get)]\n+\n+use std::alloc::{Allocator as _, Global, GlobalAlloc, Layout, System};\n+\n+#[global_allocator]\n+static ALLOCATOR: Allocator = Allocator;\n+\n+struct Allocator;\n+\n+unsafe impl GlobalAlloc for Allocator {\n+    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n+        // use specific size to avoid getting triggered by rt\n+        if layout.size() == 123 {\n+            println!(\"Allocated!\")\n+        }\n+\n+        System.alloc(layout)\n+    }\n+\n+    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {\n+        if layout.size() == 123 {\n+            println!(\"Dellocated!\")\n+        }\n+\n+        System.dealloc(ptr, layout)\n+    }\n+}\n+\n+fn main() {\n+    // Only okay because we explicitly set a global allocator that uses the system allocator!\n+    let l = Layout::from_size_align(123, 1).unwrap();\n+    let ptr = Global.allocate(l).unwrap().as_non_null_ptr(); // allocating with Global...\n+    unsafe {\n+        System.deallocate(ptr, l);\n+    } // ... and deallocating with System.\n+\n+    let ptr = System.allocate(l).unwrap().as_non_null_ptr(); // allocating with System...\n+    unsafe {\n+        Global.deallocate(ptr, l);\n+    } // ... and deallocating with Global.\n+}"}, {"sha": "411a4cdd1467e7adc5b58b8c5791a6e05f48f0d5", "filename": "tests/run-pass/global_allocator.stdout", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a/tests%2Frun-pass%2Fglobal_allocator.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a/tests%2Frun-pass%2Fglobal_allocator.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fglobal_allocator.stdout?ref=e6a27a68fa8a919ff7e4d18f2cd0e256a749b85a", "patch": "@@ -0,0 +1,2 @@\n+Allocated!\n+Dellocated!"}]}