{"sha": "11e265c2e0af99a81caf888fc39cc903dc74f1cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZTI2NWMyZTBhZjk5YTgxY2FmODg4ZmMzOWNjOTAzZGM3NGYxY2Q=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:44:24Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:44:24Z"}, "message": "rollup merge of #20707: nikomatsakis/issue-20582", "tree": {"sha": "bcf9fa17c8868692f0bf73c30866419472c2b841", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcf9fa17c8868692f0bf73c30866419472c2b841"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11e265c2e0af99a81caf888fc39cc903dc74f1cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11e265c2e0af99a81caf888fc39cc903dc74f1cd", "html_url": "https://github.com/rust-lang/rust/commit/11e265c2e0af99a81caf888fc39cc903dc74f1cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11e265c2e0af99a81caf888fc39cc903dc74f1cd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "373cbab5b08d6630da58f28d2166c19afc327fa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/373cbab5b08d6630da58f28d2166c19afc327fa6", "html_url": "https://github.com/rust-lang/rust/commit/373cbab5b08d6630da58f28d2166c19afc327fa6"}, {"sha": "a70428aa09d0ffc2e9ecd35c22077cc07da6719c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a70428aa09d0ffc2e9ecd35c22077cc07da6719c", "html_url": "https://github.com/rust-lang/rust/commit/a70428aa09d0ffc2e9ecd35c22077cc07da6719c"}], "stats": {"total": 116, "additions": 86, "deletions": 30}, "files": [{"sha": "0df84323ae53f4d64aa07df1acce62989a1aa1df", "filename": "src/librustc/middle/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=11e265c2e0af99a81caf888fc39cc903dc74f1cd", "patch": "@@ -468,7 +468,7 @@ pub fn skolemize_late_bound_regions<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n      * when higher-ranked things are involved. See `doc.rs` for more details.\n      */\n \n-    let (result, map) = ty::replace_late_bound_regions(infcx.tcx, binder, |br, _| {\n+    let (result, map) = ty::replace_late_bound_regions(infcx.tcx, binder, |br| {\n         infcx.region_vars.new_skolemized(br, &snapshot.region_vars_snapshot)\n     });\n "}, {"sha": "ab1c41f69683eb074ecb8dd5a9eaa857bdebd84a", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=11e265c2e0af99a81caf888fc39cc903dc74f1cd", "patch": "@@ -1048,7 +1048,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         ty::replace_late_bound_regions(\n             self.tcx,\n             value,\n-            |br, _| self.next_region_var(LateBoundRegion(span, br, lbrct)))\n+            |br| self.next_region_var(LateBoundRegion(span, br, lbrct)))\n     }\n \n     /// See `verify_generic_bound` method in `region_inference`"}, {"sha": "64f0bcb1c88db280d4bc73b44f0fcc260bba4fa2", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=11e265c2e0af99a81caf888fc39cc903dc74f1cd", "patch": "@@ -6686,7 +6686,7 @@ pub fn liberate_late_bound_regions<'tcx, T>(\n {\n     replace_late_bound_regions(\n         tcx, value,\n-        |br, _| ty::ReFree(ty::FreeRegion{scope: scope, bound_region: br})).0\n+        |br| ty::ReFree(ty::FreeRegion{scope: scope, bound_region: br})).0\n }\n \n pub fn count_late_bound_regions<'tcx, T>(\n@@ -6695,7 +6695,7 @@ pub fn count_late_bound_regions<'tcx, T>(\n     -> uint\n     where T : TypeFoldable<'tcx> + Repr<'tcx>\n {\n-    let (_, skol_map) = replace_late_bound_regions(tcx, value, |_, _| ty::ReStatic);\n+    let (_, skol_map) = replace_late_bound_regions(tcx, value, |_| ty::ReStatic);\n     skol_map.len()\n }\n \n@@ -6726,7 +6726,7 @@ pub fn erase_late_bound_regions<'tcx, T>(\n     -> T\n     where T : TypeFoldable<'tcx> + Repr<'tcx>\n {\n-    replace_late_bound_regions(tcx, value, |_, _| ty::ReStatic).0\n+    replace_late_bound_regions(tcx, value, |_| ty::ReStatic).0\n }\n \n /// Rewrite any late-bound regions so that they are anonymous.  Region numbers are\n@@ -6744,9 +6744,9 @@ pub fn anonymize_late_bound_regions<'tcx, T>(\n     where T : TypeFoldable<'tcx> + Repr<'tcx>,\n {\n     let mut counter = 0;\n-    ty::Binder(replace_late_bound_regions(tcx, sig, |_, db| {\n+    ty::Binder(replace_late_bound_regions(tcx, sig, |_| {\n         counter += 1;\n-        ReLateBound(db, BrAnon(counter))\n+        ReLateBound(ty::DebruijnIndex::new(1), BrAnon(counter))\n     }).0)\n }\n \n@@ -6757,7 +6757,7 @@ pub fn replace_late_bound_regions<'tcx, T, F>(\n     mut mapf: F)\n     -> (T, FnvHashMap<ty::BoundRegion,ty::Region>)\n     where T : TypeFoldable<'tcx> + Repr<'tcx>,\n-          F : FnMut(BoundRegion, DebruijnIndex) -> ty::Region,\n+          F : FnMut(BoundRegion) -> ty::Region,\n {\n     debug!(\"replace_late_bound_regions({})\", binder.repr(tcx));\n \n@@ -6769,8 +6769,19 @@ pub fn replace_late_bound_regions<'tcx, T, F>(\n         debug!(\"region={}\", region.repr(tcx));\n         match region {\n             ty::ReLateBound(debruijn, br) if debruijn.depth == current_depth => {\n-                * map.entry(br).get().unwrap_or_else(\n-                      |vacant_entry| vacant_entry.insert(mapf(br, debruijn)))\n+                let region =\n+                    * map.entry(br).get().unwrap_or_else(\n+                        |vacant_entry| vacant_entry.insert(mapf(br)));\n+\n+                if let ty::ReLateBound(debruijn1, br) = region {\n+                    // If the callback returns a late-bound region,\n+                    // that region should always use depth 1. Then we\n+                    // adjust it to the correct depth.\n+                    assert_eq!(debruijn1.depth, 1);\n+                    ty::ReLateBound(debruijn, br)\n+                } else {\n+                    region\n+                }\n             }\n             _ => {\n                 region"}, {"sha": "b81a4ed2f58ff79f76a0f197111056e75346a64d", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=11e265c2e0af99a81caf888fc39cc903dc74f1cd", "patch": "@@ -862,7 +862,10 @@ impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx>\n ///////////////////////////////////////////////////////////////////////////\n // Region eraser\n //\n-// Replaces all free regions with 'static. Useful in trans.\n+// Replaces all free regions with 'static. Useful in contexts, such as\n+// method probing, where precise region relationships are not\n+// important. Note that in trans you should use\n+// `common::erase_regions` instead.\n \n pub struct RegionEraser<'a, 'tcx: 'a> {\n     tcx: &'a ty::ctxt<'tcx>,"}, {"sha": "559ec533baa9eca1ed0a67d7bbca462541c5ad9f", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=11e265c2e0af99a81caf888fc39cc903dc74f1cd", "patch": "@@ -1183,8 +1183,8 @@ impl<'tcx, T> UserString<'tcx> for ty::Binder<T>\n         // the output. We'll probably want to tweak this over time to\n         // decide just how much information to give.\n         let mut names = Vec::new();\n-        let (unbound_value, _) = ty::replace_late_bound_regions(tcx, self, |br, debruijn| {\n-            ty::ReLateBound(debruijn, match br {\n+        let (unbound_value, _) = ty::replace_late_bound_regions(tcx, self, |br| {\n+            ty::ReLateBound(ty::DebruijnIndex::new(1), match br {\n                 ty::BrNamed(_, name) => {\n                     names.push(token::get_name(name));\n                     br"}, {"sha": "74071a1de4c3d080c797133c0db7a5d1577a1342", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=11e265c2e0af99a81caf888fc39cc903dc74f1cd", "patch": "@@ -281,8 +281,15 @@ pub fn kind_for_unboxed_closure(ccx: &CrateContext, closure_id: ast::DefId)\n \n pub fn decl_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                               fn_ty: Ty<'tcx>, name: &str) -> ValueRef {\n+    debug!(\"decl_rust_fn(fn_ty={}, name={:?})\",\n+           fn_ty.repr(ccx.tcx()),\n+           name);\n+\n     let fn_ty = monomorphize::normalize_associated_type(ccx.tcx(), &fn_ty);\n \n+    debug!(\"decl_rust_fn: fn_ty={} (after normalized associated types)\",\n+           fn_ty.repr(ccx.tcx()));\n+\n     let function_type; // placeholder so that the memory ownership works out ok\n \n     let (sig, abi, env) = match fn_ty.sty {\n@@ -305,10 +312,12 @@ pub fn decl_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let sig = ty::erase_late_bound_regions(ccx.tcx(), sig);\n     let sig = ty::Binder(sig);\n \n+    debug!(\"decl_rust_fn: sig={} (after erasing regions)\",\n+           sig.repr(ccx.tcx()));\n+\n     let llfty = type_of_rust_fn(ccx, env, &sig, abi);\n \n-    debug!(\"decl_rust_fn(sig={}, type={})\",\n-           sig.repr(ccx.tcx()),\n+    debug!(\"decl_rust_fn: llfty={}\",\n            ccx.tn().type_to_string(llfty));\n \n     let llfn = decl_fn(ccx, name, llvm::CCallConv, llfty, sig.0.output /* (1) */);"}, {"sha": "6196f9e5eab65eff401594f9cfad0699ecfd9378", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=11e265c2e0af99a81caf888fc39cc903dc74f1cd", "patch": "@@ -265,7 +265,7 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n     let _icx = push_ctxt(\"trans_fn_pointer_shim\");\n     let tcx = ccx.tcx();\n \n-    let bare_fn_ty = normalize_ty(tcx, bare_fn_ty);\n+    let bare_fn_ty = erase_regions(tcx, &bare_fn_ty);\n     match ccx.fn_pointer_shims().borrow().get(&bare_fn_ty) {\n         Some(&llval) => { return llval; }\n         None => { }"}, {"sha": "8989dfd493236a80c186f4dcb5105b1d0819b7a8", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=11e265c2e0af99a81caf888fc39cc903dc74f1cd", "patch": "@@ -466,7 +466,7 @@ pub fn get_or_create_declaration_if_unboxed_closure<'a, 'tcx>(ccx: &CrateContext\n \n     // Normalize type so differences in regions and typedefs don't cause\n     // duplicate declarations\n-    let function_type = normalize_ty(ccx.tcx(), function_type);\n+    let function_type = erase_regions(ccx.tcx(), &function_type);\n     let params = match function_type.sty {\n         ty::ty_unboxed_closure(_, _, ref substs) => substs.types.clone(),\n         _ => unreachable!()"}, {"sha": "ab5b563b99c7259ada392acf0ac6b1e427515d45", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=11e265c2e0af99a81caf888fc39cc903dc74f1cd", "patch": "@@ -58,16 +58,21 @@ use util::nodemap::FnvHashSet;\n \n pub use trans::context::CrateContext;\n \n-/// Returns an equivalent type with all the typedefs and self regions removed.\n-pub fn normalize_ty<'tcx>(cx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n-    let u = TypeNormalizer(cx).fold_ty(ty);\n-    debug!(\"normalize_ty({}) = {}\",\n-           ty.repr(cx), u.repr(cx));\n-    return u;\n+/// Returns an equivalent value with all free regions removed (note\n+/// that late-bound regions remain, because they are important for\n+/// subtyping, but they are anonymized and normalized as well). This\n+/// is a stronger, caching version of `ty_fold::erase_regions`.\n+pub fn erase_regions<'tcx,T>(cx: &ty::ctxt<'tcx>, value: &T) -> T\n+    where T : TypeFoldable<'tcx> + Repr<'tcx>\n+{\n+    let value1 = value.fold_with(&mut RegionEraser(cx));\n+    debug!(\"erase_regions({}) = {}\",\n+           value.repr(cx), value1.repr(cx));\n+    return value1;\n \n-    struct TypeNormalizer<'a, 'tcx: 'a>(&'a ty::ctxt<'tcx>);\n+    struct RegionEraser<'a, 'tcx: 'a>(&'a ty::ctxt<'tcx>);\n \n-    impl<'a, 'tcx> TypeFolder<'tcx> for TypeNormalizer<'a, 'tcx> {\n+    impl<'a, 'tcx> TypeFolder<'tcx> for RegionEraser<'a, 'tcx> {\n         fn tcx(&self) -> &ty::ctxt<'tcx> { self.0 }\n \n         fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n@@ -84,7 +89,6 @@ pub fn normalize_ty<'tcx>(cx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n         fn fold_binder<T>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T>\n             where T : TypeFoldable<'tcx> + Repr<'tcx>\n         {\n-            // FIXME(#20526) this should replace `enter_region_binder`/`exit_region_binder`.\n             let u = ty::anonymize_late_bound_regions(self.tcx(), t);\n             ty_fold::super_fold_binder(self, &u)\n         }\n@@ -989,7 +993,7 @@ pub fn fulfill_obligation<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n let tcx = ccx.tcx();\n \n // Remove any references to regions; this helps improve caching.\n-let trait_ref = ty_fold::erase_regions(tcx, trait_ref);\n+let trait_ref = erase_regions(tcx, &trait_ref);\n \n // First check the cache.\n match ccx.trait_cache().borrow().get(&trait_ref) {"}, {"sha": "93076260349abd5c81aee5d5801823a800ec4a2d", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=11e265c2e0af99a81caf888fc39cc903dc74f1cd", "patch": "@@ -313,8 +313,10 @@ pub fn normalize_associated_type<'tcx,T>(tcx: &ty::ctxt<'tcx>, value: &T) -> T\n {\n     debug!(\"normalize_associated_type(t={})\", value.repr(tcx));\n \n+    let value = erase_regions(tcx, value);\n+\n     if !value.has_projection_types() {\n-        return value.clone();\n+        return value;\n     }\n \n     // FIXME(#20304) -- cache\n@@ -324,7 +326,7 @@ pub fn normalize_associated_type<'tcx,T>(tcx: &ty::ctxt<'tcx>, value: &T) -> T\n     let mut selcx = traits::SelectionContext::new(&infcx, &typer);\n     let cause = traits::ObligationCause::dummy();\n     let traits::Normalized { value: result, obligations } =\n-        traits::normalize(&mut selcx, cause, value);\n+        traits::normalize(&mut selcx, cause, &value);\n \n     debug!(\"normalize_associated_type: result={} obligations={}\",\n            result.repr(tcx),"}, {"sha": "034a1ee8be5925ef2903803cb4de9def9da020ec", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=11e265c2e0af99a81caf888fc39cc903dc74f1cd", "patch": "@@ -285,7 +285,7 @@ pub fn type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type {\n     // Rust types are defined as the same LLVM types.  If we don't do\n     // this then, e.g. `Option<{myfield: bool}>` would be a different\n     // type than `Option<myrec>`.\n-    let t_norm = normalize_ty(cx.tcx(), t);\n+    let t_norm = erase_regions(cx.tcx(), &t);\n \n     if t != t_norm {\n         let llty = type_of(cx, t_norm);"}, {"sha": "03ab8f7e43136910ef3a75cb2672a875af6da184", "filename": "src/test/run-pass/associated-types-region-erasure-issue-20582.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Ftest%2Frun-pass%2Fassociated-types-region-erasure-issue-20582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e265c2e0af99a81caf888fc39cc903dc74f1cd/src%2Ftest%2Frun-pass%2Fassociated-types-region-erasure-issue-20582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-region-erasure-issue-20582.rs?ref=11e265c2e0af99a81caf888fc39cc903dc74f1cd", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #20582. This test caused an ICE related to\n+// inconsistent region erasure in trans.\n+\n+struct Foo<'a> {\n+    buf: &'a[u8]\n+}\n+\n+impl<'a> Iterator for Foo<'a> {\n+    type Item = &'a[u8];\n+\n+    fn next(&mut self) -> Option<<Self as Iterator>::Item> {\n+        Some(self.buf)\n+    }\n+}\n+\n+fn main() {\n+}"}]}