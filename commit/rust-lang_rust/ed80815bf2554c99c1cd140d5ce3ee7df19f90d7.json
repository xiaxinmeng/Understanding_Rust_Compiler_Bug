{"sha": "ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkODA4MTViZjI1NTRjOTljMWNkMTQwZDVjZTNlZTdkZjE5ZjkwZDc=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-12-11T20:02:46Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-12-11T20:02:46Z"}, "message": "Move binder for dyn to each list item", "tree": {"sha": "8d68bae85f0d8df42b85b3853dbc8cdb2728e7e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d68bae85f0d8df42b85b3853dbc8cdb2728e7e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "html_url": "https://github.com/rust-lang/rust/commit/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58d2bad9f7ab0971495247b6c94978848760ca9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/58d2bad9f7ab0971495247b6c94978848760ca9d", "html_url": "https://github.com/rust-lang/rust/commit/58d2bad9f7ab0971495247b6c94978848760ca9d"}], "stats": {"total": 576, "additions": 311, "deletions": 265}, "files": [{"sha": "5bcb11fd515a0f925d2054860706d61ef9348b82", "filename": "compiler/rustc_codegen_cranelift/src/value_and_place.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -480,17 +480,19 @@ impl<'tcx> CPlace<'tcx> {\n                     // fn(&T) -> for<'l> fn(&'l T) is allowed\n                 }\n                 (&ty::Dynamic(from_traits, _), &ty::Dynamic(to_traits, _)) => {\n-                    let from_traits = fx\n-                        .tcx\n-                        .normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), from_traits);\n-                    let to_traits = fx\n-                        .tcx\n-                        .normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), to_traits);\n-                    assert_eq!(\n-                        from_traits, to_traits,\n-                        \"Can't write trait object of incompatible traits {:?} to place with traits {:?}\\n\\n{:#?}\",\n-                        from_traits, to_traits, fx,\n-                    );\n+                    for (from, to) in from_traits.iter().zip(to_traits) {\n+                        let from = fx\n+                            .tcx\n+                            .normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), from);\n+                        let to = fx\n+                            .tcx\n+                            .normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), to);\n+                        assert_eq!(\n+                            from, to,\n+                            \"Can't write trait object of incompatible traits {:?} to place with traits {:?}\\n\\n{:#?}\",\n+                            from_traits, to_traits, fx,\n+                        );\n+                    }\n                     // dyn for<'r> Trait<'r> -> dyn Trait<'_> is allowed\n                 }\n                 _ => {"}, {"sha": "fdec3c9fb73627227806bea2cb7794f924dd097e", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -496,7 +496,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n             fn print_dyn_existential(\n                 self,\n-                _predicates: &'tcx ty::List<ty::ExistentialPredicate<'tcx>>,\n+                _predicates: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n             ) -> Result<Self::DynExistential, Self::Error> {\n                 Err(NonTrivialPath)\n             }"}, {"sha": "bfeef4904893adb6cd165fdc6e7e69bc00a63986", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -786,7 +786,7 @@ impl<'tcx> LateContext<'tcx> {\n \n             fn print_dyn_existential(\n                 self,\n-                _predicates: &'tcx ty::List<ty::ExistentialPredicate<'tcx>>,\n+                _predicates: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n             ) -> Result<Self::DynExistential, Self::Error> {\n                 Ok(())\n             }"}, {"sha": "5e1f94c071c65157a4a7d3e13d6153872e04fcaf", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -218,8 +218,10 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 }\n                 ty::Dynamic(binder, _) => {\n                     let mut has_emitted = false;\n-                    for predicate in binder.skip_binder().iter() {\n-                        if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate {\n+                    for predicate in binder.iter() {\n+                        if let ty::ExistentialPredicate::Trait(ref trait_ref) =\n+                            predicate.skip_binder()\n+                        {\n                             let def_id = trait_ref.def_id;\n                             let descr_post =\n                                 &format!(\" trait object{}{}\", plural_suffix, descr_post,);"}, {"sha": "cd3bd96f9fcf4e5dae7df949c279f60fec3111a3", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -321,10 +321,14 @@ impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::List<Ty<'tcx>> {\n     }\n }\n \n-impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::List<ty::ExistentialPredicate<'tcx>> {\n+impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D>\n+    for ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>\n+{\n     fn decode(decoder: &mut D) -> Result<&'tcx Self, D::Error> {\n         let len = decoder.read_usize()?;\n-        Ok(decoder.tcx().mk_existential_predicates((0..len).map(|_| Decodable::decode(decoder)))?)\n+        Ok(decoder\n+            .tcx()\n+            .mk_poly_existential_predicates((0..len).map(|_| Decodable::decode(decoder)))?)\n     }\n }\n \n@@ -373,7 +377,7 @@ impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [mir::abstract_const::N\n impl_decodable_via_ref! {\n     &'tcx ty::TypeckResults<'tcx>,\n     &'tcx ty::List<Ty<'tcx>>,\n-    &'tcx ty::List<ty::ExistentialPredicate<'tcx>>,\n+    &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n     &'tcx Allocation,\n     &'tcx mir::Body<'tcx>,\n     &'tcx mir::UnsafetyCheckResult,"}, {"sha": "9218040be9c13f4da297e5cc9c0d256f61ae9e84", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -87,7 +87,7 @@ pub struct CtxtInterners<'tcx> {\n     substs: InternedSet<'tcx, InternalSubsts<'tcx>>,\n     canonical_var_infos: InternedSet<'tcx, List<CanonicalVarInfo<'tcx>>>,\n     region: InternedSet<'tcx, RegionKind>,\n-    existential_predicates: InternedSet<'tcx, List<ExistentialPredicate<'tcx>>>,\n+    poly_existential_predicates: InternedSet<'tcx, List<ty::Binder<ExistentialPredicate<'tcx>>>>,\n     predicate: InternedSet<'tcx, PredicateInner<'tcx>>,\n     predicates: InternedSet<'tcx, List<Predicate<'tcx>>>,\n     projs: InternedSet<'tcx, List<ProjectionKind>>,\n@@ -103,7 +103,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n             type_list: Default::default(),\n             substs: Default::default(),\n             region: Default::default(),\n-            existential_predicates: Default::default(),\n+            poly_existential_predicates: Default::default(),\n             canonical_var_infos: Default::default(),\n             predicate: Default::default(),\n             predicates: Default::default(),\n@@ -1610,7 +1610,7 @@ nop_lift! {const_; &'a Const<'a> => &'tcx Const<'tcx>}\n nop_lift! {predicate; &'a PredicateInner<'a> => &'tcx PredicateInner<'tcx>}\n \n nop_list_lift! {type_list; Ty<'a> => Ty<'tcx>}\n-nop_list_lift! {existential_predicates; ExistentialPredicate<'a> => ExistentialPredicate<'tcx>}\n+nop_list_lift! {poly_existential_predicates; ty::Binder<ExistentialPredicate<'a>> => ty::Binder<ExistentialPredicate<'tcx>>}\n nop_list_lift! {predicates; Predicate<'a> => Predicate<'tcx>}\n nop_list_lift! {canonical_var_infos; CanonicalVarInfo<'a> => CanonicalVarInfo<'tcx>}\n nop_list_lift! {projs; ProjectionKind => ProjectionKind}\n@@ -2051,7 +2051,8 @@ slice_interners!(\n     type_list: _intern_type_list(Ty<'tcx>),\n     substs: _intern_substs(GenericArg<'tcx>),\n     canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),\n-    existential_predicates: _intern_existential_predicates(ExistentialPredicate<'tcx>),\n+    poly_existential_predicates:\n+        _intern_poly_existential_predicates(ty::Binder<ExistentialPredicate<'tcx>>),\n     predicates: _intern_predicates(Predicate<'tcx>),\n     projs: _intern_projs(ProjectionKind),\n     place_elems: _intern_place_elems(PlaceElem<'tcx>),\n@@ -2282,7 +2283,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[inline]\n     pub fn mk_dynamic(\n         self,\n-        obj: ty::Binder<&'tcx List<ExistentialPredicate<'tcx>>>,\n+        obj: &'tcx List<ty::Binder<ExistentialPredicate<'tcx>>>,\n         reg: ty::Region<'tcx>,\n     ) -> Ty<'tcx> {\n         self.mk_ty(Dynamic(obj, reg))\n@@ -2412,13 +2413,17 @@ impl<'tcx> TyCtxt<'tcx> {\n         Place { local: place.local, projection: self.intern_place_elems(&projection) }\n     }\n \n-    pub fn intern_existential_predicates(\n+    pub fn intern_poly_existential_predicates(\n         self,\n-        eps: &[ExistentialPredicate<'tcx>],\n-    ) -> &'tcx List<ExistentialPredicate<'tcx>> {\n+        eps: &[ty::Binder<ExistentialPredicate<'tcx>>],\n+    ) -> &'tcx List<ty::Binder<ExistentialPredicate<'tcx>>> {\n         assert!(!eps.is_empty());\n-        assert!(eps.array_windows().all(|[a, b]| a.stable_cmp(self, b) != Ordering::Greater));\n-        self._intern_existential_predicates(eps)\n+        assert!(\n+            eps.array_windows()\n+                .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())\n+                    != Ordering::Greater)\n+        );\n+        self._intern_poly_existential_predicates(eps)\n     }\n \n     pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {\n@@ -2475,13 +2480,16 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n-    pub fn mk_existential_predicates<\n-        I: InternAs<[ExistentialPredicate<'tcx>], &'tcx List<ExistentialPredicate<'tcx>>>,\n+    pub fn mk_poly_existential_predicates<\n+        I: InternAs<\n+            [ty::Binder<ExistentialPredicate<'tcx>>],\n+            &'tcx List<ty::Binder<ExistentialPredicate<'tcx>>>,\n+        >,\n     >(\n         self,\n         iter: I,\n     ) -> I::Output {\n-        iter.intern_with(|xs| self.intern_existential_predicates(xs))\n+        iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))\n     }\n \n     pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>("}, {"sha": "97af927dfcba2b159df19dda377f81ffe97d6610", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -58,7 +58,7 @@ pub enum TypeError<'tcx> {\n     CyclicTy(Ty<'tcx>),\n     CyclicConst(&'tcx ty::Const<'tcx>),\n     ProjectionMismatched(ExpectedFound<DefId>),\n-    ExistentialMismatch(ExpectedFound<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>>),\n+    ExistentialMismatch(ExpectedFound<&'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>>),\n     ObjectUnsafeCoercion(DefId),\n     ConstMismatch(ExpectedFound<&'tcx ty::Const<'tcx>>),\n "}, {"sha": "4de3d15924862cbdbfe4a19a3d2d68b6fea645e2", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -160,19 +160,15 @@ impl FlagComputation {\n             }\n \n             &ty::Dynamic(obj, r) => {\n-                self.bound_computation(obj, |computation, obj| {\n-                    for predicate in obj.iter() {\n-                        match predicate {\n-                            ty::ExistentialPredicate::Trait(tr) => {\n-                                computation.add_substs(tr.substs)\n-                            }\n-                            ty::ExistentialPredicate::Projection(p) => {\n-                                computation.add_existential_projection(&p);\n-                            }\n-                            ty::ExistentialPredicate::AutoTrait(_) => {}\n+                for predicate in obj.iter() {\n+                    self.bound_computation(predicate, |computation, predicate| match predicate {\n+                        ty::ExistentialPredicate::Trait(tr) => computation.add_substs(tr.substs),\n+                        ty::ExistentialPredicate::Projection(p) => {\n+                            computation.add_existential_projection(&p);\n                         }\n-                    }\n-                });\n+                        ty::ExistentialPredicate::AutoTrait(_) => {}\n+                    });\n+                }\n \n                 self.add_region(r);\n             }"}, {"sha": "c79e06b7fdd323c3c16a384c5022b11af81c1919", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -63,7 +63,7 @@ pub trait Printer<'tcx>: Sized {\n \n     fn print_dyn_existential(\n         self,\n-        predicates: &'tcx ty::List<ty::ExistentialPredicate<'tcx>>,\n+        predicates: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n     ) -> Result<Self::DynExistential, Self::Error>;\n \n     fn print_const(self, ct: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error>;\n@@ -343,7 +343,9 @@ impl<'tcx, P: Printer<'tcx>> Print<'tcx, P> for Ty<'tcx> {\n     }\n }\n \n-impl<'tcx, P: Printer<'tcx>> Print<'tcx, P> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>> {\n+impl<'tcx, P: Printer<'tcx>> Print<'tcx, P>\n+    for &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>\n+{\n     type Output = P::DynExistential;\n     type Error = P::Error;\n     fn print(&self, cx: P) -> Result<Self::Output, Self::Error> {"}, {"sha": "09ef69e9690ab8a486cb7ac55927b81f09158a46", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 98, "deletions": 55, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -209,6 +209,17 @@ pub trait PrettyPrinter<'tcx>:\n         value.as_ref().skip_binder().print(self)\n     }\n \n+    fn wrap_binder<T, F: Fn(&T, Self) -> Result<Self, fmt::Error>>(\n+        self,\n+        value: &ty::Binder<T>,\n+        f: F,\n+    ) -> Result<Self, Self::Error>\n+    where\n+        T: Print<'tcx, Self, Output = Self, Error = Self::Error> + TypeFoldable<'tcx>,\n+    {\n+        f(value.as_ref().skip_binder(), self)\n+    }\n+\n     /// Prints comma-separated elements.\n     fn comma_sep<T>(mut self, mut elems: impl Iterator<Item = T>) -> Result<Self, Self::Error>\n     where\n@@ -753,72 +764,77 @@ pub trait PrettyPrinter<'tcx>:\n \n     fn pretty_print_dyn_existential(\n         mut self,\n-        predicates: &'tcx ty::List<ty::ExistentialPredicate<'tcx>>,\n+        predicates: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n-        define_scoped_cx!(self);\n-\n         // Generate the main trait ref, including associated types.\n         let mut first = true;\n \n         if let Some(principal) = predicates.principal() {\n-            p!(print_def_path(principal.def_id, &[]));\n-\n-            let mut resugared = false;\n-\n-            // Special-case `Fn(...) -> ...` and resugar it.\n-            let fn_trait_kind = self.tcx().fn_trait_kind_from_lang_item(principal.def_id);\n-            if !self.tcx().sess.verbose() && fn_trait_kind.is_some() {\n-                if let ty::Tuple(ref args) = principal.substs.type_at(0).kind() {\n-                    let mut projections = predicates.projection_bounds();\n-                    if let (Some(proj), None) = (projections.next(), projections.next()) {\n-                        let tys: Vec<_> = args.iter().map(|k| k.expect_ty()).collect();\n-                        p!(pretty_fn_sig(&tys, false, proj.ty));\n-                        resugared = true;\n+            self = self.wrap_binder(&principal, |principal, mut cx| {\n+                define_scoped_cx!(cx);\n+                p!(print_def_path(principal.def_id, &[]));\n+\n+                let mut resugared = false;\n+\n+                // Special-case `Fn(...) -> ...` and resugar it.\n+                let fn_trait_kind = cx.tcx().fn_trait_kind_from_lang_item(principal.def_id);\n+                if !cx.tcx().sess.verbose() && fn_trait_kind.is_some() {\n+                    if let ty::Tuple(ref args) = principal.substs.type_at(0).kind() {\n+                        let mut projections = predicates.projection_bounds();\n+                        if let (Some(proj), None) = (projections.next(), projections.next()) {\n+                            let tys: Vec<_> = args.iter().map(|k| k.expect_ty()).collect();\n+                            p!(pretty_fn_sig(&tys, false, proj.skip_binder().ty));\n+                            resugared = true;\n+                        }\n                     }\n                 }\n-            }\n \n-            // HACK(eddyb) this duplicates `FmtPrinter`'s `path_generic_args`,\n-            // in order to place the projections inside the `<...>`.\n-            if !resugared {\n-                // Use a type that can't appear in defaults of type parameters.\n-                let dummy_self = self.tcx().mk_ty_infer(ty::FreshTy(0));\n-                let principal = principal.with_self_ty(self.tcx(), dummy_self);\n+                // HACK(eddyb) this duplicates `FmtPrinter`'s `path_generic_args`,\n+                // in order to place the projections inside the `<...>`.\n+                if !resugared {\n+                    // Use a type that can't appear in defaults of type parameters.\n+                    let dummy_cx = cx.tcx().mk_ty_infer(ty::FreshTy(0));\n+                    let principal = principal.with_self_ty(cx.tcx(), dummy_cx);\n+\n+                    let args = cx.generic_args_to_print(\n+                        cx.tcx().generics_of(principal.def_id),\n+                        principal.substs,\n+                    );\n+\n+                    // Don't print `'_` if there's no unerased regions.\n+                    let print_regions = args.iter().any(|arg| match arg.unpack() {\n+                        GenericArgKind::Lifetime(r) => *r != ty::ReErased,\n+                        _ => false,\n+                    });\n+                    let mut args = args.iter().cloned().filter(|arg| match arg.unpack() {\n+                        GenericArgKind::Lifetime(_) => print_regions,\n+                        _ => true,\n+                    });\n+                    let mut projections = predicates.projection_bounds();\n \n-                let args = self.generic_args_to_print(\n-                    self.tcx().generics_of(principal.def_id),\n-                    principal.substs,\n-                );\n+                    let arg0 = args.next();\n+                    let projection0 = projections.next();\n+                    if arg0.is_some() || projection0.is_some() {\n+                        let args = arg0.into_iter().chain(args);\n+                        let projections = projection0.into_iter().chain(projections);\n \n-                // Don't print `'_` if there's no unerased regions.\n-                let print_regions = args.iter().any(|arg| match arg.unpack() {\n-                    GenericArgKind::Lifetime(r) => *r != ty::ReErased,\n-                    _ => false,\n-                });\n-                let mut args = args.iter().cloned().filter(|arg| match arg.unpack() {\n-                    GenericArgKind::Lifetime(_) => print_regions,\n-                    _ => true,\n-                });\n-                let mut projections = predicates.projection_bounds();\n-\n-                let arg0 = args.next();\n-                let projection0 = projections.next();\n-                if arg0.is_some() || projection0.is_some() {\n-                    let args = arg0.into_iter().chain(args);\n-                    let projections = projection0.into_iter().chain(projections);\n-\n-                    p!(generic_delimiters(|mut cx| {\n-                        cx = cx.comma_sep(args)?;\n-                        if arg0.is_some() && projection0.is_some() {\n-                            write!(cx, \", \")?;\n-                        }\n-                        cx.comma_sep(projections)\n-                    }));\n+                        p!(generic_delimiters(|mut cx| {\n+                            cx = cx.comma_sep(args)?;\n+                            if arg0.is_some() && projection0.is_some() {\n+                                write!(cx, \", \")?;\n+                            }\n+                            cx.comma_sep(projections)\n+                        }));\n+                    }\n                 }\n-            }\n+                Ok(cx)\n+            })?;\n+\n             first = false;\n         }\n \n+        define_scoped_cx!(self);\n+\n         // Builtin bounds.\n         // FIXME(eddyb) avoid printing twice (needed to ensure\n         // that the auto traits are sorted *and* printed via cx).\n@@ -1391,7 +1407,7 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n \n     fn print_dyn_existential(\n         self,\n-        predicates: &'tcx ty::List<ty::ExistentialPredicate<'tcx>>,\n+        predicates: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n         self.pretty_print_dyn_existential(predicates)\n     }\n@@ -1537,6 +1553,17 @@ impl<F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n         self.pretty_in_binder(value)\n     }\n \n+    fn wrap_binder<T, C: Fn(&T, Self) -> Result<Self, Self::Error>>(\n+        self,\n+        value: &ty::Binder<T>,\n+        f: C,\n+    ) -> Result<Self, Self::Error>\n+    where\n+        T: Print<'tcx, Self, Output = Self, Error = Self::Error> + TypeFoldable<'tcx>,\n+    {\n+        self.pretty_wrap_binder(value, f)\n+    }\n+\n     fn typed_value(\n         mut self,\n         f: impl FnOnce(Self) -> Result<Self, Self::Error>,\n@@ -1790,6 +1817,22 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n         Ok(inner)\n     }\n \n+    pub fn pretty_wrap_binder<T, C: Fn(&T, Self) -> Result<Self, fmt::Error>>(\n+        self,\n+        value: &ty::Binder<T>,\n+        f: C,\n+    ) -> Result<Self, fmt::Error>\n+    where\n+        T: Print<'tcx, Self, Output = Self, Error = fmt::Error> + TypeFoldable<'tcx>,\n+    {\n+        let old_region_index = self.region_index;\n+        let (new, new_value) = self.name_all_regions(value)?;\n+        let mut inner = f(&new_value.0, new)?;\n+        inner.region_index = old_region_index;\n+        inner.binder_depth -= 1;\n+        Ok(inner)\n+    }\n+\n     fn prepare_late_bound_region_info<T>(&mut self, value: &ty::Binder<T>)\n     where\n         T: TypeFoldable<'tcx>,\n@@ -1906,12 +1949,12 @@ impl ty::Binder<ty::TraitRef<'tcx>> {\n \n forward_display_to_print! {\n     Ty<'tcx>,\n-    &'tcx ty::List<ty::ExistentialPredicate<'tcx>>,\n+    &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n     &'tcx ty::Const<'tcx>,\n \n     // HACK(eddyb) these are exhaustive instead of generic,\n     // because `for<'tcx>` isn't possible yet.\n-    ty::Binder<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>>,\n+    ty::Binder<ty::ExistentialPredicate<'tcx>>,\n     ty::Binder<ty::TraitRef<'tcx>>,\n     ty::Binder<TraitRefPrintOnlyTraitPath<'tcx>>,\n     ty::Binder<ty::FnSig<'tcx>>,"}, {"sha": "8a3a6305d01bb189cf1164db1f53b3a7206aaf0c", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -603,7 +603,7 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n     new_const_val.map(|val| tcx.mk_const(ty::Const { val, ty: a.ty }))\n }\n \n-impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>> {\n+impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>> {\n     fn relate<R: TypeRelation<'tcx>>(\n         relation: &mut R,\n         a: Self,\n@@ -616,24 +616,28 @@ impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>> {\n         // in `a`.\n         let mut a_v: Vec<_> = a.into_iter().collect();\n         let mut b_v: Vec<_> = b.into_iter().collect();\n-        a_v.sort_by(|a, b| a.stable_cmp(tcx, b));\n+        a_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));\n         a_v.dedup();\n-        b_v.sort_by(|a, b| a.stable_cmp(tcx, b));\n+        b_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));\n         b_v.dedup();\n         if a_v.len() != b_v.len() {\n             return Err(TypeError::ExistentialMismatch(expected_found(relation, a, b)));\n         }\n \n         let v = a_v.into_iter().zip(b_v.into_iter()).map(|(ep_a, ep_b)| {\n             use crate::ty::ExistentialPredicate::*;\n-            match (ep_a, ep_b) {\n-                (Trait(a), Trait(b)) => Ok(Trait(relation.relate(a, b)?)),\n-                (Projection(a), Projection(b)) => Ok(Projection(relation.relate(a, b)?)),\n-                (AutoTrait(a), AutoTrait(b)) if a == b => Ok(AutoTrait(a)),\n+            match (ep_a.skip_binder(), ep_b.skip_binder()) {\n+                (Trait(a), Trait(b)) => Ok(ty::Binder::bind(Trait(\n+                    relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder(),\n+                ))),\n+                (Projection(a), Projection(b)) => Ok(ty::Binder::bind(Projection(\n+                    relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder(),\n+                ))),\n+                (AutoTrait(a), AutoTrait(b)) if a == b => Ok(ep_a.rebind(AutoTrait(a))),\n                 _ => Err(TypeError::ExistentialMismatch(expected_found(relation, a, b))),\n             }\n         });\n-        Ok(tcx.mk_existential_predicates(v)?)\n+        Ok(tcx.mk_poly_existential_predicates(v)?)\n     }\n }\n "}, {"sha": "8af5792b3fb68b4be7f7a330b299cfc38dfe2290", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -843,9 +843,9 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>> {\n+impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n-        ty::util::fold_list(self, folder, |tcx, v| tcx.intern_existential_predicates(v))\n+        ty::util::fold_list(self, folder, |tcx, v| tcx.intern_poly_existential_predicates(v))\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {"}, {"sha": "f85a08005eb82b3b1ba30dd5ae735e0e0997c719", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 19, "deletions": 41, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -152,7 +152,7 @@ pub enum TyKind<'tcx> {\n     FnPtr(PolyFnSig<'tcx>),\n \n     /// A trait, defined with `trait`.\n-    Dynamic(Binder<&'tcx List<ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),\n+    Dynamic(&'tcx List<Binder<ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),\n \n     /// The anonymous type of a closure. Used to represent the type of\n     /// `|a| a`.\n@@ -762,7 +762,7 @@ impl<'tcx> Binder<ExistentialPredicate<'tcx>> {\n     }\n }\n \n-impl<'tcx> List<ExistentialPredicate<'tcx>> {\n+impl<'tcx> List<ty::Binder<ExistentialPredicate<'tcx>>> {\n     /// Returns the \"principal `DefId`\" of this set of existential predicates.\n     ///\n     /// A Rust trait object type consists (in addition to a lifetime bound)\n@@ -788,64 +788,42 @@ impl<'tcx> List<ExistentialPredicate<'tcx>> {\n     /// is `{Send, Sync}`, while there is no principal. These trait objects\n     /// have a \"trivial\" vtable consisting of just the size, alignment,\n     /// and destructor.\n-    pub fn principal(&self) -> Option<ExistentialTraitRef<'tcx>> {\n-        match self[0] {\n-            ExistentialPredicate::Trait(tr) => Some(tr),\n-            _ => None,\n-        }\n+    pub fn principal(&self) -> Option<ty::Binder<ExistentialTraitRef<'tcx>>> {\n+        self[0]\n+            .map_bound(|this| match this {\n+                ExistentialPredicate::Trait(tr) => Some(tr),\n+                _ => None,\n+            })\n+            .transpose()\n     }\n \n     pub fn principal_def_id(&self) -> Option<DefId> {\n-        self.principal().map(|trait_ref| trait_ref.def_id)\n+        self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)\n     }\n \n     #[inline]\n     pub fn projection_bounds<'a>(\n         &'a self,\n-    ) -> impl Iterator<Item = ExistentialProjection<'tcx>> + 'a {\n-        self.iter().filter_map(|predicate| match predicate {\n-            ExistentialPredicate::Projection(projection) => Some(projection),\n-            _ => None,\n+    ) -> impl Iterator<Item = ty::Binder<ExistentialProjection<'tcx>>> + 'a {\n+        self.iter().filter_map(|predicate| {\n+            predicate\n+                .map_bound(|pred| match pred {\n+                    ExistentialPredicate::Projection(projection) => Some(projection),\n+                    _ => None,\n+                })\n+                .transpose()\n         })\n     }\n \n     #[inline]\n     pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {\n-        self.iter().filter_map(|predicate| match predicate {\n+        self.iter().filter_map(|predicate| match predicate.skip_binder() {\n             ExistentialPredicate::AutoTrait(did) => Some(did),\n             _ => None,\n         })\n     }\n }\n \n-impl<'tcx> Binder<&'tcx List<ExistentialPredicate<'tcx>>> {\n-    pub fn principal(&self) -> Option<ty::Binder<ExistentialTraitRef<'tcx>>> {\n-        self.map_bound(|b| b.principal()).transpose()\n-    }\n-\n-    pub fn principal_def_id(&self) -> Option<DefId> {\n-        self.skip_binder().principal_def_id()\n-    }\n-\n-    #[inline]\n-    pub fn projection_bounds<'a>(\n-        &'a self,\n-    ) -> impl Iterator<Item = PolyExistentialProjection<'tcx>> + 'a {\n-        self.skip_binder().projection_bounds().map(Binder::bind)\n-    }\n-\n-    #[inline]\n-    pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {\n-        self.skip_binder().auto_traits()\n-    }\n-\n-    pub fn iter<'a>(\n-        &'a self,\n-    ) -> impl DoubleEndedIterator<Item = Binder<ExistentialPredicate<'tcx>>> + 'tcx {\n-        self.skip_binder().iter().map(Binder::bind)\n-    }\n-}\n-\n /// A complete reference to a trait. These take numerous guises in syntax,\n /// but perhaps the most recognizable form is in a where-clause:\n ///"}, {"sha": "e1ec4cc5e973cc4c27c47424a9164446f5585fc2", "filename": "compiler/rustc_mir/src/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -74,7 +74,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n \n     fn print_dyn_existential(\n         mut self,\n-        predicates: &'tcx ty::List<ty::ExistentialPredicate<'tcx>>,\n+        predicates: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n         let mut first = true;\n         for p in predicates {"}, {"sha": "3b4249a93e1fbc79f18b9a247015e4bacf37d8d7", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -184,8 +184,8 @@ where\n             ty::Dynamic(predicates, ..) => {\n                 // All traits in the list are considered the \"primary\" part of the type\n                 // and are visited by shallow visitors.\n-                for predicate in predicates.skip_binder() {\n-                    let trait_ref = match predicate {\n+                for predicate in predicates {\n+                    let trait_ref = match predicate.skip_binder() {\n                         ty::ExistentialPredicate::Trait(trait_ref) => trait_ref,\n                         ty::ExistentialPredicate::Projection(proj) => proj.trait_ref(tcx),\n                         ty::ExistentialPredicate::AutoTrait(def_id) => {"}, {"sha": "6356a7e7832558d47de76459d7776d0b924f5690", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -222,7 +222,7 @@ impl Printer<'tcx> for SymbolPrinter<'tcx> {\n \n     fn print_dyn_existential(\n         mut self,\n-        predicates: &'tcx ty::List<ty::ExistentialPredicate<'tcx>>,\n+        predicates: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n         let mut first = true;\n         for p in predicates {"}, {"sha": "0294fb23c568c03ef7b370a0da0d23779152be6a", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -465,9 +465,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n \n             ty::Dynamic(predicates, r) => {\n                 self.push(\"D\");\n-                self = self.in_binder(&predicates, |cx, predicates| {\n-                    cx.print_dyn_existential(predicates)\n-                })?;\n+                self = self.print_dyn_existential(predicates)?;\n                 self = r.print(self)?;\n             }\n \n@@ -486,26 +484,29 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n \n     fn print_dyn_existential(\n         mut self,\n-        predicates: &'tcx ty::List<ty::ExistentialPredicate<'tcx>>,\n+        predicates: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n         for predicate in predicates {\n-            match predicate {\n-                ty::ExistentialPredicate::Trait(trait_ref) => {\n-                    // Use a type that can't appear in defaults of type parameters.\n-                    let dummy_self = self.tcx.mk_ty_infer(ty::FreshTy(0));\n-                    let trait_ref = trait_ref.with_self_ty(self.tcx, dummy_self);\n-                    self = self.print_def_path(trait_ref.def_id, trait_ref.substs)?;\n-                }\n-                ty::ExistentialPredicate::Projection(projection) => {\n-                    let name = self.tcx.associated_item(projection.item_def_id).ident;\n-                    self.push(\"p\");\n-                    self.push_ident(&name.as_str());\n-                    self = projection.ty.print(self)?;\n-                }\n-                ty::ExistentialPredicate::AutoTrait(def_id) => {\n-                    self = self.print_def_path(def_id, &[])?;\n+            self = self.in_binder(&predicate, |mut cx, predicate| {\n+                match predicate {\n+                    ty::ExistentialPredicate::Trait(trait_ref) => {\n+                        // Use a type that can't appear in defaults of type parameters.\n+                        let dummy_self = cx.tcx.mk_ty_infer(ty::FreshTy(0));\n+                        let trait_ref = trait_ref.with_self_ty(cx.tcx, dummy_self);\n+                        cx = cx.print_def_path(trait_ref.def_id, trait_ref.substs)?;\n+                    }\n+                    ty::ExistentialPredicate::Projection(projection) => {\n+                        let name = cx.tcx.associated_item(projection.item_def_id).ident;\n+                        cx.push(\"p\");\n+                        cx.push_ident(&name.as_str());\n+                        cx = projection.ty.print(cx)?;\n+                    }\n+                    ty::ExistentialPredicate::AutoTrait(def_id) => {\n+                        cx = cx.print_def_path(*def_id, &[])?;\n+                    }\n                 }\n-            }\n+                Ok(cx)\n+            })?;\n         }\n         self.push(\"E\");\n         Ok(self)"}, {"sha": "69f66f6e6b1aa6c0372fa04e931dce10e56e4174", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -219,8 +219,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n         }\n         if let ty::Dynamic(traits, _) = self_ty.kind() {\n-            for t in traits.skip_binder() {\n-                if let ty::ExistentialPredicate::Trait(trait_ref) = t {\n+            for t in traits.iter() {\n+                if let ty::ExistentialPredicate::Trait(trait_ref) = t.skip_binder() {\n                     flags.push((sym::_Self, Some(self.tcx.def_path_str(trait_ref.def_id))))\n                 }\n             }"}, {"sha": "8b275db89f191a6d7df017d067e8df66cfc4b5a6", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -551,8 +551,9 @@ fn object_ty_for_trait<'tcx>(\n \n     let trait_ref = ty::TraitRef::identity(tcx, trait_def_id);\n \n-    let trait_predicate =\n-        ty::ExistentialPredicate::Trait(ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref));\n+    let trait_predicate = ty::Binder::dummy(ty::ExistentialPredicate::Trait(\n+        ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref),\n+    ));\n \n     let mut associated_types = traits::supertraits(tcx, ty::Binder::dummy(trait_ref))\n         .flat_map(|super_trait_ref| {\n@@ -569,24 +570,19 @@ fn object_ty_for_trait<'tcx>(\n     let projection_predicates = associated_types.into_iter().map(|(super_trait_ref, item)| {\n         // We *can* get bound lifetimes here in cases like\n         // `trait MyTrait: for<'s> OtherTrait<&'s T, Output=bool>`.\n-        //\n-        // binder moved to (*)...\n-        let super_trait_ref = super_trait_ref.skip_binder();\n-        ty::ExistentialPredicate::Projection(ty::ExistentialProjection {\n-            ty: tcx.mk_projection(item.def_id, super_trait_ref.substs),\n-            item_def_id: item.def_id,\n-            substs: super_trait_ref.substs,\n+        super_trait_ref.map_bound(|super_trait_ref| {\n+            ty::ExistentialPredicate::Projection(ty::ExistentialProjection {\n+                ty: tcx.mk_projection(item.def_id, super_trait_ref.substs),\n+                item_def_id: item.def_id,\n+                substs: super_trait_ref.substs,\n+            })\n         })\n     });\n \n-    let existential_predicates =\n-        tcx.mk_existential_predicates(iter::once(trait_predicate).chain(projection_predicates));\n+    let existential_predicates = tcx\n+        .mk_poly_existential_predicates(iter::once(trait_predicate).chain(projection_predicates));\n \n-    let object_ty = tcx.mk_dynamic(\n-        // (*) ... binder re-introduced here\n-        ty::Binder::bind(existential_predicates),\n-        lifetime,\n-    );\n+    let object_ty = tcx.mk_dynamic(existential_predicates, lifetime);\n \n     debug!(\"object_ty_for_trait: object_ty=`{}`\", object_ty);\n "}, {"sha": "f873a6ceb60fe9ee5c7a9003f97bfc70af783ad9", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -375,24 +375,22 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let self_ty = self.infcx.shallow_resolve(trait_predicate.self_ty());\n         let obligation_trait_ref = ty::Binder::dummy(trait_predicate.trait_ref);\n         let data = match *self_ty.kind() {\n-            ty::Dynamic(data, ..) => {\n-                self.infcx\n-                    .replace_bound_vars_with_fresh_vars(\n-                        obligation.cause.span,\n-                        HigherRankedType,\n-                        data,\n-                    )\n-                    .0\n-            }\n+            ty::Dynamic(data, ..) => data,\n             _ => span_bug!(obligation.cause.span, \"object candidate with non-object\"),\n         };\n \n-        let object_trait_ref = data\n-            .principal()\n-            .unwrap_or_else(|| {\n-                span_bug!(obligation.cause.span, \"object candidate with no principal\")\n-            })\n-            .with_self_ty(self.tcx(), self_ty);\n+        let object_trait_ref = data.principal().unwrap_or_else(|| {\n+            span_bug!(obligation.cause.span, \"object candidate with no principal\")\n+        });\n+        let object_trait_ref = self\n+            .infcx\n+            .replace_bound_vars_with_fresh_vars(\n+                obligation.cause.span,\n+                HigherRankedType,\n+                object_trait_ref,\n+            )\n+            .0;\n+        let object_trait_ref = object_trait_ref.with_self_ty(self.tcx(), self_ty);\n \n         let mut nested = vec![];\n \n@@ -711,15 +709,22 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // Trait+Kx+'a -> Trait+Ky+'b (upcasts).\n             (&ty::Dynamic(ref data_a, r_a), &ty::Dynamic(ref data_b, r_b)) => {\n                 // See `assemble_candidates_for_unsizing` for more info.\n-                let existential_predicates = data_a.map_bound(|data_a| {\n-                    let iter = data_a\n-                        .principal()\n-                        .map(ty::ExistentialPredicate::Trait)\n-                        .into_iter()\n-                        .chain(data_a.projection_bounds().map(ty::ExistentialPredicate::Projection))\n-                        .chain(data_b.auto_traits().map(ty::ExistentialPredicate::AutoTrait));\n-                    tcx.mk_existential_predicates(iter)\n-                });\n+                let iter = data_a\n+                    .principal()\n+                    .map(|b| b.map_bound(ty::ExistentialPredicate::Trait))\n+                    .into_iter()\n+                    .chain(\n+                        data_a\n+                            .projection_bounds()\n+                            .map(|b| b.map_bound(ty::ExistentialPredicate::Projection)),\n+                    )\n+                    .chain(\n+                        data_b\n+                            .auto_traits()\n+                            .map(ty::ExistentialPredicate::AutoTrait)\n+                            .map(ty::Binder::dummy),\n+                    );\n+                let existential_predicates = tcx.mk_poly_existential_predicates(iter);\n                 let source_trait = tcx.mk_dynamic(existential_predicates, r_b);\n \n                 // Require that the traits involved in this upcast are **equal**;"}, {"sha": "3f58fd72f409cd3da84bf4b57f772d1ec9bdacc6", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -706,7 +706,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n     fn from_object_ty(\n         &mut self,\n         ty: Ty<'tcx>,\n-        data: ty::Binder<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>>,\n+        data: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n         region: ty::Region<'tcx>,\n     ) {\n         // Imagine a type like this:\n@@ -769,7 +769,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n /// `infer::required_region_bounds`, see that for more information.\n pub fn object_region_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    existential_predicates: ty::Binder<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>>,\n+    existential_predicates: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n ) -> Vec<ty::Region<'tcx>> {\n     // Since we don't actually *know* the self type for an object,\n     // this \"open(err)\" serves as a kind of dummy standin -- basically"}, {"sha": "3a747b09cd4c4b483e0222865775fece97094184", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -615,7 +615,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n }\n \n impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<RustInterner<'tcx>>>>\n-    for Binder<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>>\n+    for &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>\n {\n     fn lower_into(\n         self,\n@@ -627,48 +627,53 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n         // Binders<&[Binders<WhereClause<I>>]>\n         // This means that any variables that are escaping `self` need to be\n         // shifted in by one so that they are still escaping.\n-        let shifted_predicates = ty::fold::shift_vars(interner.tcx, self, 1);\n+        let predicates = ty::fold::shift_vars(interner.tcx, self, 1);\n \n-        let (predicates, binders, _named_regions) =\n-            collect_bound_vars(interner, interner.tcx, shifted_predicates);\n         let self_ty = interner.tcx.mk_ty(ty::Bound(\n             // This is going to be wrapped in a binder\n             ty::DebruijnIndex::from_usize(1),\n             ty::BoundTy { var: ty::BoundVar::from_usize(0), kind: ty::BoundTyKind::Anon },\n         ));\n-        let where_clauses = predicates.into_iter().map(|predicate| match predicate {\n-            ty::ExistentialPredicate::Trait(ty::ExistentialTraitRef { def_id, substs }) => {\n-                chalk_ir::Binders::new(\n+        let where_clauses = predicates.into_iter().map(|predicate| {\n+            let (predicate, binders, _named_regions) =\n+                collect_bound_vars(interner, interner.tcx, predicate);\n+            match predicate {\n+                ty::ExistentialPredicate::Trait(ty::ExistentialTraitRef { def_id, substs }) => {\n+                    chalk_ir::Binders::new(\n+                        binders.clone(),\n+                        chalk_ir::WhereClause::Implemented(chalk_ir::TraitRef {\n+                            trait_id: chalk_ir::TraitId(def_id),\n+                            substitution: interner\n+                                .tcx\n+                                .mk_substs_trait(self_ty, substs)\n+                                .lower_into(interner),\n+                        }),\n+                    )\n+                }\n+                ty::ExistentialPredicate::Projection(predicate) => chalk_ir::Binders::new(\n+                    binders.clone(),\n+                    chalk_ir::WhereClause::AliasEq(chalk_ir::AliasEq {\n+                        alias: chalk_ir::AliasTy::Projection(chalk_ir::ProjectionTy {\n+                            associated_ty_id: chalk_ir::AssocTypeId(predicate.item_def_id),\n+                            substitution: interner\n+                                .tcx\n+                                .mk_substs_trait(self_ty, predicate.substs)\n+                                .lower_into(interner),\n+                        }),\n+                        ty: predicate.ty.lower_into(interner),\n+                    }),\n+                ),\n+                ty::ExistentialPredicate::AutoTrait(def_id) => chalk_ir::Binders::new(\n                     binders.clone(),\n                     chalk_ir::WhereClause::Implemented(chalk_ir::TraitRef {\n                         trait_id: chalk_ir::TraitId(def_id),\n                         substitution: interner\n                             .tcx\n-                            .mk_substs_trait(self_ty, substs)\n+                            .mk_substs_trait(self_ty, &[])\n                             .lower_into(interner),\n                     }),\n-                )\n+                ),\n             }\n-            ty::ExistentialPredicate::Projection(predicate) => chalk_ir::Binders::new(\n-                binders.clone(),\n-                chalk_ir::WhereClause::AliasEq(chalk_ir::AliasEq {\n-                    alias: chalk_ir::AliasTy::Projection(chalk_ir::ProjectionTy {\n-                        associated_ty_id: chalk_ir::AssocTypeId(predicate.item_def_id),\n-                        substitution: interner\n-                            .tcx\n-                            .mk_substs_trait(self_ty, predicate.substs)\n-                            .lower_into(interner),\n-                    }),\n-                    ty: predicate.ty.lower_into(interner),\n-                }),\n-            ),\n-            ty::ExistentialPredicate::AutoTrait(def_id) => chalk_ir::Binders::new(\n-                binders.clone(),\n-                chalk_ir::WhereClause::Implemented(chalk_ir::TraitRef {\n-                    trait_id: chalk_ir::TraitId(def_id),\n-                    substitution: interner.tcx.mk_substs_trait(self_ty, &[]).lower_into(interner),\n-                }),\n-            ),\n         });\n \n         // Binder for the bound variable representing the concrete underlying type."}, {"sha": "693cd236299a8c87a684d79d77fc1688433e242f", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -1254,22 +1254,22 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             })\n         });\n \n-        // Calling `skip_binder` is okay because the predicates are re-bound.\n-        let regular_trait_predicates = existential_trait_refs\n-            .map(|trait_ref| ty::ExistentialPredicate::Trait(trait_ref.skip_binder()));\n-        let auto_trait_predicates = auto_traits\n-            .into_iter()\n-            .map(|trait_ref| ty::ExistentialPredicate::AutoTrait(trait_ref.trait_ref().def_id()));\n+        let regular_trait_predicates = existential_trait_refs.map(|trait_ref| {\n+            trait_ref.map_bound(|trait_ref| ty::ExistentialPredicate::Trait(trait_ref))\n+        });\n+        let auto_trait_predicates = auto_traits.into_iter().map(|trait_ref| {\n+            ty::Binder::dummy(ty::ExistentialPredicate::AutoTrait(trait_ref.trait_ref().def_id()))\n+        });\n         let mut v = regular_trait_predicates\n             .chain(auto_trait_predicates)\n             .chain(\n                 existential_projections\n-                    .map(|x| ty::ExistentialPredicate::Projection(x.skip_binder())),\n+                    .map(|x| x.map_bound(|x| ty::ExistentialPredicate::Projection(x))),\n             )\n             .collect::<SmallVec<[_; 8]>>();\n-        v.sort_by(|a, b| a.stable_cmp(tcx, b));\n+        v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));\n         v.dedup();\n-        let existential_predicates = ty::Binder::bind(tcx.mk_existential_predicates(v.into_iter()));\n+        let existential_predicates = tcx.mk_poly_existential_predicates(v.into_iter());\n \n         // Use explicitly-specified region bound.\n         let region_bound = if !lifetime.is_elided() {\n@@ -2331,7 +2331,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     fn compute_object_lifetime_bound(\n         &self,\n         span: Span,\n-        existential_predicates: ty::Binder<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>>,\n+        existential_predicates: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n     ) -> Option<ty::Region<'tcx>> // if None, use the default\n     {\n         let tcx = self.tcx();"}, {"sha": "369db87360b1ec81877d3463ac458370872f2c70", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -619,8 +619,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             ty::Adt(def, _) => bound_spans.push((def_span(def.did), msg)),\n                             // Point at the trait object that couldn't satisfy the bound.\n                             ty::Dynamic(preds, _) => {\n-                                for pred in preds.skip_binder() {\n-                                    match pred {\n+                                for pred in preds.iter() {\n+                                    match pred.skip_binder() {\n                                         ty::ExistentialPredicate::Trait(tr) => {\n                                             bound_spans.push((def_span(tr.def_id), msg.clone()))\n                                         }\n@@ -673,9 +673,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .iter()\n                         .filter_map(|(pred, parent_pred)| {\n                             format_pred(*pred).map(|(p, self_ty)| match parent_pred {\n-                                None => format!(\"`{}`\", p),\n+                                None => format!(\"`{}`\", &p),\n                                 Some(parent_pred) => match format_pred(*parent_pred) {\n-                                    None => format!(\"`{}`\", p),\n+                                    None => format!(\"`{}`\", &p),\n                                     Some((parent_p, _)) => {\n                                         collect_type_param_suggestions(self_ty, parent_pred, &p);\n                                         format!(\"`{}`\\nwhich is required by `{}`\", p, parent_p)"}, {"sha": "0deaee3a944a06fda894aba204c23951440c648b", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed80815bf2554c99c1cd140d5ce3ee7df19f90d7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=ed80815bf2554c99c1cd140d5ce3ee7df19f90d7", "patch": "@@ -1449,8 +1449,8 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n             false\n         },\n         ty::Dynamic(binder, _) => {\n-            for predicate in binder.skip_binder().iter() {\n-                if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate {\n+            for predicate in binder.iter() {\n+                if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate.skip_binder() {\n                     if must_use_attr(&cx.tcx.get_attrs(trait_ref.def_id)).is_some() {\n                         return true;\n                     }"}]}