{"sha": "c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MDE4NzJhNmNkOWMzYzViMGVmNzY2ZGMyMzdmZjkzYmMzY2M4ZDk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-24T12:17:54Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T18:27:50Z"}, "message": "Remove hir::Item::attrs.", "tree": {"sha": "6f32f6100bd9867ba3ae1e6b2bc94cf00d39ffff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f32f6100bd9867ba3ae1e6b2bc94cf00d39ffff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "html_url": "https://github.com/rust-lang/rust/commit/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5474f17011fe92c68e810b2080a7e539dc5687ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/5474f17011fe92c68e810b2080a7e539dc5687ea", "html_url": "https://github.com/rust-lang/rust/commit/5474f17011fe92c68e810b2080a7e539dc5687ea"}], "stats": {"total": 180, "additions": 104, "deletions": 76}, "files": [{"sha": "570aaab0d918040ad3c704d1f3c136ea6fc960f8", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -242,7 +242,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let hir_id = self.lower_node_id(i.id);\n         let attrs = self.lower_attrs(hir_id, &i.attrs);\n         let kind = self.lower_item_kind(i.span, i.id, hir_id, &mut ident, attrs, &mut vis, &i.kind);\n-        Some(hir::Item { def_id: hir_id.expect_owner(), ident, attrs, kind, vis, span: i.span })\n+        Some(hir::Item { def_id: hir_id.expect_owner(), ident, kind, vis, span: i.span })\n     }\n \n     fn lower_item_kind(\n@@ -556,7 +556,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         this.insert_item(hir::Item {\n                             def_id: new_id.expect_owner(),\n                             ident,\n-                            attrs,\n                             kind,\n                             vis,\n                             span,\n@@ -629,7 +628,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         this.insert_item(hir::Item {\n                             def_id: new_hir_id.expect_owner(),\n                             ident,\n-                            attrs,\n                             kind,\n                             vis,\n                             span: use_tree.span,"}, {"sha": "209e845f70fb49fbccf5c86b25c7aee56c0de306", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -1579,7 +1579,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let opaque_ty_item = hir::Item {\n             def_id: opaque_ty_id,\n             ident: Ident::invalid(),\n-            attrs: Default::default(),\n             kind: opaque_ty_item_kind,\n             vis: respan(span.shrink_to_lo(), hir::VisibilityKind::Inherited),\n             span: opaque_ty_span,"}, {"sha": "0f1493542a74197d2f003874d4389fa528700e47", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -2697,7 +2697,6 @@ impl ItemId {\n pub struct Item<'hir> {\n     pub ident: Ident,\n     pub def_id: LocalDefId,\n-    pub attrs: &'hir [Attribute],\n     pub kind: ItemKind<'hir>,\n     pub vis: Visibility<'hir>,\n     pub span: Span,\n@@ -3077,7 +3076,7 @@ mod size_asserts {\n     rustc_data_structures::static_assert_size!(super::QPath<'static>, 24);\n     rustc_data_structures::static_assert_size!(super::Ty<'static>, 72);\n \n-    rustc_data_structures::static_assert_size!(super::Item<'static>, 200);\n+    rustc_data_structures::static_assert_size!(super::Item<'static>, 184);\n     rustc_data_structures::static_assert_size!(super::TraitItem<'static>, 128);\n     rustc_data_structures::static_assert_size!(super::ImplItem<'static>, 152);\n     rustc_data_structures::static_assert_size!(super::ForeignItem<'static>, 136);"}, {"sha": "55e87663a1ee773de7187a3d40213fc3be4b99b2", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -181,11 +181,10 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ForeignItem<'_> {\n \n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for Item<'_> {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n-        let Item { ident, ref attrs, def_id: _, ref kind, ref vis, span } = *self;\n+        let Item { ident, def_id: _, ref kind, ref vis, span } = *self;\n \n         hcx.hash_hir_item_like(|hcx| {\n             ident.name.hash_stable(hcx, hasher);\n-            attrs.hash_stable(hcx, hasher);\n             kind.hash_stable(hcx, hasher);\n             vis.hash_stable(hcx, hasher);\n             span.hash_stable(hcx, hasher);"}, {"sha": "43d25608348925c1813e753b3c8a62cee4411b3b", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -561,7 +561,8 @@ impl<'a> State<'a> {\n     pub fn print_item(&mut self, item: &hir::Item<'_>) {\n         self.hardbreak_if_not_bol();\n         self.maybe_print_comment(item.span.lo());\n-        self.print_outer_attributes(&item.attrs);\n+        let attrs = self.attrs(item.hir_id());\n+        self.print_outer_attributes(attrs);\n         self.ann.pre(self, AnnNode::Item(item));\n         match item.kind {\n             hir::ItemKind::ExternCrate(orig_name) => {\n@@ -646,14 +647,14 @@ impl<'a> State<'a> {\n                 self.print_ident(item.ident);\n                 self.nbsp();\n                 self.bopen();\n-                self.print_mod(_mod, &item.attrs);\n+                self.print_mod(_mod, attrs);\n                 self.bclose(item.span);\n             }\n             hir::ItemKind::ForeignMod { abi, items } => {\n                 self.head(\"extern\");\n                 self.word_nbsp(abi.to_string());\n                 self.bopen();\n-                self.print_inner_attributes(item.attrs);\n+                self.print_inner_attributes(self.attrs(item.hir_id()));\n                 for item in items {\n                     self.ann.nested(self, Nested::ForeignItem(item.id));\n                 }\n@@ -737,7 +738,7 @@ impl<'a> State<'a> {\n \n                 self.s.space();\n                 self.bopen();\n-                self.print_inner_attributes(&item.attrs);\n+                self.print_inner_attributes(attrs);\n                 for impl_item in items {\n                     self.ann.nested(self, Nested::ImplItem(impl_item.id));\n                 }"}, {"sha": "4637055a82ded1827fad57cb82a208dbec99831c", "filename": "compiler/rustc_interface/src/proc_macro_decls.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -25,7 +25,8 @@ struct Finder<'tcx> {\n \n impl<'v> ItemLikeVisitor<'v> for Finder<'_> {\n     fn visit_item(&mut self, item: &hir::Item<'_>) {\n-        if self.tcx.sess.contains_name(&item.attrs, sym::rustc_proc_macro_decls) {\n+        let attrs = self.tcx.hir().attrs(item.hir_id());\n+        if self.tcx.sess.contains_name(attrs, sym::rustc_proc_macro_decls) {\n             self.decls = Some(item.hir_id());\n         }\n     }"}, {"sha": "dca5e470e7fb93590d5b1ddd9d27255e865b06ff", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -1092,9 +1092,10 @@ declare_lint_pass!(InvalidNoMangleItems => [NO_MANGLE_CONST_ITEMS, NO_MANGLE_GEN\n \n impl<'tcx> LateLintPass<'tcx> for InvalidNoMangleItems {\n     fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {\n+        let attrs = cx.tcx.hir().attrs(it.hir_id());\n         match it.kind {\n             hir::ItemKind::Fn(.., ref generics, _) => {\n-                if let Some(no_mangle_attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {\n+                if let Some(no_mangle_attr) = cx.sess().find_by_name(attrs, sym::no_mangle) {\n                     for param in generics.params {\n                         match param.kind {\n                             GenericParamKind::Lifetime { .. } => {}\n@@ -1120,7 +1121,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidNoMangleItems {\n                 }\n             }\n             hir::ItemKind::Const(..) => {\n-                if cx.sess().contains_name(&it.attrs, sym::no_mangle) {\n+                if cx.sess().contains_name(attrs, sym::no_mangle) {\n                     // Const items do not refer to a particular location in memory, and therefore\n                     // don't have anything to attach a symbol to\n                     cx.struct_span_lint(NO_MANGLE_CONST_ITEMS, it.span, |lint| {\n@@ -1800,7 +1801,8 @@ impl<'tcx> LateLintPass<'tcx> for UnnameableTestItems {\n             return;\n         }\n \n-        if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::rustc_test_marker) {\n+        let attrs = cx.tcx.hir().attrs(it.hir_id());\n+        if let Some(attr) = cx.sess().find_by_name(attrs, sym::rustc_test_marker) {\n             cx.struct_span_lint(UNNAMEABLE_TEST_ITEMS, attr.span, |lint| {\n                 lint.build(\"cannot test inner items\").emit()\n             });"}, {"sha": "9b1a339572ec3cfe5b9fde1709d72415c3aba51a", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -283,7 +283,7 @@ fn is_doc_keyword(s: Symbol) -> bool {\n \n impl<'tcx> LateLintPass<'tcx> for ExistingDocKeyword {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &rustc_hir::Item<'_>) {\n-        for attr in item.attrs {\n+        for attr in cx.tcx.hir().attrs(item.hir_id()) {\n             if !attr.has_name(sym::doc) {\n                 continue;\n             }"}, {"sha": "be9c6eafb6fdbf6801a340cd31b9ddf0f72aca61", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -505,8 +505,9 @@ impl NonUpperCaseGlobals {\n \n impl<'tcx> LateLintPass<'tcx> for NonUpperCaseGlobals {\n     fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {\n+        let attrs = cx.tcx.hir().attrs(it.hir_id());\n         match it.kind {\n-            hir::ItemKind::Static(..) if !cx.sess().contains_name(&it.attrs, sym::no_mangle) => {\n+            hir::ItemKind::Static(..) if !cx.sess().contains_name(attrs, sym::no_mangle) => {\n                 NonUpperCaseGlobals::check_upper_case(cx, \"static variable\", &it.ident);\n             }\n             hir::ItemKind::Const(..) => {"}, {"sha": "9e1ac33368c7fdad810b923f1455f56feebe34f9", "filename": "compiler/rustc_metadata/src/link_args.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_metadata%2Fsrc%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_metadata%2Fsrc%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flink_args.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -36,7 +36,9 @@ impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n \n         // First, add all of the custom #[link_args] attributes\n         let sess = &self.tcx.sess;\n-        for m in it.attrs.iter().filter(|a| sess.check_name(a, sym::link_args)) {\n+        for m in\n+            self.tcx.hir().attrs(it.hir_id()).iter().filter(|a| sess.check_name(a, sym::link_args))\n+        {\n             if let Some(linkarg) = m.value_str() {\n                 self.add_link_args(linkarg);\n             }"}, {"sha": "523e016eeb9f2726dbc700504b8d7634261de200", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -44,7 +44,8 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n \n         // Process all of the #[link(..)]-style arguments\n         let sess = &self.tcx.sess;\n-        for m in it.attrs.iter().filter(|a| sess.check_name(a, sym::link)) {\n+        for m in self.tcx.hir().attrs(it.hir_id()).iter().filter(|a| sess.check_name(a, sym::link))\n+        {\n             let items = match m.meta_item_list() {\n                 Some(item) => item,\n                 None => continue,"}, {"sha": "57848208f945e923cbaaaecb4e29783d069a5309", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -80,10 +80,11 @@ fn entry_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<(LocalDefId, EntryFnType)\n \n // Beware, this is duplicated in `librustc_builtin_macros/test_harness.rs`\n // (with `ast::Item`), so make sure to keep them in sync.\n-fn entry_point_type(sess: &Session, item: &Item<'_>, at_root: bool) -> EntryPointType {\n-    if sess.contains_name(&item.attrs, sym::start) {\n+fn entry_point_type(ctxt: &EntryContext<'_, '_>, item: &Item<'_>, at_root: bool) -> EntryPointType {\n+    let attrs = ctxt.map.attrs(item.hir_id());\n+    if ctxt.session.contains_name(attrs, sym::start) {\n         EntryPointType::Start\n-    } else if sess.contains_name(&item.attrs, sym::main) {\n+    } else if ctxt.session.contains_name(attrs, sym::main) {\n         EntryPointType::MainAttr\n     } else if item.ident.name == sym::main {\n         if at_root {\n@@ -103,13 +104,14 @@ fn throw_attr_err(sess: &Session, span: Span, attr: &str) {\n }\n \n fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n-    match entry_point_type(&ctxt.session, item, at_root) {\n+    match entry_point_type(ctxt, item, at_root) {\n         EntryPointType::None => (),\n         _ if !matches!(item.kind, ItemKind::Fn(..)) => {\n-            if let Some(attr) = ctxt.session.find_by_name(item.attrs, sym::start) {\n+            let attrs = ctxt.map.attrs(item.hir_id());\n+            if let Some(attr) = ctxt.session.find_by_name(attrs, sym::start) {\n                 throw_attr_err(&ctxt.session, attr.span, \"start\");\n             }\n-            if let Some(attr) = ctxt.session.find_by_name(item.attrs, sym::main) {\n+            if let Some(attr) = ctxt.session.find_by_name(attrs, sym::main) {\n                 throw_attr_err(&ctxt.session, attr.span, \"main\");\n             }\n         }"}, {"sha": "3e957aabd776329ddd0d336f8202616c29b09497", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -751,8 +751,9 @@ impl Visitor<'tcx> for Checker<'tcx> {\n                     // error if all involved types and traits are stable, because\n                     // it will have no effect.\n                     // See: https://github.com/rust-lang/rust/issues/55436\n+                    let attrs = self.tcx.hir().attrs(item.hir_id());\n                     if let (Some((Stability { level: attr::Unstable { .. }, .. }, span)), _) =\n-                        attr::find_stability(&self.tcx.sess, &item.attrs, item.span)\n+                        attr::find_stability(&self.tcx.sess, attrs, item.span)\n                     {\n                         let mut c = CheckTraitImplStable { tcx: self.tcx, fully_stable: true };\n                         c.visit_ty(self_ty);"}, {"sha": "a49afa35e4624bd2ad4379087e75531da93f240a", "filename": "compiler/rustc_plugin_impl/src/build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_plugin_impl%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_plugin_impl%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_plugin_impl%2Fsrc%2Fbuild.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -16,7 +16,8 @@ struct RegistrarFinder<'tcx> {\n impl<'v, 'tcx> ItemLikeVisitor<'v> for RegistrarFinder<'tcx> {\n     fn visit_item(&mut self, item: &hir::Item<'_>) {\n         if let hir::ItemKind::Fn(..) = item.kind {\n-            if self.tcx.sess.contains_name(&item.attrs, sym::plugin_registrar) {\n+            let attrs = self.tcx.hir().attrs(item.hir_id());\n+            if self.tcx.sess.contains_name(attrs, sym::plugin_registrar) {\n                 self.registrars.push((item.def_id, item.span));\n             }\n         }"}, {"sha": "4f92532e3a698e5424ecef765d6e3657113eb257", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -1239,7 +1239,8 @@ fn compute_object_lifetime_defaults(tcx: TyCtxt<'_>) -> HirIdMap<Vec<ObjectLifet\n                 let result = object_lifetime_defaults_for_item(tcx, generics);\n \n                 // Debugging aid.\n-                if tcx.sess.contains_name(&item.attrs, sym::rustc_object_lifetime_default) {\n+                let attrs = tcx.hir().attrs(item.hir_id());\n+                if tcx.sess.contains_name(attrs, sym::rustc_object_lifetime_default) {\n                     let object_lifetime_default_reprs: String = result\n                         .iter()\n                         .map(|set| match *set {"}, {"sha": "f943753183a547e1a489c7b8dd2e5a96d72a04ee", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -496,6 +496,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n \n         if !self.span.filter_generated(item.ident.span) {\n             let span = self.span_from_span(item.ident.span);\n+            let attrs = self.tcx.hir().attrs(item.hir_id());\n             self.dumper.dump_def(\n                 &access_from!(self.save_ctxt, item, item.hir_id()),\n                 Def {\n@@ -508,9 +509,9 @@ impl<'tcx> DumpVisitor<'tcx> {\n                     parent: None,\n                     children: fields,\n                     decl_id: None,\n-                    docs: self.save_ctxt.docs_for_attrs(&item.attrs),\n+                    docs: self.save_ctxt.docs_for_attrs(attrs),\n                     sig: sig::item_signature(item, &self.save_ctxt),\n-                    attributes: lower_attributes(item.attrs.to_vec(), &self.save_ctxt),\n+                    attributes: lower_attributes(attrs.to_vec(), &self.save_ctxt),\n                 },\n             );\n         }\n@@ -671,6 +672,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n             let span = self.span_from_span(item.ident.span);\n             let children =\n                 methods.iter().map(|i| id_from_def_id(i.id.def_id.to_def_id())).collect();\n+            let attrs = self.tcx.hir().attrs(item.hir_id());\n             self.dumper.dump_def(\n                 &access_from!(self.save_ctxt, item, item.hir_id()),\n                 Def {\n@@ -683,9 +685,9 @@ impl<'tcx> DumpVisitor<'tcx> {\n                     parent: None,\n                     children,\n                     decl_id: None,\n-                    docs: self.save_ctxt.docs_for_attrs(&item.attrs),\n+                    docs: self.save_ctxt.docs_for_attrs(attrs),\n                     sig: sig::item_signature(item, &self.save_ctxt),\n-                    attributes: lower_attributes(item.attrs.to_vec(), &self.save_ctxt),\n+                    attributes: lower_attributes(attrs.to_vec(), &self.save_ctxt),\n                 },\n             );\n         }\n@@ -1260,6 +1262,7 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                 if !self.span.filter_generated(item.ident.span) {\n                     let span = self.span_from_span(item.ident.span);\n                     let id = id_from_def_id(item.def_id.to_def_id());\n+                    let attrs = self.tcx.hir().attrs(item.hir_id());\n \n                     self.dumper.dump_def(\n                         &access_from!(self.save_ctxt, item, item.hir_id()),\n@@ -1273,9 +1276,9 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                             parent: None,\n                             children: vec![],\n                             decl_id: None,\n-                            docs: self.save_ctxt.docs_for_attrs(&item.attrs),\n+                            docs: self.save_ctxt.docs_for_attrs(attrs),\n                             sig: sig::item_signature(item, &self.save_ctxt),\n-                            attributes: lower_attributes(item.attrs.to_vec(), &self.save_ctxt),\n+                            attributes: lower_attributes(attrs.to_vec(), &self.save_ctxt),\n                         },\n                     );\n                 }"}, {"sha": "042f3183796d3584a34bc6143f00f253f8be343f", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -203,6 +203,7 @@ impl<'tcx> SaveContext<'tcx> {\n \n     pub fn get_item_data(&self, item: &hir::Item<'_>) -> Option<Data> {\n         let def_id = item.def_id.to_def_id();\n+        let attrs = self.tcx.hir().attrs(item.hir_id());\n         match item.kind {\n             hir::ItemKind::Fn(ref sig, ref generics, _) => {\n                 let qualname = format!(\"::{}\", self.tcx.def_path_str(def_id));\n@@ -225,9 +226,9 @@ impl<'tcx> SaveContext<'tcx> {\n                     parent: None,\n                     children: vec![],\n                     decl_id: None,\n-                    docs: self.docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(attrs),\n                     sig: sig::item_signature(item, self),\n-                    attributes: lower_attributes(item.attrs.to_vec(), self),\n+                    attributes: lower_attributes(attrs.to_vec(), self),\n                 }))\n             }\n             hir::ItemKind::Static(ref typ, ..) => {\n@@ -248,9 +249,9 @@ impl<'tcx> SaveContext<'tcx> {\n                     parent: None,\n                     children: vec![],\n                     decl_id: None,\n-                    docs: self.docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(attrs),\n                     sig: sig::item_signature(item, self),\n-                    attributes: lower_attributes(item.attrs.to_vec(), self),\n+                    attributes: lower_attributes(attrs.to_vec(), self),\n                 }))\n             }\n             hir::ItemKind::Const(ref typ, _) => {\n@@ -270,9 +271,9 @@ impl<'tcx> SaveContext<'tcx> {\n                     parent: None,\n                     children: vec![],\n                     decl_id: None,\n-                    docs: self.docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(attrs),\n                     sig: sig::item_signature(item, self),\n-                    attributes: lower_attributes(item.attrs.to_vec(), self),\n+                    attributes: lower_attributes(attrs.to_vec(), self),\n                 }))\n             }\n             hir::ItemKind::Mod(ref m) => {\n@@ -297,9 +298,9 @@ impl<'tcx> SaveContext<'tcx> {\n                         .map(|i| id_from_def_id(i.def_id.to_def_id()))\n                         .collect(),\n                     decl_id: None,\n-                    docs: self.docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(attrs),\n                     sig: sig::item_signature(item, self),\n-                    attributes: lower_attributes(item.attrs.to_vec(), self),\n+                    attributes: lower_attributes(attrs.to_vec(), self),\n                 }))\n             }\n             hir::ItemKind::Enum(ref def, ref generics) => {\n@@ -318,9 +319,9 @@ impl<'tcx> SaveContext<'tcx> {\n                     parent: None,\n                     children: def.variants.iter().map(|v| id_from_hir_id(v.id, self)).collect(),\n                     decl_id: None,\n-                    docs: self.docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(attrs),\n                     sig: sig::item_signature(item, self),\n-                    attributes: lower_attributes(item.attrs.to_vec(), self),\n+                    attributes: lower_attributes(attrs.to_vec(), self),\n                 }))\n             }\n             hir::ItemKind::Impl(hir::Impl { ref of_trait, ref self_ty, ref items, .. }) => {"}, {"sha": "13757ac41325b245a8e83f10e6235d3a83d67edc", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -1466,11 +1466,12 @@ impl intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n                     if self.span.map_or(true, |span| item.span < span) {\n                         if !item.span.from_expansion() {\n                             // Don't insert between attributes and an item.\n-                            if item.attrs.is_empty() {\n+                            let attrs = self.tcx.hir().attrs(item.hir_id());\n+                            if attrs.is_empty() {\n                                 self.span = Some(item.span.shrink_to_lo());\n                             } else {\n                                 // Find the first attribute on the item.\n-                                for attr in item.attrs {\n+                                for attr in attrs {\n                                     if self.span.map_or(true, |span| attr.span < span) {\n                                         self.span = Some(attr.span.shrink_to_lo());\n                                     }"}, {"sha": "0fc49c4ae2f4805b3fd7d1b99eff978d6d2fe8f3", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -201,7 +201,8 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: LocalDefId) {\n                         error = true;\n                     }\n \n-                    for attr in it.attrs {\n+                    let attrs = tcx.hir().attrs(main_id);\n+                    for attr in attrs {\n                         if tcx.sess.check_name(attr, sym::track_caller) {\n                             tcx.sess\n                                 .struct_span_err(\n@@ -300,7 +301,8 @@ fn check_start_fn_ty(tcx: TyCtxt<'_>, start_def_id: LocalDefId) {\n                         error = true;\n                     }\n \n-                    for attr in it.attrs {\n+                    let attrs = tcx.hir().attrs(start_id);\n+                    for attr in attrs {\n                         if tcx.sess.check_name(attr, sym::track_caller) {\n                             tcx.sess\n                                 .struct_span_err("}, {"sha": "539895feddd429463ef91cb7882d9be14b629046", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -863,7 +863,8 @@ fn clean_fn_or_proc_macro(\n     name: &mut Symbol,\n     cx: &mut DocContext<'_>,\n ) -> ItemKind {\n-    let macro_kind = item.attrs.iter().find_map(|a| {\n+    let attrs = cx.tcx.hir().attrs(item.hir_id());\n+    let macro_kind = attrs.iter().find_map(|a| {\n         if a.has_name(sym::proc_macro) {\n             Some(MacroKind::Bang)\n         } else if a.has_name(sym::proc_macro_derive) {\n@@ -877,16 +878,15 @@ fn clean_fn_or_proc_macro(\n     match macro_kind {\n         Some(kind) => {\n             if kind == MacroKind::Derive {\n-                *name = item\n-                    .attrs\n+                *name = attrs\n                     .lists(sym::proc_macro_derive)\n                     .find_map(|mi| mi.ident())\n                     .expect(\"proc-macro derives require a name\")\n                     .name;\n             }\n \n             let mut helpers = Vec::new();\n-            for mi in item.attrs.lists(sym::proc_macro_derive) {\n+            for mi in attrs.lists(sym::proc_macro_derive) {\n                 if !mi.has_name(sym::attributes) {\n                     continue;\n                 }\n@@ -2102,8 +2102,9 @@ fn clean_extern_crate(\n     let cnum = cx.tcx.extern_mod_stmt_cnum(krate.def_id).unwrap_or(LOCAL_CRATE);\n     // this is the ID of the crate itself\n     let crate_def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n+    let attrs = cx.tcx.hir().attrs(krate.hir_id());\n     let please_inline = krate.vis.node.is_pub()\n-        && krate.attrs.iter().any(|a| {\n+        && attrs.iter().any(|a| {\n             a.has_name(sym::doc)\n                 && match a.meta_item_list() {\n                     Some(l) => attr::list_contains_name(&l, sym::inline),\n@@ -2121,7 +2122,7 @@ fn clean_extern_crate(\n             cx.tcx.parent_module(krate.hir_id()).to_def_id(),\n             res,\n             name,\n-            Some(krate.attrs),\n+            Some(attrs),\n             &mut visited,\n         ) {\n             return items;\n@@ -2130,7 +2131,7 @@ fn clean_extern_crate(\n     // FIXME: using `from_def_id_and_kind` breaks `rustdoc/masked` for some reason\n     vec![Item {\n         name: Some(name),\n-        attrs: box krate.attrs.clean(cx),\n+        attrs: box attrs.clean(cx),\n         source: krate.span.clean(cx),\n         def_id: crate_def_id,\n         visibility: krate.vis.clean(cx),\n@@ -2152,7 +2153,8 @@ fn clean_use_statement(\n         return Vec::new();\n     }\n \n-    let inline_attr = import.attrs.lists(sym::doc).get_word_attr(sym::inline);\n+    let attrs = cx.tcx.hir().attrs(import.hir_id());\n+    let inline_attr = attrs.lists(sym::doc).get_word_attr(sym::inline);\n     let pub_underscore = import.vis.node.is_pub() && name == kw::Underscore;\n \n     if pub_underscore {\n@@ -2174,7 +2176,7 @@ fn clean_use_statement(\n     // Don't inline doc(hidden) imports so they can be stripped at a later stage.\n     let mut denied = !import.vis.node.is_pub()\n         || pub_underscore\n-        || import.attrs.iter().any(|a| {\n+        || attrs.iter().any(|a| {\n             a.has_name(sym::doc)\n                 && match a.meta_item_list() {\n                     Some(l) => {\n@@ -2214,7 +2216,7 @@ fn clean_use_statement(\n                 cx.tcx.parent_module(import.hir_id()).to_def_id(),\n                 path.res,\n                 name,\n-                Some(import.attrs),\n+                Some(attrs),\n                 &mut visited,\n             ) {\n                 items.push(Item::from_def_id_and_parts("}, {"sha": "b6782fb75df35c62ce8252bd4aef1986125b4b69", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -285,10 +285,12 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     return;\n                 }\n \n+                let attrs = self.cx.tcx.hir().attrs(item.hir_id());\n+\n                 // If there was a private module in the current path then don't bother inlining\n                 // anything as it will probably be stripped anyway.\n                 if item.vis.node.is_pub() && self.inside_public_path {\n-                    let please_inline = item.attrs.iter().any(|item| match item.meta_item_list() {\n+                    let please_inline = attrs.iter().any(|item| match item.meta_item_list() {\n                         Some(ref list) if item.has_name(sym::doc) => {\n                             list.iter().any(|i| i.has_name(sym::inline))\n                         }"}, {"sha": "78f0846e88e7dce83dcd655f9e8103d949943533", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -276,14 +276,15 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n         if is_relevant_item(cx, item) {\n-            check_attrs(cx, item.span, item.ident.name, &item.attrs)\n+            check_attrs(cx, item.span, item.ident.name, attrs)\n         }\n         match item.kind {\n             ItemKind::ExternCrate(..) | ItemKind::Use(..) => {\n-                let skip_unused_imports = item.attrs.iter().any(|attr| attr.has_name(sym::macro_use));\n+                let skip_unused_imports = attrs.iter().any(|attr| attr.has_name(sym::macro_use));\n \n-                for attr in item.attrs {\n+                for attr in attrs {\n                     if in_external_macro(cx.sess(), attr.span) {\n                         return;\n                     }"}, {"sha": "66cf6682f8501008ec0bcbb31e6528a6eb6ffb72", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -170,7 +170,8 @@ impl<'tcx> LateLintPass<'tcx> for Derive {\n         }) = item.kind\n         {\n             let ty = cx.tcx.type_of(item.def_id);\n-            let is_automatically_derived = is_automatically_derived(&*item.attrs);\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            let is_automatically_derived = is_automatically_derived(attrs);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);\n             check_ord_partial_ord(cx, item.span, trait_ref, ty, is_automatically_derived);"}, {"sha": "23c99e45ca7fcd924461ceab2b2322bfb4a1694f", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -214,7 +214,8 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n+        let headers = check_attrs(cx, &self.valid_idents, attrs);\n         match item.kind {\n             hir::ItemKind::Fn(ref sig, _, body_id) => {\n                 if !(is_entrypoint_fn(cx, item.def_id.to_def_id()) || in_external_macro(cx.tcx.sess, item.span)) {"}, {"sha": "316f7484862803281cdcc2f96e9b3a06d5c87beb", "filename": "src/tools/clippy/clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -73,7 +73,8 @@ impl LateLintPass<'_> for ExhaustiveItems {\n         if_chain! {\n             if let ItemKind::Enum(..) | ItemKind::Struct(..) = item.kind;\n             if cx.access_levels.is_exported(item.hir_id());\n-            if !item.attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            if !attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n             then {\n                 let (lint, msg) = if let ItemKind::Struct(ref v, ..) = item.kind {\n                     if v.fields().iter().any(|f| !f.vis.node.is_pub()) {"}, {"sha": "234cb0f53aa0c26a7b77e5ee3426407d8633c7df", "filename": "src/tools/clippy/clippy_lints/src/functions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -280,7 +280,8 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        let attr = must_use_attr(&item.attrs);\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n+        let attr = must_use_attr(attrs);\n         if let hir::ItemKind::Fn(ref sig, ref _generics, ref body_id) = item.kind {\n             let is_public = cx.access_levels.is_exported(item.hir_id());\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n@@ -291,7 +292,7 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n                 check_needless_must_use(cx, &sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n                 return;\n             }\n-            if is_public && !is_proc_macro(cx.sess(), &item.attrs) && attr_by_name(&item.attrs, \"no_mangle\").is_none() {\n+            if is_public && !is_proc_macro(cx.sess(), attrs) && attr_by_name(attrs, \"no_mangle\").is_none() {\n                 check_must_use_candidate(\n                     cx,\n                     &sig.decl,"}, {"sha": "6d9c78393c8c4d2eee97df292a35372f02ee80b1", "filename": "src/tools/clippy/clippy_lints/src/macro_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -107,8 +107,8 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n         if_chain! {\n             if cx.sess().opts.edition >= Edition::Edition2018;\n             if let hir::ItemKind::Use(path, _kind) = &item.kind;\n-            if let Some(mac_attr) = item\n-                .attrs\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            if let Some(mac_attr) = attrs\n                 .iter()\n                 .find(|attr| attr.ident().map(|s| s.to_string()) == Some(\"macro_use\".to_string()));\n             if let Res::Def(DefKind::Mod, id) = path.res;"}, {"sha": "6ec4c38d0f9ccfeac5afc4c86d0a6fc3c46bba37", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -161,7 +161,8 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n         let (article, desc) = cx.tcx.article_and_description(it.def_id.to_def_id());\n \n-        self.check_missing_docs_attrs(cx, &it.attrs, it.span, article, desc);\n+        let attrs = cx.tcx.hir().attrs(it.hir_id());\n+        self.check_missing_docs_attrs(cx, attrs, it.span, article, desc);\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, trait_item: &'tcx hir::TraitItem<'_>) {"}, {"sha": "9b604471573d96852ac5772707d91925def90c11", "filename": "src/tools/clippy/clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -93,7 +93,8 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n         match it.kind {\n             hir::ItemKind::Fn(..) => {\n                 let desc = \"a function\";\n-                check_missing_inline_attrs(cx, &it.attrs, it.span, desc);\n+                let attrs = cx.tcx.hir().attrs(it.hir_id());\n+                check_missing_inline_attrs(cx, attrs, it.span, desc);\n             },\n             hir::ItemKind::Trait(ref _is_auto, ref _unsafe, ref _generics, ref _bounds, trait_items) => {\n                 // note: we need to check if the trait is exported so we can't use"}, {"sha": "1aadcfd87b60f73a1dc44626adc30300cae35d93", "filename": "src/tools/clippy/clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -115,8 +115,9 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBorrow {\n         }\n     }\n \n-    fn check_item(&mut self, _: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if is_automatically_derived(item.attrs) {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n+        if is_automatically_derived(attrs) {\n             debug_assert!(self.derived_item.is_none());\n             self.derived_item = Some(item.def_id);\n         }"}, {"sha": "aca1ed5ca6563144b4e3e9fc3a925f816a05ffd9", "filename": "src/tools/clippy/clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -35,7 +35,8 @@ impl<'tcx> LateLintPass<'tcx> for PartialEqNeImpl {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if_chain! {\n             if let ItemKind::Impl(Impl { of_trait: Some(ref trait_ref), items: impl_items, .. }) = item.kind;\n-            if !is_automatically_derived(&*item.attrs);\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            if !is_automatically_derived(attrs);\n             if let Some(eq_trait) = cx.tcx.lang_items().eq_trait();\n             if trait_ref.path.res.def_id() == eq_trait;\n             then {"}, {"sha": "07a79592a4acd749057d75d9f7302abd04771f88", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "patch": "@@ -33,7 +33,7 @@ declare_lint_pass!(DeepCodeInspector => [DEEP_CODE_INSPECTION]);\n \n impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        if !has_attr(cx.sess(), &item.attrs) {\n+        if !has_attr(cx.sess(), cx.tcx.hir().attrs(item.hir_id())) {\n             return;\n         }\n         print_item(cx, item);"}]}