{"sha": "22f057972f6b8ae3b6df47c70ba1d610c13f4218", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZjA1Nzk3MmY2YjhhZTNiNmRmNDdjNzBiYTFkNjEwYzEzZjQyMTg=", "commit": {"author": {"name": "Matthias Seiffert", "email": "matthias-seiffert@hotmail.de", "date": "2019-10-07T18:40:05Z"}, "committer": {"name": "Matthias Seiffert", "email": "matthias-seiffert@hotmail.de", "date": "2019-10-07T18:40:05Z"}, "message": "Match any expr for panic message", "tree": {"sha": "dda39d91381f75cb37c8b6f079364db0a4982d34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dda39d91381f75cb37c8b6f079364db0a4982d34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22f057972f6b8ae3b6df47c70ba1d610c13f4218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22f057972f6b8ae3b6df47c70ba1d610c13f4218", "html_url": "https://github.com/rust-lang/rust/commit/22f057972f6b8ae3b6df47c70ba1d610c13f4218", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22f057972f6b8ae3b6df47c70ba1d610c13f4218/comments", "author": {"login": "Lythenas", "id": 32217236, "node_id": "MDQ6VXNlcjMyMjE3MjM2", "avatar_url": "https://avatars.githubusercontent.com/u/32217236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lythenas", "html_url": "https://github.com/Lythenas", "followers_url": "https://api.github.com/users/Lythenas/followers", "following_url": "https://api.github.com/users/Lythenas/following{/other_user}", "gists_url": "https://api.github.com/users/Lythenas/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lythenas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lythenas/subscriptions", "organizations_url": "https://api.github.com/users/Lythenas/orgs", "repos_url": "https://api.github.com/users/Lythenas/repos", "events_url": "https://api.github.com/users/Lythenas/events{/privacy}", "received_events_url": "https://api.github.com/users/Lythenas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Lythenas", "id": 32217236, "node_id": "MDQ6VXNlcjMyMjE3MjM2", "avatar_url": "https://avatars.githubusercontent.com/u/32217236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lythenas", "html_url": "https://github.com/Lythenas", "followers_url": "https://api.github.com/users/Lythenas/followers", "following_url": "https://api.github.com/users/Lythenas/following{/other_user}", "gists_url": "https://api.github.com/users/Lythenas/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lythenas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lythenas/subscriptions", "organizations_url": "https://api.github.com/users/Lythenas/orgs", "repos_url": "https://api.github.com/users/Lythenas/repos", "events_url": "https://api.github.com/users/Lythenas/events{/privacy}", "received_events_url": "https://api.github.com/users/Lythenas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d66acc23a92a966c711382ac8b86c006fddb4fd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d66acc23a92a966c711382ac8b86c006fddb4fd2", "html_url": "https://github.com/rust-lang/rust/commit/d66acc23a92a966c711382ac8b86c006fddb4fd2"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "5bb57be00136ecc82d474e066d506d7a260cc55a", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/22f057972f6b8ae3b6df47c70ba1d610c13f4218/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f057972f6b8ae3b6df47c70ba1d610c13f4218/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=22f057972f6b8ae3b6df47c70ba1d610c13f4218", "patch": "@@ -1,12 +1,12 @@\n use crate::consts::{constant, Constant};\n use crate::utils::paths;\n-use crate::utils::{is_direct_expn_of, is_expn_of, match_def_path, resolve_node, span_help_and_lint};\n+use crate::utils::{is_direct_expn_of, is_expn_of, match_def_path, span_help_and_lint, snippet};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::LitKind;\n-use syntax::source_map::symbol::LocalInternedString;\n+use std::borrow::Cow;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `assert!(true)` and `assert!(false)` calls.\n@@ -75,7 +75,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n                         \"`assert!(true)` will be optimized out by the compiler\",\n                         \"remove it\",\n                     );\n-                } else if panic_message.starts_with(\"assertion failed: \") {\n+                } else if panic_message.is_empty() || panic_message.starts_with(\"\\\"assertion failed: \") {\n                     span_help_and_lint(\n                         cx,\n                         ASSERTIONS_ON_CONSTANTS,\n@@ -88,9 +88,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n                         cx,\n                         ASSERTIONS_ON_CONSTANTS,\n                         e.span,\n-                        &format!(\"`assert!(false, \\\"{}\\\")` should probably be replaced\", panic_message,),\n+                        &format!(\"`assert!(false, {})` should probably be replaced\", panic_message,),\n                         &format!(\n-                            \"use `panic!(\\\"{}\\\")` or `unreachable!(\\\"{}\\\")`\",\n+                            \"use `panic!({})` or `unreachable!({})`\",\n                             panic_message, panic_message,\n                         ),\n                     );\n@@ -119,7 +119,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n ///\n /// Returns the `message` argument of `begin_panic` and the value of `c` which is the\n /// first argument of `assert!`.\n-fn assert_with_message<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -> Option<(LocalInternedString, bool)> {\n+fn assert_with_message<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -> Option<(Cow<'a, str>, bool)> {\n     if_chain! {\n         if let ExprKind::Match(ref expr, ref arms, _) = expr.kind;\n         // matches { let _t = expr; _t }\n@@ -140,14 +140,12 @@ fn assert_with_message<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -\n         // function call\n         if let Some(args) = match_function_call(cx, begin_panic_call, &paths::BEGIN_PANIC);\n         if args.len() == 2;\n-        if let ExprKind::Lit(ref lit) = args[0].kind;\n-        if let LitKind::Str(ref s, _) = lit.node;\n         // bind the second argument of the `assert!` macro\n-        let panic_message = s.as_str();\n+        let panic_message_arg = snippet(cx, args[0].span, \"..\");\n         // second argument of begin_panic is irrelevant\n         // as is the second match arm\n         then {\n-            return Some((panic_message, is_true));\n+            return Some((panic_message_arg, is_true));\n         }\n     }\n     None\n@@ -164,7 +162,7 @@ fn match_function_call<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, p\n     if_chain! {\n         if let ExprKind::Call(ref fun, ref args) = expr.kind;\n         if let ExprKind::Path(ref qpath) = fun.kind;\n-        if let Some(fun_def_id) = resolve_node(cx, qpath, fun.hir_id).opt_def_id();\n+        if let Some(fun_def_id) = cx.tables.qpath_res(qpath, fun.hir_id).opt_def_id();\n         if match_def_path(cx, fun_def_id, path);\n         then {\n             return Some(&args)"}, {"sha": "60d721c2f20495367b9a8b530845dc93e89c1cbb", "filename": "tests/ui/assertions_on_constants.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22f057972f6b8ae3b6df47c70ba1d610c13f4218/tests%2Fui%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f057972f6b8ae3b6df47c70ba1d610c13f4218/tests%2Fui%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.rs?ref=22f057972f6b8ae3b6df47c70ba1d610c13f4218", "patch": "@@ -11,6 +11,9 @@ fn main() {\n     assert!(true, \"true message\");\n     assert!(false, \"false message\");\n \n+    let msg = \"panic message\";\n+    assert!(false, msg.to_uppercase());\n+\n     const B: bool = true;\n     assert!(B);\n "}, {"sha": "215012f2ad73b9ab954b3ebf571eae4f580f2a68", "filename": "tests/ui/assertions_on_constants.stderr", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/22f057972f6b8ae3b6df47c70ba1d610c13f4218/tests%2Fui%2Fassertions_on_constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22f057972f6b8ae3b6df47c70ba1d610c13f4218/tests%2Fui%2Fassertions_on_constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.stderr?ref=22f057972f6b8ae3b6df47c70ba1d610c13f4218", "patch": "@@ -31,38 +31,46 @@ LL |     assert!(false, \"false message\");\n    |\n    = help: use `panic!(\"false message\")` or `unreachable!(\"false message\")`\n \n-error: `assert!(true)` will be optimized out by the compiler\n+error: `assert!(false, msg.to_uppercase())` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:15:5\n    |\n+LL |     assert!(false, msg.to_uppercase());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `panic!(msg.to_uppercase())` or `unreachable!(msg.to_uppercase())`\n+\n+error: `assert!(true)` will be optimized out by the compiler\n+  --> $DIR/assertions_on_constants.rs:18:5\n+   |\n LL |     assert!(B);\n    |     ^^^^^^^^^^^\n    |\n    = help: remove it\n \n error: `assert!(false)` should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:18:5\n+  --> $DIR/assertions_on_constants.rs:21:5\n    |\n LL |     assert!(C);\n    |     ^^^^^^^^^^^\n    |\n    = help: use `panic!()` or `unreachable!()`\n \n error: `assert!(false, \"C message\")` should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:19:5\n+  --> $DIR/assertions_on_constants.rs:22:5\n    |\n LL |     assert!(C, \"C message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use `panic!(\"C message\")` or `unreachable!(\"C message\")`\n \n error: `assert!(true)` will be optimized out by the compiler\n-  --> $DIR/assertions_on_constants.rs:21:5\n+  --> $DIR/assertions_on_constants.rs:24:5\n    |\n LL |     debug_assert!(true);\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}]}