{"sha": "9db1d356878aa6384df10c75c08f21dc1540495a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYjFkMzU2ODc4YWE2Mzg0ZGYxMGM3NWMwOGYyMWRjMTU0MDQ5NWE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-14T20:54:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-23T20:20:16Z"}, "message": "collections: Deprecate shift/unshift\n\nUse insert/remove instead.", "tree": {"sha": "88f40068ab593faa35f89eace1c56a4eb94a717c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88f40068ab593faa35f89eace1c56a4eb94a717c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9db1d356878aa6384df10c75c08f21dc1540495a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9db1d356878aa6384df10c75c08f21dc1540495a", "html_url": "https://github.com/rust-lang/rust/commit/9db1d356878aa6384df10c75c08f21dc1540495a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9db1d356878aa6384df10c75c08f21dc1540495a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94e42c2d896cd26c1a48fa4a1748f2c62089fc2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/94e42c2d896cd26c1a48fa4a1748f2c62089fc2a", "html_url": "https://github.com/rust-lang/rust/commit/94e42c2d896cd26c1a48fa4a1748f2c62089fc2a"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "6720b9a530f230c509df0c17ba6d09fa4d30e336", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9db1d356878aa6384df10c75c08f21dc1540495a/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db1d356878aa6384df10c75c08f21dc1540495a/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=9db1d356878aa6384df10c75c08f21dc1540495a", "patch": "@@ -1178,7 +1178,7 @@ fn make_run_args(config: &Config, props: &TestProps, testfile: &Path) ->\n     // Add the arguments in the run_flags directive\n     args.push_all_move(split_maybe_args(&props.run_flags));\n \n-    let prog = args.shift().unwrap();\n+    let prog = args.remove(0).unwrap();\n     return ProcArgs {\n         prog: prog,\n         args: args,"}, {"sha": "1f2b7617dfbb9444e1f43fcea835dcaec1379f14", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9db1d356878aa6384df10c75c08f21dc1540495a/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db1d356878aa6384df10c75c08f21dc1540495a/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=9db1d356878aa6384df10c75c08f21dc1540495a", "patch": "@@ -987,6 +987,7 @@ impl<T> Vec<T> {\n     /// assert_eq!(vec, vec![4, 1, 2, 3]);\n     /// ```\n     #[inline]\n+    #[deprecated = \"use insert(0, ...)\"]\n     pub fn unshift(&mut self, element: T) {\n         self.insert(0, element)\n     }\n@@ -1007,6 +1008,7 @@ impl<T> Vec<T> {\n     /// assert_eq!(vec, vec![2, 3]);\n     /// ```\n     #[inline]\n+    #[deprecated = \"use remove(0)\"]\n     pub fn shift(&mut self) -> Option<T> {\n         self.remove(0)\n     }"}, {"sha": "a1fd62cecbed973514e937e57b57c5e863d8ef26", "filename": "src/libregex/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9db1d356878aa6384df10c75c08f21dc1540495a/src%2Flibregex%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db1d356878aa6384df10c75c08f21dc1540495a/src%2Flibregex%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse.rs?ref=9db1d356878aa6384df10c75c08f21dc1540495a", "patch": "@@ -998,7 +998,7 @@ fn concat_flatten(x: Ast, y: Ast) -> Ast {\n     match (x, y) {\n         (Cat(mut xs), Cat(ys)) => { xs.push_all_move(ys); Cat(xs) }\n         (Cat(mut xs), ast) => { xs.push(ast); Cat(xs) }\n-        (ast, Cat(mut xs)) => { xs.unshift(ast); Cat(xs) }\n+        (ast, Cat(mut xs)) => { xs.insert(0, ast); Cat(xs) }\n         (ast1, ast2) => Cat(vec!(ast1, ast2)),\n     }\n }"}, {"sha": "b992a11bc64830764041a68198ae7b2b91b472dd", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9db1d356878aa6384df10c75c08f21dc1540495a/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db1d356878aa6384df10c75c08f21dc1540495a/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=9db1d356878aa6384df10c75c08f21dc1540495a", "patch": "@@ -361,7 +361,7 @@ fn rust_input(cratefile: &str, externs: core::Externs, matches: &getopts::Matche\n     }\n     if default_passes {\n         for name in DEFAULT_PASSES.iter().rev() {\n-            passes.unshift(name.to_string());\n+            passes.insert(0, name.to_string());\n         }\n     }\n "}, {"sha": "416018cadd2a883b4d0d379b871e4f13380a2f12", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9db1d356878aa6384df10c75c08f21dc1540495a/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db1d356878aa6384df10c75c08f21dc1540495a/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=9db1d356878aa6384df10c75c08f21dc1540495a", "patch": "@@ -136,7 +136,7 @@ pub fn test(input: &str, libs: HashSet<Path>, externs: core::Externs,\n \n     let mut collector = Collector::new(input.to_string(), libs, externs, true);\n     find_testable_code(input_str.as_slice(), &mut collector);\n-    test_args.unshift(\"rustdoctest\".to_string());\n+    test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(test_args.as_slice(), collector.tests);\n     0\n }"}, {"sha": "aef6af1677ab0d67b2f32c1eb0cb9ea96b370e37", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9db1d356878aa6384df10c75c08f21dc1540495a/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db1d356878aa6384df10c75c08f21dc1540495a/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=9db1d356878aa6384df10c75c08f21dc1540495a", "patch": "@@ -97,7 +97,7 @@ pub fn run(input: &str,\n                                        false);\n     collector.fold_crate(krate);\n \n-    test_args.unshift(\"rustdoctest\".to_string());\n+    test_args.insert(0, \"rustdoctest\".to_string());\n \n     testing::test_main(test_args.as_slice(),\n                        collector.tests.move_iter().collect());"}, {"sha": "bcbcde3fba515f810af30b5634ba1f8672d9ced9", "filename": "src/librustuv/access.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9db1d356878aa6384df10c75c08f21dc1540495a/src%2Flibrustuv%2Faccess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db1d356878aa6384df10c75c08f21dc1540495a/src%2Flibrustuv%2Faccess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Faccess.rs?ref=9db1d356878aa6384df10c75c08f21dc1540495a", "patch": "@@ -114,7 +114,7 @@ impl<'a> Drop for Guard<'a> {\n             mem::transmute(self.access.inner.get())\n         };\n \n-        match inner.queue.shift() {\n+        match inner.queue.remove(0) {\n             // Here we have found a task that was waiting for access, and we\n             // current have the \"access lock\" we need to relinquish access to\n             // this sleeping task."}, {"sha": "1410f225a298b0e28464d19afb63aaa3e9f0fdf2", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9db1d356878aa6384df10c75c08f21dc1540495a/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db1d356878aa6384df10c75c08f21dc1540495a/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=9db1d356878aa6384df10c75c08f21dc1540495a", "patch": "@@ -514,12 +514,12 @@ fn format(val: Param, op: FormatOp, flags: Flags) -> Result<Vec<u8> ,String> {\n                 FormatDigit => {\n                     if flags.space && !(s[0] == '-' as u8 ||\n                                         s[0] == '+' as u8) {\n-                        s.unshift(' ' as u8);\n+                        s.insert(0, ' ' as u8);\n                     }\n                 }\n                 FormatOctal => {\n                     if flags.alternate && s[0] != '0' as u8 {\n-                        s.unshift('0' as u8);\n+                        s.insert(0, '0' as u8);\n                     }\n                 }\n                 FormatHex => {"}]}