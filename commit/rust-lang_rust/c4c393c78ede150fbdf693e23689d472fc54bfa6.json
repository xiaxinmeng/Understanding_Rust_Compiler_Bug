{"sha": "c4c393c78ede150fbdf693e23689d472fc54bfa6", "node_id": "C_kwDOAAsO6NoAKGM0YzM5M2M3OGVkZTE1MGZiZGY2OTNlMjM2ODlkNDcyZmM1NGJmYTY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-05T12:01:37Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-05T12:01:37Z"}, "message": "Update portable-simd", "tree": {"sha": "e94e7cfea78a8ffc248521e044c2c732a11f49ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e94e7cfea78a8ffc248521e044c2c732a11f49ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4c393c78ede150fbdf693e23689d472fc54bfa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4c393c78ede150fbdf693e23689d472fc54bfa6", "html_url": "https://github.com/rust-lang/rust/commit/c4c393c78ede150fbdf693e23689d472fc54bfa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4c393c78ede150fbdf693e23689d472fc54bfa6/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f260a953b583fdca533d57f92639d69024c262b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f260a953b583fdca533d57f92639d69024c262b", "html_url": "https://github.com/rust-lang/rust/commit/7f260a953b583fdca533d57f92639d69024c262b"}], "stats": {"total": 233, "additions": 170, "deletions": 63}, "files": [{"sha": "b7368e8ffaba5d580655e394be051568146d5d50", "filename": "build_system/prepare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4c393c78ede150fbdf693e23689d472fc54bfa6/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c393c78ede150fbdf693e23689d472fc54bfa6/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=c4c393c78ede150fbdf693e23689d472fc54bfa6", "patch": "@@ -41,7 +41,7 @@ pub(crate) fn prepare() {\n         \"portable-simd\",\n         \"rust-lang\",\n         \"portable-simd\",\n-        \"b8d6b6844602f80af79cd96401339ec594d472d8\",\n+        \"d5cd4a8112d958bd3a252327e0d069a6363249bd\",\n     );\n     apply_patches(\"portable-simd\", Path::new(\"portable-simd\"));\n "}, {"sha": "a1824f86ce2d76f47802f242c398da3aa26de16d", "filename": "patches/0001-portable-simd-Disable-unsupported-tests.patch", "status": "modified", "additions": 168, "deletions": 61, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/c4c393c78ede150fbdf693e23689d472fc54bfa6/patches%2F0001-portable-simd-Disable-unsupported-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/c4c393c78ede150fbdf693e23689d472fc54bfa6/patches%2F0001-portable-simd-Disable-unsupported-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0001-portable-simd-Disable-unsupported-tests.patch?ref=c4c393c78ede150fbdf693e23689d472fc54bfa6", "patch": "@@ -1,80 +1,188 @@\n-From 97c473937382a5b5858d9cce3c947855d23b2dc5 Mon Sep 17 00:00:00 2001\n+From 82f597cf81b169b0e72a576ac8751f598c059c48 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n Date: Thu, 18 Nov 2021 19:28:40 +0100\n Subject: [PATCH] Disable unsupported tests\n \n ---\n- crates/core_simd/src/math.rs         | 6 ++++++\n- crates/core_simd/src/vector.rs       | 2 ++\n- crates/core_simd/tests/masks.rs      | 2 ++\n- crates/core_simd/tests/ops_macros.rs | 4 ++++\n- 4 files changed, 14 insertions(+)\n+ crates/core_simd/src/elements/int.rs     | 8 ++++++++\n+ crates/core_simd/src/elements/uint.rs    | 4 ++++\n+ crates/core_simd/src/masks/full_masks.rs | 9 +++++++++\n+ crates/core_simd/src/vector.rs           | 2 ++\n+ crates/core_simd/tests/masks.rs          | 2 ++\n+ 5 files changed, 25 insertions(+)\n \n-diff --git a/crates/core_simd/src/math.rs b/crates/core_simd/src/math.rs\n-index 2bae414..2f87499 100644\n---- a/crates/core_simd/src/math.rs\n-+++ b/crates/core_simd/src/math.rs\n-@@ -5,6 +5,7 @@ macro_rules! impl_uint_arith {\n-     ($($ty:ty),+) => {\n-         $( impl<const LANES: usize> Simd<$ty, LANES> where LaneCount<LANES>: SupportedLaneCount {\n+diff --git a/crates/core_simd/src/elements/int.rs b/crates/core_simd/src/elements/int.rs\n+index 9b8c37e..ea95f08 100644\n+--- a/crates/core_simd/src/elements/int.rs\n++++ b/crates/core_simd/src/elements/int.rs\n+@@ -11,6 +11,7 @@ pub trait SimdInt: Copy + Sealed {\n+     /// Scalar type contained by this SIMD vector type.\n+     type Scalar;\n  \n-+            /*\n-             /// Lanewise saturating add.\n-             ///\n-             /// # Examples\n-@@ -43,6 +44,7 @@ macro_rules! impl_uint_arith {\n-             pub fn saturating_sub(self, second: Self) -> Self {\n-                 unsafe { simd_saturating_sub(self, second) }\n-             }\n-+            */\n-         })+\n-     }\n- }\n-@@ -51,6 +53,7 @@ macro_rules! impl_int_arith {\n-     ($($ty:ty),+) => {\n-         $( impl<const LANES: usize> Simd<$ty, LANES> where LaneCount<LANES>: SupportedLaneCount {\n++    /*\n+     /// Lanewise saturating add.\n+     ///\n+     /// # Examples\n+@@ -45,6 +46,7 @@ pub trait SimdInt: Copy + Sealed {\n+     /// assert_eq!(unsat, Simd::from_array([1, MAX, MIN, 0]));\n+     /// assert_eq!(sat, Simd::from_array([MIN, MIN, MIN, 0]));\n+     fn saturating_sub(self, second: Self) -> Self;\n++    */\n+ \n+     /// Lanewise absolute value, implemented in Rust.\n+     /// Every lane becomes its absolute value.\n+@@ -61,6 +63,7 @@ pub trait SimdInt: Copy + Sealed {\n+     /// ```\n+     fn abs(self) -> Self;\n+ \n++    /*\n+     /// Lanewise saturating absolute value, implemented in Rust.\n+     /// As abs(), except the MIN value becomes MAX instead of itself.\n+     ///\n+@@ -96,6 +99,7 @@ pub trait SimdInt: Copy + Sealed {\n+     /// assert_eq!(sat, Simd::from_array([MAX, 2, -3, MIN + 1]));\n+     /// ```\n+     fn saturating_neg(self) -> Self;\n++    */\n+ \n+     /// Returns true for each positive lane and false if it is zero or negative.\n+     fn is_positive(self) -> Self::Mask;\n+@@ -199,6 +203,7 @@ macro_rules! impl_trait {\n+             type Mask = Mask<<$ty as SimdElement>::Mask, LANES>;\n+             type Scalar = $ty;\n  \n +            /*\n-             /// Lanewise saturating add.\n-             ///\n-             /// # Examples\n-@@ -89,6 +92,7 @@ macro_rules! impl_int_arith {\n-             pub fn saturating_sub(self, second: Self) -> Self {\n-                 unsafe { simd_saturating_sub(self, second) }\n+             #[inline]\n+             fn saturating_add(self, second: Self) -> Self {\n+                 // Safety: `self` is a vector\n+@@ -210,6 +215,7 @@ macro_rules! impl_trait {\n+                 // Safety: `self` is a vector\n+                 unsafe { intrinsics::simd_saturating_sub(self, second) }\n              }\n +            */\n  \n-             /// Lanewise absolute value, implemented in Rust.\n-             /// Every lane becomes its absolute value.\n-@@ -109,6 +113,7 @@ macro_rules! impl_int_arith {\n+             #[inline]\n+             fn abs(self) -> Self {\n+@@ -218,6 +224,7 @@ macro_rules! impl_trait {\n                  (self^m) - m\n              }\n  \n +            /*\n-             /// Lanewise saturating absolute value, implemented in Rust.\n-             /// As abs(), except the MIN value becomes MAX instead of itself.\n-             ///\n-@@ -151,6 +156,7 @@ macro_rules! impl_int_arith {\n-             pub fn saturating_neg(self) -> Self {\n+             #[inline]\n+             fn saturating_abs(self) -> Self {\n+                 // arith shift for -1 or 0 mask based on sign bit, giving 2s complement\n+@@ -230,6 +237,7 @@ macro_rules! impl_trait {\n+             fn saturating_neg(self) -> Self {\n                  Self::splat(0).saturating_sub(self)\n              }\n +            */\n-         })+\n+ \n+             #[inline]\n+             fn is_positive(self) -> Self::Mask {\n+diff --git a/crates/core_simd/src/elements/uint.rs b/crates/core_simd/src/elements/uint.rs\n+index 21e7e76..0d6dee2 100644\n+--- a/crates/core_simd/src/elements/uint.rs\n++++ b/crates/core_simd/src/elements/uint.rs\n+@@ -6,6 +6,7 @@ pub trait SimdUint: Copy + Sealed {\n+     /// Scalar type contained by this SIMD vector type.\n+     type Scalar;\n+ \n++    /*\n+     /// Lanewise saturating add.\n+     ///\n+     /// # Examples\n+@@ -40,6 +41,7 @@ pub trait SimdUint: Copy + Sealed {\n+     /// assert_eq!(unsat, Simd::from_array([3, 2, 1, 0]));\n+     /// assert_eq!(sat, Simd::splat(0));\n+     fn saturating_sub(self, second: Self) -> Self;\n++    */\n+ \n+     /// Returns the sum of the lanes of the vector, with wrapping addition.\n+     fn reduce_sum(self) -> Self::Scalar;\n+@@ -78,6 +80,7 @@ macro_rules! impl_trait {\n+         {\n+             type Scalar = $ty;\n+ \n++            /*\n+             #[inline]\n+             fn saturating_add(self, second: Self) -> Self {\n+                 // Safety: `self` is a vector\n+@@ -89,6 +92,7 @@ macro_rules! impl_trait {\n+                 // Safety: `self` is a vector\n+                 unsafe { intrinsics::simd_saturating_sub(self, second) }\n+             }\n++            */\n+ \n+             #[inline]\n+             fn reduce_sum(self) -> Self::Scalar {\n+diff --git a/crates/core_simd/src/masks/full_masks.rs b/crates/core_simd/src/masks/full_masks.rs\n+index adf0fcb..5b10292 100644\n+--- a/crates/core_simd/src/masks/full_masks.rs\n++++ b/crates/core_simd/src/masks/full_masks.rs\n+@@ -150,6 +150,7 @@ where\n+         super::Mask<T, LANES>: ToBitMaskArray,\n+         [(); <super::Mask<T, LANES> as ToBitMaskArray>::BYTES]: Sized,\n+     {\n++        /*\n+         assert_eq!(<super::Mask<T, LANES> as ToBitMaskArray>::BYTES, N);\n+ \n+         // Safety: N is the correct bitmask size\n+@@ -170,6 +171,8 @@ where\n+ \n+             bitmask\n+         }\n++        */\n++        panic!();\n      }\n- }\n+ \n+     #[cfg(feature = \"generic_const_exprs\")]\n+@@ -209,6 +212,7 @@ where\n+     where\n+         super::Mask<T, LANES>: ToBitMask<BitMask = U>,\n+     {\n++        /*\n+         // Safety: U is required to be the appropriate bitmask type\n+         let bitmask: U = unsafe { intrinsics::simd_bitmask(self.0) };\n+ \n+@@ -218,6 +222,8 @@ where\n+         } else {\n+             bitmask\n+         }\n++        */\n++        panic!();\n+     }\n+ \n+     #[inline]\n+@@ -225,6 +231,7 @@ where\n+     where\n+         super::Mask<T, LANES>: ToBitMask<BitMask = U>,\n+     {\n++        /*\n+         // LLVM assumes bit order should match endianness\n+         let bitmask = if cfg!(target_endian = \"big\") {\n+             bitmask.reverse_bits(LANES)\n+@@ -240,6 +247,8 @@ where\n+                 Self::splat(false).to_int(),\n+             ))\n+         }\n++        */\n++        panic!();\n+     }\n+ \n+     #[inline]\n diff --git a/crates/core_simd/src/vector.rs b/crates/core_simd/src/vector.rs\n-index 7c5ec2b..c8631e8 100644\n+index e8e8f68..7173c24 100644\n --- a/crates/core_simd/src/vector.rs\n +++ b/crates/core_simd/src/vector.rs\n-@@ -75,6 +75,7 @@ where\n-         Self(array)\n+@@ -250,6 +250,7 @@ where\n+         unsafe { intrinsics::simd_cast(self) }\n      }\n  \n +    /*\n      /// Reads from potentially discontiguous indices in `slice` to construct a SIMD vector.\n      /// If an index is out-of-bounds, the lane is instead selected from the `or` vector.\n      ///\n-@@ -297,6 +298,7 @@ where\n+@@ -473,6 +474,7 @@ where\n              // Cleared \u2622\ufe0f *mut T Zone\n          }\n      }\n@@ -83,25 +191,24 @@ index 7c5ec2b..c8631e8 100644\n  \n  impl<T, const LANES: usize> Copy for Simd<T, LANES>\n diff --git a/crates/core_simd/tests/masks.rs b/crates/core_simd/tests/masks.rs\n-index 6a8ecd3..68fcb49 100644\n+index 673d0db..0d68b01 100644\n --- a/crates/core_simd/tests/masks.rs\n +++ b/crates/core_simd/tests/masks.rs\n-@@ -68,6 +68,7 @@ macro_rules! test_mask_api {\n-                 assert_eq!(core_simd::Mask::<$type, 8>::from_int(int), mask);\n+@@ -59,6 +59,7 @@ macro_rules! test_mask_api {\n+                 assert!(!v.all());\n              }\n  \n +            /*\n-             #[cfg(feature = \"generic_const_exprs\")]\n              #[test]\n-             fn roundtrip_bitmask_conversion() {\n-@@ -80,6 +81,7 @@ macro_rules! test_mask_api {\n-                 assert_eq!(bitmask, [0b01001001, 0b10000011]);\n-                 assert_eq!(core_simd::Mask::<$type, 16>::from_bitmask(bitmask), mask);\n+             fn roundtrip_int_conversion() {\n+                 let values = [true, false, false, true, false, false, true, false];\n+@@ -99,6 +100,7 @@ macro_rules! test_mask_api {\n+                 assert_eq!(bitmask, 0b01);\n+                 assert_eq!(core_simd::Mask::<$type, 2>::from_bitmask(bitmask), mask);\n              }\n +            */\n-         }\n-     }\n- }\n+ \n+             #[test]\n+             fn cast() {\n -- \n-2.26.2.7.g19db9cfb68\n-\n+2.25.1"}, {"sha": "a8aefcf30b5e1412b266ba3b2d4565d480281dec", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4c393c78ede150fbdf693e23689d472fc54bfa6/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c393c78ede150fbdf693e23689d472fc54bfa6/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=c4c393c78ede150fbdf693e23689d472fc54bfa6", "patch": "@@ -26,7 +26,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n     span: Span,\n ) {\n     match intrinsic {\n-        sym::simd_cast => {\n+        sym::simd_as | sym::simd_cast => {\n             intrinsic_args!(fx, args => (a); intrinsic);\n \n             if !a.layout().ty.is_simd() {"}]}