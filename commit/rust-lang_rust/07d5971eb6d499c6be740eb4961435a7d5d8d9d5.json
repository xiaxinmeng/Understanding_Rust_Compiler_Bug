{"sha": "07d5971eb6d499c6be740eb4961435a7d5d8d9d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZDU5NzFlYjZkNDk5YzZiZTc0MGViNDk2MTQzNWE3ZDVkOGQ5ZDU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-16T14:04:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-16T14:04:31Z"}, "message": "move borrow-of-packed-field unsafety check out of loop", "tree": {"sha": "c4d0533687cd6f009314068d0949f3bc76f29bc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4d0533687cd6f009314068d0949f3bc76f29bc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07d5971eb6d499c6be740eb4961435a7d5d8d9d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07d5971eb6d499c6be740eb4961435a7d5d8d9d5", "html_url": "https://github.com/rust-lang/rust/commit/07d5971eb6d499c6be740eb4961435a7d5d8d9d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07d5971eb6d499c6be740eb4961435a7d5d8d9d5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84539360498cab3c70a7c9114c0b8106c8e1b06b", "url": "https://api.github.com/repos/rust-lang/rust/commits/84539360498cab3c70a7c9114c0b8106c8e1b06b", "html_url": "https://github.com/rust-lang/rust/commit/84539360498cab3c70a7c9114c0b8106c8e1b06b"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "f7c6396556d65658d989aa901f9df39bda3460ab", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/07d5971eb6d499c6be740eb4961435a7d5d8d9d5/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07d5971eb6d499c6be740eb4961435a7d5d8d9d5/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=07d5971eb6d499c6be740eb4961435a7d5d8d9d5", "patch": "@@ -184,7 +184,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n     }\n \n     fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, _location: Location) {\n-        // prevent\n+        // On types with `scalar_valid_range`, prevent\n         // * `&mut x.field`\n         // * `x.field = y;`\n         // * `&x.field` if `field`'s type has interior mutability\n@@ -194,26 +194,26 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             self.check_mut_borrowing_layout_constrained_field(*place, context.is_mutating_use());\n         }\n \n+        if context.is_borrow() {\n+            if util::is_disaligned(self.tcx, self.body, self.param_env, *place) {\n+                let source_info = self.source_info;\n+                let lint_root = self.body.source_scopes[source_info.scope]\n+                    .local_data\n+                    .as_ref()\n+                    .assert_crate_local()\n+                    .lint_root;\n+                self.require_unsafe(\n+                    \"borrow of packed field\",\n+                    \"fields of packed structs might be misaligned: dereferencing a \\\n+                    misaligned pointer or even just creating a misaligned reference \\\n+                    is undefined behavior\",\n+                    UnsafetyViolationKind::BorrowPacked(lint_root),\n+                );\n+            }\n+        }\n+\n         for (i, elem) in place.projection.iter().enumerate() {\n             let proj_base = &place.projection[..i];\n-\n-            if context.is_borrow() {\n-                if util::is_disaligned(self.tcx, self.body, self.param_env, *place) {\n-                    let source_info = self.source_info;\n-                    let lint_root = self.body.source_scopes[source_info.scope]\n-                        .local_data\n-                        .as_ref()\n-                        .assert_crate_local()\n-                        .lint_root;\n-                    self.require_unsafe(\n-                        \"borrow of packed field\",\n-                        \"fields of packed structs might be misaligned: dereferencing a \\\n-                        misaligned pointer or even just creating a misaligned reference \\\n-                        is undefined behavior\",\n-                        UnsafetyViolationKind::BorrowPacked(lint_root),\n-                    );\n-                }\n-            }\n             let old_source_info = self.source_info;\n             if let [] = proj_base {\n                 let decl = &self.body.local_decls[place.local];"}]}