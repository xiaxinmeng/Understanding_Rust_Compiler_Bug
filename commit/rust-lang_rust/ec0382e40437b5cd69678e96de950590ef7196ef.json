{"sha": "ec0382e40437b5cd69678e96de950590ef7196ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMDM4MmU0MDQzN2I1Y2Q2OTY3OGU5NmRlOTUwNTkwZWY3MTk2ZWY=", "commit": {"author": {"name": "Alessandro Decina", "email": "alessandro.d@gmail.com", "date": "2021-05-29T11:53:06Z"}, "committer": {"name": "Alessandro Decina", "email": "alessandro.d@gmail.com", "date": "2021-05-29T11:53:06Z"}, "message": "BPF: add assembly test", "tree": {"sha": "3e640dff0c052474020cca2b68985b563efce751", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e640dff0c052474020cca2b68985b563efce751"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec0382e40437b5cd69678e96de950590ef7196ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec0382e40437b5cd69678e96de950590ef7196ef", "html_url": "https://github.com/rust-lang/rust/commit/ec0382e40437b5cd69678e96de950590ef7196ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec0382e40437b5cd69678e96de950590ef7196ef/comments", "author": {"login": "alessandrod", "id": 62002, "node_id": "MDQ6VXNlcjYyMDAy", "avatar_url": "https://avatars.githubusercontent.com/u/62002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alessandrod", "html_url": "https://github.com/alessandrod", "followers_url": "https://api.github.com/users/alessandrod/followers", "following_url": "https://api.github.com/users/alessandrod/following{/other_user}", "gists_url": "https://api.github.com/users/alessandrod/gists{/gist_id}", "starred_url": "https://api.github.com/users/alessandrod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alessandrod/subscriptions", "organizations_url": "https://api.github.com/users/alessandrod/orgs", "repos_url": "https://api.github.com/users/alessandrod/repos", "events_url": "https://api.github.com/users/alessandrod/events{/privacy}", "received_events_url": "https://api.github.com/users/alessandrod/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alessandrod", "id": 62002, "node_id": "MDQ6VXNlcjYyMDAy", "avatar_url": "https://avatars.githubusercontent.com/u/62002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alessandrod", "html_url": "https://github.com/alessandrod", "followers_url": "https://api.github.com/users/alessandrod/followers", "following_url": "https://api.github.com/users/alessandrod/following{/other_user}", "gists_url": "https://api.github.com/users/alessandrod/gists{/gist_id}", "starred_url": "https://api.github.com/users/alessandrod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alessandrod/subscriptions", "organizations_url": "https://api.github.com/users/alessandrod/orgs", "repos_url": "https://api.github.com/users/alessandrod/repos", "events_url": "https://api.github.com/users/alessandrod/events{/privacy}", "received_events_url": "https://api.github.com/users/alessandrod/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b27795992de5a3055512f7e64a226c61f9d0476", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b27795992de5a3055512f7e64a226c61f9d0476", "html_url": "https://github.com/rust-lang/rust/commit/6b27795992de5a3055512f7e64a226c61f9d0476"}], "stats": {"total": 154, "additions": 154, "deletions": 0}, "files": [{"sha": "cc3863d03cd462a2ecc0c360ca904cbdb0247373", "filename": "src/test/assembly/asm/bpf-types.rs", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/ec0382e40437b5cd69678e96de950590ef7196ef/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec0382e40437b5cd69678e96de950590ef7196ef/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs?ref=ec0382e40437b5cd69678e96de950590ef7196ef", "patch": "@@ -0,0 +1,154 @@\n+// min-llvm-version: 10.0.1\n+// assembly-output: emit-asm\n+// compile-flags: --target bpfel-unknown-none -C target_feature=+alu32\n+// needs-llvm-components: bpf\n+\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n+#![crate_type = \"rlib\"]\n+#![no_core]\n+#![allow(asm_sub_register, non_camel_case_types)]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! stringify {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+type ptr = *const u64;\n+\n+impl Copy for i8 {}\n+impl Copy for i16 {}\n+impl Copy for i32 {}\n+impl Copy for i64 {}\n+impl Copy for ptr {}\n+\n+macro_rules! check {\n+    ($func:ident $ty:ident $class:ident) => {\n+        #[no_mangle]\n+        pub unsafe fn $func(x: $ty) -> $ty {\n+            let y;\n+            asm!(\"{} = {}\", out($class) y, in($class) x);\n+            y\n+        }\n+    };\n+}\n+\n+macro_rules! check_reg {\n+    ($func:ident $ty:ident $reg:tt) => {\n+        #[no_mangle]\n+        pub unsafe fn $func(x: $ty) -> $ty {\n+            let y;\n+            asm!(concat!($reg, \" = \", $reg), lateout($reg) y, in($reg) x);\n+            y\n+        }\n+    };\n+}\n+\n+extern \"C\" {\n+    fn extern_func();\n+}\n+\n+// CHECK-LABEL: sym_fn\n+// CHECK: #APP\n+// CHECK: call extern_func\n+// CHECK: #NO_APP\n+#[no_mangle]\n+pub unsafe fn sym_fn() {\n+    asm!(\"call {}\", sym extern_func);\n+}\n+\n+// CHECK-LABEL: reg_i8:\n+// CHECK: #APP\n+// CHECK: r{{[0-9]+}} = r{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i8 i8 reg);\n+\n+// CHECK-LABEL: reg_i16:\n+// CHECK: #APP\n+// CHECK: r{{[0-9]+}} = r{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i16 i16 reg);\n+\n+// CHECK-LABEL: reg_i32:\n+// CHECK: #APP\n+// CHECK: r{{[0-9]+}} = r{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i32 i32 reg);\n+\n+// CHECK-LABEL: reg_i64:\n+// CHECK: #APP\n+// CHECK: r{{[0-9]+}} = r{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i64 i64 reg);\n+\n+// CHECK-LABEL: wreg_i8:\n+// CHECK: #APP\n+// CHECK: w{{[0-9]+}} = w{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(wreg_i8 i8 wreg);\n+\n+// CHECK-LABEL: wreg_i16:\n+// CHECK: #APP\n+// CHECK: w{{[0-9]+}} = w{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(wreg_i16 i16 wreg);\n+\n+// CHECK-LABEL: wreg_i32:\n+// CHECK: #APP\n+// CHECK: w{{[0-9]+}} = w{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(wreg_i32 i32 wreg);\n+\n+// CHECK-LABEL: r0_i8:\n+// CHECK: #APP\n+// CHECK: r0 = r0\n+// CHECK: #NO_APP\n+check_reg!(r0_i8 i8 \"r0\");\n+\n+// CHECK-LABEL: r0_i16:\n+// CHECK: #APP\n+// CHECK: r0 = r0\n+// CHECK: #NO_APP\n+check_reg!(r0_i16 i16 \"r0\");\n+\n+// CHECK-LABEL: r0_i32:\n+// CHECK: #APP\n+// CHECK: r0 = r0\n+// CHECK: #NO_APP\n+check_reg!(r0_i32 i32 \"r0\");\n+\n+// CHECK-LABEL: r0_i64:\n+// CHECK: #APP\n+// CHECK: r0 = r0\n+// CHECK: #NO_APP\n+check_reg!(r0_i64 i64 \"r0\");\n+\n+// CHECK-LABEL: w0_i8:\n+// CHECK: #APP\n+// CHECK: w0 = w0\n+// CHECK: #NO_APP\n+check_reg!(w0_i8 i8 \"w0\");\n+\n+// CHECK-LABEL: w0_i16:\n+// CHECK: #APP\n+// CHECK: w0 = w0\n+// CHECK: #NO_APP\n+check_reg!(w0_i16 i16 \"w0\");\n+\n+// CHECK-LABEL: w0_i32:\n+// CHECK: #APP\n+// CHECK: w0 = w0\n+// CHECK: #NO_APP\n+check_reg!(w0_i32 i32 \"w0\");"}]}