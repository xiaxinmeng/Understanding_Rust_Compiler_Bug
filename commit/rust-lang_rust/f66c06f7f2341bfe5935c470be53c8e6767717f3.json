{"sha": "f66c06f7f2341bfe5935c470be53c8e6767717f3", "node_id": "C_kwDOAAsO6NoAKGY2NmMwNmY3ZjIzNDFiZmU1OTM1YzQ3MGJlNTNjOGU2NzY3NzE3ZjM", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2022-06-17T11:09:23Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2022-07-05T21:25:35Z"}, "message": "Explicit TypeVisitable implementations", "tree": {"sha": "edf22a3d57caff6f590374e645393a23647d1cba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edf22a3d57caff6f590374e645393a23647d1cba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f66c06f7f2341bfe5935c470be53c8e6767717f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEm/Nz5g9hEBdpmKVOB8rDzKfgZD8FAmLErFAACgkQB8rDzKfg\nZD/VHA//UUSpMqGReZ1lkO2UlkV4ozhEuP1hM/0wjtX4Z8+EiZZH4Mvz7CL9VTa2\nCMoJyvfC2FTLjNAGF7IdrWKVJPNylrp5PXwBEl6JhspxAzVngSz2WXO3SPzDU1Yz\noJAZO2CmFOOxcYdGZmBW/py+CEqI/QXVB08f5icV0+AcV/cTMApXYTpQ+vJq6TET\nb0g3qr9wsIRhsoNUA7Nbkw1dqcTTqYy66mveMrYB/EPmNvgdO66juoMEqzPCpSC2\n0Vp7SyPAQ4p0MaX6cZ1kcNwEUv8k5v7pi/5lf9b5WBSIZm3pJVN9rIvXv0uJBFw3\nE6mKZRQ4nK98QnBpO9CgT9l3aQGTzOElUbUUz23IqJqXzpeCov1NUk0IY4FoBcct\nr+tILsQjE/k4an9Pq+4og3LU2dAz4RG9c+5ijvLSlDTYoZjxWw4ZlWCg0YkGqvCx\nPcT3U8jAAAnoxJS+MKfOzGUfKZrEfI/rVewBoc/Vu3aiQpUBcSqARRfG9S3Rwk/Q\nQyFt/dvHv3qhEzRATfxMgrBfAYM5qmExbXcmmt1AgvG0cMcz2nbvYA+Rjq0fP2UR\nKLiA1aMLFix/to2rGBUBFcZf8+7RsrtT2R03DP+smwYkkKt43HmAD7CJruMERlVu\nvcPFzmSmDLiBncpSCCMkv4bF0ahjEnzZUltcMH1R4WrbH1ec3YA=\n=8itq\n-----END PGP SIGNATURE-----", "payload": "tree edf22a3d57caff6f590374e645393a23647d1cba\nparent 9ffdc2de8cd7fe564651a45766fe704be6d223b7\nauthor Alan Egerton <eggyal@gmail.com> 1655464163 +0100\ncommitter Alan Egerton <eggyal@gmail.com> 1657056335 +0100\n\nExplicit TypeVisitable implementations\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f66c06f7f2341bfe5935c470be53c8e6767717f3", "html_url": "https://github.com/rust-lang/rust/commit/f66c06f7f2341bfe5935c470be53c8e6767717f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f66c06f7f2341bfe5935c470be53c8e6767717f3/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ffdc2de8cd7fe564651a45766fe704be6d223b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ffdc2de8cd7fe564651a45766fe704be6d223b7", "html_url": "https://github.com/rust-lang/rust/commit/9ffdc2de8cd7fe564651a45766fe704be6d223b7"}], "stats": {"total": 421, "additions": 269, "deletions": 152}, "files": [{"sha": "c5d85d13cf04ada3a25f2d2432bcf51caaadded8", "filename": "compiler/rustc_infer/src/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f66c06f7f2341bfe5935c470be53c8e6767717f3/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66c06f7f2341bfe5935c470be53c8e6767717f3/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=f66c06f7f2341bfe5935c470be53c8e6767717f3", "patch": "@@ -2,6 +2,7 @@ use crate::traits;\n use crate::traits::project::Normalized;\n use rustc_middle::ty;\n use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::visit::TypeVisitable;\n \n use std::fmt;\n use std::ops::ControlFlow;\n@@ -68,7 +69,9 @@ impl<'tcx, O: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Obligation<'tcx\n             param_env: self.param_env.try_fold_with(folder)?,\n         })\n     }\n+}\n \n+impl<'tcx, O: TypeVisitable<'tcx>> TypeVisitable<'tcx> for traits::Obligation<'tcx, O> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.predicate.visit_with(visitor)?;\n         self.param_env.visit_with(visitor)"}, {"sha": "1b6c6bda172ca6317ca507acf6daad9975458b95", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66c06f7f2341bfe5935c470be53c8e6767717f3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66c06f7f2341bfe5935c470be53c8e6767717f3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=f66c06f7f2341bfe5935c470be53c8e6767717f3", "patch": "@@ -11,6 +11,7 @@ use crate::ty::codec::{TyDecoder, TyEncoder};\n use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable, TypeVisitor};\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n+use crate::ty::visit::TypeVisitable;\n use crate::ty::{self, List, Ty, TyCtxt};\n use crate::ty::{AdtDef, InstanceDef, ScalarInt, UserTypeAnnotationIndex};\n \n@@ -68,6 +69,7 @@ pub use terminator::*;\n \n pub mod traversal;\n mod type_foldable;\n+mod type_visitable;\n pub mod visit;\n \n pub use self::generic_graph::graphviz_safe_def_name;\n@@ -2650,7 +2652,9 @@ impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n             projs: self.projs.try_fold_with(folder)?,\n         })\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for UserTypeProjection {\n     fn visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<Vs::BreakTy> {\n         self.base.visit_with(visitor)\n         // Note: there's nothing in `self.proj` to visit."}, {"sha": "3c9850a9eb3af06e003aa964f5dd191640eb31da", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 0, "deletions": 152, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/f66c06f7f2341bfe5935c470be53c8e6767717f3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66c06f7f2341bfe5935c470be53c8e6767717f3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=f66c06f7f2341bfe5935c470be53c8e6767717f3", "patch": "@@ -89,65 +89,12 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n         };\n         Ok(Terminator { source_info: self.source_info, kind })\n     }\n-\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        use crate::mir::TerminatorKind::*;\n-\n-        match self.kind {\n-            SwitchInt { ref discr, switch_ty, .. } => {\n-                discr.visit_with(visitor)?;\n-                switch_ty.visit_with(visitor)\n-            }\n-            Drop { ref place, .. } => place.visit_with(visitor),\n-            DropAndReplace { ref place, ref value, .. } => {\n-                place.visit_with(visitor)?;\n-                value.visit_with(visitor)\n-            }\n-            Yield { ref value, .. } => value.visit_with(visitor),\n-            Call { ref func, ref args, ref destination, .. } => {\n-                destination.visit_with(visitor)?;\n-                func.visit_with(visitor)?;\n-                args.visit_with(visitor)\n-            }\n-            Assert { ref cond, ref msg, .. } => {\n-                cond.visit_with(visitor)?;\n-                use AssertKind::*;\n-                match msg {\n-                    BoundsCheck { ref len, ref index } => {\n-                        len.visit_with(visitor)?;\n-                        index.visit_with(visitor)\n-                    }\n-                    Overflow(_, l, r) => {\n-                        l.visit_with(visitor)?;\n-                        r.visit_with(visitor)\n-                    }\n-                    OverflowNeg(op) | DivisionByZero(op) | RemainderByZero(op) => {\n-                        op.visit_with(visitor)\n-                    }\n-                    ResumedAfterReturn(_) | ResumedAfterPanic(_) => ControlFlow::CONTINUE,\n-                }\n-            }\n-            InlineAsm { ref operands, .. } => operands.visit_with(visitor),\n-            Goto { .. }\n-            | Resume\n-            | Abort\n-            | Return\n-            | GeneratorDrop\n-            | Unreachable\n-            | FalseEdge { .. }\n-            | FalseUnwind { .. } => ControlFlow::CONTINUE,\n-        }\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for GeneratorKind {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n-\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::CONTINUE\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Place<'tcx> {\n@@ -157,21 +104,12 @@ impl<'tcx> TypeFoldable<'tcx> for Place<'tcx> {\n             projection: self.projection.try_fold_with(folder)?,\n         })\n     }\n-\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.local.visit_with(visitor)?;\n-        self.projection.visit_with(visitor)\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<PlaceElem<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_place_elems(v))\n     }\n-\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.iter().try_for_each(|t| t.visit_with(visitor))\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n@@ -224,55 +162,6 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n             }\n         })\n     }\n-\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        use crate::mir::Rvalue::*;\n-        match *self {\n-            Use(ref op) => op.visit_with(visitor),\n-            Repeat(ref op, _) => op.visit_with(visitor),\n-            ThreadLocalRef(did) => did.visit_with(visitor),\n-            Ref(region, _, ref place) => {\n-                region.visit_with(visitor)?;\n-                place.visit_with(visitor)\n-            }\n-            AddressOf(_, ref place) => place.visit_with(visitor),\n-            Len(ref place) => place.visit_with(visitor),\n-            Cast(_, ref op, ty) => {\n-                op.visit_with(visitor)?;\n-                ty.visit_with(visitor)\n-            }\n-            BinaryOp(_, box (ref rhs, ref lhs)) | CheckedBinaryOp(_, box (ref rhs, ref lhs)) => {\n-                rhs.visit_with(visitor)?;\n-                lhs.visit_with(visitor)\n-            }\n-            UnaryOp(_, ref val) => val.visit_with(visitor),\n-            Discriminant(ref place) => place.visit_with(visitor),\n-            NullaryOp(_, ty) => ty.visit_with(visitor),\n-            Aggregate(ref kind, ref fields) => {\n-                match **kind {\n-                    AggregateKind::Array(ty) => {\n-                        ty.visit_with(visitor)?;\n-                    }\n-                    AggregateKind::Tuple => {}\n-                    AggregateKind::Adt(_, _, substs, user_ty, _) => {\n-                        substs.visit_with(visitor)?;\n-                        user_ty.visit_with(visitor)?;\n-                    }\n-                    AggregateKind::Closure(_, substs) => {\n-                        substs.visit_with(visitor)?;\n-                    }\n-                    AggregateKind::Generator(_, substs, _) => {\n-                        substs.visit_with(visitor)?;\n-                    }\n-                }\n-                fields.visit_with(visitor)\n-            }\n-            ShallowInitBox(ref op, ty) => {\n-                op.visit_with(visitor)?;\n-                ty.visit_with(visitor)\n-            }\n-        }\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Operand<'tcx> {\n@@ -283,13 +172,6 @@ impl<'tcx> TypeFoldable<'tcx> for Operand<'tcx> {\n             Operand::Constant(c) => Operand::Constant(c.try_fold_with(folder)?),\n         })\n     }\n-\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        match *self {\n-            Operand::Copy(ref place) | Operand::Move(ref place) => place.visit_with(visitor),\n-            Operand::Constant(ref c) => c.visit_with(visitor),\n-        }\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for PlaceElem<'tcx> {\n@@ -307,43 +189,24 @@ impl<'tcx> TypeFoldable<'tcx> for PlaceElem<'tcx> {\n             Subslice { from, to, from_end } => Subslice { from, to, from_end },\n         })\n     }\n-\n-    fn visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<Vs::BreakTy> {\n-        use crate::mir::ProjectionElem::*;\n-\n-        match self {\n-            Field(_, ty) => ty.visit_with(visitor),\n-            Index(v) => v.visit_with(visitor),\n-            _ => ControlFlow::CONTINUE,\n-        }\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Field {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::CONTINUE\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for GeneratorSavedLocal {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::CONTINUE\n-    }\n }\n \n impl<'tcx, R: Idx, C: Idx> TypeFoldable<'tcx> for BitMatrix<R, C> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::CONTINUE\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n@@ -354,21 +217,13 @@ impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n             literal: self.literal.try_fold_with(folder)?,\n         })\n     }\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.literal.visit_with(visitor)?;\n-        self.user_ty.visit_with(visitor)\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ConstantKind<'tcx> {\n     #[inline(always)]\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_mir_const(self)\n     }\n-\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        visitor.visit_mir_const(*self)\n-    }\n }\n \n impl<'tcx> TypeSuperFoldable<'tcx> for ConstantKind<'tcx> {\n@@ -381,11 +236,4 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ConstantKind<'tcx> {\n             ConstantKind::Val(v, t) => Ok(ConstantKind::Val(v, t.try_fold_with(folder)?)),\n         }\n     }\n-\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        match *self {\n-            ConstantKind::Ty(c) => c.visit_with(visitor),\n-            ConstantKind::Val(_, t) => t.visit_with(visitor),\n-        }\n-    }\n }"}, {"sha": "d52ae5fac6796650299876168d274fd1ceb3e2b9", "filename": "compiler/rustc_middle/src/mir/type_visitable.rs", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/f66c06f7f2341bfe5935c470be53c8e6767717f3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66c06f7f2341bfe5935c470be53c8e6767717f3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs?ref=f66c06f7f2341bfe5935c470be53c8e6767717f3", "patch": "@@ -0,0 +1,186 @@\n+//! `TypeVisitable` implementations for MIR types\n+\n+use super::*;\n+use crate::ty;\n+\n+impl<'tcx> TypeVisitable<'tcx> for Terminator<'tcx> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        use crate::mir::TerminatorKind::*;\n+\n+        match self.kind {\n+            SwitchInt { ref discr, switch_ty, .. } => {\n+                discr.visit_with(visitor)?;\n+                switch_ty.visit_with(visitor)\n+            }\n+            Drop { ref place, .. } => place.visit_with(visitor),\n+            DropAndReplace { ref place, ref value, .. } => {\n+                place.visit_with(visitor)?;\n+                value.visit_with(visitor)\n+            }\n+            Yield { ref value, .. } => value.visit_with(visitor),\n+            Call { ref func, ref args, ref destination, .. } => {\n+                destination.visit_with(visitor)?;\n+                func.visit_with(visitor)?;\n+                args.visit_with(visitor)\n+            }\n+            Assert { ref cond, ref msg, .. } => {\n+                cond.visit_with(visitor)?;\n+                use AssertKind::*;\n+                match msg {\n+                    BoundsCheck { ref len, ref index } => {\n+                        len.visit_with(visitor)?;\n+                        index.visit_with(visitor)\n+                    }\n+                    Overflow(_, l, r) => {\n+                        l.visit_with(visitor)?;\n+                        r.visit_with(visitor)\n+                    }\n+                    OverflowNeg(op) | DivisionByZero(op) | RemainderByZero(op) => {\n+                        op.visit_with(visitor)\n+                    }\n+                    ResumedAfterReturn(_) | ResumedAfterPanic(_) => ControlFlow::CONTINUE,\n+                }\n+            }\n+            InlineAsm { ref operands, .. } => operands.visit_with(visitor),\n+            Goto { .. }\n+            | Resume\n+            | Abort\n+            | Return\n+            | GeneratorDrop\n+            | Unreachable\n+            | FalseEdge { .. }\n+            | FalseUnwind { .. } => ControlFlow::CONTINUE,\n+        }\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for GeneratorKind {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n+        ControlFlow::CONTINUE\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for Place<'tcx> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.local.visit_with(visitor)?;\n+        self.projection.visit_with(visitor)\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for &'tcx ty::List<PlaceElem<'tcx>> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.iter().try_for_each(|t| t.visit_with(visitor))\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for Rvalue<'tcx> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        use crate::mir::Rvalue::*;\n+        match *self {\n+            Use(ref op) => op.visit_with(visitor),\n+            Repeat(ref op, _) => op.visit_with(visitor),\n+            ThreadLocalRef(did) => did.visit_with(visitor),\n+            Ref(region, _, ref place) => {\n+                region.visit_with(visitor)?;\n+                place.visit_with(visitor)\n+            }\n+            AddressOf(_, ref place) => place.visit_with(visitor),\n+            Len(ref place) => place.visit_with(visitor),\n+            Cast(_, ref op, ty) => {\n+                op.visit_with(visitor)?;\n+                ty.visit_with(visitor)\n+            }\n+            BinaryOp(_, box (ref rhs, ref lhs)) | CheckedBinaryOp(_, box (ref rhs, ref lhs)) => {\n+                rhs.visit_with(visitor)?;\n+                lhs.visit_with(visitor)\n+            }\n+            UnaryOp(_, ref val) => val.visit_with(visitor),\n+            Discriminant(ref place) => place.visit_with(visitor),\n+            NullaryOp(_, ty) => ty.visit_with(visitor),\n+            Aggregate(ref kind, ref fields) => {\n+                match **kind {\n+                    AggregateKind::Array(ty) => {\n+                        ty.visit_with(visitor)?;\n+                    }\n+                    AggregateKind::Tuple => {}\n+                    AggregateKind::Adt(_, _, substs, user_ty, _) => {\n+                        substs.visit_with(visitor)?;\n+                        user_ty.visit_with(visitor)?;\n+                    }\n+                    AggregateKind::Closure(_, substs) => {\n+                        substs.visit_with(visitor)?;\n+                    }\n+                    AggregateKind::Generator(_, substs, _) => {\n+                        substs.visit_with(visitor)?;\n+                    }\n+                }\n+                fields.visit_with(visitor)\n+            }\n+            ShallowInitBox(ref op, ty) => {\n+                op.visit_with(visitor)?;\n+                ty.visit_with(visitor)\n+            }\n+        }\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for Operand<'tcx> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        match *self {\n+            Operand::Copy(ref place) | Operand::Move(ref place) => place.visit_with(visitor),\n+            Operand::Constant(ref c) => c.visit_with(visitor),\n+        }\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for PlaceElem<'tcx> {\n+    fn visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<Vs::BreakTy> {\n+        use crate::mir::ProjectionElem::*;\n+\n+        match self {\n+            Field(_, ty) => ty.visit_with(visitor),\n+            Index(v) => v.visit_with(visitor),\n+            _ => ControlFlow::CONTINUE,\n+        }\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for Field {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n+        ControlFlow::CONTINUE\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for GeneratorSavedLocal {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n+        ControlFlow::CONTINUE\n+    }\n+}\n+\n+impl<'tcx, R: Idx, C: Idx> TypeVisitable<'tcx> for BitMatrix<R, C> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n+        ControlFlow::CONTINUE\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for Constant<'tcx> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.literal.visit_with(visitor)?;\n+        self.user_ty.visit_with(visitor)\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for ConstantKind<'tcx> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        visitor.visit_mir_const(*self)\n+    }\n+}\n+\n+impl<'tcx> TypeSuperVisitable<'tcx> for ConstantKind<'tcx> {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        match *self {\n+            ConstantKind::Ty(c) => c.visit_with(visitor),\n+            ConstantKind::Val(_, t) => t.visit_with(visitor),\n+        }\n+    }\n+}"}, {"sha": "34ba5b81a670c4df7868a1c31cfd87eb0b73e5f6", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66c06f7f2341bfe5935c470be53c8e6767717f3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66c06f7f2341bfe5935c470be53c8e6767717f3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f66c06f7f2341bfe5935c470be53c8e6767717f3", "patch": "@@ -1385,7 +1385,9 @@ impl<'tcx> TypeFoldable<'tcx> for ParamEnv<'tcx> {\n             self.constness().try_fold_with(folder)?,\n         ))\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for ParamEnv<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.caller_bounds().visit_with(visitor)?;\n         self.reveal().visit_with(visitor)?;"}, {"sha": "a93deb94351166b62a606da8b6bfdc08df485a44", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f66c06f7f2341bfe5935c470be53c8e6767717f3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66c06f7f2341bfe5935c470be53c8e6767717f3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=f66c06f7f2341bfe5935c470be53c8e6767717f3", "patch": "@@ -6,6 +6,7 @@ use crate::mir::interpret;\n use crate::mir::ProjectionKind;\n use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable, TypeVisitor};\n use crate::ty::print::{with_no_trimmed_paths, FmtPrinter, Printer};\n+use crate::ty::visit::{TypeSuperVisitable, TypeVisitable};\n use crate::ty::{self, InferConst, Lift, Term, Ty, TyCtxt};\n use rustc_data_structures::functor::IdFunctor;\n use rustc_hir as hir;\n@@ -651,7 +652,9 @@ impl<'tcx> TypeFoldable<'tcx> for ty::AdtDef<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for ty::AdtDef<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n@@ -664,7 +667,9 @@ impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> TypeFoldable<'tcx> for\n     ) -> Result<(T, U), F::Error> {\n         Ok((self.0.try_fold_with(folder)?, self.1.try_fold_with(folder)?))\n     }\n+}\n \n+impl<'tcx, T: TypeVisitable<'tcx>, U: TypeVisitable<'tcx>> TypeVisitable<'tcx> for (T, U) {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.0.visit_with(visitor)?;\n         self.1.visit_with(visitor)\n@@ -684,7 +689,11 @@ impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>>\n             self.2.try_fold_with(folder)?,\n         ))\n     }\n+}\n \n+impl<'tcx, A: TypeVisitable<'tcx>, B: TypeVisitable<'tcx>, C: TypeVisitable<'tcx>>\n+    TypeVisitable<'tcx> for (A, B, C)\n+{\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.0.visit_with(visitor)?;\n         self.1.visit_with(visitor)?;\n@@ -756,7 +765,9 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Rc<T> {\n             Ok(Rc::from_raw(Rc::into_raw(unique).cast()))\n         }\n     }\n+}\n \n+impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Rc<T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n@@ -800,7 +811,9 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Arc<T> {\n             Ok(Arc::from_raw(Arc::into_raw(unique).cast()))\n         }\n     }\n+}\n \n+impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Arc<T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n@@ -810,7 +823,9 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|value| value.try_fold_with(folder))\n     }\n+}\n \n+impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Box<T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n@@ -820,7 +835,9 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|t| t.try_fold_with(folder))\n     }\n+}\n \n+impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Vec<T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n@@ -830,7 +847,9 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|t| t.try_fold_with(folder))\n     }\n+}\n \n+impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Box<[T]> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n@@ -840,7 +859,9 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::EarlyBinder<T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_bound(|ty| ty.try_fold_with(folder))\n     }\n+}\n \n+impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for ty::EarlyBinder<T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.as_ref().0.visit_with(visitor)\n     }\n@@ -850,7 +871,9 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<'tcx, T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_binder(self)\n     }\n+}\n \n+impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for ty::Binder<'tcx, T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_binder(self)\n     }\n@@ -863,7 +886,9 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeSuperFoldable<'tcx> for ty::Binder<'tcx, T\n     ) -> Result<Self, F::Error> {\n         self.try_map_bound(|ty| ty.try_fold_with(folder))\n     }\n+}\n \n+impl<'tcx, T: TypeVisitable<'tcx>> TypeSuperVisitable<'tcx> for ty::Binder<'tcx, T> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.as_ref().skip_binder().visit_with(visitor)\n     }\n@@ -873,7 +898,11 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::Existentia\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_poly_existential_predicates(v))\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx>\n+    for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>\n+{\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|p| p.visit_with(visitor))\n     }\n@@ -883,7 +912,9 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_projs(v))\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for &'tcx ty::List<ProjectionKind> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n@@ -915,7 +946,9 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n             },\n         })\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for ty::instance::Instance<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         use crate::ty::InstanceDef::*;\n         self.substs.visit_with(visitor)?;\n@@ -941,7 +974,9 @@ impl<'tcx> TypeFoldable<'tcx> for interpret::GlobalId<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(Self { instance: self.instance.try_fold_with(folder)?, promoted: self.promoted })\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for interpret::GlobalId<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.instance.visit_with(visitor)\n     }\n@@ -951,7 +986,9 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_ty(self)\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for Ty<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_ty(*self)\n     }\n@@ -1001,7 +1038,9 @@ impl<'tcx> TypeSuperFoldable<'tcx> for Ty<'tcx> {\n \n         Ok(if *self.kind() == kind { self } else { folder.tcx().mk_ty(kind) })\n     }\n+}\n \n+impl<'tcx> TypeSuperVisitable<'tcx> for Ty<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match self.kind() {\n             ty::RawPtr(ref tm) => tm.visit_with(visitor),\n@@ -1049,7 +1088,9 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_region(self)\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for ty::Region<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_region(*self)\n     }\n@@ -1062,7 +1103,9 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ty::Region<'tcx> {\n     ) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n+}\n \n+impl<'tcx> TypeSuperVisitable<'tcx> for ty::Region<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n@@ -1072,7 +1115,9 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_predicate(self)\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for ty::Predicate<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_predicate(*self)\n     }\n@@ -1094,7 +1139,9 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ty::Predicate<'tcx> {\n         let new = self.kind().try_fold_with(folder)?;\n         Ok(folder.tcx().reuse_or_mk_predicate(self, new))\n     }\n+}\n \n+impl<'tcx> TypeSuperVisitable<'tcx> for ty::Predicate<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.kind().visit_with(visitor)\n     }\n@@ -1104,7 +1151,9 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_predicates(v))\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|p| p.visit_with(visitor))\n     }\n@@ -1114,7 +1163,9 @@ impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T>\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|x| x.try_fold_with(folder))\n     }\n+}\n \n+impl<'tcx, T: TypeVisitable<'tcx>, I: Idx> TypeVisitable<'tcx> for IndexVec<I, T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n@@ -1124,7 +1175,9 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Const<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_const(self)\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for ty::Const<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_const(*self)\n     }\n@@ -1143,7 +1196,9 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ty::Const<'tcx> {\n             Ok(self)\n         }\n     }\n+}\n \n+impl<'tcx> TypeSuperVisitable<'tcx> for ty::Const<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.ty().visit_with(visitor)?;\n         self.kind().visit_with(visitor)\n@@ -1162,7 +1217,9 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n             | ty::ConstKind::Error(_) => self,\n         })\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for ty::ConstKind<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match *self {\n             ty::ConstKind::Infer(ic) => ic.visit_with(visitor),\n@@ -1180,7 +1237,9 @@ impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for InferConst<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n@@ -1190,7 +1249,9 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_unevaluated(self)\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for ty::Unevaluated<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_unevaluated(*self)\n     }\n@@ -1207,7 +1268,9 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ty::Unevaluated<'tcx> {\n             promoted: self.promoted,\n         })\n     }\n+}\n \n+impl<'tcx> TypeSuperVisitable<'tcx> for ty::Unevaluated<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.substs.visit_with(visitor)\n     }\n@@ -1217,7 +1280,9 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx, ()> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self.expand().try_fold_with(folder)?.shrink())\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for ty::Unevaluated<'tcx, ()> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.expand().visit_with(visitor)\n     }\n@@ -1227,7 +1292,9 @@ impl<'tcx> TypeFoldable<'tcx> for hir::Constness {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for hir::Constness {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }"}, {"sha": "4ca8471c10bb28a7fed0d051c538384a96b51062", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f66c06f7f2341bfe5935c470be53c8e6767717f3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66c06f7f2341bfe5935c470be53c8e6767717f3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=f66c06f7f2341bfe5935c470be53c8e6767717f3", "patch": "@@ -6,6 +6,7 @@ use crate::ty::fold::{\n     FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitor,\n };\n use crate::ty::sty::{ClosureSubsts, GeneratorSubsts, InlineConstSubsts};\n+use crate::ty::visit::TypeVisitable;\n use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n \n use rustc_data_structures::intern::{Interned, WithStableHash};\n@@ -205,7 +206,9 @@ impl<'tcx> TypeFoldable<'tcx> for GenericArg<'tcx> {\n             GenericArgKind::Const(ct) => ct.try_fold_with(folder).map(Into::into),\n         }\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for GenericArg<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match self.unpack() {\n             GenericArgKind::Lifetime(lt) => lt.visit_with(visitor),\n@@ -449,7 +452,9 @@ impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n             _ => ty::util::fold_list(self, folder, |tcx, v| tcx.intern_substs(v)),\n         }\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for SubstsRef<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n@@ -485,7 +490,9 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n             _ => ty::util::fold_list(self, folder, |tcx, v| tcx.intern_type_list(v)),\n         }\n     }\n+}\n \n+impl<'tcx> TypeVisitable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }"}]}