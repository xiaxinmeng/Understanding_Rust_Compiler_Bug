{"sha": "97fd421319fda45d0d4c6a0906f29a228ec57b42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZmQ0MjEzMTlmZGE0NWQwZDRjNmEwOTA2ZjI5YTIyOGVjNTdiNDI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-01T20:11:07Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-03T00:49:31Z"}, "message": "librustc: Remove `fn@`, `fn~`, and `fn&` from librustc. rs=defun", "tree": {"sha": "e906561c9b457d86bd54142c8a2a79ec44ded0bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e906561c9b457d86bd54142c8a2a79ec44ded0bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97fd421319fda45d0d4c6a0906f29a228ec57b42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97fd421319fda45d0d4c6a0906f29a228ec57b42", "html_url": "https://github.com/rust-lang/rust/commit/97fd421319fda45d0d4c6a0906f29a228ec57b42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97fd421319fda45d0d4c6a0906f29a228ec57b42/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3f728238bb49759a3b3b64599808c3265f2caca", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f728238bb49759a3b3b64599808c3265f2caca", "html_url": "https://github.com/rust-lang/rust/commit/a3f728238bb49759a3b3b64599808c3265f2caca"}], "stats": {"total": 110, "additions": 58, "deletions": 52}, "files": [{"sha": "190421955734afff348fab0bf94ce434a7d105f7", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=97fd421319fda45d0d4c6a0906f29a228ec57b42", "patch": "@@ -253,9 +253,8 @@ pub mod core {\n \n     pub use cmp;\n     pub use condition;\n-    pub use kinds;\n-    pub use ops;\n     pub use option;\n+    pub use kinds;\n     pub use sys;\n     pub use pipes;\n }"}, {"sha": "cdf63c49de3a4c6d0f5a367cf2f3e6d6a3751bd8", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=97fd421319fda45d0d4c6a0906f29a228ec57b42", "patch": "@@ -15,7 +15,7 @@ use syntax::{ast, fold, attr};\n use core::option;\n use core::vec;\n \n-type in_cfg_pred = fn@(+attrs: ~[ast::attribute]) -> bool;\n+type in_cfg_pred = @fn(+attrs: ~[ast::attribute]) -> bool;\n \n struct Context {\n     in_cfg: in_cfg_pred"}, {"sha": "524e46db7388575bdb1b7e0b6e73dc1c94fc2913", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=97fd421319fda45d0d4c6a0906f29a228ec57b42", "patch": "@@ -29,7 +29,7 @@ use syntax::fold;\n use syntax::print::pprust;\n use syntax::{ast, ast_util};\n \n-type node_id_gen = fn@() -> ast::node_id;\n+type node_id_gen = @fn() -> ast::node_id;\n \n struct Test {\n     span: span,"}, {"sha": "403cc1cf978455782d49af3d73a679d892ff2cdf", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=97fd421319fda45d0d4c6a0906f29a228ec57b42", "patch": "@@ -57,7 +57,7 @@ use writer = std::ebml::writer;\n // used by astencode:\n type abbrev_map = oldmap::HashMap<ty::t, tyencode::ty_abbrev>;\n \n-pub type encode_inlined_item = fn@(ecx: @EncodeContext,\n+pub type encode_inlined_item = @fn(ecx: @EncodeContext,\n                                    ebml_w: writer::Encoder,\n                                    path: &[ast_map::path_elt],\n                                    ii: ast::inlined_item);"}, {"sha": "233c0949fa66a763fcd440acaa5f57270274d225", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=97fd421319fda45d0d4c6a0906f29a228ec57b42", "patch": "@@ -81,7 +81,7 @@ pub fn parse_ident(st: @mut PState, last: char) -> ast::ident {\n     return parse_ident_(st, |a| is_last(last, a) );\n }\n \n-fn parse_ident_(st: @mut PState, is_last: fn@(char) -> bool) ->\n+fn parse_ident_(st: @mut PState, is_last: @fn(char) -> bool) ->\n    ast::ident {\n     let mut rslt = ~\"\";\n     while !is_last(peek(st)) {"}, {"sha": "8fd1d176b6593d8de012697d8ccffac757451733", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=97fd421319fda45d0d4c6a0906f29a228ec57b42", "patch": "@@ -29,10 +29,10 @@ use middle::ty::Vid;\n pub struct ctxt {\n     diag: span_handler,\n     // Def -> str Callback:\n-    ds: fn@(def_id) -> ~str,\n+    ds: @fn(def_id) -> ~str,\n     // The type context.\n     tcx: ty::ctxt,\n-    reachable: fn@(node_id) -> bool,\n+    reachable: @fn(node_id) -> bool,\n     abbrevs: abbrev_ctxt\n }\n "}, {"sha": "b52a2d0bb093c11f369ecf0e916f2fffb601beb7", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=97fd421319fda45d0d4c6a0906f29a228ec57b42", "patch": "@@ -843,7 +843,7 @@ fn encode_side_tables_for_ii(ecx: @e::EncodeContext,\n         let ebml_w = copy ebml_w;\n         ast_util::visit_ids_for_inlined_item(\n             ii,\n-            fn@(id: ast::node_id) {\n+            |id: ast::node_id| {\n                 // Note: this will cause a copy of ebml_w, which is bad as\n                 // it has mut fields.  But I believe it's harmless since\n                 // we generate balanced EBML."}, {"sha": "457701e659a6930914a68f0fb1fd9844ffbf1020", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=97fd421319fda45d0d4c6a0906f29a228ec57b42", "patch": "@@ -251,7 +251,7 @@ fn req_loans_in_expr(ex: @ast::expr,\n         // Receivers in method calls are always passed by ref.\n         //\n         // Here, the field a.b is in fact a closure.  Eventually, this\n-        // should be an fn&, but for now it's an fn@.  In any case,\n+        // should be an &fn, but for now it's an @fn.  In any case,\n         // the enclosing scope is either the call where it is a rcvr\n         // (if used like `a.b(...)`), the call where it's an argument\n         // (if used like `x(a.b)`), or the block (if used like `let x"}, {"sha": "f26d5c7d11ce55134ad7ef19e4b6c22e84c58285", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=97fd421319fda45d0d4c6a0906f29a228ec57b42", "patch": "@@ -46,7 +46,8 @@ fn collect_freevars(def_map: resolve::DefMap, blk: &ast::blk)\n \n     fn ignore_item(_i: @ast::item, &&_depth: int, _v: visit::vt<int>) { }\n \n-    let walk_expr = fn@(expr: @ast::expr, &&depth: int, v: visit::vt<int>) {\n+    let walk_expr: @fn(expr: @ast::expr, &&depth: int, v: visit::vt<int>) =\n+        |expr, depth, v| {\n             match expr.node {\n               ast::expr_fn(_, _, _, _) => {\n                 visit::visit_expr(expr, depth + 1, v);\n@@ -100,8 +101,11 @@ pub fn annotate_freevars(def_map: resolve::DefMap, crate: @ast::crate) ->\n    freevar_map {\n     let freevars = HashMap();\n \n-    let walk_fn = fn@(_fk: &visit::fn_kind, _decl: &ast::fn_decl,\n-                      blk: &ast::blk, _sp: span, nid: ast::node_id) {\n+    let walk_fn: @fn(&visit::fn_kind,\n+                     &ast::fn_decl,\n+                     &ast::blk,\n+                     span,\n+                     ast::node_id) = |_, _, blk, _, nid| {\n         let vars = collect_freevars(def_map, blk);\n         freevars.insert(nid, vars);\n     };"}, {"sha": "aca5675aa151d2d4452c9397e39b70c7528d17d7", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=97fd421319fda45d0d4c6a0906f29a228ec57b42", "patch": "@@ -84,7 +84,7 @@ pub fn check_crate(tcx: ty::ctxt,\n         visit_expr: check_expr,\n         visit_fn: check_fn,\n         visit_ty: check_ty,\n-        visit_item: fn@(i: @item, cx: Context, v: visit::vt<Context>) {\n+        visit_item: |i, cx, v| {\n             visit::visit_item(i, Context { current_item: i.id,.. cx }, v);\n         },\n         .. *visit::default_visitor()\n@@ -93,7 +93,7 @@ pub fn check_crate(tcx: ty::ctxt,\n     tcx.sess.abort_if_errors();\n }\n \n-type check_fn = fn@(Context, @freevar_entry);\n+type check_fn = @fn(Context, @freevar_entry);\n \n // Yields the appropriate function to check the kind of closed over\n // variables. `id` is the node_id for some expression that creates the"}, {"sha": "0d3524ed7fb2fa95052a87926fa1d6c1096f1970", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=97fd421319fda45d0d4c6a0906f29a228ec57b42", "patch": "@@ -1003,7 +1003,7 @@ pub fn any_tuple_struct_pat(bcx: block, m: &[@Match], col: uint) -> bool {\n     })\n }\n \n-pub type mk_fail = fn@() -> BasicBlockRef;\n+pub type mk_fail = @fn() -> BasicBlockRef;\n \n pub fn pick_col(m: &[@Match]) -> uint {\n     fn score(p: @ast::pat) -> uint {"}, {"sha": "a714446235aefc9a84f57f2373685ed9638ac691", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=97fd421319fda45d0d4c6a0906f29a228ec57b42", "patch": "@@ -634,8 +634,8 @@ pub fn compare_scalar_values(cx: block,\n     }\n }\n \n-pub type val_pair_fn = fn@(block, ValueRef, ValueRef) -> block;\n-pub type val_and_ty_fn = fn@(block, ValueRef, ty::t) -> block;\n+pub type val_pair_fn = @fn(block, ValueRef, ValueRef) -> block;\n+pub type val_and_ty_fn = @fn(block, ValueRef, ty::t) -> block;\n \n pub fn load_inbounds(cx: block, p: ValueRef, idxs: &[uint]) -> ValueRef {\n     return Load(cx, GEPi(cx, p, idxs));"}, {"sha": "fd149aa71e5762d3bb62bfbe6622173c61d82829", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=97fd421319fda45d0d4c6a0906f29a228ec57b42", "patch": "@@ -42,7 +42,7 @@ use syntax::print::pprust::expr_to_str;\n // roughly as follows:\n //\n // struct rust_opaque_box {         // see rust_internal.h\n-//   unsigned ref_count;            // only used for fn@()\n+//   unsigned ref_count;            // only used for @fn()\n //   type_desc *tydesc;             // describes closure_data struct\n //   rust_opaque_box *prev;         // (used internally by memory alloc)\n //   rust_opaque_box *next;         // (used internally by memory alloc)\n@@ -57,7 +57,7 @@ use syntax::print::pprust::expr_to_str;\n // };\n //\n // Note that the closure is itself a rust_opaque_box.  This is true\n-// even for fn~ and fn&, because we wish to keep binary compatibility\n+// even for ~fn and &fn, because we wish to keep binary compatibility\n // between all kinds of closures.  The allocation strategy for this\n // closure depends on the closure type.  For a sendfn, the closure\n // (and the referenced type descriptors) will be allocated in the\n@@ -440,11 +440,10 @@ pub fn trans_expr_fn(bcx: block,\n }\n \n pub fn make_closure_glue(\n-    cx: block,\n-    v: ValueRef,\n-    t: ty::t,\n-    glue_fn: fn@(block, v: ValueRef, t: ty::t) -> block) -> block\n-{\n+        cx: block,\n+        v: ValueRef,\n+        t: ty::t,\n+        glue_fn: @fn(block, v: ValueRef, t: ty::t) -> block) -> block {\n     let _icx = cx.insn_ctxt(\"closure::make_closure_glue\");\n     let bcx = cx;\n     let tcx = cx.tcx();\n@@ -483,7 +482,7 @@ pub fn make_opaque_cbox_take_glue(\n         }\n     }\n \n-    // fn~ requires a deep copy.\n+    // ~fn requires a deep copy.\n     let ccx = bcx.ccx(), tcx = ccx.tcx;\n     let llopaquecboxty = T_opaque_box_ptr(ccx);\n     let cbox_in = Load(bcx, cboxptr);"}, {"sha": "bd8bbfce5a419c6e605bbfdd0b34a7556ddea27b", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=97fd421319fda45d0d4c6a0906f29a228ec57b42", "patch": "@@ -61,14 +61,15 @@ use syntax::parse::token::ident_interner;\n use syntax::print::pprust::expr_to_str;\n use syntax::{ast, ast_map};\n \n-pub type namegen = fn@(~str) -> ident;\n+pub type namegen = @fn(~str) -> ident;\n pub fn new_namegen(intr: @ident_interner) -> namegen {\n-    return fn@(prefix: ~str) -> ident {\n+    let f: @fn(~str) -> ident = |prefix| {\n         // XXX: Bad copies.\n-        return intr.gensym(@fmt!(\"%s_%u\",\n-                                 prefix,\n-                                 intr.gensym(@copy prefix).repr))\n+        intr.gensym(@fmt!(\"%s_%u\",\n+                          prefix,\n+                          intr.gensym(@copy prefix).repr))\n     };\n+    f\n }\n \n pub type addrspace = c_uint;\n@@ -81,10 +82,11 @@ pub type addrspace = c_uint;\n pub const default_addrspace: addrspace = 0;\n pub const gc_box_addrspace: addrspace = 1;\n \n-pub type addrspace_gen = fn@() -> addrspace;\n+pub type addrspace_gen = @fn() -> addrspace;\n pub fn new_addrspace_gen() -> addrspace_gen {\n     let i = @mut 1;\n-    return fn@() -> addrspace { *i += 1; *i };\n+    let result: addrspace_gen = || { *i += 1; *i };\n+    result\n }\n \n pub struct tydesc_info {\n@@ -349,8 +351,8 @@ pub enum cleantype {\n }\n \n pub enum cleanup {\n-    clean(fn@(block) -> block, cleantype),\n-    clean_temp(ValueRef, fn@(block) -> block, cleantype),\n+    clean(@fn(block) -> block, cleantype),\n+    clean_temp(ValueRef, @fn(block) -> block, cleantype),\n }\n \n // Used to remember and reuse existing cleanup paths\n@@ -1034,7 +1036,7 @@ pub fn T_typaram_ptr(tn: @TypeNames) -> TypeRef {\n }\n \n pub fn T_opaque_cbox_ptr(cx: @CrateContext) -> TypeRef {\n-    // closures look like boxes (even when they are fn~ or fn&)\n+    // closures look like boxes (even when they are ~fn or &fn)\n     // see trans_closure.rs\n     return T_opaque_box_ptr(cx);\n }"}, {"sha": "de6d22cd6b899a8fc0be6a994f887ac1e1b7ee18", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=97fd421319fda45d0d4c6a0906f29a228ec57b42", "patch": "@@ -709,7 +709,7 @@ pub fn declare_tydesc(ccx: @CrateContext, t: ty::t) -> @mut tydesc_info {\n     return inf;\n }\n \n-pub type glue_helper = fn@(block, ValueRef, ty::t);\n+pub type glue_helper = @fn(block, ValueRef, ty::t);\n \n pub fn declare_generic_glue(ccx: @CrateContext, t: ty::t, llfnty: TypeRef,\n                             +name: ~str) -> ValueRef {"}, {"sha": "3542b5acf05351b465a606e74d31228134bcbe97", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=97fd421319fda45d0d4c6a0906f29a228ec57b42", "patch": "@@ -520,9 +520,9 @@ pub fn get_base_and_len(bcx: block,\n     }\n }\n \n-pub type val_and_ty_fn = fn@(block, ValueRef, ty::t) -> Result;\n+pub type val_and_ty_fn = @fn(block, ValueRef, ty::t) -> Result;\n \n-pub type iter_vec_block = fn(block, ValueRef, ty::t) -> block;\n+pub type iter_vec_block = &fn(block, ValueRef, ty::t) -> block;\n \n pub fn iter_vec_raw(bcx: block, data_ptr: ValueRef, vec_ty: ty::t,\n                     fill: ValueRef, f: iter_vec_block) -> block {"}, {"sha": "7acc1348613dbc3af2a296ee63872088a9123305", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=97fd421319fda45d0d4c6a0906f29a228ec57b42", "patch": "@@ -525,7 +525,7 @@ pub enum sty {\n     // \"Fake\" types, used for trans purposes\n     ty_type, // type_desc*\n     ty_opaque_box, // used by monomorphizer to represent any @ box\n-    ty_opaque_closure_ptr(Sigil), // ptr to env for fn, fn@, fn~\n+    ty_opaque_closure_ptr(Sigil), // ptr to env for &fn, @fn, ~fn\n     ty_unboxed_vec(mt),\n }\n \n@@ -1102,8 +1102,8 @@ pub pure fn mach_sty(cfg: @session::config, t: t) -> sty {\n }\n \n pub fn default_arg_mode_for_ty(tcx: ctxt, ty: ty::t) -> ast::rmode {\n-        // FIXME(#2202) --- We retain by-ref for fn& things to workaround a\n-        // memory leak that otherwise results when @fn is upcast to &fn.\n+    // FIXME(#2202) --- We retain by-ref for &fn things to workaround a\n+    // memory leak that otherwise results when @fn is upcast to &fn.\n     match ty::get(ty).sty {\n         ty::ty_closure(ClosureTy {sigil: ast::BorrowedSigil, _}) => {\n             return ast::by_ref;"}, {"sha": "a20eee8f981e59918549ff0012e97d4c455b5c53", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=97fd421319fda45d0d4c6a0906f29a228ec57b42", "patch": "@@ -389,7 +389,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n                      self_info: Option<SelfInfo>) {\n         let tcx = fcx.ccx.tcx;\n \n-        let assign = fn@(nid: ast::node_id, ty_opt: Option<ty::t>) {\n+        let assign: @fn(ast::node_id, Option<ty::t>) = |nid, ty_opt| {\n             match ty_opt {\n                 None => {\n                     // infer the variable's type\n@@ -432,8 +432,8 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n         }\n \n         // Add explicitly-declared locals.\n-        let visit_local = fn@(local: @ast::local,\n-                              &&e: (), v: visit::vt<()>) {\n+        let visit_local: @fn(@ast::local, &&e: (), visit::vt<()>) =\n+                |local, e, v| {\n             let o_ty = match local.node.ty.node {\n               ast::ty_infer => None,\n               _ => Some(fcx.to_ty(local.node.ty))\n@@ -447,7 +447,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n         };\n \n         // Add pattern bindings.\n-        let visit_pat = fn@(p: @ast::pat, &&e: (), v: visit::vt<()>) {\n+        let visit_pat: @fn(@ast::pat, &&e: (), visit::vt<()>) = |p, e, v| {\n             match p.node {\n               ast::pat_ident(_, path, _)\n                   if pat_util::pat_is_binding(fcx.ccx.tcx.def_map, p) => {\n@@ -462,7 +462,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n             visit::visit_pat(p, e, v);\n         };\n \n-        let visit_block = fn@(b: &ast::blk, &&e: (), v: visit::vt<()>) {\n+        let visit_block: @fn(&ast::blk, &&e: (), visit::vt<()>) = |b, e, v| {\n             // non-obvious: the `blk` variable maps to region lb, so\n             // we have to keep this up-to-date.  This\n             // is... unfortunate.  It'd be nice to not need this."}, {"sha": "8ab6a07a91018d31635fc8fb39618188f3fcaee6", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=97fd421319fda45d0d4c6a0906f29a228ec57b42", "patch": "@@ -315,7 +315,7 @@ diagnostic emitter which records when we hit a fatal error. If the task\n fails without recording a fatal error then we've encountered a compiler\n bug and need to present an error.\n */\n-pub fn monitor(+f: fn~(diagnostic::Emitter)) {\n+pub fn monitor(+f: ~fn(diagnostic::Emitter)) {\n     use core::cell::Cell;\n     use core::comm::*;\n     let (p, ch) = stream();\n@@ -326,8 +326,10 @@ pub fn monitor(+f: fn~(diagnostic::Emitter)) {\n         let ch_capture = ch.clone();\n         // The 'diagnostics emitter'. Every error, warning, etc. should\n         // go through this function.\n-        let demitter = fn@(cmsp: Option<(@codemap::CodeMap, codemap::span)>,\n-                           msg: &str, lvl: diagnostic::level) {\n+        let demitter: @fn(Option<(@codemap::CodeMap, codemap::span)>,\n+                          &str,\n+                          diagnostic::level) =\n+                          |cmsp, msg, lvl| {\n             if lvl == diagnostic::fatal {\n                 ch_capture.send(fatal);\n             }"}, {"sha": "8729ca5f6e170874d313a3c4005f2fce8267a09d", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fd421319fda45d0d4c6a0906f29a228ec57b42/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=97fd421319fda45d0d4c6a0906f29a228ec57b42", "patch": "@@ -59,7 +59,7 @@ pub fn field_exprs(fields: ~[ast::field]) -> ~[@ast::expr] {\n \n // Takes a predicate p, returns true iff p is true for any subexpressions\n // of b -- skipping any inner loops (loop, while, loop_body)\n-pub fn loop_query(b: &ast::blk, p: fn@(ast::expr_) -> bool) -> bool {\n+pub fn loop_query(b: &ast::blk, p: @fn(ast::expr_) -> bool) -> bool {\n     let rs = @mut false;\n     let visit_expr: @fn(@ast::expr,\n                         &&flag: @mut bool,\n@@ -82,7 +82,7 @@ pub fn loop_query(b: &ast::blk, p: fn@(ast::expr_) -> bool) -> bool {\n \n // Takes a predicate p, returns true iff p is true for any subexpressions\n // of b -- skipping any inner loops (loop, while, loop_body)\n-pub fn block_query(b: &ast::blk, p: fn@(@ast::expr) -> bool) -> bool {\n+pub fn block_query(b: &ast::blk, p: @fn(@ast::expr) -> bool) -> bool {\n     let rs = @mut false;\n     let visit_expr: @fn(@ast::expr,\n                         &&flag: @mut bool,"}]}