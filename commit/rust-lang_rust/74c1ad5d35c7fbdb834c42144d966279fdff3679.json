{"sha": "74c1ad5d35c7fbdb834c42144d966279fdff3679", "node_id": "C_kwDOAAsO6NoAKDc0YzFhZDVkMzVjN2ZiZGI4MzRjNDIxNDRkOTY2Mjc5ZmRmZjM2Nzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-18T07:08:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-18T07:08:20Z"}, "message": "Auto merge of #107021 - matthiaskrgr:rollup-0dzxfyi, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #106244 (Improve Markdown styling in README)\n - #106747 (Add 'static lifetime suggestion when GAT implied 'static requirement from HRTB)\n - #106873 (dont randomly use `_` to print out const generic arguments)\n - #106992 (Remove unused `#![feature(box_syntax)]` in `alloc`)\n - #106995 (bump failing assembly & codegen tests from LLVM 14 to LLVM 15)\n - #106996 (rustdoc: instead of `.setting-name { width: 100% }`, use default div CSS)\n - #106997 (Add heapsort fallback in `select_nth_unstable`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e0c8101451bb53cd0dc6f00fec6497a71acd22f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0c8101451bb53cd0dc6f00fec6497a71acd22f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74c1ad5d35c7fbdb834c42144d966279fdff3679", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74c1ad5d35c7fbdb834c42144d966279fdff3679", "html_url": "https://github.com/rust-lang/rust/commit/74c1ad5d35c7fbdb834c42144d966279fdff3679", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74c1ad5d35c7fbdb834c42144d966279fdff3679/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d", "html_url": "https://github.com/rust-lang/rust/commit/aaa9bb9e7bb4b8b565f2e1570587d6c21b13ab2d"}, {"sha": "788671c1c62e099b2ad4ff5384c6f764b8b26b8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/788671c1c62e099b2ad4ff5384c6f764b8b26b8d", "html_url": "https://github.com/rust-lang/rust/commit/788671c1c62e099b2ad4ff5384c6f764b8b26b8d"}], "stats": {"total": 677, "additions": 512, "deletions": 165}, "files": [{"sha": "0eb7c4b266a9f3a529e1b3c555ac2bf1dee974c1", "filename": "README.md", "status": "modified", "additions": 90, "deletions": 73, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -3,10 +3,11 @@\n This is the main source code repository for [Rust]. It contains the compiler,\n standard library, and documentation.\n \n-[Rust]: https://www.rust-lang.org\n+[Rust]: https://www.rust-lang.org/\n \n **Note: this README is for _users_ rather than _contributors_.**\n-If you wish to _contribute_ to the compiler, you should read [CONTRIBUTING.md](CONTRIBUTING.md) instead.\n+If you wish to _contribute_ to the compiler, you should read\n+[CONTRIBUTING.md](CONTRIBUTING.md) instead.\n \n ## Quick Start\n \n@@ -20,13 +21,15 @@ Read [\"Installation\"] from [The Book].\n The Rust build system uses a Python script called `x.py` to build the compiler,\n which manages the bootstrapping process. It lives at the root of the project.\n \n-The `x.py` command can be run directly on most Unix systems in the following format:\n+The `x.py` command can be run directly on most Unix systems in the following\n+format:\n \n ```sh\n ./x.py <subcommand> [flags]\n ```\n \n-This is how the documentation and examples assume you are running `x.py`. Some alternative ways are:\n+This is how the documentation and examples assume you are running `x.py`.\n+Some alternative ways are:\n \n ```sh\n # On a Unix shell if you don't have the necessary `python3` command\n@@ -39,8 +42,8 @@ x.py <subcommand> [flags]\n python x.py <subcommand> [flags]\n ```\n \n-More information about `x.py` can be found\n-by running it with the `--help` flag or reading the [rustc dev guide][rustcguidebuild].\n+More information about `x.py` can be found by running it with the `--help` flag\n+or reading the [rustc dev guide][rustcguidebuild].\n \n [gettingstarted]: https://rustc-dev-guide.rust-lang.org/getting-started.html\n [rustcguidebuild]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html\n@@ -49,24 +52,29 @@ by running it with the `--help` flag or reading the [rustc dev guide][rustcguide\n \n Make sure you have installed the dependencies:\n \n-   * `python` 3 or 2.7\n-   * `git`\n-   * A C compiler (when building for the host, `cc` is enough; cross-compiling may need additional compilers)\n-   * `curl` (not needed on Windows)\n-   * `pkg-config` if you are compiling on Linux and targeting Linux\n-   * `libiconv` (already included with glibc on Debian-based distros)\n+* `python` 3 or 2.7\n+* `git`\n+* A C compiler (when building for the host, `cc` is enough; cross-compiling may\n+  need additional compilers)\n+* `curl` (not needed on Windows)\n+* `pkg-config` if you are compiling on Linux and targeting Linux\n+* `libiconv` (already included with glibc on Debian-based distros)\n \n-To build cargo, you'll also need OpenSSL (`libssl-dev` or `openssl-devel` on most Unix distros).\n+To build Cargo, you'll also need OpenSSL (`libssl-dev` or `openssl-devel` on\n+most Unix distros).\n \n If building LLVM from source, you'll need additional tools:\n \n * `g++`, `clang++`, or MSVC with versions listed on\n   [LLVM's documentation](https://llvm.org/docs/GettingStarted.html#host-c-toolchain-both-compiler-and-standard-library)\n-* `ninja`, or GNU `make` 3.81 or later (ninja is recommended, especially on Windows)\n+* `ninja`, or GNU `make` 3.81 or later (Ninja is recommended, especially on\n+  Windows)\n * `cmake` 3.13.4 or later\n-* `libstdc++-static` may be required on some Linux distributions such as Fedora and Ubuntu\n+* `libstdc++-static` may be required on some Linux distributions such as Fedora\n+  and Ubuntu\n \n-On tier 1 or tier 2 with host tools platforms, you can also choose to download LLVM by setting `llvm.download-ci-llvm = true`.\n+On tier 1 or tier 2 with host tools platforms, you can also choose to download\n+LLVM by setting `llvm.download-ci-llvm = true`.\n Otherwise, you'll need LLVM installed and `llvm-config` in your path.\n See [the rustc-dev-guide for more info][sysllvm].\n \n@@ -86,52 +94,57 @@ See [the rustc-dev-guide for more info][sysllvm].\n \n 2. Configure the build settings:\n \n-    The Rust build system uses a file named `config.toml` in the root of the\n-    source tree to determine various configuration settings for the build.\n-    Set up the defaults intended for distros to get started. You can see a full list of options\n-    in `config.toml.example`.\n+   The Rust build system uses a file named `config.toml` in the root of the\n+   source tree to determine various configuration settings for the build.\n+   Set up the defaults intended for distros to get started. You can see a full\n+   list of options in `config.toml.example`.\n \n-    ```sh\n-    printf 'profile = \"user\" \\nchangelog-seen = 2 \\n' > config.toml\n-    ```\n+   ```sh\n+   printf 'profile = \"user\" \\nchangelog-seen = 2 \\n' > config.toml\n+   ```\n \n-    If you plan to use `x.py install` to create an installation, it is recommended\n-    that you set the `prefix` value in the `[install]` section to a directory.\n+   If you plan to use `x.py install` to create an installation, it is\n+   recommended that you set the `prefix` value in the `[install]` section to a\n+   directory.\n \n 3. Build and install:\n \n-    ```sh\n-    ./x.py build && ./x.py install\n-    ```\n+   ```sh\n+   ./x.py build && ./x.py install\n+   ```\n \n-    When complete, `./x.py install` will place several programs into\n-    `$PREFIX/bin`: `rustc`, the Rust compiler, and `rustdoc`, the\n-    API-documentation tool. If you've set `profile = \"user\"` or `build.extended = true`, it will\n-    also include [Cargo], Rust's package manager.\n+   When complete, `./x.py install` will place several programs into\n+   `$PREFIX/bin`: `rustc`, the Rust compiler, and `rustdoc`, the\n+   API-documentation tool. If you've set `profile = \"user\"` or\n+   `build.extended = true`, it will also include [Cargo], Rust's package\n+   manager.\n \n [Cargo]: https://github.com/rust-lang/cargo\n \n ### Building on Windows\n \n-On Windows, we suggest using [winget] to install dependencies by running the following in a terminal:\n+On Windows, we suggest using [winget] to install dependencies by running the\n+following in a terminal:\n \n ```powershell\n winget install -e Python.Python.3\n winget install -e Kitware.CMake\n winget install -e Git.Git\n ```\n \n-Then edit your system's `PATH` variable and add: `C:\\Program Files\\CMake\\bin`. See\n-[this guide on editing the system `PATH`](https://www.java.com/en/download/help/path.html) from the\n-Java documentation.\n+Then edit your system's `PATH` variable and add: `C:\\Program Files\\CMake\\bin`.\n+See\n+[this guide on editing the system `PATH`](https://www.java.com/en/download/help/path.html)\n+from the Java documentation.\n \n [winget]: https://github.com/microsoft/winget-cli\n \n There are two prominent ABIs in use on Windows: the native (MSVC) ABI used by\n Visual Studio and the GNU ABI used by the GCC toolchain. Which version of Rust\n you need depends largely on what C/C++ libraries you want to interoperate with.\n-Use the MSVC build of Rust to interop with software produced by Visual Studio and\n-the GNU build to interop with GNU software built using the MinGW/MSYS2 toolchain.\n+Use the MSVC build of Rust to interop with software produced by Visual Studio\n+and the GNU build to interop with GNU software built using the MinGW/MSYS2\n+toolchain.\n \n #### MinGW\n \n@@ -144,7 +157,7 @@ the GNU build to interop with GNU software built using the MinGW/MSYS2 toolchain\n 2. Run `mingw32_shell.bat` or `mingw64_shell.bat` from the MSYS2 installation\n    directory (e.g. `C:\\msys64`), depending on whether you want 32-bit or 64-bit\n    Rust. (As of the latest version of MSYS2 you have to run `msys2_shell.cmd\n-   -mingw32` or `msys2_shell.cmd -mingw64` from the command line instead)\n+   -mingw32` or `msys2_shell.cmd -mingw64` from the command line instead.)\n \n 3. From this terminal, install the required tools:\n \n@@ -153,11 +166,11 @@ the GNU build to interop with GNU software built using the MinGW/MSYS2 toolchain\n    pacman -Sy pacman-mirrors\n \n    # Install build tools needed for Rust. If you're building a 32-bit compiler,\n-   # then replace \"x86_64\" below with \"i686\". If you've already got git, python,\n-   # or CMake installed and in PATH you can remove them from this list. Note\n-   # that it is important that you do **not** use the 'python2', 'cmake' and 'ninja'\n-   # packages from the 'msys2' subsystem. The build has historically been known\n-   # to fail with these packages.\n+   # then replace \"x86_64\" below with \"i686\". If you've already got Git, Python,\n+   # or CMake installed and in PATH you can remove them from this list.\n+   # Note that it is important that you do **not** use the 'python2', 'cmake',\n+   # and 'ninja' packages from the 'msys2' subsystem.\n+   # The build has historically been known to fail with these packages.\n    pacman -S git \\\n                make \\\n                diffutils \\\n@@ -178,12 +191,12 @@ the GNU build to interop with GNU software built using the MinGW/MSYS2 toolchain\n \n MSVC builds of Rust additionally require an installation of Visual Studio 2017\n (or later) so `rustc` can use its linker.  The simplest way is to get\n-[Visual Studio], check the \u201cC++ build tools\u201d and \u201cWindows 10 SDK\u201d workload.\n+[Visual Studio], check the \"C++ build tools\" and \"Windows 10 SDK\" workload.\n \n [Visual Studio]: https://visualstudio.microsoft.com/downloads/\n \n-(If you're installing cmake yourself, be careful that \u201cC++ CMake tools for\n-Windows\u201d doesn't get included under \u201cIndividual components\u201d.)\n+(If you're installing CMake yourself, be careful that \"C++ CMake tools for\n+Windows\" doesn't get included under \"Individual components\".)\n \n With these dependencies installed, you can build the compiler in a `cmd.exe`\n shell with:\n@@ -192,10 +205,11 @@ shell with:\n python x.py build\n ```\n \n-Right now, building Rust only works with some known versions of Visual Studio. If\n-you have a more recent version installed and the build system doesn't understand,\n-you may need to force rustbuild to use an older version. This can be done\n-by manually calling the appropriate vcvars file before running the bootstrap.\n+Right now, building Rust only works with some known versions of Visual Studio.\n+If you have a more recent version installed and the build system doesn't\n+understand, you may need to force rustbuild to use an older version.\n+This can be done by manually calling the appropriate vcvars file before running\n+the bootstrap.\n \n ```batch\n CALL \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n@@ -215,9 +229,9 @@ Windows build triples are:\n     - `x86_64-pc-windows-msvc`\n \n The build triple can be specified by either specifying `--build=<triple>` when\n-invoking `x.py` commands, or by creating a `config.toml` file (as described\n-in [Installing From Source](#installing-from-source)), and modifying the\n-`build` option under the `[build]` section.\n+invoking `x.py` commands, or by creating a `config.toml` file (as described in\n+[Installing from Source](#installing-from-source)), and modifying the `build`\n+option under the `[build]` section.\n \n ### Configure and Make\n \n@@ -229,33 +243,35 @@ configure script and makefile (the latter of which just invokes `x.py`).\n make && sudo make install\n ```\n \n-`configure` generates a `config.toml` which can also be used with normal `x.py` invocations.\n+`configure` generates a `config.toml` which can also be used with normal `x.py`\n+invocations.\n \n ## Building Documentation\n \n-If you\u2019d like to build the documentation, it\u2019s almost the same:\n+If you'd like to build the documentation, it's almost the same:\n \n ```sh\n ./x.py doc\n ```\n \n The generated documentation will appear under `doc` in the `build` directory for\n-the ABI used. I.e., if the ABI was `x86_64-pc-windows-msvc`, the directory will be\n-`build\\x86_64-pc-windows-msvc\\doc`.\n+the ABI used. That is, if the ABI was `x86_64-pc-windows-msvc`, the directory\n+will be `build\\x86_64-pc-windows-msvc\\doc`.\n \n ## Notes\n \n-Since the Rust compiler is written in Rust, it must be built by a\n-precompiled \"snapshot\" version of itself (made in an earlier stage of\n-development). As such, source builds require an Internet connection to\n-fetch snapshots, and an OS that can execute the available snapshot binaries.\n+Since the Rust compiler is written in Rust, it must be built by a precompiled\n+\"snapshot\" version of itself (made in an earlier stage of development).\n+As such, source builds require an Internet connection to fetch snapshots, and an\n+OS that can execute the available snapshot binaries.\n \n-See https://doc.rust-lang.org/nightly/rustc/platform-support.html for a list of supported platforms.\n-Only \"host tools\" platforms have a pre-compiled snapshot binary available; to compile for a platform\n-without host tools you must cross-compile.\n+See https://doc.rust-lang.org/nightly/rustc/platform-support.html for a list of\n+supported platforms.\n+Only \"host tools\" platforms have a pre-compiled snapshot binary available; to\n+compile for a platform without host tools you must cross-compile.\n \n-You may find that other platforms work, but these are our officially\n-supported build environments that are most likely to work.\n+You may find that other platforms work, but these are our officially supported\n+build environments that are most likely to work.\n \n ## Getting Help\n \n@@ -267,23 +283,24 @@ See [CONTRIBUTING.md](CONTRIBUTING.md).\n \n ## License\n \n-Rust is primarily distributed under the terms of both the MIT license\n-and the Apache License (Version 2.0), with portions covered by various\n-BSD-like licenses.\n+Rust is primarily distributed under the terms of both the MIT license and the\n+Apache License (Version 2.0), with portions covered by various BSD-like\n+licenses.\n \n See [LICENSE-APACHE](LICENSE-APACHE), [LICENSE-MIT](LICENSE-MIT), and\n [COPYRIGHT](COPYRIGHT) for details.\n \n ## Trademark\n \n [The Rust Foundation][rust-foundation] owns and protects the Rust and Cargo\n-trademarks and logos (the \u201cRust Trademarks\u201d).\n+trademarks and logos (the \"Rust Trademarks\").\n \n-If you want to use these names or brands, please read the [media guide][media-guide].\n+If you want to use these names or brands, please read the\n+[media guide][media-guide].\n \n Third-party logos may be subject to third-party copyrights and trademarks. See\n [Licenses][policies-licenses] for details.\n \n [rust-foundation]: https://foundation.rust-lang.org/\n-[media-guide]: https://www.rust-lang.org/policies/media-guide\n+[media-guide]: https://foundation.rust-lang.org/policies/logo-policy-and-media-guide/\n [policies-licenses]: https://www.rust-lang.org/policies/licenses"}, {"sha": "187861ba127bd93e36af2707722146eee40ff574", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 113, "deletions": 4, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -5,8 +5,13 @@\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n+use rustc_hir::def::Res::Def;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n+use rustc_hir::GenericBound::Trait;\n+use rustc_hir::QPath::Resolved;\n+use rustc_hir::WherePredicate::BoundPredicate;\n+use rustc_hir::{PolyTraitRef, TyKind, WhereBoundPredicate};\n use rustc_infer::infer::{\n     error_reporting::nice_region_error::{\n         self, find_anon_type, find_param_with_region, suggest_adding_lifetime_params,\n@@ -186,6 +191,101 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         false\n     }\n \n+    // For generic associated types (GATs) which implied 'static requirement\n+    // from higher-ranked trait bounds (HRTB). Try to locate span of the trait\n+    // and the span which bounded to the trait for adding 'static lifetime suggestion\n+    fn suggest_static_lifetime_for_gat_from_hrtb(\n+        &self,\n+        diag: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n+        lower_bound: RegionVid,\n+    ) {\n+        let mut suggestions = vec![];\n+        let hir = self.infcx.tcx.hir();\n+\n+        // find generic associated types in the given region 'lower_bound'\n+        let gat_id_and_generics = self\n+            .regioncx\n+            .placeholders_contained_in(lower_bound)\n+            .map(|placeholder| {\n+                if let Some(id) = placeholder.name.get_id()\n+                    && let Some(placeholder_id) = id.as_local()\n+                    && let gat_hir_id = hir.local_def_id_to_hir_id(placeholder_id)\n+                    && let Some(generics_impl) = hir.get_parent(gat_hir_id).generics()\n+                {\n+                    Some((gat_hir_id, generics_impl))\n+                } else {\n+                    None\n+                }\n+            })\n+            .collect::<Vec<_>>();\n+        debug!(?gat_id_and_generics);\n+\n+        // find higher-ranked trait bounds bounded to the generic associated types\n+        let mut hrtb_bounds = vec![];\n+        gat_id_and_generics.iter().flatten().for_each(|(gat_hir_id, generics)| {\n+            for pred in generics.predicates {\n+                let BoundPredicate(\n+                        WhereBoundPredicate {\n+                            bound_generic_params,\n+                            bounds,\n+                            ..\n+                        }) = pred else { continue; };\n+                if bound_generic_params\n+                    .iter()\n+                    .rfind(|bgp| hir.local_def_id_to_hir_id(bgp.def_id) == *gat_hir_id)\n+                    .is_some()\n+                {\n+                    for bound in *bounds {\n+                        hrtb_bounds.push(bound);\n+                    }\n+                }\n+            }\n+        });\n+        debug!(?hrtb_bounds);\n+\n+        hrtb_bounds.iter().for_each(|bound| {\n+            let Trait(PolyTraitRef { trait_ref, span: trait_span, .. }, _) = bound else { return; };\n+            diag.span_note(\n+                *trait_span,\n+                format!(\"due to current limitations in the borrow checker, this implies a `'static` lifetime\")\n+            );\n+            let Some(generics_fn) = hir.get_generics(self.body.source.def_id().expect_local()) else { return; };\n+            let Def(_, trait_res_defid) = trait_ref.path.res else { return; };\n+            debug!(?generics_fn);\n+            generics_fn.predicates.iter().for_each(|predicate| {\n+                let BoundPredicate(\n+                    WhereBoundPredicate {\n+                        span: bounded_span,\n+                        bounded_ty,\n+                        bounds,\n+                        ..\n+                    }\n+                ) = predicate else { return; };\n+                bounds.iter().for_each(|bd| {\n+                    if let Trait(PolyTraitRef { trait_ref: tr_ref, .. }, _) = bd\n+                        && let Def(_, res_defid) = tr_ref.path.res\n+                        && res_defid == trait_res_defid // trait id matches\n+                        && let TyKind::Path(Resolved(_, path)) = bounded_ty.kind\n+                        && let Def(_, defid) = path.res\n+                        && generics_fn.params\n+                            .iter()\n+                            .rfind(|param| param.def_id.to_def_id() == defid)\n+                            .is_some() {\n+                            suggestions.push((bounded_span.shrink_to_hi(), format!(\" + 'static\")));\n+                        }\n+                });\n+            });\n+        });\n+        if suggestions.len() > 0 {\n+            suggestions.dedup();\n+            diag.multipart_suggestion_verbose(\n+                format!(\"consider restricting the type parameter to the `'static` lifetime\"),\n+                suggestions,\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+    }\n+\n     /// Produces nice borrowck error diagnostics for all the errors collected in `nll_errors`.\n     pub(crate) fn report_region_errors(&mut self, nll_errors: RegionErrors<'tcx>) {\n         // Iterate through all the errors, producing a diagnostic for each one. The diagnostics are\n@@ -223,12 +323,21 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         // to report it; we could probably handle it by\n                         // iterating over the universal regions and reporting\n                         // an error that multiple bounds are required.\n-                        self.buffer_error(self.infcx.tcx.sess.create_err(\n-                            GenericDoesNotLiveLongEnough {\n+                        let mut diag =\n+                            self.infcx.tcx.sess.create_err(GenericDoesNotLiveLongEnough {\n                                 kind: type_test.generic_kind.to_string(),\n                                 span: type_test_span,\n-                            },\n-                        ));\n+                            });\n+\n+                        // Add notes and suggestions for the case of 'static lifetime\n+                        // implied but not specified when a generic associated types\n+                        // are from higher-ranked trait bounds\n+                        self.suggest_static_lifetime_for_gat_from_hrtb(\n+                            &mut diag,\n+                            type_test.lower_bound,\n+                        );\n+\n+                        self.buffer_error(diag);\n                     }\n                 }\n "}, {"sha": "238172ea3992f5a08b2cac2f0f00b1659d67ae02", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -527,6 +527,14 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         self.scc_values.region_value_str(scc)\n     }\n \n+    pub(crate) fn placeholders_contained_in<'a>(\n+        &'a self,\n+        r: RegionVid,\n+    ) -> impl Iterator<Item = ty::PlaceholderRegion> + 'a {\n+        let scc = self.constraint_sccs.scc(r.to_region_vid());\n+        self.scc_values.placeholders_contained_in(scc)\n+    }\n+\n     /// Returns access to the value of `r` for debugging purposes.\n     pub(crate) fn region_universe(&self, r: RegionVid) -> ty::UniverseIndex {\n         let scc = self.constraint_sccs.scc(r.to_region_vid());"}, {"sha": "aed7051bb993dc7d6d7a71257cbf6f9b397348d3", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -854,24 +854,7 @@ pub trait PrettyPrinter<'tcx>:\n                 }\n                 p!(\"]\");\n             }\n-            ty::Array(ty, sz) => {\n-                p!(\"[\", print(ty), \"; \");\n-                if self.should_print_verbose() {\n-                    p!(write(\"{:?}\", sz));\n-                } else if let ty::ConstKind::Unevaluated(..) = sz.kind() {\n-                    // Do not try to evaluate unevaluated constants. If we are const evaluating an\n-                    // array length anon const, rustc will (with debug assertions) print the\n-                    // constant's path. Which will end up here again.\n-                    p!(\"_\");\n-                } else if let Some(n) = sz.kind().try_to_bits(self.tcx().data_layout.pointer_size) {\n-                    p!(write(\"{}\", n));\n-                } else if let ty::ConstKind::Param(param) = sz.kind() {\n-                    p!(print(param));\n-                } else {\n-                    p!(\"_\");\n-                }\n-                p!(\"]\")\n-            }\n+            ty::Array(ty, sz) => p!(\"[\", print(ty), \"; \", print(sz), \"]\"),\n             ty::Slice(ty) => p!(\"[\", print(ty), \"]\"),\n         }\n \n@@ -1303,21 +1286,25 @@ pub trait PrettyPrinter<'tcx>:\n         match ct.kind() {\n             ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }) => {\n                 match self.tcx().def_kind(def.did) {\n-                    DefKind::Static(..) | DefKind::Const | DefKind::AssocConst => {\n+                    DefKind::Const | DefKind::AssocConst => {\n                         p!(print_value_path(def.did, substs))\n                     }\n-                    _ => {\n-                        if def.is_local() {\n-                            let span = self.tcx().def_span(def.did);\n-                            if let Ok(snip) = self.tcx().sess.source_map().span_to_snippet(span) {\n-                                p!(write(\"{}\", snip))\n-                            } else {\n-                                print_underscore!()\n-                            }\n+                    DefKind::AnonConst => {\n+                        if def.is_local()\n+                            && let span = self.tcx().def_span(def.did)\n+                            && let Ok(snip) = self.tcx().sess.source_map().span_to_snippet(span)\n+                        {\n+                            p!(write(\"{}\", snip))\n                         } else {\n-                            print_underscore!()\n+                            // Do not call `print_value_path` as if a parent of this anon const is an impl it will\n+                            // attempt to print out the impl trait ref i.e. `<T as Trait>::{constant#0}`. This would\n+                            // cause printing to enter an infinite recursion if the anon const is in the self type i.e.\n+                            // `impl<T: Default> Default for [T; 32 - 1 - 1 - 1] {`\n+                            // where we would try to print `<[T; /* print `constant#0` again */] as Default>::{constant#0}`\n+                            p!(write(\"{}::{}\", self.tcx().crate_name(def.did.krate), self.tcx().def_path(def.did).to_string_no_crate_verbose()))\n                         }\n                     }\n+                    defkind => bug!(\"`{:?}` has unexpcted defkind {:?}\", ct, defkind),\n                 }\n             }\n             ty::ConstKind::Infer(infer_ct) => {\n@@ -1339,7 +1326,7 @@ pub trait PrettyPrinter<'tcx>:\n             ty::ConstKind::Placeholder(placeholder) => p!(write(\"Placeholder({:?})\", placeholder)),\n             // FIXME(generic_const_exprs):\n             // write out some legible representation of an abstract const?\n-            ty::ConstKind::Expr(_) => p!(\"[Const Expr]\"),\n+            ty::ConstKind::Expr(_) => p!(\"[const expr]\"),\n             ty::ConstKind::Error(_) => p!(\"[const error]\"),\n         };\n         Ok(self)"}, {"sha": "032cbb01ffbf59a6681f22d5cf3ed65b11174fc8", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -100,6 +100,13 @@ impl BoundRegionKind {\n \n         None\n     }\n+\n+    pub fn get_id(&self) -> Option<DefId> {\n+        match *self {\n+            BoundRegionKind::BrNamed(id, _) => return Some(id),\n+            _ => None,\n+        }\n+    }\n }\n \n pub trait Article {"}, {"sha": "2a93a242d51744e02e5fa196579898a67f9d682d", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -1,7 +1,6 @@\n #![feature(allocator_api)]\n #![feature(alloc_layout_extra)]\n #![feature(assert_matches)]\n-#![feature(box_syntax)]\n #![feature(btree_drain_filter)]\n #![feature(cow_is_borrowed)]\n #![feature(const_box)]"}, {"sha": "3ac01d1727513ec99ae350740263314bd0442dd9", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -831,6 +831,15 @@ fn partition_at_index_loop<'a, T, F>(\n ) where\n     F: FnMut(&T, &T) -> bool,\n {\n+    // Limit the amount of iterations and fall back to heapsort, similarly to `slice::sort_unstable`.\n+    // This lowers the worst case running time from O(n^2) to O(n log n).\n+    // FIXME: Investigate whether it would be better to use something like Median of Medians\n+    // or Fast Deterministic Selection to guarantee O(n) worst case.\n+    let mut limit = usize::BITS - v.len().leading_zeros();\n+\n+    // True if the last partitioning was reasonably balanced.\n+    let mut was_balanced = true;\n+\n     loop {\n         // For slices of up to this length it's probably faster to simply sort them.\n         const MAX_INSERTION: usize = 10;\n@@ -839,6 +848,18 @@ fn partition_at_index_loop<'a, T, F>(\n             return;\n         }\n \n+        if limit == 0 {\n+            heapsort(v, is_less);\n+            return;\n+        }\n+\n+        // If the last partitioning was imbalanced, try breaking patterns in the slice by shuffling\n+        // some elements around. Hopefully we'll choose a better pivot this time.\n+        if !was_balanced {\n+            break_patterns(v);\n+            limit -= 1;\n+        }\n+\n         // Choose a pivot\n         let (pivot, _) = choose_pivot(v, is_less);\n \n@@ -863,6 +884,7 @@ fn partition_at_index_loop<'a, T, F>(\n         }\n \n         let (mid, _) = partition(v, pivot, is_less);\n+        was_balanced = cmp::min(mid, v.len() - mid) >= v.len() / 8;\n \n         // Split the slice into `left`, `pivot`, and `right`.\n         let (left, right) = v.split_at_mut(mid);"}, {"sha": "3fa478751737f23e1e99ee816feb628be731e5cd", "filename": "src/librustdoc/html/static/css/settings.css", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -33,10 +33,6 @@\n \tpadding-bottom: 1px;\n }\n \n-.radio-line .setting-name {\n-\twidth: 100%;\n-}\n-\n .radio-line .choice {\n \tmargin-top: 0.1em;\n \tmargin-bottom: 0.1em;"}, {"sha": "84df1b7d3911a4ecf0d3209afa4cee6f5466b079", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -135,7 +135,7 @@\n                 // This is a select setting.\n                 output += `\\\n <div class=\"radio-line\" id=\"${js_data_name}\">\n-    <span class=\"setting-name\">${setting_name}</span>\n+    <div class=\"setting-name\">${setting_name}</div>\n <div class=\"choices\">`;\n                 onEach(setting[\"options\"], option => {\n                     const checked = option === setting[\"default\"] ? \" checked\" : \"\";"}, {"sha": "620a3da94636e80b010ba0fe6dd4d8f897fe9574", "filename": "tests/assembly/is_aligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fassembly%2Fis_aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fassembly%2Fis_aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Fis_aligned.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -1,5 +1,5 @@\n // assembly-output: emit-asm\n-// min-llvm-version: 14.0\n+// min-llvm-version: 15.0\n // only-x86_64\n // revisions: opt-speed opt-size\n // [opt-speed] compile-flags: -Copt-level=1"}, {"sha": "0413ed6b26f360d59817257595f0bfac463b46bc", "filename": "tests/codegen/issue-96497-slice-size-nowrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fcodegen%2Fissue-96497-slice-size-nowrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fcodegen%2Fissue-96497-slice-size-nowrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fissue-96497-slice-size-nowrap.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -3,7 +3,7 @@\n // in some situations, see https://github.com/rust-lang/rust/issues/96497#issuecomment-1112865218\n \n // compile-flags: -O\n-// min-llvm-version: 14.0\n+// min-llvm-version: 15.0\n \n #![crate_type=\"lib\"]\n "}, {"sha": "798e45df8ca766f8c0bdf0daac9492cbe7b23944", "filename": "tests/mir-opt/nll/region_subtyping_basic.main.nll.0.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -22,7 +22,7 @@\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region_subtyping_basic.rs:+0:11: +0:11\n-    let mut _1: [usize; Const { ty: usize, kind: Value(Leaf(0x00000003)) }]; // in scope 0 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n+    let mut _1: [usize; Const(Value(Leaf(0x00000003)): usize)]; // in scope 0 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n     let _3: usize;                       // in scope 0 at $DIR/region_subtyping_basic.rs:+2:16: +2:17\n     let mut _4: usize;                   // in scope 0 at $DIR/region_subtyping_basic.rs:+2:14: +2:18\n     let mut _5: bool;                    // in scope 0 at $DIR/region_subtyping_basic.rs:+2:14: +2:18"}, {"sha": "4767bfc76ed9de92c1632622e26392765d54cb87", "filename": "tests/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -22,7 +22,7 @@\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region_subtyping_basic.rs:+0:11: +0:11\n-    let mut _1: [usize; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]; // in scope 0 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n+    let mut _1: [usize; Const(Value(Leaf(0x0000000000000003)): usize)]; // in scope 0 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n     let _3: usize;                       // in scope 0 at $DIR/region_subtyping_basic.rs:+2:16: +2:17\n     let mut _4: usize;                   // in scope 0 at $DIR/region_subtyping_basic.rs:+2:14: +2:18\n     let mut _5: bool;                    // in scope 0 at $DIR/region_subtyping_basic.rs:+2:14: +2:18"}, {"sha": "72de41e41bae140c59c217efc97bfdf43dfccb41", "filename": "tests/rustdoc-gui/settings.goml", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Frustdoc-gui%2Fsettings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Frustdoc-gui%2Fsettings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsettings.goml?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -105,6 +105,33 @@ assert-css: (\n         \"box-shadow\": \"rgb(33, 150, 243) 0px 0px 1px 1px\",\n     },\n )\n+// Now we check the setting-name for radio buttons is on a different line than the label.\n+compare-elements-position-near: (\n+    \"#theme .setting-name\",\n+    \"#theme .choices\",\n+    {\"x\": 1}\n+)\n+compare-elements-position-near-false: (\n+    \"#theme .setting-name\",\n+    \"#theme .choices\",\n+    {\"y\": 1}\n+)\n+// Now we check that the label positions are all on the same line.\n+compare-elements-position-near: (\n+    \"#theme .choices #theme-light\",\n+    \"#theme .choices #theme-dark\",\n+    {\"y\": 1}\n+)\n+compare-elements-position-near: (\n+    \"#theme .choices #theme-dark\",\n+    \"#theme .choices #theme-ayu\",\n+    {\"y\": 1}\n+)\n+compare-elements-position-near: (\n+    \"#theme .choices #theme-ayu\",\n+    \"#theme .choices #theme-system-preference\",\n+    {\"y\": 1}\n+)\n \n // First we check the \"default\" display for toggles.\n assert-css: ("}, {"sha": "24aa405211f4cc3f4322b4f5911b56590da6e6a3", "filename": "tests/ui/const-generics/const-param-type-depends-on-const-param.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -10,7 +10,7 @@ error[E0770]: the type of const parameters must not depend on other generic para\n LL | pub struct SelfDependent<const N: [u8; N]>;\n    |                                        ^ the type must not depend on the parameter `N`\n \n-error: `[u8; _]` is forbidden as the type of a const generic parameter\n+error: `[u8; N]` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-type-depends-on-const-param.rs:11:47\n    |\n LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n@@ -19,7 +19,7 @@ LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n    = note: the only supported types are integers, `bool` and `char`\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n-error: `[u8; _]` is forbidden as the type of a const generic parameter\n+error: `[u8; N]` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-type-depends-on-const-param.rs:15:35\n    |\n LL | pub struct SelfDependent<const N: [u8; N]>;"}, {"sha": "64b2acb03629235f33cad7d2032359eeb4fa1a07", "filename": "tests/ui/const-generics/const-param-type-depends-on-const-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -10,10 +10,10 @@\n \n pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n //~^ ERROR: the type of const parameters must not depend on other generic parameters\n-//[min]~^^ ERROR `[u8; _]` is forbidden\n+//[min]~^^ ERROR `[u8; N]` is forbidden\n \n pub struct SelfDependent<const N: [u8; N]>;\n //~^ ERROR: the type of const parameters must not depend on other generic parameters\n-//[min]~^^ ERROR `[u8; _]` is forbidden\n+//[min]~^^ ERROR `[u8; N]` is forbidden\n \n fn main() {}"}, {"sha": "d8eebeb0d2115c3673a4eb139a5c86703631a4be", "filename": "tests/ui/const-generics/dont-evaluate-array-len-on-err-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `[Adt; _]: Foo` is not satisfied\n+error[E0277]: the trait bound `[Adt; std::mem::size_of::<Self::Assoc>()]: Foo` is not satisfied\n   --> $DIR/dont-evaluate-array-len-on-err-1.rs:15:9\n    |\n LL |         <[Adt; std::mem::size_of::<Self::Assoc>()] as Foo>::bar()\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `[Adt; _]`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `[Adt; std::mem::size_of::<Self::Assoc>()]`\n \n error: aborting due to previous error\n "}, {"sha": "97be074933d9b48d2ea7b2a7eb901dd0f75eff4f", "filename": "tests/ui/const-generics/generic_const_exprs/auxiliary/anon_const_non_local.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fauxiliary%2Fanon_const_non_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fauxiliary%2Fanon_const_non_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fauxiliary%2Fanon_const_non_local.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -0,0 +1,8 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+pub struct Foo<const N: usize>;\n+\n+pub fn foo<const N: usize>() -> Foo<{ N + 1 }> {\n+    Foo\n+}"}, {"sha": "65822856e1d7c100b25ab0e9ce4ab35be19159da", "filename": "tests/ui/const-generics/generic_const_exprs/issue-62504.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.min.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -15,7 +15,7 @@ LL |         ArrayHolder([0; Self::SIZE])\n    |         arguments to this struct are incorrect\n    |\n    = note: expected array `[u32; X]`\n-              found array `[u32; _]`\n+              found array `[u32; Self::SIZE]`\n note: tuple struct defined here\n   --> $DIR/issue-62504.rs:14:8\n    |"}, {"sha": "9baf9790e19b321601d2de1af2bd37bf8d08c790", "filename": "tests/ui/const-generics/generic_const_exprs/issue-79518-default_trait_method_normalization.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -2,13 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/issue-79518-default_trait_method_normalization.rs:16:32\n    |\n LL |         Self::AssocInstance == [(); std::mem::size_of::<Self::Assoc>()];\n-   |         -------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found array `[(); _]`\n+   |         -------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found array `[(); std::mem::size_of::<Self::Assoc>()]`\n    |         |\n    |         expected because this is `<Self as Foo>::Assoc`\n    |\n    = note: expected associated type `<Self as Foo>::Assoc`\n-                        found array `[(); _]`\n-   = help: consider constraining the associated type `<Self as Foo>::Assoc` to `[(); _]` or calling a method that returns `<Self as Foo>::Assoc`\n+                        found array `[(); std::mem::size_of::<Self::Assoc>()]`\n+   = help: consider constraining the associated type `<Self as Foo>::Assoc` to `[(); std::mem::size_of::<Self::Assoc>()]` or calling a method that returns `<Self as Foo>::Assoc`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to previous error"}, {"sha": "1254b4435f738ccdefca9900f90206cf62f4dca2", "filename": "tests/ui/const-generics/generic_const_exprs/non_local_anon_const_diagnostics.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnon_local_anon_const_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnon_local_anon_const_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnon_local_anon_const_diagnostics.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -0,0 +1,16 @@\n+// aux-build:anon_const_non_local.rs\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+extern crate anon_const_non_local;\n+\n+fn bar<const M: usize>()\n+where\n+    [(); M + 1]:,\n+{\n+    let _: anon_const_non_local::Foo<2> = anon_const_non_local::foo::<M>();\n+    //~^ ERROR: mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "3926c830adb7a2f0762bb21f38ddc65e34913308", "filename": "tests/ui/const-generics/generic_const_exprs/non_local_anon_const_diagnostics.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnon_local_anon_const_diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnon_local_anon_const_diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnon_local_anon_const_diagnostics.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/non_local_anon_const_diagnostics.rs:12:43\n+   |\n+LL |     let _: anon_const_non_local::Foo<2> = anon_const_non_local::foo::<M>();\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2`, found `anon_const_non_local::::foo::{constant#0}`\n+   |\n+   = note: expected constant `2`\n+              found constant `anon_const_non_local::::foo::{constant#0}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "5a721720d78b5f31c8567f9cea625f31300449c5", "filename": "tests/ui/const-generics/issues/issue-62878.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -4,7 +4,7 @@ error[E0770]: the type of const parameters must not depend on other generic para\n LL | fn foo<const N: usize, const A: [u8; N]>() {}\n    |                                      ^ the type must not depend on the parameter `N`\n \n-error: `[u8; _]` is forbidden as the type of a const generic parameter\n+error: `[u8; N]` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-62878.rs:5:33\n    |\n LL | fn foo<const N: usize, const A: [u8; N]>() {}"}, {"sha": "4c08a484ef47b776e6d30a6cb58035df64d7f9ca", "filename": "tests/ui/const-generics/issues/issue-62878.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -4,7 +4,7 @@\n \n fn foo<const N: usize, const A: [u8; N]>() {}\n //~^ ERROR the type of const parameters must not\n-//[min]~| ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n+//[min]~| ERROR `[u8; N]` is forbidden as the type of a const generic parameter\n \n fn main() {\n     foo::<_, { [1] }>();"}, {"sha": "998b16a79e63863787d7f6fd7990832f9e032958", "filename": "tests/ui/const-generics/issues/issue-71169.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -4,7 +4,7 @@ error[E0770]: the type of const parameters must not depend on other generic para\n LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n    |                                           ^^^ the type must not depend on the parameter `LEN`\n \n-error: `[u8; _]` is forbidden as the type of a const generic parameter\n+error: `[u8; LEN]` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-71169.rs:5:38\n    |\n LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}"}, {"sha": "e4ec6b073761346d080ee8f9c25589e68f1b84ac", "filename": "tests/ui/const-generics/issues/issue-71169.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -4,7 +4,7 @@\n \n fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n //~^ ERROR the type of const parameters must not\n-//[min]~^^ ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n+//[min]~^^ ERROR `[u8; LEN]` is forbidden as the type of a const generic parameter\n fn main() {\n     const DATA: [u8; 4] = *b\"ABCD\";\n     foo::<4, DATA>();"}, {"sha": "f03354fc472c088a8c3aa6ab1020bf0f03b03ee5", "filename": "tests/ui/const-generics/issues/issue-73491.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -1,4 +1,4 @@\n-error: `[u32; _]` is forbidden as the type of a const generic parameter\n+error: `[u32; LEN]` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-73491.rs:8:19\n    |\n LL | fn hoge<const IN: [u32; LEN]>() {}"}, {"sha": "482dbb04daae962eb4dbea96d171d0c7138a5f21", "filename": "tests/ui/const-generics/issues/issue-73491.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -6,6 +6,6 @@\n const LEN: usize = 1024;\n \n fn hoge<const IN: [u32; LEN]>() {}\n-//[min]~^ ERROR `[u32; _]` is forbidden as the type of a const generic parameter\n+//[min]~^ ERROR `[u32; LEN]` is forbidden as the type of a const generic parameter\n \n fn main() {}"}, {"sha": "134c248347d3cd51facc116d257352bf2b5f4aa6", "filename": "tests/ui/const-generics/issues/issue-74101.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -1,4 +1,4 @@\n-error: `[u8; _]` is forbidden as the type of a const generic parameter\n+error: `[u8; 1 + 2]` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74101.rs:6:18\n    |\n LL | fn test<const N: [u8; 1 + 2]>() {}\n@@ -7,7 +7,7 @@ LL | fn test<const N: [u8; 1 + 2]>() {}\n    = note: the only supported types are integers, `bool` and `char`\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n-error: `[u8; _]` is forbidden as the type of a const generic parameter\n+error: `[u8; 1 + 2]` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74101.rs:9:21\n    |\n LL | struct Foo<const N: [u8; 1 + 2]>;"}, {"sha": "4c9b2d3c634dacec0fa68bb4b48d094e430aadce", "filename": "tests/ui/const-generics/issues/issue-74101.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -4,9 +4,9 @@\n #![cfg_attr(full, allow(incomplete_features))]\n \n fn test<const N: [u8; 1 + 2]>() {}\n-//[min]~^ ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n+//[min]~^ ERROR `[u8; 1 + 2]` is forbidden as the type of a const generic parameter\n \n struct Foo<const N: [u8; 1 + 2]>;\n-//[min]~^ ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n+//[min]~^ ERROR `[u8; 1 + 2]` is forbidden as the type of a const generic parameter\n \n fn main() {}"}, {"sha": "46af19ef395400c4908865e855af08d1466dc8d3", "filename": "tests/ui/const-generics/issues/issue-75047.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -1,4 +1,4 @@\n-error: `[u8; _]` is forbidden as the type of a const generic parameter\n+error: `[u8; Bar::<u32>::value()]` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-75047.rs:14:21\n    |\n LL | struct Foo<const N: [u8; Bar::<u32>::value()]>;"}, {"sha": "7b6fb92bca96e04411ee2d41256bf33d9a92b8fd", "filename": "tests/ui/const-generics/issues/issue-75047.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -12,6 +12,6 @@ impl<T> Bar<T> {\n }\n \n struct Foo<const N: [u8; Bar::<u32>::value()]>;\n-//[min]~^ ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n+//[min]~^ ERROR `[u8; Bar::<u32>::value()]` is forbidden as the type of a const generic parameter\n \n fn main() {}"}, {"sha": "cff02b0d445c81e8d351fec56c4bc1e015d86923", "filename": "tests/ui/const-generics/nested-type.min.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fnested-type.min.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -1,4 +1,14 @@\n-error: `[u8; _]` is forbidden as the type of a const generic parameter\n+error: `[u8; {\n+           struct Foo<const N: usize>;\n+       \n+           impl<const N: usize> Foo<N> {\n+               fn value() -> usize {\n+                   N\n+               }\n+           }\n+       \n+           Foo::<17>::value()\n+       }]` is forbidden as the type of a const generic parameter\n   --> $DIR/nested-type.rs:6:21\n    |\n LL |   struct Foo<const N: [u8; {"}, {"sha": "17088d9995f2d1c65368333ca1f237324c2c73c7", "filename": "tests/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -15,8 +15,8 @@ note: ...which requires const-evaluating + checking `Foo::bytes::{constant#0}`..\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing layout of `Foo`...\n-   = note: ...which requires computing layout of `[u8; _]`...\n-   = note: ...which requires normalizing `[u8; _]`...\n+   = note: ...which requires computing layout of `[u8; std::mem::size_of::<Foo>()]`...\n+   = note: ...which requires normalizing `[u8; std::mem::size_of::<Foo>()]`...\n    = note: ...which again requires evaluating type-level constant, completing the cycle\n note: cycle used when checking that `Foo` is well-formed\n   --> $DIR/const-size_of-cycle.rs:3:1"}, {"sha": "ec64b956dfe2b8f99f33de8ea7daa6a80c216d41", "filename": "tests/ui/consts/issue-44415.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconsts%2Fissue-44415.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconsts%2Fissue-44415.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-44415.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -15,8 +15,8 @@ note: ...which requires const-evaluating + checking `Foo::bytes::{constant#0}`..\n LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing layout of `Foo`...\n-   = note: ...which requires computing layout of `[u8; _]`...\n-   = note: ...which requires normalizing `[u8; _]`...\n+   = note: ...which requires computing layout of `[u8; unsafe { intrinsics::size_of::<Foo>() }]`...\n+   = note: ...which requires normalizing `[u8; unsafe { intrinsics::size_of::<Foo>() }]`...\n    = note: ...which again requires evaluating type-level constant, completing the cycle\n note: cycle used when checking that `Foo` is well-formed\n   --> $DIR/issue-44415.rs:5:1"}, {"sha": "8b3f4b714e1bd33662001b965d3d24a2429cbc6e", "filename": "tests/ui/consts/too_generic_eval_ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconsts%2Ftoo_generic_eval_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconsts%2Ftoo_generic_eval_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Ftoo_generic_eval_ice.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -7,7 +7,7 @@ impl<A, B> Foo<A, B> {\n         [5; Self::HOST_SIZE] == [6; 0]\n         //~^ ERROR constant expression depends on a generic parameter\n         //~| ERROR constant expression depends on a generic parameter\n-        //~| ERROR can't compare `[{integer}; _]` with `[{integer}; 0]`\n+        //~| ERROR can't compare `[{integer}; Self::HOST_SIZE]` with `[{integer}; 0]`\n     }\n }\n "}, {"sha": "5af82a3e34bf5f3959debe01554ac8da4d833a35", "filename": "tests/ui/consts/too_generic_eval_ice.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -14,13 +14,13 @@ LL |         [5; Self::HOST_SIZE] == [6; 0]\n    |\n    = note: this may fail depending on what value the parameter takes\n \n-error[E0277]: can't compare `[{integer}; _]` with `[{integer}; 0]`\n+error[E0277]: can't compare `[{integer}; Self::HOST_SIZE]` with `[{integer}; 0]`\n   --> $DIR/too_generic_eval_ice.rs:7:30\n    |\n LL |         [5; Self::HOST_SIZE] == [6; 0]\n-   |                              ^^ no implementation for `[{integer}; _] == [{integer}; 0]`\n+   |                              ^^ no implementation for `[{integer}; Self::HOST_SIZE] == [{integer}; 0]`\n    |\n-   = help: the trait `PartialEq<[{integer}; 0]>` is not implemented for `[{integer}; _]`\n+   = help: the trait `PartialEq<[{integer}; 0]>` is not implemented for `[{integer}; Self::HOST_SIZE]`\n    = help: the following other types implement trait `PartialEq<Rhs>`:\n              <&[B] as PartialEq<[A; N]>>\n              <&[T] as PartialEq<Vec<U, A>>>"}, {"sha": "d5991bcf5693df726787ee5cb4f2ed4005fd4cf2", "filename": "tests/ui/debuginfo/debuginfo-type-name-layout-ice-94961-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-1.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -1,4 +1,4 @@\n-error: values of the type `[u8; SIZE]` are too big for the current architecture\n+error: values of the type `[u8; usize::MAX]` are too big for the current architecture\n \n error: aborting due to previous error\n "}, {"sha": "d5991bcf5693df726787ee5cb4f2ed4005fd4cf2", "filename": "tests/ui/debuginfo/debuginfo-type-name-layout-ice-94961-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-2.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -1,4 +1,4 @@\n-error: values of the type `[u8; SIZE]` are too big for the current architecture\n+error: values of the type `[u8; usize::MAX]` are too big for the current architecture\n \n error: aborting due to previous error\n "}, {"sha": "a085096e1f8c569d29e8c3a404a18d9c96b8d581", "filename": "tests/ui/generic-associated-types/collectivity-regression.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fgeneric-associated-types%2Fcollectivity-regression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fgeneric-associated-types%2Fcollectivity-regression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fcollectivity-regression.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -9,6 +9,16 @@ LL | |         // probably should work.\n LL | |         let _x = x;\n LL | |     };\n    | |_____^\n+   |\n+note: due to current limitations in the borrow checker, this implies a `'static` lifetime\n+  --> $DIR/collectivity-regression.rs:11:16\n+   |\n+LL |     for<'a> T: Get<Value<'a> = ()>,\n+   |                ^^^^^^^^^^^^^^^^^^^\n+help: consider restricting the type parameter to the `'static` lifetime\n+   |\n+LL |     for<'a> T: Get<Value<'a> = ()> + 'static,\n+   |                                    +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "c387046e91008f6ad823e9c233f9b2c038068e35", "filename": "tests/ui/inference/issue-83606.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Finference%2Fissue-83606.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Finference%2Fissue-83606.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fissue-83606.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -6,5 +6,5 @@ fn foo<const N: usize>(_: impl std::fmt::Display) -> [usize; N] {\n \n fn main() {\n     let _ = foo(\"foo\");\n-    //~^ ERROR: type annotations needed for `[usize; _]`\n+    //~^ ERROR: type annotations needed for `[usize; N]`\n }"}, {"sha": "f2ee8692e38a696d111c52ed9659972a7236d3ce", "filename": "tests/ui/inference/issue-83606.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Finference%2Fissue-83606.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Finference%2Fissue-83606.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fissue-83606.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -1,12 +1,12 @@\n-error[E0282]: type annotations needed for `[usize; _]`\n+error[E0282]: type annotations needed for `[usize; N]`\n   --> $DIR/issue-83606.rs:8:9\n    |\n LL |     let _ = foo(\"foo\");\n    |         ^\n    |\n help: consider giving this pattern a type, where the the value of const parameter `N` is specified\n    |\n-LL |     let _: [usize; _] = foo(\"foo\");\n+LL |     let _: [usize; N] = foo(\"foo\");\n    |          ++++++++++++\n \n error: aborting due to previous error"}, {"sha": "277ce8a77e97423d2841035aa8839ce8cf4165aa", "filename": "tests/ui/lifetimes/issue-105507.fixed", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Flifetimes%2Fissue-105507.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Flifetimes%2Fissue-105507.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-105507.fixed?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -0,0 +1,43 @@\n+// run-rustfix\n+//\n+#![allow(warnings)]\n+struct Wrapper<'a, T: ?Sized>(&'a T);\n+\n+trait Project {\n+    type Projected<'a> where Self: 'a;\n+    fn project(this: Wrapper<'_, Self>) -> Self::Projected<'_>;\n+}\n+trait MyTrait {}\n+trait ProjectedMyTrait {}\n+\n+impl<T> Project for Option<T> {\n+    type Projected<'a> = Option<Wrapper<'a, T>> where T: 'a;\n+    fn project(this: Wrapper<'_, Self>) -> Self::Projected<'_> {\n+        this.0.as_ref().map(Wrapper)\n+    }\n+}\n+\n+impl<T: MyTrait> MyTrait for Option<Wrapper<'_, T>> {}\n+\n+impl<T: ProjectedMyTrait> MyTrait for Wrapper<'_, T> {}\n+\n+impl<T> ProjectedMyTrait for T\n+    where\n+        T: Project,\n+        for<'a> T::Projected<'a>: MyTrait,\n+        //~^ NOTE due to current limitations in the borrow checker, this implies a `'static` lifetime\n+        //~| NOTE due to current limitations in the borrow checker, this implies a `'static` lifetime\n+{}\n+\n+fn require_trait<T: MyTrait>(_: T) {}\n+\n+fn foo<T : MyTrait + 'static + 'static, U : MyTrait + 'static + 'static>(wrap: Wrapper<'_, Option<T>>, wrap1: Wrapper<'_, Option<U>>) {\n+    //~^ HELP consider restricting the type parameter to the `'static` lifetime\n+    //~| HELP consider restricting the type parameter to the `'static` lifetime\n+    require_trait(wrap);\n+    //~^ ERROR `T` does not live long enough\n+    require_trait(wrap1);\n+    //~^ ERROR `U` does not live long enough\n+}\n+\n+fn main() {}"}, {"sha": "f46c6b6f21e86dda274e6e8f8951115e43c86bb3", "filename": "tests/ui/lifetimes/issue-105507.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Flifetimes%2Fissue-105507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Flifetimes%2Fissue-105507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-105507.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -0,0 +1,43 @@\n+// run-rustfix\n+//\n+#![allow(warnings)]\n+struct Wrapper<'a, T: ?Sized>(&'a T);\n+\n+trait Project {\n+    type Projected<'a> where Self: 'a;\n+    fn project(this: Wrapper<'_, Self>) -> Self::Projected<'_>;\n+}\n+trait MyTrait {}\n+trait ProjectedMyTrait {}\n+\n+impl<T> Project for Option<T> {\n+    type Projected<'a> = Option<Wrapper<'a, T>> where T: 'a;\n+    fn project(this: Wrapper<'_, Self>) -> Self::Projected<'_> {\n+        this.0.as_ref().map(Wrapper)\n+    }\n+}\n+\n+impl<T: MyTrait> MyTrait for Option<Wrapper<'_, T>> {}\n+\n+impl<T: ProjectedMyTrait> MyTrait for Wrapper<'_, T> {}\n+\n+impl<T> ProjectedMyTrait for T\n+    where\n+        T: Project,\n+        for<'a> T::Projected<'a>: MyTrait,\n+        //~^ NOTE due to current limitations in the borrow checker, this implies a `'static` lifetime\n+        //~| NOTE due to current limitations in the borrow checker, this implies a `'static` lifetime\n+{}\n+\n+fn require_trait<T: MyTrait>(_: T) {}\n+\n+fn foo<T : MyTrait, U : MyTrait>(wrap: Wrapper<'_, Option<T>>, wrap1: Wrapper<'_, Option<U>>) {\n+    //~^ HELP consider restricting the type parameter to the `'static` lifetime\n+    //~| HELP consider restricting the type parameter to the `'static` lifetime\n+    require_trait(wrap);\n+    //~^ ERROR `T` does not live long enough\n+    require_trait(wrap1);\n+    //~^ ERROR `U` does not live long enough\n+}\n+\n+fn main() {}"}, {"sha": "44d3a7eb9a42075c316aadf5a57cfc54bd48b217", "filename": "tests/ui/lifetimes/issue-105507.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Flifetimes%2Fissue-105507.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Flifetimes%2Fissue-105507.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-105507.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -0,0 +1,34 @@\n+error: `T` does not live long enough\n+  --> $DIR/issue-105507.rs:37:5\n+   |\n+LL |     require_trait(wrap);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+note: due to current limitations in the borrow checker, this implies a `'static` lifetime\n+  --> $DIR/issue-105507.rs:27:35\n+   |\n+LL |         for<'a> T::Projected<'a>: MyTrait,\n+   |                                   ^^^^^^^\n+help: consider restricting the type parameter to the `'static` lifetime\n+   |\n+LL | fn foo<T : MyTrait + 'static, U : MyTrait + 'static>(wrap: Wrapper<'_, Option<T>>, wrap1: Wrapper<'_, Option<U>>) {\n+   |                    +++++++++              +++++++++\n+\n+error: `U` does not live long enough\n+  --> $DIR/issue-105507.rs:39:5\n+   |\n+LL |     require_trait(wrap1);\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: due to current limitations in the borrow checker, this implies a `'static` lifetime\n+  --> $DIR/issue-105507.rs:27:35\n+   |\n+LL |         for<'a> T::Projected<'a>: MyTrait,\n+   |                                   ^^^^^^^\n+help: consider restricting the type parameter to the `'static` lifetime\n+   |\n+LL | fn foo<T : MyTrait + 'static, U : MyTrait + 'static>(wrap: Wrapper<'_, Option<T>>, wrap1: Wrapper<'_, Option<U>>) {\n+   |                    +++++++++              +++++++++\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "0d79fc0c770698246470e96fbf2291491cd712bd", "filename": "tests/ui/limits/issue-15919-32.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Flimits%2Fissue-15919-32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Flimits%2Fissue-15919-32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flimits%2Fissue-15919-32.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -1,4 +1,4 @@\n-error: values of the type `[usize; 4294967295]` are too big for the current architecture\n+error: values of the type `[usize; usize::MAX]` are too big for the current architecture\n   --> $DIR/issue-15919-32.rs:9:9\n    |\n LL |     let x = [0usize; 0xffff_ffff];"}, {"sha": "3399d644ede3ae8fe28517d997af8e8368b42b55", "filename": "tests/ui/limits/issue-15919-64.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Flimits%2Fissue-15919-64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Flimits%2Fissue-15919-64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flimits%2Fissue-15919-64.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -1,4 +1,4 @@\n-error: values of the type `[usize; 18446744073709551615]` are too big for the current architecture\n+error: values of the type `[usize; usize::MAX]` are too big for the current architecture\n   --> $DIR/issue-15919-64.rs:9:9\n    |\n LL |     let x = [0usize; 0xffff_ffff_ffff_ffff];"}, {"sha": "56cf5d831bd7e7491d8b75baacd8c05a3b7a5b1e", "filename": "tests/ui/limits/issue-17913.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Flimits%2Fissue-17913.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Flimits%2Fissue-17913.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flimits%2Fissue-17913.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -1,5 +1,5 @@\n // build-fail\n-// normalize-stderr-test \"\\[&usize; \\d+\\]\" -> \"[&usize; N]\"\n+// normalize-stderr-test \"\\[&usize; \\d+\\]\" -> \"[&usize; usize::MAX]\"\n // error-pattern: too big for the current architecture\n \n // FIXME https://github.com/rust-lang/rust/issues/59774"}, {"sha": "684db53a9190988b8ab31b73ef7a893fe67ec5ae", "filename": "tests/ui/limits/issue-17913.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Flimits%2Fissue-17913.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Flimits%2Fissue-17913.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flimits%2Fissue-17913.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -1,4 +1,4 @@\n-error: values of the type `[&usize; N]` are too big for the current architecture\n+error: values of the type `[&usize; usize::MAX]` are too big for the current architecture\n \n error: aborting due to previous error\n "}, {"sha": "99f1fdf755aa27c1406e9f48f2f96c90565e6e5e", "filename": "tests/ui/limits/issue-55878.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Flimits%2Fissue-55878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Flimits%2Fissue-55878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flimits%2Fissue-55878.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -1,7 +1,7 @@\n-error[E0080]: values of the type `[u8; SIZE]` are too big for the current architecture\n+error[E0080]: values of the type `[u8; usize::MAX]` are too big for the current architecture\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n-note: inside `std::mem::size_of::<[u8; SIZE]>`\n+note: inside `std::mem::size_of::<[u8; usize::MAX]>`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n note: inside `main`\n   --> $DIR/issue-55878.rs:7:26"}, {"sha": "44b2be269494aa94a952ee24195d28adda0823f0", "filename": "tests/ui/limits/issue-69485-var-size-diffs-too-large.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Flimits%2Fissue-69485-var-size-diffs-too-large.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Flimits%2Fissue-69485-var-size-diffs-too-large.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flimits%2Fissue-69485-var-size-diffs-too-large.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -1,4 +1,4 @@\n-error: values of the type `[u8; 18446744073709551615]` are too big for the current architecture\n+error: values of the type `[u8; usize::MAX]` are too big for the current architecture\n   --> $DIR/issue-69485-var-size-diffs-too-large.rs:6:5\n    |\n LL |     Bug::V([0; !0]);"}, {"sha": "d5991bcf5693df726787ee5cb4f2ed4005fd4cf2", "filename": "tests/ui/limits/issue-75158-64.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Flimits%2Fissue-75158-64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Flimits%2Fissue-75158-64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flimits%2Fissue-75158-64.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -1,4 +1,4 @@\n-error: values of the type `[u8; 18446744073709551615]` are too big for the current architecture\n+error: values of the type `[u8; usize::MAX]` are too big for the current architecture\n \n error: aborting due to previous error\n "}, {"sha": "81aba403d0ba2cecb2bcf17238c207d46bdfd003", "filename": "tests/ui/symbol-names/impl2.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fsymbol-names%2Fimpl2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fsymbol-names%2Fimpl2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fimpl2.rs?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -8,9 +8,8 @@ trait Foo {\n }\n \n impl Foo for [u8; 1 + 2] {\n-    #[rustc_def_path] //~ ERROR def-path(<[u8; _] as Foo>::baz)\n-    fn baz() { }\n+    #[rustc_def_path] //~ ERROR def-path(<[u8; 1 + 2] as Foo>::baz)\n+    fn baz() {}\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "0c3205e0108e66e50589e2bab2b702537991b76e", "filename": "tests/ui/symbol-names/impl2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fsymbol-names%2Fimpl2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74c1ad5d35c7fbdb834c42144d966279fdff3679/tests%2Fui%2Fsymbol-names%2Fimpl2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fimpl2.stderr?ref=74c1ad5d35c7fbdb834c42144d966279fdff3679", "patch": "@@ -1,4 +1,4 @@\n-error: def-path(<[u8; _] as Foo>::baz)\n+error: def-path(<[u8; 1 + 2] as Foo>::baz)\n   --> $DIR/impl2.rs:11:5\n    |\n LL |     #[rustc_def_path]"}]}