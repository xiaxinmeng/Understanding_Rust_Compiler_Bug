{"sha": "f0b8166870bd73a872642f090ae6b88e2bef922a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYjgxNjY4NzBiZDczYTg3MjY0MmYwOTBhZTZiODhlMmJlZjkyMmE=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-01-27T12:21:02Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-02-05T23:33:50Z"}, "message": "BTreeMap: fix documentation of unstable public members", "tree": {"sha": "ef4b6b11f92ce1f9a792e8198b3efc00b34a12d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef4b6b11f92ce1f9a792e8198b3efc00b34a12d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0b8166870bd73a872642f090ae6b88e2bef922a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0b8166870bd73a872642f090ae6b88e2bef922a", "html_url": "https://github.com/rust-lang/rust/commit/f0b8166870bd73a872642f090ae6b88e2bef922a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0b8166870bd73a872642f090ae6b88e2bef922a/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5605b5d693ac0aba5b506923e3e99ec927969d04", "url": "https://api.github.com/repos/rust-lang/rust/commits/5605b5d693ac0aba5b506923e3e99ec927969d04", "html_url": "https://github.com/rust-lang/rust/commit/5605b5d693ac0aba5b506923e3e99ec927969d04"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "003fd590e072ba572458b89796784db439947e9c", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f0b8166870bd73a872642f090ae6b88e2bef922a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0b8166870bd73a872642f090ae6b88e2bef922a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=f0b8166870bd73a872642f090ae6b88e2bef922a", "patch": "@@ -1117,21 +1117,23 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         right\n     }\n \n-    /// Creates an iterator which uses a closure to determine if an element should be removed.\n-    ///\n-    /// If the closure returns true, the element is removed from the map and yielded.\n-    /// If the closure returns false, or panics, the element remains in the map and will not be\n-    /// yielded.\n-    ///\n-    /// Note that `drain_filter` lets you mutate every value in the filter closure, regardless of\n-    /// whether you choose to keep or remove it.\n-    ///\n-    /// If the iterator is only partially consumed or not consumed at all, each of the remaining\n-    /// elements will still be subjected to the closure and removed and dropped if it returns true.\n-    ///\n-    /// It is unspecified how many more elements will be subjected to the closure\n-    /// if a panic occurs in the closure, or a panic occurs while dropping an element,\n-    /// or if the `DrainFilter` value is leaked.\n+    /// Creates an iterator that visits all elements (key-value pairs) in\n+    /// ascending key order and uses a closure to determine if an element should\n+    /// be removed. If the closure returns `true`, the element is removed from\n+    /// the map and yielded. If the closure returns `false`, or panics, the\n+    /// element remains in the map and will not be yielded.\n+    ///\n+    /// The iterator also lets you mutate the value of each element in the\n+    /// closure, regardless of whether you choose to keep or remove it.\n+    ///\n+    /// If the iterator is only partially consumed or not consumed at all, each\n+    /// of the remaining elements is still subjected to the closure, which may\n+    /// change its value and, by returning `true`, have the element removed and\n+    /// dropped.\n+    ///\n+    /// It is unspecified how many more elements will be subjected to the\n+    /// closure if a panic occurs in the closure, or a panic occurs while\n+    /// dropping an element, or if the `DrainFilter` value is leaked.\n     ///\n     /// # Examples\n     ///"}, {"sha": "e60e82c7875efa5618bf5100c700d2dd4a1c8dec", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0b8166870bd73a872642f090ae6b88e2bef922a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0b8166870bd73a872642f090ae6b88e2bef922a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=f0b8166870bd73a872642f090ae6b88e2bef922a", "patch": "@@ -652,7 +652,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut map = BTreeSet::new();\n-    /// assert_eq!(map.first(), None);\n+    /// assert_eq!(map.last(), None);\n     /// map.insert(1);\n     /// assert_eq!(map.last(), Some(&1));\n     /// map.insert(2);"}]}