{"sha": "3e536e8ac6a722285190416b21a1684289f18b64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNTM2ZThhYzZhNzIyMjg1MTkwNDE2YjIxYTE2ODQyODlmMThiNjQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-03T14:24:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-03T14:24:59Z"}, "message": "Rollup merge of #60393 - estebank:pat-sugg, r=oli-obk\n\n Do not suggest incorrect syntax on pattern type error due to borrow\n\nFix #55174.", "tree": {"sha": "695fd956dc0e0615efb9763f150647979c8e487f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/695fd956dc0e0615efb9763f150647979c8e487f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e536e8ac6a722285190416b21a1684289f18b64", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJczE87CRBK7hj4Ov3rIwAAdHIIAGJcdNkQUSXtGskuEOAH1otc\nOCajXeKM+HPaKl2fscs7XhGbMIzJFjEJXg7aBuD/lu3jr9lkimR1T6tmRZeHtIbe\nscJAsSmUNj9n24g+lx1alyVFjdIQejZGA2KcDMoDNpIUAmga1LDPpEt+3tLTCzu0\nGBuovbfzFatmzf5yoLBtykm7q4DXbqjqVQD32sk5ombxTAWyQ+lceklLvCgLjR3K\nG3BOkd5b8GqwFxVV5z9z2uiPPEce1iuLUHWYwPC33dQlgS5ELyLOJI2vyxG5NB9Q\nvOBRl8z5ad49cGV6rwomH9MCIjRyBiyBDlZlzNgCZMTWnpMs9xGigQC61BuRWEY=\n=7ry5\n-----END PGP SIGNATURE-----\n", "payload": "tree 695fd956dc0e0615efb9763f150647979c8e487f\nparent 3ca0d365386a640ba17b9b436a3dafff079cd71e\nparent ed08c6a985d0f69d2eac33e09440112c880c9fd6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556893499 +0200\ncommitter GitHub <noreply@github.com> 1556893499 +0200\n\nRollup merge of #60393 - estebank:pat-sugg, r=oli-obk\n\n Do not suggest incorrect syntax on pattern type error due to borrow\n\nFix #55174.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e536e8ac6a722285190416b21a1684289f18b64", "html_url": "https://github.com/rust-lang/rust/commit/3e536e8ac6a722285190416b21a1684289f18b64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e536e8ac6a722285190416b21a1684289f18b64/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ca0d365386a640ba17b9b436a3dafff079cd71e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ca0d365386a640ba17b9b436a3dafff079cd71e", "html_url": "https://github.com/rust-lang/rust/commit/3ca0d365386a640ba17b9b436a3dafff079cd71e"}, {"sha": "ed08c6a985d0f69d2eac33e09440112c880c9fd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed08c6a985d0f69d2eac33e09440112c880c9fd6", "html_url": "https://github.com/rust-lang/rust/commit/ed08c6a985d0f69d2eac33e09440112c880c9fd6"}], "stats": {"total": 168, "additions": 151, "deletions": 17}, "files": [{"sha": "6cc7818d712f633799fd35e0ab354d16a34ed796", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 46, "deletions": 11, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3e536e8ac6a722285190416b21a1684289f18b64/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e536e8ac6a722285190416b21a1684289f18b64/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=3e536e8ac6a722285190416b21a1684289f18b64", "patch": "@@ -1,8 +1,8 @@\n use crate::check::{FnCtxt, Expectation, Diverges, Needs};\n use crate::check::coercion::CoerceMany;\n use crate::util::nodemap::FxHashMap;\n-use errors::Applicability;\n-use rustc::hir::{self, PatKind};\n+use errors::{Applicability, DiagnosticBuilder};\n+use rustc::hir::{self, PatKind, Pat};\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n use rustc::infer;\n@@ -377,15 +377,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             // Look for a case like `fn foo(&foo: u32)` and suggest\n                             // `fn foo(foo: &u32)`\n                             if let Some(mut err) = err {\n-                                if let PatKind::Binding(..) = inner.node {\n-                                    if let Ok(snippet) = tcx.sess.source_map()\n-                                                                    .span_to_snippet(pat.span)\n-                                    {\n-                                        err.help(&format!(\"did you mean `{}: &{}`?\",\n-                                                            &snippet[1..],\n-                                                            expected));\n-                                    }\n-                                }\n+                                self.borrow_pat_suggestion(&mut err, &pat, &inner, &expected);\n                                 err.emit();\n                             }\n                             (rptr_ty, inner_ty)\n@@ -517,6 +509,49 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // subtyping.\n     }\n \n+    fn borrow_pat_suggestion(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        pat: &Pat,\n+        inner: &Pat,\n+        expected: Ty<'tcx>,\n+    ) {\n+        let tcx = self.tcx;\n+        if let PatKind::Binding(..) = inner.node {\n+            let parent_id = tcx.hir().get_parent_node_by_hir_id(pat.hir_id);\n+            let parent = tcx.hir().get_by_hir_id(parent_id);\n+            debug!(\"inner {:?} pat {:?} parent {:?}\", inner, pat, parent);\n+            match parent {\n+                hir::Node::Item(hir::Item { node: hir::ItemKind::Fn(..), .. }) |\n+                hir::Node::ForeignItem(hir::ForeignItem {\n+                    node: hir::ForeignItemKind::Fn(..), ..\n+                }) |\n+                hir::Node::TraitItem(hir::TraitItem { node: hir::TraitItemKind::Method(..), .. }) |\n+                hir::Node::ImplItem(hir::ImplItem { node: hir::ImplItemKind::Method(..), .. }) => {\n+                    // this pat is likely an argument\n+                    if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(inner.span) {\n+                        // FIXME: turn into structured suggestion, will need a span that also\n+                        // includes the the arg's type.\n+                        err.help(&format!(\"did you mean `{}: &{}`?\", snippet, expected));\n+                    }\n+                }\n+                hir::Node::Expr(hir::Expr { node: hir::ExprKind::Match(..), .. }) |\n+                hir::Node::Pat(_) => {\n+                    // rely on match ergonomics or it might be nested `&&pat`\n+                    if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(inner.span) {\n+                        err.span_suggestion(\n+                            pat.span,\n+                            \"you can probably remove the explicit borrow\",\n+                            snippet,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                }\n+                _ => {} // don't provide suggestions in other cases #55175\n+            }\n+        }\n+    }\n+\n     pub fn check_dereferencable(&self, span: Span, expected: Ty<'tcx>, inner: &hir::Pat) -> bool {\n         if let PatKind::Binding(..) = inner.node {\n             if let Some(mt) = self.shallow_resolve(expected).builtin_deref(true) {"}, {"sha": "bc3013b78b38c8a0886f4df0834fdeb89c49bad9", "filename": "src/test/ui/destructure-trait-ref.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e536e8ac6a722285190416b21a1684289f18b64/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e536e8ac6a722285190416b21a1684289f18b64/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr?ref=3e536e8ac6a722285190416b21a1684289f18b64", "patch": "@@ -20,21 +20,25 @@ error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:31:10\n    |\n LL |     let &&x = &1isize as &T;\n-   |          ^^ expected trait T, found reference\n+   |          ^^\n+   |          |\n+   |          expected trait T, found reference\n+   |          help: you can probably remove the explicit borrow: `x`\n    |\n    = note: expected type `dyn T`\n               found type `&_`\n-   = help: did you mean `x: &dyn T`?\n \n error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:36:11\n    |\n LL |     let &&&x = &(&1isize as &T);\n-   |           ^^ expected trait T, found reference\n+   |           ^^\n+   |           |\n+   |           expected trait T, found reference\n+   |           help: you can probably remove the explicit borrow: `x`\n    |\n    = note: expected type `dyn T`\n               found type `&_`\n-   = help: did you mean `x: &dyn T`?\n \n error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:41:13"}, {"sha": "a9347926bda0a554ba69bb081e38d75d2b178540", "filename": "src/test/ui/mismatched_types/issue-38371.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e536e8ac6a722285190416b21a1684289f18b64/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e536e8ac6a722285190416b21a1684289f18b64/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr?ref=3e536e8ac6a722285190416b21a1684289f18b64", "patch": "@@ -12,11 +12,13 @@ error[E0308]: mismatched types\n   --> $DIR/issue-38371.rs:18:9\n    |\n LL | fn agh(&&bar: &u32) {\n-   |         ^^^^ expected u32, found reference\n+   |         ^^^^\n+   |         |\n+   |         expected u32, found reference\n+   |         help: you can probably remove the explicit borrow: `bar`\n    |\n    = note: expected type `u32`\n               found type `&_`\n-   = help: did you mean `bar: &u32`?\n \n error[E0308]: mismatched types\n   --> $DIR/issue-38371.rs:21:8"}, {"sha": "c4fc01469bf65ec4c41432a4719b8ed33c3a68f1", "filename": "src/test/ui/suggestions/match-ergonomics.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3e536e8ac6a722285190416b21a1684289f18b64/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e536e8ac6a722285190416b21a1684289f18b64/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.rs?ref=3e536e8ac6a722285190416b21a1684289f18b64", "patch": "@@ -0,0 +1,41 @@\n+fn main() {\n+    let x = vec![1i32];\n+    match &x[..] {\n+        [&v] => {}, //~ ERROR mismatched types\n+        _ => {},\n+    }\n+    match x {\n+        [&v] => {}, //~ ERROR expected an array or slice\n+        _ => {},\n+    }\n+    match &x[..] {\n+        [v] => {},\n+        _ => {},\n+    }\n+    match &x[..] {\n+        &[v] => {},\n+        _ => {},\n+    }\n+    match x {\n+        [v] => {}, //~ ERROR expected an array or slice\n+        _ => {},\n+    }\n+    let y = 1i32;\n+    match &y {\n+        &v => {},\n+        _ => {},\n+    }\n+    match y {\n+        &v => {}, //~ ERROR mismatched types\n+        _ => {},\n+    }\n+    match &y {\n+        v => {},\n+        _ => {},\n+    }\n+    match y {\n+        v => {},\n+        _ => {},\n+    }\n+    if let [&v] = &x[..] {} //~ ERROR mismatched types\n+}"}, {"sha": "b7497be6ceb3693b4f42c485035336a6b55a82c3", "filename": "src/test/ui/suggestions/match-ergonomics.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3e536e8ac6a722285190416b21a1684289f18b64/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e536e8ac6a722285190416b21a1684289f18b64/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr?ref=3e536e8ac6a722285190416b21a1684289f18b64", "patch": "@@ -0,0 +1,52 @@\n+error[E0308]: mismatched types\n+  --> $DIR/match-ergonomics.rs:4:10\n+   |\n+LL |         [&v] => {},\n+   |          ^^\n+   |          |\n+   |          expected i32, found reference\n+   |          help: you can probably remove the explicit borrow: `v`\n+   |\n+   = note: expected type `i32`\n+              found type `&_`\n+\n+error[E0529]: expected an array or slice, found `std::vec::Vec<i32>`\n+  --> $DIR/match-ergonomics.rs:8:9\n+   |\n+LL |         [&v] => {},\n+   |         ^^^^ pattern cannot match with input type `std::vec::Vec<i32>`\n+\n+error[E0529]: expected an array or slice, found `std::vec::Vec<i32>`\n+  --> $DIR/match-ergonomics.rs:20:9\n+   |\n+LL |         [v] => {},\n+   |         ^^^ pattern cannot match with input type `std::vec::Vec<i32>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/match-ergonomics.rs:29:9\n+   |\n+LL |         &v => {},\n+   |         ^^\n+   |         |\n+   |         expected i32, found reference\n+   |         help: you can probably remove the explicit borrow: `v`\n+   |\n+   = note: expected type `i32`\n+              found type `&_`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/match-ergonomics.rs:40:13\n+   |\n+LL |     if let [&v] = &x[..] {}\n+   |             ^^\n+   |             |\n+   |             expected i32, found reference\n+   |             help: you can probably remove the explicit borrow: `v`\n+   |\n+   = note: expected type `i32`\n+              found type `&_`\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0308, E0529.\n+For more information about an error, try `rustc --explain E0308`."}]}