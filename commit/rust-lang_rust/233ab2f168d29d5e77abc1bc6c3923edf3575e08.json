{"sha": "233ab2f168d29d5e77abc1bc6c3923edf3575e08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzM2FiMmYxNjhkMjlkNWU3N2FiYzFiYzZjMzkyM2VkZjM1NzVlMDg=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-03-21T19:22:41Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-03-21T21:51:40Z"}, "message": "Push the byte of LAST_CHUNK_MAP into the array\n\nThis optimizes slightly better.\n\nAlphabetic     : 2536 bytes\nCase_Ignorable : 1771 bytes\nCased          : 788 bytes\nCc             : 24 bytes\nGrapheme_Extend: 1488 bytes\nLowercase      : 863 bytes\nN              : 1038 bytes\nUppercase      : 776 bytes\nWhite_Space    : 83 bytes\nTotal table sizes: 9367 bytes  (-18 bytes; 2 bytes per set)", "tree": {"sha": "162bcc2deba61e31b7157116b06f381f2048d45f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/162bcc2deba61e31b7157116b06f381f2048d45f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/233ab2f168d29d5e77abc1bc6c3923edf3575e08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/233ab2f168d29d5e77abc1bc6c3923edf3575e08", "html_url": "https://github.com/rust-lang/rust/commit/233ab2f168d29d5e77abc1bc6c3923edf3575e08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/233ab2f168d29d5e77abc1bc6c3923edf3575e08/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f71d98f90354f9ee67c2b77c8607fbc9169d63e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f71d98f90354f9ee67c2b77c8607fbc9169d63e", "html_url": "https://github.com/rust-lang/rust/commit/5f71d98f90354f9ee67c2b77c8607fbc9169d63e"}], "stats": {"total": 95, "additions": 49, "deletions": 46}, "files": [{"sha": "1899b927592d9dec38e128ffb496da9a9826d7e9", "filename": "src/libcore/unicode/unicode_data.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/233ab2f168d29d5e77abc1bc6c3923edf3575e08/src%2Flibcore%2Funicode%2Funicode_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/233ab2f168d29d5e77abc1bc6c3923edf3575e08/src%2Flibcore%2Funicode%2Funicode_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Funicode_data.rs?ref=233ab2f168d29d5e77abc1bc6c3923edf3575e08", "patch": "@@ -10,22 +10,22 @@ fn range_search<\n >(\n     needle: u32,\n     chunk_idx_map: &[u8; N],\n-    (last_chunk_idx, last_chunk_mapping): (u16, u8),\n+    last_chunk_idx: u16,\n     bitset_chunk_idx: &[[u8; CHUNK_SIZE]; N1],\n     bitset_canonical: &[u64; CANONICAL],\n     bitset_canonicalized: &[(u8, u8); CANONICALIZED],\n ) -> bool {\n     let bucket_idx = (needle / 64) as usize;\n     let chunk_map_idx = bucket_idx / CHUNK_SIZE;\n     let chunk_piece = bucket_idx % CHUNK_SIZE;\n-    let chunk_idx = if chunk_map_idx >= N {\n-        if chunk_map_idx == last_chunk_idx as usize {\n-            last_chunk_mapping\n-        } else {\n-            return false;\n-        }\n-    } else {\n+    // The last entry of `chunk_idx_map` actually should be at `last_chunk_idx`,\n+    // so we need to remap it\n+    let chunk_idx = if chunk_map_idx < (chunk_idx_map.len() - 1) {\n         chunk_idx_map[chunk_map_idx]\n+    } else if chunk_map_idx == last_chunk_idx as usize {\n+        chunk_idx_map[chunk_idx_map.len() - 1]\n+    } else {\n+        return false;\n     };\n     let idx = bitset_chunk_idx[(chunk_idx as usize)][chunk_piece] as usize;\n     let word = if idx < CANONICAL {\n@@ -54,8 +54,8 @@ pub const UNICODE_VERSION: (u32, u32, u32) = (13, 0, 0);\n \n #[rustfmt::skip]\n pub mod alphabetic {\n-    static BITSET_LAST_CHUNK_MAP: (u16, u8) = (393, 13);\n-    static BITSET_CHUNKS_MAP: [u8; 393] = [\n+    const BITSET_LAST_CHUNK_MAP: u16 = 393;\n+    static BITSET_CHUNKS_MAP: [u8; 394] = [\n         61, 18, 2, 35, 46, 39, 38, 74, 37, 25, 70, 34, 36, 73, 66, 5, 52, 58, 54, 58, 58, 58, 69,\n         64, 43, 58, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n         6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 10, 6, 6, 23,\n@@ -70,7 +70,7 @@ pub mod alphabetic {\n         6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n         6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 21, 6, 6, 6, 6,\n         6, 6, 6, 15, 72, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8,\n-        58, 58, 58, 58, 58, 58, 6, 62, 58, 58, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n+        58, 58, 58, 58, 58, 58, 6, 62, 58, 58, 6, 6, 6, 6, 6, 6, 6, 6, 6, 13,\n     ];\n     static BITSET_INDEX_CHUNKS: [[u8; 8]; 75] = [\n         [0, 252, 121, 172, 14, 172, 172, 172], [13, 51, 125, 172, 79, 35, 166, 172],\n@@ -312,8 +312,8 @@ pub mod alphabetic {\n \n #[rustfmt::skip]\n pub mod case_ignorable {\n-    static BITSET_LAST_CHUNK_MAP: (u16, u8) = (1792, 2);\n-    static BITSET_CHUNKS_MAP: [u8; 250] = [\n+    const BITSET_LAST_CHUNK_MAP: u16 = 1792;\n+    static BITSET_CHUNKS_MAP: [u8; 251] = [\n         14, 28, 47, 22, 19, 11, 4, 13, 9, 40, 39, 32, 49, 23, 15, 36, 18, 39, 39, 39, 39, 39, 27,\n         26, 12, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,\n         39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,\n@@ -324,7 +324,7 @@ pub mod case_ignorable {\n         39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 44, 39, 35, 39, 39,\n         39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,\n         39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 29, 39, 39, 39, 39, 39, 39, 39, 39, 39,\n-        34, 48, 39, 39, 39, 0, 39, 39, 21, 43, 39, 39, 45, 39, 39, 39, 39, 37,\n+        34, 48, 39, 39, 39, 0, 39, 39, 21, 43, 39, 39, 45, 39, 39, 39, 39, 37, 2,\n     ];\n     static BITSET_INDEX_CHUNKS: [[u8; 8]; 52] = [\n         [3, 75, 88, 142, 142, 142, 142, 142], [5, 110, 38, 181, 142, 142, 12, 182],\n@@ -503,14 +503,14 @@ pub mod case_ignorable {\n \n #[rustfmt::skip]\n pub mod cased {\n-    static BITSET_LAST_CHUNK_MAP: (u16, u8) = (124, 12);\n-    static BITSET_CHUNKS_MAP: [u8; 123] = [\n+    const BITSET_LAST_CHUNK_MAP: u16 = 124;\n+    static BITSET_CHUNKS_MAP: [u8; 124] = [\n         4, 0, 18, 18, 6, 18, 18, 9, 5, 8, 18, 3, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\n         18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 14, 15, 18, 18, 18, 18,\n         18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 16, 18, 1, 18, 10, 18, 18,\n         7, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 13, 18,\n         18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\n-        18, 2, 18, 18, 18, 18, 11,\n+        18, 2, 18, 18, 18, 18, 11, 12,\n     ];\n     static BITSET_INDEX_CHUNKS: [[u8; 16]; 19] = [\n         [5, 5, 7, 5, 50, 10, 40, 58, 58, 58, 58, 58, 58, 58, 58, 58],\n@@ -594,9 +594,9 @@ pub mod cased {\n \n #[rustfmt::skip]\n pub mod cc {\n-    static BITSET_LAST_CHUNK_MAP: (u16, u8) = (2, 0);\n-    static BITSET_CHUNKS_MAP: [u8; 2] = [\n-        0, 1,\n+    const BITSET_LAST_CHUNK_MAP: u16 = 2;\n+    static BITSET_CHUNKS_MAP: [u8; 3] = [\n+        0, 1, 0,\n     ];\n     static BITSET_INDEX_CHUNKS: [[u8; 1]; 3] = [\n         [0], [1], [2],\n@@ -623,8 +623,8 @@ pub mod cc {\n \n #[rustfmt::skip]\n pub mod grapheme_extend {\n-    static BITSET_LAST_CHUNK_MAP: (u16, u8) = (1792, 3);\n-    static BITSET_CHUNKS_MAP: [u8; 245] = [\n+    const BITSET_LAST_CHUNK_MAP: u16 = 1792;\n+    static BITSET_CHUNKS_MAP: [u8; 246] = [\n         34, 30, 41, 44, 17, 11, 0, 12, 9, 36, 34, 29, 43, 20, 13, 34, 21, 34, 34, 34, 34, 34, 26,\n         34, 16, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n         34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n@@ -635,7 +635,7 @@ pub mod grapheme_extend {\n         34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 34, 33, 34,\n         34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n         34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 24, 34, 34, 34, 34, 34, 34, 34, 34,\n-        34, 32, 42, 34, 34, 34, 1, 34, 34, 19, 38, 34, 34, 39,\n+        34, 32, 42, 34, 34, 34, 1, 34, 34, 19, 38, 34, 34, 39, 3,\n     ];\n     static BITSET_INDEX_CHUNKS: [[u8; 8]; 45] = [\n         [1, 85, 27, 86, 34, 84, 100, 88], [4, 60, 71, 120, 120, 120, 120, 120],\n@@ -785,12 +785,12 @@ pub mod grapheme_extend {\n \n #[rustfmt::skip]\n pub mod lowercase {\n-    static BITSET_LAST_CHUNK_MAP: (u16, u8) = (122, 5);\n-    static BITSET_CHUNKS_MAP: [u8; 118] = [\n+    const BITSET_LAST_CHUNK_MAP: u16 = 122;\n+    static BITSET_CHUNKS_MAP: [u8; 119] = [\n         16, 2, 9, 9, 4, 9, 9, 15, 3, 12, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\n         9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\n         9, 9, 9, 8, 10, 9, 0, 9, 14, 9, 9, 13, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\n-        9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 17,\n+        9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 17, 5,\n     ];\n     static BITSET_INDEX_CHUNKS: [[u8; 16]; 18] = [\n         [10, 55, 52, 6, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52],\n@@ -886,8 +886,8 @@ pub mod lowercase {\n \n #[rustfmt::skip]\n pub mod n {\n-    static BITSET_LAST_CHUNK_MAP: (u16, u8) = (253, 21);\n-    static BITSET_CHUNKS_MAP: [u8; 249] = [\n+    const BITSET_LAST_CHUNK_MAP: u16 = 253;\n+    static BITSET_CHUNKS_MAP: [u8; 250] = [\n         45, 19, 19, 39, 23, 40, 6, 37, 33, 17, 19, 12, 42, 32, 41, 19, 8, 19, 2, 16, 19, 19, 13,\n         19, 1, 43, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n@@ -898,7 +898,7 @@ pub mod n {\n         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 38, 19, 30, 19,\n         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n-        19, 19, 27, 19, 18, 19, 19, 19, 19, 22, 26, 19, 19, 29, 19, 3, 19, 24,\n+        19, 19, 27, 19, 18, 19, 19, 19, 19, 22, 26, 19, 19, 29, 19, 3, 19, 24, 21,\n     ];\n     static BITSET_INDEX_CHUNKS: [[u8; 8]; 47] = [\n         [12, 52, 44, 44, 44, 44, 44, 44], [27, 44, 44, 44, 44, 44, 67, 44],\n@@ -993,13 +993,13 @@ pub mod n {\n \n #[rustfmt::skip]\n pub mod uppercase {\n-    static BITSET_LAST_CHUNK_MAP: (u16, u8) = (124, 3);\n-    static BITSET_CHUNKS_MAP: [u8; 123] = [\n+    const BITSET_LAST_CHUNK_MAP: u16 = 124;\n+    static BITSET_CHUNKS_MAP: [u8; 124] = [\n         12, 15, 5, 5, 0, 5, 5, 2, 4, 11, 5, 14, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n         5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n         5, 5, 5, 6, 5, 13, 5, 10, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n         5, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 16, 5, 5,\n-        5, 5, 9,\n+        5, 5, 9, 3,\n     ];\n     static BITSET_INDEX_CHUNKS: [[u8; 16]; 17] = [\n         [41, 41, 5, 33, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 5, 0],\n@@ -1083,9 +1083,9 @@ pub mod uppercase {\n \n #[rustfmt::skip]\n pub mod white_space {\n-    static BITSET_LAST_CHUNK_MAP: (u16, u8) = (32, 3);\n-    static BITSET_CHUNKS_MAP: [u8; 22] = [\n-        0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1,\n+    const BITSET_LAST_CHUNK_MAP: u16 = 32;\n+    static BITSET_CHUNKS_MAP: [u8; 23] = [\n+        0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 3,\n     ];\n     static BITSET_INDEX_CHUNKS: [[u8; 6]; 4] = [\n         [1, 4, 2, 4, 4, 4], [4, 4, 0, 3, 4, 4], [4, 4, 4, 4, 4, 4], [5, 4, 4, 4, 4, 4],"}, {"sha": "12efa5a9f83bf764fdf11f8b62966259135d1f1f", "filename": "src/tools/unicode-table-generator/src/range_search.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/233ab2f168d29d5e77abc1bc6c3923edf3575e08/src%2Ftools%2Funicode-table-generator%2Fsrc%2Frange_search.rs", "raw_url": "https://github.com/rust-lang/rust/raw/233ab2f168d29d5e77abc1bc6c3923edf3575e08/src%2Ftools%2Funicode-table-generator%2Fsrc%2Frange_search.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Frange_search.rs?ref=233ab2f168d29d5e77abc1bc6c3923edf3575e08", "patch": "@@ -8,22 +8,22 @@ fn range_search<\n >(\n     needle: u32,\n     chunk_idx_map: &[u8; N],\n-    (last_chunk_idx, last_chunk_mapping): (u16, u8),\n+    last_chunk_idx: u16,\n     bitset_chunk_idx: &[[u8; CHUNK_SIZE]; N1],\n     bitset_canonical: &[u64; CANONICAL],\n     bitset_canonicalized: &[(u8, u8); CANONICALIZED],\n ) -> bool {\n     let bucket_idx = (needle / 64) as usize;\n     let chunk_map_idx = bucket_idx / CHUNK_SIZE;\n     let chunk_piece = bucket_idx % CHUNK_SIZE;\n-    let chunk_idx = if chunk_map_idx >= N {\n-        if chunk_map_idx == last_chunk_idx as usize {\n-            last_chunk_mapping\n-        } else {\n-            return false;\n-        }\n-    } else {\n+    // The last entry of `chunk_idx_map` actually should be at `last_chunk_idx`,\n+    // so we need to remap it\n+    let chunk_idx = if chunk_map_idx < (chunk_idx_map.len() - 1) {\n         chunk_idx_map[chunk_map_idx]\n+    } else if chunk_map_idx == last_chunk_idx as usize {\n+        chunk_idx_map[chunk_idx_map.len() - 1]\n+    } else {\n+        return false;\n     };\n     let idx = bitset_chunk_idx[(chunk_idx as usize)][chunk_piece] as usize;\n     let word = if idx < CANONICAL {"}, {"sha": "4898df3c800180c28fe8fa46d71c0a77f50bc4b9", "filename": "src/tools/unicode-table-generator/src/raw_emitter.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/233ab2f168d29d5e77abc1bc6c3923edf3575e08/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/233ab2f168d29d5e77abc1bc6c3923edf3575e08/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs?ref=233ab2f168d29d5e77abc1bc6c3923edf3575e08", "patch": "@@ -150,19 +150,22 @@ impl RawEmitter {\n         while zero_chunk_idx.is_some() && chunk_indices.last().cloned() == zero_chunk_idx {\n             chunk_indices.pop();\n         }\n+        // We do not count the LAST_CHUNK_MAP as adding bytes because it's a\n+        // small constant whose values are inlined directly into the instruction\n+        // stream.\n         writeln!(\n             &mut self.file,\n-            \"static BITSET_LAST_CHUNK_MAP: (u16, u8) = ({}, {});\",\n+            \"const BITSET_LAST_CHUNK_MAP: u16 = {};\",\n             chunk_indices.len() - 1,\n-            chunk_indices.pop().unwrap(),\n         )\n         .unwrap();\n-        self.bytes_used += 3;\n+        let nonzero = chunk_indices.pop().unwrap();\n         // Try to pop again, now that we've recorded a non-zero pointing index\n         // into the LAST_CHUNK_MAP.\n         while zero_chunk_idx.is_some() && chunk_indices.last().cloned() == zero_chunk_idx {\n             chunk_indices.pop();\n         }\n+        chunk_indices.push(nonzero);\n         writeln!(\n             &mut self.file,\n             \"static BITSET_CHUNKS_MAP: [u8; {}] = [{}];\","}]}