{"sha": "a7858bb7bf0a784d56b2b9ef97785a4fa78f7853", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ODU4YmI3YmYwYTc4NGQ1NmIyYjllZjk3Nzg1YTRmYTc4Zjc4NTM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-08-25T17:28:32Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-02T12:56:38Z"}, "message": "Report type mismatches in analysis-stats\n\nOnly the number usually; each one individually when running with -v.", "tree": {"sha": "ffc29db397d35b9cfa55d2418db996dbf22e4995", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffc29db397d35b9cfa55d2418db996dbf22e4995"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7858bb7bf0a784d56b2b9ef97785a4fa78f7853", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7858bb7bf0a784d56b2b9ef97785a4fa78f7853", "html_url": "https://github.com/rust-lang/rust/commit/a7858bb7bf0a784d56b2b9ef97785a4fa78f7853", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7858bb7bf0a784d56b2b9ef97785a4fa78f7853/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ecb36740a81445cf103577c3f9e9e6f831d0a1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ecb36740a81445cf103577c3f9e9e6f831d0a1b", "html_url": "https://github.com/rust-lang/rust/commit/6ecb36740a81445cf103577c3f9e9e6f831d0a1b"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "77fa1d26e6bbc877408f1d32e21d47c09f87bbe0", "filename": "crates/ra_cli/src/analysis_stats.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a7858bb7bf0a784d56b2b9ef97785a4fa78f7853/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7858bb7bf0a784d56b2b9ef97785a4fa78f7853/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs?ref=a7858bb7bf0a784d56b2b9ef97785a4fa78f7853", "patch": "@@ -1,7 +1,7 @@\n use std::{collections::HashSet, fmt::Write, path::Path, time::Instant};\n \n use ra_db::SourceDatabase;\n-use ra_hir::{Crate, HasSource, ImplItem, ModuleDef, Ty};\n+use ra_hir::{Crate, HasSource, HirDisplay, ImplItem, ModuleDef, Ty};\n use ra_syntax::AstNode;\n \n use crate::Result;\n@@ -66,6 +66,7 @@ pub fn run(verbose: bool, memory_usage: bool, path: &Path, only: Option<&str>) -\n     let mut num_exprs = 0;\n     let mut num_exprs_unknown = 0;\n     let mut num_exprs_partially_unknown = 0;\n+    let mut num_type_mismatches = 0;\n     for f in funcs {\n         let name = f.name(db);\n         let mut msg = format!(\"processing: {}\", name);\n@@ -100,6 +101,40 @@ pub fn run(verbose: bool, memory_usage: bool, path: &Path, only: Option<&str>) -\n                     num_exprs_partially_unknown += 1;\n                 }\n             }\n+            if let Some(mismatch) = inference_result.type_mismatch_for_expr(expr_id) {\n+                num_type_mismatches += 1;\n+                if verbose {\n+                    let src = f.source(db);\n+                    let original_file = src.file_id.original_file(db);\n+                    let path = db.file_relative_path(original_file);\n+                    let line_index = host.analysis().file_line_index(original_file).unwrap();\n+                    let body_source_map = f.body_source_map(db);\n+                    let syntax_node = body_source_map.expr_syntax(expr_id);\n+                    let line_col = syntax_node.map(|syntax_node| {\n+                        (\n+                            line_index.line_col(syntax_node.range().start()),\n+                            line_index.line_col(syntax_node.range().end()),\n+                        )\n+                    });\n+                    let line_col = match line_col {\n+                        Some((start, end)) => format!(\n+                            \"{}:{}-{}:{}\",\n+                            start.line + 1,\n+                            start.col_utf16,\n+                            end.line + 1,\n+                            end.col_utf16\n+                        ),\n+                        None => \"?:?\".to_string(),\n+                    };\n+                    bar.println(format!(\n+                        \"{} {}: Expected {}, got {}\",\n+                        path.display(),\n+                        line_col,\n+                        mismatch.expected.display(db),\n+                        mismatch.actual.display(db)\n+                    ));\n+                }\n+            }\n         }\n         bar.inc(1);\n     }\n@@ -115,6 +150,7 @@ pub fn run(verbose: bool, memory_usage: bool, path: &Path, only: Option<&str>) -\n         num_exprs_partially_unknown,\n         (num_exprs_partially_unknown * 100 / num_exprs)\n     );\n+    println!(\"Type mismatches: {}\", num_type_mismatches);\n     println!(\"Inference: {:?}, {}\", inference_time.elapsed(), ra_prof::memory_usage());\n     println!(\"Total: {:?}, {}\", analysis_time.elapsed(), ra_prof::memory_usage());\n "}, {"sha": "0f9ff97f101da021b5c2a1b80f0b97ca09fdb89b", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7858bb7bf0a784d56b2b9ef97785a4fa78f7853/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7858bb7bf0a784d56b2b9ef97785a4fa78f7853/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=a7858bb7bf0a784d56b2b9ef97785a4fa78f7853", "patch": "@@ -617,7 +617,7 @@ impl Function {\n         self.data(db).name.clone()\n     }\n \n-    pub(crate) fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n+    pub fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n         db.body_with_source_map(self.into()).1\n     }\n "}, {"sha": "57225ae91cf3572ae21b561cf973dedae66b9e61", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a7858bb7bf0a784d56b2b9ef97785a4fa78f7853/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7858bb7bf0a784d56b2b9ef97785a4fa78f7853/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=a7858bb7bf0a784d56b2b9ef97785a4fa78f7853", "patch": "@@ -128,27 +128,27 @@ impl Index<PatId> for Body {\n }\n \n impl BodySourceMap {\n-    pub(crate) fn expr_syntax(&self, expr: ExprId) -> Option<SyntaxNodePtr> {\n+    pub fn expr_syntax(&self, expr: ExprId) -> Option<SyntaxNodePtr> {\n         self.expr_map_back.get(expr).cloned()\n     }\n \n-    pub(crate) fn syntax_expr(&self, ptr: SyntaxNodePtr) -> Option<ExprId> {\n+    pub fn syntax_expr(&self, ptr: SyntaxNodePtr) -> Option<ExprId> {\n         self.expr_map.get(&ptr).cloned()\n     }\n \n-    pub(crate) fn node_expr(&self, node: &ast::Expr) -> Option<ExprId> {\n+    pub fn node_expr(&self, node: &ast::Expr) -> Option<ExprId> {\n         self.expr_map.get(&SyntaxNodePtr::new(node.syntax())).cloned()\n     }\n \n-    pub(crate) fn pat_syntax(&self, pat: PatId) -> Option<PatPtr> {\n+    pub fn pat_syntax(&self, pat: PatId) -> Option<PatPtr> {\n         self.pat_map_back.get(pat).cloned()\n     }\n \n-    pub(crate) fn node_pat(&self, node: &ast::Pat) -> Option<PatId> {\n+    pub fn node_pat(&self, node: &ast::Pat) -> Option<PatId> {\n         self.pat_map.get(&Either::A(AstPtr::new(node))).cloned()\n     }\n \n-    pub(crate) fn field_syntax(&self, expr: ExprId, field: usize) -> AstPtr<ast::RecordField> {\n+    pub fn field_syntax(&self, expr: ExprId, field: usize) -> AstPtr<ast::RecordField> {\n         self.field_map[&(expr, field)]\n     }\n }"}]}