{"sha": "e0bfd19add662c07eb102818ce579315ddc90094", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYmZkMTlhZGQ2NjJjMDdlYjEwMjgxOGNlNTc5MzE1ZGRjOTAwOTQ=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-05-02T13:09:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-02T13:09:59Z"}, "message": "Rollup merge of #41693 - est31:anon_params_removal, r=eddyb\n\nRemoval pass for anonymous parameters\n\nRemoves occurences of anonymous parameters from the\nrustc codebase, as they are to be deprecated.\n\nSee issue #41686 and RFC 1685.\n\nr? @frewsxcv", "tree": {"sha": "e601e5cd7b9083ee15e34d52410fb436fd715acd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e601e5cd7b9083ee15e34d52410fb436fd715acd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0bfd19add662c07eb102818ce579315ddc90094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0bfd19add662c07eb102818ce579315ddc90094", "html_url": "https://github.com/rust-lang/rust/commit/e0bfd19add662c07eb102818ce579315ddc90094", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0bfd19add662c07eb102818ce579315ddc90094/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4733ee7eb4be269e751e913fd1be1382ce9bf6d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4733ee7eb4be269e751e913fd1be1382ce9bf6d6", "html_url": "https://github.com/rust-lang/rust/commit/4733ee7eb4be269e751e913fd1be1382ce9bf6d6"}, {"sha": "14bbd0a5a3722bdcb4c5f36d81097e1fb992add3", "url": "https://api.github.com/repos/rust-lang/rust/commits/14bbd0a5a3722bdcb4c5f36d81097e1fb992add3", "html_url": "https://github.com/rust-lang/rust/commit/14bbd0a5a3722bdcb4c5f36d81097e1fb992add3"}], "stats": {"total": 86, "additions": 45, "deletions": 41}, "files": [{"sha": "21c75ad3395113f6babecce7072eb8665030b326", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=e0bfd19add662c07eb102818ce579315ddc90094", "patch": "@@ -276,7 +276,7 @@ pub trait Into<T>: Sized {\n pub trait From<T>: Sized {\n     /// Performs the conversion.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn from(T) -> Self;\n+    fn from(_: T) -> Self;\n }\n \n /// An attempted conversion that consumes `self`, which may or may not be"}, {"sha": "db12496b6f320aac7ea3fac44bd8b57f59a45ef1", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=e0bfd19add662c07eb102818ce579315ddc90094", "patch": "@@ -403,8 +403,8 @@ impl<S: Sip> Default for Hasher<S> {\n \n #[doc(hidden)]\n trait Sip {\n-    fn c_rounds(&mut State);\n-    fn d_rounds(&mut State);\n+    fn c_rounds(_: &mut State);\n+    fn d_rounds(_: &mut State);\n }\n \n #[derive(Debug, Clone, Default)]"}, {"sha": "391b606f613f288970e7b74544d4e20e840eacb5", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=e0bfd19add662c07eb102818ce579315ddc90094", "patch": "@@ -2878,10 +2878,10 @@ pub trait Carrier {\n     type Error;\n \n     /// Create a `Carrier` from a success value.\n-    fn from_success(Self::Success) -> Self;\n+    fn from_success(_: Self::Success) -> Self;\n \n     /// Create a `Carrier` from an error value.\n-    fn from_error(Self::Error) -> Self;\n+    fn from_error(_: Self::Error) -> Self;\n \n     /// Translate this `Carrier` to another implementation of `Carrier` with the\n     /// same associated types."}, {"sha": "67b9449981e0f02a4d24fa5adfb3928ec612665c", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=e0bfd19add662c07eb102818ce579315ddc90094", "patch": "@@ -53,7 +53,7 @@ pub trait Sample<Support> {\n // trait called `Sample` and the other should be `DependentSample`.\n pub trait IndependentSample<Support>: Sample<Support> {\n     /// Generate a random value.\n-    fn ind_sample<R: Rng>(&self, &mut R) -> Support;\n+    fn ind_sample<R: Rng>(&self, _: &mut R) -> Support;\n }\n \n /// A wrapper for generating types that implement `Rand` via the"}, {"sha": "ca05db15ffeb9d44078b71576c0a6af56d5a57cf", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=e0bfd19add662c07eb102818ce579315ddc90094", "patch": "@@ -329,7 +329,7 @@ impl<'a, R: fmt::Debug> fmt::Debug for AsciiGenerator<'a, R> {\n /// the same stream of randomness multiple times.\n pub trait SeedableRng<Seed>: Rng {\n     /// Reseed an RNG with the given seed.\n-    fn reseed(&mut self, Seed);\n+    fn reseed(&mut self, _: Seed);\n \n     /// Create a new RNG with the given seed.\n     fn from_seed(seed: Seed) -> Self;"}, {"sha": "d107e9a84856fbc95050f78bf9bf17cae3131d18", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=e0bfd19add662c07eb102818ce579315ddc90094", "patch": "@@ -1804,7 +1804,7 @@ mod dep_tracking {\n     use rustc_back::PanicStrategy;\n \n     pub trait DepTrackingHash {\n-        fn hash(&self, &mut DefaultHasher, ErrorOutputType);\n+        fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType);\n     }\n \n     macro_rules! impl_dep_tracking_hash_via_hash {"}, {"sha": "6de61013dfdd3b8583ac0c9a733b53563f5c3c22", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e0bfd19add662c07eb102818ce579315ddc90094", "patch": "@@ -1502,7 +1502,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n pub trait InternAs<T: ?Sized, R> {\n     type Output;\n-    fn intern_with<F>(self, F) -> Self::Output\n+    fn intern_with<F>(self, f: F) -> Self::Output\n         where F: FnOnce(&T) -> R;\n }\n "}, {"sha": "0642ddc71622b1abe8cfae41c72a6266b51b3d12", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=e0bfd19add662c07eb102818ce579315ddc90094", "patch": "@@ -24,7 +24,7 @@ use rustc_serialize as serialize;\n ///\n /// (purpose: avoid mixing indexes for different bitvector domains.)\n pub trait Idx: Copy + 'static + Eq + Debug {\n-    fn new(usize) -> Self;\n+    fn new(idx: usize) -> Self;\n     fn index(self) -> usize;\n }\n "}, {"sha": "889f4dd4b9aac9d3c526ffff8863a0f84e4b0a30", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e0bfd19add662c07eb102818ce579315ddc90094", "patch": "@@ -343,7 +343,7 @@ pub trait CompilerCalls<'a> {\n \n     // Create a CompilController struct for controlling the behaviour of\n     // compilation.\n-    fn build_controller(&mut self, &Session, &getopts::Matches) -> CompileController<'a>;\n+    fn build_controller(&mut self, _: &Session, _: &getopts::Matches) -> CompileController<'a>;\n }\n \n // CompilerCalls instance for a regular rustc build."}, {"sha": "795ff58e20607a1f663740afc31eaa86e717d315", "filename": "src/librustc_save_analysis/dump.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibrustc_save_analysis%2Fdump.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibrustc_save_analysis%2Fdump.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump.rs?ref=e0bfd19add662c07eb102818ce579315ddc90094", "patch": "@@ -13,28 +13,28 @@ use super::external_data::*;\n use rls_data::CratePreludeData;\n \n pub trait Dump {\n-    fn crate_prelude(&mut self, CratePreludeData) {}\n-    fn enum_data(&mut self, EnumData) {}\n-    fn extern_crate(&mut self, ExternCrateData) {}\n-    fn impl_data(&mut self, ImplData) {}\n-    fn inheritance(&mut self, InheritanceData) {}\n-    fn function(&mut self, FunctionData) {}\n-    fn function_ref(&mut self, FunctionRefData) {}\n-    fn function_call(&mut self, FunctionCallData) {}\n-    fn method(&mut self, MethodData) {}\n-    fn method_call(&mut self, MethodCallData) {}\n-    fn macro_data(&mut self, MacroData) {}\n-    fn macro_use(&mut self, MacroUseData) {}\n-    fn mod_data(&mut self, ModData) {}\n-    fn mod_ref(&mut self, ModRefData) {}\n-    fn struct_data(&mut self, StructData) {}\n-    fn struct_variant(&mut self, StructVariantData) {}\n-    fn trait_data(&mut self, TraitData) {}\n-    fn tuple_variant(&mut self, TupleVariantData) {}\n-    fn type_ref(&mut self, TypeRefData) {}\n-    fn typedef(&mut self, TypeDefData) {}\n-    fn use_data(&mut self, UseData) {}\n-    fn use_glob(&mut self, UseGlobData) {}\n-    fn variable(&mut self, VariableData) {}\n-    fn variable_ref(&mut self, VariableRefData) {}\n+    fn crate_prelude(&mut self, _: CratePreludeData) {}\n+    fn enum_data(&mut self, _: EnumData) {}\n+    fn extern_crate(&mut self, _: ExternCrateData) {}\n+    fn impl_data(&mut self, _: ImplData) {}\n+    fn inheritance(&mut self, _: InheritanceData) {}\n+    fn function(&mut self, _: FunctionData) {}\n+    fn function_ref(&mut self, _: FunctionRefData) {}\n+    fn function_call(&mut self, _: FunctionCallData) {}\n+    fn method(&mut self, _: MethodData) {}\n+    fn method_call(&mut self, _: MethodCallData) {}\n+    fn macro_data(&mut self, _: MacroData) {}\n+    fn macro_use(&mut self, _: MacroUseData) {}\n+    fn mod_data(&mut self, _: ModData) {}\n+    fn mod_ref(&mut self, _: ModRefData) {}\n+    fn struct_data(&mut self, _: StructData) {}\n+    fn struct_variant(&mut self, _: StructVariantData) {}\n+    fn trait_data(&mut self, _: TraitData) {}\n+    fn tuple_variant(&mut self, _: TupleVariantData) {}\n+    fn type_ref(&mut self, _: TypeRefData) {}\n+    fn typedef(&mut self, _: TypeDefData) {}\n+    fn use_data(&mut self, _: UseData) {}\n+    fn use_glob(&mut self, _: UseGlobData) {}\n+    fn variable(&mut self, _: VariableData) {}\n+    fn variable_ref(&mut self, _: VariableRefData) {}\n }"}, {"sha": "0a748487244321711d19156f46cc76d7aac13211", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e0bfd19add662c07eb102818ce579315ddc90094", "patch": "@@ -503,7 +503,7 @@ impl<'a> Iterator for ListAttributesIter<'a> {\n \n pub trait AttributesExt {\n     /// Finds an attribute as List and returns the list of attributes nested inside.\n-    fn lists<'a>(&'a self, &'a str) -> ListAttributesIter<'a>;\n+    fn lists<'a>(&'a self, name: &'a str) -> ListAttributesIter<'a>;\n }\n \n impl AttributesExt for [ast::Attribute] {\n@@ -518,7 +518,7 @@ impl AttributesExt for [ast::Attribute] {\n \n pub trait NestedAttributesExt {\n     /// Returns whether the attribute list contains a specific `Word`\n-    fn has_word(self, &str) -> bool;\n+    fn has_word(self, word: &str) -> bool;\n }\n \n impl<I: IntoIterator<Item=ast::NestedMetaItem>> NestedAttributesExt for I {"}, {"sha": "5879be08881fb9bb923960f665cec2b1c9210b1f", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=e0bfd19add662c07eb102818ce579315ddc90094", "patch": "@@ -89,7 +89,7 @@ impl<'a, 'tcx> DocContext<'a, 'tcx> {\n }\n \n pub trait DocAccessLevels {\n-    fn is_doc_reachable(&self, DefId) -> bool;\n+    fn is_doc_reachable(&self, did: DefId) -> bool;\n }\n \n impl DocAccessLevels for AccessLevels<DefId> {"}, {"sha": "a40d1e6bdc91760c5062f5defbf6b2bf42c7b1e3", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=e0bfd19add662c07eb102818ce579315ddc90094", "patch": "@@ -114,7 +114,7 @@ pub enum Class {\n pub trait Writer {\n     /// Called when we start processing a span of text that should be highlighted.\n     /// The `Class` argument specifies how it should be highlighted.\n-    fn enter_span(&mut self, Class) -> io::Result<()>;\n+    fn enter_span(&mut self, _: Class) -> io::Result<()>;\n \n     /// Called at the end of a span of highlighted text.\n     fn exit_span(&mut self) -> io::Result<()>;\n@@ -131,7 +131,11 @@ pub trait Writer {\n     /// ```\n     /// The latter can be thought of as a shorthand for the former, which is\n     /// more flexible.\n-    fn string<T: Display>(&mut self, T, Class, Option<&TokenAndSpan>) -> io::Result<()>;\n+    fn string<T: Display>(&mut self,\n+                          text: T,\n+                          klass: Class,\n+                          tok: Option<&TokenAndSpan>)\n+                          -> io::Result<()>;\n }\n \n // Implement `Writer` for anthing that can be written to, this just implements"}, {"sha": "09f22e8691e4ca481d89e82d03683f44b67cba22", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0bfd19add662c07eb102818ce579315ddc90094/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=e0bfd19add662c07eb102818ce579315ddc90094", "patch": "@@ -52,7 +52,7 @@ pub trait AstBuilder {\n     fn ty_mt(&self, ty: P<ast::Ty>, mutbl: ast::Mutability) -> ast::MutTy;\n \n     fn ty(&self, span: Span, ty: ast::TyKind) -> P<ast::Ty>;\n-    fn ty_path(&self, ast::Path) -> P<ast::Ty>;\n+    fn ty_path(&self, path: ast::Path) -> P<ast::Ty>;\n     fn ty_ident(&self, span: Span, idents: ast::Ident) -> P<ast::Ty>;\n \n     fn ty_rptr(&self, span: Span,"}]}