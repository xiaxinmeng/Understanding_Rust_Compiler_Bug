{"sha": "974d5ac1e095379d63f546da7b8e9d61f7fdcc76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NGQ1YWMxZTA5NTM3OWQ2M2Y1NDZkYTdiOGU5ZDYxZjdmZGNjNzY=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-02-03T13:13:06Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-03T23:37:25Z"}, "message": "Fixed errors resulting from rebase.", "tree": {"sha": "c50447a03cafe1ca5353fc7d39d68f341703d945", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c50447a03cafe1ca5353fc7d39d68f341703d945"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/974d5ac1e095379d63f546da7b8e9d61f7fdcc76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/974d5ac1e095379d63f546da7b8e9d61f7fdcc76", "html_url": "https://github.com/rust-lang/rust/commit/974d5ac1e095379d63f546da7b8e9d61f7fdcc76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/974d5ac1e095379d63f546da7b8e9d61f7fdcc76/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af4972f3ce2235ee3055b281f381214529f4e4ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/af4972f3ce2235ee3055b281f381214529f4e4ef", "html_url": "https://github.com/rust-lang/rust/commit/af4972f3ce2235ee3055b281f381214529f4e4ef"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "deecdc98ffa832e0cac5434f8d631703e81fee90", "filename": "src/libcore/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/974d5ac1e095379d63f546da7b8e9d61f7fdcc76/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974d5ac1e095379d63f546da7b8e9d61f7fdcc76/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=974d5ac1e095379d63f546da7b8e9d61f7fdcc76", "patch": "@@ -154,7 +154,7 @@ pub pure fn is_digit_radix(c: char, radix: uint) -> bool {\n #[inline]\n pub pure fn to_digit(c: char, radix: uint) -> Option<uint> {\n     if radix > 36 {\n-        fail fmt!(\"to_digit: radix %? is to high (maximum 36)\", radix)\n+        die!(fmt!(\"to_digit: radix %? is to high (maximum 36)\", radix));\n     }\n     let val = match c {\n       '0' .. '9' => c as uint - ('0' as uint),\n@@ -177,7 +177,7 @@ pub pure fn to_digit(c: char, radix: uint) -> Option<uint> {\n #[inline]\n pub pure fn from_digit(num: uint, radix: uint) -> Option<char> {\n     if radix > 36 {\n-        fail fmt!(\"from_digit: radix %? is to high (maximum 36)\", num)\n+        die!(fmt!(\"from_digit: radix %? is to high (maximum 36)\", num));\n     }\n     if num < radix {\n         if num < 10 {"}, {"sha": "a73b5b9236c23c09494fc41fcc5ee9b961762407", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/974d5ac1e095379d63f546da7b8e9d61f7fdcc76/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974d5ac1e095379d63f546da7b8e9d61f7fdcc76/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=974d5ac1e095379d63f546da7b8e9d61f7fdcc76", "patch": "@@ -477,11 +477,11 @@ pub fn test_from_str() {\n    // note: -0 == 0, hence these slightly more complex tests\n    match from_str(~\"-0\") {\n        Some(v) if is_zero(v) => assert is_negative(v),\n-       _ => fail\n+       _ => die!()\n    }\n    match from_str(~\"0\") {\n        Some(v) if is_zero(v) => assert is_positive(v),\n-       _ => fail\n+       _ => die!()\n    }\n \n    assert from_str(~\"\").is_none();\n@@ -519,16 +519,16 @@ pub fn test_from_str_hex() {\n    // note: NaN != NaN, hence this slightly complex test\n    match from_str_hex(~\"NaN\") {\n        Some(f) => assert is_NaN(f),\n-       None => fail\n+       None => die!()\n    }\n    // note: -0 == 0, hence these slightly more complex tests\n    match from_str_hex(~\"-0\") {\n        Some(v) if is_zero(v) => assert is_negative(v),\n-       _ => fail\n+       _ => die!()\n    }\n    match from_str_hex(~\"0\") {\n        Some(v) if is_zero(v) => assert is_positive(v),\n-       _ => fail\n+       _ => die!()\n    }\n    assert from_str_hex(~\"e\") == Some(14.);\n    assert from_str_hex(~\"E\") == Some(14.);"}, {"sha": "05b03a53dcdeafaa02e68e0dc974167c0e48f7f3", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/974d5ac1e095379d63f546da7b8e9d61f7fdcc76/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974d5ac1e095379d63f546da7b8e9d61f7fdcc76/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=974d5ac1e095379d63f546da7b8e9d61f7fdcc76", "patch": "@@ -43,11 +43,11 @@ pub trait One {\n }\n \n pub trait Round {\n-    pure fn round(&self, mode: RoundMode) -> self;\n+    pure fn round(&self, mode: RoundMode) -> Self;\n \n-    pure fn floor(&self) -> self;\n-    pure fn ceil(&self)  -> self;\n-    pure fn fract(&self) -> self;\n+    pure fn floor(&self) -> Self;\n+    pure fn ceil(&self)  -> Self;\n+    pure fn fract(&self) -> Self;\n }\n \n pub enum RoundMode {\n@@ -62,7 +62,7 @@ pub trait ToStrRadix {\n }\n \n pub trait FromStrRadix {\n-    static pub pure fn from_str_radix(str: &str, radix: uint) -> Option<self>;\n+    static pub pure fn from_str_radix(str: &str, radix: uint) -> Option<Self>;\n }\n \n // Generic math functions:\n@@ -135,7 +135,8 @@ pub pure fn is_neg_zero<T: Num One Zero Eq>(num: &T) -> bool {\n  * - If code written to use this function doesn't care about it, it's\n  *   probably assuming that `x^0` always equals `1`.\n  */\n-pub pure fn pow_with_uint<T: Num One Zero>(radix: uint, pow: uint) -> T {\n+pub pure fn pow_with_uint<T: Num One Zero Copy>(radix: uint,\n+                                                pow: uint) -> T {\n     let _0: T = Zero::zero();\n     let _1: T = One::one();\n \n@@ -220,11 +221,11 @@ pub pure fn to_str_bytes_common<T: Num Zero One Eq Ord Round Copy>(\n         num: &T, radix: uint, special: bool, negative_zero: bool,\n         sign: SignFormat, digits: SignificantDigits) -> (~[u8], bool) {\n     if radix as int <  2 {\n-        fail fmt!(\"to_str_bytes_common: radix %? to low, \\\n-                   must lie in the range [2, 36]\", radix);\n+        die!(fmt!(\"to_str_bytes_common: radix %? to low, \\\n+                   must lie in the range [2, 36]\", radix));\n     } else if radix as int > 36 {\n-        fail fmt!(\"to_str_bytes_common: radix %? to high, \\\n-                   must lie in the range [2, 36]\", radix);\n+        die!(fmt!(\"to_str_bytes_common: radix %? to high, \\\n+                   must lie in the range [2, 36]\", radix));\n     }\n \n     let _0: T = Zero::zero();\n@@ -499,20 +500,20 @@ pub pure fn from_str_bytes_common<T: Num Zero One Ord Copy>(\n         ) -> Option<T> {\n     match exponent {\n         ExpDec if radix >= DIGIT_E_RADIX       // decimal exponent 'e'\n-          => fail fmt!(\"from_str_bytes_common: radix %? incompatible with \\\n-                        use of 'e' as decimal exponent\", radix),\n+          => die!(fmt!(\"from_str_bytes_common: radix %? incompatible with \\\n+                        use of 'e' as decimal exponent\", radix)),\n         ExpBin if radix >= DIGIT_P_RADIX       // binary exponent 'p'\n-          => fail fmt!(\"from_str_bytes_common: radix %? incompatible with \\\n-                        use of 'p' as binary exponent\", radix),\n+          => die!(fmt!(\"from_str_bytes_common: radix %? incompatible with \\\n+                        use of 'p' as binary exponent\", radix)),\n         _ if special && radix >= DIGIT_I_RADIX // first digit of 'inf'\n-          => fail fmt!(\"from_str_bytes_common: radix %? incompatible with \\\n-                        special values 'inf' and 'NaN'\", radix),\n+          => die!(fmt!(\"from_str_bytes_common: radix %? incompatible with \\\n+                        special values 'inf' and 'NaN'\", radix)),\n         _ if radix as int < 2\n-          => fail fmt!(\"from_str_bytes_common: radix %? to low, \\\n-                        must lie in the range [2, 36]\", radix),\n+          => die!(fmt!(\"from_str_bytes_common: radix %? to low, \\\n+                        must lie in the range [2, 36]\", radix)),\n         _ if radix as int > 36\n-          => fail fmt!(\"from_str_bytes_common: radix %? to high, \\\n-                        must lie in the range [2, 36]\", radix),\n+          => die!(fmt!(\"from_str_bytes_common: radix %? to high, \\\n+                        must lie in the range [2, 36]\", radix)),\n         _ => ()\n     }\n "}]}