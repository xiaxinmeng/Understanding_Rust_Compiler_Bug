{"sha": "3e48848538a49c66e3447a46346b96e8dc972531", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNDg4NDg1MzhhNDljNjZlMzQ0N2E0NjM0NmI5NmU4ZGM5NzI1MzE=", "commit": {"author": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-07-31T14:53:05Z"}, "committer": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-07-31T14:56:18Z"}, "message": "Some fixes for `plugin.md` in unstable-book\n\n- sample codes not working\n- broken link", "tree": {"sha": "a5bc2e107ff3182d4e90f12d15f2c2c5b54bea61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5bc2e107ff3182d4e90f12d15f2c2c5b54bea61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e48848538a49c66e3447a46346b96e8dc972531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e48848538a49c66e3447a46346b96e8dc972531", "html_url": "https://github.com/rust-lang/rust/commit/3e48848538a49c66e3447a46346b96e8dc972531", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e48848538a49c66e3447a46346b96e8dc972531/comments", "author": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfc572cae2d1fc381cce476b5c787fd7221af98c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfc572cae2d1fc381cce476b5c787fd7221af98c", "html_url": "https://github.com/rust-lang/rust/commit/cfc572cae2d1fc381cce476b5c787fd7221af98c"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "38351131527620509fe45e6997489e54aa0406ab", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3e48848538a49c66e3447a46346b96e8dc972531/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e48848538a49c66e3447a46346b96e8dc972531/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=3e48848538a49c66e3447a46346b96e8dc972531", "patch": "@@ -45,42 +45,40 @@ that warns about any item named `lintme`.\n extern crate rustc_ast;\n \n // Load rustc as a plugin to get macros\n-#[macro_use]\n-extern crate rustc;\n extern crate rustc_driver;\n+#[macro_use]\n+extern crate rustc_lint;\n+#[macro_use]\n+extern crate rustc_session;\n \n-use rustc::lint::{EarlyContext, LintContext, LintPass, EarlyLintPass,\n-                  EarlyLintPassObject, LintArray};\n use rustc_driver::plugin::Registry;\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n use rustc_ast::ast;\n-\n declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n \n-struct Pass;\n-\n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(TEST_LINT)\n-    }\n-}\n+declare_lint_pass!(Pass => [TEST_LINT]);\n \n impl EarlyLintPass for Pass {\n     fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n-        if it.ident.as_str() == \"lintme\" {\n-            cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\");\n+        if it.ident.name.as_str() == \"lintme\" {\n+            cx.lint(TEST_LINT, |lint| {\n+                lint.build(\"item is named 'lintme'\").set_span(it.span).emit()\n+            });\n         }\n     }\n }\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_early_lint_pass(box Pass as EarlyLintPassObject);\n+    reg.lint_store.register_lints(&[&TEST_LINT]);\n+    reg.lint_store.register_early_pass(|| box Pass);\n }\n ```\n \n Then code like\n \n ```rust,ignore\n+#![feature(plugin)]\n #![plugin(lint_plugin_test)]\n \n fn lintme() { }\n@@ -107,7 +105,7 @@ The components of a lint plugin are:\n \n Lint passes are syntax traversals, but they run at a late stage of compilation\n where type information is available. `rustc`'s [built-in\n-lints](https://github.com/rust-lang/rust/blob/master/src/librustc/lint/builtin.rs)\n+lints](https://github.com/rust-lang/rust/blob/master/src/librustc_session/lint/builtin.rs)\n mostly use the same infrastructure as lint plugins, and provide examples of how\n to access type information.\n "}]}