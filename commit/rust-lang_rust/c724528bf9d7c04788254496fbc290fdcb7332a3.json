{"sha": "c724528bf9d7c04788254496fbc290fdcb7332a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MjQ1MjhiZjlkN2MwNDc4ODI1NDQ5NmZiYzI5MGZkY2I3MzMyYTM=", "commit": {"author": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-05-15T15:37:55Z"}, "committer": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-05-15T15:39:43Z"}, "message": "Avoid unnecessary allocation", "tree": {"sha": "6ca678240b05b3e91958457e71f0b84b2800a335", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ca678240b05b3e91958457e71f0b84b2800a335"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c724528bf9d7c04788254496fbc290fdcb7332a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEU0FXzFYkrmfOhhqxKTh7Wnqvhj8FAlzcMsEACgkQKTh7Wnqv\nhj+sNAf/Z5TiczJ1zcLFLfXUqEFLkzrOcgxZ7aauJaFOMWK3X84OiLiRMjez2dhY\nBHn3Gxw9ryDBkv9vZDpoupfsRZ74puywvYR7LjnmMhjZDUUDO/psU6EXxDP2hAI5\nAA3okL+ffaGqh2LjPf540KgFeWPS2nvUjrUUyX6EidRPgrvPmrvTeWGThTMTAjpz\nNmnAi1ii+f0RXxV5GN2JwUdX+drORxhYIazzrToUGqHF8uYWI591EHiPP+QwmnLM\nOl2BCR35OkQIpns1Ct08FBvX+PiV6Q20GF4u82o9qzIDHzjilzZHCBBMeZEArK3A\nOwzAAu4TncKcRJcmSelchFX57OpLag==\n=+pus\n-----END PGP SIGNATURE-----", "payload": "tree 6ca678240b05b3e91958457e71f0b84b2800a335\nparent 6a406a822d0bd05f0b045be6dc6db5dab79e6a06\nauthor Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1557934675 +0200\ncommitter Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1557934783 +0200\n\nAvoid unnecessary allocation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c724528bf9d7c04788254496fbc290fdcb7332a3", "html_url": "https://github.com/rust-lang/rust/commit/c724528bf9d7c04788254496fbc290fdcb7332a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c724528bf9d7c04788254496fbc290fdcb7332a3/comments", "author": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a406a822d0bd05f0b045be6dc6db5dab79e6a06", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a406a822d0bd05f0b045be6dc6db5dab79e6a06", "html_url": "https://github.com/rust-lang/rust/commit/6a406a822d0bd05f0b045be6dc6db5dab79e6a06"}], "stats": {"total": 66, "additions": 50, "deletions": 16}, "files": [{"sha": "557ab37703f5398fcc2dbee8c8792f963b2aa6fd", "filename": "src/checkstyle.rs", "status": "modified", "additions": 50, "deletions": 16, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c724528bf9d7c04788254496fbc290fdcb7332a3/src%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c724528bf9d7c04788254496fbc290fdcb7332a3/src%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcheckstyle.rs?ref=c724528bf9d7c04788254496fbc290fdcb7332a3", "patch": "@@ -1,3 +1,4 @@\n+use std::fmt::{self, Display};\n use std::io::{self, Write};\n use std::path::Path;\n \n@@ -35,13 +36,12 @@ where\n     for mismatch in diff {\n         for line in mismatch.lines {\n             // Do nothing with `DiffLine::Context` and `DiffLine::Resulting`.\n-            if let DiffLine::Expected(ref str) = line {\n-                let message = xml_escape_str(str);\n+            if let DiffLine::Expected(message) = line {\n                 write!(\n                     writer,\n                     \"<error line=\\\"{}\\\" severity=\\\"warning\\\" message=\\\"Should be `{}`\\\" \\\n                      />\",\n-                    mismatch.line_number, message\n+                    mismatch.line_number, XmlEscaped(&message)\n                 )?;\n             }\n         }\n@@ -50,19 +50,53 @@ where\n     Ok(())\n }\n \n-// Convert special characters into XML entities.\n-// This is needed for checkstyle output.\n-fn xml_escape_str(string: &str) -> String {\n-    let mut out = String::new();\n-    for c in string.chars() {\n-        match c {\n-            '<' => out.push_str(\"&lt;\"),\n-            '>' => out.push_str(\"&gt;\"),\n-            '\"' => out.push_str(\"&quot;\"),\n-            '\\'' => out.push_str(\"&apos;\"),\n-            '&' => out.push_str(\"&amp;\"),\n-            _ => out.push(c),\n+/// Convert special characters into XML entities.\n+/// This is needed for checkstyle output.\n+struct XmlEscaped<'a>(&'a str);\n+\n+impl<'a> Display for XmlEscaped<'a> {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        for char in self.0.chars() {\n+            match char {\n+                '<' => write!(formatter, \"&lt;\"),\n+                '>' => write!(formatter, \"&gt;\"),\n+                '\"' => write!(formatter, \"&quot;\"),\n+                '\\'' => write!(formatter, \"&apos;\"),\n+                '&' => write!(formatter, \"&amp;\"),\n+                _ => write!(formatter, \"{}\", char),\n+            }?;\n         }\n+\n+        Ok(())\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn special_characters_are_escaped() {\n+        assert_eq!(\n+            \"&lt;&gt;&quot;&apos;&amp;\",\n+            format!(\"{}\", XmlEscaped(r#\"<>\"'&\"#)),\n+        );\n+    }\n+\n+    #[test]\n+    fn special_characters_are_escaped_in_string_with_other_characters() {\n+        assert_eq!(\n+            \"The quick brown &quot;\ud83e\udd8a&quot; jumps &lt;over&gt; the lazy \ud83d\udc36\",\n+            format!(\n+                \"{}\",\n+                XmlEscaped(r#\"The quick brown \"\ud83e\udd8a\" jumps <over> the lazy \ud83d\udc36\"#)\n+            ),\n+        );\n+    }\n+\n+    #[test]\n+    fn other_characters_are_not_escaped() {\n+        let string = \"The quick brown \ud83e\udd8a jumps over the lazy \ud83d\udc36\";\n+        assert_eq!(string, format!(\"{}\", XmlEscaped(string)),);\n     }\n-    out\n }"}]}