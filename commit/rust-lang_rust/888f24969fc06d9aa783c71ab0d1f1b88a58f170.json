{"sha": "888f24969fc06d9aa783c71ab0d1f1b88a58f170", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4OGYyNDk2OWZjMDZkOWFhNzgzYzcxYWIwZDFmMWI4OGE1OGYxNzA=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-09T20:22:19Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:48Z"}, "message": "librustdoc: use unboxed closures", "tree": {"sha": "a8059fc189f54d29388ab6b06cc1278c9360d188", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8059fc189f54d29388ab6b06cc1278c9360d188"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/888f24969fc06d9aa783c71ab0d1f1b88a58f170", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/888f24969fc06d9aa783c71ab0d1f1b88a58f170", "html_url": "https://github.com/rust-lang/rust/commit/888f24969fc06d9aa783c71ab0d1f1b88a58f170", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/888f24969fc06d9aa783c71ab0d1f1b88a58f170/comments", "author": null, "committer": null, "parents": [{"sha": "0676c3bf0315b7cb5dd309435b6c5ead5bf2bc2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0676c3bf0315b7cb5dd309435b6c5ead5bf2bc2f", "html_url": "https://github.com/rust-lang/rust/commit/0676c3bf0315b7cb5dd309435b6c5ead5bf2bc2f"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "051e8a3568fb64306c3094963807aa4ab2bd4d5c", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/888f24969fc06d9aa783c71ab0d1f1b88a58f170/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888f24969fc06d9aa783c71ab0d1f1b88a58f170/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=888f24969fc06d9aa783c71ab0d1f1b88a58f170", "patch": "@@ -218,10 +218,14 @@ fn resolved_path(w: &mut fmt::Formatter, did: ast::DefId, p: &clean::Path,\n         })\n }\n \n-fn path(w: &mut fmt::Formatter, path: &clean::Path, print_all: bool,\n-        root: |&render::Cache, &[String]| -> Option<String>,\n-        info: |&render::Cache| -> Option<(Vec<String> , ItemType)>)\n-    -> fmt::Result\n+fn path<F, G>(w: &mut fmt::Formatter,\n+              path: &clean::Path,\n+              print_all: bool,\n+              root: F,\n+              info: G)\n+              -> fmt::Result where\n+    F: FnOnce(&render::Cache, &[String]) -> Option<String>,\n+    G: FnOnce(&render::Cache) -> Option<(Vec<String>, ItemType)>,\n {\n     // The generics will get written to both the title and link\n     let mut generics = String::new();"}, {"sha": "63b1f5ca0497daf28e6b8f8adf1590c4b8b23b16", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/888f24969fc06d9aa783c71ab0d1f1b88a58f170/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888f24969fc06d9aa783c71ab0d1f1b88a58f170/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=888f24969fc06d9aa783c71ab0d1f1b88a58f170", "patch": "@@ -646,7 +646,9 @@ fn shortty(item: &clean::Item) -> ItemType {\n /// static HTML tree.\n // FIXME (#9639): The closure should deal with &[u8] instead of &str\n // FIXME (#9639): This is too conservative, rejecting non-UTF-8 paths\n-fn clean_srcpath(src_root: &Path, src: &[u8], f: |&str|) {\n+fn clean_srcpath<F>(src_root: &Path, src: &[u8], mut f: F) where\n+    F: FnMut(&str),\n+{\n     let p = Path::new(src);\n \n     // make it relative, if possible\n@@ -1051,7 +1053,9 @@ impl<'a> Cache {\n impl Context {\n     /// Recurse in the directory structure and change the \"root path\" to make\n     /// sure it always points to the top (relatively)\n-    fn recurse<T>(&mut self, s: String, f: |&mut Context| -> T) -> T {\n+    fn recurse<T, F>(&mut self, s: String, f: F) -> T where\n+        F: FnOnce(&mut Context) -> T,\n+    {\n         if s.len() == 0 {\n             panic!(\"Unexpected empty destination: {}\", self.current);\n         }\n@@ -1131,8 +1135,9 @@ impl Context {\n     /// all sub-items which need to be rendered.\n     ///\n     /// The rendering driver uses this closure to queue up more work.\n-    fn item(&mut self, item: clean::Item,\n-            f: |&mut Context, clean::Item|) -> io::IoResult<()> {\n+    fn item<F>(&mut self, item: clean::Item, mut f: F) -> io::IoResult<()> where\n+        F: FnMut(&mut Context, clean::Item),\n+    {\n         fn render(w: io::File, cx: &Context, it: &clean::Item,\n                   pushname: bool) -> io::IoResult<()> {\n             info!(\"Rendering an item to {}\", w.path().display());"}]}