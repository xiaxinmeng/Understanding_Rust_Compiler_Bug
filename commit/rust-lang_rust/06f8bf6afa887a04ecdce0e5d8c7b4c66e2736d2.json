{"sha": "06f8bf6afa887a04ecdce0e5d8c7b4c66e2736d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZjhiZjZhZmE4ODdhMDRlY2RjZTBlNWQ4YzdiNGM2NmUyNzM2ZDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-23T15:14:25Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-23T15:14:25Z"}, "message": "document Miri extern functions", "tree": {"sha": "f71a3d10226621038cfd5438a840c85efaadc2c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f71a3d10226621038cfd5438a840c85efaadc2c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06f8bf6afa887a04ecdce0e5d8c7b4c66e2736d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06f8bf6afa887a04ecdce0e5d8c7b4c66e2736d2", "html_url": "https://github.com/rust-lang/rust/commit/06f8bf6afa887a04ecdce0e5d8c7b4c66e2736d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06f8bf6afa887a04ecdce0e5d8c7b4c66e2736d2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc0569253f6e8ab98232dd8020bd44b7262c91ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc0569253f6e8ab98232dd8020bd44b7262c91ec", "html_url": "https://github.com/rust-lang/rust/commit/bc0569253f6e8ab98232dd8020bd44b7262c91ec"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "f97639ea5bdfd1cd0868fca635ab06746bb636ba", "filename": "README.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/06f8bf6afa887a04ecdce0e5d8c7b4c66e2736d2/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/06f8bf6afa887a04ecdce0e5d8c7b4c66e2736d2/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=06f8bf6afa887a04ecdce0e5d8c7b4c66e2736d2", "patch": "@@ -233,6 +233,29 @@ different Miri binaries, and as such worth documenting:\n   interpret the code but compile it like rustc would. This is useful to be sure\n   that the compiled `rlib`s are compatible with Miri.\n \n+## Miri `extern` functions\n+\n+Miri provides some `extern` functions that programs can import to access\n+Miri-specific functionality:\n+\n+```rust\n+#[cfg(miri)]\n+extern \"Rust\" {\n+    /// Miri-provided extern function to mark the block `ptr` points to as a \"root\"\n+    /// for some static memory. This memory and everything reachable by it is not\n+    /// considered leaking even if it still exists when the program terminates.\n+    ///\n+    /// `ptr` has to point to the beginning of an allocated block.\n+    fn miri_static_root(ptr: *const u8);\n+\n+    /// Miri-provided extern function to begin unwinding with the given payload.\n+    ///\n+    /// This is internal and unstable and should not be used; we give it here\n+    /// just to be complete.\n+    fn miri_start_panic(payload: *mut u8) -> !;\n+}\n+```\n+\n ## Contributing and getting help\n \n If you want to contribute to Miri, great!  Please check out our"}]}