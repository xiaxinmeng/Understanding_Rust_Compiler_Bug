{"sha": "fd300eebc9bd0c2a98591609cb88b1739459eb20", "node_id": "C_kwDOAAsO6NoAKGZkMzAwZWViYzliZDBjMmE5ODU5MTYwOWNiODhiMTczOTQ1OWViMjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T15:35:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T15:35:38Z"}, "message": "Auto merge of #13799 - Veykril:flycheck, r=Veykril\n\nRename `checkOnSave` settings to `check`\n\nNow that flychecks can be triggered without saving the setting name doesn't make that much sense anymore. This PR renames it to just `check`, but keeps `checkOnSave` as the enabling setting.", "tree": {"sha": "84fc4137069f4c9bd9efa145d5aaef5664c3a45e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84fc4137069f4c9bd9efa145d5aaef5664c3a45e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd300eebc9bd0c2a98591609cb88b1739459eb20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd300eebc9bd0c2a98591609cb88b1739459eb20", "html_url": "https://github.com/rust-lang/rust/commit/fd300eebc9bd0c2a98591609cb88b1739459eb20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd300eebc9bd0c2a98591609cb88b1739459eb20/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f920b03c6caab7591161c9b521d05b5253d1a99f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f920b03c6caab7591161c9b521d05b5253d1a99f", "html_url": "https://github.com/rust-lang/rust/commit/f920b03c6caab7591161c9b521d05b5253d1a99f"}, {"sha": "d2bb62b6a81d26f1e41712e04d4ac760f860d3b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2bb62b6a81d26f1e41712e04d4ac760f860d3b3", "html_url": "https://github.com/rust-lang/rust/commit/d2bb62b6a81d26f1e41712e04d4ac760f860d3b3"}], "stats": {"total": 168, "additions": 84, "deletions": 84}, "files": [{"sha": "cb55a3275835c6c434c7d83aa6d6e9daa52b7cf5", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 40, "deletions": 53, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/fd300eebc9bd0c2a98591609cb88b1739459eb20/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd300eebc9bd0c2a98591609cb88b1739459eb20/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=fd300eebc9bd0c2a98591609cb88b1739459eb20", "patch": "@@ -124,39 +124,40 @@ config_data! {\n         /// Unsets `#[cfg(test)]` for the specified crates.\n         cargo_unsetTest: Vec<String>     = \"[\\\"core\\\"]\",\n \n+        /// Run the check command for diagnostics on save.\n+        checkOnSave | checkOnSave_enable: bool                         = \"true\",\n+\n         /// Check all targets and tests (`--all-targets`).\n-        checkOnSave_allTargets: bool                     = \"true\",\n+        check_allTargets | checkOnSave_allTargets: bool                  = \"true\",\n         /// Cargo command to use for `cargo check`.\n-        checkOnSave_command: String                      = \"\\\"check\\\"\",\n-        /// Run specified `cargo check` command for diagnostics on save.\n-        checkOnSave_enable: bool                         = \"true\",\n+        check_command | checkOnSave_command: String                      = \"\\\"check\\\"\",\n         /// Extra arguments for `cargo check`.\n-        checkOnSave_extraArgs: Vec<String>               = \"[]\",\n+        check_extraArgs | checkOnSave_extraArgs: Vec<String>             = \"[]\",\n         /// Extra environment variables that will be set when running `cargo check`.\n         /// Extends `#rust-analyzer.cargo.extraEnv#`.\n-        checkOnSave_extraEnv: FxHashMap<String, String> = \"{}\",\n+        check_extraEnv | checkOnSave_extraEnv: FxHashMap<String, String> = \"{}\",\n         /// List of features to activate. Defaults to\n         /// `#rust-analyzer.cargo.features#`.\n         ///\n         /// Set to `\"all\"` to pass `--all-features` to Cargo.\n-        checkOnSave_features: Option<CargoFeaturesDef>      = \"null\",\n+        check_features | checkOnSave_features: Option<CargoFeaturesDef>  = \"null\",\n         /// Specifies the working directory for running checks.\n         /// - \"workspace\": run checks for workspaces in the corresponding workspaces' root directories.\n         // FIXME: Ideally we would support this in some way\n         ///   This falls back to \"root\" if `#rust-analyzer.cargo.checkOnSave.invocationStrategy#` is set to `once`.\n         /// - \"root\": run checks in the project's root directory.\n         /// This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n         /// is set.\n-        checkOnSave_invocationLocation: InvocationLocation = \"\\\"workspace\\\"\",\n+        check_invocationLocation | checkOnSave_invocationLocation: InvocationLocation = \"\\\"workspace\\\"\",\n         /// Specifies the invocation strategy to use when running the checkOnSave command.\n         /// If `per_workspace` is set, the command will be executed for each workspace.\n         /// If `once` is set, the command will be executed once.\n         /// This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n         /// is set.\n-        checkOnSave_invocationStrategy: InvocationStrategy = \"\\\"per_workspace\\\"\",\n+        check_invocationStrategy | checkOnSave_invocationStrategy: InvocationStrategy = \"\\\"per_workspace\\\"\",\n         /// Whether to pass `--no-default-features` to Cargo. Defaults to\n         /// `#rust-analyzer.cargo.noDefaultFeatures#`.\n-        checkOnSave_noDefaultFeatures: Option<bool>      = \"null\",\n+        check_noDefaultFeatures | checkOnSave_noDefaultFeatures: Option<bool>         = \"null\",\n         /// Override the command rust-analyzer uses instead of `cargo check` for\n         /// diagnostics on save. The command is required to output json and\n         /// should therefore include `--message-format=json` or a similar option.\n@@ -175,14 +176,14 @@ config_data! {\n         /// cargo check --workspace --message-format=json --all-targets\n         /// ```\n         /// .\n-        checkOnSave_overrideCommand: Option<Vec<String>> = \"null\",\n+        check_overrideCommand | checkOnSave_overrideCommand: Option<Vec<String>>             = \"null\",\n         /// Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\n         ///\n         /// Can be a single target, e.g. `\"x86_64-unknown-linux-gnu\"` or a list of targets, e.g.\n         /// `[\"aarch64-apple-darwin\", \"x86_64-apple-darwin\"]`.\n         ///\n         /// Aliased as `\"checkOnSave.targets\"`.\n-        checkOnSave_target | checkOnSave_targets: Option<CheckOnSaveTargets>           = \"null\",\n+        check_targets | checkOnSave_targets | checkOnSave_target: Option<CheckOnSaveTargets> = \"null\",\n \n         /// Toggles the additional completions that automatically add imports when completed.\n         /// Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n@@ -791,9 +792,9 @@ impl Config {\n \n     fn validate(&self, error_sink: &mut Vec<(String, serde_json::Error)>) {\n         use serde::de::Error;\n-        if self.data.checkOnSave_command.is_empty() {\n+        if self.data.check_command.is_empty() {\n             error_sink.push((\n-                \"/checkOnSave/command\".to_string(),\n+                \"/check/command\".to_string(),\n                 serde_json::Error::custom(\"expected a non-empty string\"),\n             ));\n         }\n@@ -1038,7 +1039,7 @@ impl Config {\n \n     pub fn check_on_save_extra_env(&self) -> FxHashMap<String, String> {\n         let mut extra_env = self.data.cargo_extraEnv.clone();\n-        extra_env.extend(self.data.checkOnSave_extraEnv.clone());\n+        extra_env.extend(self.data.check_extraEnv.clone());\n         extra_env\n     }\n \n@@ -1150,21 +1151,21 @@ impl Config {\n     }\n \n     pub fn flycheck(&self) -> FlycheckConfig {\n-        match &self.data.checkOnSave_overrideCommand {\n+        match &self.data.check_overrideCommand {\n             Some(args) if !args.is_empty() => {\n                 let mut args = args.clone();\n                 let command = args.remove(0);\n                 FlycheckConfig::CustomCommand {\n                     command,\n                     args,\n                     extra_env: self.check_on_save_extra_env(),\n-                    invocation_strategy: match self.data.checkOnSave_invocationStrategy {\n+                    invocation_strategy: match self.data.check_invocationStrategy {\n                         InvocationStrategy::Once => flycheck::InvocationStrategy::Once,\n                         InvocationStrategy::PerWorkspace => {\n                             flycheck::InvocationStrategy::PerWorkspace\n                         }\n                     },\n-                    invocation_location: match self.data.checkOnSave_invocationLocation {\n+                    invocation_location: match self.data.check_invocationLocation {\n                         InvocationLocation::Root => {\n                             flycheck::InvocationLocation::Root(self.root_path.clone())\n                         }\n@@ -1173,42 +1174,42 @@ impl Config {\n                 }\n             }\n             Some(_) | None => FlycheckConfig::CargoCommand {\n-                command: self.data.checkOnSave_command.clone(),\n+                command: self.data.check_command.clone(),\n                 target_triples: self\n                     .data\n-                    .checkOnSave_target\n+                    .check_targets\n                     .clone()\n                     .and_then(|targets| match &targets.0[..] {\n                         [] => None,\n                         targets => Some(targets.into()),\n                     })\n                     .unwrap_or_else(|| self.data.cargo_target.clone().into_iter().collect()),\n-                all_targets: self.data.checkOnSave_allTargets,\n+                all_targets: self.data.check_allTargets,\n                 no_default_features: self\n                     .data\n-                    .checkOnSave_noDefaultFeatures\n+                    .check_noDefaultFeatures\n                     .unwrap_or(self.data.cargo_noDefaultFeatures),\n                 all_features: matches!(\n-                    self.data.checkOnSave_features.as_ref().unwrap_or(&self.data.cargo_features),\n+                    self.data.check_features.as_ref().unwrap_or(&self.data.cargo_features),\n                     CargoFeaturesDef::All\n                 ),\n                 features: match self\n                     .data\n-                    .checkOnSave_features\n+                    .check_features\n                     .clone()\n                     .unwrap_or_else(|| self.data.cargo_features.clone())\n                 {\n                     CargoFeaturesDef::All => vec![],\n                     CargoFeaturesDef::Selected(it) => it,\n                 },\n-                extra_args: self.data.checkOnSave_extraArgs.clone(),\n+                extra_args: self.data.check_extraArgs.clone(),\n                 extra_env: self.check_on_save_extra_env(),\n             },\n         }\n     }\n \n     pub fn check_on_save(&self) -> bool {\n-        self.data.checkOnSave_enable\n+        self.data.checkOnSave\n     }\n \n     pub fn runnables(&self) -> RunnablesConfig {\n@@ -1886,35 +1887,30 @@ fn get_field<T: DeserializeOwned>(\n     alias: Option<&'static str>,\n     default: &str,\n ) -> T {\n-    let default = serde_json::from_str(default).unwrap();\n     // XXX: check alias first, to work-around the VS Code where it pre-fills the\n     // defaults instead of sending an empty object.\n     alias\n         .into_iter()\n         .chain(iter::once(field))\n-        .find_map(move |field| {\n+        .filter_map(move |field| {\n             let mut pointer = field.replace('_', \"/\");\n             pointer.insert(0, '/');\n-            json.pointer_mut(&pointer).and_then(|it| match serde_json::from_value(it.take()) {\n-                Ok(it) => Some(it),\n-                Err(e) => {\n-                    tracing::warn!(\"Failed to deserialize config field at {}: {:?}\", pointer, e);\n-                    error_sink.push((pointer, e));\n-                    None\n-                }\n-            })\n+            json.pointer_mut(&pointer)\n+                .map(|it| serde_json::from_value(it.take()).map_err(|e| (e, pointer)))\n+        })\n+        .find(Result::is_ok)\n+        .and_then(|res| match res {\n+            Ok(it) => Some(it),\n+            Err((e, pointer)) => {\n+                tracing::warn!(\"Failed to deserialize config field at {}: {:?}\", pointer, e);\n+                error_sink.push((pointer, e));\n+                None\n+            }\n         })\n-        .unwrap_or(default)\n+        .unwrap_or_else(|| serde_json::from_str(default).unwrap())\n }\n \n fn schema(fields: &[(&'static str, &'static str, &[&str], &str)]) -> serde_json::Value {\n-    for ((f1, ..), (f2, ..)) in fields.iter().zip(&fields[1..]) {\n-        fn key(f: &str) -> &str {\n-            f.splitn(2, '_').next().unwrap()\n-        }\n-        assert!(key(f1) <= key(f2), \"wrong field order: {f1:?} {f2:?}\");\n-    }\n-\n     let map = fields\n         .iter()\n         .map(|(field, ty, doc, default)| {\n@@ -1988,15 +1984,6 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"type\": [\"null\", \"array\"],\n             \"items\": { \"type\": \"string\" },\n         },\n-        \"MergeBehaviorDef\" => set! {\n-            \"type\": \"string\",\n-            \"enum\": [\"none\", \"crate\", \"module\"],\n-            \"enumDescriptions\": [\n-                \"Do not merge imports at all.\",\n-                \"Merge imports from the same crate into a single `use` statement.\",\n-                \"Merge imports from the same module into a single `use` statement.\"\n-            ],\n-        },\n         \"ExprFillDefaultDef\" => set! {\n             \"type\": \"string\",\n             \"enum\": [\"todo\", \"default\"],"}, {"sha": "de6ac946a682ff1cdbe40a8e98ab24520a3b17e7", "filename": "crates/rust-analyzer/src/config/patch_old_style.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fd300eebc9bd0c2a98591609cb88b1739459eb20/crates%2Frust-analyzer%2Fsrc%2Fconfig%2Fpatch_old_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd300eebc9bd0c2a98591609cb88b1739459eb20/crates%2Frust-analyzer%2Fsrc%2Fconfig%2Fpatch_old_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig%2Fpatch_old_style.rs?ref=fd300eebc9bd0c2a98591609cb88b1739459eb20", "patch": "@@ -4,6 +4,9 @@ use serde_json::{json, Value};\n /// This function patches the json config to the new expected keys.\n /// That is we try to load old known config keys here and convert them to the new ones.\n /// See https://github.com/rust-lang/rust-analyzer/pull/12010\n+///\n+/// We already have an alias system for simple cases, but if we make structural changes\n+/// the alias infra fails down.\n pub(super) fn patch_json_for_outdated_configs(json: &mut Value) {\n     let copy = json.clone();\n \n@@ -105,9 +108,9 @@ pub(super) fn patch_json_for_outdated_configs(json: &mut Value) {\n         merge(json, json!({ \"cargo\": { \"features\": \"all\" } }));\n     }\n \n-    // checkOnSave_allFeatures, checkOnSave_features -> checkOnSave_features\n+    // checkOnSave_allFeatures, checkOnSave_features -> check_features\n     if let Some(Value::Bool(true)) = copy.pointer(\"/checkOnSave/allFeatures\") {\n-        merge(json, json!({ \"checkOnSave\": { \"features\": \"all\" } }));\n+        merge(json, json!({ \"check\": { \"features\": \"all\" } }));\n     }\n \n     // completion_addCallArgumentSnippets completion_addCallParenthesis -> completion_callable_snippets\n@@ -121,6 +124,16 @@ pub(super) fn patch_json_for_outdated_configs(json: &mut Value) {\n         (_, _) => return,\n     };\n     merge(json, json!({ \"completion\": { \"callable\": {\"snippets\": res }} }));\n+\n+    // We need to do this due to the checkOnSave_enable -> checkOnSave change, as that key now can either be an object or a bool\n+    // checkOnSave_* -> check_*\n+    if let Some(Value::Object(obj)) = copy.pointer(\"/checkOnSave\") {\n+        // checkOnSave_enable -> checkOnSave\n+        if let Some(b @ Value::Bool(_)) = obj.get(\"enable\") {\n+            merge(json, json!({ \"checkOnSave\": b }));\n+        }\n+        merge(json, json!({ \"check\": obj }));\n+    }\n }\n \n fn merge(dst: &mut Value, src: Value) {"}, {"sha": "755c69e12cf32d0c0b44d15d508d3b4660633d27", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fd300eebc9bd0c2a98591609cb88b1739459eb20/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/fd300eebc9bd0c2a98591609cb88b1739459eb20/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=fd300eebc9bd0c2a98591609cb88b1739459eb20", "patch": "@@ -109,41 +109,41 @@ Compilation target override (target triple).\n --\n Unsets `#[cfg(test)]` for the specified crates.\n --\n-[[rust-analyzer.checkOnSave.allTargets]]rust-analyzer.checkOnSave.allTargets (default: `true`)::\n+[[rust-analyzer.checkOnSave]]rust-analyzer.checkOnSave (default: `true`)::\n +\n --\n-Check all targets and tests (`--all-targets`).\n+Run the check command for diagnostics on save.\n --\n-[[rust-analyzer.checkOnSave.command]]rust-analyzer.checkOnSave.command (default: `\"check\"`)::\n+[[rust-analyzer.check.allTargets]]rust-analyzer.check.allTargets (default: `true`)::\n +\n --\n-Cargo command to use for `cargo check`.\n+Check all targets and tests (`--all-targets`).\n --\n-[[rust-analyzer.checkOnSave.enable]]rust-analyzer.checkOnSave.enable (default: `true`)::\n+[[rust-analyzer.check.command]]rust-analyzer.check.command (default: `\"check\"`)::\n +\n --\n-Run specified `cargo check` command for diagnostics on save.\n+Cargo command to use for `cargo check`.\n --\n-[[rust-analyzer.checkOnSave.extraArgs]]rust-analyzer.checkOnSave.extraArgs (default: `[]`)::\n+[[rust-analyzer.check.extraArgs]]rust-analyzer.check.extraArgs (default: `[]`)::\n +\n --\n Extra arguments for `cargo check`.\n --\n-[[rust-analyzer.checkOnSave.extraEnv]]rust-analyzer.checkOnSave.extraEnv (default: `{}`)::\n+[[rust-analyzer.check.extraEnv]]rust-analyzer.check.extraEnv (default: `{}`)::\n +\n --\n Extra environment variables that will be set when running `cargo check`.\n Extends `#rust-analyzer.cargo.extraEnv#`.\n --\n-[[rust-analyzer.checkOnSave.features]]rust-analyzer.checkOnSave.features (default: `null`)::\n+[[rust-analyzer.check.features]]rust-analyzer.check.features (default: `null`)::\n +\n --\n List of features to activate. Defaults to\n `#rust-analyzer.cargo.features#`.\n \n Set to `\"all\"` to pass `--all-features` to Cargo.\n --\n-[[rust-analyzer.checkOnSave.invocationLocation]]rust-analyzer.checkOnSave.invocationLocation (default: `\"workspace\"`)::\n+[[rust-analyzer.check.invocationLocation]]rust-analyzer.check.invocationLocation (default: `\"workspace\"`)::\n +\n --\n Specifies the working directory for running checks.\n@@ -153,7 +153,7 @@ Specifies the working directory for running checks.\n This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n is set.\n --\n-[[rust-analyzer.checkOnSave.invocationStrategy]]rust-analyzer.checkOnSave.invocationStrategy (default: `\"per_workspace\"`)::\n+[[rust-analyzer.check.invocationStrategy]]rust-analyzer.check.invocationStrategy (default: `\"per_workspace\"`)::\n +\n --\n Specifies the invocation strategy to use when running the checkOnSave command.\n@@ -162,13 +162,13 @@ If `once` is set, the command will be executed once.\n This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n is set.\n --\n-[[rust-analyzer.checkOnSave.noDefaultFeatures]]rust-analyzer.checkOnSave.noDefaultFeatures (default: `null`)::\n+[[rust-analyzer.check.noDefaultFeatures]]rust-analyzer.check.noDefaultFeatures (default: `null`)::\n +\n --\n Whether to pass `--no-default-features` to Cargo. Defaults to\n `#rust-analyzer.cargo.noDefaultFeatures#`.\n --\n-[[rust-analyzer.checkOnSave.overrideCommand]]rust-analyzer.checkOnSave.overrideCommand (default: `null`)::\n+[[rust-analyzer.check.overrideCommand]]rust-analyzer.check.overrideCommand (default: `null`)::\n +\n --\n Override the command rust-analyzer uses instead of `cargo check` for\n@@ -190,7 +190,7 @@ cargo check --workspace --message-format=json --all-targets\n ```\n .\n --\n-[[rust-analyzer.checkOnSave.target]]rust-analyzer.checkOnSave.target (default: `null`)::\n+[[rust-analyzer.check.targets]]rust-analyzer.check.targets (default: `null`)::\n +\n --\n Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty."}, {"sha": "468368668fcf307e718b18473ea09846ca073068", "filename": "editors/code/package.json", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fd300eebc9bd0c2a98591609cb88b1739459eb20/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/fd300eebc9bd0c2a98591609cb88b1739459eb20/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=fd300eebc9bd0c2a98591609cb88b1739459eb20", "patch": "@@ -556,35 +556,35 @@\n                         \"type\": \"string\"\n                     }\n                 },\n-                \"rust-analyzer.checkOnSave.allTargets\": {\n+                \"rust-analyzer.checkOnSave\": {\n+                    \"markdownDescription\": \"Run the check command for diagnostics on save.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.check.allTargets\": {\n                     \"markdownDescription\": \"Check all targets and tests (`--all-targets`).\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.checkOnSave.command\": {\n+                \"rust-analyzer.check.command\": {\n                     \"markdownDescription\": \"Cargo command to use for `cargo check`.\",\n                     \"default\": \"check\",\n                     \"type\": \"string\"\n                 },\n-                \"rust-analyzer.checkOnSave.enable\": {\n-                    \"markdownDescription\": \"Run specified `cargo check` command for diagnostics on save.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.checkOnSave.extraArgs\": {\n+                \"rust-analyzer.check.extraArgs\": {\n                     \"markdownDescription\": \"Extra arguments for `cargo check`.\",\n                     \"default\": [],\n                     \"type\": \"array\",\n                     \"items\": {\n                         \"type\": \"string\"\n                     }\n                 },\n-                \"rust-analyzer.checkOnSave.extraEnv\": {\n+                \"rust-analyzer.check.extraEnv\": {\n                     \"markdownDescription\": \"Extra environment variables that will be set when running `cargo check`.\\nExtends `#rust-analyzer.cargo.extraEnv#`.\",\n                     \"default\": {},\n                     \"type\": \"object\"\n                 },\n-                \"rust-analyzer.checkOnSave.features\": {\n+                \"rust-analyzer.check.features\": {\n                     \"markdownDescription\": \"List of features to activate. Defaults to\\n`#rust-analyzer.cargo.features#`.\\n\\nSet to `\\\"all\\\"` to pass `--all-features` to Cargo.\",\n                     \"default\": null,\n                     \"anyOf\": [\n@@ -608,7 +608,7 @@\n                         }\n                     ]\n                 },\n-                \"rust-analyzer.checkOnSave.invocationLocation\": {\n+                \"rust-analyzer.check.invocationLocation\": {\n                     \"markdownDescription\": \"Specifies the working directory for running checks.\\n- \\\"workspace\\\": run checks for workspaces in the corresponding workspaces' root directories.\\n    This falls back to \\\"root\\\" if `#rust-analyzer.cargo.checkOnSave.invocationStrategy#` is set to `once`.\\n- \\\"root\\\": run checks in the project's root directory.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n                     \"default\": \"workspace\",\n                     \"type\": \"string\",\n@@ -621,7 +621,7 @@\n                         \"The command will be executed in the project root.\"\n                     ]\n                 },\n-                \"rust-analyzer.checkOnSave.invocationStrategy\": {\n+                \"rust-analyzer.check.invocationStrategy\": {\n                     \"markdownDescription\": \"Specifies the invocation strategy to use when running the checkOnSave command.\\nIf `per_workspace` is set, the command will be executed for each workspace.\\nIf `once` is set, the command will be executed once.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n                     \"default\": \"per_workspace\",\n                     \"type\": \"string\",\n@@ -634,15 +634,15 @@\n                         \"The command will be executed once.\"\n                     ]\n                 },\n-                \"rust-analyzer.checkOnSave.noDefaultFeatures\": {\n+                \"rust-analyzer.check.noDefaultFeatures\": {\n                     \"markdownDescription\": \"Whether to pass `--no-default-features` to Cargo. Defaults to\\n`#rust-analyzer.cargo.noDefaultFeatures#`.\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\",\n                         \"boolean\"\n                     ]\n                 },\n-                \"rust-analyzer.checkOnSave.overrideCommand\": {\n+                \"rust-analyzer.check.overrideCommand\": {\n                     \"markdownDescription\": \"Override the command rust-analyzer uses instead of `cargo check` for\\ndiagnostics on save. The command is required to output json and\\nshould therefore include `--message-format=json` or a similar option.\\n\\nIf you're changing this because you're using some tool wrapping\\nCargo, you might also want to change\\n`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\\n\\nIf there are multiple linked projects, this command is invoked for\\neach of them, with the working directory being the project root\\n(i.e., the folder containing the `Cargo.toml`).\\n\\nAn example command would be:\\n\\n```bash\\ncargo check --workspace --message-format=json --all-targets\\n```\\n.\",\n                     \"default\": null,\n                     \"type\": [\n@@ -653,7 +653,7 @@\n                         \"type\": \"string\"\n                     }\n                 },\n-                \"rust-analyzer.checkOnSave.target\": {\n+                \"rust-analyzer.check.targets\": {\n                     \"markdownDescription\": \"Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\\n\\nCan be a single target, e.g. `\\\"x86_64-unknown-linux-gnu\\\"` or a list of targets, e.g.\\n`[\\\"aarch64-apple-darwin\\\", \\\"x86_64-apple-darwin\\\"]`.\\n\\nAliased as `\\\"checkOnSave.targets\\\"`.\",\n                     \"default\": null,\n                     \"anyOf\": ["}]}