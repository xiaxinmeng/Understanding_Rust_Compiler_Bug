{"sha": "422ad3bec2a9b41345cf1dd95a4ce4b4d9f159d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMmFkM2JlYzJhOWI0MTM0NWNmMWRkOTVhNGNlNGI0ZDlmMTU5ZDg=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-30T21:41:48Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-30T21:43:38Z"}, "message": "Upgrade array_into_iter lint to include Deref-to-array types.", "tree": {"sha": "fad689a1a010fc960d15f2ba95e66f7e33a266d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fad689a1a010fc960d15f2ba95e66f7e33a266d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/422ad3bec2a9b41345cf1dd95a4ce4b4d9f159d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/422ad3bec2a9b41345cf1dd95a4ce4b4d9f159d8", "html_url": "https://github.com/rust-lang/rust/commit/422ad3bec2a9b41345cf1dd95a4ce4b4d9f159d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/422ad3bec2a9b41345cf1dd95a4ce4b4d9f159d8/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13edc17f65bcad7fe9046720a16fc192e810970e", "url": "https://api.github.com/repos/rust-lang/rust/commits/13edc17f65bcad7fe9046720a16fc192e810970e", "html_url": "https://github.com/rust-lang/rust/commit/13edc17f65bcad7fe9046720a16fc192e810970e"}], "stats": {"total": 52, "additions": 29, "deletions": 23}, "files": [{"sha": "2e20f376766ba5542a90dc6ca2a21e3b512ec8ce", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/422ad3bec2a9b41345cf1dd95a4ce4b4d9f159d8/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422ad3bec2a9b41345cf1dd95a4ce4b4d9f159d8/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=422ad3bec2a9b41345cf1dd95a4ce4b4d9f159d8", "patch": "@@ -74,39 +74,45 @@ impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n                 _ => return,\n             };\n \n-            // As this is a method call expression, we have at least one\n-            // argument.\n+            // As this is a method call expression, we have at least one argument.\n             let receiver_arg = &args[0];\n+            let receiver_ty = cx.typeck_results().expr_ty(receiver_arg);\n+            let adjustments = cx.typeck_results().expr_adjustments(receiver_arg);\n \n-            // Peel all `Box<_>` layers. We have to special case `Box` here as\n-            // `Box` is the only thing that values can be moved out of via\n-            // method call. `Box::new([1]).into_iter()` should trigger this\n-            // lint.\n-            let mut recv_ty = cx.typeck_results().expr_ty(receiver_arg);\n-            let mut num_box_derefs = 0;\n-            while recv_ty.is_box() {\n-                num_box_derefs += 1;\n-                recv_ty = recv_ty.boxed_ty();\n-            }\n+            let target = match adjustments.last() {\n+                Some(Adjustment { kind: Adjust::Borrow(_), target }) => target,\n+                _ => return,\n+            };\n \n-            // Make sure we found an array after peeling the boxes.\n-            if !matches!(recv_ty.kind(), ty::Array(..)) {\n-                return;\n+            let types =\n+                std::iter::once(receiver_ty).chain(adjustments.iter().map(|adj| adj.target));\n+\n+            let mut found_array = false;\n+\n+            for ty in types {\n+                match ty.kind() {\n+                    // If we run into a &[T; N] or &[T] first, there's nothing to warn about.\n+                    // It'll resolve to the reference version.\n+                    ty::Ref(_, inner_ty, _) if inner_ty.is_array() => return,\n+                    ty::Ref(_, inner_ty, _) if matches!(inner_ty.kind(), ty::Slice(..)) => return,\n+                    // Found an actual array type without matching a &[T; N] first.\n+                    // This is the problematic case.\n+                    ty::Array(..) => {\n+                        found_array = true;\n+                        break;\n+                    }\n+                    _ => {}\n+                }\n             }\n \n-            // Make sure that there is an autoref coercion at the expected\n-            // position. The first `num_box_derefs` adjustments are the derefs\n-            // of the box.\n-            match cx.typeck_results().expr_adjustments(receiver_arg).get(num_box_derefs) {\n-                Some(Adjustment { kind: Adjust::Borrow(_), .. }) => {}\n-                _ => return,\n+            if !found_array {\n+                return;\n             }\n \n             // Emit lint diagnostic.\n-            let target = match *cx.typeck_results().expr_ty_adjusted(receiver_arg).kind() {\n+            let target = match *target.kind() {\n                 ty::Ref(_, inner_ty, _) if inner_ty.is_array() => \"[T; N]\",\n                 ty::Ref(_, inner_ty, _) if matches!(inner_ty.kind(), ty::Slice(..)) => \"[T]\",\n-\n                 // We know the original first argument type is an array type,\n                 // we know that the first adjustment was an autoref coercion\n                 // and we know that `IntoIterator` is the trait involved. The"}]}