{"sha": "c3fe7105ba4362bce7f795f4502163bcec039d74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZmU3MTA1YmE0MzYyYmNlN2Y3OTVmNDUwMjE2M2JjZWMwMzlkNzQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-03T02:19:24Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:44Z"}, "message": "libstd: fix fallout", "tree": {"sha": "4dc9321f3ed85fc56027452a6003d44fdbab24ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dc9321f3ed85fc56027452a6003d44fdbab24ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3fe7105ba4362bce7f795f4502163bcec039d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3fe7105ba4362bce7f795f4502163bcec039d74", "html_url": "https://github.com/rust-lang/rust/commit/c3fe7105ba4362bce7f795f4502163bcec039d74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3fe7105ba4362bce7f795f4502163bcec039d74/comments", "author": null, "committer": null, "parents": [{"sha": "4f6f6af281b47a95576b648ac924d79835f16db2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f6f6af281b47a95576b648ac924d79835f16db2", "html_url": "https://github.com/rust-lang/rust/commit/4f6f6af281b47a95576b648ac924d79835f16db2"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "745a8298ee8a5890bd0b0ae68a778772174d738f", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c3fe7105ba4362bce7f795f4502163bcec039d74/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3fe7105ba4362bce7f795f4502163bcec039d74/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=c3fe7105ba4362bce7f795f4502163bcec039d74", "patch": "@@ -19,7 +19,7 @@ use fmt;\n use hash::{Hash, Hasher, RandomSipHasher};\n use iter::{Iterator, IteratorExt, FromIterator, FilterMap, Chain, Repeat, Zip, Extend, repeat};\n use iter;\n-use option::Option::{Some, None};\n+use option::Option::{Some, None, mod};\n use result::Result::{Ok, Err};\n \n use super::map::{HashMap, Entries, MoveEntries, INITIAL_CAPACITY};\n@@ -306,10 +306,13 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn difference<'a>(&'a self, other: &'a HashSet<T, H>) -> SetAlgebraItems<'a, T, H> {\n-        repeat(other).zip(self.iter())\n-            .filter_map(|(other, elt)| {\n-                if !other.contains(elt) { Some(elt) } else { None }\n-            })\n+        fn filter<'a, T, S, H>((other, elt): (&HashSet<T, H>, &'a T)) -> Option<&'a T> where\n+            T: Eq + Hash<S>, H: Hasher<S>\n+        {\n+            if !other.contains(elt) { Some(elt) } else { None }\n+        }\n+\n+        repeat(other).zip(self.iter()).filter_map(filter)\n     }\n \n     /// Visit the values representing the symmetric difference.\n@@ -356,12 +359,14 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// assert_eq!(diff, [2i, 3].iter().map(|&x| x).collect());\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n-    pub fn intersection<'a>(&'a self, other: &'a HashSet<T, H>)\n-        -> SetAlgebraItems<'a, T, H> {\n-        repeat(other).zip(self.iter())\n-            .filter_map(|(other, elt)| {\n-                if other.contains(elt) { Some(elt) } else { None }\n-            })\n+    pub fn intersection<'a>(&'a self, other: &'a HashSet<T, H>) -> SetAlgebraItems<'a, T, H> {\n+        fn filter<'a, T, S, H>((other, elt): (&HashSet<T, H>, &'a T)) -> Option<&'a T> where\n+            T: Eq + Hash<S>, H: Hasher<S>\n+        {\n+            if other.contains(elt) { Some(elt) } else { None }\n+        }\n+\n+        repeat(other).zip(self.iter()).filter_map(filter)\n     }\n \n     /// Visit the values representing the union.\n@@ -621,9 +626,12 @@ pub type SetMoveItems<K> = iter::Map<(K, ()), K, MoveEntries<K, ()>, fn((K, ()))\n // `Repeat` is used to feed the filter closure an explicit capture\n // of a reference to the other set\n /// Set operations iterator\n-pub type SetAlgebraItems<'a, T, H> =\n-    FilterMap<'static, (&'a HashSet<T, H>, &'a T), &'a T,\n-              Zip<Repeat<&'a HashSet<T, H>>, SetItems<'a, T>>>;\n+pub type SetAlgebraItems<'a, T, H> = FilterMap<\n+    (&'a HashSet<T, H>, &'a T),\n+    &'a T,\n+    Zip<Repeat<&'a HashSet<T, H>>, SetItems<'a, T>>,\n+    for<'b> fn((&HashSet<T, H>, &'b T)) -> Option<&'b T>,\n+>;\n \n #[cfg(test)]\n mod test_set {"}]}