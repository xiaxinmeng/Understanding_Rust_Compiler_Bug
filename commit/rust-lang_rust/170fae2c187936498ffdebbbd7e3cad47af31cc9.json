{"sha": "170fae2c187936498ffdebbbd7e3cad47af31cc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MGZhZTJjMTg3OTM2NDk4ZmZkZWJiYmQ3ZTNjYWQ0N2FmMzFjYzk=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-12-17T00:47:31Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-12-18T16:21:38Z"}, "message": "Log the output of `is_useful` in the or-pattern case too", "tree": {"sha": "d77bad98aa15b69a99f1c98b68e354ea29058182", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d77bad98aa15b69a99f1c98b68e354ea29058182"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/170fae2c187936498ffdebbbd7e3cad47af31cc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/170fae2c187936498ffdebbbd7e3cad47af31cc9", "html_url": "https://github.com/rust-lang/rust/commit/170fae2c187936498ffdebbbd7e3cad47af31cc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/170fae2c187936498ffdebbbd7e3cad47af31cc9/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7009d202904e9af500ef13285b4c50cf63c2e75b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7009d202904e9af500ef13285b4c50cf63c2e75b", "html_url": "https://github.com/rust-lang/rust/commit/7009d202904e9af500ef13285b4c50cf63c2e75b"}], "stats": {"total": 56, "additions": 31, "deletions": 25}, "files": [{"sha": "9646f7ffcf7fb2b0c238986f0d5d71eb6eafc7e0", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/170fae2c187936498ffdebbbd7e3cad47af31cc9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/170fae2c187936498ffdebbbd7e3cad47af31cc9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=170fae2c187936498ffdebbbd7e3cad47af31cc9", "patch": "@@ -904,8 +904,14 @@ fn is_useful<'p, 'tcx>(\n \n     assert!(rows.iter().all(|r| r.len() == v.len()));\n \n+    // FIXME(Nadrieril): Hack to work around type normalization issues (see #72476).\n+    let ty = matrix.heads().next().map(|r| r.ty).unwrap_or(v.head().ty);\n+    let pcx = PatCtxt { cx, matrix, ty, span: v.head().span, is_top_level };\n+\n+    debug!(\"is_useful_expand_first_col: ty={:#?}, expanding {:#?}\", pcx.ty, v.head());\n+\n     // If the first pattern is an or-pattern, expand it.\n-    if let Some(vs) = v.expand_or_pat() {\n+    let ret = if let Some(vs) = v.expand_or_pat() {\n         // We expand the or pattern, trying each of its branches in turn and keeping careful track\n         // of possible unreachable sub-branches.\n         let mut matrix = matrix.clone();\n@@ -920,30 +926,30 @@ fn is_useful<'p, 'tcx>(\n             }\n             (u, span)\n         });\n-        return Usefulness::merge(usefulnesses, v.len());\n-    }\n-\n-    // FIXME(Nadrieril): Hack to work around type normalization issues (see #72476).\n-    let ty = matrix.heads().next().map(|r| r.ty).unwrap_or(v.head().ty);\n-    let pcx = PatCtxt { cx, matrix, ty, span: v.head().span, is_top_level };\n-\n-    debug!(\"is_useful_expand_first_col: ty={:#?}, expanding {:#?}\", pcx.ty, v.head());\n-\n-    let ret = v\n-        .head_ctor(cx)\n-        .split(pcx, Some(hir_id))\n-        .into_iter()\n-        .map(|ctor| {\n-            // We cache the result of `Fields::wildcards` because it is used a lot.\n-            let ctor_wild_subpatterns = Fields::wildcards(pcx, &ctor);\n-            let matrix = pcx.matrix.specialize_constructor(pcx, &ctor, &ctor_wild_subpatterns);\n-            let v = v.pop_head_constructor(&ctor_wild_subpatterns);\n-            let usefulness =\n-                is_useful(pcx.cx, &matrix, &v, witness_preference, hir_id, is_under_guard, false);\n-            usefulness.apply_constructor(pcx, &ctor, &ctor_wild_subpatterns)\n-        })\n-        .find(|result| result.is_useful())\n-        .unwrap_or(NotUseful);\n+        Usefulness::merge(usefulnesses, v.len())\n+    } else {\n+        v.head_ctor(cx)\n+            .split(pcx, Some(hir_id))\n+            .into_iter()\n+            .map(|ctor| {\n+                // We cache the result of `Fields::wildcards` because it is used a lot.\n+                let ctor_wild_subpatterns = Fields::wildcards(pcx, &ctor);\n+                let matrix = pcx.matrix.specialize_constructor(pcx, &ctor, &ctor_wild_subpatterns);\n+                let v = v.pop_head_constructor(&ctor_wild_subpatterns);\n+                let usefulness = is_useful(\n+                    pcx.cx,\n+                    &matrix,\n+                    &v,\n+                    witness_preference,\n+                    hir_id,\n+                    is_under_guard,\n+                    false,\n+                );\n+                usefulness.apply_constructor(pcx, &ctor, &ctor_wild_subpatterns)\n+            })\n+            .find(|result| result.is_useful())\n+            .unwrap_or(NotUseful)\n+    };\n     debug!(\"is_useful::returns({:#?}, {:#?}) = {:?}\", matrix, v, ret);\n     ret\n }"}]}