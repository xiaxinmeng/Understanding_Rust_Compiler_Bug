{"sha": "e366b3c730c343130f7935400e00bba96e77c9da", "node_id": "C_kwDOAAsO6NoAKGUzNjZiM2M3MzBjMzQzMTMwZjc5MzU0MDBlMDBiYmE5NmU3N2M5ZGE", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-01-02T12:01:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-01-02T12:01:20Z"}, "message": "minor: generalize", "tree": {"sha": "f278b7d3d38b277ba0e39098bd4e065baaea428d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f278b7d3d38b277ba0e39098bd4e065baaea428d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e366b3c730c343130f7935400e00bba96e77c9da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e366b3c730c343130f7935400e00bba96e77c9da", "html_url": "https://github.com/rust-lang/rust/commit/e366b3c730c343130f7935400e00bba96e77c9da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e366b3c730c343130f7935400e00bba96e77c9da/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d783226381ca96f164bef2ca6fda3df62c6a5f7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d783226381ca96f164bef2ca6fda3df62c6a5f7b", "html_url": "https://github.com/rust-lang/rust/commit/d783226381ca96f164bef2ca6fda3df62c6a5f7b"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "157c381f4b2f4c8d20aa5098cfb5e93fdc00a73b", "filename": "crates/parser/src/tests.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e366b3c730c343130f7935400e00bba96e77c9da/crates%2Fparser%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e366b3c730c343130f7935400e00bba96e77c9da/crates%2Fparser%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests.rs?ref=e366b3c730c343130f7935400e00bba96e77c9da", "patch": "@@ -9,7 +9,7 @@ use std::{\n \n use expect_test::expect_file;\n \n-use crate::LexedStr;\n+use crate::{LexedStr, TopEntryPoint};\n \n #[test]\n fn lex_ok() {\n@@ -45,7 +45,7 @@ fn lex(text: &str) -> String {\n #[test]\n fn parse_ok() {\n     for case in TestCase::list(\"parser/ok\") {\n-        let (actual, errors) = parse(&case.text);\n+        let (actual, errors) = parse(TopEntryPoint::SourceFile, &case.text);\n         assert!(!errors, \"errors in an OK file {}:\\n{}\", case.rs.display(), actual);\n         expect_file![case.txt].assert_eq(&actual);\n     }\n@@ -54,7 +54,7 @@ fn parse_ok() {\n #[test]\n fn parse_inline_ok() {\n     for case in TestCase::list(\"parser/inline/ok\") {\n-        let (actual, errors) = parse(&case.text);\n+        let (actual, errors) = parse(TopEntryPoint::SourceFile, &case.text);\n         assert!(!errors, \"errors in an OK file {}:\\n{}\", case.rs.display(), actual);\n         expect_file![case.txt].assert_eq(&actual);\n     }\n@@ -63,7 +63,7 @@ fn parse_inline_ok() {\n #[test]\n fn parse_err() {\n     for case in TestCase::list(\"parser/err\") {\n-        let (actual, errors) = parse(&case.text);\n+        let (actual, errors) = parse(TopEntryPoint::SourceFile, &case.text);\n         assert!(errors, \"no errors in an ERR file {}:\\n{}\", case.rs.display(), actual);\n         expect_file![case.txt].assert_eq(&actual)\n     }\n@@ -72,16 +72,16 @@ fn parse_err() {\n #[test]\n fn parse_inline_err() {\n     for case in TestCase::list(\"parser/inline/err\") {\n-        let (actual, errors) = parse(&case.text);\n+        let (actual, errors) = parse(TopEntryPoint::SourceFile, &case.text);\n         assert!(errors, \"no errors in an ERR file {}:\\n{}\", case.rs.display(), actual);\n         expect_file![case.txt].assert_eq(&actual)\n     }\n }\n \n-fn parse(text: &str) -> (String, bool) {\n+fn parse(entry: TopEntryPoint, text: &str) -> (String, bool) {\n     let lexed = LexedStr::new(text);\n     let input = lexed.to_input();\n-    let output = crate::TopEntryPoint::SourceFile.parse(&input);\n+    let output = entry.parse(&input);\n \n     let mut buf = String::new();\n     let mut errors = Vec::new();"}]}