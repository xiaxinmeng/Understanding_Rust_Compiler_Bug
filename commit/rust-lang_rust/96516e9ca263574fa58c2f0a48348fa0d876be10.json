{"sha": "96516e9ca263574fa58c2f0a48348fa0d876be10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NTE2ZTljYTI2MzU3NGZhNThjMmYwYTQ4MzQ4ZmEwZDg3NmJlMTA=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-05-18T19:43:48Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-05-18T19:43:48Z"}, "message": "One exit_task_glue to rule them all.", "tree": {"sha": "f22492f3345878aee734420f550158ec5c571fa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f22492f3345878aee734420f550158ec5c571fa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96516e9ca263574fa58c2f0a48348fa0d876be10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96516e9ca263574fa58c2f0a48348fa0d876be10", "html_url": "https://github.com/rust-lang/rust/commit/96516e9ca263574fa58c2f0a48348fa0d876be10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96516e9ca263574fa58c2f0a48348fa0d876be10/comments", "author": null, "committer": null, "parents": [{"sha": "6a4a85f452ffe028e3be531f718c3545b1dc06ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a4a85f452ffe028e3be531f718c3545b1dc06ce", "html_url": "https://github.com/rust-lang/rust/commit/6a4a85f452ffe028e3be531f718c3545b1dc06ce"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "f9700ed79df71176839de581d474f0efb2e7405c", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96516e9ca263574fa58c2f0a48348fa0d876be10/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/96516e9ca263574fa58c2f0a48348fa0d876be10/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=96516e9ca263574fa58c2f0a48348fa0d876be10", "patch": "@@ -163,6 +163,7 @@ export CFG_LLVM_ROOT\n \n LLVM_AS := $(CFG_LLVM_BINDIR)/llvm-as\n \n+LLC := $(CFG_LLVM_BINDIR)/llc\n \n ######################################################################\n # Single-target rules"}, {"sha": "f65fa99ee9d1c6187bfb3eff5d1d1820aaa23f26", "filename": "mk/rt.mk", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/96516e9ca263574fa58c2f0a48348fa0d876be10/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/96516e9ca263574fa58c2f0a48348fa0d876be10/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=96516e9ca263574fa58c2f0a48348fa0d876be10", "patch": "@@ -31,6 +31,8 @@ RUNTIME_CS := rt/sync/timer.cpp \\\n               rt/test/rust_test_runtime.cpp \\\n               rt/test/rust_test_util.cpp\n \n+RUNTIME_LL := rt/new_exit.ll\n+\n RUNTIME_HDR := rt/globals.h \\\n                rt/rust.h \\\n                rt/rust_dwarf.h \\\n@@ -63,14 +65,17 @@ RUNTIME_HDR := rt/globals.h \\\n \n RUNTIME_DEF := rt/rustrt$(CFG_DEF_SUFFIX)\n RUNTIME_INCS := -I $(S)src/rt/isaac -I $(S)src/rt/uthash\n-RUNTIME_OBJS := $(RUNTIME_CS:.cpp=.o)\n+RUNTIME_OBJS := $(RUNTIME_CS:.cpp=.o) $(RUNTIME_LL:.ll=.o)\n RUNTIME_LIBS := $(CFG_GCCISH_POST_LIB_FLAGS)\n \n \n rt/%.o: rt/%.cpp $(MKFILES)\n \t@$(call E, compile: $@)\n \t$(Q)$(call CFG_COMPILE_C, $@, $(RUNTIME_INCS)) $<\n \n+rt/%.o: rt/%.ll $(MKFILES)\n+\t@$(call E, llc: $@)\n+\t$(Q)$(LLC) -filetype=obj -relocation-model=pic -march=x86 -o $@ $<\n \n rt/$(CFG_RUNTIME): $(RUNTIME_OBJS) $(MKFILES) $(RUNTIME_HDR) $(RUNTIME_DEF)\n \t@$(call E, link: $@)"}, {"sha": "07798153ff4ccfd577f46cb32a1ecf3b23219391", "filename": "src/rt/new_exit.ll", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/96516e9ca263574fa58c2f0a48348fa0d876be10/src%2Frt%2Fnew_exit.ll", "raw_url": "https://github.com/rust-lang/rust/raw/96516e9ca263574fa58c2f0a48348fa0d876be10/src%2Frt%2Fnew_exit.ll", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fnew_exit.ll?ref=96516e9ca263574fa58c2f0a48348fa0d876be10", "patch": "@@ -0,0 +1,11 @@\n+declare fastcc i32 @rust_native_rust_1(i32, i32)\n+\n+declare i32 @upcall_exit(i32)\n+\n+define void @rust_new_exit_task_glue(i32, i32, i32, i32, i32) {\n+entry:\n+  %5 = inttoptr i32 %0 to void (i32, i32, i32, i32)*\n+  tail call fastcc void %5(i32 %1, i32 %2, i32 %3, i32 %4)\n+  %6 = tail call fastcc i32 @rust_native_rust_1(i32 ptrtoint (i32 (i32)* @upcall_exit to i32), i32 %2)\n+  ret void\n+}"}, {"sha": "1e708be0a49ff6cab2d6b4678282b6ae14485e94", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96516e9ca263574fa58c2f0a48348fa0d876be10/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/96516e9ca263574fa58c2f0a48348fa0d876be10/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=96516e9ca263574fa58c2f0a48348fa0d876be10", "patch": "@@ -99,7 +99,7 @@ rust_start(uintptr_t main_fn, rust_crate const *crate, int argc,\n     }\n \n     uintptr_t main_args[4] = {0, 0, 0, (uintptr_t)args->args};\n-    dom->root_task->start(crate->get_exit_task_glue(),\n+    dom->root_task->start((uintptr_t)rust_new_exit_task_glue,\n                           main_fn,\n                           (uintptr_t)&main_args, sizeof(main_args));\n "}, {"sha": "6f1889ffc024c7265663d9433d571b9d4892bdb7", "filename": "src/rt/rust_crate.cpp", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96516e9ca263574fa58c2f0a48348fa0d876be10/src%2Frt%2Frust_crate.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/96516e9ca263574fa58c2f0a48348fa0d876be10/src%2Frt%2Frust_crate.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate.cpp?ref=96516e9ca263574fa58c2f0a48348fa0d876be10", "patch": "@@ -16,11 +16,6 @@ rust_crate::get_activate_glue() const {\n   return (activate_glue_ty) ((uintptr_t)this + activate_glue_off);\n }\n \n-uintptr_t\n-rust_crate::get_exit_task_glue() const {\n-  return ((uintptr_t)this + exit_task_glue_off);\n-}\n-\n uintptr_t\n rust_crate::get_unwind_glue() const {\n   return ((uintptr_t)this + unwind_glue_off);"}, {"sha": "7a3ed513d666b964b9d4f49131a1a7e1c4db959f", "filename": "src/rt/rust_dom.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96516e9ca263574fa58c2f0a48348fa0d876be10/src%2Frt%2Frust_dom.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/96516e9ca263574fa58c2f0a48348fa0d876be10/src%2Frt%2Frust_dom.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_dom.cpp?ref=96516e9ca263574fa58c2f0a48348fa0d876be10", "patch": "@@ -263,7 +263,7 @@ rust_dom::start_main_loop() {\n \n     DLOG(this, dom, \"started domain loop\");\n     DLOG(this, dom, \"activate glue: \" PTR \", exit glue: \" PTR,\n-        root_crate->get_activate_glue(), root_crate->get_exit_task_glue());\n+        root_crate->get_activate_glue(), rust_new_exit_task_glue);\n \n     while (number_of_live_tasks() > 0) {\n         A(this, kernel->is_deadlocked() == false, \"deadlock\");"}, {"sha": "e743455b4dcf3fe832ac404ca3ee2c81eee630dc", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96516e9ca263574fa58c2f0a48348fa0d876be10/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/96516e9ca263574fa58c2f0a48348fa0d876be10/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=96516e9ca263574fa58c2f0a48348fa0d876be10", "patch": "@@ -251,7 +251,6 @@ class rust_crate {\n     uintptr_t get_yield_glue() const;\n     uintptr_t get_unwind_glue() const;\n     uintptr_t get_gc_glue() const;\n-    uintptr_t get_exit_task_glue() const;\n \n     struct mem_area\n     {\n@@ -358,6 +357,8 @@ rust_crate_cache : public dom_owned<rust_crate_cache>,\n     void flush();\n };\n \n+extern \"C\" void rust_new_exit_task_glue();\n+\n #include \"rust_dwarf.h\"\n \n class"}, {"sha": "717d8b0c5f4dd23c3ec1756028b61a37e74fa8d6", "filename": "src/rt/test/rust_test_runtime.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96516e9ca263574fa58c2f0a48348fa0d876be10/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/96516e9ca263574fa58c2f0a48348fa0d876be10/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_runtime.cpp?ref=96516e9ca263574fa58c2f0a48348fa0d876be10", "patch": "@@ -53,7 +53,7 @@ rust_task_test::worker::run() {\n     rust_handle<rust_dom> *handle =\n         kernel->create_domain(crate, \"test\");\n     rust_dom *domain = handle->referent();\n-    domain->root_task->start(crate->get_exit_task_glue(),\n+    domain->root_task->start((uintptr_t)rust_new_exit_task_glue,\n                              (uintptr_t)&task_entry, (uintptr_t)NULL, 0);\n     domain->start_main_loop();\n     kernel->destroy_domain(domain);"}]}