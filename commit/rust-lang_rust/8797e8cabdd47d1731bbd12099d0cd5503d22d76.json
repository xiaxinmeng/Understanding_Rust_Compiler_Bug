{"sha": "8797e8cabdd47d1731bbd12099d0cd5503d22d76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3OTdlOGNhYmRkNDdkMTczMWJiZDEyMDk5ZDBjZDU1MDNkMjJkNzY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-31T06:50:44Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-06-04T21:43:14Z"}, "message": "Move `modern` calls inside `glob_adjust` and `reverse_glob_adjust`.", "tree": {"sha": "ac1a9e18eace5099559d8b95ca5223c73c42ad25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac1a9e18eace5099559d8b95ca5223c73c42ad25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8797e8cabdd47d1731bbd12099d0cd5503d22d76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8797e8cabdd47d1731bbd12099d0cd5503d22d76", "html_url": "https://github.com/rust-lang/rust/commit/8797e8cabdd47d1731bbd12099d0cd5503d22d76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8797e8cabdd47d1731bbd12099d0cd5503d22d76/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97c9437585edafb59dc24701578dc0f20756178c", "url": "https://api.github.com/repos/rust-lang/rust/commits/97c9437585edafb59dc24701578dc0f20756178c", "html_url": "https://github.com/rust-lang/rust/commit/97c9437585edafb59dc24701578dc0f20756178c"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "5f076d16bed5e84a2fa5569a6c594e7af0b31d3e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8797e8cabdd47d1731bbd12099d0cd5503d22d76/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8797e8cabdd47d1731bbd12099d0cd5503d22d76/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8797e8cabdd47d1731bbd12099d0cd5503d22d76", "patch": "@@ -4525,7 +4525,7 @@ impl<'a> Resolver<'a> {\n                 let mut ident = ident;\n                 if ident.span.glob_adjust(\n                     module.expansion,\n-                    binding.span.ctxt().modern(),\n+                    binding.span,\n                 ).is_none() {\n                     continue\n                 }"}, {"sha": "d24d8f8c2b5b11ed23d09e2828079271a99275af", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8797e8cabdd47d1731bbd12099d0cd5503d22d76/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8797e8cabdd47d1731bbd12099d0cd5503d22d76/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=8797e8cabdd47d1731bbd12099d0cd5503d22d76", "patch": "@@ -388,7 +388,7 @@ impl<'a> Resolver<'a> {\n                 None => return Err((Undetermined, Weak::Yes)),\n             };\n             let (orig_current_module, mut ident) = (self.current_module, ident.modern());\n-            match ident.span.glob_adjust(module.expansion, glob_import.span.ctxt().modern()) {\n+            match ident.span.glob_adjust(module.expansion, glob_import.span) {\n                 Some(Some(def)) => self.current_module = self.macro_def_scope(def),\n                 Some(None) => {}\n                 None => continue,\n@@ -605,8 +605,7 @@ impl<'a> Resolver<'a> {\n         // Define `binding` in `module`s glob importers.\n         for directive in module.glob_importers.borrow_mut().iter() {\n             let mut ident = ident.modern();\n-            let scope = match ident.span.reverse_glob_adjust(module.expansion,\n-                                                             directive.span.ctxt().modern()) {\n+            let scope = match ident.span.reverse_glob_adjust(module.expansion, directive.span) {\n                 Some(Some(def)) => self.macro_def_scope(def),\n                 Some(None) => directive.parent_scope.module,\n                 None => continue,\n@@ -1359,8 +1358,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             resolution.borrow().binding().map(|binding| (ident, binding))\n         }).collect::<Vec<_>>();\n         for ((mut ident, ns), binding) in bindings {\n-            let scope = match ident.span.reverse_glob_adjust(module.expansion,\n-                                                             directive.span.ctxt().modern()) {\n+            let scope = match ident.span.reverse_glob_adjust(module.expansion, directive.span) {\n                 Some(Some(def)) => self.macro_def_scope(def),\n                 Some(None) => self.current_module,\n                 None => continue,"}, {"sha": "39a7124c756d47d1dfed650441d460e95a1e8765", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8797e8cabdd47d1731bbd12099d0cd5503d22d76/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8797e8cabdd47d1731bbd12099d0cd5503d22d76/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=8797e8cabdd47d1731bbd12099d0cd5503d22d76", "patch": "@@ -463,9 +463,9 @@ impl SyntaxContext {\n     /// ```\n     /// This returns `None` if the context cannot be glob-adjusted.\n     /// Otherwise, it returns the scope to use when privacy checking (see `adjust` for details).\n-    pub fn glob_adjust(&mut self, expansion: Mark, mut glob_ctxt: SyntaxContext)\n-                       -> Option<Option<Mark>> {\n+    pub fn glob_adjust(&mut self, expansion: Mark, glob_span: Span) -> Option<Option<Mark>> {\n         let mut scope = None;\n+        let mut glob_ctxt = glob_span.ctxt().modern();\n         while !expansion.outer_is_descendant_of(glob_ctxt) {\n             scope = Some(glob_ctxt.remove_mark());\n             if self.remove_mark() != scope.unwrap() {\n@@ -485,12 +485,13 @@ impl SyntaxContext {\n     ///     assert!(self.glob_adjust(expansion, glob_ctxt) == Some(privacy_checking_scope));\n     /// }\n     /// ```\n-    pub fn reverse_glob_adjust(&mut self, expansion: Mark, mut glob_ctxt: SyntaxContext)\n+    pub fn reverse_glob_adjust(&mut self, expansion: Mark, glob_span: Span)\n                                -> Option<Option<Mark>> {\n         if self.adjust(expansion).is_some() {\n             return None;\n         }\n \n+        let mut glob_ctxt = glob_span.ctxt().modern();\n         let mut marks = Vec::new();\n         while !expansion.outer_is_descendant_of(glob_ctxt) {\n             marks.push(glob_ctxt.remove_mark());"}, {"sha": "9bab95efd1bb7dc1e72757211a595e91002597c4", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8797e8cabdd47d1731bbd12099d0cd5503d22d76/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8797e8cabdd47d1731bbd12099d0cd5503d22d76/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=8797e8cabdd47d1731bbd12099d0cd5503d22d76", "patch": "@@ -535,19 +535,18 @@ impl Span {\n     }\n \n     #[inline]\n-    pub fn glob_adjust(&mut self, expansion: Mark, glob_ctxt: SyntaxContext)\n-                       -> Option<Option<Mark>> {\n+    pub fn glob_adjust(&mut self, expansion: Mark, glob_span: Span) -> Option<Option<Mark>> {\n         let mut span = self.data();\n-        let mark = span.ctxt.glob_adjust(expansion, glob_ctxt);\n+        let mark = span.ctxt.glob_adjust(expansion, glob_span);\n         *self = Span::new(span.lo, span.hi, span.ctxt);\n         mark\n     }\n \n     #[inline]\n-    pub fn reverse_glob_adjust(&mut self, expansion: Mark, glob_ctxt: SyntaxContext)\n+    pub fn reverse_glob_adjust(&mut self, expansion: Mark, glob_span: Span)\n                                -> Option<Option<Mark>> {\n         let mut span = self.data();\n-        let mark = span.ctxt.reverse_glob_adjust(expansion, glob_ctxt);\n+        let mark = span.ctxt.reverse_glob_adjust(expansion, glob_span);\n         *self = Span::new(span.lo, span.hi, span.ctxt);\n         mark\n     }"}]}