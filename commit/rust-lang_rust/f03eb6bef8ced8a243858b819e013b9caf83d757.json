{"sha": "f03eb6bef8ced8a243858b819e013b9caf83d757", "node_id": "C_kwDOAAsO6NoAKGYwM2ViNmJlZjhjZWQ4YTI0Mzg1OGI4MTllMDEzYjljYWY4M2Q3NTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-02T18:46:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-02T18:46:27Z"}, "message": "Auto merge of #89341 - audunhalland:derive-type-params-with-bound-generic-params, r=jackh726\n\nDeriving: Include bound generic params in type parameters for where clause\n\nFixes #89188.\n\nThe `derive` macro ignored the `for<'s>` needed with the `Fn` trait in that code example.\n\nedit: I'm unsure if this might cause regressions. I'm not an experienced compiler developer so I'm not used to thinking about unwanted side effects code changes like this might have.", "tree": {"sha": "3d7a5598b782533000f0c026859f6a987a3d9041", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d7a5598b782533000f0c026859f6a987a3d9041"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f03eb6bef8ced8a243858b819e013b9caf83d757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f03eb6bef8ced8a243858b819e013b9caf83d757", "html_url": "https://github.com/rust-lang/rust/commit/f03eb6bef8ced8a243858b819e013b9caf83d757", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f03eb6bef8ced8a243858b819e013b9caf83d757/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "url": "https://api.github.com/repos/rust-lang/rust/commits/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "html_url": "https://github.com/rust-lang/rust/commit/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40"}, {"sha": "87241e909933b30bb31af4edf58d1a331589df3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/87241e909933b30bb31af4edf58d1a331589df3c", "html_url": "https://github.com/rust-lang/rust/commit/87241e909933b30bb31af4edf58d1a331589df3c"}], "stats": {"total": 89, "additions": 79, "deletions": 10}, "files": [{"sha": "0f88995846cc18a31e021a3827c20dbda0649f54", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f03eb6bef8ced8a243858b819e013b9caf83d757/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03eb6bef8ced8a243858b819e013b9caf83d757/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=f03eb6bef8ced8a243858b819e013b9caf83d757", "patch": "@@ -332,44 +332,74 @@ pub fn combine_substructure(\n     RefCell::new(f)\n }\n \n+struct TypeParameter {\n+    bound_generic_params: Vec<ast::GenericParam>,\n+    ty: P<ast::Ty>,\n+}\n+\n /// This method helps to extract all the type parameters referenced from a\n /// type. For a type parameter `<T>`, it looks for either a `TyPath` that\n /// is not global and starts with `T`, or a `TyQPath`.\n+/// Also include bound generic params from the input type.\n fn find_type_parameters(\n     ty: &ast::Ty,\n     ty_param_names: &[Symbol],\n     cx: &ExtCtxt<'_>,\n-) -> Vec<P<ast::Ty>> {\n+) -> Vec<TypeParameter> {\n     use rustc_ast::visit;\n \n     struct Visitor<'a, 'b> {\n         cx: &'a ExtCtxt<'b>,\n         ty_param_names: &'a [Symbol],\n-        types: Vec<P<ast::Ty>>,\n+        bound_generic_params_stack: Vec<ast::GenericParam>,\n+        type_params: Vec<TypeParameter>,\n     }\n \n     impl<'a, 'b> visit::Visitor<'a> for Visitor<'a, 'b> {\n         fn visit_ty(&mut self, ty: &'a ast::Ty) {\n             if let ast::TyKind::Path(_, ref path) = ty.kind {\n                 if let Some(segment) = path.segments.first() {\n                     if self.ty_param_names.contains(&segment.ident.name) {\n-                        self.types.push(P(ty.clone()));\n+                        self.type_params.push(TypeParameter {\n+                            bound_generic_params: self.bound_generic_params_stack.clone(),\n+                            ty: P(ty.clone()),\n+                        });\n                     }\n                 }\n             }\n \n             visit::walk_ty(self, ty)\n         }\n \n+        // Place bound generic params on a stack, to extract them when a type is encountered.\n+        fn visit_poly_trait_ref(\n+            &mut self,\n+            trait_ref: &'a ast::PolyTraitRef,\n+            modifier: &'a ast::TraitBoundModifier,\n+        ) {\n+            let stack_len = self.bound_generic_params_stack.len();\n+            self.bound_generic_params_stack\n+                .extend(trait_ref.bound_generic_params.clone().into_iter());\n+\n+            visit::walk_poly_trait_ref(self, trait_ref, modifier);\n+\n+            self.bound_generic_params_stack.truncate(stack_len);\n+        }\n+\n         fn visit_mac_call(&mut self, mac: &ast::MacCall) {\n             self.cx.span_err(mac.span(), \"`derive` cannot be used on items with type macros\");\n         }\n     }\n \n-    let mut visitor = Visitor { cx, ty_param_names, types: Vec::new() };\n+    let mut visitor = Visitor {\n+        cx,\n+        ty_param_names,\n+        bound_generic_params_stack: Vec::new(),\n+        type_params: Vec::new(),\n+    };\n     visit::Visitor::visit_ty(&mut visitor, ty);\n \n-    visitor.types\n+    visitor.type_params\n }\n \n impl<'a> TraitDef<'a> {\n@@ -617,11 +647,11 @@ impl<'a> TraitDef<'a> {\n                     ty_params.map(|ty_param| ty_param.ident.name).collect();\n \n                 for field_ty in field_tys {\n-                    let tys = find_type_parameters(&field_ty, &ty_param_names, cx);\n+                    let field_ty_params = find_type_parameters(&field_ty, &ty_param_names, cx);\n \n-                    for ty in tys {\n+                    for field_ty_param in field_ty_params {\n                         // if we have already handled this type, skip it\n-                        if let ast::TyKind::Path(_, ref p) = ty.kind {\n+                        if let ast::TyKind::Path(_, ref p) = field_ty_param.ty.kind {\n                             if p.segments.len() == 1\n                                 && ty_param_names.contains(&p.segments[0].ident.name)\n                             {\n@@ -639,8 +669,8 @@ impl<'a> TraitDef<'a> {\n \n                         let predicate = ast::WhereBoundPredicate {\n                             span: self.span,\n-                            bound_generic_params: Vec::new(),\n-                            bounded_ty: ty,\n+                            bound_generic_params: field_ty_param.bound_generic_params,\n+                            bounded_ty: field_ty_param.ty,\n                             bounds,\n                         };\n "}, {"sha": "abd85a616a4add0f50ba7ab5432a261ec5be6b34", "filename": "src/test/ui/deriving/issue-89188-gat-hrtb.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f03eb6bef8ced8a243858b819e013b9caf83d757/src%2Ftest%2Fui%2Fderiving%2Fissue-89188-gat-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03eb6bef8ced8a243858b819e013b9caf83d757/src%2Ftest%2Fui%2Fderiving%2Fissue-89188-gat-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fissue-89188-gat-hrtb.rs?ref=f03eb6bef8ced8a243858b819e013b9caf83d757", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+trait CallWithShim: Sized {\n+    type Shim<'s>\n+    where\n+        Self: 's;\n+}\n+\n+#[derive(Clone)]\n+struct ShimMethod<T: CallWithShim + 'static>(pub &'static dyn for<'s> Fn(&'s mut T::Shim<'s>));\n+\n+trait CallWithShim2: Sized {\n+    type Shim<T>;\n+}\n+\n+struct S<'s>(&'s ());\n+\n+#[derive(Clone)]\n+struct ShimMethod2<T: CallWithShim2 + 'static>(pub &'static dyn for<'s> Fn(&'s mut T::Shim<S<'s>>));\n+\n+trait Trait<'s, 't, 'u> {}\n+\n+#[derive(Clone)]\n+struct ShimMethod3<T: CallWithShim2 + 'static>(\n+    pub  &'static dyn for<'s> Fn(\n+        &'s mut T::Shim<dyn for<'t> Fn(&'s mut T::Shim<dyn for<'u> Trait<'s, 't, 'u>>)>,\n+    ),\n+);\n+\n+trait Trait2 {\n+    type As;\n+}\n+\n+#[derive(Clone)]\n+struct ShimMethod4<T: Trait2 + 'static>(pub &'static dyn for<'s> Fn(&'s mut T::As));\n+\n+pub fn main() {}"}]}