{"sha": "d8074e65b02812e96cd5ed987795f5e8cfcef78d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MDc0ZTY1YjAyODEyZTk2Y2Q1ZWQ5ODc3OTVmNWU4Y2ZjZWY3OGQ=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-09-02T19:29:41Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-09-03T00:50:43Z"}, "message": "Use proper span for break and continue labels\n\nFixes #28109", "tree": {"sha": "fc579b6df045fd1d3888120eda4c9cddc53a57b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc579b6df045fd1d3888120eda4c9cddc53a57b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8074e65b02812e96cd5ed987795f5e8cfcef78d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8074e65b02812e96cd5ed987795f5e8cfcef78d", "html_url": "https://github.com/rust-lang/rust/commit/d8074e65b02812e96cd5ed987795f5e8cfcef78d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8074e65b02812e96cd5ed987795f5e8cfcef78d/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd138dc4475fa90b007969d0a4e00f230be777cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd138dc4475fa90b007969d0a4e00f230be777cf", "html_url": "https://github.com/rust-lang/rust/commit/cd138dc4475fa90b007969d0a4e00f230be777cf"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "3f6385ad82cc4f9d0c845a934d3c2cc1cf866cd8", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8074e65b02812e96cd5ed987795f5e8cfcef78d/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8074e65b02812e96cd5ed987795f5e8cfcef78d/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=d8074e65b02812e96cd5ed987795f5e8cfcef78d", "patch": "@@ -284,15 +284,15 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             }\n \n             hir::ExprBreak(label) => {\n-                let loop_scope = self.find_scope(expr, label);\n+                let loop_scope = self.find_scope(expr, label.map(|l| l.node));\n                 let b = self.add_ast_node(expr.id, &[pred]);\n                 self.add_exiting_edge(expr, b,\n                                       loop_scope, loop_scope.break_index);\n                 self.add_unreachable_node()\n             }\n \n             hir::ExprAgain(label) => {\n-                let loop_scope = self.find_scope(expr, label);\n+                let loop_scope = self.find_scope(expr, label.map(|l| l.node));\n                 let a = self.add_ast_node(expr.id, &[pred]);\n                 self.add_exiting_edge(expr, a,\n                                       loop_scope, loop_scope.continue_index);"}, {"sha": "561760b29f19ea0d5e0d8e8b8519b5e0811e904e", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8074e65b02812e96cd5ed987795f5e8cfcef78d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8074e65b02812e96cd5ed987795f5e8cfcef78d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=d8074e65b02812e96cd5ed987795f5e8cfcef78d", "patch": "@@ -1049,7 +1049,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n           hir::ExprBreak(opt_label) => {\n               // Find which label this break jumps to\n-              let sc = self.find_loop_scope(opt_label, expr.id, expr.span);\n+              let sc = self.find_loop_scope(opt_label.map(|l| l.node), expr.id, expr.span);\n \n               // Now that we know the label we're going to,\n               // look it up in the break loop nodes table\n@@ -1063,7 +1063,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n           hir::ExprAgain(opt_label) => {\n               // Find which label this expr continues to\n-              let sc = self.find_loop_scope(opt_label, expr.id, expr.span);\n+              let sc = self.find_loop_scope(opt_label.map(|l| l.node), expr.id, expr.span);\n \n               // Now that we know the label we're going to,\n               // look it up in the continue loop nodes table"}, {"sha": "5f6bf939fb2a8ec0103e0ec13b202d091ff12f5a", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8074e65b02812e96cd5ed987795f5e8cfcef78d/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8074e65b02812e96cd5ed987795f5e8cfcef78d/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=d8074e65b02812e96cd5ed987795f5e8cfcef78d", "patch": "@@ -277,8 +277,8 @@ mod svh_visitor {\n             ExprRange(..)            => SawExprRange,\n             ExprPath(ref qself, _)   => SawExprPath(qself.as_ref().map(|q| q.position)),\n             ExprAddrOf(m, _)         => SawExprAddrOf(m),\n-            ExprBreak(id)            => SawExprBreak(id.map(|id| id.name.as_str())),\n-            ExprAgain(id)            => SawExprAgain(id.map(|id| id.name.as_str())),\n+            ExprBreak(id)            => SawExprBreak(id.map(|id| id.node.name.as_str())),\n+            ExprAgain(id)            => SawExprAgain(id.map(|id| id.node.name.as_str())),\n             ExprRet(..)              => SawExprRet,\n             ExprInlineAsm(ref asm)   => SawExprInlineAsm(asm),\n             ExprStruct(..)           => SawExprStruct,"}, {"sha": "da9bae62d047dccd537045e672118725f5667741", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d8074e65b02812e96cd5ed987795f5e8cfcef78d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8074e65b02812e96cd5ed987795f5e8cfcef78d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d8074e65b02812e96cd5ed987795f5e8cfcef78d", "patch": "@@ -3759,12 +3759,12 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n \n             ExprBreak(Some(label)) | ExprAgain(Some(label)) => {\n-                let renamed = mtwt::resolve(label);\n+                let renamed = mtwt::resolve(label.node);\n                 match self.search_label(renamed) {\n                     None => {\n                         resolve_error(self,\n-                                      expr.span,\n-                                      ResolutionError::UndeclaredLabel(&label.name.as_str()))\n+                                      label.span,\n+                                      ResolutionError::UndeclaredLabel(&label.node.name.as_str()))\n                     }\n                     Some(DlDef(def @ DefLabel(_))) => {\n                         // Since this def is a label, it is never read."}, {"sha": "83644beae22d2e48debfe817a3398600595ccb93", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8074e65b02812e96cd5ed987795f5e8cfcef78d/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8074e65b02812e96cd5ed987795f5e8cfcef78d/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=d8074e65b02812e96cd5ed987795f5e8cfcef78d", "patch": "@@ -937,10 +937,10 @@ fn trans_rvalue_stmt_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             trans_into(bcx, &**e, Ignore)\n         }\n         hir::ExprBreak(label_opt) => {\n-            controlflow::trans_break(bcx, expr, label_opt)\n+            controlflow::trans_break(bcx, expr, label_opt.map(|l| l.node))\n         }\n         hir::ExprAgain(label_opt) => {\n-            controlflow::trans_cont(bcx, expr, label_opt)\n+            controlflow::trans_cont(bcx, expr, label_opt.map(|l| l.node))\n         }\n         hir::ExprRet(ref ex) => {\n             // Check to see if the return expression itself is reachable."}, {"sha": "049d45b6e9ee3908353e716f51706042ccecae78", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8074e65b02812e96cd5ed987795f5e8cfcef78d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8074e65b02812e96cd5ed987795f5e8cfcef78d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d8074e65b02812e96cd5ed987795f5e8cfcef78d", "patch": "@@ -891,9 +891,9 @@ pub enum Expr_ {\n     /// A referencing operation (`&a` or `&mut a`)\n     ExprAddrOf(Mutability, P<Expr>),\n     /// A `break`, with an optional label to break\n-    ExprBreak(Option<Ident>),\n+    ExprBreak(Option<SpannedIdent>),\n     /// A `continue`, with an optional label\n-    ExprAgain(Option<Ident>),\n+    ExprAgain(Option<SpannedIdent>),\n     /// A `return`, with an optional value to be returned\n     ExprRet(Option<P<Expr>>),\n "}, {"sha": "0cfddc9857c67199d13afd9d739d99bd9e78ce8a", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d8074e65b02812e96cd5ed987795f5e8cfcef78d/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8074e65b02812e96cd5ed987795f5e8cfcef78d/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=d8074e65b02812e96cd5ed987795f5e8cfcef78d", "patch": "@@ -1299,8 +1299,14 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n                 });\n                 ExprPath(qself, folder.fold_path(path))\n             }\n-            ExprBreak(opt_ident) => ExprBreak(opt_ident.map(|x| folder.fold_ident(x))),\n-            ExprAgain(opt_ident) => ExprAgain(opt_ident.map(|x| folder.fold_ident(x))),\n+            ExprBreak(opt_ident) => ExprBreak(opt_ident.map(|label|\n+                respan(folder.new_span(label.span),\n+                       folder.fold_ident(label.node)))\n+            ),\n+            ExprAgain(opt_ident) => ExprAgain(opt_ident.map(|label|\n+                respan(folder.new_span(label.span),\n+                       folder.fold_ident(label.node)))\n+            ),\n             ExprRet(e) => ExprRet(e.map(|x| folder.fold_expr(x))),\n             ExprInlineAsm(InlineAsm {\n                 inputs,"}, {"sha": "33f784b72bb442b6f7473217840a0aff899b3910", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d8074e65b02812e96cd5ed987795f5e8cfcef78d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8074e65b02812e96cd5ed987795f5e8cfcef78d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d8074e65b02812e96cd5ed987795f5e8cfcef78d", "patch": "@@ -2143,9 +2143,12 @@ impl<'a> Parser<'a> {\n                 }\n                 if try!(self.eat_keyword(keywords::Continue) ){\n                     let ex = if self.token.is_lifetime() {\n-                        let lifetime = self.get_lifetime();\n+                        let ex = ExprAgain(Some(Spanned{\n+                            node: self.get_lifetime(),\n+                            span: self.span\n+                        }));\n                         try!(self.bump());\n-                        ExprAgain(Some(lifetime))\n+                        ex\n                     } else {\n                         ExprAgain(None)\n                     };\n@@ -2161,7 +2164,6 @@ impl<'a> Parser<'a> {\n                         UnsafeBlock(ast::UserProvided));\n                 }\n                 if try!(self.eat_keyword(keywords::Return) ){\n-                    // RETURN expression\n                     if self.token.can_begin_expr() {\n                         let e = try!(self.parse_expr_nopanic());\n                         hi = e.span.hi;\n@@ -2170,11 +2172,12 @@ impl<'a> Parser<'a> {\n                         ex = ExprRet(None);\n                     }\n                 } else if try!(self.eat_keyword(keywords::Break) ){\n-                    // BREAK expression\n                     if self.token.is_lifetime() {\n-                        let lifetime = self.get_lifetime();\n+                        ex = ExprBreak(Some(Spanned {\n+                            node: self.get_lifetime(),\n+                            span: self.span\n+                        }));\n                         try!(self.bump());\n-                        ex = ExprBreak(Some(lifetime));\n                     } else {\n                         ex = ExprBreak(None);\n                     }"}, {"sha": "1dd43bb19ccb947c065044af8116dca676fd9eb7", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8074e65b02812e96cd5ed987795f5e8cfcef78d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8074e65b02812e96cd5ed987795f5e8cfcef78d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d8074e65b02812e96cd5ed987795f5e8cfcef78d", "patch": "@@ -1911,15 +1911,15 @@ impl<'a> State<'a> {\n                 try!(word(&mut self.s, \"break\"));\n                 try!(space(&mut self.s));\n                 if let Some(ident) = opt_ident {\n-                    try!(self.print_ident(ident));\n+                    try!(self.print_ident(ident.node));\n                     try!(space(&mut self.s));\n                 }\n             }\n             ast::ExprAgain(opt_ident) => {\n                 try!(word(&mut self.s, \"continue\"));\n                 try!(space(&mut self.s));\n                 if let Some(ident) = opt_ident {\n-                    try!(self.print_ident(ident));\n+                    try!(self.print_ident(ident.node));\n                     try!(space(&mut self.s))\n                 }\n             }"}]}