{"sha": "da41920919ef4164c91541b8da501e36e9544c0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNDE5MjA5MTllZjQxNjRjOTE1NDFiOGRhNTAxZTM2ZTk1NDRjMGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-21T07:38:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-21T07:38:55Z"}, "message": "Auto merge of #33768 - Manishearth:rollup, r=Manishearth\n\nRollup of 7 pull requests\n\n- Successful merges: #33578, #33679, #33743, #33746, #33747, #33750, #33757\n- Failed merges:", "tree": {"sha": "a2520338eb518efcc17a1d731081ab6934805591", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2520338eb518efcc17a1d731081ab6934805591"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da41920919ef4164c91541b8da501e36e9544c0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da41920919ef4164c91541b8da501e36e9544c0f", "html_url": "https://github.com/rust-lang/rust/commit/da41920919ef4164c91541b8da501e36e9544c0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da41920919ef4164c91541b8da501e36e9544c0f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91e907345c4258ff9787d70a4b8c56cb691a64b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/91e907345c4258ff9787d70a4b8c56cb691a64b6", "html_url": "https://github.com/rust-lang/rust/commit/91e907345c4258ff9787d70a4b8c56cb691a64b6"}, {"sha": "61b9be776e7e5dd87c4eda7be29f0166287c139d", "url": "https://api.github.com/repos/rust-lang/rust/commits/61b9be776e7e5dd87c4eda7be29f0166287c139d", "html_url": "https://github.com/rust-lang/rust/commit/61b9be776e7e5dd87c4eda7be29f0166287c139d"}], "stats": {"total": 120, "additions": 81, "deletions": 39}, "files": [{"sha": "f445bed015c00d85c32e8a5a4d6b4e0d992ae7e7", "filename": "src/doc/book/ownership.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41920919ef4164c91541b8da501e36e9544c0f/src%2Fdoc%2Fbook%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/da41920919ef4164c91541b8da501e36e9544c0f/src%2Fdoc%2Fbook%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fownership.md?ref=da41920919ef4164c91541b8da501e36e9544c0f", "patch": "@@ -155,7 +155,7 @@ vector object and its data live in separate memory regions instead of being a\n single contiguous memory allocation (due to reasons we will not go into at\n this point of time). These two parts of the vector (the one on the stack and\n one on the heap) must agree with each other at all times with regards to\n-things like the length, capacity etc.\n+things like the length, capacity, etc.\n \n When we move `v` to `v2`, Rust actually does a bitwise copy of the vector\n object `v` into the stack allocation represented by `v2`. This shallow copy"}, {"sha": "a1f6a065a252bd93d6dabd58e4064b03be525702", "filename": "src/doc/book/the-stack-and-the-heap.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41920919ef4164c91541b8da501e36e9544c0f/src%2Fdoc%2Fbook%2Fthe-stack-and-the-heap.md", "raw_url": "https://github.com/rust-lang/rust/raw/da41920919ef4164c91541b8da501e36e9544c0f/src%2Fdoc%2Fbook%2Fthe-stack-and-the-heap.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fthe-stack-and-the-heap.md?ref=da41920919ef4164c91541b8da501e36e9544c0f", "patch": "@@ -175,6 +175,7 @@ And then `bold()` calls `italic()`:\n | **2**   | **b**|**100**|\n | **1**   | **a**| **5** |\n | 0       | x    | 42    |\n+\n Whew! Our stack is growing tall.\n \n After `italic()` is over, its frame is deallocated, leaving only `bold()` and\n@@ -260,8 +261,7 @@ layout of a program which has been running for a while now:\n | (2<sup>30</sup>) - 3 |      |                        |\n | (2<sup>30</sup>) - 4 |      | 42                     |\n | ...                  | ...  | ...                    |\n-| 3                    | y    | \u2192 (2<sup>30</sup>) - 4 |\n-| 2                    | y    | 42                     |\n+| 2                    | z    | \u2192 (2<sup>30</sup>) - 4 |\n | 1                    | y    | 42                     |\n | 0                    | x    | \u2192 (2<sup>30</sup>) - 1 |\n "}, {"sha": "a23470d39fa091392200fd74fe109ea099ca2c0b", "filename": "src/doc/book/unsized-types.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da41920919ef4164c91541b8da501e36e9544c0f/src%2Fdoc%2Fbook%2Funsized-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/da41920919ef4164c91541b8da501e36e9544c0f/src%2Fdoc%2Fbook%2Funsized-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Funsized-types.md?ref=da41920919ef4164c91541b8da501e36e9544c0f", "patch": "@@ -47,14 +47,15 @@ pointers, can use this `impl`.\n # ?Sized\n \n If you want to write a function that accepts a dynamically sized type, you\n-can use the special bound, `?Sized`:\n+can use the special bound syntax, `?Sized`:\n \n ```rust\n struct Foo<T: ?Sized> {\n     f: T,\n }\n ```\n \n-This `?`, read as \u201cT may be `Sized`\u201d,  means that this bound is special: it\n-lets us match more kinds, not less. It\u2019s almost like every `T` implicitly has\n-`T: Sized`, and the `?` undoes this default.\n+This `?Sized`, read as \u201cT may or may not be `Sized`\u201d, which allows us to match\n+both sized and unsized types. All generic type parameters implicitly\n+have the `Sized` bound, so the `?Sized` can be used to opt-out of the implicit\n+bound."}, {"sha": "6321d5924d51ac14bf9277e4d301f9f4062085ea", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/da41920919ef4164c91541b8da501e36e9544c0f/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41920919ef4164c91541b8da501e36e9544c0f/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=da41920919ef4164c91541b8da501e36e9544c0f", "patch": "@@ -779,11 +779,10 @@ impl<T> [T] {\n         core_slice::SliceExt::binary_search_by_key(self, b, f)\n     }\n \n-    /// Sorts the slice, in place.\n-    ///\n     /// This is equivalent to `self.sort_by(|a, b| a.cmp(b))`.\n     ///\n-    /// This is a stable sort.\n+    /// This sort is stable and `O(n log n)` worst-case but allocates\n+    /// approximately `2 * n` where `n` is the length of `self`.\n     ///\n     /// # Examples\n     ///\n@@ -804,11 +803,9 @@ impl<T> [T] {\n     /// Sorts the slice, in place, using `key` to extract a key by which to\n     /// order the sort by.\n     ///\n-    /// This sort is `O(n log n)` worst-case and stable, but allocates\n+    /// This sort is stable and `O(n log n)` worst-case but allocates\n     /// approximately `2 * n`, where `n` is the length of `self`.\n     ///\n-    /// This is a stable sort.\n-    ///\n     /// # Examples\n     ///\n     /// ```rust\n@@ -828,7 +825,7 @@ impl<T> [T] {\n     /// Sorts the slice, in place, using `compare` to compare\n     /// elements.\n     ///\n-    /// This sort is `O(n log n)` worst-case and stable, but allocates\n+    /// This sort is stable and `O(n log n)` worst-case but allocates\n     /// approximately `2 * n`, where `n` is the length of `self`.\n     ///\n     /// # Examples"}, {"sha": "45aec9558feaf2415d09defdc1eb63a01af2feb5", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da41920919ef4164c91541b8da501e36e9544c0f/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41920919ef4164c91541b8da501e36e9544c0f/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=da41920919ef4164c91541b8da501e36e9544c0f", "patch": "@@ -1002,18 +1002,18 @@ operate on.\n This will cause an error:\n \n ```compile_fail\n-#![feature(simd)]\n+#![feature(repr_simd)]\n \n-#[simd]\n+#[repr(simd)]\n struct Bad;\n ```\n \n This will not:\n \n ```\n-#![feature(simd)]\n+#![feature(repr_simd)]\n \n-#[simd]\n+#[repr(simd)]\n struct Good(u32);\n ```\n \"##,"}, {"sha": "7357ff3abac131e96c76ffcc45d71863b67d6032", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 43, "deletions": 12, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/da41920919ef4164c91541b8da501e36e9544c0f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41920919ef4164c91541b8da501e36e9544c0f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=da41920919ef4164c91541b8da501e36e9544c0f", "patch": "@@ -1658,6 +1658,19 @@ fn document(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item) -> fmt::Re\n     Ok(())\n }\n \n+fn document_short(w: &mut fmt::Formatter, item: &clean::Item, link: AssocItemLink) -> fmt::Result {\n+    if let Some(s) = item.doc_value() {\n+        let markdown = if s.contains('\\n') {\n+            format!(\"{} [Read more]({})\",\n+                    &plain_summary_line(Some(s)), naive_assoc_href(item, link))\n+        } else {\n+            format!(\"{}\", &plain_summary_line(Some(s)))\n+        };\n+        write!(w, \"<div class='docblock'>{}</div>\", Markdown(&markdown))?;\n+    }\n+    Ok(())\n+}\n+\n fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                item: &clean::Item, items: &[clean::Item]) -> fmt::Result {\n     document(w, cx, item)?;\n@@ -2555,8 +2568,9 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n     }\n \n     fn doctraititem(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item,\n-                    link: AssocItemLink, render_static: bool, is_default_item: bool,\n-                    outer_version: Option<&str>) -> fmt::Result {\n+                    link: AssocItemLink, render_static: bool,\n+                    is_default_item: bool, outer_version: Option<&str>,\n+                    trait_: Option<&clean::Trait>) -> fmt::Result {\n         let shortty = shortty(item);\n         let name = item.name.as_ref().unwrap();\n \n@@ -2607,16 +2621,35 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             _ => panic!(\"can't make docs for trait item with name {:?}\", item.name)\n         }\n \n-        if !is_default_item && (!is_static || render_static) {\n-            document(w, cx, item)\n-        } else {\n-            Ok(())\n+        if !is_static || render_static {\n+            if !is_default_item {\n+\n+                if item.doc_value().is_some() {\n+                    document(w, cx, item)?;\n+                } else {\n+                    // In case the item isn't documented,\n+                    // provide short documentation from the trait\n+                    if let Some(t) = trait_ {\n+                        if let Some(it) = t.items.iter()\n+                                           .find(|i| i.name == item.name) {\n+                            document_short(w, it, link)?;\n+                        }\n+                    }\n+                }\n+            } else {\n+                document_short(w, item, link)?;\n+            }\n         }\n+        Ok(())\n     }\n \n+    let traits = &cache().traits;\n+    let trait_ = i.trait_did().and_then(|did| traits.get(&did));\n+\n     write!(w, \"<div class='impl-items'>\")?;\n     for trait_item in &i.inner_impl().items {\n-        doctraititem(w, cx, trait_item, link, render_header, false, outer_version)?;\n+        doctraititem(w, cx, trait_item, link, render_header,\n+                     false, outer_version, trait_)?;\n     }\n \n     fn render_default_items(w: &mut fmt::Formatter,\n@@ -2634,17 +2667,15 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             let assoc_link = AssocItemLink::GotoSource(did, &i.provided_trait_methods);\n \n             doctraititem(w, cx, trait_item, assoc_link, render_static, true,\n-                         outer_version)?;\n+                         outer_version, None)?;\n         }\n         Ok(())\n     }\n \n     // If we've implemented a trait, then also emit documentation for all\n     // default items which weren't overridden in the implementation block.\n-    if let Some(did) = i.trait_did() {\n-        if let Some(t) = cache().traits.get(&did) {\n-            render_default_items(w, cx, t, &i.inner_impl(), render_header, outer_version)?;\n-        }\n+    if let Some(t) = trait_ {\n+        render_default_items(w, cx, t, &i.inner_impl(), render_header, outer_version)?;\n     }\n     write!(w, \"</div>\")?;\n     Ok(())"}, {"sha": "e9ea465cc9993654da5437284f4546397b55017f", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da41920919ef4164c91541b8da501e36e9544c0f/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41920919ef4164c91541b8da501e36e9544c0f/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=da41920919ef4164c91541b8da501e36e9544c0f", "patch": "@@ -101,7 +101,7 @@ unsafe impl Send for Once {}\n \n /// State yielded to the `call_once_force` method which can be used to query\n /// whether the `Once` was previously poisoned or not.\n-#[unstable(feature = \"once_poison\", issue = \"31688\")]\n+#[unstable(feature = \"once_poison\", issue = \"33577\")]\n pub struct OnceState {\n     poisoned: bool,\n }\n@@ -218,7 +218,7 @@ impl Once {\n     /// The closure `f` is yielded a structure which can be used to query the\n     /// state of this `Once` (whether initialization has previously panicked or\n     /// not).\n-    #[unstable(feature = \"once_poison\", issue = \"31688\")]\n+    #[unstable(feature = \"once_poison\", issue = \"33577\")]\n     pub fn call_once_force<F>(&'static self, f: F) where F: FnOnce(&OnceState) {\n         // same as above, just with a different parameter to `call_inner`.\n         if self.state.load(Ordering::SeqCst) == COMPLETE {\n@@ -360,7 +360,7 @@ impl OnceState {\n     ///\n     /// Once an initalization routine for a `Once` has panicked it will forever\n     /// indicate to future forced initialization routines that it is poisoned.\n-    #[unstable(feature = \"once_poison\", issue = \"31688\")]\n+    #[unstable(feature = \"once_poison\", issue = \"33577\")]\n     pub fn poisoned(&self) -> bool {\n         self.poisoned\n     }"}, {"sha": "befd3161ac48683c2681477cb961d3371c52aed8", "filename": "src/test/rustdoc/manual_impl.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/da41920919ef4164c91541b8da501e36e9544c0f/src%2Ftest%2Frustdoc%2Fmanual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41920919ef4164c91541b8da501e36e9544c0f/src%2Ftest%2Frustdoc%2Fmanual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmanual_impl.rs?ref=da41920919ef4164c91541b8da501e36e9544c0f", "patch": "@@ -21,13 +21,24 @@ pub trait T {\n     fn b_method(&self) -> usize {\n         self.a_method()\n     }\n+\n+    /// Docs associated with the trait c_method definition.\n+    ///\n+    /// There is another line\n+    fn c_method(&self) -> usize {\n+        self.a_method()\n+    }\n }\n \n // @has manual_impl/struct.S1.html '//*[@class=\"trait\"]' 'T'\n // @has  - '//*[@class=\"docblock\"]' 'Docs associated with the S1 trait implementation.'\n // @has  - '//*[@class=\"docblock\"]' 'Docs associated with the S1 trait a_method implementation.'\n // @!has - '//*[@class=\"docblock\"]' 'Docs associated with the trait a_method definition.'\n-// @!has - '//*[@class=\"docblock\"]' 'Docs associated with the trait b_method definition.'\n+// @has - '//*[@class=\"docblock\"]' 'Docs associated with the trait b_method definition.'\n+// @has - '//*[@class=\"docblock\"]' 'Docs associated with the trait b_method definition.'\n+// @has - '//*[@class=\"docblock\"]' 'Docs associated with the trait c_method definition.'\n+// @!has - '//*[@class=\"docblock\"]' 'There is another line'\n+// @has - '//*[@class=\"docblock\"]' 'Read more'\n pub struct S1(usize);\n \n /// Docs associated with the S1 trait implementation.\n@@ -41,9 +52,11 @@ impl T for S1 {\n // @has manual_impl/struct.S2.html '//*[@class=\"trait\"]' 'T'\n // @has  - '//*[@class=\"docblock\"]' 'Docs associated with the S2 trait implementation.'\n // @has  - '//*[@class=\"docblock\"]' 'Docs associated with the S2 trait a_method implementation.'\n-// @has  - '//*[@class=\"docblock\"]' 'Docs associated with the S2 trait b_method implementation.'\n+// @has  - '//*[@class=\"docblock\"]' 'Docs associated with the S2 trait c_method implementation.'\n // @!has - '//*[@class=\"docblock\"]' 'Docs associated with the trait a_method definition.'\n-// @!has - '//*[@class=\"docblock\"]' 'Docs associated with the trait b_method definition.'\n+// @!has - '//*[@class=\"docblock\"]' 'Docs associated with the trait c_method definition.'\n+// @has - '//*[@class=\"docblock\"]' 'Docs associated with the trait b_method definition.'\n+// @!has - '//*[@class=\"docblock\"]' 'Read more'\n pub struct S2(usize);\n \n /// Docs associated with the S2 trait implementation.\n@@ -53,16 +66,16 @@ impl T for S2 {\n         self.0\n     }\n \n-    /// Docs associated with the S2 trait b_method implementation.\n-    fn b_method(&self) -> usize {\n+    /// Docs associated with the S2 trait c_method implementation.\n+    fn c_method(&self) -> usize {\n         5\n     }\n }\n \n // @has manual_impl/struct.S3.html '//*[@class=\"trait\"]' 'T'\n // @has  - '//*[@class=\"docblock\"]' 'Docs associated with the S3 trait implementation.'\n // @has  - '//*[@class=\"docblock\"]' 'Docs associated with the S3 trait b_method implementation.'\n-// @!has - '//*[@class=\"docblock\"]' 'Docs associated with the trait a_method definition.'\n+// @has - '//*[@class=\"docblock\"]' 'Docs associated with the trait a_method definition.'\n pub struct S3(usize);\n \n /// Docs associated with the S3 trait implementation."}]}