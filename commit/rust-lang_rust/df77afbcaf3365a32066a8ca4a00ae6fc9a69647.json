{"sha": "df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "node_id": "C_kwDOAAsO6NoAKGRmNzdhZmJjYWYzMzY1YTMyMDY2YThjYTRhMDBhZTZmYzlhNjk2NDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-12T17:23:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-12T17:23:48Z"}, "message": "Auto merge of #112563 - matthiaskrgr:rollup-ebetrzi, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #112302 (Suggest using `ptr::null_mut` when user provided `ptr::null` to a function expecting `ptr::null_mut`)\n - #112416 (Fix debug ICE for extern type with where clauses)\n - #112527 (Add windows_sys type definitions for ARM32 manually)\n - #112546 (new solver: extend assert to other aliases)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1d88c226fa8e26cb089a7f56d6b92e190aa27de3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d88c226fa8e26cb089a7f56d6b92e190aa27de3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "html_url": "https://github.com/rust-lang/rust/commit/df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b963a57205e548e8538a8182b1c273ea75007614", "url": "https://api.github.com/repos/rust-lang/rust/commits/b963a57205e548e8538a8182b1c273ea75007614", "html_url": "https://github.com/rust-lang/rust/commit/b963a57205e548e8538a8182b1c273ea75007614"}, {"sha": "9cb785b9d3cb07ba52691ab4f8e6cb0a91d7d9aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb785b9d3cb07ba52691ab4f8e6cb0a91d7d9aa", "html_url": "https://github.com/rust-lang/rust/commit/9cb785b9d3cb07ba52691ab4f8e6cb0a91d7d9aa"}], "stats": {"total": 229, "additions": 219, "deletions": 10}, "files": [{"sha": "a0979bbda54521a1c6c609539d6a21d412ff10a0", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "patch": "@@ -364,7 +364,12 @@ impl<'a> AstValidator<'a> {\n         self.err_handler().emit_err(errors::BoundInContext { span, ctx });\n     }\n \n-    fn check_foreign_ty_genericless(&self, generics: &Generics, where_span: Span) {\n+    fn check_foreign_ty_genericless(\n+        &self,\n+        generics: &Generics,\n+        before_where_clause: &TyAliasWhereClause,\n+        after_where_clause: &TyAliasWhereClause,\n+    ) {\n         let cannot_have = |span, descr, remove_descr| {\n             self.err_handler().emit_err(errors::ExternTypesCannotHave {\n                 span,\n@@ -378,9 +383,14 @@ impl<'a> AstValidator<'a> {\n             cannot_have(generics.span, \"generic parameters\", \"generic parameters\");\n         }\n \n-        if !generics.where_clause.predicates.is_empty() {\n-            cannot_have(where_span, \"`where` clauses\", \"`where` clause\");\n-        }\n+        let check_where_clause = |where_clause: &TyAliasWhereClause| {\n+            if let TyAliasWhereClause(true, where_clause_span) = where_clause {\n+                cannot_have(*where_clause_span, \"`where` clauses\", \"`where` clause\");\n+            }\n+        };\n+\n+        check_where_clause(before_where_clause);\n+        check_where_clause(after_where_clause);\n     }\n \n     fn check_foreign_kind_bodyless(&self, ident: Ident, kind: &str, body: Option<Span>) {\n@@ -1039,7 +1049,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.check_defaultness(fi.span, *defaultness);\n                 self.check_foreign_kind_bodyless(fi.ident, \"type\", ty.as_ref().map(|b| b.span));\n                 self.check_type_no_bounds(bounds, \"`extern` blocks\");\n-                self.check_foreign_ty_genericless(generics, where_clauses.0.1);\n+                self.check_foreign_ty_genericless(generics, &where_clauses.0, &where_clauses.1);\n                 self.check_foreign_item_ascii_only(fi.ident);\n             }\n             ForeignItemKind::Static(_, _, body) => {"}, {"sha": "c1c58db57648c47a9e74abd3d89ba8f1fb47090c", "filename": "compiler/rustc_hir_typeck/messages.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/compiler%2Frustc_hir_typeck%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/compiler%2Frustc_hir_typeck%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fmessages.ftl?ref=df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "patch": "@@ -89,6 +89,8 @@ hir_typeck_suggest_boxing_note = for more on the distinction between the stack a\n \n hir_typeck_suggest_boxing_when_appropriate = store this in the heap by calling `Box::new`\n \n+hir_typeck_suggest_ptr_null_mut = consider using `core::ptr::null_mut` instead\n+\n hir_typeck_union_pat_dotdot = `..` cannot be used in union patterns\n \n hir_typeck_union_pat_multiple_fields = union patterns should have exactly one field"}, {"sha": "6b4168d89446f33acb28692422e3241acf7eddca", "filename": "compiler/rustc_hir_typeck/src/errors.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs?ref=df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "patch": "@@ -298,6 +298,17 @@ pub enum SuggestBoxing {\n     },\n }\n \n+#[derive(Subdiagnostic)]\n+#[suggestion(\n+    hir_typeck_suggest_ptr_null_mut,\n+    applicability = \"maybe-incorrect\",\n+    code = \"core::ptr::null_mut()\"\n+)]\n+pub struct SuggestPtrNullMut {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(hir_typeck_no_associated_item, code = \"E0599\")]\n pub struct NoAssociatedItem {"}, {"sha": "4a3e28ffce95bf02c8f572a0573192e040d64fd0", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "patch": "@@ -1,4 +1,5 @@\n use crate::coercion::CoerceMany;\n+use crate::errors::SuggestPtrNullMut;\n use crate::fn_ctxt::arg_matrix::{ArgMatrix, Compatibility, Error, ExpectedIdx, ProvidedIdx};\n use crate::gather_locals::Declaration;\n use crate::method::MethodCallee;\n@@ -814,6 +815,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n             }\n \n+            self.suggest_ptr_null_mut(\n+                expected_ty,\n+                provided_ty,\n+                provided_args[*provided_idx],\n+                &mut err,\n+            );\n+\n             // Call out where the function is defined\n             self.label_fn_like(\n                 &mut err,\n@@ -1271,6 +1279,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n+    fn suggest_ptr_null_mut(\n+        &self,\n+        expected_ty: Ty<'tcx>,\n+        provided_ty: Ty<'tcx>,\n+        arg: &hir::Expr<'tcx>,\n+        err: &mut rustc_errors::DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n+    ) {\n+        if let ty::RawPtr(ty::TypeAndMut { mutbl: hir::Mutability::Mut, .. }) = expected_ty.kind()\n+            && let ty::RawPtr(ty::TypeAndMut { mutbl: hir::Mutability::Not, .. }) = provided_ty.kind()\n+            && let hir::ExprKind::Call(callee, _) = arg.kind\n+            && let hir::ExprKind::Path(hir::QPath::Resolved(_, path)) = callee.kind\n+            && let Res::Def(_, def_id) = path.res\n+            && self.tcx.get_diagnostic_item(sym::ptr_null) == Some(def_id)\n+        {\n+            // The user provided `ptr::null()`, but the function expects\n+            // `ptr::null_mut()`.\n+            err.subdiagnostic(SuggestPtrNullMut {\n+                span: arg.span\n+            });\n+        }\n+    }\n+\n     // AST fragment checking\n     pub(in super::super) fn check_lit(\n         &self,"}, {"sha": "bb2bd2faec20823e58140fc0fc9a2cbd56580d61", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "patch": "@@ -34,7 +34,7 @@ use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{RelateResult, TypeRelation};\n-use rustc_middle::ty::{self, AliasKind, InferConst, ToPredicate, Ty, TyCtxt, TypeVisitableExt};\n+use rustc_middle::ty::{self, InferConst, ToPredicate, Ty, TyCtxt, TypeVisitableExt};\n use rustc_middle::ty::{IntType, UintType};\n use rustc_span::DUMMY_SP;\n \n@@ -103,12 +103,12 @@ impl<'tcx> InferCtxt<'tcx> {\n \n             // We don't expect `TyVar` or `Fresh*` vars at this point with lazy norm.\n             (\n-                ty::Alias(AliasKind::Projection, _),\n+                ty::Alias(..),\n                 ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)),\n             )\n             | (\n                 ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)),\n-                ty::Alias(AliasKind::Projection, _),\n+                ty::Alias(..),\n             ) if self.next_trait_solver() => {\n                 bug!()\n             }"}, {"sha": "1b749b9c854cd412e879068ada7225fe9d40f92e", "filename": "compiler/rustc_trait_selection/src/solve/assembly/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs?ref=df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "patch": "@@ -320,7 +320,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         candidates\n     }\n \n-    /// If the self type of a goal is a projection, computing the relevant candidates is difficult.\n+    /// If the self type of a goal is an alias, computing the relevant candidates is difficult.\n     ///\n     /// To deal with this, we first try to normalize the self type and add the candidates for the normalized\n     /// self type to the list of candidates in case that succeeds. We also have to consider candidates with the"}, {"sha": "a4294f336feca07af74d62e0db478acd764ef366", "filename": "library/std/src/sys/windows/c/windows_sys.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc%2Fwindows_sys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc%2Fwindows_sys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc%2Fwindows_sys.rs?ref=df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "patch": "@@ -4275,3 +4275,23 @@ impl ::core::clone::Clone for XSAVE_FORMAT {\n         *self\n     }\n }\n+// Begin of ARM32 shim\n+// The raw content of this file should be processed by `generate-windows-sys`\n+// to be merged with the generated binding. It is not supposed to be used as\n+// a normal Rust module.\n+cfg_if::cfg_if! {\n+if #[cfg(target_arch = \"arm\")] {\n+#[repr(C)]\n+pub struct WSADATA {\n+    pub wVersion: u16,\n+    pub wHighVersion: u16,\n+    pub szDescription: [u8; 257],\n+    pub szSystemStatus: [u8; 129],\n+    pub iMaxSockets: u16,\n+    pub iMaxUdpDg: u16,\n+    pub lpVendorInfo: PSTR,\n+}\n+pub enum CONTEXT {}\n+}\n+}\n+// End of ARM32 shim"}, {"sha": "17c2ccb223cce355ec6f550afd46f0ba1f80f150", "filename": "src/tools/generate-windows-sys/src/arm_shim.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/src%2Ftools%2Fgenerate-windows-sys%2Fsrc%2Farm_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/src%2Ftools%2Fgenerate-windows-sys%2Fsrc%2Farm_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fgenerate-windows-sys%2Fsrc%2Farm_shim.rs?ref=df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "patch": "@@ -0,0 +1,20 @@\n+// Begin of ARM32 shim\n+// The raw content of this file should be processed by `generate-windows-sys`\n+// to be merged with the generated binding. It is not supposed to be used as\n+// a normal Rust module.\n+cfg_if::cfg_if! {\n+if #[cfg(target_arch = \"arm\")] {\n+#[repr(C)]\n+pub struct WSADATA {\n+    pub wVersion: u16,\n+    pub wHighVersion: u16,\n+    pub szDescription: [u8; 257],\n+    pub szSystemStatus: [u8; 129],\n+    pub iMaxSockets: u16,\n+    pub iMaxUdpDg: u16,\n+    pub lpVendorInfo: PSTR,\n+}\n+pub enum CONTEXT {}\n+}\n+}\n+// End of ARM32 shim"}, {"sha": "65e480715ee203d05fa4e785e7aad0b90697a17f", "filename": "src/tools/generate-windows-sys/src/main.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/src%2Ftools%2Fgenerate-windows-sys%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/src%2Ftools%2Fgenerate-windows-sys%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fgenerate-windows-sys%2Fsrc%2Fmain.rs?ref=df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "patch": "@@ -11,6 +11,9 @@ const PRELUDE: &str = r#\"// This file is autogenerated.\n // ignore-tidy-filelength\n \"#;\n \n+/// This is a shim for the ARM (32-bit) architecture, which is no longer supported by windows-rs.\n+const ARM_SHIM: &str = include_str!(\"arm_shim.rs\");\n+\n fn main() -> io::Result<()> {\n     let mut path: PathBuf =\n         std::env::args_os().nth(1).expect(\"a path to the rust repository is required\").into();\n@@ -32,6 +35,7 @@ fn main() -> io::Result<()> {\n     let mut f = std::fs::File::create(&path)?;\n     f.write_all(PRELUDE.as_bytes())?;\n     f.write_all(bindings.as_bytes())?;\n+    f.write_all(ARM_SHIM.as_bytes())?;\n \n     Ok(())\n }"}, {"sha": "17e08f511d71fab9076950049dddc32b95acf1c0", "filename": "tests/ui/extern/issue-112363-extern-item-where-clauses-debug-ice.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/tests%2Fui%2Fextern%2Fissue-112363-extern-item-where-clauses-debug-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/tests%2Fui%2Fextern%2Fissue-112363-extern-item-where-clauses-debug-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextern%2Fissue-112363-extern-item-where-clauses-debug-ice.rs?ref=df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "patch": "@@ -0,0 +1,10 @@\n+extern \"C\" {\n+    type Item = [T] where [T]: Sized;\n+    //~^ incorrect `type` inside `extern` block\n+    //~| `type`s inside `extern` blocks cannot have `where` clauses\n+    //~| cannot find type `T` in this scope\n+    //~| cannot find type `T` in this scope\n+    //~| extern types are experimental\n+}\n+\n+fn main() {}"}, {"sha": "bdc6755038aa487ccfa0adf08f919e5d5db09743", "filename": "tests/ui/extern/issue-112363-extern-item-where-clauses-debug-ice.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/tests%2Fui%2Fextern%2Fissue-112363-extern-item-where-clauses-debug-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/tests%2Fui%2Fextern%2Fissue-112363-extern-item-where-clauses-debug-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextern%2Fissue-112363-extern-item-where-clauses-debug-ice.stderr?ref=df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "patch": "@@ -0,0 +1,47 @@\n+error: incorrect `type` inside `extern` block\n+  --> $DIR/issue-112363-extern-item-where-clauses-debug-ice.rs:2:10\n+   |\n+LL | extern \"C\" {\n+   | ---------- `extern` blocks define existing foreign types and types inside of them cannot have a body\n+LL |     type Item = [T] where [T]: Sized;\n+   |          ^^^^   --- the invalid body\n+   |          |\n+   |          cannot have a body\n+   |\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: `type`s inside `extern` blocks cannot have `where` clauses\n+  --> $DIR/issue-112363-extern-item-where-clauses-debug-ice.rs:2:21\n+   |\n+LL | extern \"C\" {\n+   | ---------- `extern` block begins here\n+LL |     type Item = [T] where [T]: Sized;\n+   |                     ^^^^^^^^^^^^^^^^ help: remove the `where` clause\n+   |\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error[E0412]: cannot find type `T` in this scope\n+  --> $DIR/issue-112363-extern-item-where-clauses-debug-ice.rs:2:28\n+   |\n+LL |     type Item = [T] where [T]: Sized;\n+   |                            ^ not found in this scope\n+\n+error[E0412]: cannot find type `T` in this scope\n+  --> $DIR/issue-112363-extern-item-where-clauses-debug-ice.rs:2:18\n+   |\n+LL |     type Item = [T] where [T]: Sized;\n+   |                  ^ not found in this scope\n+\n+error[E0658]: extern types are experimental\n+  --> $DIR/issue-112363-extern-item-where-clauses-debug-ice.rs:2:5\n+   |\n+LL |     type Item = [T] where [T]: Sized;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #43467 <https://github.com/rust-lang/rust/issues/43467> for more information\n+   = help: add `#![feature(extern_types)]` to the crate attributes to enable\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0412, E0658.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "4d30086e7653627125c6c75f3f458c493f6d7f82", "filename": "tests/ui/parser/foreign-ty-semantic-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/tests%2Fui%2Fparser%2Fforeign-ty-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/tests%2Fui%2Fparser%2Fforeign-ty-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fforeign-ty-semantic-fail.rs?ref=df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "patch": "@@ -15,4 +15,5 @@ extern \"C\" {\n     //~^ ERROR incorrect `type` inside `extern` block\n \n     type E: where;\n+    //~^ ERROR `type`s inside `extern` blocks cannot have `where` clauses\n }"}, {"sha": "2b400dfea3bfae5b99a80a7248247fdb02f06c26", "filename": "tests/ui/parser/foreign-ty-semantic-fail.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/tests%2Fui%2Fparser%2Fforeign-ty-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/tests%2Fui%2Fparser%2Fforeign-ty-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fforeign-ty-semantic-fail.stderr?ref=df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "patch": "@@ -61,5 +61,16 @@ LL |     type D = u8;\n    |\n    = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n \n-error: aborting due to 6 previous errors\n+error: `type`s inside `extern` blocks cannot have `where` clauses\n+  --> $DIR/foreign-ty-semantic-fail.rs:17:13\n+   |\n+LL | extern \"C\" {\n+   | ---------- `extern` block begins here\n+...\n+LL |     type E: where;\n+   |             ^^^^^ help: remove the `where` clause\n+   |\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: aborting due to 7 previous errors\n "}, {"sha": "d00536b29cff8fdb1348ca4649cf09f7ac528cdb", "filename": "tests/ui/typeck/ptr-null-mutability-suggestions.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/tests%2Fui%2Ftypeck%2Fptr-null-mutability-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/tests%2Fui%2Ftypeck%2Fptr-null-mutability-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fptr-null-mutability-suggestions.fixed?ref=df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#[allow(unused_imports)]\n+use std::ptr;\n+\n+fn expecting_null_mut(_: *mut u8) {}\n+\n+fn main() {\n+    expecting_null_mut(core::ptr::null_mut());\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "ea3066d2289f5fbaab980b5b427340aec226cecd", "filename": "tests/ui/typeck/ptr-null-mutability-suggestions.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/tests%2Fui%2Ftypeck%2Fptr-null-mutability-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/tests%2Fui%2Ftypeck%2Fptr-null-mutability-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fptr-null-mutability-suggestions.rs?ref=df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#[allow(unused_imports)]\n+use std::ptr;\n+\n+fn expecting_null_mut(_: *mut u8) {}\n+\n+fn main() {\n+    expecting_null_mut(ptr::null());\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "705b029bdeab593569c9651b0a8e277465223a34", "filename": "tests/ui/typeck/ptr-null-mutability-suggestions.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/tests%2Fui%2Ftypeck%2Fptr-null-mutability-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df77afbcaf3365a32066a8ca4a00ae6fc9a69647/tests%2Fui%2Ftypeck%2Fptr-null-mutability-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fptr-null-mutability-suggestions.stderr?ref=df77afbcaf3365a32066a8ca4a00ae6fc9a69647", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/ptr-null-mutability-suggestions.rs:9:24\n+   |\n+LL |     expecting_null_mut(ptr::null());\n+   |     ------------------ ^^^^^^^^^^^\n+   |     |                  |\n+   |     |                  types differ in mutability\n+   |     |                  help: consider using `core::ptr::null_mut` instead: `core::ptr::null_mut()`\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected raw pointer `*mut u8`\n+              found raw pointer `*const _`\n+note: function defined here\n+  --> $DIR/ptr-null-mutability-suggestions.rs:6:4\n+   |\n+LL | fn expecting_null_mut(_: *mut u8) {}\n+   |    ^^^^^^^^^^^^^^^^^^ ----------\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}