{"sha": "ec8619dca239f57201a3ceb59e93149659c07b58", "node_id": "C_kwDOAAsO6NoAKGVjODYxOWRjYTIzOWY1NzIwMWEzY2ViNTllOTMxNDk2NTljMDdiNTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-25T23:03:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-25T23:03:50Z"}, "message": "Auto merge of #96294 - Emilgardis:def_id-in-unsafetyviolationdetails, r=oli-obk\n\nDisplay function path in unsafety violations - E0133\n\nadds `DefId` to `UnsafetyViolationDetails`\n\nthis enables consumers to access the function definition that was reported to be unsafe and also changes the output for some E0133 diagnostics", "tree": {"sha": "41baa6b20ee48a404cca9257b124f13e7feaabc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41baa6b20ee48a404cca9257b124f13e7feaabc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec8619dca239f57201a3ceb59e93149659c07b58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec8619dca239f57201a3ceb59e93149659c07b58", "html_url": "https://github.com/rust-lang/rust/commit/ec8619dca239f57201a3ceb59e93149659c07b58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec8619dca239f57201a3ceb59e93149659c07b58/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "055bf4ccd521c2c2185166c86951be7be145727c", "url": "https://api.github.com/repos/rust-lang/rust/commits/055bf4ccd521c2c2185166c86951be7be145727c", "html_url": "https://github.com/rust-lang/rust/commit/055bf4ccd521c2c2185166c86951be7be145727c"}, {"sha": "f71597cb59f6dc6f3ab30d70ff5b722c6b4adcc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f71597cb59f6dc6f3ab30d70ff5b722c6b4adcc1", "html_url": "https://github.com/rust-lang/rust/commit/f71597cb59f6dc6f3ab30d70ff5b722c6b4adcc1"}], "stats": {"total": 353, "additions": 211, "deletions": 142}, "files": [{"sha": "e1e63dd48ba2b684186bbc0e793fb086ecb9db5e", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 49, "deletions": 19, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -12,6 +12,7 @@ use rustc_index::vec::IndexVec;\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n use smallvec::SmallVec;\n+use std::borrow::Cow;\n use std::cell::Cell;\n use std::fmt::{self, Debug};\n \n@@ -28,7 +29,7 @@ pub enum UnsafetyViolationKind {\n \n #[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable, Debug)]\n pub enum UnsafetyViolationDetails {\n-    CallToUnsafeFunction,\n+    CallToUnsafeFunction(Option<DefId>),\n     UseOfInlineAssembly,\n     InitializingTypeWith,\n     CastOfPointerToInt,\n@@ -39,66 +40,95 @@ pub enum UnsafetyViolationDetails {\n     AccessToUnionField,\n     MutationOfLayoutConstrainedField,\n     BorrowOfLayoutConstrainedField,\n-    CallToFunctionWith,\n+    CallToFunctionWith(DefId),\n }\n \n impl UnsafetyViolationDetails {\n-    pub fn description_and_note(&self) -> (&'static str, &'static str) {\n+    pub fn simple_description(&self) -> &'static str {\n+        use UnsafetyViolationDetails::*;\n+\n+        match self {\n+            CallToUnsafeFunction(..) => \"call to unsafe function\",\n+            UseOfInlineAssembly => \"use of inline assembly\",\n+            InitializingTypeWith => \"initializing type with `rustc_layout_scalar_valid_range` attr\",\n+            CastOfPointerToInt => \"cast of pointer to int\",\n+            UseOfMutableStatic => \"use of mutable static\",\n+            UseOfExternStatic => \"use of extern static\",\n+            DerefOfRawPointer => \"dereference of raw pointer\",\n+            AssignToDroppingUnionField => \"assignment to union field that might need dropping\",\n+            AccessToUnionField => \"access to union field\",\n+            MutationOfLayoutConstrainedField => \"mutation of layout constrained field\",\n+            BorrowOfLayoutConstrainedField => {\n+                \"borrow of layout constrained field with interior mutability\"\n+            }\n+            CallToFunctionWith(..) => \"call to function with `#[target_feature]`\",\n+        }\n+    }\n+\n+    pub fn description_and_note(&self, tcx: TyCtxt<'_>) -> (Cow<'static, str>, &'static str) {\n         use UnsafetyViolationDetails::*;\n         match self {\n-            CallToUnsafeFunction => (\n-                \"call to unsafe function\",\n+            CallToUnsafeFunction(did) => (\n+                if let Some(did) = did {\n+                    Cow::from(format!(\"call to unsafe function `{}`\", tcx.def_path_str(*did)))\n+                } else {\n+                    Cow::Borrowed(self.simple_description())\n+                },\n                 \"consult the function's documentation for information on how to avoid undefined \\\n                  behavior\",\n             ),\n             UseOfInlineAssembly => (\n-                \"use of inline assembly\",\n+                Cow::Borrowed(self.simple_description()),\n                 \"inline assembly is entirely unchecked and can cause undefined behavior\",\n             ),\n             InitializingTypeWith => (\n-                \"initializing type with `rustc_layout_scalar_valid_range` attr\",\n+                Cow::Borrowed(self.simple_description()),\n                 \"initializing a layout restricted type's field with a value outside the valid \\\n                  range is undefined behavior\",\n             ),\n-            CastOfPointerToInt => {\n-                (\"cast of pointer to int\", \"casting pointers to integers in constants\")\n-            }\n+            CastOfPointerToInt => (\n+                Cow::Borrowed(self.simple_description()),\n+                \"casting pointers to integers in constants\",\n+            ),\n             UseOfMutableStatic => (\n-                \"use of mutable static\",\n+                Cow::Borrowed(self.simple_description()),\n                 \"mutable statics can be mutated by multiple threads: aliasing violations or data \\\n                  races will cause undefined behavior\",\n             ),\n             UseOfExternStatic => (\n-                \"use of extern static\",\n+                Cow::Borrowed(self.simple_description()),\n                 \"extern statics are not controlled by the Rust type system: invalid data, \\\n                  aliasing violations or data races will cause undefined behavior\",\n             ),\n             DerefOfRawPointer => (\n-                \"dereference of raw pointer\",\n+                Cow::Borrowed(self.simple_description()),\n                 \"raw pointers may be null, dangling or unaligned; they can violate aliasing rules \\\n                  and cause data races: all of these are undefined behavior\",\n             ),\n             AssignToDroppingUnionField => (\n-                \"assignment to union field that might need dropping\",\n+                Cow::Borrowed(self.simple_description()),\n                 \"the previous content of the field will be dropped, which causes undefined \\\n                  behavior if the field was not properly initialized\",\n             ),\n             AccessToUnionField => (\n-                \"access to union field\",\n+                Cow::Borrowed(self.simple_description()),\n                 \"the field may not be properly initialized: using uninitialized data will cause \\\n                  undefined behavior\",\n             ),\n             MutationOfLayoutConstrainedField => (\n-                \"mutation of layout constrained field\",\n+                Cow::Borrowed(self.simple_description()),\n                 \"mutating layout constrained fields cannot statically be checked for valid values\",\n             ),\n             BorrowOfLayoutConstrainedField => (\n-                \"borrow of layout constrained field with interior mutability\",\n+                Cow::Borrowed(self.simple_description()),\n                 \"references to fields of layout constrained fields lose the constraints. Coupled \\\n                  with interior mutability, the field can be changed to invalid values\",\n             ),\n-            CallToFunctionWith => (\n-                \"call to function with `#[target_feature]`\",\n+            CallToFunctionWith(did) => (\n+                Cow::from(format!(\n+                    \"call to function `{}` with `#[target_feature]`\",\n+                    tcx.def_path_str(*did)\n+                )),\n                 \"can only be called if the required target features are available\",\n             ),\n         }"}, {"sha": "a841cce23dee994af0a520b202c6f34c98903888", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 53, "deletions": 21, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -12,6 +12,7 @@ use rustc_span::def_id::{DefId, LocalDefId};\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n \n+use std::borrow::Cow;\n use std::ops::Bound;\n \n struct UnsafetyVisitor<'a, 'tcx> {\n@@ -70,7 +71,6 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n     }\n \n     fn requires_unsafe(&mut self, span: Span, kind: UnsafeOpKind) {\n-        let (description, note) = kind.description_and_note();\n         let unsafe_op_in_unsafe_fn_allowed = self.unsafe_op_in_unsafe_fn_allowed();\n         match self.safety_context {\n             SafetyContext::BuiltinUnsafeBlock => {}\n@@ -82,6 +82,7 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n             }\n             SafetyContext::UnsafeFn if unsafe_op_in_unsafe_fn_allowed => {}\n             SafetyContext::UnsafeFn => {\n+                let (description, note) = kind.description_and_note(self.tcx);\n                 // unsafe_op_in_unsafe_fn is disallowed\n                 self.tcx.struct_span_lint_hir(\n                     UNSAFE_OP_IN_UNSAFE_FN,\n@@ -92,13 +93,14 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n                             \"{} is unsafe and requires unsafe block (error E0133)\",\n                             description,\n                         ))\n-                        .span_label(span, description)\n+                        .span_label(span, kind.simple_description())\n                         .note(note)\n                         .emit();\n                     },\n                 )\n             }\n             SafetyContext::Safe => {\n+                let (description, note) = kind.description_and_note(self.tcx);\n                 let fn_sugg = if unsafe_op_in_unsafe_fn_allowed { \" function or\" } else { \"\" };\n                 struct_span_err!(\n                     self.tcx.sess,\n@@ -108,7 +110,7 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n                     description,\n                     fn_sugg,\n                 )\n-                .span_label(span, description)\n+                .span_label(span, kind.simple_description())\n                 .note(note)\n                 .emit();\n             }\n@@ -350,7 +352,12 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n             }\n             ExprKind::Call { fun, ty: _, args: _, from_hir_call: _, fn_span: _ } => {\n                 if self.thir[fun].ty.fn_sig(self.tcx).unsafety() == hir::Unsafety::Unsafe {\n-                    self.requires_unsafe(expr.span, CallToUnsafeFunction);\n+                    let func_id = if let ty::FnDef(func_id, _) = self.thir[fun].ty.kind() {\n+                        Some(*func_id)\n+                    } else {\n+                        None\n+                    };\n+                    self.requires_unsafe(expr.span, CallToUnsafeFunction(func_id));\n                 } else if let &ty::FnDef(func_did, _) = self.thir[fun].ty.kind() {\n                     // If the called function has target features the calling function hasn't,\n                     // the call requires `unsafe`. Don't check this on wasm\n@@ -364,7 +371,7 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                             .iter()\n                             .all(|feature| self.body_target_features.contains(feature))\n                     {\n-                        self.requires_unsafe(expr.span, CallToFunctionWith);\n+                        self.requires_unsafe(expr.span, CallToFunctionWith(func_did));\n                     }\n                 }\n             }\n@@ -523,7 +530,7 @@ impl BodyUnsafety {\n \n #[derive(Clone, Copy, PartialEq)]\n enum UnsafeOpKind {\n-    CallToUnsafeFunction,\n+    CallToUnsafeFunction(Option<DefId>),\n     UseOfInlineAssembly,\n     InitializingTypeWith,\n     UseOfMutableStatic,\n@@ -533,64 +540,89 @@ enum UnsafeOpKind {\n     AccessToUnionField,\n     MutationOfLayoutConstrainedField,\n     BorrowOfLayoutConstrainedField,\n-    CallToFunctionWith,\n+    CallToFunctionWith(DefId),\n }\n \n use UnsafeOpKind::*;\n \n impl UnsafeOpKind {\n-    pub fn description_and_note(&self) -> (&'static str, &'static str) {\n+    pub fn simple_description(&self) -> &'static str {\n         match self {\n-            CallToUnsafeFunction => (\n-                \"call to unsafe function\",\n+            CallToUnsafeFunction(..) => \"call to unsafe function\",\n+            UseOfInlineAssembly => \"use of inline assembly\",\n+            InitializingTypeWith => \"initializing type with `rustc_layout_scalar_valid_range` attr\",\n+            UseOfMutableStatic => \"use of mutable static\",\n+            UseOfExternStatic => \"use of extern static\",\n+            DerefOfRawPointer => \"dereference of raw pointer\",\n+            AssignToDroppingUnionField => \"assignment to union field that might need dropping\",\n+            AccessToUnionField => \"access to union field\",\n+            MutationOfLayoutConstrainedField => \"mutation of layout constrained field\",\n+            BorrowOfLayoutConstrainedField => {\n+                \"borrow of layout constrained field with interior mutability\"\n+            }\n+            CallToFunctionWith(..) => \"call to function with `#[target_feature]`\",\n+        }\n+    }\n+\n+    pub fn description_and_note(&self, tcx: TyCtxt<'_>) -> (Cow<'static, str>, &'static str) {\n+        match self {\n+            CallToUnsafeFunction(did) => (\n+                if let Some(did) = did {\n+                    Cow::from(format!(\"call to unsafe function `{}`\", tcx.def_path_str(*did)))\n+                } else {\n+                    Cow::Borrowed(self.simple_description())\n+                },\n                 \"consult the function's documentation for information on how to avoid undefined \\\n                  behavior\",\n             ),\n             UseOfInlineAssembly => (\n-                \"use of inline assembly\",\n+                Cow::Borrowed(self.simple_description()),\n                 \"inline assembly is entirely unchecked and can cause undefined behavior\",\n             ),\n             InitializingTypeWith => (\n-                \"initializing type with `rustc_layout_scalar_valid_range` attr\",\n+                Cow::Borrowed(self.simple_description()),\n                 \"initializing a layout restricted type's field with a value outside the valid \\\n                  range is undefined behavior\",\n             ),\n             UseOfMutableStatic => (\n-                \"use of mutable static\",\n+                Cow::Borrowed(self.simple_description()),\n                 \"mutable statics can be mutated by multiple threads: aliasing violations or data \\\n                  races will cause undefined behavior\",\n             ),\n             UseOfExternStatic => (\n-                \"use of extern static\",\n+                Cow::Borrowed(self.simple_description()),\n                 \"extern statics are not controlled by the Rust type system: invalid data, \\\n                  aliasing violations or data races will cause undefined behavior\",\n             ),\n             DerefOfRawPointer => (\n-                \"dereference of raw pointer\",\n+                Cow::Borrowed(self.simple_description()),\n                 \"raw pointers may be null, dangling or unaligned; they can violate aliasing rules \\\n                  and cause data races: all of these are undefined behavior\",\n             ),\n             AssignToDroppingUnionField => (\n-                \"assignment to union field that might need dropping\",\n+                Cow::Borrowed(self.simple_description()),\n                 \"the previous content of the field will be dropped, which causes undefined \\\n                  behavior if the field was not properly initialized\",\n             ),\n             AccessToUnionField => (\n-                \"access to union field\",\n+                Cow::Borrowed(self.simple_description()),\n                 \"the field may not be properly initialized: using uninitialized data will cause \\\n                  undefined behavior\",\n             ),\n             MutationOfLayoutConstrainedField => (\n-                \"mutation of layout constrained field\",\n+                Cow::Borrowed(self.simple_description()),\n                 \"mutating layout constrained fields cannot statically be checked for valid values\",\n             ),\n             BorrowOfLayoutConstrainedField => (\n-                \"borrow of layout constrained field with interior mutability\",\n+                Cow::Borrowed(self.simple_description()),\n                 \"references to fields of layout constrained fields lose the constraints. Coupled \\\n                  with interior mutability, the field can be changed to invalid values\",\n             ),\n-            CallToFunctionWith => (\n-                \"call to function with `#[target_feature]`\",\n+            CallToFunctionWith(did) => (\n+                Cow::from(format!(\n+                    \"call to function `{}` with `#[target_feature]`\",\n+                    tcx.def_path_str(*did)\n+                )),\n                 \"can only be called if the required target features are available\",\n             ),\n         }"}, {"sha": "34093eb29eb5de94e9621b816b4b9052d8190b3e", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -70,15 +70,17 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n \n             TerminatorKind::Call { ref func, .. } => {\n                 let func_ty = func.ty(self.body, self.tcx);\n+                let func_id =\n+                    if let ty::FnDef(func_id, _) = func_ty.kind() { Some(func_id) } else { None };\n                 let sig = func_ty.fn_sig(self.tcx);\n                 if let hir::Unsafety::Unsafe = sig.unsafety() {\n                     self.require_unsafe(\n                         UnsafetyViolationKind::General,\n-                        UnsafetyViolationDetails::CallToUnsafeFunction,\n+                        UnsafetyViolationDetails::CallToUnsafeFunction(func_id.copied()),\n                     )\n                 }\n \n-                if let ty::FnDef(func_id, _) = func_ty.kind() {\n+                if let Some(func_id) = func_id {\n                     self.check_target_features(*func_id);\n                 }\n             }\n@@ -379,7 +381,7 @@ impl<'tcx> UnsafetyChecker<'_, 'tcx> {\n         if !callee_features.iter().all(|feature| self_features.contains(feature)) {\n             self.require_unsafe(\n                 UnsafetyViolationKind::General,\n-                UnsafetyViolationDetails::CallToFunctionWith,\n+                UnsafetyViolationDetails::CallToFunctionWith(func_did),\n             )\n         }\n     }\n@@ -578,7 +580,8 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let UnsafetyCheckResult { violations, unused_unsafes, .. } = tcx.unsafety_check_result(def_id);\n \n     for &UnsafetyViolation { source_info, lint_root, kind, details } in violations.iter() {\n-        let (description, note) = details.description_and_note();\n+        let (description, note) =\n+            ty::print::with_no_trimmed_paths!(details.description_and_note(tcx));\n \n         // Report an error.\n         let unsafe_fn_msg =\n@@ -595,7 +598,7 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                     description,\n                     unsafe_fn_msg,\n                 )\n-                .span_label(source_info.span, description)\n+                .span_label(source_info.span, details.simple_description())\n                 .note(note)\n                 .emit();\n             }"}, {"sha": "a12839539227b1d4d363088eee4dbef9b8a98a7e", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.mir.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.mir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,28 +1,28 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `S::f` is unsafe and requires unsafe function or block\n   --> $DIR/async-unsafe-fn-call-in-safe.rs:14:5\n    |\n LL |     S::f();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/async-unsafe-fn-call-in-safe.rs:15:5\n    |\n LL |     f();\n    |     ^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `S::f` is unsafe and requires unsafe function or block\n   --> $DIR/async-unsafe-fn-call-in-safe.rs:19:5\n    |\n LL |     S::f();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/async-unsafe-fn-call-in-safe.rs:20:5\n    |\n LL |     f();"}, {"sha": "2605905ff76f1989febb154bb417b939fdcaa09b", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -11,11 +11,11 @@ impl S {\n async unsafe fn f() {}\n \n async fn g() {\n-    S::f(); //~ ERROR call to unsafe function is unsafe\n-    f(); //~ ERROR call to unsafe function is unsafe\n+    S::f(); //~ ERROR call to unsafe function `S::f` is unsafe\n+    f(); //~ ERROR call to unsafe function `f` is unsafe\n }\n \n fn main() {\n-    S::f(); //[mir]~ ERROR call to unsafe function is unsafe\n-    f(); //[mir]~ ERROR call to unsafe function is unsafe\n+    S::f(); //[mir]~ ERROR call to unsafe function `S::f` is unsafe\n+    f(); //[mir]~ ERROR call to unsafe function `f` is unsafe\n }"}, {"sha": "9de23a8fada262c8f862e950c5c3e04d42bcc5be", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.thir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.thir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,12 +1,12 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `S::f` is unsafe and requires unsafe function or block\n   --> $DIR/async-unsafe-fn-call-in-safe.rs:14:5\n    |\n LL |     S::f();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/async-unsafe-fn-call-in-safe.rs:15:5\n    |\n LL |     f();"}, {"sha": "c6d2c2d466af286af6d6ad255faee84b86ee7d26", "filename": "src/test/ui/closures/coerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `std::pin::Pin::<P>::new_unchecked` is unsafe and requires unsafe function or block\n   --> $DIR/coerce-unsafe-closure-to-unsafe-fn-ptr.rs:5:31\n    |\n LL |     let _: unsafe fn() = || { ::std::pin::Pin::new_unchecked(&0_u8); };"}, {"sha": "8c516e8900c27b27ed4285899b29c87caaea8cbb", "filename": "src/test/ui/closures/coerce-unsafe-closure-to-unsafe-fn-ptr.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.thir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `Pin::<P>::new_unchecked` is unsafe and requires unsafe function or block\n   --> $DIR/coerce-unsafe-closure-to-unsafe-fn-ptr.rs:5:31\n    |\n LL |     let _: unsafe fn() = || { ::std::pin::Pin::new_unchecked(&0_u8); };"}, {"sha": "ad73058e1afa6305157e89367772709482cb1b74", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,12 +1,12 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `foo` is unsafe and requires unsafe function or block\n   --> $DIR/const-extern-fn-requires-unsafe.rs:9:17\n    |\n LL |     let a: [u8; foo()];\n    |                 ^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `foo` is unsafe and requires unsafe function or block\n   --> $DIR/const-extern-fn-requires-unsafe.rs:11:5\n    |\n LL |     foo();"}, {"sha": "b4cf729703ab8ef6e8d30b960fcd3e55678a473c", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -7,7 +7,7 @@ const unsafe extern \"C\" fn foo() -> usize { 5 }\n \n fn main() {\n     let a: [u8; foo()];\n-    //~^ ERROR call to unsafe function is unsafe and requires unsafe function or block\n+    //~^ ERROR call to unsafe function `foo` is unsafe and requires unsafe function or block\n     foo();\n-    //[mir]~^ ERROR call to unsafe function is unsafe and requires unsafe function or block\n+    //[mir]~^ ERROR call to unsafe function `foo` is unsafe and requires unsafe function or block\n }"}, {"sha": "b313f06539ff7f5153e15c00956c7dbc96f08fb7", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.thir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `foo` is unsafe and requires unsafe function or block\n   --> $DIR/const-extern-fn-requires-unsafe.rs:9:17\n    |\n LL |     let a: [u8; foo()];"}, {"sha": "f1d7aba2aa3b68a01a296aaf12b78fb742dde4dd", "filename": "src/test/ui/error-codes/E0133.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Ferror-codes%2FE0133.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Ferror-codes%2FE0133.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0133.mir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/E0133.rs:7:5\n    |\n LL |     f();"}, {"sha": "f1d7aba2aa3b68a01a296aaf12b78fb742dde4dd", "filename": "src/test/ui/error-codes/E0133.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Ferror-codes%2FE0133.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Ferror-codes%2FE0133.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0133.thir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/E0133.rs:7:5\n    |\n LL |     f();"}, {"sha": "00ba0f7a6a3e07ccec84d86c46611e0976c2e848", "filename": "src/test/ui/foreign-unsafe-fn-called.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.mir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `test::free` is unsafe and requires unsafe function or block\n   --> $DIR/foreign-unsafe-fn-called.rs:11:5\n    |\n LL |     test::free();"}, {"sha": "cd084a1620afe8c05cad3d8dbddb0c3cdc2ff13f", "filename": "src/test/ui/foreign-unsafe-fn-called.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.rs?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -9,5 +9,5 @@ mod test {\n \n fn main() {\n     test::free();\n-    //~^ ERROR call to unsafe function is unsafe\n+    //~^ ERROR call to unsafe function `test::free` is unsafe\n }"}, {"sha": "00ba0f7a6a3e07ccec84d86c46611e0976c2e848", "filename": "src/test/ui/foreign-unsafe-fn-called.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.thir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `test::free` is unsafe and requires unsafe function or block\n   --> $DIR/foreign-unsafe-fn-called.rs:11:5\n    |\n LL |     test::free();"}, {"sha": "47bc2e1a6e91e8f63914ddf4253d8369970673a6", "filename": "src/test/ui/intrinsics/unchecked_math_unsafe.mir.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.mir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,20 +1,20 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `std::intrinsics::unchecked_add` is unsafe and requires unsafe function or block\n   --> $DIR/unchecked_math_unsafe.rs:8:15\n    |\n LL |     let add = std::intrinsics::unchecked_add(x, y);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `std::intrinsics::unchecked_sub` is unsafe and requires unsafe function or block\n   --> $DIR/unchecked_math_unsafe.rs:9:15\n    |\n LL |     let sub = std::intrinsics::unchecked_sub(x, y);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `std::intrinsics::unchecked_mul` is unsafe and requires unsafe function or block\n   --> $DIR/unchecked_math_unsafe.rs:10:15\n    |\n LL |     let mul = std::intrinsics::unchecked_mul(x, y);"}, {"sha": "5c3728ccdf84317cc9761ba22dfcb08f04402c0a", "filename": "src/test/ui/intrinsics/unchecked_math_unsafe.thir.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.thir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,20 +1,20 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `unchecked_add` is unsafe and requires unsafe function or block\n   --> $DIR/unchecked_math_unsafe.rs:8:15\n    |\n LL |     let add = std::intrinsics::unchecked_add(x, y);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `unchecked_sub` is unsafe and requires unsafe function or block\n   --> $DIR/unchecked_math_unsafe.rs:9:15\n    |\n LL |     let sub = std::intrinsics::unchecked_sub(x, y);\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `unchecked_mul` is unsafe and requires unsafe function or block\n   --> $DIR/unchecked_math_unsafe.rs:10:15\n    |\n LL |     let mul = std::intrinsics::unchecked_mul(x, y);"}, {"sha": "e3562810b3aa8f754424ee778615b3c09a7efd34", "filename": "src/test/ui/issues/issue-28776.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fissues%2Fissue-28776.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fissues%2Fissue-28776.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28776.mir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `std::ptr::write` is unsafe and requires unsafe function or block\n   --> $DIR/issue-28776.rs:7:5\n    |\n LL |     (&ptr::write)(1 as *mut _, 42);"}, {"sha": "e3562810b3aa8f754424ee778615b3c09a7efd34", "filename": "src/test/ui/issues/issue-28776.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fissues%2Fissue-28776.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fissues%2Fissue-28776.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28776.thir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `std::ptr::write` is unsafe and requires unsafe function or block\n   --> $DIR/issue-28776.rs:7:5\n    |\n LL |     (&ptr::write)(1 as *mut _, 42);"}, {"sha": "4d8acac61d9edc4817f5383de8e9ad355da3f388", "filename": "src/test/ui/issues/issue-3080.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fissues%2Fissue-3080.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fissues%2Fissue-3080.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3080.mir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `X::with` is unsafe and requires unsafe function or block\n   --> $DIR/issue-3080.rs:10:5\n    |\n LL |     X(()).with();"}, {"sha": "4d8acac61d9edc4817f5383de8e9ad355da3f388", "filename": "src/test/ui/issues/issue-3080.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fissues%2Fissue-3080.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fissues%2Fissue-3080.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3080.thir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `X::with` is unsafe and requires unsafe function or block\n   --> $DIR/issue-3080.rs:10:5\n    |\n LL |     X(()).with();"}, {"sha": "4ec993edc6656c4222793affb09029901bba8415", "filename": "src/test/ui/issues/issue-5844.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fissues%2Fissue-5844.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fissues%2Fissue-5844.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5844.mir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `issue_5844_aux::rand` is unsafe and requires unsafe function or block\n   --> $DIR/issue-5844.rs:8:5\n    |\n LL |     issue_5844_aux::rand();"}, {"sha": "310a2b593fe853c253b3a9653e5a404097d103d4", "filename": "src/test/ui/issues/issue-5844.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fissues%2Fissue-5844.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fissues%2Fissue-5844.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5844.thir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `rand` is unsafe and requires unsafe function or block\n   --> $DIR/issue-5844.rs:8:5\n    |\n LL |     issue_5844_aux::rand();"}, {"sha": "6743f0802a0f5dac16da4efbe81aeb1d4fa39056", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,76 +1,76 @@\n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:23:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:24:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:25:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:30:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:31:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:36:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:37:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:38:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:44:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:47:18\n    |\n LL | const name: () = sse2();"}, {"sha": "ec10fca96f9d1ab396df51e0f81180bf3c6329b8", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -20,30 +20,30 @@ impl Quux {\n }\n \n fn foo() {\n-    sse2();              //~ ERROR call to function with `#[target_feature]` is unsafe\n-    avx_bmi2();          //~ ERROR call to function with `#[target_feature]` is unsafe\n-    Quux.avx_bmi2();     //~ ERROR call to function with `#[target_feature]` is unsafe\n+    sse2();              //~ ERROR call to function `sse2` with `#[target_feature]` is unsafe\n+    avx_bmi2();          //~ ERROR call to function `avx_bmi2` with `#[target_feature]` is unsafe\n+    Quux.avx_bmi2();     //~ ERROR call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe\n }\n \n #[target_feature(enable = \"sse2\")]\n fn bar() {\n-    avx_bmi2();          //~ ERROR call to function with `#[target_feature]` is unsafe\n-    Quux.avx_bmi2();     //~ ERROR call to function with `#[target_feature]` is unsafe\n+    avx_bmi2();          //~ ERROR call to function `avx_bmi2` with `#[target_feature]` is unsafe\n+    Quux.avx_bmi2();     //~ ERROR call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe\n }\n \n #[target_feature(enable = \"avx\")]\n fn baz() {\n-    sse2();              //~ ERROR call to function with `#[target_feature]` is unsafe\n-    avx_bmi2();          //~ ERROR call to function with `#[target_feature]` is unsafe\n-    Quux.avx_bmi2();     //~ ERROR call to function with `#[target_feature]` is unsafe\n+    sse2();              //~ ERROR call to function `sse2` with `#[target_feature]` is unsafe\n+    avx_bmi2();          //~ ERROR call to function `avx_bmi2` with `#[target_feature]` is unsafe\n+    Quux.avx_bmi2();     //~ ERROR call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe\n }\n \n #[target_feature(enable = \"avx\")]\n #[target_feature(enable = \"bmi2\")]\n fn qux() {\n-    sse2();              //~ ERROR call to function with `#[target_feature]` is unsafe\n+    sse2();              //~ ERROR call to function `sse2` with `#[target_feature]` is unsafe\n }\n \n-const name: () = sse2(); //~ ERROR call to function with `#[target_feature]` is unsafe\n+const name: () = sse2(); //~ ERROR call to function `sse2` with `#[target_feature]` is unsafe\n \n fn main() {}"}, {"sha": "6743f0802a0f5dac16da4efbe81aeb1d4fa39056", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,76 +1,76 @@\n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:23:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:24:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:25:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:30:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:31:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:36:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:37:5\n    |\n LL |     avx_bmi2();\n    |     ^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:38:5\n    |\n LL |     Quux.avx_bmi2();\n    |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:44:5\n    |\n LL |     sse2();\n    |     ^^^^^^ call to function with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:47:18\n    |\n LL | const name: () = sse2();"}, {"sha": "219c6cb23d049fcb0416bb5289ae610f130a7bcc", "filename": "src/test/ui/threads-sendsync/issue-43733.mir.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,13 +1,13 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-43733.rs:19:5\n+error[E0133]: call to unsafe function `std::thread::$LOCALKEYINNER::<T>::get` is unsafe and requires unsafe function or block\n+  --> $DIR/issue-43733.rs:21:5\n    |\n LL |     __KEY.get(Default::default)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-43733.rs:22:42\n+error[E0133]: call to unsafe function `std::thread::LocalKey::<T>::new` is unsafe and requires unsafe function or block\n+  --> $DIR/issue-43733.rs:26:42\n    |\n LL | static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function"}, {"sha": "e613c2b03e63b21163a0af45103e1db5a9851668", "filename": "src/test/ui/threads-sendsync/issue-43733.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,5 +1,7 @@\n // revisions: mir thir\n // [thir]compile-flags: -Z thir-unsafeck\n+// normalize-stderr-test: \"__FastLocalKeyInner::<T>::get\" -> \"$$LOCALKEYINNER::<T>::get\"\n+// normalize-stderr-test: \"__OsLocalKeyInner::<T>::get\" -> \"$$LOCALKEYINNER::<T>::get\"\n \n #![feature(thread_local)]\n #![feature(cfg_target_thread_local, thread_local_internals)]\n@@ -16,11 +18,14 @@ static __KEY: std::thread::__FastLocalKeyInner<Foo> = std::thread::__FastLocalKe\n static __KEY: std::thread::__OsLocalKeyInner<Foo> = std::thread::__OsLocalKeyInner::new();\n \n fn __getit(_: Option<&mut Option<RefCell<String>>>) -> std::option::Option<&'static Foo> {\n-    __KEY.get(Default::default) //~ ERROR call to unsafe function is unsafe\n+    __KEY.get(Default::default)\n+    //[mir]~^ ERROR call to unsafe function `std::thread::\n+    //[thir]~^^ ERROR call to unsafe function `__\n }\n \n static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);\n-//~^ ERROR call to unsafe function is unsafe\n+//[mir]~^ ERROR call to unsafe function `std::thread::LocalKey::<T>::new` is unsafe\n+//[thir]~^^ ERROR call to unsafe function `LocalKey::<T>::new` is unsafe\n \n fn main() {\n     FOO.with(|foo| println!(\"{}\", foo.borrow()));"}, {"sha": "ea7ff4080486dce986548b72c56054486c6b10f3", "filename": "src/test/ui/threads-sendsync/issue-43733.thir.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,13 +1,13 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-43733.rs:19:5\n+error[E0133]: call to unsafe function `$LOCALKEYINNER::<T>::get` is unsafe and requires unsafe function or block\n+  --> $DIR/issue-43733.rs:21:5\n    |\n LL |     __KEY.get(Default::default)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-43733.rs:22:42\n+error[E0133]: call to unsafe function `LocalKey::<T>::new` is unsafe and requires unsafe function or block\n+  --> $DIR/issue-43733.rs:26:42\n    |\n LL | static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function"}, {"sha": "84704a211372bc7f9b0bfca8831fd63669f4ca4e", "filename": "src/test/ui/threads-sendsync/tls-dtors-are-run-in-a-static-binary.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftls-dtors-are-run-in-a-static-binary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftls-dtors-are-run-in-a-static-binary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftls-dtors-are-run-in-a-static-binary.rs?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n // no-prefer-dynamic\n // ignore-emscripten no threads support\n-\n static mut HIT: bool = false;\n \n struct Foo;"}, {"sha": "214501084b35fd24a3c823bd69fdc3b7a453aa64", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,8 +1,8 @@\n-error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+error: call to unsafe function `unsf` is unsafe and requires unsafe block (error E0133)\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:12:5\n    |\n LL |     unsf();\n-   |     ^^^^^^ call to unsafe function\n+   |     ^^^^^^ call to unsafe function `unsf`\n    |\n note: the lint level is defined here\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:4:9\n@@ -39,11 +39,11 @@ note: the lint level is defined here\n LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^\n \n-error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+error: call to unsafe function `unsf` is unsafe and requires unsafe block (error E0133)\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:27:5\n    |\n LL |     unsf();\n-   |     ^^^^^^ call to unsafe function\n+   |     ^^^^^^ call to unsafe function `unsf`\n    |\n note: the lint level is defined here\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:25:8\n@@ -113,15 +113,15 @@ note: the lint level is defined here\n LL |     #[allow(unsafe_op_in_unsafe_fn)]\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe block\n+error[E0133]: call to unsafe function `unsf` is unsafe and requires unsafe block\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:76:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `unsf` is unsafe and requires unsafe function or block\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:80:9\n    |\n LL |         unsf();"}, {"sha": "aedb27a38da4af86e8d7da17cbf59ea9e3d802f2", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -10,7 +10,7 @@ static mut VOID: () = ();\n \n unsafe fn deny_level() {\n     unsf();\n-    //~^ ERROR call to unsafe function is unsafe and requires unsafe block\n+    //~^ ERROR call to unsafe function `unsf` is unsafe and requires unsafe block\n     *PTR;\n     //~^ ERROR dereference of raw pointer is unsafe and requires unsafe block\n     VOID = ();\n@@ -25,7 +25,7 @@ unsafe fn deny_level() {\n #[deny(warnings)]\n unsafe fn warning_level() {\n     unsf();\n-    //~^ ERROR call to unsafe function is unsafe and requires unsafe block\n+    //~^ ERROR call to unsafe function `unsf` is unsafe and requires unsafe block\n     *PTR;\n     //~^ ERROR dereference of raw pointer is unsafe and requires unsafe block\n     VOID = ();\n@@ -74,10 +74,10 @@ unsafe fn nested_allow_level() {\n \n fn main() {\n     unsf();\n-    //~^ ERROR call to unsafe function is unsafe and requires unsafe block\n+    //~^ ERROR call to unsafe function `unsf` is unsafe and requires unsafe block\n     #[allow(unsafe_op_in_unsafe_fn)]\n     {\n         unsf();\n-        //~^ ERROR call to unsafe function is unsafe and requires unsafe function or block\n+        //~^ ERROR call to unsafe function `unsf` is unsafe and requires unsafe function or block\n     }\n }"}, {"sha": "706a62c272e652a121cff350c86390c5967cd344", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,4 +1,4 @@\n-error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+error: call to unsafe function `unsf` is unsafe and requires unsafe block (error E0133)\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:12:5\n    |\n LL |     unsf();\n@@ -39,7 +39,7 @@ note: the lint level is defined here\n LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^\n \n-error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+error: call to unsafe function `unsf` is unsafe and requires unsafe block (error E0133)\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:27:5\n    |\n LL |     unsf();\n@@ -101,15 +101,15 @@ LL | unsafe fn nested_allow_level() {\n LL |         unsafe { unsf() }\n    |         ^^^^^^ unnecessary `unsafe` block\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe block\n+error[E0133]: call to unsafe function `unsf` is unsafe and requires unsafe block\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:76:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `unsf` is unsafe and requires unsafe function or block\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:80:9\n    |\n LL |         unsf();"}, {"sha": "1a77adf4459d08f1e9dbcc3b56ba920a6d4a47d6", "filename": "src/test/ui/unsafe/unsafe-const-fn.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.mir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `dummy` is unsafe and requires unsafe function or block\n   --> $DIR/unsafe-const-fn.rs:10:18\n    |\n LL | const VAL: u32 = dummy(0xFFFF);"}, {"sha": "1a77adf4459d08f1e9dbcc3b56ba920a6d4a47d6", "filename": "src/test/ui/unsafe/unsafe-const-fn.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.thir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `dummy` is unsafe and requires unsafe function or block\n   --> $DIR/unsafe-const-fn.rs:10:18\n    |\n LL | const VAL: u32 = dummy(0xFFFF);"}, {"sha": "206dbd90a7521e55cbfd7e85cd8cc6b373caa66a", "filename": "src/test/ui/unsafe/unsafe-fn-called-from-safe.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.mir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/unsafe-fn-called-from-safe.rs:7:5\n    |\n LL |     f();"}, {"sha": "37b5c92587c9c049575567dbd3afc59dc29f9d95", "filename": "src/test/ui/unsafe/unsafe-fn-called-from-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.rs?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -4,5 +4,5 @@\n unsafe fn f() { return; }\n \n fn main() {\n-    f(); //~ ERROR call to unsafe function is unsafe\n+    f(); //~ ERROR call to unsafe function `f` is unsafe\n }"}, {"sha": "206dbd90a7521e55cbfd7e85cd8cc6b373caa66a", "filename": "src/test/ui/unsafe/unsafe-fn-called-from-safe.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.thir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/unsafe-fn-called-from-safe.rs:7:5\n    |\n LL |     f();"}, {"sha": "e81dd3b2b4186e83fc7cf56da3d8996b56dfd928", "filename": "src/test/ui/unsafe/unsafe-fn-used-as-value.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.mir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/unsafe-fn-used-as-value.rs:8:5\n    |\n LL |     x();"}, {"sha": "883a9f96d7bd6cbac255b1748d1fbe10471752d1", "filename": "src/test/ui/unsafe/unsafe-fn-used-as-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.rs?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -5,5 +5,5 @@ unsafe fn f() { return; }\n \n fn main() {\n     let x = f;\n-    x();    //~ ERROR call to unsafe function is unsafe\n+    x(); //~ ERROR call to unsafe function `f` is unsafe\n }"}, {"sha": "e81dd3b2b4186e83fc7cf56da3d8996b56dfd928", "filename": "src/test/ui/unsafe/unsafe-fn-used-as-value.thir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.thir.stderr?ref=ec8619dca239f57201a3ceb59e93149659c07b58", "patch": "@@ -1,4 +1,4 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/unsafe-fn-used-as-value.rs:8:5\n    |\n LL |     x();"}]}