{"sha": "8eac450f41c6d94215f5d8c02235cd5917abaa69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYWM0NTBmNDFjNmQ5NDIxNWY1ZDhjMDIyMzVjZDU5MTdhYmFhNjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-23T14:21:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-23T14:21:56Z"}, "message": "implement tt -> ast", "tree": {"sha": "93b6145789f64d2c2c7f2a607c23ed64ced92dc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93b6145789f64d2c2c7f2a607c23ed64ced92dc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eac450f41c6d94215f5d8c02235cd5917abaa69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eac450f41c6d94215f5d8c02235cd5917abaa69", "html_url": "https://github.com/rust-lang/rust/commit/8eac450f41c6d94215f5d8c02235cd5917abaa69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eac450f41c6d94215f5d8c02235cd5917abaa69/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83d6be6cecb19659e289eba63f12ac33dceb3b56", "url": "https://api.github.com/repos/rust-lang/rust/commits/83d6be6cecb19659e289eba63f12ac33dceb3b56", "html_url": "https://github.com/rust-lang/rust/commit/83d6be6cecb19659e289eba63f12ac33dceb3b56"}], "stats": {"total": 60, "additions": 55, "deletions": 5}, "files": [{"sha": "768f335fafb47d267e78d85d977ed0e5182af8db", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eac450f41c6d94215f5d8c02235cd5917abaa69/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eac450f41c6d94215f5d8c02235cd5917abaa69/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=8eac450f41c6d94215f5d8c02235cd5917abaa69", "patch": "@@ -24,7 +24,7 @@ use ra_syntax::SmolStr;\n \n pub use tt::{Delimiter, Punct};\n \n-pub use crate::syntax_bridge::ast_to_token_tree;\n+pub use crate::syntax_bridge::{ast_to_token_tree, token_tree_to_ast_item_list};\n \n /// This struct contains AST for a single `macro_rules` definition. What might\n /// be very confusing is that AST has almost exactly the same shape as"}, {"sha": "521b96d68352d008fd58d221a53dff95c25ebdf3", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8eac450f41c6d94215f5d8c02235cd5917abaa69/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eac450f41c6d94215f5d8c02235cd5917abaa69/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=8eac450f41c6d94215f5d8c02235cd5917abaa69", "patch": "@@ -1,6 +1,6 @@\n-use ra_parser::TokenSource;\n+use ra_parser::{TokenSource, TreeSink, ParseError};\n use ra_syntax::{\n-    AstNode, SyntaxNode, TextRange, SyntaxKind, SmolStr,\n+    AstNode, SyntaxNode, TextRange, SyntaxKind, SmolStr, SyntaxTreeBuilder, TreeArc,\n     ast, SyntaxKind::*, TextUnit\n };\n \n@@ -21,8 +21,12 @@ pub fn ast_to_token_tree(ast: &ast::TokenTree) -> Option<(tt::Subtree, TokenMap)\n }\n \n /// Parses the token tree (result of macro expansion) as a sequence of items\n-pub fn token_tree_to_ast_item_list(tt: &tt::Subtree) -> ast::SourceFile {\n-    unimplemented!()\n+pub fn token_tree_to_ast_item_list(tt: &tt::Subtree) -> TreeArc<ast::SourceFile> {\n+    let token_source = TtTokenSource::new(tt);\n+    let mut tree_sink = TtTreeSink::new(&token_source.tokens);\n+    ra_parser::parse(&token_source, &mut tree_sink);\n+    let syntax = tree_sink.inner.finish();\n+    ast::SourceFile::cast(&syntax).unwrap().to_owned()\n }\n \n impl TokenMap {\n@@ -166,3 +170,49 @@ impl TokenSource for TtTokenSource {\n         self.tokens[pos].text == *kw\n     }\n }\n+\n+#[derive(Default)]\n+struct TtTreeSink<'a> {\n+    buf: String,\n+    tokens: &'a [Tok],\n+    text_pos: TextUnit,\n+    token_pos: usize,\n+    inner: SyntaxTreeBuilder,\n+}\n+\n+impl<'a> TtTreeSink<'a> {\n+    fn new(tokens: &'a [Tok]) -> TtTreeSink {\n+        TtTreeSink {\n+            buf: String::new(),\n+            tokens,\n+            text_pos: 0.into(),\n+            token_pos: 0,\n+            inner: SyntaxTreeBuilder::default(),\n+        }\n+    }\n+}\n+\n+impl<'a> TreeSink for TtTreeSink<'a> {\n+    fn leaf(&mut self, kind: SyntaxKind, n_tokens: u8) {\n+        for _ in 0..n_tokens {\n+            self.buf += self.tokens[self.token_pos].text.as_str();\n+            self.token_pos += 1;\n+        }\n+        self.text_pos += TextUnit::of_str(&self.buf);\n+        let text = SmolStr::new(self.buf.as_str());\n+        self.buf.clear();\n+        self.inner.leaf(kind, text)\n+    }\n+\n+    fn start_branch(&mut self, kind: SyntaxKind) {\n+        self.inner.start_branch(kind);\n+    }\n+\n+    fn finish_branch(&mut self) {\n+        self.inner.finish_branch();\n+    }\n+\n+    fn error(&mut self, error: ParseError) {\n+        self.inner.error(error, self.text_pos)\n+    }\n+}"}]}