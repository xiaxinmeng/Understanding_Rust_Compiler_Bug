{"sha": "d712e529405b0ef5719c81ae620c88a97db78d93", "node_id": "C_kwDOAAsO6NoAKGQ3MTJlNTI5NDA1YjBlZjU3MTljODFhZTYyMGM4OGE5N2RiNzhkOTM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-25T13:46:06Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-25T14:01:15Z"}, "message": "fix: Fix process-changes not deduplicating changes correctly", "tree": {"sha": "a69bd5dfb6576ebd0e8144939f64c41883fcfa60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a69bd5dfb6576ebd0e8144939f64c41883fcfa60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d712e529405b0ef5719c81ae620c88a97db78d93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d712e529405b0ef5719c81ae620c88a97db78d93", "html_url": "https://github.com/rust-lang/rust/commit/d712e529405b0ef5719c81ae620c88a97db78d93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d712e529405b0ef5719c81ae620c88a97db78d93/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6ad8a2edcbe5e9614f71308d43f6fb0cbf7ceef", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6ad8a2edcbe5e9614f71308d43f6fb0cbf7ceef", "html_url": "https://github.com/rust-lang/rust/commit/e6ad8a2edcbe5e9614f71308d43f6fb0cbf7ceef"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "52f976e4576afafb481c99d84e1c2616a2ed792c", "filename": "crates/proc-macro-api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d712e529405b0ef5719c81ae620c88a97db78d93/crates%2Fproc-macro-api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d712e529405b0ef5719c81ae620c88a97db78d93/crates%2Fproc-macro-api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Flib.rs?ref=d712e529405b0ef5719c81ae620c88a97db78d93", "patch": "@@ -121,7 +121,7 @@ impl ProcMacroServer {\n     }\n \n     pub fn load_dylib(&self, dylib: MacroDylib) -> Result<Vec<ProcMacro>, ServerError> {\n-        let _p = profile::span(\"ProcMacroClient::by_dylib_path\");\n+        let _p = profile::span(\"ProcMacroClient::load_dylib\");\n         let macros =\n             self.process.lock().unwrap_or_else(|e| e.into_inner()).find_proc_macros(&dylib.path)?;\n "}, {"sha": "de11abdcf829fca65d67a70e2415d414b33fe2ef", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d712e529405b0ef5719c81ae620c88a97db78d93/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d712e529405b0ef5719c81ae620c88a97db78d93/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=d712e529405b0ef5719c81ae620c88a97db78d93", "patch": "@@ -3,7 +3,7 @@\n //!\n //! Each tick provides an immutable snapshot of the state as `WorldSnapshot`.\n \n-use std::{sync::Arc, time::Instant};\n+use std::{mem, sync::Arc, time::Instant};\n \n use crossbeam_channel::{unbounded, Receiver, Sender};\n use flycheck::FlycheckHandle;\n@@ -197,37 +197,51 @@ impl GlobalState {\n             // We need to fix up the changed events a bit, if we have a create or modify for a file\n             // id that is followed by a delete we actually no longer observe the file text from the\n             // create or modify which may cause problems later on\n+            let mut collapsed_create_delete = false;\n             changed_files.dedup_by(|a, b| {\n                 use vfs::ChangeKind::*;\n \n+                let has_collapsed_create_delete = mem::replace(&mut collapsed_create_delete, false);\n+\n                 if a.file_id != b.file_id {\n                     return false;\n                 }\n \n-                match (a.change_kind, b.change_kind) {\n+                // true => delete the second element (a), we swap them here as they are inverted by dedup_by\n+                match (b.change_kind, a.change_kind) {\n                     // duplicate can be merged\n                     (Create, Create) | (Modify, Modify) | (Delete, Delete) => true,\n                     // just leave the create, modify is irrelevant\n-                    (Create, Modify) => {\n-                        std::mem::swap(a, b);\n+                    (Create, Modify) => true,\n+                    // modify becomes irrelevant if the file is deleted\n+                    (Modify, Delete) => {\n+                        mem::swap(a, b);\n+                        true\n+                    }\n+                    // Remove the create message, and in the following loop, also remove the delete\n+                    (Create, Delete) => {\n+                        collapsed_create_delete = true;\n+                        b.change_kind = Delete;\n+                        true\n+                    }\n+                    // trailing delete from earlier\n+                    (Delete, Create | Modify) if has_collapsed_create_delete => {\n+                        b.change_kind = Create;\n                         true\n                     }\n-                    // modify becomes irrelevant if the file is deleted\n-                    (Modify, Delete) => true,\n-                    // we should fully remove this occurrence,\n-                    // but leaving just a delete works as well\n-                    (Create, Delete) => true,\n                     // this is equivalent to a modify\n                     (Delete, Create) => {\n-                        a.change_kind = Modify;\n+                        b.change_kind = Modify;\n                         true\n                     }\n                     // can't really occur\n                     (Modify, Create) => false,\n                     (Delete, Modify) => false,\n                 }\n             });\n-\n+            if collapsed_create_delete {\n+                changed_files.pop();\n+            }\n             for file in &changed_files {\n                 if let Some(path) = vfs.file_path(file.file_id).as_path() {\n                     let path = path.to_path_buf();"}, {"sha": "3d7342d191378623dce89a6772169290dc6f1c7f", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d712e529405b0ef5719c81ae620c88a97db78d93/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d712e529405b0ef5719c81ae620c88a97db78d93/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=d712e529405b0ef5719c81ae620c88a97db78d93", "patch": "@@ -362,7 +362,7 @@ impl GlobalState {\n             let loader = &mut self.loader;\n             let mem_docs = &self.mem_docs;\n             let mut load = move |path: &AbsPath| {\n-                let _p = profile::span(\"GlobalState::load\");\n+                let _p = profile::span(\"switch_workspaces::load\");\n                 let vfs_path = vfs::VfsPath::from(path.to_path_buf());\n                 if !mem_docs.contains(&vfs_path) {\n                     let contents = loader.handle.load_sync(path);\n@@ -584,10 +584,10 @@ pub(crate) fn load_proc_macro(\n     path: &AbsPath,\n     dummy_replace: &[Box<str>],\n ) -> ProcMacroLoadResult {\n+    let server = server.map_err(ToOwned::to_owned)?;\n     let res: Result<Vec<_>, String> = (|| {\n         let dylib = MacroDylib::new(path.to_path_buf())\n             .map_err(|io| format!(\"Proc-macro dylib loading failed: {io}\"))?;\n-        let server = server.map_err(ToOwned::to_owned)?;\n         let vec = server.load_dylib(dylib).map_err(|e| format!(\"{e}\"))?;\n         if vec.is_empty() {\n             return Err(\"proc macro library returned no proc macros\".to_string());"}, {"sha": "14972d29074162c5f06ae1105a79f421a57239d5", "filename": "crates/vfs/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d712e529405b0ef5719c81ae620c88a97db78d93/crates%2Fvfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d712e529405b0ef5719c81ae620c88a97db78d93/crates%2Fvfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Flib.rs?ref=d712e529405b0ef5719c81ae620c88a97db78d93", "patch": "@@ -75,6 +75,7 @@ pub struct Vfs {\n }\n \n /// Changed file in the [`Vfs`].\n+#[derive(Debug)]\n pub struct ChangedFile {\n     /// Id of the changed file\n     pub file_id: FileId,\n@@ -161,9 +162,9 @@ impl Vfs {\n         let file_id = self.alloc_file_id(path);\n         let change_kind = match (&self.get(file_id), &contents) {\n             (None, None) => return false,\n+            (Some(old), Some(new)) if old == new => return false,\n             (None, Some(_)) => ChangeKind::Create,\n             (Some(_), None) => ChangeKind::Delete,\n-            (Some(old), Some(new)) if old == new => return false,\n             (Some(_), Some(_)) => ChangeKind::Modify,\n         };\n "}]}