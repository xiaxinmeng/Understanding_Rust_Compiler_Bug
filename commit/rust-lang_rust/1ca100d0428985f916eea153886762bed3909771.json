{"sha": "1ca100d0428985f916eea153886762bed3909771", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYTEwMGQwNDI4OTg1ZjkxNmVlYTE1Mzg4Njc2MmJlZDM5MDk3NzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-12T01:01:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-12T01:01:06Z"}, "message": "Auto merge of #38605 - estebank:fix-38371, r=nikomatsakis\n\nSuggest solutions for `fn foo(&foo: Foo)`\n\nFor a given file:\n\n```rust\nstruct Foo {}\n\nfn foo(&foo: Foo) {}\n```\n\nsuggest:\n\n```\nerror[E0308]: mismatched types\n --> file.rs:3:8\n  |\n3 | fn foo(&foo: Foo) {}\n  |        ^^^^ expected struct `Foo`, found reference\n  |\n  = note: expected type `Foo`\n  = note:    found type `&_`\n  = help: did you mean `foo: &Foo`?\n```\n\nFix #38371.", "tree": {"sha": "e8610f263985913c19297202fbd0b1f1c5a419b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8610f263985913c19297202fbd0b1f1c5a419b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ca100d0428985f916eea153886762bed3909771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ca100d0428985f916eea153886762bed3909771", "html_url": "https://github.com/rust-lang/rust/commit/1ca100d0428985f916eea153886762bed3909771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ca100d0428985f916eea153886762bed3909771/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b27c7095606ad9386a7038d7af03abd7f948f02f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b27c7095606ad9386a7038d7af03abd7f948f02f", "html_url": "https://github.com/rust-lang/rust/commit/b27c7095606ad9386a7038d7af03abd7f948f02f"}, {"sha": "d723e02dfc94e8ab2e8d3cb7930febeed0a7651c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d723e02dfc94e8ab2e8d3cb7930febeed0a7651c", "html_url": "https://github.com/rust-lang/rust/commit/d723e02dfc94e8ab2e8d3cb7930febeed0a7651c"}], "stats": {"total": 128, "additions": 120, "deletions": 8}, "files": [{"sha": "99c664cebeaea3af28a238ffdd1953e14a9f77bb", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca100d0428985f916eea153886762bed3909771/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=1ca100d0428985f916eea153886762bed3909771", "patch": "@@ -27,9 +27,17 @@ use syntax_pos::Span;\n \n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn check_pat(&self, pat: &'gcx hir::Pat, expected: Ty<'tcx>) {\n+        self.check_pat_arg(pat, expected, false);\n+    }\n+\n+    /// The `is_arg` argument indicates whether this pattern is the\n+    /// *outermost* pattern in an argument (e.g., in `fn foo(&x:\n+    /// &u32)`, it is true for the `&x` pattern but not `x`). This is\n+    /// used to tailor error reporting.\n+    pub fn check_pat_arg(&self, pat: &'gcx hir::Pat, expected: Ty<'tcx>, is_arg: bool) {\n         let tcx = self.tcx;\n \n-        debug!(\"check_pat(pat={:?},expected={:?})\", pat, expected);\n+        debug!(\"check_pat(pat={:?},expected={:?},is_arg={})\", pat, expected, is_arg);\n \n         let ty = match pat.node {\n             PatKind::Wild => {\n@@ -202,6 +210,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     // can, to avoid creating needless variables.  This\n                     // also helps with the bad interactions of the given\n                     // hack detailed in (*) below.\n+                    debug!(\"check_pat_arg: expected={:?}\", expected);\n                     let (rptr_ty, inner_ty) = match expected.sty {\n                         ty::TyRef(_, mt) if mt.mutbl == mutbl => {\n                             (expected, mt.ty)\n@@ -212,7 +221,25 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             let mt = ty::TypeAndMut { ty: inner_ty, mutbl: mutbl };\n                             let region = self.next_region_var(infer::PatternRegion(pat.span));\n                             let rptr_ty = tcx.mk_ref(region, mt);\n-                            self.demand_eqtype(pat.span, expected, rptr_ty);\n+                            debug!(\"check_pat_arg: demanding {:?} = {:?}\", expected, rptr_ty);\n+                            let err = self.demand_eqtype_diag(pat.span, expected, rptr_ty);\n+\n+                            // Look for a case like `fn foo(&foo: u32)` and suggest\n+                            // `fn foo(foo: &u32)`\n+                            if let Some(mut err) = err {\n+                                if is_arg {\n+                                    if let PatKind::Binding(..) = inner.node {\n+                                        if let Ok(snippet) = self.sess().codemap()\n+                                                                        .span_to_snippet(pat.span)\n+                                        {\n+                                            err.help(&format!(\"did you mean `{}: &{}`?\",\n+                                                              &snippet[1..],\n+                                                              expected));\n+                                        }\n+                                    }\n+                                }\n+                                err.emit();\n+                            }\n                             (rptr_ty, inner_ty)\n                         }\n                     };"}, {"sha": "a77887cd221deb52e48b2e5f601365d01d00522c", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca100d0428985f916eea153886762bed3909771/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=1ca100d0428985f916eea153886762bed3909771", "patch": "@@ -19,6 +19,7 @@ use syntax_pos::{self, Span};\n use rustc::hir;\n use rustc::hir::def::Def;\n use rustc::ty::{self, AssociatedItem};\n+use errors::DiagnosticBuilder;\n \n use super::method::probe;\n \n@@ -38,20 +39,29 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn demand_eqtype(&self, sp: Span, expected: Ty<'tcx>, actual: Ty<'tcx>) {\n-        self.demand_eqtype_with_origin(&self.misc(sp), expected, actual);\n+        if let Some(mut err) = self.demand_eqtype_diag(sp, expected, actual) {\n+            err.emit();\n+        }\n+    }\n+\n+    pub fn demand_eqtype_diag(&self,\n+                             sp: Span,\n+                             expected: Ty<'tcx>,\n+                             actual: Ty<'tcx>) -> Option<DiagnosticBuilder<'tcx>> {\n+        self.demand_eqtype_with_origin(&self.misc(sp), expected, actual)\n     }\n \n     pub fn demand_eqtype_with_origin(&self,\n                                      cause: &ObligationCause<'tcx>,\n                                      expected: Ty<'tcx>,\n-                                     actual: Ty<'tcx>)\n-    {\n+                                     actual: Ty<'tcx>) -> Option<DiagnosticBuilder<'tcx>> {\n         match self.eq_types(false, cause, actual, expected) {\n             Ok(InferOk { obligations, value: () }) => {\n                 self.register_predicates(obligations);\n+                None\n             },\n             Err(e) => {\n-                self.report_mismatched_types(cause, expected, actual, e).emit();\n+                Some(self.report_mismatched_types(cause, expected, actual, e))\n             }\n         }\n     }"}, {"sha": "0b316c5d37525261de55f0c47206aa7a09635163", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca100d0428985f916eea153886762bed3909771/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1ca100d0428985f916eea153886762bed3909771", "patch": "@@ -796,7 +796,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n         fcx.register_old_wf_obligation(arg_ty, arg.pat.span, traits::MiscObligation);\n \n         // Check the pattern.\n-        fcx.check_pat(&arg.pat, arg_ty);\n+        fcx.check_pat_arg(&arg.pat, arg_ty, true);\n         fcx.write_ty(arg.id, arg_ty);\n     }\n "}, {"sha": "4c124cdd60c0fbc34bdf3c2db05cd29425b6f036", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca100d0428985f916eea153886762bed3909771/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=1ca100d0428985f916eea153886762bed3909771", "patch": "@@ -505,7 +505,9 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n         debug!(\"check_method_receiver: receiver ty = {:?}\", rcvr_ty);\n \n         let cause = fcx.cause(span, ObligationCauseCode::MethodReceiver);\n-        fcx.demand_eqtype_with_origin(&cause, rcvr_ty, self_arg_ty);\n+        if let Some(mut err) = fcx.demand_eqtype_with_origin(&cause, rcvr_ty, self_arg_ty) {\n+            err.emit();\n+        }\n     }\n \n     fn check_variances_for_type_defn(&self,"}, {"sha": "cf66330017f58434c5da6cbd1ebaafcab4f0cf12", "filename": "src/test/ui/mismatched_types/issue-38371.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca100d0428985f916eea153886762bed3909771/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.rs?ref=1ca100d0428985f916eea153886762bed3909771", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(slice_patterns)]\n+\n+\n+struct Foo {\n+}\n+\n+fn foo(&foo: Foo) {\n+}\n+\n+fn bar(foo: Foo) {\n+}\n+\n+fn qux(foo: &Foo) {\n+}\n+\n+fn zar(&foo: &Foo) {\n+}\n+\n+fn agh(&&bar: &u32) {\n+}\n+\n+fn bgh(&&bar: u32) {\n+}\n+\n+fn ugh(&[bar]: &u32) {\n+}\n+\n+fn main() {}"}, {"sha": "b0e56094fcff3930f9d19f9fe785cf6386a6181a", "filename": "src/test/ui/mismatched_types/issue-38371.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ca100d0428985f916eea153886762bed3909771/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr?ref=1ca100d0428985f916eea153886762bed3909771", "patch": "@@ -0,0 +1,36 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-38371.rs:16:8\n+   |\n+16 | fn foo(&foo: Foo) {\n+   |        ^^^^ expected struct `Foo`, found reference\n+   |\n+   = note: expected type `Foo`\n+   = note:    found type `&_`\n+   = help: did you mean `foo: &Foo`?\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-38371.rs:28:9\n+   |\n+28 | fn agh(&&bar: &u32) {\n+   |         ^^^^ expected u32, found reference\n+   |\n+   = note: expected type `u32`\n+   = note:    found type `&_`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-38371.rs:31:8\n+   |\n+31 | fn bgh(&&bar: u32) {\n+   |        ^^^^^ expected u32, found reference\n+   |\n+   = note: expected type `u32`\n+   = note:    found type `&_`\n+\n+error[E0529]: expected an array or slice, found `u32`\n+  --> $DIR/issue-38371.rs:34:9\n+   |\n+34 | fn ugh(&[bar]: &u32) {\n+   |         ^^^^^ pattern cannot match with input type `u32`\n+\n+error: aborting due to 4 previous errors\n+"}]}