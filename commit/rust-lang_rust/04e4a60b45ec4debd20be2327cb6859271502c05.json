{"sha": "04e4a60b45ec4debd20be2327cb6859271502c05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZTRhNjBiNDVlYzRkZWJkMjBiZTIzMjdjYjY4NTkyNzE1MDJjMDU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-01-09T17:07:34Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-01-09T17:11:26Z"}, "message": "Deduplicate and document logic", "tree": {"sha": "368f7709d1ea0b981a610b6fb6f6921534a1cc46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/368f7709d1ea0b981a610b6fb6f6921534a1cc46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04e4a60b45ec4debd20be2327cb6859271502c05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04e4a60b45ec4debd20be2327cb6859271502c05", "html_url": "https://github.com/rust-lang/rust/commit/04e4a60b45ec4debd20be2327cb6859271502c05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04e4a60b45ec4debd20be2327cb6859271502c05/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "690476191db427ab8603876ef9a8a929222e71aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/690476191db427ab8603876ef9a8a929222e71aa", "html_url": "https://github.com/rust-lang/rust/commit/690476191db427ab8603876ef9a8a929222e71aa"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "77c6c3683641726fb5d3850183da315fb0c51424", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/04e4a60b45ec4debd20be2327cb6859271502c05/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e4a60b45ec4debd20be2327cb6859271502c05/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=04e4a60b45ec4debd20be2327cb6859271502c05", "patch": "@@ -703,10 +703,29 @@ impl EmitterWriter {\n         }\n     }\n \n-    fn msg_with_padding(&self, msg: &str, padding: usize) -> String {\n-        let padding = (0..padding)\n+    /// Add a left margin to every line but the first, given a padding length and the label being\n+    /// displayed.\n+    fn msg_with_padding(&self, msg: &str, padding: usize, label: &str) -> String {\n+        // The extra 5 ` ` is padding that's always needed to align to the `note: `:\n+        //\n+        //   error: message\n+        //     --> file.rs:13:20\n+        //      |\n+        //   13 |     <CODE>\n+        //      |      ^^^^\n+        //      |\n+        //      = note: multiline\n+        //              message\n+        //   ++^^^----xx\n+        //    |  |   | |\n+        //    |  |   | magic `2`\n+        //    |  |   length of label\n+        //    |  magic `3`\n+        //    `max_line_num_len`\n+        let padding = (0..padding + label.len() + 5)\n             .map(|_| \" \")\n             .collect::<String>();\n+\n         msg.split('\\n').enumerate().fold(\"\".to_owned(), |mut acc, x| {\n             if x.0 != 0 {\n                 acc.push_str(\"\\n\");\n@@ -737,8 +756,7 @@ impl EmitterWriter {\n             buffer.append(0, &level.to_string(), Style::HeaderMsg);\n             buffer.append(0, \": \", Style::NoStyle);\n \n-            // The extra 3 ` ` is the padding that's always needed to align to the `note: `.\n-            let message = self.msg_with_padding(msg, max_line_num_len + \"note: \".len() + 3);\n+            let message = self.msg_with_padding(msg, max_line_num_len, \"note\");\n             buffer.append(0, &message, Style::NoStyle);\n         } else {\n             buffer.append(0, &level.to_string(), Style::Level(level.clone()));\n@@ -873,8 +891,7 @@ impl EmitterWriter {\n             buffer.append(0, &level.to_string(), Style::Level(level.clone()));\n             buffer.append(0, \": \", Style::HeaderMsg);\n \n-            // The extra 3 ` ` is the padding that's always needed to align to the `suggestion: `.\n-            let message = self.msg_with_padding(msg, max_line_num_len + \"suggestion: \".len() + 3);\n+            let message = self.msg_with_padding(msg, max_line_num_len, \"suggestion\");\n             buffer.append(0, &message, Style::HeaderMsg);\n \n             let lines = cm.span_to_lines(primary_span).unwrap();"}]}