{"sha": "c6c88070c4f25cd3710f03b7461cb277de8d3cc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2Yzg4MDcwYzRmMjVjZDM3MTBmMDNiNzQ2MWNiMjc3ZGU4ZDNjYzU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-03T09:09:11Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-03T09:09:11Z"}, "message": "Merge #1068\n\n1068: profiling crate first draft r=matklad a=pasa\n\nI've made this first draft for #961 \r\nCould you look at it? Is this something what you are looking for?\r\nIt has lack of tests. I can't figure out how to test stderr output in rust right now. Do you have some clues?\r\nAdditionally I'm thinking about to implement procedural  macros to annotate methods with this profiler. Will it be helpful?\r\n\r\n\n\nCo-authored-by: Sergey Parilin <sergey.parilin@fxdd.com>", "tree": {"sha": "cfe6ec2fb43dcfb9a7f1c5698aaac0d17b2bf78a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfe6ec2fb43dcfb9a7f1c5698aaac0d17b2bf78a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6c88070c4f25cd3710f03b7461cb277de8d3cc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6c88070c4f25cd3710f03b7461cb277de8d3cc5", "html_url": "https://github.com/rust-lang/rust/commit/c6c88070c4f25cd3710f03b7461cb277de8d3cc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "b8e58d4a2f317fe300f13416858f33e860138c4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8e58d4a2f317fe300f13416858f33e860138c4d", "html_url": "https://github.com/rust-lang/rust/commit/b8e58d4a2f317fe300f13416858f33e860138c4d"}, {"sha": "b74449e9952846a8ea66c3507e52c24348d6dbc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b74449e9952846a8ea66c3507e52c24348d6dbc9", "html_url": "https://github.com/rust-lang/rust/commit/b74449e9952846a8ea66c3507e52c24348d6dbc9"}], "stats": {"total": 203, "additions": 193, "deletions": 10}, "files": [{"sha": "06117ceaf860e26827ad181aee14c463d9041a2b", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c6c88070c4f25cd3710f03b7461cb277de8d3cc5", "patch": "@@ -931,6 +931,7 @@ dependencies = [\n  \"ra_db 0.1.0\",\n  \"ra_hir 0.1.0\",\n  \"ra_ide_api 0.1.0\",\n+ \"ra_prof 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"tools 0.1.0\",\n ]\n@@ -970,6 +971,7 @@ dependencies = [\n  \"ra_arena 0.1.0\",\n  \"ra_db 0.1.0\",\n  \"ra_mbe 0.1.0\",\n+ \"ra_prof 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"ra_tt 0.1.0\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1018,6 +1020,7 @@ dependencies = [\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\",\n  \"ra_ide_api 0.1.0\",\n+ \"ra_prof 0.1.0\",\n  \"ra_project_model 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"ra_text_edit 0.1.0\",\n@@ -1050,6 +1053,13 @@ dependencies = [\n  \"drop_bomb 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"ra_prof\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"ra_project_model\"\n version = \"0.1.0\""}, {"sha": "328b2436f67cb5a9225edc24eef518fdda3e5916", "filename": "crates/ra_cli/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/crates%2Fra_cli%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/crates%2Fra_cli%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2FCargo.toml?ref=c6c88070c4f25cd3710f03b7461cb277de8d3cc5", "patch": "@@ -18,3 +18,4 @@ tools = { path = \"../tools\" }\n ra_batch = { path = \"../ra_batch\" }\n ra_hir = { path = \"../ra_hir\" }\n ra_db = { path = \"../ra_db\" }\n+ra_prof = { path = \"../ra_prof\" }"}, {"sha": "45555be6e12b5111d1d11ca4ca5b05d261b9bf43", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=c6c88070c4f25cd3710f03b7461cb277de8d3cc5", "patch": "@@ -1,12 +1,13 @@\n mod analysis_stats;\n \n-use std::{fs, io::Read, path::Path, time::Instant};\n+use std::{fs, io::Read, path::Path};\n \n use clap::{App, Arg, SubCommand};\n use ra_ide_api::file_structure;\n use ra_syntax::{SourceFile, TreeArc, AstNode};\n use tools::collect_tests;\n use flexi_logger::Logger;\n+use ra_prof::profile;\n \n type Result<T> = ::std::result::Result<T, failure::Error>;\n \n@@ -27,13 +28,11 @@ fn main() -> Result<()> {\n         .get_matches();\n     match matches.subcommand() {\n         (\"parse\", Some(matches)) => {\n-            let start = Instant::now();\n+            let _p = profile(\"parsing\");\n             let file = file()?;\n-            let elapsed = start.elapsed();\n             if !matches.is_present(\"no-dump\") {\n                 println!(\"{}\", file.syntax().debug_dump());\n             }\n-            eprintln!(\"parsing: {:?}\", elapsed);\n             ::std::mem::forget(file);\n         }\n         (\"symbols\", _) => {"}, {"sha": "a2858dad9dd9637836f16545fea63de071e49005", "filename": "crates/ra_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/crates%2Fra_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/crates%2Fra_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2FCargo.toml?ref=c6c88070c4f25cd3710f03b7461cb277de8d3cc5", "patch": "@@ -19,6 +19,7 @@ ra_db = { path = \"../ra_db\" }\n mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }\n tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n test_utils = { path = \"../test_utils\" }\n+ra_prof = {path = \"../ra_prof\" }\n \n [dev-dependencies]\n flexi_logger = \"0.11.0\""}, {"sha": "4ae04514a38302aa457d4479e383baadc2452488", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=c6c88070c4f25cd3710f03b7461cb277de8d3cc5", "patch": "@@ -60,6 +60,7 @@ use ra_arena::{Arena, RawId, impl_arena_id};\n use ra_db::{FileId, Edition};\n use test_utils::tested_by;\n use ra_syntax::ast;\n+use ra_prof::profile;\n \n use crate::{\n     ModuleDef, Name, Crate, Module,\n@@ -181,7 +182,7 @@ enum ReachedFixedPoint {\n \n impl CrateDefMap {\n     pub(crate) fn crate_def_map_query(db: &impl DefDatabase, krate: Crate) -> Arc<CrateDefMap> {\n-        let start = std::time::Instant::now();\n+        let _p = profile(\"crate_def_map_query\");\n         let def_map = {\n             let edition = krate.edition(db);\n             let mut modules: Arena<CrateModuleId, ModuleData> = Arena::default();\n@@ -198,7 +199,6 @@ impl CrateDefMap {\n             }\n         };\n         let def_map = collector::collect_defs(db, def_map);\n-        log::info!(\"crate_def_map_query: {:?}\", start.elapsed());\n         Arc::new(def_map)\n     }\n "}, {"sha": "bc181e4eb6b67889454fce49b06825582fe68b9f", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=c6c88070c4f25cd3710f03b7461cb277de8d3cc5", "patch": "@@ -27,6 +27,7 @@ ra_ide_api = { path = \"../ra_ide_api\" }\n ra_arena = { path = \"../ra_arena\" }\n gen_lsp_server = { path = \"../gen_lsp_server\" }\n ra_project_model = { path = \"../ra_project_model\" }\n+ra_prof = { path = \"../ra_prof\" }\n \n [dev-dependencies]\n tempfile = \"3\""}, {"sha": "eb4091a3d85525910f4e15a5b8ed9fde2cf61438", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=c6c88070c4f25cd3710f03b7461cb277de8d3cc5", "patch": "@@ -3,6 +3,7 @@ use flexi_logger::{Duplicate, Logger};\n use gen_lsp_server::{run_server, stdio_transport};\n \n use ra_lsp_server::{Result, InitializationOptions};\n+use ra_prof;\n \n fn main() -> Result<()> {\n     ::std::env::set_var(\"RUST_BACKTRACE\", \"short\");\n@@ -11,6 +12,15 @@ fn main() -> Result<()> {\n         Ok(ref v) if v == \"1\" => logger.log_to_file().directory(\"log\").start()?,\n         _ => logger.start()?,\n     };\n+    let prof_depth = match ::std::env::var(\"RA_PROFILE_DEPTH\") {\n+        Ok(ref d) => d.parse()?,\n+        _ => 0,\n+    };\n+    let profile_allowed = match ::std::env::var(\"RA_PROFILE\") {\n+        Ok(ref p) => p.split(\";\").map(String::from).collect(),\n+        _ => Vec::new(),\n+    };\n+    ra_prof::set_filter(ra_prof::Filter::new(prof_depth, profile_allowed));\n     log::info!(\"lifecycle: server started\");\n     match ::std::panic::catch_unwind(main_inner) {\n         Ok(res) => {"}, {"sha": "82410bee30e2c47882f1d17ac66cf031334adc2d", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=c6c88070c4f25cd3710f03b7461cb277de8d3cc5", "patch": "@@ -24,6 +24,7 @@ use crate::{\n     Result,\n     InitializationOptions,\n };\n+use ra_prof::profile;\n \n #[derive(Debug, Fail)]\n #[fail(display = \"Language Server request failed with {}. ({})\", code, message)]\n@@ -181,7 +182,7 @@ fn main_loop_inner(\n             recv(libdata_receiver) -> data => Event::Lib(data.unwrap())\n         };\n         log::info!(\"loop_turn = {:?}\", event);\n-        let start = std::time::Instant::now();\n+        let _p = profile(\"loop_turn\");\n         let mut state_changed = false;\n         match event {\n             Event::Task(task) => on_task(task, msg_sender, pending_requests),\n@@ -235,10 +236,9 @@ fn main_loop_inner(\n             in_flight_libraries += 1;\n             let sender = libdata_sender.clone();\n             pool.execute(move || {\n-                let start = ::std::time::Instant::now();\n                 log::info!(\"indexing {:?} ... \", root);\n+                let _p = profile(&format!(\"indexed {:?}\", root));\n                 let data = LibraryData::prepare(root, files);\n-                log::info!(\"indexed {:?} {:?}\", start.elapsed(), root);\n                 sender.send(data).unwrap();\n             });\n         }\n@@ -266,7 +266,6 @@ fn main_loop_inner(\n                 subs.subscriptions(),\n             )\n         }\n-        log::info!(\"loop_turn = {:?}\", start.elapsed());\n     }\n }\n "}, {"sha": "19ce217831369b7ec17f3bfa9eabaeb17a40b591", "filename": "crates/ra_prof/Cargo.toml", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/crates%2Fra_prof%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/crates%2Fra_prof%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2FCargo.toml?ref=c6c88070c4f25cd3710f03b7461cb277de8d3cc5", "patch": "@@ -0,0 +1,9 @@\n+[package]\n+edition = \"2018\"\n+name = \"ra_prof\"\n+version = \"0.1.0\"\n+authors = [\"rust-analyzer developers\"]\n+publish = false\n+\n+[dependencies]\n+lazy_static = \"1.3.0\"\n\\ No newline at end of file"}, {"sha": "abddff960addd7ab673027ade7c95e4e7a405ef3", "filename": "crates/ra_prof/src/lib.rs", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c88070c4f25cd3710f03b7461cb277de8d3cc5/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=c6c88070c4f25cd3710f03b7461cb277de8d3cc5", "patch": "@@ -0,0 +1,153 @@\n+use std::cell::RefCell;\n+use std::time::{Duration, Instant};\n+use std::mem;\n+use std::io::{stderr, Write};\n+use std::iter::repeat;\n+use std::collections::{HashSet};\n+use std::default::Default;\n+use std::iter::FromIterator;\n+use std::sync::RwLock;\n+use lazy_static::lazy_static;\n+\n+pub fn set_filter(f: Filter) {\n+    let set = HashSet::from_iter(f.allowed.iter().cloned());\n+    let mut old = FILTER.write().unwrap();\n+    let filter_data = FilterData { depth: f.depth, allowed: set, version: old.version + 1 };\n+    *old = filter_data;\n+}\n+\n+pub fn profile(desc: &str) -> Profiler {\n+    PROFILE_STACK.with(|stack| {\n+        let mut stack = stack.borrow_mut();\n+        if stack.starts.len() == 0 {\n+            match FILTER.try_read() {\n+                Ok(f) => {\n+                    if f.version > stack.filter_data.version {\n+                        stack.filter_data = f.clone();\n+                    }\n+                }\n+                Err(_) => (),\n+            };\n+        }\n+        let desc_str = desc.to_string();\n+        if desc_str.is_empty() {\n+            Profiler { desc: None }\n+        } else if stack.starts.len() < stack.filter_data.depth\n+            && stack.filter_data.allowed.contains(&desc_str)\n+        {\n+            stack.starts.push(Instant::now());\n+            Profiler { desc: Some(desc_str) }\n+        } else {\n+            Profiler { desc: None }\n+        }\n+    })\n+}\n+\n+pub struct Profiler {\n+    desc: Option<String>,\n+}\n+\n+pub struct Filter {\n+    depth: usize,\n+    allowed: Vec<String>,\n+}\n+\n+impl Filter {\n+    pub fn new(depth: usize, allowed: Vec<String>) -> Filter {\n+        Filter { depth, allowed }\n+    }\n+}\n+\n+struct ProfileStack {\n+    starts: Vec<Instant>,\n+    messages: Vec<Message>,\n+    filter_data: FilterData,\n+}\n+\n+struct Message {\n+    level: usize,\n+    duration: Duration,\n+    message: String,\n+}\n+\n+impl ProfileStack {\n+    fn new() -> ProfileStack {\n+        ProfileStack { starts: Vec::new(), messages: Vec::new(), filter_data: Default::default() }\n+    }\n+}\n+\n+#[derive(Default, Clone)]\n+struct FilterData {\n+    depth: usize,\n+    version: usize,\n+    allowed: HashSet<String>,\n+}\n+\n+lazy_static! {\n+    static ref FILTER: RwLock<FilterData> = RwLock::new(Default::default());\n+}\n+\n+thread_local!(static PROFILE_STACK: RefCell<ProfileStack> = RefCell::new(ProfileStack::new()));\n+\n+impl Drop for Profiler {\n+    fn drop(&mut self) {\n+        match self {\n+            Profiler { desc: Some(desc) } => {\n+                PROFILE_STACK.with(|stack| {\n+                    let mut stack = stack.borrow_mut();\n+                    let start = stack.starts.pop().unwrap();\n+                    let duration = start.elapsed();\n+                    let level = stack.starts.len();\n+                    let message = mem::replace(desc, String::new());\n+                    stack.messages.push(Message { level, duration, message });\n+                    if level == 0 {\n+                        let stdout = stderr();\n+                        print(0, &stack.messages, &mut stdout.lock());\n+                        stack.messages.clear();\n+                    }\n+                });\n+            }\n+            Profiler { desc: None } => (),\n+        }\n+    }\n+}\n+\n+fn print(lvl: usize, msgs: &[Message], out: &mut impl Write) {\n+    let mut last = 0;\n+    let indent = repeat(\"    \").take(lvl + 1).collect::<String>();\n+    for (i, &Message { level: l, duration: dur, message: ref msg }) in msgs.iter().enumerate() {\n+        if l != lvl {\n+            continue;\n+        }\n+        writeln!(out, \"{} {:6}ms - {}\", indent, dur.as_millis(), msg)\n+            .expect(\"printing profiling info to stdout\");\n+\n+        print(lvl + 1, &msgs[last..i], out);\n+        last = i;\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+\n+    use super::profile;\n+    use super::set_filter;\n+    use super::Filter;\n+\n+    #[test]\n+    fn test_basic_profile() {\n+        let s = vec![\"profile1\".to_string(), \"profile2\".to_string()];\n+        let f = Filter { depth: 2, allowed: s };\n+        set_filter(f);\n+        profiling_function1();\n+    }\n+\n+    fn profiling_function1() {\n+        let _p = profile(\"profile1\");\n+        profiling_function2();\n+    }\n+\n+    fn profiling_function2() {\n+        let _p = profile(\"profile2\");\n+    }\n+}"}]}