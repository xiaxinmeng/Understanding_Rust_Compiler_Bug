{"sha": "d6774f8c3992332c8958b10582083d3cff1bd5e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2Nzc0ZjhjMzk5MjMzMmM4OTU4YjEwNTgyMDgzZDNjZmYxYmQ1ZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-27T06:51:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-27T06:51:13Z"}, "message": "auto merge of #9352 : erickt/rust/master, r=huonw\n\nOne of the downsides with `c_str` is that it always forces an allocation, and so this could add unnecessary overhead to various calls. This PR implements one of the suggestions @graydon made in #8296 for `vec.with_c_str` in that for a short string can use a small stack array instead of a malloced array for our temporary c string. This ends up being twice as fast for small strings.\r\n\r\nThere are two things to consider before landing this commit though. First off, I arbitrarily picked the stack array as 32 bytes, and I'm not sure if this a reasonable amount or not. Second, there is a risk that someone can keep a reference to the interior stack pointer, which could cause mayhem if someone were to dereference the pointer. Since we also can easily grab and return interior pointers to vecs though, I don't think this is that much of an issue.", "tree": {"sha": "3108abb230cd72722e8f9cd1cfdb14db9aa067b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3108abb230cd72722e8f9cd1cfdb14db9aa067b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6774f8c3992332c8958b10582083d3cff1bd5e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6774f8c3992332c8958b10582083d3cff1bd5e1", "html_url": "https://github.com/rust-lang/rust/commit/d6774f8c3992332c8958b10582083d3cff1bd5e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6774f8c3992332c8958b10582083d3cff1bd5e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb3ebb7ebddcf3ee84e57af19dd863e27d747416", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb3ebb7ebddcf3ee84e57af19dd863e27d747416", "html_url": "https://github.com/rust-lang/rust/commit/eb3ebb7ebddcf3ee84e57af19dd863e27d747416"}, {"sha": "b1ee87f402f929689fc028010c450184f661db3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1ee87f402f929689fc028010c450184f661db3b", "html_url": "https://github.com/rust-lang/rust/commit/b1ee87f402f929689fc028010c450184f661db3b"}], "stats": {"total": 274, "additions": 229, "deletions": 45}, "files": [{"sha": "bb793dd215518d4beb23559619e9b70587e30a89", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6774f8c3992332c8958b10582083d3cff1bd5e1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6774f8c3992332c8958b10582083d3cff1bd5e1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=d6774f8c3992332c8958b10582083d3cff1bd5e1", "patch": "@@ -524,13 +524,13 @@ pub fn set_always_inline(f: ValueRef) {\n }\n \n pub fn set_fixed_stack_segment(f: ValueRef) {\n-    do \"fixed-stack-segment\".to_c_str().with_ref |buf| {\n+    do \"fixed-stack-segment\".with_c_str |buf| {\n         unsafe { llvm::LLVMAddFunctionAttrString(f, buf); }\n     }\n }\n \n pub fn set_no_split_stack(f: ValueRef) {\n-    do \"no-split-stack\".to_c_str().with_ref |buf| {\n+    do \"no-split-stack\".with_c_str |buf| {\n         unsafe { llvm::LLVMAddFunctionAttrString(f, buf); }\n     }\n }"}, {"sha": "c36d427a06cae1a5789fffe58dd38760e7b4de31", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6774f8c3992332c8958b10582083d3cff1bd5e1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6774f8c3992332c8958b10582083d3cff1bd5e1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=d6774f8c3992332c8958b10582083d3cff1bd5e1", "patch": "@@ -781,7 +781,7 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n \n                 let ident = special_idents::type_self;\n \n-                let param_metadata = do token::ident_to_str(&ident).to_c_str().with_ref |name| {\n+                let param_metadata = do token::ident_to_str(&ident).with_c_str |name| {\n                     unsafe {\n                         llvm::LLVMDIBuilderCreateTemplateTypeParameter(\n                             DIB(cx),\n@@ -819,7 +819,7 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n             // Again, only create type information if extra_debuginfo is enabled\n             if cx.sess.opts.extra_debuginfo {\n                 let actual_type_metadata = type_metadata(cx, actual_type, codemap::dummy_sp());\n-                let param_metadata = do token::ident_to_str(&ident).to_c_str().with_ref |name| {\n+                let param_metadata = do token::ident_to_str(&ident).with_c_str |name| {\n                     unsafe {\n                         llvm::LLVMDIBuilderCreateTemplateTypeParameter(\n                             DIB(cx),"}, {"sha": "f28f5449e0046508a0cbd586c187e74bf90db6f8", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6774f8c3992332c8958b10582083d3cff1bd5e1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6774f8c3992332c8958b10582083d3cff1bd5e1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=d6774f8c3992332c8958b10582083d3cff1bd5e1", "patch": "@@ -465,7 +465,7 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: @mut CrateContext,\n         //     }\n \n         let the_block =\n-            \"the block\".to_c_str().with_ref(\n+            \"the block\".with_c_str(\n                 |s| llvm::LLVMAppendBasicBlockInContext(ccx.llcx, llwrapfn, s));\n \n         let builder = ccx.builder.B;\n@@ -519,7 +519,7 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: @mut CrateContext,\n \n                 None => {\n                     let slot = {\n-                        \"return_alloca\".to_c_str().with_ref(\n+                        \"return_alloca\".with_c_str(\n                             |s| llvm::LLVMBuildAlloca(builder,\n                                                       llrust_ret_ty.to_ref(),\n                                                       s))"}, {"sha": "acfa02a4defd5f2782068673b135c83d927e15ce", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 201, "deletions": 16, "changes": 217, "blob_url": "https://github.com/rust-lang/rust/blob/d6774f8c3992332c8958b10582083d3cff1bd5e1/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6774f8c3992332c8958b10582083d3cff1bd5e1/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=d6774f8c3992332c8958b10582083d3cff1bd5e1", "patch": "@@ -61,16 +61,18 @@ do my_string.with_c_str |c_buffer| {\n */\n \n use cast;\n+use container::Container;\n use iter::{Iterator, range};\n use libc;\n use ops::Drop;\n use option::{Option, Some, None};\n use ptr::RawPtr;\n use ptr;\n-use str;\n use str::StrSlice;\n-use vec::{ImmutableVector, CopyableVector};\n-use container::Container;\n+use str;\n+use vec::{CopyableVector, ImmutableVector, MutableVector};\n+use vec;\n+use unstable::intrinsics;\n \n /// Resolution options for the `null_byte` condition\n pub enum NullByteResolution {\n@@ -152,8 +154,7 @@ impl CString {\n     pub fn as_bytes<'a>(&'a self) -> &'a [u8] {\n         if self.buf.is_null() { fail!(\"CString is null!\"); }\n         unsafe {\n-            let len = ptr::position(self.buf, |c| *c == 0);\n-            cast::transmute((self.buf, len + 1))\n+            cast::transmute((self.buf, self.len() + 1))\n         }\n     }\n \n@@ -187,6 +188,15 @@ impl Drop for CString {\n     }\n }\n \n+impl Container for CString {\n+    #[inline]\n+    fn len(&self) -> uint {\n+        unsafe {\n+            ptr::position(self.buf, |c| *c == 0)\n+        }\n+    }\n+}\n+\n /// A generic trait for converting a value to a CString.\n pub trait ToCStr {\n     /// Copy the receiver into a CString.\n@@ -233,24 +243,27 @@ impl<'self> ToCStr for &'self str {\n     unsafe fn to_c_str_unchecked(&self) -> CString {\n         self.as_bytes().to_c_str_unchecked()\n     }\n+\n+    #[inline]\n+    fn with_c_str<T>(&self, f: &fn(*libc::c_char) -> T) -> T {\n+        self.as_bytes().with_c_str(f)\n+    }\n+\n+    #[inline]\n+    unsafe fn with_c_str_unchecked<T>(&self, f: &fn(*libc::c_char) -> T) -> T {\n+        self.as_bytes().with_c_str_unchecked(f)\n+    }\n }\n \n+// The length of the stack allocated buffer for `vec.with_c_str()`\n+static BUF_LEN: uint = 128;\n+\n impl<'self> ToCStr for &'self [u8] {\n     fn to_c_str(&self) -> CString {\n         #[fixed_stack_segment]; #[inline(never)];\n         let mut cs = unsafe { self.to_c_str_unchecked() };\n         do cs.with_mut_ref |buf| {\n-            for i in range(0, self.len()) {\n-                unsafe {\n-                    let p = buf.offset(i as int);\n-                    if *p == 0 {\n-                        match null_byte::cond.raise(self.to_owned()) {\n-                            Truncate => break,\n-                            ReplaceWith(c) => *p = c\n-                        }\n-                    }\n-                }\n-            }\n+            check_for_null(*self, buf);\n         }\n         cs\n     }\n@@ -269,6 +282,50 @@ impl<'self> ToCStr for &'self [u8] {\n             CString::new(buf as *libc::c_char, true)\n         }\n     }\n+\n+    fn with_c_str<T>(&self, f: &fn(*libc::c_char) -> T) -> T {\n+        unsafe { with_c_str(*self, true, f) }\n+    }\n+\n+    unsafe fn with_c_str_unchecked<T>(&self, f: &fn(*libc::c_char) -> T) -> T {\n+        with_c_str(*self, false, f)\n+    }\n+}\n+\n+// Unsafe function that handles possibly copying the &[u8] into a stack array.\n+unsafe fn with_c_str<T>(v: &[u8], checked: bool, f: &fn(*libc::c_char) -> T) -> T {\n+    if v.len() < BUF_LEN {\n+        let mut buf: [u8, .. BUF_LEN] = intrinsics::uninit();\n+        vec::bytes::copy_memory(buf, v, v.len());\n+        buf[v.len()] = 0;\n+\n+        do buf.as_mut_buf |buf, _| {\n+            if checked {\n+                check_for_null(v, buf as *mut libc::c_char);\n+            }\n+\n+            f(buf as *libc::c_char)\n+        }\n+    } else if checked {\n+        v.to_c_str().with_ref(f)\n+    } else {\n+        v.to_c_str_unchecked().with_ref(f)\n+    }\n+}\n+\n+#[inline]\n+fn check_for_null(v: &[u8], buf: *mut libc::c_char) {\n+    for i in range(0, v.len()) {\n+        unsafe {\n+            let p = buf.offset(i as int);\n+            if *p == 0 {\n+                match null_byte::cond.raise(v.to_owned()) {\n+                    Truncate => break,\n+                    ReplaceWith(c) => *p = c\n+                }\n+            }\n+        }\n+    }\n }\n \n /// External iterator for a CString's bytes.\n@@ -471,3 +528,131 @@ mod tests {\n         assert_eq!(c_str.as_str(), None);\n     }\n }\n+\n+#[cfg(test)]\n+mod bench {\n+    use iter::range;\n+    use libc;\n+    use option::Some;\n+    use ptr;\n+    use extra::test::BenchHarness;\n+\n+    #[inline]\n+    fn check(s: &str, c_str: *libc::c_char) {\n+        do s.as_imm_buf |s_buf, s_len| {\n+            for i in range(0, s_len) {\n+                unsafe {\n+                    assert_eq!(\n+                        *ptr::offset(s_buf, i as int) as libc::c_char,\n+                        *ptr::offset(c_str, i as int));\n+                }\n+            }\n+        }\n+    }\n+\n+    static s_short: &'static str = \"Mary\";\n+    static s_medium: &'static str = \"Mary had a little lamb\";\n+    static s_long: &'static str = \"\\\n+        Mary had a little lamb, Little lamb\n+        Mary had a little lamb, Little lamb\n+        Mary had a little lamb, Little lamb\n+        Mary had a little lamb, Little lamb\n+        Mary had a little lamb, Little lamb\n+        Mary had a little lamb, Little lamb\";\n+\n+    fn bench_to_str(bh: &mut BenchHarness, s: &str) {\n+        do bh.iter {\n+            let c_str = s.to_c_str();\n+            do c_str.with_ref |c_str_buf| {\n+                check(s, c_str_buf)\n+            }\n+        }\n+    }\n+\n+    #[bench]\n+    fn bench_to_c_str_short(bh: &mut BenchHarness) {\n+        bench_to_str(bh, s_short)\n+    }\n+\n+    #[bench]\n+    fn bench_to_c_str_medium(bh: &mut BenchHarness) {\n+        bench_to_str(bh, s_medium)\n+    }\n+\n+    #[bench]\n+    fn bench_to_c_str_long(bh: &mut BenchHarness) {\n+        bench_to_str(bh, s_long)\n+    }\n+\n+    fn bench_to_c_str_unchecked(bh: &mut BenchHarness, s: &str) {\n+        do bh.iter {\n+            let c_str = unsafe { s.to_c_str_unchecked() };\n+            do c_str.with_ref |c_str_buf| {\n+                check(s, c_str_buf)\n+            }\n+        }\n+    }\n+\n+    #[bench]\n+    fn bench_to_c_str_unchecked_short(bh: &mut BenchHarness) {\n+        bench_to_c_str_unchecked(bh, s_short)\n+    }\n+\n+    #[bench]\n+    fn bench_to_c_str_unchecked_medium(bh: &mut BenchHarness) {\n+        bench_to_c_str_unchecked(bh, s_medium)\n+    }\n+\n+    #[bench]\n+    fn bench_to_c_str_unchecked_long(bh: &mut BenchHarness) {\n+        bench_to_c_str_unchecked(bh, s_long)\n+    }\n+\n+    fn bench_with_c_str(bh: &mut BenchHarness, s: &str) {\n+        do bh.iter {\n+            do s.with_c_str |c_str_buf| {\n+                check(s, c_str_buf)\n+            }\n+        }\n+    }\n+\n+    #[bench]\n+    fn bench_with_c_str_short(bh: &mut BenchHarness) {\n+        bench_with_c_str(bh, s_short)\n+    }\n+\n+    #[bench]\n+    fn bench_with_c_str_medium(bh: &mut BenchHarness) {\n+        bench_with_c_str(bh, s_medium)\n+    }\n+\n+    #[bench]\n+    fn bench_with_c_str_long(bh: &mut BenchHarness) {\n+        bench_with_c_str(bh, s_long)\n+    }\n+\n+    fn bench_with_c_str_unchecked(bh: &mut BenchHarness, s: &str) {\n+        do bh.iter {\n+            unsafe {\n+                do s.with_c_str_unchecked |c_str_buf| {\n+                    check(s, c_str_buf)\n+                }\n+            }\n+        }\n+    }\n+\n+    #[bench]\n+    fn bench_with_c_str_unchecked_short(bh: &mut BenchHarness) {\n+        bench_with_c_str_unchecked(bh, s_short)\n+    }\n+\n+    #[bench]\n+    fn bench_with_c_str_unchecked_medium(bh: &mut BenchHarness) {\n+        bench_with_c_str_unchecked(bh, s_medium)\n+    }\n+\n+    #[bench]\n+    fn bench_with_c_str_unchecked_long(bh: &mut BenchHarness) {\n+        bench_with_c_str_unchecked(bh, s_long)\n+    }\n+}"}, {"sha": "94d37f67ba1ce177a85703ed8ac289f02b18083b", "filename": "src/libstd/rt/crate_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6774f8c3992332c8958b10582083d3cff1bd5e1/src%2Flibstd%2Frt%2Fcrate_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6774f8c3992332c8958b10582083d3cff1bd5e1/src%2Flibstd%2Frt%2Fcrate_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcrate_map.rs?ref=d6774f8c3992332c8958b10582083d3cff1bd5e1", "patch": "@@ -209,7 +209,7 @@ fn iter_crate_map_follow_children() {\n         let child_crate1 = CrateMapT2 {\n             version: 1,\n             entries: vec::raw::to_ptr([\n-                ModEntry { name: \"t::f1\".to_c_str().with_ref(|buf| buf), log_level: &mut 1},\n+                ModEntry { name: \"t::f1\".with_c_str(|buf| buf), log_level: &mut 1},\n                 ModEntry { name: ptr::null(), log_level: ptr::mut_null()}\n             ]),\n             children: [&child_crate2 as *CrateMap, ptr::null()]\n@@ -219,7 +219,7 @@ fn iter_crate_map_follow_children() {\n         let root_crate = CrateMapT2 {\n             version: 1,\n             entries: vec::raw::to_ptr([\n-                ModEntry { name: \"t::f1\".to_c_str().with_ref(|buf| buf), log_level: &mut 0},\n+                ModEntry { name: \"t::f1\".with_c_str(|buf| buf), log_level: &mut 0},\n                 ModEntry { name: ptr::null(), log_level: ptr::mut_null()}\n             ]),\n             children: [child_crate1_ptr, ptr::null()]"}, {"sha": "abbcd27e8cafbad96c61c0dc0d51ee90dc851976", "filename": "src/libstd/rt/logging.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6774f8c3992332c8958b10582083d3cff1bd5e1/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6774f8c3992332c8958b10582083d3cff1bd5e1/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=d6774f8c3992332c8958b10582083d3cff1bd5e1", "patch": "@@ -294,7 +294,7 @@ fn update_entry_match_full_path() {\n                  LogDirective {name: Some(~\"crate2\"), level: 3}];\n     let level = &mut 0;\n     unsafe {\n-        do \"crate1::mod1\".to_c_str().with_ref |ptr| {\n+        do \"crate1::mod1\".with_c_str |ptr| {\n             let entry= &ModEntry {name: ptr, log_level: level};\n             let m = update_entry(dirs, transmute(entry));\n             assert!(*entry.log_level == 2);\n@@ -310,7 +310,7 @@ fn update_entry_no_match() {\n                  LogDirective {name: Some(~\"crate2\"), level: 3}];\n     let level = &mut 0;\n     unsafe {\n-        do \"crate3::mod1\".to_c_str().with_ref |ptr| {\n+        do \"crate3::mod1\".with_c_str |ptr| {\n             let entry= &ModEntry {name: ptr, log_level: level};\n             let m = update_entry(dirs, transmute(entry));\n             assert!(*entry.log_level == DEFAULT_LOG_LEVEL);\n@@ -326,7 +326,7 @@ fn update_entry_match_beginning() {\n                  LogDirective {name: Some(~\"crate2\"), level: 3}];\n     let level = &mut 0;\n     unsafe {\n-        do \"crate2::mod1\".to_c_str().with_ref |ptr| {\n+        do \"crate2::mod1\".with_c_str |ptr| {\n             let entry= &ModEntry {name: ptr, log_level: level};\n             let m = update_entry(dirs, transmute(entry));\n             assert!(*entry.log_level == 3);\n@@ -343,7 +343,7 @@ fn update_entry_match_beginning_longest_match() {\n                  LogDirective {name: Some(~\"crate2::mod\"), level: 4}];\n     let level = &mut 0;\n     unsafe {\n-        do \"crate2::mod1\".to_c_str().with_ref |ptr| {\n+        do \"crate2::mod1\".with_c_str |ptr| {\n             let entry = &ModEntry {name: ptr, log_level: level};\n             let m = update_entry(dirs, transmute(entry));\n             assert!(*entry.log_level == 4);\n@@ -360,13 +360,13 @@ fn update_entry_match_default() {\n                 ];\n     let level = &mut 0;\n     unsafe {\n-        do \"crate1::mod1\".to_c_str().with_ref |ptr| {\n+        do \"crate1::mod1\".with_c_str |ptr| {\n             let entry= &ModEntry {name: ptr, log_level: level};\n             let m = update_entry(dirs, transmute(entry));\n             assert!(*entry.log_level == 2);\n             assert!(m == 1);\n         }\n-        do \"crate2::mod2\".to_c_str().with_ref |ptr| {\n+        do \"crate2::mod2\".with_c_str |ptr| {\n             let entry= &ModEntry {name: ptr, log_level: level};\n             let m = update_entry(dirs, transmute(entry));\n             assert!(*entry.log_level == 3);"}, {"sha": "f37402d944e83437c3ba58fab7aa41be16e1014d", "filename": "src/libstd/rt/uv/file.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d6774f8c3992332c8958b10582083d3cff1bd5e1/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6774f8c3992332c8958b10582083d3cff1bd5e1/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Ffile.rs?ref=d6774f8c3992332c8958b10582083d3cff1bd5e1", "patch": "@@ -43,7 +43,7 @@ impl FsRequest {\n             me.req_boilerplate(Some(cb))\n         };\n         path.path_as_str(|p| {\n-            p.to_c_str().with_ref(|p| unsafe {\n+            p.with_c_str(|p| unsafe {\n             uvll::fs_open(loop_.native_handle(),\n                           self.native_handle(), p, flags, mode, complete_cb_ptr)\n             })\n@@ -57,7 +57,7 @@ impl FsRequest {\n             me.req_boilerplate(None)\n         };\n         let result = path.path_as_str(|p| {\n-            p.to_c_str().with_ref(|p| unsafe {\n+            p.with_c_str(|p| unsafe {\n             uvll::fs_open(loop_.native_handle(),\n                     self.native_handle(), p, flags, mode, complete_cb_ptr)\n             })\n@@ -71,7 +71,7 @@ impl FsRequest {\n             me.req_boilerplate(Some(cb))\n         };\n         path.path_as_str(|p| {\n-            p.to_c_str().with_ref(|p| unsafe {\n+            p.with_c_str(|p| unsafe {\n                 uvll::fs_unlink(loop_.native_handle(),\n                               self.native_handle(), p, complete_cb_ptr)\n             })\n@@ -85,7 +85,7 @@ impl FsRequest {\n             me.req_boilerplate(None)\n         };\n         let result = path.path_as_str(|p| {\n-            p.to_c_str().with_ref(|p| unsafe {\n+            p.with_c_str(|p| unsafe {\n                 uvll::fs_unlink(loop_.native_handle(),\n                               self.native_handle(), p, complete_cb_ptr)\n             })\n@@ -99,7 +99,7 @@ impl FsRequest {\n             me.req_boilerplate(Some(cb))\n         };\n         path.path_as_str(|p| {\n-            p.to_c_str().with_ref(|p| unsafe {\n+            p.with_c_str(|p| unsafe {\n                 uvll::fs_stat(loop_.native_handle(),\n                               self.native_handle(), p, complete_cb_ptr)\n             })\n@@ -192,7 +192,7 @@ impl FsRequest {\n             me.req_boilerplate(Some(cb))\n         };\n         path.path_as_str(|p| {\n-            p.to_c_str().with_ref(|p| unsafe {\n+            p.with_c_str(|p| unsafe {\n             uvll::fs_mkdir(loop_.native_handle(),\n                           self.native_handle(), p, mode, complete_cb_ptr)\n             })\n@@ -205,7 +205,7 @@ impl FsRequest {\n             me.req_boilerplate(Some(cb))\n         };\n         path.path_as_str(|p| {\n-            p.to_c_str().with_ref(|p| unsafe {\n+            p.with_c_str(|p| unsafe {\n             uvll::fs_rmdir(loop_.native_handle(),\n                           self.native_handle(), p, complete_cb_ptr)\n             })\n@@ -219,7 +219,7 @@ impl FsRequest {\n             me.req_boilerplate(Some(cb))\n         };\n         path.path_as_str(|p| {\n-            p.to_c_str().with_ref(|p| unsafe {\n+            p.with_c_str(|p| unsafe {\n             uvll::fs_readdir(loop_.native_handle(),\n                           self.native_handle(), p, flags, complete_cb_ptr)\n             })\n@@ -370,8 +370,7 @@ mod test {\n     use unstable::run_in_bare_thread;\n     use path::Path;\n     use rt::uv::{Loop, Buf, slice_to_uv_buf};\n-    use libc::{c_int, O_CREAT, O_RDWR, O_RDONLY,\n-               S_IWUSR, S_IRUSR};\n+    use libc::{O_CREAT, O_RDWR, O_RDONLY, S_IWUSR, S_IRUSR};\n \n     #[test]\n     fn file_test_full_simple() {\n@@ -603,7 +602,7 @@ mod test {\n                         assert!(uverr.is_none());\n                         let loop_ = req.get_loop();\n                         let stat_req = FsRequest::new();\n-                        do stat_req.stat(&loop_, &path) |req, uverr| {\n+                        do stat_req.stat(&loop_, &path) |_req, uverr| {\n                             assert!(uverr.is_some());\n                         }\n                     }\n@@ -628,11 +627,11 @@ mod test {\n                 do mkdir_req.mkdir(&loop_, &path, mode as int) |req,uverr| {\n                     assert!(uverr.is_some());\n                     let loop_ = req.get_loop();\n-                    let stat = req.get_stat();\n+                    let _stat = req.get_stat();\n                     let rmdir_req = FsRequest::new();\n                     do rmdir_req.rmdir(&loop_, &path) |req,uverr| {\n                         assert!(uverr.is_none());\n-                        let loop_ = req.get_loop();\n+                        let _loop = req.get_loop();\n                     }\n                 }\n             }\n@@ -646,7 +645,7 @@ mod test {\n             let mut loop_ = Loop::new();\n             let path = \"./tmp/never_existed_dir\";\n             let rmdir_req = FsRequest::new();\n-            do rmdir_req.rmdir(&loop_, &path) |req,uverr| {\n+            do rmdir_req.rmdir(&loop_, &path) |_req, uverr| {\n                 assert!(uverr.is_some());\n             }\n             loop_.run();"}, {"sha": "505b1d20d01a32d292c5642f934f3f6947368e78", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6774f8c3992332c8958b10582083d3cff1bd5e1/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6774f8c3992332c8958b10582083d3cff1bd5e1/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=d6774f8c3992332c8958b10582083d3cff1bd5e1", "patch": "@@ -1222,7 +1222,7 @@ pub mod raw {\n         unsafe {\n             let input = bytes!(\"zero\", \"\\x00\", \"one\", \"\\x00\", \"\\x00\");\n             let ptr = vec::raw::to_ptr(input);\n-            let mut result = from_c_multistring(ptr as *libc::c_char, None);\n+            let result = from_c_multistring(ptr as *libc::c_char, None);\n             assert!(result.len() == 2);\n             let mut ctr = 0;\n             for x in result.iter() {"}]}