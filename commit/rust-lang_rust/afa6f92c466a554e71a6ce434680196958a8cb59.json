{"sha": "afa6f92c466a554e71a6ce434680196958a8cb59", "node_id": "C_kwDOAAsO6NoAKGFmYTZmOTJjNDY2YTU1NGU3MWE2Y2U0MzQ2ODAxOTY5NThhOGNiNTk", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-11-27T16:59:18Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-11-27T16:59:18Z"}, "message": "Use intrinsic pointer methods", "tree": {"sha": "3ec16246c8e69c88668cc6fec26e5a310dc0b1df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ec16246c8e69c88668cc6fec26e5a310dc0b1df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afa6f92c466a554e71a6ce434680196958a8cb59", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEm/Nz5g9hEBdpmKVOB8rDzKfgZD8FAmGiY+YACgkQB8rDzKfg\nZD/aBg/+MXNbls4f4N/TUp2r0jTS/h4UcTCqXUPl/90/TpRw8tiN2O8jkuL2jRVc\nYZLmvb0hG3Xhz2NoXc1TrN3E86XSVpCtZysSHBw6lBQ88lRZw0b/NnqD4jjgke4m\nn46epfU9G5CP+Nkf3Y5sFjxGrp8yAPuZYLb491G7yG02p2HsmMacKxjHUtfdguP1\n5kY6CQGBLnB531virVf/xcbBK+47JvMSkYFp1nGd6zN+/MXThd5xR6JxQr41Dgsh\nOcSK6eDlusWgQhZr48YVaXoZ7YIql2gXmIpjnzcoPp5fLQxOyI+QY+L5Rh8F8Ff4\n21pY+rdvkqCvfb9jmIgzGlqTilMQZzSI6ppspEpExELCrTlKZ+9U85MvB/vp7nrd\nasGOCnVNMqXS58HorCgHcs6oNTVwymb2+Vf8IZ6baGx6pPm+tftWyQ0kJ6vJeTtw\nNbzaI3oY8e/rDQq7uh/21Wh3aAXodmlyj8zo0vZ6z+6u21U1I3g2l54/d+EZxNit\n9VlORXRmesLHqh9/7WmfSFZq+g9Vci/DzLysbc/8LzvdKuH4Hy32wIFhRiegIz82\nVxXRmjmjbVCWAhMXIjhpW3MZ9artTFABjNSDUcHYks5eqcjk/bXIjg2XNvWqRerU\nY2kX0gu0hAfwg+OgumOs/T3yKPh2FW7lS0o9CJinQAlmuat2MC4=\n=c0aK\n-----END PGP SIGNATURE-----", "payload": "tree 3ec16246c8e69c88668cc6fec26e5a310dc0b1df\nparent 9f714ef03567d588fbb63c662670fd9326d7348e\nauthor Alan Egerton <eggyal@gmail.com> 1638032358 +0000\ncommitter Alan Egerton <eggyal@gmail.com> 1638032358 +0000\n\nUse intrinsic pointer methods\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afa6f92c466a554e71a6ce434680196958a8cb59", "html_url": "https://github.com/rust-lang/rust/commit/afa6f92c466a554e71a6ce434680196958a8cb59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afa6f92c466a554e71a6ce434680196958a8cb59/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f714ef03567d588fbb63c662670fd9326d7348e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f714ef03567d588fbb63c662670fd9326d7348e", "html_url": "https://github.com/rust-lang/rust/commit/9f714ef03567d588fbb63c662670fd9326d7348e"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "920f7b1ed0a543c15dac3c272f59edad8243464e", "filename": "compiler/rustc_data_structures/src/functor.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/afa6f92c466a554e71a6ce434680196958a8cb59/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa6f92c466a554e71a6ce434680196958a8cb59/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs?ref=afa6f92c466a554e71a6ce434680196958a8cb59", "patch": "@@ -1,6 +1,5 @@\n use rustc_index::vec::{Idx, IndexVec};\n use std::mem;\n-use std::ptr;\n \n pub trait IdFunctor: Sized {\n     type Inner;\n@@ -29,12 +28,12 @@ impl<T> IdFunctor for Box<T> {\n         let raw = Box::into_raw(self);\n         Ok(unsafe {\n             // SAFETY: The raw pointer points to a valid value of type `T`.\n-            let value = ptr::read(raw);\n+            let value = raw.read();\n             // SAFETY: Converts `Box<T>` to `Box<MaybeUninit<T>>` which is the\n             // inverse of `Box::assume_init()` and should be safe.\n             let mut raw: Box<mem::MaybeUninit<T>> = Box::from_raw(raw.cast());\n             // SAFETY: Write the mapped value back into the `Box`.\n-            ptr::write(raw.as_mut_ptr(), f(value)?);\n+            raw.write(f(value)?);\n             // SAFETY: We just initialized `raw`.\n             raw.assume_init()\n         })\n@@ -57,14 +56,13 @@ impl<T> IdFunctor for Vec<T> {\n             let start = self.as_mut_ptr();\n             for i in 0..len {\n                 let p = start.add(i);\n-                match f(ptr::read(p)) {\n-                    Ok(value) => ptr::write(p, value),\n+                match f(p.read()) {\n+                    Ok(val) => p.write(val),\n                     Err(err) => {\n                         // drop all other elements in self\n                         // (current element was \"moved\" into the call to f)\n                         for j in (0..i).chain(i + 1..len) {\n-                            let p = start.add(j);\n-                            ptr::drop_in_place(p);\n+                            start.add(j).drop_in_place();\n                         }\n \n                         // returning will drop self, releasing the allocation"}]}