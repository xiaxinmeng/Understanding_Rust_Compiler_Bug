{"sha": "1005b7976bde4b8d42ec2e1d924015b754567401", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMDViNzk3NmJkZTRiOGQ0MmVjMmUxZDkyNDAxNWI3NTQ1Njc0MDE=", "commit": {"author": {"name": "Luis de Bethencourt", "email": "luis@debethencourt.com", "date": "2013-10-02T03:06:26Z"}, "committer": {"name": "Luis de Bethencourt", "email": "luis@debethencourt.com", "date": "2013-10-02T15:22:59Z"}, "message": "extra: %G, %g and %V support in time::strftime\n\nFixes #2350", "tree": {"sha": "c7fa64a570dec5d54c02b73dbc1dbbe582a3dc39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7fa64a570dec5d54c02b73dbc1dbbe582a3dc39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1005b7976bde4b8d42ec2e1d924015b754567401", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1005b7976bde4b8d42ec2e1d924015b754567401", "html_url": "https://github.com/rust-lang/rust/commit/1005b7976bde4b8d42ec2e1d924015b754567401", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1005b7976bde4b8d42ec2e1d924015b754567401/comments", "author": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c463772ebdbfca65017ac1bc2c8322d229b291a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c463772ebdbfca65017ac1bc2c8322d229b291a9", "html_url": "https://github.com/rust-lang/rust/commit/c463772ebdbfca65017ac1bc2c8322d229b291a9"}], "stats": {"total": 65, "additions": 59, "deletions": 6}, "files": [{"sha": "161a96b1676bdc2b0df27ebb4e027a92c6f4165c", "filename": "src/libextra/time.rs", "status": "modified", "additions": 59, "deletions": 6, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/1005b7976bde4b8d42ec2e1d924015b754567401/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1005b7976bde4b8d42ec2e1d924015b754567401/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=1005b7976bde4b8d42ec2e1d924015b754567401", "patch": "@@ -734,6 +734,59 @@ fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n }\n \n fn do_strftime(format: &str, tm: &Tm) -> ~str {\n+    fn days_in_year(year: int) -> i32 {\n+        if ((year % 4 == 0) && ((year % 100 != 0) || (year % 400 == 0))) {\n+            366    /* Days in a leap year */\n+        } else {\n+            365    /* Days in a non-leap year */\n+        }\n+    }\n+\n+    fn iso_week_days(yday: i32, wday: i32) -> int {\n+        /* The number of days from the first day of the first ISO week of this\n+        * year to the year day YDAY with week day WDAY.\n+        * ISO weeks start on Monday. The first ISO week has the year's first\n+        * Thursday.\n+        * YDAY may be as small as yday_minimum.\n+        */\n+        let yday: int = yday as int;\n+        let wday: int = wday as int;\n+        let iso_week_start_wday: int = 1;                     /* Monday */\n+        let iso_week1_wday: int = 4;                          /* Thursday */\n+        let yday_minimum: int = 366;\n+        /* Add enough to the first operand of % to make it nonnegative. */\n+        let big_enough_multiple_of_7: int = (yday_minimum / 7 + 2) * 7;\n+\n+        yday - (yday - wday + iso_week1_wday + big_enough_multiple_of_7) % 7\n+            + iso_week1_wday - iso_week_start_wday\n+    }\n+\n+    fn iso_week(ch:char, tm: &Tm) -> ~str {\n+        let mut year: int = tm.tm_year as int + 1900;\n+        let mut days: int = iso_week_days (tm.tm_yday, tm.tm_wday);\n+\n+        if (days < 0) {\n+            /* This ISO week belongs to the previous year. */\n+            year -= 1;\n+            days = iso_week_days (tm.tm_yday + (days_in_year(year)), tm.tm_wday);\n+        } else {\n+            let d: int = iso_week_days (tm.tm_yday - (days_in_year(year)),\n+                                        tm.tm_wday);\n+            if (0 <= d) {\n+                /* This ISO week belongs to the next year. */\n+                year += 1;\n+                days = d;\n+            }\n+        }\n+\n+        match ch {\n+            'G' => format!(\"{}\", year),\n+            'g' => format!(\"{:02d}\", (year % 100 + 100) % 100),\n+            'V' => format!(\"{:02d}\", days / 7 + 1),\n+            _ => ~\"\"\n+        }\n+    }\n+\n     fn parse_type(ch: char, tm: &Tm) -> ~str {\n         //FIXME (#2350): Implement missing types.\n       let die = || format!(\"strftime: can't understand this format {} \", ch);\n@@ -812,8 +865,8 @@ fn do_strftime(format: &str, tm: &Tm) -> ~str {\n                 parse_type('m', tm),\n                 parse_type('d', tm))\n           }\n-          //'G' {}\n-          //'g' {}\n+          'G' => iso_week('G', tm),\n+          'g' => iso_week('g', tm),\n           'H' => format!(\"{:02d}\", tm.tm_hour),\n           'I' => {\n             let mut h = tm.tm_hour;\n@@ -860,7 +913,7 @@ fn do_strftime(format: &str, tm: &Tm) -> ~str {\n             let i = tm.tm_wday as int;\n             (if i == 0 { 7 } else { i }).to_str()\n           }\n-          //'V' {}\n+          'V' => iso_week('V', tm),\n           'v' => {\n             format!(\"{}-{}-{}\",\n                 parse_type('e', tm),\n@@ -1222,8 +1275,8 @@ mod tests {\n         assert_eq!(local.strftime(\"%e\"), ~\"13\");\n         assert_eq!(local.strftime(\"%f\"), ~\"000054321\");\n         assert_eq!(local.strftime(\"%F\"), ~\"2009-02-13\");\n-        // assert!(local.strftime(\"%G\") == \"2009\");\n-        // assert!(local.strftime(\"%g\") == \"09\");\n+        assert_eq!(local.strftime(\"%G\"), ~\"2009\");\n+        assert_eq!(local.strftime(\"%g\"), ~\"09\");\n         assert_eq!(local.strftime(\"%H\"), ~\"15\");\n         assert_eq!(local.strftime(\"%I\"), ~\"03\");\n         assert_eq!(local.strftime(\"%j\"), ~\"044\");\n@@ -1242,7 +1295,7 @@ mod tests {\n         assert_eq!(local.strftime(\"%t\"), ~\"\\t\");\n         assert_eq!(local.strftime(\"%U\"), ~\"06\");\n         assert_eq!(local.strftime(\"%u\"), ~\"5\");\n-        // assert!(local.strftime(\"%V\") == \"07\");\n+        assert_eq!(local.strftime(\"%V\"), ~\"07\");\n         assert_eq!(local.strftime(\"%v\"), ~\"13-Feb-2009\");\n         // assert!(local.strftime(\"%W\") == \"06\");\n         assert_eq!(local.strftime(\"%w\"), ~\"5\");"}]}