{"sha": "016c99724356c5bd7e27bd7c6061c7a458f078bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNmM5OTcyNDM1NmM1YmQ3ZTI3YmQ3YzYwNjFjN2E0NThmMDc4YmY=", "commit": {"author": {"name": "Geobert Quach", "email": "geobert@protonmail.com", "date": "2019-09-15T20:27:21Z"}, "committer": {"name": "Geobert Quach", "email": "geobert@protonmail.com", "date": "2019-09-19T21:12:28Z"}, "message": "feat(assists): manage `\"` when removing hash and make_usual_string", "tree": {"sha": "f1588c568769f7c4dd02372928f6abac8b335e7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1588c568769f7c4dd02372928f6abac8b335e7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/016c99724356c5bd7e27bd7c6061c7a458f078bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/016c99724356c5bd7e27bd7c6061c7a458f078bf", "html_url": "https://github.com/rust-lang/rust/commit/016c99724356c5bd7e27bd7c6061c7a458f078bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/016c99724356c5bd7e27bd7c6061c7a458f078bf/comments", "author": {"login": "Geobert", "id": 72570, "node_id": "MDQ6VXNlcjcyNTcw", "avatar_url": "https://avatars.githubusercontent.com/u/72570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geobert", "html_url": "https://github.com/Geobert", "followers_url": "https://api.github.com/users/Geobert/followers", "following_url": "https://api.github.com/users/Geobert/following{/other_user}", "gists_url": "https://api.github.com/users/Geobert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geobert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geobert/subscriptions", "organizations_url": "https://api.github.com/users/Geobert/orgs", "repos_url": "https://api.github.com/users/Geobert/repos", "events_url": "https://api.github.com/users/Geobert/events{/privacy}", "received_events_url": "https://api.github.com/users/Geobert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Geobert", "id": 72570, "node_id": "MDQ6VXNlcjcyNTcw", "avatar_url": "https://avatars.githubusercontent.com/u/72570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geobert", "html_url": "https://github.com/Geobert", "followers_url": "https://api.github.com/users/Geobert/followers", "following_url": "https://api.github.com/users/Geobert/following{/other_user}", "gists_url": "https://api.github.com/users/Geobert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geobert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geobert/subscriptions", "organizations_url": "https://api.github.com/users/Geobert/orgs", "repos_url": "https://api.github.com/users/Geobert/repos", "events_url": "https://api.github.com/users/Geobert/events{/privacy}", "received_events_url": "https://api.github.com/users/Geobert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6d55290a1e416e68bb258bb1e19861692476bd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6d55290a1e416e68bb258bb1e19861692476bd2", "html_url": "https://github.com/rust-lang/rust/commit/b6d55290a1e416e68bb258bb1e19861692476bd2"}], "stats": {"total": 95, "additions": 90, "deletions": 5}, "files": [{"sha": "10ed931736deed914bb42c67f40adac300ee320b", "filename": "crates/ra_assists/src/raw_string.rs", "status": "modified", "additions": 90, "deletions": 5, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/016c99724356c5bd7e27bd7c6061c7a458f078bf/crates%2Fra_assists%2Fsrc%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016c99724356c5bd7e27bd7c6061c7a458f078bf/crates%2Fra_assists%2Fsrc%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fraw_string.rs?ref=016c99724356c5bd7e27bd7c6061c7a458f078bf", "patch": "@@ -1,7 +1,7 @@\n use hir::db::HirDatabase;\r\n-use ra_syntax::{ast::AstNode, ast::Literal, TextRange, TextUnit};\r\n+use ra_syntax::{ast::AstNode, ast::Literal, SyntaxText, TextRange, TextUnit};\r\n \r\n-use crate::{Assist, AssistCtx, AssistId};\r\n+use crate::{assist_ctx::AssistBuilder, Assist, AssistCtx, AssistId};\r\n \r\n pub(crate) fn make_raw_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\r\n     let literal = ctx.node_at_offset::<Literal>()?;\r\n@@ -23,7 +23,6 @@ pub(crate) fn make_usual_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<\n             let text = literal.syntax().text();\r\n             let usual_start_pos = text.find_char('\"').unwrap(); // we have a RAW_STRING\r\n             let end = literal.syntax().text_range().end();\r\n-            dbg!(&end);\r\n             let mut i = 0;\r\n             let mut pos = 0;\r\n             let mut c = text.char_at(end - TextUnit::from(i));\r\n@@ -44,6 +43,15 @@ pub(crate) fn make_usual_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<\n                 literal.syntax().text_range().end() - TextUnit::from(pos),\r\n                 literal.syntax().text_range().end(),\r\n             ));\r\n+            // parse inside string to escape `\"`\r\n+            let start_of_inside = usual_start_pos + TextUnit::from(1);\r\n+            let inside_str =\r\n+                text.slice(TextRange::from_to(start_of_inside, text.len() - TextUnit::from(2)));\r\n+            escape_quote(\r\n+                edit,\r\n+                &inside_str,\r\n+                literal.syntax().text_range().start() + start_of_inside,\r\n+            );\r\n         });\r\n         ctx.build()\r\n     } else {\r\n@@ -65,6 +73,21 @@ pub(crate) fn add_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     }\r\n }\r\n \r\n+fn escape_quote(edit: &mut AssistBuilder, inside_str: &SyntaxText, offset: TextUnit) {\r\n+    let mut start = TextUnit::from(0);\r\n+    inside_str.for_each_chunk(|chunk| {\r\n+        let end = start + TextUnit::of_str(chunk);\r\n+        let mut i = 0;\r\n+        for c in chunk.to_string().chars() {\r\n+            if c == '\"' {\r\n+                edit.insert(offset + start + TextUnit::from(i), \"\\\\\");\r\n+            }\r\n+            i += 1;\r\n+        }\r\n+        start = end;\r\n+    });\r\n+}\r\n+\r\n pub(crate) fn remove_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\r\n     let literal = ctx.node_at_offset::<Literal>()?;\r\n     if literal.token().kind() == ra_syntax::SyntaxKind::RAW_STRING {\r\n@@ -81,6 +104,17 @@ pub(crate) fn remove_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n                 literal.syntax().text_range().end() - TextUnit::from(1),\r\n                 literal.syntax().text_range().end(),\r\n             ));\r\n+            let text = literal.syntax().text();\r\n+            if text.char_at(TextUnit::from(2)) == Some('\"') {\r\n+                // no more hash after assist, need to escape any `\"` in the string\r\n+                let inside_str = text\r\n+                    .slice(TextRange::from_to(TextUnit::from(3), text.len() - TextUnit::from(2)));\r\n+                escape_quote(\r\n+                    edit,\r\n+                    &inside_str,\r\n+                    literal.syntax().text_range().start() + TextUnit::from(3),\r\n+                );\r\n+            }\r\n         });\r\n         ctx.build()\r\n     } else {\r\n@@ -123,6 +157,23 @@ mod test {\n         )\r\n     }\r\n \r\n+    #[test]\r\n+    fn make_raw_string_with_escaped_works() {\r\n+        check_assist(\r\n+            make_raw_string,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>\"random\\nstring\";\r\n+            }\r\n+            \"#,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>r\"random\\nstring\";\r\n+            }\r\n+            \"#,\r\n+        )\r\n+    }\r\n+\r\n     #[test]\r\n     fn make_raw_string_not_works() {\r\n         check_assist_not_applicable(\r\n@@ -171,12 +222,12 @@ mod test {\n             add_hash,\r\n             r##\"\r\n             fn f() {\r\n-                let s = <|>r#\"random string\"#;\r\n+                let s = <|>r#\"random\"string\"#;\r\n             }\r\n             \"##,\r\n             r###\"\r\n             fn f() {\r\n-                let s = <|>r##\"random string\"##;\r\n+                let s = <|>r##\"random\"string\"##;\r\n             }\r\n             \"###,\r\n         )\r\n@@ -224,6 +275,23 @@ mod test {\n         )\r\n     }\r\n \r\n+    #[test]\r\n+    fn remove_hash_with_quote_works() {\r\n+        check_assist(\r\n+            remove_hash,\r\n+            r##\"\r\n+            fn f() {\r\n+                let s = <|>r#\"random\"str\"ing\"#;\r\n+            }\r\n+            \"##,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>r\"random\\\"str\\\"ing\";\r\n+            }\r\n+            \"#,\r\n+        )\r\n+    }\r\n+\r\n     #[test]\r\n     fn remove_more_hash_works() {\r\n         check_assist(\r\n@@ -295,6 +363,23 @@ mod test {\n         )\r\n     }\r\n \r\n+    #[test]\r\n+    fn make_usual_string_with_quote_works() {\r\n+        check_assist(\r\n+            make_usual_string,\r\n+            r##\"\r\n+            fn f() {\r\n+                let s = <|>r#\"random\"str\"ing\"#;\r\n+            }\r\n+            \"##,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>\"random\\\"str\\\"ing\";\r\n+            }\r\n+            \"#,\r\n+        )\r\n+    }\r\n+\r\n     #[test]\r\n     fn make_usual_string_more_hash_works() {\r\n         check_assist(\r"}]}