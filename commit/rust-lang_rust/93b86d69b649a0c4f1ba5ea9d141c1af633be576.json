{"sha": "93b86d69b649a0c4f1ba5ea9d141c1af633be576", "node_id": "C_kwDOAAsO6NoAKDkzYjg2ZDY5YjY0OWEwYzRmMWJhNWVhOWQxNDFjMWFmNjMzYmU1NzY", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-05-06T18:05:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-06T18:05:41Z"}, "message": "Rollup merge of #96748 - GuillaumeGomez:reexports-in-search, r=notriddle\n\nFixes reexports in search\n\nFixes #96681.\n\nAt some point we stopped reexporting items in search so this PR fixes it.\n\nIt also adds a regression test.\n\nr? ```@notriddle```", "tree": {"sha": "216d58097e814113f1e00f9f3e66ecbefe7912a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/216d58097e814113f1e00f9f3e66ecbefe7912a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93b86d69b649a0c4f1ba5ea9d141c1af633be576", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJidWN1CRBK7hj4Ov3rIwAAtvgIAAHYC5DCTeIyg3rZepU38PeJ\n7jO+I4fBrbHVSwT0CXNn3oWAN3pMKlvde+vLp2C0P8UdILHTibt2V9vVr8EvrwUq\neH5B2R7IFVc/gBRjE7CqulTJlo3U+2xR0vGAEMae3Wq0n6+MjtAPxvYOzdic9Yak\nOD2JWVOprg/VYm/0r/9SzT6/D+rE06zwCgYVmw2jrxozvgdy8fBuY+FFh3C+LdKO\npYKO5wTNl6cTQn5nn0glwNbQJpqFOK33wyW7IvE+AH9fcDFF+RdiY+y5QPHd9jR2\nnL0+AKHRM0w3+SVzyKyVBAysDCPQDrLrjXWZgrlejYgzGgsYS73MtPaXP6fLkpI=\n=MCZ0\n-----END PGP SIGNATURE-----\n", "payload": "tree 216d58097e814113f1e00f9f3e66ecbefe7912a3\nparent c3ddd59f5b0ed31c83a4421fdbdfb73db8ba378f\nparent fb2f97a37e8a3541368004daa5ddb38ec3048fe8\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1651860341 +0200\ncommitter GitHub <noreply@github.com> 1651860341 +0200\n\nRollup merge of #96748 - GuillaumeGomez:reexports-in-search, r=notriddle\n\nFixes reexports in search\n\nFixes #96681.\n\nAt some point we stopped reexporting items in search so this PR fixes it.\n\nIt also adds a regression test.\n\nr? ```@notriddle```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93b86d69b649a0c4f1ba5ea9d141c1af633be576", "html_url": "https://github.com/rust-lang/rust/commit/93b86d69b649a0c4f1ba5ea9d141c1af633be576", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93b86d69b649a0c4f1ba5ea9d141c1af633be576/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3ddd59f5b0ed31c83a4421fdbdfb73db8ba378f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ddd59f5b0ed31c83a4421fdbdfb73db8ba378f", "html_url": "https://github.com/rust-lang/rust/commit/c3ddd59f5b0ed31c83a4421fdbdfb73db8ba378f"}, {"sha": "fb2f97a37e8a3541368004daa5ddb38ec3048fe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb2f97a37e8a3541368004daa5ddb38ec3048fe8", "html_url": "https://github.com/rust-lang/rust/commit/fb2f97a37e8a3541368004daa5ddb38ec3048fe8"}], "stats": {"total": 83, "additions": 71, "deletions": 12}, "files": [{"sha": "30190138750ca2cda6d61860175870cf9ba2f536", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/93b86d69b649a0c4f1ba5ea9d141c1af633be576/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b86d69b649a0c4f1ba5ea9d141c1af633be576/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=93b86d69b649a0c4f1ba5ea9d141c1af633be576", "patch": "@@ -248,7 +248,16 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n         }\n \n         // Index this method for searching later on.\n-        if let Some(ref s) = item.name {\n+        if let Some(ref s) = item.name.or_else(|| {\n+            if item.is_stripped() {\n+                None\n+            } else if let clean::ImportItem(ref i) = *item.kind &&\n+                let clean::ImportKind::Simple(s) = i.kind {\n+                Some(s)\n+            } else {\n+                None\n+            }\n+        }) {\n             let (parent, is_inherent_impl_item) = match *item.kind {\n                 clean::StrippedItem(..) => ((None, None), false),\n                 clean::AssocConstItem(..) | clean::AssocTypeItem(..)"}, {"sha": "19582481910173dd3c7ff86ec2b690f716b05cb1", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/93b86d69b649a0c4f1ba5ea9d141c1af633be576/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b86d69b649a0c4f1ba5ea9d141c1af633be576/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=93b86d69b649a0c4f1ba5ea9d141c1af633be576", "patch": "@@ -2542,7 +2542,16 @@ fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n \n     let item_sections_in_use: FxHashSet<_> = items\n         .iter()\n-        .filter(|it| !it.is_stripped() && it.name.is_some())\n+        .filter(|it| {\n+            !it.is_stripped()\n+                && it\n+                    .name\n+                    .or_else(|| {\n+                        if let clean::ImportItem(ref i) = *it.kind &&\n+                            let clean::ImportKind::Simple(s) = i.kind { Some(s) } else { None }\n+                    })\n+                    .is_some()\n+        })\n         .map(|it| item_ty_to_section(it.type_()))\n         .collect();\n     for &sec in ItemSection::ALL.iter().filter(|sec| item_sections_in_use.contains(sec)) {"}, {"sha": "0ad54abf807a563109121ab3797a61046d987aec", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93b86d69b649a0c4f1ba5ea9d141c1af633be576/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b86d69b649a0c4f1ba5ea9d141c1af633be576/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=93b86d69b649a0c4f1ba5ea9d141c1af633be576", "patch": "@@ -346,7 +346,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                 w.write_str(ITEM_TABLE_ROW_OPEN);\n                 write!(\n                     w,\n-                    \"<div class=\\\"item-left {stab}{add}import-item\\\">\\\n+                    \"<div class=\\\"item-left {stab}{add}import-item\\\"{id}>\\\n                          <code>{vis}{imp}</code>\\\n                      </div>\\\n                      <div class=\\\"item-right docblock-short\\\">{stab_tags}</div>\",\n@@ -355,6 +355,11 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                     vis = myitem.visibility.print_with_space(myitem.item_id, cx),\n                     imp = import.print(cx),\n                     stab_tags = stab_tags.unwrap_or_default(),\n+                    id = match import.kind {\n+                        clean::ImportKind::Simple(s) =>\n+                            format!(\" id=\\\"{}\\\"\", cx.derive_id(format!(\"reexport.{}\", s))),\n+                        clean::ImportKind::Glob => String::new(),\n+                    },\n                 );\n                 w.write_str(ITEM_TABLE_ROW_CLOSE);\n             }"}, {"sha": "2eafa540a1aa281be000e182067450e5ef8ab560", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93b86d69b649a0c4f1ba5ea9d141c1af633be576/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/93b86d69b649a0c4f1ba5ea9d141c1af633be576/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=93b86d69b649a0c4f1ba5ea9d141c1af633be576", "patch": "@@ -1510,6 +1510,9 @@ window.initSearch = rawSearchIndex => {\n             displayPath = path + \"::\";\n             href = window.rootPath + path.replace(/::/g, \"/\") + \"/\" +\n                    name + \"/index.html\";\n+        } else if (type === \"import\") {\n+            displayPath = item.path + \"::\";\n+            href = window.rootPath + item.path.replace(/::/g, \"/\") + \"/index.html#reexport.\" + name;\n         } else if (type === \"primitive\" || type === \"keyword\") {\n             displayPath = \"\";\n             href = window.rootPath + path.replace(/::/g, \"/\") +"}, {"sha": "557781d481092e6663d2cf4a3e641ae6159ee7fe", "filename": "src/test/rustdoc-gui/search-reexport.goml", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/93b86d69b649a0c4f1ba5ea9d141c1af633be576/src%2Ftest%2Frustdoc-gui%2Fsearch-reexport.goml", "raw_url": "https://github.com/rust-lang/rust/raw/93b86d69b649a0c4f1ba5ea9d141c1af633be576/src%2Ftest%2Frustdoc-gui%2Fsearch-reexport.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-reexport.goml?ref=93b86d69b649a0c4f1ba5ea9d141c1af633be576", "patch": "@@ -0,0 +1,29 @@\n+// Checks that the reexports are present in the search index, can have\n+// doc aliases and are highligted when their ID is the hash of the page.\n+goto: file://|DOC_PATH|/test_docs/index.html\n+local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n+reload:\n+// First we check that the reexport has the correct ID and no background color.\n+assert-text: (\"//*[@id='reexport.TheStdReexport']\", \"pub use ::std as TheStdReexport;\")\n+assert-css: (\"//*[@id='reexport.TheStdReexport']\", {\"background-color\": \"rgba(0, 0, 0, 0)\"})\n+write: (\".search-input\", \"TheStdReexport\")\n+wait-for: \"//a[@class='result-import']\"\n+assert-attribute: (\n+    \"//a[@class='result-import']\",\n+    {\"href\": \"../test_docs/index.html#reexport.TheStdReexport\"},\n+)\n+assert-text: (\"//a[@class='result-import']\", \"test_docs::TheStdReexport\")\n+click: \"//a[@class='result-import']\"\n+// We check that it has the background modified thanks to the focus.\n+wait-for-css: (\"//*[@id='reexport.TheStdReexport']\", {\"background-color\": \"rgb(73, 74, 61)\"})\n+\n+// We now check that the alias is working as well on the reexport.\n+write: (\".search-input\", \"AliasForTheStdReexport\")\n+wait-for: \"//a[@class='result-import']\"\n+assert-text: (\n+    \"//a[@class='result-import']\",\n+    \"AliasForTheStdReexport - see test_docs::TheStdReexport\",\n+)\n+// Same thing again, we click on it to ensure the background is once again set as expected.\n+click: \"//a[@class='result-import']\"\n+wait-for-css: (\"//*[@id='reexport.TheStdReexport']\", {\"background-color\": \"rgb(73, 74, 61)\"})"}, {"sha": "32fe3334f36440ffc0fd4ff25ade5a42297daf37", "filename": "src/test/rustdoc-gui/sidebar.goml", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/93b86d69b649a0c4f1ba5ea9d141c1af633be576/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "raw_url": "https://github.com/rust-lang/rust/raw/93b86d69b649a0c4f1ba5ea9d141c1af633be576/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml?ref=93b86d69b649a0c4f1ba5ea9d141c1af633be576", "patch": "@@ -13,15 +13,16 @@ assert-css: (\"#all-types\", {\"color\": \"rgb(53, 109, 164)\"})\n // We check that we have the crates list and that the \"current\" on is \"test_docs\".\n assert-text: (\".sidebar-elems .crate > ul > li > a.current\", \"test_docs\")\n // And we're also supposed to have the list of items in the current module.\n-assert-text: (\".sidebar-elems section ul > li:nth-child(1)\", \"Modules\")\n-assert-text: (\".sidebar-elems section ul > li:nth-child(2)\", \"Macros\")\n-assert-text: (\".sidebar-elems section ul > li:nth-child(3)\", \"Structs\")\n-assert-text: (\".sidebar-elems section ul > li:nth-child(4)\", \"Enums\")\n-assert-text: (\".sidebar-elems section ul > li:nth-child(5)\", \"Traits\")\n-assert-text: (\".sidebar-elems section ul > li:nth-child(6)\", \"Functions\")\n-assert-text: (\".sidebar-elems section ul > li:nth-child(7)\", \"Type Definitions\")\n-assert-text: (\".sidebar-elems section ul > li:nth-child(8)\", \"Unions\")\n-assert-text: (\".sidebar-elems section ul > li:nth-child(9)\", \"Keywords\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(1)\", \"Re-exports\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(2)\", \"Modules\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(3)\", \"Macros\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(4)\", \"Structs\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(5)\", \"Enums\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(6)\", \"Traits\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(7)\", \"Functions\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(8)\", \"Type Definitions\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(9)\", \"Unions\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(10)\", \"Keywords\")\n assert-text: (\"#structs + .item-table .item-left > a\", \"Foo\")\n click: \"#structs + .item-table .item-left > a\"\n "}, {"sha": "b6fe9eb2565bd0b568d7bc670e66358bc6565c17", "filename": "src/test/rustdoc-gui/src/test_docs/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93b86d69b649a0c4f1ba5ea9d141c1af633be576/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b86d69b649a0c4f1ba5ea9d141c1af633be576/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs?ref=93b86d69b649a0c4f1ba5ea9d141c1af633be576", "patch": "@@ -274,3 +274,6 @@ impl EmptyTrait3 for HasEmptyTraits {}\n \n mod macros;\n pub use macros::*;\n+\n+#[doc(alias = \"AliasForTheStdReexport\")]\n+pub use ::std as TheStdReexport;"}]}