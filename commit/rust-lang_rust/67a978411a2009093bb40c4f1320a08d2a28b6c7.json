{"sha": "67a978411a2009093bb40c4f1320a08d2a28b6c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YTk3ODQxMWEyMDA5MDkzYmI0MGM0ZjEzMjBhMDhkMmEyOGI2Yzc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-12T20:01:27Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-12T20:01:27Z"}, "message": "Support `#[deprecated]` in rustdoc", "tree": {"sha": "84b1bfdc10f59b61184b25f2547c73910ce0a007", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84b1bfdc10f59b61184b25f2547c73910ce0a007"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67a978411a2009093bb40c4f1320a08d2a28b6c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67a978411a2009093bb40c4f1320a08d2a28b6c7", "html_url": "https://github.com/rust-lang/rust/commit/67a978411a2009093bb40c4f1320a08d2a28b6c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67a978411a2009093bb40c4f1320a08d2a28b6c7/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "105bd152076ecc094fc8358f160d01f9fd866f55", "url": "https://api.github.com/repos/rust-lang/rust/commits/105bd152076ecc094fc8358f160d01f9fd866f55", "html_url": "https://github.com/rust-lang/rust/commit/105bd152076ecc094fc8358f160d01f9fd866f55"}], "stats": {"total": 125, "additions": 121, "deletions": 4}, "files": [{"sha": "c0f62cddb98bfe2e9c05c270cb1b30aa83649b1e", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67a978411a2009093bb40c4f1320a08d2a28b6c7/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a978411a2009093bb40c4f1320a08d2a28b6c7/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=67a978411a2009093bb40c4f1320a08d2a28b6c7", "patch": "@@ -121,6 +121,7 @@ fn try_inline_def(cx: &DocContext, tcx: &ty::ctxt,\n         inner: inner,\n         visibility: Some(hir::Public),\n         stability: stability::lookup_stability(tcx, did).clean(cx),\n+        deprecation: stability::lookup_deprecation(tcx, did).clean(cx),\n         def_id: did,\n     });\n     Some(ret)\n@@ -304,6 +305,7 @@ pub fn build_impl(cx: &DocContext,\n             attrs: attrs,\n             visibility: Some(hir::Inherited),\n             stability: stability::lookup_stability(tcx, did).clean(cx),\n+            deprecation: stability::lookup_deprecation(tcx, did).clean(cx),\n             def_id: did,\n         });\n     }\n@@ -334,6 +336,7 @@ pub fn build_impl(cx: &DocContext,\n                     attrs: vec![],\n                     visibility: None,\n                     stability: stability::lookup_stability(tcx, did).clean(cx),\n+                    deprecation: stability::lookup_deprecation(tcx, did).clean(cx),\n                     def_id: did\n                 })\n             }\n@@ -382,6 +385,7 @@ pub fn build_impl(cx: &DocContext,\n                     attrs: vec![],\n                     visibility: None,\n                     stability: stability::lookup_stability(tcx, did).clean(cx),\n+                    deprecation: stability::lookup_deprecation(tcx, did).clean(cx),\n                     def_id: did\n                 })\n             }\n@@ -415,6 +419,7 @@ pub fn build_impl(cx: &DocContext,\n         attrs: attrs,\n         visibility: Some(hir::Inherited),\n         stability: stability::lookup_stability(tcx, did).clean(cx),\n+        deprecation: stability::lookup_deprecation(tcx, did).clean(cx),\n         def_id: did,\n     });\n "}, {"sha": "52eeb781b31cccc7cfa22c13717444e5be31cb8f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/67a978411a2009093bb40c4f1320a08d2a28b6c7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a978411a2009093bb40c4f1320a08d2a28b6c7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=67a978411a2009093bb40c4f1320a08d2a28b6c7", "patch": "@@ -65,6 +65,10 @@ fn get_stability(cx: &DocContext, def_id: DefId) -> Option<Stability> {\n     cx.tcx_opt().and_then(|tcx| stability::lookup_stability(tcx, def_id)).clean(cx)\n }\n \n+fn get_deprecation(cx: &DocContext, def_id: DefId) -> Option<Deprecation> {\n+    cx.tcx_opt().and_then(|tcx| stability::lookup_deprecation(tcx, def_id)).clean(cx)\n+}\n+\n pub trait Clean<T> {\n     fn clean(&self, cx: &DocContext) -> T;\n }\n@@ -188,6 +192,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n                     attrs: child.attrs.clone(),\n                     visibility: Some(hir::Public),\n                     stability: None,\n+                    deprecation: None,\n                     def_id: DefId::local(prim.to_def_index()),\n                     inner: PrimitiveItem(prim),\n                 });\n@@ -254,6 +259,7 @@ pub struct Item {\n     pub visibility: Option<Visibility>,\n     pub def_id: DefId,\n     pub stability: Option<Stability>,\n+    pub deprecation: Option<Deprecation>,\n }\n \n impl Item {\n@@ -417,6 +423,7 @@ impl Clean<Item> for doctree::Module {\n             source: whence.clean(cx),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n+            deprecation: self.depr.clean(cx),\n             def_id: cx.map.local_def_id(self.id),\n             inner: ModuleItem(Module {\n                is_crate: self.is_crate,\n@@ -1078,6 +1085,7 @@ impl Clean<Item> for doctree::Function {\n             source: self.whence.clean(cx),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n+            deprecation: self.depr.clean(cx),\n             def_id: cx.map.local_def_id(self.id),\n             inner: FunctionItem(Function {\n                 decl: self.decl.clean(cx),\n@@ -1204,6 +1212,7 @@ impl Clean<Item> for doctree::Trait {\n             def_id: cx.map.local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n+            deprecation: self.depr.clean(cx),\n             inner: TraitItem(Trait {\n                 unsafety: self.unsafety,\n                 items: self.items.clean(cx),\n@@ -1254,6 +1263,7 @@ impl Clean<Item> for hir::TraitItem {\n             def_id: cx.map.local_def_id(self.id),\n             visibility: None,\n             stability: get_stability(cx, cx.map.local_def_id(self.id)),\n+            deprecation: get_deprecation(cx, cx.map.local_def_id(self.id)),\n             inner: inner\n         }\n     }\n@@ -1287,6 +1297,7 @@ impl Clean<Item> for hir::ImplItem {\n             def_id: cx.map.local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: get_stability(cx, cx.map.local_def_id(self.id)),\n+            deprecation: get_deprecation(cx, cx.map.local_def_id(self.id)),\n             inner: inner\n         }\n     }\n@@ -1357,6 +1368,7 @@ impl<'tcx> Clean<Item> for ty::Method<'tcx> {\n             name: Some(self.name.clean(cx)),\n             visibility: Some(hir::Inherited),\n             stability: get_stability(cx, self.def_id),\n+            deprecation: get_deprecation(cx, self.def_id),\n             def_id: self.def_id,\n             attrs: inline::load_attrs(cx, cx.tcx(), self.def_id),\n             source: Span::empty(),\n@@ -1715,6 +1727,7 @@ impl Clean<Item> for hir::StructField {\n             source: self.span.clean(cx),\n             visibility: Some(vis),\n             stability: get_stability(cx, cx.map.local_def_id(self.node.id)),\n+            deprecation: get_deprecation(cx, cx.map.local_def_id(self.node.id)),\n             def_id: cx.map.local_def_id(self.node.id),\n             inner: StructFieldItem(TypedStructField(self.node.ty.clean(cx))),\n         }\n@@ -1740,6 +1753,7 @@ impl<'tcx> Clean<Item> for ty::FieldDefData<'tcx, 'static> {\n             source: Span::empty(),\n             visibility: Some(self.vis),\n             stability: get_stability(cx, self.did),\n+            deprecation: get_deprecation(cx, self.did),\n             def_id: self.did,\n             inner: StructFieldItem(TypedStructField(self.unsubst_ty().clean(cx))),\n         }\n@@ -1771,6 +1785,7 @@ impl Clean<Item> for doctree::Struct {\n             def_id: cx.map.local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n+            deprecation: self.depr.clean(cx),\n             inner: StructItem(Struct {\n                 struct_type: self.struct_type,\n                 generics: self.generics.clean(cx),\n@@ -1817,6 +1832,7 @@ impl Clean<Item> for doctree::Enum {\n             def_id: cx.map.local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n+            deprecation: self.depr.clean(cx),\n             inner: EnumItem(Enum {\n                 variants: self.variants.clean(cx),\n                 generics: self.generics.clean(cx),\n@@ -1839,6 +1855,7 @@ impl Clean<Item> for doctree::Variant {\n             source: self.whence.clean(cx),\n             visibility: None,\n             stability: self.stab.clean(cx),\n+            deprecation: self.depr.clean(cx),\n             def_id: cx.map.local_def_id(self.def.id()),\n             inner: VariantItem(Variant {\n                 kind: struct_def_to_variant_kind(&self.def, cx),\n@@ -1876,6 +1893,7 @@ impl<'tcx> Clean<Item> for ty::VariantDefData<'tcx, 'static> {\n                             //        at the needed information here.\n                             def_id: self.did,\n                             stability: get_stability(cx, self.did),\n+                            deprecation: get_deprecation(cx, self.did),\n                             inner: StructFieldItem(\n                                 TypedStructField(field.unsubst_ty().clean(cx))\n                             )\n@@ -1892,6 +1910,7 @@ impl<'tcx> Clean<Item> for ty::VariantDefData<'tcx, 'static> {\n             def_id: self.did,\n             inner: VariantItem(Variant { kind: kind }),\n             stability: get_stability(cx, self.did),\n+            deprecation: get_deprecation(cx, self.did),\n         }\n     }\n }\n@@ -2067,6 +2086,7 @@ impl Clean<Item> for doctree::Typedef {\n             def_id: cx.map.local_def_id(self.id.clone()),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n+            deprecation: self.depr.clean(cx),\n             inner: TypedefItem(Typedef {\n                 type_: self.ty.clean(cx),\n                 generics: self.gen.clean(cx),\n@@ -2118,6 +2138,7 @@ impl Clean<Item> for doctree::Static {\n             def_id: cx.map.local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n+            deprecation: self.depr.clean(cx),\n             inner: StaticItem(Static {\n                 type_: self.type_.clean(cx),\n                 mutability: self.mutability.clean(cx),\n@@ -2142,6 +2163,7 @@ impl Clean<Item> for doctree::Constant {\n             def_id: cx.map.local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n+            deprecation: self.depr.clean(cx),\n             inner: ConstantItem(Constant {\n                 type_: self.type_.clean(cx),\n                 expr: self.expr.span.to_src(cx),\n@@ -2216,6 +2238,7 @@ impl Clean<Vec<Item>> for doctree::Impl {\n             def_id: cx.map.local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n+            deprecation: self.depr.clean(cx),\n             inner: ImplItem(Impl {\n                 unsafety: self.unsafety,\n                 generics: self.generics.clean(cx),\n@@ -2298,6 +2321,7 @@ impl Clean<Item> for doctree::DefaultImpl {\n             def_id: cx.map.local_def_id(self.id),\n             visibility: Some(hir::Public),\n             stability: None,\n+            deprecation: None,\n             inner: DefaultImplItem(DefaultImpl {\n                 unsafety: self.unsafety,\n                 trait_: self.trait_.clean(cx),\n@@ -2315,6 +2339,7 @@ impl Clean<Item> for doctree::ExternCrate {\n             def_id: cx.map.local_def_id(0),\n             visibility: self.vis.clean(cx),\n             stability: None,\n+            deprecation: None,\n             inner: ExternCrateItem(self.name.clean(cx), self.path.clone())\n         }\n     }\n@@ -2380,6 +2405,7 @@ impl Clean<Vec<Item>> for doctree::Import {\n             def_id: cx.map.local_def_id(0),\n             visibility: self.vis.clean(cx),\n             stability: None,\n+            deprecation: None,\n             inner: ImportItem(inner)\n         });\n         ret\n@@ -2466,6 +2492,7 @@ impl Clean<Item> for hir::ForeignItem {\n             def_id: cx.map.local_def_id(self.id),\n             visibility: self.vis.clean(cx),\n             stability: get_stability(cx, cx.map.local_def_id(self.id)),\n+            deprecation: get_deprecation(cx, cx.map.local_def_id(self.id)),\n             inner: inner,\n         }\n     }\n@@ -2659,6 +2686,7 @@ impl Clean<Item> for doctree::Macro {\n             source: self.whence.clean(cx),\n             visibility: hir::Public.clean(cx),\n             stability: self.stab.clean(cx),\n+            deprecation: self.depr.clean(cx),\n             def_id: cx.map.local_def_id(self.id),\n             inner: MacroItem(Macro {\n                 source: format!(\"macro_rules! {} {{\\n{}}}\",\n@@ -2680,6 +2708,12 @@ pub struct Stability {\n     pub issue: Option<u32>\n }\n \n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub struct Deprecation {\n+    pub since: String,\n+    pub note: String,\n+}\n+\n impl Clean<Stability> for attr::Stability {\n     fn clean(&self, _: &DocContext) -> Stability {\n         Stability {\n@@ -2716,6 +2750,15 @@ impl<'a> Clean<Stability> for &'a attr::Stability {\n     }\n }\n \n+impl Clean<Deprecation> for attr::Deprecation {\n+    fn clean(&self, _: &DocContext) -> Deprecation {\n+        Deprecation {\n+            since: self.since.as_ref().map_or(\"\".to_string(), |s| s.to_string()),\n+            note: self.note.as_ref().map_or(\"\".to_string(), |s| s.to_string()),\n+        }\n+    }\n+}\n+\n impl<'tcx> Clean<Item> for ty::AssociatedConst<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Item {\n         Item {\n@@ -2726,6 +2769,7 @@ impl<'tcx> Clean<Item> for ty::AssociatedConst<'tcx> {\n             visibility: None,\n             def_id: self.def_id,\n             stability: None,\n+            deprecation: None,\n         }\n     }\n }\n@@ -2783,6 +2827,7 @@ impl<'tcx> Clean<Item> for ty::AssociatedType<'tcx> {\n             visibility: self.vis.clean(cx),\n             def_id: self.def_id,\n             stability: stability::lookup_stability(cx.tcx(), self.def_id).clean(cx),\n+            deprecation: stability::lookup_deprecation(cx.tcx(), self.def_id).clean(cx),\n         }\n     }\n }"}, {"sha": "d1030a6fcb07c56234f99e4dae6298ec072ab0cb", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67a978411a2009093bb40c4f1320a08d2a28b6c7/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a978411a2009093bb40c4f1320a08d2a28b6c7/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=67a978411a2009093bb40c4f1320a08d2a28b6c7", "patch": "@@ -40,6 +40,7 @@ pub struct Module {\n     pub traits: Vec<Trait>,\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n+    pub depr: Option<attr::Deprecation>,\n     pub impls: Vec<Impl>,\n     pub def_traits: Vec<DefaultImpl>,\n     pub foreigns: Vec<hir::ForeignMod>,\n@@ -54,6 +55,7 @@ impl Module {\n             id: 0,\n             vis: hir::Inherited,\n             stab: None,\n+            depr: None,\n             where_outer: syntax::codemap::DUMMY_SP,\n             where_inner: syntax::codemap::DUMMY_SP,\n             attrs      : Vec::new(),\n@@ -96,6 +98,7 @@ pub enum TypeBound {\n pub struct Struct {\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n+    pub depr: Option<attr::Deprecation>,\n     pub id: NodeId,\n     pub struct_type: StructType,\n     pub name: Name,\n@@ -108,6 +111,7 @@ pub struct Struct {\n pub struct Enum {\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n+    pub depr: Option<attr::Deprecation>,\n     pub variants: Vec<Variant>,\n     pub generics: hir::Generics,\n     pub attrs: Vec<ast::Attribute>,\n@@ -121,6 +125,7 @@ pub struct Variant {\n     pub attrs: Vec<ast::Attribute>,\n     pub def: hir::VariantData,\n     pub stab: Option<attr::Stability>,\n+    pub depr: Option<attr::Deprecation>,\n     pub whence: Span,\n }\n \n@@ -131,6 +136,7 @@ pub struct Function {\n     pub name: Name,\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n+    pub depr: Option<attr::Deprecation>,\n     pub unsafety: hir::Unsafety,\n     pub constness: hir::Constness,\n     pub whence: Span,\n@@ -147,6 +153,7 @@ pub struct Typedef {\n     pub whence: Span,\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n+    pub depr: Option<attr::Deprecation>,\n }\n \n #[derive(Debug)]\n@@ -158,6 +165,7 @@ pub struct Static {\n     pub attrs: Vec<ast::Attribute>,\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n+    pub depr: Option<attr::Deprecation>,\n     pub id: ast::NodeId,\n     pub whence: Span,\n }\n@@ -169,6 +177,7 @@ pub struct Constant {\n     pub attrs: Vec<ast::Attribute>,\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n+    pub depr: Option<attr::Deprecation>,\n     pub id: ast::NodeId,\n     pub whence: Span,\n }\n@@ -184,6 +193,7 @@ pub struct Trait {\n     pub whence: Span,\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n+    pub depr: Option<attr::Deprecation>,\n }\n \n pub struct Impl {\n@@ -197,6 +207,7 @@ pub struct Impl {\n     pub whence: Span,\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n+    pub depr: Option<attr::Deprecation>,\n     pub id: ast::NodeId,\n }\n \n@@ -215,6 +226,7 @@ pub struct Macro {\n     pub whence: Span,\n     pub matchers: Vec<Span>,\n     pub stab: Option<attr::Stability>,\n+    pub depr: Option<attr::Deprecation>,\n     pub imported_from: Option<Name>,\n }\n "}, {"sha": "5a4f95d1a1a5a7b24f4ce8050e7faeb105b83b09", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67a978411a2009093bb40c4f1320a08d2a28b6c7/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a978411a2009093bb40c4f1320a08d2a28b6c7/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=67a978411a2009093bb40c4f1320a08d2a28b6c7", "patch": "@@ -19,7 +19,7 @@ pub trait DocFolder : Sized {\n \n     /// don't override!\n     fn fold_item_recur(&mut self, item: Item) -> Option<Item> {\n-        let Item { attrs, name, source, visibility, def_id, inner, stability } = item;\n+        let Item { attrs, name, source, visibility, def_id, inner, stability, deprecation } = item;\n         let inner = inner;\n         let inner = match inner {\n             StructItem(mut i) => {\n@@ -66,7 +66,8 @@ pub trait DocFolder : Sized {\n         };\n \n         Some(Item { attrs: attrs, name: name, source: source, inner: inner,\n-                    visibility: visibility, stability: stability, def_id: def_id })\n+                    visibility: visibility, stability: stability, deprecation: deprecation,\n+                    def_id: def_id })\n     }\n \n     fn fold_mod(&mut self, m: Module) -> Module {"}, {"sha": "09a2a1b1c02699e46fb78243b5cf196a95325ed1", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/67a978411a2009093bb40c4f1320a08d2a28b6c7/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a978411a2009093bb40c4f1320a08d2a28b6c7/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=67a978411a2009093bb40c4f1320a08d2a28b6c7", "patch": "@@ -1801,7 +1801,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n }\n \n fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Option<String> {\n-    item.stability.as_ref().and_then(|stab| {\n+    let mut result = item.stability.as_ref().and_then(|stab| {\n         let reason = if show_reason && !stab.reason.is_empty() {\n             format!(\": {}\", stab.reason)\n         } else {\n@@ -1836,7 +1836,27 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Optio\n         };\n         Some(format!(\"<em class='stab {}'>{}</em>\",\n                      item.stability_class(), text))\n-    })\n+    });\n+\n+    if result.is_none() {\n+        result = item.deprecation.as_ref().and_then(|depr| {\n+            let note = if show_reason && !depr.note.is_empty() {\n+                format!(\": {}\", depr.note)\n+            } else {\n+                String::new()\n+            };\n+            let since = if show_reason && !depr.since.is_empty() {\n+                format!(\" since {}\", Escape(&depr.since))\n+            } else {\n+                String::new()\n+            };\n+\n+            let text = format!(\"Deprecated{}{}\", since, Markdown(&note));\n+            Some(format!(\"<em class='stab deprecated'>{}</em>\", text))\n+        });\n+    }\n+\n+    result\n }\n \n struct Initializer<'a>(&'a str);"}, {"sha": "d95a4553bf1f53b3b33e24a59c26b3c37d46acfe", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/67a978411a2009093bb40c4f1320a08d2a28b6c7/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a978411a2009093bb40c4f1320a08d2a28b6c7/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=67a978411a2009093bb40c4f1320a08d2a28b6c7", "patch": "@@ -69,6 +69,13 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         })\n     }\n \n+    fn deprecation(&self, id: ast::NodeId) -> Option<attr::Deprecation> {\n+        self.cx.tcx_opt().and_then(|tcx| {\n+            self.cx.map.opt_local_def_id(id)\n+                       .and_then(|def_id| stability::lookup_deprecation(tcx, def_id))\n+        })\n+    }\n+\n     pub fn visit(&mut self, krate: &hir::Crate) {\n         self.attrs = krate.attrs.clone();\n \n@@ -95,6 +102,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             name: name,\n             vis: item.vis,\n             stab: self.stability(item.id),\n+            depr: self.deprecation(item.id),\n             attrs: item.attrs.clone(),\n             generics: generics.clone(),\n             fields: sd.fields().iter().cloned().collect(),\n@@ -112,11 +120,13 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 name: v.node.name,\n                 attrs: v.node.attrs.clone(),\n                 stab: self.stability(v.node.data.id()),\n+                depr: self.deprecation(v.node.data.id()),\n                 def: v.node.data.clone(),\n                 whence: v.span,\n             }).collect(),\n             vis: it.vis,\n             stab: self.stability(it.id),\n+            depr: self.deprecation(it.id),\n             generics: params.clone(),\n             attrs: it.attrs.clone(),\n             id: it.id,\n@@ -135,6 +145,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             id: item.id,\n             vis: item.vis,\n             stab: self.stability(item.id),\n+            depr: self.deprecation(item.id),\n             attrs: item.attrs.clone(),\n             decl: fd.clone(),\n             name: name,\n@@ -156,6 +167,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         om.attrs = attrs;\n         om.vis = vis;\n         om.stab = self.stability(id);\n+        om.depr = self.deprecation(id);\n         om.id = id;\n         for i in &m.item_ids {\n             let item = self.cx.map.expect_item(i.id);\n@@ -314,6 +326,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     whence: item.span,\n                     vis: item.vis,\n                     stab: self.stability(item.id),\n+                    depr: self.deprecation(item.id),\n                 };\n                 om.typedefs.push(t);\n             },\n@@ -328,6 +341,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     whence: item.span,\n                     vis: item.vis,\n                     stab: self.stability(item.id),\n+                    depr: self.deprecation(item.id),\n                 };\n                 om.statics.push(s);\n             },\n@@ -341,6 +355,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     whence: item.span,\n                     vis: item.vis,\n                     stab: self.stability(item.id),\n+                    depr: self.deprecation(item.id),\n                 };\n                 om.constants.push(s);\n             },\n@@ -356,6 +371,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     whence: item.span,\n                     vis: item.vis,\n                     stab: self.stability(item.id),\n+                    depr: self.deprecation(item.id),\n                 };\n                 om.traits.push(t);\n             },\n@@ -372,6 +388,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     whence: item.span,\n                     vis: item.vis,\n                     stab: self.stability(item.id),\n+                    depr: self.deprecation(item.id),\n                 };\n                 // Don't duplicate impls when inlining glob imports, we'll pick\n                 // them up regardless of where they're located.\n@@ -410,6 +427,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             whence: def.span,\n             matchers: matchers,\n             stab: self.stability(def.id),\n+            depr: self.deprecation(def.id),\n             imported_from: def.imported_from,\n         }\n     }"}, {"sha": "744304a62c216ec0a61768d85b9a9b367241f419", "filename": "src/test/rustdoc/deprecated.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/67a978411a2009093bb40c4f1320a08d2a28b6c7/src%2Ftest%2Frustdoc%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a978411a2009093bb40c4f1320a08d2a28b6c7/src%2Ftest%2Frustdoc%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdeprecated.rs?ref=67a978411a2009093bb40c4f1320a08d2a28b6c7", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(deprecated)]\n+\n+// @has deprecated/struct.S.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecated since 1.0.0: text'\n+#[deprecated(since = \"1.0.0\", note = \"text\")]\n+pub struct S;"}]}