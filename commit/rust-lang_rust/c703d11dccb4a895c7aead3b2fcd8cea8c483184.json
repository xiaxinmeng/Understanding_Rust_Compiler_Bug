{"sha": "c703d11dccb4a895c7aead3b2fcd8cea8c483184", "node_id": "C_kwDOAAsO6NoAKGM3MDNkMTFkY2NiNGE4OTVjN2FlYWQzYjJmY2Q4Y2VhOGM0ODMxODQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-28T10:00:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-28T10:00:00Z"}, "message": "Rollup merge of #97346 - JohnTitor:remove-back-compat-hacks, r=oli-obk\n\nRemove a back-compat hack on lazy TAIT\n\nThis PR's motivation is here: https://github.com/rust-lang/rust/issues/72614#issuecomment-1134595446\n~~But removing a hack doesn't seem to reject the code on the issue, there're some more hacks?~~\nr? ``@oli-obk``", "tree": {"sha": "3905586f8d62397af291548c78eb7fc6202eaaca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3905586f8d62397af291548c78eb7fc6202eaaca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c703d11dccb4a895c7aead3b2fcd8cea8c483184", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiutEgCRBK7hj4Ov3rIwAAhpEIAE9H9kcuvR+oIIfmNLkr431J\nCXqErgs3Dq3FO9Oii9M5ka9HUWtWH4Bw97nQy6eJu0YR8QE+Yt7BfM5A876CoobS\nU+CLV3j89Rl/I4xN2DkeoCyH6ECg1L6o76fP3vk3TCnfS1f7CehMhv0juwvqGK21\nbsMeTQb24lFwhnstGThuDCdaR3DH8feob1Lp1PV611+Ss7M8zOvBwcZR2c74LqFw\nf8LrsZ00X/geH8kSbWqmYHWgMwXQnjhGNLHcfnLGg6G1PG2r+O89IBU4ewvsYluJ\nWWBy9MhDd/cINnVwWVPT78DfZIO9eP4C0hctaCS+u0uBCUtQu682/MAlbKOhoJM=\n=1M91\n-----END PGP SIGNATURE-----\n", "payload": "tree 3905586f8d62397af291548c78eb7fc6202eaaca\nparent 64eb9ab869bc3f9ef3645302fbf22e706eea16cf\nparent c24f06354aa4434e872c72cbb88fb205140738dd\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1656410400 +0530\ncommitter GitHub <noreply@github.com> 1656410400 +0530\n\nRollup merge of #97346 - JohnTitor:remove-back-compat-hacks, r=oli-obk\n\nRemove a back-compat hack on lazy TAIT\n\nThis PR's motivation is here: https://github.com/rust-lang/rust/issues/72614#issuecomment-1134595446\n~~But removing a hack doesn't seem to reject the code on the issue, there're some more hacks?~~\nr? ``@oli-obk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c703d11dccb4a895c7aead3b2fcd8cea8c483184", "html_url": "https://github.com/rust-lang/rust/commit/c703d11dccb4a895c7aead3b2fcd8cea8c483184", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c703d11dccb4a895c7aead3b2fcd8cea8c483184/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64eb9ab869bc3f9ef3645302fbf22e706eea16cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/64eb9ab869bc3f9ef3645302fbf22e706eea16cf", "html_url": "https://github.com/rust-lang/rust/commit/64eb9ab869bc3f9ef3645302fbf22e706eea16cf"}, {"sha": "c24f06354aa4434e872c72cbb88fb205140738dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c24f06354aa4434e872c72cbb88fb205140738dd", "html_url": "https://github.com/rust-lang/rust/commit/c24f06354aa4434e872c72cbb88fb205140738dd"}], "stats": {"total": 59, "additions": 28, "deletions": 31}, "files": [{"sha": "ebb8d4434215fef29a0c9928c12a144262b3ce84", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c703d11dccb4a895c7aead3b2fcd8cea8c483184/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c703d11dccb4a895c7aead3b2fcd8cea8c483184/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=c703d11dccb4a895c7aead3b2fcd8cea8c483184", "patch": "@@ -39,21 +39,19 @@ pub struct OpaqueTypeDecl<'tcx> {\n }\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n-    /// This is a backwards compatibility hack to prevent breaking changes from\n-    /// lazy TAIT around RPIT handling.\n-    pub fn replace_opaque_types_with_inference_vars<T: TypeFoldable<'tcx>>(\n+    pub fn replace_opaque_types_with_inference_vars(\n         &self,\n-        value: T,\n+        ty: Ty<'tcx>,\n         body_id: HirId,\n         span: Span,\n         code: ObligationCauseCode<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-    ) -> InferOk<'tcx, T> {\n-        if !value.has_opaque_types() {\n-            return InferOk { value, obligations: vec![] };\n+    ) -> InferOk<'tcx, Ty<'tcx>> {\n+        if !ty.has_opaque_types() {\n+            return InferOk { value: ty, obligations: vec![] };\n         }\n         let mut obligations = vec![];\n-        let value = value.fold_with(&mut ty::fold::BottomUpFolder {\n+        let value = ty.fold_with(&mut ty::fold::BottomUpFolder {\n             tcx: self.tcx,\n             lt_op: |lt| lt,\n             ct_op: |ct| ct,"}, {"sha": "aba4f144d4bcc7db0871fb19216c7b3e3dea4bf9", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c703d11dccb4a895c7aead3b2fcd8cea8c483184/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c703d11dccb4a895c7aead3b2fcd8cea8c483184/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=c703d11dccb4a895c7aead3b2fcd8cea8c483184", "patch": "@@ -28,7 +28,6 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n-use rustc_infer::traits::ObligationCauseCode;\n use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::fold::{MaxUniverse, TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::subst::Subst;\n@@ -252,22 +251,10 @@ fn project_and_unify_type<'cx, 'tcx>(\n         Err(InProgress) => return ProjectAndUnifyResult::Recursive,\n     };\n     debug!(?normalized, ?obligations, \"project_and_unify_type result\");\n-    let actual = obligation.predicate.term;\n-    // HACK: lazy TAIT would regress src/test/ui/impl-trait/nested-return-type2.rs, so we add\n-    // a back-compat hack hat converts the RPITs into inference vars, just like they were before\n-    // lazy TAIT.\n-    // This does not affect TAITs in general, as tested in the nested-return-type-tait* tests.\n-    let InferOk { value: actual, obligations: new } =\n-        selcx.infcx().replace_opaque_types_with_inference_vars(\n-            actual,\n-            obligation.cause.body_id,\n-            obligation.cause.span,\n-            ObligationCauseCode::MiscObligation,\n-            obligation.param_env,\n-        );\n-    obligations.extend(new);\n-\n-    match infcx.at(&obligation.cause, obligation.param_env).eq(normalized, actual) {\n+    match infcx\n+        .at(&obligation.cause, obligation.param_env)\n+        .eq(normalized, obligation.predicate.term)\n+    {\n         Ok(InferOk { obligations: inferred_obligations, value: () }) => {\n             obligations.extend(inferred_obligations);\n             ProjectAndUnifyResult::Holds(obligations)"}, {"sha": "279641a46c3d0fd32402b7d9576d7247bf05c151", "filename": "src/test/ui/impl-trait/nested-return-type2.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c703d11dccb4a895c7aead3b2fcd8cea8c483184/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c703d11dccb4a895c7aead3b2fcd8cea8c483184/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.rs?ref=c703d11dccb4a895c7aead3b2fcd8cea8c483184", "patch": "@@ -1,5 +1,3 @@\n-// check-pass\n-\n trait Duh {}\n \n impl Duh for i32 {}\n@@ -20,11 +18,9 @@ impl<R: Duh, F: FnMut() -> R> Trait for F {\n // the hidden type. We already have obligations registered on the inference\n // var to make it uphold the `: Duh` bound on `Trait::Assoc`. The opaque\n // type does not implement `Duh`, even if its hidden type does.\n-// Lazy TAIT would error out, but we inserted a hack to make it work again,\n-// keeping backwards compatibility.\n fn foo() -> impl Trait<Assoc = impl Send> {\n+    //~^ ERROR `impl Send: Duh` is not satisfied\n     || 42\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "f996e99de074208a67bca89e474f2b6f0b4b974a", "filename": "src/test/ui/impl-trait/nested-return-type2.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c703d11dccb4a895c7aead3b2fcd8cea8c483184/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c703d11dccb4a895c7aead3b2fcd8cea8c483184/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr?ref=c703d11dccb4a895c7aead3b2fcd8cea8c483184", "patch": "@@ -0,0 +1,16 @@\n+error[E0277]: the trait bound `impl Send: Duh` is not satisfied\n+  --> $DIR/nested-return-type2.rs:21:13\n+   |\n+LL | fn foo() -> impl Trait<Assoc = impl Send> {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Duh` is not implemented for `impl Send`\n+   |\n+   = help: the trait `Duh` is implemented for `i32`\n+note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2.rs:23:5: 23:10]`\n+  --> $DIR/nested-return-type2.rs:12:31\n+   |\n+LL | impl<R: Duh, F: FnMut() -> R> Trait for F {\n+   |                               ^^^^^     ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}