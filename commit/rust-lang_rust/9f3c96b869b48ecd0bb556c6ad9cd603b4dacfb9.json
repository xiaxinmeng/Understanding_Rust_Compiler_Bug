{"sha": "9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmM2M5NmI4NjliNDhlY2QwYmI1NTZjNmFkOWNkNjAzYjRkYWNmYjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-25T12:43:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-25T12:43:50Z"}, "message": "Auto merge of #73711 - Dylan-DPC:rollup-kzx15of, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #72700 (`improper_ctypes_definitions` lint)\n - #73516 (Allow dynamic linking for iOS/tvOS targets)\n - #73616 (Liballoc minor hash import tweak)\n - #73634 (Add UI test for issue 73592)\n - #73688 (Document the self keyword)\n - #73698 (Add procedure for prioritization notifications on Zulip)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "2db86ae6273e5e966c66f2891ca26cf89b8f6e11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2db86ae6273e5e966c66f2891ca26cf89b8f6e11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "html_url": "https://github.com/rust-lang/rust/commit/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "229e5b2640fc5715e77607a989748be588d983f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/229e5b2640fc5715e77607a989748be588d983f2", "html_url": "https://github.com/rust-lang/rust/commit/229e5b2640fc5715e77607a989748be588d983f2"}, {"sha": "8d1934ec8d3ae75c19afe9b1de4373801d383a9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1934ec8d3ae75c19afe9b1de4373801d383a9f", "html_url": "https://github.com/rust-lang/rust/commit/8d1934ec8d3ae75c19afe9b1de4373801d383a9f"}], "stats": {"total": 778, "additions": 733, "deletions": 45}, "files": [{"sha": "f1b560b9b968550dea1950fd4bba412e18190f5c", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -92,11 +92,13 @@\n //! pub struct Foo;\n //!\n //! #[no_mangle]\n+//! #[allow(improper_ctypes_definitions)]\n //! pub extern \"C\" fn foo_new() -> Box<Foo> {\n //!     Box::new(Foo)\n //! }\n //!\n //! #[no_mangle]\n+//! #[allow(improper_ctypes_definitions)]\n //! pub extern \"C\" fn foo_delete(_: Option<Box<Foo>>) {}\n //! ```\n //!"}, {"sha": "1265d0e56b576ceed08c1f12091a4abd8053b043", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -62,7 +62,7 @@\n use core::array::LengthAtMost32;\n use core::cmp::{self, Ordering};\n use core::fmt;\n-use core::hash::{self, Hash};\n+use core::hash::{Hash, Hasher};\n use core::intrinsics::{arith_offset, assume};\n use core::iter::{FromIterator, FusedIterator, TrustedLen};\n use core::marker::PhantomData;\n@@ -1943,7 +1943,7 @@ impl<T: Clone> Clone for Vec<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Hash> Hash for Vec<T> {\n     #[inline]\n-    fn hash<H: hash::Hasher>(&self, state: &mut H) {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n         Hash::hash(&**self, state)\n     }\n }"}, {"sha": "27056d5f934fdc1c4f503ab294ba7803dbab2d17", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -21,6 +21,7 @@\n use core::any::Any;\n \n #[rustc_std_internal_symbol]\n+#[cfg_attr(not(bootstrap), allow(improper_ctypes_definitions))]\n pub unsafe extern \"C\" fn __rust_panic_cleanup(_: *mut u8) -> *mut (dyn Any + Send + 'static) {\n     unreachable!()\n }"}, {"sha": "f361354da2ac2ff59081a778e10b4fcfb67edec6", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -81,6 +81,7 @@ extern \"C\" {\n mod dwarf;\n \n #[rustc_std_internal_symbol]\n+#[cfg_attr(not(bootstrap), allow(improper_ctypes_definitions))]\n pub unsafe extern \"C\" fn __rust_panic_cleanup(payload: *mut u8) -> *mut (dyn Any + Send + 'static) {\n     Box::into_raw(imp::cleanup(payload))\n }"}, {"sha": "b39abe7b411bbad607cc3a4cb12e330bbccd0ac3", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -167,7 +167,8 @@ macro_rules! late_lint_mod_passes {\n             $args,\n             [\n                 HardwiredLints: HardwiredLints,\n-                ImproperCTypes: ImproperCTypes,\n+                ImproperCTypesDeclarations: ImproperCTypesDeclarations,\n+                ImproperCTypesDefinitions: ImproperCTypesDefinitions,\n                 VariantSizeDifferences: VariantSizeDifferences,\n                 BoxPointers: BoxPointers,\n                 PathStatements: PathStatements,"}, {"sha": "cfafb86fbedb1e0574ecd80c83668b48a768133c", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 95, "deletions": 25, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt, TypeFoldable};\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::{Integer, LayoutOf, TagEncoding, VariantIdx, Variants};\n use rustc_target::spec::abi::Abi;\n \n@@ -498,10 +498,24 @@ declare_lint! {\n     \"proper use of libc types in foreign modules\"\n }\n \n-declare_lint_pass!(ImproperCTypes => [IMPROPER_CTYPES]);\n+declare_lint_pass!(ImproperCTypesDeclarations => [IMPROPER_CTYPES]);\n+\n+declare_lint! {\n+    IMPROPER_CTYPES_DEFINITIONS,\n+    Warn,\n+    \"proper use of libc types in foreign item definitions\"\n+}\n+\n+declare_lint_pass!(ImproperCTypesDefinitions => [IMPROPER_CTYPES_DEFINITIONS]);\n+\n+enum ImproperCTypesMode {\n+    Declarations,\n+    Definitions,\n+}\n \n struct ImproperCTypesVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n+    mode: ImproperCTypesMode,\n }\n \n enum FfiResult<'tcx> {\n@@ -804,27 +818,32 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 help: Some(\"consider using a struct instead\".into()),\n             },\n \n+            ty::RawPtr(ty::TypeAndMut { ty, .. }) | ty::Ref(_, ty, _)\n+                if {\n+                    matches!(self.mode, ImproperCTypesMode::Definitions)\n+                        && ty.is_sized(self.cx.tcx.at(DUMMY_SP), self.cx.param_env)\n+                } =>\n+            {\n+                FfiSafe\n+            }\n+\n             ty::RawPtr(ty::TypeAndMut { ty, .. }) | ty::Ref(_, ty, _) => {\n                 self.check_type_for_ffi(cache, ty)\n             }\n \n             ty::Array(inner_ty, _) => self.check_type_for_ffi(cache, inner_ty),\n \n             ty::FnPtr(sig) => {\n-                match sig.abi() {\n-                    Abi::Rust | Abi::RustIntrinsic | Abi::PlatformIntrinsic | Abi::RustCall => {\n-                        return FfiUnsafe {\n-                            ty,\n-                            reason: \"this function pointer has Rust-specific calling convention\"\n+                if self.is_internal_abi(sig.abi()) {\n+                    return FfiUnsafe {\n+                        ty,\n+                        reason: \"this function pointer has Rust-specific calling convention\".into(),\n+                        help: Some(\n+                            \"consider using an `extern fn(...) -> ...` \\\n+                                    function pointer instead\"\n                                 .into(),\n-                            help: Some(\n-                                \"consider using an `extern fn(...) -> ...` \\\n-                                        function pointer instead\"\n-                                    .into(),\n-                            ),\n-                        };\n-                    }\n-                    _ => {}\n+                        ),\n+                    };\n                 }\n \n                 let sig = cx.erase_late_bound_regions(&sig);\n@@ -857,15 +876,23 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 FfiUnsafe { ty, reason: \"opaque types have no C equivalent\".into(), help: None }\n             }\n \n+            // `extern \"C\" fn` functions can have type parameters, which may or may not be FFI-safe,\n+            //  so they are currently ignored for the purposes of this lint.\n+            ty::Param(..) | ty::Projection(..)\n+                if matches!(self.mode, ImproperCTypesMode::Definitions) =>\n+            {\n+                FfiSafe\n+            }\n+\n             ty::Param(..)\n+            | ty::Projection(..)\n             | ty::Infer(..)\n             | ty::Bound(..)\n             | ty::Error(_)\n             | ty::Closure(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n             | ty::Placeholder(..)\n-            | ty::Projection(..)\n             | ty::FnDef(..) => bug!(\"unexpected type in foreign function: {:?}\", ty),\n         }\n     }\n@@ -877,9 +904,20 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         note: &str,\n         help: Option<&str>,\n     ) {\n-        self.cx.struct_span_lint(IMPROPER_CTYPES, sp, |lint| {\n-            let mut diag =\n-                lint.build(&format!(\"`extern` block uses type `{}`, which is not FFI-safe\", ty));\n+        let lint = match self.mode {\n+            ImproperCTypesMode::Declarations => IMPROPER_CTYPES,\n+            ImproperCTypesMode::Definitions => IMPROPER_CTYPES_DEFINITIONS,\n+        };\n+\n+        self.cx.struct_span_lint(lint, sp, |lint| {\n+            let item_description = match self.mode {\n+                ImproperCTypesMode::Declarations => \"block\",\n+                ImproperCTypesMode::Definitions => \"fn\",\n+            };\n+            let mut diag = lint.build(&format!(\n+                \"`extern` {} uses type `{}`, which is not FFI-safe\",\n+                item_description, ty\n+            ));\n             diag.span_label(sp, \"not FFI-safe\");\n             if let Some(help) = help {\n                 diag.help(help);\n@@ -947,7 +985,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n         // it is only OK to use this function because extern fns cannot have\n         // any generic types right now:\n-        let ty = self.cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n+        let ty = self.cx.tcx.normalize_erasing_regions(self.cx.param_env, ty);\n \n         // C doesn't really support passing arrays by value - the only way to pass an array by value\n         // is through a struct. So, first test that the top level isn't an array, and then\n@@ -997,15 +1035,22 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         let ty = self.cx.tcx.type_of(def_id);\n         self.check_type_for_ffi_and_report_errors(span, ty, true, false);\n     }\n+\n+    fn is_internal_abi(&self, abi: Abi) -> bool {\n+        if let Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic = abi {\n+            true\n+        } else {\n+            false\n+        }\n+    }\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypesDeclarations {\n     fn check_foreign_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::ForeignItem<'_>) {\n-        let mut vis = ImproperCTypesVisitor { cx };\n+        let mut vis = ImproperCTypesVisitor { cx, mode: ImproperCTypesMode::Declarations };\n         let abi = cx.tcx.hir().get_foreign_abi(it.hir_id);\n-        if let Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic = abi {\n-            // Don't worry about types in internal ABIs.\n-        } else {\n+\n+        if !vis.is_internal_abi(abi) {\n             match it.kind {\n                 hir::ForeignItemKind::Fn(ref decl, _, _) => {\n                     vis.check_foreign_fn(it.hir_id, decl);\n@@ -1019,6 +1064,31 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n     }\n }\n \n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypesDefinitions {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'a, 'tcx>,\n+        kind: hir::intravisit::FnKind<'tcx>,\n+        decl: &'tcx hir::FnDecl<'_>,\n+        _: &'tcx hir::Body<'_>,\n+        _: Span,\n+        hir_id: hir::HirId,\n+    ) {\n+        use hir::intravisit::FnKind;\n+\n+        let abi = match kind {\n+            FnKind::ItemFn(_, _, header, ..) => header.abi,\n+            FnKind::Method(_, sig, ..) => sig.header.abi,\n+            _ => return,\n+        };\n+\n+        let mut vis = ImproperCTypesVisitor { cx, mode: ImproperCTypesMode::Definitions };\n+        if !vis.is_internal_abi(abi) {\n+            vis.check_foreign_fn(hir_id, decl);\n+        }\n+    }\n+}\n+\n declare_lint_pass!(VariantSizeDifferences => [VARIANT_SIZE_DIFFERENCES]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VariantSizeDifferences {"}, {"sha": "f54ed9b92029ecbb0e34f511356432e9c05f91aa", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -15,6 +15,7 @@ pub struct RustString {\n \n /// Appending to a Rust string -- used by RawRustStringOstream.\n #[no_mangle]\n+#[cfg_attr(not(bootstrap), allow(improper_ctypes_definitions))]\n pub unsafe extern \"C\" fn LLVMRustStringWriteImpl(\n     sr: &RustString,\n     ptr: *const c_char,"}, {"sha": "0d0a0da9d1c4cb9a2ff069dfc5fd0a8b2706d7a0", "filename": "src/librustc_target/spec/apple_sdk_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Flibrustc_target%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Flibrustc_target%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_sdk_base.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -141,7 +141,6 @@ pub fn opts(arch: Arch, os: AppleOS) -> Result<TargetOptions, String> {\n     let pre_link_args = build_pre_link_args(arch, os)?;\n     Ok(TargetOptions {\n         cpu: target_cpu(arch),\n-        dynamic_linking: false,\n         executables: true,\n         pre_link_args,\n         link_env_remove: link_env_remove(arch),"}, {"sha": "6d98c4d01c040d1449cfd15c90d8a9c2051528c1", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 86, "deletions": 2, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -1009,9 +1009,93 @@ mod return_keyword {}\n //\n /// The receiver of a method, or the current module.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// `self` is used in two situations: referencing the current module and marking\n+/// the receiver of a method.\n ///\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+/// In paths, `self` can be used to refer to the current module, either in a\n+/// [`use`] statement or in a path to access an element:\n+///\n+/// ```\n+/// # #![allow(unused_imports)]\n+/// use std::io::{self, Read};\n+/// ```\n+///\n+/// Is functionally the same as:\n+///\n+/// ```\n+/// # #![allow(unused_imports)]\n+/// use std::io;\n+/// use std::io::Read;\n+/// ```\n+///\n+/// Using `self` to access an element in the current module:\n+///\n+/// ```\n+/// # #![allow(dead_code)]\n+/// # fn main() {}\n+/// fn foo() {}\n+/// fn bar() {\n+///     self::foo()\n+/// }\n+/// ```\n+///\n+/// `self` as the current receiver for a method allows to omit the parameter\n+/// type most of the time. With the exception of this particularity, `self` is\n+/// used much like any other parameter:\n+///\n+/// ```\n+/// struct Foo(i32);\n+///\n+/// impl Foo {\n+///     // No `self`.\n+///     fn new() -> Self {\n+///         Self(0)\n+///     }\n+///\n+///     // Consuming `self`.\n+///     fn consume(self) -> Self {\n+///         Self(self.0 + 1)\n+///     }\n+///\n+///     // Borrowing `self`.\n+///     fn borrow(&self) -> &i32 {\n+///         &self.0\n+///     }\n+///\n+///     // Borrowing `self` mutably.\n+///     fn borrow_mut(&mut self) -> &mut i32 {\n+///         &mut self.0\n+///     }\n+/// }\n+///\n+/// // This method must be called with a `Type::` prefix.\n+/// let foo = Foo::new();\n+/// assert_eq!(foo.0, 0);\n+///\n+/// // Those two calls produces the same result.\n+/// let foo = Foo::consume(foo);\n+/// assert_eq!(foo.0, 1);\n+/// let foo = foo.consume();\n+/// assert_eq!(foo.0, 2);\n+///\n+/// // Borrowing is handled automatically with the second syntax.\n+/// let borrow_1 = Foo::borrow(&foo);\n+/// let borrow_2 = foo.borrow();\n+/// assert_eq!(borrow_1, borrow_2);\n+///\n+/// // Borrowing mutably is handled automatically too with the second syntax.\n+/// let mut foo = Foo::new();\n+/// *Foo::borrow_mut(&mut foo) += 1;\n+/// assert_eq!(foo.0, 1);\n+/// *foo.borrow_mut() += 1;\n+/// assert_eq!(foo.0, 2);\n+/// ```\n+///\n+/// Note that this automatic conversion when calling `foo.method()` is not\n+/// limited to the examples above. See the [Reference] for more information.\n+///\n+/// [`use`]: keyword.use.html\n+/// [Reference]: ../reference/items/associated-items.html#methods\n mod self_keyword {}\n \n #[doc(keyword = \"Self\")]"}, {"sha": "5ef26d4cc4dc65a52d3e4e2eb6d92f4990585c22", "filename": "src/libstd/sys/sgx/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmod.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -56,6 +56,7 @@ unsafe extern \"C\" fn tcs_init(secondary: bool) {\n // able to specify this\n #[cfg(not(test))]\n #[no_mangle]\n+#[allow(improper_ctypes_definitions)]\n extern \"C\" fn entry(p1: u64, p2: u64, p3: u64, secondary: bool, p4: u64, p5: u64) -> (u64, u64) {\n     // FIXME: how to support TLS in library mode?\n     let tls = Box::new(tls::Tls::new());"}, {"sha": "32864dba4587eb20722ba4925734f77e18a3d8d7", "filename": "src/test/ui/abi/abi-sysv64-register-usage.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -38,6 +38,7 @@ pub struct LargeStruct(i64, i64, i64, i64, i64, i64, i64, i64);\n \n #[cfg(target_arch = \"x86_64\")]\n #[inline(never)]\n+#[allow(improper_ctypes_definitions)]\n pub extern \"sysv64\" fn large_struct_by_val(mut foo: LargeStruct) -> LargeStruct {\n     foo.0 *= 1;\n     foo.1 *= 2;"}, {"sha": "f77f40998de012ec0abdf81e11e41e59d453da54", "filename": "src/test/ui/align-with-extern-c-fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Falign-with-extern-c-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Falign-with-extern-c-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falign-with-extern-c-fn.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -10,6 +10,7 @@\n #[repr(align(16))]\n pub struct A(i64);\n \n+#[allow(improper_ctypes_definitions)]\n pub extern \"C\" fn foo(x: A) {}\n \n fn main() {"}, {"sha": "bafa204e06b252eb709c8cd936b12b3ab9cc1e80", "filename": "src/test/ui/issues/issue-16441.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Fissues%2Fissue-16441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Fissues%2Fissue-16441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16441.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -5,6 +5,7 @@\n struct Empty;\n \n // This used to cause an ICE\n+#[allow(improper_ctypes_definitions)]\n extern \"C\" fn ice(_a: Empty) {}\n \n fn main() {"}, {"sha": "fcabd1d84557c70abe60cf8b02cd55ac5e228e4e", "filename": "src/test/ui/issues/issue-26997.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Fissues%2Fissue-26997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Fissues%2Fissue-26997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26997.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -6,6 +6,7 @@ pub struct Foo {\n }\n \n impl Foo {\n+    #[allow(improper_ctypes_definitions)]\n     pub extern fn foo_new() -> Foo {\n         Foo { x: 21, y: 33 }\n     }"}, {"sha": "297519b9a79e2b633384523a7db36b868f24315c", "filename": "src/test/ui/issues/issue-28600.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Fissues%2Fissue-28600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Fissues%2Fissue-28600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28600.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -6,6 +6,7 @@ struct Test;\n impl Test {\n     #[allow(dead_code)]\n     #[allow(unused_variables)]\n+    #[allow(improper_ctypes_definitions)]\n     pub extern fn test(val: &str) {\n \n     }"}, {"sha": "a966cf217e1655cc6f0a66ca1ea121647f23901f", "filename": "src/test/ui/issues/issue-38763.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Fissues%2Fissue-38763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Fissues%2Fissue-38763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38763.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -5,6 +5,7 @@\n pub struct Foo(i128);\n \n #[no_mangle]\n+#[allow(improper_ctypes_definitions)]\n pub extern \"C\" fn foo(x: Foo) -> Foo { x }\n \n fn main() {"}, {"sha": "52d26d0954af894a155a16d888c774b60f15a7b4", "filename": "src/test/ui/issues/issue-51907.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Fissues%2Fissue-51907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Fissues%2Fissue-51907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51907.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -6,7 +6,9 @@ trait Foo {\n \n struct Bar;\n impl Foo for Bar {\n+    #[allow(improper_ctypes_definitions)]\n     extern fn borrow(&self) {}\n+    #[allow(improper_ctypes_definitions)]\n     extern fn take(self: Box<Self>) {}\n }\n "}, {"sha": "67dd7abcf79ef2b7f648fa298ebdfa2957f6ab51", "filename": "src/test/ui/lint/lint-ctypes-fn.rs", "status": "added", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -0,0 +1,182 @@\n+#![feature(rustc_private)]\n+\n+#![allow(private_in_public)]\n+#![deny(improper_ctypes_definitions)]\n+\n+extern crate libc;\n+\n+use std::default::Default;\n+use std::marker::PhantomData;\n+\n+trait Mirror { type It: ?Sized; }\n+\n+impl<T: ?Sized> Mirror for T { type It = Self; }\n+\n+#[repr(C)]\n+pub struct StructWithProjection(*mut <StructWithProjection as Mirror>::It);\n+\n+#[repr(C)]\n+pub struct StructWithProjectionAndLifetime<'a>(\n+    &'a mut <StructWithProjectionAndLifetime<'a> as Mirror>::It\n+);\n+\n+pub type I32Pair = (i32, i32);\n+\n+#[repr(C)]\n+pub struct ZeroSize;\n+\n+pub type RustFn = fn();\n+\n+pub type RustBadRet = extern fn() -> Box<u32>;\n+\n+pub type CVoidRet = ();\n+\n+pub struct Foo;\n+\n+#[repr(transparent)]\n+pub struct TransparentI128(i128);\n+\n+#[repr(transparent)]\n+pub struct TransparentStr(&'static str);\n+\n+#[repr(transparent)]\n+pub struct TransparentBadFn(RustBadRet);\n+\n+#[repr(transparent)]\n+pub struct TransparentInt(u32);\n+\n+#[repr(transparent)]\n+pub struct TransparentRef<'a>(&'a TransparentInt);\n+\n+#[repr(transparent)]\n+pub struct TransparentLifetime<'a>(*const u8, PhantomData<&'a ()>);\n+\n+#[repr(transparent)]\n+pub struct TransparentUnit<U>(f32, PhantomData<U>);\n+\n+#[repr(transparent)]\n+pub struct TransparentCustomZst(i32, ZeroSize);\n+\n+#[repr(C)]\n+pub struct ZeroSizeWithPhantomData(PhantomData<i32>);\n+\n+pub extern \"C\" fn ptr_type1(size: *const Foo) { }\n+\n+pub extern \"C\" fn ptr_type2(size: *const Foo) { }\n+\n+pub extern \"C\" fn slice_type(p: &[u32]) { }\n+//~^ ERROR: uses type `[u32]`\n+\n+pub extern \"C\" fn str_type(p: &str) { }\n+//~^ ERROR: uses type `str`\n+\n+pub extern \"C\" fn box_type(p: Box<u32>) { }\n+//~^ ERROR uses type `std::boxed::Box<u32>`\n+\n+pub extern \"C\" fn char_type(p: char) { }\n+//~^ ERROR uses type `char`\n+\n+pub extern \"C\" fn i128_type(p: i128) { }\n+//~^ ERROR uses type `i128`\n+\n+pub extern \"C\" fn u128_type(p: u128) { }\n+//~^ ERROR uses type `u128`\n+\n+pub extern \"C\" fn tuple_type(p: (i32, i32)) { }\n+//~^ ERROR uses type `(i32, i32)`\n+\n+pub extern \"C\" fn tuple_type2(p: I32Pair) { }\n+//~^ ERROR uses type `(i32, i32)`\n+\n+pub extern \"C\" fn zero_size(p: ZeroSize) { }\n+//~^ ERROR uses type `ZeroSize`\n+\n+pub extern \"C\" fn zero_size_phantom(p: ZeroSizeWithPhantomData) { }\n+//~^ ERROR uses type `ZeroSizeWithPhantomData`\n+\n+pub extern \"C\" fn zero_size_phantom_toplevel() -> PhantomData<bool> {\n+//~^ ERROR uses type `std::marker::PhantomData<bool>`\n+    Default::default()\n+}\n+\n+pub extern \"C\" fn fn_type(p: RustFn) { }\n+//~^ ERROR uses type `fn()`\n+\n+pub extern \"C\" fn fn_type2(p: fn()) { }\n+//~^ ERROR uses type `fn()`\n+\n+pub extern \"C\" fn fn_contained(p: RustBadRet) { }\n+//~^ ERROR: uses type `std::boxed::Box<u32>`\n+\n+pub extern \"C\" fn transparent_i128(p: TransparentI128) { }\n+//~^ ERROR: uses type `i128`\n+\n+pub extern \"C\" fn transparent_str(p: TransparentStr) { }\n+//~^ ERROR: uses type `str`\n+\n+pub extern \"C\" fn transparent_fn(p: TransparentBadFn) { }\n+//~^ ERROR: uses type `std::boxed::Box<u32>`\n+\n+pub extern \"C\" fn good3(fptr: Option<extern fn()>) { }\n+\n+pub extern \"C\" fn good4(aptr: &[u8; 4 as usize]) { }\n+\n+pub extern \"C\" fn good5(s: StructWithProjection) { }\n+\n+pub extern \"C\" fn good6(s: StructWithProjectionAndLifetime) { }\n+\n+pub extern \"C\" fn good7(fptr: extern fn() -> ()) { }\n+\n+pub extern \"C\" fn good8(fptr: extern fn() -> !) { }\n+\n+pub extern \"C\" fn good9() -> () { }\n+\n+pub extern \"C\" fn good10() -> CVoidRet { }\n+\n+pub extern \"C\" fn good11(size: isize) { }\n+\n+pub extern \"C\" fn good12(size: usize) { }\n+\n+pub extern \"C\" fn good13(n: TransparentInt) { }\n+\n+pub extern \"C\" fn good14(p: TransparentRef) { }\n+\n+pub extern \"C\" fn good15(p: TransparentLifetime) { }\n+\n+pub extern \"C\" fn good16(p: TransparentUnit<ZeroSize>) { }\n+\n+pub extern \"C\" fn good17(p: TransparentCustomZst) { }\n+\n+#[allow(improper_ctypes_definitions)]\n+pub extern \"C\" fn good18(_: &String) { }\n+\n+#[cfg(not(target_arch = \"wasm32\"))]\n+pub extern \"C\" fn good1(size: *const libc::c_int) { }\n+\n+#[cfg(not(target_arch = \"wasm32\"))]\n+pub extern \"C\" fn good2(size: *const libc::c_uint) { }\n+\n+pub extern \"C\" fn unused_generic1<T>(size: *const Foo) { }\n+\n+pub extern \"C\" fn unused_generic2<T>() -> PhantomData<bool> {\n+//~^ ERROR uses type `std::marker::PhantomData<bool>`\n+    Default::default()\n+}\n+\n+pub extern \"C\" fn used_generic1<T>(x: T) { }\n+\n+pub extern \"C\" fn used_generic2<T>(x: T, size: *const Foo) { }\n+\n+pub extern \"C\" fn used_generic3<T: Default>() -> T {\n+    Default::default()\n+}\n+\n+pub extern \"C\" fn used_generic4<T>(x: Vec<T>) { }\n+//~^ ERROR: uses type `std::vec::Vec<T>`\n+\n+pub extern \"C\" fn used_generic5<T>() -> Vec<T> {\n+//~^ ERROR: uses type `std::vec::Vec<T>`\n+    Default::default()\n+}\n+\n+fn main() {}"}, {"sha": "66cf195327890e40fd95e15d4a9450ef354b6fc2", "filename": "src/test/ui/lint/lint-ctypes-fn.stderr", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -0,0 +1,191 @@\n+error: `extern` fn uses type `[u32]`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:67:33\n+   |\n+LL | pub extern \"C\" fn slice_type(p: &[u32]) { }\n+   |                                 ^^^^^^ not FFI-safe\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-ctypes-fn.rs:4:9\n+   |\n+LL | #![deny(improper_ctypes_definitions)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: consider using a raw pointer instead\n+   = note: slices have no C equivalent\n+\n+error: `extern` fn uses type `str`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:70:31\n+   |\n+LL | pub extern \"C\" fn str_type(p: &str) { }\n+   |                               ^^^^ not FFI-safe\n+   |\n+   = help: consider using `*const u8` and a length instead\n+   = note: string slices have no C equivalent\n+\n+error: `extern` fn uses type `std::boxed::Box<u32>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:73:31\n+   |\n+LL | pub extern \"C\" fn box_type(p: Box<u32>) { }\n+   |                               ^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n+\n+error: `extern` fn uses type `char`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:76:32\n+   |\n+LL | pub extern \"C\" fn char_type(p: char) { }\n+   |                                ^^^^ not FFI-safe\n+   |\n+   = help: consider using `u32` or `libc::wchar_t` instead\n+   = note: the `char` type has no C equivalent\n+\n+error: `extern` fn uses type `i128`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:79:32\n+   |\n+LL | pub extern \"C\" fn i128_type(p: i128) { }\n+   |                                ^^^^ not FFI-safe\n+   |\n+   = note: 128-bit integers don't currently have a known stable ABI\n+\n+error: `extern` fn uses type `u128`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:82:32\n+   |\n+LL | pub extern \"C\" fn u128_type(p: u128) { }\n+   |                                ^^^^ not FFI-safe\n+   |\n+   = note: 128-bit integers don't currently have a known stable ABI\n+\n+error: `extern` fn uses type `(i32, i32)`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:85:33\n+   |\n+LL | pub extern \"C\" fn tuple_type(p: (i32, i32)) { }\n+   |                                 ^^^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider using a struct instead\n+   = note: tuples have unspecified layout\n+\n+error: `extern` fn uses type `(i32, i32)`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:88:34\n+   |\n+LL | pub extern \"C\" fn tuple_type2(p: I32Pair) { }\n+   |                                  ^^^^^^^ not FFI-safe\n+   |\n+   = help: consider using a struct instead\n+   = note: tuples have unspecified layout\n+\n+error: `extern` fn uses type `ZeroSize`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:91:32\n+   |\n+LL | pub extern \"C\" fn zero_size(p: ZeroSize) { }\n+   |                                ^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider adding a member to this struct\n+   = note: this struct has no fields\n+note: the type is defined here\n+  --> $DIR/lint-ctypes-fn.rs:26:1\n+   |\n+LL | pub struct ZeroSize;\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: `extern` fn uses type `ZeroSizeWithPhantomData`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:94:40\n+   |\n+LL | pub extern \"C\" fn zero_size_phantom(p: ZeroSizeWithPhantomData) { }\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: composed only of `PhantomData`\n+note: the type is defined here\n+  --> $DIR/lint-ctypes-fn.rs:61:1\n+   |\n+LL | pub struct ZeroSizeWithPhantomData(PhantomData<i32>);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `extern` fn uses type `std::marker::PhantomData<bool>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:97:51\n+   |\n+LL | pub extern \"C\" fn zero_size_phantom_toplevel() -> PhantomData<bool> {\n+   |                                                   ^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: composed only of `PhantomData`\n+\n+error: `extern` fn uses type `fn()`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:102:30\n+   |\n+LL | pub extern \"C\" fn fn_type(p: RustFn) { }\n+   |                              ^^^^^^ not FFI-safe\n+   |\n+   = help: consider using an `extern fn(...) -> ...` function pointer instead\n+   = note: this function pointer has Rust-specific calling convention\n+\n+error: `extern` fn uses type `fn()`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:105:31\n+   |\n+LL | pub extern \"C\" fn fn_type2(p: fn()) { }\n+   |                               ^^^^ not FFI-safe\n+   |\n+   = help: consider using an `extern fn(...) -> ...` function pointer instead\n+   = note: this function pointer has Rust-specific calling convention\n+\n+error: `extern` fn uses type `std::boxed::Box<u32>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:108:35\n+   |\n+LL | pub extern \"C\" fn fn_contained(p: RustBadRet) { }\n+   |                                   ^^^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n+\n+error: `extern` fn uses type `i128`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:111:39\n+   |\n+LL | pub extern \"C\" fn transparent_i128(p: TransparentI128) { }\n+   |                                       ^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: 128-bit integers don't currently have a known stable ABI\n+\n+error: `extern` fn uses type `str`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:114:38\n+   |\n+LL | pub extern \"C\" fn transparent_str(p: TransparentStr) { }\n+   |                                      ^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider using `*const u8` and a length instead\n+   = note: string slices have no C equivalent\n+\n+error: `extern` fn uses type `std::boxed::Box<u32>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:117:37\n+   |\n+LL | pub extern \"C\" fn transparent_fn(p: TransparentBadFn) { }\n+   |                                     ^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n+\n+error: `extern` fn uses type `std::marker::PhantomData<bool>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:161:43\n+   |\n+LL | pub extern \"C\" fn unused_generic2<T>() -> PhantomData<bool> {\n+   |                                           ^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: composed only of `PhantomData`\n+\n+error: `extern` fn uses type `std::vec::Vec<T>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:174:39\n+   |\n+LL | pub extern \"C\" fn used_generic4<T>(x: Vec<T>) { }\n+   |                                       ^^^^^^ not FFI-safe\n+   |\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n+\n+error: `extern` fn uses type `std::vec::Vec<T>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:177:41\n+   |\n+LL | pub extern \"C\" fn used_generic5<T>() -> Vec<T> {\n+   |                                         ^^^^^^ not FFI-safe\n+   |\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n+\n+error: aborting due to 20 previous errors\n+"}, {"sha": "4574dbd8529aa56a88c29ee278e3355df2dd176e", "filename": "src/test/ui/mir/mir_cast_fn_ret.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Fmir%2Fmir_cast_fn_ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Fmir%2Fmir_cast_fn_ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_cast_fn_ret.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -1,8 +1,10 @@\n // run-pass\n+#[allow(improper_ctypes_definitions)]\n pub extern \"C\" fn tuple2() -> (u16, u8) {\n     (1, 2)\n }\n \n+#[allow(improper_ctypes_definitions)]\n pub extern \"C\" fn tuple3() -> (u8, u8, u8) {\n     (1, 2, 3)\n }"}, {"sha": "d93a25c8ef4d372148b92ce6e6c2ed0b8031bd04", "filename": "src/test/ui/mir/mir_codegen_calls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Fmir%2Fmir_codegen_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Fmir%2Fmir_codegen_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_codegen_calls.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -74,6 +74,7 @@ fn test8() -> isize {\n     Two::two()\n }\n \n+#[allow(improper_ctypes_definitions)]\n extern fn simple_extern(x: u32, y: (u32, u32)) -> u32 {\n     x + y.0 * y.1\n }"}, {"sha": "0cf77da559470a0aab29fb00ec2119dea1dd46b2", "filename": "src/test/ui/typeck/issue-73592-borrow_mut-through-deref.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.rs?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -0,0 +1,58 @@\n+// check-pass\n+//\n+// rust-lang/rust#73592: borrow_mut through Deref should work.\n+//\n+// Before #72280, when we see something like `&mut *rcvr.method()`, we\n+// incorrectly requires `rcvr` to be type-checked as a mut place. While this\n+// requirement is usually correct for smart pointers, it is overly restrictive\n+// for types like `Mutex` or `RefCell` which can produce a guard that\n+// implements `DerefMut` from `&self`.\n+//\n+// Making it more confusing, because we use Deref as the fallback when DerefMut\n+// is implemented, we won't see an issue when the smart pointer does not\n+// implement `DerefMut`. It only causes an issue when `rcvr` is obtained via a\n+// type that implements both `Deref` or `DerefMut`.\n+//\n+// This bug is only discovered in #73592 after it is already fixed as a side-effect\n+// of a refactoring made in #72280.\n+\n+#![warn(unused_mut)]\n+\n+use std::pin::Pin;\n+use std::cell::RefCell;\n+\n+struct S(RefCell<()>);\n+\n+fn test_pin(s: Pin<&S>) {\n+    // This works before #72280.\n+    let _ = &mut *s.0.borrow_mut();\n+}\n+\n+fn test_pin_mut(s: Pin<&mut S>) {\n+    // This should compile but didn't before #72280.\n+    let _ = &mut *s.0.borrow_mut();\n+}\n+\n+fn test_vec(s: &Vec<RefCell<()>>) {\n+    // This should compile but didn't before #72280.\n+    let _ = &mut *s[0].borrow_mut();\n+}\n+\n+fn test_mut_pin(mut s: Pin<&S>) {\n+    //~^ WARN variable does not need to be mutable\n+    let _ = &mut *s.0.borrow_mut();\n+}\n+\n+fn test_mut_pin_mut(mut s: Pin<&mut S>) {\n+    //~^ WARN variable does not need to be mutable\n+    let _ = &mut *s.0.borrow_mut();\n+}\n+\n+fn main() {\n+    let mut s = S(RefCell::new(()));\n+    test_pin(Pin::new(&s));\n+    test_pin_mut(Pin::new(&mut s));\n+    test_mut_pin(Pin::new(&s));\n+    test_mut_pin_mut(Pin::new(&mut s));\n+    test_vec(&vec![s.0]);\n+}"}, {"sha": "51303adc9e53387e47cde762d6699870e1d9b6d5", "filename": "src/test/ui/typeck/issue-73592-borrow_mut-through-deref.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.stderr?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -0,0 +1,24 @@\n+warning: variable does not need to be mutable\n+  --> $DIR/issue-73592-borrow_mut-through-deref.rs:41:17\n+   |\n+LL | fn test_mut_pin(mut s: Pin<&S>) {\n+   |                 ----^\n+   |                 |\n+   |                 help: remove this `mut`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-73592-borrow_mut-through-deref.rs:19:9\n+   |\n+LL | #![warn(unused_mut)]\n+   |         ^^^^^^^^^^\n+\n+warning: variable does not need to be mutable\n+  --> $DIR/issue-73592-borrow_mut-through-deref.rs:46:21\n+   |\n+LL | fn test_mut_pin_mut(mut s: Pin<&mut S>) {\n+   |                     ----^\n+   |                     |\n+   |                     help: remove this `mut`\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "73ca7abfed363a96f9ef1017d692546251096af7", "filename": "triagebot.toml", "status": "modified", "additions": 76, "deletions": 14, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "patch": "@@ -76,44 +76,106 @@ exclude_labels = [\n ]\n \n [notify-zulip.\"I-prioritize\"]\n-zulip_stream = 227806 # #t-compiler/wg-prioritization\n+zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n topic = \"I-prioritize #{number} {title}\"\n-message_on_add = \"@*WG-prioritization* issue #{number} has been requested for prioritization.\"\n+message_on_add = \"\"\"\\\n+@*WG-prioritization/alerts* issue #{number} has been requested for prioritization.\n+\n+# [Procedure](https://hackmd.io/WJ0G17DHTHGgv0OW9I2PxA?view#Unprioritized-I-prioritize)\n+- Priority?\n+- Regression?\n+- Notify people/groups?\n+- Needs `I-nominated`?\n+\"\"\"\n message_on_remove = \"Issue #{number}'s prioritization request has been removed.\"\n \n [notify-zulip.\"I-nominated\"]\n required_labels = [\"T-compiler\"]\n-zulip_stream = 227806 # #t-compiler/wg-prioritization\n+zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n topic = \"I-prioritize #{number} {title}\"\n-message_on_add = \"@*WG-prioritization* #{number} has been nominated for discussion in `T-compiler` meeting.\"\n+message_on_add = \"\"\"\\\n+@*WG-prioritization/alerts* #{number} has been nominated for discussion in `T-compiler` meeting.\n+\n+# [Procedure](https://hackmd.io/WJ0G17DHTHGgv0OW9I2PxA?view#I-nominated)\n+- Already discussed?\n+- Worth the meeting time?\n+- Add agenda entry:\n+  - Why nominated?\n+  - Assignee?\n+  - Issue? PR? What's the status?\n+  - Summary and important details?\n+\"\"\"\n message_on_remove = \"#{number}'s nomination has been removed.\"\n \n [notify-zulip.\"beta-nominated\"]\n-zulip_stream = 227806 # #t-compiler/wg-prioritization\n+zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n topic = \"Backport #{number} {title}\"\n-message_on_add = \"@*WG-prioritization* PR #{number} has been requested for beta backport.\"\n+message_on_add = \"\"\"\\\n+@*WG-prioritization/alerts* PR #{number} has been requested for beta backport.\n+\n+# [Procedure](https://hackmd.io/WJ0G17DHTHGgv0OW9I2PxA?view#StableBeta-nominations)\n+Prepare agenda entry:\n+- Why nominated?\n+- Author, assignee?\n+- Important details?\n+\"\"\"\n message_on_remove = \"PR #{number}'s beta backport request has been removed.\"\n \n [notify-zulip.\"stable-nominated\"]\n-zulip_stream = 227806 # #t-compiler/wg-prioritization\n+zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n topic = \"Backport #{number} {title}\"\n-message_on_add = \"@*WG-prioritization* PR #{number} has been requested for stable backport.\"\n+message_on_add = \"\"\"\\\n+@*WG-prioritization/alerts* PR #{number} has been requested for stable backport.\n+\n+# [Procedure](https://hackmd.io/WJ0G17DHTHGgv0OW9I2PxA?view#StableBeta-nominations)\n+Prepare agenda entry:\n+- Why nominated?\n+- Author, assignee?\n+- Important details?\n+\"\"\"\n message_on_remove = \"PR #{number}'s stable backport request has been removed.\"\n \n [notify-zulip.\"S-waiting-on-team\"]\n required_labels = [\"T-compiler\"]\n-zulip_stream = 227806 # #t-compiler/wg-prioritization\n+zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n topic = \"S-waiting-on-team #{number} {title}\"\n-message_on_add = \"@*WG-prioritization* PR #{number} is waiting on `T-compiler`.\"\n+message_on_add = \"\"\"\\\n+@*WG-prioritization/alerts* PR #{number} is waiting on `T-compiler`.\n+\n+# [Procedure](https://hackmd.io/WJ0G17DHTHGgv0OW9I2PxA?view#PR%E2%80%99s-waiting-on-team)\n+- Prepare agenda entry:\n+  - What is it waiting for?\n+  - Important details?\n+- Could be resolved quickly? Tag `I-nominated`.\n+\"\"\"\n message_on_remove = \"PR #{number}'s is no longer waiting on `T-compiler`.\"\n \n [notify-zulip.\"P-critical\"]\n-zulip_stream = 227806 # #t-compiler/wg-prioritization\n+zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n topic = \"P-critical #{number} {title}\"\n-message_on_add = \"@*WG-prioritization* issue #{number} has been assigned `P-critical`.\"\n+message_on_add = \"\"\"\\\n+@*WG-prioritization/alerts* issue #{number} has been assigned `P-critical`.\n+\n+# [Procedure](https://hackmd.io/WJ0G17DHTHGgv0OW9I2PxA?view#P-critical-and-Unassigned-P-high-regressions)\n+- Notify people/groups?\n+- Assign if possible?\n+- Add to agenda:\n+  - Assignee?\n+  - Summary and important details?\n+- Other actions to move forward?\n+\"\"\"\n \n [notify-zulip.\"P-high\"]\n required_labels = [\"regression-from-stable-to-[bn]*\"] # only nightly and beta regressions\n-zulip_stream = 227806 # #t-compiler/wg-prioritization\n+zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n topic = \"P-high regression #{number} {title}\"\n-message_on_add = \"@*WG-prioritization* issue #{number} has been assigned `P-high` and is a regression.\"\n+message_on_add = \"\"\"\\\n+@*WG-prioritization/alerts* issue #{number} has been assigned `P-high` and is a regression.\n+\n+# [Procedure](https://hackmd.io/WJ0G17DHTHGgv0OW9I2PxA?view#P-critical-and-Unassigned-P-high-regressions)\n+Is issue assigned? If not:\n+- Try to find an assignee?\n+- Otherwise add to agenda:\n+  - Mark as unassigned.\n+  - Summary and important details?\n+\"\"\""}]}