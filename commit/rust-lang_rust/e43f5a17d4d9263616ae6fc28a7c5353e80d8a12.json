{"sha": "e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "node_id": "C_kwDOAAsO6NoAKGU0M2Y1YTE3ZDRkOTI2MzYxNmFlNmZjMjhhN2M1MzUzZTgwZDhhMTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-29T10:04:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-29T10:04:13Z"}, "message": "Auto merge of #9516 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "c8b35df8c45a927f759037b5c0220aadd11d16c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8b35df8c45a927f759037b5c0220aadd11d16c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "html_url": "https://github.com/rust-lang/rust/commit/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e8a4b6699c915ba50842dbd4a25e039cce4f356", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e8a4b6699c915ba50842dbd4a25e039cce4f356", "html_url": "https://github.com/rust-lang/rust/commit/5e8a4b6699c915ba50842dbd4a25e039cce4f356"}, {"sha": "924c1ce97d33f75d6e9e92df1c523abdc7d90f02", "url": "https://api.github.com/repos/rust-lang/rust/commits/924c1ce97d33f75d6e9e92df1c523abdc7d90f02", "html_url": "https://github.com/rust-lang/rust/commit/924c1ce97d33f75d6e9e92df1c523abdc7d90f02"}], "stats": {"total": 1101, "additions": 599, "deletions": 502}, "files": [{"sha": "b1bec0c46cad39e1b88a2e580786d74c04ddc7f9", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.65\"\n+version = \"0.1.66\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "80bb83af43b19106469fbee7523e575bf7e9543d", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,5 +1,4 @@\n #![feature(let_chains)]\n-#![feature(let_else)]\n #![feature(once_cell)]\n #![feature(rustc_private)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]"}, {"sha": "9e15f1504fa91f6e6f2c883380f52d5355862c7a", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -120,15 +120,17 @@ fn add_lint(lint: &LintData<'_>, enable_msrv: bool) -> io::Result<()> {\n \n     let new_lint = if enable_msrv {\n         format!(\n-            \"store.register_{lint_pass}_pass(move || Box::new({module_name}::{camel_name}::new(msrv)));\\n    \",\n+            \"store.register_{lint_pass}_pass(move |{ctor_arg}| Box::new({module_name}::{camel_name}::new(msrv)));\\n    \",\n             lint_pass = lint.pass,\n+            ctor_arg = if lint.pass == \"late\" { \"_\" } else { \"\" },\n             module_name = lint.name,\n             camel_name = to_camel_case(lint.name),\n         )\n     } else {\n         format!(\n-            \"store.register_{lint_pass}_pass(|| Box::new({module_name}::{camel_name}));\\n    \",\n+            \"store.register_{lint_pass}_pass(|{ctor_arg}| Box::new({module_name}::{camel_name}));\\n    \",\n             lint_pass = lint.pass,\n+            ctor_arg = if lint.pass == \"late\" { \"_\" } else { \"\" },\n             module_name = lint.name,\n             camel_name = to_camel_case(lint.name),\n         )"}, {"sha": "1ff976f48f619cd364a5fab44a860f3cb8360706", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_lints\"\n-version = \"0.1.65\"\n+version = \"0.1.66\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "7f937de1dd3120f594436fc8facb97be30e72316", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -142,7 +142,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                 if adt.is_struct();\n                 let variant = adt.non_enum_variant();\n                 if adt.did().is_local() || !variant.is_field_list_non_exhaustive();\n-                let module_did = cx.tcx.parent_module(stmt.hir_id).to_def_id();\n+                let module_did = cx.tcx.parent_module(stmt.hir_id);\n                 if variant\n                     .fields\n                     .iter()"}, {"sha": "741edc1319609004c4e9ed087025aae0f70c5856", "filename": "clippy_lints/src/default_union_representation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fdefault_union_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fdefault_union_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_union_representation.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,10 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_hir::{self as hir, HirId, Item, ItemKind};\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n-use rustc_typeck::hir_ty_to_ty;\n \n declare_clippy_lint! {\n     /// ### What it does"}, {"sha": "1296ede20029579fd7a49fe0663dd65f9251202f", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -20,7 +20,7 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::{\n-    self, subst::Subst, Binder, BoundVariableKind, EarlyBinder, FnSig, GenericArgKind, List, ParamTy, PredicateKind,\n+    self, Binder, BoundVariableKind, EarlyBinder, FnSig, GenericArgKind, List, ParamTy, PredicateKind,\n     ProjectionPredicate, Ty, TyCtxt, TypeVisitable, TypeckResults,\n };\n use rustc_semver::RustcVersion;\n@@ -715,7 +715,7 @@ fn walk_parents<'tcx>(\n                 span,\n                 ..\n             }) if span.ctxt() == ctxt => {\n-                let ty = cx.tcx.type_of(def_id);\n+                let ty = cx.tcx.type_of(def_id.def_id);\n                 Some(ty_auto_deref_stability(cx, ty, precedence).position_for_result(cx))\n             },\n "}, {"sha": "3fac93dcc90c504f2f26dc9df219a1688b4f9ac9", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::traits::Reveal;\n use rustc_middle::ty::{\n     self, Binder, BoundConstness, GenericParamDefKind, ImplPolarity, ParamEnv, PredicateKind, TraitPredicate, TraitRef,\n-    Ty, TyCtxt, Visibility,\n+    Ty, TyCtxt,\n };\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n@@ -425,7 +425,7 @@ struct UnsafeVisitor<'a, 'tcx> {\n impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n     type NestedFilter = nested_filter::All;\n \n-    fn visit_fn(&mut self, kind: FnKind<'tcx>, decl: &'tcx FnDecl<'_>, body_id: BodyId, span: Span, id: HirId) {\n+    fn visit_fn(&mut self, kind: FnKind<'tcx>, decl: &'tcx FnDecl<'_>, body_id: BodyId, _: Span, id: HirId) {\n         if self.has_unsafe {\n             return;\n         }\n@@ -438,7 +438,7 @@ impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n             }\n         }\n \n-        walk_fn(self, kind, decl, body_id, span, id);\n+        walk_fn(self, kind, decl, body_id, id);\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n@@ -464,7 +464,7 @@ impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n fn check_partial_eq_without_eq<'tcx>(cx: &LateContext<'tcx>, span: Span, trait_ref: &hir::TraitRef<'_>, ty: Ty<'tcx>) {\n     if_chain! {\n         if let ty::Adt(adt, substs) = ty.kind();\n-        if cx.tcx.visibility(adt.did()) == Visibility::Public;\n+        if cx.tcx.visibility(adt.did()).is_public();\n         if let Some(eq_trait_def_id) = cx.tcx.get_diagnostic_item(sym::Eq);\n         if let Some(def_id) = trait_ref.trait_def_id();\n         if cx.tcx.is_diagnostic_item(sym::PartialEq, def_id);"}, {"sha": "debcd75ae75b6cbe83495a7a9586d3dc25805d69", "filename": "clippy_lints/src/disallowed_types.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fdisallowed_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fdisallowed_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_types.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,9 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::{\n-    def::Res, def_id::DefId, Item, ItemKind, PolyTraitRef, PrimTy, TraitBoundModifier, Ty, TyKind, UseKind,\n-};\n+use rustc_hir::{def::Res, def_id::DefId, Item, ItemKind, PolyTraitRef, PrimTy, Ty, TyKind, UseKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -120,7 +118,7 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedTypes {\n         }\n     }\n \n-    fn check_poly_trait_ref(&mut self, cx: &LateContext<'tcx>, poly: &'tcx PolyTraitRef<'tcx>, _: TraitBoundModifier) {\n+    fn check_poly_trait_ref(&mut self, cx: &LateContext<'tcx>, poly: &'tcx PolyTraitRef<'tcx>) {\n         self.check_res_emit(cx, &poly.trait_ref.path.res, poly.trait_ref.path.span);\n     }\n }"}, {"sha": "fd143a9d77c1092165e7f2de1074bab2828cc9db", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -233,11 +233,19 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n                     let body = cx.tcx.hir().body(body_id);\n                     let mut fpu = FindPanicUnwrap {\n                         cx,\n-                        typeck_results: cx.tcx.typeck(item.def_id),\n+                        typeck_results: cx.tcx.typeck(item.def_id.def_id),\n                         panic_span: None,\n                     };\n                     fpu.visit_expr(body.value);\n-                    lint_for_missing_headers(cx, item.def_id, item.span, sig, headers, Some(body_id), fpu.panic_span);\n+                    lint_for_missing_headers(\n+                        cx,\n+                        item.def_id.def_id,\n+                        item.span,\n+                        sig,\n+                        headers,\n+                        Some(body_id),\n+                        fpu.panic_span,\n+                    );\n                 }\n             },\n             hir::ItemKind::Impl(impl_) => {\n@@ -268,7 +276,7 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n         let headers = check_attrs(cx, &self.valid_idents, attrs);\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n             if !in_external_macro(cx.tcx.sess, item.span) {\n-                lint_for_missing_headers(cx, item.def_id, item.span, sig, headers, None, None);\n+                lint_for_missing_headers(cx, item.def_id.def_id, item.span, sig, headers, None, None);\n             }\n         }\n     }\n@@ -283,11 +291,19 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n             let body = cx.tcx.hir().body(body_id);\n             let mut fpu = FindPanicUnwrap {\n                 cx,\n-                typeck_results: cx.tcx.typeck(item.def_id),\n+                typeck_results: cx.tcx.typeck(item.def_id.def_id),\n                 panic_span: None,\n             };\n             fpu.visit_expr(body.value);\n-            lint_for_missing_headers(cx, item.def_id, item.span, sig, headers, Some(body_id), fpu.panic_span);\n+            lint_for_missing_headers(\n+                cx,\n+                item.def_id.def_id,\n+                item.span,\n+                sig,\n+                headers,\n+                Some(body_id),\n+                fpu.panic_span,\n+            );\n         }\n     }\n }"}, {"sha": "b019d07d53d11fb1318d1be1f082f8493e699a9b", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -296,7 +296,7 @@ impl LateLintPass<'_> for EnumVariantNames {\n             }\n         }\n         if let ItemKind::Enum(ref def, _) = item.kind {\n-            if !(self.avoid_breaking_exported_api && cx.access_levels.is_exported(item.def_id)) {\n+            if !(self.avoid_breaking_exported_api && cx.access_levels.is_exported(item.def_id.def_id)) {\n                 check_variant(cx, self.threshold, def, item_name, item.span);\n             }\n         }"}, {"sha": "b40cb7cddaf178155a41bb54f4459cf5b9895ddb", "filename": "clippy_lints/src/equatable_if_let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fequatable_if_let.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -51,7 +51,7 @@ fn unary_pattern(pat: &Pat<'_>) -> bool {\n             false\n         },\n         PatKind::Struct(_, a, etc) => !etc && a.iter().all(|x| unary_pattern(x.pat)),\n-        PatKind::Tuple(a, etc) | PatKind::TupleStruct(_, a, etc) => !etc.is_some() && array_rec(a),\n+        PatKind::Tuple(a, etc) | PatKind::TupleStruct(_, a, etc) => etc.as_opt_usize().is_none() && array_rec(a),\n         PatKind::Ref(x, _) | PatKind::Box(x) => unary_pattern(x),\n         PatKind::Path(_) | PatKind::Lit(_) => true,\n     }"}, {"sha": "2e608fe527fdceee413e19f8b30da78b85f49a43", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,6 +1,7 @@\n use clippy_utils::diagnostics::span_lint_hir;\n use rustc_hir::intravisit;\n use rustc_hir::{self, AssocItemKind, Body, FnDecl, HirId, HirIdSet, Impl, ItemKind, Node, Pat, PatKind};\n+use rustc_hir_analysis::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::FakeReadCause;\n@@ -10,7 +11,6 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::kw;\n use rustc_target::spec::abi::Abi;\n-use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n #[derive(Copy, Clone)]\n pub struct BoxedLocal {\n@@ -71,7 +71,7 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n             }\n         }\n \n-        let parent_id = cx.tcx.hir().get_parent_item(hir_id);\n+        let parent_id = cx.tcx.hir().get_parent_item(hir_id).def_id;\n         let parent_node = cx.tcx.hir().find_by_def_id(parent_id);\n \n         let mut trait_self_ty = None;\n@@ -177,7 +177,13 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n         }\n     }\n \n-    fn fake_read(&mut self, _: &rustc_typeck::expr_use_visitor::PlaceWithHirId<'tcx>, _: FakeReadCause, _: HirId) {}\n+    fn fake_read(\n+        &mut self,\n+        _: &rustc_hir_analysis::expr_use_visitor::PlaceWithHirId<'tcx>,\n+        _: FakeReadCause,\n+        _: HirId,\n+    ) {\n+    }\n }\n \n impl<'a, 'tcx> EscapeDelegate<'a, 'tcx> {"}, {"sha": "710fceceae57d0da3dc388b912bfef7b11336056", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -11,7 +11,6 @@ use rustc_hir::{Closure, Expr, ExprKind, Param, PatKind, Unsafety};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc_middle::ty::binding::BindingMode;\n-use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, ClosureKind, Ty, TypeVisitable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;"}, {"sha": "be6242bd20b8464fc84f16b81e44d8aeed3e3c0f", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -73,7 +73,7 @@ impl LateLintPass<'_> for ExhaustiveItems {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n         if_chain! {\n             if let ItemKind::Enum(..) | ItemKind::Struct(..) = item.kind;\n-            if cx.access_levels.is_exported(item.def_id);\n+            if cx.access_levels.is_exported(item.def_id.def_id);\n             let attrs = cx.tcx.hir().attrs(item.hir_id());\n             if !attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n             then {"}, {"sha": "407dd1b39575f4d63596ea341c8be18a2d7917f1", "filename": "clippy_lints/src/exit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fexit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fexit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexit.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -33,7 +33,7 @@ impl<'tcx> LateLintPass<'tcx> for Exit {\n             if let ExprKind::Path(ref path) = path_expr.kind;\n             if let Some(def_id) = cx.qpath_res(path, path_expr.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::EXIT);\n-            let parent = cx.tcx.hir().get_parent_item(e.hir_id);\n+            let parent = cx.tcx.hir().get_parent_item(e.hir_id).def_id;\n             if let Some(Node::Item(Item{kind: ItemKind::Fn(..), ..})) = cx.tcx.hir().find_by_def_id(parent);\n             // If the next item up is a function we check if it is an entry point\n             // and only then emit a linter warning"}, {"sha": "ef24a5d06ad0b58f5f6d612e4eae5477ed5d53a5", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -107,7 +107,7 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[h\n                 let body = cx.tcx.hir().body(body_id);\n                 let mut fpu = FindPanicUnwrap {\n                     lcx: cx,\n-                    typeck_results: cx.tcx.typeck(impl_item.id.def_id),\n+                    typeck_results: cx.tcx.typeck(impl_item.id.def_id.def_id),\n                     result: Vec::new(),\n                 };\n                 fpu.visit_expr(body.value);"}, {"sha": "977c8ee594f4ccc34b55573a420200a078c6206b", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -21,7 +21,7 @@ pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>\n     let attrs = cx.tcx.hir().attrs(item.hir_id());\n     let attr = cx.tcx.get_attr(item.def_id.to_def_id(), sym::must_use);\n     if let hir::ItemKind::Fn(ref sig, _generics, ref body_id) = item.kind {\n-        let is_public = cx.access_levels.is_exported(item.def_id);\n+        let is_public = cx.access_levels.is_exported(item.def_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n@@ -31,7 +31,7 @@ pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>\n                 sig.decl,\n                 cx.tcx.hir().body(*body_id),\n                 item.span,\n-                item.def_id,\n+                item.def_id.def_id,\n                 item.span.with_hi(sig.decl.output.span().hi()),\n                 \"this function could have a `#[must_use]` attribute\",\n             );\n@@ -41,19 +41,20 @@ pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>\n \n pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n     if let hir::ImplItemKind::Fn(ref sig, ref body_id) = item.kind {\n-        let is_public = cx.access_levels.is_exported(item.def_id);\n+        let is_public = cx.access_levels.is_exported(item.def_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n         let attr = cx.tcx.get_attr(item.def_id.to_def_id(), sym::must_use);\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n-        } else if is_public && !is_proc_macro(cx.sess(), attrs) && trait_ref_of_method(cx, item.def_id).is_none() {\n+        } else if is_public && !is_proc_macro(cx.sess(), attrs) && trait_ref_of_method(cx, item.def_id.def_id).is_none()\n+        {\n             check_must_use_candidate(\n                 cx,\n                 sig.decl,\n                 cx.tcx.hir().body(*body_id),\n                 item.span,\n-                item.def_id,\n+                item.def_id.def_id,\n                 item.span.with_hi(sig.decl.output.span().hi()),\n                 \"this method could have a `#[must_use]` attribute\",\n             );\n@@ -63,7 +64,7 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Imp\n \n pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n     if let hir::TraitItemKind::Fn(ref sig, ref eid) = item.kind {\n-        let is_public = cx.access_levels.is_exported(item.def_id);\n+        let is_public = cx.access_levels.is_exported(item.def_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n \n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n@@ -78,7 +79,7 @@ pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Tr\n                     sig.decl,\n                     body,\n                     item.span,\n-                    item.def_id,\n+                    item.def_id.def_id,\n                     item.span.with_hi(sig.decl.output.span().hi()),\n                     \"this method could have a `#[must_use]` attribute\",\n                 );\n@@ -171,7 +172,7 @@ fn is_mutable_pat(cx: &LateContext<'_>, pat: &hir::Pat<'_>, tys: &mut DefIdSet)\n         return false; // ignore `_` patterns\n     }\n     if cx.tcx.has_typeck_results(pat.hir_id.owner.to_def_id()) {\n-        is_mutable_ty(cx, cx.tcx.typeck(pat.hir_id.owner).pat_ty(pat), pat.span, tys)\n+        is_mutable_ty(cx, cx.tcx.typeck(pat.hir_id.owner.def_id).pat_ty(pat), pat.span, tys)\n     } else {\n         false\n     }\n@@ -218,7 +219,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n                     if self.cx.tcx.has_typeck_results(arg.hir_id.owner.to_def_id())\n                         && is_mutable_ty(\n                             self.cx,\n-                            self.cx.tcx.typeck(arg.hir_id.owner).expr_ty(arg),\n+                            self.cx.tcx.typeck(arg.hir_id.owner.def_id).expr_ty(arg),\n                             arg.span,\n                             &mut tys,\n                         )\n@@ -236,7 +237,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n                     if self.cx.tcx.has_typeck_results(arg.hir_id.owner.to_def_id())\n                         && is_mutable_ty(\n                             self.cx,\n-                            self.cx.tcx.typeck(arg.hir_id.owner).expr_ty(arg),\n+                            self.cx.tcx.typeck(arg.hir_id.owner.def_id).expr_ty(arg),\n                             arg.span,\n                             &mut tys,\n                         )"}, {"sha": "0b50431fbaaba5b03eaa560af954b18160fc3bd8", "filename": "clippy_lints/src/functions/not_unsafe_ptr_arg_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -28,7 +28,7 @@ pub(super) fn check_fn<'tcx>(\n pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n     if let hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(eid)) = item.kind {\n         let body = cx.tcx.hir().body(eid);\n-        check_raw_ptr(cx, sig.header.unsafety, sig.decl, body, item.def_id);\n+        check_raw_ptr(cx, sig.header.unsafety, sig.decl, body, item.def_id.def_id);\n     }\n }\n "}, {"sha": "113c4e9f50910859e65f857ebfb405c0e11573ed", "filename": "clippy_lints/src/functions/result.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fresult.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -34,9 +34,9 @@ fn result_err_ty<'tcx>(\n \n pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::Item<'tcx>, large_err_threshold: u64) {\n     if let hir::ItemKind::Fn(ref sig, _generics, _) = item.kind\n-        && let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.def_id, item.span)\n+        && let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.def_id.def_id, item.span)\n     {\n-        if cx.access_levels.is_exported(item.def_id) {\n+        if cx.access_levels.is_exported(item.def_id.def_id) {\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n             check_result_unit_err(cx, err_ty, fn_header_span);\n         }\n@@ -47,10 +47,10 @@ pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::Item<'tcx>, l\n pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::ImplItem<'tcx>, large_err_threshold: u64) {\n     // Don't lint if method is a trait's implementation, we can't do anything about those\n     if let hir::ImplItemKind::Fn(ref sig, _) = item.kind\n-        && let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.def_id, item.span)\n-        && trait_ref_of_method(cx, item.def_id).is_none()\n+        && let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.def_id.def_id, item.span)\n+        && trait_ref_of_method(cx, item.def_id.def_id).is_none()\n     {\n-        if cx.access_levels.is_exported(item.def_id) {\n+        if cx.access_levels.is_exported(item.def_id.def_id) {\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n             check_result_unit_err(cx, err_ty, fn_header_span);\n         }\n@@ -61,8 +61,8 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::ImplItem\n pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &hir::TraitItem<'tcx>, large_err_threshold: u64) {\n     if let hir::TraitItemKind::Fn(ref sig, _) = item.kind {\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n-        if let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.def_id, item.span) {\n-            if cx.access_levels.is_exported(item.def_id) {\n+        if let Some((hir_ty, err_ty)) = result_err_ty(cx, sig.decl, item.def_id.def_id, item.span) {\n+            if cx.access_levels.is_exported(item.def_id.def_id) {\n                 check_result_unit_err(cx, err_ty, fn_header_span);\n             }\n             check_result_large_err(cx, err_ty, hir_ty.span, large_err_threshold);"}, {"sha": "eb2eefe0d5a16b89ae29ad1d1ecbf85f0ba9dcd1", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -4,7 +4,6 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{EarlyBinder, Opaque, PredicateKind::Trait};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};"}, {"sha": "93efe957b1dc27bf2f9d7c43594f1408b2cf73a6", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -5,14 +5,14 @@ use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_inf, walk_ty, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, GenericArg, Item, ItemKind, QPath, TyKind};\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{Ty, TypeckResults};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::sym;\n-use rustc_typeck::hir_ty_to_ty;\n \n use if_chain::if_chain;\n \n@@ -111,7 +111,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n             }\n         }\n \n-        if !cx.access_levels.is_exported(item.def_id) {\n+        if !cx.access_levels.is_exported(item.def_id.def_id) {\n             return;\n         }\n "}, {"sha": "d0e603dcf4ef5b8c724b352d82a4afb45685c1f5", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -108,7 +108,7 @@ impl<'tcx> LateLintPass<'tcx> for InherentToString {\n             if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::String);\n \n             // Filters instances of to_string which are required by a trait\n-            if trait_ref_of_method(cx, impl_item.def_id).is_none();\n+            if trait_ref_of_method(cx, impl_item.def_id.def_id).is_none();\n \n             then {\n                 show_lint(cx, impl_item);"}, {"sha": "ea9f046fb973645f0c3573e56303c0bdf873a100", "filename": "clippy_lints/src/iter_not_returning_iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -44,7 +44,7 @@ impl<'tcx> LateLintPass<'tcx> for IterNotReturningIterator {\n         let name = item.ident.name.as_str();\n         if matches!(name, \"iter\" | \"iter_mut\") {\n             if let TraitItemKind::Fn(fn_sig, _) = &item.kind {\n-                check_sig(cx, name, fn_sig, item.def_id);\n+                check_sig(cx, name, fn_sig, item.def_id.def_id);\n             }\n         }\n     }\n@@ -58,7 +58,7 @@ impl<'tcx> LateLintPass<'tcx> for IterNotReturningIterator {\n             )\n         {\n             if let ImplItemKind::Fn(fn_sig, _) = &item.kind {\n-                check_sig(cx, name, fn_sig, item.def_id);\n+                check_sig(cx, name, fn_sig, item.def_id.def_id);\n             }\n         }\n     }"}, {"sha": "76c83ab47d09561a9caf4ec22e161db2ce04ee18", "filename": "clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -2,12 +2,12 @@ use clippy_utils::diagnostics::span_lint_and_then;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind};\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, ConstKind};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{BytePos, Pos, Span};\n-use rustc_typeck::hir_ty_to_ty;\n \n declare_clippy_lint! {\n     /// ### What it does"}, {"sha": "3a563736fb077b7ae51d3016ff63c9c0c4434182", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -134,7 +134,7 @@ impl<'tcx> LateLintPass<'tcx> for LenZero {\n             if item.ident.name == sym::len;\n             if let ImplItemKind::Fn(sig, _) = &item.kind;\n             if sig.decl.implicit_self.has_implicit_self();\n-            if cx.access_levels.is_exported(item.def_id);\n+            if cx.access_levels.is_exported(item.def_id.def_id);\n             if matches!(sig.decl.output, FnRetTy::Return(_));\n             if let Some(imp) = get_parent_as_impl(cx.tcx, item.hir_id());\n             if imp.of_trait.is_none();\n@@ -210,7 +210,8 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n         }\n     }\n \n-    if cx.access_levels.is_exported(visited_trait.def_id) && trait_items.iter().any(|i| is_named_self(cx, i, sym::len))\n+    if cx.access_levels.is_exported(visited_trait.def_id.def_id)\n+        && trait_items.iter().any(|i| is_named_self(cx, i, sym::len))\n     {\n         let mut current_and_super_traits = DefIdSet::default();\n         fill_trait_set(visited_trait.def_id.to_def_id(), &mut current_and_super_traits, cx);"}, {"sha": "435411642a75cc9d9865c67038dc8c4c651a5bc4", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -345,7 +345,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(unnecessary_owned_empty_strings::UNNECESSARY_OWNED_EMPTY_STRINGS),\n     LintId::of(unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n     LintId::of(unused_io_amount::UNUSED_IO_AMOUNT),\n-    LintId::of(unused_peekable::UNUSED_PEEKABLE),\n     LintId::of(unused_unit::UNUSED_UNIT),\n     LintId::of(unwrap::PANICKING_UNWRAP),\n     LintId::of(unwrap::UNNECESSARY_UNWRAP),"}, {"sha": "87be0052028fb2bbb2ebb859714f4639fae23801", "filename": "clippy_lints/src/lib.register_nursery.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_nursery.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -34,6 +34,7 @@ store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n     LintId::of(trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS),\n     LintId::of(trait_bounds::TYPE_REPETITION_IN_BOUNDS),\n     LintId::of(transmute::TRANSMUTE_UNDEFINED_REPR),\n+    LintId::of(unused_peekable::UNUSED_PEEKABLE),\n     LintId::of(unused_rounding::UNUSED_ROUNDING),\n     LintId::of(use_self::USE_SELF),\n ])"}, {"sha": "6125d0f7a8628db472410845e91d5b40536b7f21", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -35,5 +35,4 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n     LintId::of(swap_ptr_to_ref::SWAP_PTR_TO_REF),\n-    LintId::of(unused_peekable::UNUSED_PEEKABLE),\n ])"}, {"sha": "fde8aa9f92173d69f960fd5bd65568a062b5b362", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 211, "deletions": 212, "changes": 423, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -5,7 +5,6 @@\n #![feature(drain_filter)]\n #![feature(iter_intersperse)]\n #![feature(let_chains)]\n-#![feature(let_else)]\n #![feature(lint_reasons)]\n #![feature(never_type)]\n #![feature(once_cell)]\n@@ -32,6 +31,7 @@ extern crate rustc_data_structures;\n extern crate rustc_driver;\n extern crate rustc_errors;\n extern crate rustc_hir;\n+extern crate rustc_hir_analysis;\n extern crate rustc_hir_pretty;\n extern crate rustc_index;\n extern crate rustc_infer;\n@@ -44,7 +44,6 @@ extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_target;\n extern crate rustc_trait_selection;\n-extern crate rustc_typeck;\n \n #[macro_use]\n extern crate clippy_utils;\n@@ -520,7 +519,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     #[cfg(feature = \"internal\")]\n     {\n         if std::env::var(\"ENABLE_METADATA_COLLECTION\").eq(&Ok(\"1\".to_string())) {\n-            store.register_late_pass(|| Box::new(utils::internal_lints::metadata_collector::MetadataCollector::new()));\n+            store.register_late_pass(|_| Box::new(utils::internal_lints::metadata_collector::MetadataCollector::new()));\n             return;\n         }\n     }\n@@ -530,222 +529,222 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     {\n         store.register_early_pass(|| Box::new(utils::internal_lints::ClippyLintsInternal));\n         store.register_early_pass(|| Box::new(utils::internal_lints::ProduceIce));\n-        store.register_late_pass(|| Box::new(utils::internal_lints::CollapsibleCalls));\n-        store.register_late_pass(|| Box::new(utils::internal_lints::CompilerLintFunctions::new()));\n-        store.register_late_pass(|| Box::new(utils::internal_lints::IfChainStyle));\n-        store.register_late_pass(|| Box::new(utils::internal_lints::InvalidPaths));\n-        store.register_late_pass(|| Box::<utils::internal_lints::InterningDefinedSymbol>::default());\n-        store.register_late_pass(|| Box::<utils::internal_lints::LintWithoutLintPass>::default());\n-        store.register_late_pass(|| Box::new(utils::internal_lints::MatchTypeOnDiagItem));\n-        store.register_late_pass(|| Box::new(utils::internal_lints::OuterExpnDataPass));\n-        store.register_late_pass(|| Box::new(utils::internal_lints::MsrvAttrImpl));\n+        store.register_late_pass(|_| Box::new(utils::internal_lints::CollapsibleCalls));\n+        store.register_late_pass(|_| Box::new(utils::internal_lints::CompilerLintFunctions::new()));\n+        store.register_late_pass(|_| Box::new(utils::internal_lints::IfChainStyle));\n+        store.register_late_pass(|_| Box::new(utils::internal_lints::InvalidPaths));\n+        store.register_late_pass(|_| Box::<utils::internal_lints::InterningDefinedSymbol>::default());\n+        store.register_late_pass(|_| Box::<utils::internal_lints::LintWithoutLintPass>::default());\n+        store.register_late_pass(|_| Box::new(utils::internal_lints::MatchTypeOnDiagItem));\n+        store.register_late_pass(|_| Box::new(utils::internal_lints::OuterExpnDataPass));\n+        store.register_late_pass(|_| Box::new(utils::internal_lints::MsrvAttrImpl));\n     }\n \n     let arithmetic_side_effects_allowed = conf.arithmetic_side_effects_allowed.clone();\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(operators::arithmetic_side_effects::ArithmeticSideEffects::new(\n             arithmetic_side_effects_allowed.clone(),\n         ))\n     });\n-    store.register_late_pass(|| Box::new(utils::dump_hir::DumpHir));\n-    store.register_late_pass(|| Box::new(utils::author::Author));\n+    store.register_late_pass(|_| Box::new(utils::dump_hir::DumpHir));\n+    store.register_late_pass(|_| Box::new(utils::author::Author));\n     let await_holding_invalid_types = conf.await_holding_invalid_types.clone();\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(await_holding_invalid::AwaitHolding::new(\n             await_holding_invalid_types.clone(),\n         ))\n     });\n-    store.register_late_pass(|| Box::new(serde_api::SerdeApi));\n+    store.register_late_pass(|_| Box::new(serde_api::SerdeApi));\n     let vec_box_size_threshold = conf.vec_box_size_threshold;\n     let type_complexity_threshold = conf.type_complexity_threshold;\n     let avoid_breaking_exported_api = conf.avoid_breaking_exported_api;\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(types::Types::new(\n             vec_box_size_threshold,\n             type_complexity_threshold,\n             avoid_breaking_exported_api,\n         ))\n     });\n-    store.register_late_pass(|| Box::new(booleans::NonminimalBool));\n-    store.register_late_pass(|| Box::new(enum_clike::UnportableVariant));\n-    store.register_late_pass(|| Box::new(float_literal::FloatLiteral));\n-    store.register_late_pass(|| Box::new(ptr::Ptr));\n-    store.register_late_pass(|| Box::new(needless_bool::NeedlessBool));\n-    store.register_late_pass(|| Box::new(needless_bool::BoolComparison));\n-    store.register_late_pass(|| Box::new(needless_for_each::NeedlessForEach));\n-    store.register_late_pass(|| Box::new(misc::MiscLints));\n-    store.register_late_pass(|| Box::new(eta_reduction::EtaReduction));\n-    store.register_late_pass(|| Box::new(mut_mut::MutMut));\n-    store.register_late_pass(|| Box::new(mut_reference::UnnecessaryMutPassed));\n-    store.register_late_pass(|| Box::new(len_zero::LenZero));\n-    store.register_late_pass(|| Box::new(attrs::Attributes));\n-    store.register_late_pass(|| Box::new(blocks_in_if_conditions::BlocksInIfConditions));\n-    store.register_late_pass(|| Box::new(unicode::Unicode));\n-    store.register_late_pass(|| Box::new(uninit_vec::UninitVec));\n-    store.register_late_pass(|| Box::new(unit_return_expecting_ord::UnitReturnExpectingOrd));\n-    store.register_late_pass(|| Box::new(strings::StringAdd));\n-    store.register_late_pass(|| Box::new(implicit_return::ImplicitReturn));\n-    store.register_late_pass(|| Box::new(implicit_saturating_sub::ImplicitSaturatingSub));\n-    store.register_late_pass(|| Box::new(default_numeric_fallback::DefaultNumericFallback));\n-    store.register_late_pass(|| Box::new(inconsistent_struct_constructor::InconsistentStructConstructor));\n-    store.register_late_pass(|| Box::new(non_octal_unix_permissions::NonOctalUnixPermissions));\n+    store.register_late_pass(|_| Box::new(booleans::NonminimalBool));\n+    store.register_late_pass(|_| Box::new(enum_clike::UnportableVariant));\n+    store.register_late_pass(|_| Box::new(float_literal::FloatLiteral));\n+    store.register_late_pass(|_| Box::new(ptr::Ptr));\n+    store.register_late_pass(|_| Box::new(needless_bool::NeedlessBool));\n+    store.register_late_pass(|_| Box::new(needless_bool::BoolComparison));\n+    store.register_late_pass(|_| Box::new(needless_for_each::NeedlessForEach));\n+    store.register_late_pass(|_| Box::new(misc::MiscLints));\n+    store.register_late_pass(|_| Box::new(eta_reduction::EtaReduction));\n+    store.register_late_pass(|_| Box::new(mut_mut::MutMut));\n+    store.register_late_pass(|_| Box::new(mut_reference::UnnecessaryMutPassed));\n+    store.register_late_pass(|_| Box::new(len_zero::LenZero));\n+    store.register_late_pass(|_| Box::new(attrs::Attributes));\n+    store.register_late_pass(|_| Box::new(blocks_in_if_conditions::BlocksInIfConditions));\n+    store.register_late_pass(|_| Box::new(unicode::Unicode));\n+    store.register_late_pass(|_| Box::new(uninit_vec::UninitVec));\n+    store.register_late_pass(|_| Box::new(unit_return_expecting_ord::UnitReturnExpectingOrd));\n+    store.register_late_pass(|_| Box::new(strings::StringAdd));\n+    store.register_late_pass(|_| Box::new(implicit_return::ImplicitReturn));\n+    store.register_late_pass(|_| Box::new(implicit_saturating_sub::ImplicitSaturatingSub));\n+    store.register_late_pass(|_| Box::new(default_numeric_fallback::DefaultNumericFallback));\n+    store.register_late_pass(|_| Box::new(inconsistent_struct_constructor::InconsistentStructConstructor));\n+    store.register_late_pass(|_| Box::new(non_octal_unix_permissions::NonOctalUnixPermissions));\n     store.register_early_pass(|| Box::new(unnecessary_self_imports::UnnecessarySelfImports));\n \n     let msrv = read_msrv(conf, sess);\n     let avoid_breaking_exported_api = conf.avoid_breaking_exported_api;\n     let allow_expect_in_tests = conf.allow_expect_in_tests;\n     let allow_unwrap_in_tests = conf.allow_unwrap_in_tests;\n-    store.register_late_pass(move || Box::new(approx_const::ApproxConstant::new(msrv)));\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| Box::new(approx_const::ApproxConstant::new(msrv)));\n+    store.register_late_pass(move |_| {\n         Box::new(methods::Methods::new(\n             avoid_breaking_exported_api,\n             msrv,\n             allow_expect_in_tests,\n             allow_unwrap_in_tests,\n         ))\n     });\n-    store.register_late_pass(move || Box::new(matches::Matches::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(matches::Matches::new(msrv)));\n     store.register_early_pass(move || Box::new(manual_non_exhaustive::ManualNonExhaustiveStruct::new(msrv)));\n-    store.register_late_pass(move || Box::new(manual_non_exhaustive::ManualNonExhaustiveEnum::new(msrv)));\n-    store.register_late_pass(move || Box::new(manual_strip::ManualStrip::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(manual_non_exhaustive::ManualNonExhaustiveEnum::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(manual_strip::ManualStrip::new(msrv)));\n     store.register_early_pass(move || Box::new(redundant_static_lifetimes::RedundantStaticLifetimes::new(msrv)));\n     store.register_early_pass(move || Box::new(redundant_field_names::RedundantFieldNames::new(msrv)));\n-    store.register_late_pass(move || Box::new(checked_conversions::CheckedConversions::new(msrv)));\n-    store.register_late_pass(move || Box::new(mem_replace::MemReplace::new(msrv)));\n-    store.register_late_pass(move || Box::new(ranges::Ranges::new(msrv)));\n-    store.register_late_pass(move || Box::new(from_over_into::FromOverInto::new(msrv)));\n-    store.register_late_pass(move || Box::new(use_self::UseSelf::new(msrv)));\n-    store.register_late_pass(move || Box::new(missing_const_for_fn::MissingConstForFn::new(msrv)));\n-    store.register_late_pass(move || Box::new(needless_question_mark::NeedlessQuestionMark));\n-    store.register_late_pass(move || Box::new(casts::Casts::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(checked_conversions::CheckedConversions::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(mem_replace::MemReplace::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(ranges::Ranges::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(from_over_into::FromOverInto::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(use_self::UseSelf::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(missing_const_for_fn::MissingConstForFn::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(needless_question_mark::NeedlessQuestionMark));\n+    store.register_late_pass(move |_| Box::new(casts::Casts::new(msrv)));\n     store.register_early_pass(move || Box::new(unnested_or_patterns::UnnestedOrPatterns::new(msrv)));\n-    store.register_late_pass(|| Box::new(size_of_in_element_count::SizeOfInElementCount));\n-    store.register_late_pass(|| Box::new(same_name_method::SameNameMethod));\n+    store.register_late_pass(|_| Box::new(size_of_in_element_count::SizeOfInElementCount));\n+    store.register_late_pass(|_| Box::new(same_name_method::SameNameMethod));\n     let max_suggested_slice_pattern_length = conf.max_suggested_slice_pattern_length;\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(index_refutable_slice::IndexRefutableSlice::new(\n             max_suggested_slice_pattern_length,\n             msrv,\n         ))\n     });\n-    store.register_late_pass(|| Box::<shadow::Shadow>::default());\n-    store.register_late_pass(|| Box::new(unit_types::UnitTypes));\n-    store.register_late_pass(|| Box::new(loops::Loops));\n-    store.register_late_pass(|| Box::<main_recursion::MainRecursion>::default());\n-    store.register_late_pass(|| Box::new(lifetimes::Lifetimes));\n-    store.register_late_pass(|| Box::new(entry::HashMapPass));\n-    store.register_late_pass(|| Box::new(minmax::MinMaxPass));\n-    store.register_late_pass(|| Box::new(zero_div_zero::ZeroDiv));\n-    store.register_late_pass(|| Box::new(mutex_atomic::Mutex));\n-    store.register_late_pass(|| Box::new(needless_update::NeedlessUpdate));\n-    store.register_late_pass(|| Box::new(needless_borrowed_ref::NeedlessBorrowedRef));\n-    store.register_late_pass(|| Box::new(borrow_deref_ref::BorrowDerefRef));\n-    store.register_late_pass(|| Box::new(no_effect::NoEffect));\n-    store.register_late_pass(|| Box::new(temporary_assignment::TemporaryAssignment));\n-    store.register_late_pass(move || Box::new(transmute::Transmute::new(msrv)));\n+    store.register_late_pass(|_| Box::<shadow::Shadow>::default());\n+    store.register_late_pass(|_| Box::new(unit_types::UnitTypes));\n+    store.register_late_pass(|_| Box::new(loops::Loops));\n+    store.register_late_pass(|_| Box::<main_recursion::MainRecursion>::default());\n+    store.register_late_pass(|_| Box::new(lifetimes::Lifetimes));\n+    store.register_late_pass(|_| Box::new(entry::HashMapPass));\n+    store.register_late_pass(|_| Box::new(minmax::MinMaxPass));\n+    store.register_late_pass(|_| Box::new(zero_div_zero::ZeroDiv));\n+    store.register_late_pass(|_| Box::new(mutex_atomic::Mutex));\n+    store.register_late_pass(|_| Box::new(needless_update::NeedlessUpdate));\n+    store.register_late_pass(|_| Box::new(needless_borrowed_ref::NeedlessBorrowedRef));\n+    store.register_late_pass(|_| Box::new(borrow_deref_ref::BorrowDerefRef));\n+    store.register_late_pass(|_| Box::new(no_effect::NoEffect));\n+    store.register_late_pass(|_| Box::new(temporary_assignment::TemporaryAssignment));\n+    store.register_late_pass(move |_| Box::new(transmute::Transmute::new(msrv)));\n     let cognitive_complexity_threshold = conf.cognitive_complexity_threshold;\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(cognitive_complexity::CognitiveComplexity::new(\n             cognitive_complexity_threshold,\n         ))\n     });\n     let too_large_for_stack = conf.too_large_for_stack;\n-    store.register_late_pass(move || Box::new(escape::BoxedLocal { too_large_for_stack }));\n-    store.register_late_pass(move || Box::new(vec::UselessVec { too_large_for_stack }));\n-    store.register_late_pass(|| Box::new(panic_unimplemented::PanicUnimplemented));\n-    store.register_late_pass(|| Box::new(strings::StringLitAsBytes));\n-    store.register_late_pass(|| Box::new(derive::Derive));\n-    store.register_late_pass(|| Box::new(derivable_impls::DerivableImpls));\n-    store.register_late_pass(|| Box::new(drop_forget_ref::DropForgetRef));\n-    store.register_late_pass(|| Box::new(empty_enum::EmptyEnum));\n-    store.register_late_pass(|| Box::new(invalid_upcast_comparisons::InvalidUpcastComparisons));\n-    store.register_late_pass(|| Box::new(regex::Regex));\n-    store.register_late_pass(|| Box::new(copies::CopyAndPaste));\n-    store.register_late_pass(|| Box::new(copy_iterator::CopyIterator));\n-    store.register_late_pass(|| Box::new(format::UselessFormat));\n-    store.register_late_pass(|| Box::new(swap::Swap));\n-    store.register_late_pass(|| Box::new(overflow_check_conditional::OverflowCheckConditional));\n-    store.register_late_pass(|| Box::<new_without_default::NewWithoutDefault>::default());\n+    store.register_late_pass(move |_| Box::new(escape::BoxedLocal { too_large_for_stack }));\n+    store.register_late_pass(move |_| Box::new(vec::UselessVec { too_large_for_stack }));\n+    store.register_late_pass(|_| Box::new(panic_unimplemented::PanicUnimplemented));\n+    store.register_late_pass(|_| Box::new(strings::StringLitAsBytes));\n+    store.register_late_pass(|_| Box::new(derive::Derive));\n+    store.register_late_pass(|_| Box::new(derivable_impls::DerivableImpls));\n+    store.register_late_pass(|_| Box::new(drop_forget_ref::DropForgetRef));\n+    store.register_late_pass(|_| Box::new(empty_enum::EmptyEnum));\n+    store.register_late_pass(|_| Box::new(invalid_upcast_comparisons::InvalidUpcastComparisons));\n+    store.register_late_pass(|_| Box::new(regex::Regex));\n+    store.register_late_pass(|_| Box::new(copies::CopyAndPaste));\n+    store.register_late_pass(|_| Box::new(copy_iterator::CopyIterator));\n+    store.register_late_pass(|_| Box::new(format::UselessFormat));\n+    store.register_late_pass(|_| Box::new(swap::Swap));\n+    store.register_late_pass(|_| Box::new(overflow_check_conditional::OverflowCheckConditional));\n+    store.register_late_pass(|_| Box::<new_without_default::NewWithoutDefault>::default());\n     let disallowed_names = conf.disallowed_names.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_late_pass(move || Box::new(disallowed_names::DisallowedNames::new(disallowed_names.clone())));\n+    store.register_late_pass(move |_| Box::new(disallowed_names::DisallowedNames::new(disallowed_names.clone())));\n     let too_many_arguments_threshold = conf.too_many_arguments_threshold;\n     let too_many_lines_threshold = conf.too_many_lines_threshold;\n     let large_error_threshold = conf.large_error_threshold;\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(functions::Functions::new(\n             too_many_arguments_threshold,\n             too_many_lines_threshold,\n             large_error_threshold,\n         ))\n     });\n     let doc_valid_idents = conf.doc_valid_idents.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_late_pass(move || Box::new(doc::DocMarkdown::new(doc_valid_idents.clone())));\n-    store.register_late_pass(|| Box::new(neg_multiply::NegMultiply));\n-    store.register_late_pass(|| Box::new(mem_forget::MemForget));\n-    store.register_late_pass(|| Box::new(let_if_seq::LetIfSeq));\n-    store.register_late_pass(|| Box::new(mixed_read_write_in_expression::EvalOrderDependence));\n-    store.register_late_pass(|| Box::new(missing_doc::MissingDoc::new()));\n-    store.register_late_pass(|| Box::new(missing_inline::MissingInline));\n-    store.register_late_pass(move || Box::new(exhaustive_items::ExhaustiveItems));\n-    store.register_late_pass(|| Box::new(match_result_ok::MatchResultOk));\n-    store.register_late_pass(|| Box::new(partialeq_ne_impl::PartialEqNeImpl));\n-    store.register_late_pass(|| Box::new(unused_io_amount::UnusedIoAmount));\n+    store.register_late_pass(move |_| Box::new(doc::DocMarkdown::new(doc_valid_idents.clone())));\n+    store.register_late_pass(|_| Box::new(neg_multiply::NegMultiply));\n+    store.register_late_pass(|_| Box::new(mem_forget::MemForget));\n+    store.register_late_pass(|_| Box::new(let_if_seq::LetIfSeq));\n+    store.register_late_pass(|_| Box::new(mixed_read_write_in_expression::EvalOrderDependence));\n+    store.register_late_pass(|_| Box::new(missing_doc::MissingDoc::new()));\n+    store.register_late_pass(|_| Box::new(missing_inline::MissingInline));\n+    store.register_late_pass(move |_| Box::new(exhaustive_items::ExhaustiveItems));\n+    store.register_late_pass(|_| Box::new(match_result_ok::MatchResultOk));\n+    store.register_late_pass(|_| Box::new(partialeq_ne_impl::PartialEqNeImpl));\n+    store.register_late_pass(|_| Box::new(unused_io_amount::UnusedIoAmount));\n     let enum_variant_size_threshold = conf.enum_variant_size_threshold;\n-    store.register_late_pass(move || Box::new(large_enum_variant::LargeEnumVariant::new(enum_variant_size_threshold)));\n-    store.register_late_pass(|| Box::new(explicit_write::ExplicitWrite));\n-    store.register_late_pass(|| Box::new(needless_pass_by_value::NeedlessPassByValue));\n+    store.register_late_pass(move |_| Box::new(large_enum_variant::LargeEnumVariant::new(enum_variant_size_threshold)));\n+    store.register_late_pass(|_| Box::new(explicit_write::ExplicitWrite));\n+    store.register_late_pass(|_| Box::new(needless_pass_by_value::NeedlessPassByValue));\n     let pass_by_ref_or_value = pass_by_ref_or_value::PassByRefOrValue::new(\n         conf.trivial_copy_size_limit,\n         conf.pass_by_value_size_limit,\n         conf.avoid_breaking_exported_api,\n         &sess.target,\n     );\n-    store.register_late_pass(move || Box::new(pass_by_ref_or_value));\n-    store.register_late_pass(|| Box::new(ref_option_ref::RefOptionRef));\n-    store.register_late_pass(|| Box::new(infinite_iter::InfiniteIter));\n-    store.register_late_pass(|| Box::new(inline_fn_without_body::InlineFnWithoutBody));\n-    store.register_late_pass(|| Box::<useless_conversion::UselessConversion>::default());\n-    store.register_late_pass(|| Box::new(implicit_hasher::ImplicitHasher));\n-    store.register_late_pass(|| Box::new(fallible_impl_from::FallibleImplFrom));\n-    store.register_late_pass(|| Box::new(question_mark::QuestionMark));\n+    store.register_late_pass(move |_| Box::new(pass_by_ref_or_value));\n+    store.register_late_pass(|_| Box::new(ref_option_ref::RefOptionRef));\n+    store.register_late_pass(|_| Box::new(infinite_iter::InfiniteIter));\n+    store.register_late_pass(|_| Box::new(inline_fn_without_body::InlineFnWithoutBody));\n+    store.register_late_pass(|_| Box::<useless_conversion::UselessConversion>::default());\n+    store.register_late_pass(|_| Box::new(implicit_hasher::ImplicitHasher));\n+    store.register_late_pass(|_| Box::new(fallible_impl_from::FallibleImplFrom));\n+    store.register_late_pass(|_| Box::new(question_mark::QuestionMark));\n     store.register_early_pass(|| Box::new(suspicious_operation_groupings::SuspiciousOperationGroupings));\n-    store.register_late_pass(|| Box::new(suspicious_trait_impl::SuspiciousImpl));\n-    store.register_late_pass(|| Box::new(map_unit_fn::MapUnit));\n-    store.register_late_pass(|| Box::new(inherent_impl::MultipleInherentImpl));\n-    store.register_late_pass(|| Box::new(neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd));\n-    store.register_late_pass(|| Box::new(unwrap::Unwrap));\n-    store.register_late_pass(|| Box::new(indexing_slicing::IndexingSlicing));\n-    store.register_late_pass(|| Box::new(non_copy_const::NonCopyConst));\n-    store.register_late_pass(|| Box::new(ptr_offset_with_cast::PtrOffsetWithCast));\n-    store.register_late_pass(|| Box::new(redundant_clone::RedundantClone));\n-    store.register_late_pass(|| Box::new(slow_vector_initialization::SlowVectorInit));\n-    store.register_late_pass(move || Box::new(unnecessary_wraps::UnnecessaryWraps::new(avoid_breaking_exported_api)));\n-    store.register_late_pass(|| Box::new(assertions_on_constants::AssertionsOnConstants));\n-    store.register_late_pass(|| Box::new(assertions_on_result_states::AssertionsOnResultStates));\n-    store.register_late_pass(|| Box::new(inherent_to_string::InherentToString));\n+    store.register_late_pass(|_| Box::new(suspicious_trait_impl::SuspiciousImpl));\n+    store.register_late_pass(|_| Box::new(map_unit_fn::MapUnit));\n+    store.register_late_pass(|_| Box::new(inherent_impl::MultipleInherentImpl));\n+    store.register_late_pass(|_| Box::new(neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd));\n+    store.register_late_pass(|_| Box::new(unwrap::Unwrap));\n+    store.register_late_pass(|_| Box::new(indexing_slicing::IndexingSlicing));\n+    store.register_late_pass(|_| Box::new(non_copy_const::NonCopyConst));\n+    store.register_late_pass(|_| Box::new(ptr_offset_with_cast::PtrOffsetWithCast));\n+    store.register_late_pass(|_| Box::new(redundant_clone::RedundantClone));\n+    store.register_late_pass(|_| Box::new(slow_vector_initialization::SlowVectorInit));\n+    store.register_late_pass(move |_| Box::new(unnecessary_wraps::UnnecessaryWraps::new(avoid_breaking_exported_api)));\n+    store.register_late_pass(|_| Box::new(assertions_on_constants::AssertionsOnConstants));\n+    store.register_late_pass(|_| Box::new(assertions_on_result_states::AssertionsOnResultStates));\n+    store.register_late_pass(|_| Box::new(inherent_to_string::InherentToString));\n     let max_trait_bounds = conf.max_trait_bounds;\n-    store.register_late_pass(move || Box::new(trait_bounds::TraitBounds::new(max_trait_bounds)));\n-    store.register_late_pass(|| Box::new(comparison_chain::ComparisonChain));\n-    store.register_late_pass(|| Box::new(mut_key::MutableKeyType));\n+    store.register_late_pass(move |_| Box::new(trait_bounds::TraitBounds::new(max_trait_bounds)));\n+    store.register_late_pass(|_| Box::new(comparison_chain::ComparisonChain));\n+    store.register_late_pass(|_| Box::new(mut_key::MutableKeyType));\n     store.register_early_pass(|| Box::new(reference::DerefAddrOf));\n     store.register_early_pass(|| Box::new(double_parens::DoubleParens));\n-    store.register_late_pass(|| Box::new(format_impl::FormatImpl::new()));\n+    store.register_late_pass(|_| Box::new(format_impl::FormatImpl::new()));\n     store.register_early_pass(|| Box::new(unsafe_removed_from_name::UnsafeNameRemoval));\n     store.register_early_pass(|| Box::new(else_if_without_else::ElseIfWithoutElse));\n     store.register_early_pass(|| Box::new(int_plus_one::IntPlusOne));\n     store.register_early_pass(|| Box::new(formatting::Formatting));\n     store.register_early_pass(|| Box::new(misc_early::MiscEarlyLints));\n     store.register_early_pass(|| Box::new(redundant_closure_call::RedundantClosureCall));\n-    store.register_late_pass(|| Box::new(redundant_closure_call::RedundantClosureCall));\n+    store.register_late_pass(|_| Box::new(redundant_closure_call::RedundantClosureCall));\n     store.register_early_pass(|| Box::new(unused_unit::UnusedUnit));\n-    store.register_late_pass(|| Box::new(returns::Return));\n+    store.register_late_pass(|_| Box::new(returns::Return));\n     store.register_early_pass(|| Box::new(collapsible_if::CollapsibleIf));\n     store.register_early_pass(|| Box::new(items_after_statements::ItemsAfterStatements));\n     store.register_early_pass(|| Box::new(precedence::Precedence));\n-    store.register_late_pass(|| Box::new(needless_parens_on_range_literals::NeedlessParensOnRangeLiterals));\n+    store.register_late_pass(|_| Box::new(needless_parens_on_range_literals::NeedlessParensOnRangeLiterals));\n     store.register_early_pass(|| Box::new(needless_continue::NeedlessContinue));\n     store.register_early_pass(|| Box::new(redundant_else::RedundantElse));\n-    store.register_late_pass(|| Box::new(create_dir::CreateDir));\n+    store.register_late_pass(|_| Box::new(create_dir::CreateDir));\n     store.register_early_pass(|| Box::new(needless_arbitrary_self_type::NeedlessArbitrarySelfType));\n     let literal_representation_lint_fraction_readability = conf.unreadable_literal_lint_fractions;\n     store.register_early_pass(move || {\n@@ -760,31 +759,31 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         ))\n     });\n     let enum_variant_name_threshold = conf.enum_variant_name_threshold;\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(enum_variants::EnumVariantNames::new(\n             enum_variant_name_threshold,\n             avoid_breaking_exported_api,\n         ))\n     });\n     store.register_early_pass(|| Box::new(tabs_in_doc_comments::TabsInDocComments));\n     let upper_case_acronyms_aggressive = conf.upper_case_acronyms_aggressive;\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(upper_case_acronyms::UpperCaseAcronyms::new(\n             avoid_breaking_exported_api,\n             upper_case_acronyms_aggressive,\n         ))\n     });\n-    store.register_late_pass(|| Box::<default::Default>::default());\n-    store.register_late_pass(move || Box::new(unused_self::UnusedSelf::new(avoid_breaking_exported_api)));\n-    store.register_late_pass(|| Box::new(mutable_debug_assertion::DebugAssertWithMutCall));\n-    store.register_late_pass(|| Box::new(exit::Exit));\n-    store.register_late_pass(|| Box::new(to_digit_is_some::ToDigitIsSome));\n+    store.register_late_pass(|_| Box::<default::Default>::default());\n+    store.register_late_pass(move |_| Box::new(unused_self::UnusedSelf::new(avoid_breaking_exported_api)));\n+    store.register_late_pass(|_| Box::new(mutable_debug_assertion::DebugAssertWithMutCall));\n+    store.register_late_pass(|_| Box::new(exit::Exit));\n+    store.register_late_pass(|_| Box::new(to_digit_is_some::ToDigitIsSome));\n     let array_size_threshold = conf.array_size_threshold;\n-    store.register_late_pass(move || Box::new(large_stack_arrays::LargeStackArrays::new(array_size_threshold)));\n-    store.register_late_pass(move || Box::new(large_const_arrays::LargeConstArrays::new(array_size_threshold)));\n-    store.register_late_pass(|| Box::new(floating_point_arithmetic::FloatingPointArithmetic));\n+    store.register_late_pass(move |_| Box::new(large_stack_arrays::LargeStackArrays::new(array_size_threshold)));\n+    store.register_late_pass(move |_| Box::new(large_const_arrays::LargeConstArrays::new(array_size_threshold)));\n+    store.register_late_pass(|_| Box::new(floating_point_arithmetic::FloatingPointArithmetic));\n     store.register_early_pass(|| Box::new(as_conversions::AsConversions));\n-    store.register_late_pass(|| Box::new(let_underscore::LetUnderscore));\n+    store.register_late_pass(|_| Box::new(let_underscore::LetUnderscore));\n     store.register_early_pass(|| Box::new(single_component_path_imports::SingleComponentPathImports));\n     let max_fn_params_bools = conf.max_fn_params_bools;\n     let max_struct_bools = conf.max_struct_bools;\n@@ -796,17 +795,17 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     });\n     store.register_early_pass(|| Box::new(option_env_unwrap::OptionEnvUnwrap));\n     let warn_on_all_wildcard_imports = conf.warn_on_all_wildcard_imports;\n-    store.register_late_pass(move || Box::new(wildcard_imports::WildcardImports::new(warn_on_all_wildcard_imports)));\n-    store.register_late_pass(|| Box::<redundant_pub_crate::RedundantPubCrate>::default());\n-    store.register_late_pass(|| Box::new(unnamed_address::UnnamedAddress));\n-    store.register_late_pass(move || Box::new(dereference::Dereferencing::new(msrv)));\n-    store.register_late_pass(|| Box::new(option_if_let_else::OptionIfLetElse));\n-    store.register_late_pass(|| Box::new(future_not_send::FutureNotSend));\n-    store.register_late_pass(|| Box::new(if_let_mutex::IfLetMutex));\n-    store.register_late_pass(|| Box::new(if_not_else::IfNotElse));\n-    store.register_late_pass(|| Box::new(equatable_if_let::PatternEquality));\n-    store.register_late_pass(|| Box::new(manual_async_fn::ManualAsyncFn));\n-    store.register_late_pass(|| Box::new(panic_in_result_fn::PanicInResultFn));\n+    store.register_late_pass(move |_| Box::new(wildcard_imports::WildcardImports::new(warn_on_all_wildcard_imports)));\n+    store.register_late_pass(|_| Box::<redundant_pub_crate::RedundantPubCrate>::default());\n+    store.register_late_pass(|_| Box::new(unnamed_address::UnnamedAddress));\n+    store.register_late_pass(move |_| Box::new(dereference::Dereferencing::new(msrv)));\n+    store.register_late_pass(|_| Box::new(option_if_let_else::OptionIfLetElse));\n+    store.register_late_pass(|_| Box::new(future_not_send::FutureNotSend));\n+    store.register_late_pass(|_| Box::new(if_let_mutex::IfLetMutex));\n+    store.register_late_pass(|_| Box::new(if_not_else::IfNotElse));\n+    store.register_late_pass(|_| Box::new(equatable_if_let::PatternEquality));\n+    store.register_late_pass(|_| Box::new(manual_async_fn::ManualAsyncFn));\n+    store.register_late_pass(|_| Box::new(panic_in_result_fn::PanicInResultFn));\n     let single_char_binding_names_threshold = conf.single_char_binding_names_threshold;\n     store.register_early_pass(move || {\n         Box::new(non_expressive_names::NonExpressiveNames {\n@@ -815,96 +814,96 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     });\n     let macro_matcher = conf.standard_macro_braces.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_early_pass(move || Box::new(nonstandard_macro_braces::MacroBraces::new(&macro_matcher)));\n-    store.register_late_pass(|| Box::<macro_use::MacroUseImports>::default());\n-    store.register_late_pass(|| Box::new(pattern_type_mismatch::PatternTypeMismatch));\n-    store.register_late_pass(|| Box::new(unwrap_in_result::UnwrapInResult));\n-    store.register_late_pass(|| Box::new(semicolon_if_nothing_returned::SemicolonIfNothingReturned));\n-    store.register_late_pass(|| Box::new(async_yields_async::AsyncYieldsAsync));\n+    store.register_late_pass(|_| Box::<macro_use::MacroUseImports>::default());\n+    store.register_late_pass(|_| Box::new(pattern_type_mismatch::PatternTypeMismatch));\n+    store.register_late_pass(|_| Box::new(unwrap_in_result::UnwrapInResult));\n+    store.register_late_pass(|_| Box::new(semicolon_if_nothing_returned::SemicolonIfNothingReturned));\n+    store.register_late_pass(|_| Box::new(async_yields_async::AsyncYieldsAsync));\n     let disallowed_methods = conf.disallowed_methods.clone();\n-    store.register_late_pass(move || Box::new(disallowed_methods::DisallowedMethods::new(disallowed_methods.clone())));\n+    store.register_late_pass(move |_| Box::new(disallowed_methods::DisallowedMethods::new(disallowed_methods.clone())));\n     store.register_early_pass(|| Box::new(asm_syntax::InlineAsmX86AttSyntax));\n     store.register_early_pass(|| Box::new(asm_syntax::InlineAsmX86IntelSyntax));\n-    store.register_late_pass(|| Box::new(empty_drop::EmptyDrop));\n-    store.register_late_pass(|| Box::new(strings::StrToString));\n-    store.register_late_pass(|| Box::new(strings::StringToString));\n-    store.register_late_pass(|| Box::new(zero_sized_map_values::ZeroSizedMapValues));\n-    store.register_late_pass(|| Box::<vec_init_then_push::VecInitThenPush>::default());\n-    store.register_late_pass(|| Box::new(redundant_slicing::RedundantSlicing));\n-    store.register_late_pass(|| Box::new(from_str_radix_10::FromStrRadix10));\n-    store.register_late_pass(move || Box::new(if_then_some_else_none::IfThenSomeElseNone::new(msrv)));\n-    store.register_late_pass(|| Box::new(bool_assert_comparison::BoolAssertComparison));\n+    store.register_late_pass(|_| Box::new(empty_drop::EmptyDrop));\n+    store.register_late_pass(|_| Box::new(strings::StrToString));\n+    store.register_late_pass(|_| Box::new(strings::StringToString));\n+    store.register_late_pass(|_| Box::new(zero_sized_map_values::ZeroSizedMapValues));\n+    store.register_late_pass(|_| Box::<vec_init_then_push::VecInitThenPush>::default());\n+    store.register_late_pass(|_| Box::new(redundant_slicing::RedundantSlicing));\n+    store.register_late_pass(|_| Box::new(from_str_radix_10::FromStrRadix10));\n+    store.register_late_pass(move |_| Box::new(if_then_some_else_none::IfThenSomeElseNone::new(msrv)));\n+    store.register_late_pass(|_| Box::new(bool_assert_comparison::BoolAssertComparison));\n     store.register_early_pass(move || Box::new(module_style::ModStyle));\n-    store.register_late_pass(|| Box::new(unused_async::UnusedAsync));\n+    store.register_late_pass(|_| Box::new(unused_async::UnusedAsync));\n     let disallowed_types = conf.disallowed_types.clone();\n-    store.register_late_pass(move || Box::new(disallowed_types::DisallowedTypes::new(disallowed_types.clone())));\n+    store.register_late_pass(move |_| Box::new(disallowed_types::DisallowedTypes::new(disallowed_types.clone())));\n     let import_renames = conf.enforced_import_renames.clone();\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(missing_enforced_import_rename::ImportRename::new(\n             import_renames.clone(),\n         ))\n     });\n     let scripts = conf.allowed_scripts.clone();\n     store.register_early_pass(move || Box::new(disallowed_script_idents::DisallowedScriptIdents::new(&scripts)));\n-    store.register_late_pass(|| Box::new(strlen_on_c_strings::StrlenOnCStrings));\n-    store.register_late_pass(move || Box::new(self_named_constructors::SelfNamedConstructors));\n-    store.register_late_pass(move || Box::new(iter_not_returning_iterator::IterNotReturningIterator));\n-    store.register_late_pass(move || Box::new(manual_assert::ManualAssert));\n+    store.register_late_pass(|_| Box::new(strlen_on_c_strings::StrlenOnCStrings));\n+    store.register_late_pass(move |_| Box::new(self_named_constructors::SelfNamedConstructors));\n+    store.register_late_pass(move |_| Box::new(iter_not_returning_iterator::IterNotReturningIterator));\n+    store.register_late_pass(move |_| Box::new(manual_assert::ManualAssert));\n     let enable_raw_pointer_heuristic_for_send = conf.enable_raw_pointer_heuristic_for_send;\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(non_send_fields_in_send_ty::NonSendFieldInSendTy::new(\n             enable_raw_pointer_heuristic_for_send,\n         ))\n     });\n-    store.register_late_pass(move || Box::new(undocumented_unsafe_blocks::UndocumentedUnsafeBlocks));\n-    store.register_late_pass(move || Box::new(format_args::FormatArgs::new(msrv)));\n-    store.register_late_pass(|| Box::new(trailing_empty_array::TrailingEmptyArray));\n+    store.register_late_pass(move |_| Box::new(undocumented_unsafe_blocks::UndocumentedUnsafeBlocks));\n+    store.register_late_pass(move |_| Box::new(format_args::FormatArgs::new(msrv)));\n+    store.register_late_pass(|_| Box::new(trailing_empty_array::TrailingEmptyArray));\n     store.register_early_pass(|| Box::new(octal_escapes::OctalEscapes));\n-    store.register_late_pass(|| Box::new(needless_late_init::NeedlessLateInit));\n-    store.register_late_pass(|| Box::new(return_self_not_must_use::ReturnSelfNotMustUse));\n-    store.register_late_pass(|| Box::new(init_numbered_fields::NumberedFields));\n+    store.register_late_pass(|_| Box::new(needless_late_init::NeedlessLateInit));\n+    store.register_late_pass(|_| Box::new(return_self_not_must_use::ReturnSelfNotMustUse));\n+    store.register_late_pass(|_| Box::new(init_numbered_fields::NumberedFields));\n     store.register_early_pass(|| Box::new(single_char_lifetime_names::SingleCharLifetimeNames));\n-    store.register_late_pass(move || Box::new(manual_bits::ManualBits::new(msrv)));\n-    store.register_late_pass(|| Box::new(default_union_representation::DefaultUnionRepresentation));\n+    store.register_late_pass(move |_| Box::new(manual_bits::ManualBits::new(msrv)));\n+    store.register_late_pass(|_| Box::new(default_union_representation::DefaultUnionRepresentation));\n     store.register_early_pass(|| Box::new(doc_link_with_quotes::DocLinkWithQuotes));\n-    store.register_late_pass(|| Box::<only_used_in_recursion::OnlyUsedInRecursion>::default());\n+    store.register_late_pass(|_| Box::<only_used_in_recursion::OnlyUsedInRecursion>::default());\n     let allow_dbg_in_tests = conf.allow_dbg_in_tests;\n-    store.register_late_pass(move || Box::new(dbg_macro::DbgMacro::new(allow_dbg_in_tests)));\n+    store.register_late_pass(move |_| Box::new(dbg_macro::DbgMacro::new(allow_dbg_in_tests)));\n     let cargo_ignore_publish = conf.cargo_ignore_publish;\n-    store.register_late_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(cargo::Cargo {\n             ignore_publish: cargo_ignore_publish,\n         })\n     });\n-    store.register_late_pass(|| Box::<write::Write>::default());\n+    store.register_late_pass(|_| Box::<write::Write>::default());\n     store.register_early_pass(|| Box::new(crate_in_macro_def::CrateInMacroDef));\n     store.register_early_pass(|| Box::new(empty_structs_with_brackets::EmptyStructsWithBrackets));\n-    store.register_late_pass(|| Box::new(unnecessary_owned_empty_strings::UnnecessaryOwnedEmptyStrings));\n+    store.register_late_pass(|_| Box::new(unnecessary_owned_empty_strings::UnnecessaryOwnedEmptyStrings));\n     store.register_early_pass(|| Box::new(pub_use::PubUse));\n-    store.register_late_pass(|| Box::new(format_push_string::FormatPushString));\n+    store.register_late_pass(|_| Box::new(format_push_string::FormatPushString));\n     let max_include_file_size = conf.max_include_file_size;\n-    store.register_late_pass(move || Box::new(large_include_file::LargeIncludeFile::new(max_include_file_size)));\n-    store.register_late_pass(|| Box::new(strings::TrimSplitWhitespace));\n-    store.register_late_pass(|| Box::new(rc_clone_in_vec_init::RcCloneInVecInit));\n+    store.register_late_pass(move |_| Box::new(large_include_file::LargeIncludeFile::new(max_include_file_size)));\n+    store.register_late_pass(|_| Box::new(strings::TrimSplitWhitespace));\n+    store.register_late_pass(|_| Box::new(rc_clone_in_vec_init::RcCloneInVecInit));\n     store.register_early_pass(|| Box::<duplicate_mod::DuplicateMod>::default());\n     store.register_early_pass(|| Box::new(unused_rounding::UnusedRounding));\n     store.register_early_pass(move || Box::new(almost_complete_letter_range::AlmostCompleteLetterRange::new(msrv)));\n-    store.register_late_pass(|| Box::new(swap_ptr_to_ref::SwapPtrToRef));\n-    store.register_late_pass(|| Box::new(mismatching_type_param_order::TypeParamMismatch));\n-    store.register_late_pass(|| Box::new(read_zero_byte_vec::ReadZeroByteVec));\n-    store.register_late_pass(|| Box::new(default_instead_of_iter_empty::DefaultIterEmpty));\n-    store.register_late_pass(move || Box::new(manual_rem_euclid::ManualRemEuclid::new(msrv)));\n-    store.register_late_pass(move || Box::new(manual_retain::ManualRetain::new(msrv)));\n+    store.register_late_pass(|_| Box::new(swap_ptr_to_ref::SwapPtrToRef));\n+    store.register_late_pass(|_| Box::new(mismatching_type_param_order::TypeParamMismatch));\n+    store.register_late_pass(|_| Box::new(read_zero_byte_vec::ReadZeroByteVec));\n+    store.register_late_pass(|_| Box::new(default_instead_of_iter_empty::DefaultIterEmpty));\n+    store.register_late_pass(move |_| Box::new(manual_rem_euclid::ManualRemEuclid::new(msrv)));\n+    store.register_late_pass(move |_| Box::new(manual_retain::ManualRetain::new(msrv)));\n     let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n-    store.register_late_pass(move || Box::new(operators::Operators::new(verbose_bit_mask_threshold)));\n-    store.register_late_pass(|| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n-    store.register_late_pass(|| Box::<std_instead_of_core::StdReexports>::default());\n-    store.register_late_pass(|| Box::new(manual_instant_elapsed::ManualInstantElapsed));\n-    store.register_late_pass(|| Box::new(partialeq_to_none::PartialeqToNone));\n-    store.register_late_pass(|| Box::new(manual_string_new::ManualStringNew));\n-    store.register_late_pass(|| Box::new(unused_peekable::UnusedPeekable));\n+    store.register_late_pass(move |_| Box::new(operators::Operators::new(verbose_bit_mask_threshold)));\n+    store.register_late_pass(|_| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n+    store.register_late_pass(|_| Box::<std_instead_of_core::StdReexports>::default());\n+    store.register_late_pass(|_| Box::new(manual_instant_elapsed::ManualInstantElapsed));\n+    store.register_late_pass(|_| Box::new(partialeq_to_none::PartialeqToNone));\n+    store.register_late_pass(|_| Box::new(manual_string_new::ManualStringNew));\n+    store.register_late_pass(|_| Box::new(unused_peekable::UnusedPeekable));\n     store.register_early_pass(|| Box::new(multi_assignments::MultiAssignments));\n-    store.register_late_pass(|| Box::new(bool_to_int_with_if::BoolToIntWithIf));\n-    store.register_late_pass(|| Box::new(box_default::BoxDefault));\n+    store.register_late_pass(|_| Box::new(bool_to_int_with_if::BoolToIntWithIf));\n+    store.register_late_pass(|_| Box::new(box_default::BoxDefault));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "13878eda0f1cd59395825864b6f8ffa95ec5b39f", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -9,8 +9,8 @@ use rustc_hir::intravisit::{\n use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n     BareFnTy, BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, Impl, ImplItem,\n-    ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, ParamName, PolyTraitRef, PredicateOrigin,\n-    TraitBoundModifier, TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n+    ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, ParamName, PolyTraitRef, PredicateOrigin, TraitFn,\n+    TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter as middle_nested_filter;\n@@ -102,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for Lifetimes {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Fn(ref sig, id) = item.kind {\n-            let report_extra_lifetimes = trait_ref_of_method(cx, item.def_id).is_none();\n+            let report_extra_lifetimes = trait_ref_of_method(cx, item.def_id.def_id).is_none();\n             check_fn_inner(\n                 cx,\n                 sig.decl,\n@@ -422,7 +422,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n         self.record(&Some(*lifetime));\n     }\n \n-    fn visit_poly_trait_ref(&mut self, poly_tref: &'tcx PolyTraitRef<'tcx>, tbm: TraitBoundModifier) {\n+    fn visit_poly_trait_ref(&mut self, poly_tref: &'tcx PolyTraitRef<'tcx>) {\n         let trait_ref = &poly_tref.trait_ref;\n         if CLOSURE_TRAIT_BOUNDS.iter().any(|&item| {\n             self.cx\n@@ -435,13 +435,13 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n             sub_visitor.visit_trait_ref(trait_ref);\n             self.nested_elision_site_lts.append(&mut sub_visitor.all_lts());\n         } else {\n-            walk_poly_trait_ref(self, poly_tref, tbm);\n+            walk_poly_trait_ref(self, poly_tref);\n         }\n     }\n \n     fn visit_ty(&mut self, ty: &'tcx Ty<'_>) {\n         match ty.kind {\n-            TyKind::OpaqueDef(item, bounds) => {\n+            TyKind::OpaqueDef(item, bounds, _) => {\n                 let map = self.cx.tcx.hir();\n                 let item = map.item(item);\n                 let len = self.lts.len();\n@@ -461,12 +461,12 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n                 sub_visitor.visit_fn_decl(decl);\n                 self.nested_elision_site_lts.append(&mut sub_visitor.all_lts());\n             },\n-            TyKind::TraitObject(bounds, ref lt, _) => {\n+            TyKind::TraitObject(bounds, lt, _) => {\n                 if !lt.is_elided() {\n                     self.unelided_trait_object_lifetime = true;\n                 }\n                 for bound in bounds {\n-                    self.visit_poly_trait_ref(bound, TraitBoundModifier::None);\n+                    self.visit_poly_trait_ref(bound);\n                 }\n             },\n             _ => walk_ty(self, ty),"}, {"sha": "0ee42b61c9a509f7197c4d6f2d63a7b2d41e4a34", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -4,11 +4,11 @@ use clippy_utils::{get_enclosing_block, higher, path_to_local};\n use if_chain::if_chain;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{BindingAnnotation, Expr, ExprKind, HirId, Node, PatKind};\n+use rustc_hir_analysis::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::{mir::FakeReadCause, ty};\n use rustc_span::source_map::Span;\n-use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>, body: &Expr<'_>) {\n     if_chain! {\n@@ -69,7 +69,7 @@ fn check_for_mutation<'tcx>(\n         ExprUseVisitor::new(\n             &mut delegate,\n             &infcx,\n-            body.hir_id.owner,\n+            body.hir_id.owner.def_id,\n             cx.param_env,\n             cx.typeck_results(),\n         )\n@@ -114,7 +114,13 @@ impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n         }\n     }\n \n-    fn fake_read(&mut self, _: &rustc_typeck::expr_use_visitor::PlaceWithHirId<'tcx>, _: FakeReadCause, _: HirId) {}\n+    fn fake_read(\n+        &mut self,\n+        _: &rustc_hir_analysis::expr_use_visitor::PlaceWithHirId<'tcx>,\n+        _: FakeReadCause,\n+        _: HirId,\n+    ) {\n+    }\n }\n \n impl MutatePairDelegate<'_, '_> {"}, {"sha": "b6f4cf7bbb37f149eccda55bbc0ef40b2f08def9", "filename": "clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Futils.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -5,12 +5,12 @@ use rustc_ast::ast::{LitIntType, LitKind};\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, walk_local, walk_pat, walk_stmt, Visitor};\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, HirId, HirIdMap, Local, Mutability, Pat, PatKind, Stmt};\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::LateContext;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_typeck::hir_ty_to_ty;\n use std::iter::Iterator;\n \n #[derive(Debug, PartialEq, Eq)]"}, {"sha": "9a0a26c0991b3eb59dd9a50caf98308f2ca217d1", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -103,7 +103,7 @@ fn future_trait_ref<'tcx>(\n     ty: &'tcx Ty<'tcx>,\n ) -> Option<(&'tcx TraitRef<'tcx>, Vec<LifetimeName>)> {\n     if_chain! {\n-        if let TyKind::OpaqueDef(item_id, bounds) = ty.kind;\n+        if let TyKind::OpaqueDef(item_id, bounds, false) = ty.kind;\n         let item = cx.tcx.hir().item(item_id);\n         if let ItemKind::OpaqueTy(opaque) = &item.kind;\n         if let Some(trait_ref) = opaque.bounds.iter().find_map(|bound| {"}, {"sha": "6a42275322b4399218b58239de3d5b38187f8e74", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -166,7 +166,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualNonExhaustiveEnum {\n             if let Some((id, span)) = iter.next()\n                 && iter.next().is_none()\n             {\n-                self.potential_enums.push((item.def_id, id, item.span, span));\n+                self.potential_enums.push((item.def_id.def_id, id, item.span, span));\n             }\n         }\n     }"}, {"sha": "37049f83577513605c6ea63000e4662101898138", "filename": "clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -8,11 +8,10 @@ use rustc_arena::DroplessArena;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::{Arm, Expr, ExprKind, HirId, HirIdMap, HirIdSet, Pat, PatKind, RangeEnd};\n+use rustc_hir::{Arm, Expr, ExprKind, HirId, HirIdMap, HirIdMapEntry, HirIdSet, Pat, PatKind, RangeEnd};\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n use rustc_span::Symbol;\n-use std::collections::hash_map::Entry;\n \n use super::MATCH_SAME_ARMS;\n \n@@ -71,9 +70,9 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>]) {\n                 if let Some(a_id) = path_to_local(a);\n                 if let Some(b_id) = path_to_local(b);\n                 let entry = match local_map.entry(a_id) {\n-                    Entry::Vacant(entry) => entry,\n+                    HirIdMapEntry::Vacant(entry) => entry,\n                     // check if using the same bindings as before\n-                    Entry::Occupied(entry) => return *entry.get() == b_id,\n+                    HirIdMapEntry::Occupied(entry) => return *entry.get() == b_id,\n                 };\n                 // the names technically don't have to match; this makes the lint more conservative\n                 if cx.tcx.hir().name(a_id) == cx.tcx.hir().name(b_id);\n@@ -248,7 +247,7 @@ impl<'a> NormalizedPat<'a> {\n                 } else {\n                     (None, adt.non_enum_variant())\n                 };\n-                let (front, back) = match wild_idx {\n+                let (front, back) = match wild_idx.as_opt_usize() {\n                     Some(i) => pats.split_at(i),\n                     None => (pats, [].as_slice()),\n                 };\n@@ -268,7 +267,7 @@ impl<'a> NormalizedPat<'a> {\n                     ty::Tuple(subs) => subs.len(),\n                     _ => return Self::Wild,\n                 };\n-                let (front, back) = match wild_idx {\n+                let (front, back) = match wild_idx.as_opt_usize() {\n                     Some(i) => pats.split_at(i),\n                     None => (pats, [].as_slice()),\n                 };"}, {"sha": "9cbffbe61f15243ec917430e446f7bba10325a5c", "filename": "clippy_lints/src/matches/needless_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -9,9 +9,9 @@ use clippy_utils::{\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::OptionNone;\n use rustc_hir::{Arm, BindingAnnotation, ByRef, Expr, ExprKind, FnRetTy, Guard, Node, Pat, PatKind, Path, QPath};\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::LateContext;\n use rustc_span::sym;\n-use rustc_typeck::hir_ty_to_ty;\n \n pub(crate) fn check_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr: &Expr<'_>) {\n     if arms.len() > 1 && expr_ty_matches_p_ty(cx, ex, expr) && check_all_arms(cx, ex, arms) {"}, {"sha": "6d6aa43df2a7eb2381ad71b266c1d352c9eeb816", "filename": "clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 56, "deletions": 26, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -2,17 +2,17 @@ use super::REDUNDANT_PATTERN_MATCHING;\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet;\n use clippy_utils::sugg::Sugg;\n-use clippy_utils::ty::needs_ordered_drop;\n+use clippy_utils::ty::{is_type_diagnostic_item, needs_ordered_drop};\n use clippy_utils::visitors::any_temporaries_need_ordered_drop;\n-use clippy_utils::{higher, is_lang_ctor, is_trait_method, match_def_path, paths};\n+use clippy_utils::{higher, is_lang_ctor, is_trait_method};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::LangItem::{OptionNone, PollPending};\n+use rustc_hir::LangItem::{self, OptionNone, OptionSome, PollPending, PollReady, ResultErr, ResultOk};\n use rustc_hir::{Arm, Expr, ExprKind, Node, Pat, PatKind, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, subst::GenericArgKind, DefIdTree, Ty};\n-use rustc_span::sym;\n+use rustc_span::{sym, Symbol};\n \n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n     if let Some(higher::WhileLet { let_pat, let_expr, .. }) = higher::WhileLet::hir(expr) {\n@@ -75,9 +75,9 @@ fn find_sugg_for_if_let<'tcx>(\n                     (\"is_some()\", op_ty)\n                 } else if Some(id) == lang_items.poll_ready_variant() {\n                     (\"is_ready()\", op_ty)\n-                } else if match_def_path(cx, id, &paths::IPADDR_V4) {\n+                } else if is_pat_variant(cx, check_pat, qpath, Item::Diag(sym::IpAddr, sym!(V4))) {\n                     (\"is_ipv4()\", op_ty)\n-                } else if match_def_path(cx, id, &paths::IPADDR_V6) {\n+                } else if is_pat_variant(cx, check_pat, qpath, Item::Diag(sym::IpAddr, sym!(V6))) {\n                     (\"is_ipv6()\", op_ty)\n                 } else {\n                     return;\n@@ -187,8 +187,8 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n                         arms,\n                         path_left,\n                         path_right,\n-                        &paths::RESULT_OK,\n-                        &paths::RESULT_ERR,\n+                        Item::Lang(ResultOk),\n+                        Item::Lang(ResultErr),\n                         \"is_ok()\",\n                         \"is_err()\",\n                     )\n@@ -198,8 +198,8 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n                             arms,\n                             path_left,\n                             path_right,\n-                            &paths::IPADDR_V4,\n-                            &paths::IPADDR_V6,\n+                            Item::Diag(sym::IpAddr, sym!(V4)),\n+                            Item::Diag(sym::IpAddr, sym!(V6)),\n                             \"is_ipv4()\",\n                             \"is_ipv6()\",\n                         )\n@@ -218,8 +218,8 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n                         arms,\n                         path_left,\n                         path_right,\n-                        &paths::OPTION_SOME,\n-                        &paths::OPTION_NONE,\n+                        Item::Lang(OptionSome),\n+                        Item::Lang(OptionNone),\n                         \"is_some()\",\n                         \"is_none()\",\n                     )\n@@ -229,8 +229,8 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n                             arms,\n                             path_left,\n                             path_right,\n-                            &paths::POLL_READY,\n-                            &paths::POLL_PENDING,\n+                            Item::Lang(PollReady),\n+                            Item::Lang(PollPending),\n                             \"is_ready()\",\n                             \"is_pending()\",\n                         )\n@@ -266,28 +266,58 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n     }\n }\n \n+#[derive(Clone, Copy)]\n+enum Item {\n+    Lang(LangItem),\n+    Diag(Symbol, Symbol),\n+}\n+\n+fn is_pat_variant(cx: &LateContext<'_>, pat: &Pat<'_>, path: &QPath<'_>, expected_item: Item) -> bool {\n+    let Some(id) = cx.typeck_results().qpath_res(path, pat.hir_id).opt_def_id() else { return false };\n+\n+    match expected_item {\n+        Item::Lang(expected_lang_item) => {\n+            let expected_id = cx.tcx.lang_items().require(expected_lang_item).unwrap();\n+            cx.tcx.parent(id) == expected_id\n+        },\n+        Item::Diag(expected_ty, expected_variant) => {\n+            let ty = cx.typeck_results().pat_ty(pat);\n+\n+            if is_type_diagnostic_item(cx, ty, expected_ty) {\n+                let variant = ty\n+                    .ty_adt_def()\n+                    .expect(\"struct pattern type is not an ADT\")\n+                    .variant_of_res(cx.qpath_res(path, pat.hir_id));\n+\n+                return variant.name == expected_variant;\n+            }\n+\n+            false\n+        },\n+    }\n+}\n+\n #[expect(clippy::too_many_arguments)]\n fn find_good_method_for_match<'a>(\n     cx: &LateContext<'_>,\n     arms: &[Arm<'_>],\n     path_left: &QPath<'_>,\n     path_right: &QPath<'_>,\n-    expected_left: &[&str],\n-    expected_right: &[&str],\n+    expected_item_left: Item,\n+    expected_item_right: Item,\n     should_be_left: &'a str,\n     should_be_right: &'a str,\n ) -> Option<&'a str> {\n-    let left_id = cx\n-        .typeck_results()\n-        .qpath_res(path_left, arms[0].pat.hir_id)\n-        .opt_def_id()?;\n-    let right_id = cx\n-        .typeck_results()\n-        .qpath_res(path_right, arms[1].pat.hir_id)\n-        .opt_def_id()?;\n-    let body_node_pair = if match_def_path(cx, left_id, expected_left) && match_def_path(cx, right_id, expected_right) {\n+    let first_pat = arms[0].pat;\n+    let second_pat = arms[1].pat;\n+\n+    let body_node_pair = if (is_pat_variant(cx, first_pat, path_left, expected_item_left))\n+        && (is_pat_variant(cx, second_pat, path_right, expected_item_right))\n+    {\n         (&arms[0].body.kind, &arms[1].body.kind)\n-    } else if match_def_path(cx, right_id, expected_left) && match_def_path(cx, right_id, expected_right) {\n+    } else if (is_pat_variant(cx, first_pat, path_left, expected_item_right))\n+        && (is_pat_variant(cx, second_pat, path_right, expected_item_left))\n+    {\n         (&arms[1].body.kind, &arms[0].body.kind)\n     } else {\n         return None;"}, {"sha": "d496107ffd6b85a76a903cf912663ca1fd62369b", "filename": "clippy_lints/src/matches/single_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -198,6 +198,8 @@ fn form_exhaustive_matches<'a>(cx: &LateContext<'a>, ty: Ty<'a>, left: &Pat<'_>,\n             // We don't actually know the position and the presence of the `..` (dotdot) operator\n             // in the arms, so we need to evaluate the correct offsets here in order to iterate in\n             // both arms at the same time.\n+            let left_pos = left_pos.as_opt_usize();\n+            let right_pos = right_pos.as_opt_usize();\n             let len = max(\n                 left_in.len() + usize::from(left_pos.is_some()),\n                 right_in.len() + usize::from(right_pos.is_some()),"}, {"sha": "cfcf9596c50d3f32638475a2f06277916257195e", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -109,13 +109,13 @@ use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::{Expr, ExprKind, PrimTy, QPath, TraitItem, TraitItemKind};\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TraitRef, Ty};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n-use rustc_typeck::hir_ty_to_ty;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -3250,7 +3250,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             return;\n         }\n         let name = impl_item.ident.name.as_str();\n-        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n         let item = cx.tcx.hir().expect_item(parent);\n         let self_ty = cx.tcx.type_of(item.def_id);\n \n@@ -3260,7 +3260,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             let method_sig = cx.tcx.erase_late_bound_regions(method_sig);\n             let first_arg_ty_opt = method_sig.inputs().iter().next().copied();\n             // if this impl block implements a trait, lint in trait definition instead\n-            if !implements_trait && cx.access_levels.is_exported(impl_item.def_id) {\n+            if !implements_trait && cx.access_levels.is_exported(impl_item.def_id.def_id) {\n                 // check missing trait implementations\n                 for method_config in &TRAIT_METHODS {\n                     if name == method_config.method_name\n@@ -3294,7 +3294,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n \n             if sig.decl.implicit_self.has_implicit_self()\n                     && !(self.avoid_breaking_exported_api\n-                    && cx.access_levels.is_exported(impl_item.def_id))\n+                    && cx.access_levels.is_exported(impl_item.def_id.def_id))\n                     && let Some(first_arg) = iter_input_pats(sig.decl, cx.tcx.hir().body(id)).next()\n                     && let Some(first_arg_ty) = first_arg_ty_opt\n                 {"}, {"sha": "9ab0d614114699400375b7073a5dde46c326327c", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,6 +1,5 @@\n use super::implicit_clone::is_clone_like;\n use super::unnecessary_iter_cloned::{self, is_into_iter};\n-use crate::rustc_middle::ty::Subst;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{get_associated_type, get_iterator_item_ty, implements_trait, is_copy, peel_mid_ty_refs};\n@@ -9,6 +8,7 @@ use clippy_utils::{fn_def_id, get_parent_expr, is_diag_item_method, is_diag_trai\n use clippy_utils::{meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir::{def_id::DefId, BorrowKind, Expr, ExprKind, ItemKind, LangItem, Node};\n+use rustc_hir_analysis::check::{FnCtxt, Inherited};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::mir::Mutability;\n@@ -19,7 +19,6 @@ use rustc_middle::ty::{self, ParamTy, PredicateKind, ProjectionPredicate, TraitP\n use rustc_semver::RustcVersion;\n use rustc_span::{sym, Symbol};\n use rustc_trait_selection::traits::{query::evaluate_obligation::InferCtxtExt as _, Obligation, ObligationCause};\n-use rustc_typeck::check::{FnCtxt, Inherited};\n use std::cmp::max;\n \n use super::UNNECESSARY_TO_OWNED;"}, {"sha": "71cc0d0a81cd2dd8bc909dd8780c79f857b919a0", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -8,12 +8,12 @@ use rustc_hir as hir;\n use rustc_hir::def_id::CRATE_DEF_ID;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n-use rustc_typeck::hir_ty_to_ty;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -136,7 +136,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n \n         // Const fns are not allowed as methods in a trait.\n         {\n-            let parent = cx.tcx.hir().get_parent_item(hir_id);\n+            let parent = cx.tcx.hir().get_parent_item(hir_id).def_id;\n             if parent != CRATE_DEF_ID {\n                 if let hir::Node::Item(item) = cx.tcx.hir().get_by_def_id(parent) {\n                     if let hir::ItemKind::Trait(..) = &item.kind {"}, {"sha": "641dbb7f7a7454f3831677a0c52250d42e5001e1", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -132,7 +132,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             hir::ItemKind::Fn(..) => {\n                 // ignore main()\n                 if it.ident.name == sym::main {\n-                    let at_root = cx.tcx.local_parent(it.def_id) == CRATE_DEF_ID;\n+                    let at_root = cx.tcx.local_parent(it.def_id.def_id) == CRATE_DEF_ID;\n                     if at_root {\n                         return;\n                     }"}, {"sha": "655df5419ac640b87897c0fccf3b10787250c4d3", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -88,7 +88,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n             return;\n         }\n \n-        if !cx.access_levels.is_exported(it.def_id) {\n+        if !cx.access_levels.is_exported(it.def_id.def_id) {\n             return;\n         }\n         match it.kind {\n@@ -142,7 +142,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n         }\n \n         // If the item being implemented is not exported, then we don't need #[inline]\n-        if !cx.access_levels.is_exported(impl_item.def_id) {\n+        if !cx.access_levels.is_exported(impl_item.def_id.def_id) {\n             return;\n         }\n \n@@ -159,7 +159,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n         };\n \n         if let Some(trait_def_id) = trait_def_id {\n-            if trait_def_id.is_local() && !cx.access_levels.is_exported(impl_item.def_id) {\n+            if trait_def_id.is_local() && !cx.access_levels.is_exported(impl_item.def_id.def_id) {\n                 // If a trait is being implemented for an item, and the\n                 // trait is not exported, we don't need #[inline]\n                 return;"}, {"sha": "25d6ca83a94bc7e2d099e8a9e1a81b1a071e2e1d", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -89,7 +89,7 @@ impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'tcx>) {\n         if let hir::ImplItemKind::Fn(ref sig, ..) = item.kind {\n-            if trait_ref_of_method(cx, item.def_id).is_none() {\n+            if trait_ref_of_method(cx, item.def_id.def_id).is_none() {\n                 check_sig(cx, item.hir_id(), sig.decl);\n             }\n         }"}, {"sha": "4547ed7eafc861925fb142320d3624a62c99dbc3", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,7 +1,6 @@\n use clippy_utils::diagnostics::span_lint;\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::iter;"}, {"sha": "178c973981b1b5da2f4e15e198cad7c9c6c1f075", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -12,6 +12,7 @@ use rustc_hir::{\n     BindingAnnotation, Body, FnDecl, GenericArg, HirId, Impl, ItemKind, Mutability, Node, PatKind, QPath, TyKind,\n };\n use rustc_hir::{HirIdMap, HirIdSet};\n+use rustc_hir_analysis::expr_use_visitor as euv;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::FakeReadCause;\n@@ -22,7 +23,6 @@ use rustc_span::{sym, Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::misc::can_type_implement_copy;\n-use rustc_typeck::expr_use_visitor as euv;\n use std::borrow::Cow;\n \n declare_clippy_lint! {\n@@ -173,7 +173,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                 (\n                     preds.iter().any(|t| cx.tcx.is_diagnostic_item(sym::Borrow, t.def_id())),\n                     !preds.is_empty() && {\n-                        let ty_empty_region = cx.tcx.mk_imm_ref(cx.tcx.lifetimes.re_root_empty, ty);\n+                        let ty_empty_region = cx.tcx.mk_imm_ref(cx.tcx.lifetimes.re_erased, ty);\n                         preds.iter().all(|t| {\n                             let ty_params = t.trait_ref.substs.iter().skip(1).collect::<Vec<_>>();\n                             implements_trait(cx, ty_empty_region, t.def_id(), &ty_params)\n@@ -342,5 +342,11 @@ impl<'tcx> euv::Delegate<'tcx> for MovedVariablesCtxt {\n \n     fn mutate(&mut self, _: &euv::PlaceWithHirId<'tcx>, _: HirId) {}\n \n-    fn fake_read(&mut self, _: &rustc_typeck::expr_use_visitor::PlaceWithHirId<'tcx>, _: FakeReadCause, _: HirId) {}\n+    fn fake_read(\n+        &mut self,\n+        _: &rustc_hir_analysis::expr_use_visitor::PlaceWithHirId<'tcx>,\n+        _: FakeReadCause,\n+        _: HirId,\n+    ) {\n+    }\n }"}, {"sha": "6017117e1eccf7c15a7773aea4e999d5e536635c", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -84,7 +84,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                             // can't be implemented for unsafe new\n                             return;\n                         }\n-                        if cx.tcx.is_doc_hidden(impl_item.def_id) {\n+                        if cx.tcx.is_doc_hidden(impl_item.def_id.def_id) {\n                             // shouldn't be implemented when it is hidden in docs\n                             return;\n                         }\n@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                         if_chain! {\n                             if sig.decl.inputs.is_empty();\n                             if name == sym::new;\n-                            if cx.access_levels.is_reachable(impl_item.def_id);\n+                            if cx.access_levels.is_reachable(impl_item.def_id.def_id);\n                             let self_def_id = cx.tcx.hir().get_parent_item(id);\n                             let self_ty = cx.tcx.type_of(self_def_id);\n                             if self_ty == return_ty(cx, id);"}, {"sha": "2c839d029c6f7a5bd482145e1cc5257af862e76b", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -13,14 +13,14 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{\n     BodyId, Expr, ExprKind, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind, UnOp,\n };\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass, Lint};\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{ConstValue, ErrorHandled};\n use rustc_middle::ty::adjustment::Adjust;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, InnerSpan, Span, DUMMY_SP};\n-use rustc_typeck::hir_ty_to_ty;\n \n // FIXME: this is a correctness problem but there's no suitable\n // warn-by-default category.\n@@ -198,7 +198,7 @@ fn is_value_unfrozen_expr<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId, def_id: D\n \n     let result = cx.tcx.const_eval_resolve(\n         cx.param_env,\n-        ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs),\n+        mir::UnevaluatedConst::new(ty::WithOptConstParam::unknown(def_id), substs),\n         None,\n     );\n     is_value_unfrozen_raw(cx, result, ty)\n@@ -289,7 +289,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Const(hir_ty, body_id) = &impl_item.kind {\n-            let item_def_id = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n+            let item_def_id = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n             let item = cx.tcx.hir().expect_item(item_def_id);\n \n             match &item.kind {"}, {"sha": "9f6917c146f633d6fb58279644ee7e626fe624f0", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -15,6 +15,10 @@ declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for names that are very similar and thus confusing.\n     ///\n+    /// Note: this lint looks for similar names throughout each\n+    /// scope. To allow it, you need to allow it on the scope\n+    /// level, not on the name that is reported.\n+    ///\n     /// ### Why is this bad?\n     /// It's hard to distinguish between names that differ only\n     /// by a single character."}, {"sha": "d64a9cf71e17a9a036530de5a09688643094224f", "filename": "clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -243,7 +243,7 @@ impl<'tcx> LateLintPass<'tcx> for OnlyUsedInRecursion {\n                 ..\n             })) => {\n                 #[allow(trivial_casts)]\n-                if let Some(Node::Item(item)) = get_parent_node(cx.tcx, cx.tcx.hir().local_def_id_to_hir_id(def_id))\n+                if let Some(Node::Item(item)) = get_parent_node(cx.tcx, def_id.into())\n                     && let Some(trait_ref) = cx.tcx.impl_trait_ref(item.def_id)\n                     && let Some(trait_item_id) = cx.tcx.associated_item(def_id).trait_item_def_id\n                 {"}, {"sha": "2d5d5d143ffaff88d452ecd05cb79c9571dae343", "filename": "clippy_lints/src/operators/assign_op_pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -7,11 +7,11 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n+use rustc_hir_analysis::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use rustc_lint::LateContext;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::BorrowKind;\n use rustc_trait_selection::infer::TyCtxtInferExt;\n-use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n use super::ASSIGN_OP_PATTERN;\n \n@@ -28,7 +28,7 @@ pub(super) fn check<'tcx>(\n             if_chain! {\n                 if let Some((_, lang_item)) = binop_traits(op.node);\n                 if let Ok(trait_id) = cx.tcx.lang_items().require(lang_item);\n-                let parent_fn = cx.tcx.hir().get_parent_item(e.hir_id);\n+                let parent_fn = cx.tcx.hir().get_parent_item(e.hir_id).def_id;\n                 if trait_ref_of_method(cx, parent_fn)\n                     .map_or(true, |t| t.path.res.def_id() != trait_id);\n                 if implements_trait(cx, ty, trait_id, &[rty.into()]);"}, {"sha": "45e98de10ace4985308194b806b8f3645fc01a8d", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -261,7 +261,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         }\n \n         if let hir::TraitItemKind::Fn(method_sig, _) = &item.kind {\n-            self.check_poly_fn(cx, item.def_id, method_sig.decl, None);\n+            self.check_poly_fn(cx, item.def_id.def_id, method_sig.decl, None);\n         }\n     }\n "}, {"sha": "d296a150b46d085cec600152a3c2a05abac8af49", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -669,7 +669,7 @@ fn check_ptr_arg_usage<'tcx>(cx: &LateContext<'tcx>, body: &'tcx Body<'_>, args:\n }\n \n fn get_rptr_lm<'tcx>(ty: &'tcx hir::Ty<'tcx>) -> Option<(&'tcx Lifetime, Mutability, Span)> {\n-    if let TyKind::Rptr(ref lt, ref m) = ty.kind {\n+    if let TyKind::Rptr(lt, ref m) = ty.kind {\n         Some((lt, m.mutbl, ty.span))\n     } else {\n         None"}, {"sha": "0b3d5d174804af201e89e182e8aecaf429442752", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -122,7 +122,8 @@ fn check_if_let_some_or_err_and_early_return<'tcx>(cx: &LateContext<'tcx>, expr:\n     if_chain! {\n         if let Some(higher::IfLet { let_pat, let_expr, if_then, if_else }) = higher::IfLet::hir(cx, expr);\n         if !is_else_clause(cx.tcx, expr);\n-        if let PatKind::TupleStruct(ref path1, [field], None) = let_pat.kind;\n+        if let PatKind::TupleStruct(ref path1, [field], ddpos) = let_pat.kind;\n+        if ddpos.as_opt_usize().is_none();\n         if let PatKind::Binding(BindingAnnotation(by_ref, _), bind_id, ident, None) = field.kind;\n         let caller_ty = cx.typeck_results().expr_ty(let_expr);\n         let if_block = IfBlockType::IfLet(path1, caller_ty, ident.name, let_expr, if_then, if_else);"}, {"sha": "464f6827e1d54b2bb4f1f8a796b27228364ce8fd", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -46,8 +46,8 @@ impl_lint_pass!(RedundantPubCrate => [REDUNDANT_PUB_CRATE]);\n impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         if_chain! {\n-            if cx.tcx.visibility(item.def_id) == ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id());\n-            if !cx.access_levels.is_exported(item.def_id) && self.is_exported.last() == Some(&false);\n+            if cx.tcx.visibility(item.def_id.def_id) == ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id());\n+            if !cx.access_levels.is_exported(item.def_id.def_id) && self.is_exported.last() == Some(&false);\n             if is_not_macro_export(item);\n             then {\n                 let span = item.span.with_hi(item.ident.span.hi());\n@@ -70,7 +70,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n         }\n \n         if let ItemKind::Mod { .. } = item.kind {\n-            self.is_exported.push(cx.access_levels.is_exported(item.def_id));\n+            self.is_exported.push(cx.access_levels.is_exported(item.def_id.def_id));\n         }\n     }\n "}, {"sha": "16d702a3868d183c400ef972c9827e06849d3110", "filename": "clippy_lints/src/return_self_not_must_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -128,7 +128,7 @@ impl<'tcx> LateLintPass<'tcx> for ReturnSelfNotMustUse {\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'tcx>) {\n         if let TraitItemKind::Fn(ref sig, _) = item.kind {\n-            check_method(cx, sig.decl, item.def_id, item.span, item.hir_id());\n+            check_method(cx, sig.decl, item.def_id.def_id, item.span, item.hir_id());\n         }\n     }\n }"}, {"sha": "1ac538f4c7c074cff2e64222d6876d9624e1be2f", "filename": "clippy_lints/src/self_named_constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fself_named_constructors.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -51,7 +51,7 @@ impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructors {\n             _ => return,\n         }\n \n-        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n         let item = cx.tcx.hir().expect_item(parent);\n         let self_ty = cx.tcx.type_of(item.def_id);\n         let ret_ty = return_ty(cx, impl_item.hir_id());"}, {"sha": "d47ed459387ef9c123088d9962be8abed61f00db", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -64,11 +64,11 @@ impl<'tcx> LateLintPass<'tcx> for SuspiciousImpl {\n \n             // Check for more than one binary operation in the implemented function\n             // Linting when multiple operations are involved can result in false positives\n-            let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id);\n+            let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id).def_id;\n             if let hir::Node::ImplItem(impl_item) = cx.tcx.hir().get_by_def_id(parent_fn);\n             if let hir::ImplItemKind::Fn(_, body_id) = impl_item.kind;\n             let body = cx.tcx.hir().body(body_id);\n-            let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id);\n+            let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id).def_id;\n             if let Some(trait_ref) = trait_ref_of_method(cx, parent_fn);\n             let trait_id = trait_ref.path.res.def_id();\n             if ![binop_trait_id, op_assign_trait_id].contains(&trait_id);"}, {"sha": "1c99a02e6c71ebc85a016fb3f75b0193c8bbf791", "filename": "clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::ty::is_c_void;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::subst::{Subst, SubstsRef};\n+use rustc_middle::ty::SubstsRef;\n use rustc_middle::ty::{self, IntTy, Ty, TypeAndMut, UintTy};\n use rustc_span::DUMMY_SP;\n "}, {"sha": "b567d92230bb1cbe4085a444dbb6843b7b7a81bc", "filename": "clippy_lints/src/transmute/utils.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,8 +1,11 @@\n use rustc_hir::Expr;\n+use rustc_hir_analysis::check::{\n+    cast::{self, CastCheckResult},\n+    FnCtxt, Inherited,\n+};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{cast::CastKind, Ty};\n use rustc_span::DUMMY_SP;\n-use rustc_typeck::check::{cast::CastCheck, FnCtxt, Inherited};\n \n // check if the component types of the transmuted collection and the result have different ABI,\n // size or alignment\n@@ -42,7 +45,7 @@ pub(super) fn can_be_expressed_as_pointer_cast<'tcx>(\n /// messages. This function will panic if that occurs.\n fn check_cast<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>, to_ty: Ty<'tcx>) -> Option<CastKind> {\n     let hir_id = e.hir_id;\n-    let local_def_id = hir_id.owner;\n+    let local_def_id = hir_id.owner.def_id;\n \n     Inherited::build(cx.tcx, local_def_id).enter(|inherited| {\n         let fn_ctxt = FnCtxt::new(&inherited, cx.param_env, hir_id);\n@@ -53,7 +56,7 @@ fn check_cast<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>\n             \"Newly created FnCtxt contained errors\"\n         );\n \n-        if let Ok(check) = CastCheck::new(\n+        if let CastCheckResult::Deferred(check) = cast::check_cast(\n             &fn_ctxt, e, from_ty, to_ty,\n             // We won't show any error to the user, so we don't care what the span is here.\n             DUMMY_SP, DUMMY_SP,"}, {"sha": "9c6629958401b24231f7852b77c20ec9dc53d16f", "filename": "clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -104,7 +104,7 @@ fn get_bounds_if_impl_trait<'tcx>(cx: &LateContext<'tcx>, qpath: &QPath<'_>, id:\n         if let Some(Node::GenericParam(generic_param)) = cx.tcx.hir().get_if_local(did);\n         if let GenericParamKind::Type { synthetic, .. } = generic_param.kind;\n         if synthetic;\n-        if let Some(generics) = cx.tcx.hir().get_generics(id.owner);\n+        if let Some(generics) = cx.tcx.hir().get_generics(id.owner.def_id);\n         if let Some(pred) = generics.bounds_for_param(did.expect_local()).next();\n         then {\n             Some(pred.bounds)"}, {"sha": "79c31efb9fcdfb1accd261691499f97c5149b9bd", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -313,7 +313,7 @@ impl_lint_pass!(Types => [BOX_COLLECTION, VEC_BOX, OPTION_OPTION, LINKEDLIST, BO\n impl<'tcx> LateLintPass<'tcx> for Types {\n     fn check_fn(&mut self, cx: &LateContext<'_>, _: FnKind<'_>, decl: &FnDecl<'_>, _: &Body<'_>, _: Span, id: HirId) {\n         let is_in_trait_impl =\n-            if let Some(hir::Node::Item(item)) = cx.tcx.hir().find_by_def_id(cx.tcx.hir().get_parent_item(id)) {\n+            if let Some(hir::Node::Item(item)) = cx.tcx.hir().find_by_def_id(cx.tcx.hir().get_parent_item(id).def_id) {\n                 matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n             } else {\n                 false\n@@ -333,7 +333,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        let is_exported = cx.access_levels.is_exported(item.def_id);\n+        let is_exported = cx.access_levels.is_exported(item.def_id.def_id);\n \n         match item.kind {\n             ItemKind::Static(ty, _, _) | ItemKind::Const(ty, _) => self.check_ty(\n@@ -352,8 +352,10 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         match item.kind {\n             ImplItemKind::Const(ty, _) => {\n-                let is_in_trait_impl = if let Some(hir::Node::Item(item)) =\n-                    cx.tcx.hir().find_by_def_id(cx.tcx.hir().get_parent_item(item.hir_id()))\n+                let is_in_trait_impl = if let Some(hir::Node::Item(item)) = cx\n+                    .tcx\n+                    .hir()\n+                    .find_by_def_id(cx.tcx.hir().get_parent_item(item.hir_id()).def_id)\n                 {\n                     matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n                 } else {\n@@ -390,7 +392,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &TraitItem<'_>) {\n-        let is_exported = cx.access_levels.is_exported(item.def_id);\n+        let is_exported = cx.access_levels.is_exported(item.def_id.def_id);\n \n         let context = CheckTyContext {\n             is_exported,\n@@ -535,7 +537,7 @@ impl Types {\n                     QPath::LangItem(..) => {},\n                 }\n             },\n-            TyKind::Rptr(ref lt, ref mut_ty) => {\n+            TyKind::Rptr(lt, ref mut_ty) => {\n                 context.is_nested_call = true;\n                 if !borrowed_box::check(cx, hir_ty, lt, mut_ty) {\n                     self.check_ty(cx, mut_ty.ty, context);"}, {"sha": "ecb67200539089276fd008fabd402e02c335ae2b", "filename": "clippy_lints/src/types/redundant_allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -3,9 +3,9 @@ use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::{path_def_id, qpath_generic_tys};\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, def_id::DefId, QPath, TyKind};\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;\n-use rustc_typeck::hir_ty_to_ty;\n \n use super::{utils, REDUNDANT_ALLOCATION};\n "}, {"sha": "6c329d8cdf196a9b4311f6c242b0fc5a1c153372", "filename": "clippy_lints/src/types/vec_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -4,11 +4,11 @@ use clippy_utils::source::snippet;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, def_id::DefId, GenericArg, QPath, TyKind};\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::LateContext;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::TypeVisitable;\n use rustc_span::symbol::sym;\n-use rustc_typeck::hir_ty_to_ty;\n \n use super::VEC_BOX;\n "}, {"sha": "ce9ebad8c89a85e98687ef486fc410dca262993f", "filename": "clippy_lints/src/unit_types/let_unit_value.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -19,10 +19,12 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, local: &'tcx Local<'_>) {\n         && cx.typeck_results().pat_ty(local.pat).is_unit()\n     {\n         if (local.ty.map_or(false, |ty| !matches!(ty.kind, TyKind::Infer))\n-            || matches!(local.pat.kind, PatKind::Tuple([], None)))\n+            || matches!(local.pat.kind, PatKind::Tuple([], ddpos) if ddpos.as_opt_usize().is_none()))\n             && expr_needs_inferred_result(cx, init)\n         {\n-            if !matches!(local.pat.kind, PatKind::Wild | PatKind::Tuple([], None)) {\n+            if !matches!(local.pat.kind, PatKind::Wild)\n+               && !matches!(local.pat.kind, PatKind::Tuple([], ddpos) if ddpos.as_opt_usize().is_none())\n+            {\n                 span_lint_and_then(\n                     cx,\n                     LET_UNIT_VALUE,"}, {"sha": "bf487c7ca20c89b833004962495f853e0c15ab4f", "filename": "clippy_lints/src/unused_async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_async.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -70,7 +70,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedAsync {\n     ) {\n         if !span.from_expansion() && fn_kind.asyncness() == IsAsync::Async {\n             let mut visitor = AsyncFnVisitor { cx, found_await: false };\n-            walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), span, hir_id);\n+            walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), hir_id);\n             if !visitor.found_await {\n                 span_lint_and_help(\n                     cx,"}, {"sha": "f1cebf0f9923da572c18738731724b88500f2411", "filename": "clippy_lints/src/unused_peekable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Funused_peekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Funused_peekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_peekable.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -39,7 +39,7 @@ declare_clippy_lint! {\n     /// ```\n     #[clippy::version = \"1.64.0\"]\n     pub UNUSED_PEEKABLE,\n-    suspicious,\n+    nursery,\n     \"creating a peekable iterator without using any of its methods\"\n }\n "}, {"sha": "713fe06bad436985d6a0d3cfc04a6aee97aaa620", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -54,14 +54,14 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n         if impl_item.span.from_expansion() {\n             return;\n         }\n-        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n         let parent_item = cx.tcx.hir().expect_item(parent);\n         let assoc_item = cx.tcx.associated_item(impl_item.def_id);\n         if_chain! {\n             if let ItemKind::Impl(Impl { of_trait: None, .. }) = parent_item.kind;\n             if assoc_item.fn_has_self_parameter;\n             if let ImplItemKind::Fn(.., body_id) = &impl_item.kind;\n-            if !cx.access_levels.is_exported(impl_item.def_id) || !self.avoid_breaking_exported_api;\n+            if !cx.access_levels.is_exported(impl_item.def_id.def_id) || !self.avoid_breaking_exported_api;\n             let body = cx.tcx.hir().body(*body_id);\n             if let [self_param, ..] = body.params;\n             if !is_local_used(cx, body, self_param.pat.hir_id);"}, {"sha": "ea878043c04e3b789e351f99796d55b590d242d3", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -323,6 +323,6 @@ impl<'tcx> LateLintPass<'tcx> for Unwrap {\n             unwrappables: Vec::new(),\n         };\n \n-        walk_fn(&mut v, kind, decl, body.id(), span, fn_id);\n+        walk_fn(&mut v, kind, decl, body.id(), fn_id);\n     }\n }"}, {"sha": "baa53ba664f6944becd037eb9ad6b92911dc2264", "filename": "clippy_lints/src/unwrap_in_result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap_in_result.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -111,7 +111,7 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_item: &'tc\n         let body = cx.tcx.hir().body(body_id);\n         let mut fpu = FindExpectUnwrap {\n             lcx: cx,\n-            typeck_results: cx.tcx.typeck(impl_item.def_id),\n+            typeck_results: cx.tcx.typeck(impl_item.def_id.def_id),\n             result: Vec::new(),\n         };\n         fpu.visit_expr(body.value);"}, {"sha": "2ab58f06d6b8d714f62d1c2cdd6b7ff151f097c7", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -105,7 +105,7 @@ impl LateLintPass<'_> for UpperCaseAcronyms {\n     fn check_item(&mut self, cx: &LateContext<'_>, it: &Item<'_>) {\n         // do not lint public items or in macros\n         if in_external_macro(cx.sess(), it.span)\n-            || (self.avoid_breaking_exported_api && cx.access_levels.is_exported(it.def_id))\n+            || (self.avoid_breaking_exported_api && cx.access_levels.is_exported(it.def_id.def_id))\n         {\n             return;\n         }"}, {"sha": "fadf49990acda7c4c7746263c00a38997da6168a", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -12,11 +12,11 @@ use rustc_hir::{\n     Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Pat, PatKind, Path, QPath,\n     TyKind,\n };\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n-use rustc_typeck::hir_ty_to_ty;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -106,7 +106,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if !is_from_proc_macro(cx, item); // expensive, should be last check\n             then {\n                 StackItem::Check {\n-                    impl_id: item.def_id,\n+                    impl_id: item.def_id.def_id,\n                     in_body: 0,\n                     types_to_skip: std::iter::once(self_ty.hir_id).collect(),\n                 }"}, {"sha": "e069de8cb5c7e5148cba5f9789f9e98809c20dde", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -140,7 +140,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n \n fn check_item(cx: &LateContext<'_>, hir_id: HirId) {\n     let hir = cx.tcx.hir();\n-    if let Some(body_id) = hir.maybe_body_owned_by(hir_id.expect_owner()) {\n+    if let Some(body_id) = hir.maybe_body_owned_by(hir_id.expect_owner().def_id) {\n         check_node(cx, hir_id, |v| {\n             v.expr(&v.bind(\"expr\", hir.body(body_id).value));\n         });"}, {"sha": "bc3f920a087aeeeb8b096fc1f48a1557903b5522", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -23,6 +23,7 @@ use rustc_hir::{\n     BinOpKind, Block, Closure, Expr, ExprKind, HirId, Item, Local, MutTy, Mutability, Node, Path, Stmt, StmtKind, Ty,\n     TyKind, UnOp,\n };\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::mir::interpret::ConstValue;\n@@ -32,7 +33,6 @@ use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::Symbol;\n use rustc_span::{sym, BytePos, Span};\n-use rustc_typeck::hir_ty_to_ty;\n \n use std::borrow::{Borrow, Cow};\n "}, {"sha": "301eed9a1fbfe72d995d687ed792358b45e4b6bf", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -120,14 +120,14 @@ impl LateLintPass<'_> for WildcardImports {\n         if is_test_module_or_function(cx.tcx, item) {\n             self.test_modules_deep = self.test_modules_deep.saturating_add(1);\n         }\n-        let module = cx.tcx.parent_module_from_def_id(item.def_id);\n-        if cx.tcx.visibility(item.def_id) != ty::Visibility::Restricted(module.to_def_id()) {\n+        let module = cx.tcx.parent_module_from_def_id(item.def_id.def_id);\n+        if cx.tcx.visibility(item.def_id.def_id) != ty::Visibility::Restricted(module.to_def_id()) {\n             return;\n         }\n         if_chain! {\n             if let ItemKind::Use(use_path, UseKind::Glob) = &item.kind;\n             if self.warn_on_all || !self.check_exceptions(item, use_path.segments);\n-            let used_imports = cx.tcx.names_imported_by_glob_use(item.def_id);\n+            let used_imports = cx.tcx.names_imported_by_glob_use(item.def_id.def_id);\n             if !used_imports.is_empty(); // Already handled by `unused_imports`\n             then {\n                 let mut applicability = Applicability::MachineApplicable;"}, {"sha": "6cf2a955fd5c638b4eba415bbc29e6a629d51cf0", "filename": "clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -2,12 +2,12 @@ use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::ty::{is_normalizable, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_hir::{self as hir, HirId, ItemKind, Node};\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::layout::LayoutOf as _;\n use rustc_middle::ty::{Adt, Ty, TypeVisitable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n-use rustc_typeck::hir_ty_to_ty;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -69,10 +69,7 @@ impl LateLintPass<'_> for ZeroSizedMapValues {\n \n fn in_trait_impl(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n     let parent_id = cx.tcx.hir().get_parent_item(hir_id);\n-    let second_parent_id = cx\n-        .tcx\n-        .hir()\n-        .get_parent_item(cx.tcx.hir().local_def_id_to_hir_id(parent_id));\n+    let second_parent_id = cx.tcx.hir().get_parent_item(parent_id.into()).def_id;\n     if let Some(Node::Item(item)) = cx.tcx.hir().find_by_def_id(second_parent_id) {\n         if let ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = item.kind {\n             return true;"}, {"sha": "83fee7bb39c22a60fa569b8079901f95db3d1fb0", "filename": "clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2FCargo.toml?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.65\"\n+version = \"0.1.66\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "fa6766f7cfe19ee1ca1c39d572f41e3145133b6b", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::{BinOp, BinOpKind, Block, Expr, ExprKind, HirId, Item, ItemKind,\n use rustc_lint::LateContext;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::Scalar;\n-use rustc_middle::ty::subst::{Subst, SubstsRef};\n+use rustc_middle::ty::SubstsRef;\n use rustc_middle::ty::{self, EarlyBinder, FloatTy, ScalarInt, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_span::symbol::Symbol;\n@@ -424,7 +424,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                     .tcx\n                     .const_eval_resolve(\n                         self.param_env,\n-                        ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs),\n+                        mir::UnevaluatedConst::new(ty::WithOptConstParam::unknown(def_id), substs),\n                         None,\n                     )\n                     .ok()"}, {"sha": "cf24ec8b67b9004dc7af3056b5d2cb36026dcd9e", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -929,7 +929,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         }\n     }\n \n-    pub fn hash_lifetime(&mut self, lifetime: Lifetime) {\n+    pub fn hash_lifetime(&mut self, lifetime: &Lifetime) {\n         std::mem::discriminant(&lifetime.name).hash(&mut self.s);\n         if let LifetimeName::Param(param_id, ref name) = lifetime.name {\n             std::mem::discriminant(name).hash(&mut self.s);\n@@ -962,7 +962,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n             TyKind::Rptr(lifetime, ref mut_ty) => {\n-                self.hash_lifetime(*lifetime);\n+                self.hash_lifetime(lifetime);\n                 self.hash_ty(mut_ty.ty);\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n@@ -987,11 +987,12 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 }\n             },\n             TyKind::Path(ref qpath) => self.hash_qpath(qpath),\n-            TyKind::OpaqueDef(_, arg_list) => {\n+            TyKind::OpaqueDef(_, arg_list, in_trait) => {\n                 self.hash_generic_args(arg_list);\n+                in_trait.hash(&mut self.s);\n             },\n             TyKind::TraitObject(_, lifetime, _) => {\n-                self.hash_lifetime(*lifetime);\n+                self.hash_lifetime(lifetime);\n             },\n             TyKind::Typeof(anon_const) => {\n                 self.hash_body(anon_const.body);"}, {"sha": "c2c52d08a3c127ed13626d00ac303a8da4171cd7", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,7 +1,6 @@\n #![feature(array_chunks)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n-#![feature(let_else)]\n #![feature(let_chains)]\n #![feature(lint_reasons)]\n #![feature(once_cell)]\n@@ -24,6 +23,7 @@ extern crate rustc_attr;\n extern crate rustc_data_structures;\n extern crate rustc_errors;\n extern crate rustc_hir;\n+extern crate rustc_hir_analysis;\n extern crate rustc_infer;\n extern crate rustc_lexer;\n extern crate rustc_lint;\n@@ -33,7 +33,6 @@ extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_target;\n extern crate rustc_trait_selection;\n-extern crate rustc_typeck;\n \n #[macro_use]\n pub mod sym_helper;\n@@ -78,7 +77,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_ID};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n use rustc_hir::hir_id::{HirIdMap, HirIdSet};\n use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n@@ -212,7 +211,7 @@ pub fn find_binding_init<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<\n /// }\n /// ```\n pub fn in_constant(cx: &LateContext<'_>, id: HirId) -> bool {\n-    let parent_id = cx.tcx.hir().get_parent_item(id);\n+    let parent_id = cx.tcx.hir().get_parent_item(id).def_id;\n     match cx.tcx.hir().get_by_def_id(parent_id) {\n         Node::Item(&Item {\n             kind: ItemKind::Const(..) | ItemKind::Static(..),\n@@ -597,8 +596,8 @@ pub fn trait_ref_of_method<'tcx>(cx: &LateContext<'tcx>, def_id: LocalDefId) ->\n     let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n     let parent_impl = cx.tcx.hir().get_parent_item(hir_id);\n     if_chain! {\n-        if parent_impl != CRATE_DEF_ID;\n-        if let hir::Node::Item(item) = cx.tcx.hir().get_by_def_id(parent_impl);\n+        if parent_impl != hir::CRATE_OWNER_ID;\n+        if let hir::Node::Item(item) = cx.tcx.hir().get_by_def_id(parent_impl.def_id);\n         if let hir::ItemKind::Impl(impl_) = &item.kind;\n         then {\n             return impl_.of_trait.as_ref();\n@@ -1104,7 +1103,7 @@ pub fn is_in_panic_handler(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n \n /// Gets the name of the item the expression is in, if available.\n pub fn get_item_name(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<Symbol> {\n-    let parent_id = cx.tcx.hir().get_parent_item(expr.hir_id);\n+    let parent_id = cx.tcx.hir().get_parent_item(expr.hir_id).def_id;\n     match cx.tcx.hir().find_by_def_id(parent_id) {\n         Some(\n             Node::Item(Item { ident, .. })\n@@ -1121,7 +1120,7 @@ pub struct ContainsName {\n }\n \n impl<'tcx> Visitor<'tcx> for ContainsName {\n-    fn visit_name(&mut self, _: Span, name: Symbol) {\n+    fn visit_name(&mut self, name: Symbol) {\n         if self.name == name {\n             self.result = true;\n         }\n@@ -1387,8 +1386,8 @@ pub fn is_integer_literal(expr: &Expr<'_>, value: u128) -> bool {\n /// Examples of coercions can be found in the Nomicon at\n /// <https://doc.rust-lang.org/nomicon/coercions.html>.\n ///\n-/// See `rustc_middle::ty::adjustment::Adjustment` and `rustc_typeck::check::coercion` for more\n-/// information on adjustments and coercions.\n+/// See `rustc_middle::ty::adjustment::Adjustment` and `rustc_hir_analysis::check::coercion` for\n+/// more information on adjustments and coercions.\n pub fn is_adjusted(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n     cx.typeck_results().adjustments().get(e.hir_id).is_some()\n }\n@@ -1552,7 +1551,8 @@ pub fn iter_input_pats<'tcx>(decl: &FnDecl<'_>, body: &'tcx Body<'_>) -> impl It\n pub fn is_try<'tcx>(cx: &LateContext<'_>, expr: &'tcx Expr<'tcx>) -> Option<&'tcx Expr<'tcx>> {\n     fn is_ok(cx: &LateContext<'_>, arm: &Arm<'_>) -> bool {\n         if_chain! {\n-            if let PatKind::TupleStruct(ref path, pat, None) = arm.pat.kind;\n+            if let PatKind::TupleStruct(ref path, pat, ddpos) = arm.pat.kind;\n+            if ddpos.as_opt_usize().is_none();\n             if is_lang_ctor(cx, path, ResultOk);\n             if let PatKind::Binding(_, hir_id, _, None) = pat[0].kind;\n             if path_to_local_id(arm.body, hir_id);\n@@ -1647,7 +1647,7 @@ pub fn any_parent_has_attr(tcx: TyCtxt<'_>, node: HirId, symbol: Symbol) -> bool\n             return true;\n         }\n         prev_enclosing_node = Some(enclosing_node);\n-        enclosing_node = map.local_def_id_to_hir_id(map.get_parent_item(enclosing_node));\n+        enclosing_node = map.get_parent_item(enclosing_node).into();\n     }\n \n     false"}, {"sha": "07170e2df12ab2be340c0d5affdc5d4a88641a66", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -66,8 +66,6 @@ pub const INDEX_MUT: [&str; 3] = [\"core\", \"ops\", \"IndexMut\"];\n pub const INSERT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"insert_str\"];\n pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n-pub const IPADDR_V4: [&str; 5] = [\"std\", \"net\", \"ip\", \"IpAddr\", \"V4\"];\n-pub const IPADDR_V6: [&str; 5] = [\"std\", \"net\", \"ip\", \"IpAddr\", \"V6\"];\n pub const ITER_COUNT: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"count\"];\n pub const ITER_EMPTY: [&str; 5] = [\"core\", \"iter\", \"sources\", \"empty\", \"Empty\"];\n pub const ITER_REPEAT: [&str; 5] = [\"core\", \"iter\", \"sources\", \"repeat\", \"repeat\"];"}, {"sha": "5a0721486e33f2531ee3e7ac50b28f2ac038de90", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -82,7 +82,7 @@ fn check_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) -> McfResult {\n             ty::FnPtr(..) => {\n                 return Err((span, \"function pointers in const fn are unstable\".into()));\n             },\n-            ty::Dynamic(preds, _) => {\n+            ty::Dynamic(preds, _, _) => {\n                 for pred in preds.iter() {\n                     match pred.skip_binder() {\n                         ty::ExistentialPredicate::AutoTrait(_) | ty::ExistentialPredicate::Projection(_) => {\n@@ -161,6 +161,10 @@ fn check_rvalue<'tcx>(\n         Rvalue::Cast(CastKind::PointerExposeAddress, _, _) => {\n             Err((span, \"casting pointers to ints is unstable in const fn\".into()))\n         },\n+        Rvalue::Cast(CastKind::DynStar, _, _) => {\n+            // FIXME(dyn-star)\n+            unimplemented!()\n+        },\n         // binops are fine on integers\n         Rvalue::BinaryOp(_, box (lhs, rhs)) | Rvalue::CheckedBinaryOp(_, box (lhs, rhs)) => {\n             check_operand(tcx, lhs, span, body)?;\n@@ -221,7 +225,6 @@ fn check_statement<'tcx>(\n             check_operand(tcx, src, span, body)?;\n             check_operand(tcx, count, span, body)\n         },\n-\n         // These are all NOPs\n         StatementKind::StorageLive(_)\n         | StatementKind::StorageDead(_)\n@@ -257,6 +260,7 @@ fn check_place<'tcx>(tcx: TyCtxt<'tcx>, place: Place<'tcx>, span: Span, body: &B\n                 }\n             },\n             ProjectionElem::ConstantIndex { .. }\n+            | ProjectionElem::OpaqueCast(..)\n             | ProjectionElem::Downcast(..)\n             | ProjectionElem::Subslice { .. }\n             | ProjectionElem::Deref\n@@ -362,10 +366,23 @@ fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<RustcVersion>) -> bo\n                 // Checking MSRV is manually necessary because `rustc` has no such concept. This entire\n                 // function could be removed if `rustc` provided a MSRV-aware version of `is_const_fn`.\n                 // as a part of an unimplemented MSRV check https://github.com/rust-lang/rust/issues/65262.\n+\n+                // HACK(nilstrieb): CURRENT_RUSTC_VERSION can return versions like 1.66.0-dev. `rustc-semver`\n+                // doesn't accept                  the `-dev` version number so we have to strip it\n+                // off.\n+                let short_version = since\n+                    .as_str()\n+                    .split('-')\n+                    .next()\n+                    .expect(\"rustc_attr::StabilityLevel::Stable::since` is empty\");\n+\n+                let since = rustc_span::Symbol::intern(short_version);\n+\n                 crate::meets_msrv(\n                     msrv,\n-                    RustcVersion::parse(since.as_str())\n-                        .expect(\"`rustc_attr::StabilityLevel::Stable::since` is ill-formatted\"),\n+                    RustcVersion::parse(since.as_str()).unwrap_or_else(|err| {\n+                        panic!(\"`rustc_attr::StabilityLevel::Stable::since` is ill-formatted: `{since}`, {err:?}\")\n+                    }),\n                 )\n             } else {\n                 // Unstable const fn with the feature enabled."}, {"sha": "ef836e84829bf1944e9c6052c7f6522660f6e253", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -10,13 +10,13 @@ use rustc_ast_pretty::pprust::token_kind_to_string;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::{Closure, ExprKind, HirId, MutTy, TyKind};\n+use rustc_hir_analysis::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{EarlyContext, LateContext, LintContext};\n use rustc_middle::hir::place::ProjectionKind;\n use rustc_middle::mir::{FakeReadCause, Mutability};\n use rustc_middle::ty;\n use rustc_span::source_map::{BytePos, CharPos, Pos, Span, SyntaxContext};\n-use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use std::borrow::Cow;\n use std::fmt::{Display, Write as _};\n use std::ops::{Add, Neg, Not, Sub};\n@@ -1054,7 +1054,13 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n \n     fn mutate(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n-    fn fake_read(&mut self, _: &rustc_typeck::expr_use_visitor::PlaceWithHirId<'tcx>, _: FakeReadCause, _: HirId) {}\n+    fn fake_read(\n+        &mut self,\n+        _: &rustc_hir_analysis::expr_use_visitor::PlaceWithHirId<'tcx>,\n+        _: FakeReadCause,\n+        _: HirId,\n+    ) {\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "934470bd135bf18f8a1d4983b32374d13e8ffb8f", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -12,11 +12,11 @@ use rustc_hir::{Expr, FnDecl, LangItem, TyKind, Unsafety};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n-use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc_middle::ty::{\n     self, AdtDef, Binder, BoundRegion, DefIdTree, FnSig, IntTy, ParamEnv, Predicate, PredicateKind, ProjectionTy,\n     Region, RegionKind, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor, UintTy, VariantDef, VariantDiscr,\n };\n+use rustc_middle::ty::{GenericArg, GenericArgKind};\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n use rustc_target::abi::{Size, VariantIdx};\n@@ -208,7 +208,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n             }\n             false\n         },\n-        ty::Dynamic(binder, _) => {\n+        ty::Dynamic(binder, _, _) => {\n             for predicate in binder.iter() {\n                 if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate.skip_binder() {\n                     if cx.tcx.has_attr(trait_ref.def_id, sym::must_use) {\n@@ -586,7 +586,7 @@ pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'t\n         ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs), Some(id))),\n         ty::Opaque(id, _) => sig_from_bounds(cx, ty, cx.tcx.item_bounds(id), cx.tcx.opt_parent(id)),\n         ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig, None)),\n-        ty::Dynamic(bounds, _) => {\n+        ty::Dynamic(bounds, _, _) => {\n             let lang_items = cx.tcx.lang_items();\n             match bounds.principal() {\n                 Some(bound)"}, {"sha": "3221b82aed4196d3f1cf8ab7e75297b30bf278ee", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -4,12 +4,12 @@ use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::HirIdSet;\n use rustc_hir::{Expr, ExprKind, HirId, Node};\n+use rustc_hir_analysis::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty;\n-use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n /// Returns a set of mutated local variable IDs, or `None` if mutations could not be determined.\n pub fn mutated_variables<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) -> Option<HirIdSet> {\n@@ -21,7 +21,7 @@ pub fn mutated_variables<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) ->\n         ExprUseVisitor::new(\n             &mut delegate,\n             &infcx,\n-            expr.hir_id.owner,\n+            expr.hir_id.owner.def_id,\n             cx.param_env,\n             cx.typeck_results(),\n         )\n@@ -73,7 +73,13 @@ impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n         self.update(cmt);\n     }\n \n-    fn fake_read(&mut self, _: &rustc_typeck::expr_use_visitor::PlaceWithHirId<'tcx>, _: FakeReadCause, _: HirId) {}\n+    fn fake_read(\n+        &mut self,\n+        _: &rustc_hir_analysis::expr_use_visitor::PlaceWithHirId<'tcx>,\n+        _: FakeReadCause,\n+        _: HirId,\n+    ) {\n+    }\n }\n \n pub struct ParamBindingIdCollector {"}, {"sha": "423d6425e1048090a2fb64fb4c7063afb7485432", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-09-08\"\n+channel = \"nightly-2022-09-29\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "f9eff21b67935d8477a1203db65260e83f209140", "filename": "src/docs/similar_names.txt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/src%2Fdocs%2Fsimilar_names.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/src%2Fdocs%2Fsimilar_names.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs%2Fsimilar_names.txt?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,6 +1,10 @@\n ### What it does\n Checks for names that are very similar and thus confusing.\n \n+Note: this lint looks for similar names throughout each\n+scope. To allow it, you need to allow it on the scope\n+level, not on the name that is reported.\n+\n ### Why is this bad?\n It's hard to distinguish between names that differ only\n by a single character."}, {"sha": "b2dc2248b55626c2c0cd5461f2519a987af396a3", "filename": "tests/ui/crashes/ice-7126.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Fcrashes%2Fice-7126.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Fcrashes%2Fice-7126.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-7126.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,13 +1,13 @@\n // This test requires a feature gated const fn and will stop working in the future.\n \n-#![feature(const_btree_new)]\n+#![feature(const_btree_len)]\n \n use std::collections::BTreeMap;\n \n-struct Foo(BTreeMap<i32, i32>);\n+struct Foo(usize);\n impl Foo {\n     fn new() -> Self {\n-        Self(BTreeMap::new())\n+        Self(BTreeMap::len(&BTreeMap::<u8, u8>::new()))\n     }\n }\n "}, {"sha": "1c0490ffa44ccbbf8096ac7d360e5f5017caa1c6", "filename": "tests/ui/inefficient_to_string.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Finefficient_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Finefficient_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finefficient_to_string.stderr?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -35,21 +35,21 @@ LL |     let _: String = rrrstring.to_string();\n    |\n    = help: `&&std::string::String` implements `ToString` through a slower blanket impl, but `std::string::String` has a fast specialization of `ToString`\n \n-error: calling `to_string` on `&&std::borrow::Cow<str>`\n+error: calling `to_string` on `&&std::borrow::Cow<'_, str>`\n   --> $DIR/inefficient_to_string.rs:29:21\n    |\n LL |     let _: String = rrcow.to_string();\n    |                     ^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*rrcow).to_string()`\n    |\n-   = help: `&std::borrow::Cow<str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<str>` has a fast specialization of `ToString`\n+   = help: `&std::borrow::Cow<'_, str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<'_, str>` has a fast specialization of `ToString`\n \n-error: calling `to_string` on `&&&std::borrow::Cow<str>`\n+error: calling `to_string` on `&&&std::borrow::Cow<'_, str>`\n   --> $DIR/inefficient_to_string.rs:30:21\n    |\n LL |     let _: String = rrrcow.to_string();\n    |                     ^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(**rrrcow).to_string()`\n    |\n-   = help: `&&std::borrow::Cow<str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<str>` has a fast specialization of `ToString`\n+   = help: `&&std::borrow::Cow<'_, str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<'_, str>` has a fast specialization of `ToString`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "709972b4a6e49e397acdb442e34cbb6d139e4756", "filename": "tests/ui/large_enum_variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Flarge_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Flarge_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.stderr?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -24,7 +24,7 @@ LL | |     VariantOk(i32, u32),\n LL | |     ContainingLargeEnum(LargeEnum),\n    | |     ------------------------------ the largest variant contains at least 32004 bytes\n LL | | }\n-   | |_^ the entire enum is at least 32008 bytes\n+   | |_^ the entire enum is at least 32004 bytes\n    |\n help: consider boxing the large fields to reduce the total size of the enum\n    |"}, {"sha": "d2163b14fcadca01e1c205a3ce89a94f7a865fde", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n \n #![feature(lint_reasons)]\n-#![feature(let_else)]\n #![allow(unused)]\n #![allow(\n     clippy::if_same_then_else,"}, {"sha": "114414b5fac76b7d522ac6e246293e2ccb78533b", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n \n #![feature(lint_reasons)]\n-#![feature(let_else)]\n #![allow(unused)]\n #![allow(\n     clippy::if_same_then_else,"}, {"sha": "047fb6c2311a2153e6db1cc8c69df5867d485782", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,5 +1,5 @@\n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:27:5\n+  --> $DIR/needless_return.rs:26:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^\n@@ -8,343 +8,343 @@ LL |     return true;\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:31:5\n+  --> $DIR/needless_return.rs:30:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:36:9\n+  --> $DIR/needless_return.rs:35:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:38:9\n+  --> $DIR/needless_return.rs:37:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:44:17\n+  --> $DIR/needless_return.rs:43:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:46:13\n+  --> $DIR/needless_return.rs:45:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:53:9\n+  --> $DIR/needless_return.rs:52:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:55:16\n+  --> $DIR/needless_return.rs:54:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:59:5\n+  --> $DIR/needless_return.rs:58:5\n    |\n LL |     return the_answer!();\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:63:5\n+  --> $DIR/needless_return.rs:62:5\n    |\n LL |     return;\n    |     ^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:68:9\n+  --> $DIR/needless_return.rs:67:9\n    |\n LL |         return;\n    |         ^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:70:9\n+  --> $DIR/needless_return.rs:69:9\n    |\n LL |         return;\n    |         ^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:77:14\n+  --> $DIR/needless_return.rs:76:14\n    |\n LL |         _ => return,\n    |              ^^^^^^\n    |\n    = help: replace `return` with a unit value\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:86:13\n+  --> $DIR/needless_return.rs:85:13\n    |\n LL |             return;\n    |             ^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:88:14\n+  --> $DIR/needless_return.rs:87:14\n    |\n LL |         _ => return,\n    |              ^^^^^^\n    |\n    = help: replace `return` with a unit value\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:101:9\n+  --> $DIR/needless_return.rs:100:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:103:9\n+  --> $DIR/needless_return.rs:102:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:125:32\n+  --> $DIR/needless_return.rs:124:32\n    |\n LL |         bar.unwrap_or_else(|_| return)\n    |                                ^^^^^^\n    |\n    = help: replace `return` with an empty block\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:130:13\n+  --> $DIR/needless_return.rs:129:13\n    |\n LL |             return;\n    |             ^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:132:20\n+  --> $DIR/needless_return.rs:131:20\n    |\n LL |         let _ = || return;\n    |                    ^^^^^^\n    |\n    = help: replace `return` with an empty block\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:138:32\n+  --> $DIR/needless_return.rs:137:32\n    |\n LL |         res.unwrap_or_else(|_| return Foo)\n    |                                ^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:147:5\n+  --> $DIR/needless_return.rs:146:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:151:5\n+  --> $DIR/needless_return.rs:150:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:156:9\n+  --> $DIR/needless_return.rs:155:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:158:9\n+  --> $DIR/needless_return.rs:157:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:164:17\n+  --> $DIR/needless_return.rs:163:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:166:13\n+  --> $DIR/needless_return.rs:165:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:173:9\n+  --> $DIR/needless_return.rs:172:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:175:16\n+  --> $DIR/needless_return.rs:174:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:179:5\n+  --> $DIR/needless_return.rs:178:5\n    |\n LL |     return the_answer!();\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:183:5\n+  --> $DIR/needless_return.rs:182:5\n    |\n LL |     return;\n    |     ^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:188:9\n+  --> $DIR/needless_return.rs:187:9\n    |\n LL |         return;\n    |         ^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:190:9\n+  --> $DIR/needless_return.rs:189:9\n    |\n LL |         return;\n    |         ^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:197:14\n+  --> $DIR/needless_return.rs:196:14\n    |\n LL |         _ => return,\n    |              ^^^^^^\n    |\n    = help: replace `return` with a unit value\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:210:9\n+  --> $DIR/needless_return.rs:209:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:212:9\n+  --> $DIR/needless_return.rs:211:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:228:5\n+  --> $DIR/needless_return.rs:227:5\n    |\n LL |     return format!(\"Hello {}\", \"world!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:239:9\n+  --> $DIR/needless_return.rs:238:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:241:9\n+  --> $DIR/needless_return.rs:240:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:248:13\n+  --> $DIR/needless_return.rs:247:13\n    |\n LL |             return 10;\n    |             ^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:251:13\n+  --> $DIR/needless_return.rs:250:13\n    |\n LL |             return 100;\n    |             ^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:259:9\n+  --> $DIR/needless_return.rs:258:9\n    |\n LL |         return 0;\n    |         ^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:266:13\n+  --> $DIR/needless_return.rs:265:13\n    |\n LL |             return *(x as *const isize);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:268:13\n+  --> $DIR/needless_return.rs:267:13\n    |\n LL |             return !*(x as *const isize);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "3dbef19890e9ce14e5db4b57ab2aa1bc449eb33a", "filename": "tests/ui/never_loop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,4 +1,3 @@\n-#![feature(let_else)]\n #![allow(\n     clippy::single_match,\n     unused_assignments,"}, {"sha": "3033f019244a8409befc6706f4887f2b9a99f48e", "filename": "tests/ui/never_loop.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Fnever_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Fnever_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.stderr?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,5 +1,5 @@\n error: this loop never actually loops\n-  --> $DIR/never_loop.rs:11:5\n+  --> $DIR/never_loop.rs:10:5\n    |\n LL | /     loop {\n LL | |         // clippy::never_loop\n@@ -13,7 +13,7 @@ LL | |     }\n    = note: `#[deny(clippy::never_loop)]` on by default\n \n error: this loop never actually loops\n-  --> $DIR/never_loop.rs:33:5\n+  --> $DIR/never_loop.rs:32:5\n    |\n LL | /     loop {\n LL | |         // never loops\n@@ -23,7 +23,7 @@ LL | |     }\n    | |_____^\n \n error: this loop never actually loops\n-  --> $DIR/never_loop.rs:53:5\n+  --> $DIR/never_loop.rs:52:5\n    |\n LL | /     loop {\n LL | |         // never loops\n@@ -35,7 +35,7 @@ LL | |     }\n    | |_____^\n \n error: this loop never actually loops\n-  --> $DIR/never_loop.rs:55:9\n+  --> $DIR/never_loop.rs:54:9\n    |\n LL | /         while i == 0 {\n LL | |             // never loops\n@@ -44,7 +44,7 @@ LL | |         }\n    | |_________^\n \n error: this loop never actually loops\n-  --> $DIR/never_loop.rs:67:9\n+  --> $DIR/never_loop.rs:66:9\n    |\n LL | /         loop {\n LL | |             // never loops\n@@ -56,7 +56,7 @@ LL | |         }\n    | |_________^\n \n error: this loop never actually loops\n-  --> $DIR/never_loop.rs:103:5\n+  --> $DIR/never_loop.rs:102:5\n    |\n LL | /     while let Some(y) = x {\n LL | |         // never loops\n@@ -65,7 +65,7 @@ LL | |     }\n    | |_____^\n \n error: this loop never actually loops\n-  --> $DIR/never_loop.rs:110:5\n+  --> $DIR/never_loop.rs:109:5\n    |\n LL | /     for x in 0..10 {\n LL | |         // never loops\n@@ -82,7 +82,7 @@ LL |     if let Some(x) = (0..10).next() {\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: this loop never actually loops\n-  --> $DIR/never_loop.rs:158:5\n+  --> $DIR/never_loop.rs:157:5\n    |\n LL | /     'outer: while a {\n LL | |         // never loops\n@@ -94,15 +94,15 @@ LL | |     }\n    | |_____^\n \n error: this loop never actually loops\n-  --> $DIR/never_loop.rs:173:9\n+  --> $DIR/never_loop.rs:172:9\n    |\n LL | /         while false {\n LL | |             break 'label;\n LL | |         }\n    | |_________^\n \n error: this loop never actually loops\n-  --> $DIR/never_loop.rs:224:13\n+  --> $DIR/never_loop.rs:223:13\n    |\n LL |       let _ = loop {\n    |  _____________^"}, {"sha": "c4dfbd9210e0d6e727ccb418962b717c6004f41e", "filename": "tests/ui/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,6 +1,5 @@\n #![warn(clippy::semicolon_if_nothing_returned)]\n #![allow(clippy::redundant_closure)]\n-#![feature(let_else)]\n \n fn get_unit() {}\n "}, {"sha": "8d9a67585cf12fb6141b92546a8e690aefe4c1a8", "filename": "tests/ui/semicolon_if_nothing_returned.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,31 +1,31 @@\n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:9:5\n+  --> $DIR/semicolon_if_nothing_returned.rs:8:5\n    |\n LL |     println!(\"Hello\")\n    |     ^^^^^^^^^^^^^^^^^ help: add a `;` here: `println!(\"Hello\");`\n    |\n    = note: `-D clippy::semicolon-if-nothing-returned` implied by `-D warnings`\n \n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:13:5\n+  --> $DIR/semicolon_if_nothing_returned.rs:12:5\n    |\n LL |     get_unit()\n    |     ^^^^^^^^^^ help: add a `;` here: `get_unit();`\n \n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:18:5\n+  --> $DIR/semicolon_if_nothing_returned.rs:17:5\n    |\n LL |     y = x + 1\n    |     ^^^^^^^^^ help: add a `;` here: `y = x + 1;`\n \n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:24:9\n+  --> $DIR/semicolon_if_nothing_returned.rs:23:9\n    |\n LL |         hello()\n    |         ^^^^^^^ help: add a `;` here: `hello();`\n \n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:35:9\n+  --> $DIR/semicolon_if_nothing_returned.rs:34:9\n    |\n LL |         ptr::drop_in_place(s.as_mut_ptr())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add a `;` here: `ptr::drop_in_place(s.as_mut_ptr());`"}, {"sha": "ae1aec34d82e0b3ccb19e9d8a1050fb87c9336d4", "filename": "tests/ui/suspicious_to_owned.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Fsuspicious_to_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Fsuspicious_to_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_to_owned.stderr?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -1,24 +1,24 @@\n-error: this `to_owned` call clones the std::borrow::Cow<str> itself and does not cause the std::borrow::Cow<str> contents to become owned\n+error: this `to_owned` call clones the std::borrow::Cow<'_, str> itself and does not cause the std::borrow::Cow<'_, str> contents to become owned\n   --> $DIR/suspicious_to_owned.rs:16:13\n    |\n LL |     let _ = cow.to_owned();\n    |             ^^^^^^^^^^^^^^ help: consider using, depending on intent: `cow.clone()` or `cow.into_owned()`\n    |\n    = note: `-D clippy::suspicious-to-owned` implied by `-D warnings`\n \n-error: this `to_owned` call clones the std::borrow::Cow<[char; 3]> itself and does not cause the std::borrow::Cow<[char; 3]> contents to become owned\n+error: this `to_owned` call clones the std::borrow::Cow<'_, [char; 3]> itself and does not cause the std::borrow::Cow<'_, [char; 3]> contents to become owned\n   --> $DIR/suspicious_to_owned.rs:26:13\n    |\n LL |     let _ = cow.to_owned();\n    |             ^^^^^^^^^^^^^^ help: consider using, depending on intent: `cow.clone()` or `cow.into_owned()`\n \n-error: this `to_owned` call clones the std::borrow::Cow<std::vec::Vec<char>> itself and does not cause the std::borrow::Cow<std::vec::Vec<char>> contents to become owned\n+error: this `to_owned` call clones the std::borrow::Cow<'_, std::vec::Vec<char>> itself and does not cause the std::borrow::Cow<'_, std::vec::Vec<char>> contents to become owned\n   --> $DIR/suspicious_to_owned.rs:36:13\n    |\n LL |     let _ = cow.to_owned();\n    |             ^^^^^^^^^^^^^^ help: consider using, depending on intent: `cow.clone()` or `cow.into_owned()`\n \n-error: this `to_owned` call clones the std::borrow::Cow<str> itself and does not cause the std::borrow::Cow<str> contents to become owned\n+error: this `to_owned` call clones the std::borrow::Cow<'_, str> itself and does not cause the std::borrow::Cow<'_, str> contents to become owned\n   --> $DIR/suspicious_to_owned.rs:46:13\n    |\n LL |     let _ = cow.to_owned();"}, {"sha": "10117ee9182ab97d97e9bb13e5cee991a399980f", "filename": "tests/ui/transmute_ptr_to_ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Ftransmute_ptr_to_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Ftransmute_ptr_to_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ref.stderr?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -42,13 +42,13 @@ error: transmute from a pointer type (`*mut U`) to a reference type (`&T`)\n LL |     let _: &T = std::mem::transmute(om);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(om as *const T)`\n \n-error: transmute from a pointer type (`*const i32`) to a reference type (`&_issue1231::Foo<u8>`)\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&_issue1231::Foo<'_, u8>`)\n   --> $DIR/transmute_ptr_to_ref.rs:36:32\n    |\n LL |     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*raw.cast::<Foo<_>>()`\n \n-error: transmute from a pointer type (`*const i32`) to a reference type (`&_issue1231::Foo<&u8>`)\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&_issue1231::Foo<'_, &u8>`)\n   --> $DIR/transmute_ptr_to_ref.rs:38:33\n    |\n LL |     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };"}, {"sha": "7263abac15dfb96978597c5af32f24a4fb12ad25", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -8,7 +8,7 @@\n \n use std::mem::{size_of, transmute};\n \n-// rustc_typeck::check::cast contains documentation about when a cast `e as U` is\n+// rustc_hir_analysis::check::cast contains documentation about when a cast `e as U` is\n // valid, which we quote from below.\n fn main() {\n     // We should see an error message for each transmute, and no error messages for"}, {"sha": "d8e4421d4c18e2a3743100bc15e037d3b8525e24", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -8,7 +8,7 @@\n \n use std::mem::{size_of, transmute};\n \n-// rustc_typeck::check::cast contains documentation about when a cast `e as U` is\n+// rustc_hir_analysis::check::cast contains documentation about when a cast `e as U` is\n // valid, which we quote from below.\n fn main() {\n     // We should see an error message for each transmute, and no error messages for"}, {"sha": "65ee3807fa9d9b19456730995dec508d1661211c", "filename": "tests/ui/useless_conversion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Fuseless_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e43f5a17d4d9263616ae6fc28a7c5353e80d8a12/tests%2Fui%2Fuseless_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.stderr?ref=e43f5a17d4d9263616ae6fc28a7c5353e80d8a12", "patch": "@@ -46,7 +46,7 @@ error: useless conversion to the same type: `std::string::String`\n LL |     let _ = String::from(format!(\"A: {:04}\", 123));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `format!(\"A: {:04}\", 123)`\n \n-error: useless conversion to the same type: `std::str::Lines`\n+error: useless conversion to the same type: `std::str::Lines<'_>`\n   --> $DIR/useless_conversion.rs:65:13\n    |\n LL |     let _ = \"\".lines().into_iter();"}]}