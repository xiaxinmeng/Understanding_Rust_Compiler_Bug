{"sha": "868e3f9180f99ce2d26c84277a644514048d309b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2OGUzZjkxODBmOTljZTJkMjZjODQyNzdhNjQ0NTE0MDQ4ZDMwOWI=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-05T23:33:21Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-06T00:33:30Z"}, "message": "Don't try to keep locals off of the stack. Closes #2408.\n\nThere were bugs in the code path for initialization of non-spilled\nlocals, the code-path is hit approximately never, and mem2reg can do\nit for us.\nI think this will let us kill spill_map.", "tree": {"sha": "8fc83a8c5608768d9bf6227d2371fba6ed445e56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fc83a8c5608768d9bf6227d2371fba6ed445e56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/868e3f9180f99ce2d26c84277a644514048d309b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/868e3f9180f99ce2d26c84277a644514048d309b", "html_url": "https://github.com/rust-lang/rust/commit/868e3f9180f99ce2d26c84277a644514048d309b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/868e3f9180f99ce2d26c84277a644514048d309b/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9cdddeb5f80b11763b6f95fd7eecdef705ed12d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9cdddeb5f80b11763b6f95fd7eecdef705ed12d", "html_url": "https://github.com/rust-lang/rust/commit/d9cdddeb5f80b11763b6f95fd7eecdef705ed12d"}], "stats": {"total": 34, "additions": 3, "deletions": 31}, "files": [{"sha": "76a1777ab01f71312803fd2ec1e308883e902fba", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/868e3f9180f99ce2d26c84277a644514048d309b/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/868e3f9180f99ce2d26c84277a644514048d309b/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=868e3f9180f99ce2d26c84277a644514048d309b", "patch": "@@ -3749,6 +3749,8 @@ fn lval_to_dps(bcx: block, e: @ast::expr, dest: dest) -> block {\n     let ty = expr_ty(bcx, e);\n     let lv = trans_lval(bcx, e);\n     let last_use = (lv.kind == owned && last_use_map.contains_key(e.id));\n+    #debug[\"is last use (%s) = %b, %d\", expr_to_str(e), last_use,\n+           lv.kind as int];\n     lval_result_to_dps(lv, ty, last_use, dest)\n }\n \n@@ -4039,29 +4041,10 @@ fn init_local(bcx: block, local: @ast::local) -> block {\n     let ty = node_id_type(bcx, local.node.id);\n     let llptr = alt bcx.fcx.lllocals.find(local.node.id) {\n       some(local_mem(v)) { v }\n-      some(_) { bcx.tcx().sess.span_bug(local.span,\n+      _ { bcx.tcx().sess.span_bug(local.span,\n                         \"init_local: Someone forgot to document why it's\\\n                          safe to assume local.node.init must be local_mem!\");\n-      }\n-      // This is a local that is kept immediate\n-      none {\n-        let initexpr = alt local.node.init {\n-                some({expr, _}) { expr }\n-                none { bcx.tcx().sess.span_bug(local.span,\n-                        \"init_local: late-initialized var appears to \\\n-                 be an immediate -- possibly init_local was called \\\n-                 without calling alloc_local\"); }\n-            };\n-        let mut {bcx, val, kind} = trans_temp_lval(bcx, initexpr);\n-        if kind != temporary {\n-            if kind == owned { val = Load(bcx, val); }\n-            let rs = take_ty_immediate(bcx, val, ty);\n-            bcx = rs.bcx; val = rs.val;\n-            add_clean_temp(bcx, val, ty);\n         }\n-        bcx.fcx.lllocals.insert(local.node.pat.id, local_imm(val));\n-        ret bcx;\n-      }\n     };\n \n     let mut bcx = bcx;\n@@ -4341,17 +4324,6 @@ fn alloc_local(cx: block, local: @ast::local) -> block {\n       ast::pat_ident(pth, none) { some(path_to_ident(pth)) }\n       _ { none }\n     };\n-    // Do not allocate space for locals that can be kept immediate.\n-    let ccx = cx.ccx();\n-    if option::is_some(simple_name) &&\n-       !ccx.maps.mutbl_map.contains_key(local.node.pat.id) &&\n-       !ccx.maps.spill_map.contains_key(local.node.pat.id) &&\n-       ty::type_is_immediate(t) {\n-        alt local.node.init {\n-          some({op: ast::init_assign, _}) { ret cx; }\n-          _ {}\n-        }\n-    }\n     let val = alloc_ty(cx, t);\n     if cx.sess().opts.debuginfo {\n         option::iter(simple_name) {|name|"}]}