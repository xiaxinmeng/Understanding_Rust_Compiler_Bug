{"sha": "8e51bd4315bad8456c6cabbfc338be97c17f3700", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNTFiZDQzMTViYWQ4NDU2YzZjYWJiZmMzMzhiZTk3YzE3ZjM3MDA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-23T01:51:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-23T01:51:44Z"}, "message": "Rollup merge of #81235 - reese:rw-tuple-diagnostics, r=estebank\n\nImprove suggestion for tuple struct pattern matching errors.\n\nCloses #80174\n\nThis change allows numbers to be parsed as field names when pattern matching on structs, which allows us to provide better error messages when tuple structs are matched using a struct pattern.\n\nr? ``@estebank``", "tree": {"sha": "9ab4c7c343fb46f4b8c6e6cd8ef4ddab138dc806", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ab4c7c343fb46f4b8c6e6cd8ef4ddab138dc806"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e51bd4315bad8456c6cabbfc338be97c17f3700", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgNF+xCRBK7hj4Ov3rIwAAdHIIAHDV+OoJynM6x5BtM9/kbTSj\nr+N9Wm25xVz5hSEfPEzhiBGKvkgupBnQZniRAX/1BHpj2PBZtGKa4HgMn9NsyRmH\nETlmKSeWThorE3zOo0UyODI0U39Qi5Y6B+EyvqfFtiKt35r8S2irApMI8/TfgHiT\nwxoTJon+B4b3WLMjgqyvJEGI0YmTW0A9WR7zHI7yVOIEoQu25/EqHoT1nKGc2VgG\nTLNzLBLs6oirtFpXbEne4QemIxrVUH6aECbksCAQEPdRs0ejRQdKiD33v/uymSz2\nzt3ZPVykr8bMffgn5M4FN1n9+Df0fe1JOXO3hKufieOkBqL0QLbBOFUVa2mV/u0=\n=zGLD\n-----END PGP SIGNATURE-----\n", "payload": "tree 9ab4c7c343fb46f4b8c6e6cd8ef4ddab138dc806\nparent 72e6d51583ed5fa97ee06fe0259b82b28367874e\nparent d8540ae5a98b6135253521cdbf34c5953494a5bf\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614045104 +0100\ncommitter GitHub <noreply@github.com> 1614045104 +0100\n\nRollup merge of #81235 - reese:rw-tuple-diagnostics, r=estebank\n\nImprove suggestion for tuple struct pattern matching errors.\n\nCloses #80174\n\nThis change allows numbers to be parsed as field names when pattern matching on structs, which allows us to provide better error messages when tuple structs are matched using a struct pattern.\n\nr? ``@estebank``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e51bd4315bad8456c6cabbfc338be97c17f3700", "html_url": "https://github.com/rust-lang/rust/commit/8e51bd4315bad8456c6cabbfc338be97c17f3700", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e51bd4315bad8456c6cabbfc338be97c17f3700/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72e6d51583ed5fa97ee06fe0259b82b28367874e", "url": "https://api.github.com/repos/rust-lang/rust/commits/72e6d51583ed5fa97ee06fe0259b82b28367874e", "html_url": "https://github.com/rust-lang/rust/commit/72e6d51583ed5fa97ee06fe0259b82b28367874e"}, {"sha": "d8540ae5a98b6135253521cdbf34c5953494a5bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8540ae5a98b6135253521cdbf34c5953494a5bf", "html_url": "https://github.com/rust-lang/rust/commit/d8540ae5a98b6135253521cdbf34c5953494a5bf"}], "stats": {"total": 172, "additions": 151, "deletions": 21}, "files": [{"sha": "8a097bf481dc21cf09d7d4cfe8f729adbb715a2e", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e51bd4315bad8456c6cabbfc338be97c17f3700/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e51bd4315bad8456c6cabbfc338be97c17f3700/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=8e51bd4315bad8456c6cabbfc338be97c17f3700", "patch": "@@ -950,7 +950,7 @@ impl<'a> Parser<'a> {\n             self.bump();\n             Ok(Ident::new(symbol, self.prev_token.span))\n         } else {\n-            self.parse_ident_common(false)\n+            self.parse_ident_common(true)\n         }\n     }\n "}, {"sha": "9e2e7359ca96e8a3e14813ea16990ff53c266668", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e51bd4315bad8456c6cabbfc338be97c17f3700/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e51bd4315bad8456c6cabbfc338be97c17f3700/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=8e51bd4315bad8456c6cabbfc338be97c17f3700", "patch": "@@ -1028,7 +1028,7 @@ impl<'a> Parser<'a> {\n             let boxed_span = self.token.span;\n             let is_ref = self.eat_keyword(kw::Ref);\n             let is_mut = self.eat_keyword(kw::Mut);\n-            let fieldname = self.parse_ident()?;\n+            let fieldname = self.parse_field_name()?;\n             hi = self.prev_token.span;\n \n             let bind_type = match (is_ref, is_mut) {"}, {"sha": "897b1f01569f4a99f1027f543801699fc54cbf88", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 85, "deletions": 15, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/8e51bd4315bad8456c6cabbfc338be97c17f3700/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e51bd4315bad8456c6cabbfc338be97c17f3700/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=8e51bd4315bad8456c6cabbfc338be97c17f3700", "patch": "@@ -17,6 +17,7 @@ use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::Ident;\n use rustc_span::{BytePos, DUMMY_SP};\n use rustc_trait_selection::traits::{ObligationCause, Pattern};\n+use ty::VariantDef;\n \n use std::cmp;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n@@ -1264,14 +1265,64 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     u.emit();\n                 }\n             }\n-            (None, Some(mut err)) | (Some(mut err), None) => {\n+            (None, Some(mut u)) => {\n+                if let Some(mut e) = self.error_tuple_variant_as_struct_pat(pat, fields, variant) {\n+                    u.delay_as_bug();\n+                    e.emit();\n+                } else {\n+                    u.emit();\n+                }\n+            }\n+            (Some(mut err), None) => {\n                 err.emit();\n             }\n-            (None, None) => {}\n+            (None, None) => {\n+                if let Some(mut err) =\n+                    self.error_tuple_variant_index_shorthand(variant, pat, fields)\n+                {\n+                    err.emit();\n+                }\n+            }\n         }\n         no_field_errors\n     }\n \n+    fn error_tuple_variant_index_shorthand(\n+        &self,\n+        variant: &VariantDef,\n+        pat: &'_ Pat<'_>,\n+        fields: &[hir::FieldPat<'_>],\n+    ) -> Option<DiagnosticBuilder<'_>> {\n+        // if this is a tuple struct, then all field names will be numbers\n+        // so if any fields in a struct pattern use shorthand syntax, they will\n+        // be invalid identifiers (for example, Foo { 0, 1 }).\n+        if let (CtorKind::Fn, PatKind::Struct(qpath, field_patterns, ..)) =\n+            (variant.ctor_kind, &pat.kind)\n+        {\n+            let has_shorthand_field_name = field_patterns.iter().any(|field| field.is_shorthand);\n+            if has_shorthand_field_name {\n+                let path = rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| {\n+                    s.print_qpath(qpath, false)\n+                });\n+                let mut err = struct_span_err!(\n+                    self.tcx.sess,\n+                    pat.span,\n+                    E0769,\n+                    \"tuple variant `{}` written as struct variant\",\n+                    path\n+                );\n+                err.span_suggestion_verbose(\n+                    qpath.span().shrink_to_hi().to(pat.span.shrink_to_hi()),\n+                    \"use the tuple variant pattern syntax instead\",\n+                    format!(\"({})\", self.get_suggested_tuple_struct_pattern(fields, variant)),\n+                    Applicability::MaybeIncorrect,\n+                );\n+                return Some(err);\n+            }\n+        }\n+        None\n+    }\n+\n     fn error_foreign_non_exhaustive_spat(&self, pat: &Pat<'_>, descr: &str, no_fields: bool) {\n         let sess = self.tcx.sess;\n         let sm = sess.source_map();\n@@ -1411,16 +1462,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             );\n             let (sugg, appl) = if fields.len() == variant.fields.len() {\n                 (\n-                    fields\n-                        .iter()\n-                        .map(|f| match self.tcx.sess.source_map().span_to_snippet(f.pat.span) {\n-                            Ok(f) => f,\n-                            Err(_) => rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| {\n-                                s.print_pat(f.pat)\n-                            }),\n-                        })\n-                        .collect::<Vec<String>>()\n-                        .join(\", \"),\n+                    self.get_suggested_tuple_struct_pattern(fields, variant),\n                     Applicability::MachineApplicable,\n                 )\n             } else {\n@@ -1429,17 +1471,45 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     Applicability::MaybeIncorrect,\n                 )\n             };\n-            err.span_suggestion(\n-                pat.span,\n+            err.span_suggestion_verbose(\n+                qpath.span().shrink_to_hi().to(pat.span.shrink_to_hi()),\n                 \"use the tuple variant pattern syntax instead\",\n-                format!(\"{}({})\", path, sugg),\n+                format!(\"({})\", sugg),\n                 appl,\n             );\n             return Some(err);\n         }\n         None\n     }\n \n+    fn get_suggested_tuple_struct_pattern(\n+        &self,\n+        fields: &[hir::FieldPat<'_>],\n+        variant: &VariantDef,\n+    ) -> String {\n+        let variant_field_idents = variant.fields.iter().map(|f| f.ident).collect::<Vec<Ident>>();\n+        fields\n+            .iter()\n+            .map(|field| {\n+                match self.tcx.sess.source_map().span_to_snippet(field.pat.span) {\n+                    Ok(f) => {\n+                        // Field names are numbers, but numbers\n+                        // are not valid identifiers\n+                        if variant_field_idents.contains(&field.ident) {\n+                            String::from(\"_\")\n+                        } else {\n+                            f\n+                        }\n+                    }\n+                    Err(_) => rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| {\n+                        s.print_pat(field.pat)\n+                    }),\n+                }\n+            })\n+            .collect::<Vec<String>>()\n+            .join(\", \")\n+    }\n+\n     /// Returns a diagnostic reporting a struct pattern which is missing an `..` due to\n     /// inaccessible fields.\n     ///"}, {"sha": "7df86d7326bc6e073174039742b091800a8f0078", "filename": "src/test/ui/issues/issue-17800.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e51bd4315bad8456c6cabbfc338be97c17f3700/src%2Ftest%2Fui%2Fissues%2Fissue-17800.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e51bd4315bad8456c6cabbfc338be97c17f3700/src%2Ftest%2Fui%2Fissues%2Fissue-17800.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17800.stderr?ref=8e51bd4315bad8456c6cabbfc338be97c17f3700", "patch": "@@ -2,7 +2,12 @@ error[E0769]: tuple variant `MyOption::MySome` written as struct variant\n   --> $DIR/issue-17800.rs:8:9\n    |\n LL |         MyOption::MySome { x: 42 } => (),\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the tuple variant pattern syntax instead: `MyOption::MySome(42)`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use the tuple variant pattern syntax instead\n+   |\n+LL |         MyOption::MySome(42) => (),\n+   |                         ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a95b5bb94d24a7c020d01529a40227ff5f054a14", "filename": "src/test/ui/missing/missing-fields-in-struct-pattern.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e51bd4315bad8456c6cabbfc338be97c17f3700/src%2Ftest%2Fui%2Fmissing%2Fmissing-fields-in-struct-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e51bd4315bad8456c6cabbfc338be97c17f3700/src%2Ftest%2Fui%2Fmissing%2Fmissing-fields-in-struct-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-fields-in-struct-pattern.stderr?ref=8e51bd4315bad8456c6cabbfc338be97c17f3700", "patch": "@@ -2,7 +2,12 @@ error[E0769]: tuple variant `S` written as struct variant\n   --> $DIR/missing-fields-in-struct-pattern.rs:4:12\n    |\n LL |     if let S { a, b, c, d } = S(1, 2, 3, 4) {\n-   |            ^^^^^^^^^^^^^^^^ help: use the tuple variant pattern syntax instead: `S(a, b, c, d)`\n+   |            ^^^^^^^^^^^^^^^^\n+   |\n+help: use the tuple variant pattern syntax instead\n+   |\n+LL |     if let S(a, b, c, d) = S(1, 2, 3, 4) {\n+   |             ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "9b9d2bc4972b4c414d581974728b943cd8de489f", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e51bd4315bad8456c6cabbfc338be97c17f3700/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e51bd4315bad8456c6cabbfc338be97c17f3700/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=8e51bd4315bad8456c6cabbfc338be97c17f3700", "patch": "@@ -22,7 +22,12 @@ error[E0769]: tuple variant `Enum::Bar` written as struct variant\n   --> $DIR/recover-from-bad-variant.rs:12:9\n    |\n LL |         Enum::Bar { a, b } => {}\n-   |         ^^^^^^^^^^^^^^^^^^ help: use the tuple variant pattern syntax instead: `Enum::Bar(a, b)`\n+   |         ^^^^^^^^^^^^^^^^^^\n+   |\n+help: use the tuple variant pattern syntax instead\n+   |\n+LL |         Enum::Bar(a, b) => {}\n+   |                  ^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7bd54af1dbee53469b0d6d7c93a7dee7cbc61e3a", "filename": "src/test/ui/structs/struct-tuple-field-names.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8e51bd4315bad8456c6cabbfc338be97c17f3700/src%2Ftest%2Fui%2Fstructs%2Fstruct-tuple-field-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e51bd4315bad8456c6cabbfc338be97c17f3700/src%2Ftest%2Fui%2Fstructs%2Fstruct-tuple-field-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-tuple-field-names.rs?ref=8e51bd4315bad8456c6cabbfc338be97c17f3700", "patch": "@@ -0,0 +1,15 @@\n+struct S(i32, f32);\n+enum E {\n+    S(i32, f32),\n+}\n+fn main() {\n+    let x = E::S(1, 2.2);\n+    match x {\n+        E::S { 0, 1 } => {}\n+        //~^ ERROR tuple variant `E::S` written as struct variant [E0769]\n+    }\n+    let y = S(1, 2.2);\n+    match y {\n+        S { } => {} //~ ERROR: tuple variant `S` written as struct variant [E0769]\n+    }\n+}"}, {"sha": "29e721465215d432bb8538a5db4ee2c162f0b4e3", "filename": "src/test/ui/structs/struct-tuple-field-names.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8e51bd4315bad8456c6cabbfc338be97c17f3700/src%2Ftest%2Fui%2Fstructs%2Fstruct-tuple-field-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e51bd4315bad8456c6cabbfc338be97c17f3700/src%2Ftest%2Fui%2Fstructs%2Fstruct-tuple-field-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-tuple-field-names.stderr?ref=8e51bd4315bad8456c6cabbfc338be97c17f3700", "patch": "@@ -0,0 +1,25 @@\n+error[E0769]: tuple variant `E::S` written as struct variant\n+  --> $DIR/struct-tuple-field-names.rs:8:9\n+   |\n+LL |         E::S { 0, 1 } => {}\n+   |         ^^^^^^^^^^^^^\n+   |\n+help: use the tuple variant pattern syntax instead\n+   |\n+LL |         E::S(_, _) => {}\n+   |             ^^^^^^\n+\n+error[E0769]: tuple variant `S` written as struct variant\n+  --> $DIR/struct-tuple-field-names.rs:13:9\n+   |\n+LL |         S { } => {}\n+   |         ^^^^^\n+   |\n+help: use the tuple variant pattern syntax instead\n+   |\n+LL |         S(_, _) => {}\n+   |          ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0769`."}, {"sha": "c3d41ae68cd6ad07d687e571eef48f3990d57f08", "filename": "src/test/ui/type/type-check/issue-41314.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e51bd4315bad8456c6cabbfc338be97c17f3700/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-41314.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e51bd4315bad8456c6cabbfc338be97c17f3700/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-41314.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-41314.stderr?ref=8e51bd4315bad8456c6cabbfc338be97c17f3700", "patch": "@@ -2,7 +2,12 @@ error[E0769]: tuple variant `X::Y` written as struct variant\n   --> $DIR/issue-41314.rs:7:9\n    |\n LL |         X::Y { number } => {}\n-   |         ^^^^^^^^^^^^^^^ help: use the tuple variant pattern syntax instead: `X::Y(number)`\n+   |         ^^^^^^^^^^^^^^^\n+   |\n+help: use the tuple variant pattern syntax instead\n+   |\n+LL |         X::Y(number) => {}\n+   |             ^^^^^^^^\n \n error: aborting due to previous error\n "}]}