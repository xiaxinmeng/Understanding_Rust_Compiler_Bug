{"sha": "fdf2f6226b4ce58a2407d7d3fa3b700f6e76e60a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZjJmNjIyNmI0Y2U1OGEyNDA3ZDdkM2ZhM2I3MDBmNmU3NmU2MGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-07T10:50:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-07T10:50:46Z"}, "message": "Reorg style", "tree": {"sha": "1478cad9075a17a9d2b25f2823062e7de4647443", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1478cad9075a17a9d2b25f2823062e7de4647443"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdf2f6226b4ce58a2407d7d3fa3b700f6e76e60a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdf2f6226b4ce58a2407d7d3fa3b700f6e76e60a", "html_url": "https://github.com/rust-lang/rust/commit/fdf2f6226b4ce58a2407d7d3fa3b700f6e76e60a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdf2f6226b4ce58a2407d7d3fa3b700f6e76e60a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aa46034c2eeb3d994b2760878ac1969487542e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa46034c2eeb3d994b2760878ac1969487542e3", "html_url": "https://github.com/rust-lang/rust/commit/2aa46034c2eeb3d994b2760878ac1969487542e3"}], "stats": {"total": 357, "additions": 181, "deletions": 176}, "files": [{"sha": "17626f3fdc5e7a7f8757fe4548cd34c3d180c28a", "filename": "docs/dev/style.md", "status": "modified", "additions": 181, "deletions": 176, "changes": 357, "blob_url": "https://github.com/rust-lang/rust/blob/fdf2f6226b4ce58a2407d7d3fa3b700f6e76e60a/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/fdf2f6226b4ce58a2407d7d3fa3b700f6e76e60a/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=fdf2f6226b4ce58a2407d7d3fa3b700f6e76e60a", "patch": "@@ -6,7 +6,9 @@ Our approach to \"clean code\" is two-fold:\n It is explicitly OK for a reviewer to flag only some nits in the PR, and then send a follow-up cleanup PR for things which are easier to explain by example, cc-ing the original author.\n Sending small cleanup PRs (like renaming a single local variable) is encouraged.\n \n-# Scale of Changes\n+# General\n+\n+## Scale of Changes\n \n Everyone knows that it's better to send small & focused pull requests.\n The problem is, sometimes you *have* to, eg, rewrite the whole compiler, and that just doesn't fit into a set of isolated PRs.\n@@ -45,13 +47,35 @@ That said, adding an innocent-looking `pub use` is a very simple way to break en\n Note: if you enjoyed this abstract hand-waving about boundaries, you might appreciate\n https://www.tedinski.com/2018/02/06/system-boundaries.html\n \n-# Crates.io Dependencies\n+## Crates.io Dependencies\n \n We try to be very conservative with usage of crates.io dependencies.\n Don't use small \"helper\" crates (exception: `itertools` is allowed).\n If there's some general reusable bit of code you need, consider adding it to the `stdx` crate.\n \n-# Minimal Tests\n+## Commit Style\n+\n+We don't have specific rules around git history hygiene.\n+Maintaining clean git history is strongly encouraged, but not enforced.\n+Use rebase workflow, it's OK to rewrite history during PR review process.\n+After you are happy with the state of the code, please use [interactive rebase](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History) to squash fixup commits.\n+\n+Avoid @mentioning people in commit messages and pull request descriptions(they are added to commit message by bors).\n+Such messages create a lot of duplicate notification traffic during rebases.\n+\n+## Clippy\n+\n+We don't enforce Clippy.\n+A number of default lints have high false positive rate.\n+Selectively patching false-positives with `allow(clippy)` is considered worse than not using Clippy at all.\n+There's `cargo xtask lint` command which runs a subset of low-FPR lints.\n+Careful tweaking of `xtask lint` is welcome.\n+See also [rust-lang/clippy#5537](https://github.com/rust-lang/rust-clippy/issues/5537).\n+Of course, applying Clippy suggestions is welcome as long as they indeed improve the code.\n+\n+# Code\n+\n+## Minimal Tests\n \n Most tests in rust-analyzer start with a snippet of Rust code.\n This snippets should be minimal -- if you copy-paste a snippet of real code into the tests, make sure to remove everything which could be removed.\n@@ -65,119 +89,7 @@ There are many benefits to this:\n It also makes sense to format snippets more compactly (for example, by placing enum definitions like `enum E { Foo, Bar }` on a single line),\n as long as they are still readable.\n \n-# Order of Imports\n-\n-Separate import groups with blank lines.\n-Use one `use` per crate.\n-\n-```rust\n-mod x;\n-mod y;\n-\n-// First std.\n-use std::{ ... }\n-\n-// Second, external crates (both crates.io crates and other rust-analyzer crates).\n-use crate_foo::{ ... }\n-use crate_bar::{ ... }\n-\n-// Then current crate.\n-use crate::{}\n-\n-// Finally, parent and child modules, but prefer `use crate::`.\n-use super::{}\n-```\n-\n-Module declarations come before the imports.\n-Order them in \"suggested reading order\" for a person new to the code base.\n-\n-# Import Style\n-\n-Qualify items from `hir` and `ast`.\n-\n-```rust\n-// Good\n-use syntax::ast;\n-\n-fn frobnicate(func: hir::Function, strukt: ast::StructDef) {}\n-\n-// Not as good\n-use hir::Function;\n-use syntax::ast::StructDef;\n-\n-fn frobnicate(func: Function, strukt: StructDef) {}\n-```\n-\n-Avoid local `use MyEnum::*` imports.\n-\n-Prefer `use crate::foo::bar` to `use super::bar`.\n-\n-When implementing `Debug` or `Display`, import `std::fmt`:\n-\n-```rust\n-// Good\n-use std::fmt;\n-\n-impl fmt::Display for RenameError {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result { .. }\n-}\n-\n-// Not as good\n-impl std::fmt::Display for RenameError {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result { .. }\n-}\n-```\n-\n-# Order of Items\n-\n-Optimize for the reader who sees the file for the first time, and wants to get a general idea about what's going on.\n-People read things from top to bottom, so place most important things first.\n-\n-Specifically, if all items except one are private, always put the non-private item on top.\n-\n-Put `struct`s and `enum`s first, functions and impls last.\n-\n-Do\n-\n-```rust\n-// Good\n-struct Foo {\n-    bars: Vec<Bar>\n-}\n-\n-struct Bar;\n-```\n-\n-rather than\n-\n-```rust\n-// Not as good\n-struct Bar;\n-\n-struct Foo {\n-    bars: Vec<Bar>\n-}\n-```\n-\n-# Variable Naming\n-\n-Use boring and long names for local variables ([yay code completion](https://github.com/rust-analyzer/rust-analyzer/pull/4162#discussion_r417130973)).\n-The default name is a lowercased name of the type: `global_state: GlobalState`.\n-Avoid ad-hoc acronyms and contractions, but use the ones that exist consistently (`db`, `ctx`, `acc`).\n-\n-Default names:\n-\n-* `res` -- \"result of the function\" local variable\n-* `it` -- I don't really care about the name\n-* `n_foo` -- number of foos\n-* `foo_idx` -- index of `foo`\n-\n-# Collection types\n-\n-Prefer `rustc_hash::FxHashMap` and `rustc_hash::FxHashSet` instead of the ones in `std::collections`.\n-They use a hasher that's slightly faster and using them consistently will reduce code size by some small amount.\n-\n-# Preconditions\n+## Preconditions\n \n Express function preconditions in types and force the caller to provide them (rather than checking in callee):\n \n@@ -199,7 +111,6 @@ fn frobnicate(walrus: Option<Walrus>) {\n \n Avoid preconditions that span across function boundaries:\n \n-\n ```rust\n // Good\n fn string_literal_contents(s: &str) -> Option<&str> {\n@@ -233,31 +144,7 @@ fn foo() {\n In the \"Not as good\" version, the precondition that `1` is a valid char boundary is checked in `is_string_literal` and used in `foo`.\n In the \"Good\" version, the precondition check and usage are checked in the same block, and then encoded in the types.\n \n-# Early Returns\n-\n-Do use early returns\n-\n-```rust\n-// Good\n-fn foo() -> Option<Bar> {\n-    if !condition() {\n-        return None;\n-    }\n-\n-    Some(...)\n-}\n-\n-// Not as good\n-fn foo() -> Option<Bar> {\n-    if condition() {\n-        Some(...)\n-    } else {\n-        None\n-    }\n-}\n-```\n-\n-# Getters & Setters\n+## Getters & Setters\n \n If a field can have any value without breaking invariants, make the field public.\n Conversely, if there is an invariant, document it, enforce it in the \"constructor\" function, make the field private, and provide a getter.\n@@ -285,6 +172,40 @@ impl Person {\n }\n ```\n \n+## Avoid Monomorphization\n+\n+Rust uses monomorphization to compile generic code, meaning that for each instantiation of a generic functions with concrete types, the function is compiled afresh, *per crate*.\n+This allows for exceptionally good performance, but leads to increased compile times.\n+Runtime performance obeys 80%/20% rule -- only a small fraction of code is hot.\n+Compile time **does not** obey this rule -- all code has to be compiled.\n+For this reason, avoid making a lot of code type parametric, *especially* on the boundaries between crates.\n+\n+```rust\n+// Good\n+fn frbonicate(f: impl FnMut()) {\n+    frobnicate_impl(&mut f)\n+}\n+fn frobnicate_impl(f: &mut dyn FnMut()) {\n+    // lots of code\n+}\n+\n+// Not as good\n+fn frbonicate(f: impl FnMut()) {\n+    // lots of code\n+}\n+```\n+\n+Avoid `AsRef` polymorphism, it pays back only for widely used libraries:\n+\n+```rust\n+// Good\n+fn frbonicate(f: &Path) {\n+}\n+\n+// Not as good\n+fn frbonicate(f: impl AsRef<Path>) {\n+}\n+```\n \n # Premature Pessimization\n \n@@ -322,62 +243,146 @@ fn frobnicate(s: &str) {\n }\n ```\n \n-# Avoid Monomorphization\n+## Collection types\n \n-Rust uses monomorphization to compile generic code, meaning that for each instantiation of a generic functions with concrete types, the function is compiled afresh, *per crate*.\n-This allows for exceptionally good performance, but leads to increased compile times.\n-Runtime performance obeys 80%/20% rule -- only a small fraction of code is hot.\n-Compile time **does not** obey this rule -- all code has to be compiled.\n-For this reason, avoid making a lot of code type parametric, *especially* on the boundaries between crates.\n+Prefer `rustc_hash::FxHashMap` and `rustc_hash::FxHashSet` instead of the ones in `std::collections`.\n+They use a hasher that's slightly faster and using them consistently will reduce code size by some small amount.\n+\n+# Style\n+\n+## Order of Imports\n+\n+Separate import groups with blank lines.\n+Use one `use` per crate.\n+\n+```rust\n+mod x;\n+mod y;\n+\n+// First std.\n+use std::{ ... }\n+\n+// Second, external crates (both crates.io crates and other rust-analyzer crates).\n+use crate_foo::{ ... }\n+use crate_bar::{ ... }\n+\n+// Then current crate.\n+use crate::{}\n+\n+// Finally, parent and child modules, but prefer `use crate::`.\n+use super::{}\n+```\n+\n+Module declarations come before the imports.\n+Order them in \"suggested reading order\" for a person new to the code base.\n+\n+## Import Style\n+\n+Qualify items from `hir` and `ast`.\n \n ```rust\n // Good\n-fn frbonicate(f: impl FnMut()) {\n-    frobnicate_impl(&mut f)\n-}\n-fn frobnicate_impl(f: &mut dyn FnMut()) {\n-    // lots of code\n+use syntax::ast;\n+\n+fn frobnicate(func: hir::Function, strukt: ast::StructDef) {}\n+\n+// Not as good\n+use hir::Function;\n+use syntax::ast::StructDef;\n+\n+fn frobnicate(func: Function, strukt: StructDef) {}\n+```\n+\n+Avoid local `use MyEnum::*` imports.\n+\n+Prefer `use crate::foo::bar` to `use super::bar`.\n+\n+When implementing `Debug` or `Display`, import `std::fmt`:\n+\n+```rust\n+// Good\n+use std::fmt;\n+\n+impl fmt::Display for RenameError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result { .. }\n }\n \n // Not as good\n-fn frbonicate(f: impl FnMut()) {\n-    // lots of code\n+impl std::fmt::Display for RenameError {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result { .. }\n }\n ```\n \n-Avoid `AsRef` polymorphism, it pays back only for widely used libraries:\n+## Order of Items\n+\n+Optimize for the reader who sees the file for the first time, and wants to get a general idea about what's going on.\n+People read things from top to bottom, so place most important things first.\n+\n+Specifically, if all items except one are private, always put the non-private item on top.\n+\n+Put `struct`s and `enum`s first, functions and impls last.\n+\n+Do\n \n ```rust\n // Good\n-fn frbonicate(f: &Path) {\n+struct Foo {\n+    bars: Vec<Bar>\n }\n \n+struct Bar;\n+```\n+\n+rather than\n+\n+```rust\n // Not as good\n-fn frbonicate(f: impl AsRef<Path>) {\n+struct Bar;\n+\n+struct Foo {\n+    bars: Vec<Bar>\n }\n ```\n \n-# Documentation\n+## Variable Naming\n \n-For `.md` and `.adoc` files, prefer a sentence-per-line format, don't wrap lines.\n-If the line is too long, you want to split the sentence in two :-)\n+Use boring and long names for local variables ([yay code completion](https://github.com/rust-analyzer/rust-analyzer/pull/4162#discussion_r417130973)).\n+The default name is a lowercased name of the type: `global_state: GlobalState`.\n+Avoid ad-hoc acronyms and contractions, but use the ones that exist consistently (`db`, `ctx`, `acc`).\n \n-# Commit Style\n+Default names:\n \n-We don't have specific rules around git history hygiene.\n-Maintaining clean git history is strongly encouraged, but not enforced.\n-Use rebase workflow, it's OK to rewrite history during PR review process.\n-After you are happy with the state of the code, please use [interactive rebase](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History) to squash fixup commits.\n+* `res` -- \"result of the function\" local variable\n+* `it` -- I don't really care about the name\n+* `n_foo` -- number of foos\n+* `foo_idx` -- index of `foo`\n \n-Avoid @mentioning people in commit messages and pull request descriptions(they are added to commit message by bors).\n-Such messages create a lot of duplicate notification traffic during rebases.\n \n-# Clippy\n+## Early Returns\n \n-We don't enforce Clippy.\n-A number of default lints have high false positive rate.\n-Selectively patching false-positives with `allow(clippy)` is considered worse than not using Clippy at all.\n-There's `cargo xtask lint` command which runs a subset of low-FPR lints.\n-Careful tweaking of `xtask lint` is welcome.\n-See also [rust-lang/clippy#5537](https://github.com/rust-lang/rust-clippy/issues/5537).\n-Of course, applying Clippy suggestions is welcome as long as they indeed improve the code.\n+Do use early returns\n+\n+```rust\n+// Good\n+fn foo() -> Option<Bar> {\n+    if !condition() {\n+        return None;\n+    }\n+\n+    Some(...)\n+}\n+\n+// Not as good\n+fn foo() -> Option<Bar> {\n+    if condition() {\n+        Some(...)\n+    } else {\n+        None\n+    }\n+}\n+```\n+\n+## Documentation\n+\n+For `.md` and `.adoc` files, prefer a sentence-per-line format, don't wrap lines.\n+If the line is too long, you want to split the sentence in two :-)"}]}