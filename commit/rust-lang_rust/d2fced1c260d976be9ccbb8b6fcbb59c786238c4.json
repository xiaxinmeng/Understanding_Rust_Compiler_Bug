{"sha": "d2fced1c260d976be9ccbb8b6fcbb59c786238c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZmNlZDFjMjYwZDk3NmJlOWNjYmI4YjZmY2JiNTljNzg2MjM4YzQ=", "commit": {"author": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2020-09-15T17:16:06Z"}, "committer": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2020-09-15T17:16:06Z"}, "message": "Avoid checking all ancestors and fix mis-completion", "tree": {"sha": "15ece122198b0db397560be997e1874a051fe075", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15ece122198b0db397560be997e1874a051fe075"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2fced1c260d976be9ccbb8b6fcbb59c786238c4", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl9g9tYACgkQztOS3gxI\nPQD2WBAApZUAPYyfuivxL82tacuYhugG87U1hVJRvBU2nK8q9FqgRrk3MhX2yIeH\n/fhDvc3CI19jfFRLjbAhlly7OH5QyoqgDINEySdKSg6WtxIuoineC4k9mnNs/rq4\n4zqMeAW2f0Y9MLqlv7cWsyvBwp3AnUEisAv9Ue+UTStr9iew0HJgWgHR9UF5sRpv\n/ZZtiJ6nYoeum6P9GrF/X1sMo+nzzFPg4r8SUFBobirVLvUd90BnjIPwSCCPHtMJ\nx+HJPmCwPu3agN9OvD5O/715btkJs4DqcZ8dxHFI9Df1wTf312vhyasux11M5fLD\ne+aj6CFYMjaFsgZgrEFwW/QTHqix41d3HzxmjlEOJoDUIkeUm4cTiUMhhBesSMdt\nuOJ0cugMWDWKuE7kJ/5/QKARDhq0OtYxL7HDKQ4JhEiQZI8lXlxyd2XDjJoKLpXO\no/nuA9oiO3ZJ0Xobu1Zf/ajMbjQGPK4b0CIIcZiKX/GGCmMQluObsMRv6a23g6tT\niVSCtuec8cX3qAPj8wL3t99uP96pQXrjZcv1oDZkWqAscCImPrdOx0ZSWuAWVdrg\nHZVw5lCWTw52yCDaQYoDl1IMBhx0El78hPlY7YxaqDI/IbbotBsXfOXq11AXOl9q\neOFqcZ3/IVPNdcAX7PWQcapORPXSMiZNmH4wBOx/C5pq+RTlIuw=\n=mcD2\n-----END PGP SIGNATURE-----", "payload": "tree 15ece122198b0db397560be997e1874a051fe075\nparent 37f3b9ca2a0252b93c5900e2104e3e954c383869\nauthor oxalica <oxalicc@pm.me> 1600190166 +0800\ncommitter oxalica <oxalicc@pm.me> 1600190166 +0800\n\nAvoid checking all ancestors and fix mis-completion\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2fced1c260d976be9ccbb8b6fcbb59c786238c4", "html_url": "https://github.com/rust-lang/rust/commit/d2fced1c260d976be9ccbb8b6fcbb59c786238c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2fced1c260d976be9ccbb8b6fcbb59c786238c4/comments", "author": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37f3b9ca2a0252b93c5900e2104e3e954c383869", "url": "https://api.github.com/repos/rust-lang/rust/commits/37f3b9ca2a0252b93c5900e2104e3e954c383869", "html_url": "https://github.com/rust-lang/rust/commit/37f3b9ca2a0252b93c5900e2104e3e954c383869"}], "stats": {"total": 248, "additions": 215, "deletions": 33}, "files": [{"sha": "ff115df9286945d83bacaffd458ab8803c6739cc", "filename": "crates/ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 215, "deletions": 33, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/d2fced1c260d976be9ccbb8b6fcbb59c786238c4/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2fced1c260d976be9ccbb8b6fcbb59c786238c4/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=d2fced1c260d976be9ccbb8b6fcbb59c786238c4", "patch": "@@ -86,36 +86,46 @@ fn completion_match(ctx: &CompletionContext) -> Option<(ImplCompletionKind, Synt\n         token = token.prev_token()?;\n     }\n \n-    let (kind, trigger, impl_def_offset) = token.ancestors().find_map(|p| match p.kind() {\n-        // `const` can be a modifier of an item, so the `const` token may be inside another item syntax node.\n-        // Eg. `impl .. { const <|> fn bar() .. }`\n-        SyntaxKind::FN | SyntaxKind::TYPE_ALIAS | SyntaxKind::CONST\n-            if token.kind() == SyntaxKind::CONST_KW =>\n-        {\n-            Some((ImplCompletionKind::Const, p, 2))\n-        }\n-        SyntaxKind::FN => Some((ImplCompletionKind::Fn, p, 2)),\n-        SyntaxKind::TYPE_ALIAS => Some((ImplCompletionKind::TypeAlias, p, 2)),\n-        SyntaxKind::CONST => Some((ImplCompletionKind::Const, p, 2)),\n-        // `impl .. { const <|> }` is parsed as:\n-        // IMPL\n-        //   ASSOC_ITEM_LIST\n-        //     ERROR\n-        //       CONST_KW <- token\n-        //     WHITESPACE <- ctx.token\n-        SyntaxKind::ERROR\n-            if p.first_token().map_or(false, |t| t.kind() == SyntaxKind::CONST_KW) =>\n-        {\n-            Some((ImplCompletionKind::Const, p, 2))\n-        }\n-        SyntaxKind::NAME_REF => Some((ImplCompletionKind::All, p, 5)),\n-        _ => None,\n-    })?;\n+    let impl_item_offset = match token.kind() {\n+        // `impl .. { const <|> }`\n+        // ERROR      0\n+        //   CONST_KW <- *\n+        SyntaxKind::CONST_KW => 0,\n+        // `impl .. { fn/type <|> }`\n+        // FN/TYPE_ALIAS  0\n+        //   FN_KW        <- *\n+        SyntaxKind::FN_KW | SyntaxKind::TYPE_KW => 0,\n+        // `impl .. { fn/type/const foo<|> }`\n+        // FN/TYPE_ALIAS/CONST  1\n+        //  NAME                0\n+        //    IDENT             <- *\n+        SyntaxKind::IDENT if token.parent().kind() == SyntaxKind::NAME => 1,\n+        // `impl .. { foo<|> }`\n+        // MACRO_CALL       3\n+        //  PATH            2\n+        //    PATH_SEGMENT  1\n+        //      NAME_REF    0\n+        //        IDENT     <- *\n+        SyntaxKind::IDENT if token.parent().kind() == SyntaxKind::NAME_REF => 3,\n+        _ => return None,\n+    };\n \n-    let impl_def = (0..impl_def_offset - 1)\n-        .try_fold(trigger.parent()?, |t, _| t.parent())\n-        .and_then(ast::Impl::cast)?;\n-    Some((kind, trigger, impl_def))\n+    let impl_item = token.ancestors().nth(impl_item_offset)?;\n+    // Must directly belong to an impl block.\n+    // IMPL\n+    //   ASSOC_ITEM_LIST\n+    //     <item>\n+    let impl_def = ast::Impl::cast(impl_item.parent()?.parent()?)?;\n+    let kind = match impl_item.kind() {\n+        // `impl ... { const <|> fn/type/const }`\n+        _ if token.kind() == SyntaxKind::CONST_KW => ImplCompletionKind::Const,\n+        SyntaxKind::CONST | SyntaxKind::ERROR => ImplCompletionKind::Const,\n+        SyntaxKind::TYPE_ALIAS => ImplCompletionKind::TypeAlias,\n+        SyntaxKind::FN => ImplCompletionKind::Fn,\n+        SyntaxKind::MACRO_CALL => ImplCompletionKind::All,\n+        _ => return None,\n+    };\n+    Some((kind, impl_item, impl_def))\n }\n \n fn add_function_impl(\n@@ -261,19 +271,191 @@ ta type TestType = \\n\\\n     }\n \n     #[test]\n-    fn no_nested_fn_completions() {\n+    fn no_completion_inside_fn() {\n         check(\n             r\"\n-trait Test {\n-    fn test();\n-    fn test2();\n+trait Test { fn test(); fn test2(); }\n+struct T;\n+\n+impl Test for T {\n+    fn test() {\n+        t<|>\n+    }\n+}\n+\",\n+            expect![[\"\"]],\n+        );\n+\n+        check(\n+            r\"\n+trait Test { fn test(); fn test2(); }\n+struct T;\n+\n+impl Test for T {\n+    fn test() {\n+        fn t<|>\n+    }\n }\n+\",\n+            expect![[\"\"]],\n+        );\n+\n+        check(\n+            r\"\n+trait Test { fn test(); fn test2(); }\n struct T;\n \n impl Test for T {\n     fn test() {\n+        fn <|>\n+    }\n+}\n+\",\n+            expect![[\"\"]],\n+        );\n+\n+        // https://github.com/rust-analyzer/rust-analyzer/pull/5976#issuecomment-692332191\n+        check(\n+            r\"\n+trait Test { fn test(); fn test2(); }\n+struct T;\n+\n+impl Test for T {\n+    fn test() {\n+        foo.<|>\n+    }\n+}\n+\",\n+            expect![[\"\"]],\n+        );\n+\n+        check(\n+            r\"\n+trait Test { fn test(_: i32); fn test2(); }\n+struct T;\n+\n+impl Test for T {\n+    fn test(t<|>)\n+}\n+\",\n+            expect![[\"\"]],\n+        );\n+\n+        check(\n+            r\"\n+trait Test { fn test(_: fn()); fn test2(); }\n+struct T;\n+\n+impl Test for T {\n+    fn test(f: fn <|>)\n+}\n+\",\n+            expect![[\"\"]],\n+        );\n+    }\n+\n+    #[test]\n+    fn no_completion_inside_const() {\n+        check(\n+            r\"\n+trait Test { const TEST: fn(); const TEST2: u32; type Test; fn test(); }\n+struct T;\n+\n+impl Test for T {\n+    const TEST: fn <|>\n+}\n+\",\n+            expect![[\"\"]],\n+        );\n+\n+        check(\n+            r\"\n+trait Test { const TEST: u32; const TEST2: u32; type Test; fn test(); }\n+struct T;\n+\n+impl Test for T {\n+    const TEST: T<|>\n+}\n+\",\n+            expect![[\"\"]],\n+        );\n+\n+        check(\n+            r\"\n+trait Test { const TEST: u32; const TEST2: u32; type Test; fn test(); }\n+struct T;\n+\n+impl Test for T {\n+    const TEST: u32 = f<|>\n+}\n+\",\n+            expect![[\"\"]],\n+        );\n+\n+        check(\n+            r\"\n+trait Test { const TEST: u32; const TEST2: u32; type Test; fn test(); }\n+struct T;\n+\n+impl Test for T {\n+    const TEST: u32 = {\n         t<|>\n+    };\n+}\n+\",\n+            expect![[\"\"]],\n+        );\n+\n+        check(\n+            r\"\n+trait Test { const TEST: u32; const TEST2: u32; type Test; fn test(); }\n+struct T;\n+\n+impl Test for T {\n+    const TEST: u32 = {\n+        fn <|>\n+    };\n+}\n+\",\n+            expect![[\"\"]],\n+        );\n+\n+        check(\n+            r\"\n+trait Test { const TEST: u32; const TEST2: u32; type Test; fn test(); }\n+struct T;\n+\n+impl Test for T {\n+    const TEST: u32 = {\n+        fn t<|>\n+    };\n+}\n+\",\n+            expect![[\"\"]],\n+        );\n     }\n+\n+    #[test]\n+    fn no_completion_inside_type() {\n+        check(\n+            r\"\n+trait Test { type Test; type Test2; fn test(); }\n+struct T;\n+\n+impl Test for T {\n+    type Test = T<|>;\n+}\n+\",\n+            expect![[\"\"]],\n+        );\n+\n+        check(\n+            r\"\n+trait Test { type Test; type Test2; fn test(); }\n+struct T;\n+\n+impl Test for T {\n+    type Test = fn <|>;\n }\n \",\n             expect![[\"\"]],"}]}