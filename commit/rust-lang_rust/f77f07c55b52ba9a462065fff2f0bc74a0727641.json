{"sha": "f77f07c55b52ba9a462065fff2f0bc74a0727641", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3N2YwN2M1NWI1MmJhOWE0NjIwNjVmZmYyZjBiYzc0YTA3Mjc2NDE=", "commit": {"author": {"name": "Ben Lewis", "email": "benlewisj@gmail.com", "date": "2020-01-24T07:05:07Z"}, "committer": {"name": "Ben Lewis", "email": "benlewisj@gmail.com", "date": "2020-02-20T06:44:32Z"}, "message": "Canonicalize inputs to const eval where needed.", "tree": {"sha": "242d07c6cc84cf03d336fb2dbd64181f38472942", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/242d07c6cc84cf03d336fb2dbd64181f38472942"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f77f07c55b52ba9a462065fff2f0bc74a0727641", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f77f07c55b52ba9a462065fff2f0bc74a0727641", "html_url": "https://github.com/rust-lang/rust/commit/f77f07c55b52ba9a462065fff2f0bc74a0727641", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f77f07c55b52ba9a462065fff2f0bc74a0727641/comments", "author": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2fb0c28be794f28028884650db70c17fea8e35b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2fb0c28be794f28028884650db70c17fea8e35b", "html_url": "https://github.com/rust-lang/rust/commit/a2fb0c28be794f28028884650db70c17fea8e35b"}], "stats": {"total": 85, "additions": 50, "deletions": 35}, "files": [{"sha": "93d48184b42ae7d6483f254073f686f9174a31df", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f77f07c55b52ba9a462065fff2f0bc74a0727641/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77f07c55b52ba9a462065fff2f0bc74a0727641/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=f77f07c55b52ba9a462065fff2f0bc74a0727641", "patch": "@@ -15,6 +15,8 @@ use rustc::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind, ToTy\n use rustc::middle::free_region::RegionRelations;\n use rustc::middle::lang_items;\n use rustc::middle::region;\n+use rustc::mir;\n+use rustc::mir::interpret::ConstEvalResult;\n use rustc::session::config::BorrowckMode;\n use rustc::ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use rustc::ty::fold::{TypeFoldable, TypeFolder};\n@@ -63,6 +65,7 @@ pub mod resolve;\n mod sub;\n pub mod type_variable;\n \n+use crate::infer::canonical::OriginalQueryValues;\n pub use rustc::infer::unify_key;\n \n #[must_use]\n@@ -1565,6 +1568,35 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         self.universe.set(u);\n         u\n     }\n+\n+    /// Resolves and evaluates a constant.\n+    ///\n+    /// The constant can be located on a trait like `<A as B>::C`, in which case the given\n+    /// substitutions and environment are used to resolve the constant. Alternatively if the\n+    /// constant has generic parameters in scope the substitutions are used to evaluate the value of\n+    /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count\n+    /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still\n+    /// too generic for the constant to be evaluated then `Err(ErrorHandled::TooGeneric)` is\n+    /// returned.\n+    ///\n+    /// This handles inferences variables within both `param_env` and `substs` by\n+    /// performing the operation on their respective canonical forms.\n+    pub fn const_eval_resolve(\n+        &self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        def_id: DefId,\n+        substs: SubstsRef<'tcx>,\n+        promoted: Option<mir::Promoted>,\n+        span: Option<Span>,\n+    ) -> ConstEvalResult<'tcx> {\n+        let mut original_values = OriginalQueryValues::default();\n+        let canonical = self.canonicalize_query(&(param_env, substs), &mut original_values);\n+\n+        let (param_env, substs) = canonical.value;\n+        // The return value is the evaluated value which doesn't contain any reference to inference\n+        // variables, thus we don't need to substitute back the original values.\n+        self.tcx.const_eval_resolve(param_env, def_id, substs, promoted, span)\n+    }\n }\n \n pub struct ShallowResolver<'a, 'tcx> {"}, {"sha": "28d3f26918019d9b97744cbe393bb90ca5165d25", "filename": "src/librustc_infer/traits/fulfill.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f77f07c55b52ba9a462065fff2f0bc74a0727641/src%2Flibrustc_infer%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77f07c55b52ba9a462065fff2f0bc74a0727641/src%2Flibrustc_infer%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ffulfill.rs?ref=f77f07c55b52ba9a462065fff2f0bc74a0727641", "patch": "@@ -510,27 +510,15 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n             }\n \n             ty::Predicate::ConstEvaluatable(def_id, substs) => {\n-                if obligation.param_env.has_local_value() {\n-                    ProcessResult::Unchanged\n-                } else {\n-                    if !substs.has_local_value() {\n-                        match self.selcx.tcx().const_eval_resolve(\n-                            obligation.param_env,\n-                            def_id,\n-                            substs,\n-                            None,\n-                            Some(obligation.cause.span),\n-                        ) {\n-                            Ok(_) => ProcessResult::Changed(vec![]),\n-                            Err(err) => {\n-                                ProcessResult::Error(CodeSelectionError(ConstEvalFailure(err)))\n-                            }\n-                        }\n-                    } else {\n-                        pending_obligation.stalled_on =\n-                            substs.types().map(|ty| infer_ty(ty)).collect();\n-                        ProcessResult::Unchanged\n-                    }\n+                match self.selcx.infcx().const_eval_resolve(\n+                    obligation.param_env,\n+                    def_id,\n+                    substs,\n+                    None,\n+                    Some(obligation.cause.span),\n+                ) {\n+                    Ok(_) => ProcessResult::Changed(vec![]),\n+                    Err(err) => ProcessResult::Error(CodeSelectionError(ConstEvalFailure(err))),\n                 }\n             }\n         }"}, {"sha": "4572b3c026e8993450d86d7665a355bbfcd87390", "filename": "src/librustc_infer/traits/select.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f77f07c55b52ba9a462065fff2f0bc74a0727641/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77f07c55b52ba9a462065fff2f0bc74a0727641/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fselect.rs?ref=f77f07c55b52ba9a462065fff2f0bc74a0727641", "patch": "@@ -532,20 +532,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             ty::Predicate::ConstEvaluatable(def_id, substs) => {\n-                if !(obligation.param_env, substs).has_local_value() {\n-                    match self.tcx().const_eval_resolve(\n-                        obligation.param_env,\n-                        def_id,\n-                        substs,\n-                        None,\n-                        None,\n-                    ) {\n-                        Ok(_) => Ok(EvaluatedToOk),\n-                        Err(_) => Ok(EvaluatedToErr),\n-                    }\n-                } else {\n-                    // Inference variables still left in param_env or substs.\n-                    Ok(EvaluatedToAmbig)\n+                match self.tcx().const_eval_resolve(\n+                    obligation.param_env,\n+                    def_id,\n+                    substs,\n+                    None,\n+                    None,\n+                ) {\n+                    Ok(_) => Ok(EvaluatedToOk),\n+                    Err(_) => Ok(EvaluatedToErr),\n                 }\n             }\n         }"}]}