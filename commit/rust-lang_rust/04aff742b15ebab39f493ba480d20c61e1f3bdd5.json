{"sha": "04aff742b15ebab39f493ba480d20c61e1f3bdd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YWZmNzQyYjE1ZWJhYjM5ZjQ5M2JhNDgwZDIwYzYxZTFmM2JkZDU=", "commit": {"author": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-02-15T20:48:20Z"}, "committer": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-02-16T15:10:23Z"}, "message": "show names for record fields in enum completion", "tree": {"sha": "b2b11fc1bbf48128b4694cb4eed0b734a8500d81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2b11fc1bbf48128b4694cb4eed0b734a8500d81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04aff742b15ebab39f493ba480d20c61e1f3bdd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04aff742b15ebab39f493ba480d20c61e1f3bdd5", "html_url": "https://github.com/rust-lang/rust/commit/04aff742b15ebab39f493ba480d20c61e1f3bdd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04aff742b15ebab39f493ba480d20c61e1f3bdd5/comments", "author": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2b94cbf71738e7bc372328f22c8dcc8c734b34c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b94cbf71738e7bc372328f22c8dcc8c734b34c", "html_url": "https://github.com/rust-lang/rust/commit/b2b94cbf71738e7bc372328f22c8dcc8c734b34c"}], "stats": {"total": 116, "additions": 109, "deletions": 7}, "files": [{"sha": "b6adb7589df5a6c62820b433625c4daa74e70b49", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/04aff742b15ebab39f493ba480d20c61e1f3bdd5/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04aff742b15ebab39f493ba480d20c61e1f3bdd5/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=04aff742b15ebab39f493ba480d20c61e1f3bdd5", "patch": "@@ -3,6 +3,7 @@ use std::sync::Arc;\n \n use either::Either;\n use hir_def::{\n+    adt::StructKind,\n     adt::VariantData,\n     builtin_type::BuiltinType,\n     docs::Documentation,\n@@ -424,6 +425,10 @@ impl EnumVariant {\n             .collect()\n     }\n \n+    pub fn kind(self, db: &impl HirDatabase) -> StructKind {\n+        self.variant_data(db).kind()\n+    }\n+\n     pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n         db.enum_data(self.parent.id).variants[self.id].variant_data.clone()\n     }"}, {"sha": "7a9745ebebc5619bec8ed894fd0c1909fe0c5698", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04aff742b15ebab39f493ba480d20c61e1f3bdd5/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04aff742b15ebab39f493ba480d20c61e1f3bdd5/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=04aff742b15ebab39f493ba480d20c61e1f3bdd5", "patch": "@@ -50,6 +50,7 @@ pub use crate::{\n };\n \n pub use hir_def::{\n+    adt::StructKind,\n     body::scope::ExprScopes,\n     builtin_type::BuiltinType,\n     docs::Documentation,"}, {"sha": "4582c7314a5e38c19fbacd76927fbb8850b7c956", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/04aff742b15ebab39f493ba480d20c61e1f3bdd5/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04aff742b15ebab39f493ba480d20c61e1f3bdd5/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=04aff742b15ebab39f493ba480d20c61e1f3bdd5", "patch": "@@ -140,6 +140,13 @@ impl VariantData {\n         self.fields().iter().find_map(|(id, data)| if &data.name == name { Some(id) } else { None })\n     }\n \n+    pub fn kind(&self) -> StructKind {\n+        match self {\n+            VariantData::Record(_) => StructKind::Record,\n+            VariantData::Tuple(_) => StructKind::Tuple,\n+            VariantData::Unit => StructKind::Unit,\n+        }\n+    }\n     pub fn is_unit(&self) -> bool {\n         match self {\n             VariantData::Unit => true,\n@@ -173,7 +180,7 @@ impl HasChildSource for VariantId {\n     }\n }\n \n-enum StructKind {\n+pub enum StructKind {\n     Tuple,\n     Record,\n     Unit,"}, {"sha": "4de09d82cf4ab853eb11902cbfb7c652731e7ff2", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 95, "deletions": 6, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/04aff742b15ebab39f493ba480d20c61e1f3bdd5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04aff742b15ebab39f493ba480d20c61e1f3bdd5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=04aff742b15ebab39f493ba480d20c61e1f3bdd5", "patch": "@@ -1,6 +1,6 @@\n //! This modules takes care of rendering various definitions as completion items.\n \n-use hir::{db::HirDatabase, Docs, HasAttrs, HasSource, HirDisplay, ScopeDef, Type};\n+use hir::{db::HirDatabase, Docs, HasAttrs, HasSource, HirDisplay, ScopeDef, StructKind, Type};\n use join_to_string::join;\n use ra_syntax::ast::NameOwner;\n use test_utils::tested_by;\n@@ -268,11 +268,22 @@ impl Completions {\n     pub(crate) fn add_enum_variant(&mut self, ctx: &CompletionContext, variant: hir::EnumVariant) {\n         let is_deprecated = is_deprecated(variant, ctx.db);\n         let name = variant.name(ctx.db);\n-        let detail_types = variant.fields(ctx.db).into_iter().map(|field| field.ty(ctx.db));\n-        let detail = join(detail_types.map(|t| t.display(ctx.db).to_string()))\n-            .separator(\", \")\n-            .surround_with(\"(\", \")\")\n-            .to_string();\n+        let detail_types =\n+            variant.fields(ctx.db).into_iter().map(|field| (field.name(ctx.db), field.ty(ctx.db)));\n+        let detail = match variant.kind(ctx.db) {\n+            StructKind::Tuple | StructKind::Unit => {\n+                join(detail_types.map(|(_, t)| t.display(ctx.db).to_string()))\n+                    .separator(\", \")\n+                    .surround_with(\"(\", \")\")\n+                    .to_string()\n+            }\n+            StructKind::Record => {\n+                join(detail_types.map(|(n, t)| format!(\"{}: {}\", n, t.display(ctx.db).to_string())))\n+                    .separator(\", \")\n+                    .surround_with(\"{\", \"}\")\n+                    .to_string()\n+            }\n+        };\n         CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.to_string())\n             .kind(CompletionItemKind::EnumVariant)\n             .set_documentation(variant.docs(ctx.db))\n@@ -297,6 +308,84 @@ mod tests {\n         do_completion(code, CompletionKind::Reference)\n     }\n \n+    #[test]\n+    fn enum_detail_includes_names_for_record() {\n+        assert_debug_snapshot!(\n+        do_reference_completion(\n+            r#\"\n+                enum Foo {\n+                    Foo {x: i32, y: i32}\n+                }\n+\n+                fn main() { Foo::Fo<|> }\n+                \"#,\n+        ),\n+        @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Foo\",\n+                source_range: [121; 123),\n+                delete: [121; 123),\n+                insert: \"Foo\",\n+                kind: EnumVariant,\n+                detail: \"{x: i32, y: i32}\",\n+            },\n+        ]\"###\n+        );\n+    }\n+\n+    #[test]\n+    fn enum_detail_doesnt_include_names_for_tuple() {\n+        assert_debug_snapshot!(\n+        do_reference_completion(\n+            r#\"\n+                enum Foo {\n+                    Foo (i32, i32)\n+                }\n+\n+                fn main() { Foo::Fo<|> }\n+                \"#,\n+        ),\n+        @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Foo\",\n+                source_range: [115; 117),\n+                delete: [115; 117),\n+                insert: \"Foo\",\n+                kind: EnumVariant,\n+                detail: \"(i32, i32)\",\n+            },\n+        ]\"###\n+        );\n+    }\n+\n+    #[test]\n+    fn enum_detail_just_parentheses_for_unit() {\n+        assert_debug_snapshot!(\n+        do_reference_completion(\n+            r#\"\n+                enum Foo {\n+                    Foo\n+                }\n+\n+                fn main() { Foo::Fo<|> }\n+                \"#,\n+        ),\n+        @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Foo\",\n+                source_range: [104; 106),\n+                delete: [104; 106),\n+                insert: \"Foo\",\n+                kind: EnumVariant,\n+                detail: \"()\",\n+            },\n+        ]\"###\n+        );\n+    }\n+\n     #[test]\n     fn sets_deprecated_flag_in_completion_items() {\n         assert_debug_snapshot!("}]}