{"sha": "0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNTFmMmY1YTU4MGE3ZTIzOWFjY2QwY2M1ZjNkYTJlOGNkZjZmOGM=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-02-25T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-02-26T20:45:34Z"}, "message": "Use byte offsets when emitting debuginfo columns", "tree": {"sha": "73308eed686a988d6628dc64eb0b7e82bb9a4916", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73308eed686a988d6628dc64eb0b7e82bb9a4916"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c", "html_url": "https://github.com/rust-lang/rust/commit/0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1a54725081227a3866669c167bee4c0559f5362", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a54725081227a3866669c167bee4c0559f5362", "html_url": "https://github.com/rust-lang/rust/commit/e1a54725081227a3866669c167bee4c0559f5362"}], "stats": {"total": 116, "additions": 68, "deletions": 48}, "files": [{"sha": "09422f4ec3768824e92cd9e50f0298b372aa2cb5", "filename": "src/librustc_codegen_llvm/debuginfo/create_scope_map.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs?ref=0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c", "patch": "@@ -1,16 +1,12 @@\n-use super::metadata::file_metadata;\n-use super::utils::{span_start, DIB};\n+use super::metadata::{file_metadata, UNKNOWN_COLUMN_NUMBER, UNKNOWN_LINE_NUMBER};\n+use super::utils::DIB;\n use rustc_codegen_ssa::mir::debuginfo::{DebugScope, FunctionDebugContext};\n \n use crate::common::CodegenCx;\n use crate::llvm;\n use crate::llvm::debuginfo::{DIScope, DISubprogram};\n use rustc::mir::{Body, SourceScope};\n \n-use libc::c_uint;\n-\n-use rustc_span::Pos;\n-\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::Idx;\n \n@@ -54,7 +50,7 @@ fn make_mir_scope(\n         debug_context.scopes[parent]\n     } else {\n         // The root is the function itself.\n-        let loc = span_start(cx, mir.span);\n+        let loc = cx.lookup_debug_loc(mir.span.lo());\n         debug_context.scopes[scope] = DebugScope {\n             scope_metadata: Some(fn_metadata),\n             file_start_pos: loc.file.start_pos,\n@@ -70,17 +66,16 @@ fn make_mir_scope(\n         return;\n     }\n \n-    let loc = span_start(cx, scope_data.span);\n+    let loc = cx.lookup_debug_loc(scope_data.span.lo());\n     let file_metadata = file_metadata(cx, &loc.file.name, debug_context.defining_crate);\n \n     let scope_metadata = unsafe {\n         Some(llvm::LLVMRustDIBuilderCreateLexicalBlock(\n             DIB(cx),\n             parent_scope.scope_metadata.unwrap(),\n             file_metadata,\n-            loc.line as c_uint,\n-            // Loc column is 0-based while debug one is 1-based.\n-            loc.col.to_usize() as c_uint + 1,\n+            loc.line.unwrap_or(UNKNOWN_LINE_NUMBER),\n+            loc.col.unwrap_or(UNKNOWN_COLUMN_NUMBER),\n         ))\n     };\n     debug_context.scopes[scope] = DebugScope {"}, {"sha": "8dfc55e2854b4cb18e4a87db3f62d45c8b2d060e", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c", "patch": "@@ -5,7 +5,7 @@ use self::RecursiveTypeDescription::*;\n use super::namespace::mangled_name_of_instance;\n use super::type_names::compute_debuginfo_type_name;\n use super::utils::{\n-    create_DIArray, debug_context, get_namespace_for_item, is_node_local_to_unit, span_start, DIB,\n+    create_DIArray, debug_context, get_namespace_for_item, is_node_local_to_unit, DIB,\n };\n use super::CrateDebugContext;\n \n@@ -2280,10 +2280,10 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n     let span = tcx.def_span(def_id);\n \n     let (file_metadata, line_number) = if !span.is_dummy() {\n-        let loc = span_start(cx, span);\n-        (file_metadata(cx, &loc.file.name, LOCAL_CRATE), loc.line as c_uint)\n+        let loc = cx.lookup_debug_loc(span.lo());\n+        (file_metadata(cx, &loc.file.name, LOCAL_CRATE), loc.line)\n     } else {\n-        (unknown_file_metadata(cx), UNKNOWN_LINE_NUMBER)\n+        (unknown_file_metadata(cx), None)\n     };\n \n     let is_local_to_unit = is_node_local_to_unit(cx, def_id);\n@@ -2308,7 +2308,7 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n             // which is what we want for no_mangle statics\n             linkage_name.as_ref().map_or(ptr::null(), |name| name.as_ptr()),\n             file_metadata,\n-            line_number,\n+            line_number.unwrap_or(UNKNOWN_LINE_NUMBER),\n             type_metadata,\n             is_local_to_unit,\n             global,"}, {"sha": "73e993bb46b876525fca2825ff2568a7b635e148", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c", "patch": "@@ -3,10 +3,10 @@ mod doc;\n \n use rustc_codegen_ssa::mir::debuginfo::VariableKind::*;\n \n-use self::metadata::{file_metadata, type_metadata, TypeMap};\n+use self::metadata::{file_metadata, type_metadata, TypeMap, UNKNOWN_LINE_NUMBER};\n use self::namespace::mangled_name_of_instance;\n use self::type_names::compute_debuginfo_type_name;\n-use self::utils::{create_DIArray, is_node_local_to_unit, span_start, DIB};\n+use self::utils::{create_DIArray, is_node_local_to_unit, DIB};\n \n use crate::llvm;\n use crate::llvm::debuginfo::{\n@@ -257,7 +257,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n         let def_id = instance.def_id();\n         let containing_scope = get_containing_scope(self, instance);\n-        let loc = span_start(self, span);\n+        let loc = self.lookup_debug_loc(span.lo());\n         let file_metadata = file_metadata(self, &loc.file.name, def_id.krate);\n \n         let function_type_metadata = unsafe {\n@@ -313,9 +313,9 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 function_name.as_ptr(),\n                 linkage_name.as_ptr(),\n                 file_metadata,\n-                loc.line as c_uint,\n+                loc.line.unwrap_or(UNKNOWN_LINE_NUMBER),\n                 function_type_metadata,\n-                scope_line as c_uint,\n+                scope_line.unwrap_or(UNKNOWN_LINE_NUMBER),\n                 flags,\n                 spflags,\n                 llfn,\n@@ -538,7 +538,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         variable_kind: VariableKind,\n         span: Span,\n     ) -> &'ll DIVariable {\n-        let loc = span_start(self, span);\n+        let loc = self.lookup_debug_loc(span.lo());\n         let file_metadata = file_metadata(self, &loc.file.name, dbg_context.defining_crate);\n \n         let type_metadata = type_metadata(self, variable_type, span);\n@@ -557,7 +557,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 scope_metadata,\n                 name.as_ptr(),\n                 file_metadata,\n-                loc.line as c_uint,\n+                loc.line.unwrap_or(UNKNOWN_LINE_NUMBER),\n                 type_metadata,\n                 true,\n                 DIFlags::FlagZero,"}, {"sha": "66ae9d72c3e5195fb1d10b462fd1cdfe6f965154", "filename": "src/librustc_codegen_llvm/debuginfo/source_loc.rs", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs?ref=0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c", "patch": "@@ -1,33 +1,58 @@\n-use super::metadata::UNKNOWN_COLUMN_NUMBER;\n-use super::utils::{debug_context, span_start};\n+use super::metadata::{UNKNOWN_COLUMN_NUMBER, UNKNOWN_LINE_NUMBER};\n+use super::utils::debug_context;\n \n use crate::common::CodegenCx;\n use crate::llvm::debuginfo::DIScope;\n use crate::llvm::{self, Value};\n use rustc_codegen_ssa::traits::*;\n \n-use libc::c_uint;\n-use rustc_span::{Pos, Span};\n+use rustc_data_structures::sync::Lrc;\n+use rustc_span::{BytePos, Pos, SourceFile, SourceFileAndLine, Span};\n+\n+/// A source code location used to generate debug information.\n+pub struct DebugLoc {\n+    /// Information about the original source file.\n+    pub file: Lrc<SourceFile>,\n+    /// The (1-based) line number.\n+    pub line: Option<u32>,\n+    /// The (1-based) column number.\n+    pub col: Option<u32>,\n+}\n \n impl CodegenCx<'ll, '_> {\n-    pub fn create_debug_loc(&self, scope: &'ll DIScope, span: Span) -> &'ll Value {\n-        let loc = span_start(self, span);\n+    /// Looks up debug source information about a `BytePos`.\n+    pub fn lookup_debug_loc(&self, pos: BytePos) -> DebugLoc {\n+        let (file, line, col) = match self.sess().source_map().lookup_line(pos) {\n+            Ok(SourceFileAndLine { sf: file, line }) => {\n+                let line_pos = file.line_begin_pos(pos);\n+\n+                // Use 1-based indexing.\n+                let line = (line + 1) as u32;\n+                let col = (pos - line_pos).to_u32() + 1;\n+\n+                (file, Some(line), Some(col))\n+            }\n+            Err(file) => (file, None, None),\n+        };\n \n-        // For MSVC, set the column number to zero.\n+        // For MSVC, omit the column number.\n         // Otherwise, emit it. This mimics clang behaviour.\n         // See discussion in https://github.com/rust-lang/rust/issues/42921\n-        let col_used = if self.sess().target.target.options.is_like_msvc {\n-            UNKNOWN_COLUMN_NUMBER\n+        if self.sess().target.target.options.is_like_msvc {\n+            DebugLoc { file, line, col: None }\n         } else {\n-            // Loc column is 0-based while debug one is 1-based.\n-            loc.col.to_usize() as c_uint + 1\n-        };\n+            DebugLoc { file, line, col }\n+        }\n+    }\n+\n+    pub fn create_debug_loc(&self, scope: &'ll DIScope, span: Span) -> &'ll Value {\n+        let DebugLoc { line, col, .. } = self.lookup_debug_loc(span.lo());\n \n         unsafe {\n             llvm::LLVMRustDIBuilderCreateDebugLocation(\n                 debug_context(self).llcontext,\n-                loc.line as c_uint,\n-                col_used,\n+                line.unwrap_or(UNKNOWN_LINE_NUMBER),\n+                col.unwrap_or(UNKNOWN_COLUMN_NUMBER),\n                 scope,\n                 None,\n             )"}, {"sha": "bef40decdf3ab0912258c127cfe2d74d06fffdbf", "filename": "src/librustc_codegen_llvm/debuginfo/utils.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Futils.rs?ref=0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c", "patch": "@@ -9,9 +9,6 @@ use rustc_hir::def_id::DefId;\n use crate::common::CodegenCx;\n use crate::llvm;\n use crate::llvm::debuginfo::{DIArray, DIBuilder, DIDescriptor, DIScope};\n-use rustc_codegen_ssa::traits::*;\n-\n-use rustc_span::Span;\n \n pub fn is_node_local_to_unit(cx: &CodegenCx<'_, '_>, def_id: DefId) -> bool {\n     // The is_local_to_unit flag indicates whether a function is local to the\n@@ -32,11 +29,6 @@ pub fn create_DIArray(builder: &DIBuilder<'ll>, arr: &[Option<&'ll DIDescriptor>\n     };\n }\n \n-/// Returns rustc_span::Loc corresponding to the beginning of the span\n-pub fn span_start(cx: &CodegenCx<'_, '_>, span: Span) -> rustc_span::Loc {\n-    cx.sess().source_map().lookup_char_pos(span.lo())\n-}\n-\n #[inline]\n pub fn debug_context(cx: &'a CodegenCx<'ll, 'tcx>) -> &'a CrateDebugContext<'ll, 'tcx> {\n     cx.dbg_cx.as_ref().unwrap()"}, {"sha": "f348c48566d51ac394da449401ed27d3667cdd55", "filename": "src/test/codegen/debug-column.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c/src%2Ftest%2Fcodegen%2Fdebug-column.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c/src%2Ftest%2Fcodegen%2Fdebug-column.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdebug-column.rs?ref=0c51f2f5a580a7e239accd0cc5f3da2e8cdf6f8c", "patch": "@@ -1,16 +1,24 @@\n-// Verify that emitted debuginfo column nubmers are 1-based. Regression test for issue #65437.\n+// Verify that debuginfo column nubmers are 1-based byte offsets.\n //\n // ignore-windows\n // compile-flags: -C debuginfo=2\n \n fn main() {\n     unsafe {\n-        // CHECK: call void @giraffe(), !dbg [[DBG:!.*]]\n-        // CHECK: [[DBG]] = !DILocation(line: 10, column: 9\n+        // Column numbers are 1-based. Regression test for #65437.\n+        // CHECK: call void @giraffe(), !dbg [[A:!.*]]\n         giraffe();\n+\n+        // Column numbers use byte offests. Regression test for #67360\n+        // CHECK: call void @turtle(), !dbg [[B:!.*]]\n+/* \u017c */ turtle();\n+\n+        // CHECK: [[A]] = !DILocation(line: 10, column: 9,\n+        // CHECK: [[B]] = !DILocation(line: 14, column: 10,\n     }\n }\n \n extern {\n     fn giraffe();\n+    fn turtle();\n }"}]}