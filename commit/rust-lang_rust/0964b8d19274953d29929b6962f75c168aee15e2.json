{"sha": "0964b8d19274953d29929b6962f75c168aee15e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NjRiOGQxOTI3NDk1M2QyOTkyOWI2OTYyZjc1YzE2OGFlZTE1ZTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-18T19:51:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-18T19:51:46Z"}, "message": "Auto merge of #5046 - JohnTitor:order-nonminimal-bool, r=flip1995\n\nKeep the ordering in `nonminimal_bool` lint\n\nI believe it shouldn't cause any regression but feel free to let me know if you have a doubtful example.\nAlso, splits up `booleans` ui test.\n\nFixes #5045\n\nchangelog: none", "tree": {"sha": "2ce702793ac8593fcd5039512d820ff57ed72f2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ce702793ac8593fcd5039512d820ff57ed72f2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0964b8d19274953d29929b6962f75c168aee15e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0964b8d19274953d29929b6962f75c168aee15e2", "html_url": "https://github.com/rust-lang/rust/commit/0964b8d19274953d29929b6962f75c168aee15e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0964b8d19274953d29929b6962f75c168aee15e2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee06aa990ff0169ac43834f02466e500dc8b3bda", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee06aa990ff0169ac43834f02466e500dc8b3bda", "html_url": "https://github.com/rust-lang/rust/commit/ee06aa990ff0169ac43834f02466e500dc8b3bda"}, {"sha": "3885033e5f161982766d75dee973c4999969ba11", "url": "https://api.github.com/repos/rust-lang/rust/commits/3885033e5f161982766d75dee973c4999969ba11", "html_url": "https://github.com/rust-lang/rust/commit/3885033e5f161982766d75dee973c4999969ba11"}], "stats": {"total": 604, "additions": 339, "deletions": 265}, "files": [{"sha": "60e62542a7255b5499e497fe06752fa08b8ae656", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0964b8d19274953d29929b6962f75c168aee15e2/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0964b8d19274953d29929b6962f75c168aee15e2/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=0964b8d19274953d29929b6962f75c168aee15e2", "patch": "@@ -207,7 +207,7 @@ impl<'a, 'tcx, 'v> SuggestContext<'a, 'tcx, 'v> {\n                 }\n             },\n             Or(v) => {\n-                for (index, inner) in v.iter().enumerate() {\n+                for (index, inner) in v.iter().rev().enumerate() {\n                     if index > 0 {\n                         self.output.push_str(\" || \");\n                     }"}, {"sha": "b83df6f8138519636108b6316b333895d9d94280", "filename": "tests/ui/booleans.stderr", "status": "removed", "additions": 0, "deletions": 206, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/ee06aa990ff0169ac43834f02466e500dc8b3bda/tests%2Fui%2Fbooleans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee06aa990ff0169ac43834f02466e500dc8b3bda/tests%2Fui%2Fbooleans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.stderr?ref=ee06aa990ff0169ac43834f02466e500dc8b3bda", "patch": "@@ -1,206 +0,0 @@\n-error: this boolean expression contains a logic bug\n-  --> $DIR/booleans.rs:10:13\n-   |\n-LL |     let _ = a && b || a;\n-   |             ^^^^^^^^^^^ help: it would look like the following: `a`\n-   |\n-   = note: `-D clippy::logic-bug` implied by `-D warnings`\n-help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/booleans.rs:10:18\n-   |\n-LL |     let _ = a && b || a;\n-   |                  ^\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:12:13\n-   |\n-LL |     let _ = !true;\n-   |             ^^^^^ help: try: `false`\n-   |\n-   = note: `-D clippy::nonminimal-bool` implied by `-D warnings`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:13:13\n-   |\n-LL |     let _ = !false;\n-   |             ^^^^^^ help: try: `true`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:14:13\n-   |\n-LL |     let _ = !!a;\n-   |             ^^^ help: try: `a`\n-\n-error: this boolean expression contains a logic bug\n-  --> $DIR/booleans.rs:15:13\n-   |\n-LL |     let _ = false && a;\n-   |             ^^^^^^^^^^ help: it would look like the following: `false`\n-   |\n-help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/booleans.rs:15:22\n-   |\n-LL |     let _ = false && a;\n-   |                      ^\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:16:13\n-   |\n-LL |     let _ = false || a;\n-   |             ^^^^^^^^^^ help: try: `a`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:21:13\n-   |\n-LL |     let _ = !(!a && b);\n-   |             ^^^^^^^^^^ help: try: `!b || a`\n-\n-error: this boolean expression contains a logic bug\n-  --> $DIR/booleans.rs:31:13\n-   |\n-LL |     let _ = a == b && a != b;\n-   |             ^^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n-   |\n-help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/booleans.rs:31:13\n-   |\n-LL |     let _ = a == b && a != b;\n-   |             ^^^^^^\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:32:13\n-   |\n-LL |     let _ = a == b && c == 5 && a == b;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try\n-   |\n-LL |     let _ = a == b && c == 5;\n-   |             ^^^^^^^^^^^^^^^^\n-LL |     let _ = !(c != 5 || a != b);\n-   |             ^^^^^^^^^^^^^^^^^^^\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:33:13\n-   |\n-LL |     let _ = a == b && c == 5 && b == a;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try\n-   |\n-LL |     let _ = a == b && c == 5;\n-   |             ^^^^^^^^^^^^^^^^\n-LL |     let _ = !(c != 5 || a != b);\n-   |             ^^^^^^^^^^^^^^^^^^^\n-\n-error: this boolean expression contains a logic bug\n-  --> $DIR/booleans.rs:34:13\n-   |\n-LL |     let _ = a < b && a >= b;\n-   |             ^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n-   |\n-help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/booleans.rs:34:13\n-   |\n-LL |     let _ = a < b && a >= b;\n-   |             ^^^^^\n-\n-error: this boolean expression contains a logic bug\n-  --> $DIR/booleans.rs:35:13\n-   |\n-LL |     let _ = a > b && a <= b;\n-   |             ^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n-   |\n-help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/booleans.rs:35:13\n-   |\n-LL |     let _ = a > b && a <= b;\n-   |             ^^^^^\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:37:13\n-   |\n-LL |     let _ = a != b || !(a != b || c == d);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try\n-   |\n-LL |     let _ = c != d || a != b;\n-   |             ^^^^^^^^^^^^^^^^\n-LL |     let _ = !(a == b && c == d);\n-   |             ^^^^^^^^^^^^^^^^^^^\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:45:13\n-   |\n-LL |     let _ = !a.is_some();\n-   |             ^^^^^^^^^^^^ help: try: `a.is_none()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:47:13\n-   |\n-LL |     let _ = !a.is_none();\n-   |             ^^^^^^^^^^^^ help: try: `a.is_some()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:49:13\n-   |\n-LL |     let _ = !b.is_err();\n-   |             ^^^^^^^^^^^ help: try: `b.is_ok()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:51:13\n-   |\n-LL |     let _ = !b.is_ok();\n-   |             ^^^^^^^^^^ help: try: `b.is_err()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:53:13\n-   |\n-LL |     let _ = !(a.is_some() && !c);\n-   |             ^^^^^^^^^^^^^^^^^^^^ help: try: `c || a.is_none()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:54:26\n-   |\n-LL |     let _ = !(!c ^ c) || !a.is_some();\n-   |                          ^^^^^^^^^^^^ help: try: `a.is_none()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:55:25\n-   |\n-LL |     let _ = (!c ^ c) || !a.is_some();\n-   |                         ^^^^^^^^^^^^ help: try: `a.is_none()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:56:23\n-   |\n-LL |     let _ = !c ^ c || !a.is_some();\n-   |                       ^^^^^^^^^^^^ help: try: `a.is_none()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:128:8\n-   |\n-LL |     if !res.is_ok() {}\n-   |        ^^^^^^^^^^^^ help: try: `res.is_err()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:129:8\n-   |\n-LL |     if !res.is_err() {}\n-   |        ^^^^^^^^^^^^^ help: try: `res.is_ok()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:132:8\n-   |\n-LL |     if !res.is_some() {}\n-   |        ^^^^^^^^^^^^^^ help: try: `res.is_none()`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:133:8\n-   |\n-LL |     if !res.is_none() {}\n-   |        ^^^^^^^^^^^^^^ help: try: `res.is_some()`\n-\n-error: aborting due to 25 previous errors\n-"}, {"sha": "b4163d776e73abf4da6f4c565b50d4386052a1c5", "filename": "tests/ui/logic_bug.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0964b8d19274953d29929b6962f75c168aee15e2/tests%2Fui%2Flogic_bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0964b8d19274953d29929b6962f75c168aee15e2/tests%2Fui%2Flogic_bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flogic_bug.rs?ref=0964b8d19274953d29929b6962f75c168aee15e2", "patch": "@@ -0,0 +1,26 @@\n+#![allow(unused, clippy::many_single_char_names)]\n+#![warn(clippy::logic_bug)]\n+\n+fn main() {\n+    let a: bool = unimplemented!();\n+    let b: bool = unimplemented!();\n+    let c: bool = unimplemented!();\n+    let d: bool = unimplemented!();\n+    let e: bool = unimplemented!();\n+    let _ = a && b || a;\n+    let _ = !(a && b);\n+    let _ = false && a;\n+    // don't lint on cfgs\n+    let _ = cfg!(you_shall_not_not_pass) && a;\n+    let _ = a || !b || !c || !d || !e;\n+    let _ = !(a && b || c);\n+}\n+\n+fn equality_stuff() {\n+    let a: i32 = unimplemented!();\n+    let b: i32 = unimplemented!();\n+    let _ = a == b && a != b;\n+    let _ = a < b && a >= b;\n+    let _ = a > b && a <= b;\n+    let _ = a > b && a == b;\n+}"}, {"sha": "8f55e1c8ad859ee7f2ca6c12d52989717515de1f", "filename": "tests/ui/logic_bug.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/0964b8d19274953d29929b6962f75c168aee15e2/tests%2Fui%2Flogic_bug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0964b8d19274953d29929b6962f75c168aee15e2/tests%2Fui%2Flogic_bug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flogic_bug.stderr?ref=0964b8d19274953d29929b6962f75c168aee15e2", "patch": "@@ -0,0 +1,63 @@\n+error: this boolean expression contains a logic bug\n+  --> $DIR/logic_bug.rs:10:13\n+   |\n+LL |     let _ = a && b || a;\n+   |             ^^^^^^^^^^^ help: it would look like the following: `a`\n+   |\n+   = note: `-D clippy::logic-bug` implied by `-D warnings`\n+help: this expression can be optimized out by applying boolean operations to the outer expression\n+  --> $DIR/logic_bug.rs:10:18\n+   |\n+LL |     let _ = a && b || a;\n+   |                  ^\n+\n+error: this boolean expression contains a logic bug\n+  --> $DIR/logic_bug.rs:12:13\n+   |\n+LL |     let _ = false && a;\n+   |             ^^^^^^^^^^ help: it would look like the following: `false`\n+   |\n+help: this expression can be optimized out by applying boolean operations to the outer expression\n+  --> $DIR/logic_bug.rs:12:22\n+   |\n+LL |     let _ = false && a;\n+   |                      ^\n+\n+error: this boolean expression contains a logic bug\n+  --> $DIR/logic_bug.rs:22:13\n+   |\n+LL |     let _ = a == b && a != b;\n+   |             ^^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n+   |\n+help: this expression can be optimized out by applying boolean operations to the outer expression\n+  --> $DIR/logic_bug.rs:22:13\n+   |\n+LL |     let _ = a == b && a != b;\n+   |             ^^^^^^\n+\n+error: this boolean expression contains a logic bug\n+  --> $DIR/logic_bug.rs:23:13\n+   |\n+LL |     let _ = a < b && a >= b;\n+   |             ^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n+   |\n+help: this expression can be optimized out by applying boolean operations to the outer expression\n+  --> $DIR/logic_bug.rs:23:13\n+   |\n+LL |     let _ = a < b && a >= b;\n+   |             ^^^^^\n+\n+error: this boolean expression contains a logic bug\n+  --> $DIR/logic_bug.rs:24:13\n+   |\n+LL |     let _ = a > b && a <= b;\n+   |             ^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n+   |\n+help: this expression can be optimized out by applying boolean operations to the outer expression\n+  --> $DIR/logic_bug.rs:24:13\n+   |\n+LL |     let _ = a > b && a <= b;\n+   |             ^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "7ea154cb9b0187346be5e41da300559a6050866d", "filename": "tests/ui/nonminimal_bool.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0964b8d19274953d29929b6962f75c168aee15e2/tests%2Fui%2Fnonminimal_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0964b8d19274953d29929b6962f75c168aee15e2/tests%2Fui%2Fnonminimal_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool.rs?ref=0964b8d19274953d29929b6962f75c168aee15e2", "patch": "@@ -0,0 +1,52 @@\n+#![allow(unused, clippy::many_single_char_names)]\n+#![warn(clippy::nonminimal_bool)]\n+\n+fn main() {\n+    let a: bool = unimplemented!();\n+    let b: bool = unimplemented!();\n+    let c: bool = unimplemented!();\n+    let d: bool = unimplemented!();\n+    let e: bool = unimplemented!();\n+    let _ = !true;\n+    let _ = !false;\n+    let _ = !!a;\n+    let _ = false || a;\n+    // don't lint on cfgs\n+    let _ = cfg!(you_shall_not_not_pass) && a;\n+    let _ = a || !b || !c || !d || !e;\n+    let _ = !(!a && b);\n+    let _ = !(!a || b);\n+    let _ = !a && !(b && c);\n+}\n+\n+fn equality_stuff() {\n+    let a: i32 = unimplemented!();\n+    let b: i32 = unimplemented!();\n+    let c: i32 = unimplemented!();\n+    let d: i32 = unimplemented!();\n+    let _ = a == b && c == 5 && a == b;\n+    let _ = a == b || c == 5 || a == b;\n+    let _ = a == b && c == 5 && b == a;\n+    let _ = a != b || !(a != b || c == d);\n+    let _ = a != b && !(a != b && c == d);\n+}\n+\n+fn issue3847(a: u32, b: u32) -> bool {\n+    const THRESHOLD: u32 = 1_000;\n+\n+    if a < THRESHOLD && b >= THRESHOLD || a >= THRESHOLD && b < THRESHOLD {\n+        return false;\n+    }\n+    true\n+}\n+\n+fn issue4548() {\n+    fn f(_i: u32, _j: u32) -> u32 {\n+        unimplemented!();\n+    }\n+\n+    let i = 0;\n+    let j = 0;\n+\n+    if i != j && f(i, j) != 0 || i == j && f(i, j) != 1 {}\n+}"}, {"sha": "d34d106cb2fbb1a11d245224b2ad622a287c8f8b", "filename": "tests/ui/nonminimal_bool.stderr", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/0964b8d19274953d29929b6962f75c168aee15e2/tests%2Fui%2Fnonminimal_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0964b8d19274953d29929b6962f75c168aee15e2/tests%2Fui%2Fnonminimal_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool.stderr?ref=0964b8d19274953d29929b6962f75c168aee15e2", "patch": "@@ -0,0 +1,111 @@\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:10:13\n+   |\n+LL |     let _ = !true;\n+   |             ^^^^^ help: try: `false`\n+   |\n+   = note: `-D clippy::nonminimal-bool` implied by `-D warnings`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:11:13\n+   |\n+LL |     let _ = !false;\n+   |             ^^^^^^ help: try: `true`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:12:13\n+   |\n+LL |     let _ = !!a;\n+   |             ^^^ help: try: `a`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:13:13\n+   |\n+LL |     let _ = false || a;\n+   |             ^^^^^^^^^^ help: try: `a`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:17:13\n+   |\n+LL |     let _ = !(!a && b);\n+   |             ^^^^^^^^^^ help: try: `a || !b`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:18:13\n+   |\n+LL |     let _ = !(!a || b);\n+   |             ^^^^^^^^^^ help: try: `a && !b`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:19:13\n+   |\n+LL |     let _ = !a && !(b && c);\n+   |             ^^^^^^^^^^^^^^^ help: try: `!(a || b && c)`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:27:13\n+   |\n+LL |     let _ = a == b && c == 5 && a == b;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |\n+LL |     let _ = a == b && c == 5;\n+   |             ^^^^^^^^^^^^^^^^\n+LL |     let _ = !(a != b || c != 5);\n+   |             ^^^^^^^^^^^^^^^^^^^\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:28:13\n+   |\n+LL |     let _ = a == b || c == 5 || a == b;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |\n+LL |     let _ = a == b || c == 5;\n+   |             ^^^^^^^^^^^^^^^^\n+LL |     let _ = !(a != b && c != 5);\n+   |             ^^^^^^^^^^^^^^^^^^^\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:29:13\n+   |\n+LL |     let _ = a == b && c == 5 && b == a;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |\n+LL |     let _ = a == b && c == 5;\n+   |             ^^^^^^^^^^^^^^^^\n+LL |     let _ = !(a != b || c != 5);\n+   |             ^^^^^^^^^^^^^^^^^^^\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:30:13\n+   |\n+LL |     let _ = a != b || !(a != b || c == d);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |\n+LL |     let _ = a != b || c != d;\n+   |             ^^^^^^^^^^^^^^^^\n+LL |     let _ = !(a == b && c == d);\n+   |             ^^^^^^^^^^^^^^^^^^^\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:31:13\n+   |\n+LL |     let _ = a != b && !(a != b && c == d);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |\n+LL |     let _ = a != b && c != d;\n+   |             ^^^^^^^^^^^^^^^^\n+LL |     let _ = !(a == b || c == d);\n+   |             ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "4de48cd0879a1cda58502936a3533b149567d379", "filename": "tests/ui/nonminimal_bool_methods.rs", "status": "renamed", "additions": 4, "deletions": 58, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0964b8d19274953d29929b6962f75c168aee15e2/tests%2Fui%2Fnonminimal_bool_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0964b8d19274953d29929b6962f75c168aee15e2/tests%2Fui%2Fnonminimal_bool_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool_methods.rs?ref=0964b8d19274953d29929b6962f75c168aee15e2", "patch": "@@ -1,43 +1,6 @@\n-#![warn(clippy::nonminimal_bool, clippy::logic_bug)]\n+#![allow(unused, clippy::many_single_char_names)]\n+#![warn(clippy::nonminimal_bool)]\n \n-#[allow(unused, clippy::many_single_char_names)]\n-fn main() {\n-    let a: bool = unimplemented!();\n-    let b: bool = unimplemented!();\n-    let c: bool = unimplemented!();\n-    let d: bool = unimplemented!();\n-    let e: bool = unimplemented!();\n-    let _ = a && b || a;\n-    let _ = !(a && b);\n-    let _ = !true;\n-    let _ = !false;\n-    let _ = !!a;\n-    let _ = false && a;\n-    let _ = false || a;\n-    // don't lint on cfgs\n-    let _ = cfg!(you_shall_not_not_pass) && a;\n-    let _ = a || !b || !c || !d || !e;\n-    let _ = !(a && b || c);\n-    let _ = !(!a && b);\n-}\n-\n-#[allow(unused, clippy::many_single_char_names)]\n-fn equality_stuff() {\n-    let a: i32 = unimplemented!();\n-    let b: i32 = unimplemented!();\n-    let c: i32 = unimplemented!();\n-    let d: i32 = unimplemented!();\n-    let e: i32 = unimplemented!();\n-    let _ = a == b && a != b;\n-    let _ = a == b && c == 5 && a == b;\n-    let _ = a == b && c == 5 && b == a;\n-    let _ = a < b && a >= b;\n-    let _ = a > b && a <= b;\n-    let _ = a > b && a == b;\n-    let _ = a != b || !(a != b || c == d);\n-}\n-\n-#[allow(unused, clippy::many_single_char_names)]\n fn methods_with_negation() {\n     let a: Option<i32> = unimplemented!();\n     let b: Result<i32, i32> = unimplemented!();\n@@ -51,6 +14,7 @@ fn methods_with_negation() {\n     let _ = !b.is_ok();\n     let c = false;\n     let _ = !(a.is_some() && !c);\n+    let _ = !(a.is_some() || !c);\n     let _ = !(!c ^ c) || !a.is_some();\n     let _ = (!c ^ c) || !a.is_some();\n     let _ = !c ^ c || !a.is_some();\n@@ -143,22 +107,4 @@ fn dont_warn_for_negated_partial_ord_comparison() {\n     let _ = !(a >= b);\n }\n \n-fn issue3847(a: u32, b: u32) -> bool {\n-    const THRESHOLD: u32 = 1_000;\n-\n-    if a < THRESHOLD && b >= THRESHOLD || a >= THRESHOLD && b < THRESHOLD {\n-        return false;\n-    }\n-    true\n-}\n-\n-fn issue4548() {\n-    fn f(_i: u32, _j: u32) -> u32 {\n-        unimplemented!();\n-    }\n-\n-    let i = 0;\n-    let j = 0;\n-\n-    if i != j && f(i, j) != 0 || i == j && f(i, j) != 1 {}\n-}\n+fn main() {}", "previous_filename": "tests/ui/booleans.rs"}, {"sha": "a2df889d6230215dd44547e788991a47e61f6782", "filename": "tests/ui/nonminimal_bool_methods.stderr", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/0964b8d19274953d29929b6962f75c168aee15e2/tests%2Fui%2Fnonminimal_bool_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0964b8d19274953d29929b6962f75c168aee15e2/tests%2Fui%2Fnonminimal_bool_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool_methods.stderr?ref=0964b8d19274953d29929b6962f75c168aee15e2", "patch": "@@ -0,0 +1,82 @@\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:8:13\n+   |\n+LL |     let _ = !a.is_some();\n+   |             ^^^^^^^^^^^^ help: try: `a.is_none()`\n+   |\n+   = note: `-D clippy::nonminimal-bool` implied by `-D warnings`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:10:13\n+   |\n+LL |     let _ = !a.is_none();\n+   |             ^^^^^^^^^^^^ help: try: `a.is_some()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:12:13\n+   |\n+LL |     let _ = !b.is_err();\n+   |             ^^^^^^^^^^^ help: try: `b.is_ok()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:14:13\n+   |\n+LL |     let _ = !b.is_ok();\n+   |             ^^^^^^^^^^ help: try: `b.is_err()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:16:13\n+   |\n+LL |     let _ = !(a.is_some() && !c);\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: try: `a.is_none() || c`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:17:13\n+   |\n+LL |     let _ = !(a.is_some() || !c);\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: try: `a.is_none() && c`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:18:26\n+   |\n+LL |     let _ = !(!c ^ c) || !a.is_some();\n+   |                          ^^^^^^^^^^^^ help: try: `a.is_none()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:19:25\n+   |\n+LL |     let _ = (!c ^ c) || !a.is_some();\n+   |                         ^^^^^^^^^^^^ help: try: `a.is_none()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:20:23\n+   |\n+LL |     let _ = !c ^ c || !a.is_some();\n+   |                       ^^^^^^^^^^^^ help: try: `a.is_none()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:92:8\n+   |\n+LL |     if !res.is_ok() {}\n+   |        ^^^^^^^^^^^^ help: try: `res.is_err()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:93:8\n+   |\n+LL |     if !res.is_err() {}\n+   |        ^^^^^^^^^^^^^ help: try: `res.is_ok()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:96:8\n+   |\n+LL |     if !res.is_some() {}\n+   |        ^^^^^^^^^^^^^^ help: try: `res.is_none()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool_methods.rs:97:8\n+   |\n+LL |     if !res.is_none() {}\n+   |        ^^^^^^^^^^^^^^ help: try: `res.is_some()`\n+\n+error: aborting due to 13 previous errors\n+"}]}