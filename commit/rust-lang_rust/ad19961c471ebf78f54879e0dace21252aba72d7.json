{"sha": "ad19961c471ebf78f54879e0dace21252aba72d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMTk5NjFjNDcxZWJmNzhmNTQ4NzllMGRhY2UyMTI1MmFiYTcyZDc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-30T01:46:22Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-30T01:46:22Z"}, "message": "More mopping up wrong-named rules in the Makefile.", "tree": {"sha": "450a0ae9d2c0f2f18f865aa0345929affb0e15a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/450a0ae9d2c0f2f18f865aa0345929affb0e15a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad19961c471ebf78f54879e0dace21252aba72d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad19961c471ebf78f54879e0dace21252aba72d7", "html_url": "https://github.com/rust-lang/rust/commit/ad19961c471ebf78f54879e0dace21252aba72d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad19961c471ebf78f54879e0dace21252aba72d7/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "454bf428efa6f581f94f817d9f044d6934af1a0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/454bf428efa6f581f94f817d9f044d6934af1a0f", "html_url": "https://github.com/rust-lang/rust/commit/454bf428efa6f581f94f817d9f044d6934af1a0f"}], "stats": {"total": 273, "additions": 126, "deletions": 147}, "files": [{"sha": "5f2d0b7972d11fa45b14f00a8d6c748fb3f2b815", "filename": "src/Makefile", "status": "modified", "additions": 126, "deletions": 147, "changes": 273, "blob_url": "https://github.com/rust-lang/rust/blob/ad19961c471ebf78f54879e0dace21252aba72d7/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ad19961c471ebf78f54879e0dace21252aba72d7/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=ad19961c471ebf78f54879e0dace21252aba72d7", "patch": "@@ -178,8 +178,6 @@ ifneq ($(CFG_LLVM_CONFIG),)\n   endif\n endif\n \n-VARIANT=x86\n-\n ifdef CFG_LLVM_CONFIG\n   LLC := \"$(shell $(CFG_LLVM_CONFIG) --bindir)/llc\"\n   CFG_LLC_CFLAGS := -march=x86\n@@ -196,9 +194,9 @@ CFG_BOOT_FLAGS += -L .\n # Boot targets and rules\n ######################################################################\n \n-ML_DEP_INCS := -I boot/fe -I boot/me -I boot/be -I boot/driver/$(VARIANT) \\\n+ML_DEP_INCS := -I boot/fe -I boot/me -I boot/be \\\n   -I boot/driver -I boot/util\n-ML_INCS := $(ML_DEP_INCS) $(LLVM_INCS)\n+ML_INCS := $(ML_DEP_INCS)\n ML_LIBS := unix.cma nums.cma bigarray.cma\n ML_NATIVE_LIBS := unix.cmxa nums.cmxa bigarray.cmxa\n OCAMLC_FLAGS := -g $(ML_INCS) -w Ael -warn-error Ael\n@@ -218,7 +216,7 @@ ME_MLS := $(addprefix boot/me/, walk.ml semant.ml resolve.ml alias.ml \\\n             loop.ml layout.ml transutil.ml trans.ml dwarf.ml)\n FE_MLS := $(addprefix boot/fe/, ast.ml token.ml lexer.ml parser.ml \\\n             extfmt.ml pexp.ml item.ml cexp.ml fuzz.ml)\n-DRIVER_TOP_MLS := $(addprefix boot/driver/, lib.ml $(VARIANT)/glue.ml main.ml)\n+DRIVER_TOP_MLS := $(addprefix boot/driver/, lib.ml glue.ml main.ml)\n \n BOOT_MLS := $(UTIL_BOT_MLS) $(DRIVER_BOT_MLS) $(FE_MLS) $(IL_MLS) $(ME_MLS) \\\n   $(BE_MLS) $(DRIVER_TOP_MLS)\n@@ -383,7 +381,7 @@ TASK_XFAILS := test/run-pass/task-comm-8.rs \\\n                test/run-pass/alt-type-simple.rs \\\n                test/run-pass/many.rs\n \n-TEST_XFAILS_X86 :=  $(TASK_XFAILS) \\\n+TEST_XFAILS_BOOT :=  $(TASK_XFAILS) \\\n                     $(NOMINAL_TAG_XFAILS) \\\n                     $(CONST_TAG_XFAILS) \\\n                     test/run-pass/child-outlives-parent.rs \\\n@@ -413,7 +411,7 @@ TEST_XFAILS_X86 :=  $(TASK_XFAILS) \\\n # work and assume the others don't. Invert this when we're closer\n # to actually bootstrapping.\n \n-TEST_XFAILS_SELF := $(filter-out \\\n+TEST_XFAILS_RUSTC := $(filter-out \\\n                       $(addprefix test/run-pass/, \\\n                         alt-pattern-simple.rs \\\n                         alt-tag.rs \\\n@@ -475,12 +473,12 @@ TEST_XFAILS_SELF := $(filter-out \\\n \n \n ifdef MINGW_CROSS\n-TEST_XFAILS_X86 += test/run-pass/native-mod.rc\n-TEST_XFAILS_SELF += test/run-pass/native-mod.rc\n+TEST_XFAILS_BOOT += test/run-pass/native-mod.rc\n+TEST_XFAILS_RUSTC += test/run-pass/native-mod.rc\n endif\n ifdef CFG_WINDOWSY\n-TEST_XFAILS_X86 += test/run-pass/native-mod.rc\n-TEST_XFAILS_SELF += test/run-pass/native-mod.rc\n+TEST_XFAILS_BOOT += test/run-pass/native-mod.rc\n+TEST_XFAILS_RUSTC += test/run-pass/native-mod.rc\n endif\n \n RPASS_RC := $(wildcard test/run-pass/*.rc)\n@@ -491,129 +489,129 @@ CFAIL_RC := $(wildcard test/compile-fail/*.rc)\n CFAIL_RS := $(wildcard test/compile-fail/*.rs)\n \n ifdef CHECK_XFAILS\n-TEST_RPASS_CRATES_X86 := $(filter $(TEST_XFAILS_X86), $(RPASS_RC))\n-TEST_RPASS_CRATES_SELF := $(filter $(TEST_XFAILS_SELF), $(RPASS_RC))\n-TEST_RPASS_SOURCES_X86 := $(filter $(TEST_XFAILS_X86), $(RPASS_RS))\n-TEST_RPASS_SOURCES_SELF := $(filter $(TEST_XFAILS_SELF), $(RPASS_RS))\n+TEST_RPASS_CRATES_BOOT := $(filter $(TEST_XFAILS_BOOT), $(RPASS_RC))\n+TEST_RPASS_CRATES_RUSTC := $(filter $(TEST_XFAILS_RUSTC), $(RPASS_RC))\n+TEST_RPASS_SOURCES_BOOT := $(filter $(TEST_XFAILS_BOOT), $(RPASS_RS))\n+TEST_RPASS_SOURCES_RUSTC := $(filter $(TEST_XFAILS_RUSTC), $(RPASS_RS))\n else\n-TEST_RPASS_CRATES_X86 := $(filter-out $(TEST_XFAILS_X86), $(RPASS_RC))\n-TEST_RPASS_CRATES_SELF := $(filter-out $(TEST_XFAILS_SELF), $(RPASS_RC))\n-TEST_RPASS_SOURCES_X86 := $(filter-out $(TEST_XFAILS_X86), $(RPASS_RS))\n-TEST_RPASS_SOURCES_SELF := $(filter-out $(TEST_XFAILS_SELF), $(RPASS_RS))\n+TEST_RPASS_CRATES_BOOT := $(filter-out $(TEST_XFAILS_BOOT), $(RPASS_RC))\n+TEST_RPASS_CRATES_RUSTC := $(filter-out $(TEST_XFAILS_RUSTC), $(RPASS_RC))\n+TEST_RPASS_SOURCES_BOOT := $(filter-out $(TEST_XFAILS_BOOT), $(RPASS_RS))\n+TEST_RPASS_SOURCES_RUSTC := $(filter-out $(TEST_XFAILS_RUSTC), $(RPASS_RS))\n endif\n \n-TEST_RPASS_EXES_X86 := \\\n-              $(TEST_RPASS_CRATES_X86:.rc=-boot.x86$(CFG_EXE_SUFFIX)) \\\n-              $(TEST_RPASS_SOURCES_X86:.rs=-boot.x86$(CFG_EXE_SUFFIX))\n-TEST_RPASS_EXES_SELF := \\\n-              $(TEST_RPASS_CRATES_SELF:.rc=.llvm$(CFG_EXE_SUFFIX)) \\\n-              $(TEST_RPASS_SOURCES_SELF:.rs=.llvm$(CFG_EXE_SUFFIX))\n-\n-TEST_RPASS_OUTS_X86  := \\\n-                    $(TEST_RPASS_EXES_X86:.x86$(CFG_EXE_SUFFIX)=.x86.out)\n-TEST_RPASS_OUTS_SELF := \\\n-                    $(TEST_RPASS_EXES_SELF:.llvm$(CFG_EXE_SUFFIX)=.llvm.out)\n-\n-TEST_RPASS_TMPS_X86  := \\\n-    $(TEST_RPASS_EXES_X86:.x86$(CFG_EXE_SUFFIX)=.x86$(CFG_EXE_SUFFIX).tmp)\n-TEST_RPASS_TMPS_SELF := \\\n-    $(TEST_RPASS_EXES_SELF:.llvm$(CFG_EXE_SUFFIX)=.llvm$(CFG_EXE_SUFFIX).tmp)\n-\n-\n-TEST_RFAIL_CRATES_X86 := $(filter-out $(TEST_XFAILS_X86), $(RFAIL_RC))\n-TEST_RFAIL_CRATES_SELF := $(filter-out $(TEST_XFAILS_SELF), $(RFAIL_RC))\n-TEST_RFAIL_SOURCES_X86 := $(filter-out $(TEST_XFAILS_X86), $(RFAIL_RS))\n-TEST_RFAIL_SOURCES_SELF := $(filter-out $(TEST_XFAILS_SELF), $(RFAIL_RS))\n-\n-TEST_RFAIL_EXES_X86 := \\\n-              $(TEST_RFAIL_CRATES_X86:.rc=-boot.x86$(CFG_EXE_SUFFIX)) \\\n-              $(TEST_RFAIL_SOURCES_X86:.rs=-boot.x86$(CFG_EXE_SUFFIX))\n-TEST_RFAIL_EXES_SELF := \\\n-              $(TEST_RFAIL_CRATES_SELF:.rc=-boot.llvm$(CFG_EXE_SUFFIX)) \\\n-              $(TEST_RFAIL_SOURCES_SELF:.rs=-boot.llvm$(CFG_EXE_SUFFIX))\n-\n-TEST_RFAIL_OUTS_X86  := \\\n-                    $(TEST_RFAIL_EXES_X86:.x86$(CFG_EXE_SUFFIX)=.x86.out)\n-TEST_RFAIL_OUTS_SELF := \\\n-                    $(TEST_RFAIL_EXES_SELF:.llvm$(CFG_EXE_SUFFIX)=.llvm.out)\n-\n-TEST_RFAIL_TMPS_X86  := \\\n-    $(TEST_RFAIL_EXES_X86:.x86$(CFG_EXE_SUFFIX)=.x86$(CFG_EXE_SUFFIX).tmp)\n-TEST_RFAIL_TMPS_SELF := \\\n-    $(TEST_RFAIL_EXES_SELF:.llvm$(CFG_EXE_SUFFIX)=.llvm$(CFG_EXE_SUFFIX).tmp)\n-\n-\n-TEST_CFAIL_CRATES_X86 := $(filter-out $(TEST_XFAILS_X86), $(CFAIL_RC))\n-TEST_CFAIL_CRATES_SELF := $(filter-out $(TEST_XFAILS_SELF), $(CFAIL_RC))\n-TEST_CFAIL_SOURCES_X86 := $(filter-out $(TEST_XFAILS_X86), $(CFAIL_RS))\n-TEST_CFAIL_SOURCES_SELF := $(filter-out $(TEST_XFAILS_SELF), $(CFAIL_RS))\n-\n-TEST_CFAIL_EXES_X86 := \\\n-              $(TEST_CFAIL_CRATES_X86:.rc=-boot.x86$(CFG_EXE_SUFFIX)) \\\n-              $(TEST_CFAIL_SOURCES_X86:.rs=-boot.x86$(CFG_EXE_SUFFIX))\n-TEST_CFAIL_EXES_SELF := \\\n-              $(TEST_CFAIL_CRATES_SELF:.rc=.llvm$(CFG_EXE_SUFFIX)) \\\n-              $(TEST_CFAIL_SOURCES_SELF:.rs=.llvm$(CFG_EXE_SUFFIX))\n-\n-TEST_CFAIL_OUTS_X86 := \\\n-                $(TEST_CFAIL_EXES_X86:.x86$(CFG_EXE_SUFFIX)=.x86.out)\n-TEST_CFAIL_OUTS_SELF := \\\n-                $(TEST_CFAIL_EXES_SELF:.llvm$(CFG_EXE_SUFFIX)=.llvm.out)\n-\n-TEST_CFAIL_TMPS_X86 := \\\n-    $(TEST_CFAIL_EXES_X86:.x86$(CFG_EXE_SUFFIX)=.x86$(CFG_EXE_SUFFIX).tmp)\n-TEST_CFAIL_TMPS_SELF := \\\n-    $(TEST_CFAIL_EXES_SELF:.llvm$(CFG_EXE_SUFFIX)=.llvm$(CFG_EXE_SUFFIX).tmp)\n-\n-\n-ALL_TEST_CRATES := $(TEST_CFAIL_CRATES_X86) \\\n-                   $(TEST_RFAIL_CRATES_X86) \\\n-                   $(TEST_RPASS_CRATES_X86)\n-\n-ALL_TEST_SOURCES := $(TEST_CFAIL_SOURCES_X86) \\\n-                    $(TEST_RFAIL_SOURCES_X86) \\\n-                    $(TEST_RPASS_SOURCES_X86)\n+TEST_RPASS_EXES_BOOT := \\\n+              $(TEST_RPASS_CRATES_BOOT:.rc=.boot$(CFG_EXE_SUFFIX)) \\\n+              $(TEST_RPASS_SOURCES_BOOT:.rs=.boot$(CFG_EXE_SUFFIX))\n+TEST_RPASS_EXES_RUSTC := \\\n+              $(TEST_RPASS_CRATES_RUSTC:.rc=.rustc$(CFG_EXE_SUFFIX)) \\\n+              $(TEST_RPASS_SOURCES_RUSTC:.rs=.rustc$(CFG_EXE_SUFFIX))\n+\n+TEST_RPASS_OUTS_BOOT  := \\\n+                 $(TEST_RPASS_EXES_BOOT:.boot$(CFG_EXE_SUFFIX)=.boot.out)\n+TEST_RPASS_OUTS_RUSTC := \\\n+                 $(TEST_RPASS_EXES_RUSTC:.rustc$(CFG_EXE_SUFFIX)=.rustc.out)\n+\n+TEST_RPASS_TMPS_BOOT  := \\\n+  $(TEST_RPASS_EXES_BOOT:.boot$(CFG_EXE_SUFFIX)=.boot$(CFG_EXE_SUFFIX).tmp)\n+TEST_RPASS_TMPS_RUSTC := \\\n+  $(TEST_RPASS_EXES_RUSTC:.rustc$(CFG_EXE_SUFFIX)=.rustc$(CFG_EXE_SUFFIX).tmp)\n+\n+\n+TEST_RFAIL_CRATES_BOOT := $(filter-out $(TEST_XFAILS_BOOT), $(RFAIL_RC))\n+TEST_RFAIL_CRATES_RUSTC := $(filter-out $(TEST_XFAILS_RUSTC), $(RFAIL_RC))\n+TEST_RFAIL_SOURCES_BOOT := $(filter-out $(TEST_XFAILS_BOOT), $(RFAIL_RS))\n+TEST_RFAIL_SOURCES_RUSTC := $(filter-out $(TEST_XFAILS_RUSTC), $(RFAIL_RS))\n+\n+TEST_RFAIL_EXES_BOOT := \\\n+              $(TEST_RFAIL_CRATES_BOOT:.rc=.boot$(CFG_EXE_SUFFIX)) \\\n+              $(TEST_RFAIL_SOURCES_BOOT:.rs=.boot$(CFG_EXE_SUFFIX))\n+TEST_RFAIL_EXES_RUSTC := \\\n+              $(TEST_RFAIL_CRATES_RUSTC:.rc=.rustc$(CFG_EXE_SUFFIX)) \\\n+              $(TEST_RFAIL_SOURCES_RUSTC:.rs=.rustc$(CFG_EXE_SUFFIX))\n+\n+TEST_RFAIL_OUTS_BOOT  := \\\n+                  $(TEST_RFAIL_EXES_BOOT:.boot$(CFG_EXE_SUFFIX)=.boot.out)\n+TEST_RFAIL_OUTS_RUSTC := \\\n+                  $(TEST_RFAIL_EXES_RUSTC:.rustc$(CFG_EXE_SUFFIX)=.rustc.out)\n+\n+TEST_RFAIL_TMPS_BOOT  := \\\n+  $(TEST_RFAIL_EXES_BOOT:.boot$(CFG_EXE_SUFFIX)=.boot$(CFG_EXE_SUFFIX).tmp)\n+TEST_RFAIL_TMPS_RUSTC := \\\n+  $(TEST_RFAIL_EXES_RUSTC:.rustc$(CFG_EXE_SUFFIX)=.rustc$(CFG_EXE_SUFFIX).tmp)\n+\n+\n+TEST_CFAIL_CRATES_BOOT := $(filter-out $(TEST_XFAILS_BOOT), $(CFAIL_RC))\n+TEST_CFAIL_CRATES_RUSTC := $(filter-out $(TEST_XFAILS_RUSTC), $(CFAIL_RC))\n+TEST_CFAIL_SOURCES_BOOT := $(filter-out $(TEST_XFAILS_BOOT), $(CFAIL_RS))\n+TEST_CFAIL_SOURCES_RUSTC := $(filter-out $(TEST_XFAILS_RUSTC), $(CFAIL_RS))\n+\n+TEST_CFAIL_EXES_BOOT := \\\n+              $(TEST_CFAIL_CRATES_BOOT:.rc=.boot$(CFG_EXE_SUFFIX)) \\\n+              $(TEST_CFAIL_SOURCES_BOOT:.rs=.boot$(CFG_EXE_SUFFIX))\n+TEST_CFAIL_EXES_RUSTC := \\\n+              $(TEST_CFAIL_CRATES_RUSTC:.rc=.rustc$(CFG_EXE_SUFFIX)) \\\n+              $(TEST_CFAIL_SOURCES_RUSTC:.rs=.rustc$(CFG_EXE_SUFFIX))\n+\n+TEST_CFAIL_OUTS_BOOT := \\\n+                $(TEST_CFAIL_EXES_BOOT:.boot$(CFG_EXE_SUFFIX)=.boot.out)\n+TEST_CFAIL_OUTS_RUSTC := \\\n+                $(TEST_CFAIL_EXES_RUSTC:.rustc$(CFG_EXE_SUFFIX)=.rustc.out)\n+\n+TEST_CFAIL_TMPS_BOOT := \\\n+  $(TEST_CFAIL_EXES_BOOT:.boot$(CFG_EXE_SUFFIX)=.boot$(CFG_EXE_SUFFIX).tmp)\n+TEST_CFAIL_TMPS_RUSTC := \\\n+  $(TEST_CFAIL_EXES_RUSTC:.rustc$(CFG_EXE_SUFFIX)=.rustc$(CFG_EXE_SUFFIX).tmp)\n+\n+\n+ALL_TEST_CRATES := $(TEST_CFAIL_CRATES_BOOT) \\\n+                   $(TEST_RFAIL_CRATES_BOOT) \\\n+                   $(TEST_RPASS_CRATES_BOOT)\n+\n+ALL_TEST_SOURCES := $(TEST_CFAIL_SOURCES_BOOT) \\\n+                    $(TEST_RFAIL_SOURCES_BOOT) \\\n+                    $(TEST_RPASS_SOURCES_BOOT)\n \n ALL_TEST_INPUTS := $(wildcard test/*/*.rs test/*/*/*.rs test/*/*.rc)\n \n \n-check_nocompile: $(TEST_CFAIL_OUTS_X86)\n+check_nocompile: $(TEST_CFAIL_OUTS_BOOT)\n \n check: tidy \\\n-       $(TEST_RPASS_EXES_X86) $(TEST_RFAIL_EXES_X86) \\\n-       $(TEST_RPASS_OUTS_X86) $(TEST_RFAIL_OUTS_X86) \\\n-       $(TEST_CFAIL_OUTS_X86)\n+       $(TEST_RPASS_EXES_BOOT) $(TEST_RFAIL_EXES_BOOT) \\\n+       $(TEST_RPASS_OUTS_BOOT) $(TEST_RFAIL_OUTS_BOOT) \\\n+       $(TEST_CFAIL_OUTS_BOOT)\n \n compile-check: tidy \\\n-       $(TEST_RPASS_EXES_X86) $(TEST_RFAIL_EXES_X86)\n+       $(TEST_RPASS_EXES_BOOT) $(TEST_RFAIL_EXES_BOOT)\n \n \n ifdef CFG_LLVM_CONFIG\n \n-ALL_TEST_CRATES += $(TEST_CFAIL_CRATES_SELF) \\\n-                   $(TEST_RFAIL_CRATES_SELF) \\\n-                   $(TEST_RPASS_CRATES_SELF)\n+ALL_TEST_CRATES += $(TEST_CFAIL_CRATES_RUSTC) \\\n+                   $(TEST_RFAIL_CRATES_RUSTC) \\\n+                   $(TEST_RPASS_CRATES_RUSTC)\n \n-ALL_TEST_SOURCES += $(TEST_CFAIL_SOURCES_SELF) \\\n-                    $(TEST_RFAIL_SOURCES_SELF) \\\n-                    $(TEST_RPASS_SOURCES_SELF)\n+ALL_TEST_SOURCES += $(TEST_CFAIL_SOURCES_RUSTC) \\\n+                    $(TEST_RFAIL_SOURCES_RUSTC) \\\n+                    $(TEST_RPASS_SOURCES_RUSTC)\n \n-check_nocompile: $(TEST_CFAIL_OUTS_SELF)\n+check_nocompile: $(TEST_CFAIL_OUTS_RUSTC)\n \n check:  tidy \\\n-        $(TEST_RPASS_EXES_SELF) $(TEST_RFAIL_EXES_SELF) \\\n-        $(TEST_RPASS_OUTS_SELF) $(TEST_RFAIL_OUTS_SELF) \\\n-        $(TEST_CFAIL_OUTS_SELF)\n+        $(TEST_RPASS_EXES_RUSTC) $(TEST_RFAIL_EXES_RUSTC) \\\n+        $(TEST_RPASS_OUTS_RUSTC) $(TEST_RFAIL_OUTS_RUSTC) \\\n+        $(TEST_CFAIL_OUTS_RUSTC)\n \n compile-check: tidy \\\n-       $(TEST_RPASS_EXES_SELF) $(TEST_RFAIL_EXES_SELF)\n+       $(TEST_RPASS_EXES_RUSTC) $(TEST_RFAIL_EXES_RUSTC)\n \n endif\n \n BREQ := $(CFG_BOOT) $(CFG_RUNTIME) $(CFG_STDLIB)\n SREQ := $(CFG_RUSTC) $(CFG_RUNTIME) $(CFG_STDLIB)\n BOOT := $(CFG_QUIET)OCAMLRUNPARAM=\"b1\" $(CFG_BOOT) $(CFG_BOOT_FLAGS)\n-SELF := $(CFG_QUIET)$(CFG_RUSTC) $(CFG_RUSTC_FLAGS)\n+RUSTC := $(CFG_QUIET)$(CFG_RUSTC) $(CFG_RUSTC_FLAGS)\n \n # Cancel the implicit .out rule in GNU make.\n %.out: %\n@@ -626,7 +624,7 @@ test/run-pass/%.out.tmp: test/run-pass/%$(CFG_EXE_SUFFIX) $(CFG_RUNTIME)\n \t@$(call CFG_ECHO, run: $<)\n \t$(CFG_QUIET)$(call CFG_RUN_TARG, $<) > $@\n \n-test/run-fail/%-boot.x86.out.tmp: test/run-fail/%-boot.x86$(CFG_EXE_SUFFIX) \\\n+test/run-fail/%.out.tmp: test/run-fail/%$(CFG_EXE_SUFFIX) \\\n                                   $(CFG_RUNTIME)\n \t$(CFG_QUIET)rm -f $<.tmp\n \t@$(call CFG_ECHO, run: $<)\n@@ -635,37 +633,30 @@ test/run-fail/%-boot.x86.out.tmp: test/run-fail/%-boot.x86$(CFG_EXE_SUFFIX) \\\n       if [ $$X -eq 0 ] ; then exit 1 ; else exit 0 ; fi\n \t$(CFG_QUIET)grep --text --quiet \\\n       \"`awk -F: '/error-pattern/ { print $$2 }' \\\n-        $(subst -boot.x86.out.tmp,.rs,$@) \\\n+        $(subst .out.tmp,.rs,$@) \\\n         | tr -d '\\n\\r'`\" $@\n \n-test/compile-fail/%-boot.x86.out.tmp: test/compile-fail/%.rs $(BREQ)\n-\t@$(call CFG_ECHO, compile [boot x86]: $<)\n-\t$(CFG_QUIET)rm -f $@\n-\t$(BOOT) -o $(@:.out=$(CFG_EXE_SUFFIX)) $< >$@ 2>&1 || true\n-\t$(CFG_QUIET)grep --text --quiet \\\n-      \"`awk -F: '/error-pattern/ { print $$2 }' $< | tr -d '\\n\\r'`\" $@\n-\n-test/compile-fail/%-boot.llvm.out.tmp: test/compile-fail/%.rs $(BREQ)\n-\t@$(call CFG_ECHO, compile [boot llvm]: $<)\n+test/compile-fail/%.boot.out.tmp: test/compile-fail/%.rs $(BREQ)\n+\t@$(call CFG_ECHO, compile [boot]: $<)\n \t$(CFG_QUIET)rm -f $@\n \t$(BOOT) -o $(@:.out=$(CFG_EXE_SUFFIX)) $< >$@ 2>&1 || true\n \t$(CFG_QUIET)grep --text --quiet \\\n       \"`awk -F: '/error-pattern/ { print $$2 }' $< | tr -d '\\n\\r'`\" $@\n \n-test/compile-fail/%.llvm.out.tmp: test/compile-fail/%.rs $(BREQ)\n+test/compile-fail/%.rustc.out.tmp: test/compile-fail/%.rs $(BREQ)\n \t@$(call CFG_ECHO, compile [rustc]: $<)\n \t$(CFG_QUIET)rm -f $@\n-\t$(BOOT) -o $(@:.out=$(CFG_EXE_SUFFIX)) $< >$@ 2>&1 || true\n+\t$(RUSTC) -o $(@:.out=$(CFG_EXE_SUFFIX)) $< >$@ 2>&1 || true\n \t$(CFG_QUIET)grep --text --quiet \\\n       \"`awk -F: '/error-pattern/ { print $$2 }' $< | tr -d '\\n\\r'`\" $@\n \n-test/run-pass/%-boot.x86$(CFG_EXE_SUFFIX): test/run-pass/%.rc $(BREQ)\n-\t@$(call CFG_ECHO, compile [boot x86]: $<)\n+test/run-pass/%.boot$(CFG_EXE_SUFFIX): test/run-pass/%.rc $(BREQ)\n+\t@$(call CFG_ECHO, compile [boot]: $<)\n \t$(BOOT) -o $@ $<\n \n-test/bench/shootout/%-boot.x86$(CFG_EXE_SUFFIX): \\\n+test/bench/shootout/%.boot$(CFG_EXE_SUFFIX): \\\n   test/bench/shootout/%.rs $(BREQ)\n-\t@$(call CFG_ECHO, compile [boot x86]: $<)\n+\t@$(call CFG_ECHO, compile [boot]: $<)\n \t$(BOOT) -o $@ $<\n \n %.ll: %.bc\n@@ -681,45 +672,33 @@ test/bench/shootout/%-boot.x86$(CFG_EXE_SUFFIX): \\\n \t@$(call CFG_ECHO, assemble [llvm]: $<)\n \t$(CFG_QUIET)gcc $(CFG_GCC_CFLAGS) -o $@ -c $<\n \n-%.llvm$(CFG_EXE_SUFFIX): %.o $(CFG_RUNTIME)\n+%.rustc$(CFG_EXE_SUFFIX): %.o $(CFG_RUNTIME)\n \t@$(call CFG_ECHO, link [llvm]: $<)\n \t$(CFG_QUIET)gcc $(CFG_GCC_CFLAGS) -o $@ $< -L. -lrustrt\n \t@# dsymutil sometimes fails or prints a warning, but the\n \t@# program still runs.  Since it simplifies debugging other\n \t@# programs, I\\'ll live with the noise.\n \t-$(CFG_QUIET)$(DSYMUTIL) $@\n \n-test/run-pass/%-boot.bc: test/run-pass/%.rc $(BREQ)\n-\t@$(call CFG_ECHO, compile [boot llvm]: $<)\n-\t$(BOOT) -o $@ -llvm $<\n-\n test/run-pass/%.bc: test/run-pass/%.rc $(SREQ)\n \t@$(call CFG_ECHO, compile [rustc]: $<)\n-\t$(SELF) -o $@ $<\n+\t$(RUSTC) -o $@ $<\n \n-test/run-pass/%-boot.x86$(CFG_EXE_SUFFIX): test/run-pass/%.rs $(BREQ)\n-\t@$(call CFG_ECHO, compile [boot x86]: $<)\n+test/run-pass/%.boot$(CFG_EXE_SUFFIX): test/run-pass/%.rs $(BREQ)\n+\t@$(call CFG_ECHO, compile [boot]: $<)\n \t$(BOOT) -o $@ $<\n \n-test/run-pass/%-boot.bc: test/run-pass/%.rs $(BREQ)\n-\t@$(call CFG_ECHO, compile [boot llvm]: $<)\n-\t$(BOOT) -o $@ -llvm $<\n-\n test/run-pass/%.bc: test/run-pass/%.rs $(SREQ)\n \t@$(call CFG_ECHO, compile [rustc]: $<)\n-\t$(SELF) -o $@ $<\n+\t$(RUSTC) -o $@ $<\n \n-test/run-fail/%-boot.x86$(CFG_EXE_SUFFIX): test/run-fail/%.rs $(BREQ)\n-\t@$(call CFG_ECHO, compile [boot x86]: $<)\n+test/run-fail/%.boot$(CFG_EXE_SUFFIX): test/run-fail/%.rs $(BREQ)\n+\t@$(call CFG_ECHO, compile [boot]: $<)\n \t$(BOOT) -o $@ $<\n \n-test/run-fail/%-boot.bc: test/run-fail/%.rs $(BREQ)\n-\t@$(call CFG_ECHO, compile [boot llvm]: $<)\n-\t$(BOOT) -o $@ -llvm $<\n-\n test/run-fail/%.bc: test/run-fail/%.rs $(BREQ)\n \t@$(call CFG_ECHO, compile [rustc]: $<)\n-\t$(SELF) -o $@ $<\n+\t$(RUSTC) -o $@ $<\n \n \n ######################################################################\n@@ -853,9 +832,9 @@ clean:\n \t$(CFG_QUIET)rm -f $(CFG_BOOT) $(CFG_RUNTIME) $(CFG_STDLIB)\n \t$(CFG_QUIET)rm -Rf $(PKG_NAME)-*.tar.gz dist\n \t$(CFG_QUIET)rm -f $(foreach ext,cmx cmi cmo cma o a d exe,\\\n-                        $(wildcard boot/*/*.$(ext) boot/*/*/*.$(ext))) \n-\t$(CFG_QUIET)rm -Rf $(foreach ext,out llvm x86 o s exe dSYM,\\\n-                        $(wildcard test/*/*.$(ext))) \n+                        $(wildcard boot/*/*.$(ext) boot/*/*/*.$(ext)))\n+\t$(CFG_QUIET)rm -Rf $(foreach ext,out llvm x86 boot rustc o s exe dSYM,\\\n+                        $(wildcard test/*/*.$(ext)))\n \n \n # Local Variables:"}, {"sha": "4fc7448054dfb4c85bf747851391fe29475cb545", "filename": "src/boot/driver/glue.ml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ad19961c471ebf78f54879e0dace21252aba72d7/src%2Fboot%2Fdriver%2Fglue.ml", "raw_url": "https://github.com/rust-lang/rust/raw/ad19961c471ebf78f54879e0dace21252aba72d7/src%2Fboot%2Fdriver%2Fglue.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fglue.ml?ref=ad19961c471ebf78f54879e0dace21252aba72d7", "previous_filename": "src/boot/driver/x86/glue.ml"}]}