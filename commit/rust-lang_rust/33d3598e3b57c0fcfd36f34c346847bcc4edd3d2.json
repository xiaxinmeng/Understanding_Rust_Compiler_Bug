{"sha": "33d3598e3b57c0fcfd36f34c346847bcc4edd3d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZDM1OThlM2I1N2MwZmNmZDM2ZjM0YzM0Njg0N2JjYzRlZGQzZDI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-02-21T17:14:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-02-21T17:50:13Z"}, "message": "partially revert 904a0bde93f0348f69914ee90b1f8b6e4e0d7cbc\n\nThis preserves the error you currently get on stable for the\nold-lub-glb-object.rs test.", "tree": {"sha": "a59e80461e25689d8fafe3181964382dd4238467", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a59e80461e25689d8fafe3181964382dd4238467"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33d3598e3b57c0fcfd36f34c346847bcc4edd3d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33d3598e3b57c0fcfd36f34c346847bcc4edd3d2", "html_url": "https://github.com/rust-lang/rust/commit/33d3598e3b57c0fcfd36f34c346847bcc4edd3d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33d3598e3b57c0fcfd36f34c346847bcc4edd3d2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21e9478366423b899272f724e94c7b92a70c3ee6", "url": "https://api.github.com/repos/rust-lang/rust/commits/21e9478366423b899272f724e94c7b92a70c3ee6", "html_url": "https://github.com/rust-lang/rust/commit/21e9478366423b899272f724e94c7b92a70c3ee6"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "05fb40ac10a075147dd6927596103df34214d14b", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/33d3598e3b57c0fcfd36f34c346847bcc4edd3d2/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33d3598e3b57c0fcfd36f34c346847bcc4edd3d2/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=33d3598e3b57c0fcfd36f34c346847bcc4edd3d2", "patch": "@@ -3315,9 +3315,27 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     tcx.mk_existential_predicates(iter)\n                 });\n                 let source_trait = tcx.mk_dynamic(existential_predicates, r_b);\n+\n+                // Require that the traits involved in this upcast are **equal**;\n+                // only the **lifetime bound** is changed.\n+                //\n+                // FIXME: This condition is arguably too strong -- it\n+                // would suffice for the source trait to be a\n+                // *subtype* of the target trait. In particular\n+                // changing from something like `for<'a, 'b> Foo<'a,\n+                // 'b>` to `for<'a> Foo<'a, 'a>` should be\n+                // permitted. And, indeed, in the in commit\n+                // 904a0bde93f0348f69914ee90b1f8b6e4e0d7cbc, this\n+                // condition was loosened. However, when the leak check was added\n+                // back, using subtype here actually guies the coercion code in\n+                // such a way that it accepts `old-lub-glb-object.rs`. This is probably\n+                // a good thing, but I've modified this to `.eq` because I want\n+                // to continue rejecting that test (as we have done for quite some time)\n+                // before we are firmly comfortable with what our behavior\n+                // should be there. -nikomatsakis\n                 let InferOk { obligations, .. } = self.infcx\n                     .at(&obligation.cause, obligation.param_env)\n-                    .sup(target, source_trait)\n+                    .eq(target, source_trait) // FIXME -- see below\n                     .map_err(|_| Unimplemented)?;\n                 nested.extend(obligations);\n "}, {"sha": "dcd604a5157e26b39d35cfa9ea4541cafeae79bc", "filename": "src/test/ui/lub-glb/old-lub-glb-object.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33d3598e3b57c0fcfd36f34c346847bcc4edd3d2/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33d3598e3b57c0fcfd36f34c346847bcc4edd3d2/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs?ref=33d3598e3b57c0fcfd36f34c346847bcc4edd3d2", "patch": "@@ -1,9 +1,5 @@\n // Test that we give a note when the old LUB/GLB algorithm would have\n // succeeded but the new code (which is stricter) gives an error.\n-//\n-// compile-pass\n-//\n-// TODO -- why does this test pass?\n \n trait Foo<T, U> { }\n \n@@ -13,7 +9,7 @@ fn foo(\n ) {\n     let z = match 22 {\n         0 => x,\n-        _ => y,\n+        _ => y, //~ ERROR match arms have incompatible types\n     };\n }\n "}, {"sha": "056f9131dd21cc7076ce8e9d6e903c06561b617a", "filename": "src/test/ui/lub-glb/old-lub-glb-object.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/33d3598e3b57c0fcfd36f34c346847bcc4edd3d2/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33d3598e3b57c0fcfd36f34c346847bcc4edd3d2/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr?ref=33d3598e3b57c0fcfd36f34c346847bcc4edd3d2", "patch": "@@ -0,0 +1,18 @@\n+error[E0308]: match arms have incompatible types\n+  --> $DIR/old-lub-glb-object.rs:12:14\n+   |\n+LL |       let z = match 22 {\n+   |  _____________-\n+LL | |         0 => x,\n+   | |              - this is found to be of type `&dyn for<'a, 'b> Foo<&'a u8, &'b u8>`\n+LL | |         _ => y, //~ ERROR match arms have incompatible types\n+   | |              ^ expected bound lifetime parameter 'a, found concrete lifetime\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+   |\n+   = note: expected type `&dyn for<'a, 'b> Foo<&'a u8, &'b u8>`\n+              found type `&dyn for<'a> Foo<&'a u8, &'a u8>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}