{"sha": "6eabd85265e18b47942dac7cf3f258e38d9d9f2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYWJkODUyNjVlMThiNDc5NDJkYWM3Y2YzZjI1OGUzOGQ5ZDlmMmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-06T14:51:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-06T14:51:26Z"}, "message": "auto merge of #17003 : nick29581/rust/impl, r=pcwalton\n\ncloses #16955 \r\n\r\nr? @pcwalton", "tree": {"sha": "9c40582ae0e611b5134dbc3814a346fc0199dec6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c40582ae0e611b5134dbc3814a346fc0199dec6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6eabd85265e18b47942dac7cf3f258e38d9d9f2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6eabd85265e18b47942dac7cf3f258e38d9d9f2e", "html_url": "https://github.com/rust-lang/rust/commit/6eabd85265e18b47942dac7cf3f258e38d9d9f2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6eabd85265e18b47942dac7cf3f258e38d9d9f2e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f2ba967a0c6c161158da52fa86ae153ac6aab19", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f2ba967a0c6c161158da52fa86ae153ac6aab19", "html_url": "https://github.com/rust-lang/rust/commit/9f2ba967a0c6c161158da52fa86ae153ac6aab19"}, {"sha": "2df3a5b0d1e7b340ecc97a082db520f8030eb7c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2df3a5b0d1e7b340ecc97a082db520f8030eb7c5", "html_url": "https://github.com/rust-lang/rust/commit/2df3a5b0d1e7b340ecc97a082db520f8030eb7c5"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "99c1d65d2b5b45356a0f552695e1f3dd451de809", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6eabd85265e18b47942dac7cf3f258e38d9d9f2e/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eabd85265e18b47942dac7cf3f258e38d9d9f2e/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=6eabd85265e18b47942dac7cf3f258e38d9d9f2e", "patch": "@@ -175,9 +175,7 @@ fn check_impl_of_trait(cx: &mut Context, it: &Item, trait_ref: &TraitRef, self_t\n fn check_item(cx: &mut Context, item: &Item) {\n     if !attr::contains_name(item.attrs.as_slice(), \"unsafe_destructor\") {\n         match item.node {\n-            ItemImpl(_, Some(ref trait_ref), ref self_type, _) => {\n-                check_impl_of_trait(cx, item, trait_ref, &**self_type);\n-\n+            ItemImpl(_, ref trait_ref, ref self_type, _) => {\n                 let parameter_environment =\n                     ParameterEnvironment::for_item(cx.tcx, item.id);\n                 cx.parameter_environments.push(parameter_environment);\n@@ -188,16 +186,23 @@ fn check_item(cx: &mut Context, item: &Item) {\n                     item.span,\n                     ty::node_id_to_type(cx.tcx, item.id));\n \n-                // Check bounds on the trait ref.\n-                match ty::impl_trait_ref(cx.tcx,\n-                                         ast_util::local_def(item.id)) {\n-                    None => {}\n-                    Some(trait_ref) => {\n-                        check_bounds_on_structs_or_enums_in_trait_ref(\n-                            cx,\n-                            item.span,\n-                            &*trait_ref);\n+                match trait_ref {\n+                    &Some(ref trait_ref) => {\n+                        check_impl_of_trait(cx, item, trait_ref, &**self_type);\n+\n+                        // Check bounds on the trait ref.\n+                        match ty::impl_trait_ref(cx.tcx,\n+                                                 ast_util::local_def(item.id)) {\n+                            None => {}\n+                            Some(trait_ref) => {\n+                                check_bounds_on_structs_or_enums_in_trait_ref(\n+                                    cx,\n+                                    item.span,\n+                                    &*trait_ref);\n+                            }\n+                        }\n                     }\n+                    &None => {}\n                 }\n \n                 drop(cx.parameter_environments.pop());"}, {"sha": "ba035dd2c6f195be6082cc9637c7e2146b3cadaf", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6eabd85265e18b47942dac7cf3f258e38d9d9f2e/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eabd85265e18b47942dac7cf3f258e38d9d9f2e/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs?ref=6eabd85265e18b47942dac7cf3f258e38d9d9f2e", "patch": "@@ -28,7 +28,8 @@ fn kaboom(y: Bar<f32>) {}\n //~^ ERROR failed to find an implementation\n //~^^ ERROR instantiating a type parameter with an incompatible type\n \n-impl<T> Foo<T> {\n+impl<T> Foo<T> { //~ ERROR failed to find an implementation\n+//~^ ERROR instantiating a type parameter with an incompatible type\n     fn uhoh() {}\n }\n "}, {"sha": "50e109b9934711a6b9b4fbde3bd0a09c8ef06b8e", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eabd85265e18b47942dac7cf3f258e38d9d9f2e/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eabd85265e18b47942dac7cf3f258e38d9d9f2e/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=6eabd85265e18b47942dac7cf3f258e38d9d9f2e", "patch": "@@ -76,6 +76,8 @@ trait T3<Sized? Z> {\n struct S4<Y>;\n impl<Sized? X> T3<X> for S4<X> { //~ ERROR instantiating a type parameter with an incompatible type\n }\n+impl<Sized? X> S4<X> { //~ ERROR instantiating a type parameter with an incompatible type\n+}\n \n \n pub fn main() {"}]}