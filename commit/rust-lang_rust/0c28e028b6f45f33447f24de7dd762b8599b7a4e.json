{"sha": "0c28e028b6f45f33447f24de7dd762b8599b7a4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMjhlMDI4YjZmNDVmMzM0NDdmMjRkZTdkZDc2MmI4NTk5YjdhNGU=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-27T16:04:57Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-30T09:00:21Z"}, "message": "`feature(const_generics)` -> `feature(const_param_types)`", "tree": {"sha": "3a573ebc79c4aefed676f4a693ebb62d32ea4e7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a573ebc79c4aefed676f4a693ebb62d32ea4e7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c28e028b6f45f33447f24de7dd762b8599b7a4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c28e028b6f45f33447f24de7dd762b8599b7a4e", "html_url": "https://github.com/rust-lang/rust/commit/0c28e028b6f45f33447f24de7dd762b8599b7a4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c28e028b6f45f33447f24de7dd762b8599b7a4e/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0e853f274c42665373b719a5bd7b3f95afe10c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e853f274c42665373b719a5bd7b3f95afe10c2", "html_url": "https://github.com/rust-lang/rust/commit/c0e853f274c42665373b719a5bd7b3f95afe10c2"}], "stats": {"total": 5154, "additions": 849, "deletions": 4305}, "files": [{"sha": "d0a95ea130a4b408dadaebbf67013a7f8cb370d6", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -332,7 +332,7 @@ pub type GenericBounds = Vec<GenericBound>;\n pub enum ParamKindOrd {\n     Lifetime,\n     Type,\n-    // `unordered` is only `true` if `sess.has_features().const_generics`\n+    // `unordered` is only `true` if `sess.has_features().const_generics_defaults`\n     // is active. Specifically, if it's only `min_const_generics`, it will still require\n     // ordering consts after types.\n     Const { unordered: bool },"}, {"sha": "1defb65ed8793d9ef7142dcacee8935f5a95ec43", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -687,7 +687,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(trait_alias, \"trait aliases are experimental\");\n     gate_all!(associated_type_bounds, \"associated type bounds are unstable\");\n     gate_all!(crate_visibility_modifier, \"`crate` visibility modifier is experimental\");\n-    gate_all!(const_generics, \"const generics are unstable\");\n     gate_all!(decl_macro, \"`macro` is experimental\");\n     gate_all!(box_patterns, \"box pattern syntax is experimental\");\n     gate_all!(exclusive_range_pattern, \"exclusive range pattern syntax is experimental\");"}, {"sha": "d4dbfb7a5d8e61c9b680df052e5e49f52a1200df", "filename": "compiler/rustc_error_codes/src/error_codes/E0671.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0671.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0671.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0671.md?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -4,8 +4,6 @@ Const parameters cannot depend on type parameters.\n The following is therefore invalid:\n \n ```compile_fail,E0770\n-#![feature(const_generics)]\n-\n fn const_id<T, const N: T>() -> T { // error\n     N\n }"}, {"sha": "510075dc779c3d146a33f2af5f578eacfbc683d2", "filename": "compiler/rustc_error_codes/src/error_codes/E0741.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0741.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0741.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0741.md?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -3,7 +3,7 @@ A non-structural-match type was used as the type of a const generic parameter.\n Erroneous code example:\n \n ```compile_fail,E0741\n-#![feature(const_generics)]\n+#![feature(const_param_types)]\n \n struct A;\n \n@@ -16,7 +16,7 @@ may be used as the types of const generic parameters.\n To fix the previous code example, we derive `PartialEq` and `Eq`:\n \n ```\n-#![feature(const_generics)]\n+#![feature(const_param_types)]\n \n #[derive(PartialEq, Eq)] // We derive both traits here.\n struct A;"}, {"sha": "cd8fc481bf0cdceabf5d9c3aa00b1fcff7aaeed0", "filename": "compiler/rustc_error_codes/src/error_codes/E0770.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0770.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0770.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0770.md?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -3,7 +3,6 @@ The type of a const parameter references other generic parameters.\n Erroneous code example:\n \n ```compile_fail,E0770\n-#![feature(const_generics)]\n fn foo<T, const N: T>() {} // error!\n ```\n "}, {"sha": "c1e133673cad19ee9b0ddc47144ca214abd305a3", "filename": "compiler/rustc_error_codes/src/error_codes/E0771.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0771.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0771.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0771.md?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -4,7 +4,7 @@ allowed.\n Erroneous code example:\n \n ```compile_fail,E0771\n-#![feature(const_generics)]\n+#![feature(const_param_types)]\n \n fn function_with_str<'a, const STRING: &'a str>() {} // error!\n ```\n@@ -13,7 +13,7 @@ To fix this issue, the lifetime in the const generic need to be changed to\n `'static`:\n \n ```\n-#![feature(const_generics)]\n+#![feature(const_param_types)]\n \n fn function_with_str<const STRING: &'static str>() {} // ok!\n ```"}, {"sha": "725f8b8763af17d3d048395884ede1d07caec3c3", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -273,7 +273,7 @@ declare_features! (\n     /// Allows patterns with concurrent by-move and by-ref bindings.\n     /// For example, you can write `Foo(a, ref b)` where `a` is by-move and `b` is by-ref.\n     (accepted, move_ref_pattern, \"1.49.0\", Some(68354), None),\n-    /// The smallest useful subset of `const_generics`.\n+    /// The smallest useful subset of const generics.\n     (accepted, min_const_generics, \"1.51.0\", Some(74878), None),\n     /// The `unsafe_op_in_unsafe_fn` lint (allowed by default): no longer treat an unsafe function as an unsafe block.\n     (accepted, unsafe_block_in_unsafe_fn, \"1.52.0\", Some(71668), None),"}, {"sha": "e2c88835f524c3c3763e85728c782e40158e3419", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -71,7 +71,7 @@ macro_rules! declare_features {\n             }\n \n             pub fn unordered_const_ty_params(&self) -> bool {\n-                self.const_generics || self.const_generics_defaults\n+                self.const_generics_defaults\n             }\n \n             /// Some features are known to be incomplete and using them is likely to have\n@@ -453,9 +453,6 @@ declare_features! (\n     /// Allows using `#[ffi_returns_twice]` on foreign functions.\n     (active, ffi_returns_twice, \"1.34.0\", Some(58314), None),\n \n-    /// Allows const generic types (e.g. `struct Foo<const N: usize>(...);`).\n-    (incomplete, const_generics, \"1.34.0\", Some(44580), None),\n-\n     /// Allows using `#[optimize(X)]`.\n     (active, optimize_attribute, \"1.34.0\", Some(54882), None),\n \n@@ -676,6 +673,9 @@ declare_features! (\n     /// Allows non-trivial generic constants which have to have wfness manually propagated to callers\n     (incomplete, generic_const_exprs, \"1.56.0\", Some(76560), None),\n \n+    /// Allows additional const parameter types, such as `&'static str` or user defined types\n+    (incomplete, const_param_types, \"1.56.0\", Some(44580), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "dd17b8ab22b499af9c0b14e025016f5c9b666606", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -102,6 +102,9 @@ declare_features! (\n     (removed, extern_in_paths, \"1.33.0\", Some(55600), None,\n      Some(\"subsumed by `::foo::bar` paths\")),\n     (removed, quote, \"1.33.0\", Some(29601), None, None),\n+    /// Allows const generic types (e.g. `struct Foo<const N: usize>(...);`).\n+    (removed, const_generics, \"1.34.0\", Some(44580), None,\n+     Some(\"removed in favor of `#![feature(const_param_types]` and `#![feature(generic_const_exprs)]`\")),\n     /// Allows `[x; N]` where `x` is a constant (RFC 2203).\n     (removed, const_in_array_repeat_expressions,  \"1.37.0\", Some(49147), None,\n      Some(\"removed due to causing promotable bugs\")),"}, {"sha": "a0ee212bed0cd5df3d1360950b38e3413296169e", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -202,7 +202,7 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n     /// A good example of this is the following:\n     ///\n     /// ```rust\n-    /// #![feature(const_generics)]\n+    /// #![feature(generic_const_exprs)]\n     ///\n     /// fn bind<const N: usize>(value: [u8; N]) -> [u8; 3 + 4] {\n     ///     todo!()"}, {"sha": "88b9e92119f60831c3cbef937c4bb1cfd68d98de", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -2340,7 +2340,7 @@ declare_lint! {\n     /// ### Example\n     ///\n     /// ```rust\n-    /// #![feature(const_generics)]\n+    /// #![feature(generic_const_exprs)]\n     /// ```\n     ///\n     /// {{produces}}"}, {"sha": "de7c6d9e095303a9f0d4bd7463852f335eff390e", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1420,8 +1420,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[inline]\n     pub fn lazy_normalization(self) -> bool {\n         let features = self.features();\n-        // Note: We do not enable lazy normalization for `min_const_generics`.\n-        features.const_generics || features.generic_const_exprs\n+        // Note: We only use lazy normalization for generic const expressions.\n+        features.generic_const_exprs\n     }\n \n     #[inline]"}, {"sha": "0b1687d1bd8c3d4dbbdcc6103cae85eddae5a9f7", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -506,8 +506,7 @@ impl<'a> Resolver<'a> {\n \n                 if self.session.is_nightly_build() {\n                     err.help(\n-                        \"use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` \\\n-                        to allow generic const expressions\",\n+                        \"use `#![feature(generic_const_exprs)]` to allow generic const expressions\",\n                     );\n                 }\n "}, {"sha": "45657f2d0f22a150b3f53bf4218fb33eabe6c53f", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -2245,7 +2245,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n     }\n \n     /// Non-static lifetimes are prohibited in anonymous constants under `min_const_generics`.\n-    /// This function will emit an error if `const_generics` is not enabled, the body identified by\n+    /// This function will emit an error if `generic_const_exprs` is not enabled, the body identified by\n     /// `body_id` is an anonymous constant and `lifetime_ref` is non-static.\n     crate fn maybe_emit_forbidden_non_static_lifetime_error(\n         &self,\n@@ -2264,7 +2264,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         if !self.tcx.lazy_normalization() && is_anon_const && !is_allowed_lifetime {\n             feature_err(\n                 &self.tcx.sess.parse_sess,\n-                sym::const_generics,\n+                sym::generic_const_exprs,\n                 lifetime_ref.span,\n                 \"a non-static lifetime is not allowed in a `const`\",\n             )"}, {"sha": "e901d4c00ab79a9488ba020f89fde589d3273c6b", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -2301,7 +2301,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             match *scope {\n                 Scope::Body { id, s } => {\n                     // Non-static lifetimes are prohibited in anonymous constants without\n-                    // `const_generics`.\n+                    // `generic_const_exprs`.\n                     self.maybe_emit_forbidden_non_static_lifetime_error(id, lifetime_ref);\n \n                     outermost_body = Some(id);"}, {"sha": "da3beac0819613d187095ce5365e02c930a39402", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -2734,8 +2734,7 @@ impl<'a> Resolver<'a> {\n                         ConstantItemRibKind(trivial, _) => {\n                             let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n-                            if !(trivial || features.const_generics || features.generic_const_exprs)\n-                            {\n+                            if !(trivial || features.generic_const_exprs) {\n                                 // HACK(min_const_generics): If we encounter `Self` in an anonymous constant\n                                 // we can't easily tell if it's generic at this stage, so we instead remember\n                                 // this and then enforce the self type to be concrete later on.\n@@ -2807,8 +2806,7 @@ impl<'a> Resolver<'a> {\n                         ConstantItemRibKind(trivial, _) => {\n                             let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n-                            if !(trivial || features.const_generics || features.generic_const_exprs)\n-                            {\n+                            if !(trivial || features.generic_const_exprs) {\n                                 if record_used {\n                                     self.report_error(\n                                         span,"}, {"sha": "9968cd62d95fed0e3ad296d793daca33c06f4b6e", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -451,6 +451,7 @@ symbols! {\n         const_mut_refs,\n         const_panic,\n         const_panic_fmt,\n+        const_param_types,\n         const_precise_live_drops,\n         const_ptr,\n         const_raw_ptr_deref,"}, {"sha": "761ea6df2e1e64df64ea94ee8498e8a60096f4ae", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -290,7 +290,7 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n \n             let err_ty_str;\n             let mut is_ptr = true;\n-            let err = if tcx.features().const_generics {\n+            let err = if tcx.features().const_param_types {\n                 match ty.peel_refs().kind() {\n                     ty::FnPtr(_) => Some(\"function pointers\"),\n                     ty::RawPtr(_) => Some(\"raw pointers\"),\n@@ -328,7 +328,7 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n                     err.note(\"the only supported types are integers, `bool` and `char`\");\n                     if tcx.sess.is_nightly_build() {\n                         err.help(\n-                            \"more complex types are supported with `#![feature(const_generics)]`\",\n+                            \"more complex types are supported with `#![feature(const_param_types)]`\",\n                         );\n                     }\n                     err.emit()"}, {"sha": "b8e8854847fb43e20f542032d50d1c3f2a431958", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1489,7 +1489,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 }\n \n                 // HACK(eddyb) this provides the correct generics when\n-                // `feature(const_generics)` is enabled, so that const expressions\n+                // `feature(generic_const_expressions)` is enabled, so that const expressions\n                 // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n                 //\n                 // Note that we do not supply the parent generics when using"}, {"sha": "e962c18d8ec71b4eb2d9abe09915fbe0b5df0e9b", "filename": "src/test/debuginfo/function-names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -82,8 +82,8 @@\n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n-#![feature(const_generics, generators, generator_trait)]\n-#![allow(incomplete_features)] // for const_generics\n+#![feature(const_param_types, generators, generator_trait)]\n+#![allow(incomplete_features)]\n \n use Mod1::TestTrait2;\n use std::ops::Generator;"}, {"sha": "7696bb7d331a0800b6981aea0b561317030a272d", "filename": "src/test/incremental/const-generics/hash-tyvid-regression-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // revisions: cfail\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs, const_param_types)]\n #![allow(incomplete_features)]\n // regression test for #77650\n fn c<T, const N: std::num::NonZeroUsize>()"}, {"sha": "cb8ca3abd7f9483793cec7381c14abbf54f1d1d2", "filename": "src/test/incremental/const-generics/hash-tyvid-regression-1.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,35 +0,0 @@\n-error[E0277]: the trait bound `[T; _]: From<()>` is not satisfied\n-  --> $DIR/hash-tyvid-regression-1.rs:9:5\n-   |\n-LL |     <[T; N.get()]>::try_from(())\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<()>` is not implemented for `[T; _]`\n-   |\n-   = note: required because of the requirements on the impl of `Into<[T; _]>` for `()`\n-   = note: required because of the requirements on the impl of `TryFrom<()>` for `[T; _]`\n-note: required by `try_from`\n-  --> $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn try_from(value: T) -> Result<Self, Self::Error>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/hash-tyvid-regression-1.rs:9:5\n-   |\n-LL |     <[T; N.get()]>::try_from(())\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found enum `Result`\n-   |\n-   = note: expected unit type `()`\n-                   found enum `Result<[T; _], Infallible>`\n-help: consider using a semicolon here\n-   |\n-LL |     <[T; N.get()]>::try_from(());\n-   |                                 +\n-help: try adding a return type\n-   |\n-LL | -> Result<[T; _], Infallible> where\n-   | +++++++++++++++++++++++++++++\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0277, E0308.\n-For more information about an error, try `rustc --explain E0277`."}, {"sha": "71d504d26a75ba3217d087a630be4fc74a56f37e", "filename": "src/test/incremental/const-generics/hash-tyvid-regression-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // revisions: cfail\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs, const_param_types, const_generics_defaults)]\n #![allow(incomplete_features)]\n // regression test for #77650\n struct C<T, const N: core::num::NonZeroUsize>([T; N.get()])"}, {"sha": "0e6040ef02e7ae23b943f2a9984b8c842a41da02", "filename": "src/test/incremental/const-generics/hash-tyvid-regression-2.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,11 +0,0 @@\n-error[E0277]: can't compare `[B; _]` with `&&[A]`\n-  --> $DIR/hash-tyvid-regression-2.rs:12:16\n-   |\n-LL |         self.0 == other\n-   |                ^^ no implementation for `[B; _] == &&[A]`\n-   |\n-   = help: the trait `PartialEq<&&[A]>` is not implemented for `[B; _]`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "61f568f79ef92419a3428cbc1be3f7ef0e55efb9", "filename": "src/test/incremental/const-generics/hash-tyvid-regression-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-3.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // revisions: cfail\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n // regression test for #79251\n struct Node<const D: usize>"}, {"sha": "555d46756dcb926e8be475a6789009e586fcf97c", "filename": "src/test/incremental/const-generics/hash-tyvid-regression-3.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-3.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,12 +0,0 @@\n-error[E0599]: no method named `some_function` found for struct `SmallVec` in the current scope\n-  --> $DIR/hash-tyvid-regression-3.rs:17:19\n-   |\n-LL |         node.keys.some_function();\n-   |                   ^^^^^^^^^^^^^ method not found in `SmallVec<{ D * 2 }>`\n-...\n-LL | struct SmallVec<const D: usize> {}\n-   | ------------------------------- method `some_function` not found for this\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0599`."}, {"sha": "12e8ac7abadc0b4640dcac9f9eaa9020f7e11e85", "filename": "src/test/incremental/const-generics/hash-tyvid-regression-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-4.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // revisions: cfail\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n // regression test for #79251\n #[derive(Debug)]"}, {"sha": "c9a6715e571c9f76b88af4a82b84678691757c78", "filename": "src/test/incremental/const-generics/hash-tyvid-regression-4.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-4.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,12 +0,0 @@\n-error[E0599]: no method named `push` found for struct `SmallVec` in the current scope\n-  --> $DIR/hash-tyvid-regression-4.rs:23:19\n-   |\n-LL |         node.keys.push(k);\n-   |                   ^^^^ method not found in `SmallVec<_, { D * 2 }>`\n-...\n-LL | struct SmallVec<T, const D: usize> {\n-   | ---------------------------------- method `push` not found for this\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0599`."}, {"sha": "e9d67fee2969af65c0bb55db1f6046ed0780b8ac", "filename": "src/test/incremental/const-generics/issue-61338.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-61338.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-61338.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-61338.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,5 @@\n // revisions:rpass1\n \n-#![feature(const_generics)]\n-\n struct Struct<T>(T);\n \n impl<T, const N: usize> Struct<[T; N]> {"}, {"sha": "c781484d1e2e97b0520c3c9b66f688763cbf97a1", "filename": "src/test/incremental/const-generics/issue-61516.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-61516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-61516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-61516.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,5 @@\n // revisions:rpass1\n \n-#![feature(const_generics)]\n-\n struct FakeArray<T, const N: usize>(T);\n \n impl<T, const N: usize> FakeArray<T, N> {"}, {"sha": "93c1dbf44e93839b87ec0a1416766d0df79aa5a4", "filename": "src/test/incremental/const-generics/issue-62536.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-62536.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-62536.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-62536.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,4 @@\n // revisions:cfail1\n-#![feature(const_generics)]\n-//[cfail1]~^ WARN the feature `const_generics` is incomplete\n-\n struct S<T, const N: usize>([T; N]);\n \n fn f<T, const N: usize>(x: T) -> S<T, {N}> { panic!() }"}, {"sha": "81c813531bd53d6bd6b09ff164d466e3cb2f31cb", "filename": "src/test/incremental/const-generics/issue-64087.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-64087.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-64087.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-64087.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,6 +1,4 @@\n // revisions:cfail1\n-#![feature(const_generics)]\n-//[cfail1]~^ WARN the feature `const_generics` is incomplete\n \n fn combinator<T, const S: usize>() -> [T; S] {}\n //[cfail1]~^ ERROR mismatched types"}, {"sha": "22bbcbcabed1b7c8363db1dac4f96b89ba034702", "filename": "src/test/incremental/const-generics/issue-65623.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-65623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-65623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-65623.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,6 +1,4 @@\n // revisions:rpass1\n-#![feature(const_generics)]\n-\n pub struct Foo<T, const N: usize>([T; 0]);\n \n impl<T, const N: usize> Foo<T, {N}> {"}, {"sha": "9e35cf93d0911845c670c50acab1cf6f59f6d57e", "filename": "src/test/incremental/const-generics/issue-68477.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-68477.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-68477.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fissue-68477.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,6 +1,8 @@\n // edition:2018\n // revisions:rpass1\n-#![feature(const_generics)]\n+\n+// Needed to supply generic arguments to the anon const in `[(); FOO]`.\n+#![feature(generic_const_exprs)]\n \n const FOO: usize = 1;\n "}, {"sha": "8262a2a211b7ede1d8cd6f00bbfb9c865564a92f", "filename": "src/test/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-77708-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-1.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // revisions: cfail\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features, unused_braces)]\n \n trait Delegates<T> {}"}, {"sha": "92bbcba4b38ac94f29371524a8e644007e512b7f", "filename": "src/test/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-77708-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-2.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // revisions: rpass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Z;"}, {"sha": "baca4562adef10a685923b8026953906eae08dcf", "filename": "src/test/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-77708-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-3.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // revisions: rpass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs, const_param_types)]\n #![allow(incomplete_features)]\n \n use std::{convert::TryFrom, num::NonZeroUsize};"}, {"sha": "c05d8355c280d7fa94539c2e028da0e71e904583", "filename": "src/test/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-82034.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-82034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-82034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-82034.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // revisions: rpass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n pub trait IsTrue {}\n pub trait IsFalse {}"}, {"sha": "8886a556dbb25f06f364b7ee4a8d6ac305c43eba", "filename": "src/test/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-85031-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-85031-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-85031-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-85031-1.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // revisions: rpass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n pub struct Ref<'a, const NUM: usize>(&'a i32);"}, {"sha": "db1e2fc2af481168116ecd4981656cca8211b3b6", "filename": "src/test/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-85031-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-85031-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-85031-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-85031-2.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,6 +1,6 @@\n // revisions: cfail\n #![allow(incomplete_features)]\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n \n pub struct Ref<'a>(&'a i32);\n "}, {"sha": "5b2f5edc8500e8f9b1e02fd7be3f92c15f0bf404", "filename": "src/test/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-85031-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-85031-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-85031-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-85031-3.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // revisions: rpass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n fn test<const SIZE: usize>() {}"}, {"sha": "d659c5676336e51387d88311c0fc4a1809d6270c", "filename": "src/test/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-86953.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-86953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-86953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-86953.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // revisions: rpass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Foo;"}, {"sha": "5f5435ba9f289f81d15f4be68db007ce461dee57", "filename": "src/test/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-88022.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-88022.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-88022.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-88022.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // revisions: cfail\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features, unused_braces)]\n \n struct Buffer<T, const S: usize>"}, {"sha": "7e38eb8369a8a7bbded402663945ec8d0d65cd8a", "filename": "src/test/rustdoc/const-generics/add-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_generics)]\n #![crate_name = \"foo\"]\n \n use std::ops::Add;"}, {"sha": "b20663c6d68a5736e252d9baba89e6fa611c6f50", "filename": "src/test/rustdoc/const-generics/const-generic-slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-slice.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,4 @@\n #![crate_name = \"foo\"]\n-#![feature(const_generics)]\n \n pub trait Array {\n     type Item;"}, {"sha": "f0bc9bf7bdd7870789b6e55fbee3933214a9ebcc", "filename": "src/test/rustdoc/const-generics/const-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics)]\n+#![feature(const_param_types)]\n \n #![crate_name = \"foo\"]\n "}, {"sha": "35036a89360e2734b74de01489a9fcfd7953975a", "filename": "src/test/rustdoc/const-generics/generic_const_exprs.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n-#![feature(generic_const_exprs, const_generics)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n // make sure that `ConstEvaluatable` predicates dont cause rustdoc to ICE #77647\n // @has foo/struct.Ice.html '//pre[@class=\"rust struct\"]' \\", "previous_filename": "src/test/rustdoc/const-generics/const-evaluatable-checked.rs"}, {"sha": "4eac8e31e45292ea5d950aefc349215c697b39f3", "filename": "src/test/rustdoc/const-generics/lazy_normalization_consts/const-equate-pred.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Frustdoc%2Fconst-generics%2Flazy_normalization_consts%2Fconst-equate-pred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Frustdoc%2Fconst-generics%2Flazy_normalization_consts%2Fconst-equate-pred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Flazy_normalization_consts%2Fconst-equate-pred.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n // Checking if `Send` is implemented for `Hasher` requires us to evaluate a `ConstEquate` predicate,"}, {"sha": "d190d7054fee7df4e980f089d93371782491d959", "filename": "src/test/ui/array-slice-vec/match_arr_unknown_len.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,6 +1,3 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n-\n fn is_123<const N: usize>(x: [u32; N]) -> bool {\n     match x {\n         [1, 2] => true, //~ ERROR mismatched types"}, {"sha": "1a14ab40b1f8623f0292a7ba6cba0f0eeb9db27a", "filename": "src/test/ui/array-slice-vec/match_arr_unknown_len.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,21 +1,12 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/match_arr_unknown_len.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n error[E0308]: mismatched types\n-  --> $DIR/match_arr_unknown_len.rs:6:9\n+  --> $DIR/match_arr_unknown_len.rs:3:9\n    |\n LL |         [1, 2] => true,\n    |         ^^^^^^ expected `2_usize`, found `N`\n    |\n    = note: expected array `[u32; 2]`\n               found array `[u32; N]`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "46a54a12d624519aa1fab7e9d2594bab846d1d31", "filename": "src/test/ui/associated-consts/associated-const-type-parameter-arrays.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -5,7 +5,7 @@ LL |     let _array: [u32; <A as Foo>::Y];\n    |                        ^ cannot perform const operation using `A`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "f2e4ca524a4391bbb5221dfb51018baa9b273f6b", "filename": "src/test/ui/associated-item/associated-item-duplicate-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -5,7 +5,7 @@ LL |     links: [u32; A::LINKS], // Shouldn't suggest bounds already there.\n    |                  ^^^^^^^^ cannot perform const operation using `A`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "24103390e090e1ce2a3a0e421766b217ee60a141", "filename": "src/test/ui/async-await/issues/issue-78654.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n // revisions: full min\n \n-#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, feature(const_param_types))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct Foo;"}, {"sha": "0200c6def246699b61605cfa37f18c1d7a6aef00", "filename": "src/test/ui/binding/const-param.min.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fbinding%2Fconst-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fbinding%2Fconst-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fconst-param.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,9 +0,0 @@\n-error[E0158]: const parameters cannot be referenced in patterns\n-  --> $DIR/const-param.rs:8:9\n-   |\n-LL |         N => {}\n-   |         ^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0158`."}, {"sha": "2d051808fe0bea703105a9fb015ce93545992304", "filename": "src/test/ui/binding/const-param.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fbinding%2Fconst-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fbinding%2Fconst-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fconst-param.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,4 @@\n // Identifier pattern referring to a const generic parameter is an error (issue #68853).\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n \n fn check<const N: usize>() {\n     match 1 {"}, {"sha": "adda80810ead2339c2713d4f1966a91def599cf4", "filename": "src/test/ui/binding/const-param.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fbinding%2Fconst-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fbinding%2Fconst-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fconst-param.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error[E0158]: const parameters cannot be referenced in patterns\n-  --> $DIR/const-param.rs:8:9\n+  --> $DIR/const-param.rs:5:9\n    |\n LL |         N => {}\n    |         ^", "previous_filename": "src/test/ui/binding/const-param.full.stderr"}, {"sha": "2a04dc313e9b2e56c96936fa29e612b02cf9e584", "filename": "src/test/ui/const-generics/apit-with-const-param.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,4 @@\n // check-pass\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n \n trait Trait {}\n "}, {"sha": "9762748f441f61c50ccc9d7a60155a5ee5d0823b", "filename": "src/test/ui/const-generics/argument_order.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.full.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,11 +1,11 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/argument_order.rs:11:32\n+  --> $DIR/argument_order.rs:10:32\n    |\n LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n    |               -----------------^^-----^^-------------------- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, const N: usize, T, const M: usize, U>`\n \n error[E0747]: lifetime provided when a type was expected\n-  --> $DIR/argument_order.rs:19:23\n+  --> $DIR/argument_order.rs:18:23\n    |\n LL |     let _: AlsoBad<7, 'static, u32, 'static, 17, u16>;\n    |                       ^^^^^^^"}, {"sha": "afd9ed1a7235dbe956c06f227801c52a1a3e8f05", "filename": "src/test/ui/const-generics/argument_order.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.min.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,23 +1,23 @@\n error: type parameters must be declared prior to const parameters\n-  --> $DIR/argument_order.rs:5:28\n+  --> $DIR/argument_order.rs:4:28\n    |\n LL | struct Bad<const N: usize, T> {\n    |           -----------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const N: usize>`\n \n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/argument_order.rs:11:32\n+  --> $DIR/argument_order.rs:10:32\n    |\n LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n    |               -----------------^^-----^^-------------------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T, U, const N: usize, const M: usize>`\n \n error: type parameters must be declared prior to const parameters\n-  --> $DIR/argument_order.rs:11:36\n+  --> $DIR/argument_order.rs:10:36\n    |\n LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n    |               ---------------------^----------------------^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T, U, const N: usize, const M: usize>`\n \n error[E0747]: lifetime provided when a type was expected\n-  --> $DIR/argument_order.rs:19:23\n+  --> $DIR/argument_order.rs:18:23\n    |\n LL |     let _: AlsoBad<7, 'static, u32, 'static, 17, u16>;\n    |                       ^^^^^^^"}, {"sha": "97dd0f1435227c5cb58543e43891a66d072a8460", "filename": "src/test/ui/const-generics/argument_order.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,6 +1,5 @@\n // revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics_defaults))]\n \n struct Bad<const N: usize, T> {\n     //[min]~^ ERROR type parameters must be declared prior to const parameters"}, {"sha": "0fb23e41b013fa076ed25d15909eaf5890e55bc0", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.full.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.full.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,18 +0,0 @@\n-error: constant expression depends on a generic parameter\n-  --> $DIR/array-size-in-generic-struct-param.rs:8:38\n-   |\n-LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n-   |                                      ^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/array-size-in-generic-struct-param.rs:19:10\n-   |\n-LL |     arr: [u8; CFG.arr_size],\n-   |          ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "a712f691dbe2242cfbf64957f057bb379bff7870", "filename": "src/test/ui/const-generics/array-wrapper-struct-ctor.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,4 @@\n // run-pass\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n \n #![allow(dead_code)]\n "}, {"sha": "7ab430ba830b31b2e6f1e18ef65719a28702fa8b", "filename": "src/test/ui/const-generics/associated-type-bound-fail.min.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,17 +0,0 @@\n-error[E0277]: the trait bound `u16: Bar<N>` is not satisfied\n-  --> $DIR/associated-type-bound-fail.rs:13:5\n-   |\n-LL |     type Assoc = u16;\n-   |     ^^^^^^^^^^^^^^^^^ the trait `Bar<N>` is not implemented for `u16`\n-   |\n-   = help: the following implementations were found:\n-             <u16 as Bar<3_usize>>\n-note: required by a bound in `Foo::Assoc`\n-  --> $DIR/associated-type-bound-fail.rs:8:17\n-   |\n-LL |     type Assoc: Bar<N>;\n-   |                 ^^^^^^ required by this bound in `Foo::Assoc`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "937b8bcb6305785ca14706a7beae97dae48ad970", "filename": "src/test/ui/const-generics/associated-type-bound-fail.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,3 @@\n-// revisions: full min\n-#![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(full, feature(const_generics))]\n-\n trait Bar<const N: usize> {}\n \n trait Foo<const N: usize> {"}, {"sha": "60e624fc6a8c48ac2d1c5e010e99f9feef15e0f0", "filename": "src/test/ui/const-generics/associated-type-bound-fail.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: the trait bound `u16: Bar<N>` is not satisfied\n-  --> $DIR/associated-type-bound-fail.rs:13:5\n+  --> $DIR/associated-type-bound-fail.rs:9:5\n    |\n LL |     type Assoc = u16;\n    |     ^^^^^^^^^^^^^^^^^ the trait `Bar<N>` is not implemented for `u16`\n    |\n    = help: the following implementations were found:\n              <u16 as Bar<3_usize>>\n note: required by a bound in `Foo::Assoc`\n-  --> $DIR/associated-type-bound-fail.rs:8:17\n+  --> $DIR/associated-type-bound-fail.rs:4:17\n    |\n LL |     type Assoc: Bar<N>;\n    |                 ^^^^^^ required by this bound in `Foo::Assoc`", "previous_filename": "src/test/ui/const-generics/associated-type-bound-fail.full.stderr"}, {"sha": "3044736b47e05515122be179890921544e2e4eb8", "filename": "src/test/ui/const-generics/associated-type-bound.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,4 @@\n // run-pass\n-// revisions: full min\n-#![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(full, feature(const_generics))]\n-\n trait Bar<const N: usize> {}\n \n trait Foo<const N: usize> {"}, {"sha": "922f92d9feb71a44337bf4c5b948c1eaf44c77b1", "filename": "src/test/ui/const-generics/auxiliary/const_generic_lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fconst_generic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fconst_generic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fconst_generic_lib.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,6 +1,3 @@\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n pub struct Struct<const N: usize>(pub [u8; N]);\n \n pub type Alias = Struct<2>;"}, {"sha": "19a8bb0f4eb21690b4958a6fe1b45aa797a0a684", "filename": "src/test/ui/const-generics/auxiliary/crayte.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fcrayte.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fcrayte.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fcrayte.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,6 +1,4 @@\n // edition:2018\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n \n pub trait Foo<const N: usize> {}\n struct Local;"}, {"sha": "5c2b1f4bddf82fa40f32668beaaac9c49d5a38ca", "filename": "src/test/ui/const-generics/auxiliary/generics_of_parent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fgenerics_of_parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fgenerics_of_parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fgenerics_of_parent.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n // library portion of regression test for #87674"}, {"sha": "cd5b8161d08ba997beec3b1d7b52d12bc089a82d", "filename": "src/test/ui/const-generics/auxiliary/generics_of_parent_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fgenerics_of_parent_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fgenerics_of_parent_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fgenerics_of_parent_impl_trait.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n // library portion of testing that `impl Trait<{ expr }>` doesnt"}, {"sha": "6b6140e3a730cceb03ccb365b112fba2cbf47a7f", "filename": "src/test/ui/const-generics/broken-mir-1.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,9 +1,4 @@\n // run-pass\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n pub trait Foo {\n     fn foo(&self);\n }"}, {"sha": "f9e03151374a2190040f8d4d949c09436db6a90b", "filename": "src/test/ui/const-generics/broken-mir-2.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,9 +1,4 @@\n // run-pass\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n use std::fmt::Debug;\n \n #[derive(Debug)]"}, {"sha": "a6e767489b79e3aeb8fbd1f6d046bba11ca0f0d7", "filename": "src/test/ui/const-generics/cannot-infer-type-for-const-param.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,4 @@\n // check-pass\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n \n // This test confirms that the types can be inferred correctly for this example with const\n // generics. Previously this would ICE, and more recently error."}, {"sha": "f4bb1e422076915575e0e8e3c45b2e21247d476f", "filename": "src/test/ui/const-generics/closing-args-token.min.stderr", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fclosing-args-token.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fclosing-args-token.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fclosing-args-token.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,52 +0,0 @@\n-error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/closing-args-token.rs:10:9\n-   |\n-LL |     S::<5 + 2 >> 7>;\n-   |         ^^^^^\n-   |\n-help: enclose the `const` expression in braces\n-   |\n-LL |     S::<{ 5 + 2 } >> 7>;\n-   |         +       +\n-\n-error: comparison operators cannot be chained\n-  --> $DIR/closing-args-token.rs:10:16\n-   |\n-LL |     S::<5 + 2 >> 7>;\n-   |                ^  ^\n-   |\n-help: split the comparison into two\n-   |\n-LL |     S::<5 + 2 >> 7 && 7>;\n-   |                    ++++\n-\n-error: comparison operators cannot be chained\n-  --> $DIR/closing-args-token.rs:16:20\n-   |\n-LL |     S::<{ 5 + 2 } >> 7>;\n-   |                    ^  ^\n-   |\n-help: split the comparison into two\n-   |\n-LL |     S::<{ 5 + 2 } >> 7 && 7>;\n-   |                        ++++\n-\n-error: expected expression, found `;`\n-  --> $DIR/closing-args-token.rs:21:16\n-   |\n-LL |     T::<0 >= 3>;\n-   |                ^ expected expression\n-\n-error: comparison operators cannot be chained\n-  --> $DIR/closing-args-token.rs:27:12\n-   |\n-LL |     T::<x >>= 2 > 0>;\n-   |            ^^   ^\n-   |\n-help: split the comparison into two\n-   |\n-LL |     T::<x >>= 2 && 2 > 0>;\n-   |                 ++++\n-\n-error: aborting due to 5 previous errors\n-"}, {"sha": "ffd5eb9d462eda0efe3be7b4f7ca7fed693256cb", "filename": "src/test/ui/const-generics/coerce_unsized_array.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fcoerce_unsized_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fcoerce_unsized_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcoerce_unsized_array.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,9 +1,4 @@\n // run-pass\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n fn foo<const N: usize>(v: &[u8; N]) -> &[u8] {\n     v\n }"}, {"sha": "372f0433e951150ac5b5d88bad3445cc73051c3e", "filename": "src/test/ui/const-generics/concrete-const-as-fn-arg.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,9 +1,5 @@\n // Test that a concrete const type i.e. A<2>, can be used as an argument type in a function\n // run-pass\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n \n struct A<const N: usize>; // ok\n "}, {"sha": "53c9c0ead0f9350809033bf0c438041031da259a", "filename": "src/test/ui/const-generics/concrete-const-impl-method.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,10 +1,6 @@\n // Test that a method/associated non-method within an impl block of a concrete const type i.e. A<2>,\n // is callable.\n // run-pass\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n \n pub struct A<const N: u32>;\n "}, {"sha": "6f85237cf0aaf74410730d39e0a0433e235e9675", "filename": "src/test/ui/const-generics/condition-in-trait-const-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -2,7 +2,7 @@\n // run-pass\n // revisions: full min\n \n-#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, feature(generic_const_exprs))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n trait IsZeroTrait<const IS_ZERO: bool>{}"}, {"sha": "aa0f9131aa7f5e42abc3a924ac28625136b094ea", "filename": "src/test/ui/const-generics/conservative_is_privately_uninhabited_uses_correct_param_env-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-1.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n // This tests that the `conservative_is_privately_uninhabited` fn doesn't cause"}, {"sha": "d0864414cc1fd3cbff46e4591fad9a4b823bd631", "filename": "src/test/ui/const-generics/conservative_is_privately_uninhabited_uses_correct_param_env-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-2.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n // This tests that the `conservative_is_privately_uninhabited` fn doesn't cause"}, {"sha": "ac693426fbd983d6d295f4663e9f6ad890450938", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.min.stderr", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -5,7 +5,7 @@ LL |     let _: [u8; foo::<T>()];\n    |                       ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:14:23\n@@ -14,7 +14,7 @@ LL |     let _: [u8; bar::<N>()];\n    |                       ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:24:23\n@@ -23,7 +23,7 @@ LL |     let _ = [0; bar::<N>()];\n    |                       ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:29:24\n@@ -32,7 +32,7 @@ LL |     let _: Foo<{ foo::<T>() }>;\n    |                        ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:30:24\n@@ -41,7 +41,7 @@ LL |     let _: Foo<{ bar::<N>() }>;\n    |                        ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:35:27\n@@ -50,7 +50,7 @@ LL |     let _ = Foo::<{ foo::<T>() }>;\n    |                           ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:36:27\n@@ -59,151 +59,151 @@ LL |     let _ = Foo::<{ bar::<N>() }>;\n    |                           ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n   --> $DIR/const-arg-in-const-arg.rs:15:23\n    |\n LL |     let _: [u8; faz::<'a>(&())];\n    |                       ^^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n   --> $DIR/const-arg-in-const-arg.rs:16:23\n    |\n LL |     let _: [u8; baz::<'a>(&())];\n    |                       ^^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n   --> $DIR/const-arg-in-const-arg.rs:17:23\n    |\n LL |     let _: [u8; faz::<'b>(&())];\n    |                       ^^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n   --> $DIR/const-arg-in-const-arg.rs:18:23\n    |\n LL |     let _: [u8; baz::<'b>(&())];\n    |                       ^^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n   --> $DIR/const-arg-in-const-arg.rs:25:23\n    |\n LL |     let _ = [0; faz::<'a>(&())];\n    |                       ^^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n   --> $DIR/const-arg-in-const-arg.rs:26:23\n    |\n LL |     let _ = [0; baz::<'a>(&())];\n    |                       ^^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n   --> $DIR/const-arg-in-const-arg.rs:27:23\n    |\n LL |     let _ = [0; faz::<'b>(&())];\n    |                       ^^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n   --> $DIR/const-arg-in-const-arg.rs:28:23\n    |\n LL |     let _ = [0; baz::<'b>(&())];\n    |                       ^^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n   --> $DIR/const-arg-in-const-arg.rs:31:24\n    |\n LL |     let _: Foo<{ faz::<'a>(&()) }>;\n    |                        ^^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n   --> $DIR/const-arg-in-const-arg.rs:32:24\n    |\n LL |     let _: Foo<{ baz::<'a>(&()) }>;\n    |                        ^^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n   --> $DIR/const-arg-in-const-arg.rs:33:24\n    |\n LL |     let _: Foo<{ faz::<'b>(&()) }>;\n    |                        ^^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n   --> $DIR/const-arg-in-const-arg.rs:34:24\n    |\n LL |     let _: Foo<{ baz::<'b>(&()) }>;\n    |                        ^^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n   --> $DIR/const-arg-in-const-arg.rs:37:27\n    |\n LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n    |                           ^^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n   --> $DIR/const-arg-in-const-arg.rs:38:27\n    |\n LL |     let _ = Foo::<{ baz::<'a>(&()) }>;\n    |                           ^^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n   --> $DIR/const-arg-in-const-arg.rs:39:27\n    |\n LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n    |                           ^^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n   --> $DIR/const-arg-in-const-arg.rs:40:27\n    |\n LL |     let _ = Foo::<{ baz::<'b>(&()) }>;\n    |                           ^^\n    |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error: aborting due to 23 previous errors\n "}, {"sha": "39f0b23733029b580728ba1d80db2cb89fdc51a5", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // revisions: min\n-// FIXME(const_generics): This test currently causes an ICE because\n+// FIXME(generic_const_exprs): This test currently causes an ICE because\n // we don't yet correctly deal with lifetimes, reenable this test once\n // this is fixed.\n "}, {"sha": "9b225b18d73031b7b099700151685eb15520e692", "filename": "src/test/ui/const-generics/const-arg-in-fn.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,9 +1,4 @@\n // run-pass\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n fn const_u32_identity<const X: u32>() -> u32 {\n     X\n }"}, {"sha": "d0ea51ea4173a501df00bf8b51de2183bc7d2b2f", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.full.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.full.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,9 +0,0 @@\n-error[E0747]: constant provided when a type was expected\n-  --> $DIR/const-arg-type-arg-misordered.rs:7:35\n-   |\n-LL | fn foo<const N: usize>() -> Array<N, ()> {\n-   |                                   ^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0747`."}, {"sha": "8ee17e637aa3028f994a0145d7abe2d7636c4b85", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,3 @@\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n type Array<T, const N: usize> = [T; N];\n \n fn foo<const N: usize>() -> Array<N, ()> {"}, {"sha": "104ee9b48b4330cbcf882072d49c894edf32ca72", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error[E0747]: constant provided when a type was expected\n-  --> $DIR/const-arg-type-arg-misordered.rs:7:35\n+  --> $DIR/const-arg-type-arg-misordered.rs:3:35\n    |\n LL | fn foo<const N: usize>() -> Array<N, ()> {\n    |                                   ^", "previous_filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.min.stderr"}, {"sha": "6ef698bd6a04f6b140ceb13abc83275b86c503b3", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.min.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,15 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:9:67\n-   |\n-LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8]));\n-   |                                                                   ^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n-\n-error[E0308]: mismatched types\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:11:65\n-   |\n-LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8, 2u8]);\n-   |                                                                 ^^^^^^^^^^^^^^^ expected an array with a fixed size of 2 elements, found one with 3 elements\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "d863d097d5caf324554f323cf7f3bb0953205027", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,4 @@\n // aux-build:const_generic_lib.rs\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n \n extern crate const_generic_lib;\n "}, {"sha": "aefd514f7a68ec65bb145a5ab9a33a9428f321f6", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,11 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:9:67\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:6:67\n    |\n LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8]));\n    |                                                                   ^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n \n error[E0308]: mismatched types\n-  --> $DIR/const-argument-cross-crate-mismatch.rs:11:65\n+  --> $DIR/const-argument-cross-crate-mismatch.rs:8:65\n    |\n LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8, 2u8]);\n    |                                                                 ^^^^^^^^^^^^^^^ expected an array with a fixed size of 2 elements, found one with 3 elements", "previous_filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.full.stderr"}, {"sha": "8c5c3b17b5c474044278f8fbb83cb49ca28fb621", "filename": "src/test/ui/const-generics/const-argument-if-length.full.stderr", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,24 +1,5 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/const-argument-if-length.rs:7:28\n-   |\n-LL | pub const fn is_zst<T: ?Sized>() -> usize {\n-   |                     - this type parameter needs to be `std::marker::Sized`\n-LL |     if std::mem::size_of::<T>() == 0 {\n-   |                            ^ doesn't have a size known at compile-time\n-   |\n-note: required by a bound in `std::mem::size_of`\n-  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   |\n-LL | pub const fn size_of<T>() -> usize {\n-   |                      ^ required by this bound in `std::mem::size_of`\n-help: consider removing the `?Sized` bound to make the type parameter `Sized`\n-   |\n-LL - pub const fn is_zst<T: ?Sized>() -> usize {\n-LL + pub const fn is_zst<T>() -> usize {\n-   | \n-\n-error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/const-argument-if-length.rs:16:12\n+  --> $DIR/const-argument-if-length.rs:15:12\n    |\n LL | pub struct AtLeastByte<T: ?Sized> {\n    |                        - this type parameter needs to be `std::marker::Sized`\n@@ -41,6 +22,14 @@ help: the `Box` type always has a statically known size and allocates its conten\n LL |     value: Box<T>,\n    |            ++++ +\n \n+error: unconstrained generic constant\n+  --> $DIR/const-argument-if-length.rs:17:10\n+   |\n+LL |     pad: [u8; is_zst::<T>()],\n+   |          ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); is_zst::<T>()]:`\n+\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "b123036bf25060f2b303859d5fe6d46132c40b52", "filename": "src/test/ui/const-generics/const-argument-if-length.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,14 +1,14 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/const-argument-if-length.rs:18:24\n+  --> $DIR/const-argument-if-length.rs:17:24\n    |\n LL |     pad: [u8; is_zst::<T>()],\n    |                        ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/const-argument-if-length.rs:16:12\n+  --> $DIR/const-argument-if-length.rs:15:12\n    |\n LL | pub struct AtLeastByte<T: ?Sized> {\n    |                        - this type parameter needs to be `std::marker::Sized`"}, {"sha": "db1eafca2c7222186503d3276dd4cfe73f7bf1d7", "filename": "src/test/ui/const-generics/const-argument-if-length.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,11 +1,10 @@\n // revisions: full min\n \n+#![cfg_attr(full, feature(generic_const_exprs))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(full, feature(const_generics))]\n \n pub const fn is_zst<T: ?Sized>() -> usize {\n     if std::mem::size_of::<T>() == 0 {\n-        //[full]~^ ERROR the size for values of type `T` cannot be known at compilation time\n         1\n     } else {\n         0\n@@ -17,6 +16,7 @@ pub struct AtLeastByte<T: ?Sized> {\n     //~^ ERROR the size for values of type `T` cannot be known at compilation time\n     pad: [u8; is_zst::<T>()],\n     //[min]~^ ERROR generic parameters may not be used in const operations\n+    //[full]~^^ ERROR unconstrained generic constant\n }\n \n fn main() {}"}, {"sha": "2aca7bdeb9a1442e172a08eda5d07585b5c182bf", "filename": "src/test/ui/const-generics/const-argument-non-static-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -2,7 +2,7 @@\n // revisions: full\n // FIXME(#75323) Omitted min revision for now due to ICE.\n \n-#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, feature(generic_const_exprs))]\n #![cfg_attr(full, allow(incomplete_features))]\n #![allow(dead_code)]\n "}, {"sha": "4ce0ecdf3aab9f190ad9c8f3ca256a8b21443622", "filename": "src/test/ui/const-generics/const-expression-parameter.min.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,13 +0,0 @@\n-error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/const-expression-parameter.rs:15:20\n-   |\n-LL |     i32_identity::<1 + 2>();\n-   |                    ^^^^^\n-   |\n-help: enclose the `const` expression in braces\n-   |\n-LL |     i32_identity::<{ 1 + 2 }>();\n-   |                    +       +\n-\n-error: aborting due to previous error\n-"}, {"sha": "161bfaab48aded5312667e89da11f1c9fe9e729b", "filename": "src/test/ui/const-generics/const-fn-with-const-param.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,9 +1,5 @@\n // Checks that `const fn` with const params can be used.\n // run-pass\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n \n const fn const_u32_identity<const X: u32>() -> u32 {\n     X"}, {"sha": "224fc794e327f5d4006a6373471a041606d70d5f", "filename": "src/test/ui/const-generics/const-generic-array-wrapper.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,19 +0,0 @@\n-// run-pass\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n-struct Foo<T, const N: usize>([T; N]);\n-\n-impl<T, const N: usize> Foo<T, N> {\n-    fn foo(&self) -> usize {\n-        N\n-    }\n-}\n-\n-fn main() {\n-    let foo = Foo([0u32; 21]);\n-    assert_eq!(foo.0, [0u32; 21]);\n-    assert_eq!(foo.foo(), 21);\n-}"}, {"sha": "bb16be9c58c3ff99b5b3035d06fe3ffd517be441", "filename": "src/test/ui/const-generics/const-generic-type_name.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,4 @@\n // run-pass\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n \n #[derive(Debug)]\n struct S<const N: usize>;"}, {"sha": "d8a0e076e0a46ac464e91570a93a29202e0667c8", "filename": "src/test/ui/const-generics/const-param-after-const-literal-arg.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-after-const-literal-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-after-const-literal-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-after-const-literal-arg.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,4 @@\n // check-pass\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n \n struct Foo<const A: usize, const B: usize>;\n "}, {"sha": "982417eb3c61e7d65bed83da0e8af5ef8afd2915", "filename": "src/test/ui/const-generics/const-param-before-other-params.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.full.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,8 @@\n error: lifetime parameters must be declared prior to const parameters\n   --> $DIR/const-param-before-other-params.rs:5:21\n    |\n-LL | fn bar<const X: (), 'a>(_: &'a ()) {\n-   |       --------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const X: ()>`\n+LL | fn bar<const X: u8, 'a>(_: &'a ()) {\n+   |       --------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const X: u8>`\n \n error: aborting due to previous error\n "}, {"sha": "f439cd9d69fcce59abc7d74fe362a65f87f269c6", "filename": "src/test/ui/const-generics/const-param-before-other-params.min.stderr", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,32 +1,14 @@\n error: lifetime parameters must be declared prior to const parameters\n   --> $DIR/const-param-before-other-params.rs:5:21\n    |\n-LL | fn bar<const X: (), 'a>(_: &'a ()) {\n-   |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const X: ()>`\n+LL | fn bar<const X: u8, 'a>(_: &'a ()) {\n+   |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const X: u8>`\n \n error: type parameters must be declared prior to const parameters\n-  --> $DIR/const-param-before-other-params.rs:10:21\n+  --> $DIR/const-param-before-other-params.rs:9:21\n    |\n-LL | fn foo<const X: (), T>(_: &T) {}\n-   |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const X: ()>`\n+LL | fn foo<const X: u8, T>(_: &T) {}\n+   |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const X: u8>`\n \n-error: `()` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-param-before-other-params.rs:5:17\n-   |\n-LL | fn bar<const X: (), 'a>(_: &'a ()) {\n-   |                 ^^\n-   |\n-   = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_generics)]`\n-\n-error: `()` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-param-before-other-params.rs:10:17\n-   |\n-LL | fn foo<const X: (), T>(_: &T) {}\n-   |                 ^^\n-   |\n-   = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_generics)]`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "0a7b57fe626b1b0212adc96a62c511032f7b17b0", "filename": "src/test/ui/const-generics/const-param-before-other-params.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,14 +1,12 @@\n // revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, feature(const_generics_defaults))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n-fn bar<const X: (), 'a>(_: &'a ()) {\n+fn bar<const X: u8, 'a>(_: &'a ()) {\n     //~^ ERROR lifetime parameters must be declared prior to const parameters\n-    //[min]~^^ ERROR `()` is forbidden as the type of a const generic parameter\n }\n \n-fn foo<const X: (), T>(_: &T) {}\n+fn foo<const X: u8, T>(_: &T) {}\n //[min]~^ ERROR type parameters must be declared prior to const parameters\n-//[min]~^^ ERROR `()` is forbidden as the type of a const generic parameter\n \n fn main() {}"}, {"sha": "d6753a74f857482cb613c0b96d399ba1751f00df", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.full.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.full.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,29 +1,29 @@\n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:10:19\n+  --> $DIR/const-param-elided-lifetime.rs:9:19\n    |\n LL | struct A<const N: &u8>;\n    |                   ^ explicit lifetime name needed here\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:15:15\n+  --> $DIR/const-param-elided-lifetime.rs:14:15\n    |\n LL | impl<const N: &u8> A<N> {\n    |               ^ explicit lifetime name needed here\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:18:21\n+  --> $DIR/const-param-elided-lifetime.rs:17:21\n    |\n LL |     fn foo<const M: &u8>(&self) {}\n    |                     ^ explicit lifetime name needed here\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:23:15\n+  --> $DIR/const-param-elided-lifetime.rs:22:15\n    |\n LL | impl<const N: &u8> B for A<N> {}\n    |               ^ explicit lifetime name needed here\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:27:17\n+  --> $DIR/const-param-elided-lifetime.rs:26:17\n    |\n LL | fn bar<const N: &u8>() {}\n    |                 ^ explicit lifetime name needed here"}, {"sha": "0f98adf2a6bc500d7e7b3f85523566818aef98b2", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.min.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,77 +1,77 @@\n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:10:19\n+  --> $DIR/const-param-elided-lifetime.rs:9:19\n    |\n LL | struct A<const N: &u8>;\n    |                   ^ explicit lifetime name needed here\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:15:15\n+  --> $DIR/const-param-elided-lifetime.rs:14:15\n    |\n LL | impl<const N: &u8> A<N> {\n    |               ^ explicit lifetime name needed here\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:18:21\n+  --> $DIR/const-param-elided-lifetime.rs:17:21\n    |\n LL |     fn foo<const M: &u8>(&self) {}\n    |                     ^ explicit lifetime name needed here\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:23:15\n+  --> $DIR/const-param-elided-lifetime.rs:22:15\n    |\n LL | impl<const N: &u8> B for A<N> {}\n    |               ^ explicit lifetime name needed here\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:27:17\n+  --> $DIR/const-param-elided-lifetime.rs:26:17\n    |\n LL | fn bar<const N: &u8>() {}\n    |                 ^ explicit lifetime name needed here\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-param-elided-lifetime.rs:10:19\n+  --> $DIR/const-param-elided-lifetime.rs:9:19\n    |\n LL | struct A<const N: &u8>;\n    |                   ^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_param_types)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-param-elided-lifetime.rs:15:15\n+  --> $DIR/const-param-elided-lifetime.rs:14:15\n    |\n LL | impl<const N: &u8> A<N> {\n    |               ^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_param_types)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-param-elided-lifetime.rs:18:21\n+  --> $DIR/const-param-elided-lifetime.rs:17:21\n    |\n LL |     fn foo<const M: &u8>(&self) {}\n    |                     ^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_param_types)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-param-elided-lifetime.rs:23:15\n+  --> $DIR/const-param-elided-lifetime.rs:22:15\n    |\n LL | impl<const N: &u8> B for A<N> {}\n    |               ^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_param_types)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-param-elided-lifetime.rs:27:17\n+  --> $DIR/const-param-elided-lifetime.rs:26:17\n    |\n LL | fn bar<const N: &u8>() {}\n    |                 ^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_param_types)]`\n \n error: aborting due to 10 previous errors\n "}, {"sha": "345e192f8db4f1c102376567c65a03859dcc669c", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -3,8 +3,7 @@\n // elided lifetimes within the type of a const generic parameters to be 'static, like elided\n // lifetimes within const/static items.\n // revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, feature(const_param_types))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct A<const N: &u8>;"}, {"sha": "c2ec7359c9f7be224196ef678fc5d1006c2e8fae", "filename": "src/test/ui/const-generics/const-param-from-outer-fn.min.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,13 +0,0 @@\n-error[E0401]: can't use generic parameters from outer function\n-  --> $DIR/const-param-from-outer-fn.rs:8:9\n-   |\n-LL | fn foo<const X: u32>() {\n-   |              - const parameter from outer function\n-LL |     fn bar() -> u32 {\n-   |        --- try adding a local generic parameter in this method instead\n-LL |         X\n-   |         ^ use of generic parameter from outer function\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0401`."}, {"sha": "f823431e69b9ef51e3148cc949daf3ed28aa936c", "filename": "src/test/ui/const-generics/const-param-in-async.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-async.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,5 @@\n // edition:2018\n // check-pass\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n \n async fn foo<const N: usize>(arg: [u8; N]) -> usize { arg.len() }\n "}, {"sha": "79b3ae2037edabf1087dba5794db339d4758b262", "filename": "src/test/ui/const-generics/const-param-in-trait.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.rs?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,11 +0,0 @@\n-// Check that const parameters are permitted in traits.\n-// run-pass\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n-\n-trait Trait<const T: u8> {}\n-\n-fn main() {}"}, {"sha": "db3a04b8235d59f59ab98050b1a1a43d499f5de4", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -17,7 +17,7 @@ LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n    |                                               ^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_param_types)]`\n \n error: `[u8; _]` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-type-depends-on-const-param.rs:15:35\n@@ -26,7 +26,7 @@ LL | pub struct SelfDependent<const N: [u8; N]>;\n    |                                   ^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_param_types)]`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "07c86d2cf8cea4504b5dce2b47606befb3a3e66b", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,6 +1,6 @@\n // revisions: full min\n \n-#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, feature(const_param_types))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n // Currently, const parameters cannot depend on other generic parameters,"}, {"sha": "6eb4b3735ffe97f681bf8d2ff062c7479e10f81b", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,6 +1,6 @@\n // revisions: full min\n \n-#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, feature(const_param_types))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n // Currently, const parameters cannot depend on other generic parameters,"}, {"sha": "923964a4070a1d3abb819d3d6a730506a396cf05", "filename": "src/test/ui/const-generics/const-parameter-uppercase-lint.min.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,14 +0,0 @@\n-error: const parameter `x` should have an upper case name\n-  --> $DIR/const-parameter-uppercase-lint.rs:8:15\n-   |\n-LL | fn noop<const x: u32>() {\n-   |               ^ help: convert the identifier to upper case (notice the capitalization): `X`\n-   |\n-note: the lint level is defined here\n-  --> $DIR/const-parameter-uppercase-lint.rs:6:9\n-   |\n-LL | #![deny(non_upper_case_globals)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "b08d62ccc7b1642b9b5a4550cb8b32ff1f755e36", "filename": "src/test/ui/const-generics/const-parameter-uppercase-lint.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,3 @@\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n #![deny(non_upper_case_globals)]\n \n fn noop<const x: u32>() {"}, {"sha": "efaa182852acadb9aa1e7b131c3baa9d3c3ee62f", "filename": "src/test/ui/const-generics/const-parameter-uppercase-lint.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,11 +1,11 @@\n error: const parameter `x` should have an upper case name\n-  --> $DIR/const-parameter-uppercase-lint.rs:8:15\n+  --> $DIR/const-parameter-uppercase-lint.rs:3:15\n    |\n LL | fn noop<const x: u32>() {\n    |               ^ help: convert the identifier to upper case (notice the capitalization): `X`\n    |\n note: the lint level is defined here\n-  --> $DIR/const-parameter-uppercase-lint.rs:6:9\n+  --> $DIR/const-parameter-uppercase-lint.rs:1:9\n    |\n LL | #![deny(non_upper_case_globals)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/const-generics/const-parameter-uppercase-lint.full.stderr"}, {"sha": "fb150f892edc4ab511878de2db29ff4e9cebf432", "filename": "src/test/ui/const-generics/const-types.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.rs?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,18 +0,0 @@\n-// Check that arrays can be used with generic const and type.\n-// run-pass\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n-#![allow(dead_code, unused_variables)]\n-\n-struct ConstArray<T, const LEN: usize> {\n-    array: [T; LEN],\n-}\n-\n-fn main() {\n-    let arr = ConstArray::<i32, 8> {\n-        array: [0; 8],\n-    };\n-}"}, {"sha": "5e975c17043112f67fdc97f1d07d3573e9d6206f", "filename": "src/test/ui/const-generics/core-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fcore-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fcore-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcore-types.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -2,7 +2,7 @@\n // run-pass\n // revisions: full min\n \n-#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, feature(const_param_types))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct A<const N: u8>;"}, {"sha": "ebde155f77656b582aa9211e1be1771176a66afa", "filename": "src/test/ui/const-generics/cross_crate_complex.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fcross_crate_complex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fcross_crate_complex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcross_crate_complex.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,10 +1,6 @@\n // aux-build:crayte.rs\n // edition:2018\n // run-pass\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n extern crate crayte;\n \n use crayte::*;"}, {"sha": "5c548740af2398aadf68efd026b32d43e5b42f38", "filename": "src/test/ui/const-generics/defaults/auxiliary/const_defaulty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fauxiliary%2Fconst_defaulty.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,6 +1,4 @@\n-#![cfg_attr(full, feature(const_generics))]\n #![feature(const_generics_defaults)]\n-#![allow(incomplete_features)]\n \n pub struct Defaulted<const N: usize=3>;\n impl Defaulted {"}, {"sha": "aa289ec07783e764052b0770369bb5f4195eb8cb", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -5,7 +5,7 @@ LL | struct Foo<const N: usize, const M: usize = { N + 1 }>;\n    |                                               ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/complex-generic-default-expr.rs:10:62\n@@ -14,7 +14,7 @@ LL | struct Bar<T, const TYPE_SIZE: usize = { std::mem::size_of::<T>() }>(T);\n    |                                                              ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "814c996fbad6f50e88002ca6ee567cc22c132bc9", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,6 +1,6 @@\n // revisions: full min\n //[full] check-pass\n-#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, feature(generic_const_exprs))]\n #![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n "}, {"sha": "c27ed298afd166f89abfcc55e22fa8ef894a03ca", "filename": "src/test/ui/const-generics/defaults/complex-unord-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,7 @@\n // [full] run-pass\n // revisions: full min\n // Checks a complicated usage of unordered params\n-#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, feature(const_generics_defaults))]\n #![cfg_attr(full, allow(incomplete_features))]\n #![allow(dead_code)]\n "}, {"sha": "e7cbf01a301790ae46843676245718ef4d72cbec", "filename": "src/test/ui/const-generics/defaults/const-default.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,9 +1,5 @@\n // run-pass\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n #![feature(const_generics_defaults)]\n-#![allow(incomplete_features)]\n-\n \n pub struct ConstDefault<const N: usize = 3>;\n "}, {"sha": "2b41dbb58873e348d77e784cb28bceca8dc56670", "filename": "src/test/ui/const-generics/defaults/default-annotation.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-annotation.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,13 +1,12 @@\n // run-pass\n #![feature(staged_api)]\n-\n-#![feature(const_generics)]\n #![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n-\n+// FIXME(const_generics): It seems like we aren't testing the right thing here,\n+// I would assume that we want the attributes to apply to the const parameter defaults\n+// themselves.\n #![stable(feature = \"const_default_test\", since=\"none\")]\n \n-\n #[unstable(feature = \"const_default_stable\", issue=\"none\")]\n pub struct ConstDefaultUnstable<const N: usize = 3>;\n "}, {"sha": "c417a26842ed199cd97d7edc7dc816fa8ae1a846", "filename": "src/test/ui/const-generics/defaults/default-on-impl.min.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,8 +0,0 @@\n-error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/default-on-impl.rs:8:12\n-   |\n-LL | impl<const N: usize = 1> Foo<N> {}\n-   |            ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "280d92f839f4d45613abf8a3c44e5f4e08f9d060", "filename": "src/test/ui/const-generics/defaults/default-on-impl.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,4 @@\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n #![feature(const_generics_defaults)]\n-#![allow(incomplete_features)]\n \n struct Foo<const N: usize>;\n "}, {"sha": "0f85ceccc8a80b7229ccc35af674896e176219b8", "filename": "src/test/ui/const-generics/defaults/default-on-impl.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fdefault-on-impl.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n-  --> $DIR/default-on-impl.rs:8:12\n+  --> $DIR/default-on-impl.rs:5:12\n    |\n LL | impl<const N: usize = 1> Foo<N> {}\n    |            ^", "previous_filename": "src/test/ui/const-generics/defaults/default-on-impl.full.stderr"}, {"sha": "276e74355c25892e343c522d04431568e6a2078b", "filename": "src/test/ui/const-generics/defaults/external.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fexternal.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,9 +1,6 @@\n // aux-build:const_defaulty.rs\n // check-pass\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n #![feature(const_generics_defaults)]\n-#![allow(incomplete_features)]\n \n extern crate const_defaulty;\n use const_defaulty::Defaulted;"}, {"sha": "52cea51aae15cf03424d0d08ad95a756d0da2089", "filename": "src/test/ui/const-generics/defaults/generic-expr-default-concrete.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-concrete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-concrete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-concrete.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, generic_const_exprs, const_generics_defaults)]\n+#![feature(generic_const_exprs, const_generics_defaults)]\n #![allow(incomplete_features)]\n \n struct Foo<const N: usize, const M: usize = { N + 1 }>;", "previous_filename": "src/test/ui/const-generics/defaults/cec-concrete-default.rs"}, {"sha": "905a285370a0dd0454e568a753cf91108113b8b6", "filename": "src/test/ui/const-generics/defaults/generic-expr-default-concrete.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-concrete.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-concrete.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-concrete.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/cec-concrete-default.rs:10:5\n+  --> $DIR/generic-expr-default-concrete.rs:10:5\n    |\n LL |     Foo::<10, 12>\n    |     ^^^^^^^^^^^^^ expected `11_usize`, found `12_usize`", "previous_filename": "src/test/ui/const-generics/defaults/cec-concrete-default.stderr"}, {"sha": "3a11631fc47fb3b488d8f81bf8c48d4839115ca6", "filename": "src/test/ui/const-generics/defaults/generic-expr-default-mismatched-types.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-mismatched-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-mismatched-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-mismatched-types.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, generic_const_exprs, const_generics_defaults)]\n+#![feature(generic_const_exprs, const_generics_defaults)]\n #![allow(incomplete_features)]\n \n struct Foo<const N: usize, const M: usize = { N + 1 }>;", "previous_filename": "src/test/ui/const-generics/defaults/cec-generic-default-mismatched-types.rs"}, {"sha": "d5a3071b77d15fec82c2d84ccf84ab407a407d26", "filename": "src/test/ui/const-generics/defaults/generic-expr-default-mismatched-types.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-mismatched-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-mismatched-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default-mismatched-types.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/cec-generic-default-mismatched-types.rs:12:5\n+  --> $DIR/generic-expr-default-mismatched-types.rs:12:5\n    |\n LL |     Foo::<N, { N + 2 }>\n    |     ^^^^^^^^^^^^^^^^^^^ expected `{ N + 1 }`, found `{ N + 2 }`", "previous_filename": "src/test/ui/const-generics/defaults/cec-generic-default-mismatched-types.stderr"}, {"sha": "0adbd5cdf3173f9353b78381e91fa13b91d30d95", "filename": "src/test/ui/const-generics/defaults/generic-expr-default.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(generic_const_exprs, const_generics, const_generics_defaults)]\n+#![feature(generic_const_exprs, const_generics_defaults)]\n #![allow(incomplete_features)]\n \n pub struct Foo<const N: usize, const M: usize = { N + 1 }>;", "previous_filename": "src/test/ui/const-generics/defaults/cec-generic-default.rs"}, {"sha": "ada1498d1c80be373cabd346d8691f28f2399245", "filename": "src/test/ui/const-generics/defaults/generic-expr-default.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fgeneric-expr-default.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,13 +1,13 @@\n error: unconstrained generic constant\n-  --> $DIR/cec-generic-default.rs:5:54\n+  --> $DIR/generic-expr-default.rs:5:54\n    |\n LL | pub fn needs_evaluatable_bound<const N1: usize>() -> Foo<N1> {\n    |                                                      ^^^^^^^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); { N + 1 }]:`\n \n error: unconstrained generic constant\n-  --> $DIR/cec-generic-default.rs:14:58\n+  --> $DIR/generic-expr-default.rs:14:58\n    |\n LL | fn needs_evaluatable_bound_alias<T, const N: usize>() -> FooAlias<N>\n    |                                                          ^^^^^^^^^^^", "previous_filename": "src/test/ui/const-generics/defaults/cec-generic-default.stderr"}, {"sha": "725cc36b428c7a48fb08995836b435bb50e60136", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,11 +1,11 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:7:28\n+  --> $DIR/intermixed-lifetime.rs:5:28\n    |\n LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n    |           -----------------^^---------- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T = u32>`\n \n error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/intermixed-lifetime.rs:10:37\n+  --> $DIR/intermixed-lifetime.rs:8:37\n    |\n LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n    |           --------------------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T = u32>`"}, {"sha": "725cc36b428c7a48fb08995836b435bb50e60136", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,11 +1,11 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:7:28\n+  --> $DIR/intermixed-lifetime.rs:5:28\n    |\n LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n    |           -----------------^^---------- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T = u32>`\n \n error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/intermixed-lifetime.rs:10:37\n+  --> $DIR/intermixed-lifetime.rs:8:37\n    |\n LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n    |           --------------------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T = u32>`"}, {"sha": "cc215ab0c2517e1269f570ce38b040536c56c159", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,6 @@\n // Checks that lifetimes cannot be interspersed between consts and types.\n // revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n #![feature(const_generics_defaults)]\n-#![allow(incomplete_features)]\n \n struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n //~^ Error lifetime parameters must be declared prior to const parameters"}, {"sha": "4aa8401ab22169b608d5829da6c0715842ba1838", "filename": "src/test/ui/const-generics/defaults/mismatch.full.stderr", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.full.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,58 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:12:28\n-   |\n-LL |     let e: Example::<13> = ();\n-   |            -------------   ^^ expected struct `Example`, found `()`\n-   |            |\n-   |            expected due to this\n-   |\n-   = note: expected struct `Example`\n-           found unit type `()`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:15:34\n-   |\n-LL |     let e: Example2::<u32, 13> = ();\n-   |            -------------------   ^^ expected struct `Example2`, found `()`\n-   |            |\n-   |            expected due to this\n-   |\n-   = note: expected struct `Example2`\n-           found unit type `()`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:18:34\n-   |\n-LL |     let e: Example3::<13, u32> = ();\n-   |            -------------------   ^^ expected struct `Example3`, found `()`\n-   |            |\n-   |            expected due to this\n-   |\n-   = note: expected struct `Example3`\n-           found unit type `()`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:21:28\n-   |\n-LL |     let e: Example3::<7> = ();\n-   |            -------------   ^^ expected struct `Example3`, found `()`\n-   |            |\n-   |            expected due to this\n-   |\n-   = note: expected struct `Example3<7_usize>`\n-           found unit type `()`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:24:28\n-   |\n-LL |     let e: Example4::<7> = ();\n-   |            -------------   ^^ expected struct `Example4`, found `()`\n-   |            |\n-   |            expected due to this\n-   |\n-   = note: expected struct `Example4<7_usize>`\n-           found unit type `()`\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "4ae93a9166d350534b25564f0d20401b63876544", "filename": "src/test/ui/const-generics/defaults/mismatch.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,4 @@\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n #![feature(const_generics_defaults)]\n-#![allow(incomplete_features)]\n \n pub struct Example<const N: usize=13>;\n pub struct Example2<T=u32, const N: usize=13>(T);"}, {"sha": "3c7f4fe3b28f1a3a9f257d60325a4587a41ef973", "filename": "src/test/ui/const-generics/defaults/mismatch.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:12:28\n+  --> $DIR/mismatch.rs:9:28\n    |\n LL |     let e: Example::<13> = ();\n    |            -------------   ^^ expected struct `Example`, found `()`\n@@ -10,7 +10,7 @@ LL |     let e: Example::<13> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:15:34\n+  --> $DIR/mismatch.rs:12:34\n    |\n LL |     let e: Example2::<u32, 13> = ();\n    |            -------------------   ^^ expected struct `Example2`, found `()`\n@@ -21,7 +21,7 @@ LL |     let e: Example2::<u32, 13> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:18:34\n+  --> $DIR/mismatch.rs:15:34\n    |\n LL |     let e: Example3::<13, u32> = ();\n    |            -------------------   ^^ expected struct `Example3`, found `()`\n@@ -32,7 +32,7 @@ LL |     let e: Example3::<13, u32> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:21:28\n+  --> $DIR/mismatch.rs:18:28\n    |\n LL |     let e: Example3::<7> = ();\n    |            -------------   ^^ expected struct `Example3`, found `()`\n@@ -43,7 +43,7 @@ LL |     let e: Example3::<7> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:24:28\n+  --> $DIR/mismatch.rs:21:28\n    |\n LL |     let e: Example4::<7> = ();\n    |            -------------   ^^ expected struct `Example4`, found `()`", "previous_filename": "src/test/ui/const-generics/defaults/mismatch.min.stderr"}, {"sha": "158fa2ec1c8ffd614d2ef21c3b2cfe17471068e2", "filename": "src/test/ui/const-generics/defaults/needs-feature.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error: type parameters must be declared prior to const parameters\n-  --> $DIR/needs-feature.rs:9:26\n+  --> $DIR/needs-feature.rs:7:26\n    |\n LL | struct A<const N: usize, T=u32>(T);\n    |         -----------------^----- help: reorder the parameters: lifetimes, then types, then consts: `<T = u32, const N: usize>`"}, {"sha": "a4006203e4a2730e9e6d0a95d2c34b15efa60240", "filename": "src/test/ui/const-generics/defaults/needs-feature.none.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.none.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,8 +0,0 @@\n-error: type parameters must be declared prior to const parameters\n-  --> $DIR/needs-feature.rs:9:26\n-   |\n-LL | struct A<const N: usize, T=u32>(T);\n-   |         -----------------^----- help: reorder the parameters: lifetimes, then types, then consts: `<T = u32, const N: usize>`\n-\n-error: aborting due to previous error\n-"}, {"sha": "9ba8184e058518a21501c2ffa7451b0a63d90a76", "filename": "src/test/ui/const-generics/defaults/needs-feature.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,10 +1,8 @@\n //[full] run-pass\n // Verifies that having generic parameters after constants is not permitted without the\n-// `const_generics` feature.\n+// `const_generics_defaults` feature.\n // revisions: min full\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(full, feature(const_generics_defaults))]\n \n struct A<const N: usize, T=u32>(T);\n //[min]~^ ERROR type parameters must be declared prior"}, {"sha": "bc01fe2656c9b066bd160863e59344d6807c7b98", "filename": "src/test/ui/const-generics/defaults/simple-defaults.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,9 +1,6 @@\n // run-pass\n // Checks that type param defaults are allowed after const params.\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n #![feature(const_generics_defaults)]\n-#![allow(incomplete_features)]\n #![allow(dead_code)]\n \n struct FixedOutput<'a, const N: usize, T=u32> {"}, {"sha": "8b35c5860d9419462dae82af2b32fd4370cc225d", "filename": "src/test/ui/const-generics/defaults/type-default-const-param-name.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftype-default-const-param-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftype-default-const-param-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftype-default-const-param-name.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,5 @@\n // check-pass\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n #![feature(const_generics_defaults)]\n-#![allow(incomplete_features)]\n \n struct N;\n "}, {"sha": "eb0bcb282155691fd7081e15c62ee227e40caf23", "filename": "src/test/ui/const-generics/defaults/wrong-order.min.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,8 +0,0 @@\n-error: generic parameters with a default must be trailing\n-  --> $DIR/wrong-order.rs:6:10\n-   |\n-LL | struct A<T = u32, const N: usize> {\n-   |          ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "33564a48448a79eb2e0e61e19c2c5a60ea1d1c4d", "filename": "src/test/ui/const-generics/defaults/wrong-order.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,4 @@\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n #![feature(const_generics_defaults)]\n-#![allow(incomplete_features)]\n \n struct A<T = u32, const N: usize> {\n     //~^ ERROR generic parameters with a default must be trailing"}, {"sha": "47a2c6f3f4193dd45a557b091edbb99cc41607a9", "filename": "src/test/ui/const-generics/defaults/wrong-order.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters with a default must be trailing\n-  --> $DIR/wrong-order.rs:6:10\n+  --> $DIR/wrong-order.rs:3:10\n    |\n LL | struct A<T = u32, const N: usize> {\n    |          ^", "previous_filename": "src/test/ui/const-generics/defaults/wrong-order.full.stderr"}, {"sha": "ce1481d97e9b485765aa7c78c57fc00975e3e8e5", "filename": "src/test/ui/const-generics/derive-debug-array-wrapper.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.rs?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,13 +0,0 @@\n-// Check that deriving debug on struct with const is permitted.\n-// run-pass\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n-#[derive(Debug)]\n-struct X<const N: usize> {\n-    a: [u32; N],\n-}\n-\n-fn main() {}"}, {"sha": "93874fb1f5fefe6bd88e50ca9f817285a3b8a5cf", "filename": "src/test/ui/const-generics/different_byref.min.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,11 +0,0 @@\n-error: `[usize; 1]` is forbidden as the type of a const generic parameter\n-  --> $DIR/different_byref.rs:7:23\n-   |\n-LL | struct Const<const V: [usize; 1]> {}\n-   |                       ^^^^^^^^^^\n-   |\n-   = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_generics)]`\n-\n-error: aborting due to previous error\n-"}, {"sha": "7977560ecbcf1edc4827c1b28d6faf72a22f7ccf", "filename": "src/test/ui/const-generics/different_byref.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,14 +0,0 @@\n-// Check that different const types are different.\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n-struct Const<const V: [usize; 1]> {}\n-//[min]~^ ERROR `[usize; 1]` is forbidden\n-\n-fn main() {\n-    let mut x = Const::<{ [3] }> {};\n-    x = Const::<{ [4] }> {};\n-    //[full]~^ ERROR mismatched types\n-}"}, {"sha": "a2dcc033627c62a98a7faf76448f7331e36f4615", "filename": "src/test/ui/const-generics/different_generic_args.full.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args.full.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/different_byref_simple.rs:11:9\n+  --> $DIR/different_generic_args.rs:11:9\n    |\n LL |     u = ConstUsize::<4> {};\n    |         ^^^^^^^^^^^^^^^^^^ expected `3_usize`, found `4_usize`", "previous_filename": "src/test/ui/const-generics/different_byref_simple.min.stderr"}, {"sha": "a2dcc033627c62a98a7faf76448f7331e36f4615", "filename": "src/test/ui/const-generics/different_generic_args.min.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args.min.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/different_byref_simple.rs:11:9\n+  --> $DIR/different_generic_args.rs:11:9\n    |\n LL |     u = ConstUsize::<4> {};\n    |         ^^^^^^^^^^^^^^^^^^ expected `3_usize`, found `4_usize`", "previous_filename": "src/test/ui/const-generics/different_byref_simple.full.stderr"}, {"sha": "9ee0e0747c4c2a28458d08833afa90cfb4bdf5e1", "filename": "src/test/ui/const-generics/different_generic_args.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,7 @@\n-// Check that different const types are different.\n+// Check that types with different const arguments are different.\n // revisions: full min\n \n-#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, feature(generic_const_exprs))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct ConstUsize<const V: usize> {}", "previous_filename": "src/test/ui/const-generics/different_byref_simple.rs"}, {"sha": "cfe3a0a075a96fa5dceec21657d7ca76416c9e92", "filename": "src/test/ui/const-generics/different_generic_args_array.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args_array.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -0,0 +1,11 @@\n+// Check that different const types are different.\n+#![feature(const_param_types)]\n+#![allow(incomplete_features)]\n+\n+struct Const<const V: [usize; 1]> {}\n+\n+fn main() {\n+    let mut x = Const::<{ [3] }> {};\n+    x = Const::<{ [4] }> {};\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "c0709a996ce370fab1deaeb85740a952d9e17c69", "filename": "src/test/ui/const-generics/different_generic_args_array.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args_array.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,11 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/different_byref.rs:12:9\n+  --> $DIR/different_generic_args_array.rs:9:9\n    |\n LL |     x = Const::<{ [4] }> {};\n    |         ^^^^^^^^^^^^^^^^^^^ expected `3_usize`, found `4_usize`\n    |\n-   = note: expected type `[3_usize]`\n-              found type `[4_usize]`\n+   = note: expected struct `Const<[3_usize]>`\n+              found struct `Const<[4_usize]>`\n \n error: aborting due to previous error\n ", "previous_filename": "src/test/ui/const-generics/different_byref.full.stderr"}, {"sha": "6c4ee1af210ba2db5122a84415d47e730476efc4", "filename": "src/test/ui/const-generics/dont-evaluate-array-len-on-err-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n // This tests that during error handling for the \"trait not implemented\" error"}, {"sha": "3dee326a186e9c84f387483c1b0a90476eaee853", "filename": "src/test/ui/const-generics/dyn-supertraits.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdyn-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fdyn-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdyn-supertraits.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,4 @@\n // run-pass\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n \n trait Foo<const N: usize> {\n     fn myfun(&self) -> usize;"}, {"sha": "cb4d6299ed65344acabfab1076a9756791f0fa17", "filename": "src/test/ui/const-generics/early/closing-args-token.rs", "status": "renamed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fclosing-args-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fclosing-args-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fclosing-args-token.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,3 @@\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n struct S<const X: u32>;\n struct T<const X: bool>;\n ", "previous_filename": "src/test/ui/const-generics/closing-args-token.rs"}, {"sha": "58fff3a85afe90af0689e00d437303be4c47ab34", "filename": "src/test/ui/const-generics/early/closing-args-token.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fclosing-args-token.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fclosing-args-token.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fclosing-args-token.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/closing-args-token.rs:10:9\n+  --> $DIR/closing-args-token.rs:5:9\n    |\n LL |     S::<5 + 2 >> 7>;\n    |         ^^^^^\n@@ -10,7 +10,7 @@ LL |     S::<{ 5 + 2 } >> 7>;\n    |         +       +\n \n error: comparison operators cannot be chained\n-  --> $DIR/closing-args-token.rs:10:16\n+  --> $DIR/closing-args-token.rs:5:16\n    |\n LL |     S::<5 + 2 >> 7>;\n    |                ^  ^\n@@ -21,7 +21,7 @@ LL |     S::<5 + 2 >> 7 && 7>;\n    |                    ++++\n \n error: comparison operators cannot be chained\n-  --> $DIR/closing-args-token.rs:16:20\n+  --> $DIR/closing-args-token.rs:11:20\n    |\n LL |     S::<{ 5 + 2 } >> 7>;\n    |                    ^  ^\n@@ -32,13 +32,13 @@ LL |     S::<{ 5 + 2 } >> 7 && 7>;\n    |                        ++++\n \n error: expected expression, found `;`\n-  --> $DIR/closing-args-token.rs:21:16\n+  --> $DIR/closing-args-token.rs:16:16\n    |\n LL |     T::<0 >= 3>;\n    |                ^ expected expression\n \n error: comparison operators cannot be chained\n-  --> $DIR/closing-args-token.rs:27:12\n+  --> $DIR/closing-args-token.rs:22:12\n    |\n LL |     T::<x >>= 2 > 0>;\n    |            ^^   ^", "previous_filename": "src/test/ui/const-generics/closing-args-token.full.stderr"}, {"sha": "4cf7ba86921cec7b14eb675e86cdc07a052e2aa5", "filename": "src/test/ui/const-generics/early/const-expression-parameter.rs", "status": "renamed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-expression-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-expression-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-expression-parameter.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,3 @@\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n fn i32_identity<const X: i32>() -> i32 {\n     5\n }", "previous_filename": "src/test/ui/const-generics/const-expression-parameter.rs"}, {"sha": "4ce1be25edb93cdbfde7e2e1bfe55dae0f516bbd", "filename": "src/test/ui/const-generics/early/const-expression-parameter.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-expression-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-expression-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-expression-parameter.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/const-expression-parameter.rs:15:20\n+  --> $DIR/const-expression-parameter.rs:10:20\n    |\n LL |     i32_identity::<1 + 2>();\n    |                    ^^^^^", "previous_filename": "src/test/ui/const-generics/const-expression-parameter.full.stderr"}, {"sha": "c3b418ee3f8adf238741bc83037840f3c6dcd459", "filename": "src/test/ui/const-generics/early/const-param-from-outer-fn.rs", "status": "renamed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-param-from-outer-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-param-from-outer-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-param-from-outer-fn.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,3 @@\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n fn foo<const X: u32>() {\n     fn bar() -> u32 {\n         X //~ ERROR can't use generic parameters from outer function", "previous_filename": "src/test/ui/const-generics/const-param-from-outer-fn.rs"}, {"sha": "a9f9787d875955e69dcb3b8d59674e47324c7dad", "filename": "src/test/ui/const-generics/early/const-param-from-outer-fn.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-param-from-outer-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-param-from-outer-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-param-from-outer-fn.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error[E0401]: can't use generic parameters from outer function\n-  --> $DIR/const-param-from-outer-fn.rs:8:9\n+  --> $DIR/const-param-from-outer-fn.rs:3:9\n    |\n LL | fn foo<const X: u32>() {\n    |              - const parameter from outer function", "previous_filename": "src/test/ui/const-generics/const-param-from-outer-fn.full.stderr"}, {"sha": "fd4e5b409eefce288bbb3e2e82825ba1f4f18027", "filename": "src/test/ui/const-generics/early/const-param-hygiene.rs", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-param-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-param-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-param-hygiene.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,4 @@\n // run-pass\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n \n macro_rules! bar {\n     ($($t:tt)*) => { impl<const N: usize> $($t)* };", "previous_filename": "src/test/ui/const-generics/const-param-hygiene.rs"}, {"sha": "ddd15dbc41bc36c85f19647c8c87fb8206daee00", "filename": "src/test/ui/const-generics/early/const-param-shadowing.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-param-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-param-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-param-shadowing.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "previous_filename": "src/test/ui/const-generics/const-param-shadowing.rs"}, {"sha": "625338bd9b4a68ed3fdefcc7caa57a363d17ae7b", "filename": "src/test/ui/const-generics/early/const-param-shadowing.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-param-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-param-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-param-shadowing.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "previous_filename": "src/test/ui/const-generics/const-param-shadowing.stderr"}, {"sha": "6619c97588596d5907b0cb276c8c01f1b25162a1", "filename": "src/test/ui/const-generics/early/invalid-const-arguments.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Finvalid-const-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Finvalid-const-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Finvalid-const-arguments.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,6 +1,4 @@\n #![crate_type=\"lib\"]\n-#![feature(min_const_generics)]\n-#![allow(incomplete_features)]\n \n struct A<const N: u8>;\n trait Foo {}", "previous_filename": "src/test/ui/const-generics/diagnostics.rs"}, {"sha": "b46e7e24f4921e4ca9e0d0c9b847d896621eb79f", "filename": "src/test/ui/const-generics/early/invalid-const-arguments.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Finvalid-const-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Finvalid-const-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Finvalid-const-arguments.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error[E0412]: cannot find type `N` in this scope\n-  --> $DIR/diagnostics.rs:7:16\n+  --> $DIR/invalid-const-arguments.rs:5:16\n    |\n LL | struct A<const N: u8>;\n    | ---------------------- similarly named struct `A` defined here\n@@ -17,7 +17,7 @@ LL | impl<N> Foo for A<N> {}\n    |     +++\n \n error[E0412]: cannot find type `T` in this scope\n-  --> $DIR/diagnostics.rs:16:32\n+  --> $DIR/invalid-const-arguments.rs:14:32\n    |\n LL | struct A<const N: u8>;\n    | ---------------------- similarly named struct `A` defined here\n@@ -35,7 +35,7 @@ LL | impl<const N: u8, T> Foo for C<N, T> {}\n    |                 +++\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/diagnostics.rs:7:16\n+  --> $DIR/invalid-const-arguments.rs:5:16\n    |\n LL | impl Foo for A<N> {}\n    |                ^\n@@ -46,7 +46,7 @@ LL | impl Foo for A<{ N }> {}\n    |                +   +\n \n error[E0747]: type provided when a constant was expected\n-  --> $DIR/diagnostics.rs:12:19\n+  --> $DIR/invalid-const-arguments.rs:10:19\n    |\n LL | impl<N> Foo for B<N> {}\n    |                   ^\n@@ -57,7 +57,7 @@ LL | impl<const N: u8> Foo for B<N> {}\n    |      ~~~~~~~~~~~\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/diagnostics.rs:16:32\n+  --> $DIR/invalid-const-arguments.rs:14:32\n    |\n LL | impl<const N: u8> Foo for C<N, T> {}\n    |                                ^", "previous_filename": "src/test/ui/const-generics/diagnostics.stderr"}, {"sha": "0ae914635995898a563c450a30ef484e8a28c89b", "filename": "src/test/ui/const-generics/early/macro_rules-braces.rs", "status": "renamed", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fmacro_rules-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fmacro_rules-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fmacro_rules-braces.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,3 @@\n-// revisions: full min\n-#![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(full, feature(const_generics))]\n-\n mod m {\n     pub const P: usize = 0;\n }\n@@ -12,42 +8,42 @@ fn test<const N: usize>() {\n     struct Foo<const M: usize>;\n     macro_rules! foo {\n         ($x:expr) => {\n-            [u8; $x] //[full]~ ERROR constant expression depends\n+            [u8; $x]\n         }\n     }\n     macro_rules! bar {\n         ($x:expr) => {\n-            [u8; { $x }] //[full]~ ERROR constant expression depends\n+            [u8; { $x }]\n         }\n     }\n     macro_rules! baz {\n         ( $x:expr) => {\n-            Foo<$x> //[full]~ ERROR constant expression depends\n+            Foo<$x>\n         }\n     }\n     macro_rules! biz {\n         ($x:expr) => {\n-            Foo<{ $x }> //[full]~ ERROR constant expression depends\n+            Foo<{ $x }>\n         };\n     }\n \n     let _: foo!(N);\n     let _: foo!({ N });\n-    let _: foo!({{ N }}); //[min]~ ERROR generic parameters may not\n+    let _: foo!({{ N }}); //~ ERROR generic parameters may not\n     let _: foo!(Q);\n     let _: foo!(m::P);\n     let _: bar!(N);\n-    let _: bar!({ N }); //[min]~ ERROR generic parameters may not\n+    let _: bar!({ N }); //~ ERROR generic parameters may not\n     let _: bar!(Q);\n     let _: bar!(m::P);\n     let _: baz!(N);\n     let _: baz!({ N });\n-    let _: baz!({{ N }}); //[min]~ ERROR generic parameters may not\n+    let _: baz!({{ N }}); //~ ERROR generic parameters may not\n     let _: baz!(Q);\n     let _: baz!({ m::P });\n     let _: baz!(m::P); //~ ERROR expressions must be enclosed in braces\n     let _: biz!(N);\n-    let _: biz!({ N }); //[min]~ ERROR generic parameters may not\n+    let _: biz!({ N }); //~ ERROR generic parameters may not\n     let _: biz!(Q);\n     let _: biz!(m::P);\n     let _: foo!(3);", "previous_filename": "src/test/ui/const-generics/macro_rules-braces.rs"}, {"sha": "49382dbf0bd5086ff669da03c59d016e9a670b49", "filename": "src/test/ui/const-generics/early/macro_rules-braces.stderr", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fmacro_rules-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fmacro_rules-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fmacro_rules-braces.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/macro_rules-braces.rs:48:17\n+  --> $DIR/macro_rules-braces.rs:44:17\n    |\n LL |     let _: baz!(m::P);\n    |                 ^^^^\n@@ -10,7 +10,7 @@ LL |     let _: baz!({ m::P });\n    |                 +      +\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/macro_rules-braces.rs:68:17\n+  --> $DIR/macro_rules-braces.rs:64:17\n    |\n LL |     let _: baz!(10 + 7);\n    |                 ^^^^^^\n@@ -21,40 +21,40 @@ LL |     let _: baz!({ 10 + 7 });\n    |                 +        +\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/macro_rules-braces.rs:36:20\n+  --> $DIR/macro_rules-braces.rs:32:20\n    |\n LL |     let _: foo!({{ N }});\n    |                    ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/macro_rules-braces.rs:40:19\n+  --> $DIR/macro_rules-braces.rs:36:19\n    |\n LL |     let _: bar!({ N });\n    |                   ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/macro_rules-braces.rs:45:20\n+  --> $DIR/macro_rules-braces.rs:41:20\n    |\n LL |     let _: baz!({{ N }});\n    |                    ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/macro_rules-braces.rs:50:19\n+  --> $DIR/macro_rules-braces.rs:46:19\n    |\n LL |     let _: biz!({ N });\n    |                   ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to 6 previous errors\n ", "previous_filename": "src/test/ui/const-generics/macro_rules-braces.min.stderr"}, {"sha": "4e89e4a3b17e97b285dc5466b8145d2b1cc45f48", "filename": "src/test/ui/const-generics/exhaustive-value.full.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.full.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,21 +0,0 @@\n-error[E0277]: the trait bound `(): Foo<N>` is not satisfied\n-  --> $DIR/exhaustive-value.rs:266:5\n-   |\n-LL |     <() as Foo<N>>::test()\n-   |     ^^^^^^^^^^^^^^^^^^^^ the trait `Foo<N>` is not implemented for `()`\n-   |\n-   = help: the following implementations were found:\n-             <() as Foo<0_u8>>\n-             <() as Foo<100_u8>>\n-             <() as Foo<101_u8>>\n-             <() as Foo<102_u8>>\n-           and 252 others\n-note: required by `Foo::test`\n-  --> $DIR/exhaustive-value.rs:6:5\n-   |\n-LL |     fn test() {}\n-   |     ^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "778d498343e08739eb29dd5fce2dbb46cccb6d2a", "filename": "src/test/ui/const-generics/exhaustive-value.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,3 @@\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n trait Foo<const N: u8> {\n     fn test() {}\n }"}, {"sha": "0c6aced4bc22b3b0bc6de259770cbfecaac87637", "filename": "src/test/ui/const-generics/exhaustive-value.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `(): Foo<N>` is not satisfied\n-  --> $DIR/exhaustive-value.rs:266:5\n+  --> $DIR/exhaustive-value.rs:262:5\n    |\n LL |     <() as Foo<N>>::test()\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `Foo<N>` is not implemented for `()`\n@@ -11,7 +11,7 @@ LL |     <() as Foo<N>>::test()\n              <() as Foo<102_u8>>\n            and 252 others\n note: required by `Foo::test`\n-  --> $DIR/exhaustive-value.rs:6:5\n+  --> $DIR/exhaustive-value.rs:2:5\n    |\n LL |     fn test() {}\n    |     ^^^^^^^^^", "previous_filename": "src/test/ui/const-generics/exhaustive-value.min.stderr"}, {"sha": "5cd18f6d3598b9d5e4f0f4bafb31c70a3f224082", "filename": "src/test/ui/const-generics/fn-const-param-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,7 @@\n // Check that functions cannot be used as const parameters.\n // revisions: full min\n \n-#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, feature(const_param_types))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n fn function() -> u32 {"}, {"sha": "596101596952420ed807c06104b6c1a15e58d987", "filename": "src/test/ui/const-generics/fn-const-param-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,6 +1,6 @@\n // revisions: full min\n \n-#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, feature(const_param_types))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct Checked<const F: fn(usize) -> bool>;"}, {"sha": "58c1b95893e74ea6c9c48693eb0333d070651863", "filename": "src/test/ui/const-generics/fn-taking-const-generic-array.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.rs?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,17 +0,0 @@\n-// run-pass\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n-use std::fmt::Display;\n-\n-fn print_slice<T: Display, const N: usize>(slice: &[T; N]) {\n-    for x in slice.iter() {\n-        println!(\"{}\", x);\n-    }\n-}\n-\n-fn main() {\n-    print_slice(&[1, 2, 3]);\n-}"}, {"sha": "80eac994d55c947e5490a3a7e31836b316f3fd32", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.min.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,27 +0,0 @@\n-error: `A` is forbidden as the type of a const generic parameter\n-  --> $DIR/forbid-non-structural_match-types.rs:9:19\n-   |\n-LL | struct B<const X: A>; // ok\n-   |                   ^\n-   |\n-   = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_generics)]`\n-\n-error: `C` is forbidden as the type of a const generic parameter\n-  --> $DIR/forbid-non-structural_match-types.rs:14:19\n-   |\n-LL | struct D<const X: C>;\n-   |                   ^\n-   |\n-   = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_generics)]`\n-\n-error[E0741]: `C` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n-  --> $DIR/forbid-non-structural_match-types.rs:14:19\n-   |\n-LL | struct D<const X: C>;\n-   |                   ^ `C` doesn't derive both `PartialEq` and `Eq`\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0741`."}, {"sha": "7884008b858b985eadbaf88325c3d593befb2ebf", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,17 +1,13 @@\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n+#![feature(const_param_types)]\n+#![allow(incomplete_features)]\n \n #[derive(PartialEq, Eq)]\n struct A;\n \n struct B<const X: A>; // ok\n-//[min]~^ ERROR `A` is forbidden\n \n struct C;\n \n struct D<const X: C>; //~ ERROR `C` must be annotated with `#[derive(PartialEq, Eq)]`\n-//[min]~^ ERROR `C` is forbidden\n \n fn main() {}"}, {"sha": "81b9bdfbd60272e7f8606e87f047ab4ce1770ab1", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error[E0741]: `C` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n-  --> $DIR/forbid-non-structural_match-types.rs:14:19\n+  --> $DIR/forbid-non-structural_match-types.rs:11:19\n    |\n LL | struct D<const X: C>;\n    |                   ^ `C` doesn't derive both `PartialEq` and `Eq`", "previous_filename": "src/test/ui/const-generics/forbid-non-structural_match-types.full.stderr"}, {"sha": "b827e482977b4b7f233bb0b73482c7eb5e1e680f", "filename": "src/test/ui/const-generics/foreign-item-const-parameter.min.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,19 +0,0 @@\n-error[E0044]: foreign items may not have const parameters\n-  --> $DIR/foreign-item-const-parameter.rs:7:5\n-   |\n-LL |     fn foo<const X: usize>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ can't have const parameters\n-   |\n-   = help: replace the const parameters with concrete consts\n-\n-error[E0044]: foreign items may not have type or const parameters\n-  --> $DIR/foreign-item-const-parameter.rs:9:5\n-   |\n-LL |     fn bar<T, const X: usize>(_: T);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't have type or const parameters\n-   |\n-   = help: replace the type or const parameters with concrete types or consts\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0044`."}, {"sha": "4fe377b5964f74a43f6b5cd08db2cd6f0218d09d", "filename": "src/test/ui/const-generics/foreign-item-const-parameter.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,3 @@\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n extern \"C\" {\n     fn foo<const X: usize>(); //~ ERROR foreign items may not have const parameters\n "}, {"sha": "b02db8700cffca191cf6a1486e0aeb347d7006cc", "filename": "src/test/ui/const-generics/foreign-item-const-parameter.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,13 +1,13 @@\n error[E0044]: foreign items may not have const parameters\n-  --> $DIR/foreign-item-const-parameter.rs:7:5\n+  --> $DIR/foreign-item-const-parameter.rs:2:5\n    |\n LL |     fn foo<const X: usize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ can't have const parameters\n    |\n    = help: replace the const parameters with concrete consts\n \n error[E0044]: foreign items may not have type or const parameters\n-  --> $DIR/foreign-item-const-parameter.rs:9:5\n+  --> $DIR/foreign-item-const-parameter.rs:4:5\n    |\n LL |     fn bar<T, const X: usize>(_: T);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't have type or const parameters", "previous_filename": "src/test/ui/const-generics/foreign-item-const-parameter.full.stderr"}, {"sha": "2d19a58a1457b6862d1de6860de86361c2298cc3", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.full.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.full.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,10 +0,0 @@\n-error: constant expression depends on a generic parameter\n-  --> $DIR/generic-function-call-in-array-length.rs:8:29\n-   |\n-LL | fn bar<const N: usize>() -> [u32; foo(N)] {\n-   |                             ^^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to previous error\n-"}, {"sha": "dd4de9bc1b7a75d444e7c2490ea28b07048fbf18", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.min.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,20 +0,0 @@\n-error: generic parameters may not be used in const operations\n-  --> $DIR/generic-function-call-in-array-length.rs:8:39\n-   |\n-LL | fn bar<const N: usize>() -> [u32; foo(N)] {\n-   |                                       ^ cannot perform const operation using `N`\n-   |\n-   = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n-\n-error: generic parameters may not be used in const operations\n-  --> $DIR/generic-function-call-in-array-length.rs:11:13\n-   |\n-LL |     [0; foo(N)]\n-   |             ^ cannot perform const operation using `N`\n-   |\n-   = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "a6d2bbd17eaabcf8c72aa617c83ac6a89e0f80ed", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,15 +0,0 @@\n-// revisions: full min\n-\n-#![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(full, feature(const_generics))]\n-\n-const fn foo(n: usize) -> usize { n * 2 }\n-\n-fn bar<const N: usize>() -> [u32; foo(N)] {\n-    //[min]~^ ERROR generic parameters may not be used in const operations\n-    //[full]~^^ ERROR constant expression depends on a generic parameter\n-    [0; foo(N)]\n-    //[min]~^ ERROR generic parameters may not be used in const operations\n-}\n-\n-fn main() {}"}, {"sha": "aff8780fb0d1cdcaea9737ebf63e78b19901aea8", "filename": "src/test/ui/const-generics/generic-param-mismatch.min.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,14 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/generic-param-mismatch.rs:6:5\n-   |\n-LL | fn test<const N: usize, const M: usize>() -> [u8; M] {\n-   |                                              ------- expected `[u8; M]` because of return type\n-LL |     [0; N]\n-   |     ^^^^^^ expected `M`, found `N`\n-   |\n-   = note: expected array `[u8; M]`\n-              found array `[u8; N]`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "2e201e50a64e9e45376d25b0f449c0814326c32c", "filename": "src/test/ui/const-generics/generic-param-mismatch.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,3 @@\n-// revisions: full min\n-#![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(full, feature(const_generics))]\n-\n fn test<const N: usize, const M: usize>() -> [u8; M] {\n     [0; N] //~ ERROR mismatched types\n }"}, {"sha": "d0776d49d71ba4c15b77186a309fb361eb62977c", "filename": "src/test/ui/const-generics/generic-param-mismatch.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/generic-param-mismatch.rs:6:5\n+  --> $DIR/generic-param-mismatch.rs:2:5\n    |\n LL | fn test<const N: usize, const M: usize>() -> [u8; M] {\n    |                                              ------- expected `[u8; M]` because of return type", "previous_filename": "src/test/ui/const-generics/generic-param-mismatch.full.stderr"}, {"sha": "c13882e7fe11619e1d978a97679dde13fdbedf6a", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.full.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.full.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,10 +0,0 @@\n-error: constant expression depends on a generic parameter\n-  --> $DIR/generic-sum-in-array-length.rs:6:45\n-   |\n-LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n-   |                                             ^^^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to previous error\n-"}, {"sha": "d80d38cf8b1099d4968f3153b5a33e045a1d3481", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.min.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,20 +0,0 @@\n-error: generic parameters may not be used in const operations\n-  --> $DIR/generic-sum-in-array-length.rs:6:53\n-   |\n-LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n-   |                                                     ^ cannot perform const operation using `A`\n-   |\n-   = help: const parameters may only be used as standalone arguments, i.e. `A`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n-\n-error: generic parameters may not be used in const operations\n-  --> $DIR/generic-sum-in-array-length.rs:6:57\n-   |\n-LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n-   |                                                         ^ cannot perform const operation using `B`\n-   |\n-   = help: const parameters may only be used as standalone arguments, i.e. `B`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "7ee0394ba14ce956ed28b58c277c16ab79605df4", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,11 +0,0 @@\n-// revisions: full min\n-\n-#![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(full, feature(const_generics))]\n-\n-fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n-//[min]~^ ERROR generic parameters may not be used in const operations\n-//[min]~| ERROR generic parameters may not be used in const operations\n-//[full]~^^^ ERROR constant expression depends on a generic parameter\n-\n-fn main() {}"}, {"sha": "06f00de13a30cc12b19239904f8afd10f0c68af3", "filename": "src/test/ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-1.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(generic_const_exprs, const_generics)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Foo<const N: u8>([u8; N as usize])"}, {"sha": "3b5b87b2b3d6326933d050965116007d825c62c9", "filename": "src/test/ui/const-generics/generic_const_exprs/abstract-const-as-cast-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-2.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(generic_const_exprs, const_generics)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Evaluatable<const N: u128> {}"}, {"sha": "7561ae2febbdf9f3d63864099e27f2921686ce1e", "filename": "src/test/ui/const-generics/generic_const_exprs/abstract-const-as-cast-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n trait Trait {}"}, {"sha": "184263f899ab2362c1460b8b2ae00c5f62d45d99", "filename": "src/test/ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-4.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(generic_const_exprs, const_generics)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n trait Trait {}"}, {"sha": "deb6f3bd12c1dfd7e558c361831298977299a1c3", "filename": "src/test/ui/const-generics/generic_const_exprs/array-size-in-generic-struct-param.full.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.full.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -0,0 +1,18 @@\n+error: unconstrained generic constant\n+  --> $DIR/array-size-in-generic-struct-param.rs:8:38\n+   |\n+LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n+   |                                      ^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); 0 + N]:`\n+\n+error: overly complex generic constant\n+  --> $DIR/array-size-in-generic-struct-param.rs:19:15\n+   |\n+LL |     arr: [u8; CFG.arr_size],\n+   |               ^^^^^^^^^^^^ unsupported projection\n+   |\n+   = help: consider moving this anonymous constant into a `const` function\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "22e7ab1f7b1289a1299b7a11ead7dc35a160bf6d", "filename": "src/test/ui/const-generics/generic_const_exprs/array-size-in-generic-struct-param.min.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.min.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -5,7 +5,7 @@ LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n    |                                                ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/array-size-in-generic-struct-param.rs:19:15\n@@ -14,7 +14,7 @@ LL |     arr: [u8; CFG.arr_size],\n    |               ^^^ cannot perform const operation using `CFG`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `CFG`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: `Config` is forbidden as the type of a const generic parameter\n   --> $DIR/array-size-in-generic-struct-param.rs:17:21\n@@ -23,7 +23,7 @@ LL | struct B<const CFG: Config> {\n    |                     ^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_param_types)]`\n \n error: aborting due to 3 previous errors\n ", "previous_filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.min.stderr"}, {"sha": "68201b77dbf10cc5bf7bd5cfaf7ee1e3e84fab45", "filename": "src/test/ui/const-generics/generic_const_exprs/array-size-in-generic-struct-param.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,12 +1,12 @@\n // Tests that array sizes that depend on const-params are checked using `ConstEvaluatable`.\n // revisions: full min\n \n-#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, feature(generic_const_exprs, const_param_types))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n #[allow(dead_code)]\n struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n-//[full]~^ ERROR constant expression depends on a generic parameter\n+//[full]~^ ERROR unconstrained generic constant\n //[min]~^^ ERROR generic parameters may not be used in const operations\n \n #[derive(PartialEq, Eq)]\n@@ -17,7 +17,7 @@ struct Config {\n struct B<const CFG: Config> {\n     //[min]~^ ERROR `Config` is forbidden\n     arr: [u8; CFG.arr_size],\n-    //[full]~^ ERROR constant expression depends on a generic parameter\n+    //[full]~^ ERROR overly complex generic constant\n     //[min]~^^ ERROR generic parameters may not be used in const operations\n }\n ", "previous_filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.rs"}, {"sha": "a6777632254b71e5ce5412a3719d2e55060220ea", "filename": "src/test/ui/const-generics/generic_const_exprs/associated-const.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassociated-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassociated-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassociated-const.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "previous_filename": "src/test/ui/const_evaluatable/associated-const.rs"}, {"sha": "4d89f188ad777a90c7eab170d62ee0986f40f7b3", "filename": "src/test/ui/const-generics/generic_const_exprs/associated-consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassociated-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassociated-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassociated-consts.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n pub trait BlockCipher {"}, {"sha": "15d618caef4b37dd305b20fb91e5d57501498d10", "filename": "src/test/ui/const-generics/generic_const_exprs/auxiliary/const_evaluatable_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fauxiliary%2Fconst_evaluatable_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fauxiliary%2Fconst_evaluatable_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fauxiliary%2Fconst_evaluatable_lib.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]"}, {"sha": "847843fe1a63ef721e48a0fe1cbe84f616a54127", "filename": "src/test/ui/const-generics/generic_const_exprs/closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fclosures.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n fn test<const N: usize>() -> [u8; N + (|| 42)()] {}\n //~^ ERROR overly complex generic constant"}, {"sha": "dfc69e0b0689d0e4ee7dc1d985a1e33383896092", "filename": "src/test/ui/const-generics/generic_const_exprs/cross_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,6 +1,6 @@\n // aux-build:const_evaluatable_lib.rs\n // run-pass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n extern crate const_evaluatable_lib;\n "}, {"sha": "b08fffd6922b618fbdb75c0da495c272330309fd", "filename": "src/test/ui/const-generics/generic_const_exprs/cross_crate_predicate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // aux-build:const_evaluatable_lib.rs\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n extern crate const_evaluatable_lib;\n "}, {"sha": "e8bc703bda61521db7f0c4532df57b3411c1fa11", "filename": "src/test/ui/const-generics/generic_const_exprs/different-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdifferent-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdifferent-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdifferent-fn.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n use std::mem::size_of;"}, {"sha": "098fa9e0447a46a070e825eda80a36ce02f5eee1", "filename": "src/test/ui/const-generics/generic_const_exprs/division.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdivision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdivision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdivision.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n fn with_bound<const N: usize>() where [u8; N / 2]: Sized {"}, {"sha": "3543960c3ebdf3419e85efc26da158d29c707618", "filename": "src/test/ui/const-generics/generic_const_exprs/dont-eagerly-error-in-is-const-evaluatable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdont-eagerly-error-in-is-const-evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdont-eagerly-error-in-is-const-evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdont-eagerly-error-in-is-const-evaluatable.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(const_generics)]\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n "}, {"sha": "077f77aa0f4042130f9af26942129867c619a436", "filename": "src/test/ui/const-generics/generic_const_exprs/drop_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdrop_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdrop_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdrop_impl.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n //check-pass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Foo<const N: usize>"}, {"sha": "e4111157ecdbde931a59bbbc11d0fbe241913dce", "filename": "src/test/ui/const-generics/generic_const_exprs/elaborate-trait-pred.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Felaborate-trait-pred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Felaborate-trait-pred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Felaborate-trait-pred.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // Test that we use the elaborated predicates from traits\n // to satisfy const evaluatable predicates.\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n use std::mem::size_of;\n "}, {"sha": "80d0662f1f4983f040ccd0b7a80cd93b647b3e32", "filename": "src/test/ui/const-generics/generic_const_exprs/eval-privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n #![crate_type = \"lib\"]\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n pub struct Const<const U: u8>;"}, {"sha": "340e35e1c65ded64fd817deabefdc9d2453ccc88", "filename": "src/test/ui/const-generics/generic_const_exprs/evaluated-to-ambig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fevaluated-to-ambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fevaluated-to-ambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fevaluated-to-ambig.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -4,7 +4,7 @@\n // only contain generic parameters. This is incorrect as trying to unify `N > 1` with `M > 1`\n // should fail.\n #![allow(incomplete_features)]\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n \n enum Assert<const COND: bool> {}\n trait IsTrue {}"}, {"sha": "26dfcff5d3e38645be886ff324fc235fee9a299a", "filename": "src/test/ui/const-generics/generic_const_exprs/feature-gate-generic_const_exprs.full.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffeature-gate-generic_const_exprs.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffeature-gate-generic_const_exprs.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffeature-gate-generic_const_exprs.full.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,10 +0,0 @@\n-error: constant expression depends on a generic parameter\n-  --> $DIR/feature-gate-generic_const_exprs.rs:8:30\n-   |\n-LL | fn test<const N: usize>() -> Arr<N> where Arr<N>: Default {\n-   |                              ^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to previous error\n-"}, {"sha": "10ab2fd867cfc5b54d8c1da194d1785246a22f5b", "filename": "src/test/ui/const-generics/generic_const_exprs/feature-gate-generic_const_exprs.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffeature-gate-generic_const_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffeature-gate-generic_const_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffeature-gate-generic_const_exprs.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,12 +1,7 @@\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n type Arr<const N: usize> = [u8; N - 1];\n-//[min]~^ ERROR generic parameters may not be used in const operations\n+//~^ ERROR generic parameters may not be used in const operations\n \n fn test<const N: usize>() -> Arr<N> where Arr<N>: Default {\n-    //[full]~^ ERROR constant expression depends\n     Default::default()\n }\n "}, {"sha": "2d60ebaa83a1c730d4f79c8275fecec6e57a3ce9", "filename": "src/test/ui/const-generics/generic_const_exprs/feature-gate-generic_const_exprs.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffeature-gate-generic_const_exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffeature-gate-generic_const_exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffeature-gate-generic_const_exprs.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,11 +1,11 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/feature-gate-generic_const_exprs.rs:5:33\n+  --> $DIR/feature-gate-generic_const_exprs.rs:1:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];\n    |                                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n ", "previous_filename": "src/test/ui/const-generics/generic_const_exprs/feature-gate-generic_const_exprs.min.stderr"}, {"sha": "cbe4277df5683d2fe08761528f3da8080e9f24fc", "filename": "src/test/ui/const-generics/generic_const_exprs/fn_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffn_call.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n const fn test_me<T>(a: usize, b: usize) -> usize {"}, {"sha": "90953145944fe7ba4689b2dcd796c46d7a1fb08e", "filename": "src/test/ui/const-generics/generic_const_exprs/from-sig-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig-fail.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n fn test<const N: usize>() -> [u8; N - 1] {"}, {"sha": "28de4f864671d4ec2cc6fdb259bd2768d51acbcb", "filename": "src/test/ui/const-generics/generic_const_exprs/from-sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Foo<const B: bool>;"}, {"sha": "b5de66621c50ee950cd6b1640a5d877ddeb226ba", "filename": "src/test/ui/const-generics/generic_const_exprs/function-call.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "previous_filename": "src/test/ui/const_evaluatable/function-call.rs"}, {"sha": "0d8463714e8dfe131e355faf634a9f423ffb9c41", "filename": "src/test/ui/const-generics/generic_const_exprs/function-call.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "previous_filename": "src/test/ui/const_evaluatable/function-call.stderr"}, {"sha": "7120d6ee25183e8ae78c2a4a0676a6cfbd72b704", "filename": "src/test/ui/const-generics/generic_const_exprs/impl-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fimpl-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fimpl-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fimpl-bounds.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n use std::mem::size_of;"}, {"sha": "b8058c252e77f9d2e0d13d08661a72c867523f88", "filename": "src/test/ui/const-generics/generic_const_exprs/infer-too-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Finfer-too-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Finfer-too-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Finfer-too-generic.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n use std::{mem, ptr};"}, {"sha": "f2ae361dc81d90ca3822bd9d84cd825200b90594", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-62504.full.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.full.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -7,13 +7,13 @@ LL |         ArrayHolder([0; Self::SIZE])\n    = note: expected type `X`\n               found type `Self::SIZE`\n \n-error: constant expression depends on a generic parameter\n+error: unconstrained generic constant\n   --> $DIR/issue-62504.rs:18:25\n    |\n LL |         ArrayHolder([0; Self::SIZE])\n    |                         ^^^^^^^^^^\n    |\n-   = note: this may fail depending on what value the parameter takes\n+   = help: try adding a `where` bound using this expression: `where [(); Self::SIZE]:`\n \n error: aborting due to 2 previous errors\n ", "previous_filename": "src/test/ui/const-generics/issues/issue-62504.full.stderr"}, {"sha": "5d45e302888d424895cb88f12ac906c75de013ea", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-62504.min.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.min.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "previous_filename": "src/test/ui/const-generics/issues/issue-62504.min.stderr"}, {"sha": "a97f4b8ff3131bf9cfc1d5d8e994fd6e8314324c", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-62504.rs", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-62504.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,6 +1,6 @@\n // revisions: full min\n #![allow(incomplete_features)]\n-#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, feature(generic_const_exprs))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n trait HasSize {\n@@ -16,8 +16,9 @@ struct ArrayHolder<const X: usize>([u32; X]);\n impl<const X: usize> ArrayHolder<X> {\n     pub const fn new() -> Self {\n         ArrayHolder([0; Self::SIZE])\n-        //~^ ERROR constant expression depends on a generic parameter\n-        //~| ERROR mismatched types\n+        //~^ ERROR mismatched types\n+        //[full]~^^ ERROR unconstrained generic constant\n+        //[min]~^^^ ERROR constant expression depends on a generic parameter\n     }\n }\n ", "previous_filename": "src/test/ui/const-generics/issues/issue-62504.rs"}, {"sha": "9b36699bbf112e95f5bd969dfcab6228ee95d916", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-69654.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n trait Bar<T> {}", "previous_filename": "src/test/ui/const-generics/issues/issue-69654.rs"}, {"sha": "0ce7640f685774a07c20c5b6b8db7d6854d487d0", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-69654.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "previous_filename": "src/test/ui/const-generics/issues/issue-69654.stderr"}, {"sha": "3c7a740e8434a6a6f969aff5e84241877bcf98c0", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-72787.min.stderr", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,20 +1,20 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-72787.rs:10:17\n+  --> $DIR/issue-72787.rs:11:17\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n    |                 ^^^ cannot perform const operation using `LHS`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `LHS`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-72787.rs:10:24\n+  --> $DIR/issue-72787.rs:11:24\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n    |                        ^^^ cannot perform const operation using `RHS`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `RHS`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-72787.rs:25:25\n@@ -23,7 +23,7 @@ LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                         ^ cannot perform const operation using `I`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `I`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-72787.rs:25:36\n@@ -32,7 +32,7 @@ LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                    ^ cannot perform const operation using `J`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `J`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72787.rs:21:26\n@@ -42,7 +42,7 @@ LL |     IsLessOrEqual<I, 8>: True,\n    |\n    = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n note: required by a bound in `True`\n-  --> $DIR/issue-72787.rs:7:1\n+  --> $DIR/issue-72787.rs:8:1\n    |\n LL | pub trait True {}\n    | ^^^^^^^^^^^^^^ required by this bound in `True`\n@@ -55,7 +55,7 @@ LL |     IsLessOrEqual<I, 8>: True,\n    |\n    = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n note: required by a bound in `True`\n-  --> $DIR/issue-72787.rs:7:1\n+  --> $DIR/issue-72787.rs:8:1\n    |\n LL | pub trait True {}\n    | ^^^^^^^^^^^^^^ required by this bound in `True`", "previous_filename": "src/test/ui/const-generics/issues/issue-72787.min.stderr"}, {"sha": "77ad57f0640fa03260dec80aa3e95bc2f706493c", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-72787.rs", "status": "renamed", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,6 @@\n+// [full] check-pass\n // revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, feature(generic_const_exprs))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n pub struct IsLessOrEqual<const LHS: u32, const RHS: u32>;\n@@ -8,8 +9,7 @@ pub trait True {}\n \n impl<const LHS: u32, const RHS: u32> True for IsLessOrEqual<LHS, RHS> where\n     Condition<{ LHS <= RHS }>: True\n-//[full]~^ Error constant expression depends on a generic parameter\n-//[min]~^^ Error generic parameters may not be used in const operations\n+//[min]~^ Error generic parameters may not be used in const operations\n //[min]~| Error generic parameters may not be used in const operations\n {\n }\n@@ -23,11 +23,7 @@ where\n //[min]~| Error type annotations needed [E0283]\n     IsLessOrEqual<J, 8>: True,\n     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n-//[full]~^ constant expression depends on a generic parameter\n-//[full]~| constant expression depends on a generic parameter\n-//[full]~| constant expression depends on a generic parameter\n-//[full]~| constant expression depends on a generic parameter\n-//[min]~^^^^^ Error generic parameters may not be used in const operations\n+//[min]~^ Error generic parameters may not be used in const operations\n //[min]~| Error generic parameters may not be used in const operations\n     // Condition<{ 8 - I <= 8 - J }>: True,\n {", "previous_filename": "src/test/ui/const-generics/issues/issue-72787.rs"}, {"sha": "d536f6fd1d557e63c277cbf26080fef5544a4ce6", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-72819-generic-in-const-eval.full.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72819-generic-in-const-eval.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72819-generic-in-const-eval.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72819-generic-in-const-eval.full.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-72819-generic-in-const-eval.rs:20:12\n+   |\n+LL |     let x: Arr<{usize::MAX}> = Arr {};\n+   |            ^^^^^^^^^^^^^^^^^ expected `false`, found `true`\n+   |\n+   = note: expected type `false`\n+              found type `true`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-72819-generic-in-const-eval.rs:20:32\n+   |\n+LL |     let x: Arr<{usize::MAX}> = Arr {};\n+   |                                ^^^ expected `false`, found `true`\n+   |\n+   = note: expected type `false`\n+              found type `true`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "42671412fa77fe31f04d5af8747696533618891d", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-72819-generic-in-const-eval.min.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72819-generic-in-const-eval.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72819-generic-in-const-eval.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72819-generic-in-const-eval.min.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -5,7 +5,7 @@ LL | where Assert::<{N < usize::MAX / 2}>: IsTrue,\n    |                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n ", "previous_filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.min.stderr"}, {"sha": "7a5aa9e47d49c42593d01bfde71659ad854a57bb", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-72819-generic-in-const-eval.rs", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72819-generic-in-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72819-generic-in-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72819-generic-in-const-eval.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,13 +1,12 @@\n // Regression test for #72819: ICE due to failure in resolving the const generic in `Arr`'s type\n // bounds.\n // revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, feature(generic_const_exprs))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct Arr<const N: usize>\n where Assert::<{N < usize::MAX / 2}>: IsTrue,\n-//[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters may not be used in const operations\n+//[min]~^ ERROR generic parameters may not be used in const operations\n {\n }\n \n@@ -19,4 +18,6 @@ impl IsTrue for Assert<true> {}\n \n fn main() {\n     let x: Arr<{usize::MAX}> = Arr {};\n+    //[full]~^ ERROR mismatched types\n+    //[full]~| ERROR mismatched types\n }", "previous_filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.rs"}, {"sha": "d1ab1be04733f4c9fd8ff0d53b2214817a201a1b", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-73899.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-73899.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-73899.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-73899.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![feature(generic_const_exprs)]\n-#![feature(const_generics)]\n #![allow(incomplete_features)]\n \n trait Foo {}", "previous_filename": "src/test/ui/const-generics/issues/issue-73899.rs"}, {"sha": "cd1f7a9da687d9a026a7ed39804991565edfb2f4", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-74634.rs", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74634.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74634.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74634.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,5 @@\n-#![feature(const_generics)]\n+// check-pass\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n trait If<const COND: bool> {}\n@@ -12,7 +13,7 @@ struct True;\n struct False;\n \n impl<const N: u8> IsZero<N> for ()\n-where (): If<{N == 0}> { //~ERROR constant expression\n+where (): If<{N == 0}> {\n     type Answer = True;\n }\n ", "previous_filename": "src/test/ui/const-generics/issues/issue-74634.rs"}, {"sha": "faa8b3d10de4f5996733aa4e5f90b7bf59b7ea55", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-76595.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Bool<const B: bool>;", "previous_filename": "src/test/ui/const-generics/issues/issue-76595.rs"}, {"sha": "3b69a4066a9ed91c1a8b54ada9d0c456611ee8ad", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-76595.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "previous_filename": "src/test/ui/const-generics/issues/issue-76595.stderr"}, {"sha": "2fa9a71fbb33c081df2117483ce04796f58c85b5", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-79518-default_trait_method_normalization.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n // This test is a minimized reproduction for #79518 where", "previous_filename": "src/test/ui/const-generics/issues/issue-79518-default_trait_method_normalization.rs"}, {"sha": "c90774e944f1f48d690099893a5025992b15054c", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-79518-default_trait_method_normalization.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "previous_filename": "src/test/ui/const-generics/issues/issue-79518-default_trait_method_normalization.stderr"}, {"sha": "77d3c98dab922d35aa9b4fd7374779119c065cae", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-80561-incorrect-param-env.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80561-incorrect-param-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80561-incorrect-param-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80561-incorrect-param-env.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n // This tests that the correct `param_env` is used so that", "previous_filename": "src/test/ui/const-generics/issues/issue-80561-incorrect-param-env.rs"}, {"sha": "275f69953024cd3eef3d00b0d667d52250b866ba", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-80742.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -4,7 +4,6 @@\n \n #![allow(incomplete_features)]\n #![feature(generic_const_exprs)]\n-#![feature(const_generics)]\n \n use std::fmt::Debug;\n use std::marker::PhantomData;", "previous_filename": "src/test/ui/mir/issue-80742.rs"}, {"sha": "56cb11bacbe6bda50eec2a3ccc8822b7780aa52a", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-80742.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -7,13 +7,13 @@ LL |     intrinsics::size_of::<T>()\n    |     size_of called on unsized type `dyn Debug`\n    |     inside `std::mem::size_of::<dyn Debug>` at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n-  ::: $DIR/issue-80742.rs:23:10\n+  ::: $DIR/issue-80742.rs:22:10\n    |\n LL |     [u8; size_of::<T>() + 1]: ,\n-   |          -------------- inside `Inline::<dyn Debug>::{constant#0}` at $DIR/issue-80742.rs:23:10\n+   |          -------------- inside `Inline::<dyn Debug>::{constant#0}` at $DIR/issue-80742.rs:22:10\n \n error[E0599]: the function or associated item `new` exists for struct `Inline<dyn Debug>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-80742.rs:31:36\n+  --> $DIR/issue-80742.rs:30:36\n    |\n LL | / struct Inline<T>\n LL | | where\n@@ -44,20 +44,20 @@ LL |     intrinsics::size_of::<T>()\n    |     size_of called on unsized type `dyn Debug`\n    |     inside `std::mem::size_of::<dyn Debug>` at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n-  ::: $DIR/issue-80742.rs:15:10\n+  ::: $DIR/issue-80742.rs:14:10\n    |\n LL |     [u8; size_of::<T>() + 1]: ,\n-   |          -------------- inside `Inline::<dyn Debug>::{constant#0}` at $DIR/issue-80742.rs:15:10\n+   |          -------------- inside `Inline::<dyn Debug>::{constant#0}` at $DIR/issue-80742.rs:14:10\n \n error[E0277]: the size for values of type `dyn Debug` cannot be known at compilation time\n-  --> $DIR/issue-80742.rs:31:15\n+  --> $DIR/issue-80742.rs:30:15\n    |\n LL |     let dst = Inline::<dyn Debug>::new(0);\n    |               ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `dyn Debug`\n note: required by a bound in `Inline`\n-  --> $DIR/issue-80742.rs:13:15\n+  --> $DIR/issue-80742.rs:12:15\n    |\n LL | struct Inline<T>\n    |               ^ required by this bound in `Inline`", "previous_filename": "src/test/ui/mir/issue-80742.stderr"}, {"sha": "fac811d1302fa1439b54e344bcf270af7168888d", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-83765.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-83765.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-83765.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-83765.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n trait TensorDimension {", "previous_filename": "src/test/ui/const-generics/issues/issue-83765.rs"}, {"sha": "ef785bf07ebbfce44fd8765d10bd1fdef2be76c4", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-83765.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-83765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-83765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-83765.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "previous_filename": "src/test/ui/const-generics/issues/issue-83765.stderr"}, {"sha": "fb2e5590d216330295087dc926eb638ff3ff868e", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-84408.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-84408.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-84408.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-84408.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,7 @@\n // Regression test for #84408.\n // check-pass\n \n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n trait Melon<const X: usize> {", "previous_filename": "src/test/ui/const-generics/issues/issue-84408.rs"}, {"sha": "771e68b0db58a0c049309d42b14b5163b817650d", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-85848.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_fn_trait_bound, generic_const_exprs)]\n+#![feature(const_fn_trait_bound, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n trait _Contains<T> {", "previous_filename": "src/test/ui/const-generics/issues/issue-85848.rs"}, {"sha": "e51db35925e4acb3d543482c8ba6269d0e8da6b4", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-85848.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "previous_filename": "src/test/ui/const-generics/issues/issue-85848.stderr"}, {"sha": "2e9af1bf4f0bde085d717f7b062e67d1303ba883", "filename": "src/test/ui/const-generics/generic_const_exprs/less_than.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fless_than.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fless_than.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fless_than.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Foo<const B: bool>;"}, {"sha": "cd5d76dd949ddb4d0b8fac27774480697b0663f2", "filename": "src/test/ui/const-generics/generic_const_exprs/let-bindings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Flet-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Flet-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Flet-bindings.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n // We do not yet want to support let-bindings in abstract consts,"}, {"sha": "2bd3c801fbf4a4b4269964ba487cc9e298f9bcda", "filename": "src/test/ui/const-generics/generic_const_exprs/needs_where_clause.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fneeds_where_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fneeds_where_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fneeds_where_clause.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n #![crate_type = \"lib\"]\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n const fn complex_maths<T>(n : usize) -> usize {", "previous_filename": "src/test/ui/const_evaluatable/needs_where_clause.rs"}, {"sha": "7b41e39b7d742d96c3226abe5ebec8bfd617e917", "filename": "src/test/ui/const-generics/generic_const_exprs/needs_where_clause.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fneeds_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fneeds_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fneeds_where_clause.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "previous_filename": "src/test/ui/const_evaluatable/needs_where_clause.stderr"}, {"sha": "7e5022817e414adc9041919d10bcf5c026e7c866", "filename": "src/test/ui/const-generics/generic_const_exprs/nested-abstract-consts-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested-abstract-consts-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested-abstract-consts-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested-abstract-consts-1.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n fn callee<const M2: usize>() -> usize"}, {"sha": "769e3ae6895f29d059110321de101b6a8c66c109", "filename": "src/test/ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested-abstract-consts-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested-abstract-consts-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested-abstract-consts-2.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(generic_const_exprs, const_generics)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Generic<const K: u64>;"}, {"sha": "316887e5e7fa5fc07e43e4ec48eddb915f44396f", "filename": "src/test/ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-1.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n fn zero_init<const N: usize>() -> Substs1<N>"}, {"sha": "d45a6465b765aae0262ec28c7ad37cd6e816abd9", "filename": "src/test/ui/const-generics/generic_const_exprs/nested_uneval_unification-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-2.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features, unused_parens, unused_braces)]\n \n fn zero_init<const N: usize>() -> Substs1<{ (N) }>"}, {"sha": "9c5de03170b1004001ee5f7cb26dbe66fc718f79", "filename": "src/test/ui/const-generics/generic_const_exprs/no_where_clause.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fno_where_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fno_where_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fno_where_clause.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features, unused)]\n \n const fn complex_maths(n : usize) -> usize {", "previous_filename": "src/test/ui/const_evaluatable/no_where_clause.rs"}, {"sha": "3e5c2f5cad1dfff3a3c08fc5bea2310d7b7618fb", "filename": "src/test/ui/const-generics/generic_const_exprs/no_where_clause.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fno_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fno_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fno_where_clause.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "previous_filename": "src/test/ui/const_evaluatable/no_where_clause.stderr"}, {"sha": "24d333aba0fdec656d13d3ed807051cd34de1cc6", "filename": "src/test/ui/const-generics/generic_const_exprs/object-safety-err-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-ret.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n "}, {"sha": "42c1cc507b5c976f4529730ee4f25c9c2deb657f", "filename": "src/test/ui/const-generics/generic_const_exprs/object-safety-err-where-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-where-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-where-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-where-bounds.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n #![deny(where_clauses_object_safety)]\n "}, {"sha": "c6c196db6f2a61a72f8d71aeb5c977802422d274", "filename": "src/test/ui/const-generics/generic_const_exprs/object-safety-ok-infer-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok-infer-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok-infer-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok-infer-err.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n trait Foo<const N: usize> {"}, {"sha": "f4c89f6235a0c3c3f10b26513b7e45a821194ef6", "filename": "src/test/ui/const-generics/generic_const_exprs/object-safety-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n trait Foo<const N: usize> {"}, {"sha": "f6192bbe9caffbdded334b3619607e0ab505ac15", "filename": "src/test/ui/const-generics/generic_const_exprs/simple_fail.min.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,20 +0,0 @@\n-error: generic parameters may not be used in const operations\n-  --> $DIR/simple_fail.rs:6:33\n-   |\n-LL | type Arr<const N: usize> = [u8; N - 1];\n-   |                                 ^ cannot perform const operation using `N`\n-   |\n-   = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n-\n-error: generic parameters may not be used in const operations\n-  --> $DIR/simple_fail.rs:10:48\n-   |\n-LL | fn test<const N: usize>() -> Arr<N> where [u8; N - 1]: Sized {\n-   |                                                ^ cannot perform const operation using `N`\n-   |\n-   = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "c47a350c7fb4374e5186f7d6a954744d825c4338", "filename": "src/test/ui/const-generics/generic_const_exprs/simple_fail.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,15 +1,11 @@\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, feature(generic_const_exprs))]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n type Arr<const N: usize> = [u8; N - 1];\n-//[min]~^ ERROR generic parameters may not be used in const operations\n-//[full]~^^ ERROR evaluation of `Arr::<0_usize>::{constant#0}` failed\n+//~^ ERROR evaluation of `Arr::<0_usize>::{constant#0}` failed\n \n fn test<const N: usize>() -> Arr<N> where [u8; N - 1]: Sized {\n-//[min]~^ ERROR generic parameters may not be used in const operations\n-//[full]~^^ ERROR evaluation of `test::<0_usize>::{constant#0}` failed\n+//~^ ERROR evaluation of `test::<0_usize>::{constant#0}` failed\n     todo!()\n }\n "}, {"sha": "99fc92fb4f0adc31192efc6718834e8ef08d00ec", "filename": "src/test/ui/const-generics/generic_const_exprs/simple_fail.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,11 +1,11 @@\n error[E0080]: evaluation of `test::<0_usize>::{constant#0}` failed\n-  --> $DIR/simple_fail.rs:10:48\n+  --> $DIR/simple_fail.rs:7:48\n    |\n LL | fn test<const N: usize>() -> Arr<N> where [u8; N - 1]: Sized {\n    |                                                ^^^^^ attempt to compute `0_usize - 1_usize`, which would overflow\n \n error[E0080]: evaluation of `Arr::<0_usize>::{constant#0}` failed\n-  --> $DIR/simple_fail.rs:6:33\n+  --> $DIR/simple_fail.rs:4:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];\n    |                                 ^^^^^ attempt to compute `0_usize - 1_usize`, which would overflow", "previous_filename": "src/test/ui/const-generics/generic_const_exprs/simple_fail.full.stderr"}, {"sha": "d6574a3aa2f8b138b749b968ad18746d873b4b48", "filename": "src/test/ui/const-generics/generic_const_exprs/subexprs_are_const_evalutable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsubexprs_are_const_evalutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsubexprs_are_const_evalutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsubexprs_are_const_evalutable.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n fn make_array<const M: usize>() -> [(); M + 1] {"}, {"sha": "d058b36385091d9aeb8025bea9b56309fd30359b", "filename": "src/test/ui/const-generics/generic_const_exprs/ty-alias-substitution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fty-alias-substitution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fty-alias-substitution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fty-alias-substitution.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n // Test that we correctly substitute generic arguments for type aliases.\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n type Alias<T, const N: usize> = [T; N + 1];"}, {"sha": "c12fef083cc733ab286a9c4667821d92e2f5548b", "filename": "src/test/ui/const-generics/generic_const_exprs/unop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funop.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Foo<const B: bool>;"}, {"sha": "67fefd07ec0c4864d5d2f20bb0ec0c035b2e9b04", "filename": "src/test/ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused-complex-default-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused-complex-default-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused-complex-default-expr.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(const_generics, generic_const_exprs, const_generics_defaults)]\n+#![feature(generic_const_exprs, const_generics_defaults)]\n #![allow(incomplete_features)]\n struct Foo<const N: usize, const M: usize = { N + 1 }>;\n struct Bar<const N: usize>(Foo<N, 3>);"}, {"sha": "c1bf19e0f8d435290e92e8c3358265090fdd896b", "filename": "src/test/ui/const-generics/generic_const_exprs/unused_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n fn add<const N: usize>() -> [u8; { N + 1; 5 }] {"}, {"sha": "7eb2c6a51fcfbffa69a1505af87ec38e70f0dfdc", "filename": "src/test/ui/const-generics/impl-const-generic-struct.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,9 +1,4 @@\n // run-pass\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n struct S<const X: u32>;\n \n impl<const X: u32> S<X> {"}, {"sha": "ebc8f458f79c78788d7bbb346069a311123e32af", "filename": "src/test/ui/const-generics/impl-trait-with-const-arguments.min.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,9 +0,0 @@\n-error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-  --> $DIR/impl-trait-with-const-arguments.rs:23:20\n-   |\n-LL |     assert_eq!(f::<4usize>(Usizable), 20usize);\n-   |                    ^^^^^^ explicit generic argument not allowed\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0632`."}, {"sha": "24ba393c17f2a03ee48fc505644e8e4b01621e55", "filename": "src/test/ui/const-generics/impl-trait-with-const-arguments.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,3 @@\n-// revisions: full min\n-\n-#![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(full, feature(const_generics))]\n-\n trait Usizer {\n     fn m(self) -> usize;\n }"}, {"sha": "6268a564b06b65dafeccf91f5a895788ddf3ba7c", "filename": "src/test/ui/const-generics/impl-trait-with-const-arguments.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-  --> $DIR/impl-trait-with-const-arguments.rs:23:20\n+  --> $DIR/impl-trait-with-const-arguments.rs:18:20\n    |\n LL |     assert_eq!(f::<4usize>(Usizable), 20usize);\n    |                    ^^^^^^ explicit generic argument not allowed", "previous_filename": "src/test/ui/const-generics/impl-trait-with-const-arguments.full.stderr"}, {"sha": "7a12f3bdec27820ba16f7e52a7b854c70559f6bb", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.min.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,35 +0,0 @@\n-error[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\n-  --> $DIR/incorrect-number-of-const-args.rs:11:5\n-   |\n-LL |     foo::<0>();\n-   |     ^^^   - supplied 1 generic argument\n-   |     |\n-   |     expected 2 generic arguments\n-   |\n-note: function defined here, with 2 generic parameters: `X`, `Y`\n-  --> $DIR/incorrect-number-of-const-args.rs:6:4\n-   |\n-LL | fn foo<const X: usize, const Y: usize>() -> usize {\n-   |    ^^^       -               -\n-help: add missing generic argument\n-   |\n-LL |     foo::<0, Y>();\n-   |            +++\n-\n-error[E0107]: this function takes 2 generic arguments but 3 generic arguments were supplied\n-  --> $DIR/incorrect-number-of-const-args.rs:14:5\n-   |\n-LL |     foo::<0, 0, 0>();\n-   |     ^^^         - help: remove this generic argument\n-   |     |\n-   |     expected 2 generic arguments\n-   |\n-note: function defined here, with 2 generic parameters: `X`, `Y`\n-  --> $DIR/incorrect-number-of-const-args.rs:6:4\n-   |\n-LL | fn foo<const X: usize, const Y: usize>() -> usize {\n-   |    ^^^       -               -\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0107`."}, {"sha": "de2d126afd75a1bc9e057ff68cf465a207870fdf", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,3 @@\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n fn foo<const X: usize, const Y: usize>() -> usize {\n     0\n }"}, {"sha": "bf873dacd98e170600d17a7d10e1bfb39bc6eb3b", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,13 +1,13 @@\n error[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\n-  --> $DIR/incorrect-number-of-const-args.rs:11:5\n+  --> $DIR/incorrect-number-of-const-args.rs:6:5\n    |\n LL |     foo::<0>();\n    |     ^^^   - supplied 1 generic argument\n    |     |\n    |     expected 2 generic arguments\n    |\n note: function defined here, with 2 generic parameters: `X`, `Y`\n-  --> $DIR/incorrect-number-of-const-args.rs:6:4\n+  --> $DIR/incorrect-number-of-const-args.rs:1:4\n    |\n LL | fn foo<const X: usize, const Y: usize>() -> usize {\n    |    ^^^       -               -\n@@ -17,15 +17,15 @@ LL |     foo::<0, Y>();\n    |            +++\n \n error[E0107]: this function takes 2 generic arguments but 3 generic arguments were supplied\n-  --> $DIR/incorrect-number-of-const-args.rs:14:5\n+  --> $DIR/incorrect-number-of-const-args.rs:9:5\n    |\n LL |     foo::<0, 0, 0>();\n    |     ^^^         - help: remove this generic argument\n    |     |\n    |     expected 2 generic arguments\n    |\n note: function defined here, with 2 generic parameters: `X`, `Y`\n-  --> $DIR/incorrect-number-of-const-args.rs:6:4\n+  --> $DIR/incorrect-number-of-const-args.rs:1:4\n    |\n LL | fn foo<const X: usize, const Y: usize>() -> usize {\n    |    ^^^       -               -", "previous_filename": "src/test/ui/const-generics/incorrect-number-of-const-args.full.stderr"}, {"sha": "01fb137dd6aff8ebe0f424059538f7c88f3e00e8", "filename": "src/test/ui/const-generics/infer/cannot-infer-const-args.min.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,14 +0,0 @@\n-error[E0282]: type annotations needed\n-  --> $DIR/cannot-infer-const-args.rs:11:5\n-   |\n-LL |     foo();\n-   |     ^^^ cannot infer the value of const parameter `X` declared on the function `foo`\n-   |\n-help: consider specifying the const argument\n-   |\n-LL |     foo::<X>();\n-   |     ~~~~~~~~\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0282`."}, {"sha": "f85a72910aff151b769aafbc5eb42d5dfaec2955", "filename": "src/test/ui/const-generics/infer/cannot-infer-const-args.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,3 @@\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n fn foo<const X: usize>() -> usize {\n     0\n }"}, {"sha": "828f497240395eafa5d9f965126fc87bcb5eb0c2", "filename": "src/test/ui/const-generics/infer/cannot-infer-const-args.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed\n-  --> $DIR/cannot-infer-const-args.rs:11:5\n+  --> $DIR/cannot-infer-const-args.rs:6:5\n    |\n LL |     foo();\n    |     ^^^ cannot infer the value of const parameter `X` declared on the function `foo`", "previous_filename": "src/test/ui/const-generics/infer/cannot-infer-const-args.full.stderr"}, {"sha": "979d50b85f1467836aef6e7a6ebe9a3bd42f60a9", "filename": "src/test/ui/const-generics/infer/method-chain.min.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,14 +0,0 @@\n-error[E0282]: type annotations needed\n-  --> $DIR/method-chain.rs:20:33\n-   |\n-LL |     Foo.bar().bar().bar().bar().baz();\n-   |                                 ^^^ cannot infer the value of const parameter `N` declared on the associated function `baz`\n-   |\n-help: consider specifying the const argument\n-   |\n-LL |     Foo.bar().bar().bar().bar().baz::<N>();\n-   |                                 ~~~~~~~~\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0282`."}, {"sha": "0c5eed4894cb37ad44be8dbc6d79c694f5c85e49", "filename": "src/test/ui/const-generics/infer/method-chain.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,3 @@\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-\n struct Foo;\n \n impl Foo {"}, {"sha": "53d92e5ae725d1c060d3eff112eb931968036ea6", "filename": "src/test/ui/const-generics/infer/method-chain.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed\n-  --> $DIR/method-chain.rs:20:33\n+  --> $DIR/method-chain.rs:15:33\n    |\n LL |     Foo.bar().bar().bar().bar().baz();\n    |                                 ^^^ cannot infer the value of const parameter `N` declared on the associated function `baz`", "previous_filename": "src/test/ui/const-generics/infer/method-chain.full.stderr"}, {"sha": "31b7fc7ccf5a0276b27a68ed6362573476d9f5ab", "filename": "src/test/ui/const-generics/infer/one-param-uninferred.min.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,14 +0,0 @@\n-error[E0282]: type annotations needed\n-  --> $DIR/one-param-uninferred.rs:15:23\n-   |\n-LL |     let _: [u8; 17] = foo();\n-   |                       ^^^ cannot infer the value of const parameter `M` declared on the function `foo`\n-   |\n-help: consider specifying the const argument\n-   |\n-LL |     let _: [u8; 17] = foo::<M>();\n-   |                       ~~~~~~~~\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0282`."}, {"sha": "d6018650f533d5f95bd63de239938155f75498d2", "filename": "src/test/ui/const-generics/infer/one-param-uninferred.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,10 +1,4 @@\n // Test that we emit an error if we cannot properly infer a constant.\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n-\n fn foo<const N: usize, const M: usize>() -> [u8; N] {\n     todo!()\n }"}, {"sha": "acf59170c369e6bcfc5c41629a51b71f49309970", "filename": "src/test/ui/const-generics/infer/one-param-uninferred.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fone-param-uninferred.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed\n-  --> $DIR/one-param-uninferred.rs:15:23\n+  --> $DIR/one-param-uninferred.rs:9:23\n    |\n LL |     let _: [u8; 17] = foo();\n    |                       ^^^ cannot infer the value of const parameter `M` declared on the function `foo`", "previous_filename": "src/test/ui/const-generics/infer/one-param-uninferred.full.stderr"}, {"sha": "bee4b693825f3ff8e53497f19b0073e156be6c1c", "filename": "src/test/ui/const-generics/infer/uninferred-consts.min.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,14 +0,0 @@\n-error[E0282]: type annotations needed\n-  --> $DIR/uninferred-consts.rs:13:9\n-   |\n-LL |     Foo.foo();\n-   |         ^^^ cannot infer the value of const parameter `A` declared on the associated function `foo`\n-   |\n-help: consider specifying the const argument\n-   |\n-LL |     Foo.foo::<A>();\n-   |         ~~~~~~~~\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0282`."}, {"sha": "657f4b513042cba5514336c6b77c062485dbbc2a", "filename": "src/test/ui/const-generics/infer/uninferred-consts.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,4 @@\n // Test that we emit an error if we cannot properly infer a constant.\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n \n // taken from https://github.com/rust-lang/rust/issues/70507#issuecomment-615268893\n struct Foo;"}, {"sha": "a6c79fc058a43fd31c0b9842d65623f44d056dc3", "filename": "src/test/ui/const-generics/infer/uninferred-consts.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed\n-  --> $DIR/uninferred-consts.rs:13:9\n+  --> $DIR/uninferred-consts.rs:9:9\n    |\n LL |     Foo.foo();\n    |         ^^^ cannot infer the value of const parameter `A` declared on the associated function `foo`", "previous_filename": "src/test/ui/const-generics/infer/uninferred-consts.full.stderr"}, {"sha": "10317a1b98fcc2a980ceebd79a154b14cc7ea693", "filename": "src/test/ui/const-generics/infer_arg_from_pat.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,10 +1,6 @@\n // run-pass\n //\n // see issue #70529\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n \n struct A<const N: usize> {\n     arr: [u8; N],"}, {"sha": "40f6f5b8d55cef999c06296eb7f19f8445672024", "filename": "src/test/ui/const-generics/infer_arr_len_from_pat.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,10 +1,6 @@\n // check-pass\n //\n // see issue #70529\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n \n fn as_chunks<const N: usize>() -> [u8; N] {\n     loop {}"}, {"sha": "2b8731ba7096c09574e9eb8839850dca39778273", "filename": "src/test/ui/const-generics/integer-literal-generic-arg-in-where-clause.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,8 +1,4 @@\n // check-pass\n-// revisions: full min\n-\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n \n fn takes_closure_of_array_3<F>(f: F) where F: Fn([i32; 3]) {\n     f([1, 2, 3]);"}, {"sha": "3e90dbeece958e61e916ef22f94a1534fd580ed5", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.full.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.full.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,10 +0,0 @@\n-error: constant expression depends on a generic parameter\n-  --> $DIR/intrinsics-type_name-as-const-argument.rs:14:8\n-   |\n-LL |     T: Trait<{std::intrinsics::type_name::<T>()}>\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to previous error\n-"}, {"sha": "604b4e8bddbfa51d3f2a52da6683ee5f6018b603", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,20 +1,20 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/intrinsics-type_name-as-const-argument.rs:14:44\n+  --> $DIR/intrinsics-type_name-as-const-argument.rs:15:44\n    |\n LL |     T: Trait<{std::intrinsics::type_name::<T>()}>\n    |                                            ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: `&'static str` is forbidden as the type of a const generic parameter\n-  --> $DIR/intrinsics-type_name-as-const-argument.rs:9:22\n+  --> $DIR/intrinsics-type_name-as-const-argument.rs:10:22\n    |\n LL | trait Trait<const S: &'static str> {}\n    |                      ^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_param_types)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "eedc619e8054d4eb4deaf500c4bc551fb786ecfc", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,7 +1,8 @@\n+// [full] check-pass\n // revisions: full min\n \n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, feature(const_param_types, generic_const_exprs))]\n \n #![feature(core_intrinsics)]\n #![feature(const_type_name)]\n@@ -13,7 +14,6 @@ struct Bug<T>\n where\n     T: Trait<{std::intrinsics::type_name::<T>()}>\n     //[min]~^ ERROR generic parameters may not be used in const operations\n-    //[full]~^^ ERROR constant expression depends on a generic parameter\n {\n     t: T\n }"}, {"sha": "65741d07d907db8e64362702eb475d29331fa557", "filename": "src/test/ui/const-generics/invalid-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics)]\n+#![feature(const_param_types, const_generics_defaults)]\n #![allow(incomplete_features)]\n \n #[derive(PartialEq, Eq)]"}, {"sha": "6a10ee267df93eda14f385bb9b39d788f231e708", "filename": "src/test/ui/const-generics/issues/auxiliary/const_generic_issues_lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fconst_generic_issues_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fconst_generic_issues_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fconst_generic_issues_lib.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n \n // All of these three items must be in `lib2` to reproduce the error\n \n@@ -10,6 +10,6 @@ pub trait TypeFn {\n pub struct GenericType<const B: i8>;\n \n // Removing the braces around `42` resolves the crash\n-impl TypeFn for GenericType<{ 42 }> {\n+impl TypeFn for GenericType<{ 40 + 2 }> {\n     type Output = ();\n }"}, {"sha": "de3a40860252efed356a0a70a22742a04cb4438b", "filename": "src/test/ui/const-generics/issues/auxiliary/impl-const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fimpl-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fimpl-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fimpl-const.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,4 @@\n-#![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, allow(incomplete_features))]\n+#![feature(generic_const_exprs)]\n \n pub struct Num<const N: usize>;\n "}, {"sha": "179643a7552939e147460bfb7b3e9eda75fadbe4", "filename": "src/test/ui/const-generics/issues/issue-56445-1.full.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.full.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,20 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-56445-1.rs:3:27\n-   |\n-LL | #![cfg_attr(full, feature(const_generics))]\n-   |                           ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n error[E0771]: use of non-static lifetime `'a` in const generic\n-  --> $DIR/issue-56445-1.rs:8:26\n+  --> $DIR/issue-56445-1.rs:9:26\n    |\n LL | struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n    |                          ^^\n    |\n    = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0771`."}, {"sha": "179643a7552939e147460bfb7b3e9eda75fadbe4", "filename": "src/test/ui/const-generics/issues/issue-56445-1.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.min.stderr?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,5 +1,5 @@\n error[E0771]: use of non-static lifetime `'a` in const generic\n-  --> $DIR/issue-56445-1.rs:8:26\n+  --> $DIR/issue-56445-1.rs:9:26\n    |\n LL | struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n    |                          ^^"}, {"sha": "7cd8e13c8f5f6c7ccbc559e7c4a3417c86f5d601", "filename": "src/test/ui/const-generics/issues/issue-56445-1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,6 +1,7 @@\n // Regression test for https://github.com/rust-lang/rust/issues/56445#issuecomment-518402995.\n // revisions: full min\n-#![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, allow(incomplete_features))]\n #![crate_type = \"lib\"]\n \n use std::marker::PhantomData;"}, {"sha": "c03b7252a3c8530895ac946e0fb03026dab57ada", "filename": "src/test/ui/const-generics/issues/issue-60818-struct-constructors.full.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.full.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-60818-struct-constructors.rs:3:27\n-   |\n-LL | #![cfg_attr(full, feature(const_generics))]\n-   |                           ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "0066490dfa37a02117518ebe98fc670746160ff8", "filename": "src/test/ui/const-generics/issues/issue-60818-struct-constructors.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c28e028b6f45f33447f24de7dd762b8599b7a4e/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.rs?ref=0c28e028b6f45f33447f24de7dd762b8599b7a4e", "patch": "@@ -1,6 +1,4 @@\n // check-pass\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n \n struct Generic<const V: usize>;\n "}, {"sha": "f18728eabbb437b7dca909166d01f1197f109da8", "filename": "src/test/ui/const-generics/issues/issue-61336-1.full.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e853f274c42665373b719a5bd7b3f95afe10c2/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.full.stderr?ref=c0e853f274c42665373b719a5bd7b3f95afe10c2", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-61336-1.rs:3:27\n-   |\n-LL | #![cfg_attr(full, feature(const_generics))]\n-   |                           ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}]}