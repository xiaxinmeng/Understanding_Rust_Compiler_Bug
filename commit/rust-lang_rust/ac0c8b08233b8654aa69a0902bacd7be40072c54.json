{"sha": "ac0c8b08233b8654aa69a0902bacd7be40072c54", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMGM4YjA4MjMzYjg2NTRhYTY5YTA5MDJiYWNkN2JlNDAwNzJjNTQ=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-02T03:01:50Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-02T03:08:06Z"}, "message": "Linked failure: add ASCII art. Close #1868.", "tree": {"sha": "5f1bf8a065cbf8d3d4f2a0ef84ebac1a856e7731", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f1bf8a065cbf8d3d4f2a0ef84ebac1a856e7731"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac0c8b08233b8654aa69a0902bacd7be40072c54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac0c8b08233b8654aa69a0902bacd7be40072c54", "html_url": "https://github.com/rust-lang/rust/commit/ac0c8b08233b8654aa69a0902bacd7be40072c54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac0c8b08233b8654aa69a0902bacd7be40072c54/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cb3f3e86a5500ecf40500dc9f6cedabd8e0349e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cb3f3e86a5500ecf40500dc9f6cedabd8e0349e", "html_url": "https://github.com/rust-lang/rust/commit/7cb3f3e86a5500ecf40500dc9f6cedabd8e0349e"}], "stats": {"total": 64, "additions": 59, "deletions": 5}, "files": [{"sha": "8606d2f89f8b46fef5beccdae1d21aaec513868c", "filename": "src/libcore/task.rs", "status": "modified", "additions": 59, "deletions": 5, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ac0c8b08233b8654aa69a0902bacd7be40072c54/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac0c8b08233b8654aa69a0902bacd7be40072c54/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=ac0c8b08233b8654aa69a0902bacd7be40072c54", "patch": "@@ -585,11 +585,67 @@ unsafe fn atomically<U>(f: fn() -> U) -> U {\n }\n \n /****************************************************************************\n- * Internal\n+ * Spawning & linked failure\n+ *\n+ * Several data structures are involved in task management to allow properly\n+ * propagating failure across linked/supervised tasks.\n+ *\n+ * (1) The \"taskgroup_arc\" is an arc::exclusive which contains a hashset of\n+ *     all tasks that are part of the group. Some tasks are 'members', which\n+ *     means if they fail, they will kill everybody else in the taskgroup.\n+ *     Other tasks are 'descendants', which means they will not kill tasks\n+ *     from this group, but can be killed by failing members.\n+ *\n+ *     A new one of these is created each spawn_linked or spawn_supervised.\n+ *\n+ * (2) The \"taskgroup\" is a per-task control structure that tracks a task's\n+ *     spawn configuration. It contains a reference to its taskgroup_arc,\n+ *     a reference to its node in the ancestor list (below), a flag for\n+ *     whether it's part of the 'main'/'root' taskgroup, and an optionally\n+ *     configured notification port. These are stored in TLS.\n+ *\n+ * (3) The \"ancestor_list\" is a cons-style list of arc::exclusives which\n+ *     tracks 'generations' of taskgroups -- a group's ancestors are groups\n+ *     which (directly or transitively) spawn_supervised-ed them. Each task\n+ *     recorded in the 'descendants' of each of its ancestor groups.\n+ *\n+ *     Spawning a supervised task is O(n) in the number of generations still\n+ *     alive, and exiting (by success or failure) that task is also O(n).\n+ *\n+ * This diagram depicts the references between these data structures:\n+ *\n+ *          linked_________________________________\n+ *        ___/                   _________         \\___\n+ *       /   \\                  | group X |        /   \\\n+ *      (  A  ) - - - - - - - > | {A,B} {}|< - - -(  B  )\n+ *       \\___/                  |_________|        \\___/\n+ *      unlinked\n+ *         |      __ (nil)\n+ *         |      //|                         The following code causes this:\n+ *         |__   //   /\\         _________\n+ *        /   \\ //    ||        | group Y |     fn taskA() {\n+ *       (  C  )- - - ||- - - > |{C} {D,E}|         spawn(taskB);\n+ *        \\___/      /  \\=====> |_________|         spawn_unlinked(taskC);\n+ *      supervise   /gen \\                          ...\n+ *         |    __  \\ 00 /                      }\n+ *         |    //|  \\__/                       fn taskB() { ... }\n+ *         |__ //     /\\         _________      fn taskC() {\n+ *        /   \\/      ||        | group Z |         spawn_supervised(taskD);\n+ *       (  D  )- - - ||- - - > | {D} {E} |         ...\n+ *        \\___/      /  \\=====> |_________|     }\n+ *      supervise   /gen \\                      fn taskD() {\n+ *         |    __  \\ 01 /                          spawn_supervised(taskE);\n+ *         |    //|  \\__/                           ...\n+ *         |__ //                _________      }\n+ *        /   \\/                | group W |     fn taskE() { ... }\n+ *       (  E  )- - - - - - - > | {E}  {} |\n+ *        \\___/                 |_________|\n+ *\n+ *     \"taskgroup\"            \"taskgroup_arc\"\n+ *              \"ancestor_list\"\n+ *\n  ****************************************************************************/\n \n-/* spawning */\n-\n type sched_id = int;\n type task_id = int;\n \n@@ -598,8 +654,6 @@ type task_id = int;\n type rust_task = libc::c_void;\n type rust_closure = libc::c_void;\n \n-/* linked failure */\n-\n type taskset = send_map::linear::linear_map<*rust_task,()>;\n \n fn new_taskset() -> taskset {"}]}