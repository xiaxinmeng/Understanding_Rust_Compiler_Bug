{"sha": "9130034337b30e975beb2c265e309187c574561e", "node_id": "C_kwDOAAsO6NoAKDkxMzAwMzQzMzdiMzBlOTc1YmViMmMyNjVlMzA5MTg3YzU3NDU2MWU", "commit": {"author": {"name": "infrandomness", "email": "infrandomness@gmail.com", "date": "2022-06-09T14:06:07Z"}, "committer": {"name": "infrandomness", "email": "infrandomness@gmail.com", "date": "2022-06-26T23:39:24Z"}, "message": "Initial freebsd work", "tree": {"sha": "d06343011bc24145f3cb3f93674c7f0fed2cde15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d06343011bc24145f3cb3f93674c7f0fed2cde15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9130034337b30e975beb2c265e309187c574561e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9130034337b30e975beb2c265e309187c574561e", "html_url": "https://github.com/rust-lang/rust/commit/9130034337b30e975beb2c265e309187c574561e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9130034337b30e975beb2c265e309187c574561e/comments", "author": {"login": "InfRandomness", "id": 43730933, "node_id": "MDQ6VXNlcjQzNzMwOTMz", "avatar_url": "https://avatars.githubusercontent.com/u/43730933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/InfRandomness", "html_url": "https://github.com/InfRandomness", "followers_url": "https://api.github.com/users/InfRandomness/followers", "following_url": "https://api.github.com/users/InfRandomness/following{/other_user}", "gists_url": "https://api.github.com/users/InfRandomness/gists{/gist_id}", "starred_url": "https://api.github.com/users/InfRandomness/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/InfRandomness/subscriptions", "organizations_url": "https://api.github.com/users/InfRandomness/orgs", "repos_url": "https://api.github.com/users/InfRandomness/repos", "events_url": "https://api.github.com/users/InfRandomness/events{/privacy}", "received_events_url": "https://api.github.com/users/InfRandomness/received_events", "type": "User", "site_admin": false}, "committer": {"login": "InfRandomness", "id": 43730933, "node_id": "MDQ6VXNlcjQzNzMwOTMz", "avatar_url": "https://avatars.githubusercontent.com/u/43730933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/InfRandomness", "html_url": "https://github.com/InfRandomness", "followers_url": "https://api.github.com/users/InfRandomness/followers", "following_url": "https://api.github.com/users/InfRandomness/following{/other_user}", "gists_url": "https://api.github.com/users/InfRandomness/gists{/gist_id}", "starred_url": "https://api.github.com/users/InfRandomness/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/InfRandomness/subscriptions", "organizations_url": "https://api.github.com/users/InfRandomness/orgs", "repos_url": "https://api.github.com/users/InfRandomness/repos", "events_url": "https://api.github.com/users/InfRandomness/events{/privacy}", "received_events_url": "https://api.github.com/users/InfRandomness/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ce026fc1d3d90e77b9fc979c17cb6cd35b514ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce026fc1d3d90e77b9fc979c17cb6cd35b514ea", "html_url": "https://github.com/rust-lang/rust/commit/4ce026fc1d3d90e77b9fc979c17cb6cd35b514ea"}], "stats": {"total": 96, "additions": 80, "deletions": 16}, "files": [{"sha": "f436e0179ab636930709c94dc4b9e717763a1c3e", "filename": "ci.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9130034337b30e975beb2c265e309187c574561e/ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9130034337b30e975beb2c265e309187c574561e/ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci.sh?ref=9130034337b30e975beb2c265e309187c574561e", "patch": "@@ -50,6 +50,7 @@ case $HOST_TARGET in\n     MIRI_TEST_TARGET=i686-unknown-linux-gnu run_tests\n     MIRI_TEST_TARGET=aarch64-apple-darwin run_tests\n     MIRI_TEST_TARGET=i686-pc-windows-msvc run_tests\n+    MIRI_TEST_TARGET=x86_64-unknown-freebsd run_tests\n     ;;\n   x86_64-apple-darwin)\n     MIRI_TEST_TARGET=mips64-unknown-linux-gnuabi64 run_tests # big-endian architecture"}, {"sha": "86823f28178871e4537aed72099f717731467fd2", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9130034337b30e975beb2c265e309187c574561e/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9130034337b30e975beb2c265e309187c574561e/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=9130034337b30e975beb2c265e309187c574561e", "patch": "@@ -910,5 +910,5 @@ impl std::fmt::Display for HexRange {\n /// Helper function used inside the shims of foreign functions to check that\n /// `target_os` is a supported UNIX OS.\n pub fn target_os_is_unix(target_os: &str) -> bool {\n-    matches!(target_os, \"linux\" | \"macos\")\n+    matches!(target_os, \"linux\" | \"macos\" | \"freebsd\")\n }"}, {"sha": "f183971b59aa1327081a86dd714f6db9ce2efd48", "filename": "src/shims/unix/dlsym.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9130034337b30e975beb2c265e309187c574561e/src%2Fshims%2Funix%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9130034337b30e975beb2c265e309187c574561e/src%2Fshims%2Funix%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fdlsym.rs?ref=9130034337b30e975beb2c265e309187c574561e", "patch": "@@ -4,11 +4,13 @@ use rustc_target::spec::abi::Abi;\n use crate::*;\n use shims::unix::linux::dlsym as linux;\n use shims::unix::macos::dlsym as macos;\n+use shims::unix::freebsd::dlsym as freebsd;\n \n #[derive(Debug, Copy, Clone)]\n pub enum Dlsym {\n     Linux(linux::Dlsym),\n     MacOs(macos::Dlsym),\n+    FreeBSD(freebsd::Dlsym)\n }\n \n impl Dlsym {\n@@ -18,6 +20,7 @@ impl Dlsym {\n         Ok(match target_os {\n             \"linux\" => linux::Dlsym::from_str(name)?.map(Dlsym::Linux),\n             \"macos\" => macos::Dlsym::from_str(name)?.map(Dlsym::MacOs),\n+            \"freebsd\" => freebsd::Dlsym::from_str(name)?.map(Dlsym::FreeBSD),\n             _ => unreachable!(),\n         })\n     }\n@@ -40,6 +43,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         match dlsym {\n             Dlsym::Linux(dlsym) => linux::EvalContextExt::call_dlsym(this, dlsym, args, dest, ret),\n             Dlsym::MacOs(dlsym) => macos::EvalContextExt::call_dlsym(this, dlsym, args, dest, ret),\n+            Dlsym::FreeBSD(dlsym) => freebsd::EvalContextExt::call_dlsym(this, dlsym, args, dest, ret)\n         }\n     }\n }"}, {"sha": "d789b0c640475d19f1fdaaf7d126293aed8f76d9", "filename": "src/shims/unix/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9130034337b30e975beb2c265e309187c574561e/src%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9130034337b30e975beb2c265e309187c574561e/src%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fforeign_items.rs?ref=9130034337b30e975beb2c265e309187c574561e", "patch": "@@ -485,6 +485,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 match this.tcx.sess.target.os.as_ref() {\n                     \"linux\" => return shims::unix::linux::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n                     \"macos\" => return shims::unix::macos::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n+                    \"freebsd\" => return shims::unix::freebsd::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n                     _ => unreachable!(),\n                 }\n             }"}, {"sha": "57125c14fa0cdd88e31b32311668a460619f8ad2", "filename": "src/shims/unix/freebsd/dlsym.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9130034337b30e975beb2c265e309187c574561e/src%2Fshims%2Funix%2Ffreebsd%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9130034337b30e975beb2c265e309187c574561e/src%2Fshims%2Funix%2Ffreebsd%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffreebsd%2Fdlsym.rs?ref=9130034337b30e975beb2c265e309187c574561e", "patch": "@@ -0,0 +1,35 @@\n+use rustc_middle::mir;\n+\n+use crate::*;\n+use helpers::check_arg_count;\n+\n+#[derive(Debug, Copy, Clone)]\n+#[allow(non_camel_case_types)]\n+pub enum Dlsym {\n+    getentropy,\n+}\n+\n+impl Dlsym {\n+    // Returns an error for unsupported symbols, and None if this symbol\n+    // should become a NULL pointer (pretend it does not exist).\n+    pub fn from_str<'tcx>(name: &str) -> InterpResult<'tcx, Option<Dlsym>> {\n+        throw_unsup_format!(\"unsupported FreeBSD dlsym: {}\", name)\n+    }\n+}\n+\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn call_dlsym(\n+        &mut self,\n+        dlsym: Dlsym,\n+        _args: &[OpTy<'tcx, Tag>],\n+        _dest: &PlaceTy<'tcx, Tag>,\n+        ret: Option<mir::BasicBlock>,\n+    ) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+        let _ret = ret.expect(\"we don't support any diverging dlsym\");\n+        assert!(this.tcx.sess.target.os == \"freebsd\");\n+\n+        match dlsym {}\n+    }\n+}"}, {"sha": "ac261cecc2e0ac2fa306a6c4c5cb0651e7c808fe", "filename": "src/shims/unix/freebsd/foreign_items.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9130034337b30e975beb2c265e309187c574561e/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9130034337b30e975beb2c265e309187c574561e/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs?ref=9130034337b30e975beb2c265e309187c574561e", "patch": "@@ -0,0 +1,23 @@\n+use rustc_middle::mir;\n+use rustc_span::Symbol;\n+use rustc_target::spec::abi::Abi;\n+\n+use crate::*;\n+use shims::foreign_items::EmulateByNameResult;\n+\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn emulate_foreign_item_by_name(\n+        &mut self,\n+        link_name: Symbol,\n+        abi: Abi,\n+        args: &[OpTy<'tcx, Tag>],\n+        dest: &PlaceTy<'tcx, Tag>,\n+        _ret: mir::BasicBlock,\n+    ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n+        let this = self.eval_context_mut();\n+        // match\n+        Ok(EmulateByNameResult::NeedsJumping)\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "428d997d787c82e974565d5677614fb6052d5473", "filename": "src/shims/unix/freebsd/mod.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9130034337b30e975beb2c265e309187c574561e/src%2Fshims%2Funix%2Ffreebsd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9130034337b30e975beb2c265e309187c574561e/src%2Fshims%2Funix%2Ffreebsd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffreebsd%2Fmod.rs?ref=9130034337b30e975beb2c265e309187c574561e", "patch": "@@ -0,0 +1,2 @@\n+pub mod foreign_items;\n+pub mod dlsym;\n\\ No newline at end of file"}, {"sha": "ee0ff01c05ed1cbb1339501bc01a920b22f599da", "filename": "src/shims/unix/macos/dlsym.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9130034337b30e975beb2c265e309187c574561e/src%2Fshims%2Funix%2Fmacos%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9130034337b30e975beb2c265e309187c574561e/src%2Fshims%2Funix%2Fmacos%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fmacos%2Fdlsym.rs?ref=9130034337b30e975beb2c265e309187c574561e", "patch": "@@ -3,21 +3,18 @@ use rustc_middle::mir;\n use log::trace;\n \n use crate::*;\n-use helpers::check_arg_count;\n \n #[derive(Debug, Copy, Clone)]\n #[allow(non_camel_case_types)]\n pub enum Dlsym {\n-    getentropy,\n }\n \n impl Dlsym {\n     // Returns an error for unsupported symbols, and None if this symbol\n     // should become a NULL pointer (pretend it does not exist).\n     pub fn from_str<'tcx>(name: &str) -> InterpResult<'tcx, Option<Dlsym>> {\n         Ok(match name {\n-            \"getentropy\" => Some(Dlsym::getentropy),\n-            _ => throw_unsup_format!(\"unsupported macOS dlsym: {}\", name),\n+            _ => throw_unsup_format!(\"unsupported freebsd dlsym: {}\", name),\n         })\n     }\n }\n@@ -33,7 +30,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         let ret = ret.expect(\"we don't support any diverging dlsym\");\n-        assert!(this.tcx.sess.target.os == \"macos\");\n+        assert!(this.tcx.sess.target.os == \"freebsd\");\n \n         match dlsym {\n             Dlsym::getentropy => {"}, {"sha": "4002b056b4b21647691e18da7b63e5f2d5e0952a", "filename": "src/shims/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9130034337b30e975beb2c265e309187c574561e/src%2Fshims%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9130034337b30e975beb2c265e309187c574561e/src%2Fshims%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fmod.rs?ref=9130034337b30e975beb2c265e309187c574561e", "patch": "@@ -7,5 +7,6 @@ mod thread;\n \n mod linux;\n mod macos;\n+mod freebsd;\n \n pub use fs::{DirHandler, FileHandler};"}, {"sha": "0b6bc64395344f8e787abc7067f9d97a18245e2c", "filename": "tests/pass/libc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9130034337b30e975beb2c265e309187c574561e/tests%2Fpass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9130034337b30e975beb2c265e309187c574561e/tests%2Fpass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Flibc.rs?ref=9130034337b30e975beb2c265e309187c574561e", "patch": "@@ -5,14 +5,14 @@\n \n extern crate libc;\n \n-#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"linux, freebsd\")]\n fn tmp() -> std::path::PathBuf {\n     std::env::var(\"MIRI_TEMP\")\n         .map(std::path::PathBuf::from)\n         .unwrap_or_else(|_| std::env::temp_dir())\n }\n \n-#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"linux, freebsd\")]\n fn test_posix_fadvise() {\n     use std::convert::TryInto;\n     use std::fs::{remove_file, File};\n@@ -42,7 +42,7 @@ fn test_posix_fadvise() {\n     assert_eq!(result, 0);\n }\n \n-#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"linux, freebsd\")]\n fn test_sync_file_range() {\n     use std::fs::{remove_file, File};\n     use std::io::Write;\n@@ -208,7 +208,7 @@ fn test_rwlock_libc_static_initializer() {\n /// Test whether the `prctl` shim correctly sets the thread name.\n ///\n /// Note: `prctl` exists only on Linux.\n-#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"linux,freebsd\")]\n fn test_prctl_thread_name() {\n     use libc::c_long;\n     use std::ffi::CString;\n@@ -277,7 +277,7 @@ fn test_thread_local_errno() {\n }\n \n /// Tests whether clock support exists at all\n-#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"linux,freebsd\")]\n fn test_clocks() {\n     let mut tp = std::mem::MaybeUninit::<libc::timespec>::uninit();\n     let is_error = unsafe { libc::clock_gettime(libc::CLOCK_REALTIME, tp.as_mut_ptr()) };\n@@ -291,25 +291,25 @@ fn test_clocks() {\n }\n \n fn main() {\n-    #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"linux,freebsd\")]\n     test_posix_fadvise();\n \n-    #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"linux,freebsd\")]\n     test_sync_file_range();\n \n     test_mutex_libc_init_recursive();\n     test_mutex_libc_init_normal();\n     test_mutex_libc_init_errorcheck();\n     test_rwlock_libc_static_initializer();\n \n-    #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"linux,freebsd\")]\n     test_mutex_libc_static_initializer_recursive();\n \n-    #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"linux,freebsd\")]\n     test_prctl_thread_name();\n \n     test_thread_local_errno();\n \n-    #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"linux,freebsd\")]\n     test_clocks();\n }"}]}