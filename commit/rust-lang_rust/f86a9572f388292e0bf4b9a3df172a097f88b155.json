{"sha": "f86a9572f388292e0bf4b9a3df172a097f88b155", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NmE5NTcyZjM4ODI5MmUwYmY0YjlhM2RmMTcyYTA5N2Y4OGIxNTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-20T16:05:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-20T16:05:54Z"}, "message": "Merge #8897\n\n8897: minor: Don't compare ast::Visibility by stringifying r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Tobias Wirth <lukastw97@gmail.com>", "tree": {"sha": "eeb9bcb3d64d31fcc7a3841439d4f6ee7380bfb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eeb9bcb3d64d31fcc7a3841439d4f6ee7380bfb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f86a9572f388292e0bf4b9a3df172a097f88b155", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgpojiCRBK7hj4Ov3rIwAAiw4IADDLKoW7/IIsw+2+sXg0WUQC\nc+F4mrWt0HHO1LFho8T7n5+AXbo0OaBZzTk3xCSy2bnpIiVpI7sX+C3XfAi2pi25\nEWmoAyuTbfC2x4dsrzqeIRcsd8jqcmqLC8zb8FFTE4LbzVbpuewwjb8DX/Vh11sC\npWVK8ovLk+ScMmHsxJlB80qBI7UwC+1CqyDQ29V/Qc9xMbp68TLWDxs0xjVHU2EU\nkxGDs/w+V3YEZFigM93cMtN8SRdAR3i7QqpoKZ0EHF1DmGld2KXik0T4EUM5ZH1C\nIYevzgKfn2K1FkwF0Q4skPKg+fglypU3nJe7O1OKCkFmqhx5dZjc9py4oUpjHP4=\n=xOHD\n-----END PGP SIGNATURE-----\n", "payload": "tree eeb9bcb3d64d31fcc7a3841439d4f6ee7380bfb5\nparent 7aab09ca6c62ee19528b0acf5b164d66f78575db\nparent da7f1eb756ba849b70ccb7e6c961ccf233e19099\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621526754 +0000\ncommitter GitHub <noreply@github.com> 1621526754 +0000\n\nMerge #8897\n\n8897: minor: Don't compare ast::Visibility by stringifying r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Tobias Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f86a9572f388292e0bf4b9a3df172a097f88b155", "html_url": "https://github.com/rust-lang/rust/commit/f86a9572f388292e0bf4b9a3df172a097f88b155", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f86a9572f388292e0bf4b9a3df172a097f88b155/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7aab09ca6c62ee19528b0acf5b164d66f78575db", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aab09ca6c62ee19528b0acf5b164d66f78575db", "html_url": "https://github.com/rust-lang/rust/commit/7aab09ca6c62ee19528b0acf5b164d66f78575db"}, {"sha": "da7f1eb756ba849b70ccb7e6c961ccf233e19099", "url": "https://api.github.com/repos/rust-lang/rust/commits/da7f1eb756ba849b70ccb7e6c961ccf233e19099", "html_url": "https://github.com/rust-lang/rust/commit/da7f1eb756ba849b70ccb7e6c961ccf233e19099"}], "stats": {"total": 80, "additions": 74, "deletions": 6}, "files": [{"sha": "fc117bd9a8469c6eb676977512eac5bd1211ca10", "filename": "crates/ide_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f86a9572f388292e0bf4b9a3df172a097f88b155/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f86a9572f388292e0bf4b9a3df172a097f88b155/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=f86a9572f388292e0bf4b9a3df172a097f88b155", "patch": "@@ -212,6 +212,20 @@ pub(crate) use std::fmt::{Debug, Display};\n         )\n     }\n \n+    #[test]\n+    fn merge_pub_in_path_crate() {\n+        check_assist(\n+            merge_imports,\n+            r\"\n+pub(in this::path) use std::fmt$0::Debug;\n+pub(in this::path) use std::fmt::Display;\n+\",\n+            r\"\n+pub(in this::path) use std::fmt::{Debug, Display};\n+\",\n+        )\n+    }\n+\n     #[test]\n     fn test_merge_nested() {\n         check_assist("}, {"sha": "0dbabb44fba674986575f3b9fd2b0495aecc29b5", "filename": "crates/ide_db/src/helpers/merge_imports.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f86a9572f388292e0bf4b9a3df172a097f88b155/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f86a9572f388292e0bf4b9a3df172a097f88b155/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fmerge_imports.rs?ref=f86a9572f388292e0bf4b9a3df172a097f88b155", "patch": "@@ -292,9 +292,7 @@ fn path_segment_cmp(a: &ast::PathSegment, b: &ast::PathSegment) -> Ordering {\n pub fn eq_visibility(vis0: Option<ast::Visibility>, vis1: Option<ast::Visibility>) -> bool {\n     match (vis0, vis1) {\n         (None, None) => true,\n-        // FIXME: Don't use the string representation to check for equality\n-        // spaces inside of the node would break this comparison\n-        (Some(vis0), Some(vis1)) => vis0.to_string() == vis1.to_string(),\n+        (Some(vis0), Some(vis1)) => vis0.is_eq_to(&vis1),\n         _ => false,\n     }\n }\n@@ -303,9 +301,14 @@ pub fn eq_attrs(\n     attrs0: impl Iterator<Item = ast::Attr>,\n     attrs1: impl Iterator<Item = ast::Attr>,\n ) -> bool {\n-    let attrs0 = attrs0.map(|attr| attr.to_string());\n-    let attrs1 = attrs1.map(|attr| attr.to_string());\n-    attrs0.eq(attrs1)\n+    // FIXME order of attributes should not matter\n+    let attrs0 = attrs0\n+        .flat_map(|attr| attr.syntax().descendants_with_tokens())\n+        .flat_map(|it| it.into_token());\n+    let attrs1 = attrs1\n+        .flat_map(|attr| attr.syntax().descendants_with_tokens())\n+        .flat_map(|it| it.into_token());\n+    stdx::iter_eq_by(attrs0, attrs1, |tok, tok2| tok.text() == tok2.text())\n }\n \n fn path_is_self(path: &ast::Path) -> bool {"}, {"sha": "18d5fadb9c52a428aa5d2bc80bee5ef9ea7676c1", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f86a9572f388292e0bf4b9a3df172a097f88b155/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f86a9572f388292e0bf4b9a3df172a097f88b155/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=f86a9572f388292e0bf4b9a3df172a097f88b155", "patch": "@@ -140,6 +140,34 @@ impl JodChild {\n     }\n }\n \n+// feature: iter_order_by\n+// Iterator::eq_by\n+pub fn iter_eq_by<I, I2, F>(this: I2, other: I, mut eq: F) -> bool\n+where\n+    I: IntoIterator,\n+    I2: IntoIterator,\n+    F: FnMut(I2::Item, I::Item) -> bool,\n+{\n+    let mut other = other.into_iter();\n+    let mut this = this.into_iter();\n+\n+    loop {\n+        let x = match this.next() {\n+            None => return other.next().is_none(),\n+            Some(val) => val,\n+        };\n+\n+        let y = match other.next() {\n+            None => return false,\n+            Some(val) => val,\n+        };\n+\n+        if !eq(x, y) {\n+            return false;\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "df8f98b5b5f50448d1011c97459501ff066f9b79", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f86a9572f388292e0bf4b9a3df172a097f88b155/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f86a9572f388292e0bf4b9a3df172a097f88b155/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=f86a9572f388292e0bf4b9a3df172a097f88b155", "patch": "@@ -608,6 +608,29 @@ impl ast::Visibility {\n             None => VisibilityKind::Pub,\n         }\n     }\n+\n+    pub fn is_eq_to(&self, other: &Self) -> bool {\n+        match (self.kind(), other.kind()) {\n+            (VisibilityKind::In(this), VisibilityKind::In(other)) => {\n+                stdx::iter_eq_by(this.segments(), other.segments(), |lhs, rhs| {\n+                    lhs.kind().zip(rhs.kind()).map_or(false, |it| match it {\n+                        (PathSegmentKind::CrateKw, PathSegmentKind::CrateKw)\n+                        | (PathSegmentKind::SelfKw, PathSegmentKind::SelfKw)\n+                        | (PathSegmentKind::SuperKw, PathSegmentKind::SuperKw) => true,\n+                        (PathSegmentKind::Name(lhs), PathSegmentKind::Name(rhs)) => {\n+                            lhs.text() == rhs.text()\n+                        }\n+                        _ => false,\n+                    })\n+                })\n+            }\n+            (VisibilityKind::PubSelf, VisibilityKind::PubSelf)\n+            | (VisibilityKind::PubSuper, VisibilityKind::PubSuper)\n+            | (VisibilityKind::PubCrate, VisibilityKind::PubCrate)\n+            | (VisibilityKind::Pub, VisibilityKind::Pub) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n impl ast::LifetimeParam {"}]}