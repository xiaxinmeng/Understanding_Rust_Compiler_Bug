{"sha": "744dfd8847e447edf7e612196d6eec665ce36c04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NGRmZDg4NDdlNDQ3ZWRmN2U2MTIxOTZkNmVlYzY2NWNlMzZjMDQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-25T13:03:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-26T07:56:54Z"}, "message": "explain why interning is not as trivial as it might seem", "tree": {"sha": "86a44a33a80f48f70b7c6ca7079343cc27a42bd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86a44a33a80f48f70b7c6ca7079343cc27a42bd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/744dfd8847e447edf7e612196d6eec665ce36c04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/744dfd8847e447edf7e612196d6eec665ce36c04", "html_url": "https://github.com/rust-lang/rust/commit/744dfd8847e447edf7e612196d6eec665ce36c04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/744dfd8847e447edf7e612196d6eec665ce36c04/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18fd58e9d1f5daea4b1ab6cc80b4251645842191", "url": "https://api.github.com/repos/rust-lang/rust/commits/18fd58e9d1f5daea4b1ab6cc80b4251645842191", "html_url": "https://github.com/rust-lang/rust/commit/18fd58e9d1f5daea4b1ab6cc80b4251645842191"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "5e5c74a3723747f8ad6801a65c045ff9a695d14f", "filename": "compiler/rustc_mir/src/interpret/intern.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/744dfd8847e447edf7e612196d6eec665ce36c04/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744dfd8847e447edf7e612196d6eec665ce36c04/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs?ref=744dfd8847e447edf7e612196d6eec665ce36c04", "patch": "@@ -2,6 +2,17 @@\n //!\n //! After a const evaluation has computed a value, before we destroy the const evaluator's session\n //! memory, we need to extract all memory allocations to the global memory pool so they stay around.\n+//!\n+//! In principle, this is not very complicated: we recursively walk the final value, follow all the\n+//! pointers, and move all reachable allocations to the global `tcx` memory. The only complication\n+//! is picking the right mutability for the allocations in a `static` initializer: we want to make\n+//! as many allocations as possible immutable so LLVM can put them into read-only memory. At the\n+//! same time, we need to make memory that could be mutated by the program mutable to avoid\n+//! incorrect compilations. To achieve this, we do a type-based traversal of the final value,\n+//! tracking mutable and shared references and `UnsafeCell` to determine the current mutability.\n+//! (In principle, we could skip this type-based part for `const` and promoteds, as they need to be\n+//! always immutable. At least for `const` however we use this opportunity to reject any `const`\n+//! that contains allocations whose mutability we cannot identify.)\n \n use super::validity::RefTracking;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};"}]}