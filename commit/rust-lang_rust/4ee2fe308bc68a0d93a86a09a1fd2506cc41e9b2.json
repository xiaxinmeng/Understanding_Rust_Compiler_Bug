{"sha": "4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2", "node_id": "C_kwDOAAsO6NoAKDRlZTJmZTMwOGJjNjhhMGQ5M2E4NmEwOWExZmQyNTA2Y2M0MWU5YjI", "commit": {"author": {"name": "Bryysen", "email": "Brukkenbrisen@gmail.com", "date": "2022-08-07T15:24:25Z"}, "committer": {"name": "Bryysen", "email": "Brukkenbrisen@gmail.com", "date": "2022-08-07T15:43:52Z"}, "message": "Further improve error message for E0081\n\nMultiple duplicate assignments of the same discriminant are now reported\nin the samme error. We now point out the incrementation start point for\ndiscriminants that are not explicitly assigned that are also duplicates.\nRemoved old test related to E0081 that is now covered by error-codes/E0081.rs.\nAlso refactored parts of the `check_enum` function.", "tree": {"sha": "e591124bdeca4e877b8f013f11ba2b9fb65f9292", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e591124bdeca4e877b8f013f11ba2b9fb65f9292"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2", "html_url": "https://github.com/rust-lang/rust/commit/4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2/comments", "author": {"login": "Bryysen", "id": 20719480, "node_id": "MDQ6VXNlcjIwNzE5NDgw", "avatar_url": "https://avatars.githubusercontent.com/u/20719480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bryysen", "html_url": "https://github.com/Bryysen", "followers_url": "https://api.github.com/users/Bryysen/followers", "following_url": "https://api.github.com/users/Bryysen/following{/other_user}", "gists_url": "https://api.github.com/users/Bryysen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bryysen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bryysen/subscriptions", "organizations_url": "https://api.github.com/users/Bryysen/orgs", "repos_url": "https://api.github.com/users/Bryysen/repos", "events_url": "https://api.github.com/users/Bryysen/events{/privacy}", "received_events_url": "https://api.github.com/users/Bryysen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Bryysen", "id": 20719480, "node_id": "MDQ6VXNlcjIwNzE5NDgw", "avatar_url": "https://avatars.githubusercontent.com/u/20719480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bryysen", "html_url": "https://github.com/Bryysen", "followers_url": "https://api.github.com/users/Bryysen/followers", "following_url": "https://api.github.com/users/Bryysen/following{/other_user}", "gists_url": "https://api.github.com/users/Bryysen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bryysen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bryysen/subscriptions", "organizations_url": "https://api.github.com/users/Bryysen/orgs", "repos_url": "https://api.github.com/users/Bryysen/repos", "events_url": "https://api.github.com/users/Bryysen/events{/privacy}", "received_events_url": "https://api.github.com/users/Bryysen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5651759746e6eefa691f61522d19b46d07cf9244", "url": "https://api.github.com/repos/rust-lang/rust/commits/5651759746e6eefa691f61522d19b46d07cf9244", "html_url": "https://github.com/rust-lang/rust/commit/5651759746e6eefa691f61522d19b46d07cf9244"}], "stats": {"total": 283, "additions": 142, "deletions": 141}, "files": [{"sha": "82d4e235cb377f73ad7bba13acb4ea4c191148de", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 82, "deletions": 63, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2", "patch": "@@ -32,7 +32,6 @@ use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n use rustc_trait_selection::traits::{self, ObligationCtxt};\n use rustc_ty_utils::representability::{self, Representability};\n \n-use std::iter;\n use std::ops::ControlFlow;\n \n pub(super) fn check_abi(tcx: TyCtxt<'_>, hir_id: hir::HirId, span: Span, abi: Abi) {\n@@ -1494,76 +1493,96 @@ fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, vs: &'tcx [hir::Variant<'tcx>], def_id: L\n         }\n     }\n \n-    let mut disr_vals: Vec<Discr<'tcx>> = Vec::with_capacity(vs.len());\n-    // This tracks the previous variant span (in the loop) incase we need it for diagnostics\n-    let mut prev_variant_span: Span = DUMMY_SP;\n-    for ((_, discr), v) in iter::zip(def.discriminants(tcx), vs) {\n-        // Check for duplicate discriminant values\n-        if let Some(i) = disr_vals.iter().position(|&x| x.val == discr.val) {\n-            let variant_did = def.variant(VariantIdx::new(i)).def_id;\n-            let variant_i_hir_id = tcx.hir().local_def_id_to_hir_id(variant_did.expect_local());\n-            let variant_i = tcx.hir().expect_variant(variant_i_hir_id);\n-            let i_span = match variant_i.disr_expr {\n-                Some(ref expr) => tcx.hir().span(expr.hir_id),\n-                None => tcx.def_span(variant_did),\n-            };\n-            let span = match v.disr_expr {\n-                Some(ref expr) => tcx.hir().span(expr.hir_id),\n-                None => v.span,\n-            };\n-            let display_discr = format_discriminant_overflow(tcx, v, discr);\n-            let display_discr_i = format_discriminant_overflow(tcx, variant_i, disr_vals[i]);\n-            let no_disr = v.disr_expr.is_none();\n-            let mut err = struct_span_err!(\n-                tcx.sess,\n-                sp,\n-                E0081,\n-                \"discriminant value `{}` assigned more than once\",\n-                discr,\n-            );\n-\n-            err.span_label(i_span, format!(\"first assignment of {display_discr_i}\"));\n-            err.span_label(span, format!(\"second assignment of {display_discr}\"));\n-\n-            if no_disr {\n-                err.span_label(\n-                    prev_variant_span,\n-                    format!(\n-                        \"assigned discriminant for `{}` was incremented from this discriminant\",\n-                        v.ident\n-                    ),\n-                );\n-            }\n-            err.emit();\n-        }\n-\n-        disr_vals.push(discr);\n-        prev_variant_span = v.span;\n-    }\n+    detect_discriminant_duplicate(tcx, def.discriminants(tcx).collect(), vs, sp);\n \n     check_representable(tcx, sp, def_id);\n     check_transparent(tcx, sp, def);\n }\n \n-/// In the case that a discriminant is both a duplicate and an overflowing literal,\n-/// we insert both the assigned discriminant and the literal it overflowed from into the formatted\n-/// output. Otherwise we format the discriminant normally.\n-fn format_discriminant_overflow<'tcx>(\n+fn detect_discriminant_duplicate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    variant: &hir::Variant<'_>,\n-    dis: Discr<'tcx>,\n-) -> String {\n-    if let Some(expr) = &variant.disr_expr {\n-        let body = &tcx.hir().body(expr.body).value;\n-        if let hir::ExprKind::Lit(lit) = &body.kind\n-            && let rustc_ast::LitKind::Int(lit_value, _int_kind) = &lit.node\n-            && dis.val != *lit_value\n-        {\n-                    return format!(\"`{dis}` (overflowed from `{lit_value}`)\");\n+    mut discrs: Vec<(VariantIdx, Discr<'tcx>)>,\n+    vs: &'tcx [hir::Variant<'tcx>],\n+    self_span: Span,\n+) {\n+    let report = |var: &hir::Variant<'_>,\n+                  dis: Discr<'tcx>,\n+                  idx: usize,\n+                  err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>| {\n+        let (span, display_discr) = match var.disr_expr {\n+            Some(ref expr) => {\n+                // In the case the discriminant is both a duplicate and overflowed, let the user know\n+                if let hir::ExprKind::Lit(lit) = &tcx.hir().body(expr.body).value.kind\n+                    && let rustc_ast::LitKind::Int(lit_value, _int_kind) = &lit.node\n+                    && *lit_value != dis.val\n+                {\n+                    (tcx.hir().span(expr.hir_id), format!(\"`{dis}` (overflowed from `{lit_value}`)\"))\n+                } else {\n+                    (tcx.hir().span(expr.hir_id), format!(\"`{dis}`\"))\n+                }\n+            }\n+            None => {\n+                if let Some((n, hir::Variant { span, ident, .. })) =\n+                    vs[..idx].iter().rev().enumerate().find(|v| v.1.disr_expr.is_some())\n+                {\n+                    let ve_ident = var.ident;\n+                    let sp = if n > 1 { \"variants\" } else { \"variant\" };\n+                    let n = n + 1;\n+\n+                    err.span_label(\n+                        *span,\n+                        format!(\"discriminant for `{ve_ident}` incremented from this startpoint (`{ident}` + {n} {sp} later => `{ve_ident}` = {dis})\"),\n+                    );\n+                }\n+\n+                (vs[idx].span, format!(\"`{dis}`\"))\n+            }\n+        };\n+\n+        err.span_label(span, format!(\"{display_discr} assigned here\"));\n+    };\n+\n+    let mut i = 0;\n+    while i < discrs.len() {\n+        let hir_var_i_idx = discrs[i].0.index();\n+        let hir_var_i = &vs[hir_var_i_idx];\n+        let mut error: Option<DiagnosticBuilder<'_, _>> = None;\n+\n+        let mut o = i + 1;\n+        while o < discrs.len() {\n+            let hir_var_o_idx = discrs[o].0.index();\n+            let hir_var_o = &vs[hir_var_o_idx];\n+\n+            if discrs[i].1.val == discrs[o].1.val {\n+                let err = error.get_or_insert_with(|| {\n+                    let mut ret = struct_span_err!(\n+                        tcx.sess,\n+                        self_span,\n+                        E0081,\n+                        \"discriminant value `{}` assigned more than once\",\n+                        discrs[i].1,\n+                    );\n+\n+                    report(hir_var_i, discrs[i].1, hir_var_i_idx, &mut ret);\n+\n+                    ret\n+                });\n+\n+                report(hir_var_o, discrs[o].1, hir_var_o_idx, err);\n+\n+                discrs[o] = *discrs.last().unwrap();\n+                discrs.pop();\n+            } else {\n+                o += 1;\n+            }\n         }\n-    }\n \n-    format!(\"`{dis}`\")\n+        if let Some(mut e) = error {\n+            e.emit();\n+        }\n+\n+        i += 1;\n+    }\n }\n \n pub(super) fn check_type_params_are_used<'tcx>("}, {"sha": "199277abbc4845a0edb9db97ceec74d57e7ddffe", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2", "patch": "@@ -112,7 +112,6 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::{HirIdMap, ImplicitSelfKind, Node};\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::Idx;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};"}, {"sha": "fc94d281c77e20578c4065eef3fd37f04d39e2b5", "filename": "src/test/ui/enum/enum-discrim-autosizing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.rs?ref=4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2", "patch": "@@ -6,9 +6,9 @@\n enum Eu64 {\n     //~^ ERROR discriminant value `0` assigned more than once\n     Au64 = 0,\n-    //~^NOTE first assignment of `0`\n+    //~^NOTE `0` assigned here\n     Bu64 = 0x8000_0000_0000_0000\n-    //~^NOTE second assignment of `0` (overflowed from `9223372036854775808`)\n+    //~^NOTE `0` (overflowed from `9223372036854775808`) assigned here\n }\n \n fn main() {}"}, {"sha": "be3d7c64e28bd988febb63697c6a99279a7b6736", "filename": "src/test/ui/enum/enum-discrim-autosizing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.stderr?ref=4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2", "patch": "@@ -5,10 +5,10 @@ LL | enum Eu64 {\n    | ^^^^^^^^^\n LL |\n LL |     Au64 = 0,\n-   |            - first assignment of `0`\n+   |            - `0` assigned here\n LL |\n LL |     Bu64 = 0x8000_0000_0000_0000\n-   |            --------------------- second assignment of `0` (overflowed from `9223372036854775808`)\n+   |            --------------------- `0` (overflowed from `9223372036854775808`) assigned here\n \n error: aborting due to previous error\n "}, {"sha": "5e970a89307b73c609cc67e79197af18e203f19c", "filename": "src/test/ui/error-codes/E0081.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2/src%2Ftest%2Fui%2Ferror-codes%2FE0081.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2/src%2Ftest%2Fui%2Ferror-codes%2FE0081.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0081.rs?ref=4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2", "patch": "@@ -1,30 +1,48 @@\n enum Enum {\n     //~^ ERROR discriminant value `3` assigned more than once\n     P = 3,\n-    //~^ NOTE first assignment of `3`\n+    //~^ NOTE `3` assigned here\n     X = 3,\n-    //~^ NOTE second assignment of `3`\n+    //~^ NOTE `3` assigned here\n     Y = 5\n }\n \n #[repr(u8)]\n enum EnumOverflowRepr {\n     //~^ ERROR discriminant value `1` assigned more than once\n     P = 257,\n-    //~^ NOTE first assignment of `1` (overflowed from `257`)\n+    //~^ NOTE `1` (overflowed from `257`) assigned here\n     X = 513,\n-    //~^ NOTE second assignment of `1` (overflowed from `513`)\n+    //~^ NOTE `1` (overflowed from `513`) assigned here\n }\n \n #[repr(i8)]\n enum NegDisEnum {\n     //~^ ERROR discriminant value `-1` assigned more than once\n     First = -1,\n-    //~^ NOTE first assignment of `-1`\n+    //~^ NOTE `-1` assigned here\n     Second = -2,\n-    //~^ NOTE assigned discriminant for `Last` was incremented from this discriminant\n+    //~^ NOTE discriminant for `Last` incremented from this startpoint (`Second` + 1 variant later => `Last` = -1)\n     Last,\n-    //~^ NOTE second assignment of `-1`\n+    //~^ NOTE `-1` assigned here\n+}\n+\n+#[repr(i32)]\n+enum MultipleDuplicates {\n+    //~^ ERROR discriminant value `0` assigned more than once\n+    V0,\n+    //~^ NOTE `0` assigned here\n+    V1 = 0,\n+    //~^ NOTE `0` assigned here\n+    V2,\n+    V3,\n+    V4 = 0,\n+    //~^ NOTE `0` assigned here\n+    V5 = -2,\n+    //~^ NOTE discriminant for `V7` incremented from this startpoint (`V5` + 2 variant later => `V7` = 0)\n+    V6,\n+    V7,\n+    //~^ NOTE `0` assigned here\n }\n \n fn main() {"}, {"sha": "d27861aca5fcdcc5432e22d7c9c58b8912dd352d", "filename": "src/test/ui/error-codes/E0081.stderr", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2/src%2Ftest%2Fui%2Ferror-codes%2FE0081.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2/src%2Ftest%2Fui%2Ferror-codes%2FE0081.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0081.stderr?ref=4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2", "patch": "@@ -5,10 +5,10 @@ LL | enum Enum {\n    | ^^^^^^^^^\n LL |\n LL |     P = 3,\n-   |         - first assignment of `3`\n+   |         - `3` assigned here\n LL |\n LL |     X = 3,\n-   |         - second assignment of `3`\n+   |         - `3` assigned here\n \n error[E0081]: discriminant value `1` assigned more than once\n   --> $DIR/E0081.rs:11:1\n@@ -17,10 +17,10 @@ LL | enum EnumOverflowRepr {\n    | ^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL |     P = 257,\n-   |         --- first assignment of `1` (overflowed from `257`)\n+   |         --- `1` (overflowed from `257`) assigned here\n LL |\n LL |     X = 513,\n-   |         --- second assignment of `1` (overflowed from `513`)\n+   |         --- `1` (overflowed from `513`) assigned here\n \n error[E0081]: discriminant value `-1` assigned more than once\n   --> $DIR/E0081.rs:20:1\n@@ -29,14 +29,35 @@ LL | enum NegDisEnum {\n    | ^^^^^^^^^^^^^^^\n LL |\n LL |     First = -1,\n-   |             -- first assignment of `-1`\n+   |             -- `-1` assigned here\n LL |\n LL |     Second = -2,\n-   |     ----------- assigned discriminant for `Last` was incremented from this discriminant\n+   |     ----------- discriminant for `Last` incremented from this startpoint (`Second` + 1 variant later => `Last` = -1)\n LL |\n LL |     Last,\n-   |     ---- second assignment of `-1`\n+   |     ---- `-1` assigned here\n \n-error: aborting due to 3 previous errors\n+error[E0081]: discriminant value `0` assigned more than once\n+  --> $DIR/E0081.rs:31:1\n+   |\n+LL | enum MultipleDuplicates {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL |     V0,\n+   |     -- `0` assigned here\n+LL |\n+LL |     V1 = 0,\n+   |          - `0` assigned here\n+...\n+LL |     V4 = 0,\n+   |          - `0` assigned here\n+LL |\n+LL |     V5 = -2,\n+   |     ------- discriminant for `V7` incremented from this startpoint (`V5` + 2 variant later => `V7` = 0)\n+...\n+LL |     V7,\n+   |     -- `0` assigned here\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0081`."}, {"sha": "565db2d0fcab82d44251853957b95b8c52b7a37a", "filename": "src/test/ui/issues/issue-15524.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5651759746e6eefa691f61522d19b46d07cf9244/src%2Ftest%2Fui%2Fissues%2Fissue-15524.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5651759746e6eefa691f61522d19b46d07cf9244/src%2Ftest%2Fui%2Fissues%2Fissue-15524.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15524.rs?ref=5651759746e6eefa691f61522d19b46d07cf9244", "patch": "@@ -1,16 +0,0 @@\n-const N: isize = 1;\n-\n-enum Foo {\n-    //~^ ERROR discriminant value `1` assigned more than once\n-    //~| ERROR discriminant value `1` assigned more than once\n-    //~| ERROR discriminant value `1` assigned more than once\n-    A = 1,\n-    B = 1,\n-    C = 0,\n-    D,\n-\n-    E = N,\n-\n-}\n-\n-fn main() {}"}, {"sha": "1195e0a346ddff0df37508d52559911c16a44426", "filename": "src/test/ui/issues/issue-15524.stderr", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5651759746e6eefa691f61522d19b46d07cf9244/src%2Ftest%2Fui%2Fissues%2Fissue-15524.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5651759746e6eefa691f61522d19b46d07cf9244/src%2Ftest%2Fui%2Fissues%2Fissue-15524.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15524.stderr?ref=5651759746e6eefa691f61522d19b46d07cf9244", "patch": "@@ -1,40 +0,0 @@\n-error[E0081]: discriminant value `1` assigned more than once\n-  --> $DIR/issue-15524.rs:3:1\n-   |\n-LL | enum Foo {\n-   | ^^^^^^^^\n-...\n-LL |     A = 1,\n-   |         - first assignment of `1`\n-LL |     B = 1,\n-   |         - second assignment of `1`\n-\n-error[E0081]: discriminant value `1` assigned more than once\n-  --> $DIR/issue-15524.rs:3:1\n-   |\n-LL | enum Foo {\n-   | ^^^^^^^^\n-...\n-LL |     A = 1,\n-   |         - first assignment of `1`\n-LL |     B = 1,\n-LL |     C = 0,\n-   |     ----- assigned discriminant for `D` was incremented from this discriminant\n-LL |     D,\n-   |     - second assignment of `1`\n-\n-error[E0081]: discriminant value `1` assigned more than once\n-  --> $DIR/issue-15524.rs:3:1\n-   |\n-LL | enum Foo {\n-   | ^^^^^^^^\n-...\n-LL |     A = 1,\n-   |         - first assignment of `1`\n-...\n-LL |     E = N,\n-   |         - second assignment of `1`\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0081`."}, {"sha": "4932cde0b18f4f78e8894615c026779a91c9b811", "filename": "src/test/ui/tag-variant-disr-dup.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2/src%2Ftest%2Fui%2Ftag-variant-disr-dup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2/src%2Ftest%2Fui%2Ftag-variant-disr-dup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftag-variant-disr-dup.stderr?ref=4ee2fe308bc68a0d93a86a09a1fd2506cc41e9b2", "patch": "@@ -5,9 +5,9 @@ LL | enum Color {\n    | ^^^^^^^^^^\n ...\n LL |     Black = 0x000000,\n-   |             -------- first assignment of `0`\n+   |             -------- `0` assigned here\n LL |     White = 0x000000,\n-   |             -------- second assignment of `0`\n+   |             -------- `0` assigned here\n \n error: aborting due to previous error\n "}]}