{"sha": "893497c93e4a68d99642843a5d46f0c9afeb98b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MzQ5N2M5M2U0YTY4ZDk5NjQyODQzYTVkNDZmMGM5YWZlYjk4YjM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-09T16:55:46Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-09T16:55:46Z"}, "message": "Infer the path of toolchain binaries from the linker path", "tree": {"sha": "aa6d835aa7f611a6e0520e6f23e94a91741b35ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa6d835aa7f611a6e0520e6f23e94a91741b35ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/893497c93e4a68d99642843a5d46f0c9afeb98b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/893497c93e4a68d99642843a5d46f0c9afeb98b3", "html_url": "https://github.com/rust-lang/rust/commit/893497c93e4a68d99642843a5d46f0c9afeb98b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/893497c93e4a68d99642843a5d46f0c9afeb98b3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "037d411bf44a9a7c70d41773e355b74155bfea3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/037d411bf44a9a7c70d41773e355b74155bfea3a", "html_url": "https://github.com/rust-lang/rust/commit/037d411bf44a9a7c70d41773e355b74155bfea3a"}], "stats": {"total": 127, "additions": 124, "deletions": 3}, "files": [{"sha": "6ae07a3bb7bfe2daa15cdc6393d74dc607ccb215", "filename": "src/archive.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/893497c93e4a68d99642843a5d46f0c9afeb98b3/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893497c93e4a68d99642843a5d46f0c9afeb98b3/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=893497c93e4a68d99642843a5d46f0c9afeb98b3", "patch": "@@ -220,8 +220,10 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         std::mem::drop(builder);\n \n         if self.update_symbols {\n+            let ranlib = crate::toolchain::get_toolchain_binary(self.config.sess, \"ranlib\");\n+\n             // Run ranlib to be able to link the archive\n-            let status = std::process::Command::new(\"ranlib\")\n+            let status = std::process::Command::new(ranlib)\n                 .arg(self.config.dst)\n                 .status()\n                 .expect(\"Couldn't run ranlib\");"}, {"sha": "4128148ed363d809da9074226d6a9e0284053959", "filename": "src/driver/aot.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/893497c93e4a68d99642843a5d46f0c9afeb98b3/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893497c93e4a68d99642843a5d46f0c9afeb98b3/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=893497c93e4a68d99642843a5d46f0c9afeb98b3", "patch": "@@ -277,6 +277,9 @@ fn codegen_global_asm(tcx: TyCtxt<'_>, cgu_name: &str, global_asm: &str) {\n         return;\n     }\n \n+    let assembler = crate::toolchain::get_toolchain_binary(tcx.sess, \"as\");\n+    let linker = crate::toolchain::get_toolchain_binary(tcx.sess, \"ld\");\n+\n     // Remove all LLVM style comments\n     let global_asm = global_asm.lines().map(|line| {\n         if let Some(index) = line.find(\"//\") {\n@@ -292,7 +295,7 @@ fn codegen_global_asm(tcx: TyCtxt<'_>, cgu_name: &str, global_asm: &str) {\n \n     // Assemble `global_asm`\n     let global_asm_object_file = add_file_stem_postfix(output_object_file.clone(), \".asm\");\n-    let mut child = Command::new(\"as\")\n+    let mut child = Command::new(assembler)\n         .arg(\"-o\").arg(&global_asm_object_file)\n         .stdin(Stdio::piped())\n         .spawn()\n@@ -306,7 +309,7 @@ fn codegen_global_asm(tcx: TyCtxt<'_>, cgu_name: &str, global_asm: &str) {\n     // Link the global asm and main object file together\n     let main_object_file = add_file_stem_postfix(output_object_file.clone(), \".main\");\n     std::fs::rename(&output_object_file, &main_object_file).unwrap();\n-    let status = Command::new(\"ld\")\n+    let status = Command::new(linker)\n         .arg(\"-r\") // Create a new object file\n         .arg(\"-o\").arg(output_object_file)\n         .arg(&main_object_file)"}, {"sha": "fe1f79988bef500a0804bc5da22c78967d0caa2a", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/893497c93e4a68d99642843a5d46f0c9afeb98b3/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893497c93e4a68d99642843a5d46f0c9afeb98b3/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=893497c93e4a68d99642843a5d46f0c9afeb98b3", "patch": "@@ -64,6 +64,7 @@ mod optimize;\n mod pointer;\n mod pretty_clif;\n mod target_features_whitelist;\n+mod toolchain;\n mod trap;\n mod unsize;\n mod value_and_place;"}, {"sha": "2a31b8834384b97896e86ac11280478f9373b6ac", "filename": "src/toolchain.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/893497c93e4a68d99642843a5d46f0c9afeb98b3/src%2Ftoolchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893497c93e4a68d99642843a5d46f0c9afeb98b3/src%2Ftoolchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftoolchain.rs?ref=893497c93e4a68d99642843a5d46f0c9afeb98b3", "patch": "@@ -0,0 +1,115 @@\n+use std::path::PathBuf;\n+\n+use rustc_middle::bug;\n+use rustc_session::Session;\n+use rustc_target::spec::LinkerFlavor;\n+\n+/// Tries to infer the path of a binary for the target toolchain from the linker name.\n+pub(crate) fn get_toolchain_binary(sess: &Session, tool: &str) -> PathBuf {\n+    let (mut linker, _linker_flavor) = linker_and_flavor(sess);\n+    let linker_file_name = linker.file_name().and_then(|name| name.to_str()).unwrap_or_else(|| {\n+        sess.fatal(\"couldn't extract file name from specified linker\")\n+    });\n+\n+    if linker_file_name == \"ld.lld\" {\n+        if tool != \"ld\" {\n+            linker.set_file_name(tool)\n+        }\n+    } else {\n+        let tool_file_name = linker_file_name\n+            .replace(\"ld\", tool)\n+            .replace(\"gcc\", tool)\n+            .replace(\"clang\", tool)\n+            .replace(\"cc\", tool);\n+\n+        linker.set_file_name(tool_file_name)\n+    }\n+\n+    linker\n+}\n+\n+// Adapted from https://github.com/rust-lang/rust/blob/5db778affee7c6600c8e7a177c48282dab3f6292/src/librustc_codegen_ssa/back/link.rs#L848-L931\n+fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n+    fn infer_from(\n+        sess: &Session,\n+        linker: Option<PathBuf>,\n+        flavor: Option<LinkerFlavor>,\n+    ) -> Option<(PathBuf, LinkerFlavor)> {\n+        match (linker, flavor) {\n+            (Some(linker), Some(flavor)) => Some((linker, flavor)),\n+            // only the linker flavor is known; use the default linker for the selected flavor\n+            (None, Some(flavor)) => Some((\n+                PathBuf::from(match flavor {\n+                    LinkerFlavor::Em => {\n+                        if cfg!(windows) {\n+                            \"emcc.bat\"\n+                        } else {\n+                            \"emcc\"\n+                        }\n+                    }\n+                    LinkerFlavor::Gcc => {\n+                        if cfg!(any(target_os = \"solaris\", target_os = \"illumos\")) {\n+                            // On historical Solaris systems, \"cc\" may have\n+                            // been Sun Studio, which is not flag-compatible\n+                            // with \"gcc\".  This history casts a long shadow,\n+                            // and many modern illumos distributions today\n+                            // ship GCC as \"gcc\" without also making it\n+                            // available as \"cc\".\n+                            \"gcc\"\n+                        } else {\n+                            \"cc\"\n+                        }\n+                    }\n+                    LinkerFlavor::Ld => \"ld\",\n+                    LinkerFlavor::Msvc => \"link.exe\",\n+                    LinkerFlavor::Lld(_) => \"lld\",\n+                    LinkerFlavor::PtxLinker => \"rust-ptx-linker\",\n+                }),\n+                flavor,\n+            )),\n+            (Some(linker), None) => {\n+                let stem = linker.file_stem().and_then(|stem| stem.to_str()).unwrap_or_else(|| {\n+                    sess.fatal(\"couldn't extract file stem from specified linker\")\n+                });\n+\n+                let flavor = if stem == \"emcc\" {\n+                    LinkerFlavor::Em\n+                } else if stem == \"gcc\"\n+                    || stem.ends_with(\"-gcc\")\n+                    || stem == \"clang\"\n+                    || stem.ends_with(\"-clang\")\n+                {\n+                    LinkerFlavor::Gcc\n+                } else if stem == \"ld\" || stem == \"ld.lld\" || stem.ends_with(\"-ld\") {\n+                    LinkerFlavor::Ld\n+                } else if stem == \"link\" || stem == \"lld-link\" {\n+                    LinkerFlavor::Msvc\n+                } else if stem == \"lld\" || stem == \"rust-lld\" {\n+                    LinkerFlavor::Lld(sess.target.target.options.lld_flavor)\n+                } else {\n+                    // fall back to the value in the target spec\n+                    sess.target.target.linker_flavor\n+                };\n+\n+                Some((linker, flavor))\n+            }\n+            (None, None) => None,\n+        }\n+    }\n+\n+    // linker and linker flavor specified via command line have precedence over what the target\n+    // specification specifies\n+    if let Some(ret) = infer_from(sess, sess.opts.cg.linker.clone(), sess.opts.cg.linker_flavor) {\n+        return ret;\n+    }\n+\n+    if let Some(ret) = infer_from(\n+        sess,\n+        sess.target.target.options.linker.clone().map(PathBuf::from),\n+        Some(sess.target.target.linker_flavor),\n+    ) {\n+        return ret;\n+    }\n+\n+    bug!(\"Not enough information provided to determine how to invoke the linker\");\n+}"}]}