{"sha": "6645ca1a85efcc2c2cc628fe0b34255bc1e56ec7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NDVjYTFhODVlZmNjMmMyY2M2MjhmZTBiMzQyNTViYzFlNTZlYzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-26T07:19:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-26T07:19:22Z"}, "message": "Auto merge of #28631 - ranma42:robust-panic, r=alexcrichton\n\nThis is mainly to avoid infinite recursion and make debugging more convenient in the anomalous case in which `on_panic` panics.\r\nI encountered such issues while changing libstd to debug/fix part of #28129.\r\n\r\nWhile writing this I was wondering about which functions belong to `panicking` and which to `unwind`.\r\nI placed them in this way mostly because of convenience, but I would strongly appreciate guidance.", "tree": {"sha": "6b269226d00b491e604b3dcc84c8ec11dc8f499f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b269226d00b491e604b3dcc84c8ec11dc8f499f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6645ca1a85efcc2c2cc628fe0b34255bc1e56ec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6645ca1a85efcc2c2cc628fe0b34255bc1e56ec7", "html_url": "https://github.com/rust-lang/rust/commit/6645ca1a85efcc2c2cc628fe0b34255bc1e56ec7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6645ca1a85efcc2c2cc628fe0b34255bc1e56ec7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ebfd853c2d5c0667ec1aee3014349242f270abe", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ebfd853c2d5c0667ec1aee3014349242f270abe", "html_url": "https://github.com/rust-lang/rust/commit/7ebfd853c2d5c0667ec1aee3014349242f270abe"}, {"sha": "54c0231b14a71a46e6607255d509457e0df0b8be", "url": "https://api.github.com/repos/rust-lang/rust/commits/54c0231b14a71a46e6607255d509457e0df0b8be", "html_url": "https://github.com/rust-lang/rust/commit/54c0231b14a71a46e6607255d509457e0df0b8be"}], "stats": {"total": 95, "additions": 54, "deletions": 41}, "files": [{"sha": "2b2af350c992cc874737ccfe547e65ef9f7ffc2b", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 50, "deletions": 23, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/6645ca1a85efcc2c2cc628fe0b34255bc1e56ec7/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6645ca1a85efcc2c2cc628fe0b34255bc1e56ec7/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=6645ca1a85efcc2c2cc628fe0b34255bc1e56ec7", "patch": "@@ -12,19 +12,24 @@ use prelude::v1::*;\n use io::prelude::*;\n \n use any::Any;\n+use cell::Cell;\n use cell::RefCell;\n+use intrinsics;\n use sys::stdio::Stderr;\n use sys_common::backtrace;\n use sys_common::thread_info;\n-use sys_common::unwind;\n+use sys_common::util;\n+\n+thread_local! { pub static PANIC_COUNT: Cell<usize> = Cell::new(0) }\n \n thread_local! {\n     pub static LOCAL_STDERR: RefCell<Option<Box<Write + Send>>> = {\n         RefCell::new(None)\n     }\n }\n \n-pub fn on_panic(obj: &(Any+Send), file: &'static str, line: u32) {\n+fn log_panic(obj: &(Any+Send), file: &'static str, line: u32,\n+             log_backtrace: bool) {\n     let msg = match obj.downcast_ref::<&'static str>() {\n         Some(s) => *s,\n         None => match obj.downcast_ref::<String>() {\n@@ -35,37 +40,59 @@ pub fn on_panic(obj: &(Any+Send), file: &'static str, line: u32) {\n     let mut err = Stderr::new().ok();\n     let thread = thread_info::current_thread();\n     let name = thread.as_ref().and_then(|t| t.name()).unwrap_or(\"<unnamed>\");\n+\n+    let write = |err: &mut ::io::Write| {\n+        let _ = writeln!(err, \"thread '{}' panicked at '{}', {}:{}\",\n+                         name, msg, file, line);\n+        if log_backtrace {\n+            let _ = backtrace::write(err);\n+        }\n+    };\n+\n     let prev = LOCAL_STDERR.with(|s| s.borrow_mut().take());\n     match (prev, err.as_mut()) {\n         (Some(mut stderr), _) => {\n-            // FIXME: what to do when the thread printing panics?\n-            let _ = writeln!(stderr,\n-                             \"thread '{}' panicked at '{}', {}:{}\\n\",\n-                             name, msg, file, line);\n-            if backtrace::log_enabled() {\n-                let _ = backtrace::write(&mut *stderr);\n-            }\n+            write(&mut *stderr);\n             let mut s = Some(stderr);\n             LOCAL_STDERR.with(|slot| {\n                 *slot.borrow_mut() = s.take();\n             });\n         }\n-        (None, Some(ref mut err)) => {\n-            let _ = writeln!(err, \"thread '{}' panicked at '{}', {}:{}\",\n-                             name, msg, file, line);\n-            if backtrace::log_enabled() {\n-                let _ = backtrace::write(err);\n-            }\n-        }\n+        (None, Some(ref mut err)) => { write(err) }\n         _ => {}\n     }\n+}\n \n-    // If this is a double panic, make sure that we printed a backtrace\n-    // for this panic.\n-    match err {\n-        Some(ref mut err) if unwind::panicking() && !backtrace::log_enabled() => {\n-            let _ = backtrace::write(err);\n-        }\n-        _ => {}\n+pub fn on_panic(obj: &(Any+Send), file: &'static str, line: u32) {\n+    let panics = PANIC_COUNT.with(|s| {\n+        let count = s.get() + 1;\n+        s.set(count);\n+        count\n+    });\n+\n+    // If this is the third nested call, on_panic triggered the last panic,\n+    // otherwise the double-panic check would have aborted the process.\n+    // Even if it is likely that on_panic was unable to log the backtrace,\n+    // abort immediately to avoid infinite recursion, so that attaching a\n+    // debugger provides a useable stacktrace.\n+    if panics >= 3 {\n+        util::dumb_print(format_args!(\"thread panicked while processing \\\n+                                       panic. aborting.\"));\n+        unsafe { intrinsics::abort() }\n+    }\n+\n+    // If this is a double panic, make sure that we print a backtrace\n+    // for this panic. Otherwise only print it if logging is enabled.\n+    let log_backtrace = panics >= 2 || backtrace::log_enabled();\n+    log_panic(obj, file, line, log_backtrace);\n+\n+    if panics >= 2 {\n+        // If a thread panics while it's already unwinding then we\n+        // have limited options. Currently our preference is to\n+        // just abort. In the future we may consider resuming\n+        // unwinding or otherwise exiting the thread cleanly.\n+        util::dumb_print(format_args!(\"thread panicked while panicking. \\\n+                                       aborting.\"));\n+        unsafe { intrinsics::abort() }\n     }\n }"}, {"sha": "c06d7886a757b088594cb017c4e37b3db9b7514f", "filename": "src/libstd/sys/common/unwind/mod.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6645ca1a85efcc2c2cc628fe0b34255bc1e56ec7/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6645ca1a85efcc2c2cc628fe0b34255bc1e56ec7/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs?ref=6645ca1a85efcc2c2cc628fe0b34255bc1e56ec7", "patch": "@@ -64,9 +64,8 @@ use prelude::v1::*;\n \n use any::Any;\n use boxed;\n-use cell::Cell;\n use cmp;\n-use panicking;\n+use panicking::{self,PANIC_COUNT};\n use fmt;\n use intrinsics;\n use mem;\n@@ -92,8 +91,6 @@ pub mod imp;\n #[path = \"gcc.rs\"] #[doc(hidden)]\n pub mod imp;\n \n-thread_local! { static PANICKING: Cell<bool> = Cell::new(false) }\n-\n /// Invoke a closure, capturing the cause of panic if one occurs.\n ///\n /// This function will return `Ok(())` if the closure did not panic, and will\n@@ -131,9 +128,9 @@ pub unsafe fn try<F: FnOnce()>(f: F) -> Result<(), Box<Any + Send>> {\n     // care of exposing correctly.\n     unsafe fn inner_try(f: fn(*mut u8), data: *mut u8)\n                         -> Result<(), Box<Any + Send>> {\n-        PANICKING.with(|s| {\n+        PANIC_COUNT.with(|s| {\n             let prev = s.get();\n-            s.set(false);\n+            s.set(0);\n             let ep = intrinsics::try(f, data);\n             s.set(prev);\n             if ep.is_null() {\n@@ -161,7 +158,7 @@ pub unsafe fn try<F: FnOnce()>(f: F) -> Result<(), Box<Any + Send>> {\n \n /// Determines whether the current thread is unwinding because of panic.\n pub fn panicking() -> bool {\n-    PANICKING.with(|s| s.get())\n+    PANIC_COUNT.with(|s| s.get() != 0)\n }\n \n // An uninlined, unmangled function upon which to slap yer breakpoints\n@@ -234,17 +231,6 @@ fn begin_unwind_inner(msg: Box<Any + Send>,\n     // First, invoke the default panic handler.\n     panicking::on_panic(&*msg, file, line);\n \n-    if panicking() {\n-        // If a thread panics while it's already unwinding then we\n-        // have limited options. Currently our preference is to\n-        // just abort. In the future we may consider resuming\n-        // unwinding or otherwise exiting the thread cleanly.\n-        super::util::dumb_print(format_args!(\"thread panicked while panicking. \\\n-                                              aborting.\"));\n-        unsafe { intrinsics::abort() }\n-    }\n-    PANICKING.with(|s| s.set(true));\n-\n     // Finally, perform the unwinding.\n     rust_panic(msg);\n }"}]}