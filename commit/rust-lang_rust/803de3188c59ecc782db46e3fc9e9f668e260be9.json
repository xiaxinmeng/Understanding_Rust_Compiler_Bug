{"sha": "803de3188c59ecc782db46e3fc9e9f668e260be9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwM2RlMzE4OGM1OWVjYzc4MmRiNDZlM2ZjOWU5ZjY2OGUyNjBiZTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-07T18:41:24Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-18T14:08:25Z"}, "message": "submod_path: use id.span", "tree": {"sha": "866e9501e9da160235cd51dde25b9d272740c0a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/866e9501e9da160235cd51dde25b9d272740c0a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/803de3188c59ecc782db46e3fc9e9f668e260be9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/803de3188c59ecc782db46e3fc9e9f668e260be9", "html_url": "https://github.com/rust-lang/rust/commit/803de3188c59ecc782db46e3fc9e9f668e260be9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/803de3188c59ecc782db46e3fc9e9f668e260be9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2db5d49d4791723b5335d5b66a0e2c304bf37d4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2db5d49d4791723b5335d5b66a0e2c304bf37d4c", "html_url": "https://github.com/rust-lang/rust/commit/2db5d49d4791723b5335d5b66a0e2c304bf37d4c"}], "stats": {"total": 27, "additions": 11, "deletions": 16}, "files": [{"sha": "4538799919644ff05ab1a326bd6886e2142a4391", "filename": "src/librustc_parse/parser/module.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/803de3188c59ecc782db46e3fc9e9f668e260be9/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/803de3188c59ecc782db46e3fc9e9f668e260be9/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmodule.rs?ref=803de3188c59ecc782db46e3fc9e9f668e260be9", "patch": "@@ -45,14 +45,13 @@ impl<'a> Parser<'a> {\n     pub(super) fn parse_item_mod(&mut self, attrs: &mut Vec<Attribute>) -> PResult<'a, ItemInfo> {\n         let in_cfg = crate::config::process_configure_mod(self.sess, self.cfg_mods, attrs);\n \n-        let id_span = self.token.span;\n         let id = self.parse_ident()?;\n         let (module, mut inner_attrs) = if self.eat(&token::Semi) {\n             if in_cfg && self.recurse_into_file_modules {\n                 // This mod is in an external file. Let's go get it!\n                 let ModulePathSuccess { path, directory_ownership } =\n-                    self.submod_path(id, &attrs, id_span)?;\n-                self.eval_src_mod(path, directory_ownership, id.to_string(), id_span)?\n+                    self.submod_path(id, &attrs)?;\n+                self.eval_src_mod(path, directory_ownership, id.to_string(), id.span)?\n             } else {\n                 (ast::Mod { inner: DUMMY_SP, items: Vec::new(), inline: false }, Vec::new())\n             }\n@@ -99,7 +98,6 @@ impl<'a> Parser<'a> {\n         &mut self,\n         id: ast::Ident,\n         outer_attrs: &[Attribute],\n-        id_sp: Span,\n     ) -> PResult<'a, ModulePathSuccess> {\n         if let Some(path) = Parser::submod_path_from_attr(outer_attrs, &self.directory.path) {\n             let directory_ownership = match path.file_name().and_then(|s| s.to_str()) {\n@@ -125,10 +123,10 @@ impl<'a> Parser<'a> {\n \n         match self.directory.ownership {\n             DirectoryOwnership::Owned { .. } => {\n-                paths.result.map_err(|err| self.span_fatal_err(id_sp, err))\n+                paths.result.map_err(|err| self.span_fatal_err(id.span, err))\n             }\n-            DirectoryOwnership::UnownedViaBlock => self.error_decl_mod_in_block(id_sp, paths),\n-            DirectoryOwnership::UnownedViaMod => self.error_cannot_declare_mod_here(id_sp, paths),\n+            DirectoryOwnership::UnownedViaBlock => self.error_decl_mod_in_block(id.span, paths),\n+            DirectoryOwnership::UnownedViaMod => self.error_cannot_declare_mod_here(id.span, paths),\n         }\n     }\n "}, {"sha": "1066a2ba71209bc04d26d2fe9f13b641ca07f236", "filename": "src/test/ui/directory_ownership/macro-expanded-mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/803de3188c59ecc782db46e3fc9e9f668e260be9/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/803de3188c59ecc782db46e3fc9e9f668e260be9/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.rs?ref=803de3188c59ecc782db46e3fc9e9f668e260be9", "patch": "@@ -1,13 +1,15 @@\n // Test that macro-expanded non-inline modules behave correctly\n \n macro_rules! mod_decl {\n-    ($i:ident) => { mod $i; } //~ ERROR Cannot declare a non-inline module inside a block\n+    ($i:ident) => {\n+        mod $i;\n+    };\n }\n \n mod macro_expanded_mod_helper {\n     mod_decl!(foo); // This should search in the folder `macro_expanded_mod_helper`\n }\n \n fn main() {\n-    mod_decl!(foo);\n+    mod_decl!(foo); //~ ERROR Cannot declare a non-inline module inside a block\n }"}, {"sha": "d9d8a8ffed75145a0bd53ed0685d0aa1395800c5", "filename": "src/test/ui/directory_ownership/macro-expanded-mod.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/803de3188c59ecc782db46e3fc9e9f668e260be9/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/803de3188c59ecc782db46e3fc9e9f668e260be9/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.stderr?ref=803de3188c59ecc782db46e3fc9e9f668e260be9", "patch": "@@ -1,13 +1,8 @@\n error: Cannot declare a non-inline module inside a block unless it has a path attribute\n-  --> $DIR/macro-expanded-mod.rs:4:25\n+  --> $DIR/macro-expanded-mod.rs:14:15\n    |\n-LL |     ($i:ident) => { mod $i; }\n-   |                         ^^\n-...\n LL |     mod_decl!(foo);\n-   |     --------------- in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |               ^^^\n \n error: aborting due to previous error\n "}]}