{"sha": "ef6a97ddbed10ac3483c639fb27e7771fd155ebc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNmE5N2RkYmVkMTBhYzM0ODNjNjM5ZmIyN2U3NzcxZmQxNTVlYmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-11T07:36:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-11T07:36:07Z"}, "message": "auto merge of #9013 : alexcrichton/rust/generated-unsafe-blocks, r=sanxiyn\n\nThis way syntax extensions can generate unsafe blocks without worrying about them generating unnecessary unsafe warnings. Perhaps a special keyword could be added to be used in macros, but I don't think that's the best solution.\r\n\r\nCurrently if you use `format!` and friends in an `unsafe` block you're guaranteed to get some unused-unsafe warnings which is unfortunate. We normally do want these warnings, but I'm ok ignoring them in the case of compiler-generated unsafe blocks. I tried to do this in the least intrusive way possible, but others may have better ideas about how to do this.", "tree": {"sha": "0fe567f92d372b3d756a9e935ca35a82fee514bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fe567f92d372b3d756a9e935ca35a82fee514bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef6a97ddbed10ac3483c639fb27e7771fd155ebc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6a97ddbed10ac3483c639fb27e7771fd155ebc", "html_url": "https://github.com/rust-lang/rust/commit/ef6a97ddbed10ac3483c639fb27e7771fd155ebc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef6a97ddbed10ac3483c639fb27e7771fd155ebc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba9fa89bfb4aae53db93e9ecac31807af96356fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba9fa89bfb4aae53db93e9ecac31807af96356fc", "html_url": "https://github.com/rust-lang/rust/commit/ba9fa89bfb4aae53db93e9ecac31807af96356fc"}, {"sha": "11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb", "html_url": "https://github.com/rust-lang/rust/commit/11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "9c02f544fbaeb11e41a0c2726da6a188c32df1d0", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef6a97ddbed10ac3483c639fb27e7771fd155ebc/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6a97ddbed10ac3483c639fb27e7771fd155ebc/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=ef6a97ddbed10ac3483c639fb27e7771fd155ebc", "patch": "@@ -102,8 +102,10 @@ impl Visitor<()> for EffectCheckVisitor {\n     fn visit_block(&mut self, block:&Block, _:()) {\n \n             let old_unsafe_context = self.context.unsafe_context;\n-            if block.rules == ast::UnsafeBlock &&\n-                    self.context.unsafe_context == SafeContext {\n+            let is_unsafe = match block.rules {\n+                ast::UnsafeBlock(*) => true, ast::DefaultBlock => false\n+            };\n+            if is_unsafe && self.context.unsafe_context == SafeContext {\n                 self.context.unsafe_context = UnsafeBlock(block.id)\n             }\n "}, {"sha": "da181ff2eb6b60a1e1718e65e9bfe8887129dd42", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef6a97ddbed10ac3483c639fb27e7771fd155ebc/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6a97ddbed10ac3483c639fb27e7771fd155ebc/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=ef6a97ddbed10ac3483c639fb27e7771fd155ebc", "patch": "@@ -1131,8 +1131,11 @@ impl Visitor<@mut Context> for UnusedUnsafeLintVisitor {\n     fn visit_expr(&mut self, e:@ast::Expr, cx:@mut Context) {\n \n             match e.node {\n-                ast::ExprBlock(ref blk) if blk.rules == ast::UnsafeBlock => {\n-                    if !cx.tcx.used_unsafe.contains(&blk.id) {\n+                // Don't warn about generated blocks, that'll just pollute the\n+                // output.\n+                ast::ExprBlock(ref blk) => {\n+                    if blk.rules == ast::UnsafeBlock(ast::UserProvided) &&\n+                       !cx.tcx.used_unsafe.contains(&blk.id) {\n                         cx.span_lint(unused_unsafe, blk.span,\n                                      \"unnecessary `unsafe` block\");\n                     }"}, {"sha": "0c0326e9317e788e77cb1e48ec7c979c7c898d79", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef6a97ddbed10ac3483c639fb27e7771fd155ebc/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6a97ddbed10ac3483c639fb27e7771fd155ebc/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=ef6a97ddbed10ac3483c639fb27e7771fd155ebc", "patch": "@@ -200,7 +200,7 @@ impl PurityState {\n \n             purity => {\n                 let (purity, def) = match blk.rules {\n-                    ast::UnsafeBlock => (ast::unsafe_fn, blk.id),\n+                    ast::UnsafeBlock(*) => (ast::unsafe_fn, blk.id),\n                     ast::DefaultBlock => (purity, self.def),\n                 };\n                 PurityState{ def: def,"}, {"sha": "ef2e557b6ea6dcd28b336f9435d72fedcd26a9e7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef6a97ddbed10ac3483c639fb27e7771fd155ebc/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6a97ddbed10ac3483c639fb27e7771fd155ebc/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ef6a97ddbed10ac3483c639fb27e7771fd155ebc", "patch": "@@ -479,7 +479,13 @@ pub struct Field {\n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub enum BlockCheckMode {\n     DefaultBlock,\n-    UnsafeBlock,\n+    UnsafeBlock(UnsafeSource),\n+}\n+\n+#[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n+pub enum UnsafeSource {\n+    CompilerGenerated,\n+    UserProvided,\n }\n \n #[deriving(Clone, Eq, Encodable, Decodable,IterBytes)]"}, {"sha": "486069db4f0c4f4f85809b379c0b2c57b969b537", "filename": "src/libsyntax/ext/ifmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef6a97ddbed10ac3483c639fb27e7771fd155ebc/src%2Flibsyntax%2Fext%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6a97ddbed10ac3483c639fb27e7771fd155ebc/src%2Flibsyntax%2Fext%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fifmt.rs?ref=ef6a97ddbed10ac3483c639fb27e7771fd155ebc", "patch": "@@ -632,7 +632,7 @@ impl Context {\n            stmts: ~[],\n            expr: Some(result),\n            id: ast::DUMMY_NODE_ID,\n-           rules: ast::UnsafeBlock,\n+           rules: ast::UnsafeBlock(ast::CompilerGenerated),\n            span: self.fmtsp,\n         });\n "}, {"sha": "b5772a9eede2de0952644ac42a37da3be7bb491c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef6a97ddbed10ac3483c639fb27e7771fd155ebc/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6a97ddbed10ac3483c639fb27e7771fd155ebc/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ef6a97ddbed10ac3483c639fb27e7771fd155ebc", "patch": "@@ -1792,7 +1792,7 @@ impl Parser {\n         } else if self.eat_keyword(keywords::Match) {\n             return self.parse_match_expr();\n         } else if self.eat_keyword(keywords::Unsafe) {\n-            return self.parse_block_expr(lo, UnsafeBlock);\n+            return self.parse_block_expr(lo, UnsafeBlock(ast::UserProvided));\n         } else if *self.token == token::LBRACKET {\n             self.bump();\n             let mutbl = self.parse_mutability();"}, {"sha": "9b9b157c9d85ba3983ae8991d8dabb31481e7712", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef6a97ddbed10ac3483c639fb27e7771fd155ebc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6a97ddbed10ac3483c639fb27e7771fd155ebc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=ef6a97ddbed10ac3483c639fb27e7771fd155ebc", "patch": "@@ -951,7 +951,7 @@ pub fn print_possibly_embedded_block_(s: @ps,\n                                       attrs: &[ast::Attribute],\n                                       close_box: bool) {\n     match blk.rules {\n-      ast::UnsafeBlock => word_space(s, \"unsafe\"),\n+      ast::UnsafeBlock(*) => word_space(s, \"unsafe\"),\n       ast::DefaultBlock => ()\n     }\n     maybe_print_comment(s, blk.span.lo);"}, {"sha": "ab66bfc101110346f444d9eaa58578943ccb8262", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ef6a97ddbed10ac3483c639fb27e7771fd155ebc/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6a97ddbed10ac3483c639fb27e7771fd155ebc/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=ef6a97ddbed10ac3483c639fb27e7771fd155ebc", "patch": "@@ -10,6 +10,8 @@\n \n // xfail-fast: check-fast screws up repr paths\n \n+#[deny(warnings)];\n+\n use std::fmt;\n \n struct A;\n@@ -226,6 +228,13 @@ pub fn main() {\n     let a = ~3;\n     format!(\"{:?}\", a);\n     format!(\"{:?}\", a);\n+\n+    // make sure that format! doesn't cause spurious unused-unsafe warnings when\n+    // it's inside of an outer unsafe block\n+    unsafe {\n+        let a: int = ::std::cast::transmute(3u);\n+        format!(\"{}\", a);\n+    }\n }\n \n // Basic test to make sure that we can invoke the `write!` macro with an"}]}