{"sha": "5e1ae1d7aa9d83406de4881be37b39ed457e3bda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMWFlMWQ3YWE5ZDgzNDA2ZGU0ODgxYmUzN2IzOWVkNDU3ZTNiZGE=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-01-29T01:53:15Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-01-29T01:53:15Z"}, "message": "test_utils: move flush!() to its usage as per conversation with @matklad", "tree": {"sha": "aca4489386365b84485dcbcb174955e8cb39bc20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aca4489386365b84485dcbcb174955e8cb39bc20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e1ae1d7aa9d83406de4881be37b39ed457e3bda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e1ae1d7aa9d83406de4881be37b39ed457e3bda", "html_url": "https://github.com/rust-lang/rust/commit/5e1ae1d7aa9d83406de4881be37b39ed457e3bda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e1ae1d7aa9d83406de4881be37b39ed457e3bda/comments", "author": null, "committer": null, "parents": [{"sha": "d3472e8ae4a0dc1fbf8616a3a626ee9a9f557058", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3472e8ae4a0dc1fbf8616a3a626ee9a9f557058", "html_url": "https://github.com/rust-lang/rust/commit/d3472e8ae4a0dc1fbf8616a3a626ee9a9f557058"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "265fcf8da088fa2f13c005af6d7e82a26d5b4b8d", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5e1ae1d7aa9d83406de4881be37b39ed457e3bda/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1ae1d7aa9d83406de4881be37b39ed457e3bda/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=5e1ae1d7aa9d83406de4881be37b39ed457e3bda", "patch": "@@ -169,19 +169,6 @@ pub struct FixtureEntry {\n ///  // - other meta\n ///  ```\n pub fn parse_fixture(fixture: &str) -> Vec<FixtureEntry> {\n-    let mut res = Vec::new();\n-    let mut buf = String::new();\n-    let mut meta: Option<&str> = None;\n-\n-    macro_rules! flush {\n-        () => {\n-            if let Some(meta) = meta {\n-                res.push(FixtureEntry { meta: meta.to_string(), text: buf.clone() });\n-                buf.clear();\n-            }\n-        };\n-    };\n-\n     let margin = fixture\n         .lines()\n         .filter(|it| it.trim_start().starts_with(\"//-\"))\n@@ -201,6 +188,19 @@ pub fn parse_fixture(fixture: &str) -> Vec<FixtureEntry> {\n             }\n         });\n \n+    let mut res = Vec::new();\n+    let mut buf = String::new();\n+    let mut meta: Option<&str> = None;\n+\n+    macro_rules! flush {\n+        () => {\n+            if let Some(meta) = meta {\n+                res.push(FixtureEntry { meta: meta.to_string(), text: buf.clone() });\n+                buf.clear();\n+            }\n+        };\n+    };\n+\n     for line in lines {\n         if line.starts_with(\"//-\") {\n             flush!();"}]}