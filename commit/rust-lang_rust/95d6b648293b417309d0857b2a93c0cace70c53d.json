{"sha": "95d6b648293b417309d0857b2a93c0cace70c53d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZDZiNjQ4MjkzYjQxNzMwOWQwODU3YjJhOTNjMGNhY2U3MGM1M2Q=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-21T02:11:15Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-21T02:14:09Z"}, "message": "Replace WriteMode with EmitMode and backup bool", "tree": {"sha": "fd59e21035f40e7ff2207f407748472ea9217e40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd59e21035f40e7ff2207f407748472ea9217e40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95d6b648293b417309d0857b2a93c0cace70c53d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95d6b648293b417309d0857b2a93c0cace70c53d", "html_url": "https://github.com/rust-lang/rust/commit/95d6b648293b417309d0857b2a93c0cace70c53d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95d6b648293b417309d0857b2a93c0cace70c53d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "843c12601a63961c185c479e258313e568f3a7d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/843c12601a63961c185c479e258313e568f3a7d8", "html_url": "https://github.com/rust-lang/rust/commit/843c12601a63961c185c479e258313e568f3a7d8"}], "stats": {"total": 168, "additions": 87, "deletions": 81}, "files": [{"sha": "6c4e7dc77604d8802dfdde3263278d0dc70bafb8", "filename": "Configurations.md", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/95d6b648293b417309d0857b2a93c0cace70c53d/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/95d6b648293b417309d0857b2a93c0cace70c53d/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=95d6b648293b417309d0857b2a93c0cace70c53d", "patch": "@@ -1885,13 +1885,6 @@ fn main() {\n \n See also: [`match_block_trailing_comma`](#match_block_trailing_comma).\n \n-## `write_mode`\n-\n-What Write Mode to use when none is supplied: Replace, Overwrite, Display, Diff, Coverage\n-\n-- **Default value**: `\"Overwrite\"`\n-- **Possible values**: `\"Checkstyle\"`, `\"Coverage\"`, `\"Diff\"`, `\"Display\"`, `\"Overwrite\"`, `\"Plain\"`, `\"Replace\"`\n-- **Stable**: No\n \n ## `blank_lines_upper_bound`\n \n@@ -2071,3 +2064,11 @@ ignore [\n     \"examples\",\n ]\n ```\n+\n+## `emit_mode`\n+\n+Internal option\n+\n+## `make_backup`\n+\n+Internal option, use `--backup`"}, {"sha": "19b93ca0d505b5719335a94b674b3f757d11e17f", "filename": "src/bin/main.rs", "status": "modified", "additions": 43, "deletions": 33, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/95d6b648293b417309d0857b2a93c0cace70c53d/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d6b648293b417309d0857b2a93c0cace70c53d/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=95d6b648293b417309d0857b2a93c0cace70c53d", "patch": "@@ -28,18 +28,18 @@ use getopts::{Matches, Options};\n \n use rustfmt::{\n     emit_post_matter, emit_pre_matter, format_and_emit_report, load_config, CliOptions, Color,\n-    Config, ErrorKind, FileLines, FileName, Input, Summary, Verbosity, WriteMode,\n+    Config, EmitMode, ErrorKind, FileLines, FileName, Input, Summary, Verbosity,\n };\n \n fn main() {\n     env_logger::init();\n     let opts = make_opts();\n \n     let exit_code = match execute(&opts) {\n-        Ok((write_mode, summary)) => {\n+        Ok((exit_mode, summary)) => {\n             if summary.has_operational_errors() || summary.has_parsing_errors()\n                 || ((summary.has_diff || summary.has_check_errors())\n-                    && write_mode == WriteMode::Check)\n+                    && exit_mode == ExitCodeMode::Check)\n             {\n                 1\n             } else {\n@@ -172,26 +172,26 @@ fn is_nightly() -> bool {\n         .unwrap_or(false)\n }\n \n-fn execute(opts: &Options) -> Result<(WriteMode, Summary), failure::Error> {\n+fn execute(opts: &Options) -> Result<(ExitCodeMode, Summary), failure::Error> {\n     let matches = opts.parse(env::args().skip(1))?;\n     let options = GetOptsOptions::from_matches(&matches)?;\n \n     match determine_operation(&matches)? {\n         Operation::Help(HelpOp::None) => {\n             print_usage_to_stdout(opts, \"\");\n-            Ok((WriteMode::None, Summary::default()))\n+            Ok((ExitCodeMode::Normal, Summary::default()))\n         }\n         Operation::Help(HelpOp::Config) => {\n             Config::print_docs(&mut stdout(), options.unstable_features);\n-            Ok((WriteMode::None, Summary::default()))\n+            Ok((ExitCodeMode::Normal, Summary::default()))\n         }\n         Operation::Help(HelpOp::FileLines) => {\n             print_help_file_lines();\n-            Ok((WriteMode::None, Summary::default()))\n+            Ok((ExitCodeMode::Normal, Summary::default()))\n         }\n         Operation::Version => {\n             print_version();\n-            Ok((WriteMode::None, Summary::default()))\n+            Ok((ExitCodeMode::Normal, Summary::default()))\n         }\n         Operation::ConfigOutputDefault { path } => {\n             let toml = Config::default().all_options().to_toml().map_err(err_msg)?;\n@@ -201,14 +201,14 @@ fn execute(opts: &Options) -> Result<(WriteMode, Summary), failure::Error> {\n             } else {\n                 io::stdout().write_all(toml.as_bytes())?;\n             }\n-            Ok((WriteMode::None, Summary::default()))\n+            Ok((ExitCodeMode::Normal, Summary::default()))\n         }\n         Operation::Stdin { input } => {\n             // try to read config from local directory\n             let (mut config, _) = load_config(Some(Path::new(\".\")), Some(options.clone()))?;\n \n-            // write_mode is always Display for Stdin.\n-            config.set().write_mode(WriteMode::Display);\n+            // emit mode is always Stdout for Stdin.\n+            config.set().emit_mode(EmitMode::Stdout);\n             config.set().verbose(Verbosity::Quiet);\n \n             // parse file_lines\n@@ -228,7 +228,7 @@ fn execute(opts: &Options) -> Result<(WriteMode, Summary), failure::Error> {\n             }\n             emit_post_matter(&config)?;\n \n-            Ok((WriteMode::Display, error_summary))\n+            Ok((ExitCodeMode::Normal, error_summary))\n         }\n         Operation::Format {\n             files,\n@@ -241,7 +241,7 @@ fn format(\n     files: Vec<PathBuf>,\n     minimal_config_path: Option<String>,\n     options: GetOptsOptions,\n-) -> Result<(WriteMode, Summary), failure::Error> {\n+) -> Result<(ExitCodeMode, Summary), failure::Error> {\n     options.verify_file_lines(&files);\n     let (config, config_path) = load_config(None, Some(options.clone()))?;\n \n@@ -299,7 +299,12 @@ fn format(\n         file.write_all(toml.as_bytes())?;\n     }\n \n-    Ok((config.write_mode(), error_summary))\n+    let exit_mode = if options.check {\n+        ExitCodeMode::Check\n+    } else {\n+        ExitCodeMode::Normal\n+    };\n+    Ok((exit_mode, error_summary))\n }\n \n fn print_usage_to_stdout(opts: &Options, reason: &str) {\n@@ -406,12 +411,13 @@ fn determine_operation(matches: &Matches) -> Result<Operation, ErrorKind> {\n     })\n }\n \n-const STABLE_WRITE_MODES: [WriteMode; 4] = [\n-    WriteMode::Replace,\n-    WriteMode::Overwrite,\n-    WriteMode::Display,\n-    WriteMode::Check,\n-];\n+#[derive(Debug, Copy, Clone, Eq, PartialEq)]\n+enum ExitCodeMode {\n+    Normal,\n+    Check,\n+}\n+\n+const STABLE_EMIT_MODES: [EmitMode; 3] = [EmitMode::Files, EmitMode::Stdout, EmitMode::Diff];\n \n /// Parsed command line options.\n #[derive(Clone, Debug, Default)]\n@@ -420,7 +426,8 @@ struct GetOptsOptions {\n     quiet: bool,\n     verbose: bool,\n     config_path: Option<PathBuf>,\n-    write_mode: WriteMode,\n+    emit_mode: EmitMode,\n+    backup: bool,\n     check: bool,\n     color: Option<Color>,\n     file_lines: FileLines, // Default is all lines in all files.\n@@ -463,19 +470,19 @@ impl GetOptsOptions {\n             if options.check {\n                 return Err(format_err!(\"Invalid to use `--emit` and `--check`\"));\n             }\n-            if let Ok(write_mode) = write_mode_from_emit_str(emit_str) {\n-                options.write_mode = write_mode;\n+            if let Ok(emit_mode) = emit_mode_from_emit_str(emit_str) {\n+                options.emit_mode = emit_mode;\n             } else {\n                 return Err(format_err!(\"Invalid value for `--emit`\"));\n             }\n         }\n \n-        if options.write_mode == WriteMode::Overwrite && matches.opt_present(\"backup\") {\n-            options.write_mode = WriteMode::Replace;\n+        if matches.opt_present(\"backup\") {\n+            options.backup = true;\n         }\n \n         if !rust_nightly {\n-            if !STABLE_WRITE_MODES.contains(&options.write_mode) {\n+            if !STABLE_EMIT_MODES.contains(&options.emit_mode) {\n                 return Err(format_err!(\n                     \"Invalid value for `--emit` - using an unstable \\\n                      value without `--unstable-features`\",\n@@ -524,9 +531,12 @@ impl CliOptions for GetOptsOptions {\n             config.set().error_on_unformatted(error_on_unformatted);\n         }\n         if self.check {\n-            config.set().write_mode(WriteMode::Check);\n+            config.set().emit_mode(EmitMode::Diff);\n         } else {\n-            config.set().write_mode(self.write_mode);\n+            config.set().emit_mode(self.emit_mode);\n+        }\n+        if self.backup {\n+            config.set().make_backup(true);\n         }\n         if let Some(color) = self.color {\n             config.set().color(color);\n@@ -538,12 +548,12 @@ impl CliOptions for GetOptsOptions {\n     }\n }\n \n-fn write_mode_from_emit_str(emit_str: &str) -> Result<WriteMode, failure::Error> {\n+fn emit_mode_from_emit_str(emit_str: &str) -> Result<EmitMode, failure::Error> {\n     match emit_str {\n-        \"files\" => Ok(WriteMode::Overwrite),\n-        \"stdout\" => Ok(WriteMode::Display),\n-        \"coverage\" => Ok(WriteMode::Coverage),\n-        \"checkstyle\" => Ok(WriteMode::Checkstyle),\n+        \"files\" => Ok(EmitMode::Files),\n+        \"stdout\" => Ok(EmitMode::Stdout),\n+        \"coverage\" => Ok(EmitMode::Coverage),\n+        \"checkstyle\" => Ok(EmitMode::Checkstyle),\n         _ => Err(format_err!(\"Invalid value for `--emit`\")),\n     }\n }"}, {"sha": "05531a7e2e78f4f4c2651dd63a4c0814b398d139", "filename": "src/config/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95d6b648293b417309d0857b2a93c0cace70c53d/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d6b648293b417309d0857b2a93c0cace70c53d/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=95d6b648293b417309d0857b2a93c0cace70c53d", "patch": "@@ -114,9 +114,6 @@ create_config! {\n                                               in tuple patterns\";\n \n     // Control options (changes the operation of rustfmt, rather than the formatting)\n-    write_mode: WriteMode, WriteMode::Overwrite, false,\n-        \"What Write Mode to use when none is supplied: \\\n-         Replace, Overwrite, Display, Plain, Diff, Coverage, Check\";\n     color: Color, Color::Auto, false,\n         \"What Color option to use when none is supplied: Always, Never, Auto\";\n     required_version: String, env!(\"CARGO_PKG_VERSION\").to_owned(), false,\n@@ -144,6 +141,9 @@ create_config! {\n          via the --file-lines option\";\n     width_heuristics: WidthHeuristics, WidthHeuristics::scaled(100), false,\n         \"'small' heuristic values\";\n+    emit_mode: EmitMode, EmitMode::Files, false,\n+        \"What emit Mode to use when none is supplied\";\n+    make_backup: bool, false, false, \"Backup changed files\";\n }\n \n pub fn load_config<O: CliOptions>("}, {"sha": "9b4b57a7bfd4ed1ed81c63db289d60e435e310a0", "filename": "src/config/options.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/95d6b648293b417309d0857b2a93c0cace70c53d/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d6b648293b417309d0857b2a93c0cace70c53d/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=95d6b648293b417309d0857b2a93c0cace70c53d", "patch": "@@ -165,25 +165,21 @@ configuration_option_enum! { ReportTactic:\n     Never,\n }\n \n-configuration_option_enum! { WriteMode:\n-    // Overwrites original file without backup.\n-    Overwrite,\n-    // Backs the original file up and overwrites the original.\n-    Replace,\n+configuration_option_enum! { EmitMode:\n+    // Emits to files.\n+    Files,\n     // Writes the output to stdout.\n-    Display,\n+    Stdout,\n     // Displays how much of the input file was processed\n     Coverage,\n     // Unfancy stdout\n     Checkstyle,\n     // Output the changed lines (for internal value only)\n-    Modified,\n+    ModifiedLines,\n     // Checks if a diff can be generated. If so, rustfmt outputs a diff and quits with exit code 1.\n     // This option is designed to be run in CI where a non-zero exit signifies non-standard code\n     // formatting.\n-    Check,\n-    // Rustfmt shouldn't output anything formatting-like (e.g., emit a help message).\n-    None,\n+    Diff,\n }\n \n configuration_option_enum! { Color:\n@@ -266,9 +262,9 @@ impl ::std::str::FromStr for WidthHeuristics {\n     }\n }\n \n-impl Default for WriteMode {\n-    fn default() -> WriteMode {\n-        WriteMode::Overwrite\n+impl Default for EmitMode {\n+    fn default() -> EmitMode {\n+        EmitMode::Files\n     }\n }\n "}, {"sha": "7e0c7101643657831f9681b3131a6c8dd685b7a1", "filename": "src/filemap.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/95d6b648293b417309d0857b2a93c0cace70c53d/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d6b648293b417309d0857b2a93c0cace70c53d/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=95d6b648293b417309d0857b2a93c0cace70c53d", "patch": "@@ -15,7 +15,7 @@ use std::io::{self, BufWriter, Read, Write};\n use std::path::Path;\n \n use checkstyle::output_checkstyle_file;\n-use config::{Config, FileName, NewlineStyle, Verbosity, WriteMode};\n+use config::{Config, EmitMode, FileName, NewlineStyle, Verbosity};\n use rustfmt_diff::{make_diff, output_modified, print_diff, Mismatch};\n \n #[cfg(test)]\n@@ -35,13 +35,13 @@ pub(crate) fn write_all_files<T>(\n where\n     T: Write,\n {\n-    if config.write_mode() == WriteMode::Checkstyle {\n+    if config.emit_mode() == EmitMode::Checkstyle {\n         ::checkstyle::output_header(out)?;\n     }\n     for &(ref filename, ref text) in file_map {\n         write_file(text, filename, out, config)?;\n     }\n-    if config.write_mode() == WriteMode::Checkstyle {\n+    if config.emit_mode() == EmitMode::Checkstyle {\n         ::checkstyle::output_footer(out)?;\n     }\n \n@@ -116,11 +116,11 @@ where\n \n     let filename_to_path = || match *filename {\n         FileName::Real(ref path) => path,\n-        _ => panic!(\"cannot format `{}` with WriteMode::Replace\", filename),\n+        _ => panic!(\"cannot format `{}` and emit to files\", filename),\n     };\n \n-    match config.write_mode() {\n-        WriteMode::Replace => {\n+    match config.emit_mode() {\n+        EmitMode::Files if config.make_backup() => {\n             let filename = filename_to_path();\n             if let Ok((ori, fmt)) = source_and_formatted_text(text, filename, config) {\n                 if fmt != ori {\n@@ -140,7 +140,7 @@ where\n                 }\n             }\n         }\n-        WriteMode::Overwrite => {\n+        EmitMode::Files => {\n             // Write text directly over original file if there is a diff.\n             let filename = filename_to_path();\n             let (source, formatted) = source_and_formatted_text(text, filename, config)?;\n@@ -149,13 +149,13 @@ where\n                 write_system_newlines(file, text, config)?;\n             }\n         }\n-        WriteMode::Display | WriteMode::Coverage => {\n+        EmitMode::Stdout | EmitMode::Coverage => {\n             if config.verbose() != Verbosity::Quiet {\n                 println!(\"{}:\\n\", filename);\n             }\n             write_system_newlines(out, text, config)?;\n         }\n-        WriteMode::Modified => {\n+        EmitMode::ModifiedLines => {\n             let filename = filename_to_path();\n             if let Ok((ori, fmt)) = source_and_formatted_text(text, filename, config) {\n                 let mismatch = make_diff(&ori, &fmt, 0);\n@@ -164,12 +164,12 @@ where\n                 return Ok(has_diff);\n             }\n         }\n-        WriteMode::Checkstyle => {\n+        EmitMode::Checkstyle => {\n             let filename = filename_to_path();\n             let diff = create_diff(filename, text, config)?;\n             output_checkstyle_file(out, filename, diff)?;\n         }\n-        WriteMode::Check => {\n+        EmitMode::Diff => {\n             let filename = filename_to_path();\n             if let Ok((ori, fmt)) = source_and_formatted_text(text, filename, config) {\n                 let mismatch = make_diff(&ori, &fmt, 3);\n@@ -182,7 +182,6 @@ where\n                 return Ok(has_diff);\n             }\n         }\n-        WriteMode::None => {}\n     }\n \n     // when we are not in diff mode, don't indicate differing files"}, {"sha": "1048e295d2af99a282bbb73943ae798f6fa64654", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95d6b648293b417309d0857b2a93c0cace70c53d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d6b648293b417309d0857b2a93c0cace70c53d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=95d6b648293b417309d0857b2a93c0cace70c53d", "patch": "@@ -60,7 +60,7 @@ use visitor::{FmtVisitor, SnippetProvider};\n \n pub use config::summary::Summary;\n pub use config::{\n-    load_config, CliOptions, Color, Config, FileLines, FileName, Verbosity, WriteMode,\n+    load_config, CliOptions, Color, Config, EmitMode, FileLines, FileName, Verbosity,\n };\n \n #[macro_use]\n@@ -667,7 +667,7 @@ fn format_snippet(snippet: &str, config: &Config) -> Option<String> {\n     let mut out: Vec<u8> = Vec::with_capacity(snippet.len() * 2);\n     let input = Input::Text(snippet.into());\n     let mut config = config.clone();\n-    config.set().write_mode(config::WriteMode::Display);\n+    config.set().emit_mode(config::EmitMode::Stdout);\n     config.set().verbose(Verbosity::Quiet);\n     config.set().hide_parse_errors(true);\n     match format_input(input, &config, Some(&mut out)) {\n@@ -922,7 +922,7 @@ fn get_modified_lines(\n     let mut data = Vec::new();\n \n     let mut config = config.clone();\n-    config.set().write_mode(config::WriteMode::Modified);\n+    config.set().emit_mode(config::EmitMode::ModifiedLines);\n     format_input(input, &config, Some(&mut data))?;\n \n     let mut lines = data.lines();\n@@ -990,15 +990,15 @@ pub fn format_and_emit_report(input: Input, config: &Config) -> Result<Summary,\n }\n \n pub fn emit_pre_matter(config: &Config) -> Result<(), ErrorKind> {\n-    if config.write_mode() == WriteMode::Checkstyle {\n+    if config.emit_mode() == EmitMode::Checkstyle {\n         let mut out = &mut stdout();\n         checkstyle::output_header(&mut out)?;\n     }\n     Ok(())\n }\n \n pub fn emit_post_matter(config: &Config) -> Result<(), ErrorKind> {\n-    if config.write_mode() == WriteMode::Checkstyle {\n+    if config.emit_mode() == EmitMode::Checkstyle {\n         let mut out = &mut stdout();\n         checkstyle::output_footer(&mut out)?;\n     }"}, {"sha": "7adc53bde84db6d5ec8b5e9364e61c4b7ba3ceeb", "filename": "src/missed_spans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95d6b648293b417309d0857b2a93c0cace70c53d/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d6b648293b417309d0857b2a93c0cace70c53d/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=95d6b648293b417309d0857b2a93c0cace70c53d", "patch": "@@ -14,7 +14,7 @@ use syntax::codemap::{BytePos, Pos, Span};\n \n use codemap::LineRangeUtils;\n use comment::{rewrite_comment, CodeCharKind, CommentCodeSlices};\n-use config::{FileName, WriteMode};\n+use config::{EmitMode, FileName};\n use shape::{Indent, Shape};\n use utils::{count_newlines, last_line_width, mk_sp};\n use visitor::FmtVisitor;\n@@ -180,8 +180,8 @@ impl<'a> FmtVisitor<'a> {\n         let file_name = &char_pos.file.name.clone().into();\n         let mut status = SnippetStatus::new(char_pos.line);\n \n-        let snippet = &*match self.config.write_mode() {\n-            WriteMode::Coverage => Cow::from(replace_chars(old_snippet)),\n+        let snippet = &*match self.config.emit_mode() {\n+            EmitMode::Coverage => Cow::from(replace_chars(old_snippet)),\n             _ => Cow::from(old_snippet),\n         };\n "}, {"sha": "c151fa3def77937aab206bd8649aad98a92ae40c", "filename": "src/test/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95d6b648293b417309d0857b2a93c0cace70c53d/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d6b648293b417309d0857b2a93c0cace70c53d/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=95d6b648293b417309d0857b2a93c0cace70c53d", "patch": "@@ -243,7 +243,7 @@ fn self_tests() {\n fn stdin_formatting_smoke_test() {\n     let input = Input::Text(\"fn main () {}\".to_owned());\n     let mut config = Config::default();\n-    config.set().write_mode(WriteMode::Display);\n+    config.set().emit_mode(EmitMode::Stdout);\n     let mut buf: Vec<u8> = vec![];\n     let error_summary = format_input(input, &config, Some(&mut buf)).unwrap();\n     assert!(error_summary.has_no_errors());\n@@ -773,7 +773,7 @@ impl ConfigCodeBlock {\n \n         let input = Input::Text(self.code_block.as_ref().unwrap().to_owned());\n         let mut config = self.get_block_config();\n-        config.set().write_mode(WriteMode::Display);\n+        config.set().emit_mode(EmitMode::Stdout);\n         let mut buf: Vec<u8> = vec![];\n \n         let error_summary = format_input(input, &config, Some(&mut buf)).unwrap();"}, {"sha": "10940039e8eabf279d1bb9504bd493a59410d85a", "filename": "tests/coverage/source/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95d6b648293b417309d0857b2a93c0cace70c53d/tests%2Fcoverage%2Fsource%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d6b648293b417309d0857b2a93c0cace70c53d/tests%2Fcoverage%2Fsource%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcoverage%2Fsource%2Fcomments.rs?ref=95d6b648293b417309d0857b2a93c0cace70c53d", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-write_mode: coverage\n+// rustfmt-emit_mode: coverage\n /// Here's a doc comment!\n fn main() {\n     // foo is bar"}, {"sha": "95e7b4705e3a0e0cb8906d0c13f0d18b93cd052a", "filename": "tests/coverage/target/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95d6b648293b417309d0857b2a93c0cace70c53d/tests%2Fcoverage%2Ftarget%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d6b648293b417309d0857b2a93c0cace70c53d/tests%2Fcoverage%2Ftarget%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcoverage%2Ftarget%2Fcomments.rs?ref=95d6b648293b417309d0857b2a93c0cace70c53d", "patch": "@@ -1,4 +1,4 @@\n-XX XXXXXXXXXXXXXXXXXXX XXXXXXXX\n+XX XXXXXXXXXXXXXXXXXX XXXXXXXX\n /// Here's a doc comment!\n fn main() {\n     XX XXX XX XXX"}, {"sha": "ab1e13e17a7899c52cb9a0453885d0619fe8ddb7", "filename": "tests/writemode/source/fn-single-line.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95d6b648293b417309d0857b2a93c0cace70c53d/tests%2Fwritemode%2Fsource%2Ffn-single-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d6b648293b417309d0857b2a93c0cace70c53d/tests%2Fwritemode%2Fsource%2Ffn-single-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Fsource%2Ffn-single-line.rs?ref=95d6b648293b417309d0857b2a93c0cace70c53d", "patch": "@@ -1,5 +1,5 @@\n // rustfmt-fn_single_line: true\n-// rustfmt-write_mode: checkstyle\n+// rustfmt-emit_mode: checkstyle\n // Test single-line functions.\n \n fn foo_expr() {"}]}