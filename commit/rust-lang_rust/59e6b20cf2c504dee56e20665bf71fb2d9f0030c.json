{"sha": "59e6b20cf2c504dee56e20665bf71fb2d9f0030c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZTZiMjBjZjJjNTA0ZGVlNTZlMjA2NjViZjcxZmIyZDlmMDAzMGM=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-11-16T19:45:44Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-12-15T10:23:37Z"}, "message": "Const-eval more constants during MIR building", "tree": {"sha": "43d5cb9b80838cea024228e914bd43eaccabc8de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43d5cb9b80838cea024228e914bd43eaccabc8de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59e6b20cf2c504dee56e20665bf71fb2d9f0030c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59e6b20cf2c504dee56e20665bf71fb2d9f0030c", "html_url": "https://github.com/rust-lang/rust/commit/59e6b20cf2c504dee56e20665bf71fb2d9f0030c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59e6b20cf2c504dee56e20665bf71fb2d9f0030c/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81dd3824ff4f4f85db2a092dab78e5e6c05f96cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/81dd3824ff4f4f85db2a092dab78e5e6c05f96cc", "html_url": "https://github.com/rust-lang/rust/commit/81dd3824ff4f4f85db2a092dab78e5e6c05f96cc"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "d3844b89b063f80fda25cc0f59d12feeb775d2f2", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/59e6b20cf2c504dee56e20665bf71fb2d9f0030c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e6b20cf2c504dee56e20665bf71fb2d9f0030c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=59e6b20cf2c504dee56e20665bf71fb2d9f0030c", "patch": "@@ -514,17 +514,29 @@ fn convert_arm<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>, arm: &'tcx hir::Arm) -> Arm<\n \n fn convert_path_expr<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>, expr: &'tcx hir::Expr) -> ExprKind<'tcx> {\n     let substs = cx.tcx.mk_substs(cx.tcx.node_id_item_substs(expr.id).substs);\n-    match cx.tcx.def_map.borrow()[&expr.id].full_def() {\n+    // Otherwise there may be def_map borrow conflicts\n+    let def = cx.tcx.def_map.borrow()[&expr.id].full_def();\n+    match def {\n         def::DefVariant(_, def_id, false) |\n         def::DefStruct(def_id) |\n         def::DefFn(def_id, _) |\n-        def::DefConst(def_id) |\n-        def::DefMethod(def_id) |\n-        def::DefAssociatedConst(def_id) =>\n+        def::DefMethod(def_id) =>\n             ExprKind::Literal {\n                 literal: Literal::Item { def_id: def_id, substs: substs }\n             },\n \n+        def::DefConst(def_id) |\n+        def::DefAssociatedConst(def_id) => {\n+            if let Some(v) = cx.try_const_eval_literal(expr) {\n+                ExprKind::Literal { literal: v }\n+            } else {\n+                ExprKind::Literal {\n+                    literal: Literal::Item { def_id: def_id, substs: substs }\n+                }\n+            }\n+        }\n+\n+\n         def::DefStatic(node_id, _) =>\n             ExprKind::StaticRef {\n                 id: node_id,"}, {"sha": "5528f2de577376e2d2a5d974b7a854d76f87616f", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/59e6b20cf2c504dee56e20665bf71fb2d9f0030c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e6b20cf2c504dee56e20665bf71fb2d9f0030c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=59e6b20cf2c504dee56e20665bf71fb2d9f0030c", "patch": "@@ -76,6 +76,13 @@ impl<'a,'tcx:'a> Cx<'a, 'tcx> {\n         Literal::Value { value: const_eval::eval_const_expr(self.tcx, e) }\n     }\n \n+    pub fn try_const_eval_literal(&mut self, e: &hir::Expr) -> Option<Literal<'tcx>> {\n+        let hint = const_eval::EvalHint::ExprTypeChecked;\n+        const_eval::eval_const_expr_partial(self.tcx, e, hint, None)\n+            .ok()\n+            .map(|v| Literal::Value { value: v })\n+    }\n+\n     pub fn partial_eq(&mut self, ty: Ty<'tcx>) -> ItemRef<'tcx> {\n         let eq_def_id = self.tcx.lang_items.eq_trait().unwrap();\n         self.cmp_method_ref(eq_def_id, \"eq\", ty)"}]}