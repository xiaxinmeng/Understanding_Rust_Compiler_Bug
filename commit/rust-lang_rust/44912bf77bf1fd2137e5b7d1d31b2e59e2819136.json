{"sha": "44912bf77bf1fd2137e5b7d1d31b2e59e2819136", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0OTEyYmY3N2JmMWZkMjEzN2U1YjdkMWQzMWIyZTU5ZTI4MTkxMzY=", "commit": {"author": {"name": "Matt Brubeck", "email": "mbrubeck@limpet.net", "date": "2018-01-10T16:06:23Z"}, "committer": {"name": "Matt Brubeck", "email": "mbrubeck@limpet.net", "date": "2018-01-10T18:48:11Z"}, "message": "Pre-allocate in fs::read and fs::read_string", "tree": {"sha": "7d5395479acab7fab70cea5d228fdd2268ffda81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d5395479acab7fab70cea5d228fdd2268ffda81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44912bf77bf1fd2137e5b7d1d31b2e59e2819136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44912bf77bf1fd2137e5b7d1d31b2e59e2819136", "html_url": "https://github.com/rust-lang/rust/commit/44912bf77bf1fd2137e5b7d1d31b2e59e2819136", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44912bf77bf1fd2137e5b7d1d31b2e59e2819136/comments", "author": {"login": "mbrubeck", "id": 5920, "node_id": "MDQ6VXNlcjU5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubeck", "html_url": "https://github.com/mbrubeck", "followers_url": "https://api.github.com/users/mbrubeck/followers", "following_url": "https://api.github.com/users/mbrubeck/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubeck/subscriptions", "organizations_url": "https://api.github.com/users/mbrubeck/orgs", "repos_url": "https://api.github.com/users/mbrubeck/repos", "events_url": "https://api.github.com/users/mbrubeck/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubeck/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbrubeck", "id": 5920, "node_id": "MDQ6VXNlcjU5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubeck", "html_url": "https://github.com/mbrubeck", "followers_url": "https://api.github.com/users/mbrubeck/followers", "following_url": "https://api.github.com/users/mbrubeck/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubeck/subscriptions", "organizations_url": "https://api.github.com/users/mbrubeck/orgs", "repos_url": "https://api.github.com/users/mbrubeck/repos", "events_url": "https://api.github.com/users/mbrubeck/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubeck/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f62f774035735a06c880c48c0b9017fcc0577e33", "url": "https://api.github.com/repos/rust-lang/rust/commits/f62f774035735a06c880c48c0b9017fcc0577e33", "html_url": "https://github.com/rust-lang/rust/commit/f62f774035735a06c880c48c0b9017fcc0577e33"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "51cb9609120e36a5657aa5aa1f75d15979e54de7", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44912bf77bf1fd2137e5b7d1d31b2e59e2819136/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44912bf77bf1fd2137e5b7d1d31b2e59e2819136/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=44912bf77bf1fd2137e5b7d1d31b2e59e2819136", "patch": "@@ -211,6 +211,14 @@ pub struct DirBuilder {\n     recursive: bool,\n }\n \n+/// How large a buffer to pre-allocate before reading the entire file at `path`.\n+fn initial_buffer_size<P: AsRef<Path>>(path: P) -> usize {\n+    // Allocate one extra byte so the buffer doesn't need to grow before the\n+    // final `read` call at the end of the file.  Don't worry about `usize`\n+    // overflow because reading will fail regardless in that case.\n+    metadata(path).map(|m| m.len() as usize + 1).unwrap_or(0)\n+}\n+\n /// Read the entire contents of a file into a bytes vector.\n ///\n /// This is a convenience function for using [`File::open`] and [`read_to_end`]\n@@ -246,7 +254,7 @@ pub struct DirBuilder {\n /// ```\n #[unstable(feature = \"fs_read_write\", issue = \"46588\")]\n pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n-    let mut bytes = Vec::new();\n+    let mut bytes = Vec::with_capacity(initial_buffer_size(&path));\n     File::open(path)?.read_to_end(&mut bytes)?;\n     Ok(bytes)\n }\n@@ -287,7 +295,7 @@ pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n /// ```\n #[unstable(feature = \"fs_read_write\", issue = \"46588\")]\n pub fn read_string<P: AsRef<Path>>(path: P) -> io::Result<String> {\n-    let mut string = String::new();\n+    let mut string = String::with_capacity(initial_buffer_size(&path));\n     File::open(path)?.read_to_string(&mut string)?;\n     Ok(string)\n }"}]}