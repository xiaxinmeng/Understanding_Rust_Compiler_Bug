{"sha": "3e7e1b1f838b86701e5539d788b633da1f0f950a", "node_id": "C_kwDOAAsO6NoAKDNlN2UxYjFmODM4Yjg2NzAxZTU1MzlkNzg4YjYzM2RhMWYwZjk1MGE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-26T00:10:35Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-02T04:11:48Z"}, "message": "Avoid InferCtxt::build in suggest_missing_break_or_return_expr", "tree": {"sha": "1760b10b784ce8145049acc93b05af6c73e15f08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1760b10b784ce8145049acc93b05af6c73e15f08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e7e1b1f838b86701e5539d788b633da1f0f950a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7e1b1f838b86701e5539d788b633da1f0f950a", "html_url": "https://github.com/rust-lang/rust/commit/3e7e1b1f838b86701e5539d788b633da1f0f950a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e7e1b1f838b86701e5539d788b633da1f0f950a/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56c241c86212d84b9528dca1628bc06e32c742c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/56c241c86212d84b9528dca1628bc06e32c742c1", "html_url": "https://github.com/rust-lang/rust/commit/56c241c86212d84b9528dca1628bc06e32c742c1"}], "stats": {"total": 54, "additions": 39, "deletions": 15}, "files": [{"sha": "1daca464b4772c2b07d4789a3c2286dd597ca18b", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3e7e1b1f838b86701e5539d788b633da1f0f950a/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7e1b1f838b86701e5539d788b633da1f0f950a/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=3e7e1b1f838b86701e5539d788b633da1f0f950a", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::{\n     Expr, ExprKind, GenericBound, Node, Path, QPath, Stmt, StmtKind, TyKind, WherePredicate,\n };\n use rustc_hir_analysis::astconv::AstConv;\n-use rustc_infer::infer::{self, TyCtxtInferExt};\n+use rustc_infer::infer;\n use rustc_infer::traits::{self, StatementAsExpression};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Binder, DefIdTree, IsSuggestable, ToPredicate, Ty};\n@@ -921,19 +921,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, ty);\n             let bound_vars = self.tcx.late_bound_vars(fn_id);\n             let ty = self.tcx.erase_late_bound_regions(Binder::bind_with_vars(ty, bound_vars));\n-            let ty = self.normalize(expr.span, ty);\n             let ty = match self.tcx.asyncness(fn_id.owner) {\n-                hir::IsAsync::Async => {\n-                    let infcx = self.tcx.infer_ctxt().build();\n-                    infcx.get_impl_future_output_ty(ty).unwrap_or_else(|| {\n-                        span_bug!(\n-                            fn_decl.output.span(),\n-                            \"failed to get output type of async function\"\n-                        )\n-                    })\n-                }\n+                hir::IsAsync::Async => self.get_impl_future_output_ty(ty).unwrap_or_else(|| {\n+                    span_bug!(fn_decl.output.span(), \"failed to get output type of async function\")\n+                }),\n                 hir::IsAsync::NotAsync => ty,\n             };\n+            let ty = self.normalize(expr.span, ty);\n             if self.can_coerce(found, ty) {\n                 err.multipart_suggestion(\n                     \"you might have meant to return this value\","}, {"sha": "f46e088b85f7201a46911fa4b19092bf6d48469d", "filename": "src/test/ui/return/tail-expr-as-potential-return.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3e7e1b1f838b86701e5539d788b633da1f0f950a/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7e1b1f838b86701e5539d788b633da1f0f950a/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.rs?ref=3e7e1b1f838b86701e5539d788b633da1f0f950a", "patch": "@@ -12,7 +12,6 @@\n // edition:2018\n \n fn main() {\n-    let _ = foo(true);\n }\n \n fn foo(x: bool) -> Result<f64, i32> {\n@@ -30,3 +29,19 @@ async fn bar(x: bool) -> Result<f64, i32> {\n     }\n     Ok(42.0)\n }\n+\n+trait Identity {\n+    type Out;\n+}\n+\n+impl<T> Identity for T {\n+    type Out = T;\n+}\n+\n+async fn foo2() -> i32 {\n+    if true {\n+        1i32 //~ ERROR mismatched types\n+            //| HELP you might have meant to return this value\n+    }\n+    0\n+}"}, {"sha": "9183b4599ba6dafb238f94d2aba435476ba30887", "filename": "src/test/ui/return/tail-expr-as-potential-return.stderr", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3e7e1b1f838b86701e5539d788b633da1f0f950a/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e7e1b1f838b86701e5539d788b633da1f0f950a/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr?ref=3e7e1b1f838b86701e5539d788b633da1f0f950a", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/tail-expr-as-potential-return.rs:28:9\n+  --> $DIR/tail-expr-as-potential-return.rs:27:9\n    |\n LL | /     if x {\n LL | |         Err(42)\n@@ -16,7 +16,22 @@ LL |         return Err(42);\n    |         ++++++        +\n \n error[E0308]: mismatched types\n-  --> $DIR/tail-expr-as-potential-return.rs:20:9\n+  --> $DIR/tail-expr-as-potential-return.rs:43:9\n+   |\n+LL | /     if true {\n+LL | |         1i32\n+   | |         ^^^^ expected `()`, found `i32`\n+LL | |             //| HELP you might have meant to return this value\n+LL | |     }\n+   | |_____- expected this to be `()`\n+   |\n+help: you might have meant to return this value\n+   |\n+LL |         return 1i32;\n+   |         ++++++     +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/tail-expr-as-potential-return.rs:19:9\n    |\n LL | /     if x {\n LL | |         Err(42)\n@@ -32,6 +47,6 @@ help: you might have meant to return this value\n LL |         return Err(42);\n    |         ++++++        +\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}