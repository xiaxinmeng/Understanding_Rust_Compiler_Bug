{"sha": "67966fa9de062cfe05604ed7e11e9ab58bb55225", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3OTY2ZmE5ZGUwNjJjZmUwNTYwNGVkN2UxMWU5YWI1OGJiNTUyMjU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-11-03T21:54:58Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-11-04T01:31:57Z"}, "message": "simplify memcpy/memmove/memset intrinsics\n\nThis moves the per-architecture difference into the compiler.", "tree": {"sha": "7f482c3b0df8fc813098699418268130883512bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f482c3b0df8fc813098699418268130883512bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67966fa9de062cfe05604ed7e11e9ab58bb55225", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67966fa9de062cfe05604ed7e11e9ab58bb55225", "html_url": "https://github.com/rust-lang/rust/commit/67966fa9de062cfe05604ed7e11e9ab58bb55225", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67966fa9de062cfe05604ed7e11e9ab58bb55225/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc079e1596bb5fd7b601fe1b605c8f30326ee748", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc079e1596bb5fd7b601fe1b605c8f30326ee748", "html_url": "https://github.com/rust-lang/rust/commit/dc079e1596bb5fd7b601fe1b605c8f30326ee748"}], "stats": {"total": 172, "additions": 89, "deletions": 83}, "files": [{"sha": "4618cdf45ee08de06ab596c2bb3a93a91ea35633", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/67966fa9de062cfe05604ed7e11e9ab58bb55225/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67966fa9de062cfe05604ed7e11e9ab58bb55225/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=67966fa9de062cfe05604ed7e11e9ab58bb55225", "patch": "@@ -74,14 +74,24 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n         }\n     }\n \n-    fn memcpy_intrinsic(bcx: @mut Block, name: &'static str, tp_ty: ty::t, sizebits: u8) {\n+    fn copy_intrinsic(bcx: @mut Block, allow_overlap: bool, tp_ty: ty::t) {\n         let ccx = bcx.ccx();\n         let lltp_ty = type_of::type_of(ccx, tp_ty);\n         let align = C_i32(machine::llalign_of_min(ccx, lltp_ty) as i32);\n-        let size = match sizebits {\n-            32 => C_i32(machine::llsize_of_real(ccx, lltp_ty) as i32),\n-            64 => C_i64(machine::llsize_of_real(ccx, lltp_ty) as i64),\n-            _ => ccx.sess.fatal(\"Invalid value for sizebits\")\n+        let size = machine::llsize_of(ccx, lltp_ty);\n+        let int_size = machine::llbitsize_of_real(ccx, ccx.int_type);\n+        let name = if allow_overlap {\n+            if int_size == 32 {\n+                \"llvm.memmove.p0i8.p0i8.i32\"\n+            } else {\n+                \"llvm.memmove.p0i8.p0i8.i64\"\n+            }\n+        } else {\n+            if int_size == 32 {\n+                \"llvm.memcpy.p0i8.p0i8.i32\"\n+            } else {\n+                \"llvm.memcpy.p0i8.p0i8.i64\"\n+            }\n         };\n \n         let decl = bcx.fcx.llfn;\n@@ -95,14 +105,15 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n         RetVoid(bcx);\n     }\n \n-    fn memset_intrinsic(bcx: @mut Block, name: &'static str, tp_ty: ty::t, sizebits: u8) {\n+    fn memset_intrinsic(bcx: @mut Block, tp_ty: ty::t) {\n         let ccx = bcx.ccx();\n         let lltp_ty = type_of::type_of(ccx, tp_ty);\n         let align = C_i32(machine::llalign_of_min(ccx, lltp_ty) as i32);\n-        let size = match sizebits {\n-            32 => C_i32(machine::llsize_of_real(ccx, lltp_ty) as i32),\n-            64 => C_i64(machine::llsize_of_real(ccx, lltp_ty) as i64),\n-            _ => ccx.sess.fatal(\"Invalid value for sizebits\")\n+        let size = machine::llsize_of(ccx, lltp_ty);\n+        let name = if machine::llbitsize_of_real(ccx, ccx.int_type) == 32 {\n+            \"llvm.memset.p0i8.i32\"\n+        } else {\n+            \"llvm.memset.p0i8.i64\"\n         };\n \n         let decl = bcx.fcx.llfn;\n@@ -399,12 +410,9 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n             let lladdr = InBoundsGEP(bcx, ptr, [offset]);\n             Ret(bcx, lladdr);\n         }\n-        \"memcpy32\" => memcpy_intrinsic(bcx, \"llvm.memcpy.p0i8.p0i8.i32\", substs.tys[0], 32),\n-        \"memcpy64\" => memcpy_intrinsic(bcx, \"llvm.memcpy.p0i8.p0i8.i64\", substs.tys[0], 64),\n-        \"memmove32\" => memcpy_intrinsic(bcx, \"llvm.memmove.p0i8.p0i8.i32\", substs.tys[0], 32),\n-        \"memmove64\" => memcpy_intrinsic(bcx, \"llvm.memmove.p0i8.p0i8.i64\", substs.tys[0], 64),\n-        \"memset32\" => memset_intrinsic(bcx, \"llvm.memset.p0i8.i32\", substs.tys[0], 32),\n-        \"memset64\" => memset_intrinsic(bcx, \"llvm.memset.p0i8.i64\", substs.tys[0], 64),\n+        \"copy_nonoverlapping_memory\" => copy_intrinsic(bcx, false, substs.tys[0]),\n+        \"copy_memory\" => copy_intrinsic(bcx, true, substs.tys[0]),\n+        \"set_memory\" => memset_intrinsic(bcx, substs.tys[0]),\n         \"sqrtf32\" => simple_llvm_intrinsic(bcx, \"llvm.sqrt.f32\", 1),\n         \"sqrtf64\" => simple_llvm_intrinsic(bcx, \"llvm.sqrt.f64\", 1),\n         \"powif32\" => simple_llvm_intrinsic(bcx, \"llvm.powi.f32\", 2),"}, {"sha": "011d39af7a8c876795e9695df39a1debbd7018f7", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 48, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/67966fa9de062cfe05604ed7e11e9ab58bb55225/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67966fa9de062cfe05604ed7e11e9ab58bb55225/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=67966fa9de062cfe05604ed7e11e9ab58bb55225", "patch": "@@ -3734,7 +3734,7 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n                    mutbl: ast::MutImmutable\n                }))\n             }\n-            \"memcpy32\" => {\n+            \"copy_nonoverlapping_memory\" => {\n               (1,\n                ~[\n                   ty::mk_ptr(tcx, ty::mt {\n@@ -3745,11 +3745,11 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n                       ty: param(ccx, 0),\n                       mutbl: ast::MutImmutable\n                   }),\n-                  ty::mk_u32()\n+                  ty::mk_uint()\n                ],\n                ty::mk_nil())\n             }\n-            \"memcpy64\" => {\n+            \"copy_memory\" => {\n               (1,\n                ~[\n                   ty::mk_ptr(tcx, ty::mt {\n@@ -3760,61 +3760,19 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n                       ty: param(ccx, 0),\n                       mutbl: ast::MutImmutable\n                   }),\n-                  ty::mk_u64()\n+                  ty::mk_uint()\n                ],\n                ty::mk_nil())\n             }\n-            \"memmove32\" => {\n-              (1,\n-               ~[\n-                  ty::mk_ptr(tcx, ty::mt {\n-                      ty: param(ccx, 0),\n-                      mutbl: ast::MutMutable\n-                  }),\n-                  ty::mk_ptr(tcx, ty::mt {\n-                      ty: param(ccx, 0),\n-                      mutbl: ast::MutImmutable\n-                  }),\n-                  ty::mk_u32()\n-               ],\n-               ty::mk_nil())\n-            }\n-            \"memmove64\" => {\n-              (1,\n-               ~[\n-                  ty::mk_ptr(tcx, ty::mt {\n-                      ty: param(ccx, 0),\n-                      mutbl: ast::MutMutable\n-                  }),\n-                  ty::mk_ptr(tcx, ty::mt {\n-                      ty: param(ccx, 0),\n-                      mutbl: ast::MutImmutable\n-                  }),\n-                  ty::mk_u64()\n-               ],\n-               ty::mk_nil())\n-            }\n-            \"memset32\" => {\n-              (1,\n-               ~[\n-                  ty::mk_ptr(tcx, ty::mt {\n-                      ty: param(ccx, 0),\n-                      mutbl: ast::MutMutable\n-                  }),\n-                  ty::mk_u8(),\n-                  ty::mk_u32()\n-               ],\n-               ty::mk_nil())\n-            }\n-            \"memset64\" => {\n+            \"set_memory\" => {\n               (1,\n                ~[\n                   ty::mk_ptr(tcx, ty::mt {\n                       ty: param(ccx, 0),\n                       mutbl: ast::MutMutable\n                   }),\n                   ty::mk_u8(),\n-                  ty::mk_u64()\n+                  ty::mk_uint()\n                ],\n                ty::mk_nil())\n             }"}, {"sha": "05a72dc4109e74922d8bdac6e4d660b775ce241a", "filename": "src/libstd/cast.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/67966fa9de062cfe05604ed7e11e9ab58bb55225/src%2Flibstd%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67966fa9de062cfe05604ed7e11e9ab58bb55225/src%2Flibstd%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcast.rs?ref=67966fa9de062cfe05604ed7e11e9ab58bb55225", "patch": "@@ -13,26 +13,15 @@\n use ptr::RawPtr;\n use mem;\n use unstable::intrinsics;\n+use ptr::copy_nonoverlapping_memory;\n \n /// Casts the value at `src` to U. The two types must have the same length.\n-#[cfg(target_word_size = \"32\")]\n #[inline]\n pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n     let mut dest: U = intrinsics::uninit();\n     let dest_ptr: *mut u8 = transmute(&mut dest);\n     let src_ptr: *u8 = transmute(src);\n-    intrinsics::memcpy32(dest_ptr, src_ptr, mem::size_of::<U>() as u32);\n-    dest\n-}\n-\n-/// Casts the value at `src` to U. The two types must have the same length.\n-#[cfg(target_word_size = \"64\")]\n-#[inline]\n-pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n-    let mut dest: U = intrinsics::uninit();\n-    let dest_ptr: *mut u8 = transmute(&mut dest);\n-    let src_ptr: *u8 = transmute(src);\n-    intrinsics::memcpy64(dest_ptr, src_ptr, mem::size_of::<U>() as u64);\n+    copy_nonoverlapping_memory(dest_ptr, src_ptr, mem::size_of::<U>());\n     dest\n }\n "}, {"sha": "65ae9f40403b6158557d30bd746ea8b2aa3aac68", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/67966fa9de062cfe05604ed7e11e9ab58bb55225/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67966fa9de062cfe05604ed7e11e9ab58bb55225/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=67966fa9de062cfe05604ed7e11e9ab58bb55225", "patch": "@@ -87,7 +87,7 @@ pub fn is_not_null<T,P:RawPtr<T>>(ptr: P) -> bool { ptr.is_not_null() }\n  * and destination may overlap.\n  */\n #[inline]\n-#[cfg(target_word_size = \"32\")]\n+#[cfg(target_word_size = \"32\", stage0)]\n pub unsafe fn copy_memory<T,P:RawPtr<T>>(dst: *mut T, src: P, count: uint) {\n     intrinsics::memmove32(dst,\n                           cast::transmute_immut_unsafe(src),\n@@ -101,21 +101,33 @@ pub unsafe fn copy_memory<T,P:RawPtr<T>>(dst: *mut T, src: P, count: uint) {\n  * and destination may overlap.\n  */\n #[inline]\n-#[cfg(target_word_size = \"64\")]\n+#[cfg(target_word_size = \"64\", stage0)]\n pub unsafe fn copy_memory<T,P:RawPtr<T>>(dst: *mut T, src: P, count: uint) {\n     intrinsics::memmove64(dst,\n                           cast::transmute_immut_unsafe(src),\n                           count as u64);\n }\n \n+/**\n+ * Copies data from one location to another.\n+ *\n+ * Copies `count` elements (not bytes) from `src` to `dst`. The source\n+ * and destination may overlap.\n+ */\n+#[inline]\n+#[cfg(not(stage0))]\n+pub unsafe fn copy_memory<T,P:RawPtr<T>>(dst: *mut T, src: P, count: uint) {\n+    intrinsics::copy_memory(dst, cast::transmute_immut_unsafe(src), count)\n+}\n+\n /**\n  * Copies data from one location to another.\n  *\n  * Copies `count` elements (not bytes) from `src` to `dst`. The source\n  * and destination may *not* overlap.\n  */\n #[inline]\n-#[cfg(target_word_size = \"32\")]\n+#[cfg(target_word_size = \"32\", stage0)]\n pub unsafe fn copy_nonoverlapping_memory<T,P:RawPtr<T>>(dst: *mut T,\n                                                         src: P,\n                                                         count: uint) {\n@@ -131,7 +143,7 @@ pub unsafe fn copy_nonoverlapping_memory<T,P:RawPtr<T>>(dst: *mut T,\n  * and destination may *not* overlap.\n  */\n #[inline]\n-#[cfg(target_word_size = \"64\")]\n+#[cfg(target_word_size = \"64\", stage0)]\n pub unsafe fn copy_nonoverlapping_memory<T,P:RawPtr<T>>(dst: *mut T,\n                                                         src: P,\n                                                         count: uint) {\n@@ -140,12 +152,26 @@ pub unsafe fn copy_nonoverlapping_memory<T,P:RawPtr<T>>(dst: *mut T,\n                          count as u64);\n }\n \n+/**\n+ * Copies data from one location to another.\n+ *\n+ * Copies `count` elements (not bytes) from `src` to `dst`. The source\n+ * and destination may *not* overlap.\n+ */\n+#[inline]\n+#[cfg(not(stage0))]\n+pub unsafe fn copy_nonoverlapping_memory<T,P:RawPtr<T>>(dst: *mut T,\n+                                                        src: P,\n+                                                        count: uint) {\n+    intrinsics::copy_nonoverlapping_memory(dst, cast::transmute_immut_unsafe(src), count)\n+}\n+\n /**\n  * Invokes memset on the specified pointer, setting `count * size_of::<T>()`\n  * bytes of memory starting at `dst` to `c`.\n  */\n #[inline]\n-#[cfg(target_word_size = \"32\")]\n+#[cfg(target_word_size = \"32\", stage0)]\n pub unsafe fn set_memory<T>(dst: *mut T, c: u8, count: uint) {\n     intrinsics::memset32(dst, c, count as u32);\n }\n@@ -155,11 +181,21 @@ pub unsafe fn set_memory<T>(dst: *mut T, c: u8, count: uint) {\n  * bytes of memory starting at `dst` to `c`.\n  */\n #[inline]\n-#[cfg(target_word_size = \"64\")]\n+#[cfg(target_word_size = \"64\", stage0)]\n pub unsafe fn set_memory<T>(dst: *mut T, c: u8, count: uint) {\n     intrinsics::memset64(dst, c, count as u64);\n }\n \n+/**\n+ * Invokes memset on the specified pointer, setting `count * size_of::<T>()`\n+ * bytes of memory starting at `dst` to `c`.\n+ */\n+#[inline]\n+#[cfg(not(stage0))]\n+pub unsafe fn set_memory<T>(dst: *mut T, c: u8, count: uint) {\n+    intrinsics::set_memory(dst, c, count)\n+}\n+\n /**\n  * Zeroes out `count * size_of::<T>` bytes of memory at `dst`\n  */"}, {"sha": "c086e13d74024e37007b3b724789f21fcf744285", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/67966fa9de062cfe05604ed7e11e9ab58bb55225/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67966fa9de062cfe05604ed7e11e9ab58bb55225/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=67966fa9de062cfe05604ed7e11e9ab58bb55225", "patch": "@@ -345,25 +345,40 @@ extern \"rust-intrinsic\" {\n \n     /// Equivalent to the `llvm.memcpy.p0i8.0i8.i32` intrinsic, with a size of\n     /// `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`\n+    #[cfg(stage0)]\n     pub fn memcpy32<T>(dst: *mut T, src: *T, count: u32);\n     /// Equivalent to the `llvm.memcpy.p0i8.0i8.i64` intrinsic, with a size of\n     /// `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`\n+    #[cfg(stage0)]\n     pub fn memcpy64<T>(dst: *mut T, src: *T, count: u64);\n \n     /// Equivalent to the `llvm.memmove.p0i8.0i8.i32` intrinsic, with a size of\n     /// `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`\n+    #[cfg(stage0)]\n     pub fn memmove32<T>(dst: *mut T, src: *T, count: u32);\n     /// Equivalent to the `llvm.memmove.p0i8.0i8.i64` intrinsic, with a size of\n     /// `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`\n+    #[cfg(stage0)]\n     pub fn memmove64<T>(dst: *mut T, src: *T, count: u64);\n \n     /// Equivalent to the `llvm.memset.p0i8.i32` intrinsic, with a size of\n     /// `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`\n+    #[cfg(stage0)]\n     pub fn memset32<T>(dst: *mut T, val: u8, count: u32);\n     /// Equivalent to the `llvm.memset.p0i8.i64` intrinsic, with a size of\n     /// `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`\n+    #[cfg(stage0)]\n     pub fn memset64<T>(dst: *mut T, val: u8, count: u64);\n \n+    #[cfg(not(stage0))]\n+    pub fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *T, count: uint);\n+\n+    #[cfg(not(stage0))]\n+    pub fn copy_memory<T>(dst: *mut T, src: *T, count: uint);\n+\n+    #[cfg(not(stage0))]\n+    pub fn set_memory<T>(dst: *mut T, val: u8, count: uint);\n+\n     pub fn sqrtf32(x: f32) -> f32;\n     pub fn sqrtf64(x: f64) -> f64;\n "}]}