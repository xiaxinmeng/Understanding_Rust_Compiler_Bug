{"sha": "35188440b5e3d02acdb02f616aad800c9c377dca", "node_id": "C_kwDOAAsO6NoAKDM1MTg4NDQwYjVlM2QwMmFjZGIwMmY2MTZhYWQ4MDBjOWMzNzdkY2E", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-19T12:43:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-19T12:43:19Z"}, "message": "Rollup merge of #96089 - ojeda:no-vec-no_global_oom_handling, r=Mark-Simulacrum\n\n`alloc`: make `vec!` unavailable under `no_global_oom_handling`\n\n`alloc`: make `vec!` unavailable under `no_global_oom_handling`\n\nThe `vec!` macro has 3 rules, but two are not usable under\n`no_global_oom_handling` builds of the standard library\n(even with a zero size):\n\n```rust\nlet _ = vec![42];    // Error: requires `exchange_malloc` lang_item.\nlet _ = vec![42; 0]; // Error: cannot find function `from_elem`.\n```\n\nThus those two rules should not be available to begin with.\n\nThe remaining one, with an empty matcher, is just a shorthand for\n`new()` and may not make as much sense to have alone, since the\nidea behind `vec!` is to enable `Vec`s to be defined with the same\nsyntax as array expressions. Furthermore, the documentation can be\nconfusing since it shows the other rules.\n\nThus perhaps it is better and simpler to disable `vec!` entirely\nunder `no_global_oom_handling` environments, and let users call\n`new()` instead:\n\n```rust\nlet _: Vec<i32> = vec![];\nlet _: Vec<i32> = Vec::new();\n```\n\nNotwithstanding this, a `try_vec!` macro would be useful, such as\nthe one introduced in https://github.com/rust-lang/rust/pull/95051.\n\nIf the shorthand for `new()` is deemed worth keeping on its own,\nthen it may be interesting to have a separate `vec!` macro with\na single rule and different, simpler documentation.\n\nSigned-off-by: Miguel Ojeda <ojeda@kernel.org>", "tree": {"sha": "ebe1a0bec997b025778ab512717a439f8a1dc429", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebe1a0bec997b025778ab512717a439f8a1dc429"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35188440b5e3d02acdb02f616aad800c9c377dca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiXq5nCRBK7hj4Ov3rIwAAEaQIAC2ngEwUzpp5hEZQUZlmBpFi\nrwJeD7XpDJCN30YCjhPU0aeW5aNZViaaB4G1WoF8DaacHEZ+qS0Mx+IYN0gCcZHO\n74oiHnpYW0DzvVnVBOzxVtiKCEngWQWuI0cOC8zlME6BQdU5Fauad/JO930h6sga\nLLJomu6kM7U3z8Ph5Vqx6wwXLbbpD1foRzxOGrBiaknvlXkLsScAhrh6oaCaGZoK\nu+Lq35PCgHGRa3HIpjpt42/MWVOQhrIW41dqVVDRZ1PV2BMCgfUKbW9nL06xWL5i\nTWxZ7i7gUBPKEaxhm1dXAJ8kMolCdSvy5Ozd9LUIET0GGOpneRrTGRdbWwhImww=\n=Jc2m\n-----END PGP SIGNATURE-----\n", "payload": "tree ebe1a0bec997b025778ab512717a439f8a1dc429\nparent 5f10d1312dc53758824bd1da5fdbc4175e8d1c61\nparent 8cec88ba76e1d6edc98f30101c40f9247c754898\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650372199 +0200\ncommitter GitHub <noreply@github.com> 1650372199 +0200\n\nRollup merge of #96089 - ojeda:no-vec-no_global_oom_handling, r=Mark-Simulacrum\n\n`alloc`: make `vec!` unavailable under `no_global_oom_handling`\n\n`alloc`: make `vec!` unavailable under `no_global_oom_handling`\n\nThe `vec!` macro has 3 rules, but two are not usable under\n`no_global_oom_handling` builds of the standard library\n(even with a zero size):\n\n```rust\nlet _ = vec![42];    // Error: requires `exchange_malloc` lang_item.\nlet _ = vec![42; 0]; // Error: cannot find function `from_elem`.\n```\n\nThus those two rules should not be available to begin with.\n\nThe remaining one, with an empty matcher, is just a shorthand for\n`new()` and may not make as much sense to have alone, since the\nidea behind `vec!` is to enable `Vec`s to be defined with the same\nsyntax as array expressions. Furthermore, the documentation can be\nconfusing since it shows the other rules.\n\nThus perhaps it is better and simpler to disable `vec!` entirely\nunder `no_global_oom_handling` environments, and let users call\n`new()` instead:\n\n```rust\nlet _: Vec<i32> = vec![];\nlet _: Vec<i32> = Vec::new();\n```\n\nNotwithstanding this, a `try_vec!` macro would be useful, such as\nthe one introduced in https://github.com/rust-lang/rust/pull/95051.\n\nIf the shorthand for `new()` is deemed worth keeping on its own,\nthen it may be interesting to have a separate `vec!` macro with\na single rule and different, simpler documentation.\n\nSigned-off-by: Miguel Ojeda <ojeda@kernel.org>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35188440b5e3d02acdb02f616aad800c9c377dca", "html_url": "https://github.com/rust-lang/rust/commit/35188440b5e3d02acdb02f616aad800c9c377dca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35188440b5e3d02acdb02f616aad800c9c377dca/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "html_url": "https://github.com/rust-lang/rust/commit/5f10d1312dc53758824bd1da5fdbc4175e8d1c61"}, {"sha": "8cec88ba76e1d6edc98f30101c40f9247c754898", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cec88ba76e1d6edc98f30101c40f9247c754898", "html_url": "https://github.com/rust-lang/rust/commit/8cec88ba76e1d6edc98f30101c40f9247c754898"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "22c19243e7f53fca729e9e75503e51b59802355f", "filename": "library/alloc/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35188440b5e3d02acdb02f616aad800c9c377dca/library%2Falloc%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35188440b5e3d02acdb02f616aad800c9c377dca/library%2Falloc%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fmacros.rs?ref=35188440b5e3d02acdb02f616aad800c9c377dca", "patch": "@@ -34,7 +34,7 @@\n /// be mindful of side effects.\n ///\n /// [`Vec`]: crate::vec::Vec\n-#[cfg(not(test))]\n+#[cfg(all(not(no_global_oom_handling), not(test)))]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_diagnostic_item = \"vec_macro\"]\n@@ -55,7 +55,7 @@ macro_rules! vec {\n // required for this macro definition, is not available. Instead use the\n // `slice::into_vec`  function which is only available with cfg(test)\n // NB see the slice::hack module in slice.rs for more information\n-#[cfg(test)]\n+#[cfg(all(not(no_global_oom_handling), test))]\n macro_rules! vec {\n     () => (\n         $crate::vec::Vec::new()"}]}