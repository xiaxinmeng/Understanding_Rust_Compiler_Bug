{"sha": "49014c82688a21e1157877280d449e055ce39b6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MDE0YzgyNjg4YTIxZTExNTc4NzcyODBkNDQ5ZTA1NWNlMzliNmI=", "commit": {"author": {"name": "zslayton", "email": "zack.slayton@gmail.com", "date": "2013-07-22T03:38:39Z"}, "committer": {"name": "zslayton", "email": "zack.slayton@gmail.com", "date": "2013-07-22T03:40:52Z"}, "message": "Exposed previously hidden 'use' statements in the tutorial's sample code.", "tree": {"sha": "2fc936fb7f8c7eb625d04a57faf272b8b9f910a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fc936fb7f8c7eb625d04a57faf272b8b9f910a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49014c82688a21e1157877280d449e055ce39b6b", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49014c82688a21e1157877280d449e055ce39b6b", "html_url": "https://github.com/rust-lang/rust/commit/49014c82688a21e1157877280d449e055ce39b6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49014c82688a21e1157877280d449e055ce39b6b/comments", "author": {"login": "zslayton", "id": 611616, "node_id": "MDQ6VXNlcjYxMTYxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/611616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zslayton", "html_url": "https://github.com/zslayton", "followers_url": "https://api.github.com/users/zslayton/followers", "following_url": "https://api.github.com/users/zslayton/following{/other_user}", "gists_url": "https://api.github.com/users/zslayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/zslayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zslayton/subscriptions", "organizations_url": "https://api.github.com/users/zslayton/orgs", "repos_url": "https://api.github.com/users/zslayton/repos", "events_url": "https://api.github.com/users/zslayton/events{/privacy}", "received_events_url": "https://api.github.com/users/zslayton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zslayton", "id": 611616, "node_id": "MDQ6VXNlcjYxMTYxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/611616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zslayton", "html_url": "https://github.com/zslayton", "followers_url": "https://api.github.com/users/zslayton/followers", "following_url": "https://api.github.com/users/zslayton/following{/other_user}", "gists_url": "https://api.github.com/users/zslayton/gists{/gist_id}", "starred_url": "https://api.github.com/users/zslayton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zslayton/subscriptions", "organizations_url": "https://api.github.com/users/zslayton/orgs", "repos_url": "https://api.github.com/users/zslayton/repos", "events_url": "https://api.github.com/users/zslayton/events{/privacy}", "received_events_url": "https://api.github.com/users/zslayton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e336cbf8f9e26758a2ef98ec6b7715e083fdcced", "url": "https://api.github.com/repos/rust-lang/rust/commits/e336cbf8f9e26758a2ef98ec6b7715e083fdcced", "html_url": "https://github.com/rust-lang/rust/commit/e336cbf8f9e26758a2ef98ec6b7715e083fdcced"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "d0b375b0b5846c7fa669bd71fdf596030bfae4b3", "filename": "doc/tutorial.md", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/49014c82688a21e1157877280d449e055ce39b6b/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/49014c82688a21e1157877280d449e055ce39b6b/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=49014c82688a21e1157877280d449e055ce39b6b", "patch": "@@ -499,8 +499,8 @@ types.\n > items.\n \n ~~~~\n-# use std::float;\n-# use std::num::atan;\n+use std::float;\n+use std::num::atan;\n fn angle(vector: (float, float)) -> float {\n     let pi = float::consts::pi;\n     match vector {\n@@ -555,7 +555,7 @@ while cake_amount > 0 {\n `loop` denotes an infinite loop, and is the preferred way of writing `while true`:\n \n ~~~~\n-# use std::int;\n+use std::int;\n let mut x = 5;\n loop {\n     x += x - 3;\n@@ -701,7 +701,7 @@ get at their contents. All variant constructors can be used as\n patterns, as in this definition of `area`:\n \n ~~~~\n-# use std::float;\n+use std::float;\n # struct Point {x: float, y: float}\n # enum Shape { Circle(Point, float), Rectangle(Point, Point) }\n fn area(sh: Shape) -> float {\n@@ -733,7 +733,7 @@ fn point_from_direction(dir: Direction) -> Point {\n Enum variants may also be structs. For example:\n \n ~~~~\n-# use std::float;\n+use std::float;\n # struct Point { x: float, y: float }\n # fn square(x: float) -> float { x * x }\n enum Shape {\n@@ -1599,7 +1599,8 @@ lists back to back. Since that is so unsightly, empty argument lists\n may be omitted from `do` expressions.\n \n ~~~~\n-# use std::task::spawn;\n+use std::task::spawn;\n+\n do spawn {\n    debug!(\"Kablam!\");\n }\n@@ -1728,7 +1729,7 @@ impl Circle {\n To call such a method, just prefix it with the type name and a double colon:\n \n ~~~~\n-# use std::float::consts::pi;\n+use std::float::consts::pi;\n struct Circle { radius: float }\n impl Circle {\n     fn new(area: float) -> Circle { Circle { radius: (area / pi).sqrt() } }\n@@ -1774,7 +1775,7 @@ illegal to copy and pass by value.\n Generic `type`, `struct`, and `enum` declarations follow the same pattern:\n \n ~~~~\n-# use std::hashmap::HashMap;\n+use std::hashmap::HashMap;\n type Set<T> = HashMap<T, ()>;\n \n struct Stack<T> {\n@@ -2000,7 +2001,7 @@ name and a double colon.  The compiler uses type inference to decide which\n implementation to use.\n \n ~~~~\n-# use std::float::consts::pi;\n+use std::float::consts::pi;\n trait Shape { fn new(area: float) -> Self; }\n struct Circle { radius: float }\n struct Square { length: float }\n@@ -2156,7 +2157,7 @@ trait Circle : Shape { fn radius(&self) -> float; }\n Now, we can implement `Circle` on a type only if we also implement `Shape`.\n \n ~~~~\n-# use std::float::consts::pi;\n+use std::float::consts::pi;\n # trait Shape { fn area(&self) -> float; }\n # trait Circle : Shape { fn radius(&self) -> float; }\n # struct Point { x: float, y: float }\n@@ -2191,7 +2192,7 @@ fn radius_times_area<T: Circle>(c: T) -> float {\n Likewise, supertrait methods may also be called on trait objects.\n \n ~~~ {.xfail-test}\n-# use std::float::consts::pi;\n+use std::float::consts::pi;\n # trait Shape { fn area(&self) -> float; }\n # trait Circle : Shape { fn radius(&self) -> float; }\n # struct Point { x: float, y: float }"}]}