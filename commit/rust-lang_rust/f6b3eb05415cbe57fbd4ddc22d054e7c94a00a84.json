{"sha": "f6b3eb05415cbe57fbd4ddc22d054e7c94a00a84", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YjNlYjA1NDE1Y2JlNTdmYmQ0ZGRjMjJkMDU0ZTdjOTRhMDBhODQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-03T14:26:45Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-03T14:26:45Z"}, "message": "Function pointers are only equal to themselves, not to other function pointers to the same function", "tree": {"sha": "9c545711896219a3ac6537e29a0ffd49bbbf52db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c545711896219a3ac6537e29a0ffd49bbbf52db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6b3eb05415cbe57fbd4ddc22d054e7c94a00a84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6b3eb05415cbe57fbd4ddc22d054e7c94a00a84", "html_url": "https://github.com/rust-lang/rust/commit/f6b3eb05415cbe57fbd4ddc22d054e7c94a00a84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6b3eb05415cbe57fbd4ddc22d054e7c94a00a84/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3074fcb7e301c772cfb2301345cb3ee9d5fe3d4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3074fcb7e301c772cfb2301345cb3ee9d5fe3d4c", "html_url": "https://github.com/rust-lang/rust/commit/3074fcb7e301c772cfb2301345cb3ee9d5fe3d4c"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "49cbc90eb10c5dc05623430067afb727fecaeeda", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f6b3eb05415cbe57fbd4ddc22d054e7c94a00a84/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b3eb05415cbe57fbd4ddc22d054e7c94a00a84/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=f6b3eb05415cbe57fbd4ddc22d054e7c94a00a84", "patch": "@@ -305,7 +305,7 @@ pub struct AllocMap<'tcx> {\n     /// Lets you know what an AllocId refers to\n     id_to_type: FxHashMap<AllocId, AllocType<'tcx>>,\n \n-    /// Used to ensure that functions and statics only get one associated AllocId\n+    /// Used to ensure that statics only get one associated AllocId\n     type_interner: FxHashMap<AllocType<'tcx>, AllocId>,\n \n     /// The AllocId to assign to the next requested id.\n@@ -347,11 +347,14 @@ impl<'tcx> AllocMap<'tcx> {\n         id\n     }\n \n-    // FIXME: Check if functions have identity. If not, we should not intern these,\n-    // but instead create a new id per use.\n-    // Alternatively we could just make comparing function pointers an error.\n+    /// Functions cannot be identified by pointers, as asm-equal functions can get deduplicated\n+    /// by the linker and functions can be duplicated across crates.\n+    /// We thus generate a new `AllocId` for every mention of a function. This means that\n+    /// `main as fn() == main as fn()` is false, while `let x = main as fn(); x == x` is true.\n     pub fn create_fn_alloc(&mut self, instance: Instance<'tcx>) -> AllocId {\n-        self.intern(AllocType::Function(instance))\n+        let id = self.reserve();\n+        self.id_to_type.insert(id, AllocType::Function(instance));\n+        id\n     }\n \n     pub fn get(&self, id: AllocId) -> Option<AllocType<'tcx>> {"}]}