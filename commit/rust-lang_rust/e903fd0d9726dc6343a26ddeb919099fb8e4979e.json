{"sha": "e903fd0d9726dc6343a26ddeb919099fb8e4979e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MDNmZDBkOTcyNmRjNjM0M2EyNmRkZWI5MTkwOTlmYjhlNDk3OWU=", "commit": {"author": {"name": "Hannes De Valkeneer", "email": "hannes@de-valkeneer.be", "date": "2020-03-09T21:06:45Z"}, "committer": {"name": "Hannes De Valkeneer", "email": "hannes@de-valkeneer.be", "date": "2020-03-11T21:26:47Z"}, "message": "feat: add debug code lens\n\nRefs #3539", "tree": {"sha": "23c2de00603542c434cc8e413c7d7cc425869cd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23c2de00603542c434cc8e413c7d7cc425869cd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e903fd0d9726dc6343a26ddeb919099fb8e4979e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e903fd0d9726dc6343a26ddeb919099fb8e4979e", "html_url": "https://github.com/rust-lang/rust/commit/e903fd0d9726dc6343a26ddeb919099fb8e4979e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e903fd0d9726dc6343a26ddeb919099fb8e4979e/comments", "author": {"login": "hdevalke", "id": 2261239, "node_id": "MDQ6VXNlcjIyNjEyMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2261239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hdevalke", "html_url": "https://github.com/hdevalke", "followers_url": "https://api.github.com/users/hdevalke/followers", "following_url": "https://api.github.com/users/hdevalke/following{/other_user}", "gists_url": "https://api.github.com/users/hdevalke/gists{/gist_id}", "starred_url": "https://api.github.com/users/hdevalke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hdevalke/subscriptions", "organizations_url": "https://api.github.com/users/hdevalke/orgs", "repos_url": "https://api.github.com/users/hdevalke/repos", "events_url": "https://api.github.com/users/hdevalke/events{/privacy}", "received_events_url": "https://api.github.com/users/hdevalke/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hdevalke", "id": 2261239, "node_id": "MDQ6VXNlcjIyNjEyMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2261239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hdevalke", "html_url": "https://github.com/hdevalke", "followers_url": "https://api.github.com/users/hdevalke/followers", "following_url": "https://api.github.com/users/hdevalke/following{/other_user}", "gists_url": "https://api.github.com/users/hdevalke/gists{/gist_id}", "starred_url": "https://api.github.com/users/hdevalke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hdevalke/subscriptions", "organizations_url": "https://api.github.com/users/hdevalke/orgs", "repos_url": "https://api.github.com/users/hdevalke/repos", "events_url": "https://api.github.com/users/hdevalke/events{/privacy}", "received_events_url": "https://api.github.com/users/hdevalke/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05b4fc6d79060fc3120f92b01119e3a851c37829", "url": "https://api.github.com/repos/rust-lang/rust/commits/05b4fc6d79060fc3120f92b01119e3a851c37829", "html_url": "https://github.com/rust-lang/rust/commit/05b4fc6d79060fc3120f92b01119e3a851c37829"}], "stats": {"total": 107, "additions": 77, "deletions": 30}, "files": [{"sha": "321861b161667a79e520e45e33ed903b7bff321f", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e903fd0d9726dc6343a26ddeb919099fb8e4979e/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e903fd0d9726dc6343a26ddeb919099fb8e4979e/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=e903fd0d9726dc6343a26ddeb919099fb8e4979e", "patch": "@@ -19,50 +19,48 @@ impl CargoTargetSpec {\n     pub(crate) fn runnable_args(\n         spec: Option<CargoTargetSpec>,\n         kind: &RunnableKind,\n-    ) -> Result<Vec<String>> {\n-        let mut res = Vec::new();\n+    ) -> Result<(Vec<String>, Vec<String>)> {\n+        let mut args = Vec::new();\n+        let mut extra_args = Vec::new();\n         match kind {\n             RunnableKind::Test { test_id } => {\n-                res.push(\"test\".to_string());\n+                args.push(\"test\".to_string());\n                 if let Some(spec) = spec {\n-                    spec.push_to(&mut res);\n+                    spec.push_to(&mut args);\n                 }\n-                res.push(\"--\".to_string());\n-                res.push(test_id.to_string());\n+                extra_args.push(test_id.to_string());\n                 if let TestId::Path(_) = test_id {\n-                    res.push(\"--exact\".to_string());\n+                    extra_args.push(\"--exact\".to_string());\n                 }\n-                res.push(\"--nocapture\".to_string());\n+                extra_args.push(\"--nocapture\".to_string());\n             }\n             RunnableKind::TestMod { path } => {\n-                res.push(\"test\".to_string());\n+                args.push(\"test\".to_string());\n                 if let Some(spec) = spec {\n-                    spec.push_to(&mut res);\n+                    spec.push_to(&mut args);\n                 }\n-                res.push(\"--\".to_string());\n-                res.push(path.to_string());\n-                res.push(\"--nocapture\".to_string());\n+                extra_args.push(path.to_string());\n+                extra_args.push(\"--nocapture\".to_string());\n             }\n             RunnableKind::Bench { test_id } => {\n-                res.push(\"bench\".to_string());\n+                args.push(\"bench\".to_string());\n                 if let Some(spec) = spec {\n-                    spec.push_to(&mut res);\n+                    spec.push_to(&mut args);\n                 }\n-                res.push(\"--\".to_string());\n-                res.push(test_id.to_string());\n+                extra_args.push(test_id.to_string());\n                 if let TestId::Path(_) = test_id {\n-                    res.push(\"--exact\".to_string());\n+                    extra_args.push(\"--exact\".to_string());\n                 }\n-                res.push(\"--nocapture\".to_string());\n+                extra_args.push(\"--nocapture\".to_string());\n             }\n             RunnableKind::Bin => {\n-                res.push(\"run\".to_string());\n+                args.push(\"run\".to_string());\n                 if let Some(spec) = spec {\n-                    spec.push_to(&mut res);\n+                    spec.push_to(&mut args);\n                 }\n             }\n         }\n-        Ok(res)\n+        Ok((args, extra_args))\n     }\n \n     pub(crate) fn for_file("}, {"sha": "0442733336bbbb99d753e73edb5bb4fa593c0046", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e903fd0d9726dc6343a26ddeb919099fb8e4979e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e903fd0d9726dc6343a26ddeb919099fb8e4979e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=e903fd0d9726dc6343a26ddeb919099fb8e4979e", "patch": "@@ -381,6 +381,7 @@ pub fn handle_runnables(\n         label,\n         bin: \"cargo\".to_string(),\n         args: check_args,\n+        extra_args: Vec::with_capacity(0),\n         env: FxHashMap::default(),\n         cwd: workspace_root.map(|root| root.to_string_lossy().to_string()),\n     });\n@@ -795,17 +796,29 @@ pub fn handle_code_lens(\n         }\n         .to_string();\n         let r = to_lsp_runnable(&world, file_id, runnable)?;\n+        let range = r.range;\n+        let arguments = vec![to_value(r).unwrap()];\n         let lens = CodeLens {\n-            range: r.range,\n+            range: range.clone(),\n             command: Some(Command {\n                 title,\n                 command: \"rust-analyzer.runSingle\".into(),\n-                arguments: Some(vec![to_value(r).unwrap()]),\n+                arguments: Some(arguments.clone()),\n+            }),\n+            data: None,\n+        };\n+        let debug_lens = CodeLens {\n+            range,\n+            command: Some(Command {\n+                title: \"Debug\".into(),\n+                command: \"rust-analyzer.debugSingle\".into(),\n+                arguments: Some(arguments.clone()),\n             }),\n             data: None,\n         };\n \n         lenses.push(lens);\n+        lenses.push(debug_lens);\n     }\n \n     // Handle impls\n@@ -952,7 +965,7 @@ fn to_lsp_runnable(\n     runnable: Runnable,\n ) -> Result<req::Runnable> {\n     let spec = CargoTargetSpec::for_file(world, file_id)?;\n-    let args = CargoTargetSpec::runnable_args(spec, &runnable.kind)?;\n+    let (args, extra_args) = CargoTargetSpec::runnable_args(spec, &runnable.kind)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let label = match &runnable.kind {\n         RunnableKind::Test { test_id } => format!(\"test {}\", test_id),\n@@ -965,6 +978,7 @@ fn to_lsp_runnable(\n         label,\n         bin: \"cargo\".to_string(),\n         args,\n+        extra_args,\n         env: {\n             let mut m = FxHashMap::default();\n             m.insert(\"RUST_BACKTRACE\".to_string(), \"short\".to_string());\n@@ -973,6 +987,7 @@ fn to_lsp_runnable(\n         cwd: world.workspace_root_for(file_id).map(|root| root.to_string_lossy().to_string()),\n     })\n }\n+\n fn highlight(world: &WorldSnapshot, file_id: FileId) -> Result<Vec<Decoration>> {\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let res = world"}, {"sha": "156328df8fbd14a3381047756ce0d6f35cddef0d", "filename": "crates/rust-analyzer/src/req.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e903fd0d9726dc6343a26ddeb919099fb8e4979e/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e903fd0d9726dc6343a26ddeb919099fb8e4979e/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freq.rs?ref=e903fd0d9726dc6343a26ddeb919099fb8e4979e", "patch": "@@ -169,6 +169,7 @@ pub struct Runnable {\n     pub label: String,\n     pub bin: String,\n     pub args: Vec<String>,\n+    pub extra_args: Vec<String>,\n     pub env: FxHashMap<String, String>,\n     pub cwd: Option<String>,\n }"}, {"sha": "55af6c5e0affaa939bf5a29445762def123fe5de", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e903fd0d9726dc6343a26ddeb919099fb8e4979e/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e903fd0d9726dc6343a26ddeb919099fb8e4979e/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=e903fd0d9726dc6343a26ddeb919099fb8e4979e", "patch": "@@ -75,7 +75,8 @@ fn foo() {\n         RunnablesParams { text_document: server.doc_id(\"lib.rs\"), position: None },\n         json!([\n           {\n-            \"args\": [ \"test\", \"--\", \"foo\", \"--nocapture\" ],\n+            \"args\": [ \"test\" ],\n+            \"extraArgs\": [ \"foo\", \"--nocapture\" ],\n             \"bin\": \"cargo\",\n             \"env\": { \"RUST_BACKTRACE\": \"short\" },\n             \"cwd\": null,\n@@ -90,6 +91,7 @@ fn foo() {\n               \"check\",\n               \"--all\"\n             ],\n+            \"extraArgs\": [],\n             \"bin\": \"cargo\",\n             \"env\": {},\n             \"cwd\": null,\n@@ -147,7 +149,8 @@ fn main() {}\n         },\n         json!([\n           {\n-            \"args\": [ \"test\", \"--package\", \"foo\", \"--test\", \"spam\", \"--\", \"test_eggs\", \"--exact\", \"--nocapture\" ],\n+            \"args\": [ \"test\", \"--package\", \"foo\", \"--test\", \"spam\" ],\n+            \"extraArgs\": [ \"test_eggs\", \"--exact\", \"--nocapture\" ],\n             \"bin\": \"cargo\",\n             \"env\": { \"RUST_BACKTRACE\": \"short\" },\n             \"label\": \"test test_eggs\",\n@@ -165,6 +168,7 @@ fn main() {}\n               \"--test\",\n               \"spam\"\n             ],\n+            \"extraArgs\": [],\n             \"bin\": \"cargo\",\n             \"env\": {},\n             \"cwd\": server.path().join(\"foo\"),"}, {"sha": "7445857218dcc90481ef632f01ffaf364f4a1153", "filename": "editors/code/package.json", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e903fd0d9726dc6343a26ddeb919099fb8e4979e/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/e903fd0d9726dc6343a26ddeb919099fb8e4979e/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=e903fd0d9726dc6343a26ddeb919099fb8e4979e", "patch": "@@ -51,6 +51,9 @@\n         \"typescript-formatter\": \"^7.2.2\",\n         \"vsce\": \"^1.74.0\"\n     },\n+    \"extensionDependencies\": [\n+        \"vadimcn.vscode-lldb\"\n+    ],\n     \"activationEvents\": [\n         \"onLanguage:rust\",\n         \"onCommand:rust-analyzer.analyzerStatus\","}, {"sha": "faa92799c1064421ea735400e3c4f22cca350ac6", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e903fd0d9726dc6343a26ddeb919099fb8e4979e/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e903fd0d9726dc6343a26ddeb919099fb8e4979e/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=e903fd0d9726dc6343a26ddeb919099fb8e4979e", "patch": "@@ -3,6 +3,7 @@ import * as lc from 'vscode-languageclient';\n import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n+import { debug } from 'vscode';\n \n export function run(ctx: Ctx): Cmd {\n     let prevRunnable: RunnableQuickPick | undefined;\n@@ -62,6 +63,31 @@ export function runSingle(ctx: Ctx): Cmd {\n     };\n }\n \n+export function debugSingle(ctx: Ctx): Cmd {\n+    return async (config: ra.Runnable) => {\n+        const editor = ctx.activeRustEditor;\n+        if (!editor) return;\n+\n+        if (config.args[0] === 'run') {\n+            config.args[0] = 'build';\n+        } else {\n+            config.args.push('--no-run');\n+        }\n+\n+        const debugConfig = {\n+            type: \"lldb\",\n+            request: \"launch\",\n+            name: config.label,\n+            cargo: {\n+                args: config.args,\n+            },\n+            args: config.extraArgs,\n+            cwd: config.cwd\n+        };\n+        return debug.startDebugging(undefined, debugConfig);\n+    };\n+}\n+\n class RunnableQuickPick implements vscode.QuickPickItem {\n     public label: string;\n     public description?: string | undefined;\n@@ -87,7 +113,7 @@ function createTask(spec: ra.Runnable): vscode.Task {\n         type: 'cargo',\n         label: spec.label,\n         command: spec.bin,\n-        args: spec.args,\n+        args: spec.extraArgs ? [...spec.args, '--', ...spec.extraArgs] : spec.args,\n         env: spec.env,\n     };\n "}, {"sha": "e01c89cc7c7b03032532cfb38ed1f459e25ef5ea", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e903fd0d9726dc6343a26ddeb919099fb8e4979e/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e903fd0d9726dc6343a26ddeb919099fb8e4979e/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=e903fd0d9726dc6343a26ddeb919099fb8e4979e", "patch": "@@ -83,6 +83,7 @@ export async function activate(context: vscode.ExtensionContext) {\n \n     // Internal commands which are invoked by the server.\n     ctx.registerCommand('runSingle', commands.runSingle);\n+    ctx.registerCommand('debugSingle', commands.debugSingle);\n     ctx.registerCommand('showReferences', commands.showReferences);\n     ctx.registerCommand('applySourceChange', commands.applySourceChange);\n     ctx.registerCommand('selectAndApplySourceChange', commands.selectAndApplySourceChange);"}, {"sha": "e09a203c9faea835254ea8d1cba6cc80f5ff2e21", "filename": "editors/code/src/rust-analyzer-api.ts", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e903fd0d9726dc6343a26ddeb919099fb8e4979e/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e903fd0d9726dc6343a26ddeb919099fb8e4979e/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts?ref=e903fd0d9726dc6343a26ddeb919099fb8e4979e", "patch": "@@ -80,13 +80,12 @@ export interface Runnable {\n     label: string;\n     bin: string;\n     args: Vec<string>;\n+    extraArgs: Vec<string>;\n     env: FxHashMap<string, string>;\n     cwd: Option<string>;\n }\n export const runnables = request<RunnablesParams, Vec<Runnable>>(\"runnables\");\n \n-\n-\n export type InlayHint = InlayHint.TypeHint | InlayHint.ParamHint;\n \n export namespace InlayHint {"}]}