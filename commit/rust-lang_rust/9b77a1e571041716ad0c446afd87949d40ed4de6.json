{"sha": "9b77a1e571041716ad0c446afd87949d40ed4de6", "node_id": "C_kwDOAAsO6NoAKDliNzdhMWU1NzEwNDE3MTZhZDBjNDQ2YWZkODc5NDlkNDBlZDRkZTY", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "git@hkmatsumoto.com", "date": "2021-12-02T10:22:46Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "git@hkmatsumoto.com", "date": "2021-12-04T14:51:56Z"}, "message": "Don't suggest types whose inner type is erroneous\n\nCurrently, we check if the returned type equals to `tcx.ty_error()` not to emit\nerroneous types, but this has a pitfall; for example,\n`Option<[type error]> != tcx.ty_error()` holds.", "tree": {"sha": "b4885e1b557d5941abaaff036588cd8869c36a43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4885e1b557d5941abaaff036588cd8869c36a43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b77a1e571041716ad0c446afd87949d40ed4de6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b77a1e571041716ad0c446afd87949d40ed4de6", "html_url": "https://github.com/rust-lang/rust/commit/9b77a1e571041716ad0c446afd87949d40ed4de6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b77a1e571041716ad0c446afd87949d40ed4de6/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "887999d163bace7e79370b952bdd1f930ff4cdd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/887999d163bace7e79370b952bdd1f930ff4cdd5", "html_url": "https://github.com/rust-lang/rust/commit/887999d163bace7e79370b952bdd1f930ff4cdd5"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "f88260c0a8bf54d8238ccda7025773ba0a47b9d8", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b77a1e571041716ad0c446afd87949d40ed4de6/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b77a1e571041716ad0c446afd87949d40ed4de6/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=9b77a1e571041716ad0c446afd87949d40ed4de6", "patch": "@@ -41,7 +41,7 @@ use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::Discr;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, AdtKind, Const, DefIdTree, Ty, TyCtxt};\n-use rustc_middle::ty::{ReprOptions, ToPredicate, WithConstness};\n+use rustc_middle::ty::{ReprOptions, ToPredicate, TypeFoldable, WithConstness};\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -1779,7 +1779,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n                     visitor.visit_ty(ty);\n                     let mut diag = bad_placeholder_type(tcx, visitor.0, \"return type\");\n                     let ret_ty = fn_sig.skip_binder().output();\n-                    if ret_ty != tcx.ty_error() {\n+                    if !ret_ty.references_error() {\n                         if !ret_ty.is_closure() {\n                             let ret_ty_str = match ret_ty.kind() {\n                                 // Suggest a function pointer return type instead of a unique function definition"}, {"sha": "0b942d6d94f84199aaf7695547821ecdab8dec41", "filename": "src/test/ui/typeck/issue-91450-inner-ty-error.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b77a1e571041716ad0c446afd87949d40ed4de6/src%2Ftest%2Fui%2Ftypeck%2Fissue-91450-inner-ty-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b77a1e571041716ad0c446afd87949d40ed4de6/src%2Ftest%2Fui%2Ftypeck%2Fissue-91450-inner-ty-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91450-inner-ty-error.rs?ref=9b77a1e571041716ad0c446afd87949d40ed4de6", "patch": "@@ -0,0 +1,7 @@\n+// Regression test for #91450.\n+// This test ensures that the compiler does not suggest `Foo<[type error]>` in diagnostic messages.\n+\n+fn foo() -> Option<_> {} //~ ERROR: [E0308]\n+//~^ ERROR: the type placeholder `_` is not allowed\n+\n+fn main() {}"}, {"sha": "314fe561803687e2707b845de4a4d4679490cc2b", "filename": "src/test/ui/typeck/issue-91450-inner-ty-error.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9b77a1e571041716ad0c446afd87949d40ed4de6/src%2Ftest%2Fui%2Ftypeck%2Fissue-91450-inner-ty-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b77a1e571041716ad0c446afd87949d40ed4de6/src%2Ftest%2Fui%2Ftypeck%2Fissue-91450-inner-ty-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91450-inner-ty-error.stderr?ref=9b77a1e571041716ad0c446afd87949d40ed4de6", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-91450-inner-ty-error.rs:4:13\n+   |\n+LL | fn foo() -> Option<_> {}\n+   |    ---      ^^^^^^^^^ expected enum `Option`, found `()`\n+   |    |\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n+   |\n+   = note:   expected enum `Option<_>`\n+           found unit type `()`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/issue-91450-inner-ty-error.rs:4:20\n+   |\n+LL | fn foo() -> Option<_> {}\n+   |                    ^ not allowed in type signatures\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0121, E0308.\n+For more information about an error, try `rustc --explain E0121`."}]}