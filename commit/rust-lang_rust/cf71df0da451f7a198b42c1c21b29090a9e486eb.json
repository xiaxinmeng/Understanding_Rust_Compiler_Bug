{"sha": "cf71df0da451f7a198b42c1c21b29090a9e486eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNzFkZjBkYTQ1MWY3YTE5OGI0MmMxYzIxYjI5MDkwYTllNDg2ZWI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-30T16:58:42Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-30T16:58:42Z"}, "message": "Rustup to rustc 1.31.0-nightly (d586d5d2f 2018-10-29)", "tree": {"sha": "3026c0467f60be0be639edbfc8be12024120ab4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3026c0467f60be0be639edbfc8be12024120ab4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf71df0da451f7a198b42c1c21b29090a9e486eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf71df0da451f7a198b42c1c21b29090a9e486eb", "html_url": "https://github.com/rust-lang/rust/commit/cf71df0da451f7a198b42c1c21b29090a9e486eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf71df0da451f7a198b42c1c21b29090a9e486eb/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72f47d698e1da16eaae5fd273a235d27219a3e9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/72f47d698e1da16eaae5fd273a235d27219a3e9e", "html_url": "https://github.com/rust-lang/rust/commit/72f47d698e1da16eaae5fd273a235d27219a3e9e"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "009738659123597d12f930b31a2638ff460ef6a2", "filename": "src/constant.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cf71df0da451f7a198b42c1c21b29090a9e486eb/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf71df0da451f7a198b42c1c21b29090a9e486eb/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=cf71df0da451f7a198b42c1c21b29090a9e486eb", "patch": "@@ -4,7 +4,7 @@ use crate::rustc::mir::interpret::{\n     read_target_uint, AllocId, AllocType, Allocation, ConstValue, EvalResult, GlobalId, Scalar,\n };\n use crate::rustc::ty::Const;\n-use crate::rustc_mir::interpret::{EvalContext, Machine, Memory, MemoryKind, OpTy, PlaceTy, Pointer};\n+use crate::rustc_mir::interpret::{EvalContext, Machine, Memory, MemoryKind, MemPlace, OpTy, PlaceTy, Pointer};\n use std::borrow::Cow;\n \n #[derive(Default)]\n@@ -131,7 +131,7 @@ fn trans_const_place<'a, 'tcx: 'a>(\n         let op = ecx.const_to_op(const_)?;\n         let ptr = ecx.allocate(op.layout, MemoryKind::Stack)?;\n         ecx.copy_op(op, ptr.into())?;\n-        let alloc = ecx.memory.get(ptr.to_ptr()?.alloc_id)?;\n+        let alloc = ecx.memory().get(ptr.to_ptr()?.alloc_id)?;\n         Ok(fx.tcx.intern_const_alloc(alloc.clone()))\n     };\n     let alloc = result().expect(\"unable to convert ConstValue to Allocation\");\n@@ -318,10 +318,6 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n         panic!();\n     }\n \n-    fn static_with_default_tag(alloc: &Allocation) -> Cow<Allocation<()>> {\n-        Cow::Borrowed(alloc)\n-    }\n-\n     fn ptr_op(\n         _: &EvalContext<'a, 'mir, 'tcx, Self>,\n         _: mir::BinOp,\n@@ -337,11 +333,19 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n         panic!();\n     }\n \n-    fn tag_reference(_: &mut EvalContext<'a, 'mir, 'tcx, Self>, _: Pointer<()>, _: Ty<'tcx>, _: Size, _: Option<BorrowKind>) -> EvalResult<'tcx> {\n-        panic!();\n+    fn tag_reference(_: &mut EvalContext<'a, 'mir, 'tcx, Self>, _: MemPlace, _: Ty<'tcx>, _: Size, _: Option<crate::rustc::hir::Mutability>) -> EvalResult<'tcx, MemPlace> {\n+        panic!()\n     }\n \n-    fn tag_dereference(_: &EvalContext<'a, 'mir, 'tcx, Self>, _: Pointer<()>, _: Ty<'tcx>) -> EvalResult<'tcx> {\n+    fn tag_dereference(_: &EvalContext<'a, 'mir, 'tcx, Self>, _: MemPlace, _: Ty<'tcx>, _: Size, _: Option<crate::rustc::hir::Mutability>) -> EvalResult<'tcx, MemPlace> {\n         panic!();\n     }\n+\n+    fn adjust_static_allocation(alloc: &Allocation) -> Cow<'_, Allocation> {\n+        Cow::Borrowed(alloc)\n+    }\n+\n+    fn tag_new_allocation(_: &mut EvalContext<'a, 'mir, 'tcx, Self>, ptr: Pointer, _: MemoryKind<!>) -> EvalResult<'tcx, Pointer> {\n+        Ok(ptr)\n+    }\n }"}]}