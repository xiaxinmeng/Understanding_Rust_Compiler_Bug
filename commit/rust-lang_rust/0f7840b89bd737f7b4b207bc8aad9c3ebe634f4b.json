{"sha": "0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNzg0MGI4OWJkNzM3ZjdiNGIyMDdiYzhhYWQ5YzNlYmU2MzRmNGI=", "commit": {"author": {"name": "Ana-Maria Mihalache", "email": "mihalacheana.maria@yahoo.com", "date": "2020-03-04T14:13:00Z"}, "committer": {"name": "Ana-Maria Mihalache", "email": "mihalacheana.maria@yahoo.com", "date": "2020-03-25T15:06:48Z"}, "message": "Rename LayoutDetails to just Layout.", "tree": {"sha": "78da4c09a1ac6e93a22d693cdfddea8ce77cf2d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78da4c09a1ac6e93a22d693cdfddea8ce77cf2d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b", "html_url": "https://github.com/rust-lang/rust/commit/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/comments", "author": {"login": "anyska", "id": 13694484, "node_id": "MDQ6VXNlcjEzNjk0NDg0", "avatar_url": "https://avatars.githubusercontent.com/u/13694484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anyska", "html_url": "https://github.com/anyska", "followers_url": "https://api.github.com/users/anyska/followers", "following_url": "https://api.github.com/users/anyska/following{/other_user}", "gists_url": "https://api.github.com/users/anyska/gists{/gist_id}", "starred_url": "https://api.github.com/users/anyska/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anyska/subscriptions", "organizations_url": "https://api.github.com/users/anyska/orgs", "repos_url": "https://api.github.com/users/anyska/repos", "events_url": "https://api.github.com/users/anyska/events{/privacy}", "received_events_url": "https://api.github.com/users/anyska/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anyska", "id": 13694484, "node_id": "MDQ6VXNlcjEzNjk0NDg0", "avatar_url": "https://avatars.githubusercontent.com/u/13694484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anyska", "html_url": "https://github.com/anyska", "followers_url": "https://api.github.com/users/anyska/followers", "following_url": "https://api.github.com/users/anyska/following{/other_user}", "gists_url": "https://api.github.com/users/anyska/gists{/gist_id}", "starred_url": "https://api.github.com/users/anyska/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anyska/subscriptions", "organizations_url": "https://api.github.com/users/anyska/orgs", "repos_url": "https://api.github.com/users/anyska/repos", "events_url": "https://api.github.com/users/anyska/events{/privacy}", "received_events_url": "https://api.github.com/users/anyska/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdb50c6f2507319f29104a25765bfb79ad53395c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdb50c6f2507319f29104a25765bfb79ad53395c", "html_url": "https://github.com/rust-lang/rust/commit/cdb50c6f2507319f29104a25765bfb79ad53395c"}], "stats": {"total": 152, "additions": 73, "deletions": 79}, "files": [{"sha": "ae542cec170a3ee7146142a057373b4744fde8f1", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b", "patch": "@@ -11,7 +11,7 @@\n macro_rules! arena_types {\n     ($macro:path, $args:tt, $tcx:lifetime) => (\n         $macro!($args, [\n-            [] layouts: rustc::ty::layout::LayoutDetails,\n+            [] layouts: rustc::ty::layout::Layout,\n             [] generics: rustc::ty::Generics,\n             [] trait_def: rustc::ty::TraitDef,\n             [] adt_def: rustc::ty::AdtDef,"}, {"sha": "1ca72def9b9086593a02b29d73ccc5d938742491", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b", "patch": "@@ -738,7 +738,7 @@ rustc_queries! {\n \n         query layout_raw(\n             env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>\n-        ) -> Result<&'tcx ty::layout::LayoutDetails, ty::layout::LayoutError<'tcx>> {\n+        ) -> Result<&'tcx ty::layout::Layout, ty::layout::LayoutError<'tcx>> {\n             desc { \"computing layout of `{}`\", env.value }\n         }\n     }"}, {"sha": "c1d13b0353ebbb138a5643a91c77ba3ec4094153", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b", "patch": "@@ -20,7 +20,7 @@ use crate::mir::{\n };\n use crate::traits;\n use crate::traits::{Clause, Clauses, Goal, GoalKind, Goals};\n-use crate::ty::layout::{LayoutDetails, TargetDataLayout, VariantIdx};\n+use crate::ty::layout::{Layout, TargetDataLayout, VariantIdx};\n use crate::ty::query;\n use crate::ty::steal::Steal;\n use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n@@ -985,7 +985,7 @@ pub struct GlobalCtxt<'tcx> {\n     /// Stores memory for globals (statics/consts).\n     pub alloc_map: Lock<interpret::AllocMap<'tcx>>,\n \n-    layout_interner: ShardedHashMap<&'tcx LayoutDetails, ()>,\n+    layout_interner: ShardedHashMap<&'tcx Layout, ()>,\n \n     output_filenames: Arc<OutputFilenames>,\n }\n@@ -1040,7 +1040,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.const_stability_interner.intern(stab, |stab| self.arena.alloc(stab))\n     }\n \n-    pub fn intern_layout(self, layout: LayoutDetails) -> &'tcx LayoutDetails {\n+    pub fn intern_layout(self, layout: Layout) -> &'tcx Layout {\n         self.layout_interner.intern(layout, |layout| self.arena.alloc(layout))\n     }\n "}, {"sha": "1ce3d4d6bec4d2662e794dfa57c9dab4be720efc", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 41, "deletions": 48, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b", "patch": "@@ -181,7 +181,7 @@ impl<'tcx> fmt::Display for LayoutError<'tcx> {\n fn layout_raw<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n-) -> Result<&'tcx LayoutDetails, LayoutError<'tcx>> {\n+) -> Result<&'tcx Layout, LayoutError<'tcx>> {\n     ty::tls::with_related_context(tcx, move |icx| {\n         let rec_limit = *tcx.sess.recursion_limit.get();\n         let (param_env, ty) = query.into_parts();\n@@ -240,7 +240,7 @@ fn invert_mapping(map: &[u32]) -> Vec<u32> {\n }\n \n impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n-    fn scalar_pair(&self, a: Scalar, b: Scalar) -> LayoutDetails {\n+    fn scalar_pair(&self, a: Scalar, b: Scalar) -> Layout {\n         let dl = self.data_layout();\n         let b_align = b.value.align(dl);\n         let align = a.value.align(dl).max(b_align).max(dl.aggregate_align);\n@@ -254,7 +254,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             .chain(Niche::from_scalar(dl, Size::ZERO, a.clone()))\n             .max_by_key(|niche| niche.available(dl));\n \n-        LayoutDetails {\n+        Layout {\n             variants: Variants::Single { index: VariantIdx::new(0) },\n             fields: FieldPlacement::Arbitrary {\n                 offsets: vec![Size::ZERO, b_offset],\n@@ -273,7 +273,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         fields: &[TyLayout<'_>],\n         repr: &ReprOptions,\n         kind: StructKind,\n-    ) -> Result<LayoutDetails, LayoutError<'tcx>> {\n+    ) -> Result<Layout, LayoutError<'tcx>> {\n         let dl = self.data_layout();\n         let pack = repr.pack;\n         if pack.is_some() && repr.align.is_some() {\n@@ -422,17 +422,11 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     (\n                         Some((\n                             i,\n-                            &TyLayout {\n-                                details: &LayoutDetails { abi: Abi::Scalar(ref a), .. },\n-                                ..\n-                            },\n+                            &TyLayout { layout: &Layout { abi: Abi::Scalar(ref a), .. }, .. },\n                         )),\n                         Some((\n                             j,\n-                            &TyLayout {\n-                                details: &LayoutDetails { abi: Abi::Scalar(ref b), .. },\n-                                ..\n-                            },\n+                            &TyLayout { layout: &Layout { abi: Abi::Scalar(ref b), .. }, .. },\n                         )),\n                         None,\n                     ) => {\n@@ -470,7 +464,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             abi = Abi::Uninhabited;\n         }\n \n-        Ok(LayoutDetails {\n+        Ok(Layout {\n             variants: Variants::Single { index: VariantIdx::new(0) },\n             fields: FieldPlacement::Arbitrary { offsets, memory_index },\n             abi,\n@@ -480,7 +474,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         })\n     }\n \n-    fn layout_raw_uncached(&self, ty: Ty<'tcx>) -> Result<&'tcx LayoutDetails, LayoutError<'tcx>> {\n+    fn layout_raw_uncached(&self, ty: Ty<'tcx>) -> Result<&'tcx Layout, LayoutError<'tcx>> {\n         let tcx = self.tcx;\n         let param_env = self.param_env;\n         let dl = self.data_layout();\n@@ -489,8 +483,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             assert!(bits <= 128);\n             Scalar { value, valid_range: 0..=(!0 >> (128 - bits)) }\n         };\n-        let scalar =\n-            |value: Primitive| tcx.intern_layout(LayoutDetails::scalar(self, scalar_unit(value)));\n+        let scalar = |value: Primitive| tcx.intern_layout(Layout::scalar(self, scalar_unit(value)));\n \n         let univariant = |fields: &[TyLayout<'_>], repr: &ReprOptions, kind| {\n             Ok(tcx.intern_layout(self.univariant_uninterned(ty, fields, repr, kind)?))\n@@ -499,11 +492,11 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n         Ok(match ty.kind {\n             // Basic scalars.\n-            ty::Bool => tcx.intern_layout(LayoutDetails::scalar(\n+            ty::Bool => tcx.intern_layout(Layout::scalar(\n                 self,\n                 Scalar { value: Int(I8, false), valid_range: 0..=1 },\n             )),\n-            ty::Char => tcx.intern_layout(LayoutDetails::scalar(\n+            ty::Char => tcx.intern_layout(Layout::scalar(\n                 self,\n                 Scalar { value: Int(I32, false), valid_range: 0..=0x10FFFF },\n             )),\n@@ -516,11 +509,11 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             ty::FnPtr(_) => {\n                 let mut ptr = scalar_unit(Pointer);\n                 ptr.valid_range = 1..=*ptr.valid_range.end();\n-                tcx.intern_layout(LayoutDetails::scalar(self, ptr))\n+                tcx.intern_layout(Layout::scalar(self, ptr))\n             }\n \n             // The never type.\n-            ty::Never => tcx.intern_layout(LayoutDetails {\n+            ty::Never => tcx.intern_layout(Layout {\n                 variants: Variants::Single { index: VariantIdx::new(0) },\n                 fields: FieldPlacement::Union(0),\n                 abi: Abi::Uninhabited,\n@@ -538,13 +531,13 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n                 let pointee = tcx.normalize_erasing_regions(param_env, pointee);\n                 if pointee.is_sized(tcx.at(DUMMY_SP), param_env) {\n-                    return Ok(tcx.intern_layout(LayoutDetails::scalar(self, data_ptr)));\n+                    return Ok(tcx.intern_layout(Layout::scalar(self, data_ptr)));\n                 }\n \n                 let unsized_part = tcx.struct_tail_erasing_lifetimes(pointee, param_env);\n                 let metadata = match unsized_part.kind {\n                     ty::Foreign(..) => {\n-                        return Ok(tcx.intern_layout(LayoutDetails::scalar(self, data_ptr)));\n+                        return Ok(tcx.intern_layout(Layout::scalar(self, data_ptr)));\n                     }\n                     ty::Slice(_) | ty::Str => scalar_unit(Int(dl.ptr_sized_integer(), false)),\n                     ty::Dynamic(..) => {\n@@ -581,7 +574,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n                 let largest_niche = if count != 0 { element.largest_niche.clone() } else { None };\n \n-                tcx.intern_layout(LayoutDetails {\n+                tcx.intern_layout(Layout {\n                     variants: Variants::Single { index: VariantIdx::new(0) },\n                     fields: FieldPlacement::Array { stride: element.size, count },\n                     abi,\n@@ -592,7 +585,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             }\n             ty::Slice(element) => {\n                 let element = self.layout_of(element)?;\n-                tcx.intern_layout(LayoutDetails {\n+                tcx.intern_layout(Layout {\n                     variants: Variants::Single { index: VariantIdx::new(0) },\n                     fields: FieldPlacement::Array { stride: element.size, count: 0 },\n                     abi: Abi::Aggregate { sized: false },\n@@ -601,7 +594,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     size: Size::ZERO,\n                 })\n             }\n-            ty::Str => tcx.intern_layout(LayoutDetails {\n+            ty::Str => tcx.intern_layout(Layout {\n                 variants: Variants::Single { index: VariantIdx::new(0) },\n                 fields: FieldPlacement::Array { stride: Size::from_bytes(1), count: 0 },\n                 abi: Abi::Aggregate { sized: false },\n@@ -670,7 +663,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 let align = dl.vector_align(size);\n                 let size = size.align_to(align.abi);\n \n-                tcx.intern_layout(LayoutDetails {\n+                tcx.intern_layout(Layout {\n                     variants: Variants::Single { index: VariantIdx::new(0) },\n                     fields: FieldPlacement::Array { stride: element.size, count },\n                     abi: Abi::Vector { element: scalar, count },\n@@ -746,7 +739,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                         align = align.min(AbiAndPrefAlign::new(pack));\n                     }\n \n-                    return Ok(tcx.intern_layout(LayoutDetails {\n+                    return Ok(tcx.intern_layout(Layout {\n                         variants: Variants::Single { index },\n                         fields: FieldPlacement::Union(variants[index].len()),\n                         abi,\n@@ -970,7 +963,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                             let largest_niche =\n                                 Niche::from_scalar(dl, offset, niche_scalar.clone());\n \n-                            return Ok(tcx.intern_layout(LayoutDetails {\n+                            return Ok(tcx.intern_layout(Layout {\n                                 variants: Variants::Multiple {\n                                     discr: niche_scalar,\n                                     discr_kind: DiscriminantKind::Niche {\n@@ -1165,7 +1158,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                                 break;\n                             }\n                         };\n-                        let prim = match field.details.abi {\n+                        let prim = match field.abi {\n                             Abi::Scalar(ref scalar) => scalar.value,\n                             _ => {\n                                 common_prim = None;\n@@ -1212,7 +1205,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n                 let largest_niche = Niche::from_scalar(dl, Size::ZERO, tag.clone());\n \n-                tcx.intern_layout(LayoutDetails {\n+                tcx.intern_layout(Layout {\n                     variants: Variants::Multiple {\n                         discr: tag,\n                         discr_kind: DiscriminantKind::Tag,\n@@ -1243,7 +1236,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             | ty::Placeholder(..)\n             | ty::UnnormalizedProjection(..)\n             | ty::GeneratorWitness(..)\n-            | ty::Infer(_) => bug!(\"LayoutDetails::compute: unexpected type `{}`\", ty),\n+            | ty::Infer(_) => bug!(\"Layout::compute: unexpected type `{}`\", ty),\n \n             ty::Param(_) | ty::Error => {\n                 return Err(LayoutError::Unknown(ty));\n@@ -1390,7 +1383,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         ty: Ty<'tcx>,\n         def_id: hir::def_id::DefId,\n         substs: SubstsRef<'tcx>,\n-    ) -> Result<&'tcx LayoutDetails, LayoutError<'tcx>> {\n+    ) -> Result<&'tcx Layout, LayoutError<'tcx>> {\n         use SavedLocalEligibility::*;\n         let tcx = self.tcx;\n \n@@ -1409,8 +1402,8 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         let discr_int = Integer::fit_unsigned(max_discr);\n         let discr_int_ty = discr_int.to_ty(tcx, false);\n         let discr = Scalar { value: Primitive::Int(discr_int, false), valid_range: 0..=max_discr };\n-        let discr_layout = self.tcx.intern_layout(LayoutDetails::scalar(self, discr.clone()));\n-        let discr_layout = TyLayout { ty: discr_int_ty, details: discr_layout };\n+        let discr_layout = self.tcx.intern_layout(Layout::scalar(self, discr.clone()));\n+        let discr_layout = TyLayout { ty: discr_int_ty, layout: discr_layout };\n \n         let promoted_layouts = ineligible_locals\n             .iter()\n@@ -1559,7 +1552,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             Abi::Aggregate { sized: true }\n         };\n \n-        let layout = tcx.intern_layout(LayoutDetails {\n+        let layout = tcx.intern_layout(Layout {\n             variants: Variants::Multiple {\n                 discr,\n                 discr_kind: DiscriminantKind::Tag,\n@@ -1908,8 +1901,8 @@ impl<'tcx> LayoutOf for LayoutCx<'tcx, TyCtxt<'tcx>> {\n     fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyLayout {\n         let param_env = self.param_env.with_reveal_all();\n         let ty = self.tcx.normalize_erasing_regions(param_env, ty);\n-        let details = self.tcx.layout_raw(param_env.and(ty))?;\n-        let layout = TyLayout { ty, details };\n+        let layout = self.tcx.layout_raw(param_env.and(ty))?;\n+        let layout = TyLayout { ty, layout };\n \n         // N.B., this recording is normally disabled; when enabled, it\n         // can however trigger recursive invocations of `layout_of`.\n@@ -1932,8 +1925,8 @@ impl LayoutOf for LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n     fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyLayout {\n         let param_env = self.param_env.with_reveal_all();\n         let ty = self.tcx.normalize_erasing_regions(param_env, ty);\n-        let details = self.tcx.layout_raw(param_env.and(ty))?;\n-        let layout = TyLayout { ty, details };\n+        let layout = self.tcx.layout_raw(param_env.and(ty))?;\n+        let layout = TyLayout { ty, layout };\n \n         // N.B., this recording is normally disabled; when enabled, it\n         // can however trigger recursive invocations of `layout_of`.\n@@ -1982,29 +1975,29 @@ where\n         + HasParamEnv<'tcx>,\n {\n     fn for_variant(this: TyLayout<'tcx>, cx: &C, variant_index: VariantIdx) -> TyLayout<'tcx> {\n-        let details = match this.variants {\n+        let layout = match this.variants {\n             Variants::Single { index }\n                 // If all variants but one are uninhabited, the variant layout is the enum layout.\n                 if index == variant_index &&\n                 // Don't confuse variants of uninhabited enums with the enum itself.\n                 // For more details see https://github.com/rust-lang/rust/issues/69763.\n                 this.fields != FieldPlacement::Union(0) =>\n             {\n-                this.details\n+                this.layout\n             }\n \n             Variants::Single { index } => {\n                 // Deny calling for_variant more than once for non-Single enums.\n-                if let Ok(layout) = cx.layout_of(this.ty).to_result() {\n-                    assert_eq!(layout.variants, Variants::Single { index });\n+                if let Ok(original_layout) = cx.layout_of(this.ty).to_result() {\n+                    assert_eq!(original_layout.variants, Variants::Single { index });\n                 }\n \n                 let fields = match this.ty.kind {\n                     ty::Adt(def, _) => def.variants[variant_index].fields.len(),\n                     _ => bug!(),\n                 };\n                 let tcx = cx.tcx();\n-                tcx.intern_layout(LayoutDetails {\n+                tcx.intern_layout(Layout {\n                     variants: Variants::Single { index: variant_index },\n                     fields: FieldPlacement::Union(fields),\n                     abi: Abi::Uninhabited,\n@@ -2017,17 +2010,17 @@ where\n             Variants::Multiple { ref variants, .. } => &variants[variant_index],\n         };\n \n-        assert_eq!(details.variants, Variants::Single { index: variant_index });\n+        assert_eq!(layout.variants, Variants::Single { index: variant_index });\n \n-        TyLayout { ty: this.ty, details }\n+        TyLayout { ty: this.ty, layout }\n     }\n \n     fn field(this: TyLayout<'tcx>, cx: &C, i: usize) -> C::TyLayout {\n         let tcx = cx.tcx();\n         let discr_layout = |discr: &Scalar| -> C::TyLayout {\n-            let layout = LayoutDetails::scalar(cx, discr.clone());\n+            let layout = Layout::scalar(cx, discr.clone());\n             MaybeResult::from(Ok(TyLayout {\n-                details: tcx.intern_layout(layout),\n+                layout: tcx.intern_layout(layout),\n                 ty: discr.value.to_ty(tcx),\n             }))\n         };"}, {"sha": "e885132fe2a0e3e50771c80cfb6ccf1e5b7a5188", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b", "patch": "@@ -219,7 +219,7 @@ pub(super) fn from_known_layout<'tcx>(\n             if cfg!(debug_assertions) {\n                 let layout2 = compute()?;\n                 assert_eq!(\n-                    layout.details, layout2.details,\n+                    layout.layout, layout2.layout,\n                     \"mismatch in layout of supposedly equal-layout types {:?} and {:?}\",\n                     layout.ty, layout2.ty\n                 );"}, {"sha": "9c08ac9fc771d7e906c18c2c6ea58b76ddab1ad7", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b", "patch": "@@ -853,7 +853,7 @@ where\n         // We do NOT compare the types for equality, because well-typed code can\n         // actually \"transmute\" `&mut T` to `&T` in an assignment without a cast.\n         assert!(\n-            src.layout.details == dest.layout.details,\n+            src.layout.layout == dest.layout.layout,\n             \"Layout mismatch when copying!\\nsrc: {:#?}\\ndest: {:#?}\",\n             src,\n             dest\n@@ -907,7 +907,7 @@ where\n         src: OpTy<'tcx, M::PointerTag>,\n         dest: PlaceTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx> {\n-        if src.layout.details == dest.layout.details {\n+        if src.layout.layout == dest.layout.layout {\n             // Fast path: Just use normal `copy_op`\n             return self.copy_op(src, dest);\n         }"}, {"sha": "3dc7d646825d1dbd9c6895cec3b2b7ff58ba8759", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b", "patch": "@@ -688,7 +688,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                                 let ty1 = substs[0].expect_ty();\n                                 let ty2 = substs[1].expect_ty();\n                                 let ty_is_scalar = |ty| {\n-                                    this.ecx.layout_of(ty).ok().map(|ty| ty.details.abi.is_scalar())\n+                                    this.ecx.layout_of(ty).ok().map(|layout| layout.abi.is_scalar())\n                                         == Some(true)\n                                 };\n                                 if ty_is_scalar(ty1) && ty_is_scalar(ty2) {"}, {"sha": "7178e614f0a97390915c4e37cec3cc6f63929304", "filename": "src/librustc_mir/transform/uninhabited_enum_branching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs?ref=0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b", "patch": "@@ -53,7 +53,7 @@ fn variant_discriminants<'tcx>(\n     ty: Ty<'tcx>,\n     tcx: TyCtxt<'tcx>,\n ) -> Vec<u128> {\n-    match &layout.details.variants {\n+    match &layout.variants {\n         Variants::Single { index } => vec![index.as_u32() as u128],\n         Variants::Multiple { variants, .. } => variants\n             .iter_enumerated()"}, {"sha": "f59a2c2ea87603bd145d20d049f3fece006e253e", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b", "patch": "@@ -790,7 +790,7 @@ pub enum Variants {\n         discr: Scalar,\n         discr_kind: DiscriminantKind,\n         discr_index: usize,\n-        variants: IndexVec<VariantIdx, LayoutDetails>,\n+        variants: IndexVec<VariantIdx, Layout>,\n     },\n }\n \n@@ -873,7 +873,7 @@ impl Niche {\n }\n \n #[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n-pub struct LayoutDetails {\n+pub struct Layout {\n     /// Says where the fields are located within the layout.\n     /// Primitives and uninhabited enums appear as unions without fields.\n     pub fields: FieldPlacement,\n@@ -904,12 +904,12 @@ pub struct LayoutDetails {\n     pub size: Size,\n }\n \n-impl LayoutDetails {\n+impl Layout {\n     pub fn scalar<C: HasDataLayout>(cx: &C, scalar: Scalar) -> Self {\n         let largest_niche = Niche::from_scalar(cx, Size::ZERO, scalar.clone());\n         let size = scalar.value.size(cx);\n         let align = scalar.value.align(cx);\n-        LayoutDetails {\n+        Layout {\n             variants: Variants::Single { index: VariantIdx::new(0) },\n             fields: FieldPlacement::Union(0),\n             abi: Abi::Scalar(scalar),\n@@ -920,23 +920,24 @@ impl LayoutDetails {\n     }\n }\n \n-/// The details of the layout of a type, alongside the type itself.\n+/// The layout of a type, alongside the type itself.\n /// Provides various type traversal APIs (e.g., recursing into fields).\n ///\n-/// Note that the details are NOT guaranteed to always be identical\n-/// to those obtained from `layout_of(ty)`, as we need to produce\n+/// Note that the layout is NOT guaranteed to always be identical\n+/// to that obtained from `layout_of(ty)`, as we need to produce\n /// layouts for which Rust types do not exist, such as enum variants\n /// or synthetic fields of enums (i.e., discriminants) and fat pointers.\n+// FIXME: rename to TyAndLayout.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct TyLayout<'a, Ty> {\n     pub ty: Ty,\n-    pub details: &'a LayoutDetails,\n+    pub layout: &'a Layout,\n }\n \n impl<'a, Ty> Deref for TyLayout<'a, Ty> {\n-    type Target = &'a LayoutDetails;\n-    fn deref(&self) -> &&'a LayoutDetails {\n-        &self.details\n+    type Target = &'a Layout;\n+    fn deref(&self) -> &&'a Layout {\n+        &self.layout\n     }\n }\n \n@@ -1097,7 +1098,7 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n         };\n         if !valid {\n             // This is definitely not okay.\n-            trace!(\"might_permit_raw_init({:?}, zero={}): not valid\", self.details, zero);\n+            trace!(\"might_permit_raw_init({:?}, zero={}): not valid\", self.layout, zero);\n             return Ok(false);\n         }\n "}, {"sha": "c71f2331759b0702fa5bf186655f49f266b5047b", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b", "patch": "@@ -215,7 +215,7 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: DefId) {\n                             let ty_b = field.ty(tcx, substs_b);\n \n                             if let Ok(layout) = tcx.layout_of(param_env.and(ty_a)) {\n-                                if layout.is_zst() && layout.details.align.abi.bytes() == 1 {\n+                                if layout.is_zst() && layout.align.abi.bytes() == 1 {\n                                     // ignore ZST fields with alignment of 1 byte\n                                     return None;\n                                 }"}, {"sha": "ef88cf1e4c13ac5328cbf31c1e4a4acaffe1a332", "filename": "src/test/ui/layout/debug.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr?ref=0f7840b89bd737f7b4b207bc8aad9c3ebe634f4b", "patch": "@@ -1,4 +1,4 @@\n-error: layout debugging: LayoutDetails {\n+error: layout debugging: Layout {\n     fields: Arbitrary {\n         offsets: [\n             Size {\n@@ -20,7 +20,7 @@ error: layout debugging: LayoutDetails {\n         discr_kind: Tag,\n         discr_index: 0,\n         variants: [\n-            LayoutDetails {\n+            Layout {\n                 fields: Arbitrary {\n                     offsets: [],\n                     memory_index: [],\n@@ -42,7 +42,7 @@ error: layout debugging: LayoutDetails {\n                     raw: 4,\n                 },\n             },\n-            LayoutDetails {\n+            Layout {\n                 fields: Arbitrary {\n                     offsets: [\n                         Size {\n@@ -110,7 +110,7 @@ error: layout debugging: LayoutDetails {\n LL | enum E { Foo, Bar(!, i32, i32) }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: layout debugging: LayoutDetails {\n+error: layout debugging: Layout {\n     fields: Arbitrary {\n         offsets: [\n             Size {\n@@ -164,7 +164,7 @@ error: layout debugging: LayoutDetails {\n LL | struct S { f1: i32, f2: (), f3: i32 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: layout debugging: LayoutDetails {\n+error: layout debugging: Layout {\n     fields: Union(\n         2,\n     ),\n@@ -190,7 +190,7 @@ error: layout debugging: LayoutDetails {\n LL | union U { f1: (i32, i32), f3: i32 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: layout debugging: LayoutDetails {\n+error: layout debugging: Layout {\n     fields: Arbitrary {\n         offsets: [\n             Size {\n@@ -212,7 +212,7 @@ error: layout debugging: LayoutDetails {\n         discr_kind: Tag,\n         discr_index: 0,\n         variants: [\n-            LayoutDetails {\n+            Layout {\n                 fields: Arbitrary {\n                     offsets: [\n                         Size {\n@@ -240,7 +240,7 @@ error: layout debugging: LayoutDetails {\n                     raw: 8,\n                 },\n             },\n-            LayoutDetails {\n+            Layout {\n                 fields: Arbitrary {\n                     offsets: [\n                         Size {"}]}