{"sha": "eb841fc44a821fdfd23117b3a35958935752c857", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViODQxZmM0NGE4MjFmZGZkMjMxMTdiM2EzNTk1ODkzNTc1MmM4NTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-20T11:21:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-24T23:21:20Z"}, "message": "Resolve regions too when normalizing param env.", "tree": {"sha": "24699dbeb2e802d817c33499085fc2c66d06941e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24699dbeb2e802d817c33499085fc2c66d06941e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb841fc44a821fdfd23117b3a35958935752c857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb841fc44a821fdfd23117b3a35958935752c857", "html_url": "https://github.com/rust-lang/rust/commit/eb841fc44a821fdfd23117b3a35958935752c857", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb841fc44a821fdfd23117b3a35958935752c857/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db6ae66764ddb80926b2a18672162d1706ff82a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/db6ae66764ddb80926b2a18672162d1706ff82a6", "html_url": "https://github.com/rust-lang/rust/commit/db6ae66764ddb80926b2a18672162d1706ff82a6"}], "stats": {"total": 91, "additions": 50, "deletions": 41}, "files": [{"sha": "5a5639c701291f54716eba3b701e76f8bc825786", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 50, "deletions": 41, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/eb841fc44a821fdfd23117b3a35958935752c857/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb841fc44a821fdfd23117b3a35958935752c857/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=eb841fc44a821fdfd23117b3a35958935752c857", "patch": "@@ -18,7 +18,7 @@ pub use self::ObligationCauseCode::*;\n use middle::subst;\n use middle::ty::{self, HasProjectionTypes, Ty};\n use middle::ty_fold::TypeFoldable;\n-use middle::infer::{self, InferCtxt};\n+use middle::infer::{self, fixup_err_to_string, InferCtxt};\n use std::slice::Iter;\n use std::rc::Rc;\n use syntax::ast;\n@@ -395,53 +395,64 @@ pub fn type_known_to_meet_builtin_bound<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n     }\n }\n \n+/// Normalizes the parameter environment, reporting errors if they occur.\n pub fn normalize_param_env_or_error<'a,'tcx>(unnormalized_env: ty::ParameterEnvironment<'a,'tcx>,\n                                              cause: ObligationCause<'tcx>)\n                                              -> ty::ParameterEnvironment<'a,'tcx>\n {\n-    match normalize_param_env(&unnormalized_env, cause) {\n-        Ok(p) => p,\n+    // I'm not wild about reporting errors here; I'd prefer to\n+    // have the errors get reported at a defined place (e.g.,\n+    // during typeck). Instead I have all parameter\n+    // environments, in effect, going through this function\n+    // and hence potentially reporting errors. This ensurse of\n+    // course that we never forget to normalize (the\n+    // alternative seemed like it would involve a lot of\n+    // manual invocations of this fn -- and then we'd have to\n+    // deal with the errors at each of those sites).\n+    //\n+    // In any case, in practice, typeck constructs all the\n+    // parameter environments once for every fn as it goes,\n+    // and errors will get reported then; so after typeck we\n+    // can be sure that no errors should occur.\n+\n+    let tcx = unnormalized_env.tcx;\n+    let span = cause.span;\n+    let body_id = cause.body_id;\n+\n+    debug!(\"normalize_param_env_or_error(unnormalized_env={})\",\n+           unnormalized_env.repr(tcx));\n+\n+    let infcx = infer::new_infer_ctxt(tcx);\n+    let predicates = match fully_normalize(&infcx, &unnormalized_env, cause,\n+                                           &unnormalized_env.caller_bounds) {\n+        Ok(predicates) => predicates,\n         Err(errors) => {\n-            // I'm not wild about reporting errors here; I'd prefer to\n-            // have the errors get reported at a defined place (e.g.,\n-            // during typeck). Instead I have all parameter\n-            // environments, in effect, going through this function\n-            // and hence potentially reporting errors. This ensurse of\n-            // course that we never forget to normalize (the\n-            // alternative seemed like it would involve a lot of\n-            // manual invocations of this fn -- and then we'd have to\n-            // deal with the errors at each of those sites).\n-            //\n-            // In any case, in practice, typeck constructs all the\n-            // parameter environments once for every fn as it goes,\n-            // and errors will get reported then; so after typeck we\n-            // can be sure that no errors should occur.\n-            let infcx = infer::new_infer_ctxt(unnormalized_env.tcx);\n             report_fulfillment_errors(&infcx, &errors);\n-\n-            // Normalized failed? use what they gave us, it's better than nothing.\n-            unnormalized_env\n+            return unnormalized_env; // an unnormalized env is better than nothing\n         }\n-    }\n-}\n-\n-pub fn normalize_param_env<'a,'tcx>(param_env: &ty::ParameterEnvironment<'a,'tcx>,\n-                                    cause: ObligationCause<'tcx>)\n-                                    -> Result<ty::ParameterEnvironment<'a,'tcx>,\n-                                              Vec<FulfillmentError<'tcx>>>\n-{\n-    let tcx = param_env.tcx;\n-\n-    debug!(\"normalize_param_env(param_env={})\",\n-           param_env.repr(tcx));\n+    };\n \n-    let infcx = infer::new_infer_ctxt(tcx);\n-    let predicates = try!(fully_normalize(&infcx, param_env, cause, &param_env.caller_bounds));\n+    infcx.resolve_regions_and_report_errors(body_id);\n+    let predicates = match infcx.fully_resolve(&predicates) {\n+        Ok(predicates) => predicates,\n+        Err(fixup_err) => {\n+            // If we encounter a fixup error, it means that some type\n+            // variable wound up unconstrained. I actually don't know\n+            // if this can happen, and I certainly don't expect it to\n+            // happen often, but if it did happen it probably\n+            // represents a legitimate failure due to some kind of\n+            // unconstrained variable, and it seems better not to ICE,\n+            // all things considered.\n+            let err_msg = fixup_err_to_string(fixup_err);\n+            tcx.sess.span_err(span, &err_msg);\n+            return unnormalized_env; // an unnormalized env is better than nothing\n+        }\n+    };\n \n-    debug!(\"normalize_param_env: predicates={}\",\n+    debug!(\"normalize_param_env_or_error: predicates={}\",\n            predicates.repr(tcx));\n \n-    Ok(param_env.with_caller_bounds(predicates))\n+    unnormalized_env.with_caller_bounds(predicates)\n }\n \n pub fn fully_normalize<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n@@ -453,8 +464,7 @@ pub fn fully_normalize<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n {\n     let tcx = closure_typer.tcx();\n \n-    debug!(\"normalize_param_env(value={})\",\n-           value.repr(tcx));\n+    debug!(\"normalize_param_env(value={})\", value.repr(tcx));\n \n     let mut selcx = &mut SelectionContext::new(infcx, closure_typer);\n     let mut fulfill_cx = FulfillmentContext::new();\n@@ -468,8 +478,7 @@ pub fn fully_normalize<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n     }\n     try!(fulfill_cx.select_all_or_error(infcx, closure_typer));\n     let resolved_value = infcx.resolve_type_vars_if_possible(&normalized_value);\n-    debug!(\"normalize_param_env: resolved_value={}\",\n-           resolved_value.repr(tcx));\n+    debug!(\"normalize_param_env: resolved_value={}\", resolved_value.repr(tcx));\n     Ok(resolved_value)\n }\n "}]}