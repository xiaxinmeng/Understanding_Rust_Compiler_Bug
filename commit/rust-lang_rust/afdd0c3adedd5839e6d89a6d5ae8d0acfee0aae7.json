{"sha": "afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7", "node_id": "C_kwDOAAsO6NoAKGFmZGQwYzNhZGVkZDU4MzllNmQ4OWE2ZDVhZThkMGFjZmVlMGFhZTc", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-10-21T05:11:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-21T05:11:08Z"}, "message": "Rollup merge of #90071 - cjgillot:no-blocks, r=oli-obk\n\nRemove hir::map::blocks and use FnKind instead\n\nThe principal tool is `FnLikeNode`, which is not often used and can be easily implemented using `rustc_hir::intravisit::FnKind`.", "tree": {"sha": "4996d8318dbf18d07f0c91679eefcaa12c17a204", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4996d8318dbf18d07f0c91679eefcaa12c17a204"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhcPZtCRBK7hj4Ov3rIwAAG/wIAJbCyWxMLW9RMqm5nstYo7cQ\nHwu5rvUBH87J6b7ChgEJ/hyymdYyHBDakok4g/FhH5/UV/aqz265g0cMVmerTnx4\nKeSwbSTjls8si8w3WBwlkbzthr4ecmogaMsX/2jd7w6imzkTJxjRfUm5SbkMgDEm\ncfEbhRevnsE4qRH+hSRMnPpKEPsPEJQ1ryZBYqHFAHI99JQb4vS5wrNCww1ubP1S\nhIvbCoJZGN+qD9iYWz76pooKJjKXogw/L/8l2nQALnLCmyZi/w/dlvieWuXEx8sb\nLTrYEV2860zzngbrUazuzmI9HiMHd6LGGhpE9UnhgrvhYYqniu/ZTTTqHIa7n8k=\n=5B0a\n-----END PGP SIGNATURE-----\n", "payload": "tree 4996d8318dbf18d07f0c91679eefcaa12c17a204\nparent 47a1f67a8d953f0c1c76f5cabed5d92df30eb512\nparent 6e98688e68affa283b8edeb8c61958436c74c1aa\nauthor Yuki Okushi <jtitor@2k36.org> 1634793068 +0900\ncommitter GitHub <noreply@github.com> 1634793068 +0900\n\nRollup merge of #90071 - cjgillot:no-blocks, r=oli-obk\n\nRemove hir::map::blocks and use FnKind instead\n\nThe principal tool is `FnLikeNode`, which is not often used and can be easily implemented using `rustc_hir::intravisit::FnKind`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7", "html_url": "https://github.com/rust-lang/rust/commit/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47a1f67a8d953f0c1c76f5cabed5d92df30eb512", "url": "https://api.github.com/repos/rust-lang/rust/commits/47a1f67a8d953f0c1c76f5cabed5d92df30eb512", "html_url": "https://github.com/rust-lang/rust/commit/47a1f67a8d953f0c1c76f5cabed5d92df30eb512"}, {"sha": "6e98688e68affa283b8edeb8c61958436c74c1aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e98688e68affa283b8edeb8c61958436c74c1aa", "html_url": "https://github.com/rust-lang/rust/commit/6e98688e68affa283b8edeb8c61958436c74c1aa"}], "stats": {"total": 307, "additions": 47, "deletions": 260}, "files": [{"sha": "80551518d3c5d8bdbe10341d2fd5d98e8ec1dafb", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7", "patch": "@@ -1,6 +1,5 @@\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::Symbol;\n@@ -44,8 +43,8 @@ fn is_const_fn_raw(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n         } else {\n             false\n         }\n-    } else if let Some(fn_like) = FnLikeNode::from_node(node) {\n-        if fn_like.constness() == hir::Constness::Const {\n+    } else if let Some(fn_kind) = node.fn_kind() {\n+        if fn_kind.constness() == hir::Constness::Const {\n             return true;\n         }\n "}, {"sha": "6f25715fbecc47b4829c0b660f07b878361d5246", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7", "patch": "@@ -1,6 +1,7 @@\n use crate::def::{CtorKind, DefKind, Res};\n use crate::def_id::DefId;\n crate use crate::hir_id::{HirId, ItemLocalId};\n+use crate::intravisit::FnKind;\n use crate::LangItem;\n \n use rustc_ast::util::parser::ExprPrecedence;\n@@ -3258,6 +3259,32 @@ impl<'hir> Node<'hir> {\n             _ => None,\n         }\n     }\n+\n+    pub fn fn_kind(self) -> Option<FnKind<'hir>> {\n+        match self {\n+            Node::Item(i) => match i.kind {\n+                ItemKind::Fn(ref sig, ref generics, _) => {\n+                    Some(FnKind::ItemFn(i.ident, generics, sig.header, &i.vis))\n+                }\n+                _ => None,\n+            },\n+            Node::TraitItem(ti) => match ti.kind {\n+                TraitItemKind::Fn(ref sig, TraitFn::Provided(_)) => {\n+                    Some(FnKind::Method(ti.ident, sig, None))\n+                }\n+                _ => None,\n+            },\n+            Node::ImplItem(ii) => match ii.kind {\n+                ImplItemKind::Fn(ref sig, _) => Some(FnKind::Method(ii.ident, sig, Some(&ii.vis))),\n+                _ => None,\n+            },\n+            Node::Expr(e) => match e.kind {\n+                ExprKind::Closure(..) => Some(FnKind::Closure),\n+                _ => None,\n+            },\n+            _ => None,\n+        }\n+    }\n }\n \n // Some nodes are used a lot. Make sure they don't unintentionally get bigger."}, {"sha": "cff543760f42af954123f20e1bd85c4876e92e02", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7", "patch": "@@ -117,6 +117,14 @@ impl<'a> FnKind<'a> {\n             FnKind::Closure => None,\n         }\n     }\n+\n+    pub fn constness(self) -> Constness {\n+        self.header().map_or(Constness::NotConst, |header| header.constness)\n+    }\n+\n+    pub fn asyncness(self) -> IsAsync {\n+        self.header().map_or(IsAsync::NotAsync, |header| header.asyncness)\n+    }\n }\n \n /// An abstract representation of the HIR `rustc_middle::hir::map::Map`."}, {"sha": "90bc5b3b2fed1296849bd54b73816031674f7747", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7", "patch": "@@ -143,9 +143,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         // similar to the asyncness fn in rustc_ty_utils::ty\n         let hir_id = self.tcx().hir().local_def_id_to_hir_id(local_def_id);\n         let node = self.tcx().hir().get(hir_id);\n-        let fn_like = rustc_middle::hir::map::blocks::FnLikeNode::from_node(node)?;\n-\n-        Some(fn_like.asyncness())\n+        let fn_kind = node.fn_kind()?;\n+        Some(fn_kind.asyncness())\n     }\n \n     // Here, we check for the case where the anonymous region"}, {"sha": "8efec8ef5674d6b19b4dabbd2c39db46d243dd18", "filename": "compiler/rustc_middle/src/hir/map/blocks.rs", "status": "removed", "additions": 0, "deletions": 239, "changes": 239, "blob_url": "https://github.com/rust-lang/rust/blob/47a1f67a8d953f0c1c76f5cabed5d92df30eb512/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47a1f67a8d953f0c1c76f5cabed5d92df30eb512/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fblocks.rs?ref=47a1f67a8d953f0c1c76f5cabed5d92df30eb512", "patch": "@@ -1,239 +0,0 @@\n-//! This module provides a simplified abstraction for working with\n-//! code blocks identified by their integer `NodeId`. In particular,\n-//! it captures a common set of attributes that all \"function-like\n-//! things\" (represented by `FnLike` instances) share. For example,\n-//! all `FnLike` instances have a type signature (be it explicit or\n-//! inferred). And all `FnLike` instances have a body, i.e., the code\n-//! that is run when the function-like thing it represents is invoked.\n-//!\n-//! With the above abstraction in place, one can treat the program\n-//! text as a collection of blocks of code (and most such blocks are\n-//! nested within a uniquely determined `FnLike`), and users can ask\n-//! for the `Code` associated with a particular NodeId.\n-\n-use crate::hir::map::Map;\n-use rustc_hir as hir;\n-use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{Expr, FnDecl, Node};\n-use rustc_span::symbol::Ident;\n-use rustc_span::Span;\n-\n-/// An FnLikeNode is a Node that is like a fn, in that it has a decl\n-/// and a body (as well as a NodeId, a span, etc).\n-///\n-/// More specifically, it is one of either:\n-///\n-///   - A function item,\n-///   - A closure expr (i.e., an ExprKind::Closure), or\n-///   - The default implementation for a trait method.\n-///\n-/// To construct one, use the `Code::from_node` function.\n-#[derive(Copy, Clone, Debug)]\n-pub struct FnLikeNode<'a> {\n-    node: Node<'a>,\n-}\n-\n-/// MaybeFnLike wraps a method that indicates if an object\n-/// corresponds to some FnLikeNode.\n-trait MaybeFnLike {\n-    fn is_fn_like(&self) -> bool;\n-}\n-\n-impl MaybeFnLike for hir::Item<'_> {\n-    fn is_fn_like(&self) -> bool {\n-        matches!(self.kind, hir::ItemKind::Fn(..))\n-    }\n-}\n-\n-impl MaybeFnLike for hir::ImplItem<'_> {\n-    fn is_fn_like(&self) -> bool {\n-        matches!(self.kind, hir::ImplItemKind::Fn(..))\n-    }\n-}\n-\n-impl MaybeFnLike for hir::TraitItem<'_> {\n-    fn is_fn_like(&self) -> bool {\n-        matches!(self.kind, hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(_)))\n-    }\n-}\n-\n-impl MaybeFnLike for hir::Expr<'_> {\n-    fn is_fn_like(&self) -> bool {\n-        matches!(self.kind, hir::ExprKind::Closure(..))\n-    }\n-}\n-\n-/// Carries either an FnLikeNode or an Expr, as these are the two\n-/// constructs that correspond to \"code\" (as in, something from which\n-/// we can construct a control-flow graph).\n-#[derive(Copy, Clone)]\n-pub enum Code<'a> {\n-    FnLike(FnLikeNode<'a>),\n-    Expr(&'a Expr<'a>),\n-}\n-\n-impl<'a> Code<'a> {\n-    pub fn id(&self) -> hir::HirId {\n-        match *self {\n-            Code::FnLike(node) => node.id(),\n-            Code::Expr(block) => block.hir_id,\n-        }\n-    }\n-\n-    /// Attempts to construct a Code from presumed FnLike or Expr node input.\n-    pub fn from_node(map: &Map<'a>, id: hir::HirId) -> Option<Code<'a>> {\n-        match map.get(id) {\n-            Node::Block(_) => {\n-                //  Use the parent, hopefully an expression node.\n-                Code::from_node(map, map.get_parent_node(id))\n-            }\n-            Node::Expr(expr) => Some(Code::Expr(expr)),\n-            node => FnLikeNode::from_node(node).map(Code::FnLike),\n-        }\n-    }\n-}\n-\n-/// These are all the components one can extract from a fn item for\n-/// use when implementing FnLikeNode operations.\n-struct ItemFnParts<'a> {\n-    ident: Ident,\n-    decl: &'a hir::FnDecl<'a>,\n-    header: hir::FnHeader,\n-    vis: &'a hir::Visibility<'a>,\n-    generics: &'a hir::Generics<'a>,\n-    body: hir::BodyId,\n-    id: hir::HirId,\n-    span: Span,\n-}\n-\n-/// These are all the components one can extract from a closure expr\n-/// for use when implementing FnLikeNode operations.\n-struct ClosureParts<'a> {\n-    decl: &'a FnDecl<'a>,\n-    body: hir::BodyId,\n-    id: hir::HirId,\n-    span: Span,\n-}\n-\n-impl<'a> ClosureParts<'a> {\n-    fn new(d: &'a FnDecl<'a>, b: hir::BodyId, id: hir::HirId, s: Span) -> Self {\n-        ClosureParts { decl: d, body: b, id, span: s }\n-    }\n-}\n-\n-impl<'a> FnLikeNode<'a> {\n-    /// Attempts to construct a FnLikeNode from presumed FnLike node input.\n-    pub fn from_node(node: Node<'_>) -> Option<FnLikeNode<'_>> {\n-        let fn_like = match node {\n-            Node::Item(item) => item.is_fn_like(),\n-            Node::TraitItem(tm) => tm.is_fn_like(),\n-            Node::ImplItem(it) => it.is_fn_like(),\n-            Node::Expr(e) => e.is_fn_like(),\n-            _ => false,\n-        };\n-        fn_like.then_some(FnLikeNode { node })\n-    }\n-\n-    pub fn body(self) -> hir::BodyId {\n-        self.handle(\n-            |i: ItemFnParts<'a>| i.body,\n-            |_, _, _: &'a hir::FnSig<'a>, _, body: hir::BodyId, _| body,\n-            |c: ClosureParts<'a>| c.body,\n-        )\n-    }\n-\n-    pub fn decl(self) -> &'a FnDecl<'a> {\n-        self.handle(\n-            |i: ItemFnParts<'a>| &*i.decl,\n-            |_, _, sig: &'a hir::FnSig<'a>, _, _, _| &sig.decl,\n-            |c: ClosureParts<'a>| c.decl,\n-        )\n-    }\n-\n-    pub fn span(self) -> Span {\n-        self.handle(\n-            |i: ItemFnParts<'_>| i.span,\n-            |_, _, _: &'a hir::FnSig<'a>, _, _, span| span,\n-            |c: ClosureParts<'_>| c.span,\n-        )\n-    }\n-\n-    pub fn id(self) -> hir::HirId {\n-        self.handle(\n-            |i: ItemFnParts<'_>| i.id,\n-            |id, _, _: &'a hir::FnSig<'a>, _, _, _| id,\n-            |c: ClosureParts<'_>| c.id,\n-        )\n-    }\n-\n-    pub fn constness(self) -> hir::Constness {\n-        self.kind().header().map_or(hir::Constness::NotConst, |header| header.constness)\n-    }\n-\n-    pub fn asyncness(self) -> hir::IsAsync {\n-        self.kind().header().map_or(hir::IsAsync::NotAsync, |header| header.asyncness)\n-    }\n-\n-    pub fn unsafety(self) -> hir::Unsafety {\n-        self.kind().header().map_or(hir::Unsafety::Normal, |header| header.unsafety)\n-    }\n-\n-    pub fn kind(self) -> FnKind<'a> {\n-        let item = |p: ItemFnParts<'a>| -> FnKind<'a> {\n-            FnKind::ItemFn(p.ident, p.generics, p.header, p.vis)\n-        };\n-        let closure = |_: ClosureParts<'a>| FnKind::Closure;\n-        let method =\n-            |_, ident: Ident, sig: &'a hir::FnSig<'a>, vis, _, _| FnKind::Method(ident, sig, vis);\n-        self.handle(item, method, closure)\n-    }\n-\n-    fn handle<A, I, M, C>(self, item_fn: I, method: M, closure: C) -> A\n-    where\n-        I: FnOnce(ItemFnParts<'a>) -> A,\n-        M: FnOnce(\n-            hir::HirId,\n-            Ident,\n-            &'a hir::FnSig<'a>,\n-            Option<&'a hir::Visibility<'a>>,\n-            hir::BodyId,\n-            Span,\n-        ) -> A,\n-        C: FnOnce(ClosureParts<'a>) -> A,\n-    {\n-        match self.node {\n-            Node::Item(i) => match i.kind {\n-                hir::ItemKind::Fn(ref sig, ref generics, block) => item_fn(ItemFnParts {\n-                    id: i.hir_id(),\n-                    ident: i.ident,\n-                    decl: &sig.decl,\n-                    body: block,\n-                    vis: &i.vis,\n-                    span: i.span,\n-                    header: sig.header,\n-                    generics,\n-                }),\n-                _ => bug!(\"item FnLikeNode that is not fn-like\"),\n-            },\n-            Node::TraitItem(ti) => match ti.kind {\n-                hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n-                    method(ti.hir_id(), ti.ident, sig, None, body, ti.span)\n-                }\n-                _ => bug!(\"trait method FnLikeNode that is not fn-like\"),\n-            },\n-            Node::ImplItem(ii) => match ii.kind {\n-                hir::ImplItemKind::Fn(ref sig, body) => {\n-                    method(ii.hir_id(), ii.ident, sig, Some(&ii.vis), body, ii.span)\n-                }\n-                _ => bug!(\"impl method FnLikeNode that is not fn-like\"),\n-            },\n-            Node::Expr(e) => match e.kind {\n-                hir::ExprKind::Closure(_, ref decl, block, _fn_decl_span, _gen) => {\n-                    closure(ClosureParts::new(&decl, block, e.hir_id, e.span))\n-                }\n-                _ => bug!(\"expr FnLikeNode that is not fn-like\"),\n-            },\n-            _ => bug!(\"other FnLikeNode that is not fn-like\"),\n-        }\n-    }\n-}"}, {"sha": "fad7e875fa1c025ac4a6434aab0c109d76aece10", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7", "patch": "@@ -20,8 +20,6 @@ use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n use std::collections::VecDeque;\n \n-pub mod blocks;\n-\n fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {\n     match node {\n         Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })"}, {"sha": "e4c2d2dce67c7d3883b5614c3e23599a74626e59", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7", "patch": "@@ -2,7 +2,6 @@ use rustc_data_structures::graph::iterate::{\n     NodeStatus, TriColorDepthFirstSearch, TriColorVisitor,\n };\n use rustc_hir::intravisit::FnKind;\n-use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::mir::{BasicBlock, Body, Operand, TerminatorKind};\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts};\n use rustc_middle::ty::{self, AssocItem, AssocItemContainer, Instance, TyCtxt};\n@@ -14,8 +13,8 @@ crate fn check<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n     let def_id = body.source.def_id().expect_local();\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n \n-    if let Some(fn_like_node) = FnLikeNode::from_node(tcx.hir().get(hir_id)) {\n-        if let FnKind::Closure = fn_like_node.kind() {\n+    if let Some(fn_kind) = tcx.hir().get(hir_id).fn_kind() {\n+        if let FnKind::Closure = fn_kind {\n             // closures can't recur, so they don't matter.\n             return;\n         }"}, {"sha": "63c637af5c21a39ae94067abde5c52efc531b007", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7", "patch": "@@ -68,11 +68,10 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n             return;\n         }\n \n-        use rustc_middle::hir::map::blocks::FnLikeNode;\n         let def_id = body.source.def_id().expect_local();\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n \n-        let is_fn_like = FnLikeNode::from_node(tcx.hir().get(hir_id)).is_some();\n+        let is_fn_like = tcx.hir().get(hir_id).fn_kind().is_some();\n         let is_assoc_const = tcx.def_kind(def_id.to_def_id()) == DefKind::AssocConst;\n \n         // Only run const prop on functions, methods, closures and associated constants"}, {"sha": "4ac93f716192308709d3c18b73b58d8cb63041f6", "filename": "compiler/rustc_mir_transform/src/coverage/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs?ref=afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7", "patch": "@@ -19,7 +19,6 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_index::vec::IndexVec;\n use rustc_middle::hir;\n-use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::dump_enabled;\n@@ -64,7 +63,7 @@ impl<'tcx> MirPass<'tcx> for InstrumentCoverage {\n         }\n \n         let hir_id = tcx.hir().local_def_id_to_hir_id(mir_source.def_id().expect_local());\n-        let is_fn_like = FnLikeNode::from_node(tcx.hir().get(hir_id)).is_some();\n+        let is_fn_like = tcx.hir().get(hir_id).fn_kind().is_some();\n \n         // Only instrument functions, methods, and closures (not constants since they are evaluated\n         // at compile time by Miri).\n@@ -74,7 +73,7 @@ impl<'tcx> MirPass<'tcx> for InstrumentCoverage {\n         // be tricky if const expressions have no corresponding statements in the enclosing MIR.\n         // Closures are carved out by their initial `Assign` statement.)\n         if !is_fn_like {\n-            trace!(\"InstrumentCoverage skipped for {:?} (not an FnLikeNode)\", mir_source.def_id());\n+            trace!(\"InstrumentCoverage skipped for {:?} (not an fn-like)\", mir_source.def_id());\n             return;\n         }\n "}, {"sha": "ab1fe6fe077a74b3b72c2bf8a03cac720b9aa425", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7", "patch": "@@ -429,8 +429,7 @@ fn mir_drops_elaborated_and_const_checked<'tcx>(\n     }\n \n     let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n-    use rustc_middle::hir::map::blocks::FnLikeNode;\n-    let is_fn_like = FnLikeNode::from_node(tcx.hir().get(hir_id)).is_some();\n+    let is_fn_like = tcx.hir().get(hir_id).fn_kind().is_some();\n     if is_fn_like {\n         let did = def.did.to_def_id();\n         let def = ty::WithOptConstParam::unknown(did);"}, {"sha": "bc77c94809eb58ca47c0f47932b3c6a0f20e08d0", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=afdd0c3adedd5839e6d89a6d5ae8d0acfee0aae7", "patch": "@@ -1,7 +1,6 @@\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_middle::hir::map as hir_map;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{\n     self, Binder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt, WithConstness,\n@@ -478,11 +477,11 @@ fn asyncness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::IsAsync {\n \n     let node = tcx.hir().get(hir_id);\n \n-    let fn_like = hir_map::blocks::FnLikeNode::from_node(node).unwrap_or_else(|| {\n+    let fn_kind = node.fn_kind().unwrap_or_else(|| {\n         bug!(\"asyncness: expected fn-like node but got `{:?}`\", def_id);\n     });\n \n-    fn_like.asyncness()\n+    fn_kind.asyncness()\n }\n \n /// Don't call this directly: use ``tcx.conservative_is_privately_uninhabited`` instead."}]}