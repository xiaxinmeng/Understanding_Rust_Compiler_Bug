{"sha": "3c795e08d6f4a532f12f3f8e1837db5e0647f8b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNzk1ZTA4ZDZmNGE1MzJmMTJmM2Y4ZTE4MzdkYjVlMDY0N2Y4YjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-26T09:52:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-26T09:52:49Z"}, "message": "Auto merge of #33872 - nagisa:undef-is-llvm-for-sigsegv, r=eddyb\n\nFix handling of FFI arguments\n\nr? @eddyb @nikomatsakis or whoever else.\n\ncc @alexcrichton @rust-lang/core\n\nThe strategy employed here was to essentially change code we generate from\n\n```llvm\n  %s = alloca %S ; potentially smaller than argument, but never larger\n  %1 = bitcast %S* %s to { i64, i64 }*\n  store { i64, i64 } %0, { i64, i64 }* %1, align 4\n```\n\nto\n\n```llvm\n  %1 = alloca { i64, i64 } ; the copy of argument itself\n  store { i64, i64 } %0, { i64, i64 }* %1, align 4\n  %s = bitcast { i64, i64 }* %1 to %S* ; potentially truncate by casting to a pointer of smaller type.\n```", "tree": {"sha": "5d1cf1555506d6a4c8d3ab1ebbb43b092103848b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d1cf1555506d6a4c8d3ab1ebbb43b092103848b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c795e08d6f4a532f12f3f8e1837db5e0647f8b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c795e08d6f4a532f12f3f8e1837db5e0647f8b0", "html_url": "https://github.com/rust-lang/rust/commit/3c795e08d6f4a532f12f3f8e1837db5e0647f8b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c795e08d6f4a532f12f3f8e1837db5e0647f8b0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5759a3417fa395d439f4283825504dd4f78dc87", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5759a3417fa395d439f4283825504dd4f78dc87", "html_url": "https://github.com/rust-lang/rust/commit/d5759a3417fa395d439f4283825504dd4f78dc87"}, {"sha": "5b404523dd1741681ba411c48c3df3c4cf5b22ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b404523dd1741681ba411c48c3df3c4cf5b22ab", "html_url": "https://github.com/rust-lang/rust/commit/5b404523dd1741681ba411c48c3df3c4cf5b22ab"}], "stats": {"total": 117, "additions": 81, "deletions": 36}, "files": [{"sha": "712805061ea8cd026cda30d19f67bc882b062133", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 37, "deletions": 26, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/3c795e08d6f4a532f12f3f8e1837db5e0647f8b0/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c795e08d6f4a532f12f3f8e1837db5e0647f8b0/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=3c795e08d6f4a532f12f3f8e1837db5e0647f8b0", "patch": "@@ -1660,24 +1660,32 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n                     self.schedule_drop_mem(arg_scope_id, llarg, arg_ty, None);\n \n                     datum::Datum::new(llarg,\n-                                    arg_ty,\n-                                    datum::Lvalue::new(\"FunctionContext::bind_args\"))\n+                                      arg_ty,\n+                                      datum::Lvalue::new(\"FunctionContext::bind_args\"))\n                 } else {\n-                    unpack_datum!(bcx, datum::lvalue_scratch_datum(bcx, arg_ty, \"\",\n-                                                                   uninit_reason,\n-                                                                   arg_scope_id, |bcx, dst| {\n-                        debug!(\"FunctionContext::bind_args: {:?}: {:?}\", hir_arg, arg_ty);\n+                    let lltmp = if common::type_is_fat_ptr(bcx.tcx(), arg_ty) {\n+                        let lltemp = alloc_ty(bcx, arg_ty, \"\");\n                         let b = &bcx.build();\n-                        if common::type_is_fat_ptr(bcx.tcx(), arg_ty) {\n-                            let meta = &self.fn_ty.args[idx];\n-                            idx += 1;\n-                            arg.store_fn_arg(b, &mut llarg_idx, expr::get_dataptr(bcx, dst));\n-                            meta.store_fn_arg(b, &mut llarg_idx, expr::get_meta(bcx, dst));\n-                        } else {\n-                            arg.store_fn_arg(b, &mut llarg_idx, dst);\n-                        }\n-                        bcx\n-                    }))\n+                        // we pass fat pointers as two words, but we want to\n+                        // represent them internally as a pointer to two words,\n+                        // so make an alloca to store them in.\n+                        let meta = &self.fn_ty.args[idx];\n+                        idx += 1;\n+                        arg.store_fn_arg(b, &mut llarg_idx, expr::get_dataptr(bcx, lltemp));\n+                        meta.store_fn_arg(b, &mut llarg_idx, expr::get_meta(bcx, lltemp));\n+                        lltemp\n+                    } else  {\n+                        // otherwise, arg is passed by value, so store it into a temporary.\n+                        let llarg_ty = arg.cast.unwrap_or(arg.memory_ty(bcx.ccx()));\n+                        let lltemp = alloca(bcx, llarg_ty, \"\");\n+                        let b = &bcx.build();\n+                        arg.store_fn_arg(b, &mut llarg_idx, lltemp);\n+                        // And coerce the temporary into the type we expect.\n+                        b.pointercast(lltemp, arg.memory_ty(bcx.ccx()).ptr_to())\n+                    };\n+                    bcx.fcx.schedule_drop_mem(arg_scope_id, lltmp, arg_ty, None);\n+                    datum::Datum::new(lltmp, arg_ty,\n+                                      datum::Lvalue::new(\"bind_args\"))\n                 }\n             } else {\n                 // FIXME(pcwalton): Reduce the amount of code bloat this is responsible for.\n@@ -1712,16 +1720,19 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n             };\n \n             let pat = &hir_arg.pat;\n-            bcx = if let Some(name) = simple_name(pat) {\n-                // Generate nicer LLVM for the common case of fn a pattern\n-                // like `x: T`\n-                set_value_name(arg_datum.val, &bcx.name(name));\n-                self.lllocals.borrow_mut().insert(pat.id, arg_datum);\n-                bcx\n-            } else {\n-                // General path. Copy out the values that are used in the\n-                // pattern.\n-                _match::bind_irrefutable_pat(bcx, pat, arg_datum.match_input(), arg_scope_id)\n+            bcx = match simple_name(pat) {\n+                // The check for alloca is necessary because above for the immediate argument case\n+                // we had to cast. At this point arg_datum is not an alloca anymore and thus\n+                // breaks debuginfo if we allow this optimisation.\n+                Some(name)\n+                if unsafe { llvm::LLVMIsAAllocaInst(arg_datum.val) != ::std::ptr::null_mut() } => {\n+                    // Generate nicer LLVM for the common case of fn a pattern\n+                    // like `x: T`\n+                    set_value_name(arg_datum.val, &bcx.name(name));\n+                    self.lllocals.borrow_mut().insert(pat.id, arg_datum);\n+                    bcx\n+                },\n+                _ => _match::bind_irrefutable_pat(bcx, pat, arg_datum.match_input(), arg_scope_id)\n             };\n             debuginfo::create_argument_metadata(bcx, hir_arg);\n         }"}, {"sha": "ffc14b4468b5b68506147780bd753bb372238b24", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3c795e08d6f4a532f12f3f8e1837db5e0647f8b0/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c795e08d6f4a532f12f3f8e1837db5e0647f8b0/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=3c795e08d6f4a532f12f3f8e1837db5e0647f8b0", "patch": "@@ -327,23 +327,28 @@ fn arg_value_refs<'bcx, 'tcx>(bcx: &BlockAndBuilder<'bcx, 'tcx>,\n             llarg_idx += 1;\n             llarg\n         } else {\n-            let lltemp = bcx.with_block(|bcx| {\n-                base::alloc_ty(bcx, arg_ty, &format!(\"arg{}\", arg_index))\n-            });\n             if common::type_is_fat_ptr(tcx, arg_ty) {\n+                let lltemp = bcx.with_block(|bcx| {\n+                    base::alloc_ty(bcx, arg_ty, &format!(\"arg{}\", arg_index))\n+                });\n                 // we pass fat pointers as two words, but we want to\n                 // represent them internally as a pointer to two words,\n                 // so make an alloca to store them in.\n                 let meta = &fcx.fn_ty.args[idx];\n                 idx += 1;\n                 arg.store_fn_arg(bcx, &mut llarg_idx, get_dataptr(bcx, lltemp));\n                 meta.store_fn_arg(bcx, &mut llarg_idx, get_meta(bcx, lltemp));\n+                lltemp\n             } else  {\n-                // otherwise, arg is passed by value, so make a\n-                // temporary and store it there\n+                // otherwise, arg is passed by value, so store it into a temporary.\n+                let llarg_ty = arg.cast.unwrap_or(arg.memory_ty(bcx.ccx()));\n+                let lltemp = bcx.with_block(|bcx| {\n+                    base::alloca(bcx, llarg_ty, &format!(\"arg{}\", arg_index))\n+                });\n                 arg.store_fn_arg(bcx, &mut llarg_idx, lltemp);\n+                // And coerce the temporary into the type we expect.\n+                bcx.pointercast(lltemp, arg.memory_ty(bcx.ccx()).ptr_to())\n             }\n-            lltemp\n         };\n         bcx.with_block(|bcx| arg_scope.map(|scope| {\n             // Is this a regular argument?"}, {"sha": "8c425507975ca7271ba372f80aac794ec021a1cf", "filename": "src/test/codegen/stores.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c795e08d6f4a532f12f3f8e1837db5e0647f8b0/src%2Ftest%2Fcodegen%2Fstores.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c795e08d6f4a532f12f3f8e1837db5e0647f8b0/src%2Ftest%2Fcodegen%2Fstores.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstores.rs?ref=3c795e08d6f4a532f12f3f8e1837db5e0647f8b0", "patch": "@@ -26,8 +26,8 @@ pub struct Bytes {\n #[no_mangle]\n #[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn small_array_alignment(x: &mut [i8; 4], y: [i8; 4]) {\n-// CHECK: [[VAR:%[0-9]+]] = bitcast [4 x i8]* %y to i32*\n-// CHECK: store i32 %{{.*}}, i32* [[VAR]], align 1\n+// CHECK: store i32 %{{.*}}, i32* %{{.*}}, align 1\n+// CHECK: [[VAR:%[0-9]+]] = bitcast i32* %{{.*}} to [4 x i8]*\n     *x = y;\n }\n \n@@ -37,7 +37,7 @@ pub fn small_array_alignment(x: &mut [i8; 4], y: [i8; 4]) {\n #[no_mangle]\n #[rustc_no_mir] // FIXME #27840 MIR has different codegen.\n pub fn small_struct_alignment(x: &mut Bytes, y: Bytes) {\n-// CHECK: [[VAR:%[0-9]+]] = bitcast %Bytes* %y to i32*\n-// CHECK: store i32 %{{.*}}, i32* [[VAR]], align 1\n+// CHECK: store i32 %{{.*}}, i32* %{{.*}}, align 1\n+// CHECK: [[VAR:%[0-9]+]] = bitcast i32* %{{.*}} to %Bytes*\n     *x = y;\n }"}, {"sha": "a983a4a95988c494af9a8d2dae3abc0659ec3bae", "filename": "src/test/run-pass/foreign-truncated-arguments.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3c795e08d6f4a532f12f3f8e1837db5e0647f8b0/src%2Ftest%2Frun-pass%2Fforeign-truncated-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c795e08d6f4a532f12f3f8e1837db5e0647f8b0/src%2Ftest%2Frun-pass%2Fforeign-truncated-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-truncated-arguments.rs?ref=3c795e08d6f4a532f12f3f8e1837db5e0647f8b0", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -O\n+// Regression test for https://github.com/rust-lang/rust/issues/33868\n+\n+#[repr(C)]\n+pub struct S {\n+    a: u32,\n+    b: f32,\n+    c: u32\n+}\n+\n+#[no_mangle]\n+#[inline(never)]\n+pub extern \"C\" fn test(s: S) -> u32 {\n+    s.c\n+}\n+\n+fn main() {\n+    assert_eq!(test(S{a: 0, b: 0.0, c: 42}), 42);\n+}"}]}