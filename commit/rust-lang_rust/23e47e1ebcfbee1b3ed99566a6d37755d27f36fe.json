{"sha": "23e47e1ebcfbee1b3ed99566a6d37755d27f36fe", "node_id": "C_kwDOAAsO6NoAKDIzZTQ3ZTFlYmNmYmVlMWIzZWQ5OTU2NmE2ZDM3NzU1ZDI3ZjM2ZmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-23T14:23:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-23T14:23:30Z"}, "message": "Auto merge of #12063 - iDawer:ide.signature_help, r=Veykril\n\nfix: Fall back to parameter definitions on error types in signature help\n\nFixes  #10432", "tree": {"sha": "4f0da575245b5b14800615174989c93f9ae2d405", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f0da575245b5b14800615174989c93f9ae2d405"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23e47e1ebcfbee1b3ed99566a6d37755d27f36fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23e47e1ebcfbee1b3ed99566a6d37755d27f36fe", "html_url": "https://github.com/rust-lang/rust/commit/23e47e1ebcfbee1b3ed99566a6d37755d27f36fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23e47e1ebcfbee1b3ed99566a6d37755d27f36fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c60622924195a28a378ef8ea1308e78cba19abc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c60622924195a28a378ef8ea1308e78cba19abc5", "html_url": "https://github.com/rust-lang/rust/commit/c60622924195a28a378ef8ea1308e78cba19abc5"}, {"sha": "baa4fa09ef21716d9f31c1bf280fd5af6e0b3842", "url": "https://api.github.com/repos/rust-lang/rust/commits/baa4fa09ef21716d9f31c1bf280fd5af6e0b3842", "html_url": "https://github.com/rust-lang/rust/commit/baa4fa09ef21716d9f31c1bf280fd5af6e0b3842"}], "stats": {"total": 81, "additions": 55, "deletions": 26}, "files": [{"sha": "4eca69033a67fddccf180b2106707b9ed12910b3", "filename": "crates/ide/src/signature_help.rs", "status": "modified", "additions": 55, "deletions": 26, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/23e47e1ebcfbee1b3ed99566a6d37755d27f36fe/crates%2Fide%2Fsrc%2Fsignature_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23e47e1ebcfbee1b3ed99566a6d37755d27f36fe/crates%2Fide%2Fsrc%2Fsignature_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsignature_help.rs?ref=23e47e1ebcfbee1b3ed99566a6d37755d27f36fe", "patch": "@@ -110,10 +110,12 @@ fn signature_help_for_call(\n         SignatureHelp { doc: None, signature: String::new(), parameters: vec![], active_parameter };\n \n     let db = sema.db;\n+    let mut fn_params = None;\n     match callable.kind() {\n         hir::CallableKind::Function(func) => {\n             res.doc = func.docs(db).map(|it| it.into());\n             format_to!(res.signature, \"fn {}\", func.name(db));\n+            fn_params = Some(func.assoc_fn_params(db));\n         }\n         hir::CallableKind::TupleStruct(strukt) => {\n             res.doc = strukt.docs(db).map(|it| it.into());\n@@ -137,26 +139,39 @@ fn signature_help_for_call(\n             format_to!(res.signature, \"{}\", self_param)\n         }\n         let mut buf = String::new();\n-        for (pat, ty) in callable.params(db) {\n+        for (idx, (pat, ty)) in callable.params(db).into_iter().enumerate() {\n             buf.clear();\n             if let Some(pat) = pat {\n                 match pat {\n                     Either::Left(_self) => format_to!(buf, \"self: \"),\n                     Either::Right(pat) => format_to!(buf, \"{}: \", pat),\n                 }\n             }\n-            format_to!(buf, \"{}\", ty.display(db));\n+            // APITs (argument position `impl Trait`s) are inferred as {unknown} as the user is\n+            // in the middle of entering call arguments.\n+            // In that case, fall back to render definitions of the respective parameters.\n+            // This is overly conservative: we do not substitute known type vars\n+            // (see FIXME in tests::impl_trait) and falling back on any unknowns.\n+            match (ty.contains_unknown(), fn_params.as_deref()) {\n+                (true, Some(fn_params)) => format_to!(buf, \"{}\", fn_params[idx].ty().display(db)),\n+                _ => format_to!(buf, \"{}\", ty.display(db)),\n+            }\n             res.push_call_param(&buf);\n         }\n     }\n     res.signature.push(')');\n \n+    let mut render = |ret_type: hir::Type| {\n+        if !ret_type.is_unit() {\n+            format_to!(res.signature, \" -> {}\", ret_type.display(db));\n+        }\n+    };\n     match callable.kind() {\n+        hir::CallableKind::Function(func) if callable.return_type().contains_unknown() => {\n+            render(func.ret_type(db))\n+        }\n         hir::CallableKind::Function(_) | hir::CallableKind::Closure => {\n-            let ret_type = callable.return_type();\n-            if !ret_type.is_unit() {\n-                format_to!(res.signature, \" -> {}\", ret_type.display(db));\n-            }\n+            render(callable.return_type())\n         }\n         hir::CallableKind::TupleStruct(_) | hir::CallableKind::TupleEnumVariant(_) => {}\n     }\n@@ -420,8 +435,8 @@ fn foo<T, U: Copy + Display>(x: T, y: U) -> u32\n fn bar() { foo($03, ); }\n \"#,\n             expect![[r#\"\n-                fn foo(x: i32, y: {unknown}) -> u32\n-                       ^^^^^^  ------------\n+                fn foo(x: i32, y: U) -> u32\n+                       ^^^^^^  ----\n             \"#]],\n         );\n     }\n@@ -434,7 +449,7 @@ fn foo<T>() -> T where T: Copy + Display {}\n fn bar() { foo($0); }\n \"#,\n             expect![[r#\"\n-                fn foo() -> {unknown}\n+                fn foo() -> T\n             \"#]],\n         );\n     }\n@@ -633,26 +648,21 @@ pub fn do_it() {\n     fn test_fn_signature_with_docs_from_actix() {\n         check(\n             r#\"\n-struct WriteHandler<E>;\n-\n-impl<E> WriteHandler<E> {\n-    /// Method is called when writer emits error.\n-    ///\n-    /// If this method returns `ErrorAction::Continue` writer processing\n-    /// continues otherwise stream processing stops.\n-    fn error(&mut self, err: E, ctx: &mut Self::Context) -> Running {\n-        Running::Stop\n-    }\n-\n+trait Actor {\n+    /// Actor execution context type\n+    type Context;\n+}\n+trait WriteHandler<E>\n+where\n+    Self: Actor\n+{\n     /// Method is called when writer finishes.\n     ///\n     /// By default this method stops actor's `Context`.\n-    fn finished(&mut self, ctx: &mut Self::Context) {\n-        ctx.stop()\n-    }\n+    fn finished(&mut self, ctx: &mut Self::Context) {}\n }\n \n-pub fn foo(mut r: WriteHandler<()>) {\n+fn foo(mut r: impl WriteHandler<()>) {\n     r.finished($0);\n }\n \"#,\n@@ -661,8 +671,8 @@ pub fn foo(mut r: WriteHandler<()>) {\n \n                 By default this method stops actor's `Context`.\n                 ------\n-                fn finished(&mut self, ctx: &mut {unknown})\n-                                       ^^^^^^^^^^^^^^^^^^^\n+                fn finished(&mut self, ctx: &mut <impl WriteHandler<()> as Actor>::Context)\n+                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n             \"#]],\n         );\n     }\n@@ -1055,4 +1065,23 @@ fn f() {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn impl_trait() {\n+        // FIXME: Substitute type vars in impl trait (`U` -> `i8`)\n+        check(\n+            r#\"\n+trait Trait<T> {}\n+struct Wrap<T>(T);\n+fn foo<U>(x: Wrap<impl Trait<U>>) {}\n+fn f() {\n+    foo::<i8>($0)\n+}\n+\"#,\n+            expect![[r#\"\n+                fn foo(x: Wrap<impl Trait<U>>)\n+                       ^^^^^^^^^^^^^^^^^^^^^^\n+            \"#]],\n+        );\n+    }\n }"}]}