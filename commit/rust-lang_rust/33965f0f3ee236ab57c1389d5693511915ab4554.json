{"sha": "33965f0f3ee236ab57c1389d5693511915ab4554", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzOTY1ZjBmM2VlMjM2YWI1N2MxMzg5ZDU2OTM1MTE5MTVhYjQ1NTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-05T18:36:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-05T18:36:40Z"}, "message": "fix renaming of modules", "tree": {"sha": "3ac45c59f794fc266a6cba7ea9daf662773f3d75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ac45c59f794fc266a6cba7ea9daf662773f3d75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33965f0f3ee236ab57c1389d5693511915ab4554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33965f0f3ee236ab57c1389d5693511915ab4554", "html_url": "https://github.com/rust-lang/rust/commit/33965f0f3ee236ab57c1389d5693511915ab4554", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33965f0f3ee236ab57c1389d5693511915ab4554/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86f5fd602b20f8ba52c1ba27daa63fedf39ebeb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/86f5fd602b20f8ba52c1ba27daa63fedf39ebeb0", "html_url": "https://github.com/rust-lang/rust/commit/86f5fd602b20f8ba52c1ba27daa63fedf39ebeb0"}], "stats": {"total": 172, "additions": 92, "deletions": 80}, "files": [{"sha": "e90fbd4285ba04a8c2ef0e6b427f34aebeadb66a", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33965f0f3ee236ab57c1389d5693511915ab4554/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33965f0f3ee236ab57c1389d5693511915ab4554/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=33965f0f3ee236ab57c1389d5693511915ab4554", "patch": "@@ -466,7 +466,7 @@ impl Analysis {\n         &self,\n         position: FilePosition,\n     ) -> Cancelable<Option<ReferenceSearchResult>> {\n-        self.with_db(|db| references::find_all_refs(db, position))\n+        self.with_db(|db| references::find_all_refs(db, position).map(|it| it.info))\n     }\n \n     /// Returns a short text describing element at position.\n@@ -536,7 +536,7 @@ impl Analysis {\n         &self,\n         position: FilePosition,\n         new_name: &str,\n-    ) -> Cancelable<Option<SourceChange>> {\n+    ) -> Cancelable<Option<RangeInfo<SourceChange>>> {\n         self.with_db(|db| references::rename(db, position, new_name))\n     }\n "}, {"sha": "5f1f0efc3055917e5db0af38ad7771fad301a990", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 84, "deletions": 70, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/33965f0f3ee236ab57c1389d5693511915ab4554/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33965f0f3ee236ab57c1389d5693511915ab4554/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=33965f0f3ee236ab57c1389d5693511915ab4554", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{algo::find_node_at_offset, ast, AstNode, SourceFile, SyntaxNode}\n use relative_path::{RelativePath, RelativePathBuf};\n \n use crate::{\n-    db::RootDatabase, FileId, FilePosition, FileRange, FileSystemEdit, NavigationTarget,\n+    db::RootDatabase, FileId, FilePosition, FileRange, FileSystemEdit, NavigationTarget, RangeInfo,\n     SourceChange, SourceFileEdit, TextRange,\n };\n \n@@ -48,9 +48,9 @@ impl IntoIterator for ReferenceSearchResult {\n pub(crate) fn find_all_refs(\n     db: &RootDatabase,\n     position: FilePosition,\n-) -> Option<ReferenceSearchResult> {\n+) -> Option<RangeInfo<ReferenceSearchResult>> {\n     let parse = db.parse(position.file_id);\n-    let (binding, analyzer) = find_binding(db, &parse.tree(), position)?;\n+    let RangeInfo { range, info: (binding, analyzer) } = find_binding(db, &parse.tree(), position)?;\n     let declaration = NavigationTarget::from_bind_pat(position.file_id, &binding);\n \n     let references = analyzer\n@@ -59,24 +59,26 @@ pub(crate) fn find_all_refs(\n         .map(move |ref_desc| FileRange { file_id: position.file_id, range: ref_desc.range })\n         .collect::<Vec<_>>();\n \n-    return Some(ReferenceSearchResult { declaration, references });\n+    return Some(RangeInfo::new(range, ReferenceSearchResult { declaration, references }));\n \n     fn find_binding<'a>(\n         db: &RootDatabase,\n         source_file: &SourceFile,\n         position: FilePosition,\n-    ) -> Option<(ast::BindPat, hir::SourceAnalyzer)> {\n+    ) -> Option<RangeInfo<(ast::BindPat, hir::SourceAnalyzer)>> {\n         let syntax = source_file.syntax();\n         if let Some(binding) = find_node_at_offset::<ast::BindPat>(syntax, position.offset) {\n+            let range = binding.syntax().text_range();\n             let analyzer = hir::SourceAnalyzer::new(db, position.file_id, binding.syntax(), None);\n-            return Some((binding, analyzer));\n+            return Some(RangeInfo::new(range, (binding, analyzer)));\n         };\n         let name_ref = find_node_at_offset::<ast::NameRef>(syntax, position.offset)?;\n+        let range = name_ref.syntax().text_range();\n         let analyzer = hir::SourceAnalyzer::new(db, position.file_id, name_ref.syntax(), None);\n         let resolved = analyzer.resolve_local_name(&name_ref)?;\n         if let Either::A(ptr) = resolved.ptr() {\n             if let ast::Pat::BindPat(binding) = ptr.to_node(source_file.syntax()) {\n-                return Some((binding, analyzer));\n+                return Some(RangeInfo::new(range, (binding, analyzer)));\n             }\n         }\n         None\n@@ -87,12 +89,14 @@ pub(crate) fn rename(\n     db: &RootDatabase,\n     position: FilePosition,\n     new_name: &str,\n-) -> Option<SourceChange> {\n+) -> Option<RangeInfo<SourceChange>> {\n     let parse = db.parse(position.file_id);\n     if let Some((ast_name, ast_module)) =\n         find_name_and_module_at_offset(parse.tree().syntax(), position)\n     {\n+        let range = ast_name.syntax().text_range();\n         rename_mod(db, &ast_name, &ast_module, position, new_name)\n+            .map(|info| RangeInfo::new(range, info))\n     } else {\n         rename_reference(db, position, new_name)\n     }\n@@ -107,7 +111,7 @@ fn find_name_and_module_at_offset(\n     Some((ast_name, ast_module))\n }\n \n-fn source_edit_from_fileid_range(\n+fn source_edit_from_file_id_range(\n     file_id: FileId,\n     range: TextRange,\n     new_name: &str,\n@@ -179,19 +183,19 @@ fn rename_reference(\n     db: &RootDatabase,\n     position: FilePosition,\n     new_name: &str,\n-) -> Option<SourceChange> {\n-    let refs = find_all_refs(db, position)?;\n+) -> Option<RangeInfo<SourceChange>> {\n+    let RangeInfo { range, info: refs } = find_all_refs(db, position)?;\n \n     let edit = refs\n         .into_iter()\n-        .map(|range| source_edit_from_fileid_range(range.file_id, range.range, new_name))\n+        .map(|range| source_edit_from_file_id_range(range.file_id, range.range, new_name))\n         .collect::<Vec<_>>();\n \n     if edit.is_empty() {\n         return None;\n     }\n \n-    Some(SourceChange::source_file_edits(\"rename\", edit))\n+    Some(RangeInfo::new(range, SourceChange::source_file_edits(\"rename\", edit)))\n }\n \n #[cfg(test)]\n@@ -342,38 +346,43 @@ mod tests {\n         let new_name = \"foo2\";\n         let source_change = analysis.rename(position, new_name).unwrap();\n         assert_debug_snapshot!(&source_change,\n-@r#\"Some(\n-    SourceChange {\n-        label: \"rename\",\n-        source_file_edits: [\n-            SourceFileEdit {\n-                file_id: FileId(\n-                    2,\n-                ),\n-                edit: TextEdit {\n-                    atoms: [\n-                        AtomTextEdit {\n-                            delete: [4; 7),\n-                            insert: \"foo2\",\n+@r###\"\n+        Some(\n+            RangeInfo {\n+                range: [4; 7),\n+                info: SourceChange {\n+                    label: \"rename\",\n+                    source_file_edits: [\n+                        SourceFileEdit {\n+                            file_id: FileId(\n+                                2,\n+                            ),\n+                            edit: TextEdit {\n+                                atoms: [\n+                                    AtomTextEdit {\n+                                        delete: [4; 7),\n+                                        insert: \"foo2\",\n+                                    },\n+                                ],\n+                            },\n+                        },\n+                    ],\n+                    file_system_edits: [\n+                        MoveFile {\n+                            src: FileId(\n+                                3,\n+                            ),\n+                            dst_source_root: SourceRootId(\n+                                0,\n+                            ),\n+                            dst_path: \"bar/foo2.rs\",\n                         },\n                     ],\n+                    cursor_position: None,\n                 },\n             },\n-        ],\n-        file_system_edits: [\n-            MoveFile {\n-                src: FileId(\n-                    3,\n-                ),\n-                dst_source_root: SourceRootId(\n-                    0,\n-                ),\n-                dst_path: \"bar/foo2.rs\",\n-            },\n-        ],\n-        cursor_position: None,\n-    },\n-)\"#);\n+        )\n+        \"###);\n     }\n \n     #[test]\n@@ -389,38 +398,43 @@ mod tests {\n         let new_name = \"foo2\";\n         let source_change = analysis.rename(position, new_name).unwrap();\n         assert_debug_snapshot!(&source_change,\n-        @r###\"Some(\n-    SourceChange {\n-        label: \"rename\",\n-        source_file_edits: [\n-            SourceFileEdit {\n-                file_id: FileId(\n-                    1,\n-                ),\n-                edit: TextEdit {\n-                    atoms: [\n-                        AtomTextEdit {\n-                            delete: [4; 7),\n-                            insert: \"foo2\",\n+        @r###\"\n+        Some(\n+            RangeInfo {\n+                range: [4; 7),\n+                info: SourceChange {\n+                    label: \"rename\",\n+                    source_file_edits: [\n+                        SourceFileEdit {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            edit: TextEdit {\n+                                atoms: [\n+                                    AtomTextEdit {\n+                                        delete: [4; 7),\n+                                        insert: \"foo2\",\n+                                    },\n+                                ],\n+                            },\n+                        },\n+                    ],\n+                    file_system_edits: [\n+                        MoveFile {\n+                            src: FileId(\n+                                2,\n+                            ),\n+                            dst_source_root: SourceRootId(\n+                                0,\n+                            ),\n+                            dst_path: \"foo2/mod.rs\",\n                         },\n                     ],\n+                    cursor_position: None,\n                 },\n             },\n-        ],\n-        file_system_edits: [\n-            MoveFile {\n-                src: FileId(\n-                    2,\n-                ),\n-                dst_source_root: SourceRootId(\n-                    0,\n-                ),\n-                dst_path: \"foo2/mod.rs\",\n-            },\n-        ],\n-        cursor_position: None,\n-    },\n-)\"###\n+        )\n+        \"###\n                );\n     }\n \n@@ -430,7 +444,7 @@ mod tests {\n         let mut text_edit_builder = ra_text_edit::TextEditBuilder::default();\n         let mut file_id: Option<FileId> = None;\n         if let Some(change) = source_change {\n-            for edit in change.source_file_edits {\n+            for edit in change.info.source_file_edits {\n                 file_id = Some(edit.file_id);\n                 for atom in edit.edit.as_atoms() {\n                     text_edit_builder.replace(atom.delete, atom.insert.clone());"}, {"sha": "948d543ea263d24e9dc72bc598e00df58c06b9a0", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/33965f0f3ee236ab57c1389d5693511915ab4554/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33965f0f3ee236ab57c1389d5693511915ab4554/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=33965f0f3ee236ab57c1389d5693511915ab4554", "patch": "@@ -460,18 +460,16 @@ pub fn handle_prepare_rename(\n \n     // We support renaming references like handle_rename does.\n     // In the future we may want to reject the renaming of things like keywords here too.\n-    let refs = match world.analysis().find_all_refs(position)? {\n+    let optional_change = world.analysis().rename(position, \"dummy\")?;\n+    let range = match optional_change {\n         None => return Ok(None),\n-        Some(refs) => refs,\n+        Some(it) => it.range,\n     };\n \n-    // Refs should always have a declaration\n-    let r = refs.declaration();\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n-    let loc = to_location(r.file_id(), r.range(), &world, &line_index)?;\n-\n-    Ok(Some(PrepareRenameResponse::Range(loc.range)))\n+    let range = range.conv_with(&line_index);\n+    Ok(Some(PrepareRenameResponse::Range(range)))\n }\n \n pub fn handle_rename(world: WorldSnapshot, params: RenameParams) -> Result<Option<WorkspaceEdit>> {\n@@ -488,7 +486,7 @@ pub fn handle_rename(world: WorldSnapshot, params: RenameParams) -> Result<Optio\n     let optional_change = world.analysis().rename(position, &*params.new_name)?;\n     let change = match optional_change {\n         None => return Ok(None),\n-        Some(it) => it,\n+        Some(it) => it.info,\n     };\n \n     let source_change_req = change.try_conv_with(&world)?;"}]}