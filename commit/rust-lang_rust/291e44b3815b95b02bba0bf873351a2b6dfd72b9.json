{"sha": "291e44b3815b95b02bba0bf873351a2b6dfd72b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MWU0NGIzODE1Yjk1YjAyYmJhMGJmODczMzUxYTJiNmRmZDcyYjk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-19T04:03:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-19T04:03:12Z"}, "message": "Rollup merge of #60023 - koalatux:nth-back, r=scottmcm\n\nimplement specialized nth_back() for Bytes, Fuse and Enumerate\n\nHi,\n\nAfter my first PR has been successfully merged, here is my second pull request :-)\n\nAlso this PR contains some specializations for the problem discussed in #54054.", "tree": {"sha": "e0e7a8c70f5cfdbf4e0861c44f5c91ad67cc9fd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0e7a8c70f5cfdbf4e0861c44f5c91ad67cc9fd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/291e44b3815b95b02bba0bf873351a2b6dfd72b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcuUiACRBK7hj4Ov3rIwAAdHIIAFkEEWM7NPaY0jfRy+uN0nuZ\nvjCuIAZiGYeyOM74rG8usnDjHmy9qESgO2RsBKkYh/pxRyYKJ7MzEJ1KpknHcT4T\nELBdP/pYtTHEAx2TWJ47Q63jrSSutMwjrpawa0uK7xRTgDrT4E0aASxosrBSa3s2\nDxWTqdoAMMfgzoNIlQZTE3iAGQULcGT9Ysg+C3TKuWRFZeWXoGMcZABK0Qe5Ut4M\ngrt2WHsoC59TVQHcPJ38d0kH0TEw9D/Em93+kl89h3Mpy4SmYrr96yq1ZcyUq2ja\nSV+6mvi0zqdJJIT37V0mpwMmRhVoNU2nEEeOCBMwxO37guTs+8MDaCb4ZWAdOjU=\n=H41H\n-----END PGP SIGNATURE-----\n", "payload": "tree e0e7a8c70f5cfdbf4e0861c44f5c91ad67cc9fd7\nparent 7f450bd3ca9edd39b876293650d49dc17d200256\nparent 2605537012022980d5ec69ad11653794db935cf6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1555646592 +0200\ncommitter GitHub <noreply@github.com> 1555646592 +0200\n\nRollup merge of #60023 - koalatux:nth-back, r=scottmcm\n\nimplement specialized nth_back() for Bytes, Fuse and Enumerate\n\nHi,\n\nAfter my first PR has been successfully merged, here is my second pull request :-)\n\nAlso this PR contains some specializations for the problem discussed in #54054.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/291e44b3815b95b02bba0bf873351a2b6dfd72b9", "html_url": "https://github.com/rust-lang/rust/commit/291e44b3815b95b02bba0bf873351a2b6dfd72b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/291e44b3815b95b02bba0bf873351a2b6dfd72b9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f450bd3ca9edd39b876293650d49dc17d200256", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f450bd3ca9edd39b876293650d49dc17d200256", "html_url": "https://github.com/rust-lang/rust/commit/7f450bd3ca9edd39b876293650d49dc17d200256"}, {"sha": "2605537012022980d5ec69ad11653794db935cf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2605537012022980d5ec69ad11653794db935cf6", "html_url": "https://github.com/rust-lang/rust/commit/2605537012022980d5ec69ad11653794db935cf6"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "d6c5c3a2b094b62401bd3dbb776d6b5b14e3ffec", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/291e44b3815b95b02bba0bf873351a2b6dfd72b9/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291e44b3815b95b02bba0bf873351a2b6dfd72b9/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=291e44b3815b95b02bba0bf873351a2b6dfd72b9", "patch": "@@ -981,6 +981,16 @@ impl<I> DoubleEndedIterator for Enumerate<I> where\n         })\n     }\n \n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<(usize, <I as Iterator>::Item)> {\n+        self.iter.nth_back(n).map(|a| {\n+            let len = self.iter.len();\n+            // Can safely add, `ExactSizeIterator` promises that the number of\n+            // elements fits into a `usize`.\n+            (self.count + len, a)\n+        })\n+    }\n+\n     #[inline]\n     fn try_rfold<Acc, Fold, R>(&mut self, init: Acc, mut fold: Fold) -> R where\n         Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n@@ -1790,6 +1800,17 @@ impl<I> DoubleEndedIterator for Fuse<I> where I: DoubleEndedIterator {\n         }\n     }\n \n+    #[inline]\n+    default fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n+        if self.done {\n+            None\n+        } else {\n+            let nth = self.iter.nth_back(n);\n+            self.done = nth.is_none();\n+            nth\n+        }\n+    }\n+\n     #[inline]\n     default fn try_rfold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R where\n         Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n@@ -1878,6 +1899,11 @@ impl<I> DoubleEndedIterator for Fuse<I>\n         self.iter.next_back()\n     }\n \n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n+        self.iter.nth_back(n)\n+    }\n+\n     #[inline]\n     fn try_rfold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R where\n         Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>"}, {"sha": "b7e2825dd9cc26017f3f7b5d8e4730e776215789", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/291e44b3815b95b02bba0bf873351a2b6dfd72b9/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291e44b3815b95b02bba0bf873351a2b6dfd72b9/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=291e44b3815b95b02bba0bf873351a2b6dfd72b9", "patch": "@@ -795,6 +795,11 @@ impl DoubleEndedIterator for Bytes<'_> {\n         self.0.next_back()\n     }\n \n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n+        self.0.nth_back(n)\n+    }\n+\n     #[inline]\n     fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item> where\n         P: FnMut(&Self::Item) -> bool"}, {"sha": "5247331fba24fa6ddf876a8e498eaf7a157220ac", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/291e44b3815b95b02bba0bf873351a2b6dfd72b9/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291e44b3815b95b02bba0bf873351a2b6dfd72b9/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=291e44b3815b95b02bba0bf873351a2b6dfd72b9", "patch": "@@ -389,6 +389,24 @@ fn test_iterator_enumerate_nth() {\n     assert_eq!(i, 3);\n }\n \n+#[test]\n+fn test_iterator_enumerate_nth_back() {\n+    let xs = [0, 1, 2, 3, 4, 5];\n+    let mut it = xs.iter().enumerate();\n+    while let Some((i, &x)) = it.nth_back(0) {\n+        assert_eq!(i, x);\n+    }\n+\n+    let mut it = xs.iter().enumerate();\n+    while let Some((i, &x)) = it.nth_back(1) {\n+        assert_eq!(i, x);\n+    }\n+\n+    let (i, &x) = xs.iter().enumerate().nth_back(3).unwrap();\n+    assert_eq!(i, x);\n+    assert_eq!(i, 2);\n+}\n+\n #[test]\n fn test_iterator_enumerate_count() {\n     let xs = [0, 1, 2, 3, 4, 5];"}]}