{"sha": "f2bf484e3ac684ce835023a3efde67ad7392c660", "node_id": "C_kwDOAAsO6NoAKGYyYmY0ODRlM2FjNjg0Y2U4MzUwMjNhM2VmZGU2N2FkNzM5MmM2NjA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-03T16:51:47Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-31T15:56:32Z"}, "message": "Introduce repr_options table.", "tree": {"sha": "1ff72768cd1c71a269c8c64a7b0bb659a62abf30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ff72768cd1c71a269c8c64a7b0bb659a62abf30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2bf484e3ac684ce835023a3efde67ad7392c660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2bf484e3ac684ce835023a3efde67ad7392c660", "html_url": "https://github.com/rust-lang/rust/commit/f2bf484e3ac684ce835023a3efde67ad7392c660", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2bf484e3ac684ce835023a3efde67ad7392c660/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffaf6f0d0ccfbc76da00baded073d10f05ffcbd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffaf6f0d0ccfbc76da00baded073d10f05ffcbd1", "html_url": "https://github.com/rust-lang/rust/commit/ffaf6f0d0ccfbc76da00baded073d10f05ffcbd1"}], "stats": {"total": 69, "additions": 36, "deletions": 33}, "files": [{"sha": "cccf5fc8459ebcccddca011372437329b26b2fc1", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f2bf484e3ac684ce835023a3efde67ad7392c660/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2bf484e3ac684ce835023a3efde67ad7392c660/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=f2bf484e3ac684ce835023a3efde67ad7392c660", "patch": "@@ -942,7 +942,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n     fn get_variant(self, kind: &EntryKind, index: DefIndex, parent_did: DefId) -> ty::VariantDef {\n         let data = match kind {\n-            EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {\n+            EntryKind::Variant(data) | EntryKind::Struct(data) | EntryKind::Union(data) => {\n                 data.decode(self)\n             }\n             _ => bug!(),\n@@ -988,12 +988,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         let kind = self.kind(item_id);\n         let did = self.local_def_id(item_id);\n \n-        let (adt_kind, repr) = match kind {\n-            EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),\n-            EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),\n-            EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),\n+        let adt_kind = match kind {\n+            EntryKind::Enum => ty::AdtKind::Enum,\n+            EntryKind::Struct(_) => ty::AdtKind::Struct,\n+            EntryKind::Union(_) => ty::AdtKind::Union,\n             _ => bug!(\"get_adt_def called on a non-ADT {:?}\", did),\n         };\n+        let repr = self.root.tables.repr_options.get(self, item_id).unwrap().decode(self);\n \n         let variants = if let ty::AdtKind::Enum = adt_kind {\n             self.root\n@@ -1171,7 +1172,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     callback(exp);\n                 }\n             }\n-            EntryKind::Enum(..) | EntryKind::Trait(..) => {}\n+            EntryKind::Enum | EntryKind::Trait(..) => {}\n             _ => bug!(\"`for_each_module_child` is called on a non-module: {:?}\", self.def_kind(id)),\n         }\n     }\n@@ -1186,7 +1187,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n     fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {\n         match self.kind(id) {\n-            EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {\n+            EntryKind::Mod(_) | EntryKind::Enum | EntryKind::Trait(_) => {\n                 self.get_expn_that_defined(id, sess)\n             }\n             _ => panic!(\"Expected module, found {:?}\", self.local_def_id(id)),\n@@ -1239,7 +1240,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n     fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {\n         match self.kind(node_id) {\n-            EntryKind::Struct(data, _) | EntryKind::Variant(data) => {\n+            EntryKind::Struct(data) | EntryKind::Variant(data) => {\n                 let vdata = data.decode(self);\n                 vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))\n             }"}, {"sha": "db2defab4458f4bc9176946c15fa1329e9c8c782", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f2bf484e3ac684ce835023a3efde67ad7392c660/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2bf484e3ac684ce835023a3efde67ad7392c660/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=f2bf484e3ac684ce835023a3efde67ad7392c660", "patch": "@@ -1154,7 +1154,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n         };\n \n-        record!(self.tables.kind[def_id] <- EntryKind::Struct(self.lazy(data), adt_def.repr()));\n+        record!(self.tables.repr_options[def_id] <- adt_def.repr());\n+        record!(self.tables.kind[def_id] <- EntryKind::Struct(self.lazy(data)));\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n@@ -1418,10 +1419,14 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 self.encode_explicit_item_bounds(def_id);\n                 EntryKind::OpaqueTy\n             }\n-            hir::ItemKind::Enum(..) => EntryKind::Enum(self.tcx.adt_def(def_id).repr()),\n+            hir::ItemKind::Enum(..) => {\n+                let adt_def = self.tcx.adt_def(def_id);\n+                record!(self.tables.repr_options[def_id] <- adt_def.repr());\n+                EntryKind::Enum\n+            }\n             hir::ItemKind::Struct(ref struct_def, _) => {\n                 let adt_def = self.tcx.adt_def(def_id);\n-                let variant = adt_def.non_enum_variant();\n+                record!(self.tables.repr_options[def_id] <- adt_def.repr());\n \n                 // Encode def_ids for each field and method\n                 // for methods, write all the stuff get_trait_method\n@@ -1430,29 +1435,25 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     .ctor_hir_id()\n                     .map(|ctor_hir_id| self.tcx.hir().local_def_id(ctor_hir_id).local_def_index);\n \n-                EntryKind::Struct(\n-                    self.lazy(VariantData {\n-                        ctor_kind: variant.ctor_kind,\n-                        discr: variant.discr,\n-                        ctor,\n-                        is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n-                    }),\n-                    adt_def.repr(),\n-                )\n+                let variant = adt_def.non_enum_variant();\n+                EntryKind::Struct(self.lazy(VariantData {\n+                    ctor_kind: variant.ctor_kind,\n+                    discr: variant.discr,\n+                    ctor,\n+                    is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n+                }))\n             }\n             hir::ItemKind::Union(..) => {\n                 let adt_def = self.tcx.adt_def(def_id);\n-                let variant = adt_def.non_enum_variant();\n+                record!(self.tables.repr_options[def_id] <- adt_def.repr());\n \n-                EntryKind::Union(\n-                    self.lazy(VariantData {\n-                        ctor_kind: variant.ctor_kind,\n-                        discr: variant.discr,\n-                        ctor: None,\n-                        is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n-                    }),\n-                    adt_def.repr(),\n-                )\n+                let variant = adt_def.non_enum_variant();\n+                EntryKind::Union(self.lazy(VariantData {\n+                    ctor_kind: variant.ctor_kind,\n+                    discr: variant.discr,\n+                    ctor: None,\n+                    is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n+                }))\n             }\n             hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {\n                 record!(self.tables.impl_defaultness[def_id] <- defaultness);"}, {"sha": "1d09d8d555adb3eace6d3fd7fad002a5a702aadd", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2bf484e3ac684ce835023a3efde67ad7392c660/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2bf484e3ac684ce835023a3efde67ad7392c660/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=f2bf484e3ac684ce835023a3efde67ad7392c660", "patch": "@@ -325,6 +325,7 @@ define_tables! {\n     inherent_impls: Table<DefIndex, Lazy<[DefIndex]>>,\n     expn_that_defined: Table<DefIndex, Lazy<ExpnId>>,\n     unused_generic_params: Table<DefIndex, Lazy<FiniteBitSet<u32>>>,\n+    repr_options: Table<DefIndex, Lazy<ReprOptions>>,\n     // `def_keys` and `def_path_hashes` represent a lazy version of a\n     // `DefPathTable`. This allows us to avoid deserializing an entire\n     // `DefPathTable` up front, since we may only ever use a few\n@@ -347,11 +348,11 @@ enum EntryKind {\n     TypeParam,\n     ConstParam,\n     OpaqueTy,\n-    Enum(ReprOptions),\n+    Enum,\n     Field,\n     Variant(Lazy<VariantData>),\n-    Struct(Lazy<VariantData>, ReprOptions),\n-    Union(Lazy<VariantData>, ReprOptions),\n+    Struct(Lazy<VariantData>),\n+    Union(Lazy<VariantData>),\n     Fn(Lazy<FnData>),\n     ForeignFn(Lazy<FnData>),\n     Mod(Lazy<[ModChild]>),"}]}