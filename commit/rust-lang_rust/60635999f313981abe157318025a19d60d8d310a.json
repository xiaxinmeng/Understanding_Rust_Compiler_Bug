{"sha": "60635999f313981abe157318025a19d60d8d310a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNjM1OTk5ZjMxMzk4MWFiZTE1NzMxODAyNWExOWQ2MGQ4ZDMxMGE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-09T19:30:50Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-09T19:37:55Z"}, "message": "Add .bss fragment support to elf.", "tree": {"sha": "898411ca702341f612d493e03f474b43d7ce4e4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/898411ca702341f612d493e03f474b43d7ce4e4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60635999f313981abe157318025a19d60d8d310a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60635999f313981abe157318025a19d60d8d310a", "html_url": "https://github.com/rust-lang/rust/commit/60635999f313981abe157318025a19d60d8d310a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60635999f313981abe157318025a19d60d8d310a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1cc5ac63c7d2b7da595cbc31253389a991824bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1cc5ac63c7d2b7da595cbc31253389a991824bd", "html_url": "https://github.com/rust-lang/rust/commit/a1cc5ac63c7d2b7da595cbc31253389a991824bd"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "f17541eeff02a291058343abbfd12787c1d6b084", "filename": "src/boot/be/elf.ml", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/60635999f313981abe157318025a19d60d8d310a/src%2Fboot%2Fbe%2Felf.ml", "raw_url": "https://github.com/rust-lang/rust/raw/60635999f313981abe157318025a19d60d8d310a/src%2Fboot%2Fbe%2Felf.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Felf.ml?ref=60635999f313981abe157318025a19d60d8d310a", "patch": "@@ -488,6 +488,7 @@ let elf32_linux_x86_file\n     ~(entry_name:string)\n     ~(text_frags:(string option, frag) Hashtbl.t)\n     ~(data_frags:(string option, frag) Hashtbl.t)\n+    ~(bss_frags:(string option, frag) Hashtbl.t)\n     ~(rodata_frags:(string option, frag) Hashtbl.t)\n     ~(required_fixups:(string, fixup) Hashtbl.t)\n     ~(dwarf:Dwarf.debug_records)\n@@ -652,7 +653,7 @@ let elf32_linux_x86_file\n   (* let gotpltndx      = 8L in *)  (* Section index of .got.plt *)\n   (* let relapltndx     = 9L in *)  (* Section index of .rela.plt *)\n   let datandx        = 10L in  (* Section index of .data *)\n-  (* let bssndx         = 11L in *) (* Section index of .bss *)\n+  let bssndx         = 11L in  (* Section index of .bss *)\n   (* let dynamicndx     = 12L in *) (* Section index of .dynamic *)\n   let shstrtabndx    = 13L in (* Section index of .shstrtab *)\n \n@@ -999,6 +1000,22 @@ let elf32_linux_x86_file\n       (strtab_entry, symtab_entry)\n   in\n \n+  let bss_sym name st_bind fixup =\n+    let name_fixup = new_fixup (\"bss symbol name fixup: '\" ^ name ^ \"'\") in\n+    let strtab_entry = DEF (name_fixup, ZSTRING name) in\n+    let symtab_entry =\n+      symbol\n+        ~string_table_fixup: dynstr_section_fixup\n+        ~name_string_fixup: name_fixup\n+        ~sym_target_fixup: (Some fixup)\n+        ~st_bind\n+        ~st_type: STT_OBJECT\n+        ~st_shndx: bssndx\n+    in\n+      incr n_syms;\n+      (strtab_entry, symtab_entry)\n+  in\n+\n   let rodata_sym name st_bind fixup =\n     let name_fixup = new_fixup (\"rodata symbol name fixup: '\" ^ name ^ \"'\") in\n     let strtab_entry = DEF (name_fixup, ZSTRING name) in\n@@ -1220,6 +1237,12 @@ let elf32_linux_x86_file\n     Hashtbl.fold (frags_of_symbol data_sym STB_GLOBAL) data_frags ([],[],[])\n   in\n \n+  let (bss_strtab_frags,\n+       bss_symtab_frags,\n+       bss_body_frags) =\n+    Hashtbl.fold (frags_of_symbol bss_sym STB_GLOBAL) bss_frags ([],[],[])\n+  in\n+\n   let (_,\n        require_strtab_frags,\n        require_symtab_frags,\n@@ -1285,7 +1308,8 @@ let elf32_linux_x86_file\n                            global_text_symtab_frags @\n                            local_text_symtab_frags @\n                            rodata_symtab_frags @\n-                           data_symtab_frags))\n+                           data_symtab_frags @\n+                           bss_symtab_frags))\n   in\n \n   let dynstr_frags = (null_strtab_frag ::\n@@ -1294,6 +1318,7 @@ let elf32_linux_x86_file\n                            local_text_strtab_frags @\n                            rodata_strtab_frags @\n                            data_strtab_frags @\n+                           bss_strtab_frags @\n                            (Array.to_list dynamic_needed_strtab_frags)))\n   in\n \n@@ -1319,7 +1344,7 @@ let elf32_linux_x86_file\n   in\n   let bss_section =\n     DEF (bss_section_fixup,\n-         SEQ [| |])\n+         SEQ (Array.of_list bss_body_frags))\n   in\n   let dynsym_section =\n     DEF (dynsym_section_fixup,\n@@ -1498,6 +1523,7 @@ let emit_file\n   let text_frags = Hashtbl.create 4 in\n   let rodata_frags = Hashtbl.create 4 in\n   let data_frags = Hashtbl.create 4 in\n+  let bss_frags = Hashtbl.create 4 in\n   let required_fixups = Hashtbl.create 4 in\n \n   (*\n@@ -1630,13 +1656,15 @@ let emit_file\n       end\n       sem.Semant.ctxt_native_required\n   in\n+\n   let all_frags =\n     elf32_linux_x86_file\n       ~sess\n       ~crate\n       ~entry_name: \"_start\"\n       ~text_frags\n       ~data_frags\n+      ~bss_frags\n       ~dwarf\n       ~sem\n       ~rodata_frags"}]}