{"sha": "d09851cfba9ff151d293f38526fd148e22a00092", "node_id": "C_kwDOAAsO6NoAKGQwOTg1MWNmYmE5ZmYxNTFkMjkzZjM4NTI2ZmQxNDhlMjJhMDAwOTI", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-06-23T17:42:17Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-07-07T19:25:56Z"}, "message": "Wording tweak", "tree": {"sha": "4182809bb5f3791234b78b4efd8d32b9f9c934f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4182809bb5f3791234b78b4efd8d32b9f9c934f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d09851cfba9ff151d293f38526fd148e22a00092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d09851cfba9ff151d293f38526fd148e22a00092", "html_url": "https://github.com/rust-lang/rust/commit/d09851cfba9ff151d293f38526fd148e22a00092", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d09851cfba9ff151d293f38526fd148e22a00092/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f91614d12f1aed56c8c9ea1d9d39a6f0db98892", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f91614d12f1aed56c8c9ea1d9d39a6f0db98892", "html_url": "https://github.com/rust-lang/rust/commit/5f91614d12f1aed56c8c9ea1d9d39a6f0db98892"}], "stats": {"total": 71, "additions": 45, "deletions": 26}, "files": [{"sha": "b9cfc3732dc7cf13cd77a9e2195d4c4899859b62", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d09851cfba9ff151d293f38526fd148e22a00092/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09851cfba9ff151d293f38526fd148e22a00092/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=d09851cfba9ff151d293f38526fd148e22a00092", "patch": "@@ -98,8 +98,14 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 return;\n             }\n \n-            let err =\n-                self.report_use_of_uninitialized(mpi, used_place, desired_action, span, use_spans);\n+            let err = self.report_use_of_uninitialized(\n+                mpi,\n+                used_place,\n+                moved_place,\n+                desired_action,\n+                span,\n+                use_spans,\n+            );\n             self.buffer_error(err);\n         } else {\n             if let Some((reported_place, _)) = self.has_move_error(&move_out_indices) {\n@@ -316,6 +322,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         mpi: MovePathIndex,\n         used_place: PlaceRef<'tcx>,\n+        moved_place: PlaceRef<'tcx>,\n         desired_action: InitializationRequiringAction,\n         span: Span,\n         use_spans: UseSpans<'tcx>,\n@@ -334,11 +341,15 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n         }\n \n-        let (binding, name, desc) =\n-            match self.describe_place_with_options(used_place, IncludingDowncast(true)) {\n-                Some(name) => (format!(\"`{name}`\"), format!(\"`{name}`\"), format!(\"`{name}` \")),\n-                None => (\"value\".to_string(), \"the variable\".to_string(), String::new()),\n+        let (name, desc) =\n+            match self.describe_place_with_options(moved_place, IncludingDowncast(true)) {\n+                Some(name) => (format!(\"`{name}`\"), format!(\"`{name}` \")),\n+                None => (\"the variable\".to_string(), String::new()),\n             };\n+        let path = match self.describe_place_with_options(used_place, IncludingDowncast(true)) {\n+            Some(name) => format!(\"`{name}`\"),\n+            None => \"value\".to_string(),\n+        };\n \n         // We use the statements were the binding was initialized, and inspect the HIR to look\n         // for the branching codepaths that aren't covered, to point at them.\n@@ -390,13 +401,15 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             format!(\"{} occurs due to use{}\", desired_action.as_noun(), use_spans.describe()),\n         );\n \n-        if let InitializationRequiringAction::PartialAssignment = desired_action {\n+        if let InitializationRequiringAction::PartialAssignment\n+        | InitializationRequiringAction::Assignment = desired_action\n+        {\n             err.help(\n                 \"partial initialization isn't supported, fully initialize the binding with a \\\n                  default value and mutate it, or use `std::mem::MaybeUninit`\",\n             );\n         }\n-        err.span_label(span, format!(\"{binding} {used} here but it {isnt_initialized}\"));\n+        err.span_label(span, format!(\"{path} {used} here but it {isnt_initialized}\"));\n \n         let mut shown = false;\n         for (sp, label) in visitor.errors {"}, {"sha": "83a3e3e0e3ae0b84619a87220168fb30080dbfe8", "filename": "src/test/ui/borrowck/borrowck-init-in-fru.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09851cfba9ff151d293f38526fd148e22a00092/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09851cfba9ff151d293f38526fd148e22a00092/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.stderr?ref=d09851cfba9ff151d293f38526fd148e22a00092", "patch": "@@ -1,4 +1,4 @@\n-error[E0381]: used binding `origin.y` isn't initialized\n+error[E0381]: used binding `origin` isn't initialized\n   --> $DIR/borrowck-init-in-fru.rs:9:14\n    |\n LL |     let mut origin: Point;"}, {"sha": "d12a482cb69a9ddd6afa1e2da14a9fd14670712e", "filename": "src/test/ui/borrowck/borrowck-partial-reinit-4.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09851cfba9ff151d293f38526fd148e22a00092/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09851cfba9ff151d293f38526fd148e22a00092/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-4.stderr?ref=d09851cfba9ff151d293f38526fd148e22a00092", "patch": "@@ -5,6 +5,8 @@ LL |     let mut x : (Test2, Test2);\n    |         ----- binding declared here but left uninitialized\n LL |     (x.0).0 = Some(Test);\n    |     ^^^^^^^ `x.0` assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error: aborting due to previous error\n "}, {"sha": "6a38a7989197087b695660d8a89b9823097e5526", "filename": "src/test/ui/borrowck/borrowck-uninit-field-access.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09851cfba9ff151d293f38526fd148e22a00092/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09851cfba9ff151d293f38526fd148e22a00092/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.stderr?ref=d09851cfba9ff151d293f38526fd148e22a00092", "patch": "@@ -1,4 +1,4 @@\n-error[E0381]: used binding `a.x` isn't initialized\n+error[E0381]: used binding `a` isn't initialized\n   --> $DIR/borrowck-uninit-field-access.rs:21:13\n    |\n LL |     let mut a: Point;"}, {"sha": "c486cb6dd0cd338f4c01c11e21f750b5a1f95d4c", "filename": "src/test/ui/borrowck/borrowck-uninit-ref-chain.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d09851cfba9ff151d293f38526fd148e22a00092/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09851cfba9ff151d293f38526fd148e22a00092/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.stderr?ref=d09851cfba9ff151d293f38526fd148e22a00092", "patch": "@@ -1,20 +1,20 @@\n-error[E0381]: used binding `**x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-ref-chain.rs:8:14\n    |\n LL |     let x: &&Box<i32>;\n    |         - binding declared here but left uninitialized\n LL |     let _y = &**x;\n    |              ^^^^ `**x` used here but it isn't initialized\n \n-error[E0381]: used binding `**x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-ref-chain.rs:11:14\n    |\n LL |     let x: &&S<i32, i32>;\n    |         - binding declared here but left uninitialized\n LL |     let _y = &**x;\n    |              ^^^^ `**x` used here but it isn't initialized\n \n-error[E0381]: used binding `**x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-ref-chain.rs:14:14\n    |\n LL |     let x: &&i32;"}, {"sha": "459cf1398b750e74ec49879b68a41ae7d2e6a0bf", "filename": "src/test/ui/borrowck/borrowck-use-in-index-lvalue.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09851cfba9ff151d293f38526fd148e22a00092/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09851cfba9ff151d293f38526fd148e22a00092/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.stderr?ref=d09851cfba9ff151d293f38526fd148e22a00092", "patch": "@@ -1,12 +1,12 @@\n-error[E0381]: used binding `*w` isn't initialized\n+error[E0381]: used binding `w` isn't initialized\n   --> $DIR/borrowck-use-in-index-lvalue.rs:3:5\n    |\n LL |     let w: &mut [isize];\n    |         - binding declared here but left uninitialized\n LL |     w[5] = 0;\n    |     ^^^^ `*w` used here but it isn't initialized\n \n-error[E0381]: used binding `*w` isn't initialized\n+error[E0381]: used binding `w` isn't initialized\n   --> $DIR/borrowck-use-in-index-lvalue.rs:6:5\n    |\n LL |     let mut w: &mut [isize];"}, {"sha": "942ed4fc6cabf172cc6451c98442f5b901876d83", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09851cfba9ff151d293f38526fd148e22a00092/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09851cfba9ff151d293f38526fd148e22a00092/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr?ref=d09851cfba9ff151d293f38526fd148e22a00092", "patch": "@@ -1,4 +1,4 @@\n-error[E0381]: used binding `*x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-use-uninitialized-in-cast-trait.rs:9:13\n    |\n LL |     let x: &i32;"}, {"sha": "f3289e239818a7c445a0a162035791ffb613a461", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09851cfba9ff151d293f38526fd148e22a00092/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09851cfba9ff151d293f38526fd148e22a00092/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.stderr?ref=d09851cfba9ff151d293f38526fd148e22a00092", "patch": "@@ -1,4 +1,4 @@\n-error[E0381]: used binding `*x` isn't initialized\n+error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-use-uninitialized-in-cast.rs:7:13\n    |\n LL |     let x: &i32;"}, {"sha": "c62f1d1d230617f86f1a35f540ca06e26ca03027", "filename": "src/test/ui/const-generics/const-generic-default-wont-borrowck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09851cfba9ff151d293f38526fd148e22a00092/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09851cfba9ff151d293f38526fd148e22a00092/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.stderr?ref=d09851cfba9ff151d293f38526fd148e22a00092", "patch": "@@ -1,4 +1,4 @@\n-error[E0381]: used binding `*s` isn't initialized\n+error[E0381]: used binding `s` isn't initialized\n   --> $DIR/const-generic-default-wont-borrowck.rs:2:26\n    |\n LL |     let s: &'static str; s.len()"}, {"sha": "63f230be7d4b3afdf26c31d2f35c24ad260575c3", "filename": "src/test/ui/nll/issue-21232-partial-init-and-erroneous-use.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d09851cfba9ff151d293f38526fd148e22a00092/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09851cfba9ff151d293f38526fd148e22a00092/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr?ref=d09851cfba9ff151d293f38526fd148e22a00092", "patch": "@@ -5,6 +5,8 @@ LL |     let d: D;\n    |         - binding declared here but left uninitialized\n LL |     d.x = 10;\n    |     ^^^^^^^^ `d` assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error[E0381]: assigned binding `d` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:33:5\n@@ -13,6 +15,8 @@ LL |     let mut d: D;\n    |         ----- binding declared here but left uninitialized\n LL |     d.x = 10;\n    |     ^^^^^^^^ `d` assigned here but it isn't fully initialized\n+   |\n+   = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n error[E0382]: assign of moved value: `d`\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:39:5\n@@ -24,7 +28,7 @@ LL |     drop(d);\n LL |     d.x = 10;\n    |     ^^^^^^^^ value assigned here after move\n \n-error[E0381]: partially assigned binding `d.s` isn't fully initialized\n+error[E0381]: partially assigned binding `d` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:45:5\n    |\n LL |     let d: D;\n@@ -34,7 +38,7 @@ LL |     d.s.y = 20;\n    |\n    = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: partially assigned binding `d.s` isn't fully initialized\n+error[E0381]: partially assigned binding `d` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:50:5\n    |\n LL |     let mut d: D;"}, {"sha": "947c9e29b4508e2a9466be663a1a1e57270977f0", "filename": "src/test/ui/nll/issue-21232-partial-init-and-use.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d09851cfba9ff151d293f38526fd148e22a00092/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09851cfba9ff151d293f38526fd148e22a00092/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr?ref=d09851cfba9ff151d293f38526fd148e22a00092", "patch": "@@ -98,7 +98,7 @@ LL |     t.0 = 10;\n    |\n    = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: partially assigned binding `q.r.f` isn't fully initialized\n+error[E0381]: partially assigned binding `q` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:170:5\n    |\n LL |     let q: Q<S<B>>;\n@@ -108,7 +108,7 @@ LL |     q.r.f.x = 10; q.r.f.y = Box::new(20);\n    |\n    = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: partially assigned binding `q.r.f` isn't fully initialized\n+error[E0381]: partially assigned binding `q` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:176:5\n    |\n LL |     let q: Q<T>;\n@@ -138,7 +138,7 @@ LL |     q.r.f.0 = 10; q.r.f.1 = Box::new(20);\n    |\n    = note: move occurs because `q.r` has type `R<(u32, Box<u32>)>`, which does not implement the `Copy` trait\n \n-error[E0381]: partially assigned binding `q.r.f` isn't fully initialized\n+error[E0381]: partially assigned binding `q` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:196:5\n    |\n LL |     let q: Q<S<B>>;\n@@ -148,7 +148,7 @@ LL |     q.r.f.x = 10;\n    |\n    = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: partially assigned binding `q.r.f` isn't fully initialized\n+error[E0381]: partially assigned binding `q` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:202:5\n    |\n LL |     let q: Q<T>;\n@@ -178,7 +178,7 @@ LL |     q.r.f.0 = 10;\n    |\n    = note: move occurs because `q.r` has type `R<(u32, Box<u32>)>`, which does not implement the `Copy` trait\n \n-error[E0381]: partially assigned binding `q.r.f` isn't fully initialized\n+error[E0381]: partially assigned binding `q` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:222:5\n    |\n LL |     let mut q: Q<S<Void>>;\n@@ -188,7 +188,7 @@ LL |     q.r.f.x = 10;\n    |\n    = help: partial initialization isn't supported, fully initialize the binding with a default value and mutate it, or use `std::mem::MaybeUninit`\n \n-error[E0381]: partially assigned binding `q.r.f` isn't fully initialized\n+error[E0381]: partially assigned binding `q` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:228:5\n    |\n LL |     let mut q: Q<Tvoid>;"}]}