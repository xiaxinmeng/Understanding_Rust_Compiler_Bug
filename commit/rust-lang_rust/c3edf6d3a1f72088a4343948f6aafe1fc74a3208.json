{"sha": "c3edf6d3a1f72088a4343948f6aafe1fc74a3208", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZWRmNmQzYTFmNzIwODhhNDM0Mzk0OGY2YWFmZTFmYzc0YTMyMDg=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-09-17T21:17:36Z"}, "committer": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-09-17T22:01:51Z"}, "message": "Fix indent computation of a macro with braces.\n\nThe leading whitespace of a multine string was taken into account when\ncomputing the `min_prefix_space_width`, even if that line couldn't be\ntrimmed. The consequence is it was always shifting the macro's content\nto the right.", "tree": {"sha": "cd27cd4b4e29fc5aaadd289b365c3792d6e327ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd27cd4b4e29fc5aaadd289b365c3792d6e327ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3edf6d3a1f72088a4343948f6aafe1fc74a3208", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEipi5pnt+pUplKNfibVYg2QghATMFAlugJWEACgkQbVYg2Qgh\nATMBUQf9H6s/QCJuHx21HpJOLJaN2ChZ1DOB/6wIDmnd/kjYMjIfl4i9WmuBhgm0\n7EkDz2FXE/tUTiWPRHgw1PTzrwEOhvOwbxgSDoqO9RmLH73queKPPOmtg8qBXPbY\nRyKZ9NVlCclGNag0dHxGUWM+PVTATzFpdUZPfH1YZq+Yd6FAf5TuKr2HEGzE02aN\no0Lnw6YaEXa7SPfbW1Dsvl4frrFGwUkwyDD3h4By1TXXnfpCfLd7TcNT65EBlCAF\nR6VQVmydDMuhmEdoW70m91W/N/py/P6kZQWxh7gxyVBFLyp2KFv7zhh+IGqFE8Q8\n1muY7haLBkR6RjWABfxrbLB6sPo0WQ==\n=dpIR\n-----END PGP SIGNATURE-----", "payload": "tree cd27cd4b4e29fc5aaadd289b365c3792d6e327ad\nparent 81a4235c7f5df681f1c62af40889c8a7b1adccb0\nauthor St\u00e9phane Campinas <stephane.campinas@gmail.com> 1537219056 +0200\ncommitter St\u00e9phane Campinas <stephane.campinas@gmail.com> 1537221711 +0200\n\nFix indent computation of a macro with braces.\n\nThe leading whitespace of a multine string was taken into account when\ncomputing the `min_prefix_space_width`, even if that line couldn't be\ntrimmed. The consequence is it was always shifting the macro's content\nto the right.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3edf6d3a1f72088a4343948f6aafe1fc74a3208", "html_url": "https://github.com/rust-lang/rust/commit/c3edf6d3a1f72088a4343948f6aafe1fc74a3208", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3edf6d3a1f72088a4343948f6aafe1fc74a3208/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81a4235c7f5df681f1c62af40889c8a7b1adccb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/81a4235c7f5df681f1c62af40889c8a7b1adccb0", "html_url": "https://github.com/rust-lang/rust/commit/81a4235c7f5df681f1c62af40889c8a7b1adccb0"}], "stats": {"total": 369, "additions": 354, "deletions": 15}, "files": [{"sha": "17ec29c3cbc575788748ebee2b76a1480658c788", "filename": "src/comment.rs", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c3edf6d3a1f72088a4343948f6aafe1fc74a3208/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3edf6d3a1f72088a4343948f6aafe1fc74a3208/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=c3edf6d3a1f72088a4343948f6aafe1fc74a3208", "patch": "@@ -821,6 +821,10 @@ pub enum FullCodeCharKind {\n     InComment,\n     /// Last character of a comment, '\\n' for a line comment, '/' for a block comment.\n     EndComment,\n+    /// Start of a mutlitine string\n+    StartString,\n+    /// End of a mutlitine string\n+    EndString,\n     /// Inside a string.\n     InString,\n }\n@@ -836,7 +840,7 @@ impl FullCodeCharKind {\n     }\n \n     pub fn is_string(self) -> bool {\n-        self == FullCodeCharKind::InString\n+        self == FullCodeCharKind::InString || self == FullCodeCharKind::StartString\n     }\n \n     fn to_codecharkind(self) -> CodeCharKind {\n@@ -924,17 +928,14 @@ where\n                     _ => CharClassesStatus::Normal, // Unreachable\n                 }\n             }\n-            CharClassesStatus::LitString => match chr {\n-                '\"' => CharClassesStatus::Normal,\n-                '\\\\' => {\n-                    char_kind = FullCodeCharKind::InString;\n-                    CharClassesStatus::LitStringEscape\n-                }\n-                _ => {\n-                    char_kind = FullCodeCharKind::InString;\n-                    CharClassesStatus::LitString\n+            CharClassesStatus::LitString => {\n+                char_kind = FullCodeCharKind::InString;\n+                match chr {\n+                    '\"' => CharClassesStatus::Normal,\n+                    '\\\\' => CharClassesStatus::LitStringEscape,\n+                    _ => CharClassesStatus::LitString,\n                 }\n-            },\n+            }\n             CharClassesStatus::LitStringEscape => {\n                 char_kind = FullCodeCharKind::InString;\n                 CharClassesStatus::LitString\n@@ -1052,9 +1053,22 @@ impl<'a> Iterator for LineClasses<'a> {\n \n         let mut line = String::new();\n \n+        let start_class = match self.base.peek() {\n+            Some((kind, _)) => *kind,\n+            None => FullCodeCharKind::Normal,\n+        };\n+\n         while let Some((kind, c)) = self.base.next() {\n-            self.kind = kind;\n             if c == '\\n' {\n+                self.kind = match (start_class, kind) {\n+                    (FullCodeCharKind::Normal, FullCodeCharKind::InString) => {\n+                        FullCodeCharKind::StartString\n+                    }\n+                    (FullCodeCharKind::InString, FullCodeCharKind::Normal) => {\n+                        FullCodeCharKind::EndString\n+                    }\n+                    _ => kind,\n+                };\n                 break;\n             } else {\n                 line.push(c);\n@@ -1227,7 +1241,10 @@ pub fn recover_comment_removed(\n pub fn filter_normal_code(code: &str) -> String {\n     let mut buffer = String::with_capacity(code.len());\n     LineClasses::new(code).for_each(|(kind, line)| match kind {\n-        FullCodeCharKind::Normal | FullCodeCharKind::InString => {\n+        FullCodeCharKind::Normal\n+        | FullCodeCharKind::StartString\n+        | FullCodeCharKind::InString\n+        | FullCodeCharKind::EndString => {\n             buffer.push_str(&line);\n             buffer.push('\\n');\n         }"}, {"sha": "e68a725e15fe5b303d98b9eac484b9b471738f09", "filename": "src/macros.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3edf6d3a1f72088a4343948f6aafe1fc74a3208/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3edf6d3a1f72088a4343948f6aafe1fc74a3208/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=c3edf6d3a1f72088a4343948f6aafe1fc74a3208", "patch": "@@ -1118,6 +1118,7 @@ fn indent_macro_snippet(\n             } else {\n                 Some(get_prefix_space_width(context, &line))\n             };\n+\n             let line = if veto_trim || (kind.is_string() && !line.ends_with('\\\\')) {\n                 veto_trim = kind.is_string() && !line.ends_with('\\\\');\n                 trimmed = false;\n@@ -1126,7 +1127,12 @@ fn indent_macro_snippet(\n                 line.trim().to_owned()\n             };\n             trimmed_lines.push((trimmed, line, prefix_space_width));\n-            prefix_space_width\n+\n+            // when computing the minimum, do not consider lines within a string\n+            match kind {\n+                FullCodeCharKind::InString | FullCodeCharKind::EndString => None,\n+                _ => prefix_space_width,\n+            }\n         }).min()?;\n \n     Some(\n@@ -1139,7 +1145,7 @@ fn indent_macro_snippet(\n                         let new_indent_width = indent.width() + original_indent_width\n                             .saturating_sub(min_prefix_space_width);\n                         let new_indent = Indent::from_width(context.config, new_indent_width);\n-                        format!(\"{}{}\", new_indent.to_string(context.config), line.trim())\n+                        format!(\"{}{}\", new_indent.to_string(context.config), line)\n                     }\n                     None => String::new(),\n                 },"}, {"sha": "5256dd7c9601e0c1ba2375d904ea4d226b1d6199", "filename": "tests/source/issue-2973.rs", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/c3edf6d3a1f72088a4343948f6aafe1fc74a3208/tests%2Fsource%2Fissue-2973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3edf6d3a1f72088a4343948f6aafe1fc74a3208/tests%2Fsource%2Fissue-2973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2973.rs?ref=c3edf6d3a1f72088a4343948f6aafe1fc74a3208", "patch": "@@ -0,0 +1,158 @@\n+#[cfg(test)]\n+mod test {\n+  summary_test! {\n+        tokenize_recipe_interpolation_eol,\n+    \"foo: # some comment\n+ {{hello}}\n+\",\n+    \"foo: \\\n+ {{hello}} \\\n+{{ahah}}\",\n+        \"N:#$>^{N}$<.\",\n+      }\n+\n+  summary_test! {\n+    tokenize_strings,\n+    r#\"a = \"'a'\" + '\"b\"' + \"'c'\" + '\"d\"'#echo hello\"#,\n+    r#\"N=\"+'+\"+'#.\"#,\n+  }\n+\n+  summary_test! {\n+        tokenize_recipe_interpolation_eol,\n+    \"foo: # some comment\n+ {{hello}}\n+\",\n+        \"N:#$>^{N}$<.\",\n+      }\n+\n+  summary_test! {\n+        tokenize_recipe_interpolation_eof,\n+    \"foo: # more comments\n+ {{hello}}\n+# another comment\n+\",\n+        \"N:#$>^{N}$<#$.\",\n+      }\n+\n+  summary_test! {\n+    tokenize_recipe_complex_interpolation_expression,\n+    \"foo: #lol\\n {{a + b + \\\"z\\\" + blarg}}\",\n+    \"N:#$>^{N+N+\\\"+N}<.\",\n+  }\n+\n+  summary_test! {\n+    tokenize_recipe_multiple_interpolations,\n+    \"foo:,#ok\\n {{a}}0{{b}}1{{c}}\",\n+    \"N:,#$>^{N}_{N}_{N}<.\",\n+  }\n+\n+  summary_test! {\n+        tokenize_junk,\n+    \"bob\n+\n+hello blah blah blah : a b c #whatever\n+    \",\n+        \"N$$NNNN:NNN#$.\",\n+      }\n+\n+  summary_test! {\n+        tokenize_empty_lines,\n+    \"\n+# this does something\n+hello:\n+  asdf\n+  bsdf\n+\n+  csdf\n+\n+  dsdf # whatever\n+\n+# yolo\n+  \",\n+        \"$#$N:$>^_$^_$$^_$$^_$$<#$.\",\n+      }\n+\n+  summary_test! {\n+        tokenize_comment_before_variable,\n+    \"\n+#\n+A='1'\n+echo:\n+  echo {{A}}\n+  \",\n+        \"$#$N='$N:$>^_{N}$<.\",\n+      }\n+\n+  summary_test! {\n+    tokenize_interpolation_backticks,\n+    \"hello:\\n echo {{`echo hello` + `echo goodbye`}}\",\n+    \"N:$>^_{`+`}<.\",\n+  }\n+\n+  summary_test! {\n+    tokenize_assignment_backticks,\n+    \"a = `echo hello` + `echo goodbye`\",\n+    \"N=`+`.\",\n+  }\n+\n+  summary_test! {\n+        tokenize_multiple,\n+    \"\n+hello:\n+  a\n+  b\n+\n+  c\n+\n+  d\n+\n+# hello\n+bob:\n+  frank\n+  \",\n+\n+        \"$N:$>^_$^_$$^_$$^_$$<#$N:$>^_$<.\",\n+      }\n+\n+  summary_test! {\n+    tokenize_comment,\n+    \"a:=#\",\n+    \"N:=#.\"\n+  }\n+\n+  summary_test! {\n+    tokenize_comment_with_bang,\n+    \"a:=#foo!\",\n+    \"N:=#.\"\n+  }\n+\n+  summary_test! {\n+        tokenize_order,\n+    r\"\n+b: a\n+  @mv a b\n+\n+a:\n+  @touch F\n+  @touch a\n+\n+d: c\n+  @rm c\n+\n+c: b\n+  @mv b c\",\n+        \"$N:N$>^_$$<N:$>^_$^_$$<N:N$>^_$$<N:N$>^_<.\",\n+      }\n+\n+  summary_test! {\n+    tokenize_parens,\n+    r\"((())) )abc(+\",\n+    \"((())))N(+.\",\n+  }\n+\n+  summary_test! {\n+    crlf_newline,\n+    \"#\\r\\n#asdf\\r\\n\",\n+    \"#$#$.\",\n+  }\n+}"}, {"sha": "86574bd86686038e228798f3017a3731ffe875fa", "filename": "tests/target/issue-2973.rs", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/c3edf6d3a1f72088a4343948f6aafe1fc74a3208/tests%2Ftarget%2Fissue-2973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3edf6d3a1f72088a4343948f6aafe1fc74a3208/tests%2Ftarget%2Fissue-2973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2973.rs?ref=c3edf6d3a1f72088a4343948f6aafe1fc74a3208", "patch": "@@ -0,0 +1,158 @@\n+#[cfg(test)]\n+mod test {\n+    summary_test! {\n+        tokenize_recipe_interpolation_eol,\n+    \"foo: # some comment\n+ {{hello}}\n+\",\n+    \"foo: \\\n+    {{hello}} \\\n+    {{ahah}}\",\n+        \"N:#$>^{N}$<.\",\n+      }\n+\n+    summary_test! {\n+      tokenize_strings,\n+      r#\"a = \"'a'\" + '\"b\"' + \"'c'\" + '\"d\"'#echo hello\"#,\n+      r#\"N=\"+'+\"+'#.\"#,\n+    }\n+\n+    summary_test! {\n+        tokenize_recipe_interpolation_eol,\n+    \"foo: # some comment\n+ {{hello}}\n+\",\n+        \"N:#$>^{N}$<.\",\n+      }\n+\n+    summary_test! {\n+        tokenize_recipe_interpolation_eof,\n+    \"foo: # more comments\n+ {{hello}}\n+# another comment\n+\",\n+        \"N:#$>^{N}$<#$.\",\n+      }\n+\n+    summary_test! {\n+      tokenize_recipe_complex_interpolation_expression,\n+      \"foo: #lol\\n {{a + b + \\\"z\\\" + blarg}}\",\n+      \"N:#$>^{N+N+\\\"+N}<.\",\n+    }\n+\n+    summary_test! {\n+      tokenize_recipe_multiple_interpolations,\n+      \"foo:,#ok\\n {{a}}0{{b}}1{{c}}\",\n+      \"N:,#$>^{N}_{N}_{N}<.\",\n+    }\n+\n+    summary_test! {\n+        tokenize_junk,\n+    \"bob\n+\n+hello blah blah blah : a b c #whatever\n+    \",\n+        \"N$$NNNN:NNN#$.\",\n+      }\n+\n+    summary_test! {\n+        tokenize_empty_lines,\n+    \"\n+# this does something\n+hello:\n+  asdf\n+  bsdf\n+\n+  csdf\n+\n+  dsdf # whatever\n+\n+# yolo\n+  \",\n+        \"$#$N:$>^_$^_$$^_$$^_$$<#$.\",\n+      }\n+\n+    summary_test! {\n+        tokenize_comment_before_variable,\n+    \"\n+#\n+A='1'\n+echo:\n+  echo {{A}}\n+  \",\n+        \"$#$N='$N:$>^_{N}$<.\",\n+      }\n+\n+    summary_test! {\n+      tokenize_interpolation_backticks,\n+      \"hello:\\n echo {{`echo hello` + `echo goodbye`}}\",\n+      \"N:$>^_{`+`}<.\",\n+    }\n+\n+    summary_test! {\n+      tokenize_assignment_backticks,\n+      \"a = `echo hello` + `echo goodbye`\",\n+      \"N=`+`.\",\n+    }\n+\n+    summary_test! {\n+        tokenize_multiple,\n+    \"\n+hello:\n+  a\n+  b\n+\n+  c\n+\n+  d\n+\n+# hello\n+bob:\n+  frank\n+  \",\n+\n+        \"$N:$>^_$^_$$^_$$^_$$<#$N:$>^_$<.\",\n+      }\n+\n+    summary_test! {\n+      tokenize_comment,\n+      \"a:=#\",\n+      \"N:=#.\"\n+    }\n+\n+    summary_test! {\n+      tokenize_comment_with_bang,\n+      \"a:=#foo!\",\n+      \"N:=#.\"\n+    }\n+\n+    summary_test! {\n+        tokenize_order,\n+    r\"\n+b: a\n+  @mv a b\n+\n+a:\n+  @touch F\n+  @touch a\n+\n+d: c\n+  @rm c\n+\n+c: b\n+  @mv b c\",\n+        \"$N:N$>^_$$<N:$>^_$^_$$<N:N$>^_$$<N:N$>^_<.\",\n+      }\n+\n+    summary_test! {\n+      tokenize_parens,\n+      r\"((())) )abc(+\",\n+      \"((())))N(+.\",\n+    }\n+\n+    summary_test! {\n+      crlf_newline,\n+      \"#\\r\\n#asdf\\r\\n\",\n+      \"#$#$.\",\n+    }\n+}"}]}