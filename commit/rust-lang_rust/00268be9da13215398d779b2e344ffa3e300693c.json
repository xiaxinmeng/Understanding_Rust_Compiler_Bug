{"sha": "00268be9da13215398d779b2e344ffa3e300693c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMjY4YmU5ZGExMzIxNTM5OGQ3NzliMmUzNDRmZmEzZTMwMDY5M2M=", "commit": {"author": {"name": "Nathan Corbyn", "email": "me@nathancorbyn.com", "date": "2020-05-14T21:06:44Z"}, "committer": {"name": "Nathan Corbyn", "email": "me@nathancorbyn.com", "date": "2020-05-15T11:31:12Z"}, "message": "Remove lang_items\\(\\).*\\.unwrap\\(\\)", "tree": {"sha": "8111ea50cb06f49ce1bd649c813e95f016ef0a9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8111ea50cb06f49ce1bd649c813e95f016ef0a9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00268be9da13215398d779b2e344ffa3e300693c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00268be9da13215398d779b2e344ffa3e300693c", "html_url": "https://github.com/rust-lang/rust/commit/00268be9da13215398d779b2e344ffa3e300693c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00268be9da13215398d779b2e344ffa3e300693c/comments", "author": {"login": "doctorn", "id": 6421560, "node_id": "MDQ6VXNlcjY0MjE1NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6421560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doctorn", "html_url": "https://github.com/doctorn", "followers_url": "https://api.github.com/users/doctorn/followers", "following_url": "https://api.github.com/users/doctorn/following{/other_user}", "gists_url": "https://api.github.com/users/doctorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/doctorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doctorn/subscriptions", "organizations_url": "https://api.github.com/users/doctorn/orgs", "repos_url": "https://api.github.com/users/doctorn/repos", "events_url": "https://api.github.com/users/doctorn/events{/privacy}", "received_events_url": "https://api.github.com/users/doctorn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "doctorn", "id": 6421560, "node_id": "MDQ6VXNlcjY0MjE1NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6421560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doctorn", "html_url": "https://github.com/doctorn", "followers_url": "https://api.github.com/users/doctorn/followers", "following_url": "https://api.github.com/users/doctorn/following{/other_user}", "gists_url": "https://api.github.com/users/doctorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/doctorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doctorn/subscriptions", "organizations_url": "https://api.github.com/users/doctorn/orgs", "repos_url": "https://api.github.com/users/doctorn/repos", "events_url": "https://api.github.com/users/doctorn/events{/privacy}", "received_events_url": "https://api.github.com/users/doctorn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a74d1862d4d87a56244958416fd05976c58ca1a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a74d1862d4d87a56244958416fd05976c58ca1a8", "html_url": "https://github.com/rust-lang/rust/commit/a74d1862d4d87a56244958416fd05976c58ca1a8"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "28edd87a3add5e055ebbeac083bb8f87ae559e2f", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00268be9da13215398d779b2e344ffa3e300693c/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00268be9da13215398d779b2e344ffa3e300693c/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=00268be9da13215398d779b2e344ffa3e300693c", "patch": "@@ -2,6 +2,8 @@ use rustc_middle::traits;\n use rustc_middle::ty::adjustment::CustomCoerceUnsized;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n+use rustc_hir::lang_items::CoerceUnsizedTraitLangItem;\n+\n pub mod collector;\n pub mod partitioning;\n \n@@ -10,7 +12,7 @@ pub fn custom_coerce_unsize_info<'tcx>(\n     source_ty: Ty<'tcx>,\n     target_ty: Ty<'tcx>,\n ) -> CustomCoerceUnsized {\n-    let def_id = tcx.lang_items().coerce_unsized_trait().unwrap();\n+    let def_id = tcx.require_lang_item(CoerceUnsizedTraitLangItem, None);\n \n     let trait_ref = ty::Binder::bind(ty::TraitRef {\n         def_id,"}, {"sha": "28ec2ca13d5af7f83e740ffe671f8b35942134f7", "filename": "src/librustc_mir_build/hair/pattern/const_to_pat.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00268be9da13215398d779b2e344ffa3e300693c/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00268be9da13215398d779b2e344ffa3e300693c/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs?ref=00268be9da13215398d779b2e344ffa3e300693c", "patch": "@@ -141,7 +141,8 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 // code at the moment, because types like `for <'a> fn(&'a ())` do\n                 // not *yet* implement `PartialEq`. So for now we leave this here.\n                 let ty_is_partial_eq: bool = {\n-                    let partial_eq_trait_id = self.tcx().require_lang_item(EqTraitLangItem, None);\n+                    let partial_eq_trait_id =\n+                        self.tcx().require_lang_item(EqTraitLangItem, Some(self.span));\n                     let obligation: PredicateObligation<'_> = predicate_for_trait_def(\n                         self.tcx(),\n                         self.param_env,"}, {"sha": "eb63505b69b413a73a8d0f8783a88c57a727012c", "filename": "src/librustc_trait_selection/traits/structural_match.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/00268be9da13215398d779b2e344ffa3e300693c/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00268be9da13215398d779b2e344ffa3e300693c/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs?ref=00268be9da13215398d779b2e344ffa3e300693c", "patch": "@@ -4,6 +4,7 @@ use crate::traits::{self, ConstPatternStructural, TraitEngine};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n+use rustc_hir::lang_items::{StructuralPeqTraitLangItem, StructuralTeqTraitLangItem};\n use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n use rustc_span::Span;\n \n@@ -69,7 +70,7 @@ pub fn type_marked_structural(\n     let mut fulfillment_cx = traits::FulfillmentContext::new();\n     let cause = ObligationCause::new(span, id, ConstPatternStructural);\n     // require `#[derive(PartialEq)]`\n-    let structural_peq_def_id = infcx.tcx.lang_items().structural_peq_trait().unwrap();\n+    let structural_peq_def_id = infcx.tcx.require_lang_item(StructuralPeqTraitLangItem, Some(span));\n     fulfillment_cx.register_bound(\n         infcx,\n         ty::ParamEnv::empty(),\n@@ -80,7 +81,7 @@ pub fn type_marked_structural(\n     // for now, require `#[derive(Eq)]`. (Doing so is a hack to work around\n     // the type `for<'a> fn(&'a ())` failing to implement `Eq` itself.)\n     let cause = ObligationCause::new(span, id, ConstPatternStructural);\n-    let structural_teq_def_id = infcx.tcx.lang_items().structural_teq_trait().unwrap();\n+    let structural_teq_def_id = infcx.tcx.require_lang_item(StructuralTeqTraitLangItem, Some(span));\n     fulfillment_cx.register_bound(\n         infcx,\n         ty::ParamEnv::empty(),"}, {"sha": "87a6f119acb09a6b34a26b774ce9b29d189a8e04", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00268be9da13215398d779b2e344ffa3e300693c/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00268be9da13215398d779b2e344ffa3e300693c/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=00268be9da13215398d779b2e344ffa3e300693c", "patch": "@@ -6,7 +6,7 @@ use crate::astconv::AstConv;\n use crate::middle::region;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::{FutureTraitLangItem, GeneratorTraitLangItem};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_infer::infer::{InferOk, InferResult};\n@@ -245,7 +245,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let trait_ref = projection.to_poly_trait_ref(tcx);\n \n         let is_fn = tcx.fn_trait_kind_from_lang_item(trait_ref.def_id()).is_some();\n-        let gen_trait = tcx.require_lang_item(lang_items::GeneratorTraitLangItem, cause_span);\n+        let gen_trait = tcx.require_lang_item(GeneratorTraitLangItem, cause_span);\n         let is_gen = gen_trait == trait_ref.def_id();\n         if !is_fn && !is_gen {\n             debug!(\"deduce_sig_from_projection: not fn or generator\");\n@@ -678,7 +678,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Check that this is a projection from the `Future` trait.\n         let trait_ref = predicate.projection_ty.trait_ref(self.tcx);\n-        let future_trait = self.tcx.lang_items().future_trait().unwrap();\n+        let future_trait = self.tcx.require_lang_item(FutureTraitLangItem, Some(cause_span));\n         if trait_ref.def_id != future_trait {\n             debug!(\"deduce_future_output_from_projection: not a future\");\n             return None;"}, {"sha": "9694ce9450c27ec3565e9686ba3e3b35c4e3e404", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00268be9da13215398d779b2e344ffa3e300693c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00268be9da13215398d779b2e344ffa3e300693c/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=00268be9da13215398d779b2e344ffa3e300693c", "patch": "@@ -7,7 +7,7 @@ use rustc_trait_selection::traits::{self, ObligationCause};\n use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n-use rustc_hir::lang_items::DerefTraitLangItem;\n+use rustc_hir::lang_items::{CloneTraitLangItem, DerefTraitLangItem};\n use rustc_hir::{is_range_literal, Node};\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::{self, AssocItem, Ty, TypeAndMut};\n@@ -456,8 +456,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 };\n                 if self.can_coerce(ref_ty, expected) {\n                     let mut sugg_sp = sp;\n-                    if let hir::ExprKind::MethodCall(segment, _sp, args) = &expr.kind {\n-                        let clone_trait = self.tcx.lang_items().clone_trait().unwrap();\n+                    if let hir::ExprKind::MethodCall(ref segment, sp, ref args) = expr.kind {\n+                        let clone_trait = self.tcx.require_lang_item(CloneTraitLangItem, Some(sp));\n                         if let ([arg], Some(true), sym::clone) = (\n                             &args[..],\n                             self.tables.borrow().type_dependent_def_id(expr.hir_id).map(|did| {\n@@ -635,7 +635,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ if sp == expr.span && !is_macro => {\n                 // Check for `Deref` implementations by constructing a predicate to\n                 // prove: `<T as Deref>::Output == U`\n-                let deref_trait = self.tcx.require_lang_item(DerefTraitLangItem, Some(expr.span));\n+                let deref_trait = self.tcx.require_lang_item(DerefTraitLangItem, Some(sp));\n                 let item_def_id = self\n                     .tcx\n                     .associated_items(deref_trait)"}, {"sha": "f06303ecff9851caaa71245021495a63dba8986d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00268be9da13215398d779b2e344ffa3e300693c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00268be9da13215398d779b2e344ffa3e300693c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=00268be9da13215398d779b2e344ffa3e300693c", "patch": "@@ -100,7 +100,9 @@ use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::{\n+    FutureTraitLangItem, PinTypeLangItem, SizedTraitLangItem, VaListTypeLangItem,\n+};\n use rustc_hir::{ExprKind, GenericArg, HirIdMap, Item, ItemKind, Node, PatKind, QPath};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::Idx;\n@@ -1342,10 +1344,8 @@ fn check_fn<'a, 'tcx>(\n     // C-variadic fns also have a `VaList` input that's not listed in `fn_sig`\n     // (as it's created inside the body itself, not passed in from outside).\n     let maybe_va_list = if fn_sig.c_variadic {\n-        let va_list_did = tcx.require_lang_item(\n-            lang_items::VaListTypeLangItem,\n-            Some(body.params.last().unwrap().span),\n-        );\n+        let va_list_did =\n+            tcx.require_lang_item(VaListTypeLangItem, Some(body.params.last().unwrap().span));\n         let region = tcx.mk_region(ty::ReScope(region::Scope {\n             id: body.value.hir_id.local_id,\n             data: region::ScopeData::CallSite,\n@@ -3303,7 +3303,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         code: traits::ObligationCauseCode<'tcx>,\n     ) {\n         if !ty.references_error() {\n-            let lang_item = self.tcx.require_lang_item(lang_items::SizedTraitLangItem, None);\n+            let lang_item = self.tcx.require_lang_item(SizedTraitLangItem, None);\n             self.require_type_meets(ty, span, code, lang_item);\n         }\n     }\n@@ -5142,7 +5142,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => {}\n         }\n         let boxed_found = self.tcx.mk_box(found);\n-        let new_found = self.tcx.mk_lang_item(boxed_found, lang_items::PinTypeLangItem).unwrap();\n+        let new_found = self.tcx.mk_lang_item(boxed_found, PinTypeLangItem).unwrap();\n         if let (true, Ok(snippet)) = (\n             self.can_coerce(new_found, expected),\n             self.sess().source_map().span_to_snippet(expr.span),\n@@ -5298,7 +5298,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let sp = expr.span;\n                 // Check for `Future` implementations by constructing a predicate to\n                 // prove: `<T as Future>::Output == U`\n-                let future_trait = self.tcx.lang_items().future_trait().unwrap();\n+                let future_trait = self.tcx.require_lang_item(FutureTraitLangItem, Some(sp));\n                 let item_def_id = self\n                     .tcx\n                     .associated_items(future_trait)"}, {"sha": "efa3cd9955b49610ad1537568bb145f130dbf4e5", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/00268be9da13215398d779b2e344ffa3e300693c/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00268be9da13215398d779b2e344ffa3e300693c/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=00268be9da13215398d779b2e344ffa3e300693c", "patch": "@@ -4,7 +4,9 @@\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::lang_items::UnsizeTraitLangItem;\n+use rustc_hir::lang_items::{\n+    CoerceUnsizedTraitLangItem, DispatchFromDynTraitLangItem, UnsizeTraitLangItem,\n+};\n use rustc_hir::ItemKind;\n use rustc_infer::infer;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n@@ -145,11 +147,11 @@ fn visit_implementation_of_coerce_unsized(tcx: TyCtxt<'tcx>, impl_did: LocalDefI\n fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     debug!(\"visit_implementation_of_dispatch_from_dyn: impl_did={:?}\", impl_did);\n \n-    let dispatch_from_dyn_trait = tcx.lang_items().dispatch_from_dyn_trait().unwrap();\n-\n     let impl_hir_id = tcx.hir().as_local_hir_id(impl_did);\n     let span = tcx.hir().span(impl_hir_id);\n \n+    let dispatch_from_dyn_trait = tcx.require_lang_item(DispatchFromDynTraitLangItem, Some(span));\n+\n     let source = tcx.type_of(impl_did);\n     assert!(!source.has_escaping_bound_vars());\n     let target = {\n@@ -314,22 +316,23 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n \n pub fn coerce_unsized_info(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUnsizedInfo {\n     debug!(\"compute_coerce_unsized_info(impl_did={:?})\", impl_did);\n-    let coerce_unsized_trait = tcx.lang_items().coerce_unsized_trait().unwrap();\n+\n+    // this provider should only get invoked for local def-ids\n+    let impl_hir_id = tcx.hir().as_local_hir_id(impl_did.expect_local());\n+    let span = tcx.hir().span(impl_hir_id);\n+\n+    let coerce_unsized_trait = tcx.require_lang_item(CoerceUnsizedTraitLangItem, Some(span));\n \n     let unsize_trait = tcx.lang_items().require(UnsizeTraitLangItem).unwrap_or_else(|err| {\n         tcx.sess.fatal(&format!(\"`CoerceUnsized` implementation {}\", err));\n     });\n \n-    // this provider should only get invoked for local def-ids\n-    let impl_hir_id = tcx.hir().as_local_hir_id(impl_did.expect_local());\n-\n     let source = tcx.type_of(impl_did);\n     let trait_ref = tcx.impl_trait_ref(impl_did).unwrap();\n     assert_eq!(trait_ref.def_id, coerce_unsized_trait);\n     let target = trait_ref.substs.type_at(1);\n     debug!(\"visit_implementation_of_coerce_unsized: {:?} -> {:?} (bound)\", source, target);\n \n-    let span = tcx.hir().span(impl_hir_id);\n     let param_env = tcx.param_env(impl_did);\n     assert!(!source.has_escaping_bound_vars());\n "}]}