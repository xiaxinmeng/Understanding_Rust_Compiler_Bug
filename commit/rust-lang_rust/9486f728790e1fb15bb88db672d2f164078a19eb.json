{"sha": "9486f728790e1fb15bb88db672d2f164078a19eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ODZmNzI4NzkwZTFmYjE1YmI4OGRiNjcyZDJmMTY0MDc4YTE5ZWI=", "commit": {"author": {"name": "CDirkx", "email": "christiaan@dirkx.com", "date": "2020-08-31T00:11:48Z"}, "committer": {"name": "Christiaan", "email": "christiaan@dirkx.email", "date": "2020-09-20T20:42:14Z"}, "message": "Stabilize some Option methods as const\n\nStabilize the following methods of `Option` as const:\n - `is_some`\n - `is_none`\n - `as_ref`\n\nPossible because of stabilization of #49146 (Allow if and match in constants).", "tree": {"sha": "16577702f0e9891da45a38f8e66a836fbe8ac6c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16577702f0e9891da45a38f8e66a836fbe8ac6c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9486f728790e1fb15bb88db672d2f164078a19eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9486f728790e1fb15bb88db672d2f164078a19eb", "html_url": "https://github.com/rust-lang/rust/commit/9486f728790e1fb15bb88db672d2f164078a19eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9486f728790e1fb15bb88db672d2f164078a19eb/comments", "author": null, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81e02708f1f4760244756548981277d5199baa9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/81e02708f1f4760244756548981277d5199baa9a", "html_url": "https://github.com/rust-lang/rust/commit/81e02708f1f4760244756548981277d5199baa9a"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "b1589008be073d123c1c2f4a8292ca0a02adc7cf", "filename": "library/core/src/option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9486f728790e1fb15bb88db672d2f164078a19eb/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9486f728790e1fb15bb88db672d2f164078a19eb/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=9486f728790e1fb15bb88db672d2f164078a19eb", "patch": "@@ -175,7 +175,7 @@ impl<T> Option<T> {\n     /// ```\n     #[must_use = \"if you intended to assert that this has a value, consider `.unwrap()` instead\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n+    #[rustc_const_stable(feature = \"const_option\", since = \"1.48.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn is_some(&self) -> bool {\n         matches!(*self, Some(_))\n@@ -195,7 +195,7 @@ impl<T> Option<T> {\n     #[must_use = \"if you intended to assert that this doesn't have a value, consider \\\n                   `.and_then(|| panic!(\\\"`Option` had a value when expected `None`\\\"))` instead\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n+    #[rustc_const_stable(feature = \"const_option\", since = \"1.48.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn is_none(&self) -> bool {\n         !self.is_some()\n@@ -254,7 +254,7 @@ impl<T> Option<T> {\n     /// println!(\"still can print text: {:?}\", text);\n     /// ```\n     #[inline]\n-    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n+    #[rustc_const_stable(feature = \"const_option\", since = \"1.48.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn as_ref(&self) -> Option<&T> {\n         match *self {"}, {"sha": "793f78c8d20fa0c6dcc392e4867c6536f47734f3", "filename": "src/test/ui/consts/const-option.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9486f728790e1fb15bb88db672d2f164078a19eb/src%2Ftest%2Fui%2Fconsts%2Fconst-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9486f728790e1fb15bb88db672d2f164078a19eb/src%2Ftest%2Fui%2Fconsts%2Fconst-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-option.rs?ref=9486f728790e1fb15bb88db672d2f164078a19eb", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(const_option)]\n-\n const X: Option<i32> = Some(32);\n const Y: Option<&i32> = X.as_ref();\n "}]}