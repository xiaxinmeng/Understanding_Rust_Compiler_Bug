{"sha": "ee3088f27b3317863f9883462ced8bd0920868bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMzA4OGYyN2IzMzE3ODYzZjk4ODM0NjJjZWQ4YmQwOTIwODY4YmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-27T13:06:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-27T13:06:59Z"}, "message": "Auto merge of #5631 - ThibsG:ExtendUselessConversion, r=matthiaskrgr\n\nExtend useless conversion\n\nThis PR extends `useless_conversion` lint with `TryFrom` and `TryInto`\n\nfixes: #5344\n\nchangelog: Extend `useless_conversion` with `TryFrom` and `TryInto`", "tree": {"sha": "9da31d3f8ee3dcee7b3350ba9b1b5d6d99bb1deb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9da31d3f8ee3dcee7b3350ba9b1b5d6d99bb1deb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee3088f27b3317863f9883462ced8bd0920868bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee3088f27b3317863f9883462ced8bd0920868bf", "html_url": "https://github.com/rust-lang/rust/commit/ee3088f27b3317863f9883462ced8bd0920868bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee3088f27b3317863f9883462ced8bd0920868bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a2208fcc2517c7c607b9d0ccec8878cea7c87ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a2208fcc2517c7c607b9d0ccec8878cea7c87ee", "html_url": "https://github.com/rust-lang/rust/commit/2a2208fcc2517c7c607b9d0ccec8878cea7c87ee"}, {"sha": "1801841ae554a7778666c4c1085393b32eccf74d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1801841ae554a7778666c4c1085393b32eccf74d", "html_url": "https://github.com/rust-lang/rust/commit/1801841ae554a7778666c4c1085393b32eccf74d"}], "stats": {"total": 224, "additions": 199, "deletions": 25}, "files": [{"sha": "7fa97b246991219c204d6087949c3ecb9cc85c27", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 65, "deletions": 14, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/ee3088f27b3317863f9883462ced8bd0920868bf/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3088f27b3317863f9883462ced8bd0920868bf/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=ee3088f27b3317863f9883462ced8bd0920868bf", "patch": "@@ -1,14 +1,17 @@\n use crate::utils::{\n-    match_def_path, match_trait_method, paths, same_tys, snippet, snippet_with_macro_callsite, span_lint_and_sugg,\n+    is_type_diagnostic_item, match_def_path, match_trait_method, paths, same_tys, snippet, snippet_with_macro_callsite,\n+    span_lint_and_help, span_lint_and_sugg,\n };\n+use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, HirId, MatchSource};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `Into`/`From`/`IntoIter` calls that useless converts\n-    /// to the same type as caller.\n+    /// **What it does:** Checks for `Into`, `TryInto`, `From`, `TryFrom`,`IntoIter` calls\n+    /// that useless converts to the same type as caller.\n     ///\n     /// **Why is this bad?** Redundant code.\n     ///\n@@ -26,7 +29,7 @@ declare_clippy_lint! {\n     /// ```\n     pub USELESS_CONVERSION,\n     complexity,\n-    \"calls to `Into`/`From`/`IntoIter` that performs useless conversions to the same type\"\n+    \"calls to `Into`, `TryInto`, `From`, `TryFrom`, `IntoIter` that performs useless conversions to the same type\"\n }\n \n #[derive(Default)]\n@@ -36,6 +39,7 @@ pub struct UselessConversion {\n \n impl_lint_pass!(UselessConversion => [USELESS_CONVERSION]);\n \n+#[allow(clippy::too_many_lines)]\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr<'_>) {\n         if e.span.from_expansion() {\n@@ -63,12 +67,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n                     let b = cx.tables.expr_ty(&args[0]);\n                     if same_tys(cx, a, b) {\n                         let sugg = snippet_with_macro_callsite(cx, args[0].span, \"<expr>\").to_string();\n-\n                         span_lint_and_sugg(\n                             cx,\n                             USELESS_CONVERSION,\n                             e.span,\n-                            \"useless conversion\",\n+                            \"useless conversion to the same type\",\n                             \"consider removing `.into()`\",\n                             sugg,\n                             Applicability::MachineApplicable, // snippet\n@@ -84,30 +87,78 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n                             cx,\n                             USELESS_CONVERSION,\n                             e.span,\n-                            \"useless conversion\",\n+                            \"useless conversion to the same type\",\n                             \"consider removing `.into_iter()`\",\n                             sugg,\n                             Applicability::MachineApplicable, // snippet\n                         );\n                     }\n                 }\n+                if match_trait_method(cx, e, &paths::TRY_INTO_TRAIT) && &*name.ident.as_str() == \"try_into\" {\n+                    if_chain! {\n+                        let a = cx.tables.expr_ty(e);\n+                        let b = cx.tables.expr_ty(&args[0]);\n+                        if is_type_diagnostic_item(cx, a, sym!(result_type));\n+                        if let ty::Adt(_, substs) = a.kind;\n+                        if let Some(a_type) = substs.types().next();\n+                        if same_tys(cx, a_type, b);\n+\n+                        then {\n+                            span_lint_and_help(\n+                                cx,\n+                                USELESS_CONVERSION,\n+                                e.span,\n+                                \"useless conversion to the same type\",\n+                                None,\n+                                \"consider removing `.try_into()`\",\n+                            );\n+                        }\n+                    }\n+                }\n             },\n \n             ExprKind::Call(ref path, ref args) => {\n-                if let ExprKind::Path(ref qpath) = path.kind {\n-                    if let Some(def_id) = cx.tables.qpath_res(qpath, path.hir_id).opt_def_id() {\n-                        if match_def_path(cx, def_id, &paths::FROM_FROM) {\n-                            let a = cx.tables.expr_ty(e);\n-                            let b = cx.tables.expr_ty(&args[0]);\n-                            if same_tys(cx, a, b) {\n+                if_chain! {\n+                    if args.len() == 1;\n+                    if let ExprKind::Path(ref qpath) = path.kind;\n+                    if let Some(def_id) = cx.tables.qpath_res(qpath, path.hir_id).opt_def_id();\n+                    let a = cx.tables.expr_ty(e);\n+                    let b = cx.tables.expr_ty(&args[0]);\n+\n+                    then {\n+                        if_chain! {\n+                            if match_def_path(cx, def_id, &paths::TRY_FROM);\n+                            if is_type_diagnostic_item(cx, a, sym!(result_type));\n+                            if let ty::Adt(_, substs) = a.kind;\n+                            if let Some(a_type) = substs.types().next();\n+                            if same_tys(cx, a_type, b);\n+\n+                            then {\n+                                let hint = format!(\"consider removing `{}()`\", snippet(cx, path.span, \"TryFrom::try_from\"));\n+                                span_lint_and_help(\n+                                    cx,\n+                                    USELESS_CONVERSION,\n+                                    e.span,\n+                                    \"useless conversion to the same type\",\n+                                    None,\n+                                    &hint,\n+                                );\n+                            }\n+                        }\n+\n+                        if_chain! {\n+                            if match_def_path(cx, def_id, &paths::FROM_FROM);\n+                            if same_tys(cx, a, b);\n+\n+                            then {\n                                 let sugg = snippet(cx, args[0].span.source_callsite(), \"<expr>\").into_owned();\n                                 let sugg_msg =\n                                     format!(\"consider removing `{}()`\", snippet(cx, path.span, \"From::from\"));\n                                 span_lint_and_sugg(\n                                     cx,\n                                     USELESS_CONVERSION,\n                                     e.span,\n-                                    \"useless conversion\",\n+                                    \"useless conversion to the same type\",\n                                     &sugg_msg,\n                                     sugg,\n                                     Applicability::MachineApplicable, // snippet"}, {"sha": "779da7e6bf23ce01c423991f8a0b490022a77876", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3088f27b3317863f9883462ced8bd0920868bf/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3088f27b3317863f9883462ced8bd0920868bf/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=ee3088f27b3317863f9883462ced8bd0920868bf", "patch": "@@ -128,8 +128,10 @@ pub const TO_OWNED_METHOD: [&str; 4] = [\"alloc\", \"borrow\", \"ToOwned\", \"to_owned\"\n pub const TO_STRING: [&str; 3] = [\"alloc\", \"string\", \"ToString\"];\n pub const TO_STRING_METHOD: [&str; 4] = [\"alloc\", \"string\", \"ToString\", \"to_string\"];\n pub const TRANSMUTE: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n+pub const TRY_FROM: [&str; 4] = [\"core\", \"convert\", \"TryFrom\", \"try_from\"];\n pub const TRY_FROM_ERROR: [&str; 4] = [\"std\", \"ops\", \"Try\", \"from_error\"];\n pub const TRY_INTO_RESULT: [&str; 4] = [\"std\", \"ops\", \"Try\", \"into_result\"];\n+pub const TRY_INTO_TRAIT: [&str; 3] = [\"core\", \"convert\", \"TryInto\"];\n pub const VEC: [&str; 3] = [\"alloc\", \"vec\", \"Vec\"];\n pub const VEC_AS_MUT_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_mut_slice\"];\n pub const VEC_AS_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_slice\"];"}, {"sha": "f63301c7db0a6c9019ad83bd89c283c370437744", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3088f27b3317863f9883462ced8bd0920868bf/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3088f27b3317863f9883462ced8bd0920868bf/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=ee3088f27b3317863f9883462ced8bd0920868bf", "patch": "@@ -2421,7 +2421,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     Lint {\n         name: \"useless_conversion\",\n         group: \"complexity\",\n-        desc: \"calls to `Into`/`From`/`IntoIter` that performs useless conversions to the same type\",\n+        desc: \"calls to `Into`, `TryInto`, `From`, `TryFrom`, `IntoIter` that performs useless conversions to the same type\",\n         deprecation: None,\n         module: \"useless_conversion\",\n     },"}, {"sha": "84ec53702788c12592f02387ec2deaef7f5c36c0", "filename": "tests/ui/useless_conversion.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ee3088f27b3317863f9883462ced8bd0920868bf/tests%2Fui%2Fuseless_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee3088f27b3317863f9883462ced8bd0920868bf/tests%2Fui%2Fuseless_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.stderr?ref=ee3088f27b3317863f9883462ced8bd0920868bf", "patch": "@@ -1,4 +1,4 @@\n-error: useless conversion\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion.rs:6:13\n    |\n LL |     let _ = T::from(val);\n@@ -10,55 +10,55 @@ note: the lint level is defined here\n LL | #![deny(clippy::useless_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: useless conversion\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion.rs:7:5\n    |\n LL |     val.into()\n    |     ^^^^^^^^^^ help: consider removing `.into()`: `val`\n \n-error: useless conversion\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion.rs:19:22\n    |\n LL |         let _: i32 = 0i32.into();\n    |                      ^^^^^^^^^^^ help: consider removing `.into()`: `0i32`\n \n-error: useless conversion\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion.rs:51:21\n    |\n LL |     let _: String = \"foo\".to_string().into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `\"foo\".to_string()`\n \n-error: useless conversion\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion.rs:52:21\n    |\n LL |     let _: String = From::from(\"foo\".to_string());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `From::from()`: `\"foo\".to_string()`\n \n-error: useless conversion\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion.rs:53:13\n    |\n LL |     let _ = String::from(\"foo\".to_string());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `\"foo\".to_string()`\n \n-error: useless conversion\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion.rs:54:13\n    |\n LL |     let _ = String::from(format!(\"A: {:04}\", 123));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `format!(\"A: {:04}\", 123)`\n \n-error: useless conversion\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion.rs:55:13\n    |\n LL |     let _ = \"\".lines().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `\"\".lines()`\n \n-error: useless conversion\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion.rs:56:13\n    |\n LL |     let _ = vec![1, 2, 3].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![1, 2, 3].into_iter()`\n \n-error: useless conversion\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion.rs:57:21\n    |\n LL |     let _: String = format!(\"Hello {}\", \"world\").into();"}, {"sha": "3787ea991445cc45f9ff2baac1436883486a0008", "filename": "tests/ui/useless_conversion_try.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ee3088f27b3317863f9883462ced8bd0920868bf/tests%2Fui%2Fuseless_conversion_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3088f27b3317863f9883462ced8bd0920868bf/tests%2Fui%2Fuseless_conversion_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion_try.rs?ref=ee3088f27b3317863f9883462ced8bd0920868bf", "patch": "@@ -0,0 +1,42 @@\n+#![deny(clippy::useless_conversion)]\n+\n+use std::convert::{TryFrom, TryInto};\n+\n+fn test_generic<T: Copy>(val: T) -> T {\n+    let _ = T::try_from(val).unwrap();\n+    val.try_into().unwrap()\n+}\n+\n+fn test_generic2<T: Copy + Into<i32> + Into<U>, U: From<T>>(val: T) {\n+    // ok\n+    let _: i32 = val.try_into().unwrap();\n+    let _: U = val.try_into().unwrap();\n+    let _ = U::try_from(val).unwrap();\n+}\n+\n+fn main() {\n+    test_generic(10i32);\n+    test_generic2::<i32, i32>(10i32);\n+\n+    let _: String = \"foo\".try_into().unwrap();\n+    let _: String = TryFrom::try_from(\"foo\").unwrap();\n+    let _ = String::try_from(\"foo\").unwrap();\n+    #[allow(clippy::useless_conversion)]\n+    {\n+        let _ = String::try_from(\"foo\").unwrap();\n+        let _: String = \"foo\".try_into().unwrap();\n+    }\n+    let _: String = \"foo\".to_string().try_into().unwrap();\n+    let _: String = TryFrom::try_from(\"foo\".to_string()).unwrap();\n+    let _ = String::try_from(\"foo\".to_string()).unwrap();\n+    let _ = String::try_from(format!(\"A: {:04}\", 123)).unwrap();\n+    let _: String = format!(\"Hello {}\", \"world\").try_into().unwrap();\n+    let _: String = \"\".to_owned().try_into().unwrap();\n+    let _: String = match String::from(\"_\").try_into() {\n+        Ok(a) => a,\n+        Err(_) => \"\".into(),\n+    };\n+    // FIXME this is a false negative\n+    #[allow(clippy::cmp_owned)]\n+    if String::from(\"a\") == TryInto::<String>::try_into(String::from(\"a\")).unwrap() {}\n+}"}, {"sha": "b765727c168f5a5273cf55890b05ceebcf26a8a5", "filename": "tests/ui/useless_conversion_try.stderr", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/ee3088f27b3317863f9883462ced8bd0920868bf/tests%2Fui%2Fuseless_conversion_try.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee3088f27b3317863f9883462ced8bd0920868bf/tests%2Fui%2Fuseless_conversion_try.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion_try.stderr?ref=ee3088f27b3317863f9883462ced8bd0920868bf", "patch": "@@ -0,0 +1,79 @@\n+error: useless conversion to the same type\n+  --> $DIR/useless_conversion_try.rs:6:13\n+   |\n+LL |     let _ = T::try_from(val).unwrap();\n+   |             ^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/useless_conversion_try.rs:1:9\n+   |\n+LL | #![deny(clippy::useless_conversion)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: consider removing `T::try_from()`\n+\n+error: useless conversion to the same type\n+  --> $DIR/useless_conversion_try.rs:7:5\n+   |\n+LL |     val.try_into().unwrap()\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing `.try_into()`\n+\n+error: useless conversion to the same type\n+  --> $DIR/useless_conversion_try.rs:29:21\n+   |\n+LL |     let _: String = \"foo\".to_string().try_into().unwrap();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing `.try_into()`\n+\n+error: useless conversion to the same type\n+  --> $DIR/useless_conversion_try.rs:30:21\n+   |\n+LL |     let _: String = TryFrom::try_from(\"foo\".to_string()).unwrap();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing `TryFrom::try_from()`\n+\n+error: useless conversion to the same type\n+  --> $DIR/useless_conversion_try.rs:31:13\n+   |\n+LL |     let _ = String::try_from(\"foo\".to_string()).unwrap();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing `String::try_from()`\n+\n+error: useless conversion to the same type\n+  --> $DIR/useless_conversion_try.rs:32:13\n+   |\n+LL |     let _ = String::try_from(format!(\"A: {:04}\", 123)).unwrap();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing `String::try_from()`\n+\n+error: useless conversion to the same type\n+  --> $DIR/useless_conversion_try.rs:33:21\n+   |\n+LL |     let _: String = format!(\"Hello {}\", \"world\").try_into().unwrap();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing `.try_into()`\n+\n+error: useless conversion to the same type\n+  --> $DIR/useless_conversion_try.rs:34:21\n+   |\n+LL |     let _: String = \"\".to_owned().try_into().unwrap();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing `.try_into()`\n+\n+error: useless conversion to the same type\n+  --> $DIR/useless_conversion_try.rs:35:27\n+   |\n+LL |     let _: String = match String::from(\"_\").try_into() {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing `.try_into()`\n+\n+error: aborting due to 9 previous errors\n+"}]}