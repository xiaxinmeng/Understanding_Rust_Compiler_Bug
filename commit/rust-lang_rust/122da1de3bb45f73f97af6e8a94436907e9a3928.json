{"sha": "122da1de3bb45f73f97af6e8a94436907e9a3928", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMmRhMWRlM2JiNDVmNzNmOTdhZjZlOGE5NDQzNjkwN2U5YTM5Mjg=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-24T05:45:02Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-24T05:45:02Z"}, "message": "Merge #3339\n\n3339: Check for known array length in `needless_range_loop` r=phansch a=HMPerson1\n\nIn `VarVisitor`, we now keep track of the type of the thing that was directly indexed and, if it's an array, check if the range's end is (or is past) the array's length.\r\n\r\nFixes  #3033\n\nCo-authored-by: HMPerson1 <hmperson1@gmail.com>", "tree": {"sha": "af9512a4262c5e53baec47f2e5afbbedf31cdf8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af9512a4262c5e53baec47f2e5afbbedf31cdf8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/122da1de3bb45f73f97af6e8a94436907e9a3928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/122da1de3bb45f73f97af6e8a94436907e9a3928", "html_url": "https://github.com/rust-lang/rust/commit/122da1de3bb45f73f97af6e8a94436907e9a3928", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/122da1de3bb45f73f97af6e8a94436907e9a3928/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "3ff2c1f053d70d317d246d61008142c01cf68368", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ff2c1f053d70d317d246d61008142c01cf68368", "html_url": "https://github.com/rust-lang/rust/commit/3ff2c1f053d70d317d246d61008142c01cf68368"}, {"sha": "553d01d9c74477a8172581aba00d179fcd63a78f", "url": "https://api.github.com/repos/rust-lang/rust/commits/553d01d9c74477a8172581aba00d179fcd63a78f", "html_url": "https://github.com/rust-lang/rust/commit/553d01d9c74477a8172581aba00d179fcd63a78f"}], "stats": {"total": 94, "additions": 83, "deletions": 11}, "files": [{"sha": "0d1b960cc1f58fa37a5a3755d5f21f457d8e183a", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/122da1de3bb45f73f97af6e8a94436907e9a3928/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/122da1de3bb45f73f97af6e8a94436907e9a3928/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=122da1de3bb45f73f97af6e8a94436907e9a3928", "patch": "@@ -1068,7 +1068,7 @@ fn check_for_loop_range<'a, 'tcx>(\n \n             // linting condition: we only indexed one variable, and indexed it directly\n             if visitor.indexed_indirectly.is_empty() && visitor.indexed_directly.len() == 1 {\n-                let (indexed, indexed_extent) = visitor\n+                let (indexed, (indexed_extent, indexed_ty)) = visitor\n                     .indexed_directly\n                     .into_iter()\n                     .next()\n@@ -1119,7 +1119,7 @@ fn check_for_loop_range<'a, 'tcx>(\n                         }\n                     }\n \n-                    if is_len_call(end, indexed) {\n+                    if is_len_call(end, indexed) || is_end_eq_array_len(cx, end, limits, indexed_ty) {\n                         String::new()\n                     } else {\n                         match limits {\n@@ -1207,6 +1207,28 @@ fn is_len_call(expr: &Expr, var: Name) -> bool {\n     false\n }\n \n+fn is_end_eq_array_len(\n+    cx: &LateContext<'_, '_>,\n+    end: &Expr,\n+    limits: ast::RangeLimits,\n+    indexed_ty: Ty<'_>,\n+) -> bool {\n+    if_chain! {\n+        if let ExprKind::Lit(ref lit) = end.node;\n+        if let ast::LitKind::Int(end_int, _) = lit.node;\n+        if let ty::TyKind::Array(_, arr_len_const) = indexed_ty.sty;\n+        if let Some(arr_len) = arr_len_const.assert_usize(cx.tcx);\n+        then {\n+            return match limits {\n+                ast::RangeLimits::Closed => end_int + 1 >= arr_len.into(),\n+                ast::RangeLimits::HalfOpen => end_int >= arr_len.into(),\n+            };\n+        }\n+    }\n+\n+    false\n+}\n+\n fn check_for_loop_reverse_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arg: &'tcx Expr, expr: &'tcx Expr) {\n     // if this for loop is iterating over a two-sided range...\n     if let Some(higher::Range {\n@@ -1678,7 +1700,7 @@ struct VarVisitor<'a, 'tcx: 'a> {\n     indexed_indirectly: FxHashMap<Name, Option<region::Scope>>,\n     /// subset of `indexed` of vars that are indexed directly: `v[i]`\n     /// this will not contain cases like `v[calc_index(i)]` or `v[(i + 4) % N]`\n-    indexed_directly: FxHashMap<Name, Option<region::Scope>>,\n+    indexed_directly: FxHashMap<Name, (Option<region::Scope>, Ty<'tcx>)>,\n     /// Any names that are used outside an index operation.\n     /// Used to detect things like `&mut vec` used together with `vec[i]`\n     referenced: FxHashSet<Name>,\n@@ -1725,7 +1747,10 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                                 self.indexed_indirectly.insert(seqvar.segments[0].ident.name, Some(extent));\n                             }\n                             if index_used_directly {\n-                                self.indexed_directly.insert(seqvar.segments[0].ident.name, Some(extent));\n+                                self.indexed_directly.insert(\n+                                    seqvar.segments[0].ident.name,\n+                                    (Some(extent), self.cx.tables.node_id_to_type(seqexpr.hir_id)),\n+                                );\n                             }\n                             return false;  // no need to walk further *on the variable*\n                         }\n@@ -1734,7 +1759,10 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                                 self.indexed_indirectly.insert(seqvar.segments[0].ident.name, None);\n                             }\n                             if index_used_directly {\n-                                self.indexed_directly.insert(seqvar.segments[0].ident.name, None);\n+                                self.indexed_directly.insert(\n+                                    seqvar.segments[0].ident.name,\n+                                    (None, self.cx.tables.node_id_to_type(seqexpr.hir_id)),\n+                                );\n                             }\n                             return false;  // no need to walk further *on the variable*\n                         }"}, {"sha": "695209de53f3beda36fd7867dafe15d56b7d32a5", "filename": "tests/ui/for_loop.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/122da1de3bb45f73f97af6e8a94436907e9a3928/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/122da1de3bb45f73f97af6e8a94436907e9a3928/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=122da1de3bb45f73f97af6e8a94436907e9a3928", "patch": "@@ -97,8 +97,8 @@ error: the loop variable `j` is only used to index `STATIC`.\n     |              ^^^^\n help: consider using an iterator\n     |\n-110 |     for <item> in STATIC.iter().take(4) {\n-    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^\n+110 |     for <item> in &STATIC {\n+    |         ^^^^^^    ^^^^^^^\n \n error: the loop variable `j` is only used to index `CONST`.\n    --> $DIR/for_loop.rs:114:14\n@@ -107,8 +107,8 @@ error: the loop variable `j` is only used to index `CONST`.\n     |              ^^^^\n help: consider using an iterator\n     |\n-114 |     for <item> in CONST.iter().take(4) {\n-    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^\n+114 |     for <item> in &CONST {\n+    |         ^^^^^^    ^^^^^^\n \n error: the loop variable `i` is used to index `vec`\n    --> $DIR/for_loop.rs:118:14"}, {"sha": "c1992bba548054c0eaea9d55d5d01595320f0fa2", "filename": "tests/ui/needless_range_loop.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/122da1de3bb45f73f97af6e8a94436907e9a3928/tests%2Fui%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/122da1de3bb45f73f97af6e8a94436907e9a3928/tests%2Fui%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.rs?ref=122da1de3bb45f73f97af6e8a94436907e9a3928", "patch": "@@ -13,7 +13,7 @@ fn calc_idx(i: usize) -> usize {\n }\n \n fn main() {\n-    let ns = [2, 3, 5, 7];\n+    let ns = vec![2, 3, 5, 7];\n \n     for i in 3..10 {\n         println!(\"{}\", ns[i]);\n@@ -76,4 +76,18 @@ fn main() {\n     for i in x..=x + 4 {\n         vec[i] += 1;\n     }\n+\n+    let arr = [1,2,3];\n+\n+    for i in 0..3 {\n+        println!(\"{}\", arr[i]);\n+    }\n+\n+    for i in 0..2 {\n+        println!(\"{}\", arr[i]);\n+    }\n+\n+    for i in 1..3 {\n+        println!(\"{}\", arr[i]);\n+    }\n }"}, {"sha": "688e9fc3a2c59c30d8f17361f19455df8c6f7d24", "filename": "tests/ui/needless_range_loop.stderr", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/122da1de3bb45f73f97af6e8a94436907e9a3928/tests%2Fui%2Fneedless_range_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/122da1de3bb45f73f97af6e8a94436907e9a3928/tests%2Fui%2Fneedless_range_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.stderr?ref=122da1de3bb45f73f97af6e8a94436907e9a3928", "patch": "@@ -50,5 +50,35 @@ help: consider using an iterator\n 76 |     for <item> in vec.iter_mut().skip(x).take(4 + 1) {\n    |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: the loop variable `i` is only used to index `arr`.\n+  --> $DIR/needless_range_loop.rs:82:14\n+   |\n+82 |     for i in 0..3 {\n+   |              ^^^^\n+help: consider using an iterator\n+   |\n+82 |     for <item> in &arr {\n+   |         ^^^^^^    ^^^^\n+\n+error: the loop variable `i` is only used to index `arr`.\n+  --> $DIR/needless_range_loop.rs:86:14\n+   |\n+86 |     for i in 0..2 {\n+   |              ^^^^\n+help: consider using an iterator\n+   |\n+86 |     for <item> in arr.iter().take(2) {\n+   |         ^^^^^^    ^^^^^^^^^^^^^^^^^^\n+\n+error: the loop variable `i` is only used to index `arr`.\n+  --> $DIR/needless_range_loop.rs:90:14\n+   |\n+90 |     for i in 1..3 {\n+   |              ^^^^\n+help: consider using an iterator\n+   |\n+90 |     for <item> in arr.iter().skip(1) {\n+   |         ^^^^^^    ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n "}]}