{"sha": "544bcfece238d47ca600fd09cef1f282a7a9bb26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NGJjZmVjZTIzOGQ0N2NhNjAwZmQwOWNlZjFmMjgyYTdhOWJiMjY=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-11-17T00:30:45Z"}, "committer": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-19T04:44:21Z"}, "message": "Fix LLVM assertions when lowering log statements.", "tree": {"sha": "2f65baa8ddfa8381951eb36ed79a5f4c3c89c025", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f65baa8ddfa8381951eb36ed79a5f4c3c89c025"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/544bcfece238d47ca600fd09cef1f282a7a9bb26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/544bcfece238d47ca600fd09cef1f282a7a9bb26", "html_url": "https://github.com/rust-lang/rust/commit/544bcfece238d47ca600fd09cef1f282a7a9bb26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/544bcfece238d47ca600fd09cef1f282a7a9bb26/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa6d871e11bc4f765062cff41fbce5d977e24ea5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6d871e11bc4f765062cff41fbce5d977e24ea5", "html_url": "https://github.com/rust-lang/rust/commit/fa6d871e11bc4f765062cff41fbce5d977e24ea5"}], "stats": {"total": 134, "additions": 87, "deletions": 47}, "files": [{"sha": "3f422b21d851065df0cb728fbc808b2b5f892edf", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/544bcfece238d47ca600fd09cef1f282a7a9bb26/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544bcfece238d47ca600fd09cef1f282a7a9bb26/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=544bcfece238d47ca600fd09cef1f282a7a9bb26", "patch": "@@ -306,34 +306,65 @@ fn get_local_var_metadata(bcx: @block_ctxt, local: @ast::local)\n     ret mdval;\n }\n \n-fn update_source_pos(cx: @block_ctxt, s: codemap::span) {\n+fn update_source_pos(cx: @block_ctxt, s: codemap::span) -> @debug_source_pos {\n+    let dsp = @debug_source_pos(cx);\n     if !bcx_ccx(cx).sess.get_opts().debuginfo {\n-        ret;\n+        ret dsp;\n+    }\n+    let cm = bcx_ccx(cx).sess.get_codemap();\n+    if vec::is_empty(cx.source_pos.pos) {\n+        cx.source_pos.usable = true;\n+    }\n+    cx.source_pos.pos += [codemap::lookup_char_pos(cm, s.lo)]; //XXX maybe hi\n+    ret dsp;\n+}\n+\n+fn invalidate_source_pos(cx: @block_ctxt) -> @invalidated_source_pos {\n+    let isp = @invalidated_source_pos(cx);\n+    if !bcx_ccx(cx).sess.get_opts().debuginfo {\n+        ret isp;\n     }\n-    cx.source_pos = option::some(\n-        codemap::lookup_char_pos(bcx_ccx(cx).sess.get_codemap(),\n-                                 s.lo)); //XXX maybe hi\n+    cx.source_pos.usable = false;\n+    ret isp;\n+}\n \n+fn revalidate_source_pos(cx: @block_ctxt) {\n+    if !bcx_ccx(cx).sess.get_opts().debuginfo {\n+        ret;\n+    }\n+    cx.source_pos.usable = true;\n }\n \n fn reset_source_pos(cx: @block_ctxt) {\n-    cx.source_pos = option::none;\n+    if !bcx_ccx(cx).sess.get_opts().debuginfo {\n+        ret;\n+    }\n+    vec::pop(cx.source_pos.pos);\n+}\n+\n+resource debug_source_pos(bcx: @block_ctxt) {\n+    reset_source_pos(bcx);\n+}\n+resource invalidated_source_pos(bcx: @block_ctxt) {\n+    revalidate_source_pos(bcx);\n }\n \n fn add_line_info(cx: @block_ctxt, llinstr: ValueRef) {\n     if !bcx_ccx(cx).sess.get_opts().debuginfo ||\n-        option::is_none(cx.source_pos) {\n+       !cx.source_pos.usable ||\n+       vec::is_empty(cx.source_pos.pos) {\n         ret;\n     }\n-    let loc = option::get(cx.source_pos);\n+    let loc = option::get(vec::last(cx.source_pos.pos));\n     let blockmd = get_block_metadata(cx);\n-    let kind_id = llvm::LLVMGetMDKindID(as_buf(\"dbg\"), str::byte_len(\"dbg\"));\n+    let kind_id = llvm::LLVMGetMDKindID(as_buf(\"dbg\"),\n+                                        str::byte_len(\"dbg\"));\n     let scopedata = [lli32(loc.line as int),\n                      lli32(loc.col as int),\n                      blockmd.node,\n                      llnull()];\n     let dbgscope = llmdnode(scopedata);\n-    llvm::LLVMSetMetadata(llinstr, kind_id, dbgscope);    \n+    llvm::LLVMSetMetadata(llinstr, kind_id, dbgscope);\n }\n \n fn get_function_metadata(cx: @crate_ctxt, item: @ast::item,"}, {"sha": "1e91949d51fb27c255b3539407889ee16c7596b8", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/544bcfece238d47ca600fd09cef1f282a7a9bb26/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544bcfece238d47ca600fd09cef1f282a7a9bb26/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=544bcfece238d47ca600fd09cef1f282a7a9bb26", "patch": "@@ -3519,7 +3519,7 @@ fn trans_temp_expr(bcx: @block_ctxt, e: @ast::expr) -> result {\n // - exprs with non-immediate type never get dest=by_val\n fn trans_expr(bcx: @block_ctxt, e: @ast::expr, dest: dest) -> @block_ctxt {\n     let tcx = bcx_tcx(bcx);\n-    debuginfo::update_source_pos(bcx, e.span);\n+    let _s = debuginfo::update_source_pos(bcx, e.span);\n \n     if expr_is_lval(bcx, e) {\n         ret lval_to_dps(bcx, e, dest);\n@@ -4014,7 +4014,7 @@ fn trans_stmt(cx: @block_ctxt, s: ast::stmt) -> @block_ctxt {\n     }\n \n     let bcx = cx;\n-    debuginfo::update_source_pos(cx, s.span);\n+    let _s = debuginfo::update_source_pos(cx, s.span);\n     \n     alt s.node {\n       ast::stmt_expr(e, _) { bcx = trans_expr(cx, e, ignore); }\n@@ -4038,7 +4038,7 @@ fn trans_stmt(cx: @block_ctxt, s: ast::stmt) -> @block_ctxt {\n       _ { bcx_ccx(cx).sess.unimpl(\"stmt variant\"); }\n     }\n \n-    debuginfo::reset_source_pos(cx);\n+    //debuginfo::reset_source_pos(cx);\n     ret bcx;\n }\n \n@@ -4063,7 +4063,8 @@ fn new_block_ctxt(cx: @fn_ctxt, parent: block_parent, kind: block_kind,\n                 mutable lpad: option::none,\n                 sp: cx.sp,\n                 fcx: cx,\n-                mutable source_pos: option::none};\n+                source_pos: {mutable usable: false,\n+                             mutable pos: []}};\n     alt parent {\n       parent_some(cx) {\n         if cx.unreachable { Unreachable(bcx); }\n@@ -4108,7 +4109,8 @@ fn new_raw_block_ctxt(fcx: @fn_ctxt, llbb: BasicBlockRef) -> @block_ctxt {\n           mutable lpad: option::none,\n           sp: fcx.sp,\n           fcx: fcx,\n-          mutable source_pos: option::none};\n+          source_pos: {mutable usable: false,\n+                       mutable pos: []}};\n }\n \n \n@@ -4176,7 +4178,8 @@ fn llstaticallocas_block_ctxt(fcx: @fn_ctxt) -> @block_ctxt {\n           mutable lpad: option::none,\n           sp: fcx.sp,\n           fcx: fcx,\n-          mutable source_pos: option::none};\n+          source_pos: {mutable usable: false,\n+                       mutable pos: []}};\n }\n \n fn llderivedtydescs_block_ctxt(fcx: @fn_ctxt) -> @block_ctxt {\n@@ -4190,7 +4193,8 @@ fn llderivedtydescs_block_ctxt(fcx: @fn_ctxt) -> @block_ctxt {\n           mutable lpad: option::none,\n           sp: fcx.sp,\n           fcx: fcx,\n-          mutable source_pos: option::none};\n+          source_pos: {mutable usable: false,\n+                       mutable pos: []}};\n }\n \n \n@@ -4263,20 +4267,22 @@ fn trans_block(bcx: @block_ctxt, b: ast::blk) -> @block_ctxt {\n fn trans_block_dps(bcx: @block_ctxt, b: ast::blk, dest: dest)\n     -> @block_ctxt {\n     let bcx = bcx;\n-    debuginfo::update_source_pos(bcx, b.span);\n     block_locals(b) {|local| bcx = alloc_local(bcx, local); };\n     for s: @ast::stmt in b.node.stmts {\n+        let _s = debuginfo::update_source_pos(bcx, b.span);\n         bcx = trans_stmt(bcx, *s);\n+        //debuginfo::reset_source_pos(bcx);\n     }\n     alt b.node.expr {\n       some(e) {\n         let bt = ty::type_is_bot(bcx_tcx(bcx), ty::expr_ty(bcx_tcx(bcx), e));\n+        let _s = debuginfo::update_source_pos(bcx, e.span);\n         bcx = trans_expr(bcx, e, bt ? ignore : dest);\n+        //debuginfo::reset_source_pos(bcx);\n       }\n       _ { assert dest == ignore || bcx.unreachable; }\n     }\n     let rv = trans_block_cleanups(bcx, find_scope_cx(bcx));\n-    debuginfo::reset_source_pos(bcx);\n     ret rv;\n }\n "}, {"sha": "a4512be24f7faeeac8e8ff639beb34772410e7b7", "filename": "src/comp/middle/trans_build.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/544bcfece238d47ca600fd09cef1f282a7a9bb26/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544bcfece238d47ca600fd09cef1f282a7a9bb26/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_build.rs?ref=544bcfece238d47ca600fd09cef1f282a7a9bb26", "patch": "@@ -408,7 +408,7 @@ fn GEP(cx: @block_ctxt, Pointer: ValueRef, Indices: [ValueRef]) -> ValueRef {\n     unsafe {\n         let instr = llvm::LLVMBuildGEP(B(cx), Pointer, vec::to_ptr(Indices),\n                                        vec::len(Indices), noname());\n-        debuginfo::add_line_info(cx, instr);\n+        //debuginfo::add_line_info(cx, instr);\n         ret instr;\n     }\n }\n@@ -425,18 +425,18 @@ fn InBoundsGEP(cx: @block_ctxt, Pointer: ValueRef, Indices: [ValueRef]) ->\n    ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(T_ptr(T_nil())); }\n     unsafe {\n-        let v = llvm::LLVMBuildInBoundsGEP(B(cx), Pointer,\n-                                           vec::to_ptr(Indices),\n-                                           vec::len(Indices), noname());\n-        debuginfo::add_line_info(cx, v);\n-        ret v;\n+        let instr = llvm::LLVMBuildInBoundsGEP(B(cx), Pointer,\n+                                               vec::to_ptr(Indices),\n+                                               vec::len(Indices), noname());\n+        //debuginfo::add_line_info(cx, instr);\n+        ret instr;\n     }\n }\n \n fn StructGEP(cx: @block_ctxt, Pointer: ValueRef, Idx: uint) -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(T_ptr(T_nil())); }\n     let instr = llvm::LLVMBuildStructGEP(B(cx), Pointer, Idx, noname());\n-    debuginfo::add_line_info(cx, instr);\n+    //debuginfo::add_line_info(cx, instr);\n     ret instr;\n }\n \n@@ -458,137 +458,137 @@ fn GlobalStringPtr(cx: @block_ctxt, _Str: sbuf) -> ValueRef {\n fn Trunc(cx: @block_ctxt, Val: ValueRef, DestTy: TypeRef) -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(DestTy); }\n     let instr = llvm::LLVMBuildTrunc(B(cx), Val, DestTy, noname());\n-    debuginfo::add_line_info(cx, instr);\n+    //debuginfo::add_line_info(cx, instr);\n     ret instr;\n }\n \n fn ZExt(cx: @block_ctxt, Val: ValueRef, DestTy: TypeRef) -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(DestTy); }\n     let instr = llvm::LLVMBuildZExt(B(cx), Val, DestTy, noname());\n-    debuginfo::add_line_info(cx, instr);\n+    //debuginfo::add_line_info(cx, instr);\n     ret instr;\n }\n \n fn SExt(cx: @block_ctxt, Val: ValueRef, DestTy: TypeRef) -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(DestTy); }\n     let instr = llvm::LLVMBuildSExt(B(cx), Val, DestTy, noname());\n-    debuginfo::add_line_info(cx, instr);\n+    //debuginfo::add_line_info(cx, instr);\n     ret instr;\n }\n \n fn FPToUI(cx: @block_ctxt, Val: ValueRef, DestTy: TypeRef) -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(DestTy); }\n     let instr = llvm::LLVMBuildFPToUI(B(cx), Val, DestTy, noname());\n-    debuginfo::add_line_info(cx, instr);\n+    //debuginfo::add_line_info(cx, instr);\n     ret instr;\n }\n \n fn FPToSI(cx: @block_ctxt, Val: ValueRef, DestTy: TypeRef) -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(DestTy); }\n     let instr = llvm::LLVMBuildFPToSI(B(cx), Val, DestTy, noname());\n-    debuginfo::add_line_info(cx, instr);\n+    //debuginfo::add_line_info(cx, instr);\n     ret instr;\n }\n \n fn UIToFP(cx: @block_ctxt, Val: ValueRef, DestTy: TypeRef) -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(DestTy); }\n     let instr = llvm::LLVMBuildUIToFP(B(cx), Val, DestTy, noname());\n-    debuginfo::add_line_info(cx, instr);\n+    //debuginfo::add_line_info(cx, instr);\n     ret instr;\n }\n \n fn SIToFP(cx: @block_ctxt, Val: ValueRef, DestTy: TypeRef) -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(DestTy); }\n     let instr = llvm::LLVMBuildSIToFP(B(cx), Val, DestTy, noname());\n-    debuginfo::add_line_info(cx, instr);\n+    //debuginfo::add_line_info(cx, instr);\n     ret instr;\n }\n \n fn FPTrunc(cx: @block_ctxt, Val: ValueRef, DestTy: TypeRef) -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(DestTy); }\n     let instr = llvm::LLVMBuildFPTrunc(B(cx), Val, DestTy, noname());\n-    debuginfo::add_line_info(cx, instr);\n+    //debuginfo::add_line_info(cx, instr);\n     ret instr;\n }\n \n fn FPExt(cx: @block_ctxt, Val: ValueRef, DestTy: TypeRef) -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(DestTy); }\n     let instr = llvm::LLVMBuildFPExt(B(cx), Val, DestTy, noname());\n-    debuginfo::add_line_info(cx, instr);\n+    //debuginfo::add_line_info(cx, instr);\n     ret instr;\n }\n \n fn PtrToInt(cx: @block_ctxt, Val: ValueRef, DestTy: TypeRef) -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(DestTy); }\n     let instr = llvm::LLVMBuildPtrToInt(B(cx), Val, DestTy, noname());\n-    debuginfo::add_line_info(cx, instr);\n+    //debuginfo::add_line_info(cx, instr);\n     ret instr;\n }\n \n fn IntToPtr(cx: @block_ctxt, Val: ValueRef, DestTy: TypeRef) -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(DestTy); }\n     let instr = llvm::LLVMBuildIntToPtr(B(cx), Val, DestTy, noname());\n-    debuginfo::add_line_info(cx, instr);\n+    //debuginfo::add_line_info(cx, instr);\n     ret instr;\n }\n \n fn BitCast(cx: @block_ctxt, Val: ValueRef, DestTy: TypeRef) -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(DestTy); }\n     let instr = llvm::LLVMBuildBitCast(B(cx), Val, DestTy, noname());\n-    debuginfo::add_line_info(cx, instr);\n+    //debuginfo::add_line_info(cx, instr);\n     ret instr;\n }\n \n fn ZExtOrBitCast(cx: @block_ctxt, Val: ValueRef, DestTy: TypeRef) ->\n    ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(DestTy); }\n     let instr = llvm::LLVMBuildZExtOrBitCast(B(cx), Val, DestTy, noname());\n-    debuginfo::add_line_info(cx, instr);\n+    //debuginfo::add_line_info(cx, instr);\n     ret instr;\n }\n \n fn SExtOrBitCast(cx: @block_ctxt, Val: ValueRef, DestTy: TypeRef) ->\n    ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(DestTy); }\n     let instr = llvm::LLVMBuildSExtOrBitCast(B(cx), Val, DestTy, noname());\n-    debuginfo::add_line_info(cx, instr);\n+    //debuginfo::add_line_info(cx, instr);\n     ret instr;\n }\n \n fn TruncOrBitCast(cx: @block_ctxt, Val: ValueRef, DestTy: TypeRef) ->\n    ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(DestTy); }\n     let instr = llvm::LLVMBuildTruncOrBitCast(B(cx), Val, DestTy, noname());\n-    debuginfo::add_line_info(cx, instr);\n+    //debuginfo::add_line_info(cx, instr);\n     ret instr;\n }\n \n fn Cast(cx: @block_ctxt, Op: Opcode, Val: ValueRef, DestTy: TypeRef,\n         _Name: sbuf) -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(DestTy); }\n     let instr = llvm::LLVMBuildCast(B(cx), Op, Val, DestTy, noname());\n-    debuginfo::add_line_info(cx, instr);\n+    //debuginfo::add_line_info(cx, instr);\n     ret instr;\n }\n \n fn PointerCast(cx: @block_ctxt, Val: ValueRef, DestTy: TypeRef) -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(DestTy); }\n     let instr = llvm::LLVMBuildPointerCast(B(cx), Val, DestTy, noname());\n-    debuginfo::add_line_info(cx, instr);\n+    //debuginfo::add_line_info(cx, instr);\n     ret instr;\n }\n \n fn IntCast(cx: @block_ctxt, Val: ValueRef, DestTy: TypeRef) -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(DestTy); }\n     let instr = llvm::LLVMBuildIntCast(B(cx), Val, DestTy, noname());\n-    debuginfo::add_line_info(cx, instr);\n+    //debuginfo::add_line_info(cx, instr);\n     ret instr;\n }\n \n fn FPCast(cx: @block_ctxt, Val: ValueRef, DestTy: TypeRef) -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(DestTy); }\n     let instr = llvm::LLVMBuildFPCast(B(cx), Val, DestTy, noname());\n-    debuginfo::add_line_info(cx, instr);\n+    //debuginfo::add_line_info(cx, instr);\n     ret instr;\n }\n \n@@ -670,7 +670,7 @@ fn Call(cx: @block_ctxt, Fn: ValueRef, Args: [ValueRef]) -> ValueRef {\n     unsafe {\n         let instr = llvm::LLVMBuildCall(B(cx), Fn, vec::to_ptr(Args),\n                                         vec::len(Args), noname());\n-        debuginfo::add_line_info(cx, instr);\n+        //debuginfo::add_line_info(cx, instr);\n         ret instr;\n     }\n }"}, {"sha": "770b751cf82a0706e38ae71313cdd171d82aa407", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/544bcfece238d47ca600fd09cef1f282a7a9bb26/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544bcfece238d47ca600fd09cef1f282a7a9bb26/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=544bcfece238d47ca600fd09cef1f282a7a9bb26", "patch": "@@ -386,7 +386,8 @@ type block_ctxt =\n      mutable lpad: option::t<BasicBlockRef>,\n      sp: span,\n      fcx: @fn_ctxt,\n-     mutable source_pos: option::t<syntax::codemap::loc>};\n+     source_pos: {mutable usable: bool,\n+                  mutable pos: [syntax::codemap::loc]}};\n \n // FIXME: we should be able to use option::t<@block_parent> here but\n // the infinite-tag check in rustboot gets upset."}, {"sha": "9c1d574aad683083f2f4be961fe9fce9f26607f2", "filename": "src/comp/middle/trans_vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/544bcfece238d47ca600fd09cef1f282a7a9bb26/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544bcfece238d47ca600fd09cef1f282a7a9bb26/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs?ref=544bcfece238d47ca600fd09cef1f282a7a9bb26", "patch": "@@ -27,6 +27,7 @@ fn pointer_add(bcx: @block_ctxt, ptr: ValueRef, bytes: ValueRef) -> ValueRef {\n }\n \n fn alloc_raw(bcx: @block_ctxt, fill: ValueRef, alloc: ValueRef) -> result {\n+    let _s = debuginfo::invalidate_source_pos(bcx);\n     let ccx = bcx_ccx(bcx);\n     let llvecty = ccx.opaque_vec_type;\n     let vecsize = Add(bcx, alloc, llsize_of(ccx, llvecty));\n@@ -45,6 +46,7 @@ type alloc_result =\n      llunitty: TypeRef};\n \n fn alloc(bcx: @block_ctxt, vec_ty: ty::t, elts: uint) -> alloc_result {\n+    let _s = debuginfo::invalidate_source_pos(bcx);\n     let ccx = bcx_ccx(bcx);\n     let unit_ty = ty::sequence_element_type(bcx_tcx(bcx), vec_ty);\n     let llunitty = type_of_or_i8(bcx, unit_ty);"}]}