{"sha": "5435ed6916a59e8d5acba2149316a841c3905cbd", "node_id": "C_kwDOAAsO6NoAKDU0MzVlZDY5MTZhNTllOGQ1YWNiYTIxNDkzMTZhODQxYzM5MDVjYmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-07T19:00:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-07T19:00:02Z"}, "message": "Auto merge of #97835 - Dylan-DPC:rollup-0ae3pwp, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #95948 (Improve the safety docs for `CStr`)\n - #97325 (Fix precise field capture of univariant enums)\n - #97817 (:arrow_up: rust-analyzer)\n - #97821 (Remove confusing sentence from `Mutex` docs)\n - #97826 (Add more information for rustdoc-gui tests)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "688fde061a143080523daa3e9ac55660aca289c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/688fde061a143080523daa3e9ac55660aca289c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5435ed6916a59e8d5acba2149316a841c3905cbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5435ed6916a59e8d5acba2149316a841c3905cbd", "html_url": "https://github.com/rust-lang/rust/commit/5435ed6916a59e8d5acba2149316a841c3905cbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5435ed6916a59e8d5acba2149316a841c3905cbd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fe2c4b00dfbc33643e1af4b293eb057306a8339", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fe2c4b00dfbc33643e1af4b293eb057306a8339", "html_url": "https://github.com/rust-lang/rust/commit/7fe2c4b00dfbc33643e1af4b293eb057306a8339"}, {"sha": "4851ec729aff6d4325c3afd15d93ccd49d6e2930", "url": "https://api.github.com/repos/rust-lang/rust/commits/4851ec729aff6d4325c3afd15d93ccd49d6e2930", "html_url": "https://github.com/rust-lang/rust/commit/4851ec729aff6d4325c3afd15d93ccd49d6e2930"}], "stats": {"total": 175, "additions": 133, "deletions": 42}, "files": [{"sha": "c3b79917dda91348001162b2c8f7d5716f1ae6a6", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5435ed6916a59e8d5acba2149316a841c3905cbd/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5435ed6916a59e8d5acba2149316a841c3905cbd/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=5435ed6916a59e8d5acba2149316a841c3905cbd", "patch": "@@ -317,9 +317,11 @@ pub enum ExprKind<'tcx> {\n         lhs: ExprId,\n         rhs: ExprId,\n     },\n-    /// Access to a struct or tuple field.\n+    /// Access to a field of a struct, a tuple, an union, or an enum.\n     Field {\n         lhs: ExprId,\n+        /// Variant containing the field.\n+        variant_index: VariantIdx,\n         /// This can be a named (`.foo`) or unnamed (`.0`) field.\n         name: Field,\n     },"}, {"sha": "8c8ebb0a6b87a133036680492b1e3f6eeaa87b42", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5435ed6916a59e8d5acba2149316a841c3905cbd/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5435ed6916a59e8d5acba2149316a841c3905cbd/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=5435ed6916a59e8d5acba2149316a841c3905cbd", "patch": "@@ -80,7 +80,7 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n             visitor.visit_expr(&visitor.thir()[lhs]);\n             visitor.visit_expr(&visitor.thir()[rhs]);\n         }\n-        Field { lhs, name: _ } => visitor.visit_expr(&visitor.thir()[lhs]),\n+        Field { lhs, variant_index: _, name: _ } => visitor.visit_expr(&visitor.thir()[lhs]),\n         Index { lhs, index } => {\n             visitor.visit_expr(&visitor.thir()[lhs]);\n             visitor.visit_expr(&visitor.thir()[index]);"}, {"sha": "981441fab040fbe7194ac95280e7b9bd1a073790", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 48, "deletions": 11, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/5435ed6916a59e8d5acba2149316a841c3905cbd/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5435ed6916a59e8d5acba2149316a841c3905cbd/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=5435ed6916a59e8d5acba2149316a841c3905cbd", "patch": "@@ -5,6 +5,7 @@ use crate::build::ForGuard::{OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use rustc_hir::def_id::DefId;\n use rustc_hir::HirId;\n+use rustc_middle::hir::place::Projection as HirProjection;\n use rustc_middle::hir::place::ProjectionKind as HirProjectionKind;\n use rustc_middle::middle::region;\n use rustc_middle::mir::AssertKind::BoundsCheck;\n@@ -268,20 +269,52 @@ fn to_upvars_resolved_place_builder<'a, 'tcx>(\n                 ty::UpvarCapture::ByValue => upvar_resolved_place_builder,\n             };\n \n-            let next_projection = capture.place.projections.len();\n-            let mut curr_projections = from_builder.projection;\n-\n             // We used some of the projections to build the capture itself,\n             // now we apply the remaining to the upvar resolved place.\n-            upvar_resolved_place_builder\n-                .projection\n-                .extend(curr_projections.drain(next_projection..));\n+            let remaining_projections = strip_prefix(\n+                capture.place.base_ty,\n+                from_builder.projection,\n+                &capture.place.projections,\n+            );\n+            upvar_resolved_place_builder.projection.extend(remaining_projections);\n \n             Ok(upvar_resolved_place_builder)\n         }\n     }\n }\n \n+/// Returns projections remaining after stripping an initial prefix of HIR\n+/// projections.\n+///\n+/// Supports only HIR projection kinds that represent a path that might be\n+/// captured by a closure or a generator, i.e., an `Index` or a `Subslice`\n+/// projection kinds are unsupported.\n+fn strip_prefix<'tcx>(\n+    mut base_ty: Ty<'tcx>,\n+    projections: Vec<PlaceElem<'tcx>>,\n+    prefix_projections: &[HirProjection<'tcx>],\n+) -> impl Iterator<Item = PlaceElem<'tcx>> {\n+    let mut iter = projections.into_iter();\n+    for projection in prefix_projections {\n+        match projection.kind {\n+            HirProjectionKind::Deref => {\n+                assert!(matches!(iter.next(), Some(ProjectionElem::Deref)));\n+            }\n+            HirProjectionKind::Field(..) => {\n+                if base_ty.is_enum() {\n+                    assert!(matches!(iter.next(), Some(ProjectionElem::Downcast(..))));\n+                }\n+                assert!(matches!(iter.next(), Some(ProjectionElem::Field(..))));\n+            }\n+            HirProjectionKind::Index | HirProjectionKind::Subslice => {\n+                bug!(\"unexpected projection kind: {:?}\", projection);\n+            }\n+        }\n+        base_ty = projection.ty;\n+    }\n+    iter\n+}\n+\n impl<'tcx> PlaceBuilder<'tcx> {\n     pub(crate) fn into_place<'a>(\n         self,\n@@ -438,11 +471,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     this.expr_as_place(block, &this.thir[value], mutability, fake_borrow_temps)\n                 })\n             }\n-            ExprKind::Field { lhs, name } => {\n-                let place_builder = unpack!(\n-                    block =\n-                        this.expr_as_place(block, &this.thir[lhs], mutability, fake_borrow_temps,)\n-                );\n+            ExprKind::Field { lhs, variant_index, name } => {\n+                let lhs = &this.thir[lhs];\n+                let mut place_builder =\n+                    unpack!(block = this.expr_as_place(block, lhs, mutability, fake_borrow_temps,));\n+                if let ty::Adt(adt_def, _) = lhs.ty.kind() {\n+                    if adt_def.is_enum() {\n+                        place_builder = place_builder.downcast(*adt_def, variant_index);\n+                    }\n+                }\n                 block.and(place_builder.field(name, expr.ty))\n             }\n             ExprKind::Deref { arg } => {"}, {"sha": "bd9f599fff0a15efb1b8f32e7ec98b9e8da8f571", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5435ed6916a59e8d5acba2149316a841c3905cbd/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5435ed6916a59e8d5acba2149316a841c3905cbd/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=5435ed6916a59e8d5acba2149316a841c3905cbd", "patch": "@@ -591,6 +591,7 @@ impl<'tcx> Cx<'tcx> {\n             }\n             hir::ExprKind::Field(ref source, ..) => ExprKind::Field {\n                 lhs: self.mirror_expr(source),\n+                variant_index: VariantIdx::new(0),\n                 name: Field::new(tcx.field_index(expr.hir_id, self.typeck_results)),\n             },\n             hir::ExprKind::Cast(ref source, ref cast_ty) => {\n@@ -994,14 +995,11 @@ impl<'tcx> Cx<'tcx> {\n                 HirProjectionKind::Deref => {\n                     ExprKind::Deref { arg: self.thir.exprs.push(captured_place_expr) }\n                 }\n-                HirProjectionKind::Field(field, ..) => {\n-                    // Variant index will always be 0, because for multi-variant\n-                    // enums, we capture the enum entirely.\n-                    ExprKind::Field {\n-                        lhs: self.thir.exprs.push(captured_place_expr),\n-                        name: Field::new(field as usize),\n-                    }\n-                }\n+                HirProjectionKind::Field(field, variant_index) => ExprKind::Field {\n+                    lhs: self.thir.exprs.push(captured_place_expr),\n+                    variant_index,\n+                    name: Field::new(field as usize),\n+                },\n                 HirProjectionKind::Index | HirProjectionKind::Subslice => {\n                     // We don't capture these projections, so we can ignore them here\n                     continue;"}, {"sha": "10bf95abd39594ae3a1d1652f35e90a105ae547a", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5435ed6916a59e8d5acba2149316a841c3905cbd/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5435ed6916a59e8d5acba2149316a841c3905cbd/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=5435ed6916a59e8d5acba2149316a841c3905cbd", "patch": "@@ -196,20 +196,32 @@ impl CStr {\n     /// allows inspection and interoperation of non-owned C strings. The total\n     /// size of the raw C string must be smaller than `isize::MAX` **bytes**\n     /// in memory due to calling the `slice::from_raw_parts` function.\n-    /// This method is unsafe for a number of reasons:\n     ///\n-    /// * There is no guarantee to the validity of `ptr`.\n-    /// * The returned lifetime is not guaranteed to be the actual lifetime of\n-    ///   `ptr`.\n-    /// * There is no guarantee that the memory pointed to by `ptr` contains a\n-    ///   valid nul terminator byte at the end of the string.\n-    /// * It is not guaranteed that the memory pointed by `ptr` won't change\n-    ///   before the `CStr` has been destroyed.\n+    /// # Safety\n+    ///\n+    /// * The memory pointed to by `ptr` must contain a valid nul terminator at the\n+    ///   end of the string.\n+    ///\n+    /// * `ptr` must be [valid] for reads of bytes up to and including the null terminator.\n+    ///   This means in particular:\n+    ///\n+    ///     * The entire memory range of this `CStr` must be contained within a single allocated object!\n+    ///     * `ptr` must be non-null even for a zero-length cstr.\n+    ///\n+    /// * The memory referenced by the returned `CStr` must not be mutated for\n+    ///   the duration of lifetime `'a`.\n     ///\n     /// > **Note**: This operation is intended to be a 0-cost cast but it is\n     /// > currently implemented with an up-front calculation of the length of\n     /// > the string. This is not guaranteed to always be the case.\n     ///\n+    /// # Caveat\n+    ///\n+    /// The lifetime for the returned slice is inferred from its usage. To prevent accidental misuse,\n+    /// it's suggested to tie the lifetime to whichever source lifetime is safe in the context,\n+    /// such as by providing a helper function taking the lifetime of a host value for the slice,\n+    /// or by explicit annotation.\n+    ///\n     /// # Examples\n     ///\n     /// ```ignore (extern-declaration)\n@@ -227,6 +239,8 @@ impl CStr {\n     /// }\n     /// # }\n     /// ```\n+    ///\n+    /// [valid]: core::ptr#safety\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -349,8 +363,11 @@ impl CStr {\n     /// Unsafely creates a C string wrapper from a byte slice.\n     ///\n     /// This function will cast the provided `bytes` to a `CStr` wrapper without\n-    /// performing any sanity checks. The provided slice **must** be nul-terminated\n-    /// and not contain any interior nul bytes.\n+    /// performing any sanity checks.\n+    ///\n+    /// # Safety\n+    /// The provided slice **must** be nul-terminated and not contain any interior\n+    /// nul bytes.\n     ///\n     /// # Examples\n     ///"}, {"sha": "b2fbb77204aa0bf1fea7bcd7f756c6a715a66be4", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5435ed6916a59e8d5acba2149316a841c3905cbd/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5435ed6916a59e8d5acba2149316a841c3905cbd/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=5435ed6916a59e8d5acba2149316a841c3905cbd", "patch": "@@ -10,11 +10,10 @@ use crate::sys_common::mutex as sys;\n /// A mutual exclusion primitive useful for protecting shared data\n ///\n /// This mutex will block threads waiting for the lock to become available. The\n-/// mutex can also be statically initialized or created via a [`new`]\n-/// constructor. Each mutex has a type parameter which represents the data that\n-/// it is protecting. The data can only be accessed through the RAII guards\n-/// returned from [`lock`] and [`try_lock`], which guarantees that the data is only\n-/// ever accessed when the mutex is locked.\n+/// mutex can be created via a [`new`] constructor. Each mutex has a type parameter\n+/// which represents the data that it is protecting. The data can only be accessed\n+/// through the RAII guards returned from [`lock`] and [`try_lock`], which\n+/// guarantees that the data is only ever accessed when the mutex is locked.\n ///\n /// # Poisoning\n ///"}, {"sha": "d9854e2e7154844c1c3f02bcf647370f1bae0cdf", "filename": "src/test/rustdoc-gui/README.md", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5435ed6916a59e8d5acba2149316a841c3905cbd/src%2Ftest%2Frustdoc-gui%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/5435ed6916a59e8d5acba2149316a841c3905cbd/src%2Ftest%2Frustdoc-gui%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2FREADME.md?ref=5435ed6916a59e8d5acba2149316a841c3905cbd", "patch": "@@ -11,14 +11,24 @@ You can find more information and its documentation in its [repository][browser-\n If you need to have more information on the tests run, you can use `--test-args`:\n \n ```bash\n-$ ./x.py test src/test/rustdoc-gui --stage 1 --jobs 8 --test-args --debug\n+$ ./x.py test src/test/rustdoc-gui --stage 1 --test-args --debug\n ```\n \n-There are three options supported:\n+If you don't want to run in headless mode (helpful to debug sometimes), you can use\n+`--no-headless`:\n \n- * `--debug`: allows to see puppeteer commands.\n- * `--no-headless`: disable headless mode so you can see what's going on.\n- * `--show-text`: by default, text isn't rendered because of issues with fonts, it enables it back.\n+```bash\n+$ ./x.py test src/test/rustdoc-gui --stage 1 --test-args --no-headless\n+```\n+\n+To see the supported options, use `--help`.\n+\n+Important to be noted: if the chromium instance crashes when you run it, you might need to\n+use `--no-sandbox` to make it work:\n+\n+```bash\n+$ ./x.py test src/test/rustdoc-gui --stage 1 --test-args --no-sandbox\n+```\n \n [browser-ui-test]: https://github.com/GuillaumeGomez/browser-UI-test/\n [puppeteer]: https://pptr.dev/"}, {"sha": "bbe3aa31a98df99f8e199fb949de1e02b521b2c5", "filename": "src/test/ui/closures/2229_closure_analysis/capture-enum-field.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5435ed6916a59e8d5acba2149316a841c3905cbd/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enum-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5435ed6916a59e8d5acba2149316a841c3905cbd/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enum-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enum-field.rs?ref=5435ed6916a59e8d5acba2149316a841c3905cbd", "patch": "@@ -0,0 +1,27 @@\n+// edition:2021\n+// run-pass\n+\n+#[derive(Debug, PartialEq, Eq)]\n+pub enum Color {\n+    RGB(u8, u8, u8),\n+}\n+\n+fn main() {\n+    let mut color = Color::RGB(0, 0, 0);\n+    let mut red = |v| {\n+        let Color::RGB(ref mut r, _, _) = color;\n+        *r = v;\n+    };\n+    let mut green = |v| {\n+        let Color::RGB(_, ref mut g, _) = color;\n+        *g = v;\n+    };\n+    let mut blue = |v| {\n+        let Color::RGB(_, _, ref mut b) = color;\n+        *b = v;\n+    };\n+    red(1);\n+    green(2);\n+    blue(3);\n+    assert_eq!(Color::RGB(1, 2, 3), color);\n+}"}, {"sha": "ad6810e90bf89a4ef0ae21349d077050bc2a4fa2", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=5435ed6916a59e8d5acba2149316a841c3905cbd", "patch": "@@ -1 +1 @@\n-Subproject commit f94fa62d69faf5bd63b3772d3ec4f0c76cf2db57\n+Subproject commit ad6810e90bf89a4ef0ae21349d077050bc2a4fa2"}, {"sha": "a5121850369151582fc62858909e07febfa49f4e", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5435ed6916a59e8d5acba2149316a841c3905cbd/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/5435ed6916a59e8d5acba2149316a841c3905cbd/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=5435ed6916a59e8d5acba2149316a841c3905cbd", "patch": "@@ -16,6 +16,7 @@ function showHelp() {\n     console.log(\"  --debug                    : show extra information about script run\");\n     console.log(\"  --show-text                : render font in pages\");\n     console.log(\"  --no-headless              : disable headless mode\");\n+    console.log(\"  --no-sandbox               : disable sandbox mode\");\n     console.log(\"  --help                     : show this message then quit\");\n     console.log(\"  --tests-folder [PATH]      : location of the .GOML tests folder\");\n     console.log(\"  --jobs [NUMBER]            : number of threads to run tests on\");"}]}