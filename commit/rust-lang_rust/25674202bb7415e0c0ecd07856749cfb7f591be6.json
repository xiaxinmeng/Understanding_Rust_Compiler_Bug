{"sha": "25674202bb7415e0c0ecd07856749cfb7f591be6", "node_id": "C_kwDOAAsO6NoAKDI1Njc0MjAyYmI3NDE1ZTBjMGVjZDA3ODU2NzQ5Y2ZiN2Y1OTFiZTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-04T09:55:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-04T09:55:51Z"}, "message": "Auto merge of #96695 - JohnTitor:rollup-oo4fc1h, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #96597 (openbsd: unbreak build on native platform)\n - #96662 (Fix typo in lint levels doc)\n - #96668 (Fix flaky rustdoc-ui test because it did not replace time result)\n - #96679 (Quick fix for #96223.)\n - #96684 (Update `ProjectionElem::Downcast` documentation)\n - #96686 (Add some TAIT-related tests)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "bf46d2f082de2ec21147d3e168526e804f34dcd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf46d2f082de2ec21147d3e168526e804f34dcd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25674202bb7415e0c0ecd07856749cfb7f591be6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25674202bb7415e0c0ecd07856749cfb7f591be6", "html_url": "https://github.com/rust-lang/rust/commit/25674202bb7415e0c0ecd07856749cfb7f591be6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25674202bb7415e0c0ecd07856749cfb7f591be6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fed2c43bbf4e3955f83cea77c0b1709c0dbcebf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fed2c43bbf4e3955f83cea77c0b1709c0dbcebf3", "html_url": "https://github.com/rust-lang/rust/commit/fed2c43bbf4e3955f83cea77c0b1709c0dbcebf3"}, {"sha": "2ca778fb092f2a37ba17acf64c32ca0ed0877f9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca778fb092f2a37ba17acf64c32ca0ed0877f9e", "html_url": "https://github.com/rust-lang/rust/commit/2ca778fb092f2a37ba17acf64c32ca0ed0877f9e"}], "stats": {"total": 228, "additions": 218, "deletions": 10}, "files": [{"sha": "924bacb7aae21fe2508649d45b420604f6029731", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25674202bb7415e0c0ecd07856749cfb7f591be6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25674202bb7415e0c0ecd07856749cfb7f591be6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=25674202bb7415e0c0ecd07856749cfb7f591be6", "patch": "@@ -2017,9 +2017,7 @@ pub enum ProjectionElem<V, T> {\n         from_end: bool,\n     },\n \n-    /// \"Downcast\" to a variant of an ADT. Currently, we only introduce\n-    /// this for ADTs with more than one variant. It may be better to\n-    /// just introduce it always, or always for enums.\n+    /// \"Downcast\" to a variant of an enum or a generator.\n     ///\n     /// The included Symbol is the name of the variant, used for printing MIR.\n     Downcast(Option<Symbol>, VariantIdx),"}, {"sha": "f1d5201454d698389430528b811e7ad7ba6c2b28", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25674202bb7415e0c0ecd07856749cfb7f591be6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25674202bb7415e0c0ecd07856749cfb7f591be6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=25674202bb7415e0c0ecd07856749cfb7f591be6", "patch": "@@ -12,7 +12,7 @@ use rustc_target::abi::VariantIdx;\n #[derive(Copy, Clone, Debug, TypeFoldable)]\n pub struct PlaceTy<'tcx> {\n     pub ty: Ty<'tcx>,\n-    /// Downcast to a particular variant of an enum, if included.\n+    /// Downcast to a particular variant of an enum or a generator, if included.\n     pub variant_index: Option<VariantIdx>,\n }\n "}, {"sha": "bfb8ce6f1051c03b3573fbf39e2c5591c36da235", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25674202bb7415e0c0ecd07856749cfb7f591be6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25674202bb7415e0c0ecd07856749cfb7f591be6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=25674202bb7415e0c0ecd07856749cfb7f591be6", "patch": "@@ -866,7 +866,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 return false;\n             }\n \n-            let orig_ty = old_pred.self_ty().skip_binder();\n+            // This is a quick fix to resolve an ICE (#96223).\n+            // This change should probably be deeper.\n+            // As suggested by @jackh726, `mk_trait_obligation_with_new_self_ty` could take a `Binder<(TraitRef, Ty)>\n+            // instead of `Binder<Ty>` leading to some changes to its call places.\n+            let Some(orig_ty) = old_pred.self_ty().no_bound_vars() else {\n+                return false;\n+            };\n             let mk_result = |new_ty| {\n                 let obligation =\n                     self.mk_trait_obligation_with_new_self_ty(param_env, old_pred, new_ty);"}, {"sha": "2224bf5f66e90103c4f2542583f0e849b4779797", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=25674202bb7415e0c0ecd07856749cfb7f591be6", "patch": "@@ -1405,7 +1405,8 @@ impl<'a> Builder<'a> {\n         // FIXME(davidtwco): #[cfg(not(bootstrap))] - #95612 needs to be in the bootstrap compiler\n         // for this conditional to be removed.\n         if !target.contains(\"windows\") || compiler.stage >= 1 {\n-            if target.contains(\"linux\") || target.contains(\"windows\") {\n+            if target.contains(\"linux\") || target.contains(\"windows\") || target.contains(\"openbsd\")\n+            {\n                 rustflags.arg(\"-Zunstable-options\");\n             }\n             match self.config.rust_split_debuginfo {"}, {"sha": "fbec3cd9baf5033d5227e37f8da2538f48bed9d5", "filename": "src/doc/rustc/src/lints/levels.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "raw_url": "https://github.com/rust-lang/rust/raw/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md?ref=25674202bb7415e0c0ecd07856749cfb7f591be6", "patch": "@@ -100,9 +100,8 @@ This lint level gives you that.\n 'force-warn' does for 'warn'. It's the same as 'deny' in that a lint at this\n level will produce an error, but unlike the 'deny' level, the 'forbid' level\n can not be overridden to be anything lower than an error.  However, lint\n-levels may still be capped with `--cap-lints` (see below) so `rustc --cap-\n-lints warn` will make lints set to 'forbid' just\n-warn.\n+levels may still be capped with `--cap-lints` (see below) so `rustc --cap-lints warn`\n+will make lints set to 'forbid' just warn.\n \n ## Configuring warning levels\n "}, {"sha": "ce529916e5edebbd7e2846ebe4a157158bd4e1c0", "filename": "src/test/rustdoc-ui/block-doc-comment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Ftest%2Frustdoc-ui%2Fblock-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Ftest%2Frustdoc-ui%2Fblock-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fblock-doc-comment.rs?ref=25674202bb7415e0c0ecd07856749cfb7f591be6", "patch": "@@ -1,5 +1,6 @@\n // check-pass\n // compile-flags:--test\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n \n // This test ensures that no code block is detected in the doc comments.\n "}, {"sha": "7326c0a25a069340ea659b1382b6271d853bcc72", "filename": "src/test/rustdoc-ui/block-doc-comment.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Ftest%2Frustdoc-ui%2Fblock-doc-comment.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Ftest%2Frustdoc-ui%2Fblock-doc-comment.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fblock-doc-comment.stdout?ref=25674202bb7415e0c0ecd07856749cfb7f591be6", "patch": "@@ -1,5 +1,5 @@\n \n running 0 tests\n \n-test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n+test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}, {"sha": "85667bb849bd46cb6d07ec80a34056f4dcb4f392", "filename": "src/test/ui/suggestions/issue-96223.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96223.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96223.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96223.rs?ref=25674202bb7415e0c0ecd07856749cfb7f591be6", "patch": "@@ -0,0 +1,52 @@\n+// Previously ICEd because we didn't properly track binders in suggestions\n+// check-fail\n+\n+pub trait Foo<'de>: Sized {}\n+\n+pub trait Bar<'a>: 'static {\n+    type Inner: 'a;\n+}\n+\n+pub trait Fubar {\n+    type Bar: for<'a> Bar<'a>;\n+}\n+\n+pub struct Baz<T>(pub T);\n+\n+impl<'de, T> Foo<'de> for Baz<T> where T: Foo<'de> {}\n+\n+struct Empty;\n+\n+impl<M> Dummy<M> for Empty\n+where\n+    M: Fubar,\n+    for<'de> Baz<<M::Bar as Bar<'de>>::Inner>: Foo<'de>,\n+{\n+}\n+\n+pub trait Dummy<M>\n+where\n+    M: Fubar,\n+{\n+}\n+\n+pub struct EmptyBis<'a>(&'a [u8]);\n+\n+impl<'a> Bar<'a> for EmptyBis<'static> {\n+    type Inner = EmptyBis<'a>;\n+}\n+\n+pub struct EmptyMarker;\n+\n+impl Fubar for EmptyMarker {\n+    type Bar = EmptyBis<'static>;\n+}\n+\n+fn icey_bounds<D: Dummy<EmptyMarker>>(p: &D) {}\n+\n+fn trigger_ice() {\n+    let p = Empty;\n+    icey_bounds(&p); //~ERROR the trait bound\n+}\n+\n+fn main() {}"}, {"sha": "513725d99628cae3828825ec6889c91bb1fc521f", "filename": "src/test/ui/suggestions/issue-96223.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96223.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96223.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96223.stderr?ref=25674202bb7415e0c0ecd07856749cfb7f591be6", "patch": "@@ -0,0 +1,28 @@\n+error[E0277]: the trait bound `for<'de> EmptyBis<'de>: Foo<'_>` is not satisfied\n+  --> $DIR/issue-96223.rs:49:17\n+   |\n+LL |     icey_bounds(&p);\n+   |     ----------- ^^ the trait `for<'de> Foo<'_>` is not implemented for `EmptyBis<'de>`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Foo<'de>` is implemented for `Baz<T>`\n+note: required because of the requirements on the impl of `for<'de> Foo<'de>` for `Baz<EmptyBis<'de>>`\n+  --> $DIR/issue-96223.rs:16:14\n+   |\n+LL | impl<'de, T> Foo<'de> for Baz<T> where T: Foo<'de> {}\n+   |              ^^^^^^^^     ^^^^^^\n+note: required because of the requirements on the impl of `Dummy<EmptyMarker>` for `Empty`\n+  --> $DIR/issue-96223.rs:20:9\n+   |\n+LL | impl<M> Dummy<M> for Empty\n+   |         ^^^^^^^^     ^^^^^\n+note: required by a bound in `icey_bounds`\n+  --> $DIR/issue-96223.rs:45:19\n+   |\n+LL | fn icey_bounds<D: Dummy<EmptyMarker>>(p: &D) {}\n+   |                   ^^^^^^^^^^^^^^^^^^ required by this bound in `icey_bounds`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "6c838f410036ab33db6ef0405a437e4173acdc84", "filename": "src/test/ui/type-alias-impl-trait/issue-53398-cyclic-types.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.rs?ref=25674202bb7415e0c0ecd07856749cfb7f591be6", "patch": "@@ -0,0 +1,9 @@\n+#![feature(type_alias_impl_trait)]\n+\n+type Foo = impl Fn() -> Foo;\n+\n+fn foo() -> Foo {\n+    foo //~ ERROR: overflow evaluating the requirement `fn() -> Foo {foo}: Sized`\n+}\n+\n+fn main() {}"}, {"sha": "a9c2c18630c01cd478517d80c381b9df68bddf4e", "filename": "src/test/ui/type-alias-impl-trait/issue-53398-cyclic-types.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr?ref=25674202bb7415e0c0ecd07856749cfb7f591be6", "patch": "@@ -0,0 +1,11 @@\n+error[E0275]: overflow evaluating the requirement `fn() -> Foo {foo}: Sized`\n+  --> $DIR/issue-53398-cyclic-types.rs:6:5\n+   |\n+LL |     foo\n+   |     ^^^\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_53398_cyclic_types`)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "f20ddf020718ed80d168566f9191081e7d6d7eea", "filename": "src/test/ui/type-alias-impl-trait/issue-58662-generator-with-lifetime.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58662-generator-with-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58662-generator-with-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58662-generator-with-lifetime.rs?ref=25674202bb7415e0c0ecd07856749cfb7f591be6", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+\n+#![feature(generators, generator_trait)]\n+#![feature(type_alias_impl_trait)]\n+\n+use std::ops::{Generator, GeneratorState};\n+use std::pin::Pin;\n+\n+type RandGenerator<'a> = impl Generator<Return = (), Yield = u64> + 'a;\n+fn rand_generator<'a>(rng: &'a ()) -> RandGenerator<'a> {\n+    move || {\n+        let _rng = rng;\n+        loop {\n+            yield 0;\n+        }\n+    }\n+}\n+\n+pub type RandGeneratorWithIndirection<'a> = impl Generator<Return = (), Yield = u64> + 'a;\n+pub fn rand_generator_with_indirection<'a>(rng: &'a ()) -> RandGeneratorWithIndirection<'a> {\n+    fn helper<'b>(rng: &'b ()) -> impl 'b + Generator<Return = (), Yield = u64> {\n+        move || {\n+            let _rng = rng;\n+            loop {\n+                yield 0;\n+            }\n+        }\n+    }\n+\n+    helper(rng)\n+}\n+\n+fn main() {\n+    let mut gen = rand_generator(&());\n+    match unsafe { Pin::new_unchecked(&mut gen) }.resume(()) {\n+        GeneratorState::Yielded(_) => {}\n+        GeneratorState::Complete(_) => {}\n+    };\n+}"}, {"sha": "dc0f19c042af781dcd0a05c1b0f4ec92be16168c", "filename": "src/test/ui/type-alias-impl-trait/issue-89952.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89952.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89952.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89952.rs?ref=25674202bb7415e0c0ecd07856749cfb7f591be6", "patch": "@@ -0,0 +1,31 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait SomeTrait {}\n+impl SomeTrait for () {}\n+\n+trait MyFuture {\n+    type Output;\n+}\n+impl<T> MyFuture for T {\n+    type Output = T;\n+}\n+\n+trait ReturnsFuture {\n+    type Output: SomeTrait;\n+    type Future: MyFuture<Output = Result<Self::Output, ()>>;\n+    fn func() -> Self::Future;\n+}\n+\n+struct Foo;\n+\n+impl ReturnsFuture for Foo {\n+    type Output = impl SomeTrait;\n+    type Future = impl MyFuture<Output = Result<Self::Output, ()>>;\n+    fn func() -> Self::Future {\n+        Result::<(), ()>::Err(())\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "51d69c1271e0283dc8ec3d0431a5e8c5ddab47d1", "filename": "src/test/ui/type-alias-impl-trait/issue-94429.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.rs?ref=25674202bb7415e0c0ecd07856749cfb7f591be6", "patch": "@@ -0,0 +1,22 @@\n+#![feature(type_alias_impl_trait, generator_trait, generators)]\n+use std::ops::Generator;\n+\n+trait Runnable {\n+    type Gen: Generator<Yield = (), Return = ()>;\n+\n+    fn run(&mut self) -> Self::Gen;\n+}\n+\n+struct Implementor {}\n+\n+impl Runnable for Implementor {\n+    type Gen = impl Generator<Yield = (), Return = ()>;\n+\n+    fn run(&mut self) -> Self::Gen {\n+        move || { //~ ERROR: type mismatch resolving\n+            yield 1;\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "4546f82b83b854f7c3c4a1e9311a30edad5eb6b7", "filename": "src/test/ui/type-alias-impl-trait/issue-94429.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25674202bb7415e0c0ecd07856749cfb7f591be6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-94429.stderr?ref=25674202bb7415e0c0ecd07856749cfb7f591be6", "patch": "@@ -0,0 +1,11 @@\n+error[E0271]: type mismatch resolving `<[generator@$DIR/issue-94429.rs:16:9: 18:10] as Generator>::Yield == ()`\n+  --> $DIR/issue-94429.rs:16:9\n+   |\n+LL | /         move || {\n+LL | |             yield 1;\n+LL | |         }\n+   | |_________^ expected integer, found `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}]}