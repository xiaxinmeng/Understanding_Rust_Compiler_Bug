{"sha": "2a4b00beaa208388c2f140866674605aceab0fe9", "node_id": "C_kwDOAAsO6NoAKDJhNGIwMGJlYWEyMDgzODhjMmYxNDA4NjY2NzQ2MDVhY2VhYjBmZTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-29T13:01:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-29T13:01:06Z"}, "message": "Auto merge of #106908 - cjgillot:copyprop-ssa, r=oli-obk\n\nImplement simple CopyPropagation based on SSA analysis\n\nThis PR extracts the \"copy propagation\" logic from https://github.com/rust-lang/rust/pull/106285.\n\nMIR may produce chains of assignment between locals, like `_x = move? _y`.\nThis PR attempts to remove such chains by unifying locals.\n\nThe current implementation is a bit overzealous in turning moves into copies, and in removing storage statements.", "tree": {"sha": "a19eba4488f2e2e77a316d35c669a61f98f1ff55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a19eba4488f2e2e77a316d35c669a61f98f1ff55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a4b00beaa208388c2f140866674605aceab0fe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a4b00beaa208388c2f140866674605aceab0fe9", "html_url": "https://github.com/rust-lang/rust/commit/2a4b00beaa208388c2f140866674605aceab0fe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a4b00beaa208388c2f140866674605aceab0fe9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d117135f5a9b69ee3adfb1918aa25616758bf692", "url": "https://api.github.com/repos/rust-lang/rust/commits/d117135f5a9b69ee3adfb1918aa25616758bf692", "html_url": "https://github.com/rust-lang/rust/commit/d117135f5a9b69ee3adfb1918aa25616758bf692"}, {"sha": "263da251af6b1735487add274a4ed09487c69412", "url": "https://api.github.com/repos/rust-lang/rust/commits/263da251af6b1735487add274a4ed09487c69412", "html_url": "https://github.com/rust-lang/rust/commit/263da251af6b1735487add274a4ed09487c69412"}], "stats": {"total": 2226, "additions": 1948, "deletions": 278}, "files": [{"sha": "182b3015dd7d784c4ad215d834d749e2915d73e6", "filename": "compiler/rustc_mir_transform/src/copy_prop.rs", "status": "added", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,178 @@\n+use rustc_index::bit_set::BitSet;\n+use rustc_index::vec::IndexVec;\n+use rustc_middle::mir::visit::*;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::TyCtxt;\n+use rustc_mir_dataflow::impls::borrowed_locals;\n+\n+use crate::ssa::SsaLocals;\n+use crate::MirPass;\n+\n+/// Unify locals that copy each other.\n+///\n+/// We consider patterns of the form\n+///   _a = rvalue\n+///   _b = move? _a\n+///   _c = move? _a\n+///   _d = move? _c\n+/// where each of the locals is only assigned once.\n+///\n+/// We want to replace all those locals by `_a`, either copied or moved.\n+pub struct CopyProp;\n+\n+impl<'tcx> MirPass<'tcx> for CopyProp {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() >= 4\n+    }\n+\n+    #[instrument(level = \"trace\", skip(self, tcx, body))]\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        debug!(def_id = ?body.source.def_id());\n+        propagate_ssa(tcx, body);\n+    }\n+}\n+\n+fn propagate_ssa<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+    let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n+    let borrowed_locals = borrowed_locals(body);\n+    let ssa = SsaLocals::new(tcx, param_env, body, &borrowed_locals);\n+\n+    let fully_moved = fully_moved_locals(&ssa, body);\n+    debug!(?fully_moved);\n+\n+    let mut storage_to_remove = BitSet::new_empty(fully_moved.domain_size());\n+    for (local, &head) in ssa.copy_classes().iter_enumerated() {\n+        if local != head {\n+            storage_to_remove.insert(head);\n+        }\n+    }\n+\n+    let any_replacement = ssa.copy_classes().iter_enumerated().any(|(l, &h)| l != h);\n+\n+    Replacer {\n+        tcx,\n+        copy_classes: &ssa.copy_classes(),\n+        fully_moved,\n+        borrowed_locals,\n+        storage_to_remove,\n+    }\n+    .visit_body_preserves_cfg(body);\n+\n+    if any_replacement {\n+        crate::simplify::remove_unused_definitions(body);\n+    }\n+}\n+\n+/// `SsaLocals` computed equivalence classes between locals considering copy/move assignments.\n+///\n+/// This function also returns whether all the `move?` in the pattern are `move` and not copies.\n+/// A local which is in the bitset can be replaced by `move _a`. Otherwise, it must be\n+/// replaced by `copy _a`, as we cannot move multiple times from `_a`.\n+///\n+/// If an operand copies `_c`, it must happen before the assignment `_d = _c`, otherwise it is UB.\n+/// This means that replacing it by a copy of `_a` if ok, since this copy happens before `_c` is\n+/// moved, and therefore that `_d` is moved.\n+#[instrument(level = \"trace\", skip(ssa, body))]\n+fn fully_moved_locals(ssa: &SsaLocals, body: &Body<'_>) -> BitSet<Local> {\n+    let mut fully_moved = BitSet::new_filled(body.local_decls.len());\n+\n+    for (_, rvalue) in ssa.assignments(body) {\n+        let (Rvalue::Use(Operand::Copy(place) | Operand::Move(place)) | Rvalue::CopyForDeref(place))\n+            = rvalue\n+        else { continue };\n+\n+        let Some(rhs) = place.as_local() else { continue };\n+        if !ssa.is_ssa(rhs) {\n+            continue;\n+        }\n+\n+        if let Rvalue::Use(Operand::Copy(_)) | Rvalue::CopyForDeref(_) = rvalue {\n+            fully_moved.remove(rhs);\n+        }\n+    }\n+\n+    ssa.meet_copy_equivalence(&mut fully_moved);\n+\n+    fully_moved\n+}\n+\n+/// Utility to help performing subtitution of `*pattern` by `target`.\n+struct Replacer<'a, 'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    fully_moved: BitSet<Local>,\n+    storage_to_remove: BitSet<Local>,\n+    borrowed_locals: BitSet<Local>,\n+    copy_classes: &'a IndexVec<Local, Local>,\n+}\n+\n+impl<'tcx> MutVisitor<'tcx> for Replacer<'_, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn visit_local(&mut self, local: &mut Local, ctxt: PlaceContext, _: Location) {\n+        let new_local = self.copy_classes[*local];\n+        match ctxt {\n+            // Do not modify the local in storage statements.\n+            PlaceContext::NonUse(NonUseContext::StorageLive | NonUseContext::StorageDead) => {}\n+            // The local should have been marked as non-SSA.\n+            PlaceContext::MutatingUse(_) => assert_eq!(*local, new_local),\n+            // We access the value.\n+            _ => *local = new_local,\n+        }\n+    }\n+\n+    fn visit_place(&mut self, place: &mut Place<'tcx>, ctxt: PlaceContext, loc: Location) {\n+        if let Some(new_projection) = self.process_projection(&place.projection, loc) {\n+            place.projection = self.tcx().intern_place_elems(&new_projection);\n+        }\n+\n+        let observes_address = match ctxt {\n+            PlaceContext::NonMutatingUse(\n+                NonMutatingUseContext::SharedBorrow\n+                | NonMutatingUseContext::ShallowBorrow\n+                | NonMutatingUseContext::UniqueBorrow\n+                | NonMutatingUseContext::AddressOf,\n+            ) => true,\n+            // For debuginfo, merging locals is ok.\n+            PlaceContext::NonUse(NonUseContext::VarDebugInfo) => {\n+                self.borrowed_locals.contains(place.local)\n+            }\n+            _ => false,\n+        };\n+        if observes_address && !place.is_indirect() {\n+            // We observe the address of `place.local`. Do not replace it.\n+        } else {\n+            self.visit_local(\n+                &mut place.local,\n+                PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n+                loc,\n+            )\n+        }\n+    }\n+\n+    fn visit_operand(&mut self, operand: &mut Operand<'tcx>, loc: Location) {\n+        if let Operand::Move(place) = *operand\n+            && let Some(local) = place.as_local()\n+            && !self.fully_moved.contains(local)\n+        {\n+            *operand = Operand::Copy(place);\n+        }\n+        self.super_operand(operand, loc);\n+    }\n+\n+    fn visit_statement(&mut self, stmt: &mut Statement<'tcx>, loc: Location) {\n+        if let StatementKind::StorageDead(l) = stmt.kind\n+            && self.storage_to_remove.contains(l)\n+        {\n+            stmt.make_nop();\n+        } else if let StatementKind::Assign(box (ref place, ref mut rvalue)) = stmt.kind\n+            && place.as_local().is_some()\n+        {\n+            // Do not replace assignments.\n+            self.visit_rvalue(rvalue, loc)\n+        } else {\n+            self.super_statement(stmt, loc);\n+        }\n+    }\n+}"}, {"sha": "5c5baa68e5889362e359aacc23ca9e7706e43666", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -328,7 +328,8 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Merger<'a, 'tcx> {\n         match &statement.kind {\n             StatementKind::Assign(box (dest, rvalue)) => {\n                 match rvalue {\n-                    Rvalue::Use(Operand::Copy(place) | Operand::Move(place)) => {\n+                    Rvalue::CopyForDeref(place)\n+                    | Rvalue::Use(Operand::Copy(place) | Operand::Move(place)) => {\n                         // These might've been turned into self-assignments by the replacement\n                         // (this includes the original statement we wanted to eliminate).\n                         if dest == place {\n@@ -755,7 +756,7 @@ impl<'tcx> Visitor<'tcx> for FindAssignments<'_, '_, 'tcx> {\n     fn visit_statement(&mut self, statement: &Statement<'tcx>, _: Location) {\n         if let StatementKind::Assign(box (\n             lhs,\n-            Rvalue::Use(Operand::Copy(rhs) | Operand::Move(rhs)),\n+            Rvalue::CopyForDeref(rhs) | Rvalue::Use(Operand::Copy(rhs) | Operand::Move(rhs)),\n         )) = &statement.kind\n         {\n             let Some((src, dest)) = places_to_candidate_pair(*lhs, *rhs, self.body) else {"}, {"sha": "abf89e550b14922973d1afeb584eb79ebd97bc97", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -54,6 +54,7 @@ mod const_debuginfo;\n mod const_goto;\n mod const_prop;\n mod const_prop_lint;\n+mod copy_prop;\n mod coverage;\n mod ctfe_limit;\n mod dataflow_const_prop;\n@@ -87,6 +88,7 @@ mod required_consts;\n mod reveal_all;\n mod separate_const_switch;\n mod shim;\n+mod ssa;\n // This pass is public to allow external drivers to perform MIR cleanup\n pub mod simplify;\n mod simplify_branches;\n@@ -563,6 +565,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             &instcombine::InstCombine,\n             &separate_const_switch::SeparateConstSwitch,\n             &simplify::SimplifyLocals::new(\"before-const-prop\"),\n+            &copy_prop::CopyProp,\n             //\n             // FIXME(#70073): This pass is responsible for both optimization as well as some lints.\n             &const_prop::ConstProp,"}, {"sha": "ced97b2c788426f607bb59602b7d83adb43bd113", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -404,6 +404,18 @@ impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n     }\n }\n \n+pub fn remove_unused_definitions<'tcx>(body: &mut Body<'tcx>) {\n+    // First, we're going to get a count of *actual* uses for every `Local`.\n+    let mut used_locals = UsedLocals::new(body);\n+\n+    // Next, we're going to remove any `Local` with zero actual uses. When we remove those\n+    // `Locals`, we're also going to subtract any uses of other `Locals` from the `used_locals`\n+    // count. For example, if we removed `_2 = discriminant(_1)`, then we'll subtract one from\n+    // `use_counts[_1]`. That in turn might make `_1` unused, so we loop until we hit a\n+    // fixedpoint where there are no more unused locals.\n+    remove_unused_definitions_helper(&mut used_locals, body);\n+}\n+\n pub fn simplify_locals<'tcx>(body: &mut Body<'tcx>, tcx: TyCtxt<'tcx>) {\n     // First, we're going to get a count of *actual* uses for every `Local`.\n     let mut used_locals = UsedLocals::new(body);\n@@ -413,7 +425,7 @@ pub fn simplify_locals<'tcx>(body: &mut Body<'tcx>, tcx: TyCtxt<'tcx>) {\n     // count. For example, if we removed `_2 = discriminant(_1)`, then we'll subtract one from\n     // `use_counts[_1]`. That in turn might make `_1` unused, so we loop until we hit a\n     // fixedpoint where there are no more unused locals.\n-    remove_unused_definitions(&mut used_locals, body);\n+    remove_unused_definitions_helper(&mut used_locals, body);\n \n     // Finally, we'll actually do the work of shrinking `body.local_decls` and remapping the `Local`s.\n     let map = make_local_map(&mut body.local_decls, &used_locals);\n@@ -548,7 +560,7 @@ impl<'tcx> Visitor<'tcx> for UsedLocals {\n }\n \n /// Removes unused definitions. Updates the used locals to reflect the changes made.\n-fn remove_unused_definitions(used_locals: &mut UsedLocals, body: &mut Body<'_>) {\n+fn remove_unused_definitions_helper(used_locals: &mut UsedLocals, body: &mut Body<'_>) {\n     // The use counts are updated as we remove the statements. A local might become unused\n     // during the retain operation, leading to a temporary inconsistency (storage statements or\n     // definitions referencing the local might remain). For correctness it is crucial that this"}, {"sha": "bc3fe65cf6c34ed47e9e4cc5cb86699474ba1e45", "filename": "compiler/rustc_mir_transform/src/ssa.rs", "status": "added", "additions": 222, "deletions": 0, "changes": 222, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,222 @@\n+use either::Either;\n+use rustc_data_structures::graph::dominators::Dominators;\n+use rustc_index::bit_set::BitSet;\n+use rustc_index::vec::IndexVec;\n+use rustc_middle::middle::resolve_lifetime::Set1;\n+use rustc_middle::mir::visit::*;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::{ParamEnv, TyCtxt};\n+\n+#[derive(Debug)]\n+pub struct SsaLocals {\n+    /// Assignments to each local. This defines whether the local is SSA.\n+    assignments: IndexVec<Local, Set1<LocationExtended>>,\n+    /// We visit the body in reverse postorder, to ensure each local is assigned before it is used.\n+    /// We remember the order in which we saw the assignments to compute the SSA values in a single\n+    /// pass.\n+    assignment_order: Vec<Local>,\n+    /// Copy equivalence classes between locals. See `copy_classes` for documentation.\n+    copy_classes: IndexVec<Local, Local>,\n+}\n+\n+impl SsaLocals {\n+    pub fn new<'tcx>(\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ParamEnv<'tcx>,\n+        body: &Body<'tcx>,\n+        borrowed_locals: &BitSet<Local>,\n+    ) -> SsaLocals {\n+        let assignment_order = Vec::new();\n+\n+        let assignments = IndexVec::from_elem(Set1::Empty, &body.local_decls);\n+        let dominators = body.basic_blocks.dominators();\n+        let mut visitor = SsaVisitor { assignments, assignment_order, dominators };\n+\n+        for (local, decl) in body.local_decls.iter_enumerated() {\n+            if matches!(body.local_kind(local), LocalKind::Arg) {\n+                visitor.assignments[local] = Set1::One(LocationExtended::Arg);\n+            }\n+            if borrowed_locals.contains(local) && !decl.ty.is_freeze(tcx, param_env) {\n+                visitor.assignments[local] = Set1::Many;\n+            }\n+        }\n+\n+        for (bb, data) in traversal::reverse_postorder(body) {\n+            visitor.visit_basic_block_data(bb, data);\n+        }\n+\n+        for var_debug_info in &body.var_debug_info {\n+            visitor.visit_var_debug_info(var_debug_info);\n+        }\n+\n+        debug!(?visitor.assignments);\n+\n+        visitor\n+            .assignment_order\n+            .retain(|&local| matches!(visitor.assignments[local], Set1::One(_)));\n+        debug!(?visitor.assignment_order);\n+\n+        let copy_classes = compute_copy_classes(&visitor, body);\n+\n+        SsaLocals {\n+            assignments: visitor.assignments,\n+            assignment_order: visitor.assignment_order,\n+            copy_classes,\n+        }\n+    }\n+\n+    pub fn is_ssa(&self, local: Local) -> bool {\n+        matches!(self.assignments[local], Set1::One(_))\n+    }\n+\n+    pub fn assignments<'a, 'tcx>(\n+        &'a self,\n+        body: &'a Body<'tcx>,\n+    ) -> impl Iterator<Item = (Local, &'a Rvalue<'tcx>)> + 'a {\n+        self.assignment_order.iter().filter_map(|&local| {\n+            if let Set1::One(LocationExtended::Plain(loc)) = self.assignments[local] {\n+                // `loc` must point to a direct assignment to `local`.\n+                let Either::Left(stmt) = body.stmt_at(loc) else { bug!() };\n+                let Some((target, rvalue)) = stmt.kind.as_assign() else { bug!() };\n+                assert_eq!(target.as_local(), Some(local));\n+                Some((local, rvalue))\n+            } else {\n+                None\n+            }\n+        })\n+    }\n+\n+    /// Compute the equivalence classes for locals, based on copy statements.\n+    ///\n+    /// The returned vector maps each local to the one it copies. In the following case:\n+    ///   _a = &mut _0\n+    ///   _b = move? _a\n+    ///   _c = move? _a\n+    ///   _d = move? _c\n+    /// We return the mapping\n+    ///   _a => _a // not a copy so, represented by itself\n+    ///   _b => _a\n+    ///   _c => _a\n+    ///   _d => _a // transitively through _c\n+    ///\n+    /// Exception: we do not see through the return place, as it cannot be substituted.\n+    pub fn copy_classes(&self) -> &IndexVec<Local, Local> {\n+        &self.copy_classes\n+    }\n+\n+    /// Make a property uniform on a copy equivalence class by removing elements.\n+    pub fn meet_copy_equivalence(&self, property: &mut BitSet<Local>) {\n+        // Consolidate to have a local iff all its copies are.\n+        //\n+        // `copy_classes` defines equivalence classes between locals. The `local`s that recursively\n+        // move/copy the same local all have the same `head`.\n+        for (local, &head) in self.copy_classes.iter_enumerated() {\n+            // If any copy does not have `property`, then the head is not.\n+            if !property.contains(local) {\n+                property.remove(head);\n+            }\n+        }\n+        for (local, &head) in self.copy_classes.iter_enumerated() {\n+            // If any copy does not have `property`, then the head doesn't either,\n+            // then no copy has `property`.\n+            if !property.contains(head) {\n+                property.remove(local);\n+            }\n+        }\n+\n+        // Verify that we correctly computed equivalence classes.\n+        #[cfg(debug_assertions)]\n+        for (local, &head) in self.copy_classes.iter_enumerated() {\n+            assert_eq!(property.contains(local), property.contains(head));\n+        }\n+    }\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+enum LocationExtended {\n+    Plain(Location),\n+    Arg,\n+}\n+\n+struct SsaVisitor {\n+    dominators: Dominators<BasicBlock>,\n+    assignments: IndexVec<Local, Set1<LocationExtended>>,\n+    assignment_order: Vec<Local>,\n+}\n+\n+impl<'tcx> Visitor<'tcx> for SsaVisitor {\n+    fn visit_local(&mut self, local: Local, ctxt: PlaceContext, loc: Location) {\n+        match ctxt {\n+            PlaceContext::MutatingUse(MutatingUseContext::Store) => {\n+                self.assignments[local].insert(LocationExtended::Plain(loc));\n+                self.assignment_order.push(local);\n+            }\n+            // Anything can happen with raw pointers, so remove them.\n+            PlaceContext::NonMutatingUse(NonMutatingUseContext::AddressOf)\n+            | PlaceContext::MutatingUse(_) => self.assignments[local] = Set1::Many,\n+            // Immutable borrows are taken into account in `SsaLocals::new` by\n+            // removing non-freeze locals.\n+            PlaceContext::NonMutatingUse(_) => {\n+                let set = &mut self.assignments[local];\n+                let assign_dominates = match *set {\n+                    Set1::Empty | Set1::Many => false,\n+                    Set1::One(LocationExtended::Arg) => true,\n+                    Set1::One(LocationExtended::Plain(assign)) => {\n+                        assign.successor_within_block().dominates(loc, &self.dominators)\n+                    }\n+                };\n+                // We are visiting a use that is not dominated by an assignment.\n+                // Either there is a cycle involved, or we are reading for uninitialized local.\n+                // Bail out.\n+                if !assign_dominates {\n+                    *set = Set1::Many;\n+                }\n+            }\n+            PlaceContext::NonUse(_) => {}\n+        }\n+    }\n+}\n+\n+#[instrument(level = \"trace\", skip(ssa, body))]\n+fn compute_copy_classes(ssa: &SsaVisitor, body: &Body<'_>) -> IndexVec<Local, Local> {\n+    let mut copies = IndexVec::from_fn_n(|l| l, body.local_decls.len());\n+\n+    for &local in &ssa.assignment_order {\n+        debug!(?local);\n+\n+        if local == RETURN_PLACE {\n+            // `_0` is special, we cannot rename it.\n+            continue;\n+        }\n+\n+        // This is not SSA: mark that we don't know the value.\n+        debug!(assignments = ?ssa.assignments[local]);\n+        let Set1::One(LocationExtended::Plain(loc)) = ssa.assignments[local] else { continue };\n+\n+        // `loc` must point to a direct assignment to `local`.\n+        let Either::Left(stmt) = body.stmt_at(loc) else { bug!() };\n+        let Some((_target, rvalue)) = stmt.kind.as_assign() else { bug!() };\n+        assert_eq!(_target.as_local(), Some(local));\n+\n+        let (Rvalue::Use(Operand::Copy(place) | Operand::Move(place)) | Rvalue::CopyForDeref(place))\n+            = rvalue\n+        else { continue };\n+\n+        let Some(rhs) = place.as_local() else { continue };\n+        let Set1::One(_) = ssa.assignments[rhs] else { continue };\n+\n+        // We visit in `assignment_order`, ie. reverse post-order, so `rhs` has been\n+        // visited before `local`, and we just have to copy the representing local.\n+        copies[local] = copies[rhs];\n+    }\n+\n+    debug!(?copies);\n+\n+    // Invariant: `copies` must point to the head of an equivalence class.\n+    #[cfg(debug_assertions)]\n+    for &head in copies.iter() {\n+        assert_eq!(copies[head], head);\n+    }\n+\n+    copies\n+}"}, {"sha": "5e587be1f1653f482d6bb3a8678ce14bf847cfda", "filename": "tests/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -64,17 +64,8 @@\n           _3 = const 3_u8;                 // scope 2 at $DIR/const_debuginfo.rs:+3:13: +3:16\n           StorageLive(_4);                 // scope 3 at $DIR/const_debuginfo.rs:+4:9: +4:12\n           StorageLive(_5);                 // scope 3 at $DIR/const_debuginfo.rs:+4:15: +4:20\n-          StorageLive(_6);                 // scope 3 at $DIR/const_debuginfo.rs:+4:15: +4:16\n-          _6 = const 1_u8;                 // scope 3 at $DIR/const_debuginfo.rs:+4:15: +4:16\n-          StorageLive(_7);                 // scope 3 at $DIR/const_debuginfo.rs:+4:19: +4:20\n-          _7 = const 2_u8;                 // scope 3 at $DIR/const_debuginfo.rs:+4:19: +4:20\n           _5 = const 3_u8;                 // scope 3 at $DIR/const_debuginfo.rs:+4:15: +4:20\n-          StorageDead(_7);                 // scope 3 at $DIR/const_debuginfo.rs:+4:19: +4:20\n-          StorageDead(_6);                 // scope 3 at $DIR/const_debuginfo.rs:+4:19: +4:20\n-          StorageLive(_8);                 // scope 3 at $DIR/const_debuginfo.rs:+4:23: +4:24\n-          _8 = const 3_u8;                 // scope 3 at $DIR/const_debuginfo.rs:+4:23: +4:24\n           _4 = const 6_u8;                 // scope 3 at $DIR/const_debuginfo.rs:+4:15: +4:24\n-          StorageDead(_8);                 // scope 3 at $DIR/const_debuginfo.rs:+4:23: +4:24\n           StorageDead(_5);                 // scope 3 at $DIR/const_debuginfo.rs:+4:23: +4:24\n           StorageLive(_9);                 // scope 4 at $DIR/const_debuginfo.rs:+6:9: +6:10\n           _9 = const \"hello, world!\";      // scope 4 at $DIR/const_debuginfo.rs:+6:13: +6:28\n@@ -117,9 +108,6 @@\n           StorageDead(_16);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_9);                 // scope 4 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_4);                 // scope 3 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_3);                 // scope 2 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_2);                 // scope 1 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_1);                 // scope 0 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           return;                          // scope 0 at $DIR/const_debuginfo.rs:+14:2: +14:2\n       }\n   }"}, {"sha": "e085a88b2da8ba155f44730090f1545df43ce64b", "filename": "tests/mir-opt/const_prop/bad_op_mod_by_zero.main.ConstProp.diff", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -21,32 +21,25 @@\n           StorageLive(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n           _1 = const 0_i32;                // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:13: +1:14\n           StorageLive(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n-          StorageLive(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n--         _3 = _1;                         // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n--         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         _4 = Eq(_1, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n -         assert(!move _4, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n +         _4 = const true;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n +         assert(!const true, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n       }\n   \n       bb1: {\n--         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+          _5 = Eq(_1, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n -         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n -         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n--         assert(!move _7, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n+-         assert(!move _7, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _1) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n +         _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n +         _7 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n++         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _1) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n       }\n   \n       bb2: {\n--         _2 = Rem(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-+         _2 = Rem(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n-          StorageDead(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:18: +2:19\n+          _2 = Rem(const 1_i32, _1);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19\n           StorageDead(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n-          StorageDead(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:1: +3:2\n           return;                          // scope 0 at $DIR/bad_op_mod_by_zero.rs:+3:2: +3:2\n       }\n   }"}, {"sha": "4bd0aa09872398959e3fbe0a1ea2c12050020756", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -23,16 +23,13 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _8 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _3 = _8;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _2 = &raw const (*_8);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n-          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:35: +1:36\n           StorageLive(_4);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n           StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n           _5 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24"}, {"sha": "4bd0aa09872398959e3fbe0a1ea2c12050020756", "filename": "tests/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -23,16 +23,13 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _8 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n-          _3 = _8;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _2 = &raw const (*_8);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           StorageDead(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:34: +1:35\n-          StorageDead(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:35: +1:36\n           StorageLive(_4);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:13: +3:15\n           StorageLive(_5);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24\n           _5 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:+3:23: +3:24"}, {"sha": "549b4711e874d281f62050ad68226ced07af3c9f", "filename": "tests/mir-opt/const_prop/boolean_identities.test.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fboolean_identities.test.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fboolean_identities.test.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fboolean_identities.test.ConstProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -12,18 +12,12 @@\n   \n       bb0: {\n           StorageLive(_3);                 // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n-          StorageLive(_4);                 // scope 0 at $DIR/boolean_identities.rs:+1:6: +1:7\n-          _4 = _2;                         // scope 0 at $DIR/boolean_identities.rs:+1:6: +1:7\n--         _3 = BitOr(move _4, const true); // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n+-         _3 = BitOr(_2, const true);      // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n +         _3 = const true;                 // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:15\n-          StorageDead(_4);                 // scope 0 at $DIR/boolean_identities.rs:+1:14: +1:15\n           StorageLive(_5);                 // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n-          StorageLive(_6);                 // scope 0 at $DIR/boolean_identities.rs:+1:19: +1:20\n-          _6 = _1;                         // scope 0 at $DIR/boolean_identities.rs:+1:19: +1:20\n--         _5 = BitAnd(move _6, const false); // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n-+         _5 = const false;                // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n-          StorageDead(_6);                 // scope 0 at $DIR/boolean_identities.rs:+1:28: +1:29\n+-         _5 = BitAnd(_1, const false);    // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n -         _0 = BitAnd(move _3, move _5);   // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:29\n++         _5 = const false;                // scope 0 at $DIR/boolean_identities.rs:+1:18: +1:29\n +         _0 = const false;                // scope 0 at $DIR/boolean_identities.rs:+1:5: +1:29\n           StorageDead(_5);                 // scope 0 at $DIR/boolean_identities.rs:+1:28: +1:29\n           StorageDead(_3);                 // scope 0 at $DIR/boolean_identities.rs:+1:28: +1:29"}, {"sha": "1cfe47d0a86124a119b2ecd87221cbc9d2a4f38e", "filename": "tests/mir-opt/const_prop/mult_by_zero.test.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmult_by_zero.test.ConstProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -7,11 +7,8 @@\n       let mut _2: i32;                     // in scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n-          _2 = _1;                         // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:4\n--         _0 = Mul(move _2, const 0_i32);  // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:8\n+-         _0 = Mul(_1, const 0_i32);       // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:8\n +         _0 = const 0_i32;                // scope 0 at $DIR/mult_by_zero.rs:+1:3: +1:8\n-          StorageDead(_2);                 // scope 0 at $DIR/mult_by_zero.rs:+1:7: +1:8\n           return;                          // scope 0 at $DIR/mult_by_zero.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "924a267f3d8ffe5089f03bb6940d144a50d4defb", "filename": "tests/mir-opt/const_prop/ref_deref.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -13,14 +13,13 @@\n           StorageLive(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n           _4 = const _;                    // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n                                            // mir::Constant\n-                                           // + span: $DIR/ref_deref.rs:6:6: 6:10\n+                                           // + span: $DIR/ref_deref.rs:5:6: 5:10\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-          _2 = _4;                         // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n--         _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n-+         _1 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n+          _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n+          _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n           StorageDead(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n-          nop;                             // scope 0 at $DIR/ref_deref.rs:+0:11: +2:2\n+          _0 = const ();                   // scope 0 at $DIR/ref_deref.rs:+0:11: +2:2\n           return;                          // scope 0 at $DIR/ref_deref.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "015ec4d078c10cc1d9da5bc035cf4134d127af0f", "filename": "tests/mir-opt/const_prop/ref_deref.main.PromoteTemps.diff", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/tests%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/tests%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -1,30 +0,0 @@\n-- // MIR for `main` before PromoteTemps\n-+ // MIR for `main` after PromoteTemps\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n-      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-      let _3: i32;                         // in scope 0 at $DIR/ref_deref.rs:+1:8: +1:9\n-+     let mut _4: &i32;                    // in scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n-          StorageLive(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n--         StorageLive(_3);                 // scope 0 at $DIR/ref_deref.rs:+1:8: +1:9\n--         _3 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:+1:8: +1:9\n--         _2 = &_3;                        // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-+         _4 = const _;                    // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/ref_deref.rs:6:6: 6:10\n-+                                          // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-+         _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-          _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n--         StorageDead(_3);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n-          StorageDead(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n-          StorageDead(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:10: +1:11\n-          _0 = const ();                   // scope 0 at $DIR/ref_deref.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/ref_deref.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "76e56916af09aa32606552cdfc5b83c92c81f84f", "filename": "tests/mir-opt/const_prop/ref_deref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fref_deref.rs?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -1,5 +1,4 @@\n-// compile-flags: -Zmir-enable-passes=-SimplifyLocals-before-const-prop\n-// EMIT_MIR ref_deref.main.PromoteTemps.diff\n+// unit-test: ConstProp\n // EMIT_MIR ref_deref.main.ConstProp.diff\n \n fn main() {"}, {"sha": "59095b4483713cc3fd806fadb83baae288c0b3a6", "filename": "tests/mir-opt/const_prop/ref_deref_project.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -13,13 +13,13 @@\n           StorageLive(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n           _4 = const _;                    // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n                                            // mir::Constant\n-                                           // + span: $DIR/ref_deref_project.rs:6:6: 6:17\n+                                           // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n                                            // + literal: Const { ty: &(i32, i32), val: Unevaluated(main, [], Some(promoted[0])) }\n           _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n           StorageDead(_1);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n-          nop;                             // scope 0 at $DIR/ref_deref_project.rs:+0:11: +2:2\n+          _0 = const ();                   // scope 0 at $DIR/ref_deref_project.rs:+0:11: +2:2\n           return;                          // scope 0 at $DIR/ref_deref_project.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "cd0616e65baf847974e037b19474cf8f47439f98", "filename": "tests/mir-opt/const_prop/ref_deref_project.main.PromoteTemps.diff", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/tests%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/tests%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -1,30 +0,0 @@\n-- // MIR for `main` before PromoteTemps\n-+ // MIR for `main` after PromoteTemps\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/ref_deref_project.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n-      let mut _2: &i32;                    // in scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-      let _3: (i32, i32);                  // in scope 0 at $DIR/ref_deref_project.rs:+1:8: +1:14\n-+     let mut _4: &(i32, i32);             // in scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n-          StorageLive(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n--         StorageLive(_3);                 // scope 0 at $DIR/ref_deref_project.rs:+1:8: +1:14\n--         _3 = (const 4_i32, const 5_i32); // scope 0 at $DIR/ref_deref_project.rs:+1:8: +1:14\n--         _2 = &(_3.1: i32);               // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-+         _4 = const _;                    // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/ref_deref_project.rs:6:6: 6:17\n-+                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(main, [], Some(promoted[0])) }\n-+         _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-          _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n--         StorageDead(_3);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n-          StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n-          StorageDead(_1);                 // scope 0 at $DIR/ref_deref_project.rs:+1:17: +1:18\n-          _0 = const ();                   // scope 0 at $DIR/ref_deref_project.rs:+0:11: +2:2\n-          return;                          // scope 0 at $DIR/ref_deref_project.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "04fc7f8daa1240b9eb5ca2bc02797ca1154fcbaf", "filename": "tests/mir-opt/const_prop/ref_deref_project.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fref_deref_project.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fref_deref_project.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fref_deref_project.rs?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -1,5 +1,4 @@\n-// compile-flags: -Zmir-enable-passes=-SimplifyLocals-before-const-prop\n-// EMIT_MIR ref_deref_project.main.PromoteTemps.diff\n+// unit-test: ConstProp\n // EMIT_MIR ref_deref_project.main.ConstProp.diff\n \n fn main() {"}, {"sha": "e3f5b120a3234d8bb12f2eb2b99fe3199f04422d", "filename": "tests/mir-opt/const_prop/scalar_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -14,20 +14,15 @@\n           StorageLive(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n           _1 = const 1_u32;                // scope 0 at $DIR/scalar_literal_propagation.rs:+1:13: +1:14\n           StorageLive(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n-          StorageLive(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n--         _3 = _1;                         // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n--         _2 = consume(move _3) -> bb1;    // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n-+         _3 = const 1_u32;                // scope 1 at $DIR/scalar_literal_propagation.rs:+2:13: +2:14\n+-         _2 = consume(_1) -> bb1;         // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n +         _2 = consume(const 1_u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n                                            // mir::Constant\n                                            // + span: $DIR/scalar_literal_propagation.rs:4:5: 4:12\n                                            // + literal: Const { ty: fn(u32) {consume}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:14: +2:15\n           StorageDead(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:15: +2:16\n-          StorageDead(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+3:1: +3:2\n           return;                          // scope 0 at $DIR/scalar_literal_propagation.rs:+3:2: +3:2\n       }\n   }"}, {"sha": "b99b83b0cba8540144dc76fd70b47477e79fa405", "filename": "tests/mir-opt/const_prop/slice_len.main.ConstProp.32bit.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -20,7 +20,7 @@\n           StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _9 = const _;                    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n                                            // mir::Constant\n-                                           // + span: $DIR/slice_len.rs:6:6: 6:19\n+                                           // + span: $DIR/slice_len.rs:7:6: 7:19\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n@@ -33,7 +33,7 @@\n -         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n +         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n +         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       }\n   \n       bb1: {\n@@ -43,7 +43,7 @@\n           StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n           StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n           StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          nop;                             // scope 0 at $DIR/slice_len.rs:+0:11: +2:2\n+          _0 = const ();                   // scope 0 at $DIR/slice_len.rs:+0:11: +2:2\n           return;                          // scope 0 at $DIR/slice_len.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "b99b83b0cba8540144dc76fd70b47477e79fa405", "filename": "tests/mir-opt/const_prop/slice_len.main.ConstProp.64bit.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -20,7 +20,7 @@\n           StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _9 = const _;                    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n                                            // mir::Constant\n-                                           // + span: $DIR/slice_len.rs:6:6: 6:19\n+                                           // + span: $DIR/slice_len.rs:7:6: 7:19\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n@@ -33,7 +33,7 @@\n -         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n +         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n +         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-+         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       }\n   \n       bb1: {\n@@ -43,7 +43,7 @@\n           StorageDead(_4);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n           StorageDead(_2);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n           StorageDead(_1);                 // scope 0 at $DIR/slice_len.rs:+1:33: +1:34\n-          nop;                             // scope 0 at $DIR/slice_len.rs:+0:11: +2:2\n+          _0 = const ();                   // scope 0 at $DIR/slice_len.rs:+0:11: +2:2\n           return;                          // scope 0 at $DIR/slice_len.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "8183def0c63dbda29ffd08a43dd70fa1fb8cfcfb", "filename": "tests/mir-opt/const_prop/slice_len.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.rs?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -1,4 +1,5 @@\n-// compile-flags: -Zmir-enable-passes=-SimplifyLocals-before-const-prop\n+// unit-test: ConstProp\n+// compile-flags: -Zmir-enable-passes=+InstCombine\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n \n // EMIT_MIR slice_len.main.ConstProp.diff"}, {"sha": "b6b542fb79436d3ce1b3b8dacdb4202e57e0aa01", "filename": "tests/mir-opt/const_prop_miscompile.bar.ConstProp.diff", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -4,32 +4,37 @@\n   fn bar() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/const_prop_miscompile.rs:+0:10: +0:10\n       let mut _1: (i32,);                  // in scope 0 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n-      let mut _2: *mut i32;                // in scope 0 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n-      let mut _4: i32;                     // in scope 0 at $DIR/const_prop_miscompile.rs:+5:13: +5:20\n+      let _2: ();                          // in scope 0 at $DIR/const_prop_miscompile.rs:+2:5: +4:6\n+      let mut _3: *mut i32;                // in scope 0 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n+      let mut _5: i32;                     // in scope 0 at $DIR/const_prop_miscompile.rs:+5:13: +5:20\n       scope 1 {\n           debug v => _1;                   // in scope 1 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n-          let _3: bool;                    // in scope 1 at $DIR/const_prop_miscompile.rs:+5:9: +5:10\n+          let _4: bool;                    // in scope 1 at $DIR/const_prop_miscompile.rs:+5:9: +5:10\n           scope 2 {\n           }\n           scope 3 {\n-              debug y => _3;               // in scope 3 at $DIR/const_prop_miscompile.rs:+5:9: +5:10\n+              debug y => _4;               // in scope 3 at $DIR/const_prop_miscompile.rs:+5:9: +5:10\n           }\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n           Deinit(_1);                      // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n           (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n-          StorageLive(_2);                 // scope 2 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n-          _2 = &raw mut (_1.0: i32);       // scope 2 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n-          (*_2) = const 5_i32;             // scope 2 at $DIR/const_prop_miscompile.rs:+3:9: +3:26\n-          StorageDead(_2);                 // scope 2 at $DIR/const_prop_miscompile.rs:+3:26: +3:27\n-          StorageLive(_3);                 // scope 1 at $DIR/const_prop_miscompile.rs:+5:9: +5:10\n-          StorageLive(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:+5:13: +5:20\n-          _4 = (_1.0: i32);                // scope 1 at $DIR/const_prop_miscompile.rs:+5:15: +5:18\n-          _3 = Eq(move _4, const 5_i32);   // scope 1 at $DIR/const_prop_miscompile.rs:+5:13: +5:25\n-          StorageDead(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:+5:24: +5:25\n-          StorageDead(_3);                 // scope 1 at $DIR/const_prop_miscompile.rs:+6:1: +6:2\n+          StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:+2:5: +4:6\n+          StorageLive(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n+          _3 = &raw mut (_1.0: i32);       // scope 2 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n+          (*_3) = const 5_i32;             // scope 2 at $DIR/const_prop_miscompile.rs:+3:9: +3:26\n+          StorageDead(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:+3:26: +3:27\n+          _2 = const ();                   // scope 2 at $DIR/const_prop_miscompile.rs:+2:5: +4:6\n+          StorageDead(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:+4:5: +4:6\n+          StorageLive(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:+5:9: +5:10\n+          StorageLive(_5);                 // scope 1 at $DIR/const_prop_miscompile.rs:+5:13: +5:20\n+          _5 = (_1.0: i32);                // scope 1 at $DIR/const_prop_miscompile.rs:+5:15: +5:18\n+          _4 = Eq(move _5, const 5_i32);   // scope 1 at $DIR/const_prop_miscompile.rs:+5:13: +5:25\n+          StorageDead(_5);                 // scope 1 at $DIR/const_prop_miscompile.rs:+5:24: +5:25\n+          _0 = const ();                   // scope 0 at $DIR/const_prop_miscompile.rs:+0:10: +6:2\n+          StorageDead(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:+6:1: +6:2\n           StorageDead(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+6:1: +6:2\n           return;                          // scope 0 at $DIR/const_prop_miscompile.rs:+6:2: +6:2\n       }"}, {"sha": "e43735fd9e145057c6ea8395c378fc5aeb5e2657", "filename": "tests/mir-opt/const_prop_miscompile.foo.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -27,6 +27,7 @@\n           _4 = (_1.0: i32);                // scope 1 at $DIR/const_prop_miscompile.rs:+3:15: +3:18\n           _3 = Eq(move _4, const 5_i32);   // scope 1 at $DIR/const_prop_miscompile.rs:+3:13: +3:25\n           StorageDead(_4);                 // scope 1 at $DIR/const_prop_miscompile.rs:+3:24: +3:25\n+          _0 = const ();                   // scope 0 at $DIR/const_prop_miscompile.rs:+0:10: +4:2\n           StorageDead(_3);                 // scope 1 at $DIR/const_prop_miscompile.rs:+4:1: +4:2\n           StorageDead(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+4:1: +4:2\n           return;                          // scope 0 at $DIR/const_prop_miscompile.rs:+4:2: +4:2"}, {"sha": "dbbe5ee08408f4b9c7d4ea1a783bf4cac5566da6", "filename": "tests/mir-opt/const_prop_miscompile.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop_miscompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fconst_prop_miscompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop_miscompile.rs?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -1,3 +1,4 @@\n+// unit-test: ConstProp\n #![feature(raw_ref_op)]\n \n // EMIT_MIR const_prop_miscompile.foo.ConstProp.diff"}, {"sha": "b183865a9bcf52a8b9cf66674663c62611806ea4", "filename": "tests/mir-opt/copy-prop/borrowed_local.f.CopyProp.diff", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,34 @@\n+- // MIR for `f` before CopyProp\n++ // MIR for `f` after CopyProp\n+  \n+  fn f() -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/borrowed_local.rs:+0:11: +0:15\n+      let mut _1: u8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _2: &u8;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _3: u8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _4: &u8;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+  \n+      bb0: {\n+          _1 = const 5_u8;                 // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _2 = &_1;                        // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _3 = _1;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _4 = &_3;                        // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _0 = cmp_ref(_2, _4) -> bb1;     // scope 0 at $DIR/borrowed_local.rs:+8:13: +8:45\n+                                           // mir::Constant\n+                                           // + span: $DIR/borrowed_local.rs:23:29: 23:36\n+                                           // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b u8) -> bool {cmp_ref}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         _0 = opaque::<u8>(_3) -> bb2;    // scope 0 at $DIR/borrowed_local.rs:+12:13: +12:38\n++         _0 = opaque::<u8>(_1) -> bb2;    // scope 0 at $DIR/borrowed_local.rs:+12:13: +12:38\n+                                           // mir::Constant\n+                                           // + span: $DIR/borrowed_local.rs:27:28: 27:34\n+                                           // + literal: Const { ty: fn(u8) -> bool {opaque::<u8>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          return;                          // scope 0 at $DIR/borrowed_local.rs:+15:13: +15:21\n+      }\n+  }\n+  "}, {"sha": "c4b980e2b35167c3fb10b9fd0c2f6ade7ecc1e51", "filename": "tests/mir-opt/copy-prop/borrowed_local.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.rs?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,39 @@\n+// unit-test: CopyProp\n+\n+#![feature(custom_mir, core_intrinsics)]\n+#![allow(unused_assignments)]\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+fn opaque(_: impl Sized) -> bool { true }\n+\n+fn cmp_ref(a: &u8, b: &u8) -> bool {\n+    std::ptr::eq(a as *const u8, b as *const u8)\n+}\n+\n+#[custom_mir(dialect = \"analysis\", phase = \"post-cleanup\")]\n+fn f() -> bool {\n+    mir!(\n+        {\n+            let a = 5_u8;\n+            let r1 = &a;\n+            let b = a;\n+            // We cannot propagate the place `a`.\n+            let r2 = &b;\n+            Call(RET, next, cmp_ref(r1, r2))\n+        }\n+        next = {\n+            // But we can propagate the value `a`.\n+            Call(RET, ret, opaque(b))\n+        }\n+        ret = {\n+            Return()\n+        }\n+    )\n+}\n+\n+fn main() {\n+    assert!(!f());\n+}\n+\n+// EMIT_MIR borrowed_local.f.CopyProp.diff"}, {"sha": "8b116532d9f5d46abb0b2547a541c1ac3959dd82", "filename": "tests/mir-opt/copy-prop/branch.foo.CopyProp.diff", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,65 @@\n+- // MIR for `foo` before CopyProp\n++ // MIR for `foo` after CopyProp\n+  \n+  fn foo() -> i32 {\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/branch.rs:+0:13: +0:16\n+      let _1: i32;                         // in scope 0 at $DIR/branch.rs:+1:9: +1:10\n+      let mut _3: bool;                    // in scope 0 at $DIR/branch.rs:+3:16: +3:22\n+      let _4: i32;                         // in scope 0 at $DIR/branch.rs:+6:9: +6:14\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/branch.rs:+1:9: +1:10\n+          let _2: i32;                     // in scope 1 at $DIR/branch.rs:+3:9: +3:10\n+          scope 2 {\n+              debug y => _2;               // in scope 2 at $DIR/branch.rs:+3:9: +3:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/branch.rs:+1:9: +1:10\n+          _1 = val() -> bb1;               // scope 0 at $DIR/branch.rs:+1:13: +1:18\n+                                           // mir::Constant\n+                                           // + span: $DIR/branch.rs:13:13: 13:16\n+                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageLive(_2);                 // scope 1 at $DIR/branch.rs:+3:9: +3:10\n+          StorageLive(_3);                 // scope 1 at $DIR/branch.rs:+3:16: +3:22\n+          _3 = cond() -> bb2;              // scope 1 at $DIR/branch.rs:+3:16: +3:22\n+                                           // mir::Constant\n+                                           // + span: $DIR/branch.rs:15:16: 15:20\n+                                           // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 1 at $DIR/branch.rs:+3:16: +3:22\n+      }\n+  \n+      bb3: {\n+          _2 = _1;                         // scope 1 at $DIR/branch.rs:+4:9: +4:10\n+          goto -> bb6;                     // scope 1 at $DIR/branch.rs:+3:13: +8:6\n+      }\n+  \n+      bb4: {\n+          StorageLive(_4);                 // scope 1 at $DIR/branch.rs:+6:9: +6:14\n+          _4 = val() -> bb5;               // scope 1 at $DIR/branch.rs:+6:9: +6:14\n+                                           // mir::Constant\n+                                           // + span: $DIR/branch.rs:18:9: 18:12\n+                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+      }\n+  \n+      bb5: {\n+          StorageDead(_4);                 // scope 1 at $DIR/branch.rs:+6:14: +6:15\n+          _2 = _1;                         // scope 1 at $DIR/branch.rs:+7:9: +7:10\n+          goto -> bb6;                     // scope 1 at $DIR/branch.rs:+3:13: +8:6\n+      }\n+  \n+      bb6: {\n+          StorageDead(_3);                 // scope 1 at $DIR/branch.rs:+8:5: +8:6\n+          _0 = _2;                         // scope 2 at $DIR/branch.rs:+10:5: +10:6\n+          StorageDead(_2);                 // scope 1 at $DIR/branch.rs:+11:1: +11:2\n+          StorageDead(_1);                 // scope 0 at $DIR/branch.rs:+11:1: +11:2\n+          return;                          // scope 0 at $DIR/branch.rs:+11:2: +11:2\n+      }\n+  }\n+  "}, {"sha": "50b1e00fad4f7ad963b0b1d60a30f8ed25589400", "filename": "tests/mir-opt/copy-prop/branch.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.rs?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,27 @@\n+//! Tests that we bail out when there are multiple assignments to the same local.\n+// unit-test: CopyProp\n+fn val() -> i32 {\n+    1\n+}\n+\n+fn cond() -> bool {\n+    true\n+}\n+\n+// EMIT_MIR branch.foo.CopyProp.diff\n+fn foo() -> i32 {\n+    let x = val();\n+\n+    let y = if cond() {\n+        x\n+    } else {\n+        val();\n+        x\n+    };\n+\n+    y\n+}\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "69acebf7642e950be8f94bfdabc37e7e8201e6d6", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.arg_src.CopyProp.diff", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,21 @@\n+- // MIR for `arg_src` before CopyProp\n++ // MIR for `arg_src` after CopyProp\n+  \n+  fn arg_src(_1: i32) -> i32 {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:12: +0:17\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:27: +0:30\n+      let _2: i32;                         // in scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+      scope 1 {\n+          debug y => _2;                   // in scope 1 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+          _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n+          _1 = const 123_i32;              // scope 1 at $DIR/copy_propagation_arg.rs:+2:5: +2:12\n+          _0 = _2;                         // scope 1 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "ac4e9a2bfa735c610f43f6a573018a43fa60f5ad", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.bar.CopyProp.diff", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,28 @@\n+- // MIR for `bar` before CopyProp\n++ // MIR for `bar` after CopyProp\n+  \n+  fn bar(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n+      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +0:19\n+      let _2: u8;                          // in scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n+      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n+          StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n+          _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n+          _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n+                                           // mir::Constant\n+                                           // + span: $DIR/copy_propagation_arg.rs:16:5: 16:10\n+                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:12: +1:13\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n+          _1 = const 5_u8;                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:10\n+          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +3:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "7ab6ebb7d53e00d3f41a1eacc7d7e92e07a1736d", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.baz.CopyProp.diff", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.baz.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.baz.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.baz.CopyProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,18 @@\n+- // MIR for `baz` before CopyProp\n++ // MIR for `baz` after CopyProp\n+  \n+  fn baz(_1: i32) -> i32 {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:23: +0:26\n+      let mut _2: i32;                     // in scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+          _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+          _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:10\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+          _0 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "0a3e985e7c260c8cbdbb636411e7c5c612c1e391", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.foo.CopyProp.diff", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,28 @@\n+- // MIR for `foo` before CopyProp\n++ // MIR for `foo` after CopyProp\n+  \n+  fn foo(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n+      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +0:19\n+      let mut _2: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n+      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n+          StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n+          _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n+          _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n+                                           // mir::Constant\n+                                           // + span: $DIR/copy_propagation_arg.rs:11:9: 11:14\n+                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:16: +2:17\n+          _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:17\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:16: +2:17\n+          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +3:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "cc98985f1fda6131e78f34af8d86c76afae21c50", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.rs?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,40 @@\n+// Check that CopyProp does not propagate an assignment to a function argument\n+// (doing so can break usages of the original argument value)\n+// unit-test: CopyProp\n+fn dummy(x: u8) -> u8 {\n+    x\n+}\n+\n+// EMIT_MIR copy_propagation_arg.foo.CopyProp.diff\n+fn foo(mut x: u8) {\n+    // calling `dummy` to make a use of `x` that copyprop cannot eliminate\n+    x = dummy(x); // this will assign a local to `x`\n+}\n+\n+// EMIT_MIR copy_propagation_arg.bar.CopyProp.diff\n+fn bar(mut x: u8) {\n+    dummy(x);\n+    x = 5;\n+}\n+\n+// EMIT_MIR copy_propagation_arg.baz.CopyProp.diff\n+fn baz(mut x: i32) -> i32 {\n+    // self-assignment to a function argument should be eliminated\n+    x = x;\n+    x\n+}\n+\n+// EMIT_MIR copy_propagation_arg.arg_src.CopyProp.diff\n+fn arg_src(mut x: i32) -> i32 {\n+    let y = x;\n+    x = 123; // Don't propagate this assignment to `y`\n+    y\n+}\n+\n+fn main() {\n+    // Make sure the function actually gets instantiated.\n+    foo(0);\n+    bar(0);\n+    baz(0);\n+    arg_src(0);\n+}"}, {"sha": "bc5083e1ad01a9c9e00b35bf8df741867778348c", "filename": "tests/mir-opt/copy-prop/cycle.main.CopyProp.diff", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,60 @@\n+- // MIR for `main` before CopyProp\n++ // MIR for `main` after CopyProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/cycle.rs:+1:9: +1:14\n+      let mut _4: i32;                     // in scope 0 at $DIR/cycle.rs:+4:9: +4:10\n+      let _5: ();                          // in scope 0 at $DIR/cycle.rs:+6:5: +6:12\n+      let mut _6: i32;                     // in scope 0 at $DIR/cycle.rs:+6:10: +6:11\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/cycle.rs:+1:9: +1:14\n+          let _2: i32;                     // in scope 1 at $DIR/cycle.rs:+2:9: +2:10\n+          scope 2 {\n+              debug y => _2;               // in scope 2 at $DIR/cycle.rs:+2:9: +2:10\n+              let _3: i32;                 // in scope 2 at $DIR/cycle.rs:+3:9: +3:10\n+              scope 3 {\n+-                 debug z => _3;           // in scope 3 at $DIR/cycle.rs:+3:9: +3:10\n++                 debug z => _2;           // in scope 3 at $DIR/cycle.rs:+3:9: +3:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:+1:9: +1:14\n+          _1 = val() -> bb1;               // scope 0 at $DIR/cycle.rs:+1:17: +1:22\n+                                           // mir::Constant\n+                                           // + span: $DIR/cycle.rs:9:17: 9:20\n+                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageLive(_2);                 // scope 1 at $DIR/cycle.rs:+2:9: +2:10\n+          _2 = _1;                         // scope 1 at $DIR/cycle.rs:+2:13: +2:14\n+-         StorageLive(_3);                 // scope 2 at $DIR/cycle.rs:+3:9: +3:10\n+-         _3 = _2;                         // scope 2 at $DIR/cycle.rs:+3:13: +3:14\n+-         StorageLive(_4);                 // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n+-         _4 = _3;                         // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n+-         _1 = move _4;                    // scope 3 at $DIR/cycle.rs:+4:5: +4:10\n+-         StorageDead(_4);                 // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n++         _1 = _2;                         // scope 3 at $DIR/cycle.rs:+4:5: +4:10\n+          StorageLive(_5);                 // scope 3 at $DIR/cycle.rs:+6:5: +6:12\n+          StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:+6:10: +6:11\n+          _6 = _1;                         // scope 3 at $DIR/cycle.rs:+6:10: +6:11\n+          _5 = std::mem::drop::<i32>(move _6) -> bb2; // scope 3 at $DIR/cycle.rs:+6:5: +6:12\n+                                           // mir::Constant\n+                                           // + span: $DIR/cycle.rs:14:5: 14:9\n+                                           // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:+6:11: +6:12\n+          StorageDead(_5);                 // scope 3 at $DIR/cycle.rs:+6:12: +6:13\n+          _0 = const ();                   // scope 0 at $DIR/cycle.rs:+0:11: +7:2\n+-         StorageDead(_3);                 // scope 2 at $DIR/cycle.rs:+7:1: +7:2\n+-         StorageDead(_2);                 // scope 1 at $DIR/cycle.rs:+7:1: +7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/cycle.rs:+7:2: +7:2\n+      }\n+  }\n+  "}, {"sha": "b74c397269deed8312d4156e4f7a5ac4e0d974cc", "filename": "tests/mir-opt/copy-prop/cycle.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.rs?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,15 @@\n+//! Tests that cyclic assignments don't hang CopyProp, and result in reasonable code.\n+// unit-test: CopyProp\n+fn val() -> i32 {\n+    1\n+}\n+\n+// EMIT_MIR cycle.main.CopyProp.diff\n+fn main() {\n+    let mut x = val();\n+    let y = x;\n+    let z = y;\n+    x = z;\n+\n+    drop(x);\n+}"}, {"sha": "918817da56ce48b2b2d6dfbd791b5379d2043954", "filename": "tests/mir-opt/copy-prop/dead_stores_79191.f.CopyProp.after.mir", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.mir?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,30 @@\n+// MIR for `f` after CopyProp\n+\n+fn f(_1: usize) -> usize {\n+    debug a => _1;                       // in scope 0 at $DIR/dead_stores_79191.rs:+0:6: +0:11\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/dead_stores_79191.rs:+0:23: +0:28\n+    let _2: usize;                       // in scope 0 at $DIR/dead_stores_79191.rs:+1:9: +1:10\n+    let mut _3: usize;                   // in scope 0 at $DIR/dead_stores_79191.rs:+3:9: +3:10\n+    let mut _4: usize;                   // in scope 0 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n+    scope 1 {\n+        debug b => _2;                   // in scope 1 at $DIR/dead_stores_79191.rs:+1:9: +1:10\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/dead_stores_79191.rs:+1:9: +1:10\n+        _2 = _1;                         // scope 0 at $DIR/dead_stores_79191.rs:+1:13: +1:14\n+        _1 = const 5_usize;              // scope 1 at $DIR/dead_stores_79191.rs:+2:5: +2:10\n+        _1 = _2;                         // scope 1 at $DIR/dead_stores_79191.rs:+3:5: +3:10\n+        StorageLive(_4);                 // scope 1 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n+        _4 = _1;                         // scope 1 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n+        _0 = id::<usize>(move _4) -> bb1; // scope 1 at $DIR/dead_stores_79191.rs:+4:5: +4:10\n+                                         // mir::Constant\n+                                         // + span: $DIR/dead_stores_79191.rs:12:5: 12:7\n+                                         // + literal: Const { ty: fn(usize) -> usize {id::<usize>}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_4);                 // scope 1 at $DIR/dead_stores_79191.rs:+4:9: +4:10\n+        return;                          // scope 0 at $DIR/dead_stores_79191.rs:+5:2: +5:2\n+    }\n+}"}, {"sha": "e3493b8b7a1858b88cb9aaddd8ec863ce4c3d3dd", "filename": "tests/mir-opt/copy-prop/dead_stores_79191.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.rs?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,17 @@\n+// unit-test: CopyProp\n+\n+fn id<T>(x: T) -> T {\n+    x\n+}\n+\n+// EMIT_MIR dead_stores_79191.f.CopyProp.after.mir\n+fn f(mut a: usize) -> usize {\n+    let b = a;\n+    a = 5;\n+    a = b;\n+    id(a)\n+}\n+\n+fn main() {\n+    f(0);\n+}"}, {"sha": "cf21fadd437907823c5a5a63f251e272fa1035e7", "filename": "tests/mir-opt/copy-prop/dead_stores_better.f.CopyProp.after.mir", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.mir?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,30 @@\n+// MIR for `f` after CopyProp\n+\n+fn f(_1: usize) -> usize {\n+    debug a => _1;                       // in scope 0 at $DIR/dead_stores_better.rs:+0:10: +0:15\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/dead_stores_better.rs:+0:27: +0:32\n+    let _2: usize;                       // in scope 0 at $DIR/dead_stores_better.rs:+1:9: +1:10\n+    let mut _3: usize;                   // in scope 0 at $DIR/dead_stores_better.rs:+3:9: +3:10\n+    let mut _4: usize;                   // in scope 0 at $DIR/dead_stores_better.rs:+4:8: +4:9\n+    scope 1 {\n+        debug b => _2;                   // in scope 1 at $DIR/dead_stores_better.rs:+1:9: +1:10\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/dead_stores_better.rs:+1:9: +1:10\n+        _2 = _1;                         // scope 0 at $DIR/dead_stores_better.rs:+1:13: +1:14\n+        _1 = const 5_usize;              // scope 1 at $DIR/dead_stores_better.rs:+2:5: +2:10\n+        _1 = _2;                         // scope 1 at $DIR/dead_stores_better.rs:+3:5: +3:10\n+        StorageLive(_4);                 // scope 1 at $DIR/dead_stores_better.rs:+4:8: +4:9\n+        _4 = _1;                         // scope 1 at $DIR/dead_stores_better.rs:+4:8: +4:9\n+        _0 = id::<usize>(move _4) -> bb1; // scope 1 at $DIR/dead_stores_better.rs:+4:5: +4:10\n+                                         // mir::Constant\n+                                         // + span: $DIR/dead_stores_better.rs:16:5: 16:7\n+                                         // + literal: Const { ty: fn(usize) -> usize {id::<usize>}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_4);                 // scope 1 at $DIR/dead_stores_better.rs:+4:9: +4:10\n+        return;                          // scope 0 at $DIR/dead_stores_better.rs:+5:2: +5:2\n+    }\n+}"}, {"sha": "8465b3c98536e64f172257dfaf15605d10030529", "filename": "tests/mir-opt/copy-prop/dead_stores_better.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.rs?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,21 @@\n+// This is a copy of the `dead_stores_79191` test, except that we turn on DSE. This demonstrates\n+// that that pass enables this one to do more optimizations.\n+\n+// unit-test: CopyProp\n+// compile-flags: -Zmir-enable-passes=+DeadStoreElimination\n+\n+fn id<T>(x: T) -> T {\n+    x\n+}\n+\n+// EMIT_MIR dead_stores_better.f.CopyProp.after.mir\n+pub fn f(mut a: usize) -> usize {\n+    let b = a;\n+    a = 5;\n+    a = b;\n+    id(a)\n+}\n+\n+fn main() {\n+    f(0);\n+}"}, {"sha": "d76bf1cfe7e0e0f4112fdf8ce38b00397209d7be", "filename": "tests/mir-opt/copy-prop/move_arg.f.CopyProp.diff", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,40 @@\n+- // MIR for `f` before CopyProp\n++ // MIR for `f` after CopyProp\n+  \n+  fn f(_1: T) -> () {\n+      debug a => _1;                       // in scope 0 at $DIR/move_arg.rs:+0:19: +0:20\n+      let mut _0: ();                      // return place in scope 0 at $DIR/move_arg.rs:+0:25: +0:25\n+      let _2: T;                           // in scope 0 at $DIR/move_arg.rs:+1:9: +1:10\n+      let _3: ();                          // in scope 0 at $DIR/move_arg.rs:+2:5: +2:12\n+      let mut _4: T;                       // in scope 0 at $DIR/move_arg.rs:+2:7: +2:8\n+      let mut _5: T;                       // in scope 0 at $DIR/move_arg.rs:+2:10: +2:11\n+      scope 1 {\n+-         debug b => _2;                   // in scope 1 at $DIR/move_arg.rs:+1:9: +1:10\n++         debug b => _1;                   // in scope 1 at $DIR/move_arg.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/move_arg.rs:+1:9: +1:10\n+-         _2 = _1;                         // scope 0 at $DIR/move_arg.rs:+1:13: +1:14\n+          StorageLive(_3);                 // scope 1 at $DIR/move_arg.rs:+2:5: +2:12\n+-         StorageLive(_4);                 // scope 1 at $DIR/move_arg.rs:+2:7: +2:8\n+-         _4 = _1;                         // scope 1 at $DIR/move_arg.rs:+2:7: +2:8\n+-         StorageLive(_5);                 // scope 1 at $DIR/move_arg.rs:+2:10: +2:11\n+-         _5 = _2;                         // scope 1 at $DIR/move_arg.rs:+2:10: +2:11\n+-         _3 = g::<T>(move _4, move _5) -> bb1; // scope 1 at $DIR/move_arg.rs:+2:5: +2:12\n++         _3 = g::<T>(_1, _1) -> bb1;      // scope 1 at $DIR/move_arg.rs:+2:5: +2:12\n+                                           // mir::Constant\n+                                           // + span: $DIR/move_arg.rs:7:5: 7:6\n+                                           // + literal: Const { ty: fn(T, T) {g::<T>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         StorageDead(_5);                 // scope 1 at $DIR/move_arg.rs:+2:11: +2:12\n+-         StorageDead(_4);                 // scope 1 at $DIR/move_arg.rs:+2:11: +2:12\n+          StorageDead(_3);                 // scope 1 at $DIR/move_arg.rs:+2:12: +2:13\n+          _0 = const ();                   // scope 0 at $DIR/move_arg.rs:+0:25: +3:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/move_arg.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/move_arg.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "40ae1d8f466198c97d64dc21e452cd05060e6f92", "filename": "tests/mir-opt/copy-prop/move_arg.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.rs?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,15 @@\n+// Test that we do not move multiple times from the same local.\n+// unit-test: CopyProp\n+\n+// EMIT_MIR move_arg.f.CopyProp.diff\n+pub fn f<T: Copy>(a: T) {\n+    let b = a;\n+    g(a, b);\n+}\n+\n+#[inline(never)]\n+pub fn g<T: Copy>(_: T, _: T) {}\n+\n+fn main() {\n+    f(5)\n+}"}, {"sha": "61fdd6f8c05bfb72a480e4cf47d0aad63db2abbe", "filename": "tests/mir-opt/copy-prop/mutate_through_pointer.f.CopyProp.diff", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fmutate_through_pointer.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fmutate_through_pointer.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmutate_through_pointer.f.CopyProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,19 @@\n+- // MIR for `f` before CopyProp\n++ // MIR for `f` after CopyProp\n+  \n+  fn f(_1: bool) -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/mutate_through_pointer.rs:+0:18: +0:22\n+      let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _3: *const bool;             // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _4: *mut bool;               // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+  \n+      bb0: {\n+          _2 = _1;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _3 = &raw const _2;              // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _4 = &raw mut (*_3);             // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          (*_4) = const false;             // scope 0 at $DIR/mutate_through_pointer.rs:+5:9: +5:20\n+          _0 = _1;                         // scope 0 at $DIR/mutate_through_pointer.rs:+6:9: +6:16\n+          return;                          // scope 0 at $DIR/mutate_through_pointer.rs:+7:9: +7:17\n+      }\n+  }\n+  "}, {"sha": "609e49d6bc99864b1354c0199b29705d96bec679", "filename": "tests/mir-opt/copy-prop/mutate_through_pointer.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fmutate_through_pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fmutate_through_pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmutate_through_pointer.rs?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,22 @@\n+#![feature(custom_mir, core_intrinsics)]\n+#![allow(unused_assignments)]\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+#[custom_mir(dialect = \"analysis\", phase = \"post-cleanup\")]\n+fn f(c: bool) -> bool {\n+    mir!({\n+        let a = c;\n+        let p = core::ptr::addr_of!(a);\n+        let p2 = core::ptr::addr_of_mut!(*p);\n+        *p2 = false;\n+        RET = c;\n+        Return()\n+    })\n+}\n+\n+fn main() {\n+    assert_eq!(true, f(true));\n+}\n+\n+// EMIT_MIR mutate_through_pointer.f.CopyProp.diff"}, {"sha": "9760fd3740fb90af6717b5921bc8b202f5b7ff46", "filename": "tests/mir-opt/copy-prop/non_dominate.f.CopyProp.diff", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fnon_dominate.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fnon_dominate.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fnon_dominate.f.CopyProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,29 @@\n+- // MIR for `f` before CopyProp\n++ // MIR for `f` after CopyProp\n+  \n+  fn f(_1: bool) -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/non_dominate.rs:+0:18: +0:22\n+      let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _3: bool;                    // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+  \n+      bb0: {\n+          goto -> bb1;                     // scope 0 at $DIR/non_dominate.rs:+4:11: +4:20\n+      }\n+  \n+      bb1: {\n+          _3 = _1;                         // scope 0 at $DIR/non_dominate.rs:+5:17: +5:22\n+          switchInt(_3) -> [0: bb3, otherwise: bb2]; // scope 0 at $DIR/non_dominate.rs:+5:24: +5:58\n+      }\n+  \n+      bb2: {\n+          _2 = _3;                         // scope 0 at $DIR/non_dominate.rs:+8:17: +8:22\n+          _1 = const false;                // scope 0 at $DIR/non_dominate.rs:+8:24: +8:33\n+          goto -> bb1;                     // scope 0 at $DIR/non_dominate.rs:+8:35: +8:44\n+      }\n+  \n+      bb3: {\n+          _0 = _2;                         // scope 0 at $DIR/non_dominate.rs:+9:17: +9:24\n+          return;                          // scope 0 at $DIR/non_dominate.rs:+9:26: +9:34\n+      }\n+  }\n+  "}, {"sha": "c0ea838e1c885ff23490ce5fde0913542158b413", "filename": "tests/mir-opt/copy-prop/non_dominate.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fnon_dominate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fcopy-prop%2Fnon_dominate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fnon_dominate.rs?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,26 @@\n+// unit-test: CopyProp\n+\n+#![feature(custom_mir, core_intrinsics)]\n+#![allow(unused_assignments)]\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+#[custom_mir(dialect = \"analysis\", phase = \"post-cleanup\")]\n+fn f(c: bool) -> bool {\n+    mir!(\n+        let a: bool;\n+        let b: bool;\n+        { Goto(bb1) }\n+        bb1 = { b = c; match b { false => bb3, _ => bb2 }}\n+        // This assignment to `a` does not dominate the use in `bb3`.\n+        // It should not be replaced by `b`.\n+        bb2 = { a = b; c = false; Goto(bb1) }\n+        bb3 = { RET = a; Return() }\n+    )\n+}\n+\n+fn main() {\n+    assert_eq!(true, f(true));\n+}\n+\n+// EMIT_MIR non_dominate.f.CopyProp.diff"}, {"sha": "6870d7d6c45b457b8459dce4a63f514fdb4cbdc8", "filename": "tests/mir-opt/dataflow-const-prop/inherit_overflow.main.DataflowConstProp.diff", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -20,19 +20,11 @@\n           _1 = const u8::MAX;              // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n           StorageLive(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n           _2 = const 1_u8;                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          _3 = const u8::MAX;              // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          _4 = const 1_u8;                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           _5 = CheckedAdd(const u8::MAX, const 1_u8); // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           assert(!move (_5.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const u8::MAX, const 1_u8) -> bb1; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n       }\n   \n       bb1: {\n-          StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          StorageDead(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageDead(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n           return;                          // scope 0 at $DIR/inherit_overflow.rs:+4:2: +4:2\n       }\n   }"}, {"sha": "1a7fb916e56dbaf3d8ba15a4e84b422557117c16", "filename": "tests/mir-opt/div_overflow.const_dividend.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fdiv_overflow.const_dividend.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fdiv_overflow.const_dividend.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdiv_overflow.const_dividend.PreCodegen.after.mir?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -11,7 +11,7 @@ fn const_dividend(_1: i32) -> i32 {\n     }\n \n     bb1: {\n-        _0 = Div(const 256_i32, move _1); // scope 0 at $DIR/div_overflow.rs:+1:5: +1:12\n+        _0 = Div(const 256_i32, _1);     // scope 0 at $DIR/div_overflow.rs:+1:5: +1:12\n         return;                          // scope 0 at $DIR/div_overflow.rs:+2:2: +2:2\n     }\n }"}, {"sha": "5526a194be563cb8ab98f4c0b4cab1669ed90ef4", "filename": "tests/mir-opt/div_overflow.const_divisor.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fdiv_overflow.const_divisor.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fdiv_overflow.const_divisor.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdiv_overflow.const_divisor.PreCodegen.after.mir?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -5,7 +5,7 @@ fn const_divisor(_1: i32) -> i32 {\n     let mut _0: i32;                     // return place in scope 0 at $DIR/div_overflow.rs:+0:33: +0:36\n \n     bb0: {\n-        _0 = Div(move _1, const 256_i32); // scope 0 at $DIR/div_overflow.rs:+1:5: +1:12\n+        _0 = Div(_1, const 256_i32);     // scope 0 at $DIR/div_overflow.rs:+1:5: +1:12\n         return;                          // scope 0 at $DIR/div_overflow.rs:+2:2: +2:2\n     }\n }"}, {"sha": "df9f8dcf1a407b7496b9f719db0d88d374162b5c", "filename": "tests/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -83,55 +83,39 @@\n           _10 = ((_7 as Some).0: usize);   // scope 3 at $DIR/funky_arms.rs:+13:17: +13:26\n           StorageLive(_11);                // scope 3 at $DIR/funky_arms.rs:+15:43: +15:46\n           _11 = &mut (*_1);                // scope 3 at $DIR/funky_arms.rs:+15:43: +15:46\n-          StorageLive(_12);                // scope 3 at $DIR/funky_arms.rs:+15:48: +15:51\n-          _12 = _2;                        // scope 3 at $DIR/funky_arms.rs:+15:48: +15:51\n           StorageLive(_13);                // scope 3 at $DIR/funky_arms.rs:+15:53: +15:57\n           _13 = _6;                        // scope 3 at $DIR/funky_arms.rs:+15:53: +15:57\n           StorageLive(_14);                // scope 3 at $DIR/funky_arms.rs:+15:59: +15:79\n           StorageLive(_15);                // scope 3 at $DIR/funky_arms.rs:+15:59: +15:75\n-          StorageLive(_16);                // scope 3 at $DIR/funky_arms.rs:+15:59: +15:68\n-          _16 = _10;                       // scope 3 at $DIR/funky_arms.rs:+15:59: +15:68\n-          _15 = move _16 as u32 (IntToInt); // scope 3 at $DIR/funky_arms.rs:+15:59: +15:75\n-          StorageDead(_16);                // scope 3 at $DIR/funky_arms.rs:+15:74: +15:75\n+          _15 = _10 as u32 (IntToInt);     // scope 3 at $DIR/funky_arms.rs:+15:59: +15:75\n           _14 = Add(move _15, const 1_u32); // scope 3 at $DIR/funky_arms.rs:+15:59: +15:79\n           StorageDead(_15);                // scope 3 at $DIR/funky_arms.rs:+15:78: +15:79\n-          StorageLive(_17);                // scope 3 at $DIR/funky_arms.rs:+15:81: +15:86\n-          _17 = _3;                        // scope 3 at $DIR/funky_arms.rs:+15:81: +15:86\n-          _0 = float_to_exponential_common_exact::<T>(move _11, move _12, move _13, move _14, move _17) -> bb7; // scope 3 at $DIR/funky_arms.rs:+15:9: +15:87\n+          _0 = float_to_exponential_common_exact::<T>(move _11, _2, move _13, move _14, _3) -> bb7; // scope 3 at $DIR/funky_arms.rs:+15:9: +15:87\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:26:9: 26:42\n                                            // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut Formatter<'b>, &'c T, Sign, u32, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb7: {\n-          StorageDead(_17);                // scope 3 at $DIR/funky_arms.rs:+15:86: +15:87\n           StorageDead(_14);                // scope 3 at $DIR/funky_arms.rs:+15:86: +15:87\n           StorageDead(_13);                // scope 3 at $DIR/funky_arms.rs:+15:86: +15:87\n-          StorageDead(_12);                // scope 3 at $DIR/funky_arms.rs:+15:86: +15:87\n           StorageDead(_11);                // scope 3 at $DIR/funky_arms.rs:+15:86: +15:87\n-          StorageDead(_10);                // scope 2 at $DIR/funky_arms.rs:+16:5: +16:6\n           goto -> bb10;                    // scope 2 at $DIR/funky_arms.rs:+13:5: +18:6\n       }\n   \n       bb8: {\n           StorageLive(_18);                // scope 2 at $DIR/funky_arms.rs:+17:46: +17:49\n           _18 = &mut (*_1);                // scope 2 at $DIR/funky_arms.rs:+17:46: +17:49\n-          StorageLive(_19);                // scope 2 at $DIR/funky_arms.rs:+17:51: +17:54\n-          _19 = _2;                        // scope 2 at $DIR/funky_arms.rs:+17:51: +17:54\n           StorageLive(_20);                // scope 2 at $DIR/funky_arms.rs:+17:56: +17:60\n           _20 = _6;                        // scope 2 at $DIR/funky_arms.rs:+17:56: +17:60\n-          StorageLive(_21);                // scope 2 at $DIR/funky_arms.rs:+17:62: +17:67\n-          _21 = _3;                        // scope 2 at $DIR/funky_arms.rs:+17:62: +17:67\n-          _0 = float_to_exponential_common_shortest::<T>(move _18, move _19, move _20, move _21) -> bb9; // scope 2 at $DIR/funky_arms.rs:+17:9: +17:68\n+          _0 = float_to_exponential_common_shortest::<T>(move _18, _2, move _20, _3) -> bb9; // scope 2 at $DIR/funky_arms.rs:+17:9: +17:68\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:28:9: 28:45\n                                            // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut Formatter<'b>, &'c T, Sign, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb9: {\n-          StorageDead(_21);                // scope 2 at $DIR/funky_arms.rs:+17:67: +17:68\n           StorageDead(_20);                // scope 2 at $DIR/funky_arms.rs:+17:67: +17:68\n-          StorageDead(_19);                // scope 2 at $DIR/funky_arms.rs:+17:67: +17:68\n           StorageDead(_18);                // scope 2 at $DIR/funky_arms.rs:+17:67: +17:68\n           goto -> bb10;                    // scope 2 at $DIR/funky_arms.rs:+13:5: +18:6\n       }"}, {"sha": "64c3e47ff46edb7b40ca5853b413e2773923d3ac", "filename": "tests/mir-opt/inline/dyn_trait.get_query.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -35,8 +35,8 @@\n           _4 = &(*_2);                     // scope 1 at $DIR/dyn_trait.rs:+2:23: +2:24\n -         _0 = try_execute_query::<<Q as Query>::C>(move _4) -> bb2; // scope 1 at $DIR/dyn_trait.rs:+2:5: +2:25\n +         StorageLive(_5);                 // scope 2 at $DIR/dyn_trait.rs:27:14: 27:15\n-+         _5 = move _4 as &dyn Cache<V = <Q as Query>::V> (Pointer(Unsize)); // scope 2 at $DIR/dyn_trait.rs:27:14: 27:15\n-+         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(move _5) -> bb2; // scope 3 at $DIR/dyn_trait.rs:21:5: 21:22\n++         _5 = _4 as &dyn Cache<V = <Q as Query>::V> (Pointer(Unsize)); // scope 2 at $DIR/dyn_trait.rs:27:14: 27:15\n++         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(_5) -> bb2; // scope 3 at $DIR/dyn_trait.rs:21:5: 21:22\n                                            // mir::Constant\n -                                          // + span: $DIR/dyn_trait.rs:34:5: 34:22\n -                                          // + literal: Const { ty: for<'a> fn(&'a <Q as Query>::C) {try_execute_query::<<Q as Query>::C>}, val: Value(<ZST>) }"}, {"sha": "3fa9c3e88f6349b265f00d3f0d3b91eb9707f50d", "filename": "tests/mir-opt/inline/dyn_trait.try_execute_query.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -17,7 +17,7 @@\n           _2 = move _3 as &dyn Cache<V = <C as Cache>::V> (Pointer(Unsize)); // scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n           StorageDead(_3);                 // scope 0 at $DIR/dyn_trait.rs:+1:14: +1:15\n -         _0 = mk_cycle::<<C as Cache>::V>(move _2) -> bb1; // scope 0 at $DIR/dyn_trait.rs:+1:5: +1:16\n-+         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(move _2) -> bb1; // scope 1 at $DIR/dyn_trait.rs:21:5: 21:22\n++         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(_2) -> bb1; // scope 1 at $DIR/dyn_trait.rs:21:5: 21:22\n                                            // mir::Constant\n -                                          // + span: $DIR/dyn_trait.rs:27:5: 27:13\n -                                          // + literal: Const { ty: for<'a> fn(&'a (dyn Cache<V = <C as Cache>::V> + 'a)) {mk_cycle::<<C as Cache>::V>}, val: Value(<ZST>) }"}, {"sha": "20f737cc29f62904d92d2c6eaed05d054610357b", "filename": "tests/mir-opt/inline/inline_any_operand.bar.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -26,7 +26,7 @@ fn bar() -> bool {\n         _3 = const 1_i32;                // scope 1 at $DIR/inline_any_operand.rs:+2:5: +2:13\n         StorageLive(_4);                 // scope 1 at $DIR/inline_any_operand.rs:+2:5: +2:13\n         _4 = const -1_i32;               // scope 1 at $DIR/inline_any_operand.rs:+2:5: +2:13\n-        _0 = Eq(move _3, move _4);       // scope 2 at $DIR/inline_any_operand.rs:17:5: 17:11\n+        _0 = Eq(_3, _4);                 // scope 2 at $DIR/inline_any_operand.rs:17:5: 17:11\n         StorageDead(_4);                 // scope 1 at $DIR/inline_any_operand.rs:+2:5: +2:13\n         StorageDead(_3);                 // scope 1 at $DIR/inline_any_operand.rs:+2:5: +2:13\n         StorageDead(_2);                 // scope 1 at $DIR/inline_any_operand.rs:+2:12: +2:13"}, {"sha": "57574acf92354e375130f3997eb20351aa41309d", "filename": "tests/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -92,7 +92,7 @@\n + \n +     bb3: {\n +         StorageLive(_8);                 // scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n-+         switchInt(move _7) -> [0: bb5, otherwise: bb4]; // scope 6 at $DIR/inline_generator.rs:15:20: 15:21\n++         switchInt(_7) -> [0: bb5, otherwise: bb4]; // scope 6 at $DIR/inline_generator.rs:15:20: 15:21\n +     }\n + \n +     bb4: {\n@@ -118,7 +118,7 @@\n +         StorageLive(_8);                 // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n +         StorageDead(_8);                 // scope 6 at $DIR/inline_generator.rs:15:38: 15:39\n +         Deinit(_1);                      // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n-+         ((_1 as Complete).0: bool) = move _7; // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n++         ((_1 as Complete).0: bool) = _7; // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n +         discriminant(_1) = 1;            // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n +         _12 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n +         discriminant((*_12)) = 1;        // scope 6 at $DIR/inline_generator.rs:15:41: 15:41"}, {"sha": "b7c5bbecb6883a97306779d8f5e65278fe511dea", "filename": "tests/mir-opt/inline/inline_trait_method_2.test2.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -15,7 +15,7 @@ fn test2(_1: &dyn X) -> bool {\n         _3 = &(*_1);                     // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n         _2 = move _3 as &dyn X (Pointer(Unsize)); // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n         StorageDead(_3);                 // scope 0 at $DIR/inline_trait_method_2.rs:+1:10: +1:11\n-        _0 = <dyn X as X>::y(move _2) -> bb1; // scope 1 at $DIR/inline_trait_method_2.rs:10:5: 10:10\n+        _0 = <dyn X as X>::y(_2) -> bb1; // scope 1 at $DIR/inline_trait_method_2.rs:10:5: 10:10\n                                          // mir::Constant\n                                          // + span: $DIR/inline_trait_method_2.rs:10:7: 10:8\n                                          // + literal: Const { ty: for<'a> fn(&'a dyn X) -> bool {<dyn X as X>::y}, val: Value(<ZST>) }"}, {"sha": "30bf2c0684e52525ba75d3da0232559318bd75f4", "filename": "tests/mir-opt/issue_101973.inner.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -15,7 +15,7 @@\n       let mut _10: (u32, bool);            // in scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n       let mut _11: (u32, bool);            // in scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n       scope 1 (inlined imm8) {             // at $DIR/issue_101973.rs:14:5: 14:17\n-          debug x => _5;                   // in scope 1 at $DIR/issue_101973.rs:5:13: 5:14\n+          debug x => _1;                   // in scope 1 at $DIR/issue_101973.rs:5:13: 5:14\n           let mut _12: u32;                // in scope 1 at $DIR/issue_101973.rs:7:12: 7:27\n           let mut _13: u32;                // in scope 1 at $DIR/issue_101973.rs:7:12: 7:20\n           let mut _14: (u32, bool);        // in scope 1 at $DIR/issue_101973.rs:7:12: 7:20\n@@ -34,17 +34,14 @@\n           StorageLive(_2);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:65\n           StorageLive(_3);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:58\n           StorageLive(_4);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:17\n-          StorageLive(_5);                 // scope 0 at $DIR/issue_101973.rs:+1:10: +1:16\n-          _5 = _1;                         // scope 0 at $DIR/issue_101973.rs:+1:10: +1:16\n           StorageLive(_12);                // scope 2 at $DIR/issue_101973.rs:7:12: 7:27\n           StorageLive(_13);                // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n-          _14 = CheckedShr(_5, const 0_i32); // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n+          _14 = CheckedShr(_1, const 0_i32); // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n           assert(!move (_14.1: bool), \"attempt to shift right by `{}`, which would overflow\", const 0_i32) -> bb3; // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n       }\n   \n       bb1: {\n           _8 = move (_10.0: u32);          // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n-          StorageDead(_9);                 // scope 0 at $DIR/issue_101973.rs:+1:44: +1:45\n           _7 = BitAnd(move _8, const 15_u32); // scope 0 at $DIR/issue_101973.rs:+1:31: +1:52\n           StorageDead(_8);                 // scope 0 at $DIR/issue_101973.rs:+1:51: +1:52\n           _11 = CheckedShl(_7, const 1_i32); // scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n@@ -54,11 +51,7 @@\n       bb2: {\n           _6 = move (_11.0: u32);          // scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n           StorageDead(_7);                 // scope 0 at $DIR/issue_101973.rs:+1:56: +1:57\n-          StorageLive(_15);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-          _15 = _4;                        // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-          StorageLive(_16);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-          _16 = _6;                        // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-          _3 = rotate_right::<u32>(move _15, move _16) -> bb4; // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+          _3 = rotate_right::<u32>(_4, _6) -> bb4; // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn(u32, u32) -> u32 {rotate_right::<u32>}, val: Value(<ZST>) }\n@@ -70,21 +63,14 @@\n           StorageDead(_13);                // scope 2 at $DIR/issue_101973.rs:7:26: 7:27\n           _4 = BitOr(const 0_u32, move _12); // scope 2 at $DIR/issue_101973.rs:7:5: 7:27\n           StorageDead(_12);                // scope 2 at $DIR/issue_101973.rs:7:26: 7:27\n-          StorageDead(_5);                 // scope 0 at $DIR/issue_101973.rs:+1:16: +1:17\n           StorageLive(_6);                 // scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n           StorageLive(_7);                 // scope 0 at $DIR/issue_101973.rs:+1:31: +1:52\n           StorageLive(_8);                 // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n-          StorageLive(_9);                 // scope 0 at $DIR/issue_101973.rs:+1:33: +1:39\n-          _9 = _1;                         // scope 0 at $DIR/issue_101973.rs:+1:33: +1:39\n-          _10 = CheckedShr(_9, const 8_i32); // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n+          _10 = CheckedShr(_1, const 8_i32); // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n           assert(!move (_10.1: bool), \"attempt to shift right by `{}`, which would overflow\", const 8_i32) -> bb1; // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n       }\n   \n       bb4: {\n-          StorageDead(_16);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-          StorageDead(_15);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-          StorageDead(_6);                 // scope 0 at $DIR/issue_101973.rs:+1:57: +1:58\n-          StorageDead(_4);                 // scope 0 at $DIR/issue_101973.rs:+1:57: +1:58\n           _2 = move _3 as i32 (IntToInt);  // scope 0 at $DIR/issue_101973.rs:+1:5: +1:65\n           StorageDead(_3);                 // scope 0 at $DIR/issue_101973.rs:+1:64: +1:65\n           _0 = move _2 as i64 (IntToInt);  // scope 0 at $DIR/issue_101973.rs:+1:5: +1:72"}, {"sha": "c14780052fb091f257fefbd178c0c05357f2c7c7", "filename": "tests/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -29,24 +29,11 @@\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/issue_76432.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n           StorageLive(_4);                 // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n           StorageLive(_5);                 // scope 0 at $DIR/issue_76432.rs:+1:20: +1:29\n-          StorageLive(_6);                 // scope 0 at $DIR/issue_76432.rs:+1:21: +1:22\n-          _6 = _1;                         // scope 0 at $DIR/issue_76432.rs:+1:21: +1:22\n-          StorageLive(_7);                 // scope 0 at $DIR/issue_76432.rs:+1:24: +1:25\n-          _7 = _1;                         // scope 0 at $DIR/issue_76432.rs:+1:24: +1:25\n-          StorageLive(_8);                 // scope 0 at $DIR/issue_76432.rs:+1:27: +1:28\n-          _8 = _1;                         // scope 0 at $DIR/issue_76432.rs:+1:27: +1:28\n-          _5 = [move _6, move _7, move _8]; // scope 0 at $DIR/issue_76432.rs:+1:20: +1:29\n-          StorageDead(_8);                 // scope 0 at $DIR/issue_76432.rs:+1:28: +1:29\n-          StorageDead(_7);                 // scope 0 at $DIR/issue_76432.rs:+1:28: +1:29\n-          StorageDead(_6);                 // scope 0 at $DIR/issue_76432.rs:+1:28: +1:29\n+          _5 = [_1, _1, _1];               // scope 0 at $DIR/issue_76432.rs:+1:20: +1:29\n           _4 = &_5;                        // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n-          _3 = _4;                         // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n-          _2 = move _3 as &[T] (Pointer(Unsize)); // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n-          StorageDead(_3);                 // scope 0 at $DIR/issue_76432.rs:+1:28: +1:29\n-          StorageDead(_4);                 // scope 0 at $DIR/issue_76432.rs:+1:29: +1:30\n+          _2 = _4 as &[T] (Pointer(Unsize)); // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n           _9 = Len((*_2));                 // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n           _10 = const 3_usize;             // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n -         _11 = Eq(move _9, const 3_usize); // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33"}, {"sha": "dee1d538395ef86b9b5ec4b86666ae6478b72943", "filename": "tests/mir-opt/lower_array_len_e2e.array_bound.PreCodegen.after.mir", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Flower_array_len_e2e.array_bound.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Flower_array_len_e2e.array_bound.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_array_len_e2e.array_bound.PreCodegen.after.mir?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -5,27 +5,23 @@ fn array_bound(_1: usize, _2: &[u8; N]) -> u8 {\n     debug slice => _2;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+0:50: +0:55\n     let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len_e2e.rs:+0:70: +0:72\n     let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n-    let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:13\n-    let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n-    let mut _6: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-    let mut _7: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+    let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n+    let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+    let mut _6: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n \n     bb0: {\n         StorageLive(_3);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n-        StorageLive(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:13\n-        _4 = _1;                         // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:13\n-        StorageLive(_5);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n-        _5 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n-        _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n-        StorageDead(_5);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:26: +1:27\n+        StorageLive(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n+        _4 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n+        _3 = Lt(_1, move _4);            // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:26: +1:27\n         switchInt(move _3) -> [0: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n     }\n \n     bb1: {\n-        _6 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-        _7 = Lt(_1, _6);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-        assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _1) -> bb2; // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+        _5 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+        _6 = Lt(_1, _5);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+        assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _1) -> bb2; // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n     }\n \n     bb2: {"}, {"sha": "e35fe758ab12ddea899bddedcba028e5e02fc4c3", "filename": "tests/mir-opt/lower_array_len_e2e.array_bound_mut.PreCodegen.after.mir", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Flower_array_len_e2e.array_bound_mut.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Flower_array_len_e2e.array_bound_mut.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_array_len_e2e.array_bound_mut.PreCodegen.after.mir?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -5,30 +5,26 @@ fn array_bound_mut(_1: usize, _2: &mut [u8; N]) -> u8 {\n     debug slice => _2;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+0:54: +0:59\n     let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len_e2e.rs:+0:78: +0:80\n     let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n-    let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:13\n-    let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n-    let mut _6: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-    let mut _7: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-    let _8: usize;                       // in scope 0 at $DIR/lower_array_len_e2e.rs:+4:15: +4:16\n-    let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n-    let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n+    let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n+    let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+    let mut _6: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+    let _7: usize;                       // in scope 0 at $DIR/lower_array_len_e2e.rs:+4:15: +4:16\n+    let mut _8: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n+    let mut _9: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n \n     bb0: {\n         StorageLive(_3);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n-        StorageLive(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:13\n-        _4 = _1;                         // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:13\n-        StorageLive(_5);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n-        _5 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n-        _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n-        StorageDead(_5);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:26: +1:27\n+        StorageLive(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n+        _4 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n+        _3 = Lt(_1, move _4);            // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:26: +1:27\n         switchInt(move _3) -> [0: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n     }\n \n     bb1: {\n-        _6 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-        _7 = Lt(_1, _6);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n-        assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _1) -> bb2; // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+        _5 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+        _6 = Lt(_1, _5);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+        assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _1) -> bb2; // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n     }\n \n     bb2: {\n@@ -37,16 +33,16 @@ fn array_bound_mut(_1: usize, _2: &mut [u8; N]) -> u8 {\n     }\n \n     bb3: {\n-        StorageLive(_8);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+4:15: +4:16\n-        _8 = const 0_usize;              // scope 0 at $DIR/lower_array_len_e2e.rs:+4:15: +4:16\n-        _9 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n-        _10 = Lt(const 0_usize, _9);     // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n-        assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, const 0_usize) -> bb4; // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n+        StorageLive(_7);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+4:15: +4:16\n+        _7 = const 0_usize;              // scope 0 at $DIR/lower_array_len_e2e.rs:+4:15: +4:16\n+        _8 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n+        _9 = Lt(const 0_usize, _8);      // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n+        assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, const 0_usize) -> bb4; // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n     }\n \n     bb4: {\n-        (*_2)[_8] = const 42_u8;         // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:22\n-        StorageDead(_8);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+4:22: +4:23\n+        (*_2)[_7] = const 42_u8;         // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:22\n+        StorageDead(_7);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+4:22: +4:23\n         _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len_e2e.rs:+6:9: +6:11\n         goto -> bb5;                     // scope 0 at $DIR/lower_array_len_e2e.rs:+1:5: +7:6\n     }"}, {"sha": "760f48d956d6288b3d72ea8edc06ed83e0e3ed90", "filename": "tests/mir-opt/simple_option_map_e2e.ezmap.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -37,7 +37,7 @@ fn ezmap(_1: Option<i32>) -> Option<i32> {\n     bb3: {\n         _5 = move ((_1 as Some).0: i32); // scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n         StorageLive(_4);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        _4 = Add(move _5, const 1_i32);  // scope 3 at $DIR/simple_option_map_e2e.rs:+1:16: +1:21\n+        _4 = Add(_5, const 1_i32);       // scope 3 at $DIR/simple_option_map_e2e.rs:+1:16: +1:21\n         Deinit(_0);                      // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n         ((_0 as Some).0: i32) = move _4; // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n         discriminant(_0) = 1;            // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30"}, {"sha": "35ffc4963cb63b4f8d707e2d633ceca9a720548e", "filename": "tests/mir-opt/simplify_match.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -10,13 +10,9 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/simplify_match.rs:+1:11: +1:31\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_match.rs:+1:17: +1:18\n           _2 = const false;                // scope 0 at $DIR/simplify_match.rs:+1:21: +1:26\n--         _1 = _2;                         // scope 1 at $DIR/simplify_match.rs:+1:28: +1:29\n-+         _1 = const false;                // scope 1 at $DIR/simplify_match.rs:+1:28: +1:29\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_match.rs:+1:30: +1:31\n--         switchInt(_1) -> [0: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:+1:5: +1:31\n+-         switchInt(_2) -> [0: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:+1:5: +1:31\n +         switchInt(const false) -> [0: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:+1:5: +1:31\n       }\n   \n@@ -32,7 +28,6 @@\n       }\n   \n       bb3: {\n-          StorageDead(_1);                 // scope 0 at $DIR/simplify_match.rs:+5:1: +5:2\n           return;                          // scope 0 at $DIR/simplify_match.rs:+5:2: +5:2\n       }\n   }"}, {"sha": "97c18af31de7f9631017b3ad6c57b56f4ffc4af2", "filename": "tests/mir-opt/slice_filter.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fslice_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fslice_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.rs?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,18 @@\n+fn main() {\n+    let input = vec![];\n+    let _variant_a_result = variant_a(&input);\n+    let _variant_b_result = variant_b(&input);\n+}\n+\n+pub fn variant_a(input: &[(usize, usize, usize, usize)]) -> usize {\n+    input.iter().filter(|(a, b, c, d)| a <= c && d <= b || c <= a && b <= d).count()\n+}\n+\n+pub fn variant_b(input: &[(usize, usize, usize, usize)]) -> usize {\n+    input.iter().filter(|&&(a, b, c, d)| a <= c && d <= b || c <= a && b <= d).count()\n+}\n+\n+// EMIT_MIR slice_filter.variant_a-{closure#0}.CopyProp.diff\n+// EMIT_MIR slice_filter.variant_a-{closure#0}.DestinationPropagation.diff\n+// EMIT_MIR slice_filter.variant_b-{closure#0}.CopyProp.diff\n+// EMIT_MIR slice_filter.variant_b-{closure#0}.DestinationPropagation.diff"}, {"sha": "d1f6fd97dc7c6cf58349fe1e087562b84bb12af5", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.CopyProp.diff", "status": "added", "additions": 279, "deletions": 0, "changes": 279, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,279 @@\n+- // MIR for `variant_a::{closure#0}` before CopyProp\n++ // MIR for `variant_a::{closure#0}` after CopyProp\n+  \n+  fn variant_a::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:8:25: 8:39], _2: &&(usize, usize, usize, usize)) -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:40: +0:40\n+      let _3: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+      let _4: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+      let _5: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+      let _6: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:56\n+      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:46\n+      let mut _9: &&usize;                 // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:41\n+      let mut _10: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n+      let _11: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n+      let mut _12: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n+      let mut _13: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:51\n+      let mut _14: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n+      let _15: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n+      let mut _16: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:76\n+      let mut _17: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:66\n+      let mut _18: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:61\n+      let mut _19: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n+      let _20: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n+      let mut _21: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:76\n+      let mut _22: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:71\n+      let mut _23: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+      let _24: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+      let mut _25: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _26: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _27: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _28: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      scope 1 {\n+          debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n+          debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n+          debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n+          debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n+          scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:40: 8:46\n+              debug self => _9;            // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _10;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _29: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _30: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _31: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _32: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              scope 3 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _29;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _30;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => _31;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => _32;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _33: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _34: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              }\n+          }\n+          scope 4 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:60: 8:66\n+              debug self => _18;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _19;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _35: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _36: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _37: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _38: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              scope 5 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _35;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _36;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => _37;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => _38;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _39: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _40: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              }\n+          }\n+          scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:50: 8:56\n+              debug self => _13;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _14;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _41: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _42: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _43: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _44: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _41;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _42;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => _43;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => _44;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _45: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _46: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              }\n+          }\n+          scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:70: 8:76\n+              debug self => _22;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _23;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _47: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _48: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _49: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _50: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _47;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _48;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => _49;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => _50;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _51: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _52: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+          StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n+          StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n+          _9 = &_3;                        // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n+          StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          _10 = &_11;                      // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         StorageLive(_29);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _31 = deref_copy (*_9);          // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _29 = _31;                       // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_30);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _32 = deref_copy (*_10);         // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _30 = _32;                       // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _33 = (*_29);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _33 = (*_31);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _34 = (*_30);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _34 = (*_32);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _8 = Le(move _33, move _34);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_30);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_29);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+      }\n+  \n+      bb1: {\n+          _0 = const true;                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+      }\n+  \n+      bb2: {\n+          StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n+          StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n+          _18 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n+          StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          _19 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         StorageLive(_35);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _37 = deref_copy (*_18);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _35 = _37;                       // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_36);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _38 = deref_copy (*_19);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _36 = _38;                       // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _39 = (*_35);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _39 = (*_37);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _40 = (*_36);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _40 = (*_38);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _17 = Le(move _39, move _40);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_36);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_35);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          switchInt(move _17) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+      }\n+  \n+      bb3: {\n+          StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+          return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n+      }\n+  \n+      bb4: {\n+          _7 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+          StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+      }\n+  \n+      bb5: {\n+          StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n+          StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+          _13 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+          StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          _14 = &_15;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageLive(_41);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _43 = deref_copy (*_13);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _41 = _43;                       // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_42);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _44 = deref_copy (*_14);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _42 = _44;                       // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _45 = (*_41);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _45 = (*_43);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _46 = (*_42);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _46 = (*_44);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _12 = Le(move _45, move _46);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_42);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_41);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          _7 = move _12;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+          StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+      }\n+  \n+      bb6: {\n+          _16 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+      }\n+  \n+      bb7: {\n+          StorageLive(_21);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n+          StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n+          _22 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n+          StorageLive(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _23 = &_24;                      // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageLive(_47);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _49 = deref_copy (*_22);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _47 = _49;                       // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_48);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _50 = deref_copy (*_23);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _48 = _50;                       // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _51 = (*_47);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _51 = (*_49);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _52 = (*_48);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _52 = (*_50);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _21 = Le(move _51, move _52);    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_48);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_47);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _16 = move _21;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+      }\n+  \n+      bb8: {\n+          StorageDead(_21);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_17);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _0 = move _16;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+      }\n+  }\n+  "}, {"sha": "259cd4118960884844bdfedf7e746a4c09ee23bf", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.DestinationPropagation.diff", "status": "added", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,241 @@\n+- // MIR for `variant_a::{closure#0}` before DestinationPropagation\n++ // MIR for `variant_a::{closure#0}` after DestinationPropagation\n+  \n+  fn variant_a::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:8:25: 8:39], _2: &&(usize, usize, usize, usize)) -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:40: +0:40\n+      let _3: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+      let _4: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+      let _5: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+      let _6: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:56\n+      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:46\n+      let mut _9: &&usize;                 // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:41\n+      let mut _10: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n+      let _11: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n+      let mut _12: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n+      let mut _13: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:51\n+      let mut _14: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n+      let _15: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n+      let mut _16: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:76\n+      let mut _17: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:66\n+      let mut _18: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:61\n+      let mut _19: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n+      let _20: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n+      let mut _21: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:76\n+      let mut _22: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:71\n+      let mut _23: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+      let _24: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+      let mut _25: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _26: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _27: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _28: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      scope 1 {\n+          debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n+          debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n+          debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n+          debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n+          scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:40: 8:46\n+              debug self => _9;            // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _10;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _29: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _30: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              scope 3 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => _29;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => _30;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _31: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _32: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              }\n+          }\n+          scope 4 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:60: 8:66\n+              debug self => _18;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _19;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _33: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _34: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              scope 5 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => _33;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => _34;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _35: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _36: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              }\n+          }\n+          scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:50: 8:56\n+              debug self => _13;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _14;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _37: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _38: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => _37;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => _38;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _39: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _40: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              }\n+          }\n+          scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:70: 8:76\n+              debug self => _22;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _23;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _41: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _42: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => _41;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => _42;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _43: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _44: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+-         StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+          StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n+          StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n+          _9 = &_3;                        // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n+          StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          _10 = &_11;                      // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          _29 = deref_copy (*_9);          // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _30 = deref_copy (*_10);         // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_31);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _31 = (*_29);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_32);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _32 = (*_30);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _8 = Le(move _31, move _32);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_32);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_31);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+      }\n+  \n+      bb1: {\n+          _0 = const true;                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+      }\n+  \n+      bb2: {\n+-         StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n+          StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n+          _18 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n+          StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          _19 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          _33 = deref_copy (*_18);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _34 = deref_copy (*_19);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_35);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _35 = (*_33);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_36);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _36 = (*_34);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _17 = Le(move _35, move _36);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_36);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_35);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          switchInt(move _17) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+      }\n+  \n+      bb3: {\n+-         StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n+      }\n+  \n+      bb4: {\n+-         StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+      }\n+  \n+      bb5: {\n+-         StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n+          StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+          _13 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+          StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          _14 = &_15;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          _37 = deref_copy (*_13);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _38 = deref_copy (*_14);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_39);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _39 = (*_37);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_40);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _40 = (*_38);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _12 = Le(move _39, move _40);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_40);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_39);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         _7 = move _12;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+-         StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n++         switchInt(move _12) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+      }\n+  \n+      bb6: {\n+-         _16 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n++         _0 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+      }\n+  \n+      bb7: {\n+-         StorageLive(_21);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n+          StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n+          _22 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n+          StorageLive(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _23 = &_24;                      // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _41 = deref_copy (*_22);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _42 = deref_copy (*_23);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_43);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _43 = (*_41);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_44);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _44 = (*_42);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _21 = Le(move _43, move _44);    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _0 = Le(move _43, move _44);     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_44);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_43);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _16 = move _21;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+      }\n+  \n+      bb8: {\n+-         StorageDead(_21);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_17);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _0 = move _16;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+      }\n+  }\n+  "}, {"sha": "c3b8e7d2eba256530fe2bff824cb42f06fe898fd", "filename": "tests/mir-opt/slice_filter.variant_b-{closure#0}.CopyProp.diff", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.CopyProp.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,139 @@\n+- // MIR for `variant_b::{closure#0}` before CopyProp\n++ // MIR for `variant_b::{closure#0}` after CopyProp\n+  \n+  fn variant_b::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:12:25: 12:41], _2: &&(usize, usize, usize, usize)) -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:42: +0:42\n+      let _3: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+      let _4: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+      let _5: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+      let _6: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:58\n+      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:48\n+      let mut _9: usize;                   // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:43\n+      let mut _10: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:47: +0:48\n+      let mut _11: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:52: +0:58\n+      let mut _12: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:52: +0:53\n+      let mut _13: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:57: +0:58\n+      let mut _14: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:78\n+      let mut _15: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:68\n+      let mut _16: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:63\n+      let mut _17: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:67: +0:68\n+      let mut _18: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:72: +0:78\n+      let mut _19: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:72: +0:73\n+      let mut _20: usize;                  // in scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n+      let mut _21: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+      let mut _22: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+      let mut _23: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+      let mut _24: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+      scope 1 {\n+          debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:29: +0:30\n+          debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:32: +0:33\n+          debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:35: +0:36\n+          debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:38: +0:39\n+      }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+          _21 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+          _3 = ((*_21).0: usize);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+          _22 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+          _4 = ((*_22).1: usize);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+          _23 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+          _5 = ((*_23).2: usize);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+          _24 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+          _6 = ((*_24).3: usize);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+          StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+          StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n+-         StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:43\n+-         _9 = _3;                         // scope 1 at $DIR/slice_filter.rs:+0:42: +0:43\n+-         StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:47: +0:48\n+-         _10 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:47: +0:48\n+-         _8 = Le(move _9, move _10);      // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n+-         StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:47: +0:48\n+-         StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:47: +0:48\n++         _8 = Le(_3, _5);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n+          switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+      }\n+  \n+      bb1: {\n+          _0 = const true;                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+      }\n+  \n+      bb2: {\n+          StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+          StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n+-         StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:63\n+-         _16 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:62: +0:63\n+-         StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:67: +0:68\n+-         _17 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:67: +0:68\n+-         _15 = Le(move _16, move _17);    // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n+-         StorageDead(_17);                // scope 1 at $DIR/slice_filter.rs:+0:67: +0:68\n+-         StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:67: +0:68\n++         _15 = Le(_5, _3);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n+          switchInt(move _15) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+      }\n+  \n+      bb3: {\n+          StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+          StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+-         StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n+-         StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n+-         StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n+-         StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:77: +0:78\n+          return;                          // scope 0 at $DIR/slice_filter.rs:+0:78: +0:78\n+      }\n+  \n+      bb4: {\n+          _7 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+          goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+      }\n+  \n+      bb5: {\n+          StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n+-         StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:52: +0:53\n+-         _12 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:52: +0:53\n+-         StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+-         _13 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+-         _11 = Le(move _12, move _13);    // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n+-         StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+-         StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n++         _11 = Le(_6, _4);                // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n+          _7 = move _11;                   // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+          switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+      }\n+  \n+      bb6: {\n+          _14 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+      }\n+  \n+      bb7: {\n+          StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n+-         StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:73\n+-         _19 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:72: +0:73\n+-         StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+-         _20 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+-         _18 = Le(move _19, move _20);    // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n+-         StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+-         StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n++         _18 = Le(_4, _6);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n+          _14 = move _18;                  // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+      }\n+  \n+      bb8: {\n+          StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+          StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+          _0 = move _14;                   // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+      }\n+  }\n+  "}, {"sha": "a43e84d29c7add13d800b436f50349c55987a8ee", "filename": "tests/mir-opt/slice_filter.variant_b-{closure#0}.DestinationPropagation.diff", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.DestinationPropagation.diff?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -0,0 +1,113 @@\n+- // MIR for `variant_b::{closure#0}` before DestinationPropagation\n++ // MIR for `variant_b::{closure#0}` after DestinationPropagation\n+  \n+  fn variant_b::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:12:25: 12:41], _2: &&(usize, usize, usize, usize)) -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:42: +0:42\n+      let _3: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+      let _4: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+      let _5: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+      let _6: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:58\n+      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:48\n+      let mut _9: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:52: +0:58\n+      let mut _10: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:78\n+      let mut _11: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:68\n+      let mut _12: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:72: +0:78\n+      let mut _13: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+      let mut _14: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+      let mut _15: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+      let mut _16: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n+      scope 1 {\n+          debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:29: +0:30\n+          debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:32: +0:33\n+          debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:35: +0:36\n+          debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:38: +0:39\n+      }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+          _13 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+          _3 = ((*_13).0: usize);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+          _14 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+          _4 = ((*_14).1: usize);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+          _15 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+          _5 = ((*_15).2: usize);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+          _16 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+          _6 = ((*_16).3: usize);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+-         StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+          StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n+          _8 = Le(_3, _5);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n+          switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+      }\n+  \n+      bb1: {\n+          _0 = const true;                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+      }\n+  \n+      bb2: {\n+-         StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+          StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n+          _11 = Le(_5, _3);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n+          switchInt(move _11) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+      }\n+  \n+      bb3: {\n+-         StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+-         StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+          return;                          // scope 0 at $DIR/slice_filter.rs:+0:78: +0:78\n+      }\n+  \n+      bb4: {\n+-         StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+          goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+      }\n+  \n+      bb5: {\n+-         StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n+          _9 = Le(_6, _4);                 // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n+-         _7 = move _9;                    // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+-         StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+-         switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n++         switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+      }\n+  \n+      bb6: {\n+-         _10 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n++         _0 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+      }\n+  \n+      bb7: {\n+-         StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n+-         _12 = Le(_4, _6);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n+-         _10 = move _12;                  // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n++         _0 = Le(_4, _6);                 // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+          goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+      }\n+  \n+      bb8: {\n+-         StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+-         _0 = move _10;                   // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n++         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+          goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+      }\n+  }\n+  "}, {"sha": "7c67d2abcf7c37ccf1e0997d8550779a58c4d52f", "filename": "tests/mir-opt/try_identity_e2e.new.PreCodegen.after.mir", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -5,11 +5,11 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n     let mut _0: std::result::Result<T, E>; // return place in scope 0 at $DIR/try_identity_e2e.rs:+0:34: +0:46\n     let mut _2: std::ops::ControlFlow<E, T>; // in scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n     let mut _3: isize;                   // in scope 0 at $DIR/try_identity_e2e.rs:+4:17: +4:22\n-    let mut _4: T;                       // in scope 0 at $DIR/try_identity_e2e.rs:+4:48: +4:49\n-    let mut _5: E;                       // in scope 0 at $DIR/try_identity_e2e.rs:+5:46: +5:47\n+    let _4: T;                           // in scope 0 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n+    let _5: E;                           // in scope 0 at $DIR/try_identity_e2e.rs:+5:21: +5:22\n     let mut _6: isize;                   // in scope 0 at $DIR/try_identity_e2e.rs:+8:13: +8:37\n     let _7: T;                           // in scope 0 at $DIR/try_identity_e2e.rs:+8:35: +8:36\n-    let mut _8: E;                       // in scope 0 at $DIR/try_identity_e2e.rs:+9:49: +9:50\n+    let _8: E;                           // in scope 0 at $DIR/try_identity_e2e.rs:+9:32: +9:33\n     scope 1 {\n         debug v => _4;                   // in scope 1 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n     }\n@@ -30,6 +30,7 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n     }\n \n     bb1: {\n+        StorageLive(_5);                 // scope 0 at $DIR/try_identity_e2e.rs:+5:21: +5:22\n         _5 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity_e2e.rs:+5:21: +5:22\n         Deinit(_2);                      // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n         ((_2 as Break).0: E) = move _5;  // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n@@ -39,6 +40,7 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n     }\n \n     bb2: {\n+        StorageLive(_4);                 // scope 0 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n         _4 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n         Deinit(_2);                      // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n         ((_2 as Continue).0: T) = move _4; // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n@@ -48,6 +50,7 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n     }\n \n     bb3: {\n+        StorageLive(_8);                 // scope 0 at $DIR/try_identity_e2e.rs:+9:32: +9:33\n         _8 = move ((_2 as Break).0: E);  // scope 0 at $DIR/try_identity_e2e.rs:+9:32: +9:33\n         Deinit(_0);                      // scope 4 at $DIR/try_identity_e2e.rs:+9:45: +9:51\n         ((_0 as Err).0: E) = move _8;    // scope 4 at $DIR/try_identity_e2e.rs:+9:45: +9:51\n@@ -61,6 +64,7 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n     }\n \n     bb5: {\n+        StorageLive(_7);                 // scope 0 at $DIR/try_identity_e2e.rs:+8:35: +8:36\n         _7 = move ((_2 as Continue).0: T); // scope 0 at $DIR/try_identity_e2e.rs:+8:35: +8:36\n         Deinit(_0);                      // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +11:6\n         ((_0 as Ok).0: T) = move _7;     // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +11:6"}, {"sha": "4a838e140262e76e51434fcb2f51f5bf4a743ea1", "filename": "tests/mir-opt/try_identity_e2e.old.PreCodegen.after.mir", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -5,7 +5,7 @@ fn old(_1: Result<T, E>) -> Result<T, E> {\n     let mut _0: std::result::Result<T, E>; // return place in scope 0 at $DIR/try_identity_e2e.rs:+0:34: +0:46\n     let mut _2: isize;                   // in scope 0 at $DIR/try_identity_e2e.rs:+3:13: +3:18\n     let _3: T;                           // in scope 0 at $DIR/try_identity_e2e.rs:+3:16: +3:17\n-    let mut _4: E;                       // in scope 0 at $DIR/try_identity_e2e.rs:+4:34: +4:35\n+    let _4: E;                           // in scope 0 at $DIR/try_identity_e2e.rs:+4:17: +4:18\n     scope 1 {\n         debug v => _3;                   // in scope 1 at $DIR/try_identity_e2e.rs:+3:16: +3:17\n     }\n@@ -19,6 +19,7 @@ fn old(_1: Result<T, E>) -> Result<T, E> {\n     }\n \n     bb1: {\n+        StorageLive(_4);                 // scope 0 at $DIR/try_identity_e2e.rs:+4:17: +4:18\n         _4 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity_e2e.rs:+4:17: +4:18\n         Deinit(_0);                      // scope 2 at $DIR/try_identity_e2e.rs:+4:30: +4:36\n         ((_0 as Err).0: E) = move _4;    // scope 2 at $DIR/try_identity_e2e.rs:+4:30: +4:36\n@@ -31,6 +32,7 @@ fn old(_1: Result<T, E>) -> Result<T, E> {\n     }\n \n     bb3: {\n+        StorageLive(_3);                 // scope 0 at $DIR/try_identity_e2e.rs:+3:16: +3:17\n         _3 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity_e2e.rs:+3:16: +3:17\n         Deinit(_0);                      // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +6:6\n         ((_0 as Ok).0: T) = move _3;     // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +6:6"}, {"sha": "318119bd477c1572cb3e155597251d5723ffa9b8", "filename": "tests/mir-opt/while_storage.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b00beaa208388c2f140866674605aceab0fe9/tests%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir?ref=2a4b00beaa208388c2f140866674605aceab0fe9", "patch": "@@ -4,51 +4,43 @@ fn while_loop(_1: bool) -> () {\n     debug c => _1;                       // in scope 0 at $DIR/while_storage.rs:+0:15: +0:16\n     let mut _0: ();                      // return place in scope 0 at $DIR/while_storage.rs:+0:24: +0:24\n     let mut _2: bool;                    // in scope 0 at $DIR/while_storage.rs:+1:11: +1:22\n-    let mut _3: bool;                    // in scope 0 at $DIR/while_storage.rs:+1:20: +1:21\n-    let mut _4: bool;                    // in scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n-    let mut _5: bool;                    // in scope 0 at $DIR/while_storage.rs:+2:21: +2:22\n+    let mut _3: bool;                    // in scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n \n     bb0: {\n         goto -> bb1;                     // scope 0 at $DIR/while_storage.rs:+1:5: +5:6\n     }\n \n     bb1: {\n         StorageLive(_2);                 // scope 0 at $DIR/while_storage.rs:+1:11: +1:22\n-        StorageLive(_3);                 // scope 0 at $DIR/while_storage.rs:+1:20: +1:21\n-        _3 = _1;                         // scope 0 at $DIR/while_storage.rs:+1:20: +1:21\n-        _2 = get_bool(move _3) -> bb2;   // scope 0 at $DIR/while_storage.rs:+1:11: +1:22\n+        _2 = get_bool(_1) -> bb2;        // scope 0 at $DIR/while_storage.rs:+1:11: +1:22\n                                          // mir::Constant\n                                          // + span: $DIR/while_storage.rs:10:11: 10:19\n                                          // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        StorageDead(_3);                 // scope 0 at $DIR/while_storage.rs:+1:21: +1:22\n         switchInt(move _2) -> [0: bb7, otherwise: bb3]; // scope 0 at $DIR/while_storage.rs:+1:11: +1:22\n     }\n \n     bb3: {\n-        StorageLive(_4);                 // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n-        StorageLive(_5);                 // scope 0 at $DIR/while_storage.rs:+2:21: +2:22\n-        _5 = _1;                         // scope 0 at $DIR/while_storage.rs:+2:21: +2:22\n-        _4 = get_bool(move _5) -> bb4;   // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n+        StorageLive(_3);                 // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n+        _3 = get_bool(_1) -> bb4;        // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n                                          // mir::Constant\n                                          // + span: $DIR/while_storage.rs:11:12: 11:20\n                                          // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(<ZST>) }\n     }\n \n     bb4: {\n-        StorageDead(_5);                 // scope 0 at $DIR/while_storage.rs:+2:22: +2:23\n-        switchInt(move _4) -> [0: bb6, otherwise: bb5]; // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n+        switchInt(move _3) -> [0: bb6, otherwise: bb5]; // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n     }\n \n     bb5: {\n-        StorageDead(_4);                 // scope 0 at $DIR/while_storage.rs:+4:9: +4:10\n+        StorageDead(_3);                 // scope 0 at $DIR/while_storage.rs:+4:9: +4:10\n         goto -> bb7;                     // scope 0 at no-location\n     }\n \n     bb6: {\n-        StorageDead(_4);                 // scope 0 at $DIR/while_storage.rs:+4:9: +4:10\n+        StorageDead(_3);                 // scope 0 at $DIR/while_storage.rs:+4:9: +4:10\n         StorageDead(_2);                 // scope 0 at $DIR/while_storage.rs:+5:5: +5:6\n         goto -> bb1;                     // scope 0 at $DIR/while_storage.rs:+1:5: +5:6\n     }"}]}