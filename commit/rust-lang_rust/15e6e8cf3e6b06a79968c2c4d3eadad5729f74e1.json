{"sha": "15e6e8cf3e6b06a79968c2c4d3eadad5729f74e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZTZlOGNmM2U2YjA2YTc5OTY4YzJjNGQzZWFkYWQ1NzI5Zjc0ZTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-03T17:45:36Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-03T17:49:35Z"}, "message": "rustc: Stop using LLVMGetSectionName\n\nThe recent pull request to remove libc from libstd has hit a wall in compiling\non windows, and I've been trying to investigate on the try bots as to why (it\ncompiles locally just fine). To the best of my knowledge, the LLVM section\niterator is behaving badly when iterating over the sections of the libc DLL.\n\nUpon investigating the LLVMGetSectionName function in LLVM, I discovered that\nthis function doesn't always return a null-terminated string. It returns the\ndata pointer of a StringRef instance (LLVM's equivalent of &str essentially),\nbut it has no method of returning the length of the name of the section.\n\nThis commit modifies the section iteration when loading libraries to invoke a\ncustom LLVMRustGetSectionName which will correctly return both the length and\nthe data pointer.\n\nI have not yet verified that this will fix landing liblibc, as it will require a\nsnapshot before doing a full test. Regardless, this is a worrisome situation\nregarding the LLVM API, and should likely be fixed anyway.", "tree": {"sha": "c8d1317a88ebdcac6ce0e5f2c86456ae839ef7a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8d1317a88ebdcac6ce0e5f2c86456ae839ef7a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15e6e8cf3e6b06a79968c2c4d3eadad5729f74e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15e6e8cf3e6b06a79968c2c4d3eadad5729f74e1", "html_url": "https://github.com/rust-lang/rust/commit/15e6e8cf3e6b06a79968c2c4d3eadad5729f74e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15e6e8cf3e6b06a79968c2c4d3eadad5729f74e1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f1c06d6a1b97fcd80d85c38bb33f8350c750401", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f1c06d6a1b97fcd80d85c38bb33f8350c750401", "html_url": "https://github.com/rust-lang/rust/commit/6f1c06d6a1b97fcd80d85c38bb33f8350c750401"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "9cfe064ad986f9ee63225cf1fd7e73e2f6f0b1bc", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15e6e8cf3e6b06a79968c2c4d3eadad5729f74e1/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e6e8cf3e6b06a79968c2c4d3eadad5729f74e1/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=15e6e8cf3e6b06a79968c2c4d3eadad5729f74e1", "patch": "@@ -1438,8 +1438,6 @@ pub mod llvm {\n                                           -> Bool;\n         /** Moves the section iterator to point to the next section. */\n         pub fn LLVMMoveToNextSection(SI: SectionIteratorRef);\n-        /** Returns the current section name. */\n-        pub fn LLVMGetSectionName(SI: SectionIteratorRef) -> *c_char;\n         /** Returns the current section size. */\n         pub fn LLVMGetSectionSize(SI: SectionIteratorRef) -> c_ulonglong;\n         /** Returns the current section contents as a string buffer. */\n@@ -1784,6 +1782,9 @@ pub mod llvm {\n \n         pub fn LLVMRustSetDLLExportStorageClass(V: ValueRef);\n         pub fn LLVMVersionMinor() -> c_int;\n+\n+        pub fn LLVMRustGetSectionName(SI: SectionIteratorRef,\n+                                      data: *mut *c_char) -> c_int;\n     }\n }\n "}, {"sha": "4dd892fd703452dc87786feaf3177b00fddc87e4", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15e6e8cf3e6b06a79968c2c4d3eadad5729f74e1/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e6e8cf3e6b06a79968c2c4d3eadad5729f74e1/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=15e6e8cf3e6b06a79968c2c4d3eadad5729f74e1", "patch": "@@ -29,9 +29,10 @@ use std::cast;\n use std::cmp;\n use std::io;\n use std::os::consts::{macos, freebsd, linux, android, win32};\n+use std::ptr;\n use std::rc::Rc;\n-use std::str;\n use std::slice;\n+use std::str;\n \n use collections::{HashMap, HashSet};\n use flate;\n@@ -439,8 +440,9 @@ fn get_metadata_section_imp(os: Os, filename: &Path) -> Result<MetadataBlob, ~st\n         };\n         let si = mk_section_iter(of.llof);\n         while llvm::LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) == False {\n-            let name_buf = llvm::LLVMGetSectionName(si.llsi);\n-            let name = str::raw::from_c_str(name_buf);\n+            let mut name_buf = ptr::null();\n+            let name_len = llvm::LLVMRustGetSectionName(si.llsi, &mut name_buf);\n+            let name = str::raw::from_buf_len(name_buf as *u8, name_len as uint);\n             debug!(\"get_metadata_section: name {}\", name);\n             if read_meta_section_name(os) == name {\n                 let cbuf = llvm::LLVMGetSectionContents(si.llsi);"}, {"sha": "5a00a8034e6bc6dda6eb4616c6a0c8082de70a96", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/15e6e8cf3e6b06a79968c2c4d3eadad5729f74e1/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/15e6e8cf3e6b06a79968c2c4d3eadad5729f74e1/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=15e6e8cf3e6b06a79968c2c4d3eadad5729f74e1", "patch": "@@ -10,6 +10,7 @@\n \n #include \"rustllvm.h\"\n #include \"llvm/Object/Archive.h\"\n+#include \"llvm/Object/ObjectFile.h\"\n \n //===----------------------------------------------------------------------===\n //\n@@ -679,3 +680,27 @@ extern \"C\" int\n LLVMVersionMinor() {\n     return LLVM_VERSION_MINOR;\n }\n+\n+// Note that the two following functions look quite similar to the\n+// LLVMGetSectionName function. Sadly, it appears that this function only\n+// returns a char* pointer, which isn't guaranteed to be null-terminated. The\n+// function provided by LLVM doesn't return the length, so we've created our own\n+// function which returns the length as well as the data pointer.\n+//\n+// For an example of this not returning a null terminated string, see\n+// lib/Object/COFFObjectFile.cpp in the getSectionName function. One of the\n+// branches explicitly creates a StringRef without a null terminator, and then\n+// that's returned.\n+\n+inline section_iterator *unwrap(LLVMSectionIteratorRef SI) {\n+    return reinterpret_cast<section_iterator*>(SI);\n+}\n+\n+extern \"C\" int\n+LLVMRustGetSectionName(LLVMSectionIteratorRef SI, const char **ptr) {\n+    StringRef ret;\n+    if (error_code ec = (*unwrap(SI))->getName(ret))\n+      report_fatal_error(ec.message());\n+    *ptr = ret.data();\n+    return ret.size();\n+}"}]}