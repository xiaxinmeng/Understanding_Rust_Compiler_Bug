{"sha": "731144b95a1040ca692296d064c5be47fa927d3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMTE0NGI5NWExMDQwY2E2OTIyOTZkMDY0YzViZTQ3ZmE5MjdkM2M=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-03-06T12:54:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-05-28T17:52:49Z"}, "message": "sanity -> validation\n\nAdd test for `::super` in import prefix", "tree": {"sha": "f1a7fd723c851e71db271c621e93c8df1daa621d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1a7fd723c851e71db271c621e93c8df1daa621d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/731144b95a1040ca692296d064c5be47fa927d3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/731144b95a1040ca692296d064c5be47fa927d3c", "html_url": "https://github.com/rust-lang/rust/commit/731144b95a1040ca692296d064c5be47fa927d3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/731144b95a1040ca692296d064c5be47fa927d3c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c02c6e88e67e7c23a037f90569cc0072c37d12df", "url": "https://api.github.com/repos/rust-lang/rust/commits/c02c6e88e67e7c23a037f90569cc0072c37d12df", "html_url": "https://github.com/rust-lang/rust/commit/c02c6e88e67e7c23a037f90569cc0072c37d12df"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "95be6d5b62301445712b68be04b05636d7f6bca7", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/731144b95a1040ca692296d064c5be47fa927d3c/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/731144b95a1040ca692296d064c5be47fa927d3c/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=731144b95a1040ca692296d064c5be47fa927d3c", "patch": "@@ -38,7 +38,7 @@ use rustc_privacy;\n use rustc_plugin::registry::Registry;\n use rustc_plugin as plugin;\n use rustc::hir::lowering::lower_crate;\n-use rustc_passes::{ast_sanity, no_asm, loops, consts, rvalues, static_recursion};\n+use rustc_passes::{ast_validation, no_asm, loops, consts, rvalues, static_recursion};\n use rustc_const_eval::check_match;\n use super::Compilation;\n \n@@ -167,8 +167,8 @@ pub fn compile_input(sess: &Session,\n              || lint::check_ast_crate(sess, &expanded_crate));\n \n         time(sess.time_passes(),\n-             \"AST sanity checking\",\n-             || ast_sanity::check_crate(sess, &expanded_crate));\n+             \"AST validation\",\n+             || ast_validation::check_crate(sess, &expanded_crate));\n \n         let (analysis, resolutions, mut hir_forest) = {\n             lower_and_resolve(sess, &id, &mut defs, &expanded_crate,"}, {"sha": "919c717f888ffc77e34a3d181f33cb9b694dd915", "filename": "src/librustc_passes/ast_validation.rs", "status": "renamed", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/731144b95a1040ca692296d064c5be47fa927d3c/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/731144b95a1040ca692296d064c5be47fa927d3c/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=731144b95a1040ca692296d064c5be47fa927d3c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Sanity check AST before lowering it to HIR\n+// Validate AST before lowering it to HIR\n //\n // This pass is supposed to catch things that fit into AST data structures,\n // but not permitted by the language. It runs after expansion when AST is frozen,\n@@ -24,11 +24,11 @@ use syntax::errors;\n use syntax::parse::token::{self, keywords};\n use syntax::visit::{self, Visitor};\n \n-struct SanityChecker<'a> {\n+struct AstValidator<'a> {\n     session: &'a Session,\n }\n \n-impl<'a> SanityChecker<'a> {\n+impl<'a> AstValidator<'a> {\n     fn err_handler(&self) -> &errors::Handler {\n         &self.session.parse_sess.span_diagnostic\n     }\n@@ -57,7 +57,7 @@ impl<'a> SanityChecker<'a> {\n     }\n }\n \n-impl<'a, 'v> Visitor<'v> for SanityChecker<'a> {\n+impl<'a, 'v> Visitor<'v> for AstValidator<'a> {\n     fn visit_lifetime(&mut self, lt: &Lifetime) {\n         if lt.name.as_str() == \"'_\" {\n             self.session.add_lint(\n@@ -72,9 +72,7 @@ impl<'a, 'v> Visitor<'v> for SanityChecker<'a> {\n     fn visit_expr(&mut self, expr: &Expr) {\n         match expr.node {\n             ExprKind::While(_, _, Some(ident)) | ExprKind::Loop(_, Some(ident)) |\n-            ExprKind::WhileLet(_, _, _, Some(ident)) | ExprKind::ForLoop(_, _, _, Some(ident)) => {\n-                self.check_label(ident, expr.span, expr.id);\n-            }\n+            ExprKind::WhileLet(_, _, _, Some(ident)) | ExprKind::ForLoop(_, _, _, Some(ident)) |\n             ExprKind::Break(Some(ident)) | ExprKind::Again(Some(ident)) => {\n                 self.check_label(ident.node, ident.span, expr.id);\n             }\n@@ -169,5 +167,5 @@ impl<'a, 'v> Visitor<'v> for SanityChecker<'a> {\n }\n \n pub fn check_crate(session: &Session, krate: &Crate) {\n-    visit::walk_crate(&mut SanityChecker { session: session }, krate)\n+    visit::walk_crate(&mut AstValidator { session: session }, krate)\n }", "previous_filename": "src/librustc_passes/ast_sanity.rs"}, {"sha": "1576ca6bdeaa4459359ef459dcf68f78e9248020", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/731144b95a1040ca692296d064c5be47fa927d3c/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/731144b95a1040ca692296d064c5be47fa927d3c/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=731144b95a1040ca692296d064c5be47fa927d3c", "patch": "@@ -37,7 +37,7 @@ extern crate rustc_const_math;\n \n pub mod diagnostics;\n \n-pub mod ast_sanity;\n+pub mod ast_validation;\n pub mod consts;\n pub mod loops;\n pub mod no_asm;"}, {"sha": "931f90a239421b02d841db0ca3c7f1e34f764b32", "filename": "src/rustc/Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/731144b95a1040ca692296d064c5be47fa927d3c/src%2Frustc%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/731144b95a1040ca692296d064c5be47fa927d3c/src%2Frustc%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2FCargo.lock?ref=731144b95a1040ca692296d064c5be47fa927d3c", "patch": "@@ -246,7 +246,6 @@ dependencies = [\n name = \"rustc_privacy\"\n version = \"0.0.0\"\n dependencies = [\n- \"log 0.0.0\",\n  \"rustc 0.0.0\",\n  \"syntax 0.0.0\",\n ]"}, {"sha": "1d0d60a775fda7d02699ee2bcf682ea72a1fa92b", "filename": "src/test/compile-fail/use-super-global-path.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/731144b95a1040ca692296d064c5be47fa927d3c/src%2Ftest%2Fcompile-fail%2Fuse-super-global-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/731144b95a1040ca692296d064c5be47fa927d3c/src%2Ftest%2Fcompile-fail%2Fuse-super-global-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-super-global-path.rs?ref=731144b95a1040ca692296d064c5be47fa927d3c", "patch": "@@ -9,8 +9,15 @@\n // except according to those terms.\n \n #![feature(rustc_attrs)]\n+#![allow(unused_imports, dead_code)]\n+\n+struct S;\n+struct Z;\n \n mod foo {\n+    use ::super::{S, Z}; //~ WARN global paths cannot start with `super`\n+    //~^ WARN this was previously accepted by the compiler but is being phased out\n+\n     pub fn g() {\n         use ::super::main; //~ WARN global paths cannot start with `super`\n         //~^ WARN this was previously accepted by the compiler but is being phased out"}]}