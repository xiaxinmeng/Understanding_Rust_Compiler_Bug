{"sha": "c724131a8671786e72eef4aea3a369d0541ad482", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MjQxMzFhODY3MTc4NmU3MmVlZjRhZWEzYTM2OWQwNTQxYWQ0ODI=", "commit": {"author": {"name": "Ruud van Asseldonk", "email": "dev@veniogames.com", "date": "2014-11-11T09:15:42Z"}, "committer": {"name": "Ruud van Asseldonk", "email": "dev@veniogames.com", "date": "2014-11-21T16:49:11Z"}, "message": "rustc: Change all ABI constants to all caps.\n\nThis also removes `box_field_refcnt`. It was not used anywhere.", "tree": {"sha": "776b4d1adb687b3dd5676f60c625b1d698fde2da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/776b4d1adb687b3dd5676f60c625b1d698fde2da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c724131a8671786e72eef4aea3a369d0541ad482", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c724131a8671786e72eef4aea3a369d0541ad482", "html_url": "https://github.com/rust-lang/rust/commit/c724131a8671786e72eef4aea3a369d0541ad482", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c724131a8671786e72eef4aea3a369d0541ad482/comments", "author": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b781c8b08e5b6b207c0422454ab8f319c90fe64d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b781c8b08e5b6b207c0422454ab8f319c90fe64d", "html_url": "https://github.com/rust-lang/rust/commit/b781c8b08e5b6b207c0422454ab8f319c90fe64d"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "2f6efbc85a2647f1e6f588d4171a564f394a1696", "filename": "src/librustc_back/abi.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c724131a8671786e72eef4aea3a369d0541ad482/src%2Flibrustc_back%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c724131a8671786e72eef4aea3a369d0541ad482/src%2Flibrustc_back%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fabi.rs?ref=c724131a8671786e72eef4aea3a369d0541ad482", "patch": "@@ -8,11 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(non_upper_case_globals)]\n-\n-pub const box_field_refcnt: uint = 0u;\n-pub const box_field_drop_glue: uint = 1u;\n-pub const box_field_body: uint = 4u;\n+pub const BOX_FIELD_DROP_GLUE: uint = 1u;\n+pub const BOX_FIELD_BODY: uint = 4u;\n \n /// The first half of a fat pointer.\n /// - For a closure, this is the code address."}, {"sha": "85085f46731e4069677e6b25ea131a3916881a42", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c724131a8671786e72eef4aea3a369d0541ad482/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c724131a8671786e72eef4aea3a369d0541ad482/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=c724131a8671786e72eef4aea3a369d0541ad482", "patch": "@@ -344,7 +344,7 @@ pub fn at_box_body<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let ccx = bcx.ccx();\n     let ty = Type::at_box(ccx, type_of(ccx, body_t));\n     let boxptr = PointerCast(bcx, boxptr, ty.ptr_to());\n-    GEPi(bcx, boxptr, &[0u, abi::box_field_body])\n+    GEPi(bcx, boxptr, &[0u, abi::BOX_FIELD_BODY])\n }\n \n fn require_alloc_fn<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n@@ -394,7 +394,7 @@ pub fn malloc_raw_dyn_proc<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, t: Ty<'tcx>)\n \n     // Allocate space and store the destructor pointer:\n     let Result {bcx, val: llbox} = malloc_raw_dyn(bcx, ptr_llty, t, size, llalign);\n-    let dtor_ptr = GEPi(bcx, llbox, &[0u, abi::box_field_drop_glue]);\n+    let dtor_ptr = GEPi(bcx, llbox, &[0u, abi::BOX_FIELD_DROP_GLUE]);\n     let drop_glue_field_ty = type_of(ccx, ty::mk_nil_ptr(bcx.tcx()));\n     let drop_glue = PointerCast(bcx, glue::get_drop_glue(ccx, ty::mk_uniq(bcx.tcx(), t)),\n                                 drop_glue_field_ty);"}, {"sha": "ca955975dfb3051899138d5245a9d8524445b8d8", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c724131a8671786e72eef4aea3a369d0541ad482/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c724131a8671786e72eef4aea3a369d0541ad482/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=c724131a8671786e72eef4aea3a369d0541ad482", "patch": "@@ -208,7 +208,7 @@ pub fn store_environment<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                      bv.to_string(ccx)).as_slice());\n         }\n \n-        let bound_data = GEPi(bcx, llbox, &[0u, abi::box_field_body, i]);\n+        let bound_data = GEPi(bcx, llbox, &[0u, abi::BOX_FIELD_BODY, i]);\n \n         match bv.action {\n             ast::CaptureByValue => {"}, {"sha": "4ed7983789696d5e494a5de6aa94e4b9da9c68cb", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c724131a8671786e72eef4aea3a369d0541ad482/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c724131a8671786e72eef4aea3a369d0541ad482/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=c724131a8671786e72eef4aea3a369d0541ad482", "patch": "@@ -445,7 +445,7 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, t: Ty<'tcx>)\n             let env_ptr_ty = Type::at_box(bcx.ccx(), Type::i8(bcx.ccx())).ptr_to();\n             let env = PointerCast(bcx, env, env_ptr_ty);\n             with_cond(bcx, IsNotNull(bcx, env), |bcx| {\n-                let dtor_ptr = GEPi(bcx, env, &[0u, abi::box_field_drop_glue]);\n+                let dtor_ptr = GEPi(bcx, env, &[0u, abi::BOX_FIELD_DROP_GLUE]);\n                 let dtor = Load(bcx, dtor_ptr);\n                 Call(bcx, dtor, &[PointerCast(bcx, box_cell_v, Type::i8p(bcx.ccx()))], None);\n                 bcx"}]}