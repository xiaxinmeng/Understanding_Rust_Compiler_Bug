{"sha": "abc59bb9144a97ec23d187dcb2cb28dd88271297", "node_id": "C_kwDOAAsO6NoAKGFiYzU5YmI5MTQ0YTk3ZWMyM2QxODdkY2IyY2IyOGRkODgyNzEyOTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-07T15:30:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-07T15:30:27Z"}, "message": "Auto merge of #8656 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "95d5458e777ed82fc9e0224952c467bd95cae9ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95d5458e777ed82fc9e0224952c467bd95cae9ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abc59bb9144a97ec23d187dcb2cb28dd88271297", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abc59bb9144a97ec23d187dcb2cb28dd88271297", "html_url": "https://github.com/rust-lang/rust/commit/abc59bb9144a97ec23d187dcb2cb28dd88271297", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abc59bb9144a97ec23d187dcb2cb28dd88271297/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "574bf88e3e85399241683805c43d1524ff704c8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/574bf88e3e85399241683805c43d1524ff704c8e", "html_url": "https://github.com/rust-lang/rust/commit/574bf88e3e85399241683805c43d1524ff704c8e"}, {"sha": "a2fdbb5f53bd0999db59fc53e9f411170b6556f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2fdbb5f53bd0999db59fc53e9f411170b6556f9", "html_url": "https://github.com/rust-lang/rust/commit/a2fdbb5f53bd0999db59fc53e9f411170b6556f9"}], "stats": {"total": 353, "additions": 196, "deletions": 157}, "files": [{"sha": "918f0b48e50791e1e14f6d3f5aa9386d56ddd3f6", "filename": "CHANGELOG.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -8,9 +8,9 @@ document.\n \n [57b3c4b...master](https://github.com/rust-lang/rust-clippy/compare/57b3c4b...master)\n \n-## Rust 1.60 (beta)\n+## Rust 1.60\n \n-Current beta, release 2022-04-07\n+Current stable, released 2022-04-07\n \n [0eff589...57b3c4b](https://github.com/rust-lang/rust-clippy/compare/0eff589...57b3c4b)\n \n@@ -142,7 +142,7 @@ Current beta, release 2022-04-07\n \n ## Rust 1.59\n \n-Current stable, release 2022-02-24\n+Released 2022-02-24\n \n [e181011...0eff589](https://github.com/rust-lang/rust-clippy/compare/e181011...0eff589)\n "}, {"sha": "dd6518d5241b5fad11f356ae2fa089f3218a109e", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.61\"\n+version = \"0.1.62\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "aebf9a87cabd2c7369816bbfcb7386eea0cba6fb", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_lints\"\n-version = \"0.1.61\"\n+version = \"0.1.62\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "c5948707c812448d88a8ec9c45eb7c97c31f4bb3", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -139,11 +139,11 @@ impl<'tcx> LateLintPass<'tcx> for Arithmetic {\n     }\n \n     fn check_body(&mut self, cx: &LateContext<'_>, body: &hir::Body<'_>) {\n-        let body_owner = cx.tcx.hir().body_owner(body.id());\n+        let body_owner = cx.tcx.hir().body_owner_def_id(body.id());\n \n         match cx.tcx.hir().body_owner_kind(body_owner) {\n             hir::BodyOwnerKind::Static(_) | hir::BodyOwnerKind::Const => {\n-                let body_span = cx.tcx.hir().span(body_owner);\n+                let body_span = cx.tcx.def_span(body_owner);\n \n                 if let Some(span) = self.const_span {\n                     if span.contains(body_span) {"}, {"sha": "cc354b50afa39faa68159d1d16ae8027ff8f5658", "filename": "clippy_lints/src/collapsible_match.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_match.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -3,11 +3,12 @@ use clippy_utils::higher::IfLetOrMatch;\n use clippy_utils::visitors::is_local_used;\n use clippy_utils::{is_lang_ctor, is_unit_expr, path_to_local, peel_blocks_with_stmt, peel_ref_operators, SpanlessEq};\n use if_chain::if_chain;\n+use rustc_errors::MultiSpan;\n use rustc_hir::LangItem::OptionNone;\n use rustc_hir::{Arm, Expr, Guard, HirId, Pat, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{MultiSpan, Span};\n+use rustc_span::Span;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -129,8 +130,8 @@ fn check_arm<'tcx>(\n                 &msg,\n                 |diag| {\n                     let mut help_span = MultiSpan::from_spans(vec![binding_span, inner_then_pat.span]);\n-                    help_span.push_span_label(binding_span, \"replace this binding\".into());\n-                    help_span.push_span_label(inner_then_pat.span, \"with this pattern\".into());\n+                    help_span.push_span_label(binding_span, \"replace this binding\");\n+                    help_span.push_span_label(inner_then_pat.span, \"with this pattern\");\n                     diag.span_help(help_span, \"the outer pattern can be modified to include the inner pattern\");\n                 },\n             );"}, {"sha": "28d0c75fde6baf95b8d89bc22f973ae928509072", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -11,7 +11,7 @@ use rustc_ast::token::CommentKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::EmitterWriter;\n-use rustc_errors::{Applicability, Handler, SuggestionStyle};\n+use rustc_errors::{Applicability, Handler, MultiSpan, SuggestionStyle};\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{AnonConst, Expr};\n@@ -25,7 +25,7 @@ use rustc_session::parse::ParseSess;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::edition::Edition;\n-use rustc_span::source_map::{BytePos, FilePathMapping, MultiSpan, SourceMap, Span};\n+use rustc_span::source_map::{BytePos, FilePathMapping, SourceMap, Span};\n use rustc_span::{sym, FileName, Pos};\n use std::io;\n use std::ops::Range;\n@@ -621,7 +621,19 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                 let filename = FileName::anon_source_code(&code);\n \n                 let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-                let emitter = EmitterWriter::new(Box::new(io::sink()), None, false, false, false, None, false);\n+                let fallback_bundle =\n+                    rustc_errors::fallback_fluent_bundle(false).expect(\"failed to load fallback fluent bundle\");\n+                let emitter = EmitterWriter::new(\n+                    Box::new(io::sink()),\n+                    None,\n+                    None,\n+                    fallback_bundle,\n+                    false,\n+                    false,\n+                    false,\n+                    None,\n+                    false,\n+                );\n                 let handler = Handler::with_emitter(false, None, Box::new(emitter));\n                 let sess = ParseSess::with_span_handler(handler, sm);\n "}, {"sha": "ae4158662d46459c26419250fe5a2cd62cece2cb", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::{higher, peel_blocks_with_stmt, SpanlessEq};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::{lang_items::LangItem, BinOpKind, Expr, ExprKind, QPath};\n+use rustc_hir::{BinOpKind, Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -82,14 +82,6 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n \n                 // Get the variable name\n                 let var_name = ares_path.segments[0].ident.name.as_str();\n-                const INT_TYPES: [LangItem; 5] = [\n-                    LangItem::I8,\n-                    LangItem::I16,\n-                    LangItem::I32,\n-                    LangItem::I64,\n-                    LangItem::Isize\n-                ];\n-\n                 match cond_num_val.kind {\n                     ExprKind::Lit(ref cond_lit) => {\n                         // Check if the constant is zero\n@@ -105,8 +97,8 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n                             if name.ident.as_str() == \"MIN\";\n                             if let Some(const_id) = cx.typeck_results().type_dependent_def_id(cond_num_val.hir_id);\n                             if let Some(impl_id) = cx.tcx.impl_of_method(const_id);\n-                            let mut int_ids = INT_TYPES.iter().filter_map(|&ty| cx.tcx.lang_items().require(ty).ok());\n-                            if int_ids.any(|int_id| int_id == impl_id);\n+                            if let None = cx.tcx.impl_trait_ref(impl_id); // An inherent impl\n+                            if cx.tcx.type_of(impl_id).is_integral();\n                             then {\n                                 print_lint_and_sugg(cx, var_name, expr)\n                             }\n@@ -118,8 +110,8 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n                             if name.ident.as_str() == \"min_value\";\n                             if let Some(func_id) = cx.typeck_results().type_dependent_def_id(func.hir_id);\n                             if let Some(impl_id) = cx.tcx.impl_of_method(func_id);\n-                            let mut int_ids = INT_TYPES.iter().filter_map(|&ty| cx.tcx.lang_items().require(ty).ok());\n-                            if int_ids.any(|int_id| int_id == impl_id);\n+                            if let None = cx.tcx.impl_trait_ref(impl_id); // An inherent impl\n+                            if cx.tcx.type_of(impl_id).is_integral();\n                             then {\n                                 print_lint_and_sugg(cx, var_name, expr)\n                             }"}, {"sha": "ddaffc751880db30251f01d8c246af8c9d8568d6", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -6,15 +6,15 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{can_move_expr_to_closure, is_trait_method, path_to_local, path_to_local_id, CaptureKind};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::Applicability;\n+use rustc_errors::{Applicability, MultiSpan};\n use rustc_hir::intravisit::{walk_block, walk_expr, Visitor};\n use rustc_hir::{Block, Expr, ExprKind, HirId, HirIdSet, Local, Mutability, Node, PatKind, Stmt, StmtKind};\n use rustc_lint::LateContext;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::sym;\n-use rustc_span::{MultiSpan, Span};\n+use rustc_span::Span;\n \n const NEEDLESS_COLLECT_MSG: &str = \"avoid using `collect()` when not needed\";\n \n@@ -102,7 +102,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n \n                     // Suggest replacing iter_call with iter_replacement, and removing stmt\n                     let mut span = MultiSpan::from_span(method_name.ident.span);\n-                    span.push_span_label(iter_call.span, \"the iterator could be used here instead\".into());\n+                    span.push_span_label(iter_call.span, \"the iterator could be used here instead\");\n                     span_lint_hir_and_then(\n                         cx,\n                         super::NEEDLESS_COLLECT,"}, {"sha": "72e86804ed2c3b4136a534d024ae6d7d59283b8a", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -273,7 +273,7 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                         }\n                         return false;  // no need to walk further *on the variable*\n                     }\n-                    Res::Def(DefKind::Static | DefKind::Const, ..) => {\n+                    Res::Def(DefKind::Static (_)| DefKind::Const, ..) => {\n                         if index_used_directly {\n                             self.indexed_directly.insert(\n                                 seqvar.segments[0].ident.name,"}, {"sha": "a63422d2a36ac530c14b75843a7bd38905c58774", "filename": "clippy_lints/src/loops/while_immutable_condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'tcx> VarCollectorVisitor<'a, 'tcx> {\n                     Res::Local(hir_id) => {\n                         self.ids.insert(hir_id);\n                     },\n-                    Res::Def(DefKind::Static, def_id) => {\n+                    Res::Def(DefKind::Static(_), def_id) => {\n                         let mutable = self.cx.tcx.is_mutable_static(def_id);\n                         self.def_ids.insert(def_id, mutable);\n                     },"}, {"sha": "6f2307d8f18ff1505acd84603ff2003c3f0e1feb", "filename": "clippy_lints/src/methods/expect_fun_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -93,7 +93,7 @@ pub(super) fn check<'tcx>(\n             },\n             hir::ExprKind::Path(ref p) => matches!(\n                 cx.qpath_res(p, arg.hir_id),\n-                hir::def::Res::Def(hir::def::DefKind::Const | hir::def::DefKind::Static, _)\n+                hir::def::Res::Def(hir::def::DefKind::Const | hir::def::DefKind::Static(_), _)\n             ),\n             _ => false,\n         }"}, {"sha": "9651a52be4e7281a28a4891a942c5d415d3de761", "filename": "clippy_lints/src/methods/implicit_clone.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -48,12 +48,11 @@ pub fn is_clone_like(cx: &LateContext<'_>, method_name: &str, method_def_id: hir\n         \"to_os_string\" => is_diag_item_method(cx, method_def_id, sym::OsStr),\n         \"to_owned\" => is_diag_trait_item(cx, method_def_id, sym::ToOwned),\n         \"to_path_buf\" => is_diag_item_method(cx, method_def_id, sym::Path),\n-        \"to_vec\" => {\n-            cx.tcx\n-                .impl_of_method(method_def_id)\n-                .map(|impl_did| Some(impl_did) == cx.tcx.lang_items().slice_alloc_impl())\n-                == Some(true)\n-        },\n+        \"to_vec\" => cx\n+            .tcx\n+            .impl_of_method(method_def_id)\n+            .filter(|&impl_did| cx.tcx.type_of(impl_did).is_slice() && cx.tcx.impl_trait_ref(impl_did).is_none())\n+            .is_some(),\n         _ => false,\n     }\n }"}, {"sha": "70d021a1668eb7ffb68b2cce0a79cc5c50d6195d", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -2488,7 +2488,6 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                 Some((\"err\", [recv], err_span)) => err_expect::check(cx, expr, recv, msrv, span, err_span),\n                 _ => expect_used::check(cx, expr, recv),\n             },\n-\n             (\"extend\", [arg]) => {\n                 string_extend_chars::check(cx, expr, recv, arg);\n                 extend_with_drain::check(cx, expr, recv, arg);\n@@ -2630,7 +2629,6 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                     unnecessary_lazy_eval::check(cx, expr, recv, u_arg, \"unwrap_or\");\n                 },\n             },\n-\n             _ => {},\n         }\n     }"}, {"sha": "55567d8625e529dfc541d3bf937284c130a9e516", "filename": "clippy_lints/src/methods/suspicious_splitn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -12,13 +12,13 @@ pub(super) fn check(cx: &LateContext<'_>, method_name: &str, expr: &Expr<'_>, se\n         if count <= 1;\n         if let Some(call_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(call_id);\n-        let lang_items = cx.tcx.lang_items();\n-        if lang_items.slice_impl() == Some(impl_id) || lang_items.str_impl() == Some(impl_id);\n+        if cx.tcx.impl_trait_ref(impl_id).is_none();\n+        let self_ty = cx.tcx.type_of(impl_id);\n+        if self_ty.is_slice() || self_ty.is_str();\n         then {\n             // Ignore empty slice and string literals when used with a literal count.\n             if matches!(self_arg.kind, ExprKind::Array([]))\n                 || matches!(self_arg.kind, ExprKind::Lit(Spanned { node: LitKind::Str(s, _), .. }) if s.is_empty())\n-\n             {\n                 return;\n             }\n@@ -28,7 +28,7 @@ pub(super) fn check(cx: &LateContext<'_>, method_name: &str, expr: &Expr<'_>, se\n                 \"the resulting iterator will always return `None`\")\n             } else {\n                 (format!(\"`{}` called with `1` split\", method_name),\n-                if lang_items.slice_impl() == Some(impl_id) {\n+                if self_ty.is_slice() {\n                     \"the resulting iterator will always return the entire slice followed by `None`\"\n                 } else {\n                     \"the resulting iterator will always return the entire string followed by `None`\""}, {"sha": "06209bfe7b08ada6cb6dc2f349d6cbe95decab2a", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -148,7 +148,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n \n         if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, self.msrv.as_ref()) {\n             if cx.tcx.is_const_fn_raw(def_id.to_def_id()) {\n-                cx.tcx.sess.span_err(span, &err);\n+                cx.tcx.sess.span_err(span, err.as_ref());\n             }\n         } else {\n             span_lint(cx, MISSING_CONST_FOR_FN, span, \"this could be a `const fn`\");"}, {"sha": "d29d07da7b0ffdcc8aa85a28443b6d8f1623357f", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -235,11 +235,12 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                                 for (span, suggestion) in clone_spans {\n                                     diag.span_suggestion(\n                                         span,\n-                                        &snippet_opt(cx, span)\n+                                        snippet_opt(cx, span)\n                                             .map_or(\n                                                 \"change the call to\".into(),\n                                                 |x| Cow::from(format!(\"change `{}` to\", x)),\n-                                            ),\n+                                            )\n+                                            .as_ref(),\n                                         suggestion.into(),\n                                         Applicability::Unspecified,\n                                     );\n@@ -264,11 +265,12 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                                 for (span, suggestion) in clone_spans {\n                                     diag.span_suggestion(\n                                         span,\n-                                        &snippet_opt(cx, span)\n+                                        snippet_opt(cx, span)\n                                             .map_or(\n                                                 \"change the call to\".into(),\n                                                 |x| Cow::from(format!(\"change `{}` to\", x))\n-                                            ),\n+                                            )\n+                                            .as_ref(),\n                                         suggestion.into(),\n                                         Applicability::Unspecified,\n                                     );"}, {"sha": "48a2666a2e0cef399b2cfeb4a5fd3e808d9b1655", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::expr_sig;\n use clippy_utils::{get_expr_use_or_unification_node, is_lint_allowed, path_def_id, path_to_local, paths};\n use if_chain::if_chain;\n-use rustc_errors::Applicability;\n+use rustc_errors::{Applicability, MultiSpan};\n use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::HirIdMap;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n@@ -16,11 +16,11 @@ use rustc_hir::{\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::ty::{self, AssocItems, AssocKind, Ty};\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n+use rustc_span::sym;\n use rustc_span::symbol::Symbol;\n-use rustc_span::{sym, MultiSpan};\n use std::fmt;\n use std::iter;\n \n@@ -308,7 +308,6 @@ struct PtrArg<'tcx> {\n     method_renames: &'static [(&'static str, &'static str)],\n     ref_prefix: RefPrefix,\n     deref_ty: DerefTy<'tcx>,\n-    deref_assoc_items: Option<(DefId, &'tcx AssocItems<'tcx>)>,\n }\n impl PtrArg<'_> {\n     fn build_msg(&self) -> String {\n@@ -411,7 +410,7 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n                 if params.get(i).map_or(true, |p| !is_lint_allowed(cx, PTR_ARG, p.hir_id));\n \n                 then {\n-                    let (method_renames, deref_ty, deref_impl_id) = match cx.tcx.get_diagnostic_name(adt.did()) {\n+                    let (method_renames, deref_ty) = match cx.tcx.get_diagnostic_name(adt.did()) {\n                         Some(sym::Vec) => (\n                             [(\"clone\", \".to_owned()\")].as_slice(),\n                             DerefTy::Slice(\n@@ -424,17 +423,14 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n                                     }),\n                                 substs.type_at(0),\n                             ),\n-                            cx.tcx.lang_items().slice_impl()\n                         ),\n                         Some(sym::String) => (\n                             [(\"clone\", \".to_owned()\"), (\"as_str\", \"\")].as_slice(),\n                             DerefTy::Str,\n-                            cx.tcx.lang_items().str_impl()\n                         ),\n                         Some(sym::PathBuf) => (\n                             [(\"clone\", \".to_path_buf()\"), (\"as_path\", \"\")].as_slice(),\n                             DerefTy::Path,\n-                            None,\n                         ),\n                         Some(sym::Cow) if mutability == Mutability::Not => {\n                             let ty_name = name.args\n@@ -470,7 +466,6 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n                             mutability,\n                         },\n                         deref_ty,\n-                        deref_assoc_items: deref_impl_id.map(|id| (id, cx.tcx.associated_items(id))),\n                     });\n                 }\n             }\n@@ -606,16 +601,7 @@ fn check_ptr_arg_usage<'tcx>(cx: &LateContext<'tcx>, body: &'tcx Body<'_>, args:\n                             },\n                             // If the types match check for methods which exist on both types. e.g. `Vec::len` and\n                             // `slice::len`\n-                            ty::Adt(def, _)\n-                                if def.did() == args.ty_did\n-                                    && (i != 0\n-                                        || self.cx.tcx.trait_of_item(id).is_some()\n-                                        || !args.deref_assoc_items.map_or(false, |(id, items)| {\n-                                            items\n-                                                .find_by_name_and_kind(self.cx.tcx, name.ident, AssocKind::Fn, id)\n-                                                .is_some()\n-                                        })) =>\n-                            {\n+                            ty::Adt(def, _) if def.did() == args.ty_did => {\n                                 set_skip_flag();\n                             },\n                             _ => (),"}, {"sha": "a92097e1d24cac28e29bfea5b7307d8e226ae845", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -81,7 +81,7 @@ impl<'tcx> LateLintPass<'tcx> for Regex {\n \n #[allow(clippy::cast_possible_truncation)] // truncation very unlikely here\n #[must_use]\n-fn str_span(base: Span, c: regex_syntax::ast::Span, offset: u16) -> Span {\n+fn str_span(base: Span, c: regex_syntax::ast::Span, offset: u8) -> Span {\n     let offset = u32::from(offset);\n     let end = base.lo() + BytePos(u32::try_from(c.end.offset).expect(\"offset too large\") + offset);\n     let start = base.lo() + BytePos(u32::try_from(c.start.offset).expect(\"offset too large\") + offset);"}, {"sha": "1188258504461d8e15d9c43219c557946388af7d", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -139,14 +139,20 @@ impl<'tcx> LateLintPass<'tcx> for Shadow {\n \n     fn check_body(&mut self, cx: &LateContext<'_>, body: &Body<'_>) {\n         let hir = cx.tcx.hir();\n-        if !matches!(hir.body_owner_kind(hir.body_owner(body.id())), BodyOwnerKind::Closure) {\n+        if !matches!(\n+            hir.body_owner_kind(hir.body_owner_def_id(body.id())),\n+            BodyOwnerKind::Closure\n+        ) {\n             self.bindings.push(FxHashMap::default());\n         }\n     }\n \n     fn check_body_post(&mut self, cx: &LateContext<'_>, body: &Body<'_>) {\n         let hir = cx.tcx.hir();\n-        if !matches!(hir.body_owner_kind(hir.body_owner(body.id())), BodyOwnerKind::Closure) {\n+        if !matches!(\n+            hir.body_owner_kind(hir.body_owner_def_id(body.id())),\n+            BodyOwnerKind::Closure\n+        ) {\n             self.bindings.pop();\n         }\n     }"}, {"sha": "25d74b8c49939da8a643e60a2da1e4b264440d91", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -25,7 +25,7 @@ use rustc_hir::{\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::mir::interpret::ConstValue;\n-use rustc_middle::ty::{self, subst::GenericArgKind};\n+use rustc_middle::ty::{self, fast_reject::SimplifiedTypeGen, subst::GenericArgKind, FloatTy};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Spanned;\n@@ -889,7 +889,7 @@ fn path_to_matched_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Ve\n                     }\n                 }\n             },\n-            Res::Def(DefKind::Const | DefKind::Static, def_id) => {\n+            Res::Def(DefKind::Const | DefKind::Static(..), def_id) => {\n                 if let Some(Node::Item(item)) = cx.tcx.hir().get_if_local(def_id) {\n                     if let ItemKind::Const(.., body_id) | ItemKind::Static(.., body_id) = item.kind {\n                         let body = cx.tcx.hir().body(body_id);\n@@ -934,7 +934,16 @@ pub fn check_path(cx: &LateContext<'_>, path: &[&str]) -> bool {\n     // implementations of native types. Check lang items.\n     let path_syms: Vec<_> = path.iter().map(|p| Symbol::intern(p)).collect();\n     let lang_items = cx.tcx.lang_items();\n-    for item_def_id in lang_items.items().iter().flatten() {\n+    // This list isn't complete, but good enough for our current list of paths.\n+    let incoherent_impls = [\n+        SimplifiedTypeGen::FloatSimplifiedType(FloatTy::F32),\n+        SimplifiedTypeGen::FloatSimplifiedType(FloatTy::F64),\n+        SimplifiedTypeGen::SliceSimplifiedType,\n+        SimplifiedTypeGen::StrSimplifiedType,\n+    ]\n+    .iter()\n+    .flat_map(|&ty| cx.tcx.incoherent_impls(ty));\n+    for item_def_id in lang_items.items().iter().flatten().chain(incoherent_impls) {\n         let lang_item_path = cx.get_def_path(*item_def_id);\n         if path_syms.starts_with(&lang_item_path) {\n             if let [item] = &path_syms[lang_item_path.len()..] {"}, {"sha": "ca03b8010dd821c2c68da237efae631c279e1711", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -756,7 +756,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for LintResolver<'a, 'hir> {\n             let (expr_ty, _) = walk_ptrs_ty_depth(self.cx.typeck_results().expr_ty(expr));\n             if match_type(self.cx, expr_ty, &paths::LINT);\n             then {\n-                if let hir::def::Res::Def(DefKind::Static, _) = path.res {\n+                if let hir::def::Res::Def(DefKind::Static(..), _) = path.res {\n                     let lint_name = last_path_segment(qpath).ident.name;\n                     self.lints.push(sym_to_string(lint_name).to_ascii_lowercase());\n                 } else if let Some(local) = get_parent_local(self.cx, expr) {"}, {"sha": "0b1fd95c3453d1ba4f6e5e653d47488ac3f1b1ab", "filename": "clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2FCargo.toml?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.61\"\n+version = \"0.1.62\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "68b5151a6487489d1ffc1bddeb373b152873d75c", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -8,10 +8,10 @@\n //! Thank you!\n //! ~The `INTERNAL_METADATA_COLLECTOR` lint\n \n-use rustc_errors::{emitter::MAX_SUGGESTION_HIGHLIGHT_LINES, Applicability, Diagnostic};\n+use rustc_errors::{emitter::MAX_SUGGESTION_HIGHLIGHT_LINES, Applicability, Diagnostic, MultiSpan};\n use rustc_hir::HirId;\n use rustc_lint::{LateContext, Lint, LintContext};\n-use rustc_span::source_map::{MultiSpan, Span};\n+use rustc_span::source_map::Span;\n use std::env;\n \n fn docs_link(diag: &mut Diagnostic, lint: &'static Lint) {"}, {"sha": "a275bac4ce63dc5436ea18d4677f8c219c50488c", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 66, "deletions": 40, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -77,17 +77,22 @@ use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n use rustc_hir::{\n-    def, lang_items, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Constness, Destination, Expr,\n-    ExprKind, FnDecl, ForeignItem, HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local,\n-    MatchSource, Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, Target,\n-    TraitItem, TraitItemKind, TraitRef, TyKind, UnOp,\n+    def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Constness, Destination, Expr, ExprKind, FnDecl,\n+    ForeignItem, HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local, MatchSource,\n+    Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem, TraitItemKind,\n+    TraitRef, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::place::PlaceBase;\n use rustc_middle::ty as rustc_ty;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc_middle::ty::binding::BindingMode;\n+use rustc_middle::ty::fast_reject::SimplifiedTypeGen::{\n+    ArraySimplifiedType, BoolSimplifiedType, CharSimplifiedType, FloatSimplifiedType, IntSimplifiedType,\n+    PtrSimplifiedType, SliceSimplifiedType, StrSimplifiedType, UintSimplifiedType,\n+};\n use rustc_middle::ty::{layout::IntegerExt, BorrowKind, DefIdTree, Ty, TyCtxt, TypeAndMut, TypeFoldable, UpvarCapture};\n+use rustc_middle::ty::{FloatTy, IntTy, UintTy};\n use rustc_semver::RustcVersion;\n use rustc_session::Session;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n@@ -455,14 +460,6 @@ pub fn path_def_id<'tcx>(cx: &LateContext<'_>, maybe_path: &impl MaybePath<'tcx>\n /// Resolves a def path like `std::vec::Vec`.\n /// This function is expensive and should be used sparingly.\n pub fn def_path_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n-    macro_rules! try_res {\n-        ($e:expr) => {\n-            match $e {\n-                Some(e) => e,\n-                None => return Res::Err,\n-            }\n-        };\n-    }\n     fn item_child_by_name(tcx: TyCtxt<'_>, def_id: DefId, name: &str) -> Option<Res> {\n         match tcx.def_kind(def_id) {\n             DefKind::Mod | DefKind::Enum | DefKind::Trait => tcx\n@@ -479,11 +476,35 @@ pub fn def_path_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n             _ => None,\n         }\n     }\n-    fn find_primitive(tcx: TyCtxt<'_>, name: &str) -> Option<DefId> {\n-        if let Some(&(index, Target::Impl)) = lang_items::ITEM_REFS.get(&Symbol::intern(name)) {\n-            tcx.lang_items().items()[index]\n-        } else {\n-            None\n+    fn find_primitive<'tcx>(tcx: TyCtxt<'tcx>, name: &str) -> impl Iterator<Item = DefId> + 'tcx {\n+        let single = |ty| tcx.incoherent_impls(ty).iter().copied();\n+        let empty = || [].iter().copied();\n+        match name {\n+            \"bool\" => single(BoolSimplifiedType),\n+            \"char\" => single(CharSimplifiedType),\n+            \"str\" => single(StrSimplifiedType),\n+            \"array\" => single(ArraySimplifiedType),\n+            \"slice\" => single(SliceSimplifiedType),\n+            // FIXME: rustdoc documents these two using just `pointer`.\n+            //\n+            // Maybe this is something we should do here too.\n+            \"const_ptr\" => single(PtrSimplifiedType(Mutability::Not)),\n+            \"mut_ptr\" => single(PtrSimplifiedType(Mutability::Mut)),\n+            \"isize\" => single(IntSimplifiedType(IntTy::Isize)),\n+            \"i8\" => single(IntSimplifiedType(IntTy::I8)),\n+            \"i16\" => single(IntSimplifiedType(IntTy::I16)),\n+            \"i32\" => single(IntSimplifiedType(IntTy::I32)),\n+            \"i64\" => single(IntSimplifiedType(IntTy::I64)),\n+            \"i128\" => single(IntSimplifiedType(IntTy::I128)),\n+            \"usize\" => single(UintSimplifiedType(UintTy::Usize)),\n+            \"u8\" => single(UintSimplifiedType(UintTy::U8)),\n+            \"u16\" => single(UintSimplifiedType(UintTy::U16)),\n+            \"u32\" => single(UintSimplifiedType(UintTy::U32)),\n+            \"u64\" => single(UintSimplifiedType(UintTy::U64)),\n+            \"u128\" => single(UintSimplifiedType(UintTy::U128)),\n+            \"f32\" => single(FloatSimplifiedType(FloatTy::F32)),\n+            \"f64\" => single(FloatSimplifiedType(FloatTy::F64)),\n+            _ => empty(),\n         }\n     }\n     fn find_crate(tcx: TyCtxt<'_>, name: &str) -> Option<DefId> {\n@@ -502,30 +523,35 @@ pub fn def_path_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n         _ => return Res::Err,\n     };\n     let tcx = cx.tcx;\n-    let first = try_res!(\n-        find_primitive(tcx, base)\n-            .or_else(|| find_crate(tcx, base))\n-            .and_then(|id| item_child_by_name(tcx, id, first))\n-    );\n+    let starts = find_primitive(tcx, base)\n+        .chain(find_crate(tcx, base))\n+        .filter_map(|id| item_child_by_name(tcx, id, first));\n \n-    let last = path\n-        .iter()\n-        .copied()\n-        // for each segment, find the child item\n-        .try_fold(first, |res, segment| {\n-            let def_id = res.def_id();\n-            if let Some(item) = item_child_by_name(tcx, def_id, segment) {\n-                Some(item)\n-            } else if matches!(res, Res::Def(DefKind::Enum | DefKind::Struct, _)) {\n-                // it is not a child item so check inherent impl items\n-                tcx.inherent_impls(def_id)\n-                    .iter()\n-                    .find_map(|&impl_def_id| item_child_by_name(tcx, impl_def_id, segment))\n-            } else {\n-                None\n-            }\n-        });\n-    try_res!(last).expect_non_local()\n+    for first in starts {\n+        let last = path\n+            .iter()\n+            .copied()\n+            // for each segment, find the child item\n+            .try_fold(first, |res, segment| {\n+                let def_id = res.def_id();\n+                if let Some(item) = item_child_by_name(tcx, def_id, segment) {\n+                    Some(item)\n+                } else if matches!(res, Res::Def(DefKind::Enum | DefKind::Struct, _)) {\n+                    // it is not a child item so check inherent impl items\n+                    tcx.inherent_impls(def_id)\n+                        .iter()\n+                        .find_map(|&impl_def_id| item_child_by_name(tcx, impl_def_id, segment))\n+                } else {\n+                    None\n+                }\n+            });\n+\n+        if let Some(last) = last {\n+            return last;\n+        }\n+    }\n+\n+    Res::Err\n }\n \n /// Convenience function to get the `DefId` of a trait by path."}, {"sha": "bb29c71e9f455889ff8cb1f001ee916fb273b0c1", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-03-24\"\n+channel = \"nightly-2022-04-07\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "00dc916b217ca0b93f18a387290545e517a2a97f", "filename": "src/driver.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -165,9 +165,12 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // Separate the output with an empty line\n     eprintln!();\n \n+    let fallback_bundle = rustc_errors::fallback_fluent_bundle(false).expect(\"failed to load fallback fluent bundle\");\n     let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n         rustc_errors::ColorConfig::Auto,\n         None,\n+        None,\n+        fallback_bundle,\n         false,\n         false,\n         None,\n@@ -178,8 +181,8 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // a .span_bug or .bug call has already printed what\n     // it wants to print.\n     if !info.payload().is::<rustc_errors::ExplicitBug>() {\n-        let d = rustc_errors::Diagnostic::new(rustc_errors::Level::Bug, \"unexpected panic\");\n-        handler.emit_diagnostic(&d);\n+        let mut d = rustc_errors::Diagnostic::new(rustc_errors::Level::Bug, \"unexpected panic\");\n+        handler.emit_diagnostic(&mut d);\n     }\n \n     let version_info = rustc_tools_util::get_version_info!();\n@@ -191,7 +194,7 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     ];\n \n     for note in &xs {\n-        handler.note_without_error(note);\n+        handler.note_without_error(note.as_ref());\n     }\n \n     // If backtraces are enabled, also print the query stack"}, {"sha": "67e1a07b7f5fac8a895d8c224599facaa0225516", "filename": "tests/ui-internal/check_clippy_version_attribute.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/tests%2Fui-internal%2Fcheck_clippy_version_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/tests%2Fui-internal%2Fcheck_clippy_version_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fcheck_clippy_version_attribute.stderr?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -46,11 +46,6 @@ LL | |     report_in_external_macro: true\n LL | | }\n    | |_^\n    |\n-note: the lint level is defined here\n-  --> $DIR/check_clippy_version_attribute.rs:1:9\n-   |\n-LL | #![deny(clippy::internal)]\n-   |         ^^^^^^^^^^^^^^^^\n    = note: `#[deny(clippy::missing_clippy_version_attribute)]` implied by `#[deny(clippy::internal)]`\n    = help: please use a `clippy::version` attribute, see `doc/adding_lints.md`\n    = note: this error originates in the macro `$crate::declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "b1fb2e16bd5841c13cc64a83cb2fc46808df7d12", "filename": "tests/ui/bytes_nth.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/tests%2Fui%2Fbytes_nth.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/tests%2Fui%2Fbytes_nth.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytes_nth.fixed?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -5,7 +5,7 @@\n \n fn main() {\n     let s = String::from(\"String\");\n-    s.as_bytes().get(3);\n+    let _ = s.as_bytes().get(3);\n     let _ = &s.as_bytes().get(3);\n-    s[..].as_bytes().get(3);\n+    let _ = s[..].as_bytes().get(3);\n }"}, {"sha": "034c54e6a4206392640af1ada8cbf6dc75ae26bf", "filename": "tests/ui/bytes_nth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/tests%2Fui%2Fbytes_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/tests%2Fui%2Fbytes_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytes_nth.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -5,7 +5,7 @@\n \n fn main() {\n     let s = String::from(\"String\");\n-    s.bytes().nth(3);\n+    let _ = s.bytes().nth(3);\n     let _ = &s.bytes().nth(3);\n-    s[..].bytes().nth(3);\n+    let _ = s[..].bytes().nth(3);\n }"}, {"sha": "9851d4791d8db59da4c1bcf333b770e7148f5119", "filename": "tests/ui/bytes_nth.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/tests%2Fui%2Fbytes_nth.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/tests%2Fui%2Fbytes_nth.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytes_nth.stderr?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -1,8 +1,8 @@\n error: called `.bytes().nth()` on a `String`\n-  --> $DIR/bytes_nth.rs:8:5\n+  --> $DIR/bytes_nth.rs:8:13\n    |\n-LL |     s.bytes().nth(3);\n-   |     ^^^^^^^^^^^^^^^^ help: try: `s.as_bytes().get(3)`\n+LL |     let _ = s.bytes().nth(3);\n+   |             ^^^^^^^^^^^^^^^^ help: try: `s.as_bytes().get(3)`\n    |\n    = note: `-D clippy::bytes-nth` implied by `-D warnings`\n \n@@ -13,10 +13,10 @@ LL |     let _ = &s.bytes().nth(3);\n    |              ^^^^^^^^^^^^^^^^ help: try: `s.as_bytes().get(3)`\n \n error: called `.bytes().nth()` on a `str`\n-  --> $DIR/bytes_nth.rs:10:5\n+  --> $DIR/bytes_nth.rs:10:13\n    |\n-LL |     s[..].bytes().nth(3);\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: try: `s[..].as_bytes().get(3)`\n+LL |     let _ = s[..].bytes().nth(3);\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: try: `s[..].as_bytes().get(3)`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e75e7dc913673f56f1faaab0ec72b667c6d583dc", "filename": "tests/ui/crashes/ice-5497.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/tests%2Fui%2Fcrashes%2Fice-5497.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/tests%2Fui%2Fcrashes%2Fice-5497.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-5497.stderr?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -0,0 +1,10 @@\n+error: this operation will panic at runtime\n+  --> $DIR/ice-5497.rs:9:22\n+   |\n+LL |     const OOB: i32 = [1][1] + T::OOB;\n+   |                      ^^^^^^ index out of bounds: the length is 1 but the index is 1\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: aborting due to previous error\n+"}, {"sha": "11ffc8edb149e8726fe4caedebb3a6113dc4b728", "filename": "tests/ui/iter_next_slice.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/tests%2Fui%2Fiter_next_slice.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/tests%2Fui%2Fiter_next_slice.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_next_slice.fixed?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -6,16 +6,16 @@ fn main() {\n     let s = [1, 2, 3];\n     let v = vec![1, 2, 3];\n \n-    s.get(0);\n+    let _ = s.get(0);\n     // Should be replaced by s.get(0)\n \n-    s.get(2);\n+    let _ = s.get(2);\n     // Should be replaced by s.get(2)\n \n-    v.get(5);\n+    let _ = v.get(5);\n     // Should be replaced by v.get(5)\n \n-    v.get(0);\n+    let _ = v.get(0);\n     // Should be replaced by v.get(0)\n \n     let o = Some(5);"}, {"sha": "e0d3aabd54acdfbf9fb06048593d464bfe6e8c39", "filename": "tests/ui/iter_next_slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/tests%2Fui%2Fiter_next_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/tests%2Fui%2Fiter_next_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_next_slice.rs?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -6,16 +6,16 @@ fn main() {\n     let s = [1, 2, 3];\n     let v = vec![1, 2, 3];\n \n-    s.iter().next();\n+    let _ = s.iter().next();\n     // Should be replaced by s.get(0)\n \n-    s[2..].iter().next();\n+    let _ = s[2..].iter().next();\n     // Should be replaced by s.get(2)\n \n-    v[5..].iter().next();\n+    let _ = v[5..].iter().next();\n     // Should be replaced by v.get(5)\n \n-    v.iter().next();\n+    let _ = v.iter().next();\n     // Should be replaced by v.get(0)\n \n     let o = Some(5);"}, {"sha": "a78d2c2d5e83801ca2271d255c6e5bdbbb0597bb", "filename": "tests/ui/iter_next_slice.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/abc59bb9144a97ec23d187dcb2cb28dd88271297/tests%2Fui%2Fiter_next_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abc59bb9144a97ec23d187dcb2cb28dd88271297/tests%2Fui%2Fiter_next_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_next_slice.stderr?ref=abc59bb9144a97ec23d187dcb2cb28dd88271297", "patch": "@@ -1,28 +1,28 @@\n error: using `.iter().next()` on an array\n-  --> $DIR/iter_next_slice.rs:9:5\n+  --> $DIR/iter_next_slice.rs:9:13\n    |\n-LL |     s.iter().next();\n-   |     ^^^^^^^^^^^^^^^ help: try calling: `s.get(0)`\n+LL |     let _ = s.iter().next();\n+   |             ^^^^^^^^^^^^^^^ help: try calling: `s.get(0)`\n    |\n    = note: `-D clippy::iter-next-slice` implied by `-D warnings`\n \n error: using `.iter().next()` on a Slice without end index\n-  --> $DIR/iter_next_slice.rs:12:5\n+  --> $DIR/iter_next_slice.rs:12:13\n    |\n-LL |     s[2..].iter().next();\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: try calling: `s.get(2)`\n+LL |     let _ = s[2..].iter().next();\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: try calling: `s.get(2)`\n \n error: using `.iter().next()` on a Slice without end index\n-  --> $DIR/iter_next_slice.rs:15:5\n+  --> $DIR/iter_next_slice.rs:15:13\n    |\n-LL |     v[5..].iter().next();\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: try calling: `v.get(5)`\n+LL |     let _ = v[5..].iter().next();\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: try calling: `v.get(5)`\n \n error: using `.iter().next()` on an array\n-  --> $DIR/iter_next_slice.rs:18:5\n+  --> $DIR/iter_next_slice.rs:18:13\n    |\n-LL |     v.iter().next();\n-   |     ^^^^^^^^^^^^^^^ help: try calling: `v.get(0)`\n+LL |     let _ = v.iter().next();\n+   |             ^^^^^^^^^^^^^^^ help: try calling: `v.get(0)`\n \n error: aborting due to 4 previous errors\n "}]}