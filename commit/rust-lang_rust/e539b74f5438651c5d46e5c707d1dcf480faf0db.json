{"sha": "e539b74f5438651c5d46e5c707d1dcf480faf0db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MzliNzRmNTQzODY1MWM1ZDQ2ZTVjNzA3ZDFkY2Y0ODBmYWYwZGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-25T17:10:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-25T17:10:45Z"}, "message": "use new visitor to erase regions", "tree": {"sha": "cf14f7b5a9bed77484a6afafeb11b9b1e390dc58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf14f7b5a9bed77484a6afafeb11b9b1e390dc58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e539b74f5438651c5d46e5c707d1dcf480faf0db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e539b74f5438651c5d46e5c707d1dcf480faf0db", "html_url": "https://github.com/rust-lang/rust/commit/e539b74f5438651c5d46e5c707d1dcf480faf0db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e539b74f5438651c5d46e5c707d1dcf480faf0db/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64a13a46601bb47a470264936b623b4adf706128", "url": "https://api.github.com/repos/rust-lang/rust/commits/64a13a46601bb47a470264936b623b4adf706128", "html_url": "https://github.com/rust-lang/rust/commit/64a13a46601bb47a470264936b623b4adf706128"}], "stats": {"total": 104, "additions": 17, "deletions": 87}, "files": [{"sha": "8c180ecb233b64a82a7e1297478d5591a48f5825", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e539b74f5438651c5d46e5c707d1dcf480faf0db/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e539b74f5438651c5d46e5c707d1dcf480faf0db/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=e539b74f5438651c5d46e5c707d1dcf480faf0db", "patch": "@@ -614,9 +614,15 @@ macro_rules! make_mir_visitor {\n \n             fn super_constant(&mut self,\n                               constant: & $($mutability)* Constant<'tcx>) {\n-                self.visit_span(& $($mutability)* constant.span);\n-                self.visit_ty(& $($mutability)* constant.ty);\n-                self.visit_literal(& $($mutability)* constant.literal);\n+                let Constant {\n+                    ref $($mutability)* span,\n+                    ref $($mutability)* ty,\n+                    ref $($mutability)* literal,\n+                } = *constant;\n+\n+                self.visit_span(span);\n+                self.visit_ty(ty);\n+                self.visit_literal(literal);\n             }\n \n             fn super_typed_const_val(&mut self,\n@@ -626,6 +632,7 @@ macro_rules! make_mir_visitor {\n                     ref $($mutability)* ty,\n                     ref $($mutability)* value,\n                 } = *constant;\n+\n                 self.visit_span(span);\n                 self.visit_ty(ty);\n                 self.visit_const_usize(value);"}, {"sha": "6ea684c2f5c686b242db17d14ab338813180c03c", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 7, "deletions": 84, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/e539b74f5438651c5d46e5c707d1dcf480faf0db/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e539b74f5438651c5d46e5c707d1dcf480faf0db/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=e539b74f5438651c5d46e5c707d1dcf480faf0db", "patch": "@@ -12,7 +12,8 @@\n //! We want to do this once just before trans, so trans does not have to take\n //! care erasing regions all over the place.\n \n-use rustc::middle::ty::{self, TyCtxt};\n+use rustc::middle::subst::Substs;\n+use rustc::middle::ty::{Ty, TyCtxt};\n use rustc::mir::repr::*;\n use rustc::mir::visit::MutVisitor;\n use rustc::mir::transform::{MirPass, Pass};\n@@ -28,94 +29,16 @@ impl<'a, 'tcx> EraseRegionsVisitor<'a, 'tcx> {\n             tcx: tcx\n         }\n     }\n-\n-    fn erase_regions_return_ty(&mut self, fn_output: &mut ty::FnOutput<'tcx>) {\n-        match *fn_output {\n-            ty::FnConverging(ref mut ty) => {\n-                *ty = self.tcx.erase_regions(ty);\n-            },\n-            ty::FnDiverging => {}\n-        }\n-    }\n-\n-    fn erase_regions_tys<'b, T>(&mut self, tys: T)\n-        where T: Iterator<Item = &'b mut ty::Ty<'tcx>>,\n-              'tcx: 'b\n-    {\n-        for ty in tys {\n-            *ty = self.tcx.erase_regions(ty);\n-        }\n-    }\n }\n \n impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n-    fn visit_mir(&mut self, mir: &mut Mir<'tcx>) {\n-        self.erase_regions_return_ty(&mut mir.return_ty);\n-        self.erase_regions_tys(mir.var_decls.iter_mut().map(|d| &mut d.ty));\n-        self.erase_regions_tys(mir.arg_decls.iter_mut().map(|d| &mut d.ty));\n-        self.erase_regions_tys(mir.temp_decls.iter_mut().map(|d| &mut d.ty));\n-        self.super_mir(mir);\n-    }\n-\n-    fn visit_terminator(&mut self, bb: BasicBlock, terminator: &mut Terminator<'tcx>) {\n-        match terminator.kind {\n-            TerminatorKind::Goto { .. } |\n-            TerminatorKind::Resume |\n-            TerminatorKind::Return |\n-            TerminatorKind::If { .. } |\n-            TerminatorKind::Switch { .. } |\n-            TerminatorKind::Drop { .. } |\n-            TerminatorKind::Call { .. } => {\n-                /* nothing to do */\n-            },\n-            TerminatorKind::SwitchInt { ref mut switch_ty, .. } => {\n-                *switch_ty = self.tcx.erase_regions(switch_ty);\n-            },\n-        }\n-        self.super_terminator(bb, terminator);\n-    }\n-\n-    fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>) {\n-        match *rvalue {\n-            Rvalue::Use(_) |\n-            Rvalue::Len(_) |\n-            Rvalue::BinaryOp(_, _, _) |\n-            Rvalue::UnaryOp(_, _) |\n-            Rvalue::Slice { input: _, from_start: _, from_end: _ } |\n-            Rvalue::InlineAsm {..} => {},\n-\n-            Rvalue::Repeat(_, ref mut value) => value.ty = self.tcx.erase_regions(&value.ty),\n-            Rvalue::Ref(ref mut region, _, _) => *region = ty::ReStatic,\n-            Rvalue::Cast(_, _, ref mut ty) => *ty = self.tcx.erase_regions(ty),\n-            Rvalue::Box(ref mut ty) => *ty = self.tcx.erase_regions(ty),\n-\n-\n-            Rvalue::Aggregate(AggregateKind::Vec, _) |\n-            Rvalue::Aggregate(AggregateKind::Tuple, _) => {},\n-            Rvalue::Aggregate(AggregateKind::Adt(_, _, ref mut substs), _) =>\n-                *substs = self.tcx.mk_substs(self.tcx.erase_regions(*substs)),\n-            Rvalue::Aggregate(AggregateKind::Closure(def_id, ref mut closure_substs), _) => {\n-                let cloned = Box::new(closure_substs.clone());\n-                let ty = self.tcx.mk_closure_from_closure_substs(def_id, cloned);\n-                let erased = self.tcx.erase_regions(&ty);\n-                *closure_substs = match erased.sty {\n-                    ty::TyClosure(_, ref closure_substs) => &*closure_substs,\n-                    _ => unreachable!()\n-                };\n-            }\n-        }\n-        self.super_rvalue(rvalue);\n+    fn visit_ty(&mut self, ty: &mut Ty<'tcx>) {\n+        let old_ty = *ty;\n+        *ty = self.tcx.erase_regions(&old_ty);\n     }\n \n-    fn visit_constant(&mut self, constant: &mut Constant<'tcx>) {\n-        constant.ty = self.tcx.erase_regions(&constant.ty);\n-        match constant.literal {\n-            Literal::Item { ref mut substs, .. } => {\n-                *substs = self.tcx.mk_substs(self.tcx.erase_regions(substs));\n-            }\n-            Literal::Value { .. } => { /* nothing to do */ }\n-        }\n-        self.super_constant(constant);\n+    fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>) {\n+        *substs = self.tcx.mk_substs(self.tcx.erase_regions(*substs));\n     }\n }\n "}]}