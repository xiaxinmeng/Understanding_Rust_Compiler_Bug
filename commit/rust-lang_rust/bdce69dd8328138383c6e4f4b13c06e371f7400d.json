{"sha": "bdce69dd8328138383c6e4f4b13c06e371f7400d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkY2U2OWRkODMyODEzODM4M2M2ZTRmNGIxM2MwNmUzNzFmNzQwMGQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-17T11:49:23Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-17T17:12:50Z"}, "message": "rustc_metadata: Give a constructor to `CrateLocator`", "tree": {"sha": "784e69e05e511fe47ca3839b482fa195793b98ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/784e69e05e511fe47ca3839b482fa195793b98ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdce69dd8328138383c6e4f4b13c06e371f7400d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdce69dd8328138383c6e4f4b13c06e371f7400d", "html_url": "https://github.com/rust-lang/rust/commit/bdce69dd8328138383c6e4f4b13c06e371f7400d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdce69dd8328138383c6e4f4b13c06e371f7400d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6bcf6016c0049033b11acccf4894da5c344bd54", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6bcf6016c0049033b11acccf4894da5c344bd54", "html_url": "https://github.com/rust-lang/rust/commit/c6bcf6016c0049033b11acccf4894da5c344bd54"}], "stats": {"total": 129, "additions": 81, "deletions": 48}, "files": [{"sha": "7a2dcf2818ec1e4bd339bfba42424288566bbae2", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bdce69dd8328138383c6e4f4b13c06e371f7400d/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdce69dd8328138383c6e4f4b13c06e371f7400d/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=bdce69dd8328138383c6e4f4b13c06e371f7400d", "patch": "@@ -350,26 +350,19 @@ impl<'a> CrateLoader<'a> {\n             (LoadResult::Previous(cnum), None)\n         } else {\n             info!(\"falling back to a load\");\n-            let mut locator = CrateLocator {\n-                sess: self.sess,\n-                span,\n-                crate_name: name,\n+            let mut locator = CrateLocator::new(\n+                self.sess,\n+                self.metadata_loader,\n+                name,\n                 hash,\n                 host_hash,\n                 extra_filename,\n-                filesearch: self.sess.target_filesearch(path_kind),\n-                target: &self.sess.target.target,\n-                triple: self.sess.opts.target_triple.clone(),\n+                false, // is_host\n+                path_kind,\n+                span,\n                 root,\n-                rejected_via_hash: vec![],\n-                rejected_via_triple: vec![],\n-                rejected_via_kind: vec![],\n-                rejected_via_version: vec![],\n-                rejected_via_filename: vec![],\n-                should_match_name: true,\n-                is_proc_macro: Some(false),\n-                metadata_loader: self.metadata_loader,\n-            };\n+                Some(false), // is_proc_macro\n+            );\n \n             self.load(&mut locator).map(|r| (r, None)).or_else(|| {\n                 dep_kind = DepKind::UnexportedMacrosOnly;"}, {"sha": "809e885e4466cf74119bbe318fd7d590314708a9", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 72, "deletions": 32, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/bdce69dd8328138383c6e4f4b13c06e371f7400d/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdce69dd8328138383c6e4f4b13c06e371f7400d/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=bdce69dd8328138383c6e4f4b13c06e371f7400d", "patch": "@@ -248,32 +248,36 @@ use log::{debug, info, warn};\n use rustc_error_codes::*;\n \n #[derive(Clone)]\n-crate struct CrateMismatch {\n+struct CrateMismatch {\n     path: PathBuf,\n     got: String,\n }\n \n #[derive(Clone)]\n crate struct CrateLocator<'a> {\n-    pub sess: &'a Session,\n-    pub span: Span,\n-    pub crate_name: Symbol,\n+    // Immutable per-session configuration.\n+    sess: &'a Session,\n+    metadata_loader: &'a dyn MetadataLoader,\n+\n+    // Immutable per-search configuration.\n+    crate_name: Symbol,\n     pub hash: Option<&'a Svh>,\n     pub host_hash: Option<&'a Svh>,\n-    pub extra_filename: Option<&'a str>,\n-    // points to either self.sess.target.target or self.sess.host, must match triple\n+    extra_filename: Option<&'a str>,\n     pub target: &'a Target,\n     pub triple: TargetTriple,\n     pub filesearch: FileSearch<'a>,\n-    pub root: Option<&'a CratePaths>,\n-    pub rejected_via_hash: Vec<CrateMismatch>,\n-    pub rejected_via_triple: Vec<CrateMismatch>,\n-    pub rejected_via_kind: Vec<CrateMismatch>,\n-    pub rejected_via_version: Vec<CrateMismatch>,\n-    pub rejected_via_filename: Vec<CrateMismatch>,\n-    pub should_match_name: bool,\n+    span: Span,\n+    root: Option<&'a CratePaths>,\n     pub is_proc_macro: Option<bool>,\n-    pub metadata_loader: &'a dyn MetadataLoader,\n+\n+    // Mutable in-progress state or output.\n+    rejected_via_hash: Vec<CrateMismatch>,\n+    rejected_via_triple: Vec<CrateMismatch>,\n+    rejected_via_kind: Vec<CrateMismatch>,\n+    rejected_via_version: Vec<CrateMismatch>,\n+    rejected_via_filename: Vec<CrateMismatch>,\n+    should_match_name: bool,\n }\n \n crate struct CratePaths {\n@@ -299,6 +303,49 @@ impl fmt::Display for CrateFlavor {\n }\n \n impl<'a> CrateLocator<'a> {\n+    crate fn new(\n+        sess: &'a Session,\n+        metadata_loader: &'a dyn MetadataLoader,\n+        crate_name: Symbol,\n+        hash: Option<&'a Svh>,\n+        host_hash: Option<&'a Svh>,\n+        extra_filename: Option<&'a str>,\n+        is_host: bool,\n+        path_kind: PathKind,\n+        span: Span,\n+        root: Option<&'a CratePaths>,\n+        is_proc_macro: Option<bool>,\n+    ) -> CrateLocator<'a> {\n+        CrateLocator {\n+            sess,\n+            metadata_loader,\n+            crate_name,\n+            hash,\n+            host_hash,\n+            extra_filename,\n+            target: if is_host { &sess.host } else { &sess.target.target },\n+            triple: if is_host {\n+                TargetTriple::from_triple(config::host_triple())\n+            } else {\n+                sess.opts.target_triple.clone()\n+            },\n+            filesearch: if is_host {\n+                sess.host_filesearch(path_kind)\n+            } else {\n+                sess.target_filesearch(path_kind)\n+            },\n+            span,\n+            root,\n+            is_proc_macro,\n+            rejected_via_hash: Vec::new(),\n+            rejected_via_triple: Vec::new(),\n+            rejected_via_kind: Vec::new(),\n+            rejected_via_version: Vec::new(),\n+            rejected_via_filename: Vec::new(),\n+            should_match_name: true,\n+        }\n+    }\n+\n     crate fn reset(&mut self) {\n         self.rejected_via_hash.clear();\n         self.rejected_via_triple.clear();\n@@ -926,26 +973,19 @@ pub fn find_plugin_registrar(\n     let host_triple = TargetTriple::from_triple(config::host_triple());\n     let is_cross = target_triple != host_triple;\n     let mut target_only = false;\n-    let mut locator = CrateLocator {\n+    let mut locator = CrateLocator::new(\n         sess,\n-        span,\n-        crate_name: name,\n-        hash: None,\n-        host_hash: None,\n-        extra_filename: None,\n-        filesearch: sess.host_filesearch(PathKind::Crate),\n-        target: &sess.host,\n-        triple: host_triple,\n-        root: None,\n-        rejected_via_hash: vec![],\n-        rejected_via_triple: vec![],\n-        rejected_via_kind: vec![],\n-        rejected_via_version: vec![],\n-        rejected_via_filename: vec![],\n-        should_match_name: true,\n-        is_proc_macro: None,\n         metadata_loader,\n-    };\n+        name,\n+        None, // hash\n+        None, // host_hash\n+        None, // extra_filename\n+        true, // is_host\n+        PathKind::Crate,\n+        span,\n+        None, // root\n+        None, // is_proc_macro\n+    );\n \n     let library = locator.maybe_load_library_crate().or_else(|| {\n         if !is_cross {"}]}