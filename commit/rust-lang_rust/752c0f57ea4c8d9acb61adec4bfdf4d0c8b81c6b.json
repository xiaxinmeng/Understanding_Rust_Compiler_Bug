{"sha": "752c0f57ea4c8d9acb61adec4bfdf4d0c8b81c6b", "node_id": "C_kwDOAAsO6NoAKDc1MmMwZjU3ZWE0YzhkOWFjYjYxYWRlYzRiZmRmNGQwYzhiODFjNmI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-04T01:19:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-04T01:19:25Z"}, "message": "Rollup merge of #104748 - lqd:download_lld, r=jyn514\n\nEnsure `lld` is supported with `download-ci-llvm`\n\nThis PR:\n- ensures LLD's step in bootstrap's dist, but it's not strictly necessary since dist will already package it when it's present.\n- makes bootstrap's `native::LLD` step support using the packaged `ci-llvm/bin/lld`, instead of building it from source (which would most likely not be available today, nor in the future where `download-ci-llvm = if-available` is the default).\n\nIf I understand correctly, `--enable-full-tools` will also enable `rust.lld`, and this is why LLD is already packaged today in the `rust-dev` component on the main targets (and why `-Zgcc-ld=lld` does work there).\n\nThat means it's likely that this PR will not be able to land before I've reworked and landed #101792: if LLD is available in `download-ci-llvm`, the `needs-rust-lld` tests should start being executed on the x64 macOS test builders, and CI would fail today.\n\nI've tested locally that building with `download-ci-llvm = true` and `lld = true` with the LLVM submodule unregistered was successful, and that `rust-lld` and the various `lld-wrapper`s are present and `-Zgcc-ld=lld` works as well, on a few different platforms:\n- `x86_64-unknown-linux-gnu`\n- `aarch64-apple-darwin`\n- `x86_64-pc-windows-msvc` (with `-Clinker=rust-lld` rather than `-Zgcc-ld=lld`)\n- `x86_64-apple-darwin`, with the `MACOSX_DEPLOYMENT_TARGET` workaround for #101653\n\nI don't think we really need to bump the `download-ci-llvm-stamp` in this case, since `./build/$triple/ci-llvm/bin/lld` is present on all the above targets already, but have added it mechanically, and it should probably be removed to avoid unnecessary downloads/churn.\n\nFixes #98340\nSupersedes #100010", "tree": {"sha": "2bd0c4deffea0e4f4f6f449ae533b07d7e67902f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bd0c4deffea0e4f4f6f449ae533b07d7e67902f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/752c0f57ea4c8d9acb61adec4bfdf4d0c8b81c6b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjtNQdCRBK7hj4Ov3rIwAAbSAIAH3NuLO1SObKRBfdWzyS2Dxj\njSD2P6CLbNtxNp7lWl0qzTswf16EaarWddTt0rN6jTFp+hf9dPdvpjlB2amW7abd\ndXQS1cpXluCFr2UBg98KvsfKcW1/CXCAa/IV5aggGmBL8mJKrMx4B2wlujfUDw1v\n6HH3KJ0vFLK6dc3h60LjtRaBdCXAJ9Ht6BG4qumri2YO6mTujQRBOHAaKgX16CYB\nEGwel7M+ip5QHd2a4DOwemrUDfxOOgXfp7+ReSHr2JQdb2FdclxyAV0WVbM2FCa2\nRWCjPf+lmXIrTzcIF0Uh97YSSnSnalqGec8Rm/Je1fNxjQr0BKi20HFediUMOFg=\n=npZZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 2bd0c4deffea0e4f4f6f449ae533b07d7e67902f\nparent c7572670a1302f5c7e245d069200e22da9df0316\nparent e0f5c6da1df52a64b80753bf33bae3176729ae52\nauthor Michael Goulet <michael@errs.io> 1672795165 -0800\ncommitter GitHub <noreply@github.com> 1672795165 -0800\n\nRollup merge of #104748 - lqd:download_lld, r=jyn514\n\nEnsure `lld` is supported with `download-ci-llvm`\n\nThis PR:\n- ensures LLD's step in bootstrap's dist, but it's not strictly necessary since dist will already package it when it's present.\n- makes bootstrap's `native::LLD` step support using the packaged `ci-llvm/bin/lld`, instead of building it from source (which would most likely not be available today, nor in the future where `download-ci-llvm = if-available` is the default).\n\nIf I understand correctly, `--enable-full-tools` will also enable `rust.lld`, and this is why LLD is already packaged today in the `rust-dev` component on the main targets (and why `-Zgcc-ld=lld` does work there).\n\nThat means it's likely that this PR will not be able to land before I've reworked and landed #101792: if LLD is available in `download-ci-llvm`, the `needs-rust-lld` tests should start being executed on the x64 macOS test builders, and CI would fail today.\n\nI've tested locally that building with `download-ci-llvm = true` and `lld = true` with the LLVM submodule unregistered was successful, and that `rust-lld` and the various `lld-wrapper`s are present and `-Zgcc-ld=lld` works as well, on a few different platforms:\n- `x86_64-unknown-linux-gnu`\n- `aarch64-apple-darwin`\n- `x86_64-pc-windows-msvc` (with `-Clinker=rust-lld` rather than `-Zgcc-ld=lld`)\n- `x86_64-apple-darwin`, with the `MACOSX_DEPLOYMENT_TARGET` workaround for #101653\n\nI don't think we really need to bump the `download-ci-llvm-stamp` in this case, since `./build/$triple/ci-llvm/bin/lld` is present on all the above targets already, but have added it mechanically, and it should probably be removed to avoid unnecessary downloads/churn.\n\nFixes #98340\nSupersedes #100010\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/752c0f57ea4c8d9acb61adec4bfdf4d0c8b81c6b", "html_url": "https://github.com/rust-lang/rust/commit/752c0f57ea4c8d9acb61adec4bfdf4d0c8b81c6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/752c0f57ea4c8d9acb61adec4bfdf4d0c8b81c6b/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7572670a1302f5c7e245d069200e22da9df0316", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7572670a1302f5c7e245d069200e22da9df0316", "html_url": "https://github.com/rust-lang/rust/commit/c7572670a1302f5c7e245d069200e22da9df0316"}, {"sha": "e0f5c6da1df52a64b80753bf33bae3176729ae52", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f5c6da1df52a64b80753bf33bae3176729ae52", "html_url": "https://github.com/rust-lang/rust/commit/e0f5c6da1df52a64b80753bf33bae3176729ae52"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "68215790bed177e3fdd3b4376da622b612bc689a", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/752c0f57ea4c8d9acb61adec4bfdf4d0c8b81c6b/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752c0f57ea4c8d9acb61adec4bfdf4d0c8b81c6b/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=752c0f57ea4c8d9acb61adec4bfdf4d0c8b81c6b", "patch": "@@ -2067,6 +2067,9 @@ impl Step for RustDev {\n \n         builder.ensure(crate::native::Llvm { target });\n \n+        // We want to package `lld` to use it with `download-ci-llvm`.\n+        builder.ensure(crate::native::Lld { target });\n+\n         let src_bindir = builder.llvm_out(target).join(\"bin\");\n         // If updating this list, you likely want to change\n         // src/bootstrap/download-ci-llvm-stamp as well, otherwise local users"}, {"sha": "94630e40f3c4ca5a68e3bd5e149fa190fd265b15", "filename": "src/bootstrap/download-ci-llvm-stamp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/752c0f57ea4c8d9acb61adec4bfdf4d0c8b81c6b/src%2Fbootstrap%2Fdownload-ci-llvm-stamp", "raw_url": "https://github.com/rust-lang/rust/raw/752c0f57ea4c8d9acb61adec4bfdf4d0c8b81c6b/src%2Fbootstrap%2Fdownload-ci-llvm-stamp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload-ci-llvm-stamp?ref=752c0f57ea4c8d9acb61adec4bfdf4d0c8b81c6b", "patch": "@@ -1,4 +1,4 @@\n Change this file to make users of the `download-ci-llvm` configuration download\n a new version of LLVM from CI, even if the LLVM submodule hasn\u2019t changed.\n \n-Last change is for: https://github.com/rust-lang/rust/pull/102790\n+Last change is for: https://github.com/rust-lang/rust/pull/104748"}, {"sha": "781a738a81196877582a4b34daa4f43d109bdf8a", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/752c0f57ea4c8d9acb61adec4bfdf4d0c8b81c6b/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752c0f57ea4c8d9acb61adec4bfdf4d0c8b81c6b/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=752c0f57ea4c8d9acb61adec4bfdf4d0c8b81c6b", "patch": "@@ -63,13 +63,13 @@ impl LdFlags {\n     }\n }\n \n-// This returns whether we've already previously built LLVM.\n-//\n-// It's used to avoid busting caches during x.py check -- if we've already built\n-// LLVM, it's fine for us to not try to avoid doing so.\n-//\n-// This will return the llvm-config if it can get it (but it will not build it\n-// if not).\n+/// This returns whether we've already previously built LLVM.\n+///\n+/// It's used to avoid busting caches during x.py check -- if we've already built\n+/// LLVM, it's fine for us to not try to avoid doing so.\n+///\n+/// This will return the llvm-config if it can get it (but it will not build it\n+/// if not).\n pub fn prebuilt_llvm_config(\n     builder: &Builder<'_>,\n     target: TargetSelection,\n@@ -823,8 +823,21 @@ impl Step for Lld {\n         }\n         let target = self.target;\n \n-        let LlvmResult { llvm_config, llvm_cmake_dir } =\n-            builder.ensure(Llvm { target: self.target });\n+        let LlvmResult { llvm_config, llvm_cmake_dir } = builder.ensure(Llvm { target });\n+\n+        // The `dist` step packages LLD next to LLVM's binaries for download-ci-llvm. The root path\n+        // we usually expect here is `./build/$triple/ci-llvm/`, with the binaries in its `bin`\n+        // subfolder. We check if that's the case, and if LLD's binary already exists there next to\n+        // `llvm-config`: if so, we can use it instead of building LLVM/LLD from source.\n+        let ci_llvm_bin = llvm_config.parent().unwrap();\n+        if ci_llvm_bin.is_dir() && ci_llvm_bin.file_name().unwrap() == \"bin\" {\n+            let lld_path = ci_llvm_bin.join(exe(\"lld\", target));\n+            if lld_path.exists() {\n+                // The following steps copying `lld` as `rust-lld` to the sysroot, expect it in the\n+                // `bin` subfolder of this step's out dir.\n+                return ci_llvm_bin.parent().unwrap().to_path_buf();\n+            }\n+        }\n \n         let out_dir = builder.lld_out(target);\n         let done_stamp = out_dir.join(\"lld-finished-building\");"}]}