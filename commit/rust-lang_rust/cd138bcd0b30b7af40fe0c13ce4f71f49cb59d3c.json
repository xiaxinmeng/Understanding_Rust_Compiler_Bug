{"sha": "cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMTM4YmNkMGIzMGI3YWY0MGZlMGMxM2NlNGY3MWY0OWNiNTlkM2M=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-15T14:35:37Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-17T08:02:31Z"}, "message": "test more operations on dangling ZST pointers", "tree": {"sha": "6e5fabe8101f3d264c833ec91414d372141373f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e5fabe8101f3d264c833ec91414d372141373f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c", "html_url": "https://github.com/rust-lang/rust/commit/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf44c366403bca55d6c83449a7ed1e076889438b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf44c366403bca55d6c83449a7ed1e076889438b", "html_url": "https://github.com/rust-lang/rust/commit/cf44c366403bca55d6c83449a7ed1e076889438b"}], "stats": {"total": 75, "additions": 48, "deletions": 27}, "files": [{"sha": "d9f5ad4c696e161541b39c749cf7f3d56cf4af3a", "filename": "tests/compile-fail/maybe_null_pointer_deref_zst.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Fcompile-fail%2Fmaybe_null_pointer_deref_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Fcompile-fail%2Fmaybe_null_pointer_deref_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmaybe_null_pointer_deref_zst.rs?ref=cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    // This pointer *could* be NULL so we cannot load from it, not even at ZST\n+    let ptr = (&0u8 as *const u8).wrapping_sub(0x800) as *const ();\n+    let _x: () = unsafe { *ptr }; //~ ERROR outside bounds\n+}"}, {"sha": "ef46a469c3ad158512bb31881b73d9e16f6110b0", "filename": "tests/compile-fail/maybe_null_pointer_write_zst.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Fcompile-fail%2Fmaybe_null_pointer_write_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Fcompile-fail%2Fmaybe_null_pointer_write_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmaybe_null_pointer_write_zst.rs?ref=cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    // This pointer *could* be NULL so we cannot load from it, not even at ZST.\n+    // Not using the () type here, as writes of that type do not even have MIR generated.\n+    // Also not assigning directly as that's array initialization, not assignment.\n+    let zst_val = [1u8; 0];\n+    let ptr = (&0u8 as *const u8).wrapping_sub(0x800) as *mut [u8; 0];\n+    unsafe { *ptr = zst_val; } //~ ERROR outside bounds\n+}"}, {"sha": "a8b23368616ea4301fb9e9ff676bcafb4764f13a", "filename": "tests/compile-fail/null_pointer_deref_zst.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Fcompile-fail%2Fnull_pointer_deref_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Fcompile-fail%2Fnull_pointer_deref_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_deref_zst.rs?ref=cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let x: () = unsafe { *std::ptr::null() }; //~ ERROR constant evaluation error: invalid use of NULL pointer\n+    panic!(\"this should never print: {:?}\", x);\n+}"}, {"sha": "affb040bdedfa16410b5e6cb2d8e5428ef197ba2", "filename": "tests/compile-fail/null_pointer_write.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Fcompile-fail%2Fnull_pointer_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Fcompile-fail%2Fnull_pointer_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_write.rs?ref=cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    unsafe { *std::ptr::null_mut() = 0i32 }; //~ ERROR constant evaluation error: invalid use of NULL pointer\n+}"}, {"sha": "433c69dbb032b646ba702865737df65a62f27a3c", "filename": "tests/compile-fail/null_pointer_write_zst.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Fcompile-fail%2Fnull_pointer_write_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Fcompile-fail%2Fnull_pointer_write_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_write_zst.rs?ref=cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    // Not using the () type here, as writes of that type do not even have MIR generated.\n+    // Also not assigning directly as that's array initialization, not assignment.\n+    let zst_val = [1u8; 0];\n+    unsafe { *std::ptr::null_mut() = zst_val }; //~ ERROR constant evaluation error: invalid use of NULL pointer\n+}"}, {"sha": "ebae26996b7b1fd0e639e168e9cae6b8ab2ff992", "filename": "tests/run-pass/cast-rfc0401-vtable-kinds.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs?ref=cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c", "patch": "@@ -8,10 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-// FIXME: remove the next line when https://github.com/rust-lang/rust/issues/43358 is resolved\n-// compile-flags: -Zmir-opt-level=0\n-\n // Check that you can cast between different pointers to trait objects\n // whose vtable have the same kind (both lengths, or both trait pointers).\n "}, {"sha": "e100ad5f4692eea7443b2e3b147d8150e77b5613", "filename": "tests/run-pass/const-vec-of-fns.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Frun-pass%2Fconst-vec-of-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Frun-pass%2Fconst-vec-of-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconst-vec-of-fns.rs?ref=cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n-\n /*!\n  * Try to double-check that static fns have the right size (with or\n  * without dummy env ptr, as appropriate) by iterating a size-2 array."}, {"sha": "137d84c256bef8f758b6f032daf85b237bf85180", "filename": "tests/run-pass/issue-20575.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Frun-pass%2Fissue-20575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Frun-pass%2Fissue-20575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-20575.rs?ref=cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c", "patch": "@@ -10,8 +10,6 @@\n \n // Test that overloaded calls work with zero arity closures\n \n-// pretty-expanded FIXME #23616\n-\n fn main() {\n     let functions: [Box<Fn() -> Option<()>>; 1] = [Box::new(|| None)];\n "}, {"sha": "d8f030de0723151296b3a8a62b6644316f326e73", "filename": "tests/run-pass/pointers.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Frun-pass%2Fpointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Frun-pass%2Fpointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpointers.rs?ref=cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c", "patch": "@@ -55,7 +55,11 @@ fn main() {\n     assert_eq!(basic_ref_mut_var(), 3);\n     assert_eq!(tuple_ref_mut(), (10, 22));\n     assert_eq!(match_ref_mut(), 42);\n-    // FIXME: improve this test... how?\n+\n+    // Compare even dangling pointers with NULL, and with others in the same allocation.\n     assert!(dangling_pointer() != std::ptr::null());\n     assert!(match dangling_pointer() as usize { 0 => false, _ => true });\n+    let dangling = dangling_pointer();\n+    assert!(dangling == dangling);\n+    assert!(dangling.wrapping_add(1) != dangling);\n }"}, {"sha": "96f1217a254ed2b89fa78fcba3312d7e40298a0a", "filename": "tests/run-pass/regions-lifetime-nonfree-late-bound.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fregions-lifetime-nonfree-late-bound.rs?ref=cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c", "patch": "@@ -22,8 +22,6 @@\n // doing region-folding, when really all clients of the region-folding\n // case only want to see FREE lifetime variables, not bound ones.\n \n-// pretty-expanded FIXME #23616\n-\n #![allow(unused_features)]\n #![feature(box_syntax)]\n "}, {"sha": "66f0c84e23c1a2d4064e12c507ca2485297278b2", "filename": "tests/run-pass/sendable-class.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Frun-pass%2Fsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Frun-pass%2Fsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsendable-class.rs?ref=cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c", "patch": "@@ -10,8 +10,6 @@\n \n // Test that a class with only sendable fields can be sent\n \n-// pretty-expanded FIXME #23616\n-\n use std::sync::mpsc::channel;\n \n #[allow(dead_code)]"}, {"sha": "c3bae4062fc29565adf97af389313054dc57de42", "filename": "tests/run-pass/zst.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Frun-pass%2Fzst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c/tests%2Frun-pass%2Fzst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fzst.rs?ref=cd138bcd0b30b7af40fe0c13ce4f71f49cb59d3c", "patch": "@@ -11,8 +11,23 @@ fn use_zst() -> A {\n }\n \n fn main() {\n+    // Not using the () type here, as writes of that type do not even have MIR generated.\n+    // Also not assigning directly as that's array initialization, not assignment.\n+    let zst_val = [1u8; 0];\n+\n     assert_eq!(zst_ret(), A);\n     assert_eq!(use_zst(), A);\n-    let x = 42 as *mut ();\n-    unsafe { *x = (); }\n+    let x = 42 as *mut [u8; 0];\n+    // reading and writing is okay\n+    unsafe { *x = zst_val; }\n+    unsafe { let _y = *x; }\n+\n+    // We should even be able to use \"true\" pointers for ZST when the allocation has been\n+    // removed already.  The box is for a non-ZST to make sure there actually is an allocation.\n+    let mut x_box = Box::new(((), 1u8));\n+    let x = &mut x_box.0 as *mut _ as *mut [u8; 0];\n+    drop(x_box);\n+    // reading and writing is okay\n+    unsafe { *x = zst_val; }\n+    unsafe { let _y = *x; }\n }"}, {"sha": "c2d7b88ea0757f99435e400cbe2fd1dc6d688d97", "filename": "tests/run-pass/zst2.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf44c366403bca55d6c83449a7ed1e076889438b/tests%2Frun-pass%2Fzst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf44c366403bca55d6c83449a7ed1e076889438b/tests%2Frun-pass%2Fzst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fzst2.rs?ref=cf44c366403bca55d6c83449a7ed1e076889438b", "patch": "@@ -1,12 +0,0 @@\n-#![allow(dead_code)]\n-\n-#[derive(Debug)]\n-struct A;\n-\n-fn main() {\n-    // can't use assert_eq, b/c that will try to print the pointer addresses with full MIR enabled\n-\n-    // FIXME: Test disabled for now, see <https://github.com/solson/miri/issues/131>.\n-    //assert!(&A as *const A as *const () == &() as *const _);\n-    //assert!(&A as *const A == &A as *const A);\n-}"}]}