{"sha": "7fb583be7b0df80c91df026c6a2bde550bc27a7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYjU4M2JlN2IwZGY4MGM5MWRmMDI2YzZhMmJkZTU1MGJjMjdhN2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-05T16:56:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-05T16:56:08Z"}, "message": "auto merge of #10290 : dbussink/rust/thread_in_rust, r=alexcrichton\n\nThis binds to the appropriate pthreads_* and Windows specific functions\r\nand calls them from Rust. This allows for removal of the C++ support\r\ncode for threads.\r\n\r\nThis needs to be reviewed for the Windows parts, I've tested on OS X and Linux.\r\n\r\nFixes #10162", "tree": {"sha": "5471652a73737a511636093172321b7d1dc06130", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5471652a73737a511636093172321b7d1dc06130"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fb583be7b0df80c91df026c6a2bde550bc27a7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fb583be7b0df80c91df026c6a2bde550bc27a7c", "html_url": "https://github.com/rust-lang/rust/commit/7fb583be7b0df80c91df026c6a2bde550bc27a7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fb583be7b0df80c91df026c6a2bde550bc27a7c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92065ceb634872f53a1a402cf306fbf02550b00d", "url": "https://api.github.com/repos/rust-lang/rust/commits/92065ceb634872f53a1a402cf306fbf02550b00d", "html_url": "https://github.com/rust-lang/rust/commit/92065ceb634872f53a1a402cf306fbf02550b00d"}, {"sha": "47e0bd403a04d26506f723ac44ee9ea0aa5d3ad5", "url": "https://api.github.com/repos/rust-lang/rust/commits/47e0bd403a04d26506f723ac44ee9ea0aa5d3ad5", "html_url": "https://github.com/rust-lang/rust/commit/47e0bd403a04d26506f723ac44ee9ea0aa5d3ad5"}], "stats": {"total": 334, "additions": 153, "deletions": 181}, "files": [{"sha": "15b13d9946599bb845eae7eb73ec7083fd8bd82d", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fb583be7b0df80c91df026c6a2bde550bc27a7c/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7fb583be7b0df80c91df026c6a2bde550bc27a7c/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=7fb583be7b0df80c91df026c6a2bde550bc27a7c", "patch": "@@ -84,7 +84,6 @@ endif\n \n RUNTIME_CXXS_$(1)_$(2) := \\\n               rt/sync/lock_and_signal.cpp \\\n-              rt/sync/rust_thread.cpp \\\n               rt/rust_builtin.cpp \\\n               rt/rust_upcall.cpp \\\n               rt/miniz.cpp \\"}, {"sha": "9c84f770807f9ba7dab37c7c0186909dd828b53e", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 56, "deletions": 7, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/7fb583be7b0df80c91df026c6a2bde550bc27a7c/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fb583be7b0df80c91df026c6a2bde550bc27a7c/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=7fb583be7b0df80c91df026c6a2bde550bc27a7c", "patch": "@@ -224,7 +224,10 @@ pub mod types {\n         pub mod common {\n             pub mod posix01 {\n                 use libc::types::common::c95::{c_void};\n-                use libc::types::os::arch::c95::{c_char, size_t};\n+                use libc::types::os::arch::c95::{c_char, c_ulong, size_t};\n+\n+                pub type pthread_t = c_ulong;\n+\n                 pub struct glob_t {\n                     gl_pathc: size_t,\n                     gl_pathv: **c_char,\n@@ -294,7 +297,7 @@ pub mod types {\n             }\n             #[cfg(target_arch = \"x86\")]\n             pub mod posix01 {\n-                use libc::types::os::arch::c95::{c_short, c_long, time_t};\n+                use libc::types::os::arch::c95::{c_char, c_short, c_long, time_t};\n                 use libc::types::os::arch::posix88::{dev_t, gid_t, ino_t};\n                 use libc::types::os::arch::posix88::{mode_t, off_t};\n                 use libc::types::os::arch::posix88::{uid_t};\n@@ -325,10 +328,14 @@ pub mod types {\n                     __unused4: c_long,\n                     __unused5: c_long,\n                 }\n+\n+                pub struct pthread_attr_t {\n+                    __size: [c_char, ..36]\n+                }\n             }\n             #[cfg(target_arch = \"arm\")]\n             pub mod posix01 {\n-                use libc::types::os::arch::c95::{c_uchar, c_uint, c_ulong, time_t};\n+                use libc::types::os::arch::c95::{c_char, c_uchar, c_uint, c_ulong, time_t};\n                 use libc::types::os::arch::c99::{c_longlong, c_ulonglong};\n                 use libc::types::os::arch::posix88::{uid_t, gid_t, ino_t};\n \n@@ -357,10 +364,14 @@ pub mod types {\n                     st_ctime_nsec: c_ulong,\n                     st_ino: c_ulonglong\n                 }\n+\n+                pub struct pthread_attr_t {\n+                    __size: [c_char, ..36]\n+                }\n             }\n             #[cfg(target_arch = \"mips\")]\n             pub mod posix01 {\n-                use libc::types::os::arch::c95::{c_long, c_ulong, time_t};\n+                use libc::types::os::arch::c95::{c_char, c_long, c_ulong, time_t};\n                 use libc::types::os::arch::posix88::{gid_t, ino_t};\n                 use libc::types::os::arch::posix88::{mode_t, off_t};\n                 use libc::types::os::arch::posix88::{uid_t};\n@@ -391,6 +402,10 @@ pub mod types {\n                     st_blocks: blkcnt_t,\n                     st_pad5: [c_long, ..14],\n                 }\n+\n+                pub struct pthread_attr_t {\n+                    __size: [c_char, ..36]\n+                }\n             }\n             pub mod posix08 {}\n             pub mod bsd44 {}\n@@ -435,7 +450,7 @@ pub mod types {\n                 pub type ssize_t = i64;\n             }\n             pub mod posix01 {\n-                use libc::types::os::arch::c95::{c_int, c_long, time_t};\n+                use libc::types::os::arch::c95::{c_char, c_int, c_long, time_t};\n                 use libc::types::os::arch::posix88::{dev_t, gid_t, ino_t};\n                 use libc::types::os::arch::posix88::{mode_t, off_t};\n                 use libc::types::os::arch::posix88::{uid_t};\n@@ -463,6 +478,10 @@ pub mod types {\n                     st_ctime_nsec: c_long,\n                     __unused: [c_long, ..3],\n                 }\n+\n+                pub struct pthread_attr_t {\n+                    __size: [c_char, ..56]\n+                }\n             }\n             pub mod posix08 {\n             }\n@@ -479,6 +498,10 @@ pub mod types {\n             pub mod posix01 {\n                 use libc::types::common::c95::{c_void};\n                 use libc::types::os::arch::c95::{c_char, c_int, size_t};\n+                use libc::types::os::arch::c99::{uintptr_t};\n+\n+                pub type pthread_t = uintptr_t;\n+\n                 pub struct glob_t {\n                     gl_pathc:  size_t,\n                     __unused1: size_t,\n@@ -535,6 +558,7 @@ pub mod types {\n                 pub type ssize_t = i64;\n             }\n             pub mod posix01 {\n+                use libc::types::common::c95::{c_void};\n                 use libc::types::common::c99::{uint8_t, uint32_t, int32_t};\n                 use libc::types::os::arch::c95::{c_long, time_t};\n                 use libc::types::os::arch::posix88::{dev_t, gid_t, ino_t};\n@@ -569,6 +593,8 @@ pub mod types {\n                     st_birthtime_nsec: c_long,\n                     __unused: [uint8_t, ..2],\n                 }\n+\n+                pub type pthread_attr_t = *c_void;\n             }\n             pub mod posix08 {\n             }\n@@ -945,6 +971,10 @@ pub mod types {\n             pub mod posix01 {\n                 use libc::types::common::c95::{c_void};\n                 use libc::types::os::arch::c95::{c_char, c_int, size_t};\n+                use libc::types::os::arch::c99::{uintptr_t};\n+\n+                pub type pthread_t = uintptr_t;\n+\n                 pub struct glob_t {\n                     gl_pathc:  size_t,\n                     __unused1: c_int,\n@@ -1002,7 +1032,7 @@ pub mod types {\n             }\n             pub mod posix01 {\n                 use libc::types::common::c99::{int32_t, int64_t, uint32_t};\n-                use libc::types::os::arch::c95::{c_long, time_t};\n+                use libc::types::os::arch::c95::{c_char, c_long, time_t};\n                 use libc::types::os::arch::posix88::{dev_t, gid_t, ino_t,\n                                                      mode_t, off_t, uid_t};\n \n@@ -1034,6 +1064,11 @@ pub mod types {\n                     st_lspare: int32_t,\n                     st_qspare: [int64_t, ..2],\n                 }\n+\n+                pub struct pthread_attr_t {\n+                    __sig: c_long,\n+                    __opaque: [c_char, ..36]\n+                }\n             }\n             pub mod posix08 {\n             }\n@@ -1083,7 +1118,7 @@ pub mod types {\n             pub mod posix01 {\n                 use libc::types::common::c99::{int32_t, int64_t};\n                 use libc::types::common::c99::{uint32_t};\n-                use libc::types::os::arch::c95::{c_long, time_t};\n+                use libc::types::os::arch::c95::{c_char, c_long, time_t};\n                 use libc::types::os::arch::posix88::{dev_t, gid_t, ino_t};\n                 use libc::types::os::arch::posix88::{mode_t, off_t, uid_t};\n \n@@ -1115,6 +1150,11 @@ pub mod types {\n                     st_lspare: int32_t,\n                     st_qspare: [int64_t, ..2],\n                 }\n+\n+                pub struct pthread_attr_t {\n+                    __sig: c_long,\n+                    __opaque: [c_char, ..56]\n+                }\n             }\n             pub mod posix08 {\n             }\n@@ -1800,6 +1840,9 @@ pub mod consts {\n             pub static _SC_XOPEN_LEGACY : c_int = 129;\n             pub static _SC_XOPEN_REALTIME : c_int = 130;\n             pub static _SC_XOPEN_REALTIME_THREADS : c_int = 131;\n+\n+            pub static PTHREAD_CREATE_JOINABLE: c_int = 0;\n+            pub static PTHREAD_CREATE_DETACHED: c_int = 1;\n         }\n         pub mod posix08 {\n         }\n@@ -2207,6 +2250,9 @@ pub mod consts {\n             pub static _SC_XOPEN_UNIX : c_int = 115;\n             pub static _SC_XOPEN_VERSION : c_int = 116;\n             pub static _SC_XOPEN_XCU_VERSION : c_int = 117;\n+\n+            pub static PTHREAD_CREATE_JOINABLE: c_int = 0;\n+            pub static PTHREAD_CREATE_DETACHED: c_int = 1;\n         }\n         pub mod posix08 {\n         }\n@@ -2560,6 +2606,9 @@ pub mod consts {\n             pub static _SC_XOPEN_UNIX : c_int = 115;\n             pub static _SC_XOPEN_VERSION : c_int = 116;\n             pub static _SC_XOPEN_XCU_VERSION : c_int = 121;\n+\n+            pub static PTHREAD_CREATE_JOINABLE: c_int = 1;\n+            pub static PTHREAD_CREATE_DETACHED: c_int = 2;\n         }\n         pub mod posix08 {\n         }"}, {"sha": "9838a191197a52f2b2a69a1fbddc6d4e6c9d3a21", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 97, "deletions": 30, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/7fb583be7b0df80c91df026c6a2bde550bc27a7c/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fb583be7b0df80c91df026c6a2bde550bc27a7c/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=7fb583be7b0df80c91df026c6a2bde550bc27a7c", "patch": "@@ -8,74 +8,141 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_camel_case_types)];\n+\n use cast;\n use libc;\n use ops::Drop;\n-use unstable::raw;\n use uint;\n+use ptr;\n+\n+#[cfg(windows)]\n+use libc::types::os::arch::extra::{LPSECURITY_ATTRIBUTES, SIZE_T,\n+                                   LPVOID, DWORD, LPDWORD, HANDLE};\n \n-#[allow(non_camel_case_types)] // runtime type\n-type raw_thread = libc::c_void;\n+#[cfg(windows)] type rust_thread = HANDLE;\n+#[cfg(unix)] type rust_thread = libc::pthread_t;\n \n pub struct Thread {\n-    priv main: ~fn(),\n-    priv raw_thread: *raw_thread,\n+    priv native: rust_thread,\n     priv joined: bool\n }\n \n+static DEFAULT_STACK_SIZE: libc::size_t = 1024*1024;\n+\n+#[cfg(windows)] type rust_thread_return = DWORD;\n+#[cfg(unix)] type rust_thread_return = *libc::c_void;\n+\n impl Thread {\n-    #[fixed_stack_segment] #[inline(never)]\n+\n     pub fn start(main: ~fn()) -> Thread {\n         // This is the starting point of rust os threads. The first thing we do\n         // is make sure that we don't trigger __morestack (also why this has a\n-        // no_split_stack annotation), and then we re-build the main function\n-        // and invoke it from there.\n+        // no_split_stack annotation), and then we extract the main function\n+        // and invoke it.\n         #[no_split_stack]\n-        extern \"C\" fn thread_start(code: *(), env: *()) {\n+        extern \"C\" fn thread_start(trampoline: *libc::c_void) -> rust_thread_return {\n             use rt::context;\n             unsafe {\n                 context::record_stack_bounds(0, uint::max_value);\n-                let f: &fn() = cast::transmute(raw::Closure {\n-                    code: code,\n-                    env: env,\n-                });\n-                f();\n+                let f: ~~fn() = cast::transmute(trampoline);\n+                (*f)();\n             }\n+            unsafe { cast::transmute(0) }\n         }\n \n-        let raw_thread = unsafe {\n-            let c: raw::Closure = cast::transmute_copy(&main);\n-            let raw::Closure { code, env } = c;\n-            rust_raw_thread_start(thread_start, code, env)\n-        };\n+        let native = native_thread_create(thread_start, ~main);\n         Thread {\n-            main: main,\n-            raw_thread: raw_thread,\n+            native: native,\n             joined: false,\n         }\n     }\n \n     pub fn join(mut self) {\n-        #[fixed_stack_segment]; #[inline(never)];\n-\n         assert!(!self.joined);\n-        unsafe { rust_raw_thread_join(self.raw_thread); }\n+        native_thread_join(self.native);\n         self.joined = true;\n     }\n }\n \n+#[cfg(windows)]\n+fn native_thread_create(thread_start: extern \"C\" fn(*libc::c_void) -> rust_thread_return,\n+                        tramp: ~~fn()) -> rust_thread {\n+    #[fixed_stack_segment];\n+\n+    unsafe {\n+        let ptr: *mut libc::c_void = cast::transmute(tramp);\n+        CreateThread(ptr::mut_null(), DEFAULT_STACK_SIZE, thread_start, ptr, 0, ptr::mut_null())\n+    }\n+}\n+\n+#[cfg(windows)]\n+fn native_thread_join(native: rust_thread) {\n+    #[fixed_stack_segment];\n+    use libc::consts::os::extra::INFINITE;\n+    unsafe { WaitForSingleObject(native, INFINITE); }\n+}\n+\n+#[cfg(unix)]\n+fn native_thread_create(thread_start: extern \"C\" fn(*libc::c_void) -> rust_thread_return,\n+                        tramp: ~~fn()) -> rust_thread {\n+    #[fixed_stack_segment];\n+\n+    use unstable::intrinsics;\n+    let mut native: libc::pthread_t = unsafe { intrinsics::uninit() };\n+\n+    unsafe {\n+        use libc::consts::os::posix01::PTHREAD_CREATE_JOINABLE;\n+\n+        let mut attr: libc::pthread_attr_t = intrinsics::uninit();\n+        assert!(pthread_attr_init(&mut attr) == 0);\n+        assert!(pthread_attr_setstacksize(&mut attr, DEFAULT_STACK_SIZE) == 0);\n+        assert!(pthread_attr_setdetachstate(&mut attr, PTHREAD_CREATE_JOINABLE) == 0);\n+\n+        let ptr: *libc::c_void = cast::transmute(tramp);\n+        assert!(pthread_create(&mut native, &attr, thread_start, ptr) == 0);\n+    }\n+    native\n+}\n+\n+#[cfg(unix)]\n+fn native_thread_join(native: rust_thread) {\n+    #[fixed_stack_segment];\n+    unsafe { assert!(pthread_join(native, ptr::null()) == 0) }\n+}\n+\n impl Drop for Thread {\n     fn drop(&mut self) {\n         #[fixed_stack_segment]; #[inline(never)];\n-\n         assert!(self.joined);\n-        unsafe { rust_raw_thread_delete(self.raw_thread) }\n     }\n }\n \n+#[cfg(windows, target_arch = \"x86\")]\n+extern \"stdcall\" {\n+    fn CreateThread(lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T,\n+                    lpStartAddress: extern \"C\" fn(*libc::c_void) -> rust_thread_return,\n+                    lpParameter: LPVOID, dwCreationFlags: DWORD, lpThreadId: LPDWORD) -> HANDLE;\n+    fn WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: DWORD) -> DWORD;\n+}\n+\n+#[cfg(windows, target_arch = \"x86_64\")]\n+extern {\n+    fn CreateThread(lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T,\n+                    lpStartAddress: extern \"C\" fn(*libc::c_void) -> rust_thread_return,\n+                    lpParameter: LPVOID, dwCreationFlags: DWORD, lpThreadId: LPDWORD) -> HANDLE;\n+    fn WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: DWORD) -> DWORD;\n+}\n+\n+#[cfg(unix)]\n extern {\n-    fn rust_raw_thread_start(f: extern \"C\" fn(*(), *()),\n-                             code: *(), env: *()) -> *raw_thread;\n-    fn rust_raw_thread_join(thread: *raw_thread);\n-    fn rust_raw_thread_delete(thread: *raw_thread);\n+    fn pthread_create(native: *mut libc::pthread_t, attr: *libc::pthread_attr_t,\n+                      f: extern \"C\" fn(*libc::c_void) -> rust_thread_return,\n+                      value: *libc::c_void) -> libc::c_int;\n+    fn pthread_join(native: libc::pthread_t, value: **libc::c_void) -> libc::c_int;\n+    fn pthread_attr_init(attr: *mut libc::pthread_attr_t) -> libc::c_int;\n+    fn pthread_attr_setstacksize(attr: *mut libc::pthread_attr_t,\n+                                 stack_size: libc::size_t) -> libc::c_int;\n+    fn pthread_attr_setdetachstate(attr: *mut libc::pthread_attr_t,\n+                                   state: libc::c_int) -> libc::c_int;\n }"}, {"sha": "486c95a548d8d014a7bbc901a85d9d9b5f16519b", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7fb583be7b0df80c91df026c6a2bde550bc27a7c/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7fb583be7b0df80c91df026c6a2bde550bc27a7c/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=7fb583be7b0df80c91df026c6a2bde550bc27a7c", "patch": "@@ -11,7 +11,6 @@\n /* Foreign builtins. */\n \n #include \"rust_util.h\"\n-#include \"sync/rust_thread.h\"\n #include \"sync/lock_and_signal.h\"\n #include \"vg/valgrind.h\"\n \n@@ -385,42 +384,6 @@ rust_signal_little_lock(lock_and_signal *lock) {\n     lock->signal();\n }\n \n-typedef void(startfn)(void*, void*);\n-\n-class raw_thread: public rust_thread {\n-public:\n-    startfn *raw_start;\n-    void *rust_fn;\n-    void *rust_env;\n-\n-    raw_thread(startfn *raw_start, void *rust_fn, void *rust_env)\n-        : raw_start(raw_start), rust_fn(rust_fn), rust_env(rust_env) { }\n-\n-    virtual void run() {\n-        raw_start(rust_fn, rust_env);\n-    }\n-};\n-\n-extern \"C\" raw_thread*\n-rust_raw_thread_start(startfn *raw_start, void *rust_start, void *rust_env) {\n-    assert(raw_start && rust_start);\n-    raw_thread *thread = new raw_thread(raw_start, rust_start, rust_env);\n-    thread->start();\n-    return thread;\n-}\n-\n-extern \"C\" void\n-rust_raw_thread_join(raw_thread *thread) {\n-    assert(thread);\n-    thread->join();\n-}\n-\n-extern \"C\" void\n-rust_raw_thread_delete(raw_thread *thread) {\n-    assert(thread);\n-    delete thread;\n-}\n-\n #ifndef _WIN32\n #include <sys/types.h>\n #include <dirent.h>"}, {"sha": "3b581e94be75a1d3c32c2057c1a9db77f9a2e385", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fb583be7b0df80c91df026c6a2bde550bc27a7c/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/7fb583be7b0df80c91df026c6a2bde550bc27a7c/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=7fb583be7b0df80c91df026c6a2bde550bc27a7c", "patch": "@@ -42,9 +42,6 @@ rust_signal_little_lock\n rust_wait_little_lock\n tdefl_compress_mem_to_heap\n tinfl_decompress_mem_to_heap\n-rust_raw_thread_start\n-rust_raw_thread_join\n-rust_raw_thread_delete\n swap_registers\n rust_readdir\n rust_opendir"}, {"sha": "7223d1871376498aa4b2645ab0477e2266835b24", "filename": "src/rt/sync/rust_thread.cpp", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/92065ceb634872f53a1a402cf306fbf02550b00d/src%2Frt%2Fsync%2Frust_thread.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/92065ceb634872f53a1a402cf306fbf02550b00d/src%2Frt%2Fsync%2Frust_thread.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Frust_thread.cpp?ref=92065ceb634872f53a1a402cf306fbf02550b00d", "patch": "@@ -1,65 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-#include \"rust_thread.h\"\n-#include <limits.h>\n-\n-const size_t default_stack_sz = 1024*1024;\n-\n-rust_thread::rust_thread() : thread(0) {\n-}\n-\n-rust_thread::~rust_thread() {\n-}\n-\n-#if defined(__WIN32__)\n-static DWORD WINAPI\n-#elif defined(__GNUC__)\n-static void *\n-#else\n-#error \"Platform not supported\"\n-#endif\n-rust_thread_start(void *ptr) {\n-    rust_thread *thread = (rust_thread *) ptr;\n-    thread->run();\n-    return 0;\n-}\n-\n-void\n-rust_thread::start() {\n-#if defined(__WIN32__)\n-   thread = CreateThread(NULL, default_stack_sz, rust_thread_start, this, 0, NULL);\n-#else\n-   // PTHREAD_STACK_MIN of some system is larger than default size\n-   // so we check stack_sz to prevent assertion failure.\n-   size_t stack_sz = default_stack_sz;\n-   if (stack_sz < PTHREAD_STACK_MIN) {\n-      stack_sz = PTHREAD_STACK_MIN;\n-   }\n-   pthread_attr_t attr;\n-   CHECKED(pthread_attr_init(&attr));\n-   CHECKED(pthread_attr_setstacksize(&attr, stack_sz));\n-   CHECKED(pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE));\n-   CHECKED(pthread_create(&thread, &attr, rust_thread_start, (void *) this));\n-#endif\n-}\n-\n-void\n-rust_thread::join() {\n-#if defined(__WIN32__)\n-   if (thread)\n-     WaitForSingleObject(thread, INFINITE);\n-#else\n-   if (thread)\n-     CHECKED(pthread_join(thread, NULL));\n-#endif\n-   thread = 0;\n-}"}, {"sha": "257eefceb433a95ae7db0980b449c8b06ffda700", "filename": "src/rt/sync/rust_thread.h", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/92065ceb634872f53a1a402cf306fbf02550b00d/src%2Frt%2Fsync%2Frust_thread.h", "raw_url": "https://github.com/rust-lang/rust/raw/92065ceb634872f53a1a402cf306fbf02550b00d/src%2Frt%2Fsync%2Frust_thread.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Frust_thread.h?ref=92065ceb634872f53a1a402cf306fbf02550b00d", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#ifndef RUST_THREAD_H\n-#define RUST_THREAD_H\n-\n-#include \"rust_globals.h\"\n-\n-/**\n- * Thread utility class. Derive and implement your own run() method.\n- */\n-class rust_thread {\n- private:\n-#if defined(__WIN32__)\n-    HANDLE thread;\n-#else\n-    pthread_t thread;\n-#endif\n- public:\n-\n-    rust_thread();\n-    virtual ~rust_thread();\n-\n-    void start();\n-\n-    virtual void run() = 0;\n-\n-    void join();\n-};\n-\n-#endif /* RUST_THREAD_H */"}]}