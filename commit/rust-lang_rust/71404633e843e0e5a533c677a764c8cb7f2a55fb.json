{"sha": "71404633e843e0e5a533c677a764c8cb7f2a55fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNDA0NjMzZTg0M2UwZTVhNTMzYzY3N2E3NjRjOGNiN2YyYTU1ZmI=", "commit": {"author": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-05-31T09:19:06Z"}, "committer": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-05-31T09:19:06Z"}, "message": "Merge raw_vec into_box with previous impl<T, Global>\n\nThere are two separate `impl<T, Global>` which no special reason, it would be\nbetter to merge both of them.", "tree": {"sha": "2e5bef2a5ed18e25d8fb5a6ab7ca0a238f0dcbf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e5bef2a5ed18e25d8fb5a6ab7ca0a238f0dcbf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71404633e843e0e5a533c677a764c8cb7f2a55fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71404633e843e0e5a533c677a764c8cb7f2a55fb", "html_url": "https://github.com/rust-lang/rust/commit/71404633e843e0e5a533c677a764c8cb7f2a55fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71404633e843e0e5a533c677a764c8cb7f2a55fb/comments", "author": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79449986b707c18df92622a53d83eddd6872d8ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/79449986b707c18df92622a53d83eddd6872d8ee", "html_url": "https://github.com/rust-lang/rust/commit/79449986b707c18df92622a53d83eddd6872d8ee"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "5b365f0387a9b0e50742f3478c4f2d41f8d92f06", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/71404633e843e0e5a533c677a764c8cb7f2a55fb/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71404633e843e0e5a533c677a764c8cb7f2a55fb/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=71404633e843e0e5a533c677a764c8cb7f2a55fb", "patch": "@@ -118,6 +118,30 @@ impl<T> RawVec<T, Global> {\n             RawVec::from_raw_parts(slice.as_mut_ptr(), slice.len())\n         }\n     }\n+\n+    /// Converts the entire buffer into `Box<[MaybeUninit<T>]>` with the specified `len`.\n+    ///\n+    /// Note that this will correctly reconstitute any `cap` changes\n+    /// that may have been performed. (See description of type for details.)\n+    ///\n+    /// # Safety\n+    ///\n+    /// * `len` must be greater than or equal to the most recently requested capacity, and\n+    /// * `len` must be less than or equal to `self.capacity()`.\n+    ///\n+    /// Note, that the requested capacity and `self.capacity()` could differ, as\n+    /// an allocator could overallocate and return a greater memory block than requested.\n+    pub unsafe fn into_box(self, len: usize) -> Box<[MaybeUninit<T>]> {\n+        // Sanity-check one half of the safety requirement (we cannot check the other half).\n+        debug_assert!(\n+            len <= self.capacity(),\n+            \"`len` must be smaller than or equal to `self.capacity()`\"\n+        );\n+\n+        let me = ManuallyDrop::new(self);\n+        let slice = slice::from_raw_parts_mut(me.ptr() as *mut MaybeUninit<T>, len);\n+        Box::from_raw(slice)\n+    }\n }\n \n impl<T, A: AllocRef> RawVec<T, A> {\n@@ -520,32 +544,6 @@ where\n     Ok(memory)\n }\n \n-impl<T> RawVec<T, Global> {\n-    /// Converts the entire buffer into `Box<[MaybeUninit<T>]>` with the specified `len`.\n-    ///\n-    /// Note that this will correctly reconstitute any `cap` changes\n-    /// that may have been performed. (See description of type for details.)\n-    ///\n-    /// # Safety\n-    ///\n-    /// * `len` must be greater than or equal to the most recently requested capacity, and\n-    /// * `len` must be less than or equal to `self.capacity()`.\n-    ///\n-    /// Note, that the requested capacity and `self.capacity()` could differ, as\n-    /// an allocator could overallocate and return a greater memory block than requested.\n-    pub unsafe fn into_box(self, len: usize) -> Box<[MaybeUninit<T>]> {\n-        // Sanity-check one half of the safety requirement (we cannot check the other half).\n-        debug_assert!(\n-            len <= self.capacity(),\n-            \"`len` must be smaller than or equal to `self.capacity()`\"\n-        );\n-\n-        let me = ManuallyDrop::new(self);\n-        let slice = slice::from_raw_parts_mut(me.ptr() as *mut MaybeUninit<T>, len);\n-        Box::from_raw(slice)\n-    }\n-}\n-\n unsafe impl<#[may_dangle] T, A: AllocRef> Drop for RawVec<T, A> {\n     /// Frees the memory owned by the `RawVec` *without* trying to drop its contents.\n     fn drop(&mut self) {"}]}