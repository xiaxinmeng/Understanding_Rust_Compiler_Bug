{"sha": "e43811c1645f78818d5d7fe0054b54a462145847", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MzgxMWMxNjQ1Zjc4ODE4ZDVkN2ZlMDA1NGI1NGE0NjIxNDU4NDc=", "commit": {"author": {"name": "Veetaha", "email": "veetaha2@gmail.com", "date": "2020-08-08T18:53:38Z"}, "committer": {"name": "Veetaha", "email": "veetaha2@gmail.com", "date": "2020-08-08T18:53:38Z"}, "message": "Fix no inlay hints / unresolved tokens until manual edit\n\nNo we return ContentModified during the workspace loading. This signifies the language\nclient to retry the operation (i.e. the client will\ncontinue polling the server while it returns ContentModified).\nI believe that there might be cases of overly big projects where the backoff\nlogic we have setup in `sendRequestWithRetry` (which we use for inlay hints)\nmight bail too early (currently the largest retry standby time is 10 seconds).\nHowever, I've tried on one of my project with 500+ dependencies and it is still enough.", "tree": {"sha": "43c7e67da3e783af3f06033478d306a2cfc99490", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43c7e67da3e783af3f06033478d306a2cfc99490"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e43811c1645f78818d5d7fe0054b54a462145847", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e43811c1645f78818d5d7fe0054b54a462145847", "html_url": "https://github.com/rust-lang/rust/commit/e43811c1645f78818d5d7fe0054b54a462145847", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e43811c1645f78818d5d7fe0054b54a462145847/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a69f19a6a5899bdfb6fc498371650bf54263deff", "url": "https://api.github.com/repos/rust-lang/rust/commits/a69f19a6a5899bdfb6fc498371650bf54263deff", "html_url": "https://github.com/rust-lang/rust/commit/a69f19a6a5899bdfb6fc498371650bf54263deff"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "d69f7941d865eb918d6953d8c025c336602c6c87", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e43811c1645f78818d5d7fe0054b54a462145847/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43811c1645f78818d5d7fe0054b54a462145847/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=e43811c1645f78818d5d7fe0054b54a462145847", "patch": "@@ -337,6 +337,16 @@ impl GlobalState {\n     fn on_request(&mut self, request_received: Instant, req: Request) -> Result<()> {\n         self.register_request(&req, request_received);\n \n+        if self.status == Status::Loading {\n+            self.respond(lsp_server::Response::new_err(\n+                req.id,\n+                // FIXME: i32 should impl From<ErrorCode> (from() guarantees lossless conversion)\n+                lsp_server::ErrorCode::ContentModified as i32,\n+                \"Rust Analyzer is still loading...\".to_owned(),\n+            ));\n+            return Ok(());\n+        }\n+\n         RequestDispatcher { req: Some(req), global_state: self }\n             .on_sync::<lsp_ext::ReloadWorkspace>(|s, ()| Ok(s.fetch_workspaces()))?\n             .on_sync::<lsp_ext::JoinLines>(|s, p| handlers::handle_join_lines(s.snapshot(), p))?"}, {"sha": "49d2d1c6fbe878e07ed71600fbaff81ac914060f", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e43811c1645f78818d5d7fe0054b54a462145847/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e43811c1645f78818d5d7fe0054b54a462145847/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=e43811c1645f78818d5d7fe0054b54a462145847", "patch": "@@ -64,7 +64,8 @@ export async function sendRequestWithRetry<TParam, TRet>(\n     param: TParam,\n     token?: vscode.CancellationToken,\n ): Promise<TRet> {\n-    for (const delay of [2, 4, 6, 8, 10, null]) {\n+    // The sequence is `10 * (2 ** (2 * n))` where n is 1, 2, 3...\n+    for (const delay of [40, 160, 640, 2560, 10240, null]) {\n         try {\n             return await (token\n                 ? client.sendRequest(reqType, param, token)\n@@ -84,8 +85,7 @@ export async function sendRequestWithRetry<TParam, TRet>(\n                 log.warn(\"LSP request failed\", { method: reqType.method, param, error });\n                 throw error;\n             }\n-\n-            await sleep(10 * (1 << delay));\n+            await sleep(delay);\n         }\n     }\n     throw 'unreachable';"}]}