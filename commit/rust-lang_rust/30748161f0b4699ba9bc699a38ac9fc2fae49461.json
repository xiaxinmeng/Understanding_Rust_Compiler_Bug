{"sha": "30748161f0b4699ba9bc699a38ac9fc2fae49461", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNzQ4MTYxZjBiNDY5OWJhOWJjNjk5YTM4YWM5ZmMyZmFlNDk0NjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-23T16:20:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-23T16:37:26Z"}, "message": "Simplify", "tree": {"sha": "eaa4c2ab2076ce6bb2b641edaaa971787aec1d69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaa4c2ab2076ce6bb2b641edaaa971787aec1d69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30748161f0b4699ba9bc699a38ac9fc2fae49461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30748161f0b4699ba9bc699a38ac9fc2fae49461", "html_url": "https://github.com/rust-lang/rust/commit/30748161f0b4699ba9bc699a38ac9fc2fae49461", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30748161f0b4699ba9bc699a38ac9fc2fae49461/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6996ec860bde7e6186ba8609b68ef51b8713e2ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/6996ec860bde7e6186ba8609b68ef51b8713e2ea", "html_url": "https://github.com/rust-lang/rust/commit/6996ec860bde7e6186ba8609b68ef51b8713e2ea"}], "stats": {"total": 112, "additions": 27, "deletions": 85}, "files": [{"sha": "7f006487aecedd296890bbe59e4b30a42d63e8d8", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/30748161f0b4699ba9bc699a38ac9fc2fae49461/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30748161f0b4699ba9bc699a38ac9fc2fae49461/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=30748161f0b4699ba9bc699a38ac9fc2fae49461", "patch": "@@ -61,7 +61,7 @@ use std::{str::FromStr, sync::Arc};\n \n use ra_cfg::CfgOptions;\n use rustc_hash::FxHashMap;\n-use test_utils::{extract_offset, parse_fixture, parse_single_fixture, FixtureMeta, CURSOR_MARKER};\n+use test_utils::{extract_offset, parse_fixture, parse_single_fixture, CURSOR_MARKER};\n use vfs::{file_set::FileSet, VfsPath};\n \n use crate::{\n@@ -243,20 +243,18 @@ struct FileMeta {\n     env: Env,\n }\n \n-impl From<&FixtureMeta> for ParsedMeta {\n-    fn from(meta: &FixtureMeta) -> Self {\n-        match meta {\n-            FixtureMeta::File(f) => Self::File(FileMeta {\n-                path: f.path.to_owned(),\n-                krate: f.crate_name.to_owned(),\n-                deps: f.deps.to_owned(),\n-                cfg: f.cfg.to_owned(),\n-                edition: f\n-                    .edition\n-                    .as_ref()\n-                    .map_or(Edition::Edition2018, |v| Edition::from_str(&v).unwrap()),\n-                env: Env::from(f.env.iter()),\n-            }),\n-        }\n+impl From<&test_utils::FileMeta> for ParsedMeta {\n+    fn from(f: &test_utils::FileMeta) -> Self {\n+        Self::File(FileMeta {\n+            path: f.path.to_owned(),\n+            krate: f.crate_name.to_owned(),\n+            deps: f.deps.to_owned(),\n+            cfg: f.cfg.to_owned(),\n+            edition: f\n+                .edition\n+                .as_ref()\n+                .map_or(Edition::Edition2018, |v| Edition::from_str(&v).unwrap()),\n+            env: Env::from(f.env.iter()),\n+        })\n     }\n }"}, {"sha": "c0840c6ea756c4104c9535c748657818a51e36a3", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/30748161f0b4699ba9bc699a38ac9fc2fae49461/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30748161f0b4699ba9bc699a38ac9fc2fae49461/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=30748161f0b4699ba9bc699a38ac9fc2fae49461", "patch": "@@ -25,7 +25,7 @@ impl MockFileData {\n     fn path(&self) -> &str {\n         match self {\n             MockFileData::Plain { path, .. } => path.as_str(),\n-            MockFileData::Fixture(f) => f.meta.path(),\n+            MockFileData::Fixture(f) => f.meta.path.as_str(),\n         }\n     }\n \n@@ -38,25 +38,25 @@ impl MockFileData {\n \n     fn cfg_options(&self) -> CfgOptions {\n         match self {\n-            MockFileData::Fixture(f) => {\n-                f.meta.cfg_options().map_or_else(Default::default, |o| o.clone())\n-            }\n+            MockFileData::Fixture(f) => f.meta.cfg.clone(),\n             _ => CfgOptions::default(),\n         }\n     }\n \n     fn edition(&self) -> Edition {\n         match self {\n-            MockFileData::Fixture(f) => {\n-                f.meta.edition().map_or(Edition::Edition2018, |v| Edition::from_str(v).unwrap())\n-            }\n+            MockFileData::Fixture(f) => f\n+                .meta\n+                .edition\n+                .as_ref()\n+                .map_or(Edition::Edition2018, |v| Edition::from_str(&v).unwrap()),\n             _ => Edition::Edition2018,\n         }\n     }\n \n     fn env(&self) -> Env {\n         match self {\n-            MockFileData::Fixture(f) => Env::from(f.meta.env()),\n+            MockFileData::Fixture(f) => Env::from(f.meta.env.iter()),\n             _ => Env::default(),\n         }\n     }"}, {"sha": "3bbfb43aa77396f5845c9388d442421f1e688d5e", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30748161f0b4699ba9bc699a38ac9fc2fae49461/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30748161f0b4699ba9bc699a38ac9fc2fae49461/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=30748161f0b4699ba9bc699a38ac9fc2fae49461", "patch": "@@ -69,7 +69,7 @@ impl<'a> Project<'a> {\n         let mut paths = vec![];\n \n         for entry in parse_fixture(self.fixture) {\n-            let path = tmp_dir.path().join(&entry.meta.path()['/'.len_utf8()..]);\n+            let path = tmp_dir.path().join(&entry.meta.path['/'.len_utf8()..]);\n             fs::create_dir_all(path.parent().unwrap()).unwrap();\n             fs::write(path.as_path(), entry.text.as_bytes()).unwrap();\n             paths.push((path, entry.text));"}, {"sha": "a07d057e145e68c94c4bb26cf8821176f3137f0d", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 3, "deletions": 59, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/30748161f0b4699ba9bc699a38ac9fc2fae49461/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30748161f0b4699ba9bc699a38ac9fc2fae49461/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=30748161f0b4699ba9bc699a38ac9fc2fae49461", "patch": "@@ -4,15 +4,10 @@ use stdx::split1;\n \n #[derive(Debug, Eq, PartialEq)]\n pub struct FixtureEntry {\n-    pub meta: FixtureMeta,\n+    pub meta: FileMeta,\n     pub text: String,\n }\n \n-#[derive(Debug, Eq, PartialEq)]\n-pub enum FixtureMeta {\n-    File(FileMeta),\n-}\n-\n #[derive(Debug, Eq, PartialEq)]\n pub struct FileMeta {\n     pub path: String,\n@@ -23,57 +18,6 @@ pub struct FileMeta {\n     pub env: FxHashMap<String, String>,\n }\n \n-impl FixtureMeta {\n-    pub fn path(&self) -> &str {\n-        match self {\n-            FixtureMeta::File(f) => &f.path,\n-        }\n-    }\n-\n-    pub fn crate_name(&self) -> Option<&String> {\n-        match self {\n-            FixtureMeta::File(f) => f.crate_name.as_ref(),\n-        }\n-    }\n-\n-    pub fn cfg_options(&self) -> Option<&CfgOptions> {\n-        match self {\n-            FixtureMeta::File(f) => Some(&f.cfg),\n-        }\n-    }\n-\n-    pub fn edition(&self) -> Option<&String> {\n-        match self {\n-            FixtureMeta::File(f) => f.edition.as_ref(),\n-        }\n-    }\n-\n-    pub fn env(&self) -> impl Iterator<Item = (&String, &String)> {\n-        struct EnvIter<'a> {\n-            iter: Option<std::collections::hash_map::Iter<'a, String, String>>,\n-        }\n-\n-        impl<'a> EnvIter<'a> {\n-            fn new(meta: &'a FixtureMeta) -> Self {\n-                Self {\n-                    iter: match meta {\n-                        FixtureMeta::File(f) => Some(f.env.iter()),\n-                    },\n-                }\n-            }\n-        }\n-\n-        impl<'a> Iterator for EnvIter<'a> {\n-            type Item = (&'a String, &'a String);\n-            fn next(&mut self) -> Option<Self::Item> {\n-                self.iter.as_mut().and_then(|i| i.next())\n-            }\n-        }\n-\n-        EnvIter::new(self)\n-    }\n-}\n-\n /// Same as `parse_fixture`, except it allow empty fixture\n pub fn parse_single_fixture(ra_fixture: &str) -> Option<FixtureEntry> {\n     if !ra_fixture.lines().any(|it| it.trim_start().starts_with(\"//-\")) {\n@@ -137,7 +81,7 @@ The offending line: {:?}\"#,\n }\n \n //- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b env:OUTDIR=path/to,OTHER=foo\n-fn parse_meta(meta: &str) -> FixtureMeta {\n+fn parse_meta(meta: &str) -> FileMeta {\n     let components = meta.split_ascii_whitespace().collect::<Vec<_>>();\n \n     let path = components[0].to_string();\n@@ -173,7 +117,7 @@ fn parse_meta(meta: &str) -> FixtureMeta {\n         }\n     }\n \n-    FixtureMeta::File(FileMeta { path, crate_name: krate, deps, edition, cfg, env })\n+    FileMeta { path, crate_name: krate, deps, edition, cfg, env }\n }\n \n /// Adjusts the indentation of the first line to the minimum indentation of the rest of the lines."}, {"sha": "f99786606fe26c16f8b93d12ed89299d39f5e257", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30748161f0b4699ba9bc699a38ac9fc2fae49461/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30748161f0b4699ba9bc699a38ac9fc2fae49461/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=30748161f0b4699ba9bc699a38ac9fc2fae49461", "patch": "@@ -22,7 +22,7 @@ pub use difference::Changeset as __Changeset;\n pub use ra_cfg::CfgOptions;\n pub use rustc_hash::FxHashMap;\n \n-pub use crate::fixture::{parse_fixture, parse_single_fixture, FixtureEntry, FixtureMeta};\n+pub use crate::fixture::{parse_fixture, parse_single_fixture, FileMeta, FixtureEntry};\n \n pub const CURSOR_MARKER: &str = \"<|>\";\n "}]}