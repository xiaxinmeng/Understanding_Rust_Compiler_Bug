{"sha": "3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYjg2ZmJhYjI4MWNhMDU5NzMxYzMxZmEyYWVlNWQ5YWZjN2U2ZGM=", "commit": {"author": {"name": "Bastien Orivel", "email": "eijebong@bananium.fr", "date": "2017-08-11T18:34:14Z"}, "committer": {"name": "Bastien Orivel", "email": "eijebong@bananium.fr", "date": "2017-08-12T12:01:11Z"}, "message": "Fix some typos", "tree": {"sha": "27758d734abda3918162b48a379a9dbf556a4a84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27758d734abda3918162b48a379a9dbf556a4a84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "html_url": "https://github.com/rust-lang/rust/commit/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/comments", "author": {"login": "Eijebong", "id": 3650385, "node_id": "MDQ6VXNlcjM2NTAzODU=", "avatar_url": "https://avatars.githubusercontent.com/u/3650385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eijebong", "html_url": "https://github.com/Eijebong", "followers_url": "https://api.github.com/users/Eijebong/followers", "following_url": "https://api.github.com/users/Eijebong/following{/other_user}", "gists_url": "https://api.github.com/users/Eijebong/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eijebong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eijebong/subscriptions", "organizations_url": "https://api.github.com/users/Eijebong/orgs", "repos_url": "https://api.github.com/users/Eijebong/repos", "events_url": "https://api.github.com/users/Eijebong/events{/privacy}", "received_events_url": "https://api.github.com/users/Eijebong/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Eijebong", "id": 3650385, "node_id": "MDQ6VXNlcjM2NTAzODU=", "avatar_url": "https://avatars.githubusercontent.com/u/3650385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eijebong", "html_url": "https://github.com/Eijebong", "followers_url": "https://api.github.com/users/Eijebong/followers", "following_url": "https://api.github.com/users/Eijebong/following{/other_user}", "gists_url": "https://api.github.com/users/Eijebong/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eijebong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eijebong/subscriptions", "organizations_url": "https://api.github.com/users/Eijebong/orgs", "repos_url": "https://api.github.com/users/Eijebong/repos", "events_url": "https://api.github.com/users/Eijebong/events{/privacy}", "received_events_url": "https://api.github.com/users/Eijebong/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59f6b8338e866b022941ff78ccc82ccef73a52fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/59f6b8338e866b022941ff78ccc82ccef73a52fd", "html_url": "https://github.com/rust-lang/rust/commit/59f6b8338e866b022941ff78ccc82ccef73a52fd"}], "stats": {"total": 165, "additions": 83, "deletions": 82}, "files": [{"sha": "f49e0223fcb53ceb50ff704e37b0e9c556f063f9", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -333,7 +333,7 @@ impl<'a> Builder<'a> {\n         StepDescription::run(&Builder::get_step_descriptions(Kind::Doc), self, paths);\n     }\n \n-    /// Obtain a compiler at a given stage and for a given host. Explictly does\n+    /// Obtain a compiler at a given stage and for a given host. Explicitly does\n     /// not take `Compiler` since all `Compiler` instances are meant to be\n     /// obtained through this function, since it ensures that they are valid\n     /// (i.e., built and assembled).\n@@ -501,7 +501,7 @@ impl<'a> Builder<'a> {\n             // crates). Let's say, for example that rustc itself depends on the\n             // bitflags crate. If an external crate then depends on the\n             // bitflags crate as well, we need to make sure they don't\n-            // conflict, even if they pick the same verison of bitflags. We'll\n+            // conflict, even if they pick the same version of bitflags. We'll\n             // want to make sure that e.g. a plugin and rustc each get their\n             // own copy of bitflags.\n "}, {"sha": "8d5d9f09ba95a69f667d944cfbc52a3d93c7a42d", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -306,7 +306,7 @@ impl Step for Standalone {\n     ///\n     /// This will list all of `src/doc` looking for markdown files and appropriately\n     /// perform transformations like substituting `VERSION`, `SHORT_HASH`, and\n-    /// `STAMP` alongw ith providing the various header/footer HTML we've cutomized.\n+    /// `STAMP` along with providing the various header/footer HTML we've customized.\n     ///\n     /// In the end, this is just a glorified wrapper around rustdoc!\n     fn run(self, builder: &Builder) {"}, {"sha": "7b6700bfd492870791ab657cb99a4b478193167c", "filename": "src/liballoc/allocator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Fliballoc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Fliballoc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fallocator.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -240,7 +240,7 @@ impl Layout {\n     ///\n     /// Returns `Some((k, offset))`, where `k` is layout of the concatenated\n     /// record and `offset` is the relative location, in bytes, of the\n-    /// start of the `next` embedded witnin the concatenated record\n+    /// start of the `next` embedded within the concatenated record\n     /// (assuming that the record itself starts at offset 0).\n     ///\n     /// On arithmetic overflow, returns `None`.\n@@ -297,7 +297,7 @@ impl Layout {\n     ///\n     /// Returns `(k, offset)`, where `k` is layout of the concatenated\n     /// record and `offset` is the relative location, in bytes, of the\n-    /// start of the `next` embedded witnin the concatenated record\n+    /// start of the `next` embedded within the concatenated record\n     /// (assuming that the record itself starts at offset 0).\n     ///\n     /// (The `offset` is always the same as `self.size()`; we use this\n@@ -544,7 +544,7 @@ pub unsafe trait Alloc {\n     /// practice this means implementors should eschew allocating,\n     /// especially from `self` (directly or indirectly).\n     ///\n-    /// Implementions of the allocation and reallocation methods\n+    /// Implementations of the allocation and reallocation methods\n     /// (e.g. `alloc`, `alloc_one`, `realloc`) are discouraged from\n     /// panicking (or aborting) in the event of memory exhaustion;\n     /// instead they should return an appropriate error from the"}, {"sha": "3ed5d2df1aba5c87306ac22f5d019c651dd686f8", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -653,7 +653,7 @@ impl String {\n     /// * `capacity` needs to be the correct value.\n     ///\n     /// Violating these may cause problems like corrupting the allocator's\n-    /// internal datastructures.\n+    /// internal data structures.\n     ///\n     /// The ownership of `ptr` is effectively transferred to the\n     /// `String` which may then deallocate, reallocate or change the"}, {"sha": "5f68e59289d7664b3499c93645b65c95e0e8c258", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -374,7 +374,7 @@ impl<T> Vec<T> {\n     /// * `capacity` needs to be the capacity that the pointer was allocated with.\n     ///\n     /// Violating these may cause problems like corrupting the allocator's\n-    /// internal datastructures. For example it is **not** safe\n+    /// internal data structures. For example it is **not** safe\n     /// to build a `Vec<u8>` from a pointer to a C `char` array and a `size_t`.\n     ///\n     /// The ownership of `ptr` is effectively transferred to the"}, {"sha": "9fb171e7b924e64478dd11aaaa9e8c2f64e20ca1", "filename": "src/libcore/ops/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibcore%2Fops%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibcore%2Fops%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fplace.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -66,7 +66,7 @@ pub trait Place<Data: ?Sized> {\n /// or `Copy`, since the `make_place` method takes `self` by value.\n #[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n pub trait Placer<Data: ?Sized> {\n-    /// `Place` is the intermedate agent guarding the\n+    /// `Place` is the intermediate agent guarding the\n     /// uninitialized state for `Data`.\n     type Place: InPlace<Data>;\n "}, {"sha": "c01938f5e117435c4b8ef806ffd0e2deedaf977c", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -548,7 +548,7 @@ impl<'a> LabelText<'a> {\n     }\n \n     /// Renders text as string suitable for a label in a .dot file.\n-    /// This includes quotes or suitable delimeters.\n+    /// This includes quotes or suitable delimiters.\n     pub fn to_dot_string(&self) -> String {\n         match self {\n             &LabelStr(ref s) => format!(\"\\\"{}\\\"\", s.escape_default()),"}, {"sha": "2a0c76d99bfbd9dc142a69f6d784ed603ae94018", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -87,7 +87,7 @@ pub enum NestedVisitorMap<'this, 'tcx: 'this> {\n     /// Do not visit nested item-like things, but visit nested things\n     /// that are inside of an item-like.\n     ///\n-    /// **This is the most common choice.** A very commmon pattern is\n+    /// **This is the most common choice.** A very common pattern is\n     /// to use `visit_all_item_likes()` as an outer loop,\n     /// and to have the visitor that visits the contents of each item\n     /// using this setting."}, {"sha": "919b205fdf95fb5dbe7ef1eb1f33072b59971312", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -248,7 +248,7 @@ pub struct Map<'hir> {\n     pub forest: &'hir Forest,\n \n     /// Same as the dep_graph in forest, just available with one fewer\n-    /// deref. This is a gratuitious micro-optimization.\n+    /// deref. This is a gratuitous micro-optimization.\n     pub dep_graph: DepGraph,\n \n     /// NodeIds are sequential integers from 0, so we can be"}, {"sha": "7f408900dece267aa6a2fa3c2f13674480deac76", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -496,7 +496,7 @@ impl Crate {\n         &self.impl_items[&id]\n     }\n \n-    /// Visits all items in the crate in some determinstic (but\n+    /// Visits all items in the crate in some deterministic (but\n     /// unspecified) order. If you just need to process every item,\n     /// but don't care about nesting, this method is the best choice.\n     ///"}, {"sha": "3fd7ee276729f392ff93ace1d3c5885e6bd53fa3", "filename": "src/librustc/infer/at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fat.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -169,7 +169,7 @@ impl<'a, 'gcx, 'tcx> At<'a, 'gcx, 'tcx> {\n     }\n \n     /// Sets the \"trace\" values that will be used for\n-    /// error-repporting, but doesn't actually perform any operation\n+    /// error-reporting, but doesn't actually perform any operation\n     /// yet (this is useful when you want to set the trace using\n     /// distinct values from those you wish to operate upon).\n     pub fn trace<T>(self,"}, {"sha": "0d02420457e6b76aa31963d6aba895c3aae31a94", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -589,7 +589,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         (result, map)\n     }\n \n-    /// Searches the region constriants created since `snapshot` was started\n+    /// Searches the region constraints created since `snapshot` was started\n     /// and checks to determine whether any of the skolemized regions created\n     /// in `skol_map` would \"escape\" -- meaning that they are related to\n     /// other regions in some way. If so, the higher-ranked subtyping doesn't"}, {"sha": "d5c1163cfc1b1cf52a822ec9d08725a1133a755d", "filename": "src/librustc/infer/lattice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flattice.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -46,7 +46,7 @@ pub trait LatticeDir<'f, 'gcx: 'f+'tcx, 'tcx: 'f> : TypeRelation<'f, 'gcx, 'tcx>\n     // the LUB/GLB of `a` and `b` as appropriate.\n     //\n     // Subtle hack: ordering *may* be significant here. This method\n-    // relates `v` to `a` first, which may help us to avoid unecessary\n+    // relates `v` to `a` first, which may help us to avoid unnecessary\n     // type variable obligations. See caller for details.\n     fn relate_bound(&mut self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()>;\n }"}, {"sha": "5588b6d9add166a10c86bf8c6b2e6cfc48c8ea52", "filename": "src/librustc/infer/region_inference/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -128,7 +128,7 @@ pub enum UndoLogEntry<'tcx> {\n     /// We added the given `given`\n     AddGiven(Region<'tcx>, ty::RegionVid),\n \n-    /// We added a GLB/LUB \"combinaton variable\"\n+    /// We added a GLB/LUB \"combination variable\"\n     AddCombination(CombineMapType, TwoRegions<'tcx>),\n \n     /// During skolemization, we sometimes purge entries from the undo"}, {"sha": "17b5f6ad95439f072c71b3bec47733aec36ff9c9", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -69,7 +69,7 @@ pub struct LintStore {\n     /// is true if the lint group was added by a plugin.\n     lint_groups: FxHashMap<&'static str, (Vec<LintId>, bool)>,\n \n-    /// Extra info for future incompatibility lints, descibing the\n+    /// Extra info for future incompatibility lints, describing the\n     /// issue or RFC that caused the incompatibility.\n     future_incompatible: FxHashMap<LintId, FutureIncompatibleInfo>,\n }"}, {"sha": "74ce68b351df9d48d7e11b64a5827e81732825ec", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -695,7 +695,7 @@ impl<'tcx> Debug for TerminatorKind<'tcx> {\n \n impl<'tcx> TerminatorKind<'tcx> {\n     /// Write the \"head\" part of the terminator; that is, its name and the data it uses to pick the\n-    /// successor basic block, if any. The only information not inlcuded is the list of possible\n+    /// successor basic block, if any. The only information not included is the list of possible\n     /// successors, which may be rendered differently between the text and the graphviz format.\n     pub fn fmt_head<W: Write>(&self, fmt: &mut W) -> fmt::Result {\n         use self::TerminatorKind::*;"}, {"sha": "3aea0722d0e2f8c7c904e01e19221ffdcb560c45", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -112,7 +112,7 @@ pub struct Session {\n \n     /// Map from imported macro spans (which consist of\n     /// the localized span for the macro body) to the\n-    /// macro name and defintion span in the source crate.\n+    /// macro name and definition span in the source crate.\n     pub imported_macro_spans: RefCell<HashMap<Span, (String, Span)>>,\n \n     incr_comp_session: RefCell<IncrCompSession>,\n@@ -828,7 +828,7 @@ pub fn compile_result_from_err_count(err_count: usize) -> CompileResult {\n #[inline(never)]\n pub fn bug_fmt(file: &'static str, line: u32, args: fmt::Arguments) -> ! {\n     // this wrapper mostly exists so I don't have to write a fully\n-    // qualified path of None::<Span> inside the bug!() macro defintion\n+    // qualified path of None::<Span> inside the bug!() macro definition\n     opt_span_bug_fmt(file, line, None::<Span>, args);\n }\n "}, {"sha": "f23071de64744d8d8094950b5c6112aa6ebdb0d2", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -111,8 +111,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    // returns if `cond` not occuring implies that `error` does not occur - i.e. that\n-    // `error` occuring implies that `cond` occurs.\n+    // returns if `cond` not occurring implies that `error` does not occur - i.e. that\n+    // `error` occurring implies that `cond` occurs.\n     fn error_implies(&self,\n                      cond: &ty::Predicate<'tcx>,\n                      error: &ty::Predicate<'tcx>)"}, {"sha": "e70258007e463db096c68e861ae930083f22603c", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -1364,7 +1364,7 @@ impl<'tcx> ProjectionCache<'tcx> {\n     }\n \n     /// Try to start normalize `key`; returns an error if\n-    /// normalization already occured (this error corresponds to a\n+    /// normalization already occurred (this error corresponds to a\n     /// cache hit, so it's actually a good thing).\n     fn try_start(&mut self, key: ty::ProjectionTy<'tcx>)\n                  -> Result<(), ProjectionCacheEntry<'tcx>> {"}, {"sha": "8b31cb599e45dbbaa7f62505af2bcac537f47b2f", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'gcx, 'tcx> Children {\n     }\n \n     /// Attempt to insert an impl into this set of children, while comparing for\n-    /// specialiation relationships.\n+    /// specialization relationships.\n     fn insert(&mut self,\n               tcx: TyCtxt<'a, 'gcx, 'tcx>,\n               impl_def_id: DefId,\n@@ -206,7 +206,7 @@ impl<'a, 'gcx, 'tcx> Graph {\n \n         // if the reference itself contains an earlier error (e.g., due to a\n         // resolution failure), then we just insert the impl at the top level of\n-        // the graph and claim that there's no overlap (in order to supress\n+        // the graph and claim that there's no overlap (in order to suppress\n         // bogus errors).\n         if trait_ref.references_error() {\n             debug!(\"insert: inserting dummy node for erroneous TraitRef {:?}, \\"}, {"sha": "896682e2370e2a9e7daebf370752e64162a03906", "filename": "src/librustc/ty/inhabitedness/def_id_forest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fdef_id_forest.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -24,7 +24,7 @@ use ty::{DefId, DefIdTree};\n #[derive(Clone)]\n pub struct DefIdForest {\n     /// The minimal set of DefIds required to represent the whole set.\n-    /// If A and B are DefIds in the DefIdForest, and A is a desecendant\n+    /// If A and B are DefIds in the DefIdForest, and A is a descendant\n     /// of B, then only B will be in root_ids.\n     /// We use a SmallVec here because (for its use for cacheing inhabitedness)\n     /// its rare that this will contain even two ids.\n@@ -61,7 +61,7 @@ impl<'a, 'gcx, 'tcx> DefIdForest {\n         self.root_ids.is_empty()\n     }\n \n-    /// Test whether the forest conains a given DefId.\n+    /// Test whether the forest contains a given DefId.\n     pub fn contains(&self,\n                     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                     id: DefId) -> bool"}, {"sha": "76a20ed8f30233e201d5668c7f436efe6a635cd7", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -125,7 +125,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     /// If possible, this pushes a global path resolving to `external_def_id` that is visible\n     /// from at least one local module and returns true. If the crate defining `external_def_id` is\n-    /// declared with an `extern crate`, the path is guarenteed to use the `extern crate`.\n+    /// declared with an `extern crate`, the path is guaranteed to use the `extern crate`.\n     pub fn try_push_visible_item_path<T>(self, buffer: &mut T, external_def_id: DefId) -> bool\n         where T: ItemPathBuffer\n     {"}, {"sha": "a640da31eec257a08ff2d81a77e605970b1e714b", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -587,7 +587,7 @@ macro_rules! define_maps {\n                 }\n \n                 // FIXME(eddyb) Get more valid Span's on queries.\n-                // def_span guard is necesary to prevent a recursive loop,\n+                // def_span guard is necessary to prevent a recursive loop,\n                 // default_span calls def_span query internally.\n                 if span == DUMMY_SP && stringify!($name) != \"def_span\" {\n                     span = key.default_span(tcx)"}, {"sha": "885be8464eb304ece548de0d6a6c0114845c8c73", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -224,7 +224,7 @@ pub trait MemoizationMap {\n     type Key: Clone;\n     type Value: Clone;\n \n-    /// If `key` is present in the map, return the valuee,\n+    /// If `key` is present in the map, return the value,\n     /// otherwise invoke `op` and store the value in the map.\n     ///\n     /// NB: if the receiver is a `DepTrackingMap`, special care is"}, {"sha": "c34bf4c3d284dc5bdcc76853572683e584de4bd2", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -472,7 +472,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n \n                     if new_loan.span == old_loan.span {\n                         // Both borrows are happening in the same place\n-                        // Meaning the borrow is occuring in a loop\n+                        // Meaning the borrow is occurring in a loop\n                         err.span_label(\n                                 new_loan.span,\n                                 format!(\"mutable borrow starts here in previous \\"}, {"sha": "a1581b1604123d92918de0725650a954231455c9", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'tcx> ConstContext<'a, 'tcx> {\n     }\n \n     /// Evaluate a constant expression in a context where the expression isn't\n-    /// guaranteed to be evaluatable.\n+    /// guaranteed to be evaluable.\n     pub fn eval(&self, e: &Expr) -> EvalResult<'tcx> {\n         if self.tables.tainted_by_errors {\n             signal!(e, TypeckError);"}, {"sha": "83bed33b1118c713db27ed2e84200b9c0606ea65", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -974,7 +974,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     passes.push_pass(MIR_CONST, mir::transform::type_check::TypeckMir);\n     passes.push_pass(MIR_CONST, mir::transform::rustc_peek::SanityCheck);\n \n-    // We compute \"constant qualifications\" betwen MIR_CONST and MIR_VALIDATED.\n+    // We compute \"constant qualifications\" between MIR_CONST and MIR_VALIDATED.\n \n     // What we need to run borrowck etc.\n     passes.push_pass(MIR_VALIDATED, mir::transform::qualify_consts::QualifyAndPromoteConstants);"}, {"sha": "ce64f88d18e1fd4dff69b96ea1b2798fd6e7c4cf", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -113,7 +113,7 @@ pub struct Scope<'tcx> {\n     /// for unwinding, for several reasons:\n     ///  * clang doesn't emit llvm.lifetime.end for C++ unwinding\n     ///  * LLVM's memory dependency analysis can't handle it atm\n-    ///  * pollutting the cleanup MIR with StorageDead creates\n+    ///  * polluting the cleanup MIR with StorageDead creates\n     ///    landing pads even though there's no actual destructors\n     ///  * freeing up stack space has no effect during unwinding\n     needs_cleanup: bool,"}, {"sha": "7c0137b18c02ea2dd3695436037402b453212b2e", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -333,11 +333,11 @@ pub trait BitDenotation {\n     /// basic block) according to the effects of evaluating statement.\n     ///\n     /// This is used, in particular, for building up the\n-    /// \"transfer-function\" represnting the overall-effect of the\n+    /// \"transfer-function\" representing the overall-effect of the\n     /// block, represented via GEN and KILL sets.\n     ///\n     /// The statement is identified as `bb_data[idx_stmt]`, where\n-    /// `bb_data` is the sequence of statements identifed by `bb` in\n+    /// `bb_data` is the sequence of statements identified by `bb` in\n     /// the MIR.\n     fn statement_effect(&self,\n                         sets: &mut BlockSets<Self::Idx>,\n@@ -349,7 +349,7 @@ pub trait BitDenotation {\n     /// the terminator.\n     ///\n     /// This is used, in particular, for building up the\n-    /// \"transfer-function\" represnting the overall-effect of the\n+    /// \"transfer-function\" representing the overall-effect of the\n     /// block, represented via GEN and KILL sets.\n     ///\n     /// The effects applied here cannot depend on which branch the"}, {"sha": "89de847231c85e09c1986f42f3d778ccc06e792a", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! This pass erases all early-bound regions from the types occuring in the MIR.\n+//! This pass erases all early-bound regions from the types occurring in the MIR.\n //! We want to do this once just before trans, so trans does not have to take\n //! care erasing regions all over the place.\n //! NOTE:  We do NOT erase regions of statements that are relevant for"}, {"sha": "da170e7fe22ca77f6e1520c44ed15735fd5a621a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -1621,7 +1621,7 @@ impl<'a> Resolver<'a> {\n             return Some(module.parent.unwrap());\n         }\n \n-        let mut module_expansion = module.expansion.modern(); // for backward compatability\n+        let mut module_expansion = module.expansion.modern(); // for backward compatibility\n         while let Some(parent) = module.parent {\n             let parent_expansion = parent.expansion.modern();\n             if module_expansion.is_descendant_of(parent_expansion) &&"}, {"sha": "8dd191f4375ed1b81c0ac4883c5c6562dd044cee", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -109,7 +109,7 @@ impl<'b, O: DumpOutput + 'b> JsonDumper<O> {\n         }\n         if data.kind == DefKind::Mod && data.span.file_name.to_str().unwrap() != data.value {\n             // If the module is an out-of-line defintion, then we'll make the\n-            // defintion the first character in the module's file and turn the\n+            // definition the first character in the module's file and turn the\n             // the declaration into a reference to it.\n             let rf = Ref {\n                 kind: RefKind::Mod,"}, {"sha": "6ef499694aa4f964e90649832010841df59aab2d", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -387,7 +387,7 @@ impl Sig for ast::Item {\n \n                 sig.text.push('(');\n                 for i in &decl.inputs {\n-                    // FIXME shoudl descend into patterns to add defs.\n+                    // FIXME should descend into patterns to add defs.\n                     sig.text.push_str(&pprust::pat_to_string(&i.pat));\n                     sig.text.push_str(\": \");\n                     let nested = i.ty.make(offset + sig.text.len(), Some(i.id), scx)?;\n@@ -922,7 +922,7 @@ fn make_method_signature(id: NodeId,\n \n     sig.text.push('(');\n     for i in &m.decl.inputs {\n-        // FIXME shoudl descend into patterns to add defs.\n+        // FIXME should descend into patterns to add defs.\n         sig.text.push_str(&pprust::pat_to_string(&i.pat));\n         sig.text.push_str(\": \");\n         let nested = i.ty.make(sig.text.len(), Some(i.id), scx)?;"}, {"sha": "b4a2891f94c2af91ea278df98f9d82940afdfc72", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -488,7 +488,7 @@ impl Lifetime {\n     // on), and `ptr` is nonzero-sized, then extracts the size of `ptr`\n     // and the intrinsic for `lt` and passes them to `emit`, which is in\n     // charge of generating code to call the passed intrinsic on whatever\n-    // block of generated code is targetted for the intrinsic.\n+    // block of generated code is targeted for the intrinsic.\n     //\n     // If LLVM lifetime intrinsic support is disabled (i.e.  optimizations\n     // off) or `ptr` is zero-sized, then no-op (does not call `emit`)."}, {"sha": "8cb2c2809f4f32abb33045eea53ec9ee8ef9f9ba", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -36,7 +36,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                           t: Ty<'tcx>,\n                                           qualified: bool,\n                                           output: &mut String) {\n-    // When targeting MSVC, emit C++ style type names for compatability with\n+    // When targeting MSVC, emit C++ style type names for compatibility with\n     // .natvis visualizers (and perhaps other existing native debuggers?)\n     let cpp_like_names = cx.sess().target.target.options.is_like_msvc;\n "}, {"sha": "d0f7f27d5a81c3791218c2062fbf78e71a5e0a66", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             (scope, source_info.span)\n         } else {\n             // Walk up the macro expansion chain until we reach a non-expanded span.\n-            // We also stop at the function body level because no line stepping can occurr\n+            // We also stop at the function body level because no line stepping can occur\n             // at the level above that.\n             let mut span = source_info.span;\n             while span.ctxt != NO_EXPANSION && span.ctxt != self.mir.span.ctxt {"}, {"sha": "a1c987f22e053d07fccdd4d9c7a9dc019ab8e9a5", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -219,7 +219,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// `lookup_method_in_trait` is used for overloaded operators.\n     /// It does a very narrow slice of what the normal probe/confirm path does.\n     /// In particular, it doesn't really do any probing: it simply constructs\n-    /// an obligation for aparticular trait with the given self-type and checks\n+    /// an obligation for a particular trait with the given self-type and checks\n     /// whether that trait is implemented.\n     ///\n     /// FIXME(#18741) -- It seems likely that we can consolidate some of this"}, {"sha": "17611af5ac410b4f75b2d3d3f11b7fe1c33f1990", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -529,7 +529,7 @@ pub struct FnCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     ///   `foo(return)`; we warn on the `foo()` expression. (We then\n     ///   update the flag to `WarnedAlways` to suppress duplicate\n     ///   reports.) Similarly, if we traverse to a fresh statement (or\n-    ///   tail expression) from a `Always` setting, we will isssue a\n+    ///   tail expression) from a `Always` setting, we will issue a\n     ///   warning. This corresponds to something like `{return;\n     ///   foo();}` or `{return; 22}`, where we would warn on the\n     ///   `foo()` or `22`.\n@@ -538,7 +538,7 @@ pub struct FnCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     ///   (including the \"return slot\") of type `!`.  This is allowed\n     ///   if **either** the type of value being assigned is `!`, which\n     ///   means the current code is dead, **or** the expression's\n-    ///   divering flag is true, which means that a divering value was\n+    ///   diverging flag is true, which means that a diverging value was\n     ///   wrapped (e.g., `let x: ! = foo(return)`).\n     ///\n     /// To repeat the last point: an expression represents dead-code\n@@ -1895,7 +1895,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         value.fold_with(&mut BottomUpFolder { tcx: self.tcx, fldop: |ty| {\n             if let ty::TyAnon(def_id, substs) = ty.sty {\n                 // Use the same type variable if the exact same TyAnon appears more\n-                // than once in the return type (e.g. if it's pased to a type alias).\n+                // than once in the return type (e.g. if it's passed to a type alias).\n                 let id = self.tcx.hir.as_local_node_id(def_id).unwrap();\n                 if let Some(ty_var) = self.anon_types.borrow().get(&id) {\n                     return ty_var;\n@@ -4244,7 +4244,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// Given a `NodeId`, return the `FnDecl` of the method it is enclosed by and whether a\n-    /// suggetion can be made, `None` otherwise.\n+    /// suggestion can be made, `None` otherwise.\n     pub fn get_fn_decl(&self, blk_id: ast::NodeId) -> Option<(hir::FnDecl, bool)> {\n         // Get enclosing Fn, if it is a function or a trait method, unless there's a `loop` or\n         // `while` before reaching it, as block tail returns are not available in them.\n@@ -4312,7 +4312,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// ```\n     ///\n     /// This routine checks if the return expression in a block would make sense on its own as a\n-    /// statement and the return type has been left as defaultor has been specified as `()`. If so,\n+    /// statement and the return type has been left as default or has been specified as `()`. If so,\n     /// it suggests adding a semicolon.\n     fn suggest_missing_semicolon(&self,\n                                      err: &mut DiagnosticBuilder<'tcx>,"}, {"sha": "31e14a6b630d277885381555534d65ae31524469", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -255,7 +255,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n         // We want to ensure:\n         //\n         // 1) that there are no items contained within\n-        // the trait defintion\n+        // the trait definition\n         //\n         // 2) that the definition doesn't violate the no-super trait rule\n         // for auto traits."}, {"sha": "1e692abaff2f9cf9c479acbfdf2b052c6752afe7", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -657,7 +657,7 @@ impl OpenOptions {\n     /// This function will return an error under a number of different\n     /// circumstances. Some of these error conditions are listed here, together\n     /// with their [`ErrorKind`]. The mapping to [`ErrorKind`]s is not part of\n-    /// the compatiblity contract of the function, especially the `Other` kind\n+    /// the compatibility contract of the function, especially the `Other` kind\n     /// might change to more specific kinds in the future.\n     ///\n     /// * [`NotFound`]: The specified file does not exist and neither `create`"}, {"sha": "20fd50ff6309d8eb1a34abd7c045629b0e417b91", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -351,7 +351,7 @@ impl TcpStream {\n         self.0.write_timeout()\n     }\n \n-    /// Receives data on the socket from the remote adress to which it is\n+    /// Receives data on the socket from the remote address to which it is\n     /// connected, without removing that data from the queue. On success,\n     /// returns the number of bytes peeked.\n     ///"}, {"sha": "9aff98978853649e7e050d048d731c67116bc241", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -622,7 +622,7 @@ impl UdpSocket {\n         self.0.recv(buf)\n     }\n \n-    /// Receives data on the socket from the remote adress to which it is\n+    /// Receives data on the socket from the remote address to which it is\n     /// connected, without removing that data from the queue. On success,\n     /// returns the number of bytes peeked.\n     ///"}, {"sha": "97b09b7e2ad996b28c244adabffe7ed0d80b2063", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -37,7 +37,7 @@ pub use panicking::{take_hook, set_hook, PanicInfo, Location};\n /// In Rust a function can \"return\" early if it either panics or calls a\n /// function which transitively panics. This sort of control flow is not always\n /// anticipated, and has the possibility of causing subtle bugs through a\n-/// combination of two criticial components:\n+/// combination of two critical components:\n ///\n /// 1. A data structure is in a temporarily invalid state when the thread\n ///    panics."}, {"sha": "99567bd08bbf49c894285634abeee5ba511a2bed", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -171,7 +171,7 @@ pub fn take_hook() -> Box<Fn(&PanicInfo) + 'static + Sync + Send> {\n /// use std::panic;\n ///\n /// panic::set_hook(Box::new(|panic_info| {\n-///     println!(\"panic occured: {:?}\", panic_info.payload().downcast_ref::<&str>().unwrap());\n+///     println!(\"panic occurred: {:?}\", panic_info.payload().downcast_ref::<&str>().unwrap());\n /// }));\n ///\n /// panic!(\"Normal panic\");\n@@ -196,7 +196,7 @@ impl<'a> PanicInfo<'a> {\n     /// use std::panic;\n     ///\n     /// panic::set_hook(Box::new(|panic_info| {\n-    ///     println!(\"panic occured: {:?}\", panic_info.payload().downcast_ref::<&str>().unwrap());\n+    ///     println!(\"panic occurred: {:?}\", panic_info.payload().downcast_ref::<&str>().unwrap());\n     /// }));\n     ///\n     /// panic!(\"Normal panic\");\n@@ -221,9 +221,10 @@ impl<'a> PanicInfo<'a> {\n     ///\n     /// panic::set_hook(Box::new(|panic_info| {\n     ///     if let Some(location) = panic_info.location() {\n-    ///         println!(\"panic occured in file '{}' at line {}\", location.file(), location.line());\n+    ///         println!(\"panic occurred in file '{}' at line {}\", location.file(),\n+    ///             location.line());\n     ///     } else {\n-    ///         println!(\"panic occured but can't get location information...\");\n+    ///         println!(\"panic occurred but can't get location information...\");\n     ///     }\n     /// }));\n     ///\n@@ -249,9 +250,9 @@ impl<'a> PanicInfo<'a> {\n ///\n /// panic::set_hook(Box::new(|panic_info| {\n ///     if let Some(location) = panic_info.location() {\n-///         println!(\"panic occured in file '{}' at line {}\", location.file(), location.line());\n+///         println!(\"panic occurred in file '{}' at line {}\", location.file(), location.line());\n ///     } else {\n-///         println!(\"panic occured but can't get location information...\");\n+///         println!(\"panic occurred but can't get location information...\");\n ///     }\n /// }));\n ///\n@@ -275,9 +276,9 @@ impl<'a> Location<'a> {\n     ///\n     /// panic::set_hook(Box::new(|panic_info| {\n     ///     if let Some(location) = panic_info.location() {\n-    ///         println!(\"panic occured in file '{}'\", location.file());\n+    ///         println!(\"panic occurred in file '{}'\", location.file());\n     ///     } else {\n-    ///         println!(\"panic occured but can't get location information...\");\n+    ///         println!(\"panic occurred but can't get location information...\");\n     ///     }\n     /// }));\n     ///\n@@ -297,9 +298,9 @@ impl<'a> Location<'a> {\n     ///\n     /// panic::set_hook(Box::new(|panic_info| {\n     ///     if let Some(location) = panic_info.location() {\n-    ///         println!(\"panic occured at line {}\", location.line());\n+    ///         println!(\"panic occurred at line {}\", location.line());\n     ///     } else {\n-    ///         println!(\"panic occured but can't get location information...\");\n+    ///         println!(\"panic occurred but can't get location information...\");\n     ///     }\n     /// }));\n     ///\n@@ -320,9 +321,9 @@ impl<'a> Location<'a> {\n     ///\n     /// panic::set_hook(Box::new(|panic_info| {\n     ///     if let Some(location) = panic_info.location() {\n-    ///         println!(\"panic occured at column {}\", location.column());\n+    ///         println!(\"panic occurred at column {}\", location.column());\n     ///     } else {\n-    ///         println!(\"panic occured but can't get location information...\");\n+    ///         println!(\"panic occurred but can't get location information...\");\n     ///     }\n     /// }));\n     ///"}, {"sha": "c52899db4373364ba2f769b2c08fe982308197db", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -906,7 +906,7 @@ mod prim_ref { }\n /// These markers can be combined, so `unsafe extern \"stdcall\" fn()` is a valid type.\n ///\n /// Like references in rust, function pointers are assumed to not be null, so if you want to pass a\n-/// function pointer over FFI and be able to accomodate null pointers, make your type\n+/// function pointer over FFI and be able to accommodate null pointers, make your type\n /// `Option<fn()>` with your required signature.\n ///\n /// Function pointers implement the following traits:"}, {"sha": "5d4edc2cf92c2bfd056f25853fbbf2e6f9623807", "filename": "src/libstd/sys/redox/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -121,7 +121,7 @@ pub trait OpenOptionsExt {\n     #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n     fn mode(&mut self, mode: u32) -> &mut Self;\n \n-    /// Pass custom flags to the `flags` agument of `open`.\n+    /// Pass custom flags to the `flags` argument of `open`.\n     ///\n     /// The bits that define the access mode are masked out with `O_ACCMODE`, to\n     /// ensure they do not interfere with the access mode set by Rusts options."}, {"sha": "e68e180acf1c4cdf9a3c3dd5785c20e30af33ee3", "filename": "src/libstd/sys/redox/ext/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -47,7 +47,7 @@ pub trait CommandExt {\n     /// # Notes\n     ///\n     /// This closure will be run in the context of the child process after a\n-    /// `fork`. This primarily means that any modificatons made to memory on\n+    /// `fork`. This primarily means that any modifications made to memory on\n     /// behalf of this closure will **not** be visible to the parent process.\n     /// This is often a very constrained environment where normal operations\n     /// like `malloc` or acquiring a mutex are not guaranteed to work (due to"}, {"sha": "a94585723a1eee12ad03f0ce8eb62c7933d9a17f", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -46,7 +46,7 @@ pub trait FileExt {\n     ///\n     /// The current file cursor is not affected by this function.\n     ///\n-    /// When writing beyond the end of the file, the file is appropiately\n+    /// When writing beyond the end of the file, the file is appropriately\n     /// extended and the intermediate bytes are initialized with the value 0.\n     ///\n     /// Note that similar to `File::write`, it is not an error to return a\n@@ -168,7 +168,7 @@ pub trait OpenOptionsExt {\n     #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n     fn mode(&mut self, mode: u32) -> &mut Self;\n \n-    /// Pass custom flags to the `flags` agument of `open`.\n+    /// Pass custom flags to the `flags` argument of `open`.\n     ///\n     /// The bits that define the access mode are masked out with `O_ACCMODE`, to\n     /// ensure they do not interfere with the access mode set by Rusts options."}, {"sha": "d9ab07fe5097838300c8ea32d17dbf7fa20bf978", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -327,7 +327,7 @@ impl UnixStream {\n     ///\n     /// The returned `UnixStream` is a reference to the same stream that this\n     /// object references. Both handles will read and write the same stream of\n-    /// data, and options set on one stream will be propogated to the other\n+    /// data, and options set on one stream will be propagated to the other\n     /// stream.\n     ///\n     /// # Examples"}, {"sha": "cde21b089a20df7910f782b9946ba7cb556bba77", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -47,7 +47,7 @@ pub trait CommandExt {\n     /// # Notes\n     ///\n     /// This closure will be run in the context of the child process after a\n-    /// `fork`. This primarily means that any modificatons made to memory on\n+    /// `fork`. This primarily means that any modifications made to memory on\n     /// behalf of this closure will **not** be visible to the parent process.\n     /// This is often a very constrained environment where normal operations\n     /// like `malloc` or acquiring a mutex are not guaranteed to work (due to"}, {"sha": "d58a3505154dd9f74b27bd60da921dbff9ec52a6", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -66,7 +66,7 @@ pub trait FileExt {\n     /// from the current cursor. The current cursor **is** affected by this\n     /// function, it is set to the end of the write.\n     ///\n-    /// When writing beyond the end of the file, the file is appropiately\n+    /// When writing beyond the end of the file, the file is appropriately\n     /// extended and the intermediate bytes are left uninitialized.\n     ///\n     /// Note that similar to `File::write`, it is not an error to return a"}, {"sha": "38ef79822c7b5dc6d68fd5e14607546cf7889a8f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -563,8 +563,8 @@ pub enum PatKind {\n     TupleStruct(Path, Vec<P<Pat>>, Option<usize>),\n \n     /// A possibly qualified path pattern.\n-    /// Unquailfied path patterns `A::B::C` can legally refer to variants, structs, constants\n-    /// or associated constants. Quailfied path patterns `<A>::B::C`/`<A as Trait>::B::C` can\n+    /// Unqualified path patterns `A::B::C` can legally refer to variants, structs, constants\n+    /// or associated constants. Qualified path patterns `<A>::B::C`/`<A as Trait>::B::C` can\n     /// only legally refer to associated constants.\n     Path(Option<QSelf>, Path),\n \n@@ -1838,7 +1838,7 @@ pub struct Item {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum ItemKind {\n-    /// An`extern crate` item, with optional original crate name.\n+    /// An `extern crate` item, with optional original crate name.\n     ///\n     /// E.g. `extern crate foo` or `extern crate foo_bar as foo`\n     ExternCrate(Option<Name>),"}, {"sha": "6c48b4cadd84fdcf9235cdd273738acc3a5c03a3", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab86fbab281ca059731c31fa2aee5d9afc7e6dc/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=3ab86fbab281ca059731c31fa2aee5d9afc7e6dc", "patch": "@@ -761,7 +761,7 @@ mod tests {\n     }\n \n     /// Given a string like \" ~~~~~~~~~~~~ \", produces a span\n-    /// coverting that range. The idea is that the string has the same\n+    /// converting that range. The idea is that the string has the same\n     /// length as the input, and we uncover the byte positions.  Note\n     /// that this can span lines and so on.\n     fn span_from_selection(input: &str, selection: &str) -> Span {\n@@ -771,7 +771,7 @@ mod tests {\n         Span { lo: BytePos(left_index), hi: BytePos(right_index + 1), ctxt: NO_EXPANSION }\n     }\n \n-    /// Test span_to_snippet and span_to_lines for a span coverting 3\n+    /// Test span_to_snippet and span_to_lines for a span converting 3\n     /// lines in the middle of a file.\n     #[test]\n     fn span_to_snippet_and_lines_spanning_multiple_lines() {"}]}