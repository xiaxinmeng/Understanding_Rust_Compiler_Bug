{"sha": "762db5138e3c859f3dd736a46798615c561831a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MmRiNTEzOGUzYzg1OWYzZGQ3MzZhNDY3OTg2MTVjNTYxODMxYTE=", "commit": {"author": {"name": "Seiichi Uchida", "email": "topecongiro@localhost.localdomain", "date": "2017-05-15T13:55:45Z"}, "committer": {"name": "Seiichi Uchida", "email": "topecongiro@localhost.localdomain", "date": "2017-05-15T13:55:45Z"}, "message": "Format source codes", "tree": {"sha": "6f3fd0a8e7ffcf0fd796035fd3dca365444cf9d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f3fd0a8e7ffcf0fd796035fd3dca365444cf9d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/762db5138e3c859f3dd736a46798615c561831a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/762db5138e3c859f3dd736a46798615c561831a1", "html_url": "https://github.com/rust-lang/rust/commit/762db5138e3c859f3dd736a46798615c561831a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/762db5138e3c859f3dd736a46798615c561831a1/comments", "author": null, "committer": null, "parents": [{"sha": "79ba34c60758f02b3aded90bae3fb9983f550234", "url": "https://api.github.com/repos/rust-lang/rust/commits/79ba34c60758f02b3aded90bae3fb9983f550234", "html_url": "https://github.com/rust-lang/rust/commit/79ba34c60758f02b3aded90bae3fb9983f550234"}], "stats": {"total": 99, "additions": 49, "deletions": 50}, "files": [{"sha": "7fb71c2e8b42e0588138db2be6868287ab78d0d7", "filename": "src/expr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/762db5138e3c859f3dd736a46798615c561831a1/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762db5138e3c859f3dd736a46798615c561831a1/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=762db5138e3c859f3dd736a46798615c561831a1", "patch": "@@ -1961,14 +1961,14 @@ pub fn rewrite_tuple<'a, I>(context: &RewriteContext,\n         // 3 = \"(\" + \",)\"\n         let nested_shape = try_opt!(shape.sub_width(3)).visual_indent(1);\n         return items\n-                   .next()\n-                   .unwrap()\n-                   .rewrite(context, nested_shape)\n-                   .map(|s| if context.config.spaces_within_parens {\n-                            format!(\"( {}, )\", s)\n-                        } else {\n-                            format!(\"({},)\", s)\n-                        });\n+            .next()\n+            .unwrap()\n+            .rewrite(context, nested_shape)\n+            .map(|s| if context.config.spaces_within_parens {\n+                     format!(\"( {}, )\", s)\n+                 } else {\n+                     format!(\"({},)\", s)\n+                 });\n     }\n \n     let list_lo = context.codemap.span_after(span, \"(\");"}, {"sha": "6e58784c1b836ed3b0b66699e01e0a9159adc87a", "filename": "src/issues.rs", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/762db5138e3c859f3dd736a46798615c561831a1/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762db5138e3c859f3dd736a46798615c561831a1/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=762db5138e3c859f3dd736a46798615c561831a1", "patch": "@@ -131,16 +131,16 @@ impl BadIssueSeeker {\n             todo_idx += 1;\n             if todo_idx == TO_DO_CHARS.len() {\n                 return Seeking::Number {\n-                           issue: Issue {\n-                               issue_type: IssueType::Todo,\n-                               missing_number: if let ReportTactic::Unnumbered = self.report_todo {\n-                                   true\n-                               } else {\n-                                   false\n-                               },\n-                           },\n-                           part: NumberPart::OpenParen,\n-                       };\n+                    issue: Issue {\n+                        issue_type: IssueType::Todo,\n+                        missing_number: if let ReportTactic::Unnumbered = self.report_todo {\n+                            true\n+                        } else {\n+                            false\n+                        },\n+                    },\n+                    part: NumberPart::OpenParen,\n+                };\n             }\n             fixme_idx = 0;\n         } else if self.report_fixme.is_enabled() && c == FIX_ME_CHARS[fixme_idx] {\n@@ -149,17 +149,16 @@ impl BadIssueSeeker {\n             fixme_idx += 1;\n             if fixme_idx == FIX_ME_CHARS.len() {\n                 return Seeking::Number {\n-                           issue: Issue {\n-                               issue_type: IssueType::Fixme,\n-                               missing_number: if let ReportTactic::Unnumbered =\n-                    self.report_fixme {\n-                                   true\n-                               } else {\n-                                   false\n-                               },\n-                           },\n-                           part: NumberPart::OpenParen,\n-                       };\n+                    issue: Issue {\n+                        issue_type: IssueType::Fixme,\n+                        missing_number: if let ReportTactic::Unnumbered = self.report_fixme {\n+                            true\n+                        } else {\n+                            false\n+                        },\n+                    },\n+                    part: NumberPart::OpenParen,\n+                };\n             }\n             todo_idx = 0;\n         } else {\n@@ -182,10 +181,10 @@ impl BadIssueSeeker {\n             return IssueClassification::Bad(issue);\n         } else if c == ')' {\n             return if let NumberPart::CloseParen = part {\n-                       IssueClassification::Good\n-                   } else {\n-                       IssueClassification::Bad(issue)\n-                   };\n+                IssueClassification::Good\n+            } else {\n+                IssueClassification::Bad(issue)\n+            };\n         }\n \n         match part {"}, {"sha": "5eb1414c2e068428b09db9c80112c7671e210acc", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/762db5138e3c859f3dd736a46798615c561831a1/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762db5138e3c859f3dd736a46798615c561831a1/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=762db5138e3c859f3dd736a46798615c561831a1", "patch": "@@ -1104,7 +1104,7 @@ fn format_tuple_struct(context: &RewriteContext,\n         // know that earlier, so the where clause will not be indented properly.\n         result.push('\\n');\n         result.push_str(&(offset.block_only() + (context.config.tab_spaces - 1))\n-                             .to_string(context.config));\n+                            .to_string(context.config));\n     }\n     result.push_str(&where_clause_str);\n "}, {"sha": "8f998e42035b59720d6332396d548bc35df3c578", "filename": "src/macros.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/762db5138e3c859f3dd736a46798615c561831a1/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762db5138e3c859f3dd736a46798615c561831a1/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=762db5138e3c859f3dd736a46798615c561831a1", "patch": "@@ -94,13 +94,13 @@ pub fn rewrite_macro(mac: &ast::Mac,\n \n     if mac.node.tts.is_empty() && !contains_comment(&context.snippet(mac.span)) {\n         return match style {\n-                   MacroStyle::Parens if position == MacroPosition::Item => {\n-                       Some(format!(\"{}();\", macro_name))\n-                   }\n-                   MacroStyle::Parens => Some(format!(\"{}()\", macro_name)),\n-                   MacroStyle::Brackets => Some(format!(\"{}[]\", macro_name)),\n-                   MacroStyle::Braces => Some(format!(\"{}{{}}\", macro_name)),\n-               };\n+            MacroStyle::Parens if position == MacroPosition::Item => {\n+                Some(format!(\"{}();\", macro_name))\n+            }\n+            MacroStyle::Parens => Some(format!(\"{}()\", macro_name)),\n+            MacroStyle::Brackets => Some(format!(\"{}[]\", macro_name)),\n+            MacroStyle::Braces => Some(format!(\"{}{{}}\", macro_name)),\n+        };\n     }\n \n     let mut parser = tts_to_parser(context.parse_session, mac.node.tts.clone());"}, {"sha": "843556b9b38ef156207e4b620c52b6f56c463750", "filename": "src/missed_spans.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/762db5138e3c859f3dd736a46798615c561831a1/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762db5138e3c859f3dd736a46798615c561831a1/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=762db5138e3c859f3dd736a46798615c561831a1", "patch": "@@ -138,8 +138,8 @@ impl<'a> FmtVisitor<'a> {\n \n                 if rewrite_next_comment &&\n                    !self.config\n-                        .file_lines\n-                        .intersects_range(file_name, cur_line, cur_line + subslice_num_lines) {\n+                       .file_lines\n+                       .intersects_range(file_name, cur_line, cur_line + subslice_num_lines) {\n                     rewrite_next_comment = false;\n                 }\n \n@@ -164,17 +164,17 @@ impl<'a> FmtVisitor<'a> {\n                                                    Shape::legacy(comment_width,\n                                                                  self.block_indent),\n                                                    self.config)\n-                                           .unwrap());\n+                                          .unwrap());\n \n                     last_wspace = None;\n                     line_start = offset + subslice.len();\n \n                     if let Some('/') = subslice.chars().skip(1).next() {\n                         // check that there are no contained block comments\n                         if !subslice\n-                                .split('\\n')\n-                                .map(|s| s.trim_left())\n-                                .any(|s| s.len() > 2 && &s[0..2] == \"/*\") {\n+                               .split('\\n')\n+                               .map(|s| s.trim_left())\n+                               .any(|s| s.len() > 2 && &s[0..2] == \"/*\") {\n                             // Add a newline after line comments\n                             self.buffer.push_str(\"\\n\");\n                         }"}, {"sha": "754db6730133786bc92bf856beb2549817a2914c", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/762db5138e3c859f3dd736a46798615c561831a1/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762db5138e3c859f3dd736a46798615c561831a1/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=762db5138e3c859f3dd736a46798615c561831a1", "patch": "@@ -595,7 +595,7 @@ impl Rewrite for ast::Ty {\n                     Mutability::Immutable => \"*const \",\n                 };\n \n-                rewrite_unary_prefix(context, prefix, &*mt.ty, shape, self.span)\n+                rewrite_unary_prefix(context, prefix, &*mt.ty, shape)\n             }\n             ast::TyKind::Rptr(ref lifetime, ref mt) => {\n                 let mut_str = format_mutability(mt.mutbl);"}, {"sha": "556b99126973bf6ca58fa0e9106a619d0b698e0c", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/762db5138e3c859f3dd736a46798615c561831a1/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762db5138e3c859f3dd736a46798615c561831a1/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=762db5138e3c859f3dd736a46798615c561831a1", "patch": "@@ -50,8 +50,8 @@ impl<'a> FmtVisitor<'a> {\n \n         // FIXME(#434): Move this check to somewhere more central, eg Rewrite.\n         if !self.config\n-                .file_lines\n-                .intersects(&self.codemap.lookup_line_range(stmt.span)) {\n+               .file_lines\n+               .intersects(&self.codemap.lookup_line_range(stmt.span)) {\n             return;\n         }\n "}]}