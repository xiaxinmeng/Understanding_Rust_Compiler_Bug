{"sha": "5d15beb5919e4ed481c44a1ac19c2ad04a36ee8a", "node_id": "C_kwDOAAsO6NoAKDVkMTViZWI1OTE5ZTRlZDQ4MWM0NGExYWMxOWMyYWQwNGEzNmVlOGE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-20T08:56:04Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-07T19:36:32Z"}, "message": "Unconditionally encode hidden types in typeck results", "tree": {"sha": "9c80c6ab82781c164d0c3ce0246406a6c5286fef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c80c6ab82781c164d0c3ce0246406a6c5286fef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d15beb5919e4ed481c44a1ac19c2ad04a36ee8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d15beb5919e4ed481c44a1ac19c2ad04a36ee8a", "html_url": "https://github.com/rust-lang/rust/commit/5d15beb5919e4ed481c44a1ac19c2ad04a36ee8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d15beb5919e4ed481c44a1ac19c2ad04a36ee8a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43c22af267fd9337bc05382b2771dde49d2e9f26", "url": "https://api.github.com/repos/rust-lang/rust/commits/43c22af267fd9337bc05382b2771dde49d2e9f26", "html_url": "https://github.com/rust-lang/rust/commit/43c22af267fd9337bc05382b2771dde49d2e9f26"}], "stats": {"total": 90, "additions": 43, "deletions": 47}, "files": [{"sha": "f789978ae7e40aea043cdb8572cc17fe899e5ed0", "filename": "compiler/rustc_hir_analysis/src/check/writeback.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5d15beb5919e4ed481c44a1ac19c2ad04a36ee8a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d15beb5919e4ed481c44a1ac19c2ad04a36ee8a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwriteback.rs?ref=5d15beb5919e4ed481c44a1ac19c2ad04a36ee8a", "patch": "@@ -536,33 +536,29 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         let opaque_types =\n             self.fcx.infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n         for (opaque_type_key, decl) in opaque_types {\n-            let hidden_type = match decl.origin {\n-                hir::OpaqueTyOrigin::FnReturn(_) | hir::OpaqueTyOrigin::AsyncFn(_) => {\n-                    let ty = self.resolve(decl.hidden_type.ty, &decl.hidden_type.span);\n-                    struct RecursionChecker {\n-                        def_id: LocalDefId,\n-                    }\n-                    impl<'tcx> ty::TypeVisitor<'tcx> for RecursionChecker {\n-                        type BreakTy = ();\n-                        fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                            if let ty::Opaque(def_id, _) = *t.kind() {\n-                                if def_id == self.def_id.to_def_id() {\n-                                    return ControlFlow::Break(());\n-                                }\n-                            }\n-                            t.super_visit_with(self)\n+            let hidden_type = self.resolve(decl.hidden_type.ty, &decl.hidden_type.span);\n+\n+            struct RecursionChecker {\n+                def_id: LocalDefId,\n+            }\n+            impl<'tcx> ty::TypeVisitor<'tcx> for RecursionChecker {\n+                type BreakTy = ();\n+                fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+                    if let ty::Opaque(def_id, _) = *t.kind() {\n+                        if def_id == self.def_id.to_def_id() {\n+                            return ControlFlow::Break(());\n                         }\n                     }\n-                    if ty\n-                        .visit_with(&mut RecursionChecker { def_id: opaque_type_key.def_id })\n-                        .is_break()\n-                    {\n-                        return;\n-                    }\n-                    Some(ty)\n+                    t.super_visit_with(self)\n                 }\n-                hir::OpaqueTyOrigin::TyAlias => None,\n-            };\n+            }\n+            if hidden_type\n+                .visit_with(&mut RecursionChecker { def_id: opaque_type_key.def_id })\n+                .is_break()\n+            {\n+                continue;\n+            }\n+\n             self.typeck_results.concrete_opaque_types.insert(opaque_type_key.def_id, hidden_type);\n         }\n     }"}, {"sha": "ad9b124c8ab66855a58bad067d317f9245c37a39", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5d15beb5919e4ed481c44a1ac19c2ad04a36ee8a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d15beb5919e4ed481c44a1ac19c2ad04a36ee8a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=5d15beb5919e4ed481c44a1ac19c2ad04a36ee8a", "patch": "@@ -788,20 +788,15 @@ fn find_opaque_ty_constraints_for_rpit(\n             // the `concrete_opaque_types` table.\n             tcx.ty_error()\n         } else {\n-            table\n-                .concrete_opaque_types\n-                .get(&def_id)\n-                .copied()\n-                .unwrap_or_else(|| {\n-                    // We failed to resolve the opaque type or it\n-                    // resolves to itself. We interpret this as the\n-                    // no values of the hidden type ever being constructed,\n-                    // so we can just make the hidden type be `!`.\n-                    // For backwards compatibility reasons, we fall back to\n-                    // `()` until we the diverging default is changed.\n-                    Some(tcx.mk_diverging_default())\n-                })\n-                .expect(\"RPIT always have a hidden type from typeck\")\n+            table.concrete_opaque_types.get(&def_id).copied().unwrap_or_else(|| {\n+                // We failed to resolve the opaque type or it\n+                // resolves to itself. We interpret this as the\n+                // no values of the hidden type ever being constructed,\n+                // so we can just make the hidden type be `!`.\n+                // For backwards compatibility reasons, we fall back to\n+                // `()` until we the diverging default is changed.\n+                tcx.mk_diverging_default()\n+            })\n         }\n     })\n }"}, {"sha": "8277d1413587b5bd126db0b7bd9fb7e5daed2cfe", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d15beb5919e4ed481c44a1ac19c2ad04a36ee8a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d15beb5919e4ed481c44a1ac19c2ad04a36ee8a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=5d15beb5919e4ed481c44a1ac19c2ad04a36ee8a", "patch": "@@ -539,12 +539,10 @@ pub struct TypeckResults<'tcx> {\n     pub tainted_by_errors: Option<ErrorGuaranteed>,\n \n     /// All the opaque types that have hidden types set\n-    /// by this function. For return-position-impl-trait we also store the\n-    /// type here, so that mir-borrowck can figure out hidden types,\n+    /// by this function. We also store the\n+    /// type here, so that mir-borrowck can use it as a hint for figuring out hidden types,\n     /// even if they are only set in dead code (which doesn't show up in MIR).\n-    /// For type-alias-impl-trait, this map is only used to prevent query cycles,\n-    /// so the hidden types are all `None`.\n-    pub concrete_opaque_types: VecMap<LocalDefId, Option<Ty<'tcx>>>,\n+    pub concrete_opaque_types: VecMap<LocalDefId, Ty<'tcx>>,\n \n     /// Tracks the minimum captures required for a closure;\n     /// see `MinCaptureInformationMap` for more details."}, {"sha": "6c4aa35679d5bc9f57abb1df07a1ace6a64f70d7", "filename": "src/test/ui/impl-trait/issues/issue-86800.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5d15beb5919e4ed481c44a1ac19c2ad04a36ee8a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86800.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d15beb5919e4ed481c44a1ac19c2ad04a36ee8a/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86800.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86800.stderr?ref=5d15beb5919e4ed481c44a1ac19c2ad04a36ee8a", "patch": "@@ -1,3 +1,11 @@\n+error: unconstrained opaque type\n+  --> $DIR/issue-86800.rs:33:34\n+   |\n+LL | type TransactionFuture<'__, O> = impl '__ + Future<Output = TransactionResult<O>>;\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = \n+\n \n stack backtrace:\n \n@@ -12,8 +20,7 @@ error: internal compiler error: unexpected panic\n \n \n query stack during panic:\n-#0 [mir_borrowck] borrow-checking `execute_transaction_fut`\n-#1 [type_of] computing type of `TransactionFuture::{opaque#0}`\n-#2 [check_mod_item_types] checking item types in top-level module\n-#3 [analysis] running analysis passes on this crate\n+#0 [type_of] computing type of `TransactionFuture::{opaque#0}`\n+#1 [check_mod_item_types] checking item types in top-level module\n+#2 [analysis] running analysis passes on this crate\n end of query stack"}]}