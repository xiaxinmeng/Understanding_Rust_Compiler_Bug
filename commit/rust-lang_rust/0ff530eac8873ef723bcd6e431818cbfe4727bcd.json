{"sha": "0ff530eac8873ef723bcd6e431818cbfe4727bcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZjUzMGVhYzg4NzNlZjcyM2JjZDZlNDMxODE4Y2JmZTQ3MjdiY2Q=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-01T12:00:09Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-01T12:00:09Z"}, "message": "Sync from rust 3ed6c1d23fd40f4367259a531465e809eb00ec27", "tree": {"sha": "00299cda505915bc63f77a8d14015765ced02bae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00299cda505915bc63f77a8d14015765ced02bae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ff530eac8873ef723bcd6e431818cbfe4727bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff530eac8873ef723bcd6e431818cbfe4727bcd", "html_url": "https://github.com/rust-lang/rust/commit/0ff530eac8873ef723bcd6e431818cbfe4727bcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ff530eac8873ef723bcd6e431818cbfe4727bcd/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9eac6bd93624775209ca7a9c5e7f2ccf13248f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9eac6bd93624775209ca7a9c5e7f2ccf13248f5", "html_url": "https://github.com/rust-lang/rust/commit/e9eac6bd93624775209ca7a9c5e7f2ccf13248f5"}, {"sha": "39e16da52916f3c22a7c08f165154ad3c7ca9be1", "url": "https://api.github.com/repos/rust-lang/rust/commits/39e16da52916f3c22a7c08f165154ad3c7ca9be1", "html_url": "https://github.com/rust-lang/rust/commit/39e16da52916f3c22a7c08f165154ad3c7ca9be1"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "03f462a63b31bf211a33fcdee3323c4764054d3e", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ff530eac8873ef723bcd6e431818cbfe4727bcd/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff530eac8873ef723bcd6e431818cbfe4727bcd/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=0ff530eac8873ef723bcd6e431818cbfe4727bcd", "patch": "@@ -256,7 +256,7 @@ pub(crate) struct FunctionCx<'m, 'clif, 'tcx: 'm> {\n     pub(crate) inline_asm_index: u32,\n }\n \n-impl<'tcx> LayoutOf for FunctionCx<'_, '_, 'tcx> {\n+impl<'tcx> LayoutOf<'tcx> for FunctionCx<'_, '_, 'tcx> {\n     type Ty = Ty<'tcx>;\n     type TyAndLayout = TyAndLayout<'tcx>;\n \n@@ -364,7 +364,7 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n \n pub(crate) struct RevealAllLayoutCx<'tcx>(pub(crate) TyCtxt<'tcx>);\n \n-impl<'tcx> LayoutOf for RevealAllLayoutCx<'tcx> {\n+impl<'tcx> LayoutOf<'tcx> for RevealAllLayoutCx<'tcx> {\n     type Ty = Ty<'tcx>;\n     type TyAndLayout = TyAndLayout<'tcx>;\n "}, {"sha": "669235621a3b833c596d762ede2b6d51d39359af", "filename": "src/constant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ff530eac8873ef723bcd6e431818cbfe4727bcd/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff530eac8873ef723bcd6e431818cbfe4727bcd/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=0ff530eac8873ef723bcd6e431818cbfe4727bcd", "patch": "@@ -129,13 +129,13 @@ pub(crate) fn codegen_constant<'tcx>(\n     };\n     let const_val = match const_.val {\n         ConstKind::Value(const_val) => const_val,\n-        ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n-            if fx.tcx.is_static(def.did) =>\n+        ConstKind::Unevaluated(uv)\n+            if fx.tcx.is_static(uv.def.did) =>\n         {\n-            assert!(substs.is_empty());\n-            assert!(promoted.is_none());\n+            assert!(uv.substs(fx.tcx).is_empty());\n+            assert!(uv.promoted.is_none());\n \n-            return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty)).to_cvalue(fx);\n+            return codegen_static_ref(fx, uv.def.did, fx.layout_of(const_.ty)).to_cvalue(fx);\n         }\n         ConstKind::Unevaluated(unevaluated) => {\n             match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {"}, {"sha": "dc859f62affa6dcf1078edf2292333274a03291b", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ff530eac8873ef723bcd6e431818cbfe4727bcd/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff530eac8873ef723bcd6e431818cbfe4727bcd/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=0ff530eac8873ef723bcd6e431818cbfe4727bcd", "patch": "@@ -161,12 +161,10 @@ impl<'tcx> DebugContext<'tcx> {\n \n                 for (field_idx, field_def) in variant.fields.iter().enumerate() {\n                     let field_offset = layout.fields.offset(field_idx);\n-                    let field_layout = layout\n-                        .field(\n-                            &layout::LayoutCx { tcx: self.tcx, param_env: ParamEnv::reveal_all() },\n-                            field_idx,\n-                        )\n-                        .unwrap();\n+                    let field_layout = layout.field(\n+                        &layout::LayoutCx { tcx: self.tcx, param_env: ParamEnv::reveal_all() },\n+                        field_idx,\n+                    );\n \n                     let field_type = self.dwarf_ty(field_layout.ty);\n "}, {"sha": "12f61e0c564aab39944b735e7d4f34057a8df842", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ff530eac8873ef723bcd6e431818cbfe4727bcd/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff530eac8873ef723bcd6e431818cbfe4727bcd/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=0ff530eac8873ef723bcd6e431818cbfe4727bcd", "patch": "@@ -789,7 +789,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n                 return;\n             }\n \n-            if intrinsic == sym::assert_zero_valid && !layout.might_permit_raw_init(fx, /*zero:*/ true).unwrap() {\n+            if intrinsic == sym::assert_zero_valid && !layout.might_permit_raw_init(fx, /*zero:*/ true) {\n                 with_no_trimmed_paths(|| crate::base::codegen_panic(\n                     fx,\n                     &format!(\"attempted to zero-initialize type `{}`, which is invalid\", T),\n@@ -798,7 +798,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n                 return;\n             }\n \n-            if intrinsic == sym::assert_uninit_valid && !layout.might_permit_raw_init(fx, /*zero:*/ false).unwrap() {\n+            if intrinsic == sym::assert_uninit_valid && !layout.might_permit_raw_init(fx, /*zero:*/ false) {\n                 with_no_trimmed_paths(|| crate::base::codegen_panic(\n                     fx,\n                     &format!(\"attempted to leave type `{}` uninitialized, which is invalid\", T),"}]}