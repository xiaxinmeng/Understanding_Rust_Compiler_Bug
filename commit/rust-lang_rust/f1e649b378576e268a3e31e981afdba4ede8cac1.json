{"sha": "f1e649b378576e268a3e31e981afdba4ede8cac1", "node_id": "C_kwDOAAsO6NoAKGYxZTY0OWIzNzg1NzZlMjY4YTNlMzFlOTgxYWZkYmE0ZWRlOGNhYzE", "commit": {"author": {"name": "Anselm Sch\u00fcler", "email": "mail@anselmschueler.com", "date": "2023-01-16T20:13:35Z"}, "committer": {"name": "Anselm Sch\u00fcler", "email": "mail@anselmschueler.com", "date": "2023-02-18T15:18:34Z"}, "message": "Update documentation of select_nth_unstable and select_nth_unstable_by and select_nth_unstable_by_key to state O(n log n) worst case complexity\n\nAlso remove erronious / in doc comment", "tree": {"sha": "e362a672374ea4b46b98821a3982eff9924f7a7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e362a672374ea4b46b98821a3982eff9924f7a7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1e649b378576e268a3e31e981afdba4ede8cac1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1e649b378576e268a3e31e981afdba4ede8cac1", "html_url": "https://github.com/rust-lang/rust/commit/f1e649b378576e268a3e31e981afdba4ede8cac1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1e649b378576e268a3e31e981afdba4ede8cac1/comments", "author": {"login": "schuelermine", "id": 48802534, "node_id": "MDQ6VXNlcjQ4ODAyNTM0", "avatar_url": "https://avatars.githubusercontent.com/u/48802534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schuelermine", "html_url": "https://github.com/schuelermine", "followers_url": "https://api.github.com/users/schuelermine/followers", "following_url": "https://api.github.com/users/schuelermine/following{/other_user}", "gists_url": "https://api.github.com/users/schuelermine/gists{/gist_id}", "starred_url": "https://api.github.com/users/schuelermine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schuelermine/subscriptions", "organizations_url": "https://api.github.com/users/schuelermine/orgs", "repos_url": "https://api.github.com/users/schuelermine/repos", "events_url": "https://api.github.com/users/schuelermine/events{/privacy}", "received_events_url": "https://api.github.com/users/schuelermine/received_events", "type": "User", "site_admin": false}, "committer": {"login": "schuelermine", "id": 48802534, "node_id": "MDQ6VXNlcjQ4ODAyNTM0", "avatar_url": "https://avatars.githubusercontent.com/u/48802534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schuelermine", "html_url": "https://github.com/schuelermine", "followers_url": "https://api.github.com/users/schuelermine/followers", "following_url": "https://api.github.com/users/schuelermine/following{/other_user}", "gists_url": "https://api.github.com/users/schuelermine/gists{/gist_id}", "starred_url": "https://api.github.com/users/schuelermine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schuelermine/subscriptions", "organizations_url": "https://api.github.com/users/schuelermine/orgs", "repos_url": "https://api.github.com/users/schuelermine/repos", "events_url": "https://api.github.com/users/schuelermine/events{/privacy}", "received_events_url": "https://api.github.com/users/schuelermine/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d46b1ec8769fbbb3ac2a2cb12f0cad527135413", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d46b1ec8769fbbb3ac2a2cb12f0cad527135413", "html_url": "https://github.com/rust-lang/rust/commit/6d46b1ec8769fbbb3ac2a2cb12f0cad527135413"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "91bd2a54de2287a9d94097c61ad52199a32b8371", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f1e649b378576e268a3e31e981afdba4ede8cac1/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1e649b378576e268a3e31e981afdba4ede8cac1/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=f1e649b378576e268a3e31e981afdba4ede8cac1", "patch": "@@ -2708,8 +2708,10 @@ impl<T> [T] {\n     /// This reordering has the additional property that any value at position `i < index` will be\n     /// less than or equal to any value at a position `j > index`. Additionally, this reordering is\n     /// unstable (i.e. any number of equal elements may end up at position `index`), in-place\n-    /// (i.e. does not allocate), and *O*(*n*) worst-case. This function is also/ known as \"kth\n-    /// element\" in other libraries. It returns a triplet of the following from the reordered slice:\n+    /// (i.e. does not allocate), and *O*(*n*) on average. The worst-case performance is *O*(*n* log *n*).\n+    /// This function is also known as \"kth element\" in other libraries.\n+    ///\n+    /// It returns a triplet of the following from the reordered slice:\n     /// the subslice prior to `index`, the element at `index`, and the subslice after `index`;\n     /// accordingly, the values in those two subslices will respectively all be less-than-or-equal-to\n     /// and greater-than-or-equal-to the value of the element at `index`.\n@@ -2755,8 +2757,11 @@ impl<T> [T] {\n     /// This reordering has the additional property that any value at position `i < index` will be\n     /// less than or equal to any value at a position `j > index` using the comparator function.\n     /// Additionally, this reordering is unstable (i.e. any number of equal elements may end up at\n-    /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) worst-case. This function\n-    /// is also known as \"kth element\" in other libraries. It returns a triplet of the following from\n+    /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) on average.\n+    /// The worst-case performance is *O*(*n* log *n*). This function is also known as\n+    /// \"kth element\" in other libraries.\n+    ///\n+    /// It returns a triplet of the following from\n     /// the slice reordered according to the provided comparator function: the subslice prior to\n     /// `index`, the element at `index`, and the subslice after `index`; accordingly, the values in\n     /// those two subslices will respectively all be less-than-or-equal-to and greater-than-or-equal-to\n@@ -2807,8 +2812,11 @@ impl<T> [T] {\n     /// This reordering has the additional property that any value at position `i < index` will be\n     /// less than or equal to any value at a position `j > index` using the key extraction function.\n     /// Additionally, this reordering is unstable (i.e. any number of equal elements may end up at\n-    /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) worst-case. This function\n-    /// is also known as \"kth element\" in other libraries. It returns a triplet of the following from\n+    /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) on average.\n+    /// The worst-case performance is *O*(*n* log *n*).\n+    /// This function is also known as \"kth element\" in other libraries.\n+    ///\n+    /// It returns a triplet of the following from\n     /// the slice reordered according to the provided key extraction function: the subslice prior to\n     /// `index`, the element at `index`, and the subslice after `index`; accordingly, the values in\n     /// those two subslices will respectively all be less-than-or-equal-to and greater-than-or-equal-to"}]}