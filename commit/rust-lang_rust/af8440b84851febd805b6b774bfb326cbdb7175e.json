{"sha": "af8440b84851febd805b6b774bfb326cbdb7175e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmODQ0MGI4NDg1MWZlYmQ4MDViNmI3NzRiZmIzMjZjYmRiNzE3NWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-14T15:56:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-14T15:56:29Z"}, "message": "Merge #8014\n\n8014: increase completion relevance for items in local scope r=matklad a=JoshMcguigan\n\nThis PR provides a small completion relevance score bonus for items in local scope. The changes here are relatively minimal, since `coc` by default pre-sorts by position in file. But as we move toward fully server side sorting #7935 I think we'll want some relevance score bump for items in local scope. \r\n\r\n### Before\r\n\r\nNote `let~` and `syntax` are both ahead of locals. Ultimately we may decide that `let~` is a high relevance completion given my cursor position here, but that should be done with some explicit scoring on the server side, rather than being caused by (I think) `coc` preferring shorter completions. \r\n\r\n![pre-local-score](https://user-images.githubusercontent.com/22216761/111073414-c97ad600-849b-11eb-84e7-fcee130536f0.png)\r\n\r\n### After\r\n\r\n![post-local-score](https://user-images.githubusercontent.com/22216761/111073422-d0094d80-849b-11eb-92ec-7ae5ec3b190d.png)\r\n\n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>", "tree": {"sha": "0af571afec0cf8825b77d326221c3dc8009a3b7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0af571afec0cf8825b77d326221c3dc8009a3b7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af8440b84851febd805b6b774bfb326cbdb7175e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgTjIuCRBK7hj4Ov3rIwAAdHIIACrnxC6OYNacsoOsFe9kGhJV\niDp1E0uiw7+LP2nY30+MPjqKeAMpSREXIoMvXgS6eJ5qBSkqyQGq6VFVq69s7kZG\n9XGfJ4cmO8D4RmWIJ2SYBk3Gsj/wpI07gMAcWzLjHeW71va6UCr1poS8N+a9yLjq\nxWiIDH2E4U5/yZTsOfpSed+M1L9T46K1tEnmJ7EyIiWix72gEbfIOrSk/YbAEEOQ\nQA1jE3ootisfpf3zEIGfbC8jVYesh6oRsY5ombzlvU2vZVe1ZdSEIssBmSgCNIkf\nFbkxCZqHIuaSky5yvMn9OPzYUT0A18jviZ8LSfDcKfGlrKKjCmVLsr5sEo6Xl00=\n=Wop/\n-----END PGP SIGNATURE-----\n", "payload": "tree 0af571afec0cf8825b77d326221c3dc8009a3b7f\nparent 406e4be04c2e74d58bcaa7e823e2509d1a7803d4\nparent ba924d04b3b9f7c9fe846847ecd6604157f748f6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615737389 +0000\ncommitter GitHub <noreply@github.com> 1615737389 +0000\n\nMerge #8014\n\n8014: increase completion relevance for items in local scope r=matklad a=JoshMcguigan\n\nThis PR provides a small completion relevance score bonus for items in local scope. The changes here are relatively minimal, since `coc` by default pre-sorts by position in file. But as we move toward fully server side sorting #7935 I think we'll want some relevance score bump for items in local scope. \r\n\r\n### Before\r\n\r\nNote `let~` and `syntax` are both ahead of locals. Ultimately we may decide that `let~` is a high relevance completion given my cursor position here, but that should be done with some explicit scoring on the server side, rather than being caused by (I think) `coc` preferring shorter completions. \r\n\r\n![pre-local-score](https://user-images.githubusercontent.com/22216761/111073414-c97ad600-849b-11eb-84e7-fcee130536f0.png)\r\n\r\n### After\r\n\r\n![post-local-score](https://user-images.githubusercontent.com/22216761/111073422-d0094d80-849b-11eb-92ec-7ae5ec3b190d.png)\r\n\n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af8440b84851febd805b6b774bfb326cbdb7175e", "html_url": "https://github.com/rust-lang/rust/commit/af8440b84851febd805b6b774bfb326cbdb7175e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af8440b84851febd805b6b774bfb326cbdb7175e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "406e4be04c2e74d58bcaa7e823e2509d1a7803d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/406e4be04c2e74d58bcaa7e823e2509d1a7803d4", "html_url": "https://github.com/rust-lang/rust/commit/406e4be04c2e74d58bcaa7e823e2509d1a7803d4"}, {"sha": "ba924d04b3b9f7c9fe846847ecd6604157f748f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba924d04b3b9f7c9fe846847ecd6604157f748f6", "html_url": "https://github.com/rust-lang/rust/commit/ba924d04b3b9f7c9fe846847ecd6604157f748f6"}], "stats": {"total": 120, "additions": 88, "deletions": 32}, "files": [{"sha": "9a4b5217a015a6ab0e2dd87428e0d537b55ed374", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/af8440b84851febd805b6b774bfb326cbdb7175e/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8440b84851febd805b6b774bfb326cbdb7175e/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=af8440b84851febd805b6b774bfb326cbdb7175e", "patch": "@@ -144,6 +144,21 @@ pub struct CompletionRelevance {\n     /// }\n     /// ```\n     pub exact_type_match: bool,\n+    /// This is set in cases like these:\n+    ///\n+    /// ```\n+    /// fn foo(bar: u32) {\n+    ///     $0 // `bar` is local\n+    /// }\n+    /// ```\n+    ///\n+    /// ```\n+    /// fn foo() {\n+    ///     let bar = 0;\n+    ///     $0 // `bar` is local\n+    /// }\n+    /// ```\n+    pub is_local: bool,\n }\n \n impl CompletionRelevance {\n@@ -163,6 +178,9 @@ impl CompletionRelevance {\n             score += 1;\n         }\n         if self.exact_type_match {\n+            score += 3;\n+        }\n+        if self.is_local {\n             score += 1;\n         }\n \n@@ -551,9 +569,24 @@ mod tests {\n             vec![CompletionRelevance::default()],\n             vec![\n                 CompletionRelevance { exact_name_match: true, ..CompletionRelevance::default() },\n-                CompletionRelevance { exact_type_match: true, ..CompletionRelevance::default() },\n+                CompletionRelevance { is_local: true, ..CompletionRelevance::default() },\n             ],\n-            vec![CompletionRelevance { exact_name_match: true, exact_type_match: true }],\n+            vec![CompletionRelevance {\n+                exact_name_match: true,\n+                is_local: true,\n+                ..CompletionRelevance::default()\n+            }],\n+            vec![CompletionRelevance { exact_type_match: true, ..CompletionRelevance::default() }],\n+            vec![CompletionRelevance {\n+                exact_name_match: true,\n+                exact_type_match: true,\n+                ..CompletionRelevance::default()\n+            }],\n+            vec![CompletionRelevance {\n+                exact_name_match: true,\n+                exact_type_match: true,\n+                is_local: true,\n+            }],\n         ];\n \n         check_relevance_score_ordered(expected_relevance_order);"}, {"sha": "905f0b197d6a9df4891f251e244b24b586cc3f5b", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 51, "deletions": 28, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/af8440b84851febd805b6b774bfb326cbdb7175e/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8440b84851febd805b6b774bfb326cbdb7175e/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=af8440b84851febd805b6b774bfb326cbdb7175e", "patch": "@@ -157,9 +157,7 @@ impl<'a> Render<'a> {\n             .set_documentation(field.docs(self.ctx.db()))\n             .set_deprecated(is_deprecated);\n \n-        if let Some(relevance) = compute_relevance(&self.ctx, &ty, &name.to_string()) {\n-            item.set_relevance(relevance);\n-        }\n+        item.set_relevance(compute_relevance(&self.ctx, &ty, &name.to_string()));\n \n         item.build()\n     }\n@@ -254,9 +252,9 @@ impl<'a> Render<'a> {\n         if let ScopeDef::Local(local) = resolution {\n             let ty = local.ty(self.ctx.db());\n \n-            if let Some(relevance) = compute_relevance(&self.ctx, &ty, &local_name) {\n-                item.set_relevance(relevance);\n-            }\n+            let mut relevance = compute_relevance(&self.ctx, &ty, &local_name);\n+            relevance.is_local = true;\n+            item.set_relevance(relevance);\n \n             if let Some((_expected_name, expected_type)) = self.ctx.expected_name_and_type() {\n                 if ty != expected_type {\n@@ -328,12 +326,15 @@ impl<'a> Render<'a> {\n     }\n }\n \n-fn compute_relevance(ctx: &RenderContext, ty: &Type, name: &str) -> Option<CompletionRelevance> {\n-    let (expected_name, expected_type) = ctx.expected_name_and_type()?;\n+fn compute_relevance(ctx: &RenderContext, ty: &Type, name: &str) -> CompletionRelevance {\n     let mut res = CompletionRelevance::default();\n-    res.exact_type_match = ty == &expected_type;\n-    res.exact_name_match = name == &expected_name;\n-    Some(res)\n+\n+    if let Some((expected_name, expected_type)) = ctx.expected_name_and_type() {\n+        res.exact_type_match = ty == &expected_type;\n+        res.exact_name_match = name == &expected_name;\n+    }\n+\n+    res\n }\n \n fn relevance_type_match(db: &dyn HirDatabase, ty: &Type, expected_type: &Type) -> bool {\n@@ -343,6 +344,7 @@ fn relevance_type_match(db: &dyn HirDatabase, ty: &Type, expected_type: &Type) -\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n+    use itertools::Itertools;\n \n     use crate::{\n         test_utils::{check_edit, do_completion, get_all_items, TEST_CONFIG},\n@@ -355,15 +357,17 @@ mod tests {\n     }\n \n     fn check_relevance(ra_fixture: &str, expect: Expect) {\n-        fn display_relevance(relevance: CompletionRelevance) -> &'static str {\n-            match relevance {\n-                CompletionRelevance { exact_type_match: true, exact_name_match: true } => {\n-                    \"[type+name]\"\n-                }\n-                CompletionRelevance { exact_type_match: true, exact_name_match: false } => \"[type]\",\n-                CompletionRelevance { exact_type_match: false, exact_name_match: true } => \"[name]\",\n-                CompletionRelevance { exact_type_match: false, exact_name_match: false } => \"[]\",\n-            }\n+        fn display_relevance(relevance: CompletionRelevance) -> String {\n+            let relevance_factors = vec![\n+                (relevance.exact_type_match, \"type\"),\n+                (relevance.exact_name_match, \"name\"),\n+                (relevance.is_local, \"local\"),\n+            ]\n+            .into_iter()\n+            .filter_map(|(cond, desc)| if cond { Some(desc) } else { None })\n+            .join(\"+\");\n+\n+            format!(\"[{}]\", relevance_factors)\n         }\n \n         let actual = get_all_items(TEST_CONFIG, ra_fixture)\n@@ -918,7 +922,7 @@ struct WorldSnapshot { _f: () };\n fn go(world: &WorldSnapshot) { go(w$0) }\n \"#,\n             expect![[r#\"\n-                lc world [type+name]\n+                lc world [type+name+local]\n                 st WorldSnapshot []\n                 fn go(\u2026) []\n             \"#]],\n@@ -933,7 +937,7 @@ struct Foo;\n fn f(foo: &Foo) { f(foo, w$0) }\n \"#,\n             expect![[r#\"\n-                lc foo []\n+                lc foo [local]\n                 st Foo []\n                 fn f(\u2026) []\n             \"#]],\n@@ -998,6 +1002,7 @@ fn main() {\n                         relevance: CompletionRelevance {\n                             exact_name_match: true,\n                             exact_type_match: false,\n+                            is_local: true,\n                         },\n                         ref_match: \"&mut \",\n                     },\n@@ -1037,9 +1042,9 @@ fn main() {\n }\n             \"#,\n             expect![[r#\"\n-                lc m []\n-                lc t []\n-                lc &t [type]\n+                lc m [local]\n+                lc t [local]\n+                lc &t [type+local]\n                 st T []\n                 st S []\n                 fn main() []\n@@ -1091,9 +1096,9 @@ fn main() {\n }\n             \"#,\n             expect![[r#\"\n-                lc m []\n-                lc t []\n-                lc &mut t [type]\n+                lc m [local]\n+                lc t [local]\n+                lc &mut t [type+local]\n                 tt DerefMut []\n                 tt Deref []\n                 fn foo(\u2026) []\n@@ -1103,4 +1108,22 @@ fn main() {\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn locals() {\n+        check_relevance(\n+            r#\"\n+fn foo(bar: u32) {\n+    let baz = 0;\n+\n+    f$0\n+}\n+\"#,\n+            expect![[r#\"\n+                lc baz [local]\n+                lc bar [local]\n+                fn foo(\u2026) []\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "d415ed4d39df5c8056be3ae813ca9feab1fd0bf6", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af8440b84851febd805b6b774bfb326cbdb7175e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8440b84851febd805b6b774bfb326cbdb7175e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=af8440b84851febd805b6b774bfb326cbdb7175e", "patch": "@@ -1117,13 +1117,13 @@ mod tests {\n                 (\n                     \"&arg\",\n                     Some(\n-                        \"fffffffd\",\n+                        \"fffffffa\",\n                     ),\n                 ),\n                 (\n                     \"arg\",\n                     Some(\n-                        \"fffffffe\",\n+                        \"fffffffd\",\n                     ),\n                 ),\n             ]"}]}