{"sha": "6e1f7139c9bf1bb6d7087a2d7e10fb66df6efab9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMWY3MTM5YzliZjFiYjZkNzA4N2EyZDdlMTBmYjY2ZGY2ZWZhYjk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-02-07T13:45:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-07T13:45:46Z"}, "message": "Rollup merge of #81526 - ojeda:btree-use-unwrap_unchecked, r=scottmcm\n\nbtree: use Option's unwrap_unchecked()\n\nNow that https://github.com/rust-lang/rust/issues/81383 is available, start using it.", "tree": {"sha": "9d6d060cff4dcbc28899caab58b809ecf3f2ae52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d6d060cff4dcbc28899caab58b809ecf3f2ae52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e1f7139c9bf1bb6d7087a2d7e10fb66df6efab9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgH+8KCRBK7hj4Ov3rIwAAdHIIAKptczXiIzwhD/hx2KvkLKLc\n629lH1yywa8hh+CVI50PtX7sLbMS8NRHbX0dYa+Rvru+dMY9WJ+mipeV+YBxKoJy\nkXIwnxEoMFSzQpKhroKOnBRq/XvOmpFUd08C27a9R+t1fqvhX8T/aNLhT9wC88rY\nZM4f5Ts/3c390VI5PMhpGFpaVrThY72ZxfsJ3T+PG2VE1gMJ/oJQXcyV6Bw2Robq\nmvCYvnU+rbwsaBVINDzgpMBPXOGaaG2V+bLkfdT0UqortOzxaMG6W8CPhSmujtTJ\nEp2hw5TAjSHWViVNtIRGxo/1FAqaewqVC44SRGykPK2Hxp3yJk1E1JNP5zVYggg=\n=JiPm\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d6d060cff4dcbc28899caab58b809ecf3f2ae52\nparent 43e1ea29c4e92dfa2ba716fc878984605897fb13\nparent 62f98a2509df9d660524334c5ea02b6269d695f4\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1612705546 +0100\ncommitter GitHub <noreply@github.com> 1612705546 +0100\n\nRollup merge of #81526 - ojeda:btree-use-unwrap_unchecked, r=scottmcm\n\nbtree: use Option's unwrap_unchecked()\n\nNow that https://github.com/rust-lang/rust/issues/81383 is available, start using it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e1f7139c9bf1bb6d7087a2d7e10fb66df6efab9", "html_url": "https://github.com/rust-lang/rust/commit/6e1f7139c9bf1bb6d7087a2d7e10fb66df6efab9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e1f7139c9bf1bb6d7087a2d7e10fb66df6efab9/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43e1ea29c4e92dfa2ba716fc878984605897fb13", "url": "https://api.github.com/repos/rust-lang/rust/commits/43e1ea29c4e92dfa2ba716fc878984605897fb13", "html_url": "https://github.com/rust-lang/rust/commit/43e1ea29c4e92dfa2ba716fc878984605897fb13"}, {"sha": "62f98a2509df9d660524334c5ea02b6269d695f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/62f98a2509df9d660524334c5ea02b6269d695f4", "html_url": "https://github.com/rust-lang/rust/commit/62f98a2509df9d660524334c5ea02b6269d695f4"}], "stats": {"total": 44, "additions": 13, "deletions": 31}, "files": [{"sha": "8fb9198a7cb250565a80feabfd3759183298e793", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6e1f7139c9bf1bb6d7087a2d7e10fb66df6efab9/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1f7139c9bf1bb6d7087a2d7e10fb66df6efab9/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=6e1f7139c9bf1bb6d7087a2d7e10fb66df6efab9", "patch": "@@ -11,7 +11,6 @@ use core::ptr;\n use super::borrow::DormantMutRef;\n use super::node::{self, marker, ForceResult::*, Handle, NodeRef, Root};\n use super::search::SearchResult::*;\n-use super::unwrap_unchecked;\n \n mod entry;\n pub use entry::{Entry, OccupiedEntry, VacantEntry};\n@@ -1433,7 +1432,7 @@ impl<K, V> Drop for IntoIter<K, V> {\n \n                 unsafe {\n                     let mut node =\n-                        unwrap_unchecked(ptr::read(&self.0.front)).into_node().forget_type();\n+                        ptr::read(&self.0.front).unwrap_unchecked().into_node().forget_type();\n                     while let Some(parent) = node.deallocate_and_ascend() {\n                         node = parent.into_node().forget_type();\n                     }\n@@ -1758,7 +1757,7 @@ impl<'a, K, V> Range<'a, K, V> {\n     }\n \n     unsafe fn next_unchecked(&mut self) -> (&'a K, &'a V) {\n-        unsafe { unwrap_unchecked(self.front.as_mut()).next_unchecked() }\n+        unsafe { self.front.as_mut().unwrap_unchecked().next_unchecked() }\n     }\n }\n \n@@ -1847,7 +1846,7 @@ impl<'a, K, V> DoubleEndedIterator for Range<'a, K, V> {\n \n impl<'a, K, V> Range<'a, K, V> {\n     unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a V) {\n-        unsafe { unwrap_unchecked(self.back.as_mut()).next_back_unchecked() }\n+        unsafe { self.back.as_mut().unwrap_unchecked().next_back_unchecked() }\n     }\n }\n \n@@ -1893,7 +1892,7 @@ impl<'a, K, V> RangeMut<'a, K, V> {\n     }\n \n     unsafe fn next_unchecked(&mut self) -> (&'a K, &'a mut V) {\n-        unsafe { unwrap_unchecked(self.front.as_mut()).next_unchecked() }\n+        unsafe { self.front.as_mut().unwrap_unchecked().next_unchecked() }\n     }\n \n     /// Returns an iterator of references over the remaining items.\n@@ -1923,7 +1922,7 @@ impl<K, V> FusedIterator for RangeMut<'_, K, V> {}\n \n impl<'a, K, V> RangeMut<'a, K, V> {\n     unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a mut V) {\n-        unsafe { unwrap_unchecked(self.back.as_mut()).next_back_unchecked() }\n+        unsafe { self.back.as_mut().unwrap_unchecked().next_back_unchecked() }\n     }\n }\n "}, {"sha": "cf91c17b511ccc350951cff510908ec4b7315195", "filename": "library/alloc/src/collections/btree/mod.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6e1f7139c9bf1bb6d7087a2d7e10fb66df6efab9/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1f7139c9bf1bb6d7087a2d7e10fb66df6efab9/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs?ref=6e1f7139c9bf1bb6d7087a2d7e10fb66df6efab9", "patch": "@@ -19,22 +19,6 @@ trait Recover<Q: ?Sized> {\n     fn replace(&mut self, key: Self::Key) -> Option<Self::Key>;\n }\n \n-/// Same purpose as `Option::unwrap` but doesn't always guarantee a panic\n-/// if the option contains no value.\n-/// SAFETY: the caller must ensure that the option contains a value.\n-#[inline(always)]\n-pub unsafe fn unwrap_unchecked<T>(val: Option<T>) -> T {\n-    val.unwrap_or_else(|| {\n-        if cfg!(debug_assertions) {\n-            panic!(\"'unchecked' unwrap on None in BTreeMap\");\n-        } else {\n-            unsafe {\n-                core::intrinsics::unreachable();\n-            }\n-        }\n-    })\n-}\n-\n #[cfg(test)]\n /// XorShiftRng\n struct DeterministicRng {"}, {"sha": "1ef2a572ddd91e40d85004681da877c12c09b5cf", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6e1f7139c9bf1bb6d7087a2d7e10fb66df6efab9/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1f7139c9bf1bb6d7087a2d7e10fb66df6efab9/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=6e1f7139c9bf1bb6d7087a2d7e10fb66df6efab9", "patch": "@@ -6,7 +6,6 @@ use core::ptr;\n \n use super::node::{marker, ForceResult::*, Handle, NodeRef};\n use super::search::SearchResult;\n-use super::unwrap_unchecked;\n \n /// Finds the leaf edges delimiting a specified range in or underneath a node.\n ///\n@@ -310,7 +309,7 @@ macro_rules! def_next_kv_uncheched_dealloc {\n                     Err(last_edge) => {\n                         unsafe {\n                             let parent_edge = last_edge.into_node().deallocate_and_ascend();\n-                            unwrap_unchecked(parent_edge).forget_node_type()\n+                            parent_edge.unwrap_unchecked().forget_node_type()\n                         }\n                     }\n                 }\n@@ -331,7 +330,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Ed\n     pub unsafe fn next_unchecked(&mut self) -> (&'a K, &'a V) {\n         super::mem::replace(self, |leaf_edge| {\n             let kv = leaf_edge.next_kv();\n-            let kv = unsafe { unwrap_unchecked(kv.ok()) };\n+            let kv = unsafe { kv.ok().unwrap_unchecked() };\n             (kv.next_leaf_edge(), kv.into_kv())\n         })\n     }\n@@ -344,7 +343,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Ed\n     pub unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a V) {\n         super::mem::replace(self, |leaf_edge| {\n             let kv = leaf_edge.next_back_kv();\n-            let kv = unsafe { unwrap_unchecked(kv.ok()) };\n+            let kv = unsafe { kv.ok().unwrap_unchecked() };\n             (kv.next_back_leaf_edge(), kv.into_kv())\n         })\n     }\n@@ -359,7 +358,7 @@ impl<'a, K, V> Handle<NodeRef<marker::ValMut<'a>, K, V, marker::Leaf>, marker::E\n     pub unsafe fn next_unchecked(&mut self) -> (&'a K, &'a mut V) {\n         let kv = super::mem::replace(self, |leaf_edge| {\n             let kv = leaf_edge.next_kv();\n-            let kv = unsafe { unwrap_unchecked(kv.ok()) };\n+            let kv = unsafe { kv.ok().unwrap_unchecked() };\n             (unsafe { ptr::read(&kv) }.next_leaf_edge(), kv)\n         });\n         // Doing this last is faster, according to benchmarks.\n@@ -374,7 +373,7 @@ impl<'a, K, V> Handle<NodeRef<marker::ValMut<'a>, K, V, marker::Leaf>, marker::E\n     pub unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a mut V) {\n         let kv = super::mem::replace(self, |leaf_edge| {\n             let kv = leaf_edge.next_back_kv();\n-            let kv = unsafe { unwrap_unchecked(kv.ok()) };\n+            let kv = unsafe { kv.ok().unwrap_unchecked() };\n             (unsafe { ptr::read(&kv) }.next_back_leaf_edge(), kv)\n         });\n         // Doing this last is faster, according to benchmarks."}, {"sha": "9cd016fa62f0ecc8a6791c17fa67694f73919a93", "filename": "library/alloc/src/collections/btree/remove.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e1f7139c9bf1bb6d7087a2d7e10fb66df6efab9/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1f7139c9bf1bb6d7087a2d7e10fb66df6efab9/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs?ref=6e1f7139c9bf1bb6d7087a2d7e10fb66df6efab9", "patch": "@@ -1,6 +1,5 @@\n use super::map::MIN_LEN;\n use super::node::{marker, ForceResult::*, Handle, LeftOrRight::*, NodeRef};\n-use super::unwrap_unchecked;\n \n impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::KV> {\n     /// Removes a key-value pair from the tree, and returns that pair, as well as\n@@ -77,12 +76,12 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n         // the element we were asked to remove. Prefer the left adjacent KV,\n         // for the reasons listed in `choose_parent_kv`.\n         let left_leaf_kv = self.left_edge().descend().last_leaf_edge().left_kv();\n-        let left_leaf_kv = unsafe { unwrap_unchecked(left_leaf_kv.ok()) };\n+        let left_leaf_kv = unsafe { left_leaf_kv.ok().unwrap_unchecked() };\n         let (left_kv, left_hole) = left_leaf_kv.remove_leaf_kv(handle_emptied_internal_root);\n \n         // The internal node may have been stolen from or merged. Go back right\n         // to find where the original KV ended up.\n-        let mut internal = unsafe { unwrap_unchecked(left_hole.next_kv().ok()) };\n+        let mut internal = unsafe { left_hole.next_kv().ok().unwrap_unchecked() };\n         let old_kv = internal.replace_kv(left_kv.0, left_kv.1);\n         let pos = internal.next_leaf_edge();\n         (old_kv, pos)"}, {"sha": "99c42a4ba44235a36e010d7af83aab682b24405d", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e1f7139c9bf1bb6d7087a2d7e10fb66df6efab9/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1f7139c9bf1bb6d7087a2d7e10fb66df6efab9/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=6e1f7139c9bf1bb6d7087a2d7e10fb66df6efab9", "patch": "@@ -111,6 +111,7 @@\n #![feature(nll)]\n #![feature(nonnull_slice_from_raw_parts)]\n #![feature(auto_traits)]\n+#![feature(option_result_unwrap_unchecked)]\n #![feature(or_patterns)]\n #![feature(pattern)]\n #![feature(ptr_internals)]"}]}