{"sha": "52359f7c609ef3908c9fc6faf3d0e36f02c6d207", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMzU5ZjdjNjA5ZWYzOTA4YzlmYzZmYWYzZDBlMzZmMDJjNmQyMDc=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-05-20T21:54:12Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-05-21T16:07:47Z"}, "message": "Use `HirId` in `ResolverOutputs::export_map` instead of `NodeId`", "tree": {"sha": "08215aee51366c7a22b537554da13cdfca668b6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08215aee51366c7a22b537554da13cdfca668b6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52359f7c609ef3908c9fc6faf3d0e36f02c6d207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52359f7c609ef3908c9fc6faf3d0e36f02c6d207", "html_url": "https://github.com/rust-lang/rust/commit/52359f7c609ef3908c9fc6faf3d0e36f02c6d207", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52359f7c609ef3908c9fc6faf3d0e36f02c6d207/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c5dba7c6214b2a27d4d976419ab3036ec7ae473", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c5dba7c6214b2a27d4d976419ab3036ec7ae473", "html_url": "https://github.com/rust-lang/rust/commit/3c5dba7c6214b2a27d4d976419ab3036ec7ae473"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "fffc286c8f6f77a79bd3bd44ea0e279b0e748934", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52359f7c609ef3908c9fc6faf3d0e36f02c6d207/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52359f7c609ef3908c9fc6faf3d0e36f02c6d207/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=52359f7c609ef3908c9fc6faf3d0e36f02c6d207", "patch": "@@ -1131,17 +1131,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             consts: common_consts,\n             extern_crate_map: resolutions.extern_crate_map,\n             trait_map,\n-            export_map: resolutions\n-                .export_map\n-                .into_iter()\n-                .map(|(k, v)| {\n-                    let exports: Vec<_> = v\n-                        .into_iter()\n-                        .map(|e| e.map_id(|id| definitions.node_id_to_hir_id(id)))\n-                        .collect();\n-                    (k, exports)\n-                })\n-                .collect(),\n+            export_map: resolutions.export_map,\n             maybe_unused_trait_imports: resolutions\n                 .maybe_unused_trait_imports\n                 .into_iter()"}, {"sha": "820aa457d7c0f37a81c699736ebd3260361de0ae", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52359f7c609ef3908c9fc6faf3d0e36f02c6d207/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52359f7c609ef3908c9fc6faf3d0e36f02c6d207/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=52359f7c609ef3908c9fc6faf3d0e36f02c6d207", "patch": "@@ -124,7 +124,7 @@ pub struct ResolverOutputs {\n     pub trait_map: FxHashMap<hir::HirId, Vec<hir::TraitCandidate<hir::HirId>>>,\n     pub maybe_unused_trait_imports: NodeSet,\n     pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n-    pub export_map: ExportMap<NodeId>,\n+    pub export_map: ExportMap<hir::HirId>,\n     pub glob_map: GlobMap,\n     /// Extern prelude entries. The value is `true` if the entry was introduced\n     /// via `extern crate` item and not `--extern` option or compiler built-in."}, {"sha": "db9af9a0c4be12e3b24ea0b38437ef4481e8d313", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/52359f7c609ef3908c9fc6faf3d0e36f02c6d207/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52359f7c609ef3908c9fc6faf3d0e36f02c6d207/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=52359f7c609ef3908c9fc6faf3d0e36f02c6d207", "patch": "@@ -1274,6 +1274,18 @@ impl<'a> Resolver<'a> {\n \n     pub fn into_outputs(self) -> ResolverOutputs {\n         let definitions = self.definitions;\n+        let export_map = {\n+            let mut map = FxHashMap::default();\n+            for (k, v) in self.export_map.into_iter() {\n+                map.insert(\n+                    k,\n+                    v.into_iter()\n+                        .map(|e| e.map_id(|id| definitions.node_id_to_hir_id(id)))\n+                        .collect(),\n+                );\n+            }\n+            map\n+        };\n         let trait_map = {\n             let mut map = FxHashMap::default();\n             for (k, v) in self.trait_map.into_iter() {\n@@ -1290,7 +1302,7 @@ impl<'a> Resolver<'a> {\n             definitions: definitions,\n             cstore: Box::new(self.crate_loader.into_cstore()),\n             extern_crate_map: self.extern_crate_map,\n-            export_map: self.export_map,\n+            export_map,\n             trait_map,\n             glob_map: self.glob_map,\n             maybe_unused_trait_imports: self.maybe_unused_trait_imports,\n@@ -1308,7 +1320,18 @@ impl<'a> Resolver<'a> {\n             definitions: self.definitions.clone(),\n             cstore: Box::new(self.cstore().clone()),\n             extern_crate_map: self.extern_crate_map.clone(),\n-            export_map: self.export_map.clone(),\n+            export_map: {\n+                let mut map = FxHashMap::default();\n+                for (k, v) in self.export_map.iter() {\n+                    map.insert(\n+                        k.clone(),\n+                        v.iter()\n+                            .map(|e| e.clone().map_id(|id| self.definitions.node_id_to_hir_id(id)))\n+                            .collect(),\n+                    );\n+                }\n+                map\n+            },\n             trait_map: {\n                 let mut map = FxHashMap::default();\n                 for (k, v) in self.trait_map.iter() {"}]}