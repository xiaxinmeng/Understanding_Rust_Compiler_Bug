{"sha": "c9c32a7e7dac1d0f5da9d02d4fdde2ca214cddb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YzMyYTdlN2RhYzFkMGY1ZGE5ZDAyZDRmZGRlMmNhMjE0Y2RkYjE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-20T23:39:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-20T23:39:14Z"}, "message": "Rollup merge of #65603 - mystor:resolve_path_ice, r=petrochenkov\n\nAvoid ICE when include! is used by stdin crate\n\nThis should hopefully also eliminate the ICE when using `include_bytes!`, `include_str!` and `#[doc(include = \"...\")]` with a stdio input.\n\nI couldn't see a clear way to write a compile-fail test using compiletest with a stdio input, so I haven't written any tests for this change.\n\nFixes #63900", "tree": {"sha": "20f44c7f1c8fe9d50c66bc0927d65a7270b18b0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20f44c7f1c8fe9d50c66bc0927d65a7270b18b0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9c32a7e7dac1d0f5da9d02d4fdde2ca214cddb1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdrPAiCRBK7hj4Ov3rIwAAdHIIAIJFlfaX3ny8+dI4p1DlHq0y\nEOmhFKSW4z4zP9EBYsNkYJzCq9coe7NZdrG0UHOGIPUwjh7ojSnRTngPdXvsLsKN\nNmEB+kgDbKw3ahdfdqZULVmiR0VYGeqh+VNdcS8jOyE1hcu+e61lPD3GYq90dMGN\nGx0G23+zt6vufGdAw11MF0Ao4dPnGiOb6UVz+k1ElzMWmW1JuoCJR0XH3cAXf+Jg\nIwUkLxktfk5lXkPybb7pf+6DnrRVH39qXdNX6IIPqfFXxUdhz83KEGw02ccojifJ\nJr26TxkWwURy2gltzJQC9BLQgULbgBaxEmljWH3Uw6manXLM7YxwjPPCpjxTPvM=\n=FzEW\n-----END PGP SIGNATURE-----\n", "payload": "tree 20f44c7f1c8fe9d50c66bc0927d65a7270b18b0c\nparent f8d1c3589e51061a3999e8de3bf59aeccfc06f5c\nparent 9be0bd8aa110bc580fb5d0f59e4f4fc96068c616\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1571614754 +0200\ncommitter GitHub <noreply@github.com> 1571614754 +0200\n\nRollup merge of #65603 - mystor:resolve_path_ice, r=petrochenkov\n\nAvoid ICE when include! is used by stdin crate\n\nThis should hopefully also eliminate the ICE when using `include_bytes!`, `include_str!` and `#[doc(include = \"...\")]` with a stdio input.\n\nI couldn't see a clear way to write a compile-fail test using compiletest with a stdio input, so I haven't written any tests for this change.\n\nFixes #63900\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9c32a7e7dac1d0f5da9d02d4fdde2ca214cddb1", "html_url": "https://github.com/rust-lang/rust/commit/c9c32a7e7dac1d0f5da9d02d4fdde2ca214cddb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9c32a7e7dac1d0f5da9d02d4fdde2ca214cddb1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8d1c3589e51061a3999e8de3bf59aeccfc06f5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d1c3589e51061a3999e8de3bf59aeccfc06f5c", "html_url": "https://github.com/rust-lang/rust/commit/f8d1c3589e51061a3999e8de3bf59aeccfc06f5c"}, {"sha": "9be0bd8aa110bc580fb5d0f59e4f4fc96068c616", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be0bd8aa110bc580fb5d0f59e4f4fc96068c616", "html_url": "https://github.com/rust-lang/rust/commit/9be0bd8aa110bc580fb5d0f59e4f4fc96068c616"}], "stats": {"total": 48, "additions": 40, "deletions": 8}, "files": [{"sha": "58edf23a5b1e2be2dadb7e4762f0f18ce7976788", "filename": "src/libsyntax_expand/base.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c9c32a7e7dac1d0f5da9d02d4fdde2ca214cddb1/src%2Flibsyntax_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c32a7e7dac1d0f5da9d02d4fdde2ca214cddb1/src%2Flibsyntax_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbase.rs?ref=c9c32a7e7dac1d0f5da9d02d4fdde2ca214cddb1", "patch": "@@ -1072,7 +1072,11 @@ impl<'a> ExtCtxt<'a> {\n     /// This unifies the logic used for resolving `include_X!`, and `#[doc(include)]` file paths.\n     ///\n     /// Returns an absolute path to the file that `path` refers to.\n-    pub fn resolve_path(&self, path: impl Into<PathBuf>, span: Span) -> PathBuf {\n+    pub fn resolve_path(\n+        &self,\n+        path: impl Into<PathBuf>,\n+        span: Span,\n+    ) -> Result<PathBuf, DiagnosticBuilder<'a>> {\n         let path = path.into();\n \n         // Relative paths are resolved relative to the file in which they are found\n@@ -1082,13 +1086,16 @@ impl<'a> ExtCtxt<'a> {\n             let mut result = match self.source_map().span_to_unmapped_path(callsite) {\n                 FileName::Real(path) => path,\n                 FileName::DocTest(path, _) => path,\n-                other => panic!(\"cannot resolve relative path in non-file source `{}`\", other),\n+                other => return Err(self.struct_span_err(\n+                    span,\n+                    &format!(\"cannot resolve relative path in non-file source `{}`\", other),\n+                )),\n             };\n             result.pop();\n             result.push(path);\n-            result\n+            Ok(result)\n         } else {\n-            path\n+            Ok(path)\n         }\n     }\n }"}, {"sha": "fc521e5edc06b146176ce26eebdff22b7c0c8c66", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c9c32a7e7dac1d0f5da9d02d4fdde2ca214cddb1/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c32a7e7dac1d0f5da9d02d4fdde2ca214cddb1/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=c9c32a7e7dac1d0f5da9d02d4fdde2ca214cddb1", "patch": "@@ -1418,7 +1418,14 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                         return noop_visit_attribute(at, self);\n                     }\n \n-                    let filename = self.cx.resolve_path(&*file.as_str(), it.span());\n+                    let filename = match self.cx.resolve_path(&*file.as_str(), it.span()) {\n+                        Ok(filename) => filename,\n+                        Err(mut err) => {\n+                            err.emit();\n+                            continue;\n+                        }\n+                    };\n+\n                     match self.cx.source_map().load_file(&filename) {\n                         Ok(source_file) => {\n                             let src = source_file.src.as_ref()"}, {"sha": "f6c58fcdfa1cbf009ab10d56a0007f91773fada4", "filename": "src/libsyntax_ext/source_util.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c9c32a7e7dac1d0f5da9d02d4fdde2ca214cddb1/src%2Flibsyntax_ext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9c32a7e7dac1d0f5da9d02d4fdde2ca214cddb1/src%2Flibsyntax_ext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fsource_util.rs?ref=c9c32a7e7dac1d0f5da9d02d4fdde2ca214cddb1", "patch": "@@ -76,7 +76,13 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n         None => return DummyResult::any(sp),\n     };\n     // The file will be added to the code map by the parser\n-    let file = cx.resolve_path(file, sp);\n+    let file = match cx.resolve_path(file, sp) {\n+        Ok(f) => f,\n+        Err(mut err) => {\n+            err.emit();\n+            return DummyResult::any(sp);\n+        },\n+    };\n     let directory_ownership = DirectoryOwnership::Owned { relative: None };\n     let p = parse::new_sub_parser_from_file(cx.parse_sess(), &file, directory_ownership, None, sp);\n \n@@ -122,7 +128,13 @@ pub fn expand_include_str(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n         Some(f) => f,\n         None => return DummyResult::any(sp)\n     };\n-    let file = cx.resolve_path(file, sp);\n+    let file = match cx.resolve_path(file, sp) {\n+        Ok(f) => f,\n+        Err(mut err) => {\n+            err.emit();\n+            return DummyResult::any(sp);\n+        },\n+    };\n     match cx.source_map().load_binary_file(&file) {\n         Ok(bytes) => match std::str::from_utf8(&bytes) {\n             Ok(src) => {\n@@ -147,7 +159,13 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n         Some(f) => f,\n         None => return DummyResult::any(sp)\n     };\n-    let file = cx.resolve_path(file, sp);\n+    let file = match cx.resolve_path(file, sp) {\n+        Ok(f) => f,\n+        Err(mut err) => {\n+            err.emit();\n+            return DummyResult::any(sp);\n+        },\n+    };\n     match cx.source_map().load_binary_file(&file) {\n         Ok(bytes) => {\n             base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(Lrc::new(bytes))))"}]}