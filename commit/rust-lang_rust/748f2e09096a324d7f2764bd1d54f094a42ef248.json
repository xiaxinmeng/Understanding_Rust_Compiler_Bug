{"sha": "748f2e09096a324d7f2764bd1d54f094a42ef248", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0OGYyZTA5MDk2YTMyNGQ3ZjI3NjRiZDFkNTRmMDk0YTQyZWYyNDg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-07-16T20:28:11Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-07-16T20:29:00Z"}, "message": "improve comment", "tree": {"sha": "0c6087a42db7ff6d7ff9cef746794a8a439d8e72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c6087a42db7ff6d7ff9cef746794a8a439d8e72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/748f2e09096a324d7f2764bd1d54f094a42ef248", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/748f2e09096a324d7f2764bd1d54f094a42ef248", "html_url": "https://github.com/rust-lang/rust/commit/748f2e09096a324d7f2764bd1d54f094a42ef248", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/748f2e09096a324d7f2764bd1d54f094a42ef248/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eae2044b0f4bbb586cd48993d9a4d1853028cc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eae2044b0f4bbb586cd48993d9a4d1853028cc7", "html_url": "https://github.com/rust-lang/rust/commit/7eae2044b0f4bbb586cd48993d9a4d1853028cc7"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "7f0294f8ba83eaaf698a7e05e71cc3fa76378bf4", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/748f2e09096a324d7f2764bd1d54f094a42ef248/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748f2e09096a324d7f2764bd1d54f094a42ef248/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=748f2e09096a324d7f2764bd1d54f094a42ef248", "patch": "@@ -1053,16 +1053,40 @@ impl unify_methods for infer_ctxt {\n }\n \n // Resolution is the process of removing type variables and replacing\n-// them with their inferred values.  There are several \"modes\" for\n-// resolution.  The first is a shallow resolution: this only resolves\n-// one layer, but does not resolve any nested variables.  So, for\n-// example, if we have two variables A and B, and the constraint that\n-// A <: ~[B] and B <: int, then shallow resolution on A would yield\n-// ~[B].  Deep resolution, on the other hand, would yield ~[int].\n+// them with their inferred values.  Unfortunately our inference has\n+// become fairly complex and so there are a number of options to\n+// control *just how much* you want to resolve and how you want to do\n+// it.\n //\n-// But there is one more knob: the `force_level` variable controls\n-// the behavior in the face of unconstrained type and region\n-// variables.\n+// # Controlling the scope of resolution\n+//\n+// The options resolve_* determine what kinds of variables get\n+// resolved.  Generally resolution starts with a top-level type\n+// variable; we will always resolve this.  However, once we have\n+// resolved that variable, we may end up with a type that still\n+// contains type variables.  For example, if we resolve `<T0>` we may\n+// end up with something like `[<T1>]`.  If the option\n+// `resolve_nested_tvar` is passed, we will then go and recursively\n+// resolve `<T1>`.\n+//\n+// The options `resolve_rvar` and `resolve_ivar` control whether we\n+// resolve region and integral variables, respectively.\n+//\n+// # What do if things are unconstrained\n+//\n+// Sometimes we will encounter a variable that has no constraints, and\n+// therefore cannot sensibly be mapped to any particular result.  By\n+// default, we will leave such variables as is (so you will get back a\n+// variable in your result).  The options force_* will cause the\n+// resolution to fail in this case intead, except for the case of\n+// integral variables, which resolve to `int` if forced.\n+//\n+// # resolve_all and force_all\n+//\n+// The options are a bit set, so you can use the *_all to resolve or\n+// force all kinds of variables (including those we may add in the\n+// future).  If you want to resolve everything but one type, you are\n+// probably better off writing `resolve_all - resolve_ivar`.\n \n const resolve_nested_tvar: uint = 0b00000001;\n const resolve_rvar: uint        = 0b00000010;"}]}