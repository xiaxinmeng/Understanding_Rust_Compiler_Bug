{"sha": "9f07d055f7823ac0e17e014f3effa2a0be0947e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMDdkMDU1Zjc4MjNhYzBlMTdlMDE0ZjNlZmZhMmEwYmUwOTQ3ZTk=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-06T22:33:42Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-06T23:10:31Z"}, "message": "markers -> marker", "tree": {"sha": "b4a0f390cd26323522cbcfaf7ba2464fc5f13bb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4a0f390cd26323522cbcfaf7ba2464fc5f13bb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f07d055f7823ac0e17e014f3effa2a0be0947e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f07d055f7823ac0e17e014f3effa2a0be0947e9", "html_url": "https://github.com/rust-lang/rust/commit/9f07d055f7823ac0e17e014f3effa2a0be0947e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f07d055f7823ac0e17e014f3effa2a0be0947e9/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91ba66fa99830d4963d6adb47439b86253bf5a4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/91ba66fa99830d4963d6adb47439b86253bf5a4c", "html_url": "https://github.com/rust-lang/rust/commit/91ba66fa99830d4963d6adb47439b86253bf5a4c"}], "stats": {"total": 664, "additions": 332, "deletions": 332}, "files": [{"sha": "841882b4719a58567ad2c1ccc2525706dafeb71d", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -74,7 +74,7 @@ use core::clone::Clone;\n use core::fmt::{self, Show};\n use core::cmp::{Eq, Ord, PartialEq, PartialOrd, Ordering};\n use core::default::Default;\n-use core::markers::{Sync, Send};\n+use core::marker::{Sync, Send};\n use core::mem::{min_align_of, size_of, drop};\n use core::mem;\n use core::nonzero::NonZero;"}, {"sha": "a7f76c02bd8b100990e30d4177f92128cca4cfb5", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -18,7 +18,7 @@ use core::cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering};\n use core::default::Default;\n use core::fmt;\n use core::hash::{self, Hash};\n-use core::markers::Sized;\n+use core::marker::Sized;\n use core::mem;\n use core::option::Option;\n use core::ptr::Unique;"}, {"sha": "69a0d596644d28ccc5320aab9729c903b1365c49", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -148,7 +148,7 @@ use core::cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering};\n use core::default::Default;\n use core::fmt;\n use core::hash::{self, Hash};\n-use core::markers;\n+use core::marker;\n use core::mem::{transmute, min_align_of, size_of, forget};\n use core::nonzero::NonZero;\n use core::ops::{Deref, Drop};\n@@ -175,8 +175,8 @@ pub struct Rc<T> {\n     // FIXME #12808: strange names to try to avoid interfering with field accesses of the contained\n     // type via Deref\n     _ptr: NonZero<*mut RcBox<T>>,\n-    _nosend: markers::NoSend,\n-    _noshare: markers::NoSync\n+    _nosend: marker::NoSend,\n+    _noshare: marker::NoSync\n }\n \n impl<T> Rc<T> {\n@@ -201,8 +201,8 @@ impl<T> Rc<T> {\n                     strong: Cell::new(1),\n                     weak: Cell::new(1)\n                 })),\n-                _nosend: markers::NoSend,\n-                _noshare: markers::NoSync\n+                _nosend: marker::NoSend,\n+                _noshare: marker::NoSync\n             }\n         }\n     }\n@@ -223,8 +223,8 @@ impl<T> Rc<T> {\n         self.inc_weak();\n         Weak {\n             _ptr: self._ptr,\n-            _nosend: markers::NoSend,\n-            _noshare: markers::NoSync\n+            _nosend: marker::NoSend,\n+            _noshare: marker::NoSync\n         }\n     }\n }\n@@ -431,7 +431,7 @@ impl<T> Clone for Rc<T> {\n     #[inline]\n     fn clone(&self) -> Rc<T> {\n         self.inc_strong();\n-        Rc { _ptr: self._ptr, _nosend: markers::NoSend, _noshare: markers::NoSync }\n+        Rc { _ptr: self._ptr, _nosend: marker::NoSend, _noshare: marker::NoSync }\n     }\n }\n \n@@ -622,8 +622,8 @@ pub struct Weak<T> {\n     // FIXME #12808: strange names to try to avoid interfering with\n     // field accesses of the contained type via Deref\n     _ptr: NonZero<*mut RcBox<T>>,\n-    _nosend: markers::NoSend,\n-    _noshare: markers::NoSync\n+    _nosend: marker::NoSend,\n+    _noshare: marker::NoSync\n }\n \n #[experimental = \"Weak pointers may not belong in this module.\"]\n@@ -650,7 +650,7 @@ impl<T> Weak<T> {\n             None\n         } else {\n             self.inc_strong();\n-            Some(Rc { _ptr: self._ptr, _nosend: markers::NoSend, _noshare: markers::NoSync })\n+            Some(Rc { _ptr: self._ptr, _nosend: marker::NoSend, _noshare: marker::NoSync })\n         }\n     }\n }\n@@ -717,7 +717,7 @@ impl<T> Clone for Weak<T> {\n     #[inline]\n     fn clone(&self) -> Weak<T> {\n         self.inc_weak();\n-        Weak { _ptr: self._ptr, _nosend: markers::NoSend, _noshare: markers::NoSync }\n+        Weak { _ptr: self._ptr, _nosend: marker::NoSend, _noshare: marker::NoSync }\n     }\n }\n "}, {"sha": "66c28375d7a2b941d5e5f52b099bb946096cbe92", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -480,7 +480,7 @@ enum Continuation<A, B> {\n /// boilerplate gets cut out.\n mod stack {\n     use core::prelude::*;\n-    use core::markers;\n+    use core::marker;\n     use core::mem;\n     use core::ops::{Deref, DerefMut};\n     use super::BTreeMap;\n@@ -494,7 +494,7 @@ mod stack {\n     /// where `&'static` can be used in any function expecting any lifetime reference.\n     pub struct IdRef<'id, T: 'id> {\n         inner: &'id mut T,\n-        marker: markers::InvariantLifetime<'id>\n+        marker: marker::InvariantLifetime<'id>\n     }\n \n     impl<'id, T> Deref for IdRef<'id, T> {\n@@ -536,7 +536,7 @@ mod stack {\n     pub struct Pusher<'id, 'a, K:'a, V:'a> {\n         map: &'a mut BTreeMap<K, V>,\n         stack: Stack<K, V>,\n-        marker: markers::InvariantLifetime<'id>\n+        marker: marker::InvariantLifetime<'id>\n     }\n \n     impl<'a, K, V> PartialSearchStack<'a, K, V> {\n@@ -571,11 +571,11 @@ mod stack {\n             let pusher = Pusher {\n                 map: self.map,\n                 stack: self.stack,\n-                marker: markers::InvariantLifetime\n+                marker: marker::InvariantLifetime\n             };\n             let node = IdRef {\n                 inner: unsafe { &mut *self.next },\n-                marker: markers::InvariantLifetime\n+                marker: marker::InvariantLifetime\n             };\n \n             closure(pusher, node)"}, {"sha": "5463d135c08b0eaa8de33ce3d293698f008d3d6b", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -124,8 +124,8 @@ mod std {\n     pub use core::clone;    // deriving(Clone)\n     pub use core::cmp;      // deriving(Eq, Ord, etc.)\n     #[cfg(stage0)]\n-    pub use core::markers as kinds;\n-    pub use core::markers;  // deriving(Copy)\n+    pub use core::marker as kinds;\n+    pub use core::marker;  // deriving(Copy)\n     pub use core::hash;     // deriving(Hash)\n }\n \n@@ -140,7 +140,7 @@ mod prelude {\n     pub use core::iter::{FromIterator, Extend, IteratorExt};\n     pub use core::iter::{Iterator, DoubleEndedIterator, RandomAccessIterator};\n     pub use core::iter::{ExactSizeIterator};\n-    pub use core::markers::{Copy, Send, Sized, Sync};\n+    pub use core::marker::{Copy, Send, Sized, Sync};\n     pub use core::mem::drop;\n     pub use core::ops::{Drop, Fn, FnMut, FnOnce};\n     pub use core::option::Option;"}, {"sha": "38993520da152206f304ef4a5cb816602afd09c0", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -20,7 +20,7 @@ use core::cmp::Ordering;\n use core::default::Default;\n use core::fmt;\n use core::iter::{self, repeat, FromIterator, RandomAccessIterator};\n-use core::markers;\n+use core::marker;\n use core::mem;\n use core::num::{Int, UnsignedInt};\n use core::ops::{Index, IndexMut};\n@@ -534,7 +534,7 @@ impl<T> RingBuf<T> {\n             head: self.head,\n             cap: self.cap,\n             ptr: self.ptr,\n-            marker: markers::ContravariantLifetime::<'a>,\n+            marker: marker::ContravariantLifetime::<'a>,\n         }\n     }\n \n@@ -1414,7 +1414,7 @@ pub struct IterMut<'a, T:'a> {\n     tail: uint,\n     head: uint,\n     cap: uint,\n-    marker: markers::ContravariantLifetime<'a>,\n+    marker: marker::ContravariantLifetime<'a>,\n }\n \n #[stable]"}, {"sha": "6acb75387fdc3154f79cf25ccf02a2153a1cf9bf", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -95,7 +95,7 @@ use core::cmp::Ordering::{self, Greater, Less};\n use core::cmp::{self, Ord, PartialEq};\n use core::iter::{Iterator, IteratorExt};\n use core::iter::{range, range_step, MultiplicativeIterator};\n-use core::markers::Sized;\n+use core::marker::Sized;\n use core::mem::size_of;\n use core::mem;\n use core::ops::{FnMut, SliceMut};"}, {"sha": "9979fe128fc2e6ef0213d09eea322eea8dd20505", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -55,7 +55,7 @@ use core::default::Default;\n use core::fmt;\n use core::hash::{self, Hash};\n use core::iter::{repeat, FromIterator};\n-use core::markers::{ContravariantLifetime, InvariantType};\n+use core::marker::{ContravariantLifetime, InvariantType};\n use core::mem;\n use core::nonzero::NonZero;\n use core::num::{Int, UnsignedInt};"}, {"sha": "2013c398c5542c7778c79579d7cec3293566aef2", "filename": "src/libcore/array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -17,7 +17,7 @@\n use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use fmt;\n-use markers::Copy;\n+use marker::Copy;\n use ops::Deref;\n use option::Option;\n "}, {"sha": "aee1d825bc2408d58dd1375dd44764f97065b564", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -72,7 +72,7 @@\n \n use self::Ordering::*;\n \n-use markers::Sync;\n+use marker::Sync;\n \n use intrinsics;\n use cell::UnsafeCell;"}, {"sha": "de9c79614b3bd53ce1f52f459368b852ceb1c75b", "filename": "src/libcore/borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -47,7 +47,7 @@\n use clone::Clone;\n use cmp::{Eq, Ord, Ordering, PartialEq, PartialOrd};\n use fmt;\n-use markers::Sized;\n+use marker::Sized;\n use ops::Deref;\n use option::Option;\n use self::Cow::*;"}, {"sha": "7217468c74ed962e8ed6dc32ecbeda58fdc212d0", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -161,7 +161,7 @@ use clone::Clone;\n use cmp::PartialEq;\n use default::Default;\n use fmt;\n-use markers::{Copy, Send};\n+use marker::{Copy, Send};\n use ops::{Deref, DerefMut, Drop};\n use option::Option;\n use option::Option::{None, Some};\n@@ -520,11 +520,11 @@ impl<'b, T> DerefMut for RefMut<'b, T> {\n ///\n /// ```rust\n /// use std::cell::UnsafeCell;\n-/// use std::markers;\n+/// use std::marker;\n ///\n /// struct NotThreadSafe<T> {\n ///     value: UnsafeCell<T>,\n-///     marker: markers::NoSync\n+///     marker: marker::NoSync\n /// }\n /// ```\n ///"}, {"sha": "3149247a83aed96cf4df8e6af48ef4178138febf", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -21,7 +21,7 @@\n \n #![stable]\n \n-use markers::Sized;\n+use marker::Sized;\n \n /// A common trait for cloning an object.\n #[stable]"}, {"sha": "c3dfd5f51595f80b1c0e561cc4c68ca4852ad615", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -43,7 +43,7 @@\n \n use self::Ordering::*;\n \n-use markers::Sized;\n+use marker::Sized;\n use option::Option::{self, Some, None};\n \n /// Trait for equality comparisons which are [partial equivalence relations](\n@@ -316,7 +316,7 @@ pub fn partial_max<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n mod impls {\n     use cmp::{PartialOrd, Ord, PartialEq, Eq, Ordering};\n     use cmp::Ordering::{Less, Greater, Equal};\n-    use markers::Sized;\n+    use marker::Sized;\n     use option::Option;\n     use option::Option::{Some, None};\n "}, {"sha": "c7ff0f938b667f370b8ab458fc8e644e0e96b294", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -15,7 +15,7 @@\n use any;\n use cell::{Cell, Ref, RefMut};\n use iter::{Iterator, IteratorExt, range};\n-use markers::{Copy, Sized};\n+use marker::{Copy, Sized};\n use mem;\n use option::Option;\n use option::Option::{Some, None};"}, {"sha": "97d26b5333aab7675f34b9f0fb9a697b3ac3f313", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -67,7 +67,7 @@ use num::{ToPrimitive, Int};\n use ops::{Add, Deref, FnMut};\n use option::Option;\n use option::Option::{Some, None};\n-use std::markers::Sized;\n+use std::marker::Sized;\n use uint;\n \n /// An interface for dealing with \"external iterators\". These types of iterators"}, {"sha": "98b1e8db89fec793f5c15f47ef6da920e163c0e8", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -111,7 +111,7 @@ pub mod ptr;\n \n /* Core language traits */\n \n-pub mod markers;\n+pub mod marker;\n pub mod ops;\n pub mod cmp;\n pub mod clone;\n@@ -151,8 +151,8 @@ mod std {\n     pub use clone;\n     pub use cmp;\n     #[cfg(stage0)]\n-    pub use markers as kinds;\n-    pub use markers;\n+    pub use marker as kinds;\n+    pub use marker;\n     pub use option;\n     pub use fmt;\n     pub use hash;"}, {"sha": "d400cb47cbff6d14f5ed4da9d26ff6921e3c4a70", "filename": "src/libcore/marker.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -87,7 +87,7 @@ pub trait Copy {\n ///\n /// Users writing their own types with interior mutability (or anything\n /// else that is not thread-safe) should use the `NoSync` marker type\n-/// (from `std::markers`) to ensure that the compiler doesn't\n+/// (from `std::marker`) to ensure that the compiler doesn't\n /// consider the user-defined type to be `Sync`.  Any types with\n /// interior mutability must also use the `std::cell::UnsafeCell` wrapper\n /// around the value(s) which can be mutated when behind a `&`\n@@ -140,10 +140,10 @@ pub unsafe trait Sync {\n #[unstable = \"likely to change with new variance strategy\"]\n #[lang=\"covariant_type\"]\n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n-pub struct CovariantType<Sized? T>;\n+pub struct CovariantType<T: ?Sized>;\n \n-impl<Sized? T> Copy for CovariantType<T> {}\n-impl<Sized? T> Clone for CovariantType<T> {\n+impl<T: ?Sized> Copy for CovariantType<T> {}\n+impl<T: ?Sized> Clone for CovariantType<T> {\n     fn clone(&self) -> CovariantType<T> { *self }\n }\n ", "previous_filename": "src/libcore/markers.rs"}, {"sha": "8438c9b206ee7132ac9331b94c7c6a127e746ffc", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -15,7 +15,7 @@\n \n #![stable]\n \n-use markers::Sized;\n+use marker::Sized;\n use intrinsics;\n use ptr;\n "}, {"sha": "046406ee4d976fe51e048c8bc101a2e86a9027d3", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -21,7 +21,7 @@ use cmp::{PartialEq, Eq};\n use cmp::{PartialOrd, Ord};\n use intrinsics;\n use iter::IteratorExt;\n-use markers::Copy;\n+use marker::Copy;\n use mem::size_of;\n use ops::{Add, Sub, Mul, Div, Rem, Neg};\n use ops::{Not, BitAnd, BitOr, BitXor, Shl, Shr};\n@@ -992,7 +992,7 @@ impl_to_primitive_float! { f64 }\n \n /// A generic trait for converting a number to a value.\n #[experimental = \"trait is likely to be removed\"]\n-pub trait FromPrimitive : ::markers::Sized {\n+pub trait FromPrimitive : ::marker::Sized {\n     /// Convert an `int` to return an optional value of this type. If the\n     /// value cannot be represented by this value, the `None` is returned.\n     #[inline]"}, {"sha": "239aa6058ccf3ef7b11ff6df3b6355acf7fabf16", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -63,7 +63,7 @@\n \n use clone::Clone;\n use iter::{Step, Iterator,DoubleEndedIterator,ExactSizeIterator};\n-use markers::Sized;\n+use marker::Sized;\n use option::Option::{self, Some, None};\n \n /// The `Drop` trait is used to run some code when a value goes out of scope. This"}, {"sha": "c175b83e7609a524c3ce36820b0610a2dc21791d", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -29,7 +29,7 @@\n //! ```\n \n // Reexported core operators\n-pub use markers::{Copy, Send, Sized, Sync};\n+pub use marker::{Copy, Send, Sized, Sync};\n pub use ops::{Drop, Fn, FnMut, FnOnce};\n \n // Reexported functions"}, {"sha": "c35d948165ab8084ee5e4feb5abe044a6642d942", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -92,7 +92,7 @@ use mem;\n use clone::Clone;\n use intrinsics;\n use option::Option::{self, Some, None};\n-use markers::{Send, Sized, Sync};\n+use marker::{Send, Sized, Sync};\n \n use cmp::{PartialEq, Eq, Ord, PartialOrd};\n use cmp::Ordering::{self, Less, Equal, Greater};"}, {"sha": "1ad6d43f76f0919308996a5034f230e7929fc78e", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -18,7 +18,7 @@\n //!\n //! Their definition should always match the ABI defined in `rustc::back::abi`.\n \n-use markers::Copy;\n+use marker::Copy;\n use mem;\n \n /// The representation of a Rust slice"}, {"sha": "3d55d09ccf125faf266321e657466dcd759a82c7", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -41,7 +41,7 @@ use cmp::Ordering::{Less, Equal, Greater};\n use cmp;\n use default::Default;\n use iter::*;\n-use markers::Copy;\n+use marker::Copy;\n use num::Int;\n use ops::{FnMut, self};\n use option::Option;\n@@ -52,7 +52,7 @@ use ptr;\n use ptr::PtrExt;\n use mem;\n use mem::size_of;\n-use markers::{Sized, self};\n+use marker::{Sized, self};\n use raw::Repr;\n // Avoid conflicts with *both* the Slice trait (buggy) and the `slice::raw` module.\n use raw::Slice as RawSlice;\n@@ -169,11 +169,11 @@ impl<T> SliceExt for [T] {\n             if mem::size_of::<T>() == 0 {\n                 Iter {ptr: p,\n                       end: (p as uint + self.len()) as *const T,\n-                      marker: markers::ContravariantLifetime::<'a>}\n+                      marker: marker::ContravariantLifetime::<'a>}\n             } else {\n                 Iter {ptr: p,\n                       end: p.offset(self.len() as int),\n-                      marker: markers::ContravariantLifetime::<'a>}\n+                      marker: marker::ContravariantLifetime::<'a>}\n             }\n         }\n     }\n@@ -322,11 +322,11 @@ impl<T> SliceExt for [T] {\n             if mem::size_of::<T>() == 0 {\n                 IterMut {ptr: p,\n                          end: (p as uint + self.len()) as *mut T,\n-                         marker: markers::ContravariantLifetime::<'a>}\n+                         marker: marker::ContravariantLifetime::<'a>}\n             } else {\n                 IterMut {ptr: p,\n                          end: p.offset(self.len() as int),\n-                         marker: markers::ContravariantLifetime::<'a>}\n+                         marker: marker::ContravariantLifetime::<'a>}\n             }\n         }\n     }\n@@ -734,7 +734,7 @@ macro_rules! make_slice {\n pub struct Iter<'a, T: 'a> {\n     ptr: *const T,\n     end: *const T,\n-    marker: markers::ContravariantLifetime<'a>\n+    marker: marker::ContravariantLifetime<'a>\n }\n \n #[experimental]\n@@ -809,7 +809,7 @@ impl<'a, T> RandomAccessIterator for Iter<'a, T> {\n pub struct IterMut<'a, T: 'a> {\n     ptr: *mut T,\n     end: *mut T,\n-    marker: markers::ContravariantLifetime<'a>,\n+    marker: marker::ContravariantLifetime<'a>,\n }\n \n #[experimental]"}, {"sha": "d9db50b0d5a967a978dca7c30e95734f8568f777", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -23,7 +23,7 @@ use default::Default;\n use iter::range;\n use iter::ExactSizeIterator;\n use iter::{Map, Iterator, IteratorExt, DoubleEndedIterator};\n-use markers::Sized;\n+use marker::Sized;\n use mem;\n use num::Int;\n use ops::{Fn, FnMut};"}, {"sha": "35c1cb09281f41cc035500f52014afca66f60754", "filename": "src/libcore/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcore%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fty.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -10,4 +10,4 @@\n \n //! Types dealing with unsafe actions.\n \n-use markers;\n+use marker;"}, {"sha": "63bf9ec331454f368c7cb354888425a7aa53018f", "filename": "src/libcoretest/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcoretest%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcoretest%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fhash%2Fmod.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-use core::markers::Sized;\n+use core::marker::Sized;\n use std::mem;\n \n use core::slice::SliceExt;"}, {"sha": "1e8d2d4bc610d0cdfde01403c6f654bb08a2a84b", "filename": "src/libcoretest/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcoretest%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcoretest%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fmod.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -12,7 +12,7 @@ use core::cmp::PartialEq;\n use core::fmt::Show;\n use core::num::{NumCast, cast};\n use core::ops::{Add, Sub, Mul, Div, Rem};\n-use core::markers::Copy;\n+use core::marker::Copy;\n \n #[cfg_attr(stage0, macro_escape)]\n #[cfg_attr(not(stage0), macro_use)]"}, {"sha": "1169f910238022b2c7148e013d8ef10b96b20f98", "filename": "src/libcoretest/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcoretest%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibcoretest%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Foption.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use core::option::*;\n-use core::markers;\n+use core::marker;\n use core::mem;\n use core::clone::Clone;\n \n@@ -82,7 +82,7 @@ fn test_option_dance() {\n \n #[test] #[should_fail]\n fn test_option_too_much_dance() {\n-    let mut y = Some(markers::NoCopy);\n+    let mut y = Some(marker::NoCopy);\n     let _y2 = y.take().unwrap();\n     let _y3 = y.take().unwrap();\n }"}, {"sha": "86ed8794e1a04a8a5c059f1f2d24bc105e8872e4", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -5082,6 +5082,6 @@ pub fn issue_14344_workaround() {} // FIXME #14344 force linkage to happen corre\n #[cfg(not(test))]\n mod std {\n     #[cfg(stage0)]\n-    pub use core::markers as kinds;\n-    pub use core::markers;\n+    pub use core::marker as kinds;\n+    pub use core::marker;\n }"}, {"sha": "95dbbf9efcf372b7bbde4195b377bdec62bc2e1e", "filename": "src/librand/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -517,8 +517,8 @@ mod std {\n     pub use core::{option, fmt}; // panic!()\n     pub use core::clone; // derive Clone\n     #[cfg(stage0)]\n-    pub use core::markers as kinds;\n-    pub use core::markers;\n+    pub use core::marker as kinds;\n+    pub use core::marker;\n }\n \n #[cfg(test)]"}, {"sha": "3818ab45e06ee9c6a2c995266de06d3cb04cbf6c", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -29,7 +29,7 @@ use middle::ty::{MethodOrigin, MethodParam, MethodTypeParam};\n use middle::ty::{MethodStatic, MethodStaticUnboxedClosure};\n use util::ppaux::Repr;\n \n-use std::markers;\n+use std::marker;\n use syntax::{ast, ast_util};\n use syntax::ptr::P;\n use syntax::codemap::Span;\n@@ -135,7 +135,7 @@ enum TrackMatchMode<T> {\n     Conflicting,\n }\n \n-impl<T> markers::Copy for TrackMatchMode<T> {}\n+impl<T> marker::Copy for TrackMatchMode<T> {}\n \n impl<T> TrackMatchMode<T> {\n     // Builds up the whole match mode for a pattern from its constituent"}, {"sha": "59f53d5fb392287c1db94be2403aff1b4483c455", "filename": "src/librustc/middle/infer/unify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -10,7 +10,7 @@\n \n pub use self::VarValue::*;\n \n-use std::markers;\n+use std::marker;\n \n use middle::ty::{expected_found, IntVarValue};\n use middle::ty::{self, Ty};\n@@ -78,7 +78,7 @@ pub struct UnificationTable<K,V> {\n /// made during the snapshot may either be *committed* or *rolled back*.\n pub struct Snapshot<K> {\n     // Link snapshot to the key type `K` of the table.\n-    marker: markers::CovariantType<K>,\n+    marker: marker::CovariantType<K>,\n     snapshot: sv::Snapshot,\n }\n \n@@ -108,7 +108,7 @@ impl<'tcx, V:PartialEq+Clone+Repr<'tcx>, K:UnifyKey<'tcx, V>> UnificationTable<K\n     /// Starts a new snapshot. Each snapshot must be either\n     /// rolled back or committed in a \"LIFO\" (stack) order.\n     pub fn snapshot(&mut self) -> Snapshot<K> {\n-        Snapshot { marker: markers::CovariantType::<K>,\n+        Snapshot { marker: marker::CovariantType::<K>,\n                    snapshot: self.values.start_snapshot() }\n     }\n "}, {"sha": "bf102acb8b12e16b2911419e88240cd33a661bbb", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -402,8 +402,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for TermsContext<'a, 'tcx> {\n struct ConstraintContext<'a, 'tcx: 'a> {\n     terms_cx: TermsContext<'a, 'tcx>,\n \n-    // These are the def-id of the std::markers::InvariantType,\n-    // std::markers::InvariantLifetime, and so on. The arrays\n+    // These are the def-id of the std::marker::InvariantType,\n+    // std::marker::InvariantLifetime, and so on. The arrays\n     // are indexed by the `ParamKind` (type, lifetime, self). Note\n     // that there are no marker types for self, so the entries for\n     // self are always None."}, {"sha": "27ea2e895f645b17375c8d522b1267cfe4b21716", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -21,7 +21,7 @@ use default::Default;\n use fmt::{self, Show};\n use hash::{Hash, Hasher, RandomSipHasher};\n use iter::{self, Iterator, IteratorExt, FromIterator, Extend, Map};\n-use markers::Sized;\n+use marker::Sized;\n use mem::{self, replace};\n use num::{Int, UnsignedInt};\n use ops::{Deref, FnMut, Index, IndexMut};"}, {"sha": "5c9bbf1144c5db7c1724da8a0f93770dac1b94b9", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -13,7 +13,7 @@\n use borrow::BorrowFrom;\n use clone::Clone;\n use cmp::{Eq, PartialEq};\n-use core::markers::Sized;\n+use core::marker::Sized;\n use default::Default;\n use fmt::Show;\n use fmt;"}, {"sha": "6eb98da4da46e7c0223773cf4f88d8a3ee4ae436", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -16,7 +16,7 @@ use clone::Clone;\n use cmp;\n use hash::{Hash, Hasher};\n use iter::{Iterator, count};\n-use markers::{Copy, Sized, self};\n+use marker::{Copy, Sized, self};\n use mem::{min_align_of, size_of};\n use mem;\n use num::{Int, UnsignedInt};\n@@ -72,7 +72,7 @@ pub struct RawTable<K, V> {\n     hashes:   Unique<u64>,\n     // Because K/V do not appear directly in any of the types in the struct,\n     // inform rustc that in fact instances of K and V are reachable from here.\n-    marker:   markers::CovariantType<(K,V)>,\n+    marker:   marker::CovariantType<(K,V)>,\n }\n \n struct RawBucket<K, V> {\n@@ -562,7 +562,7 @@ impl<K, V> RawTable<K, V> {\n                 size: 0,\n                 capacity: 0,\n                 hashes: Unique::null(),\n-                marker: markers::CovariantType,\n+                marker: marker::CovariantType,\n             };\n         }\n         // No need for `checked_mul` before a more restrictive check performed\n@@ -601,7 +601,7 @@ impl<K, V> RawTable<K, V> {\n             capacity: capacity,\n             size:     0,\n             hashes:   Unique(hashes),\n-            marker:   markers::CovariantType,\n+            marker:   marker::CovariantType,\n         }\n     }\n \n@@ -651,7 +651,7 @@ impl<K, V> RawTable<K, V> {\n             hashes_end: unsafe {\n                 self.hashes.0.offset(self.capacity as int)\n             },\n-            marker: markers::ContravariantLifetime,\n+            marker: marker::ContravariantLifetime,\n         }\n     }\n \n@@ -676,7 +676,7 @@ impl<K, V> RawTable<K, V> {\n             iter: RawBuckets {\n                 raw: raw,\n                 hashes_end: hashes_end,\n-                marker: markers::ContravariantLifetime,\n+                marker: marker::ContravariantLifetime,\n             },\n             table: self,\n         }\n@@ -689,7 +689,7 @@ impl<K, V> RawTable<K, V> {\n             iter: RawBuckets {\n                 raw: raw,\n                 hashes_end: hashes_end,\n-                marker: markers::ContravariantLifetime::<'static>,\n+                marker: marker::ContravariantLifetime::<'static>,\n             },\n             table: self,\n         }\n@@ -703,7 +703,7 @@ impl<K, V> RawTable<K, V> {\n             raw: raw_bucket.offset(self.capacity as int),\n             hashes_end: raw_bucket.hash,\n             elems_left: self.size,\n-            marker:     markers::ContravariantLifetime,\n+            marker:     marker::ContravariantLifetime,\n         }\n     }\n }\n@@ -713,7 +713,7 @@ impl<K, V> RawTable<K, V> {\n struct RawBuckets<'a, K, V> {\n     raw: RawBucket<K, V>,\n     hashes_end: *mut u64,\n-    marker: markers::ContravariantLifetime<'a>,\n+    marker: marker::ContravariantLifetime<'a>,\n }\n \n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n@@ -722,7 +722,7 @@ impl<'a, K, V> Clone for RawBuckets<'a, K, V> {\n         RawBuckets {\n             raw: self.raw,\n             hashes_end: self.hashes_end,\n-            marker: markers::ContravariantLifetime,\n+            marker: marker::ContravariantLifetime,\n         }\n     }\n }\n@@ -754,7 +754,7 @@ struct RevMoveBuckets<'a, K, V> {\n     raw: RawBucket<K, V>,\n     hashes_end: *mut u64,\n     elems_left: uint,\n-    marker: markers::ContravariantLifetime<'a>,\n+    marker: marker::ContravariantLifetime<'a>,\n }\n \n impl<'a, K, V> Iterator for RevMoveBuckets<'a, K, V> {"}, {"sha": "69e7e429d07da01b5d7726415d17f08b1163d626", "filename": "src/libstd/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -63,7 +63,7 @@\n \n pub use core::hash::{Hash, Hasher, Writer, hash, sip};\n \n-use core::markers::Sized;\n+use core::marker::Sized;\n use default::Default;\n use rand::Rng;\n use rand;"}, {"sha": "b9c7ab15313501b42d216f85c287bdd2447b35b3", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -232,7 +232,7 @@ use error::{FromError, Error};\n use fmt;\n use int;\n use iter::{Iterator, IteratorExt};\n-use markers::Sized;\n+use marker::Sized;\n use mem::transmute;\n use ops::FnOnce;\n use option::Option;"}, {"sha": "ad3fb71d949bd36dc3e4a703f2a140b2b691bd4f", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -34,7 +34,7 @@ use failure::LOCAL_STDERR;\n use fmt;\n use io::{Reader, Writer, IoResult, IoError, OtherIoError, Buffer,\n          standard_error, EndOfFile, LineBufferedWriter, BufferedReader};\n-use markers::{Sync, Send};\n+use marker::{Sync, Send};\n use libc;\n use mem;\n use option::Option;"}, {"sha": "dd4a0287ca65634bba23d2832c79bb765c5c6208", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -151,7 +151,7 @@ extern crate libc;\n \n // Make std testable by not duplicating lang items. See #2912\n #[cfg(test)] extern crate \"std\" as realstd;\n-#[cfg(test)] pub use realstd::markers;\n+#[cfg(test)] pub use realstd::marker;\n #[cfg(test)] pub use realstd::ops;\n #[cfg(test)] pub use realstd::cmp;\n #[cfg(test)] pub use realstd::boxed;\n@@ -168,8 +168,8 @@ pub use core::default;\n pub use core::finally;\n pub use core::intrinsics;\n pub use core::iter;\n-#[cfg(stage0)] #[cfg(not(test))] pub use core::markers as kinds;\n-#[cfg(not(test))] pub use core::markers;\n+#[cfg(stage0)] #[cfg(not(test))] pub use core::marker as kinds;\n+#[cfg(not(test))] pub use core::marker;\n pub use core::mem;\n #[cfg(not(test))] pub use core::ops;\n pub use core::ptr;\n@@ -313,8 +313,8 @@ mod std {\n     pub use cell; // used for tls!\n     pub use thread_local; // used for thread_local!\n     #[cfg(stage0)]\n-    pub use markers as kinds;\n-    pub use markers;  // used for tls!\n+    pub use marker as kinds;\n+    pub use marker;  // used for tls!\n     pub use ops; // used for bitflags!\n \n     // The test runner calls ::std::os::args() but really wants realstd"}, {"sha": "f433cd1e664811947fd6b771e08962a53e7306cc", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -19,7 +19,7 @@\n #[cfg(test)] use fmt::Show;\n use ops::{Add, Sub, Mul, Div, Rem, Neg};\n \n-use markers::Copy;\n+use marker::Copy;\n use clone::Clone;\n use cmp::{PartialOrd, PartialEq};\n "}, {"sha": "2bc6d0869a5a810087873a6ee563b0d2bc2c85e2", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -37,7 +37,7 @@ use error::{FromError, Error};\n use fmt;\n use io::{IoResult, IoError};\n use iter::{Iterator, IteratorExt};\n-use markers::Copy;\n+use marker::Copy;\n use libc::{c_void, c_int, c_char};\n use libc;\n use boxed::Box;"}, {"sha": "18b8d1d46aa831f779554cf8adb820df1612ab45", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -61,7 +61,7 @@\n \n #![experimental]\n \n-use core::markers::Sized;\n+use core::marker::Sized;\n use ffi::CString;\n use clone::Clone;\n use fmt;"}, {"sha": "d8bb989e19f140a7b6baa94b6ccce80d65fb6fff", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -16,7 +16,7 @@ use hash;\n use io::Writer;\n use iter::{AdditiveIterator, Extend};\n use iter::{Iterator, IteratorExt, Map};\n-use markers::Sized;\n+use marker::Sized;\n use option::Option::{self, Some, None};\n use slice::{AsSlice, Split, SliceExt, SliceConcatExt};\n use str::{self, FromStr, StrExt};"}, {"sha": "1aab52edd8e0ee75fbbaab5f5c9aa176fe2607fc", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -13,7 +13,7 @@\n #![stable]\n \n // Reexported core operators\n-#[stable] #[doc(no_inline)] pub use markers::{Copy, Send, Sized, Sync};\n+#[stable] #[doc(no_inline)] pub use marker::{Copy, Send, Sized, Sync};\n #[stable] #[doc(no_inline)] pub use ops::{Drop, Fn, FnMut, FnOnce};\n \n // Reexported functions"}, {"sha": "a7d2fb169b6fcfa5239e48e0e00412d786272393", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -185,7 +185,7 @@ mod imp {\n     extern crate libc;\n \n     use io::{IoResult};\n-    use markers::Sync;\n+    use marker::Sync;\n     use mem;\n     use os;\n     use rand::Rng;"}, {"sha": "91d9ff46b8683d09d601b54b4bf6063ab072850b", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -23,7 +23,7 @@\n \n #![allow(dead_code)]\n \n-use markers::Send;\n+use marker::Send;\n use ops::FnOnce;\n use sys;\n use thunk::Thunk;"}, {"sha": "f174771a3e011527a03f052b4252c8705549cdbc", "filename": "src/libstd/sync/mpsc/blocking.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fsync%2Fmpsc%2Fblocking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fsync%2Fmpsc%2Fblocking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fblocking.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -13,8 +13,8 @@\n use thread::Thread;\n use sync::atomic::{AtomicBool, ATOMIC_BOOL_INIT, Ordering};\n use sync::Arc;\n-use markers::{Sync, Send};\n-use markers::{NoSend, NoSync};\n+use marker::{Sync, Send};\n+use marker::{NoSend, NoSync};\n use mem;\n use clone::Clone;\n "}, {"sha": "5dc58add665fddc7b3f0008cec548ce50758530e", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -319,7 +319,7 @@ use prelude::v1::*;\n \n use sync::Arc;\n use fmt;\n-use markers;\n+use marker;\n use mem;\n use cell::UnsafeCell;\n \n@@ -373,7 +373,7 @@ unsafe impl<T:Send> Send for Sender<T> { }\n pub struct SyncSender<T> {\n     inner: Arc<RacyCell<sync::Packet<T>>>,\n     // can't share in an arc\n-    _marker: markers::NoSync,\n+    _marker: marker::NoSync,\n }\n \n /// An error returned from the `send` function on channels.\n@@ -678,7 +678,7 @@ impl<T: Send> Drop for Sender<T> {\n \n impl<T: Send> SyncSender<T> {\n     fn new(inner: Arc<RacyCell<sync::Packet<T>>>) -> SyncSender<T> {\n-        SyncSender { inner: inner, _marker: markers::NoSync }\n+        SyncSender { inner: inner, _marker: marker::NoSync }\n     }\n \n     /// Sends a value on this synchronous channel."}, {"sha": "b7bb22b3ef3147ea94304e90554b1752ae8643da", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -57,7 +57,7 @@\n use core::prelude::*;\n \n use core::cell::Cell;\n-use core::markers;\n+use core::marker;\n use core::mem;\n use core::uint;\n \n@@ -70,7 +70,7 @@ pub struct Select {\n     head: *mut Handle<'static, ()>,\n     tail: *mut Handle<'static, ()>,\n     next_id: Cell<uint>,\n-    marker1: markers::NoSend,\n+    marker1: marker::NoSend,\n }\n \n /// A handle to a receiver which is currently a member of a `Select` set of\n@@ -115,7 +115,7 @@ impl Select {\n     /// rather much easier through the `select!` macro.\n     pub fn new() -> Select {\n         Select {\n-            marker1: markers::NoSend,\n+            marker1: marker::NoSend,\n             head: 0 as *mut Handle<'static, ()>,\n             tail: 0 as *mut Handle<'static, ()>,\n             next_id: Cell::new(1),"}, {"sha": "9756d08619356a66aa7eccd4f1774a27eec934b1", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -11,7 +11,7 @@\n use prelude::v1::*;\n \n use cell::UnsafeCell;\n-use markers;\n+use marker;\n use ops::{Deref, DerefMut};\n use sync::poison::{self, TryLockError, TryLockResult, LockResult};\n use sys_common::mutex as sys;\n@@ -166,7 +166,7 @@ pub struct MutexGuard<'a, T: 'a> {\n     __lock: &'a StaticMutex,\n     __data: &'a UnsafeCell<T>,\n     __poison: poison::Guard,\n-    __marker: markers::NoSend,\n+    __marker: marker::NoSend,\n }\n \n /// Static initialization of a mutex. This constant can be used to initialize\n@@ -286,7 +286,7 @@ impl<'mutex, T> MutexGuard<'mutex, T> {\n                 __lock: lock,\n                 __data: data,\n                 __poison: guard,\n-                __marker: markers::NoSend,\n+                __marker: marker::NoSend,\n             }\n         })\n     }"}, {"sha": "15ca4783700f09fcb706c972915e7a3ea14f0832", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -14,7 +14,7 @@\n //! example use case would be for initializing an FFI library.\n \n use int;\n-use markers::Sync;\n+use marker::Sync;\n use mem::drop;\n use ops::FnOnce;\n use sync::atomic::{AtomicInt, Ordering, ATOMIC_INT_INIT};"}, {"sha": "36f9d4228b351bc1ca9e89b5ee6695103e26655a", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -11,7 +11,7 @@\n use prelude::v1::*;\n \n use cell::UnsafeCell;\n-use markers;\n+use marker;\n use ops::{Deref, DerefMut};\n use sync::poison::{self, LockResult, TryLockError, TryLockResult};\n use sys_common::rwlock as sys;\n@@ -113,7 +113,7 @@ pub const RW_LOCK_INIT: StaticRwLock = StaticRwLock {\n pub struct RwLockReadGuard<'a, T: 'a> {\n     __lock: &'a StaticRwLock,\n     __data: &'a UnsafeCell<T>,\n-    __marker: markers::NoSend,\n+    __marker: marker::NoSend,\n }\n \n /// RAII structure used to release the exclusive write access of a lock when\n@@ -124,7 +124,7 @@ pub struct RwLockWriteGuard<'a, T: 'a> {\n     __lock: &'a StaticRwLock,\n     __data: &'a UnsafeCell<T>,\n     __poison: poison::Guard,\n-    __marker: markers::NoSend,\n+    __marker: marker::NoSend,\n }\n \n impl<T: Send + Sync> RwLock<T> {\n@@ -309,7 +309,7 @@ impl<'rwlock, T> RwLockReadGuard<'rwlock, T> {\n             RwLockReadGuard {\n                 __lock: lock,\n                 __data: data,\n-                __marker: markers::NoSend,\n+                __marker: marker::NoSend,\n             }\n         })\n     }\n@@ -322,7 +322,7 @@ impl<'rwlock, T> RwLockWriteGuard<'rwlock, T> {\n                 __lock: lock,\n                 __data: data,\n                 __poison: guard,\n-                __marker: markers::NoSend,\n+                __marker: marker::NoSend,\n             }\n         })\n     }"}, {"sha": "9aea0fb3b31725f8743949065b48cc1c333ab8d5", "filename": "src/libstd/sys/common/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fsys%2Fcommon%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fsys%2Fcommon%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmutex.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use markers::Sync;\n+use marker::Sync;\n use sys::mutex as imp;\n \n /// An OS-based mutual exclusion lock."}, {"sha": "cc661877bc01e4c5847d744a06662542ef47fb90", "filename": "src/libstd/sys/unix/c.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fc.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -165,8 +165,8 @@ mod signal {\n         sa_restorer: *mut libc::c_void,\n     }\n \n-    unsafe impl ::markers::Send for sigaction { }\n-    unsafe impl ::markers::Sync for sigaction { }\n+    unsafe impl ::marker::Send for sigaction { }\n+    unsafe impl ::marker::Sync for sigaction { }\n \n     #[repr(C)]\n     #[cfg(target_word_size = \"32\")]\n@@ -217,8 +217,8 @@ mod signal {\n         sa_resv: [libc::c_int; 1],\n     }\n \n-    unsafe impl ::markers::Send for sigaction { }\n-    unsafe impl ::markers::Sync for sigaction { }\n+    unsafe impl ::marker::Send for sigaction { }\n+    unsafe impl ::marker::Sync for sigaction { }\n \n     #[repr(C)]\n     pub struct sigset_t {"}, {"sha": "ada8a7f2349bb6992de620e3c35bbc1cfbb31407", "filename": "src/libstd/sys/unix/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use cell::UnsafeCell;\n-use markers::Sync;\n+use marker::Sync;\n use sys::sync as ffi;\n use sys_common::mutex;\n "}, {"sha": "43abd96e46d1bd4f1720fbf5e39df86f4326215f", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -128,7 +128,7 @@ use any::Any;\n use boxed::Box;\n use cell::UnsafeCell;\n use clone::Clone;\n-use markers::{Send, Sync};\n+use marker::{Send, Sync};\n use ops::{Drop, FnOnce};\n use option::Option::{self, Some, None};\n use result::Result::{Err, Ok};"}, {"sha": "15b98e1aff09e0bfe2b0132ef5ef20d1ab225e97", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -346,7 +346,7 @@ mod imp {\n         pub dtor_running: UnsafeCell<bool>, // should be Cell\n     }\n \n-    unsafe impl<T> ::markers::Sync for Key<T> { }\n+    unsafe impl<T> ::marker::Sync for Key<T> { }\n \n     #[doc(hidden)]\n     impl<T> Key<T> {\n@@ -472,7 +472,7 @@ mod imp {\n         pub os: OsStaticKey,\n     }\n \n-    unsafe impl<T> ::markers::Sync for Key<T> { }\n+    unsafe impl<T> ::marker::Sync for Key<T> { }\n \n     struct Value<T: 'static> {\n         key: &'static Key<T>,"}, {"sha": "1fb5652bc0ca4c082e0b754a37d8046a10523a0e", "filename": "src/libstd/thread_local/scoped.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fthread_local%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fthread_local%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fscoped.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -108,7 +108,7 @@ macro_rules! __scoped_thread_local_inner {\n         const _INIT: __Key<$t> = __Key {\n             inner: ::std::thread_local::scoped::__impl::KeyInner {\n                 inner: ::std::thread_local::scoped::__impl::OS_INIT,\n-                marker: ::std::markers::InvariantType,\n+                marker: ::std::marker::InvariantType,\n             }\n         };\n \n@@ -211,7 +211,7 @@ mod imp {\n     #[doc(hidden)]\n     pub struct KeyInner<T> { pub inner: UnsafeCell<*mut T> }\n \n-    unsafe impl<T> ::markers::Sync for KeyInner<T> { }\n+    unsafe impl<T> ::marker::Sync for KeyInner<T> { }\n \n     #[doc(hidden)]\n     impl<T> KeyInner<T> {\n@@ -224,16 +224,16 @@ mod imp {\n \n #[cfg(any(windows, target_os = \"android\", target_os = \"ios\", target_arch = \"aarch64\"))]\n mod imp {\n-    use markers;\n+    use marker;\n     use sys_common::thread_local::StaticKey as OsStaticKey;\n \n     #[doc(hidden)]\n     pub struct KeyInner<T> {\n         pub inner: OsStaticKey,\n-        pub marker: markers::InvariantType<T>,\n+        pub marker: marker::InvariantType<T>,\n     }\n \n-    unsafe impl<T> ::markers::Sync for KeyInner<T> { }\n+    unsafe impl<T> ::marker::Sync for KeyInner<T> { }\n \n     #[doc(hidden)]\n     impl<T> KeyInner<T> {"}, {"sha": "1830a4df54aab8c9b12baadc4e770ee37439aaf1", "filename": "src/libstd/thunk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fthunk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibstd%2Fthunk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthunk.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -12,7 +12,7 @@\n #![allow(missing_docs)]\n \n use alloc::boxed::Box;\n-use core::markers::Send;\n+use core::marker::Send;\n use core::ops::FnOnce;\n \n pub struct Thunk<A=(),R=()> {"}, {"sha": "b4c171388db05c364e9201f920ce06d627c83970", "filename": "src/libsyntax/ext/deriving/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -47,7 +47,7 @@ pub fn expand_deriving_bound<F>(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"markers\", name)),\n+        path: Path::new(vec!(\"std\", \"marker\", name)),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!()"}, {"sha": "3f089d62e4ee527013505189cec1dad0c2dc47cd", "filename": "src/libunicode/tables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibunicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Flibunicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Ftables.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -7801,7 +7801,7 @@ pub mod charwidth {\n }\n \n pub mod grapheme {\n-    use core::markers::Copy;\n+    use core::marker::Copy;\n     use core::slice::SliceExt;\n     pub use self::GraphemeCat::*;\n     use core::result::Result::{Ok, Err};"}, {"sha": "e4b97ab5933cebe0bb2451a7f4fe0c6b9ffa49d3", "filename": "src/test/compile-fail/associated-types-unsized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -14,7 +14,7 @@ trait Get {\n }\n \n fn foo<T:Get>(t: T) {\n-    let x = t.get(); //~ ERROR the trait `core::markers::Sized` is not implemented\n+    let x = t.get(); //~ ERROR the trait `core::marker::Sized` is not implemented\n }\n \n fn main() {"}, {"sha": "349c33a30a53196c3a01ffa02e2bdd2d6e60d749", "filename": "src/test/compile-fail/bad-method-typaram-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn foo<T:'static>() {\n-    1u.bar::<T>(); //~ ERROR `core::markers::Send` is not implemented\n+    1u.bar::<T>(); //~ ERROR `core::marker::Send` is not implemented\n }\n \n trait bar {"}, {"sha": "69be6414e4c90e09657aba9d102e4dbf8f3ad69c", "filename": "src/test/compile-fail/bad-sized.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -16,8 +16,8 @@ trait Trait {}\n \n pub fn main() {\n     let x: Vec<Trait + Sized> = Vec::new();\n-    //~^ ERROR the trait `core::markers::Sized` is not implemented\n-    //~^^ ERROR the trait `core::markers::Sized` is not implemented\n+    //~^ ERROR the trait `core::marker::Sized` is not implemented\n+    //~^^ ERROR the trait `core::marker::Sized` is not implemented\n     let x: Vec<Box<RefCell<Trait + Sized>>> = Vec::new();\n-    //~^ ERROR the trait `core::markers::Sized` is not implemented\n+    //~^ ERROR the trait `core::marker::Sized` is not implemented\n }"}, {"sha": "730a0c3e235455f92dbdd42004665b2120ee20c0", "filename": "src/test/compile-fail/borrowck-move-out-of-static-item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-static-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-static-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-static-item.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -10,14 +10,14 @@\n \n // Ensure that moves out of static items is forbidden\n \n-use std::markers;\n+use std::marker;\n \n struct Foo {\n     foo: int,\n-    nocopy: markers::NoCopy\n+    nocopy: marker::NoCopy\n }\n \n-static BAR: Foo = Foo{foo: 5, nocopy: markers::NoCopy};\n+static BAR: Foo = Foo{foo: 5, nocopy: marker::NoCopy};\n \n \n fn test(f: Foo) {"}, {"sha": "98a29f01faf1c486846e04ce6ac5d300c8568c98", "filename": "src/test/compile-fail/borrowck-struct-update-with-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -12,7 +12,7 @@\n // move, when the struct implements Drop.\n \n // NoCopy\n-use std::markers::NoCopy as NP;\n+use std::marker::NoCopy as NP;\n \n \n struct S { a: int, np: NP }"}, {"sha": "cd215a7373780170e02eed6cb3e3aaf30ac787b6", "filename": "src/test/compile-fail/builtin-superkinds-double-superkind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -13,9 +13,9 @@\n \n trait Foo : Send+Sync { }\n \n-impl <T: Sync+'static> Foo for (T,) { } //~ ERROR the trait `core::markers::Send` is not implemented\n+impl <T: Sync+'static> Foo for (T,) { } //~ ERROR the trait `core::marker::Send` is not implemented\n \n-impl <T: Send> Foo for (T,T) { } //~ ERROR the trait `core::markers::Sync` is not implemented\n+impl <T: Send> Foo for (T,T) { } //~ ERROR the trait `core::marker::Sync` is not implemented\n \n impl <T: Send+Sync> Foo for (T,T,T) { } // (ok)\n "}, {"sha": "138fcfa8b64fe06c1ce668c766e77c89b24acf0c", "filename": "src/test/compile-fail/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -22,6 +22,6 @@ struct X<T>(T);\n impl <T:Sync> RequiresShare for X<T> { }\n \n impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n-//~^ ERROR the trait `core::markers::Send` is not implemented\n+//~^ ERROR the trait `core::marker::Send` is not implemented\n \n fn main() { }"}, {"sha": "534bb6d37ec39104bdb35d53ee08069c01c74e0c", "filename": "src/test/compile-fail/builtin-superkinds-typaram-not-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -12,6 +12,6 @@\n \n trait Foo : Send { }\n \n-impl <T: Sync+'static> Foo for T { } //~ ERROR the trait `core::markers::Send` is not implemented\n+impl <T: Sync+'static> Foo for T { } //~ ERROR the trait `core::marker::Send` is not implemented\n \n fn main() { }"}, {"sha": "1c7ae05961e66bf373b8650e911b308d328ba6b5", "filename": "src/test/compile-fail/check-static-values-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -10,7 +10,7 @@\n \n // Verifies all possible restrictions for statics values.\n \n-use std::markers;\n+use std::marker;\n \n struct WithDtor;\n "}, {"sha": "b88040cbd54a622ec02a824f06b775e286119b8c", "filename": "src/test/compile-fail/closure-bounds-cant-promote-superkind-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -13,7 +13,7 @@ struct X<F> where F: FnOnce() + 'static + Send {\n }\n \n fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n-    //~^ ERROR the trait `core::kinds::Send` is not implemented for the type\n+    //~^ ERROR the trait `core::marker::Send` is not implemented for the type\n     return X { field: blk };\n }\n "}, {"sha": "fadaa84f19db535b6ef5096b9bc0d6dbc23f1aea", "filename": "src/test/compile-fail/closure-bounds-subtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -21,7 +21,7 @@ fn give_any<F>(f: F) where F: FnOnce() {\n \n fn give_owned<F>(f: F) where F: FnOnce() + Send {\n     take_any(f);\n-    take_const_owned(f); //~ ERROR the trait `core::kinds::Sync` is not implemented for the type\n+    take_const_owned(f); //~ ERROR the trait `core::marker::Sync` is not implemented for the type\n }\n \n fn main() {}"}, {"sha": "a7962c09fb3b96a447ee95a1925cfe8b439eeea2", "filename": "src/test/compile-fail/comm-not-freeze-receiver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -13,5 +13,5 @@ use std::sync::mpsc::Receiver;\n fn test<T: Sync>() {}\n \n fn main() {\n-    test::<Receiver<int>>();   //~ ERROR: `core::markers::Sync` is not implemented\n+    test::<Receiver<int>>();   //~ ERROR: `core::marker::Sync` is not implemented\n }"}, {"sha": "1977438d42320d94842fc9e37d95602a26d5b159", "filename": "src/test/compile-fail/comm-not-freeze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -13,5 +13,5 @@ use std::sync::mpsc::Sender;\n fn test<T: Sync>() {}\n \n fn main() {\n-    test::<Sender<int>>();     //~ ERROR: `core::markers::Sync` is not implemented\n+    test::<Sender<int>>();     //~ ERROR: `core::marker::Sync` is not implemented\n }"}, {"sha": "ebd0ee97efec4840196caf65991cfdf2d2737f21", "filename": "src/test/compile-fail/dst-bad-assign-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -43,5 +43,5 @@ pub fn main() {\n     let f5: &mut Fat<ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n     let z: Box<ToBar> = box Bar1 {f: 36};\n     f5.ptr = *z;\n-    //~^ ERROR the trait `core::markers::Sized` is not implemented\n+    //~^ ERROR the trait `core::marker::Sized` is not implemented\n }"}, {"sha": "f52c990ca52eb8081f192184423f162644dd4fd3", "filename": "src/test/compile-fail/dst-bad-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -43,5 +43,5 @@ pub fn main() {\n     let f5: &mut Fat<ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n     let z: Box<ToBar> = box Bar1 {f: 36};\n     f5.ptr = Bar1 {f: 36}; //~ ERROR mismatched types: expected `ToBar`, found `Bar1`\n-    //~^ ERROR the trait `core::markers::Sized` is not implemented for the type `ToBar`\n+    //~^ ERROR the trait `core::marker::Sized` is not implemented for the type `ToBar`\n }"}, {"sha": "0276e2e418df852b55e5e7d66ac9302714dab491", "filename": "src/test/compile-fail/dst-bad-deep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -21,5 +21,5 @@ pub fn main() {\n     let f: Fat<[int; 3]> = Fat { ptr: [5i, 6, 7] };\n     let g: &Fat<[int]> = &f;\n     let h: &Fat<Fat<[int]>> = &Fat { ptr: *g };\n-    //~^ ERROR the trait `core::markers::Sized` is not implemented\n+    //~^ ERROR the trait `core::marker::Sized` is not implemented\n }"}, {"sha": "87ff4291f50e2d8f3ad951f338b8452508f189e1", "filename": "src/test/compile-fail/dst-object-from-unsized-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -15,22 +15,22 @@ impl Foo for str {}\n \n fn test1<T: ?Sized + Foo>(t: &T) {\n     let u: &Foo = t;\n-    //~^ ERROR `core::markers::Sized` is not implemented for the type `T`\n+    //~^ ERROR `core::marker::Sized` is not implemented for the type `T`\n }\n \n fn test2<T: ?Sized + Foo>(t: &T) {\n     let v: &Foo = t as &Foo;\n-    //~^ ERROR `core::markers::Sized` is not implemented for the type `T`\n+    //~^ ERROR `core::marker::Sized` is not implemented for the type `T`\n }\n \n fn test3() {\n     let _: &[&Foo] = &[\"hi\"];\n-    //~^ ERROR `core::markers::Sized` is not implemented for the type `str`\n+    //~^ ERROR `core::marker::Sized` is not implemented for the type `str`\n }\n \n fn test4() {\n     let _: &Foo = \"hi\" as &Foo;\n-    //~^ ERROR `core::markers::Sized` is not implemented for the type `str`\n+    //~^ ERROR `core::marker::Sized` is not implemented for the type `str`\n }\n \n fn main() { }"}, {"sha": "d68d6676515d0453221934976189099e11a137cb", "filename": "src/test/compile-fail/dst-sized-trait-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -15,9 +15,9 @@\n trait Foo<T> : Sized { fn take(self, x: &T) { } } // Note: T is sized\n \n impl Foo<[int]> for uint { }\n-//~^ ERROR the trait `core::markers::Sized` is not implemented for the type `[int]`\n+//~^ ERROR the trait `core::marker::Sized` is not implemented for the type `[int]`\n \n impl Foo<int> for [uint] { }\n-//~^ ERROR the trait `core::markers::Sized` is not implemented for the type `[uint]`\n+//~^ ERROR the trait `core::marker::Sized` is not implemented for the type `[uint]`\n \n pub fn main() { }"}, {"sha": "d79b3f472d06b70bd53436e6990058290ae86071", "filename": "src/test/compile-fail/error-should-say-copy-not-pod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Ferror-should-say-copy-not-pod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Ferror-should-say-copy-not-pod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ferror-should-say-copy-not-pod.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -13,5 +13,5 @@\n fn check_bound<T:Copy>(_: T) {}\n \n fn main() {\n-    check_bound(\"nocopy\".to_string()); //~ ERROR the trait `core::markers::Copy` is not implemented\n+    check_bound(\"nocopy\".to_string()); //~ ERROR the trait `core::marker::Copy` is not implemented\n }"}, {"sha": "c7cac71af036125ded2fdda44ffebcb7497a4610", "filename": "src/test/compile-fail/issue-14366.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let _x = \"test\" as &::std::any::Any;\n-//~^ ERROR the trait `core::markers::Sized` is not implemented for the type `str`\n+//~^ ERROR the trait `core::marker::Sized` is not implemented for the type `str`\n }"}, {"sha": "c2d30224dc87f8b8f2ce045754523a41d20c038a", "filename": "src/test/compile-fail/issue-15756.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -15,7 +15,7 @@ fn dft_iter<'a, T>(arg1: Chunks<'a,T>, arg2: ChunksMut<'a,T>)\n {\n     for\n     &something\n-//~^ ERROR the trait `core::markers::Sized` is not implemented for the type `[T]`\n+//~^ ERROR the trait `core::marker::Sized` is not implemented for the type `[T]`\n     in arg2\n     {\n     }"}, {"sha": "af686b8681316f6dcddd5d03316d7ce77eba23dd", "filename": "src/test/compile-fail/issue-16538.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -20,6 +20,6 @@ mod Y {\n \n static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n //~^ ERROR cannot refer to other statics by value\n-//~| ERROR: the trait `core::markers::Sync` is not implemented for the type\n+//~| ERROR: the trait `core::marker::Sync` is not implemented for the type\n \n fn main() {}"}, {"sha": "4f3668b819a589046595ea778df079ee4b39eed3", "filename": "src/test/compile-fail/issue-17718-static-move.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-move.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::markers;\n+use std::marker;\n \n-struct Foo { nc: markers::NoCopy }\n-const INIT: Foo = Foo { nc: markers::NoCopy };\n+struct Foo { nc: marker::NoCopy }\n+const INIT: Foo = Foo { nc: marker::NoCopy };\n static FOO: Foo = INIT;\n \n fn main() {"}, {"sha": "147bff2e9777ef835e0b38dc34b77e6f0cd9bfd8", "filename": "src/test/compile-fail/issue-17718-static-sync.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::markers;\n+use std::marker;\n \n-struct Foo { marker: markers::NoSync }\n+struct Foo { marker: marker::NoSync }\n \n static FOO: uint = 3;\n-static BAR: Foo = Foo { marker: markers::NoSync };\n-//~^ ERROR: the trait `core::markers::Sync` is not implemented\n+static BAR: Foo = Foo { marker: marker::NoSync };\n+//~^ ERROR: the trait `core::marker::Sync` is not implemented\n \n fn main() {}"}, {"sha": "b8249ebd4792cc118e2709ec18d70cabca651119", "filename": "src/test/compile-fail/issue-18107.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -14,7 +14,7 @@ pub trait AbstractRenderer {}\n \n fn _create_render(_: &()) ->\n     AbstractRenderer\n-//~^ ERROR: the trait `core::markers::Sized` is not implemented\n+//~^ ERROR: the trait `core::marker::Sized` is not implemented\n {\n     match 0u {\n         _ => unimplemented!()"}, {"sha": "bbc5ee6c8f36e336e453eb9c0920de56faf1e0fb", "filename": "src/test/compile-fail/issue-19883.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -18,13 +18,13 @@ trait To {\n     // This is a typo, the return type should be `<Dst as From<Self>>::Output`\n     fn to<Dst: From<Self>>(\n         self\n-        //~^ error: the trait `core::markers::Sized` is not implemented\n+        //~^ error: the trait `core::marker::Sized` is not implemented\n     ) ->\n         <Dst as From<Self>>::Dst\n-        //~^ error: the trait `core::markers::Sized` is not implemented\n+        //~^ error: the trait `core::marker::Sized` is not implemented\n     {\n         From::from(\n-            //~^ error: the trait `core::markers::Sized` is not implemented\n+            //~^ error: the trait `core::marker::Sized` is not implemented\n             self\n         )\n     }"}, {"sha": "d91479a2e4e896169cb34c90d2624b69d06e589e", "filename": "src/test/compile-fail/issue-20005.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -16,9 +16,9 @@ trait From<Src> {\n \n trait To {\n     fn to<Dst>(\n-        self //~ error: the trait `core::markers::Sized` is not implemented\n+        self //~ error: the trait `core::marker::Sized` is not implemented\n     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n-        From::from( //~ error: the trait `core::markers::Sized` is not implemented\n+        From::from( //~ error: the trait `core::marker::Sized` is not implemented\n             self\n         )\n     }"}, {"sha": "546b808a38f4725e5f6eae200f7d81bcc2d8b104", "filename": "src/test/compile-fail/issue-3907-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-3907-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-3907-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3907-2.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -17,6 +17,6 @@ struct S {\n     name: int\n }\n \n-fn bar(_x: Foo) {} //~ ERROR the trait `core::markers::Sized` is not implemented\n+fn bar(_x: Foo) {} //~ ERROR the trait `core::marker::Sized` is not implemented\n \n fn main() {}"}, {"sha": "9e324cdd61eb0e82f40308131b51c72d1d1ce360", "filename": "src/test/compile-fail/issue-5035-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -11,6 +11,6 @@\n trait I {}\n type K = I+'static;\n \n-fn foo(_x: K) {} //~ ERROR: the trait `core::markers::Sized` is not implemented\n+fn foo(_x: K) {} //~ ERROR: the trait `core::marker::Sized` is not implemented\n \n fn main() {}"}, {"sha": "2d64013dc277f692cbe6724b6dcf7604049d36fa", "filename": "src/test/compile-fail/issue-5543.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5543.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -14,5 +14,5 @@ impl Foo for u8 {}\n fn main() {\n     let r: Box<Foo> = box 5;\n     let _m: Box<Foo> = r as Box<Foo>;\n-    //~^ ERROR `core::markers::Sized` is not implemented for the type `Foo`\n+    //~^ ERROR `core::marker::Sized` is not implemented for the type `Foo`\n }"}, {"sha": "9ff957b6e6deac4904d0d5066390bd4dd53e2803", "filename": "src/test/compile-fail/issue-5883.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -15,8 +15,8 @@ struct Struct {\n }\n \n fn new_struct(r: A+'static)\n-    -> Struct { //~^  ERROR the trait `core::markers::Sized` is not implemented\n-    //~^ ERROR the trait `core::markers::Sized` is not implemented\n+    -> Struct { //~^  ERROR the trait `core::marker::Sized` is not implemented\n+    //~^ ERROR the trait `core::marker::Sized` is not implemented\n     Struct { r: r }\n }\n "}, {"sha": "d2f9ee4760303484e6bdfb88479311f67e3d1cba", "filename": "src/test/compile-fail/issue-7013.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -32,6 +32,6 @@ struct A {\n \n fn main() {\n     let a = A {v: box B{v: None} as Box<Foo+Send>};\n-    //~^ ERROR the trait `core::markers::Send` is not implemented\n-    //~^^ ERROR the trait `core::markers::Send` is not implemented\n+    //~^ ERROR the trait `core::marker::Send` is not implemented\n+    //~^^ ERROR the trait `core::marker::Send` is not implemented\n }"}, {"sha": "c8c7ef4ed89d767f97cd5f1f2bfc243adfc5905f", "filename": "src/test/compile-fail/issue-7364.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -14,7 +14,7 @@ use std::cell::RefCell;\n // Regresion test for issue 7364\n static boxed: Box<RefCell<int>> = box RefCell::new(0);\n //~^ ERROR statics are not allowed to have custom pointers\n-//~| ERROR: the trait `core::markers::Sync` is not implemented for the type\n-//~| ERROR: the trait `core::markers::Sync` is not implemented for the type\n+//~| ERROR: the trait `core::marker::Sync` is not implemented for the type\n+//~| ERROR: the trait `core::marker::Sync` is not implemented for the type\n \n fn main() { }"}, {"sha": "ac088e69a28e52d15c3c7b1160615e9ff91b4ce9", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -36,26 +36,26 @@ fn test<'a,T,U:Copy>(_: &'a int) {\n     assert_copy::<&'a [int]>();\n \n     // ...unless they are mutable\n-    assert_copy::<&'static mut int>(); //~ ERROR `core::markers::Copy` is not implemented\n-    assert_copy::<&'a mut int>();  //~ ERROR `core::markers::Copy` is not implemented\n+    assert_copy::<&'static mut int>(); //~ ERROR `core::marker::Copy` is not implemented\n+    assert_copy::<&'a mut int>();  //~ ERROR `core::marker::Copy` is not implemented\n \n     // ~ pointers are not ok\n-    assert_copy::<Box<int>>();   //~ ERROR `core::markers::Copy` is not implemented\n-    assert_copy::<String>();   //~ ERROR `core::markers::Copy` is not implemented\n-    assert_copy::<Vec<int> >(); //~ ERROR `core::markers::Copy` is not implemented\n-    assert_copy::<Box<&'a mut int>>(); //~ ERROR `core::markers::Copy` is not implemented\n+    assert_copy::<Box<int>>();   //~ ERROR `core::marker::Copy` is not implemented\n+    assert_copy::<String>();   //~ ERROR `core::marker::Copy` is not implemented\n+    assert_copy::<Vec<int> >(); //~ ERROR `core::marker::Copy` is not implemented\n+    assert_copy::<Box<&'a mut int>>(); //~ ERROR `core::marker::Copy` is not implemented\n \n     // borrowed object types are generally ok\n     assert_copy::<&'a Dummy>();\n     assert_copy::<&'a (Dummy+Copy)>();\n     assert_copy::<&'static (Dummy+Copy)>();\n \n     // owned object types are not ok\n-    assert_copy::<Box<Dummy>>(); //~ ERROR `core::markers::Copy` is not implemented\n-    assert_copy::<Box<Dummy+Copy>>(); //~ ERROR `core::markers::Copy` is not implemented\n+    assert_copy::<Box<Dummy>>(); //~ ERROR `core::marker::Copy` is not implemented\n+    assert_copy::<Box<Dummy+Copy>>(); //~ ERROR `core::marker::Copy` is not implemented\n \n     // mutable object types are not ok\n-    assert_copy::<&'a mut (Dummy+Copy)>();  //~ ERROR `core::markers::Copy` is not implemented\n+    assert_copy::<&'a mut (Dummy+Copy)>();  //~ ERROR `core::marker::Copy` is not implemented\n \n     // unsafe ptrs are ok\n     assert_copy::<*const int>();\n@@ -73,10 +73,10 @@ fn test<'a,T,U:Copy>(_: &'a int) {\n     assert_copy::<MyStruct>();\n \n     // structs containing non-POD are not ok\n-    assert_copy::<MyNoncopyStruct>(); //~ ERROR `core::markers::Copy` is not implemented\n+    assert_copy::<MyNoncopyStruct>(); //~ ERROR `core::marker::Copy` is not implemented\n \n     // ref counted types are not ok\n-    assert_copy::<Rc<int>>();   //~ ERROR `core::markers::Copy` is not implemented\n+    assert_copy::<Rc<int>>();   //~ ERROR `core::marker::Copy` is not implemented\n }\n \n pub fn main() {"}, {"sha": "9e7c983195a6629a27458806c40483c798e5c469", "filename": "src/test/compile-fail/kindck-impl-type-params-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -19,5 +19,5 @@ fn take_param<T:Foo>(foo: &T) { }\n fn main() {\n     let x = box 3i;\n     take_param(&x);\n-    //~^ ERROR the trait `core::markers::Copy` is not implemented\n+    //~^ ERROR the trait `core::marker::Copy` is not implemented\n }"}, {"sha": "6ecf2593d00ab4b67354c6bf5eaf623a7e2d5e44", "filename": "src/test/compile-fail/kindck-impl-type-params.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -20,15 +20,15 @@ impl<T: Send + Copy> Gettable<T> for S<T> {}\n fn f<T>(val: T) {\n     let t: S<T> = S;\n     let a = &t as &Gettable<T>;\n-    //~^ ERROR the trait `core::markers::Send` is not implemented\n-    //~^^ ERROR the trait `core::markers::Copy` is not implemented\n+    //~^ ERROR the trait `core::marker::Send` is not implemented\n+    //~^^ ERROR the trait `core::marker::Copy` is not implemented\n }\n \n fn g<T>(val: T) {\n     let t: S<T> = S;\n     let a: &Gettable<T> = &t;\n-    //~^ ERROR the trait `core::markers::Send` is not implemented\n-    //~^^ ERROR the trait `core::markers::Copy` is not implemented\n+    //~^ ERROR the trait `core::marker::Send` is not implemented\n+    //~^^ ERROR the trait `core::marker::Copy` is not implemented\n }\n \n fn foo<'a>() {\n@@ -40,13 +40,13 @@ fn foo<'a>() {\n fn foo2<'a>() {\n     let t: Box<S<String>> = box S;\n     let a = t as Box<Gettable<String>>;\n-    //~^ ERROR the trait `core::markers::Copy` is not implemented\n+    //~^ ERROR the trait `core::marker::Copy` is not implemented\n }\n \n fn foo3<'a>() {\n     let t: Box<S<String>> = box S;\n     let a: Box<Gettable<String>> = t;\n-    //~^ ERROR the trait `core::markers::Copy` is not implemented\n+    //~^ ERROR the trait `core::marker::Copy` is not implemented\n }\n \n fn main() { }"}, {"sha": "7f610176b65695e086e898bcf3b3d4a763a95d32", "filename": "src/test/compile-fail/kindck-inherited-copy-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -22,13 +22,13 @@ fn take_param<T:Foo>(foo: &T) { }\n \n fn a() {\n     let x = box 3i;\n-    take_param(&x); //~ ERROR `core::markers::Copy` is not implemented\n+    take_param(&x); //~ ERROR `core::marker::Copy` is not implemented\n }\n \n fn b() {\n     let x = box 3i;\n     let y = &x;\n-    let z = &x as &Foo; //~ ERROR `core::markers::Copy` is not implemented\n+    let z = &x as &Foo; //~ ERROR `core::marker::Copy` is not implemented\n }\n \n fn main() { }"}, {"sha": "a13a3f7c4ab71e56fd317e45181467ab1fb38f4a", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -18,7 +18,7 @@ fn bar<F:FnOnce() + Send>(_: F) { }\n fn main() {\n     let x = Rc::new(3u);\n     bar(move|| foo(x));\n-    //~^ ERROR `core::markers::Send` is not implemented\n-    //~^^ ERROR `core::markers::Send` is not implemented\n+    //~^ ERROR `core::marker::Send` is not implemented\n+    //~^^ ERROR `core::marker::Send` is not implemented\n }\n "}, {"sha": "7984b3b32c21391abf3ca09b47295a0e80d53b99", "filename": "src/test/compile-fail/kindck-send-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -20,11 +20,11 @@ trait Message : Send { }\n \n fn object_ref_with_static_bound_not_ok() {\n     assert_send::<&'static (Dummy+'static)>();\n-    //~^ ERROR the trait `core::markers::Send` is not implemented\n+    //~^ ERROR the trait `core::marker::Send` is not implemented\n }\n \n fn box_object_with_no_bound_not_ok<'a>() {\n-    assert_send::<Box<Dummy>>(); //~ ERROR the trait `core::markers::Send` is not implemented\n+    assert_send::<Box<Dummy>>(); //~ ERROR the trait `core::marker::Send` is not implemented\n }\n \n fn object_with_send_bound_ok() {"}, {"sha": "c781fffff2dbcb760d1be992b91d6f6bc1a9e04e", "filename": "src/test/compile-fail/kindck-send-object1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -18,7 +18,7 @@ trait Dummy { }\n // careful with object types, who knows what they close over...\n fn test51<'a>() {\n     assert_send::<&'a Dummy>();\n-    //~^ ERROR the trait `core::markers::Send` is not implemented\n+    //~^ ERROR the trait `core::marker::Send` is not implemented\n }\n fn test52<'a>() {\n     assert_send::<&'a (Dummy+Send)>();\n@@ -37,7 +37,7 @@ fn test61() {\n // them not ok\n fn test_71<'a>() {\n     assert_send::<Box<Dummy+'a>>();\n-    //~^ ERROR the trait `core::markers::Send` is not implemented\n+    //~^ ERROR the trait `core::marker::Send` is not implemented\n }\n \n fn main() { }"}, {"sha": "75bae09b37f17cad3f3961e06a64230970263c91", "filename": "src/test/compile-fail/kindck-send-object2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -14,11 +14,11 @@ fn assert_send<T:Send>() { }\n trait Dummy { }\n \n fn test50() {\n-    assert_send::<&'static Dummy>(); //~ ERROR the trait `core::markers::Send` is not implemented\n+    assert_send::<&'static Dummy>(); //~ ERROR the trait `core::marker::Send` is not implemented\n }\n \n fn test53() {\n-    assert_send::<Box<Dummy>>(); //~ ERROR the trait `core::markers::Send` is not implemented\n+    assert_send::<Box<Dummy>>(); //~ ERROR the trait `core::marker::Send` is not implemented\n }\n \n // ...unless they are properly bounded"}, {"sha": "1bfd0d4a11f55548dc3d35d3887c75892754d089", "filename": "src/test/compile-fail/kindck-send-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -14,7 +14,7 @@ fn assert_send<T:Send>() { }\n \n fn test71<'a>() {\n     assert_send::<*mut &'a int>();\n-    //~^ ERROR the trait `core::markers::Send` is not implemented for the type\n+    //~^ ERROR the trait `core::marker::Send` is not implemented for the type\n }\n \n fn main() {"}, {"sha": "21e1ab4c33e1de6c5d5a0d068fc7a865f58ae0bf", "filename": "src/test/compile-fail/lint-dead-code-4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -19,7 +19,7 @@ use std::num::Int;\n struct Foo {\n     x: uint,\n     b: bool, //~ ERROR: struct field is never used\n-    marker: std::markers::NoCopy\n+    marker: std::marker::NoCopy\n }\n \n fn field_read(f: Foo) -> uint {\n@@ -59,7 +59,7 @@ fn field_match_in_let(f: Bar) -> bool {\n }\n \n fn main() {\n-    field_read(Foo { x: 1, b: false, marker: std::markers::NoCopy });\n+    field_read(Foo { x: 1, b: false, marker: std::marker::NoCopy });\n     field_match_in_patterns(XYZ::Z);\n     field_match_in_let(Bar { x: 42u, b: true, _guard: () });\n     let _ = Baz { x: 0 };"}, {"sha": "d9e139cc9db71d86b6715fb61f67034dfc9679f0", "filename": "src/test/compile-fail/marker-no-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fmarker-no-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fmarker-no-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmarker-no-copy.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::markers;\n+use std::marker;\n \n fn foo<P:Copy>(p: P) { }\n \n fn main()\n {\n-    foo(markers::NoCopy); //~ ERROR the trait `core::markers::Copy` is not implemented\n+    foo(marker::NoCopy); //~ ERROR the trait `core::marker::Copy` is not implemented\n }"}, {"sha": "032718d7e9a10a6db71cdc4147b997053a70030e", "filename": "src/test/compile-fail/marker-no-send.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fmarker-no-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fmarker-no-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmarker-no-send.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::markers;\n+use std::marker;\n \n fn foo<P:Send>(p: P) { }\n \n fn main()\n {\n-    foo(markers::NoSend); //~ ERROR the trait `core::markers::Send` is not implemented\n+    foo(marker::NoSend); //~ ERROR the trait `core::marker::Send` is not implemented\n }"}, {"sha": "b29f7fab2ccfc25409fabcd4b2be7e7715fd6e6d", "filename": "src/test/compile-fail/marker-no-share.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fmarker-no-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fmarker-no-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmarker-no-share.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::markers;\n+use std::marker;\n \n fn foo<P: Sync>(p: P) { }\n \n fn main()\n {\n-    foo(markers::NoSync); //~ ERROR the trait `core::markers::Sync` is not implemented\n+    foo(marker::NoSync); //~ ERROR the trait `core::marker::Sync` is not implemented\n }"}, {"sha": "d7529c86aa528ef791db9b665f4e50b6708beb1c", "filename": "src/test/compile-fail/mut-not-freeze.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -15,6 +15,6 @@ fn f<T: Sync>(_: T) {}\n fn main() {\n     let x = RefCell::new(0i);\n     f(x);\n-    //~^ ERROR `core::markers::Sync` is not implemented\n-    //~^^ ERROR `core::markers::Sync` is not implemented\n+    //~^ ERROR `core::marker::Sync` is not implemented\n+    //~^^ ERROR `core::marker::Sync` is not implemented\n }"}, {"sha": "f90bb610d374178c87c5b27d0243ccf97f6fb8fc", "filename": "src/test/compile-fail/mutable-enum-indirect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -11,13 +11,13 @@\n // Tests that an `&` pointer to something inherently mutable is itself\n // to be considered mutable.\n \n-use std::markers;\n+use std::marker;\n \n-enum Foo { A(markers::NoSync) }\n+enum Foo { A(marker::NoSync) }\n \n fn bar<T: Sync>(_: T) {}\n \n fn main() {\n-    let x = Foo::A(markers::NoSync);\n-    bar(&x); //~ ERROR the trait `core::markers::Sync` is not implemented\n+    let x = Foo::A(marker::NoSync);\n+    bar(&x); //~ ERROR the trait `core::marker::Sync` is not implemented\n }"}, {"sha": "0b0a83a41966db61860d2cf1fddd9906a5141534", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -36,8 +36,8 @@ fn main() {\n     let x = foo(Port(Rc::new(())));\n \n     Thread::spawn(move|| {\n-        //~^ ERROR `core::markers::Send` is not implemented\n-        //~^^ ERROR `core::markers::Send` is not implemented\n+        //~^ ERROR `core::marker::Send` is not implemented\n+        //~^^ ERROR `core::marker::Send` is not implemented\n         let y = x;\n         println!(\"{}\", y);\n     });"}, {"sha": "cf1f13e8bb8683d1eb28f312518b7495dacea205", "filename": "src/test/compile-fail/no_send-enum.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -8,16 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::markers;\n+use std::marker;\n \n enum Foo {\n-    A(markers::NoSend)\n+    A(marker::NoSend)\n }\n \n fn bar<T: Send>(_: T) {}\n \n fn main() {\n-    let x = Foo::A(markers::NoSend);\n+    let x = Foo::A(marker::NoSend);\n     bar(x);\n-    //~^ ERROR `core::markers::Send` is not implemented\n+    //~^ ERROR `core::marker::Send` is not implemented\n }"}, {"sha": "95855ed584bc9aa9ad46646cebcebb78301e81cf", "filename": "src/test/compile-fail/no_send-rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -15,6 +15,6 @@ fn bar<T: Send>(_: T) {}\n fn main() {\n     let x = Rc::new(5i);\n     bar(x);\n-    //~^ ERROR `core::markers::Send` is not implemented\n-    //~^^ ERROR `core::markers::Send` is not implemented\n+    //~^ ERROR `core::marker::Send` is not implemented\n+    //~^^ ERROR `core::marker::Send` is not implemented\n }"}, {"sha": "c2d6f04c7d49c20b449f0f6697da70749b0bea38", "filename": "src/test/compile-fail/no_send-struct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fno_send-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fno_send-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-struct.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::markers;\n+use std::marker;\n \n struct Foo {\n     a: int,\n-    ns: markers::NoSend\n+    ns: marker::NoSend\n }\n \n fn bar<T: Send>(_: T) {}\n \n fn main() {\n-    let x = Foo { a: 5, ns: markers::NoSend };\n+    let x = Foo { a: 5, ns: marker::NoSend };\n     bar(x);\n-    //~^ ERROR the trait `core::markers::Send` is not implemented\n+    //~^ ERROR the trait `core::marker::Send` is not implemented\n }"}, {"sha": "33222eef44e74122765b3251a237fd5bf9dd1239", "filename": "src/test/compile-fail/no_share-enum.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::markers;\n+use std::marker;\n \n-enum Foo { A(markers::NoSync) }\n+enum Foo { A(marker::NoSync) }\n \n fn bar<T: Sync>(_: T) {}\n \n fn main() {\n-    let x = Foo::A(markers::NoSync);\n+    let x = Foo::A(marker::NoSync);\n     bar(x);\n-    //~^ ERROR the trait `core::markers::Sync` is not implemented\n+    //~^ ERROR the trait `core::marker::Sync` is not implemented\n }"}, {"sha": "0f3573e0ad5a98513b69aa2dd62c8aef5384bb28", "filename": "src/test/compile-fail/no_share-rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -16,6 +16,6 @@ fn bar<T: Sync>(_: T) {}\n fn main() {\n     let x = Rc::new(RefCell::new(5i));\n     bar(x);\n-    //~^ ERROR the trait `core::markers::Sync` is not implemented\n-    //~^^ ERROR the trait `core::markers::Sync` is not implemented\n+    //~^ ERROR the trait `core::marker::Sync` is not implemented\n+    //~^^ ERROR the trait `core::marker::Sync` is not implemented\n }"}, {"sha": "59864b63b04940a7a6ef5686d5be234c04064885", "filename": "src/test/compile-fail/no_share-struct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::markers;\n+use std::marker;\n \n-struct Foo { a: int, m: markers::NoSync }\n+struct Foo { a: int, m: marker::NoSync }\n \n fn bar<T: Sync>(_: T) {}\n \n fn main() {\n-    let x = Foo { a: 5, m: markers::NoSync };\n+    let x = Foo { a: 5, m: marker::NoSync };\n     bar(x);\n-    //~^ ERROR the trait `core::markers::Sync` is not implemented\n+    //~^ ERROR the trait `core::marker::Sync` is not implemented\n }"}, {"sha": "9e425fa8f2e7d2dfda66e02e820b69e14afa5a81", "filename": "src/test/compile-fail/opt-out-copy-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fopt-out-copy-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fopt-out-copy-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fopt-out-copy-bad.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -30,7 +30,7 @@ impl Copy for IWantToCopyThis {}\n \n enum CantCopyThisEither {\n     A,\n-    B(::std::markers::NoCopy),\n+    B(::std::marker::NoCopy),\n }\n \n enum IWantToCopyThisToo {"}, {"sha": "0ade29750442bcf14f3b6dda11ef681c71bff0d5", "filename": "src/test/compile-fail/range-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-1.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -23,5 +23,5 @@ pub fn main() {\n     // Unsized type.\n     let arr: &[_] = &[1u, 2, 3];\n     let range = (*arr)..;\n-    //~^ ERROR the trait `core::markers::Sized` is not implemented\n+    //~^ ERROR the trait `core::marker::Sized` is not implemented\n }"}, {"sha": "4d31d2c8e6927e02a98d4bc53de4e857dbcf54c3", "filename": "src/test/compile-fail/regions-infer-contravariance-due-to-decl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-decl.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -14,13 +14,13 @@\n // Note: see variance-regions-*.rs for the tests that check that the\n // variance inference works in the first place.\n \n-use std::markers;\n+use std::marker;\n \n // This is contravariant with respect to 'a, meaning that\n // Contravariant<'foo> <: Contravariant<'static> because\n // 'foo <= 'static\n struct Contravariant<'a> {\n-    marker: markers::ContravariantLifetime<'a>\n+    marker: marker::ContravariantLifetime<'a>\n }\n \n fn use_<'short,'long>(c: Contravariant<'short>,"}, {"sha": "1c3b7bb5960e1d92dc08ac6979349434f32ec14c", "filename": "src/test/compile-fail/regions-infer-covariance-due-to-decl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-decl.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -14,10 +14,10 @@\n // Note: see variance-regions-*.rs for the tests that check that the\n // variance inference works in the first place.\n \n-use std::markers;\n+use std::marker;\n \n struct Covariant<'a> {\n-    marker: markers::CovariantLifetime<'a>\n+    marker: marker::CovariantLifetime<'a>\n }\n \n fn use_<'short,'long>(c: Covariant<'long>,"}, {"sha": "5f4a1af6bf90f1c4ea1f6c3e8e742c3e5265ea99", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-decl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-decl.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::markers;\n+use std::marker;\n \n struct invariant<'a> {\n-    marker: markers::InvariantLifetime<'a>\n+    marker: marker::InvariantLifetime<'a>\n }\n \n fn to_same_lifetime<'r>(bi: invariant<'r>) {"}, {"sha": "762c976a943973b29652b917a30902da00475f90", "filename": "src/test/compile-fail/repeat-to-run-dtor-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -25,5 +25,5 @@ impl Drop for Foo {\n fn main() {\n     let a = Foo { x: 3 };\n     let _ = [ a; 5 ];\n-    //~^ ERROR the trait `core::markers::Copy` is not implemented for the type `Foo`\n+    //~^ ERROR the trait `core::marker::Copy` is not implemented for the type `Foo`\n }"}, {"sha": "14ad1b3041f5bc6626c38d08fe7ac1746d2d33e2", "filename": "src/test/compile-fail/static-items-cant-move.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fstatic-items-cant-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fstatic-items-cant-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-items-cant-move.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -10,14 +10,14 @@\n \n // Verifies that static items can't be moved\n \n-use std::markers;\n+use std::marker;\n \n struct Foo {\n     foo: int,\n-    nocopy: markers::NoCopy\n+    nocopy: marker::NoCopy\n }\n \n-static BAR: Foo = Foo{foo: 5, nocopy: markers::NoCopy};\n+static BAR: Foo = Foo{foo: 5, nocopy: marker::NoCopy};\n \n \n fn test(f: Foo) {"}, {"sha": "a7ca5e3bf093a02046a0f4d30e44e4e65d7ddf65", "filename": "src/test/compile-fail/syntax-trait-polarity-feature-gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fsyntax-trait-polarity-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fsyntax-trait-polarity-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-trait-polarity-feature-gate.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::markers::Send;\n+use std::marker::Send;\n \n struct TestType;\n "}, {"sha": "1ab79f5c80ecc7253102943c6c138e2760867da5", "filename": "src/test/compile-fail/syntax-trait-polarity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fsyntax-trait-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fsyntax-trait-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-trait-polarity.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-use std::markers::Send;\n+use std::marker::Send;\n \n struct TestType;\n "}, {"sha": "fe31d81983e16ad137adefe4a8ecafda3c21b28c", "filename": "src/test/compile-fail/task-rng-isnt-sendable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -16,6 +16,6 @@ fn test_send<S: Send>() {}\n \n pub fn main() {\n     test_send::<rand::ThreadRng>();\n-    //~^ ERROR `core::markers::Send` is not implemented\n-    //~^^ ERROR `core::markers::Send` is not implemented\n+    //~^ ERROR `core::marker::Send` is not implemented\n+    //~^^ ERROR `core::marker::Send` is not implemented\n }"}, {"sha": "434d803d718e7bcc143339e29bdfcbfeb069b473", "filename": "src/test/compile-fail/trait-bounds-not-on-bare-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -14,7 +14,7 @@ trait Foo {\n // This should emit the less confusing error, not the more confusing one.\n \n fn foo(_x: Foo + Send) {\n-    //~^ERROR the trait `core::markers::Sized` is not implemented\n+    //~^ERROR the trait `core::marker::Sized` is not implemented\n }\n \n fn main() { }"}, {"sha": "5166a4e96540d152a99dcc32c55928869ffcf1f0", "filename": "src/test/compile-fail/typeck-unsafe-always-share.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -13,14 +13,14 @@\n // ignore-tidy-linelength\n \n use std::cell::UnsafeCell;\n-use std::markers;\n+use std::marker;\n \n struct MySync<T> {\n     u: UnsafeCell<T>\n }\n \n struct NoSync {\n-    m: markers::NoSync\n+    m: marker::NoSync\n }\n \n fn test<T: Sync>(s: T){\n@@ -30,17 +30,17 @@ fn test<T: Sync>(s: T){\n fn main() {\n     let us = UnsafeCell::new(MySync{u: UnsafeCell::new(0i)});\n     test(us);\n-    //~^ ERROR `core::markers::Sync` is not implemented\n+    //~^ ERROR `core::marker::Sync` is not implemented\n \n-    let uns = UnsafeCell::new(NoSync{m: markers::NoSync});\n+    let uns = UnsafeCell::new(NoSync{m: marker::NoSync});\n     test(uns);\n-    //~^ ERROR `core::markers::Sync` is not implemented\n+    //~^ ERROR `core::marker::Sync` is not implemented\n \n     let ms = MySync{u: uns};\n     test(ms);\n-    //~^ ERROR `core::markers::Sync` is not implemented\n+    //~^ ERROR `core::marker::Sync` is not implemented\n \n-    let ns = NoSync{m: markers::NoSync};\n+    let ns = NoSync{m: marker::NoSync};\n     test(ns);\n-    //~^ ERROR `core::markers::Sync` is not implemented\n+    //~^ ERROR `core::marker::Sync` is not implemented\n }"}, {"sha": "e0783b09cbdf5dbd50ad46d5bc80414a42f8e549", "filename": "src/test/compile-fail/unboxed-closure-sugar-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -15,7 +15,7 @@\n #![feature(unboxed_closures)]\n #![allow(dead_code)]\n \n-use std::markers;\n+use std::marker;\n \n trait Foo<'a,T,U> {\n     fn dummy(&'a self) -> &'a (T,U);"}, {"sha": "49cebbf52552ba33883070a7b67148378e805756", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -17,6 +17,6 @@ fn f<T:Send>(_i: T) {\n fn main() {\n     let i = box Rc::new(100i);\n     f(i);\n-    //~^ ERROR `core::markers::Send` is not implemented\n-    //~^^ ERROR `core::markers::Send` is not implemented\n+    //~^ ERROR `core::marker::Send` is not implemented\n+    //~^^ ERROR `core::marker::Send` is not implemented\n }"}, {"sha": "96f36af53aad22a7b06bcabe9c3a0e6fc24edeca", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -30,7 +30,7 @@ fn foo(i:int, j: Rc<String>) -> foo {\n fn main() {\n   let cat = \"kitty\".to_string();\n   let (tx, _) = channel();\n-  //~^ ERROR `core::markers::Send` is not implemented\n-  //~^^ ERROR `core::markers::Send` is not implemented\n+  //~^ ERROR `core::marker::Send` is not implemented\n+  //~^^ ERROR `core::marker::Send` is not implemented\n   tx.send(foo(42, Rc::new(cat)));\n }"}, {"sha": "e28c082c80c4aebf54f5401cdc2163091fe71486", "filename": "src/test/compile-fail/unsized-bare-typaram.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn bar<T: Sized>() { }\n-fn foo<T: ?Sized>() { bar::<T>() } //~ ERROR the trait `core::markers::Sized` is not implemented\n+fn foo<T: ?Sized>() { bar::<T>() } //~ ERROR the trait `core::marker::Sized` is not implemented\n fn main() { }"}, {"sha": "df961978086e7aa6958f01371247025757499b23", "filename": "src/test/compile-fail/unsized-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -15,14 +15,14 @@ fn not_sized<T: ?Sized>() { }\n enum Foo<U> { FooSome(U), FooNone }\n fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-//~^ ERROR the trait `core::markers::Sized` is not implemented\n+//~^ ERROR the trait `core::marker::Sized` is not implemented\n //\n // Not OK: `T` is not sized.\n \n enum Bar<U: ?Sized> { BarSome(U), BarNone }\n fn bar1<T: ?Sized>() { not_sized::<Bar<T>>() }\n fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n-//~^ ERROR the trait `core::markers::Sized` is not implemented\n+//~^ ERROR the trait `core::marker::Sized` is not implemented\n //\n // Not OK: `Bar<T>` is not sized, but it should be.\n "}, {"sha": "7b9fc2b468b78fbf34cb751441dba2bea0ef7626", "filename": "src/test/compile-fail/unsized-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -15,14 +15,14 @@ fn not_sized<T: ?Sized>() { }\n struct Foo<T> { data: T }\n fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-//~^ ERROR the trait `core::markers::Sized` is not implemented\n+//~^ ERROR the trait `core::marker::Sized` is not implemented\n //\n // Not OK: `T` is not sized.\n \n struct Bar<T: ?Sized> { data: T }\n fn bar1<T: ?Sized>() { not_sized::<Bar<T>>() }\n fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n-//~^ ERROR the trait `core::markers::Sized` is not implemented\n+//~^ ERROR the trait `core::marker::Sized` is not implemented\n //\n // Not OK: `Bar<T>` is not sized, but it should be.\n "}, {"sha": "ac8043d6852a9b37927cc1e5c787c502c6cfe14f", "filename": "src/test/compile-fail/unsized-trait-impl-trait-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -15,7 +15,7 @@ trait T2<Z> {\n }\n struct S4<Y: ?Sized>;\n impl<X: ?Sized> T2<X> for S4<X> {\n-    //~^ ERROR `core::markers::Sized` is not implemented for the type `X`\n+    //~^ ERROR `core::marker::Sized` is not implemented for the type `X`\n }\n \n fn main() { }"}, {"sha": "2d330654881ba73e031aac1759f5d38114af77dc", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -14,7 +14,7 @@\n // Unbounded.\n fn f1<X: ?Sized>(x: &X) {\n     f2::<X>(x);\n-    //~^ ERROR the trait `core::markers::Sized` is not implemented\n+    //~^ ERROR the trait `core::marker::Sized` is not implemented\n }\n fn f2<X>(x: &X) {\n }\n@@ -23,7 +23,7 @@ fn f2<X>(x: &X) {\n trait T {}\n fn f3<X: ?Sized + T>(x: &X) {\n     f4::<X>(x);\n-    //~^ ERROR the trait `core::markers::Sized` is not implemented\n+    //~^ ERROR the trait `core::marker::Sized` is not implemented\n }\n fn f4<X: T>(x: &X) {\n }\n@@ -37,7 +37,7 @@ fn f5<Y>(x: &Y) {}\n fn f6<X: ?Sized>(x: &X) {}\n fn f7<X: ?Sized>(x1: &E<X>, x2: &E<X>) {\n     f5(x1);\n-    //~^ ERROR the trait `core::markers::Sized` is not implemented\n+    //~^ ERROR the trait `core::marker::Sized` is not implemented\n     f6(x2); // ok\n }\n \n@@ -49,19 +49,19 @@ struct S<X: ?Sized> {\n \n fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n     f5(x1);\n-    //~^ ERROR the trait `core::markers::Sized` is not implemented\n+    //~^ ERROR the trait `core::marker::Sized` is not implemented\n     f6(x2); // ok\n }\n \n // Test some tuples.\n fn f9<X: ?Sized>(x1: Box<S<X>>, x2: Box<E<X>>) {\n     f5(&(*x1, 34i));\n-    //~^ ERROR the trait `core::markers::Sized` is not implemented\n+    //~^ ERROR the trait `core::marker::Sized` is not implemented\n }\n \n fn f10<X: ?Sized>(x1: Box<S<X>>, x2: Box<E<X>>) {\n     f5(&(32i, *x2));\n-    //~^ ERROR the trait `core::markers::Sized` is not implemented\n+    //~^ ERROR the trait `core::marker::Sized` is not implemented\n }\n \n pub fn main() {"}, {"sha": "026d496aa43c763e92066d0a3750861697772d63", "filename": "src/test/compile-fail/unsized5.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized5.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -11,27 +11,27 @@\n // Test `?Sized` types not allowed in fields (except the last one).\n \n struct S1<X: ?Sized> {\n-    f1: X, //~ ERROR `core::markers::Sized` is not implemented\n+    f1: X, //~ ERROR `core::marker::Sized` is not implemented\n     f2: int,\n }\n struct S2<X: ?Sized> {\n     f: int,\n-    g: X, //~ ERROR `core::markers::Sized` is not implemented\n+    g: X, //~ ERROR `core::marker::Sized` is not implemented\n     h: int,\n }\n struct S3 {\n-    f: str, //~ ERROR `core::markers::Sized` is not implemented\n+    f: str, //~ ERROR `core::marker::Sized` is not implemented\n     g: [uint]\n }\n struct S4 {\n-    f: str, //~ ERROR `core::markers::Sized` is not implemented\n+    f: str, //~ ERROR `core::marker::Sized` is not implemented\n     g: uint\n }\n enum E<X: ?Sized> {\n-    V1(X, int), //~ERROR `core::markers::Sized` is not implemented\n+    V1(X, int), //~ERROR `core::marker::Sized` is not implemented\n }\n enum F<X: ?Sized> {\n-    V2{f1: X, f: int}, //~ERROR `core::markers::Sized` is not implemented\n+    V2{f1: X, f: int}, //~ERROR `core::marker::Sized` is not implemented\n }\n \n pub fn main() {"}, {"sha": "02f3404b72b11cc161757411821e1588c5580783", "filename": "src/test/compile-fail/unsized6.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized6.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -16,27 +16,27 @@ trait T {}\n fn f1<X: ?Sized>(x: &X) {\n     let _: X; // <-- this is OK, no bindings created, no initializer.\n     let _: (int, (X, int)); // same\n-    let y: X; //~ERROR the trait `core::markers::Sized` is not implemented\n-    let y: (int, (X, int)); //~ERROR the trait `core::markers::Sized` is not implemented\n+    let y: X; //~ERROR the trait `core::marker::Sized` is not implemented\n+    let y: (int, (X, int)); //~ERROR the trait `core::marker::Sized` is not implemented\n }\n fn f2<X: ?Sized + T>(x: &X) {\n-    let y: X; //~ERROR the trait `core::markers::Sized` is not implemented\n-    let y: (int, (X, int)); //~ERROR the trait `core::markers::Sized` is not implemented\n+    let y: X; //~ERROR the trait `core::marker::Sized` is not implemented\n+    let y: (int, (X, int)); //~ERROR the trait `core::marker::Sized` is not implemented\n }\n \n fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-    let y: X = *x1; //~ERROR the trait `core::markers::Sized` is not implemented\n-    let y = *x2; //~ERROR the trait `core::markers::Sized` is not implemented\n-    let (y, z) = (*x3, 4i); //~ERROR the trait `core::markers::Sized` is not implemented\n+    let y: X = *x1; //~ERROR the trait `core::marker::Sized` is not implemented\n+    let y = *x2; //~ERROR the trait `core::marker::Sized` is not implemented\n+    let (y, z) = (*x3, 4i); //~ERROR the trait `core::marker::Sized` is not implemented\n }\n-fn f4<X: ?Sized: T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-    let y: X = *x1;         //~ERROR the trait `core::markers::Sized` is not implemented\n-    let y = *x2;            //~ERROR the trait `core::markers::Sized` is not implemented\n-    let (y, z) = (*x3, 4i); //~ERROR the trait `core::markers::Sized` is not implemented\n+fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+    let y: X = *x1;         //~ERROR the trait `core::marker::Sized` is not implemented\n+    let y = *x2;            //~ERROR the trait `core::marker::Sized` is not implemented\n+    let (y, z) = (*x3, 4i); //~ERROR the trait `core::marker::Sized` is not implemented\n }\n \n-fn g1<X: ?Sized>(x: X) {} //~ERROR the trait `core::markers::Sized` is not implemented\n-fn g2<X: ?Sized + T>(x: X) {} //~ERROR the trait `core::markers::Sized` is not implemented\n+fn g1<X: ?Sized>(x: X) {} //~ERROR the trait `core::marker::Sized` is not implemented\n+fn g2<X: ?Sized + T>(x: X) {} //~ERROR the trait `core::marker::Sized` is not implemented\n \n pub fn main() {\n }"}, {"sha": "6fc547c0b8e8610b2c2d073fcf58182525b8fec9", "filename": "src/test/compile-fail/unsized7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized7.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -18,7 +18,7 @@ trait T1<Z: T> {\n }\n struct S3<Y: ?Sized>;\n impl<X: ?Sized + T> T1<X> for S3<X> {\n-    //~^ ERROR `core::markers::Sized` is not implemented for the type `X`\n+    //~^ ERROR `core::marker::Sized` is not implemented for the type `X`\n }\n \n fn main() { }"}, {"sha": "74342cfedd3298261807b6cc1fe6c08b883fc026", "filename": "src/test/compile-fail/where-clause-constraints-are-local-for-inherent-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-inherent-impl.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -21,7 +21,7 @@ impl<T> Foo<T> {\n \n     fn fails_copy(self) {\n         require_copy(self.x);\n-        //~^ ERROR the trait `core::markers::Copy` is not implemented for the type `T`\n+        //~^ ERROR the trait `core::marker::Copy` is not implemented for the type `T`\n     }\n }\n "}, {"sha": "8e01e89b6870782085d0aa7f86e91c20d4c039b1", "filename": "src/test/compile-fail/where-clause-constraints-are-local-for-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-trait-impl.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -26,7 +26,7 @@ impl<T> Foo<T> for Bar<T> {\n \n     fn fails_copy(self) {\n         require_copy(self.x);\n-        //~^ ERROR the trait `core::markers::Copy` is not implemented for the type `T`\n+        //~^ ERROR the trait `core::marker::Copy` is not implemented for the type `T`\n     }\n }\n "}, {"sha": "d9d11c95adbdcf9789d2f676fa9939e6882560d8", "filename": "src/test/run-pass/associated-types-impl-redirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -19,7 +19,7 @@\n #![feature(lang_items, unboxed_closures)]\n #![no_implicit_prelude]\n \n-use std::markers::Sized;\n+use std::marker::Sized;\n use std::option::Option::{None, Some, self};\n \n trait Iterator {"}, {"sha": "4152321cab8139a1c26651f8309e4ab05666d23a", "filename": "src/test/run-pass/associated-types-where-clause-impl-ambiguity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -19,7 +19,7 @@\n #![feature(lang_items, unboxed_closures)]\n #![no_implicit_prelude]\n \n-use std::markers::Sized;\n+use std::marker::Sized;\n use std::option::Option::{None, Some, self};\n \n trait Iterator {"}, {"sha": "84acd3c4ecd7ebe77d0f74d821c2e0be454d6228", "filename": "src/test/run-pass/const-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Frun-pass%2Fconst-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Frun-pass%2Fconst-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -11,7 +11,7 @@\n #![allow(dead_code)]\n #![allow(unused_unsafe)]\n \n-use std::markers::Sync;\n+use std::marker::Sync;\n \n struct Foo {\n     a: uint,"}, {"sha": "a08cd33362f4732cf59d66ee3aea4b12e041cfae", "filename": "src/test/run-pass/fsu-moves-and-copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -11,7 +11,7 @@\n // Issue 4691: Ensure that functional-struct-updates operates\n // correctly and moves rather than copy when appropriate.\n \n-use std::markers::NoCopy as NP;\n+use std::marker::NoCopy as NP;\n \n struct ncint { np: NP, v: int }\n fn ncint(v: int) -> ncint { ncint { np: NP, v: v } }"}, {"sha": "8eaf8427bfdec9bbc680ccd0d187c60928d3dab3", "filename": "src/test/run-pass/hrtb-opt-in-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -18,15 +18,15 @@\n \n #![allow(dead_code)]\n \n-use std::markers;\n+use std::marker;\n \n #[derive(Copy)]\n struct Foo<T> { x: T }\n \n type Ty<'tcx> = &'tcx TyS<'tcx>;\n \n enum TyS<'tcx> {\n-    Boop(markers::InvariantLifetime<'tcx>)\n+    Boop(marker::InvariantLifetime<'tcx>)\n }\n \n enum Bar<'tcx> {"}, {"sha": "cdd03244df14567d8e4b12db36f191c59b366686", "filename": "src/test/run-pass/issue-17718-static-unsafe-interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::markers;\n+use std::marker;\n use std::cell::UnsafeCell;\n \n struct MyUnsafePack<T>(UnsafeCell<T>);"}, {"sha": "3ca3e0592e7896e64b0ebcd2c6a829e958e0bd28", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -23,7 +23,7 @@ pub mod pipes {\n     use std::mem::{replace, swap};\n     use std::mem;\n     use std::thread::Thread;\n-    use std::markers::Send;\n+    use std::marker::Send;\n \n     pub struct Stuff<T> {\n         state: state,"}, {"sha": "338bd89ab5cb1e55e833fe478a790b04d849b382", "filename": "src/test/run-pass/method-recursive-blanket-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Frun-pass%2Fmethod-recursive-blanket-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Frun-pass%2Fmethod-recursive-blanket-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-recursive-blanket-impl.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -13,7 +13,7 @@\n // know not to stop at the blanket, we have to recursively evaluate\n // the `T:Foo` bound.\n \n-use std::markers::Sized;\n+use std::marker::Sized;\n \n // Note: this must be generic for the problem to show up\n trait Foo<A> {"}, {"sha": "a3288e2e1b90b1a80b2633cfa686095634720caf", "filename": "src/test/run-pass/regions-infer-bivariance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Frun-pass%2Fregions-infer-bivariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Frun-pass%2Fregions-infer-bivariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-bivariance.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -11,7 +11,7 @@\n // Test that a type whose lifetime parameters is never used is\n // inferred to be bivariant.\n \n-use std::markers;\n+use std::marker;\n \n struct Bivariant<'a>;\n "}, {"sha": "a91e5da15376800596c89ea4dfdbf9b3dbb67600", "filename": "src/test/run-pass/syntax-trait-polarity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Frun-pass%2Fsyntax-trait-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f07d055f7823ac0e17e014f3effa2a0be0947e9/src%2Ftest%2Frun-pass%2Fsyntax-trait-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-trait-polarity.rs?ref=9f07d055f7823ac0e17e014f3effa2a0be0947e9", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-use std::markers::Send;\n+use std::marker::Send;\n \n struct TestType;\n "}]}