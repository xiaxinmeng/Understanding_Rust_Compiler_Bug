{"sha": "0a0e366ccf36e845d12d959e50b29b49ef66342d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMGUzNjZjY2YzNmU4NDVkMTJkOTU5ZTUwYjI5YjQ5ZWY2NjM0MmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-05T12:29:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-05T12:29:32Z"}, "message": "Auto merge of #1733 - Smittyvb:breakpoint-intrinsic, r=RalfJung\n\nSupport breakpoint intrinsic\n\nThe `breakpoint` intrinsic raises a `SIGTRAP` signal. If a debugger is attached to a normal program, then `SIGTRAP` can be used to trigger breakpoints in debuggers like `gdb`. If there is no debugger, then the program exits with a message like `Trace/breakpoint trap (core dumped)`. This adds support for the intrinsic in Miri. While actually passing through the `SIGTRAP` doesn't make sense in a Miri context (if it just raised the signal normally then it would allow for debugging Miri itself, not the program being evaluated). As such, it just raises an error.", "tree": {"sha": "2e784d56680ca939b9bc0b7ecf994c53e2d0c719", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e784d56680ca939b9bc0b7ecf994c53e2d0c719"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a0e366ccf36e845d12d959e50b29b49ef66342d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a0e366ccf36e845d12d959e50b29b49ef66342d", "html_url": "https://github.com/rust-lang/rust/commit/0a0e366ccf36e845d12d959e50b29b49ef66342d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a0e366ccf36e845d12d959e50b29b49ef66342d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6d0109de6bc1f0cfb7842a5855c7f677bc55e7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d0109de6bc1f0cfb7842a5855c7f677bc55e7f", "html_url": "https://github.com/rust-lang/rust/commit/d6d0109de6bc1f0cfb7842a5855c7f677bc55e7f"}, {"sha": "8d43d727f42e918a7aeb76b4596f0726c0e8e0ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d43d727f42e918a7aeb76b4596f0726c0e8e0ae", "html_url": "https://github.com/rust-lang/rust/commit/8d43d727f42e918a7aeb76b4596f0726c0e8e0ae"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "64c6e0a540f8405de2b59350bd898cfe103712c9", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e366ccf36e845d12d959e50b29b49ef66342d/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e366ccf36e845d12d959e50b29b49ef66342d/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=0a0e366ccf36e845d12d959e50b29b49ef66342d", "patch": "@@ -654,6 +654,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             \"try\" => return this.handle_try(args, dest, ret),\n \n+            \"breakpoint\" => {\n+                let &[] = check_arg_count(args)?;\n+                // normally this would raise a SIGTRAP, which aborts if no debugger is connected\n+                throw_machine_stop!(TerminationInfo::Abort(\"Trace/breakpoint trap\".to_string()))\n+            }\n+\n             name => throw_unsup_format!(\"unimplemented intrinsic: {}\", name),\n         }\n "}, {"sha": "d0a0239eb933b8230a2698f6859808d8534409b2", "filename": "tests/compile-fail/breakpoint.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a0e366ccf36e845d12d959e50b29b49ef66342d/tests%2Fcompile-fail%2Fbreakpoint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0e366ccf36e845d12d959e50b29b49ef66342d/tests%2Fcompile-fail%2Fbreakpoint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbreakpoint.rs?ref=0a0e366ccf36e845d12d959e50b29b49ef66342d", "patch": "@@ -0,0 +1,7 @@\n+#![feature(core_intrinsics)]\n+\n+fn main() {\n+    unsafe {\n+        core::intrinsics::breakpoint() //~ ERROR Trace/breakpoint trap\n+    };\n+}"}]}