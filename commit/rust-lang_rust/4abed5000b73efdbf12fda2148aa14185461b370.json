{"sha": "4abed5000b73efdbf12fda2148aa14185461b370", "node_id": "C_kwDOAAsO6NoAKDRhYmVkNTAwMGI3M2VmZGJmMTJmZGEyMTQ4YWExNDE4NTQ2MWIzNzA", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-12-06T13:46:14Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-12-06T13:46:14Z"}, "message": "Provide .dwo paths to llvm-dwp explicitly", "tree": {"sha": "dc4a76d483ba79857c05a45c5cc7438e68f1e450", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc4a76d483ba79857c05a45c5cc7438e68f1e450"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4abed5000b73efdbf12fda2148aa14185461b370", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmGuFCYACgkQGBtJ+fOP\nM3Qvsgv8DEOf+76FEuZrG6QJVHkCEogUaTV2L5J2KNyXoEmniKNNtpfV7bcffs7p\nqz823PZWSwxhzAj/liRCJIiCSlbMS1WboP4SO/YBZ/PQomygjqAbtI1NxMC7R2cw\ngYIsnm7cqSmq++59C66tbNDyEr8+tq0ASLlhI2WesdninS/S9uenMi3N3MwoLKfM\n944oH8WqhN2SlUN+Op4Og+HhYIeOqJvfcu9F7O6spWU1OfM1rvlXovam5e1Y5XFV\n9z1nJCwoFXEwi8+0N6PznmRO7qtkeiwFkKO9mpuiiQAVT0r8QgPZJ/sPt/ugdeKF\nKTsfJUFdy6EnFsQYHoRgTzgXzjHhFQzQtYlbHm63H/ZBn+PFtcoauoDebxxrmmB3\nK+gS5Eqd4xB78bqReD87s9NhSgs2gqV7bT7W5yb1Le0Xo+B2crJnCiybf60xKZ0U\nP1UKED8mYK3vncDa4aqQ/tKSxj25bpGUpU31f8B+RJ5u5oN32DHwgi2px/jhhQDE\nlfqyT3Bo\n=MDwX\n-----END PGP SIGNATURE-----", "payload": "tree dc4a76d483ba79857c05a45c5cc7438e68f1e450\nparent e5796c46de20856f2eee0d8651572343d4fea9db\nauthor Andy Wang <cbeuw.andy@gmail.com> 1638798374 +0000\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1638798374 +0000\n\nProvide .dwo paths to llvm-dwp explicitly\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4abed5000b73efdbf12fda2148aa14185461b370", "html_url": "https://github.com/rust-lang/rust/commit/4abed5000b73efdbf12fda2148aa14185461b370", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4abed5000b73efdbf12fda2148aa14185461b370/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5796c46de20856f2eee0d8651572343d4fea9db", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5796c46de20856f2eee0d8651572343d4fea9db", "html_url": "https://github.com/rust-lang/rust/commit/e5796c46de20856f2eee0d8651572343d4fea9db"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "1d0e661fc0aeb7aebd1950baf486dff0e04e8f7e", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4abed5000b73efdbf12fda2148aa14185461b370/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abed5000b73efdbf12fda2148aa14185461b370/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=4abed5000b73efdbf12fda2148aa14185461b370", "patch": "@@ -35,7 +35,7 @@ use object::{Architecture, BinaryFormat, Endianness, FileFlags, SectionFlags, Se\n use regex::Regex;\n use tempfile::Builder as TempFileBuilder;\n \n-use std::ffi::OsString;\n+use std::ffi::{OsStr, OsString};\n use std::lazy::OnceCell;\n use std::path::{Path, PathBuf};\n use std::process::{ExitStatus, Output, Stdio};\n@@ -639,15 +639,17 @@ const LLVM_DWP_EXECUTABLE: &'static str = \"rust-llvm-dwp\";\n \n /// Invoke `llvm-dwp` (shipped alongside rustc) to link `dwo` files from Split DWARF into a `dwp`\n /// file.\n-fn link_dwarf_object<'a>(sess: &'a Session, executable_out_filename: &Path) {\n+fn link_dwarf_object<'a, I>(sess: &'a Session, executable_out_filename: &Path, dwo_files: I)\n+where\n+    I: IntoIterator<Item: AsRef<OsStr>>,\n+{\n     info!(\"preparing dwp to {}.dwp\", executable_out_filename.to_str().unwrap());\n \n     let dwp_out_filename = executable_out_filename.with_extension(\"dwp\");\n     let mut cmd = Command::new(LLVM_DWP_EXECUTABLE);\n-    cmd.arg(\"-e\");\n-    cmd.arg(executable_out_filename);\n     cmd.arg(\"-o\");\n     cmd.arg(&dwp_out_filename);\n+    cmd.args(dwo_files);\n \n     let mut new_path = sess.get_tools_search_paths(false);\n     if let Some(path) = env::var_os(\"PATH\") {\n@@ -1031,7 +1033,14 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         SplitDebuginfo::Packed if sess.target.is_like_msvc => {}\n \n         // ... and otherwise we're processing a `*.dwp` packed dwarf file.\n-        SplitDebuginfo::Packed => link_dwarf_object(sess, &out_filename),\n+        // We cannot rely on the .dwo paths in the exectuable because they may have been\n+        // remapped by --remap-path-prefix and therefore invalid. So we need to provide\n+        // the .dwo paths explicitly\n+        SplitDebuginfo::Packed => link_dwarf_object(\n+            sess,\n+            &out_filename,\n+            codegen_results.modules.iter().filter_map(|m| m.dwarf_object.as_ref()),\n+        ),\n     }\n \n     let strip = strip_value(sess);"}, {"sha": "c5f649a13b4cf3f6a75cb15705dcbe479eed4465", "filename": "src/test/run-make-fulldeps/split-dwarf/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4abed5000b73efdbf12fda2148aa14185461b370/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4abed5000b73efdbf12fda2148aa14185461b370/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile?ref=4abed5000b73efdbf12fda2148aa14185461b370", "patch": "@@ -5,10 +5,10 @@\n all: packed remapped\n \n remapped:\n-\t$(RUSTC) -Z unstable-options -C split-debuginfo=packed -C debuginfo=2 --remap-path-prefix $$PWD= foo.rs -g\n+\t$(RUSTC) -Z unstable-options -C split-debuginfo=packed -C debuginfo=2 --remap-path-prefix $$PWD=/a foo.rs -g\n \tobjdump -Wi $(TMPDIR)/foo | grep $$PWD && exit 1 || exit 0\n \n-\t$(RUSTC) -Z unstable-options -C split-debuginfo=unpacked -C debuginfo=2 --remap-path-prefix $$PWD= foo.rs -g\n+\t$(RUSTC) -Z unstable-options -C split-debuginfo=unpacked -C debuginfo=2 --remap-path-prefix $$PWD=/a foo.rs -g\n \tobjdump -Wi $(TMPDIR)/foo | grep $$PWD && exit 1 || exit 0\n \n packed:"}]}