{"sha": "534f8dadb3d6d006509926c64d54eac2eefae9e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNGY4ZGFkYjNkNmQwMDY1MDk5MjZjNjRkNTRlYWMyZWVmYWU5ZTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-05T22:53:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-05T22:53:50Z"}, "message": "Rollup merge of #70808 - hermitcore:tls, r=dtolnay\n\nSimplify dtor registration for HermitCore by using a list of destructors\n\nThe implementation is similar to the macOS version and doesn't depend on additional OS support", "tree": {"sha": "0ab39271195d61d073af8f1e809e50dbb017091d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ab39271195d61d073af8f1e809e50dbb017091d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/534f8dadb3d6d006509926c64d54eac2eefae9e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeimF+CRBK7hj4Ov3rIwAAdHIIAFp0drsBQLCjAzCHRgRvVNNp\nHgZthMWBRWjoJWjK7nUkpambYQkfRJKVeJGwAMNwIWY8kn5MJdqAeWLMNQNwUFPi\nLD/Ap8FBYizTBq0r75iUVieiy9Cv69kJ9tSPJtYYNKJ4w6p0o15mI0M7W8dObs+5\nQKrDWwZF+EzRZS1KzOX4SnZWWF7cGntGpZgM51+5BX3EtoEYY3jOOvbP+WujPng1\nW7bubKsnOiralPNlx9oSoul++HGLtlXvS10di8Y/TeAq95Q0u+yq/hfAzP146Z6+\nd+ZhB6DxN05NmzzAcAuRdTJjnF8uKNhILAkQnPO6vgdG7ZNlcEG6ClactuqWVBo=\n=J2yu\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ab39271195d61d073af8f1e809e50dbb017091d\nparent e1b380a675d5ab00ad7230a3823b73abe44cea56\nparent 935683bd9cf668a0f616a336528c768115847aad\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1586127230 +0200\ncommitter GitHub <noreply@github.com> 1586127230 +0200\n\nRollup merge of #70808 - hermitcore:tls, r=dtolnay\n\nSimplify dtor registration for HermitCore by using a list of destructors\n\nThe implementation is similar to the macOS version and doesn't depend on additional OS support\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/534f8dadb3d6d006509926c64d54eac2eefae9e5", "html_url": "https://github.com/rust-lang/rust/commit/534f8dadb3d6d006509926c64d54eac2eefae9e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/534f8dadb3d6d006509926c64d54eac2eefae9e5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1b380a675d5ab00ad7230a3823b73abe44cea56", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1b380a675d5ab00ad7230a3823b73abe44cea56", "html_url": "https://github.com/rust-lang/rust/commit/e1b380a675d5ab00ad7230a3823b73abe44cea56"}, {"sha": "935683bd9cf668a0f616a336528c768115847aad", "url": "https://api.github.com/repos/rust-lang/rust/commits/935683bd9cf668a0f616a336528c768115847aad", "html_url": "https://github.com/rust-lang/rust/commit/935683bd9cf668a0f616a336528c768115847aad"}], "stats": {"total": 92, "additions": 48, "deletions": 44}, "files": [{"sha": "9b683fce157488df8d26ee08184e278578e5c17b", "filename": "src/libstd/sys/hermit/fast_thread_local.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/534f8dadb3d6d006509926c64d54eac2eefae9e5/src%2Flibstd%2Fsys%2Fhermit%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/534f8dadb3d6d006509926c64d54eac2eefae9e5/src%2Flibstd%2Fsys%2Fhermit%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Ffast_thread_local.rs?ref=534f8dadb3d6d006509926c64d54eac2eefae9e5", "patch": "@@ -1,4 +1,36 @@\n #![cfg(target_thread_local)]\n #![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n \n-pub use crate::sys_common::thread_local::register_dtor_fallback as register_dtor;\n+// Simplify dtor registration by using a list of destructors.\n+// The this solution works like the implementation of macOS and\n+// doesn't additional OS support\n+\n+use crate::cell::Cell;\n+use crate::ptr;\n+\n+#[thread_local]\n+static DTORS: Cell<*mut List> = Cell::new(ptr::null_mut());\n+\n+type List = Vec<(*mut u8, unsafe extern \"C\" fn(*mut u8))>;\n+\n+pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n+    if DTORS.get().is_null() {\n+        let v: Box<List> = box Vec::new();\n+        DTORS.set(Box::into_raw(v));\n+    }\n+\n+    let list: &mut List = &mut *DTORS.get();\n+    list.push((t, dtor));\n+}\n+\n+// every thread call this function to run through all possible destructors\n+pub unsafe fn run_dtors() {\n+    let mut ptr = DTORS.replace(ptr::null_mut());\n+    while !ptr.is_null() {\n+        let list = Box::from_raw(ptr);\n+        for (ptr, dtor) in list.into_iter() {\n+            dtor(ptr);\n+        }\n+        ptr = DTORS.replace(ptr::null_mut());\n+    }\n+}"}, {"sha": "6736d964e521b9850db1190a8d90e9eeddf6b05d", "filename": "src/libstd/sys/hermit/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/534f8dadb3d6d006509926c64d54eac2eefae9e5/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/534f8dadb3d6d006509926c64d54eac2eefae9e5/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fmod.rs?ref=534f8dadb3d6d006509926c64d54eac2eefae9e5", "patch": "@@ -103,6 +103,7 @@ pub unsafe extern \"C\" fn runtime_entry(\n     argv: *const *const c_char,\n     env: *const *const c_char,\n ) -> ! {\n+    use crate::sys::hermit::fast_thread_local::run_dtors;\n     extern \"C\" {\n         fn main(argc: isize, argv: *const *const c_char) -> i32;\n     }\n@@ -112,6 +113,7 @@ pub unsafe extern \"C\" fn runtime_entry(\n \n     let result = main(argc as isize, argv);\n \n+    run_dtors();\n     abi::exit(result);\n }\n "}, {"sha": "7e3fb4c6d20523ebd9430a33064d936c5a28cccb", "filename": "src/libstd/sys/hermit/thread.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/534f8dadb3d6d006509926c64d54eac2eefae9e5/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/534f8dadb3d6d006509926c64d54eac2eefae9e5/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fthread.rs?ref=534f8dadb3d6d006509926c64d54eac2eefae9e5", "patch": "@@ -4,6 +4,7 @@ use crate::ffi::CStr;\n use crate::io;\n use crate::mem;\n use crate::sys::hermit::abi;\n+use crate::sys::hermit::fast_thread_local::run_dtors;\n use crate::time::Duration;\n \n pub type Tid = abi::Tid;\n@@ -46,6 +47,9 @@ impl Thread {\n             unsafe {\n                 // Finally, let's run some code.\n                 Box::from_raw(main as *mut Box<dyn FnOnce()>)();\n+\n+                // run all destructors\n+                run_dtors();\n             }\n         }\n     }"}, {"sha": "f8be9863ed56f69713e88c98fdfd8b4a6037f2e6", "filename": "src/libstd/sys/hermit/thread_local.rs", "status": "modified", "additions": 9, "deletions": 43, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/534f8dadb3d6d006509926c64d54eac2eefae9e5/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/534f8dadb3d6d006509926c64d54eac2eefae9e5/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local.rs?ref=534f8dadb3d6d006509926c64d54eac2eefae9e5", "patch": "@@ -1,60 +1,26 @@\n-#![allow(dead_code)] // not used on all platforms\n-\n-use crate::collections::BTreeMap;\n-use crate::ptr;\n-use crate::sync::atomic::{AtomicUsize, Ordering};\n-use crate::sys_common::mutex::Mutex;\n-\n pub type Key = usize;\n \n-type Dtor = unsafe extern \"C\" fn(*mut u8);\n-\n-static NEXT_KEY: AtomicUsize = AtomicUsize::new(0);\n-\n-static mut KEYS: *mut BTreeMap<Key, Option<Dtor>> = ptr::null_mut();\n-static KEYS_LOCK: Mutex = Mutex::new();\n-\n-#[thread_local]\n-static mut LOCALS: *mut BTreeMap<Key, *mut u8> = ptr::null_mut();\n-\n-unsafe fn keys() -> &'static mut BTreeMap<Key, Option<Dtor>> {\n-    if KEYS.is_null() {\n-        KEYS = Box::into_raw(Box::new(BTreeMap::new()));\n-    }\n-    &mut *KEYS\n-}\n-\n-unsafe fn locals() -> &'static mut BTreeMap<Key, *mut u8> {\n-    if LOCALS.is_null() {\n-        LOCALS = Box::into_raw(Box::new(BTreeMap::new()));\n-    }\n-    &mut *LOCALS\n-}\n-\n #[inline]\n-pub unsafe fn create(dtor: Option<Dtor>) -> Key {\n-    let key = NEXT_KEY.fetch_add(1, Ordering::SeqCst);\n-    let _guard = KEYS_LOCK.lock();\n-    keys().insert(key, dtor);\n-    key\n+pub unsafe fn create(_dtor: Option<unsafe extern \"C\" fn(*mut u8)>) -> Key {\n+    panic!(\"should not be used on the wasm target\");\n }\n \n #[inline]\n-pub unsafe fn get(key: Key) -> *mut u8 {\n-    if let Some(&entry) = locals().get(&key) { entry } else { ptr::null_mut() }\n+pub unsafe fn set(_key: Key, _value: *mut u8) {\n+    panic!(\"should not be used on the wasm target\");\n }\n \n #[inline]\n-pub unsafe fn set(key: Key, value: *mut u8) {\n-    locals().insert(key, value);\n+pub unsafe fn get(_key: Key) -> *mut u8 {\n+    panic!(\"should not be used on the wasm target\");\n }\n \n #[inline]\n-pub unsafe fn destroy(key: Key) {\n-    keys().remove(&key);\n+pub unsafe fn destroy(_key: Key) {\n+    panic!(\"should not be used on the wasm target\");\n }\n \n #[inline]\n pub fn requires_synchronized_create() -> bool {\n-    false\n+    panic!(\"should not be used on the wasm target\");\n }"}]}