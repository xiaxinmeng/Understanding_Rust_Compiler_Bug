{"sha": "983606d3676c967e79a94b74b890bfb02367b608", "node_id": "C_kwDOAAsO6NoAKDk4MzYwNmQzNjc2Yzk2N2U3OWE5NGI3NGI4OTBiZmIwMjM2N2I2MDg", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-12-28T08:55:01Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-12-28T09:06:31Z"}, "message": "Allow trait method paths to satisfy const Fn bounds", "tree": {"sha": "fa361866fe031452f8108169a813873f35887368", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa361866fe031452f8108169a813873f35887368"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/983606d3676c967e79a94b74b890bfb02367b608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/983606d3676c967e79a94b74b890bfb02367b608", "html_url": "https://github.com/rust-lang/rust/commit/983606d3676c967e79a94b74b890bfb02367b608", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/983606d3676c967e79a94b74b890bfb02367b608/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a4624d73b34153811f7642b89bd396306aa7843", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a4624d73b34153811f7642b89bd396306aa7843", "html_url": "https://github.com/rust-lang/rust/commit/6a4624d73b34153811f7642b89bd396306aa7843"}], "stats": {"total": 113, "additions": 100, "deletions": 13}, "files": [{"sha": "466641ea6df3b46b7331159a346a400687a37079", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/983606d3676c967e79a94b74b890bfb02367b608/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/983606d3676c967e79a94b74b890bfb02367b608/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=983606d3676c967e79a94b74b890bfb02367b608", "patch": "@@ -12,8 +12,8 @@ use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::InferOk;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n use rustc_middle::ty::{\n-    self, GenericArg, GenericArgKind, GenericParamDefKind, InternalSubsts, SubstsRef,\n-    ToPolyTraitRef, ToPredicate, Ty, TyCtxt,\n+    self, Binder, GenericArg, GenericArgKind, GenericParamDefKind, InternalSubsts, SubstsRef,\n+    ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt,\n };\n use rustc_span::def_id::DefId;\n \n@@ -98,8 +98,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ImplSource::Future(vtable_future)\n             }\n \n-            FnPointerCandidate { .. } => {\n-                let data = self.confirm_fn_pointer_candidate(obligation)?;\n+            FnPointerCandidate { is_const } => {\n+                let data = self.confirm_fn_pointer_candidate(obligation, is_const)?;\n                 ImplSource::FnPointer(data)\n             }\n \n@@ -597,17 +597,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn confirm_fn_pointer_candidate(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n+        is_const: bool,\n     ) -> Result<ImplSourceFnPointerData<'tcx, PredicateObligation<'tcx>>, SelectionError<'tcx>>\n     {\n         debug!(?obligation, \"confirm_fn_pointer_candidate\");\n \n+        let tcx = self.tcx();\n         let self_ty = self\n             .infcx\n             .shallow_resolve(obligation.self_ty().no_bound_vars())\n             .expect(\"fn pointer should not capture bound vars from predicate\");\n-        let sig = self_ty.fn_sig(self.tcx());\n+        let sig = self_ty.fn_sig(tcx);\n         let trait_ref = closure_trait_ref_and_return_type(\n-            self.tcx(),\n+            tcx,\n             obligation.predicate.def_id(),\n             self_ty,\n             sig,\n@@ -616,9 +618,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         .map_bound(|(trait_ref, _)| trait_ref);\n \n         let mut nested = self.confirm_poly_trait_refs(obligation, trait_ref)?;\n+        let cause = obligation.derived_cause(BuiltinDerivedObligation);\n+\n+        if obligation.is_const() && !is_const {\n+            // function is a trait method\n+            if let ty::FnDef(def_id, substs) = self_ty.kind() && let Some(trait_id) = tcx.trait_of_item(*def_id) {\n+                let trait_ref = TraitRef::from_method(tcx, trait_id, *substs);\n+                let poly_trait_pred = Binder::dummy(trait_ref).with_constness(ty::BoundConstness::ConstIfConst);\n+                let obligation = Obligation::new(tcx, cause.clone(), obligation.param_env, poly_trait_pred);\n+                nested.push(obligation);\n+            }\n+        }\n \n         // Confirm the `type Output: Sized;` bound that is present on `FnOnce`\n-        let cause = obligation.derived_cause(BuiltinDerivedObligation);\n         let output_ty = self.infcx.replace_bound_vars_with_placeholders(sig.output());\n         let output_ty = normalize_with_depth_to(\n             self,"}, {"sha": "760b4585f4e195fd95349960f7bb579c021794c2", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/983606d3676c967e79a94b74b890bfb02367b608/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/983606d3676c967e79a94b74b890bfb02367b608/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=983606d3676c967e79a94b74b890bfb02367b608", "patch": "@@ -1374,6 +1374,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     FutureCandidate => {}\n                     // FnDef where the function is const\n                     FnPointerCandidate { is_const: true } => {}\n+                    FnPointerCandidate { is_const: false } => {\n+                        if let ty::FnDef(def_id, _) = obligation.self_ty().skip_binder().kind() && tcx.trait_of_item(*def_id).is_some() {\n+                            // Trait methods are not seen as const unless the trait is implemented as const.\n+                            // We do not filter that out in here, but nested obligations will be needed to confirm this.\n+                        } else {\n+                            continue\n+                        }\n+                    }\n                     ConstDestructCandidate(_) => {}\n                     _ => {\n                         // reject all other types of candidates"}, {"sha": "74fb1aadaf9b9d708086b957d7040419c0281ff9", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/983606d3676c967e79a94b74b890bfb02367b608/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/983606d3676c967e79a94b74b890bfb02367b608/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=983606d3676c967e79a94b74b890bfb02367b608", "patch": "@@ -800,9 +800,12 @@ pub trait Ord: Eq + PartialOrd<Self> {\n         Self: Sized,\n         Self: ~const Destruct,\n     {\n-        // HACK(fee1-dead): go back to using `self.max_by(other, Ord::cmp)`\n-        // when trait methods are allowed to be used when a const closure is\n-        // expected.\n+        #[cfg(not(bootstrap))]\n+        {\n+            max_by(self, other, Ord::cmp)\n+        }\n+\n+        #[cfg(bootstrap)]\n         match self.cmp(&other) {\n             Ordering::Less | Ordering::Equal => other,\n             Ordering::Greater => self,\n@@ -827,9 +830,12 @@ pub trait Ord: Eq + PartialOrd<Self> {\n         Self: Sized,\n         Self: ~const Destruct,\n     {\n-        // HACK(fee1-dead): go back to using `self.min_by(other, Ord::cmp)`\n-        // when trait methods are allowed to be used when a const closure is\n-        // expected.\n+        #[cfg(not(bootstrap))]\n+        {\n+            min_by(self, other, Ord::cmp)\n+        }\n+\n+        #[cfg(bootstrap)]\n         match self.cmp(&other) {\n             Ordering::Less | Ordering::Equal => self,\n             Ordering::Greater => other,"}, {"sha": "b5f19e40c03345a0313da53573b15cc59e9ba5ca", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-closure-trait-method-fail.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/983606d3676c967e79a94b74b890bfb02367b608/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-trait-method-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/983606d3676c967e79a94b74b890bfb02367b608/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-trait-method-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-trait-method-fail.rs?ref=983606d3676c967e79a94b74b890bfb02367b608", "patch": "@@ -0,0 +1,19 @@\n+#![feature(const_trait_impl)]\n+\n+#[const_trait]\n+trait Tr {\n+    fn a(self) -> i32;\n+}\n+\n+impl Tr for () {\n+    fn a(self) -> i32 { 42 }\n+}\n+\n+const fn need_const_closure<T: ~const FnOnce(()) -> i32>(x: T) -> i32 {\n+    x(())\n+}\n+\n+const _: () = assert!(need_const_closure(Tr::a) == 42);\n+//~^ ERROR: the trait bound\n+\n+fn main() {}"}, {"sha": "4470e287cc36ddfcaf43cd0d89008360afa8a790", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-closure-trait-method-fail.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/983606d3676c967e79a94b74b890bfb02367b608/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-trait-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/983606d3676c967e79a94b74b890bfb02367b608/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-trait-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-trait-method-fail.stderr?ref=983606d3676c967e79a94b74b890bfb02367b608", "patch": "@@ -0,0 +1,23 @@\n+error[E0277]: the trait bound `(): ~const Tr` is not satisfied in `fn(()) -> i32 {<() as Tr>::a}`\n+  --> $DIR/const-closure-trait-method-fail.rs:16:42\n+   |\n+LL | const _: () = assert!(need_const_closure(Tr::a) == 42);\n+   |                       ------------------ ^^^^^ within `fn(()) -> i32 {<() as Tr>::a}`, the trait `~const Tr` is not implemented for `()`\n+   |                       |\n+   |                       required by a bound introduced by this call\n+   |\n+note: the trait `Tr` is implemented for `()`, but that implementation is not `const`\n+  --> $DIR/const-closure-trait-method-fail.rs:16:42\n+   |\n+LL | const _: () = assert!(need_const_closure(Tr::a) == 42);\n+   |                                          ^^^^^\n+   = note: required because it appears within the type `fn(()) -> i32 {<() as Tr>::a}`\n+note: required by a bound in `need_const_closure`\n+  --> $DIR/const-closure-trait-method-fail.rs:12:32\n+   |\n+LL | const fn need_const_closure<T: ~const FnOnce(()) -> i32>(x: T) -> i32 {\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `need_const_closure`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "3e6d1908848e69dacbfa5648445aec0fc8bc7bf8", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-closure-trait-method.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/983606d3676c967e79a94b74b890bfb02367b608/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/983606d3676c967e79a94b74b890bfb02367b608/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-trait-method.rs?ref=983606d3676c967e79a94b74b890bfb02367b608", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+#![feature(const_trait_impl)]\n+\n+#[const_trait]\n+trait Tr {\n+    fn a(self) -> i32;\n+}\n+\n+impl const Tr for () {\n+    fn a(self) -> i32 { 42 }\n+}\n+\n+const fn need_const_closure<T: ~const FnOnce(()) -> i32>(x: T) -> i32 {\n+    x(())\n+}\n+\n+const _: () = assert!(need_const_closure(Tr::a) == 42);\n+\n+fn main() {}"}]}