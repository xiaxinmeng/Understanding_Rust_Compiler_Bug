{"sha": "60f0c576c9d6227f493494fe3cc7ca3880ab6b2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZjBjNTc2YzlkNjIyN2Y0OTM0OTRmZTNjYzdjYTM4ODBhYjZiMmQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-23T03:56:57Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-06-23T03:59:47Z"}, "message": "Preserve trailing comma of macro invocation", "tree": {"sha": "c4158cfc9b28ecb2dfbbe96368abf71a80ef6e67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4158cfc9b28ecb2dfbbe96368abf71a80ef6e67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60f0c576c9d6227f493494fe3cc7ca3880ab6b2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60f0c576c9d6227f493494fe3cc7ca3880ab6b2d", "html_url": "https://github.com/rust-lang/rust/commit/60f0c576c9d6227f493494fe3cc7ca3880ab6b2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60f0c576c9d6227f493494fe3cc7ca3880ab6b2d/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63784cb75f08fcc2a886b5967dde89259c4166b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/63784cb75f08fcc2a886b5967dde89259c4166b8", "html_url": "https://github.com/rust-lang/rust/commit/63784cb75f08fcc2a886b5967dde89259c4166b8"}], "stats": {"total": 51, "additions": 35, "deletions": 16}, "files": [{"sha": "4eafd72680773568bcd907e916024990f46f2d40", "filename": "src/expr.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/60f0c576c9d6227f493494fe3cc7ca3880ab6b2d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f0c576c9d6227f493494fe3cc7ca3880ab6b2d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=60f0c576c9d6227f493494fe3cc7ca3880ab6b2d", "patch": "@@ -93,6 +93,7 @@ pub fn format_expr(\n                 mk_sp(context.codemap.span_after(expr.span, \"[\"), expr.span.hi),\n                 context,\n                 shape,\n+                false,\n             )\n         }\n         ast::ExprKind::Lit(ref l) => {\n@@ -435,6 +436,7 @@ pub fn rewrite_array<'a, I>(\n     span: Span,\n     context: &RewriteContext,\n     shape: Shape,\n+    trailing_comma: bool,\n ) -> Option<String>\n where\n     I: Iterator<Item = &'a ast::Expr>,\n@@ -507,7 +509,13 @@ where\n     let fmt = ListFormatting {\n         tactic: tactic,\n         separator: \",\",\n-        trailing_separator: SeparatorTactic::Never,\n+        trailing_separator: if trailing_comma {\n+            SeparatorTactic::Always\n+        } else if context.inside_macro || context.config.array_layout() == IndentStyle::Visual {\n+            SeparatorTactic::Never\n+        } else {\n+            SeparatorTactic::Vertical\n+        },\n         shape: nested_shape,\n         ends_with_newline: false,\n         config: context.config,\n@@ -524,7 +532,7 @@ where\n         }\n     } else {\n         format!(\n-            \"[\\n{}{},\\n{}]\",\n+            \"[\\n{}{}\\n{}]\",\n             nested_shape.indent.to_string(context.config),\n             list_str,\n             shape.block().indent.to_string(context.config)"}, {"sha": "54a65087e12d4d714a0e981a17d43696242925ff", "filename": "src/macros.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/60f0c576c9d6227f493494fe3cc7ca3880ab6b2d/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f0c576c9d6227f493494fe3cc7ca3880ab6b2d/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=60f0c576c9d6227f493494fe3cc7ca3880ab6b2d", "patch": "@@ -30,7 +30,7 @@ use syntax::util::ThinVec;\n use Shape;\n use codemap::SpanUtils;\n use rewrite::{Rewrite, RewriteContext};\n-use expr::{rewrite_call, rewrite_array};\n+use expr::{rewrite_call_inner, rewrite_array};\n use comment::{FindUncommented, contains_comment};\n use utils::mk_sp;\n \n@@ -110,6 +110,7 @@ pub fn rewrite_macro(\n     let mut parser = new_parser_from_tts(context.parse_session, ts.trees().collect());\n     let mut expr_vec = Vec::new();\n     let mut vec_with_semi = false;\n+    let mut trailing_comma = false;\n \n     if MacroStyle::Braces != style {\n         loop {\n@@ -162,12 +163,8 @@ pub fn rewrite_macro(\n             parser.bump();\n \n             if parser.token == Token::Eof {\n-                // vec! is a special case of bracket macro which should be formated as an array.\n-                if macro_name == \"vec!\" {\n-                    break;\n-                } else {\n-                    return None;\n-                }\n+                trailing_comma = true;\n+                break;\n             }\n         }\n     }\n@@ -176,12 +173,19 @@ pub fn rewrite_macro(\n         MacroStyle::Parens => {\n             // Format macro invocation as function call, forcing no trailing\n             // comma because not all macros support them.\n-            rewrite_call(context, &macro_name, &expr_vec, mac.span, shape).map(\n-                |rw| match position {\n-                    MacroPosition::Item => format!(\"{};\", rw),\n-                    _ => rw,\n-                },\n-            )\n+            let rw = rewrite_call_inner(\n+                context,\n+                &macro_name,\n+                &expr_vec.iter().map(|e| &**e).collect::<Vec<_>>()[..],\n+                mac.span,\n+                shape,\n+                context.config.fn_call_width(),\n+                trailing_comma,\n+            );\n+            rw.ok().map(|rw| match position {\n+                MacroPosition::Item => format!(\"{};\", rw),\n+                _ => rw,\n+            })\n         }\n         MacroStyle::Brackets => {\n             let mac_shape = try_opt!(shape.offset_left(macro_name.len()));\n@@ -215,7 +219,13 @@ pub fn rewrite_macro(\n                     ))\n                 }\n             } else {\n-                // Format macro invocation as array literal.\n+                // If we are rewriting `vec!` macro or other special macros,\n+                // then we can rewrite this as an usual array literal.\n+                // Otherwise, we must preserve the original existence of trailing comma.\n+                if FORCED_BRACKET_MACROS.contains(&&macro_name.as_str()) {\n+                    context.inside_macro = false;\n+                    trailing_comma = false;\n+                }\n                 let rewrite = try_opt!(rewrite_array(\n                     expr_vec.iter().map(|x| &**x),\n                     mk_sp(\n@@ -226,6 +236,7 @@ pub fn rewrite_macro(\n                     ),\n                     context,\n                     mac_shape,\n+                    trailing_comma,\n                 ));\n \n                 Some(format!(\"{}{}\", macro_name, rewrite))"}]}