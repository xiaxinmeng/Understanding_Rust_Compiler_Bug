{"sha": "72767a805679b40c1884f1051b67cc43b46fc4e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNzY3YTgwNTY3OWI0MGMxODg0ZjEwNTFiNjdjYzQzYjQ2ZmM0ZTg=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2019-11-03T08:42:08Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2019-11-03T08:42:08Z"}, "message": "librustc_lexer: Introduce \"eat_while\" and \"eat_identifier\" methods", "tree": {"sha": "450e56d0f28a204b5a03098756e9878d6b80cdc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/450e56d0f28a204b5a03098756e9878d6b80cdc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72767a805679b40c1884f1051b67cc43b46fc4e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72767a805679b40c1884f1051b67cc43b46fc4e8", "html_url": "https://github.com/rust-lang/rust/commit/72767a805679b40c1884f1051b67cc43b46fc4e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72767a805679b40c1884f1051b67cc43b46fc4e8/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0825b357d894d1486deecd9294a15da1a32a3441", "url": "https://api.github.com/repos/rust-lang/rust/commits/0825b357d894d1486deecd9294a15da1a32a3441", "html_url": "https://github.com/rust-lang/rust/commit/0825b357d894d1486deecd9294a15da1a32a3441"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "576b4ff5ed6063eb38a7fc90b4d5c1556111732c", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/72767a805679b40c1884f1051b67cc43b46fc4e8/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72767a805679b40c1884f1051b67cc43b46fc4e8/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=72767a805679b40c1884f1051b67cc43b46fc4e8", "patch": "@@ -368,15 +368,7 @@ impl Cursor<'_> {\n     fn line_comment(&mut self) -> TokenKind {\n         debug_assert!(self.prev() == '/' && self.first() == '/');\n         self.bump();\n-        loop {\n-            match self.nth_char(0) {\n-                '\\n' => break,\n-                EOF_CHAR if self.is_eof() => break,\n-                _ => {\n-                    self.bump();\n-                }\n-            }\n-        }\n+        self.eat_while(|c| c != '\\n');\n         LineComment\n     }\n \n@@ -409,9 +401,7 @@ impl Cursor<'_> {\n \n     fn whitespace(&mut self) -> TokenKind {\n         debug_assert!(is_whitespace(self.prev()));\n-        while is_whitespace(self.nth_char(0)) {\n-            self.bump();\n-        }\n+        self.eat_while(is_whitespace);\n         Whitespace\n     }\n \n@@ -421,19 +411,17 @@ impl Cursor<'_> {\n                 && self.first() == '#'\n                 && is_id_start(self.second())\n         );\n+        // Eat \"#\" symbol.\n         self.bump();\n-        self.bump();\n-        while is_id_continue(self.nth_char(0)) {\n-            self.bump();\n-        }\n+        // Eat the identifier part of RawIdent.\n+        self.eat_identifier();\n         RawIdent\n     }\n \n     fn ident(&mut self) -> TokenKind {\n         debug_assert!(is_id_start(self.prev()));\n-        while is_id_continue(self.nth_char(0)) {\n-            self.bump();\n-        }\n+        // Start is already eaten, eat the rest of identifier.\n+        self.eat_while(is_id_continue);\n         Ident\n     }\n \n@@ -682,15 +670,33 @@ impl Cursor<'_> {\n         if self.eat_decimal_digits() { Ok(()) } else { Err(()) }\n     }\n \n-    // Eats the suffix if it's an identifier.\n+    // Eats the suffix of the literal, e.g. \"_u8\".\n     fn eat_literal_suffix(&mut self) {\n-        if !is_id_start(self.nth_char(0)) {\n+        self.eat_identifier();\n+    }\n+\n+    // Eats the identifier.\n+    fn eat_identifier(&mut self) {\n+        if !is_id_start(self.first()) {\n             return;\n         }\n         self.bump();\n \n-        while is_id_continue(self.nth_char(0)) {\n+        self.eat_while(is_id_continue);\n+    }\n+\n+    /// Eats symbols while predicate returns true or until the end of file is reached.\n+    /// Returns amount of eaten symbols.\n+    fn eat_while<F>(&mut self, mut predicate: F) -> usize\n+    where\n+        F: FnMut(char) -> bool\n+    {\n+        let mut eaten: usize = 0;\n+        while predicate(self.first()) && !self.is_eof() {\n+            eaten += 1;\n             self.bump();\n         }\n+\n+        eaten\n     }\n }"}]}