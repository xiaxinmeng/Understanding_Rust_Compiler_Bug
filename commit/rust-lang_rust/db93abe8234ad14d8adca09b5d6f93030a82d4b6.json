{"sha": "db93abe8234ad14d8adca09b5d6f93030a82d4b6", "node_id": "C_kwDOAAsO6NoAKGRiOTNhYmU4MjM0YWQxNGQ4YWRjYTA5YjVkNmY5MzAzMGE4MmQ0YjY", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-07-19T21:08:17Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-07-20T00:02:20Z"}, "message": "Fix bugs where unique_range became invalid\n\nAnd also expand the cache integrity checks to cover this case, and\ngenerally assert a lot more about the unique_range, then tighten up\nsloppy implementation scenarios that this uncovered.", "tree": {"sha": "57c82841dd838489a104c323fc128bead72053d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57c82841dd838489a104c323fc128bead72053d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db93abe8234ad14d8adca09b5d6f93030a82d4b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db93abe8234ad14d8adca09b5d6f93030a82d4b6", "html_url": "https://github.com/rust-lang/rust/commit/db93abe8234ad14d8adca09b5d6f93030a82d4b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db93abe8234ad14d8adca09b5d6f93030a82d4b6/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd", "html_url": "https://github.com/rust-lang/rust/commit/a7e51ac99ef6ebf505f9d1e584ea0f180354a5cd"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "9fab5433d84cc16edcb7185fd0412473426c6211", "filename": "src/stacked_borrows/stack.rs", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/db93abe8234ad14d8adca09b5d6f93030a82d4b6/src%2Fstacked_borrows%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db93abe8234ad14d8adca09b5d6f93030a82d4b6/src%2Fstacked_borrows%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fstack.rs?ref=db93abe8234ad14d8adca09b5d6f93030a82d4b6", "patch": "@@ -92,6 +92,7 @@ impl<'tcx> Stack {\n             }\n         }\n \n+        // Check that all Unique items fall within unique_range.\n         for (idx, item) in self.borrows.iter().enumerate() {\n             if item.perm() == Permission::Unique {\n                 assert!(\n@@ -102,6 +103,18 @@ impl<'tcx> Stack {\n                 );\n             }\n         }\n+\n+        // Check that the unique_range is a valid index into the borrow stack.\n+        let uniques = &self.borrows[self.unique_range.clone()];\n+\n+        // Check that the start of the unique_range is precise.\n+        if let Some(first_unique) = uniques.first() {\n+            assert_eq!(first_unique.perm(), Permission::Unique);\n+        }\n+        // We cannot assert that the unique range is exact on the upper end.\n+        // When we pop items within the unique range, setting the end of the range precisely\n+        // require doing a linear search of the borrow stack, which is exactly the kind of\n+        // operation that all this caching exists to avoid.\n     }\n \n     /// Find the item granting the given kind of access to the given tag, and return where\n@@ -227,9 +240,14 @@ impl<'tcx> Stack {\n             self.unique_range.end += 1;\n         }\n         if new.perm() == Permission::Unique {\n-            // Make sure the possibly-unique range contains the new borrow\n-            self.unique_range.start = self.unique_range.start.min(new_idx);\n-            self.unique_range.end = self.unique_range.end.max(new_idx + 1);\n+            // If this is the first Unique, set the range to contain just the new item.\n+            if self.unique_range == (0..0) {\n+                self.unique_range = new_idx..new_idx + 1;\n+            } else {\n+                // We already have other Unique items, expand the range to include the new item\n+                self.unique_range.start = self.unique_range.start.min(new_idx);\n+                self.unique_range.end = self.unique_range.end.max(new_idx + 1);\n+            }\n         }\n \n         // The above insert changes the meaning of every index in the cache >= new_idx, so now\n@@ -282,6 +300,10 @@ impl<'tcx> Stack {\n         // cache when it has been cleared and not yet refilled.\n         self.borrows.clear();\n         self.unknown_bottom = Some(tag);\n+        #[cfg(feature = \"stack-cache\")]\n+        {\n+            self.unique_range = 0..0;\n+        }\n     }\n \n     /// Find all `Unique` elements in this borrow stack above `granting_idx`, pass a copy of them\n@@ -298,7 +320,7 @@ impl<'tcx> Stack {\n \n         if disable_start <= unique_range.end {\n             let lower = unique_range.start.max(disable_start);\n-            let upper = (unique_range.end + 1).min(self.borrows.len());\n+            let upper = self.unique_range.end;\n             for item in &mut self.borrows[lower..upper] {\n                 if item.perm() == Permission::Unique {\n                     log::trace!(\"access: disabling item {:?}\", item);\n@@ -315,14 +337,14 @@ impl<'tcx> Stack {\n         }\n \n         #[cfg(feature = \"stack-cache\")]\n-        if disable_start < self.unique_range.start {\n+        if disable_start <= self.unique_range.start {\n             // We disabled all Unique items\n             self.unique_range.start = 0;\n             self.unique_range.end = 0;\n         } else {\n-            // Truncate the range to disable_start. This is + 2 because we are only removing\n-            // elements after disable_start, and this range does not include the end.\n-            self.unique_range.end = self.unique_range.end.min(disable_start + 1);\n+            // Truncate the range to only include items up to the index that we started disabling\n+            // at.\n+            self.unique_range.end = self.unique_range.end.min(disable_start);\n         }\n \n         #[cfg(debug_assertions)]\n@@ -369,12 +391,12 @@ impl<'tcx> Stack {\n                 self.cache.items[i] = base_tag;\n             }\n \n-            if start < self.unique_range.start.saturating_sub(1) {\n+            if start <= self.unique_range.start {\n                 // We removed all the Unique items\n                 self.unique_range = 0..0;\n             } else {\n                 // Ensure the range doesn't extend past the new top of the stack\n-                self.unique_range.end = self.unique_range.end.min(start + 1);\n+                self.unique_range.end = self.unique_range.end.min(start);\n             }\n         } else {\n             self.unique_range = 0..0;"}]}