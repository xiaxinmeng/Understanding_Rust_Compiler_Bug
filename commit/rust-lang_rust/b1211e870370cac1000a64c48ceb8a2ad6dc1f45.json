{"sha": "b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMjExZTg3MDM3MGNhYzEwMDBhNjRjNDhjZWI4YTJhZDZkYzFmNDU=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-09-07T02:57:05Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-09-07T02:57:05Z"}, "message": "Fix tests", "tree": {"sha": "21dd62ef471ee0eb2a8645493b3a486d04385891", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21dd62ef471ee0eb2a8645493b3a486d04385891"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "html_url": "https://github.com/rust-lang/rust/commit/b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5390cf32f7314eba09c504aac3be02e8f546b1f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5390cf32f7314eba09c504aac3be02e8f546b1f6", "html_url": "https://github.com/rust-lang/rust/commit/5390cf32f7314eba09c504aac3be02e8f546b1f6"}], "stats": {"total": 285, "additions": 194, "deletions": 91}, "files": [{"sha": "c7fa7973a2d4d608d41778e5b1abb2850fb52a03", "filename": "src/test/mir-opt/nll/named-lifetimes-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -34,7 +34,7 @@ fn main() {\n // | '_#4r    | Local    | ['_#4r]\n // |\n // | Inferred Region Values\n-// | '_#0r    | U0 | {bb0[0..=1], '_#0r}\n+// | '_#0r    | U0 | {bb0[0..=1], '_#0r, '_#1r, '_#2r, '_#3r, '_#4r}\n // | '_#1r    | U0 | {bb0[0..=1], '_#1r}\n // | '_#2r    | U0 | {bb0[0..=1], '_#2r}\n // | '_#3r    | U0 | {bb0[0..=1], '_#3r}"}, {"sha": "2f632fec17e9ebee2649979208611da3a2d77f80", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.nll.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -6,5 +6,15 @@ LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n LL |    bar(foo, x) //[transmute]~ ERROR E0495\n    |    ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n-error: aborting due to previous error\n+error: unsatisfied lifetime constraints\n+  --> $DIR/project-fn-ret-contravariant.rs:48:4\n+   |\n+LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n+   |        -- -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+LL |    bar(foo, x) //[transmute]~ ERROR E0495\n+   |    ^^^^^^^^^^^ requires that `'a` must outlive `'b`\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "63e1f665005cc3cfac686e8d72b6f188e7e134b1", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.nll.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -7,5 +7,16 @@ LL | fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n LL |    bar(foo, x) //[transmute]~ ERROR E0495\n    |    ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n-error: aborting due to previous error\n+error: unsatisfied lifetime constraints\n+  --> $DIR/project-fn-ret-invariant.rs:58:13\n+   |\n+LL | fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n+   |        -- -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+...\n+LL |    bar(foo, x) //[transmute]~ ERROR E0495\n+   |             ^ requires that `'a` must outlive `'b`\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "d75de81fc1c7fad951aa779bce692990d69a86fe", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -4,15 +4,15 @@ error: unsatisfied lifetime constraints\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n    |                         - let's call the lifetime of this reference `'1`\n LL |         self.x.iter().map(|a| a.0)\n-   |         ^^^^^^^^^^^^^ requires that `'1` must outlive `'static`\n+   |         ^^^^^^ cast requires that `'1` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/static-return-lifetime-infered.rs:21:9\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    -- lifetime `'a` defined here\n LL |         self.x.iter().map(|a| a.0)\n-   |         ^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+   |         ^^^^^^ cast requires that `'a` must outlive `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9963954c9c2d46a868b9bff6e9fe3f113214dd6f", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -43,7 +43,8 @@ fn demand_y<'x, 'y>(_cell_x: &Cell<&'x u32>, _cell_y: &Cell<&'y u32>, _y: &'y u3\n #[rustc_regions]\n fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-        //~^ ERROR\n+        //~^ ERROR borrowed data escapes outside of function\n+        //~| ERROR unsatisfied lifetime constraints\n \n         // Only works if 'x: 'y:\n         demand_y(x, y, x.get())"}, {"sha": "f50864d946be9bf152caee72ad951d6f6779f87c", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -3,7 +3,8 @@ note: External requirements\n    |\n LL |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n    |  _______________________________________________^\n-LL | |         //~^ ERROR\n+LL | |         //~^ ERROR borrowed data escapes outside of function\n+LL | |         //~| ERROR unsatisfied lifetime constraints\n LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n@@ -22,8 +23,8 @@ note: No external requirements\n    |\n LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n LL | |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-LL | |         //~^ ERROR\n-LL | |\n+LL | |         //~^ ERROR borrowed data escapes outside of function\n+LL | |         //~| ERROR unsatisfied lifetime constraints\n ...  |\n LL | |     });\n LL | | }\n@@ -37,12 +38,23 @@ error: borrowed data escapes outside of function\n LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n    |                     ------ `cell_a` is a reference that is only valid in the function body\n LL | /     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-LL | |         //~^ ERROR\n+LL | |         //~^ ERROR borrowed data escapes outside of function\n+LL | |         //~| ERROR unsatisfied lifetime constraints\n LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |     });\n    | |______^ `cell_a` escapes the function body here\n \n-error: aborting due to previous error\n+error: unsatisfied lifetime constraints\n+  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:45:29\n+   |\n+LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   |           --  -- lifetime `'b` defined here\n+   |           |\n+   |           lifetime `'a` defined here\n+LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+   |                             ^^^^^^^ requires that `'a` must outlive `'b`\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "d35b5c34a91811fefefc796833fad76fefcdabae", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -46,7 +46,8 @@ fn demand_y<'x, 'y>(_cell_x: &Cell<&'x u32>, _cell_y: &Cell<&'y u32>, _y: &'y u3\n #[rustc_regions]\n fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-        //~^ ERROR\n+        //~^ ERROR borrowed data escapes outside of function\n+        //~| ERROR unsatisfied lifetime constraints\n         // Only works if 'x: 'y:\n         demand_y(x, y, x.get())\n     });"}, {"sha": "8a89320d10cad82684df5f9af2cef4c23f9c7fbf", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -3,7 +3,8 @@ note: External requirements\n    |\n LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n    |  _______________________________________________^\n-LL | |         //~^ ERROR\n+LL | |         //~^ ERROR borrowed data escapes outside of function\n+LL | |         //~| ERROR unsatisfied lifetime constraints\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |     });\n@@ -21,9 +22,9 @@ note: No external requirements\n    |\n LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n LL | |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-LL | |         //~^ ERROR\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n+LL | |         //~^ ERROR borrowed data escapes outside of function\n+LL | |         //~| ERROR unsatisfied lifetime constraints\n+...  |\n LL | |     });\n LL | | }\n    | |_^\n@@ -36,11 +37,22 @@ error: borrowed data escapes outside of function\n LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n    |                     ------ `cell_a` is a reference that is only valid in the function body\n LL | /     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-LL | |         //~^ ERROR\n+LL | |         //~^ ERROR borrowed data escapes outside of function\n+LL | |         //~| ERROR unsatisfied lifetime constraints\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |     });\n    | |______^ `cell_a` escapes the function body here\n \n-error: aborting due to previous error\n+error: unsatisfied lifetime constraints\n+  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:48:29\n+   |\n+LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   |           --  -- lifetime `'b` defined here\n+   |           |\n+   |           lifetime `'a` defined here\n+LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+   |                             ^^^^^^^ requires that `'a` must outlive `'b`\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "d1976b40df41496b4454d97f4d7cdc19933347b1", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -17,7 +17,7 @@ LL | |     });\n                i32,\n                extern \"rust-call\" fn((T,))\n            ]\n-   = note: number of external vids: 3\n+   = note: number of external vids: 2\n    = note: where T: '_#1r\n \n note: No external requirements"}, {"sha": "332ec7a7da28cc570f78189fa3581666dceb3909", "filename": "src/test/ui/nll/mir_check_cast_reify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.rs?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -44,8 +44,8 @@ fn bar<'a>(x: &'a u32) -> &'static u32 {\n     // The MIR type checker must therefore relate `'?0` to `'?1` and `'?2`\n     // as part of checking the `ReifyFnPointer`.\n     let f: fn(_) -> _ = foo;\n+    //~^ ERROR unsatisfied lifetime constraints\n     f(x)\n-    //~^ ERROR\n }\n \n fn main() {}"}, {"sha": "fa5c4100c91e48e54166b6d940f6b34aa9ca4fdd", "filename": "src/test/ui/nll/mir_check_cast_reify.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -1,11 +1,11 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/mir_check_cast_reify.rs:47:5\n+  --> $DIR/mir_check_cast_reify.rs:46:25\n    |\n LL | fn bar<'a>(x: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here\n ...\n-LL |     f(x)\n-   |     ^^^^ returning this value requires that `'a` must outlive `'static`\n+LL |     let f: fn(_) -> _ = foo;\n+   |                         ^^^ cast requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "937ab31c3158646b8d82c08a31bd03c200fb0d91", "filename": "src/test/ui/nll/mir_check_cast_unsafe_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.rs?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -16,8 +16,8 @@ fn bar<'a>(input: &'a u32, f: fn(&'a u32) -> &'a u32) -> &'static u32 {\n     // Here the NLL checker must relate the types in `f` to the types\n     // in `g`. These are related via the `UnsafeFnPointer` cast.\n     let g: unsafe fn(_) -> _ = f;\n+    //~^ ERROR unsatisfied lifetime constraints\n     unsafe { g(input) }\n-    //~^ ERROR\n }\n \n fn main() {}"}, {"sha": "82ff71c0551571d72933b4afccdac11586c6c448", "filename": "src/test/ui/nll/mir_check_cast_unsafe_fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -1,11 +1,11 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/mir_check_cast_unsafe_fn.rs:19:14\n+  --> $DIR/mir_check_cast_unsafe_fn.rs:18:32\n    |\n LL | fn bar<'a>(input: &'a u32, f: fn(&'a u32) -> &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here\n ...\n-LL |     unsafe { g(input) }\n-   |              ^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+LL |     let g: unsafe fn(_) -> _ = f;\n+   |                                ^ cast requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "77a2e8311f052c8c5e812692fb989e49cc75933e", "filename": "src/test/ui/nll/mir_check_cast_unsize.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -4,7 +4,7 @@ error: unsatisfied lifetime constraints\n LL | fn bar<'a>(x: &'a u32) -> &'static dyn Debug {\n    |        -- lifetime `'a` defined here\n LL |     x\n-   |     ^ returning this value requires that `'a` must outlive `'static`\n+   |     ^ cast requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "9b7fe466696f8b0f0ace1bf1401b29953ef0a80b", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -10,7 +10,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 3\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n \n note: No external requirements\n@@ -50,7 +50,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 3\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n \n note: No external requirements\n@@ -82,7 +82,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where <T as std::iter::Iterator>::Item: '_#3r\n \n note: No external requirements\n@@ -124,7 +124,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where <T as std::iter::Iterator>::Item: '_#3r\n \n note: No external requirements"}, {"sha": "24f4bea1ba2f8cb99f112ec470fcbf4707833026", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -10,7 +10,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where T: '_#2r\n    = note: where '_#1r: '_#2r\n \n@@ -63,7 +63,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where T: '_#3r\n    = note: where '_#2r: '_#3r\n \n@@ -117,7 +117,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where T: '_#3r\n    = note: where '_#2r: '_#3r\n \n@@ -171,7 +171,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where T: '_#3r\n    = note: where '_#2r: '_#3r\n "}, {"sha": "df4f619b7763b07321f639381db3aecfeeec9ad9", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -10,7 +10,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where '_#1r: '_#2r\n \n note: No external requirements\n@@ -54,7 +54,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where '_#2r: '_#3r\n \n note: No external requirements\n@@ -99,7 +99,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where '_#2r: '_#3r\n \n note: No external requirements\n@@ -144,7 +144,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where '_#2r: '_#3r\n \n note: No external requirements\n@@ -177,7 +177,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 3\n    = note: where '_#1r: '_#2r\n \n note: No external requirements"}, {"sha": "b492525352442c6967e27037b7a4a8d17b5e6594", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -46,7 +46,7 @@ where\n     T: Anything<'b, 'c>,\n {\n     with_signature(cell, t, |cell, t| require(cell, t));\n-    //~^ ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n+    //~^ ERROR associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may not live long enough\n }\n \n #[rustc_regions]\n@@ -56,7 +56,7 @@ where\n     'a: 'a,\n {\n     with_signature(cell, t, |cell, t| require(cell, t));\n-    //~^ ERROR associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n+    //~^ ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n }\n \n #[rustc_regions]\n@@ -76,7 +76,7 @@ where\n     // can do better here with a more involved verification step.\n \n     with_signature(cell, t, |cell, t| require(cell, t));\n-    //~^ ERROR associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n+    //~^ ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n }\n \n #[rustc_regions]\n@@ -103,7 +103,7 @@ where\n     T: Anything<'b, 'b>,\n {\n     with_signature(cell, t, |cell, t| require(cell, t));\n-    //~^ ERROR\n+    //~^ ERROR unsatisfied lifetime constraints\n }\n \n #[rustc_regions]"}, {"sha": "176e45ae09872fa2786dc56ad591b55315294eeb", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -11,7 +11,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 6\n+   = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n note: No external requirements\n@@ -22,7 +22,7 @@ LL | | where\n LL | |     T: Anything<'b, 'c>,\n LL | | {\n LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | |     //~^ ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n+LL | |     //~^ ERROR associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may not live long enough\n LL | | }\n    | |_^\n    |\n@@ -32,13 +32,13 @@ LL | | }\n                T\n            ]\n \n-error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n+error[E0309]: the associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: ReFree(DefId(0/0:8 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:18), 'a))`...\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r, '_#6r>>::AssocType: ReFree(DefId(0/0:8 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:18), 'a))`...\n \n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:58:29\n@@ -54,7 +54,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n            ]\n-   = note: number of external vids: 6\n+   = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n note: No external requirements\n@@ -65,7 +65,7 @@ LL | | where\n LL | |     T: Anything<'b, 'c>,\n LL | |     'a: 'a,\n ...  |\n-LL | |     //~^ ERROR associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n+LL | |     //~^ ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n LL | | }\n    | |_^\n    |\n@@ -76,13 +76,13 @@ LL | | }\n                T\n            ]\n \n-error[E0309]: the associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n+error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:58:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#7r, '_#8r>>::AssocType: ReEarlyBound(0, 'a)`...\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: ReEarlyBound(0, 'a)`...\n \n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:78:29\n@@ -98,7 +98,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n            ]\n-   = note: number of external vids: 6\n+   = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n note: No external requirements\n@@ -109,7 +109,7 @@ LL | | where\n LL | |     T: Anything<'b, 'c>,\n LL | |     T::AssocType: 'a,\n ...  |\n-LL | |     //~^ ERROR associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n+LL | |     //~^ ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n LL | | }\n    | |_^\n    |\n@@ -120,13 +120,13 @@ LL | | }\n                T\n            ]\n \n-error[E0309]: the associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n+error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:78:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#7r, '_#8r>>::AssocType: ReEarlyBound(0, 'a)`...\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: ReEarlyBound(0, 'a)`...\n \n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:88:29\n@@ -142,7 +142,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n            ]\n-   = note: number of external vids: 6\n+   = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n note: No external requirements\n@@ -178,7 +178,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n            ]\n-   = note: number of external vids: 6\n+   = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n note: No external requirements\n@@ -212,7 +212,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n \n note: No external requirements\n@@ -223,7 +223,7 @@ LL | | where\n LL | |     T: Anything<'b, 'b>,\n LL | | {\n LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | |     //~^ ERROR\n+LL | |     //~^ ERROR unsatisfied lifetime constraints\n LL | | }\n    | |_^\n    |\n@@ -256,7 +256,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n note: No external requirements\n@@ -289,7 +289,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 3\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n \n note: No external requirements"}, {"sha": "1f5edf08957d6d64f7e3a1ab4aaa2afa67acdfa2", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -9,7 +9,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) T))\n            ]\n-   = note: number of external vids: 3\n+   = note: number of external vids: 2\n    = note: where T: '_#1r\n \n note: No external requirements\n@@ -36,7 +36,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) T))\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 3\n    = note: where T: '_#1r\n \n note: No external requirements"}, {"sha": "9e69ae051732c260db94b5e91372ad33fa74ec1a", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -10,7 +10,7 @@ LL |     with_signature(x, |y| y)\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn std::fmt::Debug + '_#2r)>\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 3\n    = note: where T: '_#2r\n \n note: No external requirements"}, {"sha": "1b9baf61305d99cc2514617b5fded3941f775f59", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -16,7 +16,7 @@ LL | |     })\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#1r ()>, T))\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 3\n    = note: where T: '_#1r\n \n note: No external requirements\n@@ -69,7 +69,7 @@ LL | |     })\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 3\n    = note: where T: '_#2r\n \n note: No external requirements\n@@ -106,7 +106,7 @@ LL | |     })\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where T: '_#2r\n \n note: No external requirements\n@@ -156,7 +156,7 @@ LL | |     })\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where T: '_#3r\n \n note: No external requirements"}, {"sha": "a85822e48fa6a777ede73b7825d734a20cd2face", "filename": "src/test/ui/regions/regions-addr-of-self.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -1,10 +1,10 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-addr-of-self.rs:17:37\n+  --> $DIR/regions-addr-of-self.rs:17:13\n    |\n LL |     pub fn chase_cat(&mut self) {\n    |                      - let's call the lifetime of this reference `'1`\n LL |         let p: &'static mut usize = &mut self.cats_chased; //~ ERROR cannot infer\n-   |                                     ^^^^^^^^^^^^^^^^^^^^^ requires that `'1` must outlive `'static`\n+   |             ^ requires that `'1` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "9d6301af0fbea65c32c08dce7aff48d8437f63da", "filename": "src/test/ui/regions/regions-addr-of-upvar-self.nll.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -1,10 +1,22 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-addr-of-upvar-self.rs:20:41\n+  --> $DIR/regions-addr-of-upvar-self.rs:20:17\n    |\n LL |         let _f = || {\n    |                  -- lifetime `'1` represents this closure's body\n LL |             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n-   |                                         ^^^^^^^^^^^^^^ requires that `'1` must outlive `'static`\n+   |                 ^ requires that `'1` must outlive `'static`\n+   |\n+   = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-addr-of-upvar-self.rs:20:17\n+   |\n+LL |     pub fn chase_cat(&mut self) {\n+   |                      --------- lifetime `'2` appears in the type of `self`\n+LL |         let _f = || {\n+   |                  -- lifetime `'1` represents this closure's body\n+LL |             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n+   |                 ^ requires that `'1` must outlive `'2`\n    |\n    = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n \n@@ -29,6 +41,6 @@ LL |     }\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0597`."}, {"sha": "e619431ddbbc35b9330883ef56c1a31e3f5d4ba5", "filename": "src/test/ui/regions/regions-close-object-into-object-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -1,10 +1,10 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-close-object-into-object-2.rs:20:5\n+  --> $DIR/regions-close-object-into-object-2.rs:20:11\n    |\n LL | fn g<'a, T: 'static>(v: Box<A<T>+'a>) -> Box<X+'static> {\n    |      -- lifetime `'a` defined here\n LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n-   |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |           ^^^ cast requires that `'a` must outlive `'static`\n \n error[E0597]: `*v` does not live long enough\n   --> $DIR/regions-close-object-into-object-2.rs:20:11"}, {"sha": "1de1cdc9807f92feba3e0eb59ca66e4b91aa758e", "filename": "src/test/ui/regions/regions-close-object-into-object-4.nll.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -6,14 +6,6 @@ LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n    |\n    = help: consider adding an explicit lifetime bound `U: 'static`...\n \n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-close-object-into-object-4.rs:20:5\n-   |\n-LL | fn i<'a, T, U>(v: Box<A<U>+'a>) -> Box<X+'static> {\n-   |      -- lifetime `'a` defined here\n-LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n-   |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-\n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:20:9\n    |\n@@ -22,6 +14,14 @@ LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n    |\n    = help: consider adding an explicit lifetime bound `U: 'static`...\n \n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-close-object-into-object-4.rs:20:11\n+   |\n+LL | fn i<'a, T, U>(v: Box<A<U>+'a>) -> Box<X+'static> {\n+   |      -- lifetime `'a` defined here\n+LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n+   |           ^^^ cast requires that `'a` must outlive `'static`\n+\n error[E0597]: `*v` does not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:20:11\n    |"}, {"sha": "dc3a32cec6ac7b700d1eaa8821243451c253c61b", "filename": "src/test/ui/regions/regions-static-bound.ll.nll.stderr", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -15,14 +15,35 @@ LL |     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of\n    |     ^^^^^^^^^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/regions-static-bound.rs:26:5\n+  --> $DIR/regions-static-bound.rs:27:5\n    |\n LL | fn error(u: &(), v: &()) {\n    |                     --- help: add explicit lifetime `'static` to the type of `v`: `&'static ()`\n ...\n LL |     static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n    |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n \n-error: aborting due to 3 previous errors\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-static-bound.rs:24:5\n+   |\n+LL | fn error(u: &(), v: &()) {\n+   |             -       - let's call the lifetime of this reference `'2`\n+   |             |\n+   |             let's call the lifetime of this reference `'1`\n+LL |     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of `u` [E0621]\n+   |     ^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-static-bound.rs:27:5\n+   |\n+LL | fn error(u: &(), v: &()) {\n+   |             -       - let's call the lifetime of this reference `'1`\n+   |             |\n+   |             let's call the lifetime of this reference `'2`\n+...\n+LL |     static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0621`."}, {"sha": "16add00eb41e13c73f7e6b440a02d1799f21a7b1", "filename": "src/test/ui/regions/regions-static-bound.ll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -20,7 +20,7 @@ LL |     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of\n    |     ^^^^^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/regions-static-bound.rs:26:5\n+  --> $DIR/regions-static-bound.rs:27:5\n    |\n LL | fn error(u: &(), v: &()) {\n    |                     --- help: add explicit lifetime `'static` to the type of `v`: `&'static ()`"}, {"sha": "dc3a32cec6ac7b700d1eaa8821243451c253c61b", "filename": "src/test/ui/regions/regions-static-bound.nll.stderr", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -15,14 +15,35 @@ LL |     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of\n    |     ^^^^^^^^^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/regions-static-bound.rs:26:5\n+  --> $DIR/regions-static-bound.rs:27:5\n    |\n LL | fn error(u: &(), v: &()) {\n    |                     --- help: add explicit lifetime `'static` to the type of `v`: `&'static ()`\n ...\n LL |     static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n    |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n \n-error: aborting due to 3 previous errors\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-static-bound.rs:24:5\n+   |\n+LL | fn error(u: &(), v: &()) {\n+   |             -       - let's call the lifetime of this reference `'2`\n+   |             |\n+   |             let's call the lifetime of this reference `'1`\n+LL |     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of `u` [E0621]\n+   |     ^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-static-bound.rs:27:5\n+   |\n+LL | fn error(u: &(), v: &()) {\n+   |             -       - let's call the lifetime of this reference `'1`\n+   |             |\n+   |             let's call the lifetime of this reference `'2`\n+...\n+LL |     static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0621`."}, {"sha": "34baf5ffff0a73755431ed6404ecebddb22d47ae", "filename": "src/test/ui/regions/regions-static-bound.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -23,8 +23,10 @@ fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n fn error(u: &(), v: &()) {\n     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of `u` [E0621]\n     //[nll]~^ ERROR explicit lifetime required in the type of `u` [E0621]\n+    //[nll]~| ERROR unsatisfied lifetime constraints\n     static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n     //[nll]~^ ERROR explicit lifetime required in the type of `v` [E0621]\n+    //[nll]~| ERROR unsatisfied lifetime constraints\n }\n \n fn main() {}"}, {"sha": "745c65c54df4a1497dd17a1234f76db758c526f9", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1211e870370cac1000a64c48ceb8a2ad6dc1f45/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr?ref=b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "patch": "@@ -5,7 +5,7 @@ LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n    |                - let's call the lifetime of this reference `'1`\n LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ cast requires that `'1` must outlive `'static`\n \n error: aborting due to previous error\n "}]}