{"sha": "e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZTMzZWJkMmJhMTJhNzhkYmY2ZTJkNWYxNTRkNWY3MWYyODU3NmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-11T19:29:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-11T19:29:38Z"}, "message": "Auto merge of #75421 - tmandry:rollup-ctzmzn1, r=tmandry\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #75036 (Prefer pattern matching over indexing)\n - #75378 (Introduce `rustc_lexer::is_ident` and use it in couple of places)\n - #75393 (Fully handle \"?\" shortcut)\n - #75403 (Update comment for function)\n - #75407 (Requested changes to [*mut T|*const T]::set_ptr_value)\n - #75408 (Update MinGW comments in ci.yml)\n - #75409 (Fix range term in alloc vec doc)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "2400d5f1c2b7830eb3ccb38bb3837ca128159421", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2400d5f1c2b7830eb3ccb38bb3837ca128159421"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "html_url": "https://github.com/rust-lang/rust/commit/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbe7c5ce705896d4e22bf6096590bc1f17993b78", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe7c5ce705896d4e22bf6096590bc1f17993b78", "html_url": "https://github.com/rust-lang/rust/commit/cbe7c5ce705896d4e22bf6096590bc1f17993b78"}, {"sha": "5d9a0b020c8f85c78b4bb7071e993a9d00db07e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d9a0b020c8f85c78b4bb7071e993a9d00db07e7", "html_url": "https://github.com/rust-lang/rust/commit/5d9a0b020c8f85c78b4bb7071e993a9d00db07e7"}], "stats": {"total": 145, "additions": 88, "deletions": 57}, "files": [{"sha": "e2a16d56e49ea684c606a62b9adeef9f97d27ffc", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "patch": "@@ -3257,6 +3257,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n+ \"rustc_lexer\",\n  \"rustc_macros\",\n  \"rustc_serialize\",\n  \"rustc_session\","}, {"sha": "de707a71a8c9e9c920e6947687d1142e84b1570a", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "patch": "@@ -2269,7 +2269,7 @@ impl<T> Vec<T> {\n     /// with the given `replace_with` iterator and yields the removed items.\n     /// `replace_with` does not need to be the same length as `range`.\n     ///\n-    /// The element range is removed even if the iterator is not consumed until the end.\n+    /// `range` is removed even if the iterator is not consumed until the end.\n     ///\n     /// It is unspecified how many elements are removed from the vector\n     /// if the `Splice` value is leaked."}, {"sha": "ac20897d258fb78ffd55060a43f0e33408d9951f", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "patch": "@@ -662,6 +662,11 @@ impl<T: ?Sized> *const T {\n     /// will only affect the pointer part, whereas for (thin) pointers to\n     /// sized types, this has the same effect as a simple assignment.\n     ///\n+    /// The resulting pointer will have provenance of `val`, i.e., for a fat\n+    /// pointer, this operation is semantically the same as creating a new\n+    /// fat pointer with the data pointer value of `val` but the metadata of\n+    /// `self`.\n+    ///\n     /// # Examples\n     ///\n     /// This function is primarily useful for allowing byte-wise pointer\n@@ -673,13 +678,17 @@ impl<T: ?Sized> *const T {\n     /// let arr: [i32; 3] = [1, 2, 3];\n     /// let mut ptr = &arr[0] as *const dyn Debug;\n     /// let thin = ptr as *const u8;\n-    /// ptr = ptr.set_ptr_value(unsafe { thin.add(8).cast() });\n-    /// assert_eq!(unsafe { *(ptr as *const i32) }, 3);\n+    /// unsafe {\n+    ///     ptr = ptr.set_ptr_value(thin.add(8));\n+    ///     # assert_eq!(*(ptr as *const i32), 3);\n+    ///     println!(\"{:?}\", &*ptr); // will print \"3\"\n+    /// }\n     /// ```\n     #[unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n-    pub fn set_ptr_value(mut self, val: *const ()) -> Self {\n-        let thin = &mut self as *mut *const T as *mut *const ();\n+    pub fn set_ptr_value(mut self, val: *const u8) -> Self {\n+        let thin = &mut self as *mut *const T as *mut *const u8;\n         // SAFETY: In case of a thin pointer, this operations is identical\n         // to a simple assignment. In case of a fat pointer, with the current\n         // fat pointer layout implementation, the first field of such a"}, {"sha": "df00139118aa4bc0cd98fe6398c9c74816f72f8f", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "patch": "@@ -718,6 +718,11 @@ impl<T: ?Sized> *mut T {\n     /// will only affect the pointer part, whereas for (thin) pointers to\n     /// sized types, this has the same effect as a simple assignment.\n     ///\n+    /// The resulting pointer will have provenance of `val`, i.e., for a fat\n+    /// pointer, this operation is semantically the same as creating a new\n+    /// fat pointer with the data pointer value of `val` but the metadata of\n+    /// `self`.\n+    ///\n     /// # Examples\n     ///\n     /// This function is primarily useful for allowing byte-wise pointer\n@@ -729,13 +734,17 @@ impl<T: ?Sized> *mut T {\n     /// let mut arr: [i32; 3] = [1, 2, 3];\n     /// let mut ptr = &mut arr[0] as *mut dyn Debug;\n     /// let thin = ptr as *mut u8;\n-    /// ptr = ptr.set_ptr_value(unsafe { thin.add(8).cast() });\n-    /// assert_eq!(unsafe { *(ptr as *mut i32) }, 3);\n+    /// unsafe {\n+    ///     ptr = ptr.set_ptr_value(thin.add(8));\n+    ///     # assert_eq!(*(ptr as *mut i32), 3);\n+    ///     println!(\"{:?}\", &*ptr); // will print \"3\"\n+    /// }\n     /// ```\n     #[unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n-    pub fn set_ptr_value(mut self, val: *mut ()) -> Self {\n-        let thin = &mut self as *mut *mut T as *mut *mut ();\n+    pub fn set_ptr_value(mut self, val: *mut u8) -> Self {\n+        let thin = &mut self as *mut *mut T as *mut *mut u8;\n         // SAFETY: In case of a thin pointer, this operations is identical\n         // to a simple assignment. In case of a fat pointer, with the current\n         // fat pointer layout implementation, the first field of such a"}, {"sha": "ccaacbf1a58a9fbf3f0d45239f325f45e1fd4610", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "patch": "@@ -767,10 +767,8 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_ipv6_compatible(&self) -> Ipv6Addr {\n-        let octets = self.octets();\n-        Ipv6Addr::from([\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, octets[0], octets[1], octets[2], octets[3],\n-        ])\n+        let [a, b, c, d] = self.octets();\n+        Ipv6Addr::from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a, b, c, d])\n     }\n \n     /// Converts this address to an IPv4-mapped [IPv6 address].\n@@ -789,10 +787,8 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_ipv6_mapped(&self) -> Ipv6Addr {\n-        let octets = self.octets();\n-        Ipv6Addr::from([\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xFF, 0xFF, octets[0], octets[1], octets[2], octets[3],\n-        ])\n+        let [a, b, c, d] = self.octets();\n+        Ipv6Addr::from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xFF, 0xFF, a, b, c, d])\n     }\n }\n \n@@ -1498,11 +1494,12 @@ impl Ipv6Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_ipv4(&self) -> Option<Ipv4Addr> {\n-        match self.segments() {\n-            [0, 0, 0, 0, 0, f, g, h] if f == 0 || f == 0xffff => {\n-                Some(Ipv4Addr::new((g >> 8) as u8, g as u8, (h >> 8) as u8, h as u8))\n-            }\n-            _ => None,\n+        if let [0, 0, 0, 0, 0, 0 | 0xffff, ab, cd] = self.segments() {\n+            let [a, b] = ab.to_be_bytes();\n+            let [c, d] = cd.to_be_bytes();\n+            Some(Ipv4Addr::new(a, b, c, d))\n+        } else {\n+            None\n         }\n     }\n "}, {"sha": "165ecc791804472bd79ac03c8e231458bc7a4672", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "patch": "@@ -490,15 +490,17 @@ jobs:\n \n           # 32/64-bit MinGW builds.\n           #\n-          # We are using MinGW with posix threads since LLVM does not compile with\n-          # the win32 threads version due to missing support for C++'s std::thread.\n+          # We are using MinGW with POSIX threads since LLVM requires\n+          # C++'s std::thread which is disabled in libstdc++ with win32 threads.\n+          # FIXME: Libc++ doesn't have this limitation so we can avoid \n+          # winpthreads if we switch to it.\n           #\n-          # Instead of relying on the MinGW version installed on appveryor we download\n-          # and install one ourselves so we won't be surprised by changes to appveyor's\n+          # Instead of relying on the MinGW version installed on CI we download\n+          # and install one ourselves so we won't be surprised by changes to CI's\n           # build image.\n           #\n           # Finally, note that the downloads below are all in the `rust-lang-ci` S3\n-          # bucket, but they cleraly didn't originate there! The downloads originally\n+          # bucket, but they clearly didn't originate there! The downloads originally\n           # came from the mingw-w64 SourceForge download site. Unfortunately\n           # SourceForge is notoriously flaky, so we mirror it on our own infrastructure.\n "}, {"sha": "35bdf747f08d7d3e2be12f99fec0c32a6bdec0bc", "filename": "src/librustc_attr/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/src%2Flibrustc_attr%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/src%2Flibrustc_attr%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2FCargo.toml?ref=e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "patch": "@@ -16,6 +16,7 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_feature = { path = \"../librustc_feature\" }\n+rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_session = { path = \"../librustc_session\" }\n rustc_ast = { path = \"../librustc_ast\" }"}, {"sha": "5f131fae385b08c7d5b3a2c7186f6c5de608d4da", "filename": "src/librustc_attr/builtin.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/src%2Flibrustc_attr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/src%2Flibrustc_attr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Fbuiltin.rs?ref=e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "patch": "@@ -20,6 +20,7 @@ enum AttrError {\n     MultipleItem(String),\n     UnknownMetaItem(String, &'static [&'static str]),\n     MissingSince,\n+    NonIdentFeature,\n     MissingFeature,\n     MultipleStabilityLevels,\n     UnsupportedLiteral(&'static str, /* is_bytestr */ bool),\n@@ -40,6 +41,9 @@ fn handle_errors(sess: &ParseSess, span: Span, error: AttrError) {\n         AttrError::MissingSince => {\n             struct_span_err!(diag, span, E0542, \"missing 'since'\").emit();\n         }\n+        AttrError::NonIdentFeature => {\n+            struct_span_err!(diag, span, E0546, \"'feature' is not an identifier\").emit();\n+        }\n         AttrError::MissingFeature => {\n             struct_span_err!(diag, span, E0546, \"missing 'feature'\").emit();\n         }\n@@ -344,6 +348,14 @@ where\n \n                     match (feature, reason, issue) {\n                         (Some(feature), reason, Some(_)) => {\n+                            if !rustc_lexer::is_ident(&feature.as_str()) {\n+                                handle_errors(\n+                                    &sess.parse_sess,\n+                                    attr.span,\n+                                    AttrError::NonIdentFeature,\n+                                );\n+                                continue;\n+                            }\n                             let level = Unstable { reason, issue: issue_num, is_soft };\n                             if sym::unstable == meta_name {\n                                 stab = Some(Stability { level, feature });"}, {"sha": "83a650443bcba59c6cffc07f204d5109fbad7459", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "patch": "@@ -319,18 +319,10 @@ pub struct Ident {\n }\n \n impl Ident {\n-    fn is_valid(string: &str) -> bool {\n-        let mut chars = string.chars();\n-        if let Some(start) = chars.next() {\n-            rustc_lexer::is_id_start(start) && chars.all(rustc_lexer::is_id_continue)\n-        } else {\n-            false\n-        }\n-    }\n     fn new(sess: &ParseSess, sym: Symbol, is_raw: bool, span: Span) -> Ident {\n         let sym = nfc_normalize(&sym.as_str());\n         let string = sym.as_str();\n-        if !Self::is_valid(&string) {\n+        if !rustc_lexer::is_ident(&string) {\n             panic!(\"`{:?}` is not a valid identifier\", string)\n         }\n         if is_raw && !sym.can_be_raw() {"}, {"sha": "7949a232b9b35a8c535c20ae8e05f8ff5c7eed9f", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "patch": "@@ -274,6 +274,16 @@ pub fn is_id_continue(c: char) -> bool {\n         || (c > '\\x7f' && unicode_xid::UnicodeXID::is_xid_continue(c))\n }\n \n+/// The passed string is lexically an identifier.\n+pub fn is_ident(string: &str) -> bool {\n+    let mut chars = string.chars();\n+    if let Some(start) = chars.next() {\n+        is_id_start(start) && chars.all(is_id_continue)\n+    } else {\n+        false\n+    }\n+}\n+\n impl Cursor<'_> {\n     /// Parses a token from the input string.\n     fn advance_token(&mut self) -> Token {"}, {"sha": "1f17c7dcba43f353a2c8a6eff75a22452bad2e1a", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "patch": "@@ -219,7 +219,7 @@ pub fn new_lint_store(no_interleave_lints: bool, internal_lints: bool) -> LintSt\n \n /// Tell the `LintStore` about all the built-in lints (the ones\n /// defined in this crate and the ones defined in\n-/// `rustc::lint::builtin`).\n+/// `rustc_session::lint::builtin`).\n fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n     macro_rules! add_lint_group {\n         ($name:expr, $($lint:ident),*) => ("}, {"sha": "801d06e61016961ef8a808004708c727044ddfbf", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "patch": "@@ -2358,7 +2358,7 @@ impl Clean<Stability> for attr::Stability {\n     fn clean(&self, _: &DocContext<'_>) -> Stability {\n         Stability {\n             level: stability::StabilityLevel::from_attr_level(&self.level),\n-            feature: Some(self.feature.to_string()).filter(|f| !f.is_empty()),\n+            feature: self.feature.to_string(),\n             since: match self.level {\n                 attr::Stable { ref since } => since.to_string(),\n                 _ => String::new(),"}, {"sha": "627f88df45c9fe00170d487dc13e5b0eaab59c45", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "patch": "@@ -1525,7 +1525,7 @@ pub struct ProcMacro {\n #[derive(Clone, Debug)]\n pub struct Stability {\n     pub level: stability::StabilityLevel,\n-    pub feature: Option<String>,\n+    pub feature: String,\n     pub since: String,\n     pub unstable_reason: Option<String>,\n     pub issue: Option<NonZeroU32>,"}, {"sha": "bd919205dd1761b76c9cd010df00fbd57cc5f1af", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "patch": "@@ -2144,7 +2144,7 @@ fn stability_tags(item: &clean::Item) -> String {\n     if item\n         .stability\n         .as_ref()\n-        .map(|s| s.level == stability::Unstable && s.feature.as_deref() != Some(\"rustc_private\"))\n+        .map(|s| s.level == stability::Unstable && s.feature != \"rustc_private\")\n         == Some(true)\n     {\n         tags += &tag_html(\"unstable\", \"Experimental\");\n@@ -2195,25 +2195,25 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n \n     // Render unstable items. But don't render \"rustc_private\" crates (internal compiler crates).\n     // Those crates are permanently unstable so it makes no sense to render \"unstable\" everywhere.\n-    if let Some(stab) = item.stability.as_ref().filter(|stab| {\n-        stab.level == stability::Unstable && stab.feature.as_deref() != Some(\"rustc_private\")\n-    }) {\n+    if let Some(stab) = item\n+        .stability\n+        .as_ref()\n+        .filter(|stab| stab.level == stability::Unstable && stab.feature != \"rustc_private\")\n+    {\n         let mut message =\n             \"<span class='emoji'>\ud83d\udd2c</span> This is a nightly-only experimental API.\".to_owned();\n \n-        if let Some(feature) = stab.feature.as_deref() {\n-            let mut feature = format!(\"<code>{}</code>\", Escape(&feature));\n-            if let (Some(url), Some(issue)) = (&cx.shared.issue_tracker_base_url, stab.issue) {\n-                feature.push_str(&format!(\n-                    \"&nbsp;<a href=\\\"{url}{issue}\\\">#{issue}</a>\",\n-                    url = url,\n-                    issue = issue\n-                ));\n-            }\n-\n-            message.push_str(&format!(\" ({})\", feature));\n+        let mut feature = format!(\"<code>{}</code>\", Escape(&stab.feature));\n+        if let (Some(url), Some(issue)) = (&cx.shared.issue_tracker_base_url, stab.issue) {\n+            feature.push_str(&format!(\n+                \"&nbsp;<a href=\\\"{url}{issue}\\\">#{issue}</a>\",\n+                url = url,\n+                issue = issue\n+            ));\n         }\n \n+        message.push_str(&format!(\" ({})\", feature));\n+\n         if let Some(unstable_reason) = &stab.unstable_reason {\n             let mut ids = cx.id_map.borrow_mut();\n             message = format!("}, {"sha": "462a696dee6ef3593ccd7df291ccbfd22e2111d1", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=e5e33ebd2ba12a78dbf6e2d5f154d5f71f28576c", "patch": "@@ -408,9 +408,7 @@ function defocusSearchBar() {\n                 break;\n \n             case \"?\":\n-                if (ev.shiftKey) {\n-                    displayHelp(true, ev);\n-                }\n+                displayHelp(true, ev);\n                 break;\n             }\n         }"}]}