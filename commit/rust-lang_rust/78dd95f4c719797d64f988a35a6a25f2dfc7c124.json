{"sha": "78dd95f4c719797d64f988a35a6a25f2dfc7c124", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZGQ5NWY0YzcxOTc5N2Q2NGY5ODhhMzVhNmEyNWYyZGZjN2MxMjQ=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-09-13T15:41:40Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:15:13Z"}, "message": "Generalized base::unsize_thin_ptr", "tree": {"sha": "fa8037fd8b881eaf0f3a8789c92eca74e1702f38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa8037fd8b881eaf0f3a8789c92eca74e1702f38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78dd95f4c719797d64f988a35a6a25f2dfc7c124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78dd95f4c719797d64f988a35a6a25f2dfc7c124", "html_url": "https://github.com/rust-lang/rust/commit/78dd95f4c719797d64f988a35a6a25f2dfc7c124", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78dd95f4c719797d64f988a35a6a25f2dfc7c124/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "034f69753b3e934789377cd6fa2b8c3f46364da0", "url": "https://api.github.com/repos/rust-lang/rust/commits/034f69753b3e934789377cd6fa2b8c3f46364da0", "html_url": "https://github.com/rust-lang/rust/commit/034f69753b3e934789377cd6fa2b8c3f46364da0"}], "stats": {"total": 102, "additions": 61, "deletions": 41}, "files": [{"sha": "34d09acdb45ac189bedd2c1a6e2709dafc085b9a", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/78dd95f4c719797d64f988a35a6a25f2dfc7c124/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78dd95f4c719797d64f988a35a6a25f2dfc7c124/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=78dd95f4c719797d64f988a35a6a25f2dfc7c124", "patch": "@@ -208,7 +208,7 @@ pub fn unsized_info<'tcx, Cx: CodegenMethods<'tcx>>(\n             let vtable_ptr = cx.layout_of(cx.tcx().mk_mut_ptr(target))\n                 .field(cx, abi::FAT_PTR_EXTRA);\n             cx.static_ptrcast(meth::get_vtable(cx, source, data.principal()),\n-                            cx.backend_type(vtable_ptr))\n+                            cx.backend_type(&vtable_ptr))\n         }\n         _ => bug!(\"unsized_info: invalid unsizing {:?} -> {:?}\",\n                   source,\n@@ -217,12 +217,12 @@ pub fn unsized_info<'tcx, Cx: CodegenMethods<'tcx>>(\n }\n \n /// Coerce `src` to `dst_ty`. `src_ty` must be a thin pointer.\n-pub fn unsize_thin_ptr(\n-    bx: &Builder<'a, 'll, 'tcx>,\n-    src: &'ll Value,\n+pub fn unsize_thin_ptr<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n+    bx: &Bx,\n+    src: Bx::Value,\n     src_ty: Ty<'tcx>,\n     dst_ty: Ty<'tcx>\n-) -> (&'ll Value, &'ll Value) {\n+) -> (Bx::Value, Bx::Value) {\n     debug!(\"unsize_thin_ptr: {:?} => {:?}\", src_ty, dst_ty);\n     match (&src_ty.sty, &dst_ty.sty) {\n         (&ty::Ref(_, a, _),\n@@ -232,13 +232,13 @@ pub fn unsize_thin_ptr(\n         (&ty::RawPtr(ty::TypeAndMut { ty: a, .. }),\n          &ty::RawPtr(ty::TypeAndMut { ty: b, .. })) => {\n             assert!(bx.cx().type_is_sized(a));\n-            let ptr_ty = bx.cx().type_ptr_to(bx.cx().layout_of(b).llvm_type(bx.cx()));\n+            let ptr_ty = bx.cx().type_ptr_to(bx.cx().backend_type(&bx.cx().layout_of(b)));\n             (bx.pointercast(src, ptr_ty), unsized_info(bx.cx(), a, b, None))\n         }\n         (&ty::Adt(def_a, _), &ty::Adt(def_b, _)) if def_a.is_box() && def_b.is_box() => {\n             let (a, b) = (src_ty.boxed_ty(), dst_ty.boxed_ty());\n             assert!(bx.cx().type_is_sized(a));\n-            let ptr_ty = bx.cx().type_ptr_to(bx.cx().layout_of(b).llvm_type(bx.cx()));\n+            let ptr_ty = bx.cx().type_ptr_to(bx.cx().backend_type(&bx.cx().layout_of(b)));\n             (bx.pointercast(src, ptr_ty), unsized_info(bx.cx(), a, b, None))\n         }\n         (&ty::Adt(def_a, _), &ty::Adt(def_b, _)) => {\n@@ -263,8 +263,8 @@ pub fn unsize_thin_ptr(\n             }\n             let (lldata, llextra) = result.unwrap();\n             // HACK(eddyb) have to bitcast pointers until LLVM removes pointee types.\n-            (bx.bitcast(lldata, dst_layout.scalar_pair_element_llvm_type(bx.cx(), 0, true)),\n-             bx.bitcast(llextra, dst_layout.scalar_pair_element_llvm_type(bx.cx(), 1, true)))\n+            (bx.bitcast(lldata, bx.cx().scalar_pair_element_backend_type(&dst_layout, 0, true)),\n+             bx.bitcast(llextra, bx.cx().scalar_pair_element_backend_type(&dst_layout, 1, true)))\n         }\n         _ => bug!(\"unsize_thin_ptr: called on bad types\"),\n     }"}, {"sha": "37abb1464d31ca070fade258a23c163993688814", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/78dd95f4c719797d64f988a35a6a25f2dfc7c124/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78dd95f4c719797d64f988a35a6a25f2dfc7c124/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=78dd95f4c719797d64f988a35a6a25f2dfc7c124", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use attributes;\n-use common;\n use llvm;\n use rustc::dep_graph::DepGraphSafe;\n use rustc::hir;\n@@ -746,31 +745,6 @@ impl<'b, 'tcx> CodegenCx<'b, 'tcx> {\n         llfn\n     }\n \n-    pub fn type_needs_drop(&self, ty: Ty<'tcx>) -> bool {\n-        common::type_needs_drop(self.tcx, ty)\n-    }\n-\n-    pub fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {\n-        common::type_is_sized(self.tcx, ty)\n-    }\n-\n-    pub fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool {\n-        common::type_is_freeze(self.tcx, ty)\n-    }\n-\n-    pub fn type_has_metadata(&self, ty: Ty<'tcx>) -> bool {\n-        use syntax_pos::DUMMY_SP;\n-        if ty.is_sized(self.tcx.at(DUMMY_SP), ty::ParamEnv::reveal_all()) {\n-            return false;\n-        }\n-\n-        let tail = self.tcx.struct_tail(ty);\n-        match tail.sty {\n-            ty::Foreign(..) => false,\n-            ty::Str | ty::Slice(..) | ty::Dynamic(..) => true,\n-            _ => bug!(\"unexpected unsized tail: {:?}\", tail.sty),\n-        }\n-    }\n }\n \n impl ty::layout::HasDataLayout for CodegenCx<'ll, 'tcx> {"}, {"sha": "dadb1390bc5ea1d97e359d2025d11dcfd71d2169", "filename": "src/librustc_codegen_llvm/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78dd95f4c719797d64f988a35a6a25f2dfc7c124/src%2Flibrustc_codegen_llvm%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78dd95f4c719797d64f988a35a6a25f2dfc7c124/src%2Flibrustc_codegen_llvm%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fglue.rs?ref=78dd95f4c719797d64f988a35a6a25f2dfc7c124", "patch": "@@ -20,7 +20,7 @@ use meth;\n use rustc::ty::layout::{LayoutOf, HasTyCtxt};\n use rustc::ty::{self, Ty};\n use value::Value;\n-use interfaces::{BuilderMethods, ConstMethods};\n+use interfaces::*;\n \n pub fn size_and_align_of_dst(\n     bx: &Builder<'_, 'll, 'tcx>,"}, {"sha": "463f7970e91d7014872d5a66c6ef9c2e1c6be9f2", "filename": "src/librustc_codegen_llvm/interfaces/type_.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/78dd95f4c719797d64f988a35a6a25f2dfc7c124/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78dd95f4c719797d64f988a35a6a25f2dfc7c124/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs?ref=78dd95f4c719797d64f988a35a6a25f2dfc7c124", "patch": "@@ -61,10 +61,21 @@ pub trait DerivedTypeMethods<'tcx>: Backend<'tcx> {\n     fn type_from_integer(&self, i: layout::Integer) -> Self::Type;\n     fn type_pointee_for_abi_align(&self, align: Align) -> Self::Type;\n     fn type_padding_filler(&self, size: Size, align: Align) -> Self::Type;\n+\n+    fn type_needs_drop(&self, ty: Ty<'tcx>) -> bool;\n+    fn type_is_sized(&self, ty: Ty<'tcx>) -> bool;\n+    fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool;\n+    fn type_has_metadata(&self, ty: Ty<'tcx>) -> bool;\n }\n \n pub trait LayoutTypeMethods<'tcx>: Backend<'tcx> {\n-    fn backend_type(&self, ty: TyLayout<'tcx>) -> Self::Type;\n+    fn backend_type(&self, ty: &TyLayout<'tcx>) -> Self::Type;\n+    fn scalar_pair_element_backend_type<'a>(\n+        &self,\n+        ty: &TyLayout<'tcx>,\n+        index: usize,\n+        immediate: bool\n+    ) -> Self::Type;\n }\n \n pub trait TypeMethods<'tcx>:"}, {"sha": "fd0e1db796c8587b57663538ef6c5d4012598165", "filename": "src/librustc_codegen_llvm/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78dd95f4c719797d64f988a35a6a25f2dfc7c124/src%2Flibrustc_codegen_llvm%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78dd95f4c719797d64f988a35a6a25f2dfc7c124/src%2Flibrustc_codegen_llvm%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fanalyze.rs?ref=78dd95f4c719797d64f988a35a6a25f2dfc7c124", "patch": "@@ -22,6 +22,7 @@ use rustc::ty::layout::LayoutOf;\n use type_of::LayoutLlvmExt;\n use super::FunctionCx;\n use value::Value;\n+use interfaces::*;\n \n pub fn non_ssa_locals(fx: &FunctionCx<'a, 'll, 'tcx, &'ll Value>) -> BitSet<mir::Local> {\n     let mir = fx.mir;"}, {"sha": "271a55ab1dc4d541cf31198358b60a459bf0945f", "filename": "src/librustc_codegen_llvm/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78dd95f4c719797d64f988a35a6a25f2dfc7c124/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78dd95f4c719797d64f988a35a6a25f2dfc7c124/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs?ref=78dd95f4c719797d64f988a35a6a25f2dfc7c124", "patch": "@@ -25,7 +25,7 @@ use type_::Type;\n use type_of::LayoutLlvmExt;\n use value::Value;\n \n-use interfaces::{BuilderMethods, ConstMethods, BaseTypeMethods, IntrinsicDeclarationMethods};\n+use interfaces::*;\n \n use super::{FunctionCx, LocalRef};\n use super::operand::{OperandRef, OperandValue};"}, {"sha": "55237e27d9e4bbab657f379c4532bceb18502dd6", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/78dd95f4c719797d64f988a35a6a25f2dfc7c124/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78dd95f4c719797d64f988a35a6a25f2dfc7c124/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=78dd95f4c719797d64f988a35a6a25f2dfc7c124", "patch": "@@ -20,9 +20,9 @@ use value::Value;\n \n \n use syntax::ast;\n-use rustc::ty::layout::{self, Align, Size};\n+use rustc::ty::layout::{self, Align, Size, HasTyCtxt};\n use rustc::util::nodemap::FxHashMap;\n-use rustc::ty::Ty;\n+use rustc::ty::{self, Ty};\n use rustc::ty::layout::TyLayout;\n use rustc_data_structures::small_c_str::SmallCStr;\n use common::{self, TypeKind};\n@@ -365,10 +365,44 @@ impl DerivedTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         assert_eq!(size % unit_size, 0);\n         self.type_array(self.type_from_integer(unit), size / unit_size)\n     }\n+\n+    fn type_needs_drop(&self, ty: Ty<'tcx>) -> bool {\n+        common::type_needs_drop(self.tcx(), ty)\n+    }\n+\n+    fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {\n+        common::type_is_sized(self.tcx(), ty)\n+    }\n+\n+    fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool {\n+        common::type_is_freeze(self.tcx(), ty)\n+    }\n+\n+    fn type_has_metadata(&self, ty: Ty<'tcx>) -> bool {\n+        use syntax_pos::DUMMY_SP;\n+        if ty.is_sized(self.tcx().at(DUMMY_SP), ty::ParamEnv::reveal_all()) {\n+            return false;\n+        }\n+\n+        let tail = self.tcx().struct_tail(ty);\n+        match tail.sty {\n+            ty::Foreign(..) => false,\n+            ty::Str | ty::Slice(..) | ty::Dynamic(..) => true,\n+            _ => bug!(\"unexpected unsized tail: {:?}\", tail.sty),\n+        }\n+    }\n }\n \n impl LayoutTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n-    fn backend_type(&self, ty: TyLayout<'tcx>) -> &'ll Type {\n+    fn backend_type(&self, ty: &TyLayout<'tcx>) -> &'ll Type {\n         ty.llvm_type(&self)\n     }\n+    fn scalar_pair_element_backend_type<'a>(\n+        &self,\n+        ty: &TyLayout<'tcx>,\n+        index: usize,\n+        immediate: bool\n+    ) -> &'ll Type {\n+        ty.scalar_pair_element_llvm_type(&self, index, immediate)\n+    }\n }"}]}