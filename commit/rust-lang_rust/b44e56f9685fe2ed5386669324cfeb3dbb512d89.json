{"sha": "b44e56f9685fe2ed5386669324cfeb3dbb512d89", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NGU1NmY5Njg1ZmUyZWQ1Mzg2NjY5MzI0Y2ZlYjNkYmI1MTJkODk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-06T22:38:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-06T22:38:42Z"}, "message": "Rollup merge of #84896 - estebank:issue-84772, r=jackh726\n\nHandle incorrect placement of parentheses in trait bounds more gracefully\n\nFix #84772.\n\nCC ``````@jonhoo``````", "tree": {"sha": "148dbfa9a10a8e4ab959067cb458c9d905eece1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/148dbfa9a10a8e4ab959067cb458c9d905eece1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b44e56f9685fe2ed5386669324cfeb3dbb512d89", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJglG/yCRBK7hj4Ov3rIwAA2xQIAD8aX7crXeejyMAPXcY3g+u6\nQG5tnX1lcPJ4n9ItW2qnUlvIEzoUPKQehMxMjdjFk9sWaA979eUvWbjRqbp6JrlH\ng6/es/ZJhW7nDbJZDM4RS+McsnNYuqQxngHnUQH4x6rAnppNALFgxK9Fvc5kgow2\norlm8fM/3FIqpa1sXXg+8B+j4eOqGjkqlVIoZkDn/7sQj7xYflctLtScfG7gLjFr\nDHzD1SSzGmpRr3bO13UDUBeGYRtgQXMUCUQmprLYnBVFzp91cAq7W8pNT3Lk6Wtf\nDBN/L4nGfULe4GR9f3NJ98vRUxuBkoEQMv74MsIklOvUasEWSXZikvEnVvnjVJE=\n=a1xi\n-----END PGP SIGNATURE-----\n", "payload": "tree 148dbfa9a10a8e4ab959067cb458c9d905eece1c\nparent 746f97e969eee79a0013aa94372047954511ff89\nparent 6b64202d5eebdaddcc246412a795ec32dac0f8f2\nauthor Dylan DPC <dylan.dpc@gmail.com> 1620340722 +0200\ncommitter GitHub <noreply@github.com> 1620340722 +0200\n\nRollup merge of #84896 - estebank:issue-84772, r=jackh726\n\nHandle incorrect placement of parentheses in trait bounds more gracefully\n\nFix #84772.\n\nCC ``````@jonhoo``````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b44e56f9685fe2ed5386669324cfeb3dbb512d89", "html_url": "https://github.com/rust-lang/rust/commit/b44e56f9685fe2ed5386669324cfeb3dbb512d89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b44e56f9685fe2ed5386669324cfeb3dbb512d89/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "746f97e969eee79a0013aa94372047954511ff89", "url": "https://api.github.com/repos/rust-lang/rust/commits/746f97e969eee79a0013aa94372047954511ff89", "html_url": "https://github.com/rust-lang/rust/commit/746f97e969eee79a0013aa94372047954511ff89"}, {"sha": "6b64202d5eebdaddcc246412a795ec32dac0f8f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b64202d5eebdaddcc246412a795ec32dac0f8f2", "html_url": "https://github.com/rust-lang/rust/commit/6b64202d5eebdaddcc246412a795ec32dac0f8f2"}], "stats": {"total": 133, "additions": 130, "deletions": 3}, "files": [{"sha": "d537741c749c5aa789e2bf6a8b314d2ca259c3ed", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b44e56f9685fe2ed5386669324cfeb3dbb512d89/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b44e56f9685fe2ed5386669324cfeb3dbb512d89/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=b44e56f9685fe2ed5386669324cfeb3dbb512d89", "patch": "@@ -470,7 +470,7 @@ impl<'a> Parser<'a> {\n     /// Is a `dyn B0 + ... + Bn` type allowed here?\n     fn is_explicit_dyn_type(&mut self) -> bool {\n         self.check_keyword(kw::Dyn)\n-            && (self.token.uninterpolated_span().rust_2018()\n+            && (!self.token.uninterpolated_span().rust_2015()\n                 || self.look_ahead(1, |t| {\n                     t.can_begin_bound() && !can_continue_type_after_non_fn_ident(t)\n                 }))\n@@ -539,7 +539,21 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, GenericBounds> {\n         let mut bounds = Vec::new();\n         let mut negative_bounds = Vec::new();\n-        while self.can_begin_bound() {\n+\n+        while self.can_begin_bound() || self.token.is_keyword(kw::Dyn) {\n+            if self.token.is_keyword(kw::Dyn) {\n+                // Account for `&dyn Trait + dyn Other`.\n+                self.struct_span_err(self.token.span, \"invalid `dyn` keyword\")\n+                    .help(\"`dyn` is only needed at the start of a trait `+`-separated list\")\n+                    .span_suggestion(\n+                        self.token.span,\n+                        \"remove this keyword\",\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n+                self.bump();\n+            }\n             match self.parse_generic_bound()? {\n                 Ok(bound) => bounds.push(bound),\n                 Err(neg_sp) => negative_bounds.push(neg_sp),\n@@ -721,7 +735,26 @@ impl<'a> Parser<'a> {\n         let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n         let path = self.parse_path(PathStyle::Type)?;\n         if has_parens {\n-            self.expect(&token::CloseDelim(token::Paren))?;\n+            if self.token.is_like_plus() {\n+                // Someone has written something like `&dyn (Trait + Other)`. The correct code\n+                // would be `&(dyn Trait + Other)`, but we don't have access to the appropriate\n+                // span to suggest that. When written as `&dyn Trait + Other`, an appropriate\n+                // suggestion is given.\n+                let bounds = vec![];\n+                self.parse_remaining_bounds(bounds, true)?;\n+                self.expect(&token::CloseDelim(token::Paren))?;\n+                let sp = vec![lo, self.prev_token.span];\n+                let sugg: Vec<_> = sp.iter().map(|sp| (*sp, String::new())).collect();\n+                self.struct_span_err(sp, \"incorrect braces around trait bounds\")\n+                    .multipart_suggestion(\n+                        \"remove the parentheses\",\n+                        sugg,\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n+            } else {\n+                self.expect(&token::CloseDelim(token::Paren))?;\n+            }\n         }\n \n         let modifier = modifiers.to_trait_bound_modifier();"}, {"sha": "650ab57226187a4c497221e76b5d27874e87cc23", "filename": "src/test/ui/parser/trait-object-delimiters.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b44e56f9685fe2ed5386669324cfeb3dbb512d89/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b44e56f9685fe2ed5386669324cfeb3dbb512d89/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.rs?ref=b44e56f9685fe2ed5386669324cfeb3dbb512d89", "patch": "@@ -0,0 +1,17 @@\n+// edition:2018\n+\n+fn foo1(_: &dyn Drop + AsRef<str>) {} //~ ERROR ambiguous `+` in a type\n+//~^ ERROR only auto traits can be used as additional traits in a trait object\n+\n+fn foo2(_: &dyn (Drop + AsRef<str>)) {} //~ ERROR incorrect braces around trait bounds\n+\n+fn foo3(_: &dyn {Drop + AsRef<str>}) {} //~ ERROR expected parameter name, found `{`\n+//~^ ERROR expected one of `!`, `(`, `)`, `,`, `?`, `for`, lifetime, or path, found `{`\n+//~| ERROR at least one trait is required for an object type\n+\n+fn foo4(_: &dyn <Drop + AsRef<str>>) {} //~ ERROR expected identifier, found `<`\n+\n+fn foo5(_: &(dyn Drop + dyn AsRef<str>)) {} //~ ERROR invalid `dyn` keyword\n+//~^ ERROR only auto traits can be used as additional traits in a trait object\n+\n+fn main() {}"}, {"sha": "18b1b24122ecf320d2a2cd9c48e6a36da76deb13", "filename": "src/test/ui/parser/trait-object-delimiters.stderr", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/b44e56f9685fe2ed5386669324cfeb3dbb512d89/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b44e56f9685fe2ed5386669324cfeb3dbb512d89/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr?ref=b44e56f9685fe2ed5386669324cfeb3dbb512d89", "patch": "@@ -0,0 +1,77 @@\n+error: ambiguous `+` in a type\n+  --> $DIR/trait-object-delimiters.rs:3:13\n+   |\n+LL | fn foo1(_: &dyn Drop + AsRef<str>) {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: use parentheses to disambiguate: `(dyn Drop + AsRef<str>)`\n+\n+error: incorrect braces around trait bounds\n+  --> $DIR/trait-object-delimiters.rs:6:17\n+   |\n+LL | fn foo2(_: &dyn (Drop + AsRef<str>)) {}\n+   |                 ^                 ^\n+   |\n+help: remove the parentheses\n+   |\n+LL | fn foo2(_: &dyn Drop + AsRef<str>) {}\n+   |                --               --\n+\n+error: expected parameter name, found `{`\n+  --> $DIR/trait-object-delimiters.rs:8:17\n+   |\n+LL | fn foo3(_: &dyn {Drop + AsRef<str>}) {}\n+   |                 ^ expected parameter name\n+\n+error: expected one of `!`, `(`, `)`, `,`, `?`, `for`, lifetime, or path, found `{`\n+  --> $DIR/trait-object-delimiters.rs:8:17\n+   |\n+LL | fn foo3(_: &dyn {Drop + AsRef<str>}) {}\n+   |                -^ expected one of 8 possible tokens\n+   |                |\n+   |                help: missing `,`\n+\n+error: expected identifier, found `<`\n+  --> $DIR/trait-object-delimiters.rs:12:17\n+   |\n+LL | fn foo4(_: &dyn <Drop + AsRef<str>>) {}\n+   |                 ^ expected identifier\n+\n+error: invalid `dyn` keyword\n+  --> $DIR/trait-object-delimiters.rs:14:25\n+   |\n+LL | fn foo5(_: &(dyn Drop + dyn AsRef<str>)) {}\n+   |                         ^^^ help: remove this keyword\n+   |\n+   = help: `dyn` is only needed at the start of a trait `+`-separated list\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-object-delimiters.rs:3:24\n+   |\n+LL | fn foo1(_: &dyn Drop + AsRef<str>) {}\n+   |                 ----   ^^^^^^^^^^ additional non-auto trait\n+   |                 |\n+   |                 first non-auto trait\n+   |\n+   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Drop + AsRef<str> {}`\n+   = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n+\n+error[E0224]: at least one trait is required for an object type\n+  --> $DIR/trait-object-delimiters.rs:8:13\n+   |\n+LL | fn foo3(_: &dyn {Drop + AsRef<str>}) {}\n+   |             ^^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-object-delimiters.rs:14:29\n+   |\n+LL | fn foo5(_: &(dyn Drop + dyn AsRef<str>)) {}\n+   |                  ----       ^^^^^^^^^^ additional non-auto trait\n+   |                  |\n+   |                  first non-auto trait\n+   |\n+   = help: consider creating a new trait with all of these as super-traits and using that trait here instead: `trait NewTrait: Drop + AsRef<str> {}`\n+   = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n+\n+error: aborting due to 9 previous errors\n+\n+Some errors have detailed explanations: E0224, E0225.\n+For more information about an error, try `rustc --explain E0224`."}]}