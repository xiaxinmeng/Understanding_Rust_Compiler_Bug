{"sha": "5b98c66593660cfa4ee4d39aabeaa97bb36eb75f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViOThjNjY1OTM2NjBjZmE0ZWU0ZDM5YWFiZWFhOTdiYjM2ZWI3NWY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T02:40:17Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:27Z"}, "message": "librustc: De-`@mut` the item variance map in the type context", "tree": {"sha": "d93a5955c3916fcdd5568a548ae076b20a3bb47b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d93a5955c3916fcdd5568a548ae076b20a3bb47b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b98c66593660cfa4ee4d39aabeaa97bb36eb75f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b98c66593660cfa4ee4d39aabeaa97bb36eb75f", "html_url": "https://github.com/rust-lang/rust/commit/5b98c66593660cfa4ee4d39aabeaa97bb36eb75f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b98c66593660cfa4ee4d39aabeaa97bb36eb75f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f5e57a5a93a868b5bd9485b9c9d45e997a78e41", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f5e57a5a93a868b5bd9485b9c9d45e997a78e41", "html_url": "https://github.com/rust-lang/rust/commit/7f5e57a5a93a868b5bd9485b9c9d45e997a78e41"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "957e94ac6f883c46d9278349bc7e60f2f460bc30", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b98c66593660cfa4ee4d39aabeaa97bb36eb75f/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b98c66593660cfa4ee4d39aabeaa97bb36eb75f/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=5b98c66593660cfa4ee4d39aabeaa97bb36eb75f", "patch": "@@ -321,7 +321,7 @@ struct ctxt_ {\n \n     // Maps from def-id of a type or region parameter to its\n     // (inferred) variance.\n-    item_variance_map: @mut HashMap<ast::DefId, @ItemVariances>,\n+    item_variance_map: RefCell<HashMap<ast::DefId, @ItemVariances>>,\n \n     // A mapping from the def ID of an enum or struct type to the def ID\n     // of the method that implements its destructor. If the type is not\n@@ -975,7 +975,7 @@ pub fn mk_ctxt(s: session::Session,\n             -> ctxt {\n     @ctxt_ {\n         named_region_map: named_region_map,\n-        item_variance_map: @mut HashMap::new(),\n+        item_variance_map: RefCell::new(HashMap::new()),\n         diag: s.diagnostic(),\n         interner: RefCell::new(HashMap::new()),\n         next_id: @mut primitives::LAST_PRIMITIVE_ID,\n@@ -4483,8 +4483,9 @@ pub fn visitor_object_ty(tcx: ctxt,\n }\n \n pub fn item_variances(tcx: ctxt, item_id: ast::DefId) -> @ItemVariances {\n+    let mut item_variance_map = tcx.item_variance_map.borrow_mut();\n     lookup_locally_or_in_crate_store(\n-        \"item_variance_map\", item_id, tcx.item_variance_map,\n+        \"item_variance_map\", item_id, item_variance_map.get(),\n         || @csearch::get_item_variances(tcx.cstore, item_id))\n }\n "}, {"sha": "3ae43d606617cf19ed685d6a31c0fea9822ddea2", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b98c66593660cfa4ee4d39aabeaa97bb36eb75f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b98c66593660cfa4ee4d39aabeaa97bb36eb75f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=5b98c66593660cfa4ee4d39aabeaa97bb36eb75f", "patch": "@@ -363,7 +363,10 @@ impl<'a> Visitor<()> for TermsContext<'a> {\n                 // \"invalid item id\" from \"item id with no\n                 // parameters\".\n                 if self.num_inferred() == inferreds_on_entry {\n-                    let newly_added = self.tcx.item_variance_map.insert(\n+                    let mut item_variance_map = self.tcx\n+                                                    .item_variance_map\n+                                                    .borrow_mut();\n+                    let newly_added = item_variance_map.get().insert(\n                         ast_util::local_def(item.id),\n                         self.empty_variances);\n                     assert!(newly_added);\n@@ -876,7 +879,6 @@ impl<'a> SolveContext<'a> {\n         // item id).\n \n         let tcx = self.terms_cx.tcx;\n-        let item_variance_map = tcx.item_variance_map;\n         let solutions = &self.solutions;\n         let inferred_infos = &self.terms_cx.inferred_infos;\n         let mut index = 0;\n@@ -919,8 +921,9 @@ impl<'a> SolveContext<'a> {\n                 tcx.sess.span_err(ast_map::node_span(tcx.items, item_id), found);\n             }\n \n-            let newly_added = item_variance_map.insert(item_def_id,\n-                                                       @item_variances);\n+            let mut item_variance_map = tcx.item_variance_map.borrow_mut();\n+            let newly_added = item_variance_map.get().insert(item_def_id,\n+                                                             @item_variances);\n             assert!(newly_added);\n         }\n     }"}]}