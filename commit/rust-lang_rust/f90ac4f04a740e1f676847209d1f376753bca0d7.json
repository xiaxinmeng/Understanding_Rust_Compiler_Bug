{"sha": "f90ac4f04a740e1f676847209d1f376753bca0d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MGFjNGYwNGE3NDBlMWY2NzY4NDcyMDlkMWYzNzY3NTNiY2EwZDc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-28T12:35:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-28T12:35:29Z"}, "message": "Rollup merge of #58717 - hellow554:nonzero_parse, r=oli-obk\n\nAdd FromStr impl for NonZero types\n\nThis is a WIP implementation because I do have some questions regarding the solution.\n\nSomebody should ping the lang team on this I guess.\nPlease see the annotations on the code for more details.\n\nCloses #58604", "tree": {"sha": "beb20e940c85cf0f5afb2bf6e896beb45cd44b05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beb20e940c85cf0f5afb2bf6e896beb45cd44b05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f90ac4f04a740e1f676847209d1f376753bca0d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcnL+RCRBK7hj4Ov3rIwAAdHIIAEsSf52KtbOGteW72lMi/LnN\nLVJ3jGtR0GYYToZsd9bUx2MqnFXPr80ByDKL0uYbm+QJit0cX9jAXNiHvWENHMjH\nYKyVI14xFOAQrnBnmsgX5AZj2LKGD0tSuK9Oh1ONZeXVBRRfVirqa7Fb9++Jo4o0\nU5qqcfYR3WClx6nng3PLeLGvcMHQ4miTepd/aRgeC8jvm973y4R4H3GUdRJSxXb8\n8ckBCufeb+kBAxNtLfa6PArxb3MIkDoyfGww9yJ74bssqaV8CzRbJ/iGknBOAyj9\n+1gxp/svn6/orPgKmPmG47A3glADLHRT68oTVE4sX7o5FlE0JF78us0kSgVGHkg=\n=jatB\n-----END PGP SIGNATURE-----\n", "payload": "tree beb20e940c85cf0f5afb2bf6e896beb45cd44b05\nparent 237bf3244fffef501cf37d4bda00e1fce3fcfb46\nparent 8f3e862797ecf83e89245d3f28532ab285c780ef\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553776529 +0100\ncommitter GitHub <noreply@github.com> 1553776529 +0100\n\nRollup merge of #58717 - hellow554:nonzero_parse, r=oli-obk\n\nAdd FromStr impl for NonZero types\n\nThis is a WIP implementation because I do have some questions regarding the solution.\n\nSomebody should ping the lang team on this I guess.\nPlease see the annotations on the code for more details.\n\nCloses #58604\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f90ac4f04a740e1f676847209d1f376753bca0d7", "html_url": "https://github.com/rust-lang/rust/commit/f90ac4f04a740e1f676847209d1f376753bca0d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f90ac4f04a740e1f676847209d1f376753bca0d7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237bf3244fffef501cf37d4bda00e1fce3fcfb46", "url": "https://api.github.com/repos/rust-lang/rust/commits/237bf3244fffef501cf37d4bda00e1fce3fcfb46", "html_url": "https://github.com/rust-lang/rust/commit/237bf3244fffef501cf37d4bda00e1fce3fcfb46"}, {"sha": "8f3e862797ecf83e89245d3f28532ab285c780ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3e862797ecf83e89245d3f28532ab285c780ef", "html_url": "https://github.com/rust-lang/rust/commit/8f3e862797ecf83e89245d3f28532ab285c780ef"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "01da5518868a1029c7ed294cf5a9b914051d6d73", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f90ac4f04a740e1f676847209d1f376753bca0d7/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90ac4f04a740e1f676847209d1f376753bca0d7/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=f90ac4f04a740e1f676847209d1f376753bca0d7", "patch": "@@ -112,6 +112,24 @@ nonzero_integers! {\n     #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroIsize(isize);\n }\n \n+macro_rules! from_str_radix_nzint_impl {\n+    ($($t:ty)*) => {$(\n+        #[stable(feature = \"nonzero_parse\", since = \"1.35.0\")]\n+        impl FromStr for $t {\n+            type Err = ParseIntError;\n+            fn from_str(src: &str) -> Result<Self, Self::Err> {\n+                Self::new(from_str_radix(src, 10)?)\n+                    .ok_or(ParseIntError {\n+                        kind: IntErrorKind::Zero\n+                    })\n+            }\n+        }\n+    )*}\n+}\n+\n+from_str_radix_nzint_impl! { NonZeroU8 NonZeroU16 NonZeroU32 NonZeroU64 NonZeroU128 NonZeroUsize\n+                             NonZeroI8 NonZeroI16 NonZeroI32 NonZeroI64 NonZeroI128 NonZeroIsize }\n+\n /// Provides intentionally-wrapped arithmetic on `T`.\n ///\n /// Operations like `+` on `u32` values is intended to never overflow,\n@@ -4768,6 +4786,11 @@ pub enum IntErrorKind {\n     Overflow,\n     /// Integer is too small to store in target integer type.\n     Underflow,\n+    /// Value was Zero\n+    ///\n+    /// This variant will be emitted when the parsing string has a value of zero, which\n+    /// would be illegal for non-zero types.\n+    Zero,\n }\n \n impl ParseIntError {\n@@ -4790,6 +4813,7 @@ impl ParseIntError {\n             IntErrorKind::InvalidDigit => \"invalid digit found in string\",\n             IntErrorKind::Overflow => \"number too large to fit in target type\",\n             IntErrorKind::Underflow => \"number too small to fit in target type\",\n+            IntErrorKind::Zero => \"number would be zero for non-zero type\",\n         }\n     }\n }"}, {"sha": "2ed25a341021b48bf923c7068761e8b157ea4929", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f90ac4f04a740e1f676847209d1f376753bca0d7/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90ac4f04a740e1f676847209d1f376753bca0d7/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=f90ac4f04a740e1f676847209d1f376753bca0d7", "patch": "@@ -31,6 +31,7 @@\n #![feature(slice_internals)]\n #![feature(slice_partition_dedup)]\n #![feature(copy_within)]\n+#![feature(int_error_matching)]\n \n extern crate core;\n extern crate test;"}, {"sha": "77e484601bc223c4542b24711c4f60acbf69df14", "filename": "src/libcore/tests/nonzero.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f90ac4f04a740e1f676847209d1f376753bca0d7/src%2Flibcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90ac4f04a740e1f676847209d1f376753bca0d7/src%2Flibcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnonzero.rs?ref=f90ac4f04a740e1f676847209d1f376753bca0d7", "patch": "@@ -1,6 +1,5 @@\n-use core::num::{NonZeroU32, NonZeroI32};\n-use core::option::Option;\n-use core::option::Option::{Some, None};\n+use core::num::{IntErrorKind, NonZeroI32, NonZeroI8, NonZeroU32, NonZeroU8};\n+use core::option::Option::{self, None, Some};\n use std::mem::size_of;\n \n #[test]\n@@ -126,3 +125,24 @@ fn test_from_signed_nonzero() {\n     let num: i32 = nz.into();\n     assert_eq!(num, 1i32);\n }\n+\n+#[test]\n+fn test_from_str() {\n+    assert_eq!(\"123\".parse::<NonZeroU8>(), Ok(NonZeroU8::new(123).unwrap()));\n+    assert_eq!(\n+        \"0\".parse::<NonZeroU8>().err().map(|e| e.kind().clone()),\n+        Some(IntErrorKind::Zero)\n+    );\n+    assert_eq!(\n+        \"-1\".parse::<NonZeroU8>().err().map(|e| e.kind().clone()),\n+        Some(IntErrorKind::InvalidDigit)\n+    );\n+    assert_eq!(\n+        \"-129\".parse::<NonZeroI8>().err().map(|e| e.kind().clone()),\n+        Some(IntErrorKind::Underflow)\n+    );\n+    assert_eq!(\n+        \"257\".parse::<NonZeroU8>().err().map(|e| e.kind().clone()),\n+        Some(IntErrorKind::Overflow)\n+    );\n+}"}, {"sha": "042a8c60cfaab1a8b6789d28ac134be284d8cb1c", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f90ac4f04a740e1f676847209d1f376753bca0d7/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f90ac4f04a740e1f676847209d1f376753bca0d7/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=f90ac4f04a740e1f676847209d1f376753bca0d7", "patch": "@@ -22,6 +22,7 @@ use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use rustc::ich::NodeIdHashingMode;\n+use rustc::mir::interpret::truncate;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc::ty::Instance;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n@@ -1368,7 +1369,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                             let value = (i.as_u32() as u128)\n                                 .wrapping_sub(niche_variants.start().as_u32() as u128)\n                                 .wrapping_add(niche_start);\n-                            let value = value & ((1u128 << niche.value.size(cx).bits()) - 1);\n+                            let value = truncate(value, niche.value.size(cx));\n                             Some(value as u64)\n                         };\n "}]}