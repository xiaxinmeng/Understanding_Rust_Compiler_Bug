{"sha": "fe0a415b4ba3310c2263f07e0253e2434310299c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMGE0MTViNGJhMzMxMGMyMjYzZjA3ZTAyNTNlMjQzNDMxMDI5OWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-23T12:27:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-23T12:27:38Z"}, "message": "Auto merge of #60152 - stepnivlk:visit_subpats-removal, r=varkor\n\nRemove `visit_subpats` parameter from `check_pat`\n\nThe core idea is to keep track of current ID directly in `EllipsisInclusiveRangePatterns` struct and early return in `check_pat` based on it.\n\nFixes https://github.com/rust-lang/rust/issues/60043.\n\nr? @varkor", "tree": {"sha": "93dc12449d4019f9af2781107e4e9377e6f8e31f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93dc12449d4019f9af2781107e4e9377e6f8e31f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe0a415b4ba3310c2263f07e0253e2434310299c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe0a415b4ba3310c2263f07e0253e2434310299c", "html_url": "https://github.com/rust-lang/rust/commit/fe0a415b4ba3310c2263f07e0253e2434310299c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe0a415b4ba3310c2263f07e0253e2434310299c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31f5d69ba4f4d78740190a08ea097b41b00d96cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/31f5d69ba4f4d78740190a08ea097b41b00d96cb", "html_url": "https://github.com/rust-lang/rust/commit/31f5d69ba4f4d78740190a08ea097b41b00d96cb"}, {"sha": "1dc13b5904cde9279b76909013cd40e1661fe8eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc13b5904cde9279b76909013cd40e1661fe8eb", "html_url": "https://github.com/rust-lang/rust/commit/1dc13b5904cde9279b76909013cd40e1661fe8eb"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "34bf4adffc6b805e4bf2b030ba8a2a917cf0874f", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe0a415b4ba3310c2263f07e0253e2434310299c/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe0a415b4ba3310c2263f07e0253e2434310299c/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=fe0a415b4ba3310c2263f07e0253e2434310299c", "patch": "@@ -1164,12 +1164,10 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_pat(&mut self, p: &'a ast::Pat) {\n-        let mut visit_subpats = true;\n-        run_early_pass!(self, check_pat, p, &mut visit_subpats);\n+        run_early_pass!(self, check_pat, p);\n         self.check_id(p.id);\n-        if visit_subpats {\n-            ast_visit::walk_pat(self, p);\n-        }\n+        ast_visit::walk_pat(self, p);\n+        run_early_pass!(self, check_pat_post, p);\n     }\n \n     fn visit_expr(&mut self, e: &'a ast::Expr) {"}, {"sha": "6613440ee7c9e52cbef0971c77f7646f35ab8b2c", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe0a415b4ba3310c2263f07e0253e2434310299c/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe0a415b4ba3310c2263f07e0253e2434310299c/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=fe0a415b4ba3310c2263f07e0253e2434310299c", "patch": "@@ -371,7 +371,8 @@ macro_rules! early_lint_methods {\n             fn check_block_post(a: &ast::Block);\n             fn check_stmt(a: &ast::Stmt);\n             fn check_arm(a: &ast::Arm);\n-            fn check_pat(a: &ast::Pat, b: &mut bool); // FIXME: &mut bool looks just broken\n+            fn check_pat(a: &ast::Pat);\n+            fn check_pat_post(a: &ast::Pat);\n             fn check_expr(a: &ast::Expr);\n             fn check_expr_post(a: &ast::Expr);\n             fn check_ty(a: &ast::Ty);"}, {"sha": "57bc44ee30cd96549c04feddc78cd36b2ab22aac", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fe0a415b4ba3310c2263f07e0253e2434310299c/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe0a415b4ba3310c2263f07e0253e2434310299c/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=fe0a415b4ba3310c2263f07e0253e2434310299c", "patch": "@@ -1285,10 +1285,29 @@ declare_lint! {\n     \"`...` range patterns are deprecated\"\n }\n \n-declare_lint_pass!(EllipsisInclusiveRangePatterns => [ELLIPSIS_INCLUSIVE_RANGE_PATTERNS]);\n+pub struct EllipsisInclusiveRangePatterns {\n+    /// If `Some(_)`, suppress all subsequent pattern\n+    /// warnings for better diagnostics.\n+    node_id: Option<ast::NodeId>,\n+}\n+\n+impl_lint_pass!(EllipsisInclusiveRangePatterns => [ELLIPSIS_INCLUSIVE_RANGE_PATTERNS]);\n+\n+impl EllipsisInclusiveRangePatterns {\n+    pub fn new() -> Self {\n+        Self {\n+            node_id: None,\n+        }\n+    }\n+}\n \n impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n-    fn check_pat(&mut self, cx: &EarlyContext<'_>, pat: &ast::Pat, visit_subpats: &mut bool) {\n+    fn check_pat(&mut self, cx: &EarlyContext<'_>, pat: &ast::Pat) {\n+        if self.node_id.is_some() {\n+            // Don't recursively warn about patterns inside range endpoints.\n+            return\n+        }\n+\n         use self::ast::{PatKind, RangeEnd, RangeSyntax::DotDotDot};\n \n         /// If `pat` is a `...` pattern, return the start and end of the range, as well as the span\n@@ -1311,7 +1330,7 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n             let msg = \"`...` range patterns are deprecated\";\n             let suggestion = \"use `..=` for an inclusive range\";\n             if parenthesise {\n-                *visit_subpats = false;\n+                self.node_id = Some(pat.id);\n                 let mut err = cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, pat.span, msg);\n                 err.span_suggestion(\n                     pat.span,\n@@ -1332,6 +1351,14 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n             };\n         }\n     }\n+\n+    fn check_pat_post(&mut self, _cx: &EarlyContext<'_>, pat: &ast::Pat) {\n+        if let Some(node_id) = self.node_id {\n+            if pat.id == node_id {\n+                self.node_id = None\n+            }\n+        }\n+    }\n }\n \n declare_lint! {"}, {"sha": "68ea219561962280e30a1aa994bd90c3ab4615ab", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe0a415b4ba3310c2263f07e0253e2434310299c/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe0a415b4ba3310c2263f07e0253e2434310299c/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=fe0a415b4ba3310c2263f07e0253e2434310299c", "patch": "@@ -94,7 +94,7 @@ macro_rules! early_lint_passes {\n             UnusedImportBraces: UnusedImportBraces,\n             UnsafeCode: UnsafeCode,\n             AnonymousParameters: AnonymousParameters,\n-            EllipsisInclusiveRangePatterns: EllipsisInclusiveRangePatterns,\n+            EllipsisInclusiveRangePatterns: EllipsisInclusiveRangePatterns::new(),\n             NonCamelCaseTypes: NonCamelCaseTypes,\n             DeprecatedAttr: DeprecatedAttr::new(),\n         ]);"}, {"sha": "043bc62ddce602dc98c70b96d599b1a56ea6408d", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe0a415b4ba3310c2263f07e0253e2434310299c/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe0a415b4ba3310c2263f07e0253e2434310299c/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=fe0a415b4ba3310c2263f07e0253e2434310299c", "patch": "@@ -407,7 +407,7 @@ impl EarlyLintPass for UnusedParens {\n         self.check_unused_parens_expr(cx, &value, msg, followed_by_block);\n     }\n \n-    fn check_pat(&mut self, cx: &EarlyContext<'_>, p: &ast::Pat, _: &mut bool) {\n+    fn check_pat(&mut self, cx: &EarlyContext<'_>, p: &ast::Pat) {\n         use ast::PatKind::{Paren, Range};\n         // The lint visitor will visit each subpattern of `p`. We do not want to lint any range\n         // pattern no matter where it occurs in the pattern. For something like `&(a..=b)`, there"}]}