{"sha": "e5fde968dbbb87e5721ff5da91a49cab88b90b91", "node_id": "C_kwDOAAsO6NoAKGU1ZmRlOTY4ZGJiYjg3ZTU3MjFmZjVkYTkxYTQ5Y2FiODhiOTBiOTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-14T09:31:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-14T09:31:07Z"}, "message": "Rollup merge of #105523 - estebank:suggest-collect-vec, r=compiler-errors\n\nSuggest `collect`ing into `Vec<_>`\n\nFix #105510.", "tree": {"sha": "f4231abd6871b3db90878f69a953115e36fcc2d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4231abd6871b3db90878f69a953115e36fcc2d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5fde968dbbb87e5721ff5da91a49cab88b90b91", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjmZfbCRBK7hj4Ov3rIwAA8rAIAF0hMcjIx6m4ACnZCkjJTFXz\no6UcWraNUdkcSjImumQpNqP+1yYEe13Pfxdeg5jx+UhP5cN5wXGovi9po5d8LajT\nyoXaTNQpA7GN5Mtd65YPkCuuQgbJQDkfcoWIbzuRQBrbiMVqNM2dsIodR2HIksqb\nZAgl4xy4hxtZToz5BD0zES86jPtGE+GA7mVLF8WSZSTlOXxoCavWe8WdInh4eIAc\na04Rrk7VPG3euuNiSdS5Z5IDkKmxDCTVPm/wRQZwSEuynfRya/Yid4rGrLp11x9k\nuLDUlZVcYYUp4sktRffpQgNDq096lgZhFqTUbLqFksbACsvMIcrV5C0lgoIcwT4=\n=AcVC\n-----END PGP SIGNATURE-----\n", "payload": "tree f4231abd6871b3db90878f69a953115e36fcc2d7\nparent c8fd654d7ce2ab5a4945cead8a947f923b98f5a5\nparent 40a62758a7db892a47cb59de85612e8a5b9ab267\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671010267 +0100\ncommitter GitHub <noreply@github.com> 1671010267 +0100\n\nRollup merge of #105523 - estebank:suggest-collect-vec, r=compiler-errors\n\nSuggest `collect`ing into `Vec<_>`\n\nFix #105510.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5fde968dbbb87e5721ff5da91a49cab88b90b91", "html_url": "https://github.com/rust-lang/rust/commit/e5fde968dbbb87e5721ff5da91a49cab88b90b91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5fde968dbbb87e5721ff5da91a49cab88b90b91/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8fd654d7ce2ab5a4945cead8a947f923b98f5a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8fd654d7ce2ab5a4945cead8a947f923b98f5a5", "html_url": "https://github.com/rust-lang/rust/commit/c8fd654d7ce2ab5a4945cead8a947f923b98f5a5"}, {"sha": "40a62758a7db892a47cb59de85612e8a5b9ab267", "url": "https://api.github.com/repos/rust-lang/rust/commits/40a62758a7db892a47cb59de85612e8a5b9ab267", "html_url": "https://github.com/rust-lang/rust/commit/40a62758a7db892a47cb59de85612e8a5b9ab267"}], "stats": {"total": 319, "additions": 168, "deletions": 151}, "files": [{"sha": "a4c36b4c9cd59db580517b60f8d887ca2bcd40eb", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 66, "deletions": 38, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter, Print, Printer};\n use rustc_middle::ty::{self, DefIdTree, InferConst};\n use rustc_middle::ty::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{IsSuggestable, Ty, TyCtxt, TypeckResults};\n-use rustc_span::symbol::{kw, Ident};\n+use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{BytePos, Span};\n use std::borrow::Cow;\n use std::iter;\n@@ -79,7 +79,7 @@ impl InferenceDiagnosticsData {\n \n     fn where_x_is_kind(&self, in_type: Ty<'_>) -> &'static str {\n         if in_type.is_ty_infer() {\n-            \"empty\"\n+            \"\"\n         } else if self.name == \"_\" {\n             // FIXME: Consider specializing this message if there is a single `_`\n             // in the type.\n@@ -183,13 +183,24 @@ fn fmt_printer<'a, 'tcx>(infcx: &'a InferCtxt<'tcx>, ns: Namespace) -> FmtPrinte\n     printer\n }\n \n-fn ty_to_string<'tcx>(infcx: &InferCtxt<'tcx>, ty: Ty<'tcx>) -> String {\n+fn ty_to_string<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n+    ty: Ty<'tcx>,\n+    called_method_def_id: Option<DefId>,\n+) -> String {\n     let printer = fmt_printer(infcx, Namespace::TypeNS);\n     let ty = infcx.resolve_vars_if_possible(ty);\n-    match ty.kind() {\n+    match (ty.kind(), called_method_def_id) {\n         // We don't want the regular output for `fn`s because it includes its path in\n         // invalid pseudo-syntax, we want the `fn`-pointer output instead.\n-        ty::FnDef(..) => ty.fn_sig(infcx.tcx).print(printer).unwrap().into_buffer(),\n+        (ty::FnDef(..), _) => ty.fn_sig(infcx.tcx).print(printer).unwrap().into_buffer(),\n+        (_, Some(def_id))\n+            if ty.is_ty_infer()\n+                && infcx.tcx.get_diagnostic_item(sym::iterator_collect_fn) == Some(def_id) =>\n+        {\n+            \"Vec<_>\".to_string()\n+        }\n+        _ if ty.is_ty_infer() => \"/* Type */\".to_string(),\n         // FIXME: The same thing for closures, but this only works when the closure\n         // does not capture anything.\n         //\n@@ -213,15 +224,15 @@ fn closure_as_fn_str<'tcx>(infcx: &InferCtxt<'tcx>, ty: Ty<'tcx>) -> String {\n         .map(|args| {\n             args.tuple_fields()\n                 .iter()\n-                .map(|arg| ty_to_string(infcx, arg))\n+                .map(|arg| ty_to_string(infcx, arg, None))\n                 .collect::<Vec<_>>()\n                 .join(\", \")\n         })\n         .unwrap_or_default();\n     let ret = if fn_sig.output().skip_binder().is_unit() {\n         String::new()\n     } else {\n-        format!(\" -> {}\", ty_to_string(infcx, fn_sig.output().skip_binder()))\n+        format!(\" -> {}\", ty_to_string(infcx, fn_sig.output().skip_binder(), None))\n     };\n     format!(\"fn({}){}\", args, ret)\n }\n@@ -368,6 +379,7 @@ impl<'tcx> InferCtxt<'tcx> {\n }\n \n impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n+    #[instrument(level = \"debug\", skip(self, error_code))]\n     pub fn emit_inference_failure_err(\n         &self,\n         body_id: Option<hir::BodyId>,\n@@ -406,7 +418,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         let mut infer_subdiags = Vec::new();\n         let mut multi_suggestions = Vec::new();\n         match kind {\n-            InferSourceKind::LetBinding { insert_span, pattern_name, ty } => {\n+            InferSourceKind::LetBinding { insert_span, pattern_name, ty, def_id } => {\n                 infer_subdiags.push(SourceKindSubdiag::LetLike {\n                     span: insert_span,\n                     name: pattern_name.map(|name| name.to_string()).unwrap_or_else(String::new),\n@@ -415,7 +427,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     prefix: arg_data.kind.try_get_prefix().unwrap_or_default(),\n                     arg_name: arg_data.name,\n                     kind: if pattern_name.is_some() { \"with_pattern\" } else { \"other\" },\n-                    type_name: ty_to_string(self, ty),\n+                    type_name: ty_to_string(self, ty, def_id),\n                 });\n             }\n             InferSourceKind::ClosureArg { insert_span, ty } => {\n@@ -427,7 +439,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     prefix: arg_data.kind.try_get_prefix().unwrap_or_default(),\n                     arg_name: arg_data.name,\n                     kind: \"closure\",\n-                    type_name: ty_to_string(self, ty),\n+                    type_name: ty_to_string(self, ty, None),\n                 });\n             }\n             InferSourceKind::GenericArg {\n@@ -456,33 +468,39 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     parent_name,\n                 });\n \n-                let args = fmt_printer(self, Namespace::TypeNS)\n-                    .comma_sep(generic_args.iter().copied().map(|arg| {\n-                        if arg.is_suggestable(self.tcx, true) {\n-                            return arg;\n-                        }\n+                let args = if self.infcx.tcx.get_diagnostic_item(sym::iterator_collect_fn)\n+                    == Some(generics_def_id)\n+                {\n+                    \"Vec<_>\".to_string()\n+                } else {\n+                    fmt_printer(self, Namespace::TypeNS)\n+                        .comma_sep(generic_args.iter().copied().map(|arg| {\n+                            if arg.is_suggestable(self.tcx, true) {\n+                                return arg;\n+                            }\n \n-                        match arg.unpack() {\n-                            GenericArgKind::Lifetime(_) => bug!(\"unexpected lifetime\"),\n-                            GenericArgKind::Type(_) => self\n-                                .next_ty_var(TypeVariableOrigin {\n-                                    span: rustc_span::DUMMY_SP,\n-                                    kind: TypeVariableOriginKind::MiscVariable,\n-                                })\n-                                .into(),\n-                            GenericArgKind::Const(arg) => self\n-                                .next_const_var(\n-                                    arg.ty(),\n-                                    ConstVariableOrigin {\n+                            match arg.unpack() {\n+                                GenericArgKind::Lifetime(_) => bug!(\"unexpected lifetime\"),\n+                                GenericArgKind::Type(_) => self\n+                                    .next_ty_var(TypeVariableOrigin {\n                                         span: rustc_span::DUMMY_SP,\n-                                        kind: ConstVariableOriginKind::MiscVariable,\n-                                    },\n-                                )\n-                                .into(),\n-                        }\n-                    }))\n-                    .unwrap()\n-                    .into_buffer();\n+                                        kind: TypeVariableOriginKind::MiscVariable,\n+                                    })\n+                                    .into(),\n+                                GenericArgKind::Const(arg) => self\n+                                    .next_const_var(\n+                                        arg.ty(),\n+                                        ConstVariableOrigin {\n+                                            span: rustc_span::DUMMY_SP,\n+                                            kind: ConstVariableOriginKind::MiscVariable,\n+                                        },\n+                                    )\n+                                    .into(),\n+                            }\n+                        }))\n+                        .unwrap()\n+                        .into_buffer()\n+                };\n \n                 if !have_turbofish {\n                     infer_subdiags.push(SourceKindSubdiag::GenericSuggestion {\n@@ -520,7 +538,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 ));\n             }\n             InferSourceKind::ClosureReturn { ty, data, should_wrap_expr } => {\n-                let ty_info = ty_to_string(self, ty);\n+                let ty_info = ty_to_string(self, ty, None);\n                 multi_suggestions.push(SourceKindMultiSuggestion::new_closure_return(\n                     ty_info,\n                     data,\n@@ -608,6 +626,7 @@ enum InferSourceKind<'tcx> {\n         insert_span: Span,\n         pattern_name: Option<Ident>,\n         ty: Ty<'tcx>,\n+        def_id: Option<DefId>,\n     },\n     ClosureArg {\n         insert_span: Span,\n@@ -662,7 +681,7 @@ impl<'tcx> InferSourceKind<'tcx> {\n                 if ty.is_closure() {\n                     (\"closure\", closure_as_fn_str(infcx, ty))\n                 } else if !ty.is_ty_infer() {\n-                    (\"normal\", ty_to_string(infcx, ty))\n+                    (\"normal\", ty_to_string(infcx, ty, None))\n                 } else {\n                     (\"other\", String::new())\n                 }\n@@ -788,10 +807,18 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n     /// Uses `fn source_cost` to determine whether this inference source is preferable to\n     /// previous sources. We generally prefer earlier sources.\n     #[instrument(level = \"debug\", skip(self))]\n-    fn update_infer_source(&mut self, new_source: InferSource<'tcx>) {\n+    fn update_infer_source(&mut self, mut new_source: InferSource<'tcx>) {\n         let cost = self.source_cost(&new_source) + self.attempt;\n         debug!(?cost);\n         self.attempt += 1;\n+        if let Some(InferSource { kind: InferSourceKind::GenericArg { def_id: did, ..}, .. }) = self.infer_source\n+            && let InferSourceKind::LetBinding { ref ty, ref mut def_id, ..} = new_source.kind\n+            && ty.is_ty_infer()\n+        {\n+            // Customize the output so we talk about `let x: Vec<_> = iter.collect();` instead of\n+            // `let x: _ = iter.collect();`, as this is a very common case.\n+            *def_id = Some(did);\n+        }\n         if cost < self.infer_source_cost {\n             self.infer_source_cost = cost;\n             self.infer_source = Some(new_source);\n@@ -1092,6 +1119,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n                                 insert_span: local.pat.span.shrink_to_hi(),\n                                 pattern_name: local.pat.simple_ident(),\n                                 ty,\n+                                def_id: None,\n                             },\n                         })\n                     }"}, {"sha": "ace095736c92fd8a1a2e2b39c91b4c08b1ed6115", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -827,6 +827,7 @@ symbols! {\n         item_like_imports,\n         iter,\n         iter_repeat,\n+        iterator_collect_fn,\n         kcfi,\n         keyword,\n         kind,"}, {"sha": "c68da3e24a19002fd02bd4549dbe2b44516fcb23", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 23, "deletions": 56, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -42,7 +42,7 @@ use rustc_middle::ty::{\n };\n use rustc_session::Limit;\n use rustc_span::def_id::LOCAL_CRATE;\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::sym;\n use rustc_span::{ExpnKind, Span, DUMMY_SP};\n use std::fmt;\n use std::iter;\n@@ -980,6 +980,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 trait_ref,\n                                 obligation.cause.body_id,\n                                 &mut err,\n+                                true,\n                             ) {\n                                 // This is *almost* equivalent to\n                                 // `obligation.cause.code().peel_derives()`, but it gives us the\n@@ -1015,6 +1016,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                         trait_ref,\n                                         obligation.cause.body_id,\n                                         &mut err,\n+                                        true,\n                                     );\n                                 }\n                             }\n@@ -1434,6 +1436,7 @@ trait InferCtxtPrivExt<'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         body_id: hir::HirId,\n         err: &mut Diagnostic,\n+        other: bool,\n     ) -> bool;\n \n     /// Gets the parent trait chain start\n@@ -1888,7 +1891,9 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         body_id: hir::HirId,\n         err: &mut Diagnostic,\n+        other: bool,\n     ) -> bool {\n+        let other = if other { \"other \" } else { \"\" };\n         let report = |mut candidates: Vec<TraitRef<'tcx>>, err: &mut Diagnostic| {\n             candidates.sort();\n             candidates.dedup();\n@@ -1939,7 +1944,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             candidates.dedup();\n             let end = if candidates.len() <= 9 { candidates.len() } else { 8 };\n             err.help(&format!(\n-                \"the following other types implement trait `{}`:{}{}\",\n+                \"the following {other}types implement trait `{}`:{}{}\",\n                 trait_ref.print_only_trait_path(),\n                 candidates[..end].join(\"\"),\n                 if len > 9 { format!(\"\\nand {} others\", len - 8) } else { String::new() }\n@@ -2180,14 +2185,26 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             trait_ref.skip_binder().substs.types().any(|t| !t.is_ty_infer());\n                         // It doesn't make sense to talk about applicable impls if there are more\n                         // than a handful of them.\n-                        if impls.len() > 1 && impls.len() < 5 && has_non_region_infer {\n+                        if impls.len() > 1 && impls.len() < 10 && has_non_region_infer {\n                             self.annotate_source_of_ambiguity(&mut err, &impls, predicate);\n                         } else {\n                             if self.tainted_by_errors().is_some() {\n                                 err.cancel();\n                                 return;\n                             }\n                             err.note(&format!(\"cannot satisfy `{}`\", predicate));\n+                            let impl_candidates = self.find_similar_impl_candidates(\n+                                predicate.to_opt_poly_trait_pred().unwrap(),\n+                            );\n+                            if impl_candidates.len() < 10 {\n+                                self.report_similar_impl_candidates(\n+                                    impl_candidates,\n+                                    trait_ref,\n+                                    body_id.map(|id| id.hir_id).unwrap_or(obligation.cause.body_id),\n+                                    &mut err,\n+                                    false,\n+                                );\n+                            }\n                         }\n                     }\n                     _ => {\n@@ -2199,60 +2216,10 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     }\n                 }\n \n-                if let ObligationCauseCode::ItemObligation(def_id) | ObligationCauseCode::ExprItemObligation(def_id, ..) = *obligation.cause.code() {\n-                    self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());\n-                } else if let Ok(snippet) = &self.tcx.sess.source_map().span_to_snippet(span)\n-                    && let ObligationCauseCode::BindingObligation(def_id, _) | ObligationCauseCode::ExprBindingObligation(def_id, ..)\n-                        = *obligation.cause.code()\n+                if let ObligationCauseCode::ItemObligation(def_id)\n+                | ObligationCauseCode::ExprItemObligation(def_id, ..) = *obligation.cause.code()\n                 {\n-                    let generics = self.tcx.generics_of(def_id);\n-                    if generics.params.iter().any(|p| p.name != kw::SelfUpper)\n-                        && !snippet.ends_with('>')\n-                        && !generics.has_impl_trait()\n-                        && !self.tcx.is_fn_trait(def_id)\n-                    {\n-                        // FIXME: To avoid spurious suggestions in functions where type arguments\n-                        // where already supplied, we check the snippet to make sure it doesn't\n-                        // end with a turbofish. Ideally we would have access to a `PathSegment`\n-                        // instead. Otherwise we would produce the following output:\n-                        //\n-                        // error[E0283]: type annotations needed\n-                        //   --> $DIR/issue-54954.rs:3:24\n-                        //    |\n-                        // LL | const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n-                        //    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-                        //    |                        |\n-                        //    |                        cannot infer type\n-                        //    |                        help: consider specifying the type argument\n-                        //    |                        in the function call:\n-                        //    |                        `Tt::const_val::<[i8; 123]>::<T>`\n-                        // ...\n-                        // LL |     const fn const_val<T: Sized>() -> usize {\n-                        //    |                        - required by this bound in `Tt::const_val`\n-                        //    |\n-                        //    = note: cannot satisfy `_: Tt`\n-\n-                        // Clear any more general suggestions in favor of our specific one\n-                        err.clear_suggestions();\n-\n-                        err.span_suggestion_verbose(\n-                            span.shrink_to_hi(),\n-                            &format!(\n-                                \"consider specifying the type argument{} in the function call\",\n-                                pluralize!(generics.params.len()),\n-                            ),\n-                            format!(\n-                                \"::<{}>\",\n-                                generics\n-                                    .params\n-                                    .iter()\n-                                    .map(|p| p.name.to_string())\n-                                    .collect::<Vec<String>>()\n-                                    .join(\", \")\n-                            ),\n-                            Applicability::HasPlaceholders,\n-                        );\n-                    }\n+                    self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());\n                 }\n \n                 if let (Some(body_id), Some(ty::subst::GenericArgKind::Type(_))) ="}, {"sha": "1cdee992137daebebe8cafa38c4786400d46e9fe", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -1829,6 +1829,7 @@ pub trait Iterator {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use = \"if you really need to exhaust the iterator, consider `.for_each(drop)` instead\"]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"iterator_collect_fn\")]\n     fn collect<B: FromIterator<Self::Item>>(self) -> B\n     where\n         Self: Sized,"}, {"sha": "c2a509a196344b910131329e9e49d6de0971d92b", "filename": "src/test/ui/array-slice-vec/infer_array_len.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Farray-slice-vec%2Finfer_array_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Farray-slice-vec%2Finfer_array_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Finfer_array_len.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -6,8 +6,8 @@ LL |     let [_, _] = a.into();\n    |\n help: consider giving this pattern a type\n    |\n-LL |     let [_, _]: _ = a.into();\n-   |               +++\n+LL |     let [_, _]: /* Type */ = a.into();\n+   |               ++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "7a04ed7381e66d198123edeacbee33379f1eb7dc", "filename": "src/test/ui/closure-expected-type/expect-two-infer-vars-supply-ty-with-bound-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -6,8 +6,8 @@ LL |     with_closure(|x: u32, y| {});\n    |\n help: consider giving this closure parameter an explicit type\n    |\n-LL |     with_closure(|x: u32, y: _| {});\n-   |                            +++\n+LL |     with_closure(|x: u32, y: /* Type */| {});\n+   |                            ++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "9ba24c7a886958ab32b9d2ddfae01774d4438ea0", "filename": "src/test/ui/closures/issue-52437.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -12,8 +12,8 @@ LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n    |\n help: consider giving this closure parameter an explicit type\n    |\n-LL |     [(); &(&'static: loop { |x: _| {}; }) as *const _ as usize]\n-   |                               +++\n+LL |     [(); &(&'static: loop { |x: /* Type */| {}; }) as *const _ as usize]\n+   |                               ++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "13ea4a295afd75dbc4ee43c746c528e9b6c4ea5b", "filename": "src/test/ui/const-generics/generic_arg_infer/issue-91614.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fissue-91614.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -5,6 +5,12 @@ LL |     let y = Mask::<_, _>::splat(false);\n    |         ^   ------------------- type must be known at this point\n    |\n    = note: cannot satisfy `_: MaskElement`\n+   = help: the following types implement trait `MaskElement`:\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n note: required by a bound in `Mask::<T, LANES>::splat`\n   --> $SRC_DIR/core/src/../../portable-simd/crates/core_simd/src/masks.rs:LL:COL\n help: consider giving `y` an explicit type, where the type for type parameter `T` is specified"}, {"sha": "e0444042614bb683f4a6d0cd8c213b8d4f95977a", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-72787.min.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -41,6 +41,7 @@ LL |     IsLessOrEqual<I, 8>: True,\n    |                          ^^^^\n    |\n    = note: cannot satisfy `IsLessOrEqual<I, 8>: True`\n+   = help: the trait `True` is implemented for `IsLessOrEqual<LHS, RHS>`\n \n error[E0283]: type annotations needed: cannot satisfy `IsLessOrEqual<I, 8>: True`\n   --> $DIR/issue-72787.rs:21:26\n@@ -49,6 +50,7 @@ LL |     IsLessOrEqual<I, 8>: True,\n    |                          ^^^^\n    |\n    = note: cannot satisfy `IsLessOrEqual<I, 8>: True`\n+   = help: the trait `True` is implemented for `IsLessOrEqual<LHS, RHS>`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "7491fdc8a693e413a79937c04443cdad93df9995", "filename": "src/test/ui/const-generics/issues/issue-83249.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -6,8 +6,8 @@ LL |     let _ = foo([0; 1]);\n    |\n help: consider giving this pattern a type\n    |\n-LL |     let _: _ = foo([0; 1]);\n-   |          +++\n+LL |     let _: /* Type */ = foo([0; 1]);\n+   |          ++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "892d3a81f27f9543e5b87663e64dcb3e2894cb21", "filename": "src/test/ui/error-codes/E0282.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Ferror-codes%2FE0282.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Ferror-codes%2FE0282.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0282.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -6,8 +6,8 @@ LL |     let x = \"hello\".chars().rev().collect();\n    |\n help: consider giving `x` an explicit type\n    |\n-LL |     let x: _ = \"hello\".chars().rev().collect();\n-   |          +++\n+LL |     let x: Vec<_> = \"hello\".chars().rev().collect();\n+   |          ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "fa4b91cacef7261c169b3692128daa38199f88af", "filename": "src/test/ui/error-codes/E0401.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -59,7 +59,7 @@ note: required by a bound in `bfnr`\n    |\n LL |     fn bfnr<U, V: Baz<U>, W: Fn()>(y: T) {\n    |                              ^^^^ required by this bound in `bfnr`\n-help: consider specifying the type arguments in the function call\n+help: consider specifying the generic arguments\n    |\n LL |     bfnr::<U, V, W>(x);\n    |         +++++++++++"}, {"sha": "7592418fdfd62f412eeef998debec2ea78919c30", "filename": "src/test/ui/impl-trait/issues/issue-86719.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -20,8 +20,8 @@ LL |         |_| true\n    |\n help: consider giving this closure parameter an explicit type\n    |\n-LL |         |_: _| true\n-   |           +++\n+LL |         |_: /* Type */| true\n+   |           ++++++++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9be18286480113cb04682887824884706c221faf", "filename": "src/test/ui/inference/erase-type-params-in-label.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -10,10 +10,10 @@ note: required by a bound in `foo`\n    |\n LL | fn foo<T, K, W: Default, Z: Default>(t: T, k: K) -> Foo<T, K, W, Z> {\n    |                 ^^^^^^^ required by this bound in `foo`\n-help: consider specifying the type arguments in the function call\n+help: consider giving `foo` an explicit type, where the type for type parameter `W` is specified\n    |\n-LL |     let foo = foo::<T, K, W, Z>(1, \"\");\n-   |                  ++++++++++++++\n+LL |     let foo: Foo<i32, &str, W, Z> = foo(1, \"\");\n+   |            ++++++++++++++++++++++\n \n error[E0283]: type annotations needed for `Bar<i32, &str, Z>`\n   --> $DIR/erase-type-params-in-label.rs:5:9\n@@ -27,10 +27,10 @@ note: required by a bound in `bar`\n    |\n LL | fn bar<T, K, Z: Default>(t: T, k: K) -> Bar<T, K, Z> {\n    |                 ^^^^^^^ required by this bound in `bar`\n-help: consider specifying the type arguments in the function call\n+help: consider giving `bar` an explicit type, where the type for type parameter `Z` is specified\n    |\n-LL |     let bar = bar::<T, K, Z>(1, \"\");\n-   |                  +++++++++++\n+LL |     let bar: Bar<i32, &str, Z> = bar(1, \"\");\n+   |            +++++++++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8eda71ec09bd3bf1410fb293eb00232808ea7508", "filename": "src/test/ui/inference/issue-72690.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -32,8 +32,8 @@ LL |     |x| String::from(\"x\".as_ref());\n    |\n help: consider giving this closure parameter an explicit type\n    |\n-LL |     |x: _| String::from(\"x\".as_ref());\n-   |       +++\n+LL |     |x: /* Type */| String::from(\"x\".as_ref());\n+   |       ++++++++++++\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:12:26"}, {"sha": "5e0589eed435d0240aefb3f4eddf4f34506f326e", "filename": "src/test/ui/issues/issue-18159.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fissues%2Fissue-18159.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fissues%2Fissue-18159.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18159.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -6,8 +6,8 @@ LL |     let x;\n    |\n help: consider giving `x` an explicit type\n    |\n-LL |     let x: _;\n-   |          +++\n+LL |     let x: /* Type */;\n+   |          ++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "c75038b6169c0a227995a7c9de27ff581ca6d42a", "filename": "src/test/ui/issues/issue-2151.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fissues%2Fissue-2151.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fissues%2Fissue-2151.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2151.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -8,8 +8,8 @@ LL |     x.clone();\n    |\n help: consider giving `x` an explicit type\n    |\n-LL |     let x: _ = panic!();\n-   |          +++\n+LL |     let x: /* Type */ = panic!();\n+   |          ++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "0e73a51faed9ac8bf07d4e299f465ab11f114fa3", "filename": "src/test/ui/issues/issue-24036.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -19,8 +19,8 @@ LL |         1 => |c| c + 1,\n    |\n help: consider giving this closure parameter an explicit type\n    |\n-LL |         1 => |c: _| c + 1,\n-   |                +++\n+LL |         1 => |c: /* Type */| c + 1,\n+   |                ++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fe2631f9474205a617c9398f0cfb5709aa8875f4", "filename": "src/test/ui/lazy-type-alias-impl-trait/branches3.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -6,8 +6,8 @@ LL |         |s| s.len()\n    |\n help: consider giving this closure parameter an explicit type\n    |\n-LL |         |s: _| s.len()\n-   |           +++\n+LL |         |s: /* Type */| s.len()\n+   |           ++++++++++++\n \n error[E0282]: type annotations needed\n   --> $DIR/branches3.rs:15:10\n@@ -17,8 +17,8 @@ LL |         |s| s.len()\n    |\n help: consider giving this closure parameter an explicit type\n    |\n-LL |         |s: _| s.len()\n-   |           +++\n+LL |         |s: /* Type */| s.len()\n+   |           ++++++++++++\n \n error[E0282]: type annotations needed\n   --> $DIR/branches3.rs:23:10\n@@ -28,8 +28,8 @@ LL |         |s| s.len()\n    |\n help: consider giving this closure parameter an explicit type\n    |\n-LL |         |s: _| s.len()\n-   |           +++\n+LL |         |s: /* Type */| s.len()\n+   |           ++++++++++++\n \n error[E0282]: type annotations needed\n   --> $DIR/branches3.rs:30:10\n@@ -39,8 +39,8 @@ LL |         |s| s.len()\n    |\n help: consider giving this closure parameter an explicit type\n    |\n-LL |         |s: _| s.len()\n-   |           +++\n+LL |         |s: /* Type */| s.len()\n+   |           ++++++++++++\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a332c6547b8390c36268abff095edfc39bbf8ee4", "filename": "src/test/ui/lifetimes/issue-34979.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -5,6 +5,7 @@ LL |     &'a (): Foo,\n    |             ^^^\n    |\n    = note: cannot satisfy `&'a (): Foo`\n+   = help: the trait `Foo` is implemented for `&'a T`\n \n error: aborting due to previous error\n "}, {"sha": "e3b501b2fd558c42ad720ba709aac0abf2d327d1", "filename": "src/test/ui/match/match-unresolved-one-arm.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fmatch%2Fmatch-unresolved-one-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fmatch%2Fmatch-unresolved-one-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-unresolved-one-arm.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -6,8 +6,8 @@ LL |     let x = match () {\n    |\n help: consider giving `x` an explicit type\n    |\n-LL |     let x: _ = match () {\n-   |          +++\n+LL |     let x: /* Type */ = match () {\n+   |          ++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "da369d33397fc0c5df6f2b6739a727b920d9e86c", "filename": "src/test/ui/pattern/pat-tuple-bad-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -9,8 +9,8 @@ LL |         (..) => {}\n    |\n help: consider giving `x` an explicit type\n    |\n-LL |     let x: _;\n-   |          +++\n+LL |     let x: /* Type */;\n+   |          ++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/pat-tuple-bad-type.rs:10:9"}, {"sha": "beba7def96f5236034d546819979f3e0f4b7eb17", "filename": "src/test/ui/pattern/rest-pat-semantic-disallowed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -193,8 +193,8 @@ LL |     let x @ ..;\n    |\n help: consider giving this pattern a type\n    |\n-LL |     let x @ ..: _;\n-   |               +++\n+LL |     let x @ ..: /* Type */;\n+   |               ++++++++++++\n \n error: aborting due to 23 previous errors\n "}, {"sha": "42b43f825d10c28711b7f3f450da977f855124fe", "filename": "src/test/ui/resolve/issue-85348.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fresolve%2Fissue-85348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fresolve%2Fissue-85348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-85348.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -21,8 +21,8 @@ LL |         let mut N;\n    |\n help: consider giving `N` an explicit type\n    |\n-LL |         let mut N: _;\n-   |                  +++\n+LL |         let mut N: /* Type */;\n+   |                  ++++++++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f6efbe40bc23457047427cfc5a90cb9af723d3f6", "filename": "src/test/ui/span/method-and-field-eager-resolution.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -9,8 +9,8 @@ LL |     x.0;\n    |\n help: consider giving `x` an explicit type\n    |\n-LL |     let mut x: _ = Default::default();\n-   |              +++\n+LL |     let mut x: /* Type */ = Default::default();\n+   |              ++++++++++++\n \n error[E0282]: type annotations needed\n   --> $DIR/method-and-field-eager-resolution.rs:11:9\n@@ -23,8 +23,8 @@ LL |     x[0];\n    |\n help: consider giving `x` an explicit type\n    |\n-LL |     let mut x: _ = Default::default();\n-   |              +++\n+LL |     let mut x: /* Type */ = Default::default();\n+   |              ++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0b57a8212bdc63495ca6cb6ee4b0a08d0056b067", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -43,7 +43,15 @@ LL |     let ips: Vec<_> = (0..100_000).map(|_| u32::from(0u32.into())).collect(\n    |                                            |\n    |                                            required by a bound introduced by this call\n    |\n-   = note: cannot satisfy `u32: From<_>`\n+   = note: multiple `impl`s satisfying `u32: From<_>` found in the following crates: `core`, `std`:\n+           - impl From<Ipv4Addr> for u32;\n+           - impl From<NonZeroU32> for u32;\n+           - impl From<bool> for u32;\n+           - impl From<char> for u32;\n+           - impl From<u16> for u32;\n+           - impl From<u8> for u32;\n+           - impl<T> From<!> for T;\n+           - impl<T> From<T> for T;\n help: try using a fully qualified path to specify the expected types\n    |\n LL |     let ips: Vec<_> = (0..100_000).map(|_| u32::from(<u32 as Into<T>>::into(0u32))).collect();"}, {"sha": "930708f9ad80c7d35ed8a153a869331f826a831e", "filename": "src/test/ui/traits/issue-85735.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -5,6 +5,9 @@ LL |     T: FnMut(&'a ()),\n    |        ^^^^^^^^^^^^^\n    |\n    = note: cannot satisfy `T: FnMut<(&'a (),)>`\n+   = help: the following types implement trait `FnMut<Args>`:\n+             &F\n+             &mut F\n \n error: aborting due to previous error\n "}, {"sha": "9cc15f14a991d5516050b277133921024cfbd0cd", "filename": "src/test/ui/type-alias-impl-trait/closures_in_branches.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -6,8 +6,8 @@ LL |         |x| x.len()\n    |\n help: consider giving this closure parameter an explicit type\n    |\n-LL |         |x: _| x.len()\n-   |           +++\n+LL |         |x: /* Type */| x.len()\n+   |           ++++++++++++\n \n error[E0282]: type annotations needed\n   --> $DIR/closures_in_branches.rs:21:10\n@@ -17,8 +17,8 @@ LL |         |x| x.len()\n    |\n help: consider giving this closure parameter an explicit type\n    |\n-LL |         |x: _| x.len()\n-   |           +++\n+LL |         |x: /* Type */| x.len()\n+   |           ++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "87bba3166be6a3cde426e54f1b4f57c8023bd791", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -10,7 +10,7 @@ note: required by a bound in `foo`\n    |\n LL | fn foo<T: Into<String>>(x: i32) {}\n    |           ^^^^^^^^^^^^ required by this bound in `foo`\n-help: consider specifying the type argument in the function call\n+help: consider specifying the generic argument\n    |\n LL |     foo::<T>(42);\n    |        +++++"}, {"sha": "e5e29aabf374b03d7609c70f75b12fd2dd40322c", "filename": "src/test/ui/type/type-check/unknown_type_for_closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -12,8 +12,8 @@ LL |     let x = |_| {};\n    |\n help: consider giving this closure parameter an explicit type\n    |\n-LL |     let x = |_: _| {};\n-   |               +++\n+LL |     let x = |_: /* Type */| {};\n+   |               ++++++++++++\n \n error[E0282]: type annotations needed\n   --> $DIR/unknown_type_for_closure.rs:10:14"}, {"sha": "1aed1dbe4babd21662ce83308a7bcdc0f1e66983", "filename": "src/test/ui/type/type-path-err-node-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Ftype%2Ftype-path-err-node-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5fde968dbbb87e5721ff5da91a49cab88b90b91/src%2Ftest%2Fui%2Ftype%2Ftype-path-err-node-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-path-err-node-types.stderr?ref=e5fde968dbbb87e5721ff5da91a49cab88b90b91", "patch": "@@ -30,8 +30,8 @@ LL |     let _ = |a, b: _| -> _ { 0 };\n    |\n help: consider giving this closure parameter an explicit type\n    |\n-LL |     let _ = |a: _, b: _| -> _ { 0 };\n-   |               +++\n+LL |     let _ = |a: /* Type */, b: _| -> _ { 0 };\n+   |               ++++++++++++\n \n error: aborting due to 5 previous errors\n "}]}