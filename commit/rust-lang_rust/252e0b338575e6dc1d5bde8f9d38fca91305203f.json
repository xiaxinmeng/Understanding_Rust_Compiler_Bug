{"sha": "252e0b338575e6dc1d5bde8f9d38fca91305203f", "node_id": "C_kwDOAAsO6NoAKDI1MmUwYjMzODU3NWU2ZGMxZDViZGU4ZjlkMzhmY2E5MTMwNTIwM2Y", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-03-07T10:01:26Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-03-09T08:29:32Z"}, "message": "feat/refactor: improve errors in case of ident with number at start", "tree": {"sha": "9d56eba98f9bd1186e58e2c9810903046be5a95f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d56eba98f9bd1186e58e2c9810903046be5a95f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/252e0b338575e6dc1d5bde8f9d38fca91305203f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEINUdoc4Vb1yVx04IZ6vxb7Ds2HAFAmQJmO4ACgkQZ6vxb7Ds\n2HAx4Q//eTU2uh/dhoqic3pVOsxtdZC2gXvZ9HGwf5URf+MXZ/uEMYrokD2T6VN/\n+zZDkH5BEz6ROuW/W8BlrOJjFUN2907zNjRk6TR+eNkQ3Qx/9IMW3C5CvYIOZ3B0\nXXBs1jisygVIoE+ZnfAxWJv1KSnUZZyI9TaRrXjqn17UMCKNrw9HoWOoK476wKHI\n1L8J4hZ/+SGvHlhgTy6RQv8eY6Rh3ZB44BiZ5LvKs2AVRzRk8PlXOG1TVH2jvOwf\napOhMomH78KpJPuPXsUr+eaiNrXElTqOD+5w5ehEqWnhAYtfqZMfWXn0saWc23z5\nHqi9MJdfzZH1zpxvcOo0TP2g+zE/EDFvYMtA10qBQ/nr9Kkx/PGa8wpIvDScbOvV\nqsG4/uFV5/7snpuI2fQfYxAhuU0x9JwARrJqsWJcCAXMYJCDZjlSqAiMyBFwldz4\n/hWo6UQMJ3A+bajw142QRIQ97QCLXkJPd2Q4dJYqgNvIdOd7AQz48BepJjip0Tw9\nCsS9lUe9X88IiCQ65vubpdxihXukdg96ZyKLs4CWjI5Gnc3u4Or3HaWNkod0GJve\nTKWPS2bAvZshUuCN2Lln1xee/BpxI4CPw0lQ0D2wUPGgXQzaeiF7LtxQCXUgn7ER\ni8Dx98RxnCRrXd8hVLNqvbQWHHWX5+dUJPWiYxboXNJkeDEts9s=\n=SCoA\n-----END PGP SIGNATURE-----", "payload": "tree 9d56eba98f9bd1186e58e2c9810903046be5a95f\nparent 8824994ccd7efcc00ad03dee0c69d66c4161eea7\nauthor Ezra Shaw <ezrasure@outlook.com> 1678183286 +1300\ncommitter Ezra Shaw <ezrasure@outlook.com> 1678350572 +1300\n\nfeat/refactor: improve errors in case of ident with number at start\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/252e0b338575e6dc1d5bde8f9d38fca91305203f", "html_url": "https://github.com/rust-lang/rust/commit/252e0b338575e6dc1d5bde8f9d38fca91305203f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/252e0b338575e6dc1d5bde8f9d38fca91305203f/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8824994ccd7efcc00ad03dee0c69d66c4161eea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8824994ccd7efcc00ad03dee0c69d66c4161eea7", "html_url": "https://github.com/rust-lang/rust/commit/8824994ccd7efcc00ad03dee0c69d66c4161eea7"}], "stats": {"total": 113, "additions": 68, "deletions": 45}, "files": [{"sha": "5c7dc1e2abf91f67f9df2a96fe9d9c14b8046013", "filename": "compiler/rustc_parse/locales/en-US.ftl", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/252e0b338575e6dc1d5bde8f9d38fca91305203f/compiler%2Frustc_parse%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/252e0b338575e6dc1d5bde8f9d38fca91305203f/compiler%2Frustc_parse%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Flocales%2Fen-US.ftl?ref=252e0b338575e6dc1d5bde8f9d38fca91305203f", "patch": "@@ -412,8 +412,7 @@ parse_fn_ptr_with_generics = function pointer types may not have generic paramet\n         *[false] a\n     } `for` parameter list\n \n-parse_invalid_identifier_with_leading_number = expected identifier, found number literal\n-    .label = identifiers cannot start with a number\n+parse_invalid_identifier_with_leading_number = identifiers cannot start with a number\n \n parse_maybe_fn_typo_with_impl = you might have meant to write `impl` instead of `fn`\n     .suggestion = replace `fn` with `impl` here"}, {"sha": "63e5bc5051326fdab2ec67486d052ff24c8f6af5", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/252e0b338575e6dc1d5bde8f9d38fca91305203f/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252e0b338575e6dc1d5bde8f9d38fca91305203f/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=252e0b338575e6dc1d5bde8f9d38fca91305203f", "patch": "@@ -939,6 +939,7 @@ pub(crate) struct ExpectedIdentifier {\n     pub token: Token,\n     pub suggest_raw: Option<SuggEscapeToUseAsIdentifier>,\n     pub suggest_remove_comma: Option<SuggRemoveComma>,\n+    pub help_cannot_start_number: Option<HelpIdentifierStartsWithNumber>,\n }\n \n impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for ExpectedIdentifier {\n@@ -975,10 +976,18 @@ impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for ExpectedIdentifier {\n             sugg.add_to_diagnostic(&mut diag);\n         }\n \n+        if let Some(help) = self.help_cannot_start_number {\n+            help.add_to_diagnostic(&mut diag);\n+        }\n+\n         diag\n     }\n }\n \n+#[derive(Subdiagnostic)]\n+#[help(parse_invalid_identifier_with_leading_number)]\n+pub(crate) struct HelpIdentifierStartsWithNumber;\n+\n pub(crate) struct ExpectedSemi {\n     pub span: Span,\n     pub token: Token,\n@@ -1207,14 +1216,6 @@ pub(crate) struct SelfParamNotFirst {\n     pub span: Span,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(parse_invalid_identifier_with_leading_number)]\n-pub(crate) struct InvalidIdentiferStartsWithNumber {\n-    #[primary_span]\n-    #[label]\n-    pub span: Span,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(parse_const_generic_without_braces)]\n pub(crate) struct ConstGenericWithoutBraces {"}, {"sha": "5b12bcc182222dd735b890faf67b4133f19f6030", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/252e0b338575e6dc1d5bde8f9d38fca91305203f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252e0b338575e6dc1d5bde8f9d38fca91305203f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=252e0b338575e6dc1d5bde8f9d38fca91305203f", "patch": "@@ -8,14 +8,14 @@ use crate::errors::{\n     ComparisonOperatorsCannotBeChained, ComparisonOperatorsCannotBeChainedSugg,\n     ConstGenericWithoutBraces, ConstGenericWithoutBracesSugg, DocCommentOnParamType,\n     DoubleColonInBound, ExpectedIdentifier, ExpectedSemi, ExpectedSemiSugg,\n-    GenericParamsWithoutAngleBrackets, GenericParamsWithoutAngleBracketsSugg, InInTypo,\n-    IncorrectAwait, IncorrectSemicolon, IncorrectUseOfAwait, ParenthesesInForHead,\n-    ParenthesesInForHeadSugg, PatternMethodParamWithoutBody, QuestionMarkInType,\n-    QuestionMarkInTypeSugg, SelfParamNotFirst, StructLiteralBodyWithoutPath,\n-    StructLiteralBodyWithoutPathSugg, StructLiteralNeedingParens, StructLiteralNeedingParensSugg,\n-    SuggEscapeToUseAsIdentifier, SuggRemoveComma, UnexpectedConstInGenericParam,\n-    UnexpectedConstParamDeclaration, UnexpectedConstParamDeclarationSugg, UnmatchedAngleBrackets,\n-    UseEqInstead,\n+    GenericParamsWithoutAngleBrackets, GenericParamsWithoutAngleBracketsSugg,\n+    HelpIdentifierStartsWithNumber, InInTypo, IncorrectAwait, IncorrectSemicolon,\n+    IncorrectUseOfAwait, ParenthesesInForHead, ParenthesesInForHeadSugg,\n+    PatternMethodParamWithoutBody, QuestionMarkInType, QuestionMarkInTypeSugg, SelfParamNotFirst,\n+    StructLiteralBodyWithoutPath, StructLiteralBodyWithoutPathSugg, StructLiteralNeedingParens,\n+    StructLiteralNeedingParensSugg, SuggEscapeToUseAsIdentifier, SuggRemoveComma,\n+    UnexpectedConstInGenericParam, UnexpectedConstParamDeclaration,\n+    UnexpectedConstParamDeclarationSugg, UnmatchedAngleBrackets, UseEqInstead,\n };\n \n use crate::fluent_generated as fluent;\n@@ -280,6 +280,7 @@ impl<'a> Parser<'a> {\n             TokenKind::CloseDelim(Delimiter::Brace),\n             TokenKind::CloseDelim(Delimiter::Parenthesis),\n         ];\n+\n         let suggest_raw = match self.token.ident() {\n             Some((ident, false))\n                 if ident.is_raw_guess()\n@@ -295,18 +296,19 @@ impl<'a> Parser<'a> {\n             _ => None,\n         };\n \n-        let suggest_remove_comma =\n-            if self.token == token::Comma && self.look_ahead(1, |t| t.is_ident()) {\n-                Some(SuggRemoveComma { span: self.token.span })\n-            } else {\n-                None\n-            };\n+        let suggest_remove_comma = (self.token == token::Comma\n+            && self.look_ahead(1, |t| t.is_ident()))\n+        .then_some(SuggRemoveComma { span: self.token.span });\n+\n+        let help_cannot_start_number =\n+            self.is_lit_bad_ident().then_some(HelpIdentifierStartsWithNumber);\n \n         let err = ExpectedIdentifier {\n             span: self.token.span,\n             token: self.token.clone(),\n             suggest_raw,\n             suggest_remove_comma,\n+            help_cannot_start_number,\n         };\n         let mut err = err.into_diagnostic(&self.sess.span_diagnostic);\n \n@@ -365,6 +367,17 @@ impl<'a> Parser<'a> {\n         err\n     }\n \n+    /// Checks if the current token is a integer or float literal and looks like\n+    /// it could be a invalid identifier with digits at the start.\n+    pub(super) fn is_lit_bad_ident(&mut self) -> bool {\n+        matches!(self.token.uninterpolate().kind, token::Literal(Lit { kind: token::LitKind::Integer | token::LitKind::Float, .. })\n+            // ensure that the integer literal is followed by a *invalid*\n+            // suffix: this is how we know that it is a identifier with an\n+            // invalid beginning.\n+            if rustc_ast::MetaItemLit::from_token(&self.token).is_none()\n+        )\n+    }\n+\n     pub(super) fn expected_one_of_not_found(\n         &mut self,\n         edible: &[TokenKind],"}, {"sha": "fc9f1d1330a72038bc81a031740119d5ba9a6a23", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/252e0b338575e6dc1d5bde8f9d38fca91305203f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252e0b338575e6dc1d5bde8f9d38fca91305203f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=252e0b338575e6dc1d5bde8f9d38fca91305203f", "patch": "@@ -348,6 +348,10 @@ impl<'a> Parser<'a> {\n             lo = self.token.span;\n         }\n \n+        if self.is_lit_bad_ident() {\n+            return Err(self.expected_ident_found());\n+        }\n+\n         let pat = if self.check(&token::BinOp(token::And)) || self.token.kind == token::AndAnd {\n             self.parse_pat_deref(expected)?\n         } else if self.check(&token::OpenDelim(Delimiter::Parenthesis)) {"}, {"sha": "fbe5b88c49eaa42ddaa5001031cbc3e832ea12f4", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/252e0b338575e6dc1d5bde8f9d38fca91305203f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252e0b338575e6dc1d5bde8f9d38fca91305203f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=252e0b338575e6dc1d5bde8f9d38fca91305203f", "patch": "@@ -273,7 +273,6 @@ impl<'a> Parser<'a> {\n             self.bump();\n         }\n \n-        self.report_invalid_identifier_error()?;\n         let (pat, colon) =\n             self.parse_pat_before_ty(None, RecoverComma::Yes, PatternLocation::LetBinding)?;\n \n@@ -366,17 +365,6 @@ impl<'a> Parser<'a> {\n         Ok(P(ast::Local { ty, pat, kind, id: DUMMY_NODE_ID, span: lo.to(hi), attrs, tokens: None }))\n     }\n \n-    /// report error for `let 1x = 123`\n-    pub fn report_invalid_identifier_error(&mut self) -> PResult<'a, ()> {\n-        if let token::Literal(lit) = self.token.uninterpolate().kind &&\n-            rustc_ast::MetaItemLit::from_token(&self.token).is_none() &&\n-            (lit.kind == token::LitKind::Integer || lit.kind == token::LitKind::Float) &&\n-            self.look_ahead(1, |t| matches!(t.kind, token::Eq) || matches!(t.kind, token::Colon ) ) {\n-                return Err(self.sess.create_err(errors::InvalidIdentiferStartsWithNumber { span: self.token.span }));\n-        }\n-        Ok(())\n-    }\n-\n     fn check_let_else_init_bool_expr(&self, init: &ast::Expr) {\n         if let ast::ExprKind::Binary(op, ..) = init.kind {\n             if op.node.lazy() {"}, {"sha": "12537482e0ff68993427cee940e62c608f609373", "filename": "tests/ui/parser/integer-literal-start-ident.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252e0b338575e6dc1d5bde8f9d38fca91305203f/tests%2Fui%2Fparser%2Finteger-literal-start-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252e0b338575e6dc1d5bde8f9d38fca91305203f/tests%2Fui%2Fparser%2Finteger-literal-start-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Finteger-literal-start-ident.rs?ref=252e0b338575e6dc1d5bde8f9d38fca91305203f", "patch": "@@ -0,0 +1,2 @@\n+fn 1main() {}\n+//~^ ERROR expected identifier, found `1main`"}, {"sha": "51c37a0d24c3cdd6de163f65b1149c1ba8c79af8", "filename": "tests/ui/parser/integer-literal-start-ident.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/252e0b338575e6dc1d5bde8f9d38fca91305203f/tests%2Fui%2Fparser%2Finteger-literal-start-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252e0b338575e6dc1d5bde8f9d38fca91305203f/tests%2Fui%2Fparser%2Finteger-literal-start-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Finteger-literal-start-ident.stderr?ref=252e0b338575e6dc1d5bde8f9d38fca91305203f", "patch": "@@ -0,0 +1,10 @@\n+error: expected identifier, found `1main`\n+  --> $DIR/integer-literal-start-ident.rs:1:4\n+   |\n+LL | fn 1main() {}\n+   |    ^^^^^ expected identifier\n+   |\n+   = help: identifiers cannot start with a number\n+\n+error: aborting due to previous error\n+"}, {"sha": "86988c8cd21dac9316beddc0df464280f1b5c66c", "filename": "tests/ui/parser/issues/issue-104088.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/252e0b338575e6dc1d5bde8f9d38fca91305203f/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252e0b338575e6dc1d5bde8f9d38fca91305203f/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.rs?ref=252e0b338575e6dc1d5bde8f9d38fca91305203f", "patch": "@@ -4,12 +4,12 @@ fn test() {\n \n fn test_2() {\n     let 1x = 123;\n-    //~^ ERROR expected identifier, found number literal\n+    //~^ ERROR expected identifier, found `1x`\n }\n \n fn test_3() {\n     let 2x: i32 = 123;\n-    //~^ ERROR expected identifier, found number literal\n+    //~^ ERROR expected identifier, found `2x`\n }\n \n fn test_4() {\n@@ -20,7 +20,7 @@ fn test_4() {\n \n fn test_5() {\n     let 23name = 123;\n-    //~^ ERROR expected identifier, found number literal\n+    //~^ ERROR expected identifier, found `23name`\n }\n \n fn main() {}"}, {"sha": "6511a313149f44268a9374650f15c1c401d0e15e", "filename": "tests/ui/parser/issues/issue-104088.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/252e0b338575e6dc1d5bde8f9d38fca91305203f/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252e0b338575e6dc1d5bde8f9d38fca91305203f/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.stderr?ref=252e0b338575e6dc1d5bde8f9d38fca91305203f", "patch": "@@ -1,20 +1,26 @@\n-error: expected identifier, found number literal\n+error: expected identifier, found `1x`\n   --> $DIR/issue-104088.rs:6:9\n    |\n LL |     let 1x = 123;\n-   |         ^^ identifiers cannot start with a number\n+   |         ^^ expected identifier\n+   |\n+   = help: identifiers cannot start with a number\n \n-error: expected identifier, found number literal\n+error: expected identifier, found `2x`\n   --> $DIR/issue-104088.rs:11:9\n    |\n LL |     let 2x: i32 = 123;\n-   |         ^^ identifiers cannot start with a number\n+   |         ^^ expected identifier\n+   |\n+   = help: identifiers cannot start with a number\n \n-error: expected identifier, found number literal\n+error: expected identifier, found `23name`\n   --> $DIR/issue-104088.rs:22:9\n    |\n LL |     let 23name = 123;\n-   |         ^^^^^^ identifiers cannot start with a number\n+   |         ^^^^^^ expected identifier\n+   |\n+   = help: identifiers cannot start with a number\n \n error[E0308]: mismatched types\n   --> $DIR/issue-104088.rs:16:12"}]}