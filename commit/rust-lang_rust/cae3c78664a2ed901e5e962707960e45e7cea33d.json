{"sha": "cae3c78664a2ed901e5e962707960e45e7cea33d", "node_id": "C_kwDOAAsO6NoAKGNhZTNjNzg2NjRhMmVkOTAxZTVlOTYyNzA3OTYwZTQ1ZTdjZWEzM2Q", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-06-05T09:12:31Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-06-05T09:12:31Z"}, "message": "Rename `visit_generic_param{_slice => s}`", "tree": {"sha": "1a5f31f38e6ed0aff580516c130bec7639d83c2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a5f31f38e6ed0aff580516c130bec7639d83c2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cae3c78664a2ed901e5e962707960e45e7cea33d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cae3c78664a2ed901e5e962707960e45e7cea33d", "html_url": "https://github.com/rust-lang/rust/commit/cae3c78664a2ed901e5e962707960e45e7cea33d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cae3c78664a2ed901e5e962707960e45e7cea33d/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152", "url": "https://api.github.com/repos/rust-lang/rust/commits/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152", "html_url": "https://github.com/rust-lang/rust/commit/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "771eeee965bb8417aade92a5976d9f62c3adedb0", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cae3c78664a2ed901e5e962707960e45e7cea33d/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae3c78664a2ed901e5e962707960e45e7cea33d/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=cae3c78664a2ed901e5e962707960e45e7cea33d", "patch": "@@ -631,7 +631,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                         span,\n                     },\n                     |this| {\n-                        this.visit_generic_param_slice(&bare_fn.generic_params, false);\n+                        this.visit_generic_params(&bare_fn.generic_params, false);\n                         this.with_lifetime_rib(\n                             LifetimeRibKind::AnonymousPassThrough(ty.id, false),\n                             |this| walk_list!(this, visit_param, &bare_fn.decl.inputs),\n@@ -662,7 +662,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                 span,\n             },\n             |this| {\n-                this.visit_generic_param_slice(&tref.bound_generic_params, false);\n+                this.visit_generic_params(&tref.bound_generic_params, false);\n                 this.smart_resolve_path(\n                     tref.trait_ref.ref_id,\n                     None,\n@@ -833,7 +833,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     }\n \n     fn visit_generics(&mut self, generics: &'ast Generics) {\n-        self.visit_generic_param_slice(\n+        self.visit_generic_params(\n             &generics.params,\n             self.diagnostic_metadata.current_self_item.is_some(),\n         );\n@@ -941,7 +941,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                         span,\n                     },\n                     |this| {\n-                        this.visit_generic_param_slice(&bound_generic_params, false);\n+                        this.visit_generic_params(&bound_generic_params, false);\n                         this.visit_ty(bounded_ty);\n                         for bound in bounds {\n                             this.visit_param_bound(bound, BoundKind::Bound)\n@@ -1116,7 +1116,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         }\n     }\n \n-    fn visit_generic_param_slice(&mut self, params: &'ast [GenericParam], add_self_upper: bool) {\n+    fn visit_generic_params(&mut self, params: &'ast [GenericParam], add_self_upper: bool) {\n         // For type parameter defaults, we have to ban access\n         // to following type parameters, as the InternalSubsts can only\n         // provide previous type parameters as they're built. We"}]}