{"sha": "318fb9a4da8adc4451b1e44ee823576e32eb437f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxOGZiOWE0ZGE4YWRjNDQ1MWIxZTQ0ZWU4MjM1NzZlMzJlYjQzN2Y=", "commit": {"author": {"name": "Timo Freiberg", "email": "timo.freiberg@gmail.com", "date": "2019-11-24T12:01:13Z"}, "committer": {"name": "Timo Freiberg", "email": "timo.freiberg@gmail.com", "date": "2019-11-24T14:17:16Z"}, "message": "fixup! Add negative tests where the diagnostic message would be wrong", "tree": {"sha": "f7c128561c187e745ddcfea61337717c03a5e85d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7c128561c187e745ddcfea61337717c03a5e85d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/318fb9a4da8adc4451b1e44ee823576e32eb437f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/318fb9a4da8adc4451b1e44ee823576e32eb437f", "html_url": "https://github.com/rust-lang/rust/commit/318fb9a4da8adc4451b1e44ee823576e32eb437f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/318fb9a4da8adc4451b1e44ee823576e32eb437f/comments", "author": {"login": "TimoFreiberg", "id": 5281645, "node_id": "MDQ6VXNlcjUyODE2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5281645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimoFreiberg", "html_url": "https://github.com/TimoFreiberg", "followers_url": "https://api.github.com/users/TimoFreiberg/followers", "following_url": "https://api.github.com/users/TimoFreiberg/following{/other_user}", "gists_url": "https://api.github.com/users/TimoFreiberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimoFreiberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimoFreiberg/subscriptions", "organizations_url": "https://api.github.com/users/TimoFreiberg/orgs", "repos_url": "https://api.github.com/users/TimoFreiberg/repos", "events_url": "https://api.github.com/users/TimoFreiberg/events{/privacy}", "received_events_url": "https://api.github.com/users/TimoFreiberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimoFreiberg", "id": 5281645, "node_id": "MDQ6VXNlcjUyODE2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5281645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimoFreiberg", "html_url": "https://github.com/TimoFreiberg", "followers_url": "https://api.github.com/users/TimoFreiberg/followers", "following_url": "https://api.github.com/users/TimoFreiberg/following{/other_user}", "gists_url": "https://api.github.com/users/TimoFreiberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimoFreiberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimoFreiberg/subscriptions", "organizations_url": "https://api.github.com/users/TimoFreiberg/orgs", "repos_url": "https://api.github.com/users/TimoFreiberg/repos", "events_url": "https://api.github.com/users/TimoFreiberg/events{/privacy}", "received_events_url": "https://api.github.com/users/TimoFreiberg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8", "html_url": "https://github.com/rust-lang/rust/commit/dffdf378ee6950a7ecd8d5c235e6ad891b5bc4b8"}], "stats": {"total": 117, "additions": 103, "deletions": 14}, "files": [{"sha": "6aa010258ebd5c6b15a24f30f1caa7ad6aed5dcf", "filename": "src/test/ui/traits/auxiliary/crate_a1.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/318fb9a4da8adc4451b1e44ee823576e32eb437f/src%2Ftest%2Fui%2Ftraits%2Fauxiliary%2Fcrate_a1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/318fb9a4da8adc4451b1e44ee823576e32eb437f/src%2Ftest%2Fui%2Ftraits%2Fauxiliary%2Fcrate_a1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fauxiliary%2Fcrate_a1.rs?ref=318fb9a4da8adc4451b1e44ee823576e32eb437f", "patch": "@@ -1,5 +1,9 @@\n-pub struct Foo;\n+pub trait Bar {}\n \n-pub trait Bar{}\n+pub fn try_foo(x: impl Bar) {}\n \n-pub fn try_foo(x: impl Bar){}\n+pub struct ImplementsTraitForUsize<T> {\n+    _marker: std::marker::PhantomData<T>,\n+}\n+\n+impl Bar for ImplementsTraitForUsize<usize> {}"}, {"sha": "d6057db5e63f1644a544d4f8a023ea1270effb90", "filename": "src/test/ui/traits/auxiliary/crate_a2.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/318fb9a4da8adc4451b1e44ee823576e32eb437f/src%2Ftest%2Fui%2Ftraits%2Fauxiliary%2Fcrate_a2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/318fb9a4da8adc4451b1e44ee823576e32eb437f/src%2Ftest%2Fui%2Ftraits%2Fauxiliary%2Fcrate_a2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fauxiliary%2Fcrate_a2.rs?ref=318fb9a4da8adc4451b1e44ee823576e32eb437f", "patch": "@@ -1,5 +1,13 @@\n pub struct Foo;\n \n-pub trait Bar{}\n+pub trait Bar {}\n \n impl Bar for Foo {}\n+\n+pub struct DoesNotImplementTrait;\n+\n+pub struct ImplementsWrongTraitConditionally<T> {\n+    _marker: std::marker::PhantomData<T>,\n+}\n+\n+impl Bar for ImplementsWrongTraitConditionally<isize> {}"}, {"sha": "af720ecfdc063fe43291b8676c4d2726a187a4dd", "filename": "src/test/ui/traits/trait-bounds-same-crate-name.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/318fb9a4da8adc4451b1e44ee823576e32eb437f/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/318fb9a4da8adc4451b1e44ee823576e32eb437f/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.rs?ref=318fb9a4da8adc4451b1e44ee823576e32eb437f", "patch": "@@ -6,16 +6,50 @@\n // is not met but the struct implements a trait with the same path.\n \n fn main() {\n-    let foo2 = {\n+    let foo = {\n         extern crate crate_a2 as a;\n         a::Foo\n     };\n \n+    let implements_no_traits = {\n+        extern crate crate_a2 as a;\n+        a::DoesNotImplementTrait\n+    };\n+\n+    let other_variant_implements_mismatched_trait = {\n+        extern crate crate_a2 as a;\n+        a::ImplementsWrongTraitConditionally { _marker: std::marker::PhantomData::<isize> }\n+    };\n+\n+    let other_variant_implements_correct_trait = {\n+        extern crate crate_a1 as a;\n+        a::ImplementsTraitForUsize { _marker: std::marker::PhantomData::<isize> }\n+    };\n+\n     {\n         extern crate crate_a1 as a;\n-        a::try_foo(foo2);\n+        a::try_foo(foo);\n         //~^ ERROR E0277\n-        //~| Trait impl with same name found\n+        //~| trait impl with same name found\n         //~| Perhaps two different versions of crate `crate_a2`\n+\n+        // We don't want to see the \"version mismatch\" help message here\n+        // because `implements_no_traits` has no impl for `Foo`\n+        a::try_foo(implements_no_traits);\n+        //~^ ERROR E0277\n+\n+        // We don't want to see the \"version mismatch\" help message here\n+        // because `other_variant_implements_mismatched_trait`\n+        // does not have an impl for its `<isize>` variant,\n+        // only for its `<usize>` variant.\n+        a::try_foo(other_variant_implements_mismatched_trait);\n+        //~^ ERROR E0277\n+\n+        // We don't want to see the \"version mismatch\" help message here\n+        // because `ImplementsTraitForUsize` only has\n+        // impls for the correct trait where the path is not misleading.\n+        a::try_foo(other_variant_implements_correct_trait);\n+        //~^ ERROR E0277\n+        //~| the following implementations were found:\n     }\n }"}, {"sha": "8fd0bd13e54b385743bf66ce00d02f0901e32ffc", "filename": "src/test/ui/traits/trait-bounds-same-crate-name.stderr", "status": "modified", "additions": 50, "deletions": 7, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/318fb9a4da8adc4451b1e44ee823576e32eb437f/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/318fb9a4da8adc4451b1e44ee823576e32eb437f/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.stderr?ref=318fb9a4da8adc4451b1e44ee823576e32eb437f", "patch": "@@ -1,21 +1,64 @@\n error[E0277]: the trait bound `main::a::Foo: main::a::Bar` is not satisfied\n-  --> $DIR/trait-bounds-same-crate-name.rs:16:20\n+  --> $DIR/trait-bounds-same-crate-name.rs:31:20\n    |\n-LL |         a::try_foo(foo2);\n-   |                    ^^^^ the trait `main::a::Bar` is not implemented for `main::a::Foo`\n+LL |         a::try_foo(foo);\n+   |                    ^^^ the trait `main::a::Bar` is not implemented for `main::a::Foo`\n    | \n-  ::: $DIR/auxiliary/crate_a1.rs:5:24\n+  ::: $DIR/auxiliary/crate_a1.rs:3:24\n    |\n-LL | pub fn try_foo(x: impl Bar){}\n+LL | pub fn try_foo(x: impl Bar) {}\n    |                        --- required by this bound in `main::a::try_foo`\n    |\n-help: Trait impl with same name found\n+help: trait impl with same name found\n   --> $DIR/auxiliary/crate_a2.rs:5:1\n    |\n LL | impl Bar for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^\n    = note: Perhaps two different versions of crate `crate_a2` are being used?\n \n-error: aborting due to previous error\n+error[E0277]: the trait bound `main::a::DoesNotImplementTrait: main::a::Bar` is not satisfied\n+  --> $DIR/trait-bounds-same-crate-name.rs:38:20\n+   |\n+LL |         a::try_foo(implements_no_traits);\n+   |                    ^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `main::a::DoesNotImplementTrait`\n+   | \n+  ::: $DIR/auxiliary/crate_a1.rs:3:24\n+   |\n+LL | pub fn try_foo(x: impl Bar) {}\n+   |                        --- required by this bound in `main::a::try_foo`\n+\n+error[E0277]: the trait bound `main::a::ImplementsWrongTraitConditionally<isize>: main::a::Bar` is not satisfied\n+  --> $DIR/trait-bounds-same-crate-name.rs:45:20\n+   |\n+LL |         a::try_foo(other_variant_implements_mismatched_trait);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `main::a::ImplementsWrongTraitConditionally<isize>`\n+   | \n+  ::: $DIR/auxiliary/crate_a1.rs:3:24\n+   |\n+LL | pub fn try_foo(x: impl Bar) {}\n+   |                        --- required by this bound in `main::a::try_foo`\n+   |\n+help: trait impl with same name found\n+  --> $DIR/auxiliary/crate_a2.rs:13:1\n+   |\n+LL | impl Bar for ImplementsWrongTraitConditionally<isize> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: Perhaps two different versions of crate `crate_a2` are being used?\n+\n+error[E0277]: the trait bound `main::a::ImplementsTraitForUsize<isize>: main::a::Bar` is not satisfied\n+  --> $DIR/trait-bounds-same-crate-name.rs:51:20\n+   |\n+LL |         a::try_foo(other_variant_implements_correct_trait);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `main::a::ImplementsTraitForUsize<isize>`\n+   | \n+  ::: $DIR/auxiliary/crate_a1.rs:3:24\n+   |\n+LL | pub fn try_foo(x: impl Bar) {}\n+   |                        --- required by this bound in `main::a::try_foo`\n+   |\n+   = help: the following implementations were found:\n+             <main::a::ImplementsTraitForUsize<usize> as main::a::Bar>\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}