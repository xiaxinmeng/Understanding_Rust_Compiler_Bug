{"sha": "3ab95ceb12b60c1564d037e8d8d6e2406fad44b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYjk1Y2ViMTJiNjBjMTU2NGQwMzdlOGQ4ZDZlMjQwNmZhZDQ0YjM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-01-07T00:00:16Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-01-07T02:16:57Z"}, "message": "Detail transitive containment in E0588 diagnostic", "tree": {"sha": "f9b2c227471d30acbd0efe43371979c792700e1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9b2c227471d30acbd0efe43371979c792700e1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ab95ceb12b60c1564d037e8d8d6e2406fad44b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab95ceb12b60c1564d037e8d8d6e2406fad44b3", "html_url": "https://github.com/rust-lang/rust/commit/3ab95ceb12b60c1564d037e8d8d6e2406fad44b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ab95ceb12b60c1564d037e8d8d6e2406fad44b3/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef92009c1dbe2750f1d24a6619b827721fb49749", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef92009c1dbe2750f1d24a6619b827721fb49749", "html_url": "https://github.com/rust-lang/rust/commit/ef92009c1dbe2750f1d24a6619b827721fb49749"}], "stats": {"total": 215, "additions": 174, "deletions": 41}, "files": [{"sha": "6b9b28a0fa6224afb5b4c45e95a4fdc4fbf9ef34", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 62, "deletions": 25, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/3ab95ceb12b60c1564d037e8d8d6e2406fad44b3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab95ceb12b60c1564d037e8d8d6e2406fad44b3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3ab95ceb12b60c1564d037e8d8d6e2406fad44b3", "patch": "@@ -118,7 +118,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_hir::{ExprKind, GenericArg, HirIdMap, ItemKind, Node, PatKind, QPath};\n+use rustc_hir::{ExprKind, GenericArg, HirIdMap, Item, ItemKind, Node, PatKind, QPath};\n use rustc_index::vec::Idx;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{original_sp, DUMMY_SP};\n@@ -2295,44 +2295,81 @@ fn check_packed(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n                 \"type has conflicting packed and align representation hints\"\n             )\n             .emit();\n-        } else if check_packed_inner(tcx, def_id, &mut Vec::new()) {\n-            struct_span_err!(\n-                tcx.sess,\n-                sp,\n-                E0588,\n-                \"packed type cannot transitively contain a `[repr(align)]` type\"\n-            )\n-            .emit();\n+        } else {\n+            if let Some(def_spans) = check_packed_inner(tcx, def_id, &mut vec![]) {\n+                let mut err = struct_span_err!(\n+                    tcx.sess,\n+                    sp,\n+                    E0588,\n+                    \"packed type cannot transitively contain a `#[repr(align)]` type\"\n+                );\n+\n+                let hir = tcx.hir();\n+                if let Some(hir_id) = hir.as_local_hir_id(def_spans[0].0) {\n+                    if let Node::Item(Item { ident, .. }) = hir.get(hir_id) {\n+                        err.span_note(\n+                            tcx.def_span(def_spans[0].0),\n+                            &format!(\"`{}` has a `#[repr(align)]` attribute\", ident),\n+                        );\n+                    }\n+                }\n+\n+                if def_spans.len() > 2 {\n+                    let mut first = true;\n+                    for (adt_def, span) in def_spans.iter().skip(1).rev() {\n+                        if let Some(hir_id) = hir.as_local_hir_id(*adt_def) {\n+                            if let Node::Item(Item { ident, .. }) = hir.get(hir_id) {\n+                                err.span_note(\n+                                    *span,\n+                                    &if first {\n+                                        format!(\n+                                            \"`{}` contains a field of type `{}`\",\n+                                            tcx.type_of(def_id),\n+                                            ident\n+                                        )\n+                                    } else {\n+                                        format!(\"...which contains a field of type `{}`\", ident)\n+                                    },\n+                                );\n+                                first = false;\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                err.emit();\n+            }\n         }\n     }\n }\n \n-fn check_packed_inner(tcx: TyCtxt<'_>, def_id: DefId, stack: &mut Vec<DefId>) -> bool {\n-    let t = tcx.type_of(def_id);\n-    if stack.contains(&def_id) {\n-        debug!(\"check_packed_inner: {:?} is recursive\", t);\n-        return false;\n-    }\n-    if let ty::Adt(def, substs) = t.kind {\n+fn check_packed_inner(\n+    tcx: TyCtxt<'_>,\n+    def_id: DefId,\n+    stack: &mut Vec<DefId>,\n+) -> Option<Vec<(DefId, Span)>> {\n+    if let ty::Adt(def, substs) = tcx.type_of(def_id).kind {\n         if def.is_struct() || def.is_union() {\n-            if tcx.adt_def(def.did).repr.align.is_some() {\n-                return true;\n+            if def.repr.align.is_some() {\n+                return Some(vec![(def.did, DUMMY_SP)]);\n             }\n-            // push struct def_id before checking fields\n+\n             stack.push(def_id);\n             for field in &def.non_enum_variant().fields {\n-                let f = field.ty(tcx, substs);\n-                if let ty::Adt(def, _) = f.kind {\n-                    if check_packed_inner(tcx, def.did, stack) {\n-                        return true;\n+                if let ty::Adt(def, _) = field.ty(tcx, substs).kind {\n+                    if !stack.contains(&def.did) {\n+                        if let Some(mut defs) = check_packed_inner(tcx, def.did, stack) {\n+                            defs.push((def.did, field.ident.span));\n+                            return Some(defs);\n+                        }\n                     }\n                 }\n             }\n-            // only need to pop if not early out\n             stack.pop();\n         }\n     }\n-    false\n+\n+    None\n }\n \n /// Emit an error when encountering more or less than one variant in a transparent enum."}, {"sha": "67d87eb5cd520077ade2237ccdc81e1a8409952b", "filename": "src/test/ui/repr/repr-packed-contains-align.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3ab95ceb12b60c1564d037e8d8d6e2406fad44b3/src%2Ftest%2Fui%2Frepr%2Frepr-packed-contains-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ab95ceb12b60c1564d037e8d8d6e2406fad44b3/src%2Ftest%2Fui%2Frepr%2Frepr-packed-contains-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-packed-contains-align.rs?ref=3ab95ceb12b60c1564d037e8d8d6e2406fad44b3", "patch": "@@ -16,34 +16,34 @@ union UB {\n }\n \n #[repr(packed)]\n-struct SC(SA); //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+struct SC(SA); //~ ERROR: packed type cannot transitively contain a `#[repr(align)]` type\n \n #[repr(packed)]\n-struct SD(SB); //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+struct SD(SB); //~ ERROR: packed type cannot transitively contain a `#[repr(align)]` type\n \n #[repr(packed)]\n-struct SE(UA); //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+struct SE(UA); //~ ERROR: packed type cannot transitively contain a `#[repr(align)]` type\n \n #[repr(packed)]\n-struct SF(UB); //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+struct SF(UB); //~ ERROR: packed type cannot transitively contain a `#[repr(align)]` type\n \n #[repr(packed)]\n-union UC { //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+union UC { //~ ERROR: packed type cannot transitively contain a `#[repr(align)]` type\n     a: UA\n }\n \n #[repr(packed)]\n-union UD { //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+union UD { //~ ERROR: packed type cannot transitively contain a `#[repr(align)]` type\n     n: UB\n }\n \n #[repr(packed)]\n-union UE { //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+union UE { //~ ERROR: packed type cannot transitively contain a `#[repr(align)]` type\n     a: SA\n }\n \n #[repr(packed)]\n-union UF { //~ ERROR: packed type cannot transitively contain a `[repr(align)]` type\n+union UF { //~ ERROR: packed type cannot transitively contain a `#[repr(align)]` type\n     n: SB\n }\n "}, {"sha": "32f9bb8bf33d9705ebc2bc018fd4b4d7661e279f", "filename": "src/test/ui/repr/repr-packed-contains-align.stderr", "status": "modified", "additions": 104, "deletions": 8, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/3ab95ceb12b60c1564d037e8d8d6e2406fad44b3/src%2Ftest%2Fui%2Frepr%2Frepr-packed-contains-align.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ab95ceb12b60c1564d037e8d8d6e2406fad44b3/src%2Ftest%2Fui%2Frepr%2Frepr-packed-contains-align.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-packed-contains-align.stderr?ref=3ab95ceb12b60c1564d037e8d8d6e2406fad44b3", "patch": "@@ -1,58 +1,154 @@\n-error[E0588]: packed type cannot transitively contain a `[repr(align)]` type\n+error[E0588]: packed type cannot transitively contain a `#[repr(align)]` type\n   --> $DIR/repr-packed-contains-align.rs:19:1\n    |\n LL | struct SC(SA);\n    | ^^^^^^^^^^^^^^\n+   |\n+note: `SA` has a `#[repr(align)]` attribute\n+  --> $DIR/repr-packed-contains-align.rs:5:1\n+   |\n+LL | struct SA(i32);\n+   | ^^^^^^^^^^^^^^^\n \n-error[E0588]: packed type cannot transitively contain a `[repr(align)]` type\n+error[E0588]: packed type cannot transitively contain a `#[repr(align)]` type\n   --> $DIR/repr-packed-contains-align.rs:22:1\n    |\n LL | struct SD(SB);\n    | ^^^^^^^^^^^^^^\n+   |\n+note: `SA` has a `#[repr(align)]` attribute\n+  --> $DIR/repr-packed-contains-align.rs:5:1\n+   |\n+LL | struct SA(i32);\n+   | ^^^^^^^^^^^^^^^\n+note: `SD` contains a field of type `SB`\n+  --> $DIR/repr-packed-contains-align.rs:22:11\n+   |\n+LL | struct SD(SB);\n+   |           ^^\n+note: ...which contains a field of type `SA`\n+  --> $DIR/repr-packed-contains-align.rs:7:11\n+   |\n+LL | struct SB(SA);\n+   |           ^^\n \n-error[E0588]: packed type cannot transitively contain a `[repr(align)]` type\n+error[E0588]: packed type cannot transitively contain a `#[repr(align)]` type\n   --> $DIR/repr-packed-contains-align.rs:25:1\n    |\n LL | struct SE(UA);\n    | ^^^^^^^^^^^^^^\n+   |\n+note: `UA` has a `#[repr(align)]` attribute\n+  --> $DIR/repr-packed-contains-align.rs:10:1\n+   |\n+LL | / union UA {\n+LL | |     i: i32\n+LL | | }\n+   | |_^\n \n-error[E0588]: packed type cannot transitively contain a `[repr(align)]` type\n+error[E0588]: packed type cannot transitively contain a `#[repr(align)]` type\n   --> $DIR/repr-packed-contains-align.rs:28:1\n    |\n LL | struct SF(UB);\n    | ^^^^^^^^^^^^^^\n+   |\n+note: `UA` has a `#[repr(align)]` attribute\n+  --> $DIR/repr-packed-contains-align.rs:10:1\n+   |\n+LL | / union UA {\n+LL | |     i: i32\n+LL | | }\n+   | |_^\n+note: `SF` contains a field of type `UB`\n+  --> $DIR/repr-packed-contains-align.rs:28:11\n+   |\n+LL | struct SF(UB);\n+   |           ^^\n+note: ...which contains a field of type `UA`\n+  --> $DIR/repr-packed-contains-align.rs:15:5\n+   |\n+LL |     a: UA\n+   |     ^\n \n-error[E0588]: packed type cannot transitively contain a `[repr(align)]` type\n+error[E0588]: packed type cannot transitively contain a `#[repr(align)]` type\n   --> $DIR/repr-packed-contains-align.rs:31:1\n    |\n LL | / union UC {\n LL | |     a: UA\n+LL | | }\n+   | |_^\n+   |\n+note: `UA` has a `#[repr(align)]` attribute\n+  --> $DIR/repr-packed-contains-align.rs:10:1\n+   |\n+LL | / union UA {\n+LL | |     i: i32\n LL | | }\n    | |_^\n \n-error[E0588]: packed type cannot transitively contain a `[repr(align)]` type\n+error[E0588]: packed type cannot transitively contain a `#[repr(align)]` type\n   --> $DIR/repr-packed-contains-align.rs:36:1\n    |\n LL | / union UD {\n LL | |     n: UB\n LL | | }\n    | |_^\n+   |\n+note: `UA` has a `#[repr(align)]` attribute\n+  --> $DIR/repr-packed-contains-align.rs:10:1\n+   |\n+LL | / union UA {\n+LL | |     i: i32\n+LL | | }\n+   | |_^\n+note: `UD` contains a field of type `UB`\n+  --> $DIR/repr-packed-contains-align.rs:37:5\n+   |\n+LL |     n: UB\n+   |     ^\n+note: ...which contains a field of type `UA`\n+  --> $DIR/repr-packed-contains-align.rs:15:5\n+   |\n+LL |     a: UA\n+   |     ^\n \n-error[E0588]: packed type cannot transitively contain a `[repr(align)]` type\n+error[E0588]: packed type cannot transitively contain a `#[repr(align)]` type\n   --> $DIR/repr-packed-contains-align.rs:41:1\n    |\n LL | / union UE {\n LL | |     a: SA\n LL | | }\n    | |_^\n+   |\n+note: `SA` has a `#[repr(align)]` attribute\n+  --> $DIR/repr-packed-contains-align.rs:5:1\n+   |\n+LL | struct SA(i32);\n+   | ^^^^^^^^^^^^^^^\n \n-error[E0588]: packed type cannot transitively contain a `[repr(align)]` type\n+error[E0588]: packed type cannot transitively contain a `#[repr(align)]` type\n   --> $DIR/repr-packed-contains-align.rs:46:1\n    |\n LL | / union UF {\n LL | |     n: SB\n LL | | }\n    | |_^\n+   |\n+note: `SA` has a `#[repr(align)]` attribute\n+  --> $DIR/repr-packed-contains-align.rs:5:1\n+   |\n+LL | struct SA(i32);\n+   | ^^^^^^^^^^^^^^^\n+note: `UF` contains a field of type `SB`\n+  --> $DIR/repr-packed-contains-align.rs:47:5\n+   |\n+LL |     n: SB\n+   |     ^\n+note: ...which contains a field of type `SA`\n+  --> $DIR/repr-packed-contains-align.rs:7:11\n+   |\n+LL | struct SB(SA);\n+   |           ^^\n \n error: aborting due to 8 previous errors\n "}]}