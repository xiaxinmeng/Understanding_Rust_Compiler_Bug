{"sha": "141bb23be863f8bfe25ccac102c6e7b96b61d417", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MWJiMjNiZTg2M2Y4YmZlMjVjY2FjMTAyYzZlN2I5NmI2MWQ0MTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-11T18:10:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-11T18:10:44Z"}, "message": "Auto merge of #76415 - Mark-Simulacrum:bootstrap-cross-compilation, r=alexcrichton\n\nrustbuild: avoid trying to inversely cross-compile for build triple from host triples\n\nThis changes rustbuild's cross compilation logic to better match what users expect,\nparticularly, avoiding trying to inverse cross-compile for the build triple from host triples.\nThat is, if build=A, host=B, target=B, we do not want to try and compile for A from B.\nIndeed, the only \"known to run\" triple when cross-compiling is the build triple A.\nWhen testing for a particular target we need to be able to run binaries compiled for\nthat target though.\n\nThe last commit also modifies the default set of host/target triples to avoid producing\nneedless artifacts for the build triple:\n\nThe new behavior is to respect --host and --target when passed as the *only*\nconfigured triples (no triples are implicitly added). The default for --host is\nthe build triple, and the default for --target is the host triple(s), either\nconfigured or the default build triple.\n\nFixes #76333\n\nr? `@alexcrichton` if possible, otherwise we'll need to hunt down a reviewer", "tree": {"sha": "151e50ec61a43beaff5a9ccf2e005c25f10acf7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/151e50ec61a43beaff5a9ccf2e005c25f10acf7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/141bb23be863f8bfe25ccac102c6e7b96b61d417", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/141bb23be863f8bfe25ccac102c6e7b96b61d417", "html_url": "https://github.com/rust-lang/rust/commit/141bb23be863f8bfe25ccac102c6e7b96b61d417", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/141bb23be863f8bfe25ccac102c6e7b96b61d417/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d778203da2157f47af6d1f7ba5f44eb933ee2df1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d778203da2157f47af6d1f7ba5f44eb933ee2df1", "html_url": "https://github.com/rust-lang/rust/commit/d778203da2157f47af6d1f7ba5f44eb933ee2df1"}, {"sha": "78125ec6b393441e628f9b04b84d6d125225fe30", "url": "https://api.github.com/repos/rust-lang/rust/commits/78125ec6b393441e628f9b04b84d6d125225fe30", "html_url": "https://github.com/rust-lang/rust/commit/78125ec6b393441e628f9b04b84d6d125225fe30"}], "stats": {"total": 193, "additions": 99, "deletions": 94}, "files": [{"sha": "2d5b3136450b923130238a8c1ee2380d7f989124", "filename": "config.toml.example", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/141bb23be863f8bfe25ccac102c6e7b96b61d417/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/141bb23be863f8bfe25ccac102c6e7b96b61d417/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=141bb23be863f8bfe25ccac102c6e7b96b61d417", "patch": "@@ -120,19 +120,18 @@\n # Defaults to host platform\n #build = \"x86_64-unknown-linux-gnu\"\n \n-# In addition to the build triple, other triples to produce full compiler\n-# toolchains for. Each of these triples will be bootstrapped from the build\n-# triple and then will continue to bootstrap themselves. This platform must\n-# currently be able to run all of the triples provided here.\n+# Which triples to produce a compiler toolchain for. Each of these triples will\n+# be bootstrapped from the build triple themselves.\n #\n # Defaults to just the build triple\n #host = [\"x86_64-unknown-linux-gnu\"]\n \n-# In addition to all host triples, other triples to produce the standard library\n-# for. Each host triple will be used to produce a copy of the standard library\n-# for each target triple.\n+# Which triples to build libraries (core/alloc/std/test/proc_macro) for. Each of\n+# these triples will be bootstrapped from the build triple themselves.\n #\n-# Defaults to just the build triple\n+# Defaults to `host`. If you set this explicitly, you likely want to add all\n+# host triples to this list as well in order for those host toolchains to be\n+# able to compile programs for their native target.\n #target = [\"x86_64-unknown-linux-gnu\"]\n \n # Use this directory to store build artifacts."}, {"sha": "31d4f1f28a86d68ab860b6e2952100af5889cf64", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/141bb23be863f8bfe25ccac102c6e7b96b61d417/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141bb23be863f8bfe25ccac102c6e7b96b61d417/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=141bb23be863f8bfe25ccac102c6e7b96b61d417", "patch": "@@ -87,11 +87,16 @@ pub trait Step: 'static + Clone + Debug + PartialEq + Eq + Hash {\n \n pub struct RunConfig<'a> {\n     pub builder: &'a Builder<'a>,\n-    pub host: TargetSelection,\n     pub target: TargetSelection,\n     pub path: PathBuf,\n }\n \n+impl RunConfig<'_> {\n+    pub fn build_triple(&self) -> TargetSelection {\n+        self.builder.build.build\n+    }\n+}\n+\n struct StepDescription {\n     default: bool,\n     only_hosts: bool,\n@@ -165,7 +170,6 @@ impl StepDescription {\n                 pathset, self.name, builder.config.exclude\n             );\n         }\n-        let hosts = &builder.hosts;\n \n         // Determine the targets participating in this rule.\n         let targets = if self.only_hosts {\n@@ -178,16 +182,9 @@ impl StepDescription {\n             &builder.targets\n         };\n \n-        for host in hosts {\n-            for target in targets {\n-                let run = RunConfig {\n-                    builder,\n-                    path: pathset.path(builder),\n-                    host: *host,\n-                    target: *target,\n-                };\n-                (self.make_run)(run);\n-            }\n+        for target in targets {\n+            let run = RunConfig { builder, path: pathset.path(builder), target: *target };\n+            (self.make_run)(run);\n         }\n     }\n "}, {"sha": "c6eac95c34507bcb8954be882db0060df40a2439", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/141bb23be863f8bfe25ccac102c6e7b96b61d417/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141bb23be863f8bfe25ccac102c6e7b96b61d417/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=141bb23be863f8bfe25ccac102c6e7b96b61d417", "patch": "@@ -217,6 +217,16 @@ mod dist {\n                 dist::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n             ]\n         );\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Std>()),\n+            &[\n+                compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n+                compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n+                compile::Std { compiler: Compiler { host: a, stage: 2 }, target: a },\n+                compile::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n+                compile::Std { compiler: Compiler { host: a, stage: 2 }, target: b },\n+            ],\n+        );\n         assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n     }\n \n@@ -384,12 +394,9 @@ mod dist {\n                 compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 2 }, target: a },\n-                compile::Std { compiler: Compiler { host: b, stage: 2 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n                 compile::Std { compiler: Compiler { host: a, stage: 2 }, target: b },\n-                compile::Std { compiler: Compiler { host: b, stage: 2 }, target: b },\n                 compile::Std { compiler: Compiler { host: a, stage: 2 }, target: c },\n-                compile::Std { compiler: Compiler { host: b, stage: 2 }, target: c },\n             ]\n         );\n         assert!(!builder.cache.all::<compile::Assemble>().is_empty());\n@@ -399,10 +406,8 @@ mod dist {\n                 compile::Rustc { compiler: Compiler { host: a, stage: 0 }, target: a },\n                 compile::Rustc { compiler: Compiler { host: a, stage: 1 }, target: a },\n                 compile::Rustc { compiler: Compiler { host: a, stage: 2 }, target: a },\n-                compile::Rustc { compiler: Compiler { host: b, stage: 2 }, target: a },\n                 compile::Rustc { compiler: Compiler { host: a, stage: 1 }, target: b },\n                 compile::Rustc { compiler: Compiler { host: a, stage: 2 }, target: b },\n-                compile::Rustc { compiler: Compiler { host: b, stage: 2 }, target: b },\n             ]\n         );\n     }\n@@ -425,12 +430,9 @@ mod dist {\n                 compile::Std { compiler: Compiler { host: a, stage: 0 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 1 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 2 }, target: a },\n-                compile::Std { compiler: Compiler { host: b, stage: 2 }, target: a },\n                 compile::Std { compiler: Compiler { host: a, stage: 1 }, target: b },\n                 compile::Std { compiler: Compiler { host: a, stage: 2 }, target: b },\n-                compile::Std { compiler: Compiler { host: b, stage: 2 }, target: b },\n                 compile::Std { compiler: Compiler { host: a, stage: 2 }, target: c },\n-                compile::Std { compiler: Compiler { host: b, stage: 2 }, target: c },\n             ]\n         );\n         assert_eq!(\n@@ -439,15 +441,13 @@ mod dist {\n                 compile::Assemble { target_compiler: Compiler { host: a, stage: 0 } },\n                 compile::Assemble { target_compiler: Compiler { host: a, stage: 1 } },\n                 compile::Assemble { target_compiler: Compiler { host: a, stage: 2 } },\n-                compile::Assemble { target_compiler: Compiler { host: b, stage: 2 } },\n             ]\n         );\n         assert_eq!(\n             first(builder.cache.all::<compile::Rustc>()),\n             &[\n                 compile::Rustc { compiler: Compiler { host: a, stage: 0 }, target: a },\n                 compile::Rustc { compiler: Compiler { host: a, stage: 1 }, target: a },\n-                compile::Rustc { compiler: Compiler { host: a, stage: 1 }, target: b },\n             ]\n         );\n     }"}, {"sha": "e0dddda83b98feefb9972f748f8cd314b59c5c29", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/141bb23be863f8bfe25ccac102c6e7b96b61d417/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141bb23be863f8bfe25ccac102c6e7b96b61d417/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=141bb23be863f8bfe25ccac102c6e7b96b61d417", "patch": "@@ -45,7 +45,7 @@ impl Step for Std {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(Std {\n-            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+            compiler: run.builder.compiler(run.builder.top_stage, run.build_triple()),\n             target: run.target,\n         });\n     }\n@@ -385,7 +385,7 @@ impl Step for StartupObjects {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(StartupObjects {\n-            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+            compiler: run.builder.compiler(run.builder.top_stage, run.build_triple()),\n             target: run.target,\n         });\n     }\n@@ -454,7 +454,7 @@ impl Step for Rustc {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(Rustc {\n-            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+            compiler: run.builder.compiler(run.builder.top_stage, run.build_triple()),\n             target: run.target,\n         });\n     }"}, {"sha": "5a79d3db5c90536b73f1ed9f620bfd8ba0edde62", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/141bb23be863f8bfe25ccac102c6e7b96b61d417/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141bb23be863f8bfe25ccac102c6e7b96b61d417/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=141bb23be863f8bfe25ccac102c6e7b96b61d417", "patch": "@@ -273,10 +273,8 @@ struct TomlConfig {\n #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n struct Build {\n     build: Option<String>,\n-    #[serde(default)]\n-    host: Vec<String>,\n-    #[serde(default)]\n-    target: Vec<String>,\n+    host: Option<Vec<String>>,\n+    target: Option<Vec<String>>,\n     // This is ignored, the rust code always gets the build directory from the `BUILD_DIR` env variable\n     build_dir: Option<String>,\n     cargo: Option<String>,\n@@ -505,11 +503,6 @@ impl Config {\n             config.out = dir;\n         }\n \n-        // If --target was specified but --host wasn't specified, don't run any host-only tests.\n-        let has_hosts = !flags.host.is_empty();\n-        let has_targets = !flags.target.is_empty();\n-        config.skip_only_host_steps = !has_hosts && has_targets;\n-\n         let toml = file\n             .map(|file| {\n                 let contents = t!(fs::read_to_string(&file));\n@@ -528,25 +521,28 @@ impl Config {\n             .unwrap_or_else(TomlConfig::default);\n \n         let build = toml.build.clone().unwrap_or_default();\n-        // set by bootstrap.py\n-        config.hosts.push(config.build);\n-        for host in build.host.iter().map(|h| TargetSelection::from_user(h)) {\n-            if !config.hosts.contains(&host) {\n-                config.hosts.push(host);\n-            }\n-        }\n-        for target in config\n-            .hosts\n-            .iter()\n-            .copied()\n-            .chain(build.target.iter().map(|h| TargetSelection::from_user(h)))\n-        {\n-            if !config.targets.contains(&target) {\n-                config.targets.push(target);\n-            }\n-        }\n-        config.hosts = if !flags.host.is_empty() { flags.host } else { config.hosts };\n-        config.targets = if !flags.target.is_empty() { flags.target } else { config.targets };\n+\n+        // If --target was specified but --host wasn't specified, don't run any host-only tests.\n+        let has_hosts = build.host.is_some() || flags.host.is_some();\n+        let has_targets = build.target.is_some() || flags.target.is_some();\n+        config.skip_only_host_steps = !has_hosts && has_targets;\n+\n+        config.hosts = if let Some(arg_host) = flags.host.clone() {\n+            arg_host\n+        } else if let Some(file_host) = build.host {\n+            file_host.iter().map(|h| TargetSelection::from_user(h)).collect()\n+        } else {\n+            vec![config.build]\n+        };\n+        config.targets = if let Some(arg_target) = flags.target.clone() {\n+            arg_target\n+        } else if let Some(file_target) = build.target {\n+            file_target.iter().map(|h| TargetSelection::from_user(h)).collect()\n+        } else {\n+            // If target is *not* configured, then default to the host\n+            // toolchains.\n+            config.hosts.clone()\n+        };\n \n         config.nodejs = build.nodejs.map(PathBuf::from);\n         config.gdb = build.gdb.map(PathBuf::from);"}, {"sha": "e22cdb13928364e7d6ee5882a5a6e6b0bd4b706b", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/141bb23be863f8bfe25ccac102c6e7b96b61d417/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141bb23be863f8bfe25ccac102c6e7b96b61d417/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=141bb23be863f8bfe25ccac102c6e7b96b61d417", "patch": "@@ -605,7 +605,9 @@ impl Step for DebuggerScripts {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(DebuggerScripts {\n-            sysroot: run.builder.sysroot(run.builder.compiler(run.builder.top_stage, run.host)),\n+            sysroot: run\n+                .builder\n+                .sysroot(run.builder.compiler(run.builder.top_stage, run.build_triple())),\n             host: run.target,\n         });\n     }"}, {"sha": "ff8468574469eefaa7deadb3fe19d79bd4be3aae", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/141bb23be863f8bfe25ccac102c6e7b96b61d417/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141bb23be863f8bfe25ccac102c6e7b96b61d417/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=141bb23be863f8bfe25ccac102c6e7b96b61d417", "patch": "@@ -20,8 +20,8 @@ pub struct Flags {\n     pub stage: Option<u32>,\n     pub keep_stage: Vec<u32>,\n \n-    pub host: Vec<TargetSelection>,\n-    pub target: Vec<TargetSelection>,\n+    pub host: Option<Vec<TargetSelection>>,\n+    pub target: Option<Vec<TargetSelection>>,\n     pub config: Option<PathBuf>,\n     pub jobs: Option<u32>,\n     pub cmd: Subcommand,\n@@ -526,14 +526,26 @@ Arguments:\n                 .into_iter()\n                 .map(|j| j.parse().expect(\"`keep-stage` should be a number\"))\n                 .collect(),\n-            host: split(&matches.opt_strs(\"host\"))\n-                .into_iter()\n-                .map(|x| TargetSelection::from_user(&x))\n-                .collect::<Vec<_>>(),\n-            target: split(&matches.opt_strs(\"target\"))\n-                .into_iter()\n-                .map(|x| TargetSelection::from_user(&x))\n-                .collect::<Vec<_>>(),\n+            host: if matches.opt_present(\"host\") {\n+                Some(\n+                    split(&matches.opt_strs(\"host\"))\n+                        .into_iter()\n+                        .map(|x| TargetSelection::from_user(&x))\n+                        .collect::<Vec<_>>(),\n+                )\n+            } else {\n+                None\n+            },\n+            target: if matches.opt_present(\"target\") {\n+                Some(\n+                    split(&matches.opt_strs(\"target\"))\n+                        .into_iter()\n+                        .map(|x| TargetSelection::from_user(&x))\n+                        .collect::<Vec<_>>(),\n+                )\n+            } else {\n+                None\n+            },\n             config: cfg_file,\n             jobs: matches.opt_str(\"jobs\").map(|j| j.parse().expect(\"`jobs` should be a number\")),\n             cmd,"}, {"sha": "045dda2d4cb4cbbc5da6631bda9dc4616e9c670f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/141bb23be863f8bfe25ccac102c6e7b96b61d417/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141bb23be863f8bfe25ccac102c6e7b96b61d417/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=141bb23be863f8bfe25ccac102c6e7b96b61d417", "patch": "@@ -584,7 +584,7 @@ impl Step for RustdocTheme {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        let compiler = run.builder.compiler(run.builder.top_stage, run.host);\n+        let compiler = run.builder.compiler(run.builder.top_stage, run.target);\n \n         run.builder.ensure(RustdocTheme { compiler });\n     }\n@@ -651,7 +651,6 @@ impl Step for RustdocJSStd {\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct RustdocJSNotStd {\n-    pub host: TargetSelection,\n     pub target: TargetSelection,\n     pub compiler: Compiler,\n }\n@@ -666,8 +665,8 @@ impl Step for RustdocJSNotStd {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        let compiler = run.builder.compiler(run.builder.top_stage, run.host);\n-        run.builder.ensure(RustdocJSNotStd { host: run.host, target: run.target, compiler });\n+        let compiler = run.builder.compiler(run.builder.top_stage, run.build_triple());\n+        run.builder.ensure(RustdocJSNotStd { target: run.target, compiler });\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n@@ -688,7 +687,6 @@ impl Step for RustdocJSNotStd {\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct RustdocUi {\n-    pub host: TargetSelection,\n     pub target: TargetSelection,\n     pub compiler: Compiler,\n }\n@@ -703,8 +701,8 @@ impl Step for RustdocUi {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        let compiler = run.builder.compiler(run.builder.top_stage, run.host);\n-        run.builder.ensure(RustdocUi { host: run.host, target: run.target, compiler });\n+        let compiler = run.builder.compiler(run.builder.top_stage, run.build_triple());\n+        run.builder.ensure(RustdocUi { target: run.target, compiler });\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n@@ -873,7 +871,7 @@ macro_rules! test_definitions {\n             }\n \n             fn make_run(run: RunConfig<'_>) {\n-                let compiler = run.builder.compiler(run.builder.top_stage, run.host);\n+                let compiler = run.builder.compiler(run.builder.top_stage, run.build_triple());\n \n                 run.builder.ensure($name { compiler, target: run.target });\n             }\n@@ -1422,7 +1420,7 @@ macro_rules! test_book {\n \n                 fn make_run(run: RunConfig<'_>) {\n                     run.builder.ensure($name {\n-                        compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+                        compiler: run.builder.compiler(run.builder.top_stage, run.target),\n                     });\n                 }\n \n@@ -1469,7 +1467,7 @@ impl Step for ErrorIndex {\n         // error_index_generator depends on librustdoc. Use the compiler that\n         // is normally used to build rustdoc for other tests (like compiletest\n         // tests in src/test/rustdoc) so that it shares the same artifacts.\n-        let compiler = run.builder.compiler_for(run.builder.top_stage, run.host, run.host);\n+        let compiler = run.builder.compiler_for(run.builder.top_stage, run.target, run.target);\n         run.builder.ensure(ErrorIndex { compiler });\n     }\n \n@@ -1573,7 +1571,7 @@ impl Step for CrateLibrustc {\n \n     fn make_run(run: RunConfig<'_>) {\n         let builder = run.builder;\n-        let compiler = builder.compiler(builder.top_stage, run.host);\n+        let compiler = builder.compiler(builder.top_stage, run.build_triple());\n \n         for krate in builder.in_tree_crates(\"rustc-main\") {\n             if krate.path.ends_with(&run.path) {\n@@ -1620,7 +1618,7 @@ impl Step for CrateNotDefault {\n \n     fn make_run(run: RunConfig<'_>) {\n         let builder = run.builder;\n-        let compiler = builder.compiler(builder.top_stage, run.host);\n+        let compiler = builder.compiler(builder.top_stage, run.build_triple());\n \n         let test_kind = builder.kind.into();\n \n@@ -1668,7 +1666,7 @@ impl Step for Crate {\n \n     fn make_run(run: RunConfig<'_>) {\n         let builder = run.builder;\n-        let compiler = builder.compiler(builder.top_stage, run.host);\n+        let compiler = builder.compiler(builder.top_stage, run.build_triple());\n \n         let make = |mode: Mode, krate: &CargoCrate| {\n             let test_kind = builder.kind.into();\n@@ -1808,7 +1806,7 @@ impl Step for CrateRustdoc {\n \n         let test_kind = builder.kind.into();\n \n-        builder.ensure(CrateRustdoc { host: run.host, test_kind });\n+        builder.ensure(CrateRustdoc { host: run.target, test_kind });\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n@@ -2054,7 +2052,6 @@ impl Step for Bootstrap {\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct TierCheck {\n     pub compiler: Compiler,\n-    target: TargetSelection,\n }\n \n impl Step for TierCheck {\n@@ -2067,18 +2064,19 @@ impl Step for TierCheck {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        let compiler = run.builder.compiler_for(run.builder.top_stage, run.host, run.host);\n-        run.builder.ensure(TierCheck { compiler, target: run.host });\n+        let compiler =\n+            run.builder.compiler_for(run.builder.top_stage, run.builder.build.build, run.target);\n+        run.builder.ensure(TierCheck { compiler });\n     }\n \n     /// Tests the Platform Support page in the rustc book.\n     fn run(self, builder: &Builder<'_>) {\n-        builder.ensure(compile::Std { compiler: self.compiler, target: self.target });\n+        builder.ensure(compile::Std { compiler: self.compiler, target: self.compiler.host });\n         let mut cargo = tool::prepare_tool_cargo(\n             builder,\n             self.compiler,\n-            Mode::ToolRustc,\n-            self.target,\n+            Mode::ToolStd,\n+            self.compiler.host,\n             \"run\",\n             \"src/tools/tier-check\",\n             SourceType::InTree,"}, {"sha": "a607f0fe258d4cf257606ed5c17128abc2ef3a68", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/141bb23be863f8bfe25ccac102c6e7b96b61d417/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141bb23be863f8bfe25ccac102c6e7b96b61d417/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=141bb23be863f8bfe25ccac102c6e7b96b61d417", "patch": "@@ -469,8 +469,9 @@ impl Step for Rustdoc {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder\n-            .ensure(Rustdoc { compiler: run.builder.compiler(run.builder.top_stage, run.host) });\n+        run.builder.ensure(Rustdoc {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.build_triple()),\n+        });\n     }\n \n     fn run(self, builder: &Builder<'_>) -> PathBuf {"}]}