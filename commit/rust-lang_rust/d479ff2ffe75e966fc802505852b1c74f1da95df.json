{"sha": "d479ff2ffe75e966fc802505852b1c74f1da95df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NzlmZjJmZmU3NWU5NjZmYzgwMjUwNTg1MmIxYzc0ZjFkYTk1ZGY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-17T16:32:52Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-17T17:15:06Z"}, "message": "resolve: Properly integrate derives and `macro_rules` scopes", "tree": {"sha": "18479ded42960acd26d9b52259e256132520f758", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18479ded42960acd26d9b52259e256132520f758"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d479ff2ffe75e966fc802505852b1c74f1da95df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d479ff2ffe75e966fc802505852b1c74f1da95df", "html_url": "https://github.com/rust-lang/rust/commit/d479ff2ffe75e966fc802505852b1c74f1da95df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d479ff2ffe75e966fc802505852b1c74f1da95df/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d65e272a9fe3e61aa5f229c5358e35a909435575", "url": "https://api.github.com/repos/rust-lang/rust/commits/d65e272a9fe3e61aa5f229c5358e35a909435575", "html_url": "https://github.com/rust-lang/rust/commit/d65e272a9fe3e61aa5f229c5358e35a909435575"}], "stats": {"total": 61, "additions": 47, "deletions": 14}, "files": [{"sha": "d725afa40521253843e70072e0abf35324f22f9b", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d479ff2ffe75e966fc802505852b1c74f1da95df/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d479ff2ffe75e966fc802505852b1c74f1da95df/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=d479ff2ffe75e966fc802505852b1c74f1da95df", "patch": "@@ -74,7 +74,7 @@ impl<'a> DefCollector<'a> {\n         })\n     }\n \n-    fn visit_macro_invoc(&mut self, id: NodeId) {\n+    pub fn visit_macro_invoc(&mut self, id: NodeId) {\n         self.definitions.set_invocation_parent(id.placeholder_to_expn_id(), self.parent_def);\n     }\n }"}, {"sha": "fe5c85d3a95df8d9e29dea09926caa3bb5428204", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d479ff2ffe75e966fc802505852b1c74f1da95df/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d479ff2ffe75e966fc802505852b1c74f1da95df/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d479ff2ffe75e966fc802505852b1c74f1da95df", "patch": "@@ -161,11 +161,24 @@ impl<'a> Resolver<'a> {\n     }\n \n     crate fn build_reduced_graph(\n-        &mut self, fragment: &AstFragment, parent_scope: ParentScope<'a>\n+        &mut self,\n+        fragment: &AstFragment,\n+        extra_placeholders: &[ExpnId],\n+        parent_scope: ParentScope<'a>,\n     ) -> LegacyScope<'a> {\n-        fragment.visit_with(&mut DefCollector::new(&mut self.definitions, parent_scope.expansion));\n+        let mut def_collector = DefCollector::new(&mut self.definitions, parent_scope.expansion);\n+        fragment.visit_with(&mut def_collector);\n+        for placeholder in extra_placeholders {\n+            def_collector.visit_macro_invoc(NodeId::placeholder_from_expn_id(*placeholder));\n+        }\n+\n         let mut visitor = BuildReducedGraphVisitor { r: self, parent_scope };\n         fragment.visit_with(&mut visitor);\n+        for placeholder in extra_placeholders {\n+            visitor.parent_scope.legacy =\n+                visitor.visit_invoc(NodeId::placeholder_from_expn_id(*placeholder));\n+        }\n+\n         visitor.parent_scope.legacy\n     }\n "}, {"sha": "ff0c14f9cd92407c68b39225fa61a345bbe39f87", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d479ff2ffe75e966fc802505852b1c74f1da95df/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d479ff2ffe75e966fc802505852b1c74f1da95df/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=d479ff2ffe75e966fc802505852b1c74f1da95df", "patch": "@@ -115,23 +115,18 @@ impl<'a> base::Resolver for Resolver<'a> {\n         });\n     }\n \n+\n+\n     fn visit_ast_fragment_with_placeholders(\n         &mut self, expansion: ExpnId, fragment: &AstFragment, derives: &[ExpnId]\n     ) {\n-        // Fill in some data for derives if the fragment is from a derive container.\n+        // Integrate the new AST fragment into all the definition and module structures.\n         // We are inside the `expansion` now, but other parent scope components are still the same.\n         let parent_scope = ParentScope { expansion, ..self.invocation_parent_scopes[&expansion] };\n-        let parent_def = self.definitions.invocation_parent(expansion);\n-        self.invocation_parent_scopes.extend(derives.iter().map(|&derive| (derive, parent_scope)));\n-        for &derive_invoc_id in derives {\n-            self.definitions.set_invocation_parent(derive_invoc_id, parent_def);\n-        }\n-        parent_scope.module.unresolved_invocations.borrow_mut().remove(&expansion);\n-        parent_scope.module.unresolved_invocations.borrow_mut().extend(derives);\n-\n-        // Integrate the new AST fragment into all the definition and module structures.\n-        let output_legacy_scope = self.build_reduced_graph(fragment, parent_scope);\n+        let output_legacy_scope = self.build_reduced_graph(fragment, derives, parent_scope);\n         self.output_legacy_scopes.insert(expansion, output_legacy_scope);\n+\n+        parent_scope.module.unresolved_invocations.borrow_mut().remove(&expansion);\n     }\n \n     fn register_builtin_macro(&mut self, ident: ast::Ident, ext: SyntaxExtension) {"}, {"sha": "d4b67d6b0b07c419a2a72ef63aec4ef7a348473e", "filename": "src/test/ui/proc-macro/auxiliary/gen-macro-rules.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d479ff2ffe75e966fc802505852b1c74f1da95df/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgen-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d479ff2ffe75e966fc802505852b1c74f1da95df/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgen-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgen-macro-rules.rs?ref=d479ff2ffe75e966fc802505852b1c74f1da95df", "patch": "@@ -0,0 +1,12 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_derive(repro)]\n+pub fn proc_macro_hack_expr(_input: TokenStream) -> TokenStream {\n+    \"macro_rules! m {()=>{}}\".parse().unwrap()\n+}"}, {"sha": "13ad27f9372521acd2dfe32f864efd04526ec21e", "filename": "src/test/ui/proc-macro/gen-macro-rules.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d479ff2ffe75e966fc802505852b1c74f1da95df/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d479ff2ffe75e966fc802505852b1c74f1da95df/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules.rs?ref=d479ff2ffe75e966fc802505852b1c74f1da95df", "patch": "@@ -0,0 +1,13 @@\n+// Derive macros can generate `macro_rules` items, regression test for issue #63651.\n+\n+// check-pass\n+// aux-build:gen-macro-rules.rs\n+\n+extern crate gen_macro_rules as repro;\n+\n+#[derive(repro::repro)]\n+pub struct S;\n+\n+m!(); // OK\n+\n+fn main() {}"}]}