{"sha": "4bc963eba67e61507d2069edf10cfec1d7f8ec0a", "node_id": "C_kwDOAAsO6NoAKDRiYzk2M2ViYTY3ZTYxNTA3ZDIwNjllZGYxMGNmZWMxZDdmOGVjMGE", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2023-01-16T23:01:16Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2023-01-16T23:01:16Z"}, "message": "Avoid trivial checks on cleanup control flow in MIR validator", "tree": {"sha": "4fe9e8c46bc9fc5b01a732d57d4e97414b6a12b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fe9e8c46bc9fc5b01a732d57d4e97414b6a12b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bc963eba67e61507d2069edf10cfec1d7f8ec0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bc963eba67e61507d2069edf10cfec1d7f8ec0a", "html_url": "https://github.com/rust-lang/rust/commit/4bc963eba67e61507d2069edf10cfec1d7f8ec0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bc963eba67e61507d2069edf10cfec1d7f8ec0a/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec3d9934103ae33d2116bb5791b38921902c8539", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec3d9934103ae33d2116bb5791b38921902c8539", "html_url": "https://github.com/rust-lang/rust/commit/ec3d9934103ae33d2116bb5791b38921902c8539"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "dd168a9ac3cd3e94078cc20e24fb4c18c4b1b35c", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4bc963eba67e61507d2069edf10cfec1d7f8ec0a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bc963eba67e61507d2069edf10cfec1d7f8ec0a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=4bc963eba67e61507d2069edf10cfec1d7f8ec0a", "patch": "@@ -64,6 +64,7 @@ impl<'tcx> MirPass<'tcx> for Validator {\n             tcx,\n             param_env,\n             mir_phase,\n+            unwind_edge_count: 0,\n             reachable_blocks: traversal::reachable_as_bitset(body),\n             storage_liveness,\n             place_cache: Vec::new(),\n@@ -80,6 +81,7 @@ struct TypeChecker<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     param_env: ParamEnv<'tcx>,\n     mir_phase: MirPhase,\n+    unwind_edge_count: usize,\n     reachable_blocks: BitSet<BasicBlock>,\n     storage_liveness: ResultsCursor<'a, 'tcx, MaybeStorageLive<'static>>,\n     place_cache: Vec<PlaceRef<'tcx>>,\n@@ -104,7 +106,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         );\n     }\n \n-    fn check_edge(&self, location: Location, bb: BasicBlock, edge_kind: EdgeKind) {\n+    fn check_edge(&mut self, location: Location, bb: BasicBlock, edge_kind: EdgeKind) {\n         if bb == START_BLOCK {\n             self.fail(location, \"start block must not have predecessors\")\n         }\n@@ -113,10 +115,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             match (src.is_cleanup, bb.is_cleanup, edge_kind) {\n                 // Non-cleanup blocks can jump to non-cleanup blocks along non-unwind edges\n                 (false, false, EdgeKind::Normal)\n-                // Non-cleanup blocks can jump to cleanup blocks along unwind edges\n-                | (false, true, EdgeKind::Unwind)\n                 // Cleanup blocks can jump to cleanup blocks along non-unwind edges\n                 | (true, true, EdgeKind::Normal) => {}\n+                // Non-cleanup blocks can jump to cleanup blocks along unwind edges\n+                (false, true, EdgeKind::Unwind) => {\n+                    self.unwind_edge_count += 1;\n+                }\n                 // All other jumps are invalid\n                 _ => {\n                     self.fail(\n@@ -137,6 +141,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     }\n \n     fn check_cleanup_control_flow(&self) {\n+        if self.unwind_edge_count <= 1 {\n+            return;\n+        }\n         let doms = self.body.basic_blocks.dominators();\n         let mut post_contract_node = FxHashMap::default();\n         // Reusing the allocation across invocations of the closure\n@@ -196,7 +203,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             stack.clear();\n             stack.insert(bb);\n             loop {\n-                let Some(parent )= parent[bb].take() else {\n+                let Some(parent)= parent[bb].take() else {\n                     break\n                 };\n                 let no_cycle = stack.insert(parent);"}]}