{"sha": "5eb0e08d0feab69f9e5f3b6881bde328a9105c96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYjBlMDhkMGZlYWI2OWY5ZTVmM2I2ODgxYmRlMzI4YTkxMDVjOTY=", "commit": {"author": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2019-05-05T09:21:30Z"}, "committer": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2019-05-05T09:21:30Z"}, "message": "Implement nth_back for RChunks(Exact)(Mut)", "tree": {"sha": "d3bf8e7bdfa772cc0bf4b2cbf6a5c149d66f0d4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3bf8e7bdfa772cc0bf4b2cbf6a5c149d66f0d4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eb0e08d0feab69f9e5f3b6881bde328a9105c96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eb0e08d0feab69f9e5f3b6881bde328a9105c96", "html_url": "https://github.com/rust-lang/rust/commit/5eb0e08d0feab69f9e5f3b6881bde328a9105c96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eb0e08d0feab69f9e5f3b6881bde328a9105c96/comments", "author": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f1bc91803b04caf3e20b3849633bb7ffe6b4074", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f1bc91803b04caf3e20b3849633bb7ffe6b4074", "html_url": "https://github.com/rust-lang/rust/commit/2f1bc91803b04caf3e20b3849633bb7ffe6b4074"}], "stats": {"total": 124, "additions": 124, "deletions": 0}, "files": [{"sha": "f7a7976faecd1d6697100edc7751a1ae26812c30", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/5eb0e08d0feab69f9e5f3b6881bde328a9105c96/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb0e08d0feab69f9e5f3b6881bde328a9105c96/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=5eb0e08d0feab69f9e5f3b6881bde328a9105c96", "patch": "@@ -4643,6 +4643,23 @@ impl<'a, T> DoubleEndedIterator for RChunks<'a, T> {\n             Some(fst)\n         }\n     }\n+\n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n+        let len = self.len();\n+        if n >= len {\n+            self.v = &[];\n+            None\n+        } else {\n+            // can't underflow because `n < len`\n+            let offset_from_end = (len - 1 - n) * self.chunk_size;\n+            let end = self.v.len() - offset_from_end;\n+            let start = end.saturating_sub(self.chunk_size);\n+            let nth_back = &self.v[start..end];\n+            self.v = &self.v[end..];\n+            Some(nth_back)\n+        }\n+    }\n }\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n@@ -4768,6 +4785,24 @@ impl<'a, T> DoubleEndedIterator for RChunksMut<'a, T> {\n             Some(head)\n         }\n     }\n+\n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n+        let len = self.len();\n+        if n >= len {\n+            self.v = &mut [];\n+            None\n+        } else {\n+            // can't underflow because `n < len`\n+            let offset_from_end = (len - 1 - n) * self.chunk_size;\n+            let end = self.v.len() - offset_from_end;\n+            let start = end.saturating_sub(self.chunk_size);\n+            let (tmp, tail) = mem::replace(&mut self.v, &mut []).split_at_mut(end);\n+            let (_, nth_back) = tmp.split_at_mut(start);\n+            self.v = tail;\n+            Some(nth_back)\n+        }\n+    }\n }\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n@@ -4892,6 +4927,24 @@ impl<'a, T> DoubleEndedIterator for RChunksExact<'a, T> {\n             Some(fst)\n         }\n     }\n+\n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n+        let len = self.len();\n+        if n >= len {\n+            self.v = &[];\n+            None\n+        } else {\n+            // now that we know that `n` corresponds to a chunk,\n+            // none of these operations can underflow/overflow\n+            let offset = (len - n) * self.chunk_size;\n+            let start = self.v.len() - offset;\n+            let end = start + self.chunk_size;\n+            let nth_back = &self.v[start..end];\n+            self.v = &self.v[end..];\n+            Some(nth_back)\n+        }\n+    }\n }\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n@@ -5010,6 +5063,25 @@ impl<'a, T> DoubleEndedIterator for RChunksExactMut<'a, T> {\n             Some(head)\n         }\n     }\n+\n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n+        let len = self.len();\n+        if n >= len {\n+            self.v = &mut [];\n+            None\n+        } else {\n+            // now that we know that `n` corresponds to a chunk,\n+            // none of these operations can underflow/overflow\n+            let offset = (len - n) * self.chunk_size;\n+            let start = self.v.len() - offset;\n+            let end = start + self.chunk_size;\n+            let (tmp, tail) = mem::replace(&mut self.v, &mut []).split_at_mut(end);\n+            let (_, nth_back) = tmp.split_at_mut(start);\n+            self.v = tail;\n+            Some(nth_back)\n+        }\n+    }\n }\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]"}, {"sha": "cd520a052a0059a30c36221503d650d954eaf9f5", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5eb0e08d0feab69f9e5f3b6881bde328a9105c96/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb0e08d0feab69f9e5f3b6881bde328a9105c96/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=5eb0e08d0feab69f9e5f3b6881bde328a9105c96", "patch": "@@ -356,6 +356,19 @@ fn test_rchunks_nth() {\n     assert_eq!(c2.next(), None);\n }\n \n+#[test]\n+fn test_rchunks_nth_back() {\n+    let v: &[i32] = &[0, 1, 2, 3, 4, 5];\n+    let mut c = v.rchunks(2);\n+    assert_eq!(c.nth_back(1).unwrap(), &[2, 3]);\n+    assert_eq!(c.next_back().unwrap(), &[4, 5]);\n+\n+    let v2: &[i32] = &[0, 1, 2, 3, 4];\n+    let mut c2 = v2.rchunks(3);\n+    assert_eq!(c2.nth_back(1).unwrap(), &[2, 3, 4]);\n+    assert_eq!(c2.next_back(), None);\n+}\n+\n #[test]\n fn test_rchunks_last() {\n     let v: &[i32] = &[0, 1, 2, 3, 4, 5];\n@@ -407,6 +420,19 @@ fn test_rchunks_mut_nth() {\n     assert_eq!(c2.next(), None);\n }\n \n+#[test]\n+fn test_rchunks_mut_nth_back() {\n+    let v: &mut [i32] = &mut [0, 1, 2, 3, 4, 5];\n+    let mut c = v.rchunks_mut(2);\n+    assert_eq!(c.nth_back(1).unwrap(), &[2, 3]);\n+    assert_eq!(c.next_back().unwrap(), &[4, 5]);\n+\n+    let v2: &mut [i32] = &mut [0, 1, 2, 3, 4];\n+    let mut c2 = v2.rchunks_mut(3);\n+    assert_eq!(c2.nth_back(1).unwrap(), &[2, 3, 4]);\n+    assert_eq!(c2.next_back(), None);\n+}\n+\n #[test]\n fn test_rchunks_mut_last() {\n     let v: &mut [i32] = &mut [0, 1, 2, 3, 4, 5];\n@@ -460,6 +486,19 @@ fn test_rchunks_exact_nth() {\n     assert_eq!(c2.next(), None);\n }\n \n+#[test]\n+fn test_rchunks_exact_nth_back() {\n+    let v: &[i32] = &[0, 1, 2, 3, 4, 5];\n+    let mut c = v.rchunks_exact(2);\n+    assert_eq!(c.nth_back(1).unwrap(), &[2, 3]);\n+    assert_eq!(c.next_back().unwrap(), &[4, 5]);\n+\n+    let v2: &[i32] = &[0, 1, 2, 3, 4, 5, 6];\n+    let mut c2 = v2.rchunks_exact(3);\n+    assert_eq!(c2.nth_back(1).unwrap(), &[4, 5, 6]);\n+    assert_eq!(c2.next(), None);\n+}\n+\n #[test]\n fn test_rchunks_exact_last() {\n     let v: &[i32] = &[0, 1, 2, 3, 4, 5];\n@@ -518,6 +557,19 @@ fn test_rchunks_exact_mut_nth() {\n     assert_eq!(c2.next(), None);\n }\n \n+#[test]\n+fn test_rchunks_exact_mut_nth_back() {\n+    let v: &mut [i32] = &mut [0, 1, 2, 3, 4, 5];\n+    let mut c = v.rchunks_exact_mut(2);\n+    assert_eq!(c.nth_back(1).unwrap(), &[2, 3]);\n+    assert_eq!(c.next_back().unwrap(), &[4, 5]);\n+\n+    let v2: &mut [i32] = &mut [0, 1, 2, 3, 4, 5, 6];\n+    let mut c2 = v2.rchunks_exact_mut(3);\n+    assert_eq!(c2.nth_back(1).unwrap(), &[4, 5, 6]);\n+    assert_eq!(c2.next(), None);\n+}\n+\n #[test]\n fn test_rchunks_exact_mut_last() {\n     let v: &mut [i32] = &mut [0, 1, 2, 3, 4, 5];"}]}