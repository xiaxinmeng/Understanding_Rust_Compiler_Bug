{"sha": "7e0441dc36d293ed93a41b93ddfa0ace05dec28b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMDQ0MWRjMzZkMjkzZWQ5M2E0MWI5M2RkZmEwYWNlMDVkZWMyOGI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-15T02:02:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-15T02:02:51Z"}, "message": "Rollup merge of #78969 - tmiasko:normalize, r=davidtwco\n\nNormalize function type during validation\n\nDuring inlining, the callee body is normalized and has types revealed,\nbut some of locals corresponding to the arguments might come from the\ncaller body which is not. As a result the caller body does not pass\nvalidation without additional normalization.\n\nCloses #78442.", "tree": {"sha": "83bce5b691699fce9eaa2fba9bdc2fe6511397e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83bce5b691699fce9eaa2fba9bdc2fe6511397e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e0441dc36d293ed93a41b93ddfa0ace05dec28b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfsIxLCRBK7hj4Ov3rIwAAdHIIAFl8SES12ujyybAKTPLJn/Pn\n8PqH37dtlhkGPWe9GmXUCpgwpL+IVm3vNLLg5HVv1ZkL7hG37fMrP04dtui9DG6A\nYx5RLGAroD2MEppFqScRS4A6Xq314L84hwGlGFY9u1VvJqLe11Od9xos1krM3Dej\n6gQHTbSwLqc276omGd/PdUXynpiyCJq3VISJ+QAwCG9B00xC+skAh12HR6JBsOg3\na+jqQ1AWDMdFzQ46nxLyGWRPVcLEn6Ds6Rya9I7VeaXtmiSI5mJ1hZEKG8nMeTI5\n3CxnWVcIESEVvbfwuqyHEwT+VnYAP8OZl2MYjCWrgIyP60TYW9tuzbTqAUxKDqo=\n=lqL3\n-----END PGP SIGNATURE-----\n", "payload": "tree 83bce5b691699fce9eaa2fba9bdc2fe6511397e2\nparent 3fe2abafe53b68447cc47b2c19d3a98cfeed0aff\nparent 99be78d135e73197e04221c139a219ea6436e72a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1605405771 +0100\ncommitter GitHub <noreply@github.com> 1605405771 +0100\n\nRollup merge of #78969 - tmiasko:normalize, r=davidtwco\n\nNormalize function type during validation\n\nDuring inlining, the callee body is normalized and has types revealed,\nbut some of locals corresponding to the arguments might come from the\ncaller body which is not. As a result the caller body does not pass\nvalidation without additional normalization.\n\nCloses #78442.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e0441dc36d293ed93a41b93ddfa0ace05dec28b", "html_url": "https://github.com/rust-lang/rust/commit/7e0441dc36d293ed93a41b93ddfa0ace05dec28b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e0441dc36d293ed93a41b93ddfa0ace05dec28b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fe2abafe53b68447cc47b2c19d3a98cfeed0aff", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fe2abafe53b68447cc47b2c19d3a98cfeed0aff", "html_url": "https://github.com/rust-lang/rust/commit/3fe2abafe53b68447cc47b2c19d3a98cfeed0aff"}, {"sha": "99be78d135e73197e04221c139a219ea6436e72a", "url": "https://api.github.com/repos/rust-lang/rust/commits/99be78d135e73197e04221c139a219ea6436e72a", "html_url": "https://github.com/rust-lang/rust/commit/99be78d135e73197e04221c139a219ea6436e72a"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "876ecee80c6a1222b17a3ba799914e0a5724770f", "filename": "compiler/rustc_mir/src/transform/validate.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7e0441dc36d293ed93a41b93ddfa0ace05dec28b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0441dc36d293ed93a41b93ddfa0ace05dec28b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs?ref=7e0441dc36d293ed93a41b93ddfa0ace05dec28b", "patch": "@@ -38,7 +38,9 @@ pub struct Validator {\n impl<'tcx> MirPass<'tcx> for Validator {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let def_id = body.source.def_id();\n-        let param_env = tcx.param_env(def_id);\n+        // We need to param_env_reveal_all_normalized, as some optimizations\n+        // change types in ways that require unfolding opaque types.\n+        let param_env = tcx.param_env_reveal_all_normalized(def_id);\n         let mir_phase = self.mir_phase;\n \n         let always_live_locals = AlwaysLiveLocals::new(body);\n@@ -79,7 +81,6 @@ pub fn equal_up_to_regions(\n     }\n \n     // Normalize lifetimes away on both sides, then compare.\n-    let param_env = param_env.with_reveal_all_normalized(tcx);\n     let normalize = |ty: Ty<'tcx>| {\n         tcx.normalize_erasing_regions(\n             param_env,\n@@ -167,17 +168,14 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             return true;\n         }\n         // Normalize projections and things like that.\n-        // FIXME: We need to reveal_all, as some optimizations change types in ways\n-        // that require unfolding opaque types.\n-        let param_env = self.param_env.with_reveal_all_normalized(self.tcx);\n-        let src = self.tcx.normalize_erasing_regions(param_env, src);\n-        let dest = self.tcx.normalize_erasing_regions(param_env, dest);\n+        let src = self.tcx.normalize_erasing_regions(self.param_env, src);\n+        let dest = self.tcx.normalize_erasing_regions(self.param_env, dest);\n \n         // Type-changing assignments can happen when subtyping is used. While\n         // all normal lifetimes are erased, higher-ranked types with their\n         // late-bound lifetimes are still around and can lead to type\n         // differences. So we compare ignoring lifetimes.\n-        equal_up_to_regions(self.tcx, param_env, src, dest)\n+        equal_up_to_regions(self.tcx, self.param_env, src, dest)\n     }\n }\n \n@@ -358,6 +356,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             }\n             TerminatorKind::Call { func, args, destination, cleanup, .. } => {\n                 let func_ty = func.ty(&self.body.local_decls, self.tcx);\n+                let func_ty = self.tcx.normalize_erasing_regions(self.param_env, func_ty);\n                 match func_ty.kind() {\n                     ty::FnPtr(..) | ty::FnDef(..) => {}\n                     _ => self.fail("}, {"sha": "f3a51b415facac0719b55f2e6f27f624def40e4b", "filename": "src/test/ui/issues/issue-50865-private-impl-trait/auxiliary/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e0441dc36d293ed93a41b93ddfa0ace05dec28b/src%2Ftest%2Fui%2Fissues%2Fissue-50865-private-impl-trait%2Fauxiliary%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0441dc36d293ed93a41b93ddfa0ace05dec28b/src%2Ftest%2Fui%2Fissues%2Fissue-50865-private-impl-trait%2Fauxiliary%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50865-private-impl-trait%2Fauxiliary%2Flib.rs?ref=7e0441dc36d293ed93a41b93ddfa0ace05dec28b", "patch": "@@ -1,7 +1,3 @@\n-// revisions: default miropt\n-//[miropt]compile-flags: -Z mir-opt-level=2\n-// ~^ This flag is for #77668, it used to be ICE.\n-\n #![crate_type = \"lib\"]\n \n pub fn bar<P>( // Error won't happen if \"bar\" is not generic"}, {"sha": "ccb279f7fa212c076a65348238bba678d7bc94f7", "filename": "src/test/ui/mir/mir-inlining/ice-issue-77306-1.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7e0441dc36d293ed93a41b93ddfa0ace05dec28b/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77306-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0441dc36d293ed93a41b93ddfa0ace05dec28b/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77306-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77306-1.rs?ref=7e0441dc36d293ed93a41b93ddfa0ace05dec28b", "patch": "@@ -1,17 +1,27 @@\n-// run-pass\n+// Regression test for various issues related to normalization & inlining.\n+// * #68347, #77306, #77668 - missed normalization during inlining.\n+// * #78442 - missed normalization in validator after inlining.\n+//\n+// build-pass\n // compile-flags:-Zmir-opt-level=2\n \n-// Previously ICEd because we did not normalize during inlining,\n-// see https://github.com/rust-lang/rust/pull/77306 for more discussion.\n-\n pub fn write() {\n     create()()\n }\n \n+pub fn write_generic<T>(_t: T) {\n+    hide()();\n+}\n+\n pub fn create() -> impl FnOnce() {\n    || ()\n }\n \n+pub fn hide() -> impl Fn() {\n+    write\n+}\n+\n fn main() {\n     write();\n+    write_generic(());\n }"}]}