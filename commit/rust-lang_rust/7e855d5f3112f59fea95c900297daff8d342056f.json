{"sha": "7e855d5f3112f59fea95c900297daff8d342056f", "node_id": "C_kwDOAAsO6NoAKDdlODU1ZDVmMzExMmY1OWZlYTk1YzkwMDI5N2RhZmY4ZDM0MjA1NmY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-01-30T04:39:22Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-21T00:51:56Z"}, "message": "Use `ThinVec` in a few more AST types.", "tree": {"sha": "de330d738da96d476acb36ff33b2d09873fd9566", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de330d738da96d476acb36ff33b2d09873fd9566"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e855d5f3112f59fea95c900297daff8d342056f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e855d5f3112f59fea95c900297daff8d342056f", "html_url": "https://github.com/rust-lang/rust/commit/7e855d5f3112f59fea95c900297daff8d342056f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e855d5f3112f59fea95c900297daff8d342056f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "549f1c60af3bdd0e1e6929870d64b716e4e5c8e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5", "html_url": "https://github.com/rust-lang/rust/commit/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5"}], "stats": {"total": 141, "additions": 72, "deletions": 69}, "files": [{"sha": "03c375c46668ab6a12b3c19e6fd48a0e0db3569a", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e855d5f3112f59fea95c900297daff8d342056f/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e855d5f3112f59fea95c900297daff8d342056f/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=7e855d5f3112f59fea95c900297daff8d342056f", "patch": "@@ -471,7 +471,7 @@ pub struct WhereEqPredicate {\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct Crate {\n     pub attrs: AttrVec,\n-    pub items: Vec<P<Item>>,\n+    pub items: ThinVec<P<Item>>,\n     pub spans: ModSpans,\n     /// Must be equal to `CRATE_NODE_ID` after the crate root is expanded, but may hold\n     /// expansion placeholders or an unassigned value (`DUMMY_NODE_ID`) before that.\n@@ -1357,7 +1357,7 @@ pub enum StructRest {\n pub struct StructExpr {\n     pub qself: Option<P<QSelf>>,\n     pub path: Path,\n-    pub fields: Vec<ExprField>,\n+    pub fields: ThinVec<ExprField>,\n     pub rest: StructRest,\n }\n \n@@ -2475,7 +2475,7 @@ pub enum ModKind {\n     /// or with definition outlined to a separate file `mod foo;` and already loaded from it.\n     /// The inner span is from the first token past `{` to the last token until `}`,\n     /// or from the first to the last token in the loaded file.\n-    Loaded(Vec<P<Item>>, Inline, ModSpans),\n+    Loaded(ThinVec<P<Item>>, Inline, ModSpans),\n     /// Module with definition outlined to a separate file `mod foo;` but not yet loaded from it.\n     Unloaded,\n }\n@@ -2502,7 +2502,7 @@ pub struct ForeignMod {\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct EnumDef {\n-    pub variants: Vec<Variant>,\n+    pub variants: ThinVec<Variant>,\n }\n /// Enum variant.\n #[derive(Clone, Encodable, Decodable, Debug)]\n@@ -3122,8 +3122,8 @@ mod size_asserts {\n     static_assert_size!(GenericBound, 56);\n     static_assert_size!(Generics, 40);\n     static_assert_size!(Impl, 136);\n-    static_assert_size!(Item, 144);\n-    static_assert_size!(ItemKind, 72);\n+    static_assert_size!(Item, 136);\n+    static_assert_size!(ItemKind, 64);\n     static_assert_size!(LitKind, 24);\n     static_assert_size!(Local, 72);\n     static_assert_size!(MetaItemLit, 40);"}, {"sha": "dfee2d3ce77d7983245a835b213670fd93943078", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e855d5f3112f59fea95c900297daff8d342056f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e855d5f3112f59fea95c900297daff8d342056f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=7e855d5f3112f59fea95c900297daff8d342056f", "patch": "@@ -200,7 +200,7 @@ fn cs_clone(\n                     let call = subcall(cx, field);\n                     cx.field_imm(field.span, ident, call)\n                 })\n-                .collect::<Vec<_>>();\n+                .collect::<ThinVec<_>>();\n \n             cx.expr_struct(trait_span, ctor_path, fields)\n         }"}, {"sha": "e02c7e6c01b7e5570daea34e5b112bd4eefdf478", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e855d5f3112f59fea95c900297daff8d342056f/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e855d5f3112f59fea95c900297daff8d342056f/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=7e855d5f3112f59fea95c900297daff8d342056f", "patch": "@@ -249,14 +249,14 @@ pub fn expand_test_or_bench(\n                 cx.expr_struct(\n                     sp,\n                     test_path(\"TestDescAndFn\"),\n-                    vec![\n+                    thin_vec![\n                         // desc: test::TestDesc {\n                         field(\n                             \"desc\",\n                             cx.expr_struct(\n                                 sp,\n                                 test_path(\"TestDesc\"),\n-                                vec![\n+                                thin_vec![\n                                     // name: \"path::to::test\"\n                                     field(\n                                         \"name\","}, {"sha": "8a78c3296f9cfdc5e86cbf9dc97701385d9a6b78", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e855d5f3112f59fea95c900297daff8d342056f/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e855d5f3112f59fea95c900297daff8d342056f/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=7e855d5f3112f59fea95c900297daff8d342056f", "patch": "@@ -323,7 +323,7 @@ impl<'a> ExtCtxt<'a> {\n         &self,\n         span: Span,\n         path: ast::Path,\n-        fields: Vec<ast::ExprField>,\n+        fields: ThinVec<ast::ExprField>,\n     ) -> P<ast::Expr> {\n         self.expr(\n             span,\n@@ -339,7 +339,7 @@ impl<'a> ExtCtxt<'a> {\n         &self,\n         span: Span,\n         id: Ident,\n-        fields: Vec<ast::ExprField>,\n+        fields: ThinVec<ast::ExprField>,\n     ) -> P<ast::Expr> {\n         self.expr_struct(span, self.path_ident(span, id), fields)\n     }"}, {"sha": "01500c2c77c90aac5a2ac28a6da84abdfa724461", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e855d5f3112f59fea95c900297daff8d342056f/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e855d5f3112f59fea95c900297daff8d342056f/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=7e855d5f3112f59fea95c900297daff8d342056f", "patch": "@@ -24,6 +24,7 @@ use rustc_session::Session;\n use rustc_span::edition::{Edition, ALL_EDITIONS};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n+use thin_vec::ThinVec;\n \n /// A folder that strips out items that do not belong in the current configuration.\n pub struct StripUnconfigured<'a> {\n@@ -206,7 +207,7 @@ pub fn features(\n         None => {\n             // The entire crate is unconfigured.\n             krate.attrs = ast::AttrVec::new();\n-            krate.items = Vec::new();\n+            krate.items = ThinVec::new();\n             Features::default()\n         }\n         Some(attrs) => {"}, {"sha": "3779af19e122f1b81cb9123b4de2c2372d22b8d8", "filename": "compiler/rustc_expand/src/module.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e855d5f3112f59fea95c900297daff8d342056f/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e855d5f3112f59fea95c900297daff8d342056f/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs?ref=7e855d5f3112f59fea95c900297daff8d342056f", "patch": "@@ -12,8 +12,8 @@ use rustc_session::Session;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use std::iter::once;\n-\n use std::path::{self, Path, PathBuf};\n+use thin_vec::ThinVec;\n \n #[derive(Copy, Clone)]\n pub enum DirOwnership {\n@@ -31,7 +31,7 @@ pub struct ModulePathSuccess {\n }\n \n pub(crate) struct ParsedExternalMod {\n-    pub items: Vec<P<Item>>,\n+    pub items: ThinVec<P<Item>>,\n     pub spans: ModSpans,\n     pub file_path: PathBuf,\n     pub dir_path: PathBuf,"}, {"sha": "12f65a436e3be6078d2c21c1432afd23f1349b27", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e855d5f3112f59fea95c900297daff8d342056f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e855d5f3112f59fea95c900297daff8d342056f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=7e855d5f3112f59fea95c900297daff8d342056f", "patch": "@@ -2935,8 +2935,8 @@ impl<'a> Parser<'a> {\n         pth: ast::Path,\n         recover: bool,\n         close_delim: Delimiter,\n-    ) -> PResult<'a, (Vec<ExprField>, ast::StructRest, bool)> {\n-        let mut fields = Vec::new();\n+    ) -> PResult<'a, (ThinVec<ExprField>, ast::StructRest, bool)> {\n+        let mut fields = ThinVec::new();\n         let mut base = ast::StructRest::None;\n         let mut recover_async = false;\n "}, {"sha": "c0aed6a3789a77e0b1f2b5a889aa36332cd0b080", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e855d5f3112f59fea95c900297daff8d342056f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e855d5f3112f59fea95c900297daff8d342056f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=7e855d5f3112f59fea95c900297daff8d342056f", "patch": "@@ -56,12 +56,12 @@ impl<'a> Parser<'a> {\n     pub fn parse_mod(\n         &mut self,\n         term: &TokenKind,\n-    ) -> PResult<'a, (AttrVec, Vec<P<Item>>, ModSpans)> {\n+    ) -> PResult<'a, (AttrVec, ThinVec<P<Item>>, ModSpans)> {\n         let lo = self.token.span;\n         let attrs = self.parse_inner_attributes()?;\n \n         let post_attr_lo = self.token.span;\n-        let mut items = vec![];\n+        let mut items = ThinVec::new();\n         while let Some(item) = self.parse_item(ForceCollect::No)? {\n             items.push(item);\n             self.maybe_consume_incorrect_semicolon(&items);"}, {"sha": "af9a154a6aea607c7bd834d583ce9779e691155f", "filename": "src/tools/rustfmt/src/modules.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7e855d5f3112f59fea95c900297daff8d342056f/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e855d5f3112f59fea95c900297daff8d342056f/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs?ref=7e855d5f3112f59fea95c900297daff8d342056f", "patch": "@@ -6,6 +6,7 @@ use rustc_ast::ast;\n use rustc_ast::visit::Visitor;\n use rustc_span::symbol::{self, sym, Symbol};\n use rustc_span::Span;\n+use thin_vec::ThinVec;\n use thiserror::Error;\n \n use crate::attr::MetaVisitor;\n@@ -25,7 +26,7 @@ type FileModMap<'ast> = BTreeMap<FileName, Module<'ast>>;\n #[derive(Debug, Clone)]\n pub(crate) struct Module<'a> {\n     ast_mod_kind: Option<Cow<'a, ast::ModKind>>,\n-    pub(crate) items: Cow<'a, Vec<rustc_ast::ptr::P<ast::Item>>>,\n+    pub(crate) items: Cow<'a, ThinVec<rustc_ast::ptr::P<ast::Item>>>,\n     inner_attr: ast::AttrVec,\n     pub(crate) span: Span,\n }\n@@ -34,7 +35,7 @@ impl<'a> Module<'a> {\n     pub(crate) fn new(\n         mod_span: Span,\n         ast_mod_kind: Option<Cow<'a, ast::ModKind>>,\n-        mod_items: Cow<'a, Vec<rustc_ast::ptr::P<ast::Item>>>,\n+        mod_items: Cow<'a, ThinVec<rustc_ast::ptr::P<ast::Item>>>,\n         mod_attrs: Cow<'a, ast::AttrVec>,\n     ) -> Self {\n         let inner_attr = mod_attrs\n@@ -157,7 +158,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                     Module::new(\n                         module_item.item.span,\n                         Some(Cow::Owned(sub_mod_kind.clone())),\n-                        Cow::Owned(vec![]),\n+                        Cow::Owned(ThinVec::new()),\n                         Cow::Owned(ast::AttrVec::new()),\n                     ),\n                 )?;\n@@ -169,7 +170,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n     /// Visit modules defined inside macro calls.\n     fn visit_mod_outside_ast(\n         &mut self,\n-        items: Vec<rustc_ast::ptr::P<ast::Item>>,\n+        items: ThinVec<rustc_ast::ptr::P<ast::Item>>,\n     ) -> Result<(), ModuleResolutionError> {\n         for item in items {\n             if is_cfg_if(&item) {\n@@ -184,7 +185,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                     Module::new(\n                         span,\n                         Some(Cow::Owned(sub_mod_kind.clone())),\n-                        Cow::Owned(vec![]),\n+                        Cow::Owned(ThinVec::new()),\n                         Cow::Owned(ast::AttrVec::new()),\n                     ),\n                 )?;\n@@ -210,7 +211,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                     Module::new(\n                         span,\n                         Some(Cow::Borrowed(sub_mod_kind)),\n-                        Cow::Owned(vec![]),\n+                        Cow::Owned(ThinVec::new()),\n                         Cow::Borrowed(&item.attrs),\n                     ),\n                 )?;"}, {"sha": "7ab042506bd29e813f0872dab0c0dec9bfca5cd1", "filename": "src/tools/rustfmt/src/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e855d5f3112f59fea95c900297daff8d342056f/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e855d5f3112f59fea95c900297daff8d342056f/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fparser.rs?ref=7e855d5f3112f59fea95c900297daff8d342056f", "patch": "@@ -6,6 +6,7 @@ use rustc_ast::{ast, ptr};\n use rustc_errors::Diagnostic;\n use rustc_parse::{new_parser_from_file, parser::Parser as RawParser};\n use rustc_span::{sym, Span};\n+use thin_vec::ThinVec;\n \n use crate::attr::first_attr_value_str_by_name;\n use crate::parse::session::ParseSess;\n@@ -109,7 +110,7 @@ impl<'a> Parser<'a> {\n         sess: &'a ParseSess,\n         path: &Path,\n         span: Span,\n-    ) -> Result<(ast::AttrVec, Vec<ptr::P<ast::Item>>, Span), ParserError> {\n+    ) -> Result<(ast::AttrVec, ThinVec<ptr::P<ast::Item>>, Span), ParserError> {\n         let result = catch_unwind(AssertUnwindSafe(|| {\n             let mut parser = new_parser_from_file(sess.inner(), path, Some(span));\n             match parser.parse_mod(&TokenKind::Eof) {"}, {"sha": "ee62d8f2d25ce5c204d89253c7c8ad900ae3dfdd", "filename": "tests/ui/stats/hir-stats.stderr", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/7e855d5f3112f59fea95c900297daff8d342056f/tests%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e855d5f3112f59fea95c900297daff8d342056f/tests%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstats%2Fhir-stats.stderr?ref=7e855d5f3112f59fea95c900297daff8d342056f", "patch": "@@ -3,67 +3,67 @@ ast-stats-1 Name                Accumulated Size         Count     Item Size\n ast-stats-1 ----------------------------------------------------------------\n ast-stats-1 GenericArgs               40 ( 0.6%)             1            40\n ast-stats-1 - AngleBracketed            40 ( 0.6%)             1\n+ast-stats-1 Crate                     40 ( 0.6%)             1            40\n ast-stats-1 ExprField                 48 ( 0.7%)             1            48\n-ast-stats-1 WherePredicate            56 ( 0.8%)             1            56\n-ast-stats-1 - BoundPredicate            56 ( 0.8%)             1\n-ast-stats-1 Crate                     56 ( 0.8%)             1            56\n+ast-stats-1 WherePredicate            56 ( 0.9%)             1            56\n+ast-stats-1 - BoundPredicate            56 ( 0.9%)             1\n ast-stats-1 Attribute                 64 ( 1.0%)             2            32\n ast-stats-1 - Normal                    32 ( 0.5%)             1\n ast-stats-1 - DocComment                32 ( 0.5%)             1\n ast-stats-1 Local                     72 ( 1.1%)             1            72\n-ast-stats-1 Arm                       96 ( 1.4%)             2            48\n-ast-stats-1 ForeignItem               96 ( 1.4%)             1            96\n-ast-stats-1 - Fn                        96 ( 1.4%)             1\n+ast-stats-1 Arm                       96 ( 1.5%)             2            48\n+ast-stats-1 ForeignItem               96 ( 1.5%)             1            96\n+ast-stats-1 - Fn                        96 ( 1.5%)             1\n ast-stats-1 FnDecl                   120 ( 1.8%)             5            24\n ast-stats-1 FieldDef                 160 ( 2.4%)             2            80\n ast-stats-1 Stmt                     160 ( 2.4%)             5            32\n ast-stats-1 - Local                     32 ( 0.5%)             1\n ast-stats-1 - MacCall                   32 ( 0.5%)             1\n-ast-stats-1 - Expr                      96 ( 1.4%)             3\n+ast-stats-1 - Expr                      96 ( 1.5%)             3\n ast-stats-1 Param                    160 ( 2.4%)             4            40\n ast-stats-1 Block                    192 ( 2.9%)             6            32\n-ast-stats-1 Variant                  208 ( 3.1%)             2           104\n+ast-stats-1 Variant                  208 ( 3.2%)             2           104\n ast-stats-1 GenericBound             224 ( 3.4%)             4            56\n ast-stats-1 - Trait                    224 ( 3.4%)             4\n ast-stats-1 AssocItem                416 ( 6.3%)             4           104\n-ast-stats-1 - Type                     208 ( 3.1%)             2\n-ast-stats-1 - Fn                       208 ( 3.1%)             2\n-ast-stats-1 GenericParam             480 ( 7.2%)             5            96\n-ast-stats-1 Pat                      504 ( 7.6%)             7            72\n+ast-stats-1 - Type                     208 ( 3.2%)             2\n+ast-stats-1 - Fn                       208 ( 3.2%)             2\n+ast-stats-1 GenericParam             480 ( 7.3%)             5            96\n+ast-stats-1 Pat                      504 ( 7.7%)             7            72\n ast-stats-1 - Struct                    72 ( 1.1%)             1\n ast-stats-1 - Wild                      72 ( 1.1%)             1\n-ast-stats-1 - Ident                    360 ( 5.4%)             5\n-ast-stats-1 Expr                     576 ( 8.7%)             8            72\n+ast-stats-1 - Ident                    360 ( 5.5%)             5\n+ast-stats-1 Expr                     576 ( 8.8%)             8            72\n ast-stats-1 - Path                      72 ( 1.1%)             1\n ast-stats-1 - Match                     72 ( 1.1%)             1\n ast-stats-1 - Struct                    72 ( 1.1%)             1\n ast-stats-1 - Lit                      144 ( 2.2%)             2\n ast-stats-1 - Block                    216 ( 3.3%)             3\n-ast-stats-1 PathSegment              720 (10.8%)            30            24\n-ast-stats-1 Ty                       896 (13.5%)            14            64\n+ast-stats-1 PathSegment              720 (11.0%)            30            24\n+ast-stats-1 Ty                       896 (13.7%)            14            64\n ast-stats-1 - Ptr                       64 ( 1.0%)             1\n ast-stats-1 - Ref                       64 ( 1.0%)             1\n-ast-stats-1 - ImplicitSelf             128 ( 1.9%)             2\n-ast-stats-1 - Path                     640 ( 9.6%)            10\n-ast-stats-1 Item                   1_296 (19.5%)             9           144\n-ast-stats-1 - Trait                    144 ( 2.2%)             1\n-ast-stats-1 - Enum                     144 ( 2.2%)             1\n-ast-stats-1 - ForeignMod               144 ( 2.2%)             1\n-ast-stats-1 - Impl                     144 ( 2.2%)             1\n-ast-stats-1 - Fn                       288 ( 4.3%)             2\n-ast-stats-1 - Use                      432 ( 6.5%)             3\n+ast-stats-1 - ImplicitSelf             128 ( 2.0%)             2\n+ast-stats-1 - Path                     640 ( 9.8%)            10\n+ast-stats-1 Item                   1_224 (18.7%)             9           136\n+ast-stats-1 - Trait                    136 ( 2.1%)             1\n+ast-stats-1 - Enum                     136 ( 2.1%)             1\n+ast-stats-1 - ForeignMod               136 ( 2.1%)             1\n+ast-stats-1 - Impl                     136 ( 2.1%)             1\n+ast-stats-1 - Fn                       272 ( 4.2%)             2\n+ast-stats-1 - Use                      408 ( 6.2%)             3\n ast-stats-1 ----------------------------------------------------------------\n-ast-stats-1 Total                  6_640\n+ast-stats-1 Total                  6_552\n ast-stats-1\n ast-stats-2 POST EXPANSION AST STATS\n ast-stats-2 Name                Accumulated Size         Count     Item Size\n ast-stats-2 ----------------------------------------------------------------\n ast-stats-2 GenericArgs               40 ( 0.6%)             1            40\n ast-stats-2 - AngleBracketed            40 ( 0.6%)             1\n+ast-stats-2 Crate                     40 ( 0.6%)             1            40\n ast-stats-2 ExprField                 48 ( 0.7%)             1            48\n ast-stats-2 WherePredicate            56 ( 0.8%)             1            56\n ast-stats-2 - BoundPredicate            56 ( 0.8%)             1\n-ast-stats-2 Crate                     56 ( 0.8%)             1            56\n ast-stats-2 Local                     72 ( 1.0%)             1            72\n ast-stats-2 Arm                       96 ( 1.3%)             2            48\n ast-stats-2 ForeignItem               96 ( 1.3%)             1            96\n@@ -79,41 +79,41 @@ ast-stats-2 - Local                     32 ( 0.4%)             1\n ast-stats-2 - Semi                      32 ( 0.4%)             1\n ast-stats-2 - Expr                      96 ( 1.3%)             3\n ast-stats-2 Param                    160 ( 2.2%)             4            40\n-ast-stats-2 Block                    192 ( 2.6%)             6            32\n+ast-stats-2 Block                    192 ( 2.7%)             6            32\n ast-stats-2 Variant                  208 ( 2.9%)             2           104\n ast-stats-2 GenericBound             224 ( 3.1%)             4            56\n ast-stats-2 - Trait                    224 ( 3.1%)             4\n-ast-stats-2 AssocItem                416 ( 5.7%)             4           104\n+ast-stats-2 AssocItem                416 ( 5.8%)             4           104\n ast-stats-2 - Type                     208 ( 2.9%)             2\n ast-stats-2 - Fn                       208 ( 2.9%)             2\n-ast-stats-2 GenericParam             480 ( 6.6%)             5            96\n-ast-stats-2 Pat                      504 ( 6.9%)             7            72\n+ast-stats-2 GenericParam             480 ( 6.7%)             5            96\n+ast-stats-2 Pat                      504 ( 7.0%)             7            72\n ast-stats-2 - Struct                    72 ( 1.0%)             1\n ast-stats-2 - Wild                      72 ( 1.0%)             1\n ast-stats-2 - Ident                    360 ( 5.0%)             5\n-ast-stats-2 Expr                     648 ( 8.9%)             9            72\n+ast-stats-2 Expr                     648 ( 9.1%)             9            72\n ast-stats-2 - Path                      72 ( 1.0%)             1\n ast-stats-2 - Match                     72 ( 1.0%)             1\n ast-stats-2 - Struct                    72 ( 1.0%)             1\n ast-stats-2 - InlineAsm                 72 ( 1.0%)             1\n ast-stats-2 - Lit                      144 ( 2.0%)             2\n ast-stats-2 - Block                    216 ( 3.0%)             3\n-ast-stats-2 PathSegment              792 (10.9%)            33            24\n-ast-stats-2 Ty                       896 (12.3%)            14            64\n+ast-stats-2 PathSegment              792 (11.1%)            33            24\n+ast-stats-2 Ty                       896 (12.5%)            14            64\n ast-stats-2 - Ptr                       64 ( 0.9%)             1\n ast-stats-2 - Ref                       64 ( 0.9%)             1\n ast-stats-2 - ImplicitSelf             128 ( 1.8%)             2\n-ast-stats-2 - Path                     640 ( 8.8%)            10\n-ast-stats-2 Item                   1_584 (21.8%)            11           144\n-ast-stats-2 - Trait                    144 ( 2.0%)             1\n-ast-stats-2 - Enum                     144 ( 2.0%)             1\n-ast-stats-2 - ExternCrate              144 ( 2.0%)             1\n-ast-stats-2 - ForeignMod               144 ( 2.0%)             1\n-ast-stats-2 - Impl                     144 ( 2.0%)             1\n-ast-stats-2 - Fn                       288 ( 4.0%)             2\n-ast-stats-2 - Use                      576 ( 7.9%)             4\n+ast-stats-2 - Path                     640 ( 8.9%)            10\n+ast-stats-2 Item                   1_496 (20.9%)            11           136\n+ast-stats-2 - Trait                    136 ( 1.9%)             1\n+ast-stats-2 - Enum                     136 ( 1.9%)             1\n+ast-stats-2 - ExternCrate              136 ( 1.9%)             1\n+ast-stats-2 - ForeignMod               136 ( 1.9%)             1\n+ast-stats-2 - Impl                     136 ( 1.9%)             1\n+ast-stats-2 - Fn                       272 ( 3.8%)             2\n+ast-stats-2 - Use                      544 ( 7.6%)             4\n ast-stats-2 ----------------------------------------------------------------\n-ast-stats-2 Total                  7_256\n+ast-stats-2 Total                  7_152\n ast-stats-2\n hir-stats HIR STATS\n hir-stats Name                Accumulated Size         Count     Item Size"}]}