{"sha": "b66db7e4e04ba039967b659473595a13409e0b18", "node_id": "C_kwDOAAsO6NoAKGI2NmRiN2U0ZTA0YmEwMzk5NjdiNjU5NDczNTk1YTEzNDA5ZTBiMTg", "commit": {"author": {"name": "Celina G. Val", "email": "celinval@amazon.com", "date": "2023-03-04T01:08:49Z"}, "committer": {"name": "Celina G. Val", "email": "celinval@amazon.com", "date": "2023-03-07T05:57:46Z"}, "message": "Create new rustc_smir struct to map future crates\n\n+ Add some information to the README.md", "tree": {"sha": "e2c04cd92b82642093b5165e98eacad5ef000a76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2c04cd92b82642093b5165e98eacad5ef000a76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b66db7e4e04ba039967b659473595a13409e0b18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b66db7e4e04ba039967b659473595a13409e0b18", "html_url": "https://github.com/rust-lang/rust/commit/b66db7e4e04ba039967b659473595a13409e0b18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b66db7e4e04ba039967b659473595a13409e0b18/comments", "author": {"login": "celinval", "id": 35149715, "node_id": "MDQ6VXNlcjM1MTQ5NzE1", "avatar_url": "https://avatars.githubusercontent.com/u/35149715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/celinval", "html_url": "https://github.com/celinval", "followers_url": "https://api.github.com/users/celinval/followers", "following_url": "https://api.github.com/users/celinval/following{/other_user}", "gists_url": "https://api.github.com/users/celinval/gists{/gist_id}", "starred_url": "https://api.github.com/users/celinval/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/celinval/subscriptions", "organizations_url": "https://api.github.com/users/celinval/orgs", "repos_url": "https://api.github.com/users/celinval/repos", "events_url": "https://api.github.com/users/celinval/events{/privacy}", "received_events_url": "https://api.github.com/users/celinval/received_events", "type": "User", "site_admin": false}, "committer": {"login": "celinval", "id": 35149715, "node_id": "MDQ6VXNlcjM1MTQ5NzE1", "avatar_url": "https://avatars.githubusercontent.com/u/35149715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/celinval", "html_url": "https://github.com/celinval", "followers_url": "https://api.github.com/users/celinval/followers", "following_url": "https://api.github.com/users/celinval/following{/other_user}", "gists_url": "https://api.github.com/users/celinval/gists{/gist_id}", "starred_url": "https://api.github.com/users/celinval/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/celinval/subscriptions", "organizations_url": "https://api.github.com/users/celinval/orgs", "repos_url": "https://api.github.com/users/celinval/repos", "events_url": "https://api.github.com/users/celinval/events{/privacy}", "received_events_url": "https://api.github.com/users/celinval/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40185dba540dcbbc9e20e29b15fd69a25d52c256", "url": "https://api.github.com/repos/rust-lang/rust/commits/40185dba540dcbbc9e20e29b15fd69a25d52c256", "html_url": "https://github.com/rust-lang/rust/commit/40185dba540dcbbc9e20e29b15fd69a25d52c256"}], "stats": {"total": 298, "additions": 271, "deletions": 27}, "files": [{"sha": "24e39e9d3f8a01b0b8a53316df12a37486bedd4d", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b66db7e4e04ba039967b659473595a13409e0b18/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b66db7e4e04ba039967b659473595a13409e0b18/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b66db7e4e04ba039967b659473595a13409e0b18", "patch": "@@ -4654,15 +4654,9 @@ dependencies = [\n name = \"rustc_smir\"\n version = \"0.0.0\"\n dependencies = [\n- \"rustc_borrowck\",\n- \"rustc_driver\",\n- \"rustc_hir\",\n- \"rustc_interface\",\n  \"rustc_middle\",\n- \"rustc_mir_dataflow\",\n- \"rustc_mir_transform\",\n- \"rustc_serialize\",\n- \"rustc_trait_selection\",\n+ \"rustc_span\",\n+ \"tracing\",\n ]\n \n [[package]]"}, {"sha": "fb97ee5bebe6ef0657529f838b898e7e3578305c", "filename": "compiler/rustc_smir/Cargo.toml", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b66db7e4e04ba039967b659473595a13409e0b18/compiler%2Frustc_smir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b66db7e4e04ba039967b659473595a13409e0b18/compiler%2Frustc_smir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2FCargo.toml?ref=b66db7e4e04ba039967b659473595a13409e0b18", "patch": "@@ -4,25 +4,12 @@ version = \"0.0.0\"\n edition = \"2021\"\n \n [dependencies]\n-rustc_borrowck = { path = \"../rustc_borrowck\", optional = true }\n-rustc_driver = { path = \"../rustc_driver\", optional = true }\n-rustc_hir = { path = \"../rustc_hir\", optional = true }\n-rustc_interface = { path = \"../rustc_interface\", optional = true }\n rustc_middle = { path = \"../rustc_middle\", optional = true }\n-rustc_mir_dataflow = { path = \"../rustc_mir_dataflow\", optional = true }\n-rustc_mir_transform = { path = \"../rustc_mir_transform\", optional = true }\n-rustc_serialize = { path = \"../rustc_serialize\", optional = true }\n-rustc_trait_selection = { path = \"../rustc_trait_selection\", optional = true }\n+rustc_span = { path = \"../rustc_span\", optional = true }\n+tracing = \"0.1\"\n \n [features]\n default = [\n-    \"rustc_borrowck\",\n-    \"rustc_driver\",\n-    \"rustc_hir\",\n-    \"rustc_interface\",\n     \"rustc_middle\",\n-    \"rustc_mir_dataflow\",\n-    \"rustc_mir_transform\",\n-    \"rustc_serialize\",\n-    \"rustc_trait_selection\",\n+    \"rustc_span\",\n ]"}, {"sha": "31dee955f491fee6321b13ed2041566414da483e", "filename": "compiler/rustc_smir/README.md", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b66db7e4e04ba039967b659473595a13409e0b18/compiler%2Frustc_smir%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/b66db7e4e04ba039967b659473595a13409e0b18/compiler%2Frustc_smir%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2FREADME.md?ref=b66db7e4e04ba039967b659473595a13409e0b18", "patch": "@@ -73,3 +73,40 @@ git subtree pull --prefix=compiler/rustc_smir https://github.com/rust-lang/proje\n Note: only ever sync to rustc from the project-stable-mir's `smir` branch. Do not sync with your own forks.\n \n Then open a PR against rustc just like a regular PR.\n+\n+## Stable MIR Design\n+\n+The stable-mir will follow a similar approach to proc-macro2. It\u2019s\n+implementation will eventually be broken down into two main crates:\n+\n+- `stable_mir`: Public crate, to be published on crates.io, which will contain\n+the stable data structure as well as proxy APIs to make calls to the\n+compiler.\n+- `rustc_smir`: The compiler crate that will translate from internal MIR to\n+SMIR. This crate will also implement APIs that will be invoked by\n+stable-mir to query the compiler for more information.\n+\n+This will help tools to communicate with the rust compiler via stable APIs. Tools will depend on\n+`stable_mir` crate, which will invoke the compiler using APIs defined in `rustc_smir`. I.e.:\n+\n+```\n+    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+    \u2502   External Tool     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502           \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   Rust Compiler     \u2502\n+    \u2502                     \u2502          \u2502 \u2502           \u2502 \u2502          \u2502                     \u2502\n+    \u2502                     \u2502stable_mir| \u2502           \u2502 \u2502rustc_smir\u2502                     \u2502\n+    \u2502                     \u2502          \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba| \u2502          \u2502                     \u2502\n+    \u2502                     \u2502          \u2502 \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502          \u2502                     \u2502\n+    \u2502                     \u2502          \u2502 \u2502           \u2502 \u2502          \u2502                     \u2502\n+    \u2502                     \u2502          \u2502 \u2502           \u2502 \u2502          \u2502                     \u2502\n+    \u2502                     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502           \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                     \u2502\n+    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+More details can be found here:\n+https://hackmd.io/XhnYHKKuR6-LChhobvlT-g?view\n+\n+For now, the code for these two crates are in separate modules of this crate.\n+The modules have the same name for simplicity. We also have a third module,\n+`rustc_internal` which will expose APIs and definitions that allow users to\n+gather information from internal MIR constructs that haven't been exposed in\n+the `stable_mir` module."}, {"sha": "157dfd620ee1bda6d9c5295659944752a3ab5edb", "filename": "compiler/rustc_smir/rust-toolchain.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b66db7e4e04ba039967b659473595a13409e0b18/compiler%2Frustc_smir%2Frust-toolchain.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b66db7e4e04ba039967b659473595a13409e0b18/compiler%2Frustc_smir%2Frust-toolchain.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Frust-toolchain.toml?ref=b66db7e4e04ba039967b659473595a13409e0b18", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-06-01\"\n+channel = \"nightly-2023-02-28\"\n components = [ \"rustfmt\", \"rustc-dev\" ]"}, {"sha": "54d474db038e9ddd9ee1b90acc8e459523a49e91", "filename": "compiler/rustc_smir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b66db7e4e04ba039967b659473595a13409e0b18/compiler%2Frustc_smir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b66db7e4e04ba039967b659473595a13409e0b18/compiler%2Frustc_smir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Flib.rs?ref=b66db7e4e04ba039967b659473595a13409e0b18", "patch": "@@ -11,5 +11,9 @@\n     test(attr(allow(unused_variables), deny(warnings)))\n )]\n #![cfg_attr(not(feature = \"default\"), feature(rustc_private))]\n-#![deny(rustc::untranslatable_diagnostic)]\n-#![deny(rustc::diagnostic_outside_of_impl)]\n+\n+pub mod rustc_internal;\n+pub mod stable_mir;\n+\n+// Make this module private for now since external users should not call these directly.\n+mod rustc_smir;"}, {"sha": "044d6a2419f69e04d4f57825a275e55eb50aa374", "filename": "compiler/rustc_smir/src/rustc_internal/mod.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b66db7e4e04ba039967b659473595a13409e0b18/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b66db7e4e04ba039967b659473595a13409e0b18/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_internal%2Fmod.rs?ref=b66db7e4e04ba039967b659473595a13409e0b18", "patch": "@@ -0,0 +1,12 @@\n+//! Module that implements the bridge between Stable MIR and internal compiler MIR.\n+//!\n+//! For that, we define APIs that will temporarily be public to 3P that exposes rustc internal APIs\n+//! until stable MIR is complete.\n+\n+use crate::stable_mir::CrateItem;\n+\n+pub type DefId = rustc_span::def_id::DefId;\n+\n+pub fn item_def_id(item: &CrateItem) -> DefId {\n+    item.0\n+}"}, {"sha": "768b01f526f736184a57e4ea036158fa9bb59351", "filename": "compiler/rustc_smir/src/rustc_smir/mod.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b66db7e4e04ba039967b659473595a13409e0b18/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b66db7e4e04ba039967b659473595a13409e0b18/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs?ref=b66db7e4e04ba039967b659473595a13409e0b18", "patch": "@@ -0,0 +1,52 @@\n+//! Module that implements what will become the rustc side of Stable MIR.\n+//!\n+//! This module is responsible for building Stable MIR components from internal components.\n+//!\n+//! This module is not intended to be invoked directly by users. It will eventually\n+//! become the public API of rustc that will be invoked by the `stable_mir` crate.\n+//!\n+//! For now, we are developing everything inside `rustc`, thus, we keep this module private.\n+\n+use crate::stable_mir::{self};\n+use rustc_middle::ty::{tls::with, TyCtxt};\n+use rustc_span::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use tracing::debug;\n+\n+/// Get information about the local crate.\n+pub fn local_crate() -> stable_mir::Crate {\n+    with(|tcx| smir_crate(tcx, LOCAL_CRATE))\n+}\n+\n+/// Find a crate with the given name.\n+pub fn find_crate(name: &str) -> Option<stable_mir::Crate> {\n+    with(|tcx| {\n+        [LOCAL_CRATE].iter().chain(tcx.crates(()).iter()).find_map(|crate_num| {\n+            let crate_name = tcx.crate_name(*crate_num).to_string();\n+            (name == crate_name).then(|| smir_crate(tcx, *crate_num))\n+        })\n+    })\n+}\n+\n+/// Build a stable mir crate from a given crate number.\n+fn smir_crate(tcx: TyCtxt<'_>, crate_num: CrateNum) -> stable_mir::Crate {\n+    let crate_name = tcx.crate_name(crate_num).to_string();\n+    let is_local = crate_num == LOCAL_CRATE;\n+    let mod_id = DefId { index: CRATE_DEF_INDEX, krate: crate_num };\n+    let items = if is_local {\n+        tcx.hir_module_items(mod_id.expect_local())\n+            .items()\n+            .map(|item| {\n+                let def_id = item.owner_id.def_id.to_def_id();\n+                stable_mir::CrateItem(def_id)\n+            })\n+            .collect()\n+    } else {\n+        tcx.module_children(mod_id)\n+            .iter()\n+            .filter_map(|item| item.res.opt_def_id())\n+            .map(stable_mir::CrateItem)\n+            .collect::<Vec<_>>()\n+    };\n+    debug!(?crate_name, ?crate_num, \"smir_crate\");\n+    stable_mir::Crate { id: crate_num.into(), name: crate_name, is_local, root_items: items }\n+}"}, {"sha": "f61ea461dfa8553281a1348c97cbd2d44152a6eb", "filename": "compiler/rustc_smir/src/stable_mir/mod.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b66db7e4e04ba039967b659473595a13409e0b18/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b66db7e4e04ba039967b659473595a13409e0b18/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fstable_mir%2Fmod.rs?ref=b66db7e4e04ba039967b659473595a13409e0b18", "patch": "@@ -0,0 +1,52 @@\n+//! Module that implements the public interface to the Stable MIR.\n+//!\n+//! This module shall contain all type definitions and APIs that we expect 3P tools to invoke to\n+//! interact with the compiler.\n+//!\n+//! The goal is to eventually move this module to its own crate which shall be published on\n+//! [crates.io](https://crates.io).\n+//!\n+//! ## Note:\n+//!\n+//! There shouldn't be any direct references to internal compiler constructs in this module.\n+//! If you need an internal construct, consider using `rustc_internal` or `rustc_smir`.\n+\n+use crate::rustc_internal;\n+\n+/// Use String for now but we should replace it.\n+pub type Symbol = String;\n+\n+/// The number that identifies a crate.\n+pub type CrateNum = usize;\n+\n+/// A unique identification number for each item accessible for the current compilation unit.\n+pub type DefId = usize;\n+\n+/// A list of crate items.\n+pub type CrateItems = Vec<CrateItem>;\n+\n+/// Holds information about a crate.\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+pub struct Crate {\n+    pub(crate) id: CrateNum,\n+    pub name: Symbol,\n+    pub is_local: bool,\n+    /// The items defined in the root of this crate.\n+    pub root_items: CrateItems,\n+}\n+\n+/// Holds information about an item in the crate.\n+/// For now, it only stores the item DefId. Use functions inside `rustc_internal` module to\n+/// use this item.\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+pub struct CrateItem(pub(crate) rustc_internal::DefId);\n+\n+/// Access to the local crate.\n+pub fn local_crate() -> Crate {\n+    crate::rustc_smir::local_crate()\n+}\n+\n+/// Try to find a crate with the given name.\n+pub fn find_crate(name: &str) -> Option<Crate> {\n+    crate::rustc_smir::find_crate(name)\n+}"}, {"sha": "62cfb809fcbe93d0fcd093fd56cada32960a5a5d", "filename": "tests/ui-fulldeps/stable-mir/crate-info.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/b66db7e4e04ba039967b659473595a13409e0b18/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b66db7e4e04ba039967b659473595a13409e0b18/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fstable-mir%2Fcrate-info.rs?ref=b66db7e4e04ba039967b659473595a13409e0b18", "patch": "@@ -0,0 +1,106 @@\n+// run-pass\n+// Test that users are able to use stable mir APIs to retrieve information of the current crate\n+\n+// ignore-stage-1\n+// ignore-cross-compile\n+// ignore-remote\n+\n+#![feature(rustc_private)]\n+\n+extern crate rustc_driver;\n+extern crate rustc_hir;\n+extern crate rustc_interface;\n+extern crate rustc_middle;\n+extern crate rustc_smir;\n+\n+use rustc_driver::{Callbacks, Compilation, RunCompiler};\n+use rustc_hir::def::DefKind;\n+use rustc_interface::{interface, Queries};\n+use rustc_middle::ty::TyCtxt;\n+use rustc_smir::{rustc_internal, stable_mir};\n+use std::io::Write;\n+\n+const CRATE_NAME: &str = \"input\";\n+\n+/// This function uses the Stable MIR APIs to get information about the test crate.\n+fn test_stable_mir(tcx: TyCtxt<'_>) {\n+    // Get the local crate using stable_mir API.\n+    let local = stable_mir::local_crate();\n+    assert_eq!(&local.name, CRATE_NAME);\n+\n+    // Find items in the local crate.\n+    assert!(has_root_item(tcx, &local, (DefKind::Fn, \"foo_bar\")));\n+    assert!(has_root_item(tcx, &local, (DefKind::Mod, \"foo\")));\n+    assert!(!has_root_item(tcx, &local, (DefKind::Fn, \"foo::bar\")));\n+\n+    // Check that we can find items in the `std` crate.\n+    let std_crate = stable_mir::find_crate(\"std\").unwrap();\n+    assert!(has_root_item(tcx, &std_crate, (DefKind::Mod, \"std::any\")));\n+    assert!(!has_root_item(tcx, &std_crate, (DefKind::Fn, \"std::any::type_name\")));\n+}\n+\n+// Use internal API to find a function in a crate.\n+fn has_root_item(tcx: TyCtxt, krate: &stable_mir::Crate, item: (DefKind, &str)) -> bool {\n+    krate.root_items.iter().any(|crate_item| {\n+        let def_id = rustc_internal::item_def_id(crate_item);\n+        tcx.def_kind(def_id) == item.0 && tcx.def_path_str(def_id) == item.1\n+    })\n+}\n+\n+/// This test will generate and analyze a dummy crate using the stable mir.\n+/// For that, it will first write the dummy crate into a file.\n+/// It will invoke the compiler using a custom Callback implementation, which will\n+/// invoke Stable MIR APIs after the compiler has finished its analysis.\n+fn main() {\n+    let path = \"input.rs\";\n+    generate_input(&path).unwrap();\n+    let args = vec![\n+        \"rustc\".to_string(),\n+        \"--crate-type=lib\".to_string(),\n+        \"--crate-name\".to_string(),\n+        CRATE_NAME.to_string(),\n+        path.to_string(),\n+    ];\n+    rustc_driver::catch_fatal_errors(|| {\n+        RunCompiler::new(&args, &mut SMirCalls {}).run().unwrap();\n+    })\n+    .unwrap();\n+}\n+\n+struct SMirCalls {}\n+\n+impl Callbacks for SMirCalls {\n+    /// Called after analysis. Return value instructs the compiler whether to\n+    /// continue the compilation afterwards (defaults to `Compilation::Continue`)\n+    fn after_analysis<'tcx>(\n+        &mut self,\n+        _compiler: &interface::Compiler,\n+        queries: &'tcx Queries<'tcx>,\n+    ) -> Compilation {\n+        queries.global_ctxt().unwrap().enter(|tcx| {\n+            test_stable_mir(tcx);\n+        });\n+        // No need to keep going.\n+        Compilation::Stop\n+    }\n+}\n+\n+fn generate_input(path: &str) -> std::io::Result<()> {\n+    let mut file = std::fs::File::create(path)?;\n+    write!(\n+        file,\n+        r#\"\n+    mod foo {{\n+        pub fn bar(i: i32) -> i64 {{\n+            i as i64\n+        }}\n+    }}\n+\n+    pub fn foo_bar(x: i32, y: i32) -> i64 {{\n+        let x_64 = foo::bar(x);\n+        let y_64 = foo::bar(y);\n+        x_64.wrapping_add(y_64)\n+    }}\"#\n+    )?;\n+    Ok(())\n+}"}]}