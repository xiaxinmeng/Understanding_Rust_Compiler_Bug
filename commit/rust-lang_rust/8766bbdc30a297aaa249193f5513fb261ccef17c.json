{"sha": "8766bbdc30a297aaa249193f5513fb261ccef17c", "node_id": "C_kwDOAAsO6NoAKDg3NjZiYmRjMzBhMjk3YWFhMjQ5MTkzZjU1MTNmYjI2MWNjZWYxN2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-24T10:46:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-24T10:46:43Z"}, "message": "Auto merge of #106111 - matthiaskrgr:rollup-nnpoe5h, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #105465 (Improve top-level docs)\n - #105872 (Suggest remove last method call when type coerce with expected  type)\n - #106032 (std: only use LFS function on glibc)\n - #106078 (Provide more context on FileCheck failures)\n - #106100 (Codegen test for derived `<` on trivial newtype [TEST ONLY])\n - #106109 (rustdoc: make line number CSS for doc comment and scraped the same)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4b6141e66c79bd3545e280cabe09e22cd3342dcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b6141e66c79bd3545e280cabe09e22cd3342dcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8766bbdc30a297aaa249193f5513fb261ccef17c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8766bbdc30a297aaa249193f5513fb261ccef17c", "html_url": "https://github.com/rust-lang/rust/commit/8766bbdc30a297aaa249193f5513fb261ccef17c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8766bbdc30a297aaa249193f5513fb261ccef17c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e8bab91d339037388d152fd5066c26ae707d54e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e8bab91d339037388d152fd5066c26ae707d54e", "html_url": "https://github.com/rust-lang/rust/commit/5e8bab91d339037388d152fd5066c26ae707d54e"}, {"sha": "750bf73aea78a613456dc93f34cc32e43e9252f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/750bf73aea78a613456dc93f34cc32e43e9252f8", "html_url": "https://github.com/rust-lang/rust/commit/750bf73aea78a613456dc93f34cc32e43e9252f8"}], "stats": {"total": 401, "additions": 281, "deletions": 120}, "files": [{"sha": "d732075fb2d07fb84f1873ac7221f64f52a47947", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -8,9 +8,9 @@ members](https://rust-lang.zulipchat.com/#narrow/stream/122652-new-members)\n Zulip stream. We have lots of docs below of how to get started on your own, but\n the Zulip stream is the best place to *ask* for help.\n \n-Documentation for contributing to Rust is located in the [Guide to Rustc Development](https://rustc-dev-guide.rust-lang.org/),\n-commonly known as the [rustc-dev-guide]. Despite the name, this guide documents\n-not just how to develop rustc (the Rust compiler), but also how to contribute to the standard library and rustdoc.\n+Documentation for contributing to the compiler or tooling is located in the [Guide to Rustc\n+Development][rustc-dev-guide], commonly known as the [rustc-dev-guide]. Documentation for the\n+standard library in the [Standard library developers Guide][std-dev-guide], commonly known as the [std-dev-guide].\n \n ## About the [rustc-dev-guide]\n \n@@ -35,6 +35,7 @@ refer to [this section][contributing-bug-reports] and [open an issue][issue temp\n \n [Contributing to Rust]: https://rustc-dev-guide.rust-lang.org/contributing.html#contributing-to-rust\n [rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/\n+[std-dev-guide]: https://std-dev-guide.rust-lang.org/\n [contributing-bug-reports]: https://rustc-dev-guide.rust-lang.org/contributing.html#bug-reports\n [issue template]: https://github.com/rust-lang/rust/issues/new/choose\n [internals]: https://internals.rust-lang.org"}, {"sha": "014fab907fb96c48a9b46efcbb6055395c68556d", "filename": "README.md", "status": "modified", "additions": 55, "deletions": 54, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -6,11 +6,7 @@ standard library, and documentation.\n [Rust]: https://www.rust-lang.org\n \n **Note: this README is for _users_ rather than _contributors_.\n-If you wish to _contribute_ to the compiler, you should read the\n-[Getting Started][gettingstarted] section of the rustc-dev-guide instead.\n-You can ask for help in the [#new members Zulip stream][new-members].**\n-\n-[new-members]: https://rust-lang.zulipchat.com/#narrow/stream/122652-new-members\n+If you wish to _contribute_ to the compiler, you should read [CONTRIBUTING.md](CONTRIBUTING.md) instead.\n \n ## Quick Start\n \n@@ -48,20 +44,37 @@ by running it with the `--help` flag or reading the [rustc dev guide][rustcguide\n [gettingstarted]: https://rustc-dev-guide.rust-lang.org/getting-started.html\n [rustcguidebuild]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html\n \n-### Building on a Unix-like system\n-1. Make sure you have installed the dependencies:\n+### Dependencies\n+\n+Make sure you have installed the dependencies:\n \n-   * `g++` 5.1 or later or `clang++` 3.5 or later\n    * `python` 3 or 2.7\n-   * GNU `make` 3.81 or later\n-   * `cmake` 3.13.4 or later\n-   * `ninja`\n-   * `curl`\n    * `git`\n-   * `ssl` which comes in `libssl-dev` or `openssl-devel`\n+   * A C compiler (when building for the host, `cc` is enough; cross-compiling may need additional compilers)\n+   * `curl` (not needed on Windows)\n    * `pkg-config` if you are compiling on Linux and targeting Linux\n+   * `libiconv` (already included with glibc on Debian-based distros)\n+\n+To build cargo, you'll also need OpenSSL (`libssl-dev` or `openssl-devel` on most Unix distros).\n+\n+If building LLVM from source, you'll need additional tools:\n+\n+* `g++`, `clang++`, or MSVC with versions listed on\n+  [LLVM's documentation](https://llvm.org/docs/GettingStarted.html#host-c-toolchain-both-compiler-and-standard-library)\n+* `ninja`, or GNU `make` 3.81 or later (ninja is recommended, especially on Windows)\n+* `cmake` 3.13.4 or later\n+* `libstdc++-static` may be required on some Linux distributions such as Fedora and Ubuntu\n \n-2. Clone the [source] with `git`:\n+On tier 1 or tier 2 with host tools platforms, you can also choose to download LLVM by setting `llvm.download-ci-llvm = true`.\n+Otherwise, you'll need LLVM installed and `llvm-config` in your path.\n+See [the rustc-dev-guide for more info][sysllvm].\n+\n+[sysllvm]: https://rustc-dev-guide.rust-lang.org/building/new-target.html#using-pre-built-llvm\n+\n+\n+### Building on a Unix-like system\n+\n+1. Clone the [source] with `git`:\n \n    ```sh\n    git clone https://github.com/rust-lang/rust.git\n@@ -70,38 +83,49 @@ by running it with the `--help` flag or reading the [rustc dev guide][rustcguide\n \n [source]: https://github.com/rust-lang/rust\n \n-3. Configure the build settings:\n+2. Configure the build settings:\n \n     The Rust build system uses a file named `config.toml` in the root of the\n     source tree to determine various configuration settings for the build.\n-    Copy the default `config.toml.example` to `config.toml` to get started.\n+    Set up the defaults intended for distros to get started. You can see a full list of options\n+    in `config.toml.example`.\n \n     ```sh\n-    cp config.toml.example config.toml\n+    printf 'profile = \"user\" \\nchangelog-seen = 2 \\n' > config.toml\n     ```\n \n     If you plan to use `x.py install` to create an installation, it is recommended\n     that you set the `prefix` value in the `[install]` section to a directory.\n \n-    Create an install directory if you are not installing in the default directory.\n-\n-4. Build and install:\n+3. Build and install:\n \n     ```sh\n     ./x.py build && ./x.py install\n     ```\n \n     When complete, `./x.py install` will place several programs into\n     `$PREFIX/bin`: `rustc`, the Rust compiler, and `rustdoc`, the\n-    API-documentation tool. This install does not include [Cargo],\n-    Rust's package manager. To build and install Cargo, you may\n-    run `./x.py install cargo` or set the `build.extended` key in\n-    `config.toml` to `true` to build and install all tools.\n+    API-documentation tool. If you've set `profile = \"user\"` or `build.extended = true`, it will\n+    also include [Cargo], Rust's package manager.\n \n [Cargo]: https://github.com/rust-lang/cargo\n \n ### Building on Windows\n \n+On Windows, we suggest using [winget] to install dependencies by running the following in a terminal:\n+\n+```powershell\n+winget install -e Python.Python.3\n+winget install -e Kitware.CMake\n+winget install -e Git.Git\n+```\n+\n+Then edit your system's `PATH` variable and add: `C:\\Program Files\\CMake\\bin`. See\n+[this guide on editing the system `PATH`](https://www.java.com/en/download/help/path.html) from the\n+Java documentation.\n+\n+[winget]: https://github.com/microsoft/winget-cli\n+\n There are two prominent ABIs in use on Windows: the native (MSVC) ABI used by\n Visual Studio and the GNU ABI used by the GCC toolchain. Which version of Rust\n you need depends largely on what C/C++ libraries you want to interoperate with.\n@@ -190,7 +214,7 @@ Windows build triples are:\n     - `x86_64-pc-windows-msvc`\n \n The build triple can be specified by either specifying `--build=<triple>` when\n-invoking `x.py` commands, or by copying the `config.toml` file (as described\n+invoking `x.py` commands, or by creating a `config.toml` file (as described\n in [Installing From Source](#installing-from-source)), and modifying the\n `build` option under the `[build]` section.\n \n@@ -204,9 +228,7 @@ configure script and makefile (the latter of which just invokes `x.py`).\n make && sudo make install\n ```\n \n-When using the configure script, the generated `config.mk` file may override the\n-`config.toml` file. To go back to the `config.toml` file, delete the generated\n-`config.mk` file.\n+`configure` generates a `config.toml` which can also be used with normal `x.py` invocations.\n \n ## Building Documentation\n \n@@ -227,41 +249,20 @@ precompiled \"snapshot\" version of itself (made in an earlier stage of\n development). As such, source builds require an Internet connection to\n fetch snapshots, and an OS that can execute the available snapshot binaries.\n \n-Snapshot binaries are currently built and tested on several platforms:\n-\n-| Platform / Architecture                     | x86 | x86_64 |\n-|---------------------------------------------|-----|--------|\n-| Windows (7, 8, 10, ...)                     | \u2713   | \u2713      |\n-| Linux (kernel 3.2, glibc 2.17 or later)     | \u2713   | \u2713      |\n-| macOS (10.7 Lion or later)                  | (\\*) | \u2713      |\n-\n-(\\*): Apple dropped support for running 32-bit binaries starting from macOS 10.15 and iOS 11.\n-Due to this decision from Apple, the targets are no longer useful to our users.\n-Please read [our blog post][macx32] for more info.\n-\n-[macx32]: https://blog.rust-lang.org/2020/01/03/reducing-support-for-32-bit-apple-targets.html\n+See https://doc.rust-lang.org/nightly/rustc/platform-support.html for a list of supported platforms.\n+Only \"host tools\" platforms have a pre-compiled snapshot binary available; to compile for a platform\n+without host tools you must cross-compile.\n \n You may find that other platforms work, but these are our officially\n supported build environments that are most likely to work.\n \n ## Getting Help\n \n-The Rust community congregates in a few places:\n-\n-* [Stack Overflow] - Direct questions about using the language.\n-* [users.rust-lang.org] - General discussion and broader questions.\n-* [/r/rust] - News and general discussion.\n-\n-[Stack Overflow]: https://stackoverflow.com/questions/tagged/rust\n-[/r/rust]: https://reddit.com/r/rust\n-[users.rust-lang.org]: https://users.rust-lang.org/\n+See https://www.rust-lang.org/community for a list of chat platforms and forums.\n \n ## Contributing\n \n-If you are interested in contributing to the Rust project, please take a look\n-at the [Getting Started][gettingstarted] guide in the [rustc-dev-guide].\n-\n-[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org\n+See [CONTRIBUTING.md](CONTRIBUTING.md).\n \n ## License\n "}, {"sha": "042ff0b46a5afbc6bd31205d2600a732d9c002c0", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -38,6 +38,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Use `||` to give these suggestions a precedence\n         let _ = self.suggest_missing_parentheses(err, expr)\n+            || self.suggest_remove_last_method_call(err, expr, expected)\n             || self.suggest_associated_const(err, expr, expected)\n             || self.suggest_deref_ref_or_into(err, expr, expected, expr_ty, expected_ty_expr)\n             || self.suggest_option_to_bool(err, expr, expr_ty, expected)"}, {"sha": "9a7d753e66b8eafd8f60edbecae8e88f2ab8a2f2", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -329,6 +329,31 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    pub fn suggest_remove_last_method_call(\n+        &self,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'tcx>,\n+        expected: Ty<'tcx>,\n+    ) -> bool {\n+        if let hir::ExprKind::MethodCall(hir::PathSegment { ident: method, .. }, recv_expr, &[], _) = expr.kind &&\n+            let Some(recv_ty) = self.typeck_results.borrow().expr_ty_opt(recv_expr) &&\n+            self.can_coerce(recv_ty, expected) {\n+                let span = if let Some(recv_span) = recv_expr.span.find_ancestor_inside(expr.span) {\n+                    expr.span.with_lo(recv_span.hi())\n+                } else {\n+                    expr.span.with_lo(method.span.lo() - rustc_span::BytePos(1))\n+                };\n+                err.span_suggestion_verbose(\n+                    span,\n+                    \"try removing the method call\",\n+                    \"\",\n+                    Applicability::MachineApplicable,\n+                );\n+                return true;\n+            }\n+        false\n+    }\n+\n     pub fn suggest_deref_ref_or_into(\n         &self,\n         err: &mut Diagnostic,"}, {"sha": "aea0c26ee8b60e8a2045208b6228a0dc5812d7b5", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -1754,11 +1754,11 @@ mod remove_dir_impl {\n     use crate::sys::{cvt, cvt_r};\n \n     #[cfg(not(any(\n-        target_os = \"linux\",\n+        all(target_os = \"linux\", target_env = \"gnu\"),\n         all(target_os = \"macos\", not(target_arch = \"aarch64\"))\n     )))]\n     use libc::{fdopendir, openat, unlinkat};\n-    #[cfg(target_os = \"linux\")]\n+    #[cfg(all(target_os = \"linux\", target_env = \"gnu\"))]\n     use libc::{fdopendir, openat64 as openat, unlinkat};\n     #[cfg(all(target_os = \"macos\", not(target_arch = \"aarch64\")))]\n     use macos_weak::{fdopendir, openat, unlinkat};"}, {"sha": "0f7107122b7e86ecbba33e56b46efcd52ef2fcbc", "filename": "library/std/src/sys/unix/kernel_copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -61,9 +61,9 @@ use crate::ptr;\n use crate::sync::atomic::{AtomicBool, AtomicU8, Ordering};\n use crate::sys::cvt;\n use crate::sys::weak::syscall;\n-#[cfg(not(target_os = \"linux\"))]\n+#[cfg(not(all(target_os = \"linux\", target_env = \"gnu\")))]\n use libc::sendfile as sendfile64;\n-#[cfg(target_os = \"linux\")]\n+#[cfg(all(target_os = \"linux\", target_env = \"gnu\"))]\n use libc::sendfile64;\n use libc::{EBADF, EINVAL, ENOSYS, EOPNOTSUPP, EOVERFLOW, EPERM, EXDEV};\n "}, {"sha": "83a43b6ee2697ca14c6e8e75c8d3b4788c32cd59", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -95,9 +95,9 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n         )))]\n         'poll: {\n             use crate::sys::os::errno;\n-            #[cfg(not(target_os = \"linux\"))]\n+            #[cfg(not(all(target_os = \"linux\", target_env = \"gnu\")))]\n             use libc::open as open64;\n-            #[cfg(target_os = \"linux\")]\n+            #[cfg(all(target_os = \"linux\", target_env = \"gnu\"))]\n             use libc::open64;\n             let pfds: &mut [_] = &mut [\n                 libc::pollfd { fd: 0, events: 0, revents: 0 },\n@@ -143,9 +143,9 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n         )))]\n         {\n             use crate::sys::os::errno;\n-            #[cfg(not(target_os = \"linux\"))]\n+            #[cfg(not(all(target_os = \"linux\", target_env = \"gnu\")))]\n             use libc::open as open64;\n-            #[cfg(target_os = \"linux\")]\n+            #[cfg(all(target_os = \"linux\", target_env = \"gnu\"))]\n             use libc::open64;\n             for fd in 0..3 {\n                 if libc::fcntl(fd, libc::F_GETFD) == -1 && errno() == libc::EBADF {"}, {"sha": "b59d4ba26afb9b3d4d7259bc85a87f6955564741", "filename": "library/std/src/sys/unix/stack_overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -45,9 +45,9 @@ mod imp {\n     use crate::thread;\n \n     use libc::MAP_FAILED;\n-    #[cfg(not(target_os = \"linux\"))]\n+    #[cfg(not(all(target_os = \"linux\", target_env = \"gnu\")))]\n     use libc::{mmap as mmap64, munmap};\n-    #[cfg(target_os = \"linux\")]\n+    #[cfg(all(target_os = \"linux\", target_env = \"gnu\"))]\n     use libc::{mmap64, munmap};\n     use libc::{sigaction, sighandler_t, SA_ONSTACK, SA_SIGINFO, SIGBUS, SIG_DFL};\n     use libc::{sigaltstack, SIGSTKSZ, SS_DISABLE};"}, {"sha": "d847f2775ab7611bfcc249c32763179683f0cb04", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -653,9 +653,9 @@ pub mod guard {\n ))]\n #[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n-    #[cfg(not(target_os = \"linux\"))]\n+    #[cfg(not(all(target_os = \"linux\", target_env = \"gnu\")))]\n     use libc::{mmap as mmap64, mprotect};\n-    #[cfg(target_os = \"linux\")]\n+    #[cfg(all(target_os = \"linux\", target_env = \"gnu\"))]\n     use libc::{mmap64, mprotect};\n     use libc::{MAP_ANON, MAP_FAILED, MAP_FIXED, MAP_PRIVATE, PROT_NONE, PROT_READ, PROT_WRITE};\n "}, {"sha": "79c2eb31cdae07b3fca56104c8d9b806bfc87276", "filename": "src/bootstrap/README.md", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Fbootstrap%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Fbootstrap%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FREADME.md?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -80,18 +80,12 @@ The script accepts commands, flags, and arguments to determine what to do:\n \n ## Configuring rustbuild\n \n-There are currently two methods for configuring the rustbuild build system.\n-\n-First, rustbuild offers a TOML-based configuration system with a `config.toml`\n+rustbuild offers a TOML-based configuration system with a `config.toml`\n file. An example of this configuration can be found at `config.toml.example`,\n and the configuration file can also be passed as `--config path/to/config.toml`\n if the build system is being invoked manually (via the python script).\n \n-Next, the `./configure` options serialized in `config.mk` will be\n-parsed and read. That is, if any `./configure` options are passed, they'll be\n-handled naturally. `./configure` should almost never be used for local\n-installations, and is primarily useful for CI. Prefer to customize behavior\n-using `config.toml`.\n+You can generate a config.toml using `./configure` options if you want to automate creating the file without having to edit it.\n \n Finally, rustbuild makes use of the [cc-rs crate] which has [its own\n method][env-vars] of configuring C compilers and C flags via environment"}, {"sha": "b41d60d51a8b5972f75ea63e518d68e461f7df0e", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -49,10 +49,7 @@ pub enum DryRun {\n \n /// Global configuration for the entire build and/or bootstrap.\n ///\n-/// This structure is derived from a combination of both `config.toml` and\n-/// `config.mk`. As of the time of this writing it's unlikely that `config.toml`\n-/// is used all that much, so this is primarily filled out by `config.mk` which\n-/// is generated from `./configure`.\n+/// This structure is parsed from `config.toml`, and some of the fields are inferred from `git` or build-time parameters.\n ///\n /// Note that this structure is not decoded directly into, but rather it is\n /// filled out from the decoded forms of the structs below. For documentation"}, {"sha": "53c8a1add780b9d6005b062385f972ee9d95e8d9", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -347,6 +347,9 @@ pre {\n .source .content pre {\n \tpadding: 20px;\n }\n+.rustdoc.source .example-wrap > pre.src-line-numbers  {\n+\tpadding: 20px 0 20px 4px;\n+}\n \n img {\n \tmax-width: 100%;\n@@ -519,10 +522,6 @@ ul.block, .block li {\n \tdisplay: none;\n }\n \n-.source .content pre.rust {\n-\tpadding-left: 0;\n-}\n-\n .rustdoc .example-wrap {\n \tdisplay: flex;\n \tposition: relative;\n@@ -550,23 +549,21 @@ ul.block, .block li {\n \t-moz-user-select: none;\n \t-ms-user-select: none;\n \tuser-select: none;\n+\tpadding: 14px 8px;\n+\tcolor: var(--src-line-numbers-span-color);\n }\n \n-.example-line-numbers {\n-\tborder: 1px solid;\n-\tpadding: 13px 8px;\n-\tborder-top-left-radius: 5px;\n-\tborder-bottom-left-radius: 5px;\n-\tborder-color: var(--example-line-numbers-border-color);\n+.rustdoc .example-wrap > pre.src-line-numbers {\n+\tpadding: 14px 0;\n }\n-\n .src-line-numbers a, .src-line-numbers span {\n \tcolor: var(--src-line-numbers-span-color);\n+\tpadding: 0 8px;\n }\n .src-line-numbers :target {\n \tbackground-color: transparent;\n \tborder-right: none;\n-\tpadding-right: 0;\n+\tpadding: 0 8px;\n }\n .src-line-numbers .line-highlighted {\n \tbackground-color: var(--src-line-number-highlighted-background-color);\n@@ -1958,15 +1955,6 @@ in storage.js\n \tbottom: 0;\n }\n \n-.scraped-example .code-wrapper .src-line-numbers {\n-\tpadding: 14px 0;\n-}\n-\n-.scraped-example .code-wrapper .src-line-numbers a,\n-.scraped-example .code-wrapper .src-line-numbers span {\n-\tpadding: 0 14px;\n-}\n-\n .scraped-example .code-wrapper .example-wrap {\n \twidth: 100%;\n \toverflow-y: hidden;"}, {"sha": "7377e2a17914ec9bc46704dac7550b44a7357c82", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -62,7 +62,6 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--code-highlight-question-mark-color: #ff9011;\n \t--code-highlight-comment-color: #788797;\n \t--code-highlight-doc-comment-color: #a1ac88;\n-\t--example-line-numbers-border-color: none;\n \t--src-line-numbers-span-color: #5c6773;\n \t--src-line-number-highlighted-background-color: rgba(255, 236, 164, 0.06);\n \t--test-arrow-color: #788797;\n@@ -132,7 +131,7 @@ pre, .rustdoc.source .example-wrap {\n \n .src-line-numbers .line-highlighted {\n \tcolor: #708090;\n-\tpadding-right: 4px;\n+\tpadding-right: 7px;\n \tborder-right: 1px solid #ffb44c;\n }\n "}, {"sha": "2091f8dcca9f0c182056473277d2538e6869cc0a", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -57,7 +57,6 @@\n \t--code-highlight-question-mark-color: #ff9011;\n \t--code-highlight-comment-color: #8d8d8b;\n \t--code-highlight-doc-comment-color: #8ca375;\n-\t--example-line-numbers-border-color: #4a4949;\n \t--src-line-numbers-span-color: #3b91e2;\n \t--src-line-number-highlighted-background-color: #0a042f;\n \t--test-arrow-color: #dedede;"}, {"sha": "f582796d5ddbc4bf8908949eb2fef5ba34cd71e0", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -57,7 +57,6 @@\n \t--code-highlight-question-mark-color: #ff9011;\n \t--code-highlight-comment-color: #8e908c;\n \t--code-highlight-doc-comment-color: #4d4d4c;\n-\t--example-line-numbers-border-color: #c7c7c7;\n \t--src-line-numbers-span-color: #c67e2d;\n \t--src-line-number-highlighted-background-color: #fdffd3;\n \t--test-arrow-color: #f5f5f5;"}, {"sha": "5cf6c3ac0a2333f55db87a00349ae93ae0ee9fef", "filename": "src/test/codegen/comparison-operators-newtype.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Ftest%2Fcodegen%2Fcomparison-operators-newtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Ftest%2Fcodegen%2Fcomparison-operators-newtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcomparison-operators-newtype.rs?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -0,0 +1,49 @@\n+// The `derive(PartialOrd)` for a newtype doesn't override `lt`/`le`/`gt`/`ge`.\n+// This double-checks that the `Option<Ordering>` intermediate values used\n+// in the operators for such a type all optimize away.\n+\n+// compile-flags: -C opt-level=1\n+// min-llvm-version: 15.0\n+\n+#![crate_type = \"lib\"]\n+\n+use std::cmp::Ordering;\n+\n+#[derive(PartialOrd, PartialEq)]\n+pub struct Foo(u16);\n+\n+// CHECK-LABEL: @check_lt\n+// CHECK-SAME: (i16 %[[A:.+]], i16 %[[B:.+]])\n+#[no_mangle]\n+pub fn check_lt(a: Foo, b: Foo) -> bool {\n+    // CHECK: %[[R:.+]] = icmp ult i16 %[[A]], %[[B]]\n+    // CHECK-NEXT: ret i1 %[[R]]\n+    a < b\n+}\n+\n+// CHECK-LABEL: @check_le\n+// CHECK-SAME: (i16 %[[A:.+]], i16 %[[B:.+]])\n+#[no_mangle]\n+pub fn check_le(a: Foo, b: Foo) -> bool {\n+    // CHECK: %[[R:.+]] = icmp ule i16 %[[A]], %[[B]]\n+    // CHECK-NEXT: ret i1 %[[R]]\n+    a <= b\n+}\n+\n+// CHECK-LABEL: @check_gt\n+// CHECK-SAME: (i16 %[[A:.+]], i16 %[[B:.+]])\n+#[no_mangle]\n+pub fn check_gt(a: Foo, b: Foo) -> bool {\n+    // CHECK: %[[R:.+]] = icmp ugt i16 %[[A]], %[[B]]\n+    // CHECK-NEXT: ret i1 %[[R]]\n+    a > b\n+}\n+\n+// CHECK-LABEL: @check_ge\n+// CHECK-SAME: (i16 %[[A:.+]], i16 %[[B:.+]])\n+#[no_mangle]\n+pub fn check_ge(a: Foo, b: Foo) -> bool {\n+    // CHECK: %[[R:.+]] = icmp uge i16 %[[A]], %[[B]]\n+    // CHECK-NEXT: ret i1 %[[R]]\n+    a >= b\n+}"}, {"sha": "a3ed008719c00237a1cd50d51a74d8ed9ac8da6e", "filename": "src/test/rustdoc-gui/docblock-code-block-line-number.goml", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Ftest%2Frustdoc-gui%2Fdocblock-code-block-line-number.goml", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Ftest%2Frustdoc-gui%2Fdocblock-code-block-line-number.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-code-block-line-number.goml?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -1,23 +1,53 @@\n // Checks that the setting \"line numbers\" is working as expected.\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/fn.foo.html\"\n \n+// Otherwise, we can't check text color\n+show-text: true\n+\n // We check that without this setting, there is no line number displayed.\n assert-false: \"pre.example-line-numbers\"\n \n-// We now set the setting to show the line numbers on code examples.\n-local-storage: {\"rustdoc-line-numbers\": \"true\" }\n-// We reload to make the line numbers appear.\n-reload:\n-\n-// We wait for them to be added into the DOM by the JS...\n-wait-for: \"pre.example-line-numbers\"\n-// If the test didn't fail, it means that it was found!\n // Let's now check some CSS properties...\n-assert-css: (\"pre.example-line-numbers\", {\n-    \"margin\": \"0px\",\n-    \"padding\": \"13px 8px\",\n-    \"text-align\": \"right\",\n+define-function: (\n+    \"check-colors\",\n+    (theme, color),\n+    [\n+        // We now set the setting to show the line numbers on code examples.\n+        (\"local-storage\", {\n+            \"rustdoc-theme\": |theme|,\n+            \"rustdoc-use-system-theme\": \"false\",\n+            \"rustdoc-line-numbers\": \"true\"\n+        }),\n+        // We reload to make the line numbers appear and change theme.\n+        (\"reload\"),\n+        // We wait for them to be added into the DOM by the JS...\n+        (\"wait-for\", \"pre.example-line-numbers\"),\n+        // If the test didn't fail, it means that it was found!\n+        (\"assert-css\", (\n+            \"pre.example-line-numbers\",\n+            {\n+                \"color\": |color|,\n+                \"margin\": \"0px\",\n+                \"padding\": \"14px 8px\",\n+                \"text-align\": \"right\",\n+            },\n+            ALL,\n+        )),\n+    ],\n+)\n+call-function: (\"check-colors\", {\n+    \"theme\": \"ayu\",\n+    \"color\": \"rgb(92, 103, 115)\",\n })\n+call-function: (\"check-colors\", {\n+    \"theme\": \"dark\",\n+    \"color\": \"rgb(59, 145, 226)\",\n+})\n+call-function: (\"check-colors\", {\n+    \"theme\": \"light\",\n+    \"color\": \"rgb(198, 126, 45)\",\n+})\n+\n // The first code block has two lines so let's check its `<pre>` elements lists both of them.\n assert-text: (\"pre.example-line-numbers\", \"1\\n2\")\n "}, {"sha": "8a33e713191292cebd0082c94858ddf0b12fe3cf", "filename": "src/test/rustdoc-gui/source-code-page.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -89,9 +89,9 @@ assert-css: (\".src-line-numbers\", {\"text-align\": \"right\"})\n // do anything (and certainly not add a `#NaN` to the URL!).\n goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n // We use this assert-position to know where we will click.\n-assert-position: (\"//*[@id='1']\", {\"x\": 104, \"y\": 112})\n+assert-position: (\"//*[@id='1']\", {\"x\": 88, \"y\": 112})\n // We click on the left of the \"1\" anchor but still in the \"src-line-number\" `<pre>`.\n-click: (103, 103)\n+click: (87, 103)\n assert-document-property: ({\"URL\": \"/lib.rs.html\"}, ENDS_WITH)\n \n // Checking the source code sidebar."}, {"sha": "8b409232c202c0b63d14342bb5f7b73aea042c75", "filename": "src/test/ui/suggestions/issue-105494.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105494.rs?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -0,0 +1,22 @@\n+fn test1() {\n+    let _v: i32 = (1 as i32).to_string(); //~ ERROR mismatched types\n+\n+    // won't suggestion\n+    let _v: i32 = (1 as i128).to_string(); //~ ERROR mismatched types\n+\n+    let _v: &str = \"foo\".to_string(); //~ ERROR mismatched types\n+}\n+\n+fn test2() {\n+    let mut path: String = \"/usr\".to_string();\n+    let folder: String = \"lib\".to_string();\n+\n+    path = format!(\"{}/{}\", path, folder).as_str(); //~ ERROR mismatched types\n+\n+    println!(\"{}\", &path);\n+}\n+\n+fn main() {\n+    test1();\n+    test2();\n+}"}, {"sha": "5aa3f2af738f49d2f8b73ee67184e491af10f647", "filename": "src/test/ui/suggestions/issue-105494.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105494.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105494.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105494.stderr?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -0,0 +1,54 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-105494.rs:2:19\n+   |\n+LL |     let _v: i32 = (1 as i32).to_string();\n+   |             ---   ^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found struct `String`\n+   |             |\n+   |             expected due to this\n+   |\n+help: try removing the method call\n+   |\n+LL -     let _v: i32 = (1 as i32).to_string();\n+LL +     let _v: i32 = (1 as i32);\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-105494.rs:5:19\n+   |\n+LL |     let _v: i32 = (1 as i128).to_string();\n+   |             ---   ^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found struct `String`\n+   |             |\n+   |             expected due to this\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-105494.rs:7:20\n+   |\n+LL |     let _v: &str = \"foo\".to_string();\n+   |             ----   ^^^^^^^^^^^^^^^^^ expected `&str`, found struct `String`\n+   |             |\n+   |             expected due to this\n+   |\n+help: try removing the method call\n+   |\n+LL -     let _v: &str = \"foo\".to_string();\n+LL +     let _v: &str = \"foo\";\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-105494.rs:14:12\n+   |\n+LL |     let mut path: String = \"/usr\".to_string();\n+   |                   ------ expected due to this type\n+...\n+LL |     path = format!(\"{}/{}\", path, folder).as_str();\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `&str`\n+   |\n+help: try removing the method call\n+   |\n+LL -     path = format!(\"{}/{}\", path, folder).as_str();\n+LL +     path = format!(\"{}/{}\", path, folder);\n+   |\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "7a3c0d28fc3e98ee83bdfab1a3fe0b8208e30bea", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8766bbdc30a297aaa249193f5513fb261ccef17c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=8766bbdc30a297aaa249193f5513fb261ccef17c", "patch": "@@ -2303,6 +2303,8 @@ impl<'test> TestCx<'test> {\n         } else {\n             filecheck.args(&[\"--check-prefixes\", &prefixes]);\n         }\n+        // Provide more context on failures.\n+        filecheck.args(&[\"--dump-input-context\", \"100\"]);\n         self.compose_and_run(filecheck, \"\", None, None)\n     }\n "}]}