{"sha": "b7a604ab34ac247f13b1f91f8351a0e3c50df52f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YTYwNGFiMzRhYzI0N2YxM2IxZjkxZjgzNTFhMGUzYzUwZGY1MmY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-08-30T16:43:15Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-08-30T16:43:15Z"}, "message": "rustbuild: Distribute libLLVM.so with rustc\n\nA recent change (#53245) started to build LLVM with ThinLTO enabled and to\nensure that compile times are kept down it builds LLVM dynamically by default to\nensure that all the various LLVM tools aren't redoing all that optimization\nwork. This means, however, that all LLVM tools depend on LLVM's dynamic library\nby default.\n\nWhile the LLVM tools and LLDB components were updated to include the shared\nlibrary we accidentally forgot about LLD, included with the main rustc\ncomponent. LLD also links dynamically to LLVM and ships a non-working binary\nright now because of this!\n\nThis commit updates our distribution to ship the LLVM dynamic library with the\ncompiler libraries.  While not technically needed for rustc itself to operate\n(right now) it may be needed for LLD, and otherwise it serves as a good basis\nfor the other LLVM tools components to work with as well.\n\nThis should...\n\nCloses #53813", "tree": {"sha": "9a2c48b4985902abc43e01a40ba5adc34cf3a7bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a2c48b4985902abc43e01a40ba5adc34cf3a7bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7a604ab34ac247f13b1f91f8351a0e3c50df52f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7a604ab34ac247f13b1f91f8351a0e3c50df52f", "html_url": "https://github.com/rust-lang/rust/commit/b7a604ab34ac247f13b1f91f8351a0e3c50df52f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7a604ab34ac247f13b1f91f8351a0e3c50df52f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e98621e69890d67d906a436a68436d03a3edb89", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e98621e69890d67d906a436a68436d03a3edb89", "html_url": "https://github.com/rust-lang/rust/commit/0e98621e69890d67d906a436a68436d03a3edb89"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "92c0a088b5eefbdb3ca0213f29da034e35d7529c", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7a604ab34ac247f13b1f91f8351a0e3c50df52f/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a604ab34ac247f13b1f91f8351a0e3c50df52f/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=b7a604ab34ac247f13b1f91f8351a0e3c50df52f", "patch": "@@ -501,6 +501,13 @@ impl Step for Rustc {\n             t!(fs::create_dir_all(&backends_dst));\n             builder.cp_r(&backends_src, &backends_dst);\n \n+            // Copy libLLVM.so to the lib dir as well, if needed. While not\n+            // technically needed by rustc itself it's needed by lots of other\n+            // components like the llvm tools and LLD. LLD is included below and\n+            // tools/LLDB come later, so let's just throw it in the rustc\n+            // component for now.\n+            maybe_install_llvm_dylib(builder, host, image);\n+\n             // Copy over lld if it's there\n             if builder.config.lld_enabled {\n                 let exe = exe(\"rust-lld\", &compiler.host);\n@@ -1967,8 +1974,6 @@ impl Step for LlvmTools {\n             builder.install(&exe, &dst_bindir, 0o755);\n         }\n \n-        maybe_install_llvm_dylib(builder, target, &image);\n-\n         // Prepare the overlay\n         let overlay = tmp.join(\"llvm-tools-overlay\");\n         drop(fs::remove_dir_all(&overlay));\n@@ -2087,9 +2092,6 @@ impl Step for Lldb {\n             }\n         }\n \n-        // Copy libLLVM.so to the lib dir as well, if needed.\n-        maybe_install_llvm_dylib(builder, target, &image);\n-\n         // Prepare the overlay\n         let overlay = tmp.join(\"lldb-overlay\");\n         drop(fs::remove_dir_all(&overlay));"}]}