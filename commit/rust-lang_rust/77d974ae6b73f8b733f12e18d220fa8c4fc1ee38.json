{"sha": "77d974ae6b73f8b733f12e18d220fa8c4fc1ee38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZDk3NGFlNmI3M2Y4YjczM2YxMmUxOGQyMjBmYThjNGZjMWVlMzg=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-03T15:40:56Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-08T12:08:54Z"}, "message": "Replace all the types by their Chalk versions", "tree": {"sha": "0003a7571759bd3db294c497af18870c6692679b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0003a7571759bd3db294c497af18870c6692679b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77d974ae6b73f8b733f12e18d220fa8c4fc1ee38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77d974ae6b73f8b733f12e18d220fa8c4fc1ee38", "html_url": "https://github.com/rust-lang/rust/commit/77d974ae6b73f8b733f12e18d220fa8c4fc1ee38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77d974ae6b73f8b733f12e18d220fa8c4fc1ee38/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "855a739ebf736db8a9a66e0e073c34631275fb22", "url": "https://api.github.com/repos/rust-lang/rust/commits/855a739ebf736db8a9a66e0e073c34631275fb22", "html_url": "https://github.com/rust-lang/rust/commit/855a739ebf736db8a9a66e0e073c34631275fb22"}], "stats": {"total": 586, "additions": 32, "deletions": 554}, "files": [{"sha": "3378015ca8f1769230d79b423f56d6ac10e78c09", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/77d974ae6b73f8b733f12e18d220fa8c4fc1ee38/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d974ae6b73f8b733f12e18d220fa8c4fc1ee38/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=77d974ae6b73f8b733f12e18d220fa8c4fc1ee38", "patch": "@@ -17,7 +17,6 @@ mod chalk_cast;\n mod chalk_ext;\n mod builder;\n mod walk;\n-mod types;\n \n pub mod display;\n pub mod db;\n@@ -48,7 +47,6 @@ pub use lower::{\n     TyDefId, TyLoweringContext, ValueTyDefId,\n };\n pub use traits::{chalk::Interner, TraitEnvironment};\n-pub use types::*;\n pub use walk::TypeWalk;\n \n pub use chalk_ir::{\n@@ -65,6 +63,21 @@ pub type PlaceholderIndex = chalk_ir::PlaceholderIndex;\n pub type VariableKind = chalk_ir::VariableKind<Interner>;\n pub type VariableKinds = chalk_ir::VariableKinds<Interner>;\n pub type CanonicalVarKinds = chalk_ir::CanonicalVarKinds<Interner>;\n+pub type Binders<T> = chalk_ir::Binders<T>;\n+pub type Substitution = chalk_ir::Substitution<Interner>;\n+pub type GenericArg = chalk_ir::GenericArg<Interner>;\n+pub type GenericArgData = chalk_ir::GenericArgData<Interner>;\n+\n+pub type Ty = chalk_ir::Ty<Interner>;\n+pub type TyKind = chalk_ir::TyKind<Interner>;\n+pub type DynTy = chalk_ir::DynTy<Interner>;\n+pub type FnPointer = chalk_ir::FnPointer<Interner>;\n+// pub type FnSubst = chalk_ir::FnSubst<Interner>;\n+pub use chalk_ir::FnSubst;\n+pub type ProjectionTy = chalk_ir::ProjectionTy<Interner>;\n+pub type AliasTy = chalk_ir::AliasTy<Interner>;\n+pub type OpaqueTy = chalk_ir::OpaqueTy<Interner>;\n+pub type InferenceVar = chalk_ir::InferenceVar;\n \n pub type Lifetime = chalk_ir::Lifetime<Interner>;\n pub type LifetimeData = chalk_ir::LifetimeData<Interner>;\n@@ -79,6 +92,14 @@ pub type ChalkTraitId = chalk_ir::TraitId<Interner>;\n \n pub type FnSig = chalk_ir::FnSig<Interner>;\n \n+pub type InEnvironment<T> = chalk_ir::InEnvironment<T>;\n+pub type DomainGoal = chalk_ir::DomainGoal<Interner>;\n+pub type AliasEq = chalk_ir::AliasEq<Interner>;\n+pub type Solution = chalk_solve::Solution<Interner>;\n+pub type ConstrainedSubst = chalk_ir::ConstrainedSubst<Interner>;\n+pub type Guidance = chalk_solve::Guidance<Interner>;\n+pub type WhereClause = chalk_ir::WhereClause<Interner>;\n+\n // FIXME: get rid of this\n pub fn subst_prefix(s: &Substitution, n: usize) -> Substitution {\n     Substitution::intern(s.interned()[..std::cmp::min(s.len(&Interner), n)].into())\n@@ -121,6 +142,14 @@ pub fn make_canonical<T>(\n     Canonical { value, binders: chalk_ir::CanonicalVarKinds::from_iter(&Interner, kinds) }\n }\n \n+pub type TraitRef = chalk_ir::TraitRef<Interner>;\n+\n+pub type QuantifiedWhereClause = Binders<WhereClause>;\n+\n+pub type QuantifiedWhereClauses = chalk_ir::QuantifiedWhereClauses<Interner>;\n+\n+pub type Canonical<T> = chalk_ir::Canonical<T>;\n+\n /// A function signature as seen by type inference: Several parameter types and\n /// one return type.\n #[derive(Clone, PartialEq, Eq, Debug)]\n@@ -164,8 +193,6 @@ impl CallableSig {\n     }\n }\n \n-impl Ty {}\n-\n #[derive(Copy, Clone, PartialEq, Eq, Debug, Hash)]\n pub enum ImplTraitId {\n     ReturnTypeImplTrait(hir_def::FunctionId, u16),"}, {"sha": "89adad10848a0458da1ca7802df1db78a83bcb4e", "filename": "crates/hir_ty/src/types.rs", "status": "removed", "additions": 0, "deletions": 549, "changes": 549, "blob_url": "https://github.com/rust-lang/rust/blob/855a739ebf736db8a9a66e0e073c34631275fb22/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855a739ebf736db8a9a66e0e073c34631275fb22/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftypes.rs?ref=855a739ebf736db8a9a66e0e073c34631275fb22", "patch": "@@ -1,549 +0,0 @@\n-//! This is the home of `Ty` etc. until they get replaced by their chalk_ir\n-//! equivalents.\n-\n-use std::sync::Arc;\n-\n-use chalk_ir::{\n-    cast::{Cast, CastTo, Caster},\n-    BoundVar, Mutability, Scalar, TyVariableKind,\n-};\n-use smallvec::SmallVec;\n-\n-use crate::{\n-    AssocTypeId, CanonicalVarKinds, ChalkTraitId, ClosureId, Const, FnDefId, FnSig, ForeignDefId,\n-    Interner, Lifetime, OpaqueTyId, PlaceholderIndex, TypeWalk, VariableKind, VariableKinds,\n-};\n-\n-#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-pub struct OpaqueTy {\n-    pub opaque_ty_id: OpaqueTyId,\n-    pub substitution: Substitution,\n-}\n-\n-/// A \"projection\" type corresponds to an (unnormalized)\n-/// projection like `<P0 as Trait<P1..Pn>>::Foo`. Note that the\n-/// trait and all its parameters are fully known.\n-#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-pub struct ProjectionTy {\n-    pub associated_ty_id: AssocTypeId,\n-    pub substitution: Substitution,\n-}\n-\n-impl ProjectionTy {\n-    pub fn self_type_parameter(&self, interner: &Interner) -> Ty {\n-        self.substitution.interned()[0].assert_ty_ref(interner).clone()\n-    }\n-}\n-\n-#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-pub struct DynTy {\n-    /// The unknown self type.\n-    pub bounds: Binders<QuantifiedWhereClauses>,\n-    pub lifetime: Lifetime,\n-}\n-\n-#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-pub struct FnPointer {\n-    pub num_binders: usize,\n-    pub sig: FnSig,\n-    pub substitution: FnSubst,\n-}\n-/// A wrapper for the substs on a Fn.\n-#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-pub struct FnSubst(pub Substitution);\n-\n-impl FnPointer {\n-    /// Represent the current `Fn` as if it was wrapped in `Binders`\n-    pub fn into_binders(self, interner: &Interner) -> Binders<FnSubst> {\n-        Binders::new(\n-            VariableKinds::from_iter(\n-                interner,\n-                (0..self.num_binders).map(|_| VariableKind::Lifetime),\n-            ),\n-            self.substitution,\n-        )\n-    }\n-\n-    /// Represent the current `Fn` as if it was wrapped in `Binders`\n-    pub fn as_binders(&self, interner: &Interner) -> Binders<&FnSubst> {\n-        Binders::new(\n-            VariableKinds::from_iter(\n-                interner,\n-                (0..self.num_binders).map(|_| VariableKind::Lifetime),\n-            ),\n-            &self.substitution,\n-        )\n-    }\n-}\n-\n-#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-pub enum AliasTy {\n-    /// A \"projection\" type corresponds to an (unnormalized)\n-    /// projection like `<P0 as Trait<P1..Pn>>::Foo`. Note that the\n-    /// trait and all its parameters are fully known.\n-    Projection(ProjectionTy),\n-    /// An opaque type (`impl Trait`).\n-    ///\n-    /// This is currently only used for return type impl trait; each instance of\n-    /// `impl Trait` in a return type gets its own ID.\n-    Opaque(OpaqueTy),\n-}\n-\n-/// A type.\n-///\n-/// See also the `TyKind` enum in rustc (librustc/ty/sty.rs), which represents\n-/// the same thing (but in a different way).\n-///\n-/// This should be cheap to clone.\n-#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-pub enum TyKind {\n-    /// Structures, enumerations and unions.\n-    Adt(chalk_ir::AdtId<Interner>, Substitution),\n-\n-    /// Represents an associated item like `Iterator::Item`.  This is used\n-    /// when we have tried to normalize a projection like `T::Item` but\n-    /// couldn't find a better representation.  In that case, we generate\n-    /// an **application type** like `(Iterator::Item)<T>`.\n-    AssociatedType(AssocTypeId, Substitution),\n-\n-    /// a scalar type like `bool` or `u32`\n-    Scalar(Scalar),\n-\n-    /// A tuple type.  For example, `(i32, bool)`.\n-    Tuple(usize, Substitution),\n-\n-    /// An array with the given length. Written as `[T; n]`.\n-    Array(Ty, Const),\n-\n-    /// The pointee of an array slice.  Written as `[T]`.\n-    Slice(Ty),\n-\n-    /// A raw pointer. Written as `*mut T` or `*const T`\n-    Raw(Mutability, Ty),\n-\n-    /// A reference; a pointer with an associated lifetime. Written as\n-    /// `&'a mut T` or `&'a T`.\n-    Ref(Mutability, Lifetime, Ty),\n-\n-    /// This represents a placeholder for an opaque type in situations where we\n-    /// don't know the hidden type (i.e. currently almost always). This is\n-    /// analogous to the `AssociatedType` type constructor.\n-    /// It is also used as the type of async block, with one type parameter\n-    /// representing the Future::Output type.\n-    OpaqueType(OpaqueTyId, Substitution),\n-\n-    /// The anonymous type of a function declaration/definition. Each\n-    /// function has a unique type, which is output (for a function\n-    /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.\n-    ///\n-    /// This includes tuple struct / enum variant constructors as well.\n-    ///\n-    /// For example the type of `bar` here:\n-    ///\n-    /// ```\n-    /// fn foo() -> i32 { 1 }\n-    /// let bar = foo; // bar: fn() -> i32 {foo}\n-    /// ```\n-    FnDef(FnDefId, Substitution),\n-\n-    /// The pointee of a string slice. Written as `str`.\n-    Str,\n-\n-    /// The never type `!`.\n-    Never,\n-\n-    /// The type of a specific closure.\n-    ///\n-    /// The closure signature is stored in a `FnPtr` type in the first type\n-    /// parameter.\n-    Closure(ClosureId, Substitution),\n-\n-    /// Represents a foreign type declared in external blocks.\n-    Foreign(ForeignDefId),\n-\n-    /// A pointer to a function.  Written as `fn() -> i32`.\n-    ///\n-    /// For example the type of `bar` here:\n-    ///\n-    /// ```\n-    /// fn foo() -> i32 { 1 }\n-    /// let bar: fn() -> i32 = foo;\n-    /// ```\n-    Function(FnPointer),\n-\n-    /// An \"alias\" type represents some form of type alias, such as:\n-    /// - An associated type projection like `<T as Iterator>::Item`\n-    /// - `impl Trait` types\n-    /// - Named type aliases like `type Foo<X> = Vec<X>`\n-    Alias(AliasTy),\n-\n-    /// A placeholder for a type parameter; for example, `T` in `fn f<T>(x: T)\n-    /// {}` when we're type-checking the body of that function. In this\n-    /// situation, we know this stands for *some* type, but don't know the exact\n-    /// type.\n-    Placeholder(PlaceholderIndex),\n-\n-    /// A bound type variable. This is used in various places: when representing\n-    /// some polymorphic type like the type of function `fn f<T>`, the type\n-    /// parameters get turned into variables; during trait resolution, inference\n-    /// variables get turned into bound variables and back; and in `Dyn` the\n-    /// `Self` type is represented with a bound variable as well.\n-    BoundVar(BoundVar),\n-\n-    /// A type variable used during type checking.\n-    InferenceVar(InferenceVar, TyVariableKind),\n-\n-    /// A trait object (`dyn Trait` or bare `Trait` in pre-2018 Rust).\n-    ///\n-    /// The predicates are quantified over the `Self` type, i.e. `Ty::Bound(0)`\n-    /// represents the `Self` type inside the bounds. This is currently\n-    /// implicit; Chalk has the `Binders` struct to make it explicit, but it\n-    /// didn't seem worth the overhead yet.\n-    Dyn(DynTy),\n-\n-    /// A placeholder for a type which could not be computed; this is propagated\n-    /// to avoid useless error messages. Doubles as a placeholder where type\n-    /// variables are inserted before type checking, since we want to try to\n-    /// infer a better type here anyway -- for the IDE use case, we want to try\n-    /// to infer as much as possible even in the presence of type errors.\n-    Error,\n-}\n-\n-#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-pub struct Ty(Arc<TyKind>);\n-\n-impl TyKind {\n-    pub fn intern(self, _interner: &Interner) -> Ty {\n-        Ty(Arc::new(self))\n-    }\n-}\n-\n-impl Ty {\n-    pub fn kind(&self, _interner: &Interner) -> &TyKind {\n-        &self.0\n-    }\n-\n-    pub fn interned_mut(&mut self) -> &mut TyKind {\n-        Arc::make_mut(&mut self.0)\n-    }\n-\n-    pub fn into_inner(self) -> TyKind {\n-        Arc::try_unwrap(self.0).unwrap_or_else(|a| (*a).clone())\n-    }\n-}\n-\n-#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-pub struct GenericArg {\n-    interned: GenericArgData,\n-}\n-\n-#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-pub enum GenericArgData {\n-    Ty(Ty),\n-}\n-\n-impl GenericArg {\n-    /// Constructs a generic argument using `GenericArgData`.\n-    pub fn new(_interner: &Interner, data: GenericArgData) -> Self {\n-        GenericArg { interned: data }\n-    }\n-\n-    /// Gets the interned value.\n-    pub fn interned(&self) -> &GenericArgData {\n-        &self.interned\n-    }\n-\n-    /// Asserts that this is a type argument.\n-    pub fn assert_ty_ref(&self, interner: &Interner) -> &Ty {\n-        self.ty(interner).unwrap()\n-    }\n-\n-    /// Checks whether the generic argument is a type.\n-    pub fn is_ty(&self, _interner: &Interner) -> bool {\n-        match self.interned() {\n-            GenericArgData::Ty(_) => true,\n-        }\n-    }\n-\n-    /// Returns the type if it is one, `None` otherwise.\n-    pub fn ty(&self, _interner: &Interner) -> Option<&Ty> {\n-        match self.interned() {\n-            GenericArgData::Ty(t) => Some(t),\n-        }\n-    }\n-\n-    pub fn interned_mut(&mut self) -> &mut GenericArgData {\n-        &mut self.interned\n-    }\n-}\n-\n-/// A list of substitutions for generic parameters.\n-#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-pub struct Substitution(SmallVec<[GenericArg; 2]>);\n-\n-impl Substitution {\n-    pub fn interned(&self) -> &SmallVec<[GenericArg; 2]> {\n-        &self.0\n-    }\n-\n-    pub fn len(&self, _: &Interner) -> usize {\n-        self.0.len()\n-    }\n-\n-    pub fn is_empty(&self, _: &Interner) -> bool {\n-        self.0.is_empty()\n-    }\n-\n-    pub fn at(&self, _: &Interner, i: usize) -> &GenericArg {\n-        &self.0[i]\n-    }\n-\n-    pub fn empty(_: &Interner) -> Substitution {\n-        Substitution(SmallVec::new())\n-    }\n-\n-    pub fn iter(&self, _: &Interner) -> std::slice::Iter<'_, GenericArg> {\n-        self.0.iter()\n-    }\n-\n-    pub fn from1(_interner: &Interner, ty: Ty) -> Substitution {\n-        Substitution::intern({\n-            let mut v = SmallVec::new();\n-            v.push(ty.cast(&Interner));\n-            v\n-        })\n-    }\n-\n-    pub fn from_iter(\n-        interner: &Interner,\n-        elements: impl IntoIterator<Item = impl CastTo<GenericArg>>,\n-    ) -> Self {\n-        Substitution(elements.into_iter().casted(interner).collect())\n-    }\n-\n-    pub fn apply<T: TypeWalk>(&self, value: T, _interner: &Interner) -> T {\n-        value.subst_bound_vars(self)\n-    }\n-\n-    // Temporary helper functions, to be removed\n-    pub fn intern(interned: SmallVec<[GenericArg; 2]>) -> Substitution {\n-        Substitution(interned)\n-    }\n-\n-    pub fn interned_mut(&mut self) -> &mut SmallVec<[GenericArg; 2]> {\n-        &mut self.0\n-    }\n-}\n-\n-#[derive(Clone, PartialEq, Eq, Hash)]\n-pub struct Binders<T> {\n-    /// The binders that quantify over the value.\n-    pub binders: VariableKinds,\n-    value: T,\n-}\n-\n-impl<T> Binders<T> {\n-    pub fn new(binders: VariableKinds, value: T) -> Self {\n-        Self { binders, value }\n-    }\n-\n-    pub fn empty(_interner: &Interner, value: T) -> Self {\n-        crate::make_only_type_binders(0, value)\n-    }\n-\n-    pub fn as_ref(&self) -> Binders<&T> {\n-        Binders { binders: self.binders.clone(), value: &self.value }\n-    }\n-\n-    pub fn map<U>(self, f: impl FnOnce(T) -> U) -> Binders<U> {\n-        Binders { binders: self.binders, value: f(self.value) }\n-    }\n-\n-    pub fn filter_map<U>(self, f: impl FnOnce(T) -> Option<U>) -> Option<Binders<U>> {\n-        Some(Binders { binders: self.binders, value: f(self.value)? })\n-    }\n-\n-    pub fn skip_binders(&self) -> &T {\n-        &self.value\n-    }\n-\n-    pub fn into_value_and_skipped_binders(self) -> (T, VariableKinds) {\n-        (self.value, self.binders)\n-    }\n-\n-    /// Returns the number of binders.\n-    pub fn len(&self, interner: &Interner) -> usize {\n-        self.binders.len(interner)\n-    }\n-\n-    // Temporary helper function, to be removed\n-    pub fn skip_binders_mut(&mut self) -> &mut T {\n-        &mut self.value\n-    }\n-}\n-\n-impl<T: Clone> Binders<&T> {\n-    pub fn cloned(&self) -> Binders<T> {\n-        Binders::new(self.binders.clone(), self.value.clone())\n-    }\n-}\n-\n-impl<T: TypeWalk> Binders<T> {\n-    /// Substitutes all variables.\n-    pub fn substitute(self, interner: &Interner, subst: &Substitution) -> T {\n-        let (value, binders) = self.into_value_and_skipped_binders();\n-        assert_eq!(subst.len(interner), binders.len(interner));\n-        value.subst_bound_vars(subst)\n-    }\n-}\n-\n-impl<T: std::fmt::Debug> std::fmt::Debug for Binders<T> {\n-    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {\n-        let Binders { ref binders, ref value } = *self;\n-        write!(fmt, \"for{:?} \", binders.inner_debug(&Interner))?;\n-        std::fmt::Debug::fmt(value, fmt)\n-    }\n-}\n-\n-/// A trait with type parameters. This includes the `Self`, so this represents a concrete type implementing the trait.\n-#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-pub struct TraitRef {\n-    pub trait_id: ChalkTraitId,\n-    pub substitution: Substitution,\n-}\n-\n-impl TraitRef {\n-    pub fn self_type_parameter(&self, interner: &Interner) -> Ty {\n-        self.substitution.at(interner, 0).assert_ty_ref(interner).clone()\n-    }\n-}\n-\n-/// Like `generics::WherePredicate`, but with resolved types: A condition on the\n-/// parameters of a generic item.\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum WhereClause {\n-    /// The given trait needs to be implemented for its type parameters.\n-    Implemented(TraitRef),\n-    /// An associated type bindings like in `Iterator<Item = T>`.\n-    AliasEq(AliasEq),\n-}\n-\n-pub type QuantifiedWhereClause = Binders<WhereClause>;\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct QuantifiedWhereClauses(Arc<[QuantifiedWhereClause]>);\n-\n-impl QuantifiedWhereClauses {\n-    pub fn from_iter(\n-        _interner: &Interner,\n-        elements: impl IntoIterator<Item = QuantifiedWhereClause>,\n-    ) -> Self {\n-        QuantifiedWhereClauses(elements.into_iter().collect())\n-    }\n-\n-    pub fn interned(&self) -> &Arc<[QuantifiedWhereClause]> {\n-        &self.0\n-    }\n-\n-    pub fn interned_mut(&mut self) -> &mut Arc<[QuantifiedWhereClause]> {\n-        &mut self.0\n-    }\n-}\n-\n-/// Basically a claim (currently not validated / checked) that the contained\n-/// type / trait ref contains no inference variables; any inference variables it\n-/// contained have been replaced by bound variables, and `kinds` tells us how\n-/// many there are and whether they were normal or float/int variables. This is\n-/// used to erase irrelevant differences between types before using them in\n-/// queries.\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Canonical<T> {\n-    pub value: T,\n-    pub binders: CanonicalVarKinds,\n-}\n-\n-/// Something (usually a goal), along with an environment.\n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n-pub struct InEnvironment<T> {\n-    pub environment: chalk_ir::Environment<Interner>,\n-    pub goal: T,\n-}\n-\n-impl<T> InEnvironment<T> {\n-    pub fn new(environment: &chalk_ir::Environment<Interner>, value: T) -> InEnvironment<T> {\n-        InEnvironment { environment: environment.clone(), goal: value }\n-    }\n-}\n-\n-/// Something that needs to be proven (by Chalk) during type checking, e.g. that\n-/// a certain type implements a certain trait. Proving the Obligation might\n-/// result in additional information about inference variables.\n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum DomainGoal {\n-    Holds(WhereClause),\n-}\n-\n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n-pub struct AliasEq {\n-    pub alias: AliasTy,\n-    pub ty: Ty,\n-}\n-\n-#[derive(Clone, Debug, PartialEq, Eq)]\n-pub struct ConstrainedSubst {\n-    pub subst: Substitution,\n-}\n-\n-#[derive(Clone, Debug, PartialEq, Eq)]\n-/// A (possible) solution for a proposed goal.\n-pub enum Solution {\n-    /// The goal indeed holds, and there is a unique value for all existential\n-    /// variables.\n-    Unique(Canonical<ConstrainedSubst>),\n-\n-    /// The goal may be provable in multiple ways, but regardless we may have some guidance\n-    /// for type inference. In this case, we don't return any lifetime\n-    /// constraints, since we have not \"committed\" to any particular solution\n-    /// yet.\n-    Ambig(Guidance),\n-}\n-\n-#[derive(Clone, Debug, PartialEq, Eq)]\n-/// When a goal holds ambiguously (e.g., because there are multiple possible\n-/// solutions), we issue a set of *guidance* back to type inference.\n-pub enum Guidance {\n-    /// The existential variables *must* have the given values if the goal is\n-    /// ever to hold, but that alone isn't enough to guarantee the goal will\n-    /// actually hold.\n-    Definite(Canonical<Substitution>),\n-\n-    /// There are multiple plausible values for the existentials, but the ones\n-    /// here are suggested as the preferred choice heuristically. These should\n-    /// be used for inference fallback only.\n-    Suggested(Canonical<Substitution>),\n-\n-    /// There's no useful information to feed back to type inference\n-    Unknown,\n-}\n-\n-/// The kinds of placeholders we need during type inference. There's separate\n-/// values for general types, and for integer and float variables. The latter\n-/// two are used for inference of literal values (e.g. `100` could be one of\n-/// several integer types).\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n-pub struct InferenceVar {\n-    index: u32,\n-}\n-\n-impl From<u32> for InferenceVar {\n-    fn from(index: u32) -> InferenceVar {\n-        InferenceVar { index }\n-    }\n-}\n-\n-impl InferenceVar {\n-    /// Gets the underlying index value.\n-    pub fn index(self) -> u32 {\n-        self.index\n-    }\n-}"}, {"sha": "873d563c0da76a79a6345bde2fbb55083ff8f7ff", "filename": "crates/hir_ty/src/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77d974ae6b73f8b733f12e18d220fa8c4fc1ee38/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d974ae6b73f8b733f12e18d220fa8c4fc1ee38/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fwalk.rs?ref=77d974ae6b73f8b733f12e18d220fa8c4fc1ee38", "patch": "@@ -408,7 +408,7 @@ impl TypeWalk for AliasEq {\n     }\n }\n \n-impl TypeWalk for FnSubst {\n+impl TypeWalk for FnSubst<Interner> {\n     fn walk(&self, f: &mut impl FnMut(&Ty)) {\n         self.0.walk(f)\n     }"}]}