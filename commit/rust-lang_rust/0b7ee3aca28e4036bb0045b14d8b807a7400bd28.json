{"sha": "0b7ee3aca28e4036bb0045b14d8b807a7400bd28", "node_id": "C_kwDOAAsO6NoAKDBiN2VlM2FjYTI4ZTQwMzZiYjAwNDViMTRkOGI4MDdhNzQwMGJkMjg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-17T21:00:03Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-19T14:41:41Z"}, "message": "Drop ImplData.", "tree": {"sha": "fd39083b6cf060ac76b521c6c79bcf54ed380d3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd39083b6cf060ac76b521c6c79bcf54ed380d3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b7ee3aca28e4036bb0045b14d8b807a7400bd28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7ee3aca28e4036bb0045b14d8b807a7400bd28", "html_url": "https://github.com/rust-lang/rust/commit/0b7ee3aca28e4036bb0045b14d8b807a7400bd28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b7ee3aca28e4036bb0045b14d8b807a7400bd28/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7c306f94a426c945e870753a8ea6510ab43e9c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7c306f94a426c945e870753a8ea6510ab43e9c2", "html_url": "https://github.com/rust-lang/rust/commit/c7c306f94a426c945e870753a8ea6510ab43e9c2"}], "stats": {"total": 107, "additions": 31, "deletions": 76}, "files": [{"sha": "4036cb9ae95bf03499fc684b62cf1b0bb1f96116", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ee3aca28e4036bb0045b14d8b807a7400bd28/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ee3aca28e4036bb0045b14d8b807a7400bd28/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=0b7ee3aca28e4036bb0045b14d8b807a7400bd28", "patch": "@@ -1014,37 +1014,10 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         self.root.tables.visibility.get(self, id).unwrap().decode(self)\n     }\n \n-    fn get_impl_data(self, id: DefIndex) -> ImplData {\n-        match self.kind(id) {\n-            EntryKind::Impl(data) => data.decode(self),\n-            _ => bug!(),\n-        }\n-    }\n-\n-    fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {\n-        self.get_impl_data(id).parent_impl\n-    }\n-\n-    fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {\n-        self.get_impl_data(id).polarity\n-    }\n-\n-    fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {\n-        self.get_impl_data(id).defaultness\n-    }\n-\n-    fn get_impl_constness(self, id: DefIndex) -> hir::Constness {\n-        self.get_impl_data(id).constness\n-    }\n-\n     fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {\n         self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))\n     }\n \n-    fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {\n-        self.get_impl_data(id).coerce_unsized_info\n-    }\n-\n     fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {\n         self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))\n     }"}, {"sha": "430720ac2dba21ff9612c7ab78d936e2e6e64517", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ee3aca28e4036bb0045b14d8b807a7400bd28/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ee3aca28e4036bb0045b14d8b807a7400bd28/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=0b7ee3aca28e4036bb0045b14d8b807a7400bd28", "patch": "@@ -131,6 +131,11 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     visibility => { table }\n     unused_generic_params => { table }\n     opt_def_kind => { table }\n+    impl_parent => { table }\n+    impl_polarity => { table }\n+    impl_defaultness => { table }\n+    impl_constness => { table }\n+    coerce_unsized_info => { table }\n \n     trait_def => { cdata.get_trait_def(def_id.index, tcx.sess) }\n     adt_def => { cdata.get_adt_def(def_id.index, tcx) }\n@@ -140,12 +145,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     }\n     associated_item_def_ids => { cdata.get_associated_item_def_ids(tcx, def_id.index) }\n     associated_item => { cdata.get_associated_item(def_id.index) }\n-    impl_polarity => { cdata.get_impl_polarity(def_id.index) }\n-    coerce_unsized_info => {\n-        cdata.get_coerce_unsized_info(def_id.index).unwrap_or_else(|| {\n-            bug!(\"coerce_unsized_info: `{:?}` is missing its info\", def_id);\n-        })\n-    }\n     mir_const_qualif => { cdata.mir_const_qualif(def_id.index) }\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }\n     is_const_fn_raw => { cdata.is_const_fn_raw(def_id.index) }\n@@ -156,7 +155,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     item_attrs => { tcx.arena.alloc_from_iter(cdata.get_item_attrs(def_id.index, tcx.sess)) }\n     fn_arg_names => { cdata.get_fn_param_names(tcx, def_id.index) }\n     rendered_const => { cdata.get_rendered_const(def_id.index) }\n-    impl_parent => { cdata.get_parent_impl(def_id.index) }\n     trait_of_item => { cdata.get_trait_of_item(def_id.index) }\n     is_mir_available => { cdata.is_item_mir_available(def_id.index) }\n     is_ctfe_mir_available => { cdata.is_ctfe_mir_available(def_id.index) }\n@@ -176,8 +174,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     }\n     is_no_builtins => { cdata.root.no_builtins }\n     symbol_mangling_version => { cdata.root.symbol_mangling_version }\n-    impl_defaultness => { cdata.get_impl_defaultness(def_id.index) }\n-    impl_constness => { cdata.get_impl_constness(def_id.index) }\n     reachable_non_generics => {\n         let reachable_non_generics = tcx\n             .exported_symbols(cdata.cnum)"}, {"sha": "172ba904536932c14f3bb0596341872f6ecdfb0e", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ee3aca28e4036bb0045b14d8b807a7400bd28/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ee3aca28e4036bb0045b14d8b807a7400bd28/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=0b7ee3aca28e4036bb0045b14d8b807a7400bd28", "patch": "@@ -1468,39 +1468,31 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 )\n             }\n             hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {\n+                record!(self.tables.impl_defaultness[def_id] <- defaultness);\n+                record!(self.tables.impl_constness[def_id] <- constness);\n+\n                 let trait_ref = self.tcx.impl_trait_ref(def_id);\n-                let polarity = self.tcx.impl_polarity(def_id);\n-                let parent = if let Some(trait_ref) = trait_ref {\n+                if let Some(trait_ref) = trait_ref {\n                     let trait_def = self.tcx.trait_def(trait_ref.def_id);\n-                    trait_def.ancestors(self.tcx, def_id).ok().and_then(|mut an| {\n-                        an.nth(1).and_then(|node| match node {\n-                            specialization_graph::Node::Impl(parent) => Some(parent),\n-                            _ => None,\n-                        })\n-                    })\n-                } else {\n-                    None\n-                };\n+                    if let Some(mut an) = trait_def.ancestors(self.tcx, def_id).ok() {\n+                        if let Some(specialization_graph::Node::Impl(parent)) = an.nth(1) {\n+                            record!(self.tables.impl_parent[def_id] <- parent);\n+                        }\n+                    }\n \n-                // if this is an impl of `CoerceUnsized`, create its\n-                // \"unsized info\", else just store None\n-                let coerce_unsized_info = trait_ref.and_then(|t| {\n-                    if Some(t.def_id) == self.tcx.lang_items().coerce_unsized_trait() {\n-                        Some(self.tcx.at(item.span).coerce_unsized_info(def_id))\n-                    } else {\n-                        None\n+                    // if this is an impl of `CoerceUnsized`, create its\n+                    // \"unsized info\", else just store None\n+                    if Some(trait_ref.def_id) == self.tcx.lang_items().coerce_unsized_trait() {\n+                        let coerce_unsized_info =\n+                            self.tcx.at(item.span).coerce_unsized_info(def_id);\n+                        record!(self.tables.coerce_unsized_info[def_id] <- coerce_unsized_info);\n                     }\n-                });\n+                }\n \n-                let data = ImplData {\n-                    polarity,\n-                    defaultness,\n-                    constness,\n-                    parent_impl: parent,\n-                    coerce_unsized_info,\n-                };\n+                let polarity = self.tcx.impl_polarity(def_id);\n+                record!(self.tables.impl_polarity[def_id] <- polarity);\n \n-                EntryKind::Impl(self.lazy(data))\n+                EntryKind::Impl\n             }\n             hir::ItemKind::Trait(..) => {\n                 let trait_def = self.tcx.trait_def(def_id);"}, {"sha": "924f194ce85c255a8c7402c2b42c06a78e9fa4ee", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ee3aca28e4036bb0045b14d8b807a7400bd28/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ee3aca28e4036bb0045b14d8b807a7400bd28/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=0b7ee3aca28e4036bb0045b14d8b807a7400bd28", "patch": "@@ -302,6 +302,12 @@ define_tables! {\n     mir_for_ctfe: Table<DefIndex, Lazy!(mir::Body<'tcx>)>,\n     promoted_mir: Table<DefIndex, Lazy!(IndexVec<mir::Promoted, mir::Body<'tcx>>)>,\n     thir_abstract_const: Table<DefIndex, Lazy!(&'tcx [thir::abstract_const::Node<'tcx>])>,\n+    impl_parent: Table<DefIndex, Lazy!(DefId)>,\n+    impl_polarity: Table<DefIndex, Lazy!(ty::ImplPolarity)>,\n+    impl_constness: Table<DefIndex, Lazy!(hir::Constness)>,\n+    impl_defaultness: Table<DefIndex, Lazy!(hir::Defaultness)>,\n+    // FIXME(eddyb) perhaps compute this on the fly if cheap enough?\n+    coerce_unsized_info: Table<DefIndex, Lazy!(ty::adjustment::CoerceUnsizedInfo)>,\n \n     trait_item_def_id: Table<DefIndex, Lazy<DefId>>,\n     inherent_impls: Table<DefIndex, Lazy<[DefIndex]>>,\n@@ -344,7 +350,7 @@ enum EntryKind {\n     Closure,\n     Generator(hir::GeneratorKind),\n     Trait(Lazy<TraitData>),\n-    Impl(Lazy<ImplData>),\n+    Impl,\n     AssocFn(Lazy<AssocFnData>),\n     AssocType(AssocContainer),\n     AssocConst(AssocContainer, mir::ConstQualifs, Lazy<RenderedConst>),\n@@ -383,18 +389,6 @@ struct TraitData {\n     must_implement_one_of: Option<Box<[Ident]>>,\n }\n \n-#[derive(TyEncodable, TyDecodable)]\n-struct ImplData {\n-    polarity: ty::ImplPolarity,\n-    constness: hir::Constness,\n-    defaultness: hir::Defaultness,\n-    parent_impl: Option<DefId>,\n-\n-    /// This is `Some` only for impls of `CoerceUnsized`.\n-    // FIXME(eddyb) perhaps compute this on the fly if cheap enough?\n-    coerce_unsized_info: Option<ty::adjustment::CoerceUnsizedInfo>,\n-}\n-\n /// Describes whether the container of an associated item\n /// is a trait or an impl and whether, in a trait, it has\n /// a default, or an in impl, whether it's marked \"default\"."}]}