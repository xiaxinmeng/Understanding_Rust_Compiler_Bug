{"sha": "8ac351c2091973a4b7ce3c0428569bf5486e9a72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYzM1MWMyMDkxOTczYTRiN2NlM2MwNDI4NTY5YmY1NDg2ZTlhNzI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-06-08T23:21:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-08T23:21:07Z"}, "message": "Rollup merge of #51412 - nnethercote:pending_obligations, r=estebank\n\nAvoid useless Vec clones in pending_obligations().\n\nThe only instance of `ObligationForest` in use has an obligation type of\n`PendingPredicateObligation`, which contains a `PredicateObligation` and a\n`Vec<Ty>`.\n\n`FulfillmentContext::pending_obligations()` calls\n`ObligationForest::pending_obligations()`, which clones all the\n`PendingPredicateObligation`s. But the `Vec<Ty>` field of those cloned\nobligations is never touched.\n\nThis patch changes `ObligationForest::pending_obligations()` to\n`map_pending_obligations` -- which gives callers control about which part\nof the obligation to clone -- and takes advantage of the change to avoid\ncloning the `Vec<Ty>`. The change speeds up runs of a few rustc-perf\nbenchmarks, the best by 1%.", "tree": {"sha": "b74bea9ae3d0d3ac9efaebfa5db7c52ee19bade6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b74bea9ae3d0d3ac9efaebfa5db7c52ee19bade6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ac351c2091973a4b7ce3c0428569bf5486e9a72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbGw9jCRBK7hj4Ov3rIwAAdHIIAAmgUO24DNFe7+bnMSXoBkFr\n6gqB67LdSM0stF876sgwKrwCL2fIiLUATs4u0hzDFiad9YXINZqz8RPG2dTFB/ui\n/W+QYLqmDe/dN6WWd//NtrH5dmWxNUaGBAkrb37L5HGZqsZtwEZJm68EZOiWqXmF\neOeBcDtQnvOtnoe3ffKIW7ed6oMt+JvpEucSFalhOFWGVORYGOHlqF4o5ipZox8d\nSr/P3bDiN5tciCBqFAjmJZxKwv1TzUPC3mM9AhIhux3xXxzbTn9Uju53uGWfAinT\nmF9z6UUJIXxBZjWrkzlyLghBEU5zxLHyiW1FZp96zROMyBAL0WxhNW9wicabdSs=\n=vYQG\n-----END PGP SIGNATURE-----\n", "payload": "tree b74bea9ae3d0d3ac9efaebfa5db7c52ee19bade6\nparent 898bb78024e618f43375564bf59655acdd7ddbc3\nparent b0440d359b0dab992e8f01d63523799a72c81285\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1528500067 -0600\ncommitter GitHub <noreply@github.com> 1528500067 -0600\n\nRollup merge of #51412 - nnethercote:pending_obligations, r=estebank\n\nAvoid useless Vec clones in pending_obligations().\n\nThe only instance of `ObligationForest` in use has an obligation type of\n`PendingPredicateObligation`, which contains a `PredicateObligation` and a\n`Vec<Ty>`.\n\n`FulfillmentContext::pending_obligations()` calls\n`ObligationForest::pending_obligations()`, which clones all the\n`PendingPredicateObligation`s. But the `Vec<Ty>` field of those cloned\nobligations is never touched.\n\nThis patch changes `ObligationForest::pending_obligations()` to\n`map_pending_obligations` -- which gives callers control about which part\nof the obligation to clone -- and takes advantage of the change to avoid\ncloning the `Vec<Ty>`. The change speeds up runs of a few rustc-perf\nbenchmarks, the best by 1%.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac351c2091973a4b7ce3c0428569bf5486e9a72", "html_url": "https://github.com/rust-lang/rust/commit/8ac351c2091973a4b7ce3c0428569bf5486e9a72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ac351c2091973a4b7ce3c0428569bf5486e9a72/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "898bb78024e618f43375564bf59655acdd7ddbc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/898bb78024e618f43375564bf59655acdd7ddbc3", "html_url": "https://github.com/rust-lang/rust/commit/898bb78024e618f43375564bf59655acdd7ddbc3"}, {"sha": "b0440d359b0dab992e8f01d63523799a72c81285", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0440d359b0dab992e8f01d63523799a72c81285", "html_url": "https://github.com/rust-lang/rust/commit/b0440d359b0dab992e8f01d63523799a72c81285"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "40d54885619fabe07477589a645eac60ec8aacf3", "filename": "src/librustc/traits/engine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ac351c2091973a4b7ce3c0428569bf5486e9a72/src%2Flibrustc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac351c2091973a4b7ce3c0428569bf5486e9a72/src%2Flibrustc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fengine.rs?ref=8ac351c2091973a4b7ce3c0428569bf5486e9a72", "patch": "@@ -13,7 +13,7 @@ use ty::{self, Ty, TyCtxt};\n use hir::def_id::DefId;\n \n use super::{FulfillmentContext, FulfillmentError};\n-use super::{ObligationCause, PendingPredicateObligation, PredicateObligation};\n+use super::{ObligationCause, PredicateObligation};\n \n pub trait TraitEngine<'tcx>: 'tcx {\n     fn normalize_projection_type<'a, 'gcx>(\n@@ -49,7 +49,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n         infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n     ) -> Result<(), Vec<FulfillmentError<'tcx>>>;\n \n-    fn pending_obligations(&self) -> Vec<PendingPredicateObligation<'tcx>>;\n+    fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>>;\n }\n \n impl<'a, 'gcx, 'tcx> dyn TraitEngine<'tcx> {"}, {"sha": "3896b1a25a20c9c0ad46c2ed268ab599292d3052", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ac351c2091973a4b7ce3c0428569bf5486e9a72/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac351c2091973a4b7ce3c0428569bf5486e9a72/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=8ac351c2091973a4b7ce3c0428569bf5486e9a72", "patch": "@@ -241,8 +241,8 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         self.select(&mut selcx)\n     }\n \n-    fn pending_obligations(&self) -> Vec<PendingPredicateObligation<'tcx>> {\n-        self.predicates.pending_obligations()\n+    fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {\n+        self.predicates.map_pending_obligations(|o| o.obligation.clone())\n     }\n }\n "}, {"sha": "c3934c4e1b850aa495df207f8d924bb338f6ab15", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ac351c2091973a4b7ce3c0428569bf5486e9a72/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac351c2091973a4b7ce3c0428569bf5486e9a72/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=8ac351c2091973a4b7ce3c0428569bf5486e9a72", "patch": "@@ -229,13 +229,13 @@ impl<O: ForestObligation> ObligationForest<O> {\n     }\n \n     /// Returns the set of obligations that are in a pending state.\n-    pub fn pending_obligations(&self) -> Vec<O>\n-        where O: Clone\n+    pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>\n+        where F: Fn(&O) -> P\n     {\n         self.nodes\n             .iter()\n             .filter(|n| n.state.get() == NodeState::Pending)\n-            .map(|n| n.obligation.clone())\n+            .map(|n| f(&n.obligation))\n             .collect()\n     }\n "}, {"sha": "439c1b34227940fdf6f8cde064734ea4dd9dcb6a", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ac351c2091973a4b7ce3c0428569bf5486e9a72/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac351c2091973a4b7ce3c0428569bf5486e9a72/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=8ac351c2091973a4b7ce3c0428569bf5486e9a72", "patch": "@@ -225,7 +225,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let expected_sig = fulfillment_cx\n             .pending_obligations()\n             .iter()\n-            .map(|obligation| &obligation.obligation)\n             .filter_map(|obligation| {\n                 debug!(\n                     \"deduce_expectations_from_obligations: obligation.predicate={:?}\",\n@@ -257,7 +256,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let expected_kind = fulfillment_cx\n             .pending_obligations()\n             .iter()\n-            .map(|obligation| &obligation.obligation)\n             .filter_map(|obligation| {\n                 let opt_trait_ref = match obligation.predicate {\n                     ty::Predicate::Projection(ref data) => Some(data.to_poly_trait_ref(self.tcx)),"}]}