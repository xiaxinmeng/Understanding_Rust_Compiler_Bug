{"sha": "b55bb2e918560509418a8b79f8ce5aa2c0d5aaff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NWJiMmU5MTg1NjA1MDk0MThhOGI3OWY4Y2U1YWEyYzBkNWFhZmY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-10T21:34:38Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-24T22:33:13Z"}, "message": "Better messages for errors from Shallow borrows", "tree": {"sha": "7489d6f30c1ee5b5f9b9c7cce26daef3f35286dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7489d6f30c1ee5b5f9b9c7cce26daef3f35286dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b55bb2e918560509418a8b79f8ce5aa2c0d5aaff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b55bb2e918560509418a8b79f8ce5aa2c0d5aaff", "html_url": "https://github.com/rust-lang/rust/commit/b55bb2e918560509418a8b79f8ce5aa2c0d5aaff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b55bb2e918560509418a8b79f8ce5aa2c0d5aaff/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ced5c2d08af52de40d104687c2b6066d9daedecf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ced5c2d08af52de40d104687c2b6066d9daedecf", "html_url": "https://github.com/rust-lang/rust/commit/ced5c2d08af52de40d104687c2b6066d9daedecf"}], "stats": {"total": 105, "additions": 96, "deletions": 9}, "files": [{"sha": "b775fc81d4f614a4177494100c98885bc1af208c", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b55bb2e918560509418a8b79f8ce5aa2c0d5aaff/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b55bb2e918560509418a8b79f8ce5aa2c0d5aaff/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=b55bb2e918560509418a8b79f8ce5aa2c0d5aaff", "patch": "@@ -335,6 +335,22 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n             (BorrowKind::Mut { .. }, _, _, BorrowKind::Shallow, _, _)\n             | (BorrowKind::Unique, _, _, BorrowKind::Shallow, _, _) => {\n+                let mut err = tcx.cannot_mutate_in_match_guard(\n+                    span,\n+                    issued_span,\n+                    &desc_place,\n+                    \"mutably borrow\",\n+                    Origin::Mir,\n+                );\n+                borrow_spans.var_span_label(\n+                    &mut err,\n+                    format!(\n+                        \"borrow occurs due to use of `{}` in closure\",\n+                        desc_place\n+                    ),\n+                );\n+                err.buffer(&mut self.errors_buffer);\n+\n                 return;\n             }\n \n@@ -373,7 +389,16 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     Origin::Mir,\n                 ),\n \n-            (BorrowKind::Shared, _, _, BorrowKind::Shared, _, _) => unreachable!(),\n+            (BorrowKind::Shallow, _, _, BorrowKind::Unique, _, _)\n+            | (BorrowKind::Shallow, _, _, BorrowKind::Mut { .. }, _, _) => {\n+                // Shallow borrows are uses from the user's point of view.\n+                self.report_use_while_mutably_borrowed(context, (place, span), issued_borrow);\n+                return\n+            }\n+            (BorrowKind::Shared, _, _, BorrowKind::Shared, _, _)\n+            | (BorrowKind::Shared, _, _, BorrowKind::Shallow, _, _)\n+            | (BorrowKind::Shallow, _, _, BorrowKind::Shared, _, _)\n+            | (BorrowKind::Shallow, _, _, BorrowKind::Shallow, _, _) => unreachable!(),\n         };\n \n         if issued_spans == borrow_spans {\n@@ -785,12 +810,22 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let loan_span = loan_spans.args_or_use();\n \n         let tcx = self.infcx.tcx;\n-        let mut err = tcx.cannot_assign_to_borrowed(\n-            span,\n-            loan_span,\n-            &self.describe_place(place).unwrap_or(\"_\".to_owned()),\n-            Origin::Mir,\n-        );\n+        let mut err = if loan.kind == BorrowKind::Shallow {\n+            tcx.cannot_mutate_in_match_guard(\n+                span,\n+                loan_span,\n+                &self.describe_place(place).unwrap_or(\"_\".to_owned()),\n+                \"assign\",\n+                Origin::Mir,\n+            )\n+        } else {\n+            tcx.cannot_assign_to_borrowed(\n+                span,\n+                loan_span,\n+                &self.describe_place(place).unwrap_or(\"_\".to_owned()),\n+                Origin::Mir,\n+            )\n+        };\n \n         loan_spans.var_span_label(&mut err, \"borrow occurs due to use in closure\");\n "}, {"sha": "5d919e88cad6f08c0780175c6cae6be13037888b", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b55bb2e918560509418a8b79f8ce5aa2c0d5aaff/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b55bb2e918560509418a8b79f8ce5aa2c0d5aaff/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=b55bb2e918560509418a8b79f8ce5aa2c0d5aaff", "patch": "@@ -836,6 +836,7 @@ enum LocalMutationIsAllowed {\n enum InitializationRequiringAction {\n     Update,\n     Borrow,\n+    MatchOn,\n     Use,\n     Assignment,\n }\n@@ -850,6 +851,7 @@ impl InitializationRequiringAction {\n         match self {\n             InitializationRequiringAction::Update => \"update\",\n             InitializationRequiringAction::Borrow => \"borrow\",\n+            InitializationRequiringAction::MatchOn => \"use\", // no good noun\n             InitializationRequiringAction::Use => \"use\",\n             InitializationRequiringAction::Assignment => \"assign\",\n         }\n@@ -859,6 +861,7 @@ impl InitializationRequiringAction {\n         match self {\n             InitializationRequiringAction::Update => \"updated\",\n             InitializationRequiringAction::Borrow => \"borrowed\",\n+            InitializationRequiringAction::MatchOn => \"matched on\",\n             InitializationRequiringAction::Use => \"used\",\n             InitializationRequiringAction::Assignment => \"assigned\",\n         }\n@@ -991,7 +994,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     }\n \n                     match kind {\n-                        ReadKind::Copy => {\n+                        ReadKind::Copy  => {\n                             error_reported = true;\n                             this.report_use_while_mutably_borrowed(context, place_span, borrow)\n                         }\n@@ -1137,9 +1140,15 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     flow_state,\n                 );\n \n+                let action = if bk == BorrowKind::Shallow {\n+                    InitializationRequiringAction::MatchOn\n+                } else {\n+                    InitializationRequiringAction::Borrow\n+                };\n+\n                 self.check_if_path_or_subpath_is_moved(\n                     context,\n-                    InitializationRequiringAction::Borrow,\n+                    action,\n                     (place, span),\n                     flow_state,\n                 );"}, {"sha": "0c31e5c4da8ac605ca65eb25d1512253f39a2ec7", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b55bb2e918560509418a8b79f8ce5aa2c0d5aaff/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b55bb2e918560509418a8b79f8ce5aa2c0d5aaff/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=b55bb2e918560509418a8b79f8ce5aa2c0d5aaff", "patch": "@@ -1991,6 +1991,26 @@ fn main() {\n ```\n \"##,\n \n+E0510: r##\"\n+Cannot mutate place in this match guard.\n+\n+When matching on a variable it cannot be mutated in the match guards, as this\n+could cause the match to be non-exhaustive:\n+\n+```compile_fail,E0510\n+#![feature(nll, bind_by_move_pattern_guards)]\n+let mut x = Some(0);\n+match x {\n+    None => (),\n+    Some(v) if { x = None; false } => (),\n+    Some(_) => (), // No longer matches\n+}\n+```\n+\n+Here executing `x = None` would modify the value being matched and require us\n+to go \"back in time\" to the `None` arm.\n+\"##,\n+\n E0579: r##\"\n When matching against an exclusive range, the compiler verifies that the range\n is non-empty. Exclusive range patterns include the start point but not the end"}, {"sha": "6d5d3ba88f2f6e7d6a9171d31c096f93b8dbca36", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b55bb2e918560509418a8b79f8ce5aa2c0d5aaff/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b55bb2e918560509418a8b79f8ce5aa2c0d5aaff/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=b55bb2e918560509418a8b79f8ce5aa2c0d5aaff", "patch": "@@ -555,6 +555,29 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         self.cannot_borrow_path_as_mutable_because(span, path, \"\", o)\n     }\n \n+    fn cannot_mutate_in_match_guard(\n+        self,\n+        mutate_span: Span,\n+        match_span: Span,\n+        match_place: &str,\n+        action: &str,\n+        o: Origin,\n+    ) -> DiagnosticBuilder<'cx> {\n+        let mut err = struct_span_err!(\n+            self,\n+            mutate_span,\n+            E0510,\n+            \"cannot {} `{}` in match guard{OGN}\",\n+            action,\n+            match_place,\n+            OGN = o\n+        );\n+        err.span_label(mutate_span, format!(\"cannot {}\", action));\n+        err.span_label(match_span, format!(\"value is immutable in match guard\"));\n+\n+        self.cancel_if_wrong_origin(err, o)\n+    }\n+\n     fn cannot_borrow_across_generator_yield(\n         self,\n         span: Span,"}]}