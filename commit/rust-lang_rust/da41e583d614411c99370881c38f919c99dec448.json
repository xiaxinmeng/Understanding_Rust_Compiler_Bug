{"sha": "da41e583d614411c99370881c38f919c99dec448", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNDFlNTgzZDYxNDQxMWM5OTM3MDg4MWMzOGY5MTljOTlkZWM0NDg=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-20T11:24:08Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-30T22:00:48Z"}, "message": "Fix fallout in tests", "tree": {"sha": "7b5ad7416f4c33196e9f03f5aff1a0cfb3731878", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b5ad7416f4c33196e9f03f5aff1a0cfb3731878"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da41e583d614411c99370881c38f919c99dec448", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da41e583d614411c99370881c38f919c99dec448", "html_url": "https://github.com/rust-lang/rust/commit/da41e583d614411c99370881c38f919c99dec448", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da41e583d614411c99370881c38f919c99dec448/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c6f067961f4f7475a74e1f3c32ed0599f541291", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6f067961f4f7475a74e1f3c32ed0599f541291", "html_url": "https://github.com/rust-lang/rust/commit/0c6f067961f4f7475a74e1f3c32ed0599f541291"}], "stats": {"total": 570, "additions": 285, "deletions": 285}, "files": [{"sha": "a32d4de77557b4017f12692af54cc0db1badc70f", "filename": "src/test/compile-fail/associated-types-unsized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -14,7 +14,7 @@ trait Get {\n }\n \n fn foo<T:Get>(t: T) {\n-    let x = t.get(); //~ ERROR the trait `core::marker::Sized` is not implemented\n+    let x = t.get(); //~ ERROR the trait `std::marker::Sized` is not implemented\n }\n \n fn main() {"}, {"sha": "f05c8c31f10245edf5f8bf68d59e14fa8e72ce3b", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -10,8 +10,8 @@\n \n static i: String = 10;\n //~^ ERROR mismatched types\n-//~| expected `collections::string::String`\n+//~| expected `std::string::String`\n //~| found `_`\n-//~| expected struct `collections::string::String`\n+//~| expected struct `std::string::String`\n //~| found integral variable\n fn main() { println!(\"{}\", i); }"}, {"sha": "224187c8ac4cd135a48fd1bef13872861dbf6751", "filename": "src/test/compile-fail/bad-method-typaram-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn foo<T:'static>() {\n-    1.bar::<T>(); //~ ERROR `core::marker::Send` is not implemented\n+    1.bar::<T>(); //~ ERROR `std::marker::Send` is not implemented\n }\n \n trait bar {"}, {"sha": "e9dd0585fa9e91b59b9d4892b28f272a45a2b4be", "filename": "src/test/compile-fail/bad-sized.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -12,7 +12,7 @@ trait Trait {}\n \n pub fn main() {\n     let x: Vec<Trait + Sized> = Vec::new();\n-    //~^ ERROR the trait `core::marker::Sized` is not implemented\n-    //~| ERROR the trait `core::marker::Sized` is not implemented\n-    //~| ERROR the trait `core::marker::Sized` is not implemented\n+    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    //~| ERROR the trait `std::marker::Sized` is not implemented\n+    //~| ERROR the trait `std::marker::Sized` is not implemented\n }"}, {"sha": "3f26e3ce904cf68b37944d2075ba42acde5a0b02", "filename": "src/test/compile-fail/binop-bitxor-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:`^` cannot be applied to type `collections::string::String`\n+// error-pattern:`^` cannot be applied to type `std::string::String`\n \n fn main() { let x = \"a\".to_string() ^ \"b\".to_string(); }"}, {"sha": "e1bcc63fb2fed8d640a1ba396a4868383c4615d7", "filename": "src/test/compile-fail/builtin-superkinds-double-superkind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -13,9 +13,9 @@\n \n trait Foo : Send+Sync { }\n \n-impl <T: Sync+'static> Foo for (T,) { } //~ ERROR the trait `core::marker::Send` is not implemented\n+impl <T: Sync+'static> Foo for (T,) { } //~ ERROR the trait `std::marker::Send` is not implemented\n \n-impl <T: Send> Foo for (T,T) { } //~ ERROR the trait `core::marker::Sync` is not implemented\n+impl <T: Send> Foo for (T,T) { } //~ ERROR the trait `std::marker::Sync` is not implemented\n \n impl <T: Send+Sync> Foo for (T,T,T) { } // (ok)\n "}, {"sha": "5e2ba7a3b9d4662de77bf441bb8517960272f6d1", "filename": "src/test/compile-fail/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -22,6 +22,6 @@ struct X<T>(T);\n impl <T:Sync> RequiresShare for X<T> { }\n \n impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n-//~^ ERROR the trait `core::marker::Send` is not implemented\n+//~^ ERROR the trait `std::marker::Send` is not implemented\n \n fn main() { }"}, {"sha": "7c9c0df412a40619b3095b6199aa431d5bb411ba", "filename": "src/test/compile-fail/builtin-superkinds-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -14,6 +14,6 @@\n trait Foo : Send { }\n \n impl Foo for std::rc::Rc<i8> { }\n-//~^ ERROR the trait `core::marker::Send` is not implemented\n+//~^ ERROR the trait `std::marker::Send` is not implemented\n \n fn main() { }"}, {"sha": "13ad13223466b7b80330f7c39c3ea068bf5b8b2e", "filename": "src/test/compile-fail/builtin-superkinds-typaram-not-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -12,6 +12,6 @@\n \n trait Foo : Send { }\n \n-impl <T: Sync+'static> Foo for T { } //~ ERROR the trait `core::marker::Send` is not implemented\n+impl <T: Sync+'static> Foo for T { } //~ ERROR the trait `std::marker::Send` is not implemented\n \n fn main() { }"}, {"sha": "9653a1357efa00020dc59b53a868502d30d0d29a", "filename": "src/test/compile-fail/cast-rfc0401.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -91,7 +91,7 @@ fn main()\n     let _ = 42usize as *const [u8]; //~ ERROR casting\n     let _ = v as *const [u8]; //~ ERROR cannot cast\n     let _ = fat_v as *const Foo;\n-    //~^ ERROR `core::marker::Sized` is not implemented for the type `[u8]`\n+    //~^ ERROR `std::marker::Sized` is not implemented for the type `[u8]`\n     //~^^ HELP run `rustc --explain E0277` to see a detailed explanation\n     //~^^^ NOTE `[u8]` does not have a constant size known at compile-time\n     //~^^^^ NOTE required for the cast to the object type `Foo`\n@@ -106,7 +106,7 @@ fn main()\n \n     let a : *const str = \"hello\";\n     let _ = a as *const Foo;\n-    //~^ ERROR `core::marker::Sized` is not implemented for the type `str`\n+    //~^ ERROR `std::marker::Sized` is not implemented for the type `str`\n     //~^^ HELP run `rustc --explain E0277` to see a detailed explanation\n     //~^^^ NOTE `str` does not have a constant size known at compile-time\n     //~^^^^ NOTE required for the cast to the object type `Foo`"}, {"sha": "40085d8137893bb7e455a04662587ea7d9f4f0ba", "filename": "src/test/compile-fail/closure-bounds-cant-promote-superkind-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -13,7 +13,7 @@ struct X<F> where F: FnOnce() + 'static + Send {\n }\n \n fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n-    //~^ ERROR the trait `core::marker::Send` is not implemented for the type\n+    //~^ ERROR the trait `std::marker::Send` is not implemented for the type\n     return X { field: blk };\n }\n "}, {"sha": "c8fe4a1b8d268180fa9da5fee6b574e7d2e2344c", "filename": "src/test/compile-fail/closure-bounds-subtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -21,7 +21,7 @@ fn give_any<F>(f: F) where F: FnOnce() {\n \n fn give_owned<F>(f: F) where F: FnOnce() + Send {\n     take_any(f);\n-    take_const_owned(f); //~ ERROR the trait `core::marker::Sync` is not implemented for the type\n+    take_const_owned(f); //~ ERROR the trait `std::marker::Sync` is not implemented for the type\n }\n \n fn main() {}"}, {"sha": "afc3b8d4ccddcbc7ed5a3395f7b4d9caf7caa02d", "filename": "src/test/compile-fail/coherence-conflicting-negative-trait-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -17,10 +17,10 @@ struct TestType<T>(::std::marker::PhantomData<T>);\n unsafe impl<T: MyTrait+'static> Send for TestType<T> {}\n \n impl<T: MyTrait> !Send for TestType<T> {}\n-//~^ ERROR conflicting implementations of trait `core::marker::Send`\n+//~^ ERROR conflicting implementations of trait `std::marker::Send`\n \n unsafe impl<T:'static> Send for TestType<T> {}\n-//~^ ERROR error: conflicting implementations of trait `core::marker::Send`\n+//~^ ERROR error: conflicting implementations of trait `std::marker::Send`\n \n impl !Send for TestType<i32> {}\n "}, {"sha": "4fc922d32a0e7c5ec2709a027b199203d23a70a0", "filename": "src/test/compile-fail/deriving-no-inner-impl-error-message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fderiving-no-inner-impl-error-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fderiving-no-inner-impl-error-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-no-inner-impl-error-message.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -18,7 +18,7 @@ struct E {\n #[derive(Clone)]\n struct C {\n     x: NoCloneOrEq\n-    //~^ ERROR the trait `core::clone::Clone` is not implemented for the type `NoCloneOrEq`\n+    //~^ ERROR the trait `std::clone::Clone` is not implemented for the type `NoCloneOrEq`\n }\n \n "}, {"sha": "e70a1613dc2010fcb3a72ae3f12c067282d8a1d3", "filename": "src/test/compile-fail/deriving-span-Default-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -17,7 +17,7 @@ struct Error;\n \n #[derive(Default)]\n struct Struct {\n-    x: Error //~ ERROR `core::default::Default` is not implemented\n+    x: Error //~ ERROR `std::default::Default` is not implemented\n }\n \n fn main() {}"}, {"sha": "3c642bd8b70587adecdb9596c81336b219d67263", "filename": "src/test/compile-fail/destructure-trait-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -35,7 +35,7 @@ fn main() {\n     // n == m\n     let &x = &1isize as &T;      //~ ERROR type `&T` cannot be dereferenced\n     let &&x = &(&1isize as &T);  //~ ERROR type `&T` cannot be dereferenced\n-    let box x = box 1isize as Box<T>; //~ ERROR the trait `core::marker::Sized` is not implemented\n+    let box x = box 1isize as Box<T>; //~ ERROR the trait `std::marker::Sized` is not implemented\n \n     // n > m\n     let &&x = &1isize as &T;"}, {"sha": "45531666ecf5d72c57e87a1c171e2b456020f35b", "filename": "src/test/compile-fail/dropck_no_diverge_on_nonregular_3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fdropck_no_diverge_on_nonregular_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fdropck_no_diverge_on_nonregular_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_no_diverge_on_nonregular_3.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -39,8 +39,8 @@ enum Wrapper<T:'static> {\n }\n \n fn main() {\n-    let w = //~ ERROR overflow while adding drop-check rules for core::option\n+    let w = //~ ERROR overflow while adding drop-check rules for std::option\n         Some(Wrapper::Simple::<u32>);\n-    //~^ ERROR overflow while adding drop-check rules for core::option::Option\n+    //~^ ERROR overflow while adding drop-check rules for std::option::Option\n     //~| ERROR overflow while adding drop-check rules for Wrapper\n }"}, {"sha": "110413cd32229408bf9fd067456627404f212ef7", "filename": "src/test/compile-fail/dst-bad-assign-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -44,5 +44,5 @@ pub fn main() {\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = *z;\n-    //~^ ERROR the trait `core::marker::Sized` is not implemented\n+    //~^ ERROR the trait `std::marker::Sized` is not implemented\n }"}, {"sha": "d4221adfa2aceadee2bfbbbbfc490a95492b497b", "filename": "src/test/compile-fail/dst-bad-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -49,5 +49,5 @@ pub fn main() {\n     //~| found `Bar1`\n     //~| expected trait ToBar\n     //~| found struct `Bar1`\n-    //~| ERROR the trait `core::marker::Sized` is not implemented for the type `ToBar`\n+    //~| ERROR the trait `std::marker::Sized` is not implemented for the type `ToBar`\n }"}, {"sha": "9e23b6ea44e3e44cc0a457be8a31154ac25beb2e", "filename": "src/test/compile-fail/dst-bad-deep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -21,5 +21,5 @@ pub fn main() {\n     let f: Fat<[isize; 3]> = Fat { ptr: [5, 6, 7] };\n     let g: &Fat<[isize]> = &f;\n     let h: &Fat<Fat<[isize]>> = &Fat { ptr: *g };\n-    //~^ ERROR the trait `core::marker::Sized` is not implemented\n+    //~^ ERROR the trait `std::marker::Sized` is not implemented\n }"}, {"sha": "68e6bc0ed7654635312ec9c3dfd1e7156378c320", "filename": "src/test/compile-fail/dst-object-from-unsized-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -16,22 +16,22 @@ impl Foo for [u8] {}\n \n fn test1<T: ?Sized + Foo>(t: &T) {\n     let u: &Foo = t;\n-    //~^ ERROR `core::marker::Sized` is not implemented for the type `T`\n+    //~^ ERROR `std::marker::Sized` is not implemented for the type `T`\n }\n \n fn test2<T: ?Sized + Foo>(t: &T) {\n     let v: &Foo = t as &Foo;\n-    //~^ ERROR `core::marker::Sized` is not implemented for the type `T`\n+    //~^ ERROR `std::marker::Sized` is not implemented for the type `T`\n }\n \n fn test3() {\n     let _: &[&Foo] = &[\"hi\"];\n-    //~^ ERROR `core::marker::Sized` is not implemented for the type `str`\n+    //~^ ERROR `std::marker::Sized` is not implemented for the type `str`\n }\n \n fn test4(x: &[u8]) {\n     let _: &Foo = x as &Foo;\n-    //~^ ERROR `core::marker::Sized` is not implemented for the type `[u8]`\n+    //~^ ERROR `std::marker::Sized` is not implemented for the type `[u8]`\n }\n \n fn main() { }"}, {"sha": "0241c207c9df81503bef16ec390ac328722d4f62", "filename": "src/test/compile-fail/dst-sized-trait-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -15,9 +15,9 @@\n trait Foo<T> : Sized { fn take(self, x: &T) { } } // Note: T is sized\n \n impl Foo<[isize]> for usize { }\n-//~^ ERROR the trait `core::marker::Sized` is not implemented for the type `[isize]`\n+//~^ ERROR the trait `std::marker::Sized` is not implemented for the type `[isize]`\n \n impl Foo<isize> for [usize] { }\n-//~^ ERROR the trait `core::marker::Sized` is not implemented for the type `[usize]`\n+//~^ ERROR the trait `std::marker::Sized` is not implemented for the type `[usize]`\n \n pub fn main() { }"}, {"sha": "14fe14ae3679b1a41147a239ceb577ecb9de0908", "filename": "src/test/compile-fail/error-should-say-copy-not-pod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ferror-should-say-copy-not-pod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ferror-should-say-copy-not-pod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ferror-should-say-copy-not-pod.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -13,5 +13,5 @@\n fn check_bound<T:Copy>(_: T) {}\n \n fn main() {\n-    check_bound(\"nocopy\".to_string()); //~ ERROR the trait `core::marker::Copy` is not implemented\n+    check_bound(\"nocopy\".to_string()); //~ ERROR the trait `std::marker::Copy` is not implemented\n }"}, {"sha": "8437ff766919b9fbbbdc1d9d6714f54c1efedb40", "filename": "src/test/compile-fail/extern-wrong-value-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -17,6 +17,6 @@ fn main() {\n     // extern functions are extern \"C\" fn\n     let _x: extern \"C\" fn() = f; // OK\n     is_fn(f);\n-    //~^ ERROR the trait `core::ops::Fn<()>` is not implemented for the type `extern \"C\" fn()\n-    //~| ERROR the trait `core::ops::FnOnce<()>` is not implemented for the type `extern \"C\" fn()\n+    //~^ ERROR the trait `std::ops::Fn<()>` is not implemented for the type `extern \"C\" fn()\n+    //~| ERROR the trait `std::ops::FnOnce<()>` is not implemented for the type `extern \"C\" fn()\n }"}, {"sha": "c90a7113f1b4106d3d7d210195f6867e6cd560d9", "filename": "src/test/compile-fail/fn-item-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ffn-item-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ffn-item-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-item-type.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -34,10 +34,10 @@ fn main() {\n \n     eq(bar::<String>, bar::<Vec<u8>>);\n     //~^ ERROR mismatched types\n-    //~|  expected `fn(isize) -> isize {bar::<collections::string::String>}`\n-    //~|  found `fn(isize) -> isize {bar::<collections::vec::Vec<u8>>}`\n-    //~|  expected struct `collections::string::String`\n-    //~|  found struct `collections::vec::Vec`\n+    //~|  expected `fn(isize) -> isize {bar::<std::string::String>}`\n+    //~|  found `fn(isize) -> isize {bar::<std::vec::Vec<u8>>}`\n+    //~|  expected struct `std::string::String`\n+    //~|  found struct `std::vec::Vec`\n \n     // Make sure we distinguish between trait methods correctly.\n     eq(<u8 as Foo>::foo, <u16 as Foo>::foo);"}, {"sha": "6309beaf4b531afeddae54d6bffc260f3d3d1c20", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -17,23 +17,23 @@ fn main() {\n     let _: () = (box |_: isize| {}) as Box<FnOnce(isize)>;\n     //~^ ERROR mismatched types\n     //~| expected `()`\n-    //~| found `Box<core::ops::FnOnce(isize)>`\n+    //~| found `Box<std::ops::FnOnce(isize)>`\n     //~| expected ()\n     //~| found box\n     let _: () = (box |_: isize, isize| {}) as Box<Fn(isize, isize)>;\n     //~^ ERROR mismatched types\n     //~| expected `()`\n-    //~| found `Box<core::ops::Fn(isize, isize)>`\n+    //~| found `Box<std::ops::Fn(isize, isize)>`\n     //~| expected ()\n     //~| found box\n     let _: () = (box || -> isize { unimplemented!() }) as Box<FnMut() -> isize>;\n     //~^ ERROR mismatched types\n     //~| expected `()`\n-    //~| found `Box<core::ops::FnMut() -> isize>`\n+    //~| found `Box<std::ops::FnMut() -> isize>`\n     //~| expected ()\n     //~| found box\n \n     needs_fn(1);\n-    //~^ ERROR `core::ops::Fn<(isize,)>`\n-    //~| ERROR `core::ops::FnOnce<(isize,)>`\n+    //~^ ERROR `std::ops::Fn<(isize,)>`\n+    //~| ERROR `std::ops::FnOnce<(isize,)>`\n }"}, {"sha": "de4dd422d4ffc02479d118c4e9270cae1299990b", "filename": "src/test/compile-fail/for-loop-bogosity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -24,7 +24,7 @@ pub fn main() {\n         x: 1,\n         y: 2,\n     };\n-    for x in bogus { //~ ERROR `core::iter::Iterator` is not implemented for the type `MyStruct`\n+    for x in bogus { //~ ERROR `std::iter::Iterator` is not implemented for the type `MyStruct`\n         drop(x);\n     }\n }"}, {"sha": "fb787e8572c200018f97d5f36c2d9bcefc96dfb9", "filename": "src/test/compile-fail/fully-qualified-type-name1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -14,8 +14,8 @@ fn main() {\n     let x: Option<usize>;\n     x = 5;\n     //~^ ERROR mismatched types\n-    //~| expected `core::option::Option<usize>`\n+    //~| expected `std::option::Option<usize>`\n     //~| found `_`\n-    //~| expected enum `core::option::Option`\n+    //~| expected enum `std::option::Option`\n     //~| found integral variable\n }"}, {"sha": "9242849efc746b00c1846660c5bca825dc7a189e", "filename": "src/test/compile-fail/fully-qualified-type-name4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -15,9 +15,9 @@ use std::option::Option;\n fn bar(x: usize) -> Option<usize> {\n     return x;\n     //~^ ERROR mismatched types\n-    //~| expected `core::option::Option<usize>`\n+    //~| expected `std::option::Option<usize>`\n     //~| found `usize`\n-    //~| expected enum `core::option::Option`\n+    //~| expected enum `std::option::Option`\n     //~| found usize\n }\n "}, {"sha": "adf9a98a05c2d5dc32f8e71d303dac9b403cc47e", "filename": "src/test/compile-fail/generic-type-params-name-repr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -38,13 +38,13 @@ fn main() {\n     // Including cases where the default is using previous type params.\n     let _: HashMap<String, isize> = ();\n     //~^ ERROR mismatched types\n-    //~| expected `HashMap<collections::string::String, isize>`\n+    //~| expected `HashMap<std::string::String, isize>`\n     //~| found `()`\n     //~| expected struct `HashMap`\n     //~| found ()\n     let _: HashMap<String, isize, Hash<String>> = ();\n     //~^ ERROR mismatched types\n-    //~| expected `HashMap<collections::string::String, isize>`\n+    //~| expected `HashMap<std::string::String, isize>`\n     //~| found `()`\n     //~| expected struct `HashMap`\n     //~| found ()"}, {"sha": "19e019b58bc782d770f4aceab7625aa37c877bfa", "filename": "src/test/compile-fail/ifmt-unimpl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fifmt-unimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fifmt-unimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fifmt-unimpl.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     format!(\"{:X}\", \"3\");\n-    //~^ ERROR: the trait `core::fmt::UpperHex` is not implemented\n+    //~^ ERROR: the trait `std::fmt::UpperHex` is not implemented\n }"}, {"sha": "8143ef84467ec6439fca7384113f886bc0be5ef8", "filename": "src/test/compile-fail/indexing-requires-a-uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -13,7 +13,7 @@\n \n fn main() {\n     fn bar<T>(_: T) {}\n-    [0][0u8]; //~ ERROR: the trait `core::ops::Index<u8>` is not implemented\n+    [0][0u8]; //~ ERROR: the trait `std::ops::Index<u8>` is not implemented\n \n     [0][0]; // should infer to be a usize\n "}, {"sha": "08e6bf2469117179b8584954ab81a57943edb670", "filename": "src/test/compile-fail/infinite-instantiation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -31,7 +31,7 @@ impl<T:Clone> ToOpt for Option<T> {\n }\n \n fn function<T:ToOpt + Clone>(counter: usize, t: T) {\n-//~^ ERROR reached the recursion limit while instantiating `function::<core::option::Option<\n+//~^ ERROR reached the recursion limit while instantiating `function::<std::option::Option<\n     if counter > 0 {\n         function(counter - 1, t.to_option());\n         // FIXME(#4287) Error message should be here. It should be"}, {"sha": "047ab9d2a8fdbc6d9db3be37437fa7d318229e86", "filename": "src/test/compile-fail/integral-indexing.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -13,14 +13,14 @@ pub fn main() {\n     let s: String = \"abcdef\".to_string();\n     v[3_usize];\n     v[3];\n-    v[3u8];  //~ERROR the trait `core::ops::Index<u8>` is not implemented\n-    v[3i8];  //~ERROR the trait `core::ops::Index<i8>` is not implemented\n-    v[3u32]; //~ERROR the trait `core::ops::Index<u32>` is not implemented\n-    v[3i32]; //~ERROR the trait `core::ops::Index<i32>` is not implemented\n+    v[3u8];  //~ERROR the trait `std::ops::Index<u8>` is not implemented\n+    v[3i8];  //~ERROR the trait `std::ops::Index<i8>` is not implemented\n+    v[3u32]; //~ERROR the trait `std::ops::Index<u32>` is not implemented\n+    v[3i32]; //~ERROR the trait `std::ops::Index<i32>` is not implemented\n     s.as_bytes()[3_usize];\n     s.as_bytes()[3];\n-    s.as_bytes()[3u8];  //~ERROR the trait `core::ops::Index<u8>` is not implemented\n-    s.as_bytes()[3i8];  //~ERROR the trait `core::ops::Index<i8>` is not implemented\n-    s.as_bytes()[3u32]; //~ERROR the trait `core::ops::Index<u32>` is not implemented\n-    s.as_bytes()[3i32]; //~ERROR the trait `core::ops::Index<i32>` is not implemented\n+    s.as_bytes()[3u8];  //~ERROR the trait `std::ops::Index<u8>` is not implemented\n+    s.as_bytes()[3i8];  //~ERROR the trait `std::ops::Index<i8>` is not implemented\n+    s.as_bytes()[3u32]; //~ERROR the trait `std::ops::Index<u32>` is not implemented\n+    s.as_bytes()[3i32]; //~ERROR the trait `std::ops::Index<i32>` is not implemented\n }"}, {"sha": "d2c8b679ff69fff7a5818046e2cb0cd47d05fc90", "filename": "src/test/compile-fail/issue-13466.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -17,16 +17,16 @@ pub fn main() {\n     let _x: usize = match Some(1) {\n         Ok(u) => u,\n         //~^ ERROR mismatched types\n-        //~| expected `core::option::Option<_>`\n-        //~| found `core::result::Result<_, _>`\n-        //~| expected enum `core::option::Option`\n-        //~| found enum `core::result::Result`\n+        //~| expected `std::option::Option<_>`\n+        //~| found `std::result::Result<_, _>`\n+        //~| expected enum `std::option::Option`\n+        //~| found enum `std::result::Result`\n \n         Err(e) => panic!(e)\n         //~^ ERROR mismatched types\n-        //~| expected `core::option::Option<_>`\n-        //~| found `core::result::Result<_, _>`\n-        //~| expected enum `core::option::Option`\n-        //~| found enum `core::result::Result`\n+        //~| expected `std::option::Option<_>`\n+        //~| found `std::result::Result<_, _>`\n+        //~| expected enum `std::option::Option`\n+        //~| found enum `std::result::Result`\n     };\n }"}, {"sha": "dfdbea5f76e03269b9026f7037f74b9fd5c0fa03", "filename": "src/test/compile-fail/issue-14084.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -13,5 +13,5 @@\n \n fn main() {\n     () <- 0;\n-    //~^ ERROR: the trait `core::ops::Placer<_>` is not implemented\n+    //~^ ERROR: the trait `std::ops::Placer<_>` is not implemented\n }"}, {"sha": "4019b265edde20695624719e4b7c7acf06ab6b40", "filename": "src/test/compile-fail/issue-14366.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let _x = \"test\" as &::std::any::Any;\n-//~^ ERROR the trait `core::marker::Sized` is not implemented for the type `str`\n+//~^ ERROR the trait `std::marker::Sized` is not implemented for the type `str`\n }"}, {"sha": "eca6b02dbdc2ef8b409cf40a9549adb72a131976", "filename": "src/test/compile-fail/issue-15756.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -15,7 +15,7 @@ fn dft_iter<'a, T>(arg1: Chunks<'a,T>, arg2: ChunksMut<'a,T>)\n {\n     for\n     &mut something\n-//~^ ERROR the trait `core::marker::Sized` is not implemented for the type `[T]`\n+//~^ ERROR the trait `std::marker::Sized` is not implemented for the type `[T]`\n     in arg2\n     {\n     }"}, {"sha": "9a139021e4c6d67dc8e2913ea304b8fd2e3a9798", "filename": "src/test/compile-fail/issue-15783.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-15783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-15783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15783.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -17,8 +17,8 @@ fn main() {\n     let x = Some(&[name]);\n     let msg = foo(x);\n //~^ ERROR mismatched types\n-//~| expected `core::option::Option<&[&str]>`\n-//~| found `core::option::Option<&[&str; 1]>`\n+//~| expected `std::option::Option<&[&str]>`\n+//~| found `std::option::Option<&[&str; 1]>`\n //~| expected slice\n //~| found array of 1 elements\n     assert_eq!(msg, 3);"}, {"sha": "30775a958b57d40616cd8ce43f12b020badb7dbc", "filename": "src/test/compile-fail/issue-16338.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let Slice { data: data, len: len } = \"foo\";\n     //~^ ERROR mismatched types\n     //~| expected `&str`\n-    //~| found `core::raw::Slice<_>`\n+    //~| found `std::raw::Slice<_>`\n     //~| expected &-ptr\n-    //~| found struct `core::raw::Slice`\n+    //~| found struct `std::raw::Slice`\n }"}, {"sha": "a90f9fe26e48c644f6655fa0acd7f9b17ee6b2c1", "filename": "src/test/compile-fail/issue-16401.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -15,9 +15,9 @@ fn main() {\n         Slice { data: data, len: len } => (),\n         //~^ ERROR mismatched types\n         //~| expected `()`\n-        //~| found `core::raw::Slice<_>`\n+        //~| found `std::raw::Slice<_>`\n         //~| expected ()\n-        //~| found struct `core::raw::Slice`\n+        //~| found struct `std::raw::Slice`\n         _ => unreachable!()\n     }\n }"}, {"sha": "3b819916fbd55858d1fb0ccf021b8c984e72742b", "filename": "src/test/compile-fail/issue-16538.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -19,7 +19,7 @@ mod Y {\n }\n \n static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n-//~^ ERROR the trait `core::marker::Sync` is not implemented for the type\n+//~^ ERROR the trait `std::marker::Sync` is not implemented for the type\n //~| ERROR cannot refer to other statics by value, use the address-of operator or a constant instead\n //~| ERROR E0015\n "}, {"sha": "7d300bfb1483161148dec1fb44e79362929da0a2", "filename": "src/test/compile-fail/issue-17441.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -15,11 +15,11 @@ fn main() {\n \n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let _bar = Box::new(1_usize) as std::fmt::Debug;\n-    //~^ ERROR cast to unsized type: `Box<usize>` as `core::fmt::Debug`\n+    //~^ ERROR cast to unsized type: `Box<usize>` as `std::fmt::Debug`\n     //~^^ HELP try casting to a `Box` instead\n \n     let _baz = 1_usize as std::fmt::Debug;\n-    //~^ ERROR cast to unsized type: `usize` as `core::fmt::Debug`\n+    //~^ ERROR cast to unsized type: `usize` as `std::fmt::Debug`\n     //~^^ HELP consider using a box or reference as appropriate\n \n     let _quux = [1_usize, 2] as [usize];"}, {"sha": "e079ef1ec12fabcd4ce561c0eb11aeaab3a57993", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -14,5 +14,5 @@\n fn main() {\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     (|| Box::new(*(&[0][..])))();\n-    //~^ ERROR the trait `core::marker::Sized` is not implemented for the type `[_]`\n+    //~^ ERROR the trait `std::marker::Sized` is not implemented for the type `[_]`\n }"}, {"sha": "4b53d84f305543cc9f98748b37cba13d9f988b27", "filename": "src/test/compile-fail/issue-17718-static-sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -17,6 +17,6 @@ impl !Sync for Foo {}\n \n static FOO: usize = 3;\n static BAR: Foo = Foo;\n-//~^ ERROR: the trait `core::marker::Sync` is not implemented\n+//~^ ERROR: the trait `std::marker::Sync` is not implemented\n \n fn main() {}"}, {"sha": "03a165f18dec79f510df97c889e8311ea76e8d37", "filename": "src/test/compile-fail/issue-18107.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -12,7 +12,7 @@ pub trait AbstractRenderer {}\n \n fn _create_render(_: &()) ->\n     AbstractRenderer\n-//~^ ERROR: the trait `core::marker::Sized` is not implemented\n+//~^ ERROR: the trait `std::marker::Sized` is not implemented\n {\n     match 0 {\n         _ => unimplemented!()"}, {"sha": "11083453d0518bb8b5144c0e68ce29f38f0a798b", "filename": "src/test/compile-fail/issue-18919.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-18919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-18919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18919.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -11,7 +11,7 @@\n type FuncType<'f> = Fn(&isize) -> isize + 'f;\n \n fn ho_func(f: Option<FuncType>) {\n-    //~^ ERROR: the trait `core::marker::Sized` is not implemented for the type\n+    //~^ ERROR: the trait `std::marker::Sized` is not implemented for the type\n }\n \n fn main() {}"}, {"sha": "23b2532639bc8ad3ded31f0ca94f16182f44cc00", "filename": "src/test/compile-fail/issue-20005.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -15,7 +15,7 @@ trait From<Src> {\n }\n \n trait To {\n-    fn to<Dst>(  //~ ERROR the trait `core::marker::Sized` is not implemented\n+    fn to<Dst>(  //~ ERROR the trait `std::marker::Sized` is not implemented\n         self\n     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n         From::from(self)"}, {"sha": "c81bcb828248f88cf51d601c6ef7388e746a900c", "filename": "src/test/compile-fail/issue-20162.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-20162.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-20162.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20162.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -13,5 +13,5 @@ struct X { x: i32 }\n fn main() {\n     let mut b: Vec<X> = vec![];\n     b.sort();\n-    //~^ ERROR the trait `core::cmp::Ord` is not implemented for the type `X`\n+    //~^ ERROR the trait `std::cmp::Ord` is not implemented for the type `X`\n }"}, {"sha": "c0eea477775b69876c02ba210a375fb3c536bb53", "filename": "src/test/compile-fail/issue-20605.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -10,7 +10,7 @@\n \n fn changer<'a>(mut things: Box<Iterator<Item=&'a mut u8>>) {\n     for item in *things { *item = 0 }\n-//~^ ERROR the trait `core::marker::Sized` is not implemented for the type `core::iter::Iterator\n+//~^ ERROR the trait `std::marker::Sized` is not implemented for the type `std::iter::Iterator\n }\n \n fn main() {}"}, {"sha": "f25f8721675364a4dd2032db53f8ff6082bad625", "filename": "src/test/compile-fail/issue-21160.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-21160.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-21160.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21160.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -16,6 +16,6 @@ impl Bar {\n \n #[derive(Hash)]\n struct Foo(Bar);\n-//~^ error: the trait `core::hash::Hash` is not implemented for the type `Bar`\n+//~^ error: the trait `std::hash::Hash` is not implemented for the type `Bar`\n \n fn main() {}"}, {"sha": "b36918149fa99008b7fd5d7560a63ad82081b759", "filename": "src/test/compile-fail/issue-21332.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-21332.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-21332.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21332.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -14,8 +14,8 @@ impl Iterator for S {\n     type Item = i32;\n     fn next(&mut self) -> Result<i32, i32> { Ok(7) }\n     //~^ ERROR method `next` has an incompatible type for trait\n-    //~| expected enum `core::option::Option`\n-    //~|    found enum `core::result::Result` [E0053]\n+    //~| expected enum `std::option::Option`\n+    //~|    found enum `std::result::Result` [E0053]\n }\n \n fn main() {}"}, {"sha": "e535567c52e3bc11ac77a3b34bf2644da6169765", "filename": "src/test/compile-fail/issue-21763.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-21763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-21763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21763.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -17,5 +17,5 @@ fn foo<T: Send>() {}\n \n fn main() {\n     foo::<HashMap<Rc<()>, Rc<()>>>();\n-    //~^ ERROR: the trait `core::marker::Send` is not implemented for the type `alloc::rc::Rc<()>`\n+    //~^ ERROR: the trait `std::marker::Send` is not implemented for the type `std::rc::Rc<()>`\n }"}, {"sha": "1028923ec82fd6464ae20c12711b55d012b66703", "filename": "src/test/compile-fail/issue-21950.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-21950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-21950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21950.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -16,5 +16,5 @@ fn main() {\n     let x = &10 as\n             &Add;\n             //~^ ERROR the type parameter `RHS` must be explicitly specified in an object type because its default value `Self` references the type `Self`\n-            //~| ERROR the value of the associated type `Output` (from the trait `core::ops::Add`) must be specified\n+            //~| ERROR the value of the associated type `Output` (from the trait `std::ops::Add`) must be specified\n }"}, {"sha": "a72839347105a6714cb6db35f55f29f29a0dcf48", "filename": "src/test/compile-fail/issue-22034.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-22034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-22034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22034.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let ptr: *mut () = 0 as *mut _;\n     let _: &mut Fn() = unsafe {\n         &mut *(ptr as *mut Fn())\n-        //~^ ERROR the trait `core::ops::Fn<()>` is not implemented\n-        //~| ERROR the trait `core::ops::FnOnce<()>` is not implemented\n+        //~^ ERROR the trait `std::ops::Fn<()>` is not implemented\n+        //~| ERROR the trait `std::ops::FnOnce<()>` is not implemented\n     };\n }"}, {"sha": "20ec2d64ae6a8ee0b78fa6813bfae74a131eac74", "filename": "src/test/compile-fail/issue-22560.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-22560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-22560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22560.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -14,7 +14,7 @@ use std::ops::{Add, Sub};\n \n type Test = Add +\n             //~^ ERROR the type parameter `RHS` must be explicitly specified in an object type because its default value `Self` references the type `Self`\n-            //~^^ ERROR the value of the associated type `Output` (from the trait `core::ops::Add`) must be specified [E0191]\n+            //~^^ ERROR the value of the associated type `Output` (from the trait `std::ops::Add`) must be specified [E0191]\n             Sub;\n             //~^ ERROR only the builtin traits can be used as closure or object bounds\n "}, {"sha": "df2a70160f866e58bafe4a9c4b06518e7493f747", "filename": "src/test/compile-fail/issue-23024.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-23024.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-23024.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23024.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -19,5 +19,5 @@ fn main()\n     println!(\"{:?}\",(vfnfer[0] as Fn)(3));\n     //~^ ERROR the precise format of `Fn`-family traits'\n     //~| ERROR wrong number of type arguments: expected 1, found 0\n-    //~| ERROR the value of the associated type `Output` (from the trait `core::ops::FnOnce`)\n+    //~| ERROR the value of the associated type `Output` (from the trait `std::ops::FnOnce`)\n }"}, {"sha": "cafe6d1bb58298b2ac49257a7d3b88137badc0dc", "filename": "src/test/compile-fail/issue-24446.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-24446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-24446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24446.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -11,9 +11,9 @@\n fn main() {\n     static foo: Fn() -> u32 = || -> u32 {\n         //~^ ERROR: mismatched types:\n-        //~| expected `core::ops::Fn() -> u32 + 'static`,\n+        //~| expected `std::ops::Fn() -> u32 + 'static`,\n         //~| found closure\n-        //~| (expected trait core::ops::Fn,\n+        //~| (expected trait std::ops::Fn,\n         //~| found closure)\n         0\n     };"}, {"sha": "49f024399c7e75bc93ce27a24a119ed4d734393d", "filename": "src/test/compile-fail/issue-2611-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -21,7 +21,7 @@ struct E {\n \n impl A for E {\n     fn b<F: Sync, G>(&self, _x: F) -> F { panic!() }\n-    //~^ ERROR `F : core::marker::Sync` appears on the impl method\n+    //~^ ERROR `F : std::marker::Sync` appears on the impl method\n }\n \n fn main() {}"}, {"sha": "d81abd417f11f59e5c2b94cb2028e42cc744a036", "filename": "src/test/compile-fail/issue-28098.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-28098.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-28098.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28098.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -10,13 +10,13 @@\n \n fn main() {\n     let _ = Iterator::next(&mut ());\n-    //~^ ERROR the trait `core::iter::Iterator` is not implemented\n+    //~^ ERROR the trait `std::iter::Iterator` is not implemented\n \n     for _ in false {}\n-    //~^ ERROR the trait `core::iter::Iterator` is not implemented\n+    //~^ ERROR the trait `std::iter::Iterator` is not implemented\n \n     let _ = Iterator::next(&mut ());\n-    //~^ ERROR the trait `core::iter::Iterator` is not implemented\n+    //~^ ERROR the trait `std::iter::Iterator` is not implemented\n \n     other()\n }\n@@ -25,11 +25,11 @@ pub fn other() {\n     // check errors are still reported globally\n \n     let _ = Iterator::next(&mut ());\n-    //~^ ERROR the trait `core::iter::Iterator` is not implemented\n+    //~^ ERROR the trait `std::iter::Iterator` is not implemented\n \n     let _ = Iterator::next(&mut ());\n-    //~^ ERROR the trait `core::iter::Iterator` is not implemented\n+    //~^ ERROR the trait `std::iter::Iterator` is not implemented\n \n     for _ in false {}\n-    //~^ ERROR the trait `core::iter::Iterator` is not implemented\n+    //~^ ERROR the trait `std::iter::Iterator` is not implemented\n }"}, {"sha": "fc918c278ef5d5d990d603cca93db5cee61672ed", "filename": "src/test/compile-fail/issue-3680.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -12,9 +12,9 @@ fn main() {\n     match None {\n         Err(_) => ()\n         //~^ ERROR mismatched types\n-        //~| expected `core::option::Option<_>`\n-        //~| found `core::result::Result<_, _>`\n-        //~| expected enum `core::option::Option`\n-        //~| found enum `core::result::Result`\n+        //~| expected `std::option::Option<_>`\n+        //~| found `std::result::Result<_, _>`\n+        //~| expected enum `std::option::Option`\n+        //~| found enum `std::result::Result`\n     }\n }"}, {"sha": "a96eb0e721bd9eb97a0287d86eeffe56c92c4e07", "filename": "src/test/compile-fail/issue-5035-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -11,6 +11,6 @@\n trait I {}\n type K = I+'static;\n \n-fn foo(_x: K) {} //~ ERROR: the trait `core::marker::Sized` is not implemented\n+fn foo(_x: K) {} //~ ERROR: the trait `std::marker::Sized` is not implemented\n \n fn main() {}"}, {"sha": "cc6c797c766197755d4b7b7d8f3e5e1612a40003", "filename": "src/test/compile-fail/issue-5883.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -15,8 +15,8 @@ struct Struct {\n }\n \n fn new_struct(r: A+'static)\n-    -> Struct { //~^  ERROR the trait `core::marker::Sized` is not implemented\n-    //~^ ERROR the trait `core::marker::Sized` is not implemented\n+    -> Struct { //~^  ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR the trait `std::marker::Sized` is not implemented\n     Struct { r: r }\n }\n "}, {"sha": "1293bf22b47defcaaffe74fb57da9c939bc43993", "filename": "src/test/compile-fail/issue-7013.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -34,5 +34,5 @@ struct A {\n \n fn main() {\n     let a = A {v: box B{v: None} as Box<Foo+Send>};\n-    //~^ ERROR the trait `core::marker::Send` is not implemented\n+    //~^ ERROR the trait `std::marker::Send` is not implemented\n }"}, {"sha": "4a278bbdeb04a4fcc5320ce6adab4ef9e8117684", "filename": "src/test/compile-fail/issue-7092.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -16,9 +16,9 @@ fn foo(x: Whatever) {\n         Some(field) =>\n //~^ ERROR mismatched types\n //~| expected `Whatever`\n-//~| found `core::option::Option<_>`\n+//~| found `std::option::Option<_>`\n //~| expected enum `Whatever`\n-//~| found enum `core::option::Option`\n+//~| found enum `std::option::Option`\n             field.access(), //~ ERROR the type of this value must be known in this context\n     }\n }"}, {"sha": "726f789983d3cc8a5801e4086bd8fd10a164ff4e", "filename": "src/test/compile-fail/issue-7364.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -16,6 +16,6 @@ use std::cell::RefCell;\n // Regression test for issue 7364\n static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n //~^ ERROR allocations are not allowed in statics\n-//~| ERROR the trait `core::marker::Sync` is not implemented for the type\n+//~| ERROR the trait `std::marker::Sync` is not implemented for the type\n \n fn main() { }"}, {"sha": "95513860b084f340a4e9e019718ddb2b30491fd1", "filename": "src/test/compile-fail/issue-7867.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -26,15 +26,15 @@ fn main() {\n     match &Some(42) {\n         Some(x) => (),\n         //~^ ERROR mismatched types\n-        //~| expected `&core::option::Option<_>`\n-        //~| found `core::option::Option<_>`\n+        //~| expected `&std::option::Option<_>`\n+        //~| found `std::option::Option<_>`\n         //~| expected &-ptr\n-        //~| found enum `core::option::Option`\n+        //~| found enum `std::option::Option`\n         None => ()\n         //~^ ERROR mismatched types\n-        //~| expected `&core::option::Option<_>`\n-        //~| found `core::option::Option<_>`\n+        //~| expected `&std::option::Option<_>`\n+        //~| found `std::option::Option<_>`\n         //~| expected &-ptr\n-        //~| found enum `core::option::Option`\n+        //~| found enum `std::option::Option`\n     }\n }"}, {"sha": "18b7948c46c7cace2458bb84302f9be4608fa969", "filename": "src/test/compile-fail/issue-8727.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-8727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fissue-8727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8727.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:reached the recursion limit while instantiating `generic::<core::option::Option<\n+// error-pattern:reached the recursion limit while instantiating `generic::<std::option::Option<\n \n // Verify the compiler fails with an error on infinite function\n // recursions."}, {"sha": "4bc941628aad9e5abbb6d55af16b3aa843e3b660", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -34,26 +34,26 @@ fn test<'a,T,U:Copy>(_: &'a isize) {\n     assert_copy::<&'a [isize]>();\n \n     // ...unless they are mutable\n-    assert_copy::<&'static mut isize>(); //~ ERROR `core::marker::Copy` is not implemented\n-    assert_copy::<&'a mut isize>();  //~ ERROR `core::marker::Copy` is not implemented\n+    assert_copy::<&'static mut isize>(); //~ ERROR `std::marker::Copy` is not implemented\n+    assert_copy::<&'a mut isize>();  //~ ERROR `std::marker::Copy` is not implemented\n \n     // boxes are not ok\n-    assert_copy::<Box<isize>>();   //~ ERROR `core::marker::Copy` is not implemented\n-    assert_copy::<String>();   //~ ERROR `core::marker::Copy` is not implemented\n-    assert_copy::<Vec<isize> >(); //~ ERROR `core::marker::Copy` is not implemented\n-    assert_copy::<Box<&'a mut isize>>(); //~ ERROR `core::marker::Copy` is not implemented\n+    assert_copy::<Box<isize>>();   //~ ERROR `std::marker::Copy` is not implemented\n+    assert_copy::<String>();   //~ ERROR `std::marker::Copy` is not implemented\n+    assert_copy::<Vec<isize> >(); //~ ERROR `std::marker::Copy` is not implemented\n+    assert_copy::<Box<&'a mut isize>>(); //~ ERROR `std::marker::Copy` is not implemented\n \n     // borrowed object types are generally ok\n     assert_copy::<&'a Dummy>();\n     assert_copy::<&'a (Dummy+Copy)>();\n     assert_copy::<&'static (Dummy+Copy)>();\n \n     // owned object types are not ok\n-    assert_copy::<Box<Dummy>>(); //~ ERROR `core::marker::Copy` is not implemented\n-    assert_copy::<Box<Dummy+Copy>>(); //~ ERROR `core::marker::Copy` is not implemented\n+    assert_copy::<Box<Dummy>>(); //~ ERROR `std::marker::Copy` is not implemented\n+    assert_copy::<Box<Dummy+Copy>>(); //~ ERROR `std::marker::Copy` is not implemented\n \n     // mutable object types are not ok\n-    assert_copy::<&'a mut (Dummy+Copy)>();  //~ ERROR `core::marker::Copy` is not implemented\n+    assert_copy::<&'a mut (Dummy+Copy)>();  //~ ERROR `std::marker::Copy` is not implemented\n \n     // unsafe ptrs are ok\n     assert_copy::<*const isize>();\n@@ -71,10 +71,10 @@ fn test<'a,T,U:Copy>(_: &'a isize) {\n     assert_copy::<MyStruct>();\n \n     // structs containing non-POD are not ok\n-    assert_copy::<MyNoncopyStruct>(); //~ ERROR `core::marker::Copy` is not implemented\n+    assert_copy::<MyNoncopyStruct>(); //~ ERROR `std::marker::Copy` is not implemented\n \n     // ref counted types are not ok\n-    assert_copy::<Rc<isize>>();   //~ ERROR `core::marker::Copy` is not implemented\n+    assert_copy::<Rc<isize>>();   //~ ERROR `std::marker::Copy` is not implemented\n }\n \n pub fn main() {"}, {"sha": "c5c50789e4005300660dcef5c26c97f6de7beeaa", "filename": "src/test/compile-fail/kindck-impl-type-params-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -21,5 +21,5 @@ fn take_param<T:Foo>(foo: &T) { }\n fn main() {\n     let x: Box<_> = box 3;\n     take_param(&x);\n-    //~^ ERROR the trait `core::marker::Copy` is not implemented\n+    //~^ ERROR the trait `std::marker::Copy` is not implemented\n }"}, {"sha": "a59c243f12a54eba477370d914324d57fdc4f5d6", "filename": "src/test/compile-fail/kindck-impl-type-params.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -26,13 +26,13 @@ impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n fn f<T>(val: T) {\n     let t: S<T> = S(marker::PhantomData);\n     let a = &t as &Gettable<T>;\n-    //~^ ERROR the trait `core::marker::Send` is not implemented\n+    //~^ ERROR the trait `std::marker::Send` is not implemented\n }\n \n fn g<T>(val: T) {\n     let t: S<T> = S(marker::PhantomData);\n     let a: &Gettable<T> = &t;\n-    //~^ ERROR the trait `core::marker::Send` is not implemented\n+    //~^ ERROR the trait `std::marker::Send` is not implemented\n }\n \n fn foo<'a>() {\n@@ -44,15 +44,15 @@ fn foo<'a>() {\n fn foo2<'a>() {\n     let t: Box<S<String>> = box S(marker::PhantomData);\n     let a = t as Box<Gettable<String>>;\n-    //~^ ERROR the trait `core::marker::Copy` is not implemented\n+    //~^ ERROR the trait `std::marker::Copy` is not implemented\n }\n \n fn foo3<'a>() {\n     struct Foo; // does not impl Copy\n \n     let t: Box<S<Foo>> = box S(marker::PhantomData);\n     let a: Box<Gettable<Foo>> = t;\n-    //~^ ERROR the trait `core::marker::Copy` is not implemented\n+    //~^ ERROR the trait `std::marker::Copy` is not implemented\n }\n \n fn main() { }"}, {"sha": "a207b8721224b30564d66d24a25700a951d6cb8f", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -18,5 +18,5 @@ fn bar<F:FnOnce() + Send>(_: F) { }\n fn main() {\n     let x = Rc::new(3);\n     bar(move|| foo(x));\n-    //~^ ERROR `core::marker::Send` is not implemented\n+    //~^ ERROR `std::marker::Send` is not implemented\n }"}, {"sha": "7525ff932bbd985d9712b321cab62944472c4315", "filename": "src/test/compile-fail/kindck-send-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -20,11 +20,11 @@ trait Message : Send { }\n \n fn object_ref_with_static_bound_not_ok() {\n     assert_send::<&'static (Dummy+'static)>();\n-    //~^ ERROR the trait `core::marker::Sync` is not implemented\n+    //~^ ERROR the trait `std::marker::Sync` is not implemented\n }\n \n fn box_object_with_no_bound_not_ok<'a>() {\n-    assert_send::<Box<Dummy>>(); //~ ERROR the trait `core::marker::Send` is not implemented\n+    assert_send::<Box<Dummy>>(); //~ ERROR the trait `std::marker::Send` is not implemented\n }\n \n fn object_with_send_bound_ok() {"}, {"sha": "0e737e1b1627917b2a00d194442a61af4db33411", "filename": "src/test/compile-fail/kindck-send-object1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -18,7 +18,7 @@ trait Dummy { }\n // careful with object types, who knows what they close over...\n fn test51<'a>() {\n     assert_send::<&'a Dummy>();\n-    //~^ ERROR the trait `core::marker::Sync` is not implemented\n+    //~^ ERROR the trait `std::marker::Sync` is not implemented\n }\n fn test52<'a>() {\n     assert_send::<&'a (Dummy+Sync)>();\n@@ -37,7 +37,7 @@ fn test61() {\n // them not ok\n fn test_71<'a>() {\n     assert_send::<Box<Dummy+'a>>();\n-    //~^ ERROR the trait `core::marker::Send` is not implemented\n+    //~^ ERROR the trait `std::marker::Send` is not implemented\n }\n \n fn main() { }"}, {"sha": "7bc86df57394ea430ff64e460728610600dc1f5c", "filename": "src/test/compile-fail/kindck-send-object2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -14,11 +14,11 @@ fn assert_send<T:Send>() { }\n trait Dummy { }\n \n fn test50() {\n-    assert_send::<&'static Dummy>(); //~ ERROR the trait `core::marker::Sync` is not implemented\n+    assert_send::<&'static Dummy>(); //~ ERROR the trait `std::marker::Sync` is not implemented\n }\n \n fn test53() {\n-    assert_send::<Box<Dummy>>(); //~ ERROR the trait `core::marker::Send` is not implemented\n+    assert_send::<Box<Dummy>>(); //~ ERROR the trait `std::marker::Send` is not implemented\n }\n \n // ...unless they are properly bounded"}, {"sha": "d7116930fb479517257d9b67bde9a04d1e992c04", "filename": "src/test/compile-fail/kindck-send-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -19,7 +19,7 @@ fn test32() { assert_send::<Vec<isize> >(); }\n \n // but not if they own a bad thing\n fn test40() {\n-    assert_send::<Box<*mut u8>>(); //~ ERROR `core::marker::Send` is not implemented\n+    assert_send::<Box<*mut u8>>(); //~ ERROR `std::marker::Send` is not implemented\n }\n \n fn main() { }"}, {"sha": "6416d5467c8903ad3e8a1ec9901b30c6143b6ff9", "filename": "src/test/compile-fail/method-help-unsatisfied-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fmethod-help-unsatisfied-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fmethod-help-unsatisfied-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-help-unsatisfied-bound.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -13,6 +13,6 @@ struct Foo;\n fn main() {\n     let a: Result<(), Foo> = Ok(());\n     a.unwrap();\n-    //~^ ERROR no method named `unwrap` found for type `core::result::Result<(), Foo>`\n-    //~| NOTE the following trait bounds were not satisfied: `Foo : core::fmt::Debug`\n+    //~^ ERROR no method named `unwrap` found for type `std::result::Result<(), Foo>`\n+    //~| NOTE the following trait bounds were not satisfied: `Foo : std::fmt::Debug`\n }"}, {"sha": "1ba30c67a03cfac40b205ee027c61b09426a4bae", "filename": "src/test/compile-fail/minus-string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fminus-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fminus-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fminus-string.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:cannot apply unary operator `-` to type `collections::string::String`\n+// error-pattern:cannot apply unary operator `-` to type `std::string::String`\n \n fn main() { -\"foo\".to_string(); }"}, {"sha": "a12a3615bc91ad7acc71d8855ef8f665eacc5753", "filename": "src/test/compile-fail/mut-not-freeze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -15,5 +15,5 @@ fn f<T: Sync>(_: T) {}\n fn main() {\n     let x = RefCell::new(0);\n     f(x);\n-    //~^ ERROR `core::marker::Sync` is not implemented\n+    //~^ ERROR `std::marker::Sync` is not implemented\n }"}, {"sha": "a7e751e7ea95baf38914500b280190d6e3fd9f76", "filename": "src/test/compile-fail/mutable-enum-indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -24,5 +24,5 @@ fn bar<T: Sync>(_: T) {}\n \n fn main() {\n     let x = Foo::A(NoSync);\n-    bar(&x); //~ ERROR the trait `core::marker::Sync` is not implemented\n+    bar(&x); //~ ERROR the trait `std::marker::Sync` is not implemented\n }"}, {"sha": "9ccc7cc75ad5a41609051d4a84dea2b2778aafc7", "filename": "src/test/compile-fail/no-method-suggested-traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fno-method-suggested-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fno-method-suggested-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-method-suggested-traits.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -65,7 +65,7 @@ fn main() {\n     //~^^ HELP following traits define an item `method`, perhaps you need to implement one of them\n     //~^^^ HELP `foo::Bar`\n     //~^^^^ HELP `no_method_suggested_traits::foo::PubPub`\n-    //~^^^^^ HELP `no_method_suggested_traits::reexport::Reexported`\n+    //~^^^^^ HELP `no_method_suggested_traits::Reexported`\n     //~^^^^^^ HELP `no_method_suggested_traits::bar::PubPriv`\n     //~^^^^^^^ HELP `no_method_suggested_traits::qux::PrivPub`\n     //~^^^^^^^^ HELP `no_method_suggested_traits::quz::PrivPriv`\n@@ -74,7 +74,7 @@ fn main() {\n     //~^^ HELP following traits define an item `method`, perhaps you need to implement one of them\n     //~^^^ HELP `foo::Bar`\n     //~^^^^ HELP `no_method_suggested_traits::foo::PubPub`\n-    //~^^^^^ HELP `no_method_suggested_traits::reexport::Reexported`\n+    //~^^^^^ HELP `no_method_suggested_traits::Reexported`\n     //~^^^^^^ HELP `no_method_suggested_traits::bar::PubPriv`\n     //~^^^^^^^ HELP `no_method_suggested_traits::qux::PrivPub`\n     //~^^^^^^^^ HELP `no_method_suggested_traits::quz::PrivPriv`"}, {"sha": "2bb0343400c27d911a787fa534deebb1de3d6faf", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -33,7 +33,7 @@ fn main() {\n     let x = foo(Port(Rc::new(())));\n \n     thread::spawn(move|| {\n-        //~^ ERROR `core::marker::Send` is not implemented\n+        //~^ ERROR `std::marker::Send` is not implemented\n         let y = x;\n         println!(\"{:?}\", y);\n     });"}, {"sha": "7505bf69c83108c74d9045af443d64e5a12b9bf9", "filename": "src/test/compile-fail/no_send-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -24,5 +24,5 @@ fn bar<T: Send>(_: T) {}\n fn main() {\n     let x = Foo::A(NoSend);\n     bar(x);\n-    //~^ ERROR `core::marker::Send` is not implemented\n+    //~^ ERROR `std::marker::Send` is not implemented\n }"}, {"sha": "23926394a2358f174110812680795e4da276c82f", "filename": "src/test/compile-fail/no_send-rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -15,5 +15,5 @@ fn bar<T: Send>(_: T) {}\n fn main() {\n     let x = Rc::new(5);\n     bar(x);\n-    //~^ ERROR `core::marker::Send` is not implemented\n+    //~^ ERROR `std::marker::Send` is not implemented\n }"}, {"sha": "14e18558a717c5877a797cb84a67d5174dc05b98", "filename": "src/test/compile-fail/no_send-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fno_send-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fno_send-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-struct.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -23,5 +23,5 @@ fn bar<T: Send>(_: T) {}\n fn main() {\n     let x = Foo { a: 5 };\n     bar(x);\n-    //~^ ERROR the trait `core::marker::Send` is not implemented\n+    //~^ ERROR the trait `std::marker::Send` is not implemented\n }"}, {"sha": "c9a3084a73e620cdf4f9c275a8be000e1700691c", "filename": "src/test/compile-fail/no_share-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -22,5 +22,5 @@ fn bar<T: Sync>(_: T) {}\n fn main() {\n     let x = Foo::A(NoSync);\n     bar(x);\n-    //~^ ERROR the trait `core::marker::Sync` is not implemented\n+    //~^ ERROR the trait `std::marker::Sync` is not implemented\n }"}, {"sha": "74549286f7b57db170a3b44fd46e5511b444b5be", "filename": "src/test/compile-fail/no_share-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -20,5 +20,5 @@ fn bar<T: Sync>(_: T) {}\n fn main() {\n     let x = Foo { a: 5 };\n     bar(x);\n-    //~^ ERROR the trait `core::marker::Sync` is not implemented\n+    //~^ ERROR the trait `std::marker::Sync` is not implemented\n }"}, {"sha": "687e1e49ee844bb6390a7965c8076a2f521e1b4a", "filename": "src/test/compile-fail/noexporttypeexe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -20,7 +20,7 @@ fn main() {\n   let x: isize = noexporttypelib::foo();\n     //~^ ERROR mismatched types\n     //~| expected `isize`\n-    //~| found `core::option::Option<isize>`\n+    //~| found `std::option::Option<isize>`\n     //~| expected isize\n-    //~| found enum `core::option::Option`\n+    //~| found enum `std::option::Option`\n }"}, {"sha": "c9648a18be5f21ef6f9b653e440a0e906af89862", "filename": "src/test/compile-fail/not-sync.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -16,14 +16,14 @@ fn test<T: Sync>() {}\n \n fn main() {\n     test::<Cell<i32>>();\n-    //~^ ERROR marker::Sync` is not implemented for the type `core::cell::Cell<i32>`\n+    //~^ ERROR marker::Sync` is not implemented for the type `std::cell::Cell<i32>`\n     test::<RefCell<i32>>();\n-    //~^ ERROR marker::Sync` is not implemented for the type `core::cell::RefCell<i32>`\n+    //~^ ERROR marker::Sync` is not implemented for the type `std::cell::RefCell<i32>`\n \n     test::<Rc<i32>>();\n-    //~^ ERROR marker::Sync` is not implemented for the type `alloc::rc::Rc<i32>`\n+    //~^ ERROR marker::Sync` is not implemented for the type `std::rc::Rc<i32>`\n     test::<Weak<i32>>();\n-    //~^ ERROR marker::Sync` is not implemented for the type `alloc::rc::Weak<i32>`\n+    //~^ ERROR marker::Sync` is not implemented for the type `std::rc::Weak<i32>`\n \n     test::<Receiver<i32>>();\n     //~^ ERROR marker::Sync` is not implemented for the type `std::sync::mpsc::Receiver<i32>`"}, {"sha": "39ce1b33ca13122b275642f24761987f645aab0f", "filename": "src/test/compile-fail/on-unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fon-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fon-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -33,9 +33,9 @@ pub fn main() {\n     let x = vec!(1u8, 2, 3, 4);\n     let y: Option<Vec<u8>> = collect(x.iter()); // this should give approximately the same error for x.iter().collect()\n     //~^ ERROR\n-    //~^^ NOTE a collection of type `core::option::Option<collections::vec::Vec<u8>>` cannot be built from an iterator over elements of type `&u8`\n+    //~^^ NOTE a collection of type `std::option::Option<std::vec::Vec<u8>>` cannot be built from an iterator over elements of type `&u8`\n     //~^^^ NOTE required by `collect`\n     let x: String = foobar(); //~ ERROR\n-    //~^ NOTE test error `collections::string::String` with `u8` `_` `u32`\n+    //~^ NOTE test error `std::string::String` with `u8` `_` `u32`\n     //~^^ NOTE required by `foobar`\n }"}, {"sha": "92def18f824147cf0d76e59bf347a766adc24cdb", "filename": "src/test/compile-fail/phantom-oibit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -31,11 +31,11 @@ struct Nested<T>(T);\n fn is_zen<T: Zen>(_: T) {}\n \n fn not_sync<T>(x: Guard<T>) {\n-    is_zen(x)  //~ error: the trait `core::marker::Sync` is not implemented for the type `T`\n+    is_zen(x)  //~ error: the trait `std::marker::Sync` is not implemented for the type `T`\n }\n \n fn nested_not_sync<T>(x: Nested<Guard<T>>) {\n-    is_zen(x)  //~ error: the trait `core::marker::Sync` is not implemented for the type `T`\n+    is_zen(x)  //~ error: the trait `std::marker::Sync` is not implemented for the type `T`\n }\n \n fn main() {}"}, {"sha": "46d7666dabc565e62c2bb904383492fa2d44d842", "filename": "src/test/compile-fail/range-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-1.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -22,6 +22,6 @@ pub fn main() {\n     // Unsized type.\n     let arr: &[_] = &[1, 2, 3];\n     let range = *arr..;\n-    //~^ ERROR the trait `core::marker::Sized` is not implemented\n-    //~| ERROR the trait `core::marker::Sized` is not implemented\n+    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    //~| ERROR the trait `std::marker::Sized` is not implemented\n }"}, {"sha": "0a55fe9f942792cd0fdc68c6b6c2d134d4e10c1a", "filename": "src/test/compile-fail/repeat-to-run-dtor-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -25,5 +25,5 @@ impl Drop for Foo {\n fn main() {\n     let a = Foo { x: 3 };\n     let _ = [ a; 5 ];\n-    //~^ ERROR the trait `core::marker::Copy` is not implemented for the type `Foo`\n+    //~^ ERROR the trait `std::marker::Copy` is not implemented for the type `Foo`\n }"}, {"sha": "ec378d05ba5ad2b793a63d220564d5b95d4c9f52", "filename": "src/test/compile-fail/sized-cycle-note.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fsized-cycle-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fsized-cycle-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsized-cycle-note.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -20,10 +20,10 @@ struct Baz { q: Option<Foo> }\n \n struct Foo { q: Option<Baz> }\n //~^ ERROR recursive type `Foo` has infinite size\n-//~| type `Foo` is embedded within `core::option::Option<Foo>`...\n-//~| ...which in turn is embedded within `core::option::Option<Foo>`...\n+//~| type `Foo` is embedded within `std::option::Option<Foo>`...\n+//~| ...which in turn is embedded within `std::option::Option<Foo>`...\n //~| ...which in turn is embedded within `Baz`...\n-//~| ...which in turn is embedded within `core::option::Option<Baz>`...\n+//~| ...which in turn is embedded within `std::option::Option<Baz>`...\n //~| ...which in turn is embedded within `Foo`, completing the cycle.\n \n impl Foo { fn bar(&self) {} }"}, {"sha": "6af731caaba409c37971dd9811f6a31c359ce20a", "filename": "src/test/compile-fail/str-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -10,5 +10,5 @@\n \n pub fn main() {\n     let s: &str = \"hello\";\n-    let c: u8 = s[4]; //~ ERROR the trait `core::ops::Index<_>` is not implemented\n+    let c: u8 = s[4]; //~ ERROR the trait `std::ops::Index<_>` is not implemented\n }"}, {"sha": "1fbdb3fddce6df67c3e0312a8b52944380bf6454", "filename": "src/test/compile-fail/str-mut-idx.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -12,11 +12,11 @@ fn bot<T>() -> T { loop {} }\n \n fn mutate(s: &mut str) {\n     s[1..2] = bot();\n-    //~^ ERROR `core::marker::Sized` is not implemented for the type `str`\n-    //~| ERROR `core::marker::Sized` is not implemented for the type `str`\n+    //~^ ERROR `std::marker::Sized` is not implemented for the type `str`\n+    //~| ERROR `std::marker::Sized` is not implemented for the type `str`\n     s[1usize] = bot();\n-    //~^ ERROR `core::ops::Index<usize>` is not implemented for the type `str`\n-    //~| ERROR `core::ops::IndexMut<usize>` is not implemented for the type `str`\n+    //~^ ERROR `std::ops::Index<usize>` is not implemented for the type `str`\n+    //~| ERROR `std::ops::IndexMut<usize>` is not implemented for the type `str`\n }\n \n pub fn main() {}"}, {"sha": "725234dfeab5600c3d8ba230866a9a73ececcc51", "filename": "src/test/compile-fail/tag-that-dare-not-speak-its-name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -22,7 +22,7 @@ fn main() {\n     let x : char = last(y);\n     //~^ ERROR mismatched types\n     //~| expected `char`\n-    //~| found `core::option::Option<_>`\n+    //~| found `std::option::Option<_>`\n     //~| expected char\n-    //~| found enum `core::option::Option`\n+    //~| found enum `std::option::Option`\n }"}, {"sha": "6d1a3ee79401986ec553d3fe0638a7e330de4d29", "filename": "src/test/compile-fail/task-rng-isnt-sendable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -16,5 +16,5 @@ fn test_send<S: Send>() {}\n \n pub fn main() {\n     test_send::<rand::ThreadRng>();\n-    //~^ ERROR `core::marker::Send` is not implemented\n+    //~^ ERROR `std::marker::Send` is not implemented\n }"}, {"sha": "fd0c2ddb5025dee8b8f83bfeed1a49a166bdcad6", "filename": "src/test/compile-fail/trait-bounds-impl-comparison-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-1.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -34,7 +34,7 @@ trait Foo {\n impl Foo for isize {\n     // invalid bound for T, was defined as Eq in trait\n     fn test_error1_fn<T: Ord>(&self) {}\n-    //~^ ERROR the requirement `T : core::cmp::Ord` appears on the impl\n+    //~^ ERROR the requirement `T : std::cmp::Ord` appears on the impl\n \n     // invalid bound for T, was defined as Eq + Ord in trait\n     fn test_error2_fn<T: Eq + B>(&self) {}\n@@ -58,7 +58,7 @@ impl Foo for isize {\n     fn test6_fn<T: A>(&self) {}\n \n     fn test_error7_fn<T: A + Eq>(&self) {}\n-    //~^ ERROR the requirement `T : core::cmp::Eq` appears on the impl\n+    //~^ ERROR the requirement `T : std::cmp::Eq` appears on the impl\n \n     fn test_error8_fn<T: C>(&self) {}\n     //~^ ERROR the requirement `T : C` appears on the impl"}, {"sha": "f70b2a90474256ae1e404ed6a6e1f4bb209e73dd", "filename": "src/test/compile-fail/trait-bounds-not-on-bare-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -15,7 +15,7 @@ trait Foo {\n // This should emit the less confusing error, not the more confusing one.\n \n fn foo(_x: Foo + Send) {\n-    //~^ ERROR the trait `core::marker::Sized` is not implemented\n+    //~^ ERROR the trait `std::marker::Sized` is not implemented\n }\n \n fn main() { }"}, {"sha": "0eb4e230e14946cefc42adf9f93b6da7ebcd28e1", "filename": "src/test/compile-fail/traits-negative-impls.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -31,40 +31,40 @@ fn dummy() {\n     impl !Send for TestType {}\n \n     Outer(TestType);\n-    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `dummy::TestType`\n-    //~| ERROR the trait `core::marker::Send` is not implemented for the type `dummy::TestType`\n+    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `dummy::TestType`\n+    //~| ERROR the trait `std::marker::Send` is not implemented for the type `dummy::TestType`\n }\n \n fn dummy1b() {\n     struct TestType;\n     impl !Send for TestType {}\n \n     is_send(TestType);\n-    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `dummy1b::TestType`\n+    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `dummy1b::TestType`\n }\n \n fn dummy1c() {\n     struct TestType;\n     impl !Send for TestType {}\n \n     is_send((8, TestType));\n-    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `dummy1c::TestType`\n+    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `dummy1c::TestType`\n }\n \n fn dummy2() {\n     struct TestType;\n     impl !Send for TestType {}\n \n     is_send(Box::new(TestType));\n-    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `dummy2::TestType`\n+    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `dummy2::TestType`\n }\n \n fn dummy3() {\n     struct TestType;\n     impl !Send for TestType {}\n \n     is_send(Box::new(Outer2(TestType)));\n-    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `dummy3::TestType`\n+    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `dummy3::TestType`\n }\n \n fn main() {\n@@ -74,5 +74,5 @@ fn main() {\n     // This will complain about a missing Send impl because `Sync` is implement *just*\n     // for T that are `Send`. Look at #20366 and #19950\n     is_sync(Outer2(TestType));\n-    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `main::TestType`\n+    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `main::TestType`\n }"}, {"sha": "7693d98a2f7b0c8f3927d531bcc7a5e8a438efd3", "filename": "src/test/compile-fail/trivial_casts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftrivial_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftrivial_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrivial_casts.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -76,7 +76,7 @@ pub fn main() {\n \n     // functions\n     fn baz(_x: i32) {}\n-    let _ = &baz as &Fn(i32); //~ERROR trivial cast: `&fn(i32) {main::baz}` as `&core::ops::Fn(i32)`\n+    let _ = &baz as &Fn(i32); //~ERROR trivial cast: `&fn(i32) {main::baz}` as `&std::ops::Fn(i32)`\n     let _: &Fn(i32) = &baz;\n     let x = |_x: i32| {};\n     let _ = &x as &Fn(i32); //~ERROR trivial cast"}, {"sha": "58519e4df7550909a39beb6d442eb0a9d95dc20b", "filename": "src/test/compile-fail/typeck-default-trait-impl-negation-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-send.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -27,5 +27,5 @@ fn is_send<T: Send>() {}\n fn main() {\n     is_send::<MySendable>();\n     is_send::<MyNotSendable>();\n-    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `MyNotSendable`\n+    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `MyNotSendable`\n }"}, {"sha": "8d174271a369fa5776c28b7dfcad033442aaed73", "filename": "src/test/compile-fail/typeck-default-trait-impl-negation-sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-sync.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -43,11 +43,11 @@ fn is_sync<T: Sync>() {}\n fn main() {\n     is_sync::<MySync>();\n     is_sync::<MyNotSync>();\n-    //~^ ERROR the trait `core::marker::Sync` is not implemented for the type `MyNotSync`\n+    //~^ ERROR the trait `std::marker::Sync` is not implemented for the type `MyNotSync`\n \n     is_sync::<MyTypeWUnsafe>();\n-    //~^ ERROR the trait `core::marker::Sync` is not implemented for the type `core::cell::UnsafeCell<u8>`\n+    //~^ ERROR the trait `std::marker::Sync` is not implemented for the type `std::cell::UnsafeCell<u8>`\n \n     is_sync::<MyTypeManaged>();\n-    //~^ ERROR the trait `core::marker::Sync` is not implemented for the type `Managed`\n+    //~^ ERROR the trait `std::marker::Sync` is not implemented for the type `Managed`\n }"}, {"sha": "c624ba425e47f67ed4695cc5cf6a834438b03bf8", "filename": "src/test/compile-fail/typeck-default-trait-impl-trait-where-clause-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause-2.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -29,7 +29,7 @@ fn bar<T:NotImplemented>() { }\n \n fn test() {\n     bar::<Option<i32>>();\n-    //~^ ERROR the trait `NotImplemented` is not implemented for the type `core::option::Option<i32>`\n+    //~^ ERROR the trait `NotImplemented` is not implemented for the type `std::option::Option<i32>`\n }\n \n fn main() {"}, {"sha": "c1757d124da5516412f0a9e2c5932af7c0636e92", "filename": "src/test/compile-fail/typeck-default-trait-impl-trait-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -26,7 +26,7 @@ impl NotImplemented for i32 {}\n impl MyTrait for .. {}\n \n fn foo<T:MyTrait>() {\n-    //~^ ERROR the trait `NotImplemented` is not implemented for the type `core::option::Option<T>`\n+    //~^ ERROR the trait `NotImplemented` is not implemented for the type `std::option::Option<T>`\n     // This should probably typecheck. This is #20671.\n }\n "}, {"sha": "a0d236a1c5183edee5b4cadacc3561da130a1a95", "filename": "src/test/compile-fail/typeck-unsafe-always-share.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -27,16 +27,16 @@ fn test<T: Sync>(s: T) {}\n fn main() {\n     let us = UnsafeCell::new(MySync{u: UnsafeCell::new(0)});\n     test(us);\n-    //~^ ERROR `core::marker::Sync` is not implemented\n+    //~^ ERROR `std::marker::Sync` is not implemented\n \n     let uns = UnsafeCell::new(NoSync);\n     test(uns);\n-    //~^ ERROR `core::marker::Sync` is not implemented\n+    //~^ ERROR `std::marker::Sync` is not implemented\n \n     let ms = MySync{u: uns};\n     test(ms);\n-    //~^ ERROR `core::marker::Sync` is not implemented\n+    //~^ ERROR `std::marker::Sync` is not implemented\n \n     test(NoSync);\n-    //~^ ERROR `core::marker::Sync` is not implemented\n+    //~^ ERROR `std::marker::Sync` is not implemented\n }"}, {"sha": "c07374ceaf2fb525d6f5b5c0a1ca50013cad7db7", "filename": "src/test/compile-fail/ufcs-qpath-self-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-self-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-self-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-self-mismatch.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -12,7 +12,7 @@ use std::ops::Add;\n \n fn main() {\n     <i32 as Add<u32>>::add(1, 2);\n-    //~^ ERROR the trait `core::ops::Add<u32>` is not implemented for the type `i32`\n+    //~^ ERROR the trait `std::ops::Add<u32>` is not implemented for the type `i32`\n     <i32 as Add<i32>>::add(1u32, 2);\n     //~^ ERROR mismatched types\n     <i32 as Add<i32>>::add(1, 2u32);"}, {"sha": "82aa49aa7061d2cfa5790129ec0515ac304c5444", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -17,5 +17,5 @@ fn main() {\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let i = Box::new(Rc::new(100));\n     f(i);\n-    //~^ ERROR `core::marker::Send` is not implemented\n+    //~^ ERROR `std::marker::Send` is not implemented\n }"}, {"sha": "ed606dae55f21d2f3a85aee6e5d0ed1680d2a558", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -35,8 +35,8 @@ fn main() {\n     let r1 = vec!(Box::new(r { i: i1 }));\n     let r2 = vec!(Box::new(r { i: i2 }));\n     f(clone(&r1), clone(&r2));\n-    //~^ ERROR the trait `core::clone::Clone` is not implemented for the type\n-    //~^^ ERROR the trait `core::clone::Clone` is not implemented for the type\n+    //~^ ERROR the trait `std::clone::Clone` is not implemented for the type\n+    //~^^ ERROR the trait `std::clone::Clone` is not implemented for the type\n     println!(\"{:?}\", (r2, i1.get()));\n     println!(\"{:?}\", (r1, i2.get()));\n }"}, {"sha": "1885049f1693786f05e545e0ce4d5a0fca620087", "filename": "src/test/compile-fail/unsized-bare-typaram.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn bar<T: Sized>() { }\n-fn foo<T: ?Sized>() { bar::<T>() } //~ ERROR the trait `core::marker::Sized` is not implemented\n+fn foo<T: ?Sized>() { bar::<T>() } //~ ERROR the trait `std::marker::Sized` is not implemented\n fn main() { }"}, {"sha": "dad492eb243540ad47559a15dc6a7f7efbbbfd12", "filename": "src/test/compile-fail/unsized-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -15,14 +15,14 @@ fn not_sized<T: ?Sized>() { }\n enum Foo<U> { FooSome(U), FooNone }\n fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-//~^ ERROR the trait `core::marker::Sized` is not implemented\n+//~^ ERROR the trait `std::marker::Sized` is not implemented\n //\n // Not OK: `T` is not sized.\n \n enum Bar<U: ?Sized> { BarSome(U), BarNone }\n fn bar1<T: ?Sized>() { not_sized::<Bar<T>>() }\n fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n-//~^ ERROR the trait `core::marker::Sized` is not implemented\n+//~^ ERROR the trait `std::marker::Sized` is not implemented\n //\n // Not OK: `Bar<T>` is not sized, but it should be.\n "}, {"sha": "c317850be1a6a31b5801906c6566be76645fae4e", "filename": "src/test/compile-fail/unsized-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -15,14 +15,14 @@ fn not_sized<T: ?Sized>() { }\n struct Foo<T> { data: T }\n fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-//~^ ERROR the trait `core::marker::Sized` is not implemented\n+//~^ ERROR the trait `std::marker::Sized` is not implemented\n //\n // Not OK: `T` is not sized.\n \n struct Bar<T: ?Sized> { data: T }\n fn bar1<T: ?Sized>() { not_sized::<Bar<T>>() }\n fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n-//~^ ERROR the trait `core::marker::Sized` is not implemented\n+//~^ ERROR the trait `std::marker::Sized` is not implemented\n //\n // Not OK: `Bar<T>` is not sized, but it should be.\n "}, {"sha": "9cae2b56799297222a3e611e1df33bfb9b6a7c01", "filename": "src/test/compile-fail/unsized-trait-impl-trait-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -16,7 +16,7 @@ trait T2<Z> {\n }\n struct S4<Y: ?Sized>(Box<Y>);\n impl<X: ?Sized> T2<X> for S4<X> {\n-    //~^ ERROR `core::marker::Sized` is not implemented for the type `X`\n+    //~^ ERROR `std::marker::Sized` is not implemented for the type `X`\n }\n \n fn main() { }"}, {"sha": "acce00bd87ef5a893eb27dc6261fc5ef4b8a5605", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -15,7 +15,7 @@ use std::marker;\n // Unbounded.\n fn f1<X: ?Sized>(x: &X) {\n     f2::<X>(x);\n-    //~^ ERROR the trait `core::marker::Sized` is not implemented\n+    //~^ ERROR the trait `std::marker::Sized` is not implemented\n }\n fn f2<X>(x: &X) {\n }\n@@ -26,7 +26,7 @@ trait T {\n }\n fn f3<X: ?Sized + T>(x: &X) {\n     f4::<X>(x);\n-    //~^ ERROR the trait `core::marker::Sized` is not implemented\n+    //~^ ERROR the trait `std::marker::Sized` is not implemented\n }\n fn f4<X: T>(x: &X) {\n }\n@@ -40,7 +40,7 @@ fn f5<Y>(x: &Y) {}\n fn f6<X: ?Sized>(x: &X) {}\n fn f7<X: ?Sized>(x1: &E<X>, x2: &E<X>) {\n     f5(x1);\n-    //~^ ERROR the trait `core::marker::Sized` is not implemented\n+    //~^ ERROR the trait `std::marker::Sized` is not implemented\n     f6(x2); // ok\n }\n \n@@ -52,19 +52,19 @@ struct S<X: ?Sized> {\n \n fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n     f5(x1);\n-    //~^ ERROR the trait `core::marker::Sized` is not implemented\n+    //~^ ERROR the trait `std::marker::Sized` is not implemented\n     f6(x2); // ok\n }\n \n // Test some tuples.\n fn f9<X: ?Sized>(x1: Box<S<X>>, x2: Box<E<X>>) {\n     f5(&(*x1, 34));\n-    //~^ ERROR the trait `core::marker::Sized` is not implemented\n+    //~^ ERROR the trait `std::marker::Sized` is not implemented\n }\n \n fn f10<X: ?Sized>(x1: Box<S<X>>, x2: Box<E<X>>) {\n     f5(&(32, *x2));\n-    //~^ ERROR the trait `core::marker::Sized` is not implemented\n+    //~^ ERROR the trait `std::marker::Sized` is not implemented\n }\n \n pub fn main() {"}, {"sha": "463ce2515ff80f137ba9e3a7aa407107df92e417", "filename": "src/test/compile-fail/unsized5.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized5.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -11,27 +11,27 @@\n // Test `?Sized` types not allowed in fields (except the last one).\n \n struct S1<X: ?Sized> {\n-    f1: X, //~ ERROR `core::marker::Sized` is not implemented\n+    f1: X, //~ ERROR `std::marker::Sized` is not implemented\n     f2: isize,\n }\n struct S2<X: ?Sized> {\n     f: isize,\n-    g: X, //~ ERROR `core::marker::Sized` is not implemented\n+    g: X, //~ ERROR `std::marker::Sized` is not implemented\n     h: isize,\n }\n struct S3 {\n-    f: str, //~ ERROR `core::marker::Sized` is not implemented\n+    f: str, //~ ERROR `std::marker::Sized` is not implemented\n     g: [usize]\n }\n struct S4 {\n-    f: [u8], //~ ERROR `core::marker::Sized` is not implemented\n+    f: [u8], //~ ERROR `std::marker::Sized` is not implemented\n     g: usize\n }\n enum E<X: ?Sized> {\n-    V1(X, isize), //~ERROR `core::marker::Sized` is not implemented\n+    V1(X, isize), //~ERROR `std::marker::Sized` is not implemented\n }\n enum F<X: ?Sized> {\n-    V2{f1: X, f: isize}, //~ERROR `core::marker::Sized` is not implemented\n+    V2{f1: X, f: isize}, //~ERROR `std::marker::Sized` is not implemented\n }\n \n pub fn main() {"}, {"sha": "4b55cdf25e58e65bf1e5d804eeb4a9655791d116", "filename": "src/test/compile-fail/unsized6.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized6.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -15,27 +15,27 @@ trait T {}\n fn f1<X: ?Sized>(x: &X) {\n     let _: X; // <-- this is OK, no bindings created, no initializer.\n     let _: (isize, (X, isize)); // same\n-    let y: X; //~ERROR the trait `core::marker::Sized` is not implemented\n-    let y: (isize, (X, isize)); //~ERROR the trait `core::marker::Sized` is not implemented\n+    let y: X; //~ERROR the trait `std::marker::Sized` is not implemented\n+    let y: (isize, (X, isize)); //~ERROR the trait `std::marker::Sized` is not implemented\n }\n fn f2<X: ?Sized + T>(x: &X) {\n-    let y: X; //~ERROR the trait `core::marker::Sized` is not implemented\n-    let y: (isize, (X, isize)); //~ERROR the trait `core::marker::Sized` is not implemented\n+    let y: X; //~ERROR the trait `std::marker::Sized` is not implemented\n+    let y: (isize, (X, isize)); //~ERROR the trait `std::marker::Sized` is not implemented\n }\n \n fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-    let y: X = *x1; //~ERROR the trait `core::marker::Sized` is not implemented\n-    let y = *x2; //~ERROR the trait `core::marker::Sized` is not implemented\n-    let (y, z) = (*x3, 4); //~ERROR the trait `core::marker::Sized` is not implemented\n+    let y: X = *x1; //~ERROR the trait `std::marker::Sized` is not implemented\n+    let y = *x2; //~ERROR the trait `std::marker::Sized` is not implemented\n+    let (y, z) = (*x3, 4); //~ERROR the trait `std::marker::Sized` is not implemented\n }\n fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-    let y: X = *x1;         //~ERROR the trait `core::marker::Sized` is not implemented\n-    let y = *x2;            //~ERROR the trait `core::marker::Sized` is not implemented\n-    let (y, z) = (*x3, 4); //~ERROR the trait `core::marker::Sized` is not implemented\n+    let y: X = *x1;         //~ERROR the trait `std::marker::Sized` is not implemented\n+    let y = *x2;            //~ERROR the trait `std::marker::Sized` is not implemented\n+    let (y, z) = (*x3, 4); //~ERROR the trait `std::marker::Sized` is not implemented\n }\n \n-fn g1<X: ?Sized>(x: X) {} //~ERROR the trait `core::marker::Sized` is not implemented\n-fn g2<X: ?Sized + T>(x: X) {} //~ERROR the trait `core::marker::Sized` is not implemented\n+fn g1<X: ?Sized>(x: X) {} //~ERROR the trait `std::marker::Sized` is not implemented\n+fn g2<X: ?Sized + T>(x: X) {} //~ERROR the trait `std::marker::Sized` is not implemented\n \n pub fn main() {\n }"}, {"sha": "defa57414f4092b173338bfb887541870e1500a5", "filename": "src/test/compile-fail/unsized7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized7.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -20,7 +20,7 @@ trait T1<Z: T> {\n \n struct S3<Y: ?Sized>(Box<Y>);\n impl<X: ?Sized + T> T1<X> for S3<X> {\n-    //~^ ERROR `core::marker::Sized` is not implemented for the type `X`\n+    //~^ ERROR `std::marker::Sized` is not implemented for the type `X`\n }\n \n fn main() { }"}, {"sha": "354407bc0020364ee75d0949e5ba650cc6558765", "filename": "src/test/compile-fail/where-clause-constraints-are-local-for-inherent-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-inherent-impl.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -21,7 +21,7 @@ impl<T> Foo<T> {\n \n     fn fails_copy(self) {\n         require_copy(self.x);\n-        //~^ ERROR the trait `core::marker::Copy` is not implemented for the type `T`\n+        //~^ ERROR the trait `std::marker::Copy` is not implemented for the type `T`\n     }\n }\n "}, {"sha": "b747a555b5e7e451c9674b6d91bb24420dfd84f0", "filename": "src/test/compile-fail/where-clause-constraints-are-local-for-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-trait-impl.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -26,7 +26,7 @@ impl<T> Foo<T> for Bar<T> {\n \n     fn fails_copy(self) {\n         require_copy(self.x);\n-        //~^ ERROR the trait `core::marker::Copy` is not implemented for the type `T`\n+        //~^ ERROR the trait `std::marker::Copy` is not implemented for the type `T`\n     }\n }\n "}, {"sha": "c4d7d8207e74d4bce05b2e2222ac4cb3f574c3e7", "filename": "src/test/compile-fail/where-clauses-method-unsatisfied.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-method-unsatisfied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-method-unsatisfied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-method-unsatisfied.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -26,5 +26,5 @@ impl<T> Foo<T> {\n fn main() {\n     let x = Foo { value: Bar };\n     x.equals(&x);\n-    //~^ ERROR the trait `core::cmp::Eq` is not implemented for the type `Bar`\n+    //~^ ERROR the trait `std::cmp::Eq` is not implemented for the type `Bar`\n }"}, {"sha": "d1d0eb13d68df2f3720fe4e65050039430256f18", "filename": "src/test/compile-fail/where-clauses-unsatisfied.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-unsatisfied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-unsatisfied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-unsatisfied.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -15,5 +15,5 @@ struct Struct;\n \n fn main() {\n     drop(equal(&Struct, &Struct))\n-    //~^ ERROR the trait `core::cmp::Eq` is not implemented\n+    //~^ ERROR the trait `std::cmp::Eq` is not implemented\n }"}, {"sha": "6ce534d52b88356d119869bf537b41bc7b266410", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -39,42 +39,42 @@\n \n \n     ((::std::fmt::format as\n-         fn(core::fmt::Arguments<'_>) -> collections::string::String {collections::fmt::format})(((::std::fmt::Arguments::new_v1\n-                                                                                                      as\n-                                                                                                      fn(&[&str], &[core::fmt::ArgumentV1<'_>]) -> core::fmt::Arguments<'_> {core::fmt::Arguments<'_>::new_v1})(({\n-                                                                                                                                                                                                                     static __STATIC_FMTSTR:\n-                                                                                                                                                                                                                            &'static [&'static str]\n-                                                                                                                                                                                                                            =\n-                                                                                                                                                                                                                         (&([(\"test\"\n-                                                                                                                                                                                                                                 as\n-                                                                                                                                                                                                                                 &'static str)]\n-                                                                                                                                                                                                                               as\n-                                                                                                                                                                                                                               [&'static str; 1])\n-                                                                                                                                                                                                                             as\n-                                                                                                                                                                                                                             &'static [&'static str; 1]);\n-                                                                                                                                                                                                                     (__STATIC_FMTSTR\n-                                                                                                                                                                                                                         as\n-                                                                                                                                                                                                                         &'static [&'static str])\n-                                                                                                                                                                                                                 }\n-                                                                                                                                                                                                                    as\n-                                                                                                                                                                                                                    &[&str]),\n-                                                                                                                                                                                                                (&(match (()\n-                                                                                                                                                                                                                             as\n-                                                                                                                                                                                                                             ())\n-                                                                                                                                                                                                                       {\n-                                                                                                                                                                                                                       ()\n-                                                                                                                                                                                                                       =>\n-                                                                                                                                                                                                                       ([]\n-                                                                                                                                                                                                                           as\n-                                                                                                                                                                                                                           [core::fmt::ArgumentV1<'_>; 0]),\n-                                                                                                                                                                                                                   }\n-                                                                                                                                                                                                                      as\n-                                                                                                                                                                                                                      [core::fmt::ArgumentV1<'_>; 0])\n-                                                                                                                                                                                                                    as\n-                                                                                                                                                                                                                    &[core::fmt::ArgumentV1<'_>; 0]))\n-                                                                                                     as\n-                                                                                                     core::fmt::Arguments<'_>))\n-        as collections::string::String);\n+         fn(std::fmt::Arguments<'_>) -> std::string::String {std::fmt::format})(((::std::fmt::Arguments::new_v1\n+                                                                                     as\n+                                                                                     fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments<'_>::new_v1})(({\n+                                                                                                                                                                                                 static __STATIC_FMTSTR:\n+                                                                                                                                                                                                        &'static [&'static str]\n+                                                                                                                                                                                                        =\n+                                                                                                                                                                                                     (&([(\"test\"\n+                                                                                                                                                                                                             as\n+                                                                                                                                                                                                             &'static str)]\n+                                                                                                                                                                                                           as\n+                                                                                                                                                                                                           [&'static str; 1])\n+                                                                                                                                                                                                         as\n+                                                                                                                                                                                                         &'static [&'static str; 1]);\n+                                                                                                                                                                                                 (__STATIC_FMTSTR\n+                                                                                                                                                                                                     as\n+                                                                                                                                                                                                     &'static [&'static str])\n+                                                                                                                                                                                             }\n+                                                                                                                                                                                                as\n+                                                                                                                                                                                                &[&str]),\n+                                                                                                                                                                                            (&(match (()\n+                                                                                                                                                                                                         as\n+                                                                                                                                                                                                         ())\n+                                                                                                                                                                                                   {\n+                                                                                                                                                                                                   ()\n+                                                                                                                                                                                                   =>\n+                                                                                                                                                                                                   ([]\n+                                                                                                                                                                                                       as\n+                                                                                                                                                                                                       [std::fmt::ArgumentV1<'_>; 0]),\n+                                                                                                                                                                                               }\n+                                                                                                                                                                                                  as\n+                                                                                                                                                                                                  [std::fmt::ArgumentV1<'_>; 0])\n+                                                                                                                                                                                                as\n+                                                                                                                                                                                                &[std::fmt::ArgumentV1<'_>; 0]))\n+                                                                                    as\n+                                                                                    std::fmt::Arguments<'_>))\n+        as std::string::String);\n }\n pub type Foo = [i32; (3 as usize)];\n pub struct Bar {"}, {"sha": "bb73fda67bddb962e79361d3be5ed95030779a20", "filename": "src/test/run-make/json-errors/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Frun-make%2Fjson-errors%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Frun-make%2Fjson-errors%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fjson-errors%2FMakefile?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -7,4 +7,4 @@ all:\n \tcd $(TMPDIR)\n \t-$(RUSTC) -Z unstable-options --error-format=json foo.rs 2>$(LOG)\n \tgrep -q '{\"message\":\"unresolved name `y`\",\"code\":{\"code\":\"E0425\",\"explanation\":\"\\\\nAn unresolved name was used. Example of erroneous codes.*\"},\"level\":\"error\",\"spans\":\\[{\"file_name\":\"foo.rs\",\"byte_start\":496,\"byte_end\":497,\"line_start\":12,\"line_end\":12,\"column_start\":18,\"column_end\":19,\"text\":\\[{\"text\":\"    let x = 42 + y;\",\"highlight_start\":18,\"highlight_end\":19}\\]}\\],\"children\":\\[\\]}' $(LOG)\n-\tgrep -q '{\"message\":\".*\",\"code\":{\"code\":\"E0277\",\"explanation\":\"\\\\nYou tried.*\"},\"level\":\"error\",\"spans\":\\[{.*}\\],\"children\":\\[{\"message\":\"the .*\",\"code\":null,\"level\":\"help\",\"spans\":\\[{\"file_name\":\"foo.rs\",\"byte_start\":504,\"byte_end\":516,\"line_start\":14,\"line_end\":14,\"column_start\":0,\"column_end\":0,\"text\":\\[{.*}\\]}\\],\"children\":\\[\\]},{\"message\":\"  <u8 as core::ops::Add>\",\"code\":null,\"level\":\"help\",' $(LOG)\n+\tgrep -q '{\"message\":\".*\",\"code\":{\"code\":\"E0277\",\"explanation\":\"\\\\nYou tried.*\"},\"level\":\"error\",\"spans\":\\[{.*}\\],\"children\":\\[{\"message\":\"the .*\",\"code\":null,\"level\":\"help\",\"spans\":\\[{\"file_name\":\"foo.rs\",\"byte_start\":504,\"byte_end\":516,\"line_start\":14,\"line_end\":14,\"column_start\":0,\"column_end\":0,\"text\":\\[{.*}\\]}\\],\"children\":\\[\\]},{\"message\":\"  <u8 as std::ops::Add>\",\"code\":null,\"level\":\"help\",' $(LOG)"}, {"sha": "af767464db35170ca31443c7eafdde94a778a08f", "filename": "src/test/run-pass/issue-21058.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da41e583d614411c99370881c38f919c99dec448/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21058.rs?ref=da41e583d614411c99370881c38f919c99dec448", "patch": "@@ -26,5 +26,5 @@ fn main() {\n         std::intrinsics::type_name::<NT>(),\n         // DST\n         std::intrinsics::type_name::<DST>()\n-    )}, (\"[u8]\", \"str\", \"core::marker::Send + 'static\", \"NT\", \"DST\"));\n+    )}, (\"[u8]\", \"str\", \"std::marker::Send + 'static\", \"NT\", \"DST\"));\n }"}]}