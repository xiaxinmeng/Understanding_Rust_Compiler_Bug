{"sha": "ab5d16a6b21d1360bb4fed20698aca2ead5f9c85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNWQxNmE2YjIxZDEzNjBiYjRmZWQyMDY5OGFjYTJlYWQ1ZjljODU=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-04-27T20:26:12Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-04-28T10:58:04Z"}, "message": "Adding documentation, indentation fixes", "tree": {"sha": "b421bef6c317a8da015a69a005356a66dee2ac2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b421bef6c317a8da015a69a005356a66dee2ac2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab5d16a6b21d1360bb4fed20698aca2ead5f9c85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5d16a6b21d1360bb4fed20698aca2ead5f9c85", "html_url": "https://github.com/rust-lang/rust/commit/ab5d16a6b21d1360bb4fed20698aca2ead5f9c85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab5d16a6b21d1360bb4fed20698aca2ead5f9c85/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5436f859e46de9057260269049865b6cdb1d9ddd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5436f859e46de9057260269049865b6cdb1d9ddd", "html_url": "https://github.com/rust-lang/rust/commit/5436f859e46de9057260269049865b6cdb1d9ddd"}], "stats": {"total": 79, "additions": 47, "deletions": 32}, "files": [{"sha": "48b8a819fff03eb53d018baebac65a13f04db6de", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab5d16a6b21d1360bb4fed20698aca2ead5f9c85/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5d16a6b21d1360bb4fed20698aca2ead5f9c85/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=ab5d16a6b21d1360bb4fed20698aca2ead5f9c85", "patch": "@@ -95,14 +95,6 @@ enum MapEntry<'hir> {\n     RootCrate,\n }\n \n-/// Represents the kind of pattern\n-#[derive(Debug, Clone, Copy)]\n-pub enum PatternSource<'hir> {\n-    MatchExpr(&'hir Expr),\n-    LetDecl(&'hir Local),\n-    Other,\n-}\n-\n impl<'hir> Clone for MapEntry<'hir> {\n     fn clone(&self) -> MapEntry<'hir> {\n         *self\n@@ -645,7 +637,7 @@ impl<'hir> Map<'hir> {\n             Err(id) => id,\n         }\n     }\n-    \n+\n     /// Returns the nearest enclosing scope. A scope is an item or block.\n     /// FIXME it is not clear to me that all items qualify as scopes - statics\n     /// and associated types probably shouldn't, for example. Behaviour in this"}, {"sha": "f193588dd7d6c605e77849de7abd94b2c249d2e2", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ab5d16a6b21d1360bb4fed20698aca2ead5f9c85/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5d16a6b21d1360bb4fed20698aca2ead5f9c85/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=ab5d16a6b21d1360bb4fed20698aca2ead5f9c85", "patch": "@@ -11,7 +11,7 @@\n //! Computes moves.\n \n use borrowck::*;\n-use borrowck::gather_loans::move_error::MoveSpanAndPath;\n+use borrowck::gather_loans::move_error::MovePlace;\n use borrowck::gather_loans::move_error::{MoveError, MoveErrorCollector};\n use borrowck::move_data::*;\n use rustc::middle::expr_use_visitor as euv;\n@@ -25,16 +25,36 @@ use syntax::ast;\n use syntax_pos::Span;\n use rustc::hir::*;\n use rustc::hir::map::Node::*;\n-use rustc::hir::map::{PatternSource};\n \n struct GatherMoveInfo<'tcx> {\n     id: ast::NodeId,\n     kind: MoveKind,\n     cmt: mc::cmt<'tcx>,\n-    span_path_opt: Option<MoveSpanAndPath<'tcx>>\n+    span_path_opt: Option<MovePlace<'tcx>>\n }\n \n-/// Returns the kind of the Pattern\n+/// Represents the kind of pattern\n+#[derive(Debug, Clone, Copy)]\n+pub enum PatternSource<'tcx> {\n+    MatchExpr(&'tcx Expr),\n+    LetDecl(&'tcx Local),\n+    Other,\n+}\n+\n+/// Analyzes the context where the pattern appears to determine the\n+/// kind of hint we want to give. In particular, if the pattern is in a `match`\n+/// or nested within other patterns, we want to suggest a `ref` binding:\n+///\n+///     let (a, b) = v[0]; // like the `a` and `b` patterns here\n+///     match v[0] { a => ... } // or the `a` pattern here\n+///\n+/// But if the pattern is the outermost pattern in a `let`, we would rather\n+/// suggest that the author add a `&` to the initializer:\n+///\n+///     let x = v[0]; // suggest `&v[0]` here\n+///\n+/// In this latter case, this function will return `PatternSource::LetDecl`\n+/// with a reference to the let\n fn get_pattern_source<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, pat: &Pat) -> PatternSource<'tcx> {\n \n     let parent = tcx.hir.get_parent_node(pat.id);\n@@ -132,7 +152,7 @@ pub fn gather_move_from_pat<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     let source = get_pattern_source(bccx.tcx,move_pat);\n     let pat_span_path_opt = match move_pat.node {\n         PatKind::Binding(_, _, ref path1, _) => {\n-            Some(MoveSpanAndPath {\n+            Some(MovePlace {\n                      span: move_pat.span,\n                      name: path1.node,\n                      pat_source: source,"}, {"sha": "9a72f3866a0e1c34579ccdbe53a2aa8590f8b897", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ab5d16a6b21d1360bb4fed20698aca2ead5f9c85/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5d16a6b21d1360bb4fed20698aca2ead5f9c85/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=ab5d16a6b21d1360bb4fed20698aca2ead5f9c85", "patch": "@@ -17,7 +17,7 @@ use rustc::ty;\n use syntax::ast;\n use syntax_pos;\n use errors::DiagnosticBuilder;\n-use rustc::hir::map::PatternSource;\n+use borrowck::gather_loans::gather_moves::PatternSource;\n \n pub struct MoveErrorCollector<'tcx> {\n     errors: Vec<MoveError<'tcx>>\n@@ -41,12 +41,12 @@ impl<'tcx> MoveErrorCollector<'tcx> {\n \n pub struct MoveError<'tcx> {\n     move_from: mc::cmt<'tcx>,\n-    move_to: Option<MoveSpanAndPath<'tcx>>\n+    move_to: Option<MovePlace<'tcx>>\n }\n \n impl<'tcx> MoveError<'tcx> {\n     pub fn with_move_info(move_from: mc::cmt<'tcx>,\n-                          move_to: Option<MoveSpanAndPath<'tcx>>)\n+                          move_to: Option<MovePlace<'tcx>>)\n                           -> MoveError<'tcx> {\n         MoveError {\n             move_from: move_from,\n@@ -56,27 +56,27 @@ impl<'tcx> MoveError<'tcx> {\n }\n \n #[derive(Clone)]\n-pub struct MoveSpanAndPath<'tcx> {\n+pub struct MovePlace<'tcx> {\n     pub span: syntax_pos::Span,\n     pub name: ast::Name,\n     pub pat_source: PatternSource<'tcx>,\n }\n \n pub struct GroupedMoveErrors<'tcx> {\n     move_from: mc::cmt<'tcx>,\n-    move_to_places: Vec<MoveSpanAndPath<'tcx>>\n+    move_to_places: Vec<MovePlace<'tcx>>\n }\n \n fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, errors: &Vec<MoveError<'tcx>>) {\n     let grouped_errors = group_errors_with_same_origin(errors);\n     for error in &grouped_errors {\n         let mut err = report_cannot_move_out_of(bccx, error.move_from.clone());\n         let mut is_first_note = true;\n-\t\n-\tif let Some(pattern_source) = error.move_to_places.get(0){\n- \n-        match pattern_source.pat_source {\n-            PatternSource::LetDecl(_) => {}\n+        match error.move_to_places.get(0) {\n+            Some(&MovePlace { pat_source: PatternSource::LetDecl(_), .. }) => {\n+                // ignore patterns that are found at the top-level of a `let`;\n+                // see `get_pattern_source()` for details\n+            }\n             _ => {\n                 for move_to in &error.move_to_places {\n \n@@ -85,14 +85,14 @@ fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, errors: &Vec<Move\n                 }\n             }\n         }\n-    }\n         if let NoteClosureEnv(upvar_id) = error.move_from.note {\n-            err.span_label(bccx.tcx.hir.span(upvar_id.var_id), &\"captured   outer variable\");\n+            err.span_label(bccx.tcx.hir.span(upvar_id.var_id),\n+                           &\"captured outer variable\");\n         }\n         err.emit();\n-\t\n-\t}\n+\n     }\n+}\n \n fn group_errors_with_same_origin<'tcx>(errors: &Vec<MoveError<'tcx>>)\n                                        -> Vec<GroupedMoveErrors<'tcx>> {"}, {"sha": "7efa3bd9d5b311980e104b5c90b9b9050c409c2c", "filename": "src/test/ui/issue-40402-ref-hints/issue-40402-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab5d16a6b21d1360bb4fed20698aca2ead5f9c85/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5d16a6b21d1360bb4fed20698aca2ead5f9c85/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.rs?ref=ab5d16a6b21d1360bb4fed20698aca2ead5f9c85", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Check that we do not suggest `ref f` here in the `main()` function.\n struct Foo {\n     pub v: Vec<String>,\n }"}, {"sha": "5e743b6bd3fe7b2ec2188e1ca22077b7466c377d", "filename": "src/test/ui/issue-40402-ref-hints/issue-40402-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab5d16a6b21d1360bb4fed20698aca2ead5f9c85/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab5d16a6b21d1360bb4fed20698aca2ead5f9c85/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-1.stderr?ref=ab5d16a6b21d1360bb4fed20698aca2ead5f9c85", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of indexed content\n-  --> $DIR/issue-40402-1.rs:18:13\n+  --> $DIR/issue-40402-1.rs:19:13\n    |\n-18 |     let e = f.v[0];\n+19 |     let e = f.v[0];\n    |             ^^^^^^ cannot move out of indexed content\n \n error: aborting due to previous error"}, {"sha": "76e038b696e8fe7122f9ffd6183da01c2bbbafbd", "filename": "src/test/ui/issue-40402-ref-hints/issue-40402-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5d16a6b21d1360bb4fed20698aca2ead5f9c85/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5d16a6b21d1360bb4fed20698aca2ead5f9c85/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.rs?ref=ab5d16a6b21d1360bb4fed20698aca2ead5f9c85", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Check that we do suggest `(ref a, ref b)` here, since `a` and `b`\n+// are nested within a pattern\n fn main() {\n     let x = vec![(String::new(), String::new())];\n     let (a, b) = x[0];"}, {"sha": "0060b683bba43637789a732186b8de60b21e75f5", "filename": "src/test/ui/issue-40402-ref-hints/issue-40402-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab5d16a6b21d1360bb4fed20698aca2ead5f9c85/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab5d16a6b21d1360bb4fed20698aca2ead5f9c85/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr?ref=ab5d16a6b21d1360bb4fed20698aca2ead5f9c85", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of indexed content\n-  --> $DIR/issue-40402-2.rs:13:18\n+  --> $DIR/issue-40402-2.rs:15:18\n    |\n-13 |     let (a, b) = x[0];\n+15 |     let (a, b) = x[0];\n    |          -  -    ^^^^ cannot move out of indexed content\n    |          |  |\n    |          |  ...and here (use `ref b` or `ref mut b`)"}]}