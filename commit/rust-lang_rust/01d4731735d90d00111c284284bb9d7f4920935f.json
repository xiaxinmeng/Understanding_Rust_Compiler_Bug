{"sha": "01d4731735d90d00111c284284bb9d7f4920935f", "node_id": "C_kwDOAAsO6NoAKDAxZDQ3MzE3MzVkOTBkMDAxMTFjMjg0Mjg0YmI5ZDdmNDkyMDkzNWY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-20T16:26:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-20T16:26:04Z"}, "message": "Rollup merge of #96168 - chris-morgan:AddrParseError-description-improvements, r=joshtriplett\n\nImprove AddrParseError description\n\nThe existing description was incorrect for socket addresses, and misleading: users would see \u201cinvalid IP address syntax\u201d and suppose they were supposed to provide an IP address rather than a socket address.\n\nI contemplated making it two variants (IP, socket), but realised we can do still better for the IPv4 and IPv6 types, so here it is as six.\n\nI contemplated more precise error descriptions (e.g. \u201cinvalid IPv6 socket address syntax: expected a decimal scope ID after %\u201d), but that\u2019s a more invasive change, and probably not worthwhile anyway.", "tree": {"sha": "3f4bdfbc5a11a0039935eb747c43af7787a5a5e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f4bdfbc5a11a0039935eb747c43af7787a5a5e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01d4731735d90d00111c284284bb9d7f4920935f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiYDQcCRBK7hj4Ov3rIwAAiE0IACmAEjlDeDXJPr7BvAVpaKan\njwRa5tmAEKsR10fiWMPn7723Rn4T0D01z0IS1drN2KKmzvfjwGgZTI9KQIWybD5N\nyS7y92rBwKlozcBgOMLkIMC5pEkGNSqRUYn29rPLSyrdhXH/YWzBtVJV4Surwubc\nKUIikEvNsRQGCkhkjRC7gcQMqOsSCWkSbAQsFAkRzk7fXPxO1SsZyK9dJXHFqxjO\nvYfIHtnS7+5YbEMlXoqDbFWwqq1G1BOnyaJko+fwtVMRDph2W/r0zUVpHrC8++zt\niEvSkiSdwOd7MYeUrFF/8F2WuiHb0nkN/PbW8KAm1A50FwACWVLAtDZqDvxRIhI=\n=c8fF\n-----END PGP SIGNATURE-----\n", "payload": "tree 3f4bdfbc5a11a0039935eb747c43af7787a5a5e6\nparent 53f028d79072f9ff37af0315bea9b3c1c9615d5b\nparent 0255398ff74422155187ee2ee7b095fc16838107\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650471964 +0200\ncommitter GitHub <noreply@github.com> 1650471964 +0200\n\nRollup merge of #96168 - chris-morgan:AddrParseError-description-improvements, r=joshtriplett\n\nImprove AddrParseError description\n\nThe existing description was incorrect for socket addresses, and misleading: users would see \u201cinvalid IP address syntax\u201d and suppose they were supposed to provide an IP address rather than a socket address.\n\nI contemplated making it two variants (IP, socket), but realised we can do still better for the IPv4 and IPv6 types, so here it is as six.\n\nI contemplated more precise error descriptions (e.g. \u201cinvalid IPv6 socket address syntax: expected a decimal scope ID after %\u201d), but that\u2019s a more invasive change, and probably not worthwhile anyway.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01d4731735d90d00111c284284bb9d7f4920935f", "html_url": "https://github.com/rust-lang/rust/commit/01d4731735d90d00111c284284bb9d7f4920935f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01d4731735d90d00111c284284bb9d7f4920935f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53f028d79072f9ff37af0315bea9b3c1c9615d5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/53f028d79072f9ff37af0315bea9b3c1c9615d5b", "html_url": "https://github.com/rust-lang/rust/commit/53f028d79072f9ff37af0315bea9b3c1c9615d5b"}, {"sha": "0255398ff74422155187ee2ee7b095fc16838107", "url": "https://api.github.com/repos/rust-lang/rust/commits/0255398ff74422155187ee2ee7b095fc16838107", "html_url": "https://github.com/rust-lang/rust/commit/0255398ff74422155187ee2ee7b095fc16838107"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "fb292ed29a18a5b90d508aaf81df12247fdb6863", "filename": "library/std/src/net/parser.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/01d4731735d90d00111c284284bb9d7f4920935f/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d4731735d90d00111c284284bb9d7f4920935f/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs?ref=01d4731735d90d00111c284284bb9d7f4920935f", "patch": "@@ -59,12 +59,12 @@ impl<'a> Parser<'a> {\n \n     /// Run a parser, but fail if the entire input wasn't consumed.\n     /// Doesn't run atomically.\n-    fn parse_with<T, F>(&mut self, inner: F) -> Result<T, AddrParseError>\n+    fn parse_with<T, F>(&mut self, inner: F, kind: AddrKind) -> Result<T, AddrParseError>\n     where\n         F: FnOnce(&mut Parser<'_>) -> Option<T>,\n     {\n         let result = inner(self);\n-        if self.state.is_empty() { result } else { None }.ok_or(AddrParseError(()))\n+        if self.state.is_empty() { result } else { None }.ok_or(AddrParseError(kind))\n     }\n \n     /// Peek the next character from the input\n@@ -278,7 +278,7 @@ impl<'a> Parser<'a> {\n impl FromStr for IpAddr {\n     type Err = AddrParseError;\n     fn from_str(s: &str) -> Result<IpAddr, AddrParseError> {\n-        Parser::new(s).parse_with(|p| p.read_ip_addr())\n+        Parser::new(s).parse_with(|p| p.read_ip_addr(), AddrKind::Ip)\n     }\n }\n \n@@ -288,9 +288,9 @@ impl FromStr for Ipv4Addr {\n     fn from_str(s: &str) -> Result<Ipv4Addr, AddrParseError> {\n         // don't try to parse if too long\n         if s.len() > 15 {\n-            Err(AddrParseError(()))\n+            Err(AddrParseError(AddrKind::Ipv4))\n         } else {\n-            Parser::new(s).parse_with(|p| p.read_ipv4_addr())\n+            Parser::new(s).parse_with(|p| p.read_ipv4_addr(), AddrKind::Ipv4)\n         }\n     }\n }\n@@ -299,34 +299,44 @@ impl FromStr for Ipv4Addr {\n impl FromStr for Ipv6Addr {\n     type Err = AddrParseError;\n     fn from_str(s: &str) -> Result<Ipv6Addr, AddrParseError> {\n-        Parser::new(s).parse_with(|p| p.read_ipv6_addr())\n+        Parser::new(s).parse_with(|p| p.read_ipv6_addr(), AddrKind::Ipv6)\n     }\n }\n \n #[stable(feature = \"socket_addr_from_str\", since = \"1.5.0\")]\n impl FromStr for SocketAddrV4 {\n     type Err = AddrParseError;\n     fn from_str(s: &str) -> Result<SocketAddrV4, AddrParseError> {\n-        Parser::new(s).parse_with(|p| p.read_socket_addr_v4())\n+        Parser::new(s).parse_with(|p| p.read_socket_addr_v4(), AddrKind::SocketV4)\n     }\n }\n \n #[stable(feature = \"socket_addr_from_str\", since = \"1.5.0\")]\n impl FromStr for SocketAddrV6 {\n     type Err = AddrParseError;\n     fn from_str(s: &str) -> Result<SocketAddrV6, AddrParseError> {\n-        Parser::new(s).parse_with(|p| p.read_socket_addr_v6())\n+        Parser::new(s).parse_with(|p| p.read_socket_addr_v6(), AddrKind::SocketV6)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromStr for SocketAddr {\n     type Err = AddrParseError;\n     fn from_str(s: &str) -> Result<SocketAddr, AddrParseError> {\n-        Parser::new(s).parse_with(|p| p.read_socket_addr())\n+        Parser::new(s).parse_with(|p| p.read_socket_addr(), AddrKind::Socket)\n     }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+enum AddrKind {\n+    Ip,\n+    Ipv4,\n+    Ipv6,\n+    Socket,\n+    SocketV4,\n+    SocketV6,\n+}\n+\n /// An error which can be returned when parsing an IP address or a socket address.\n ///\n /// This error is used as the error type for the [`FromStr`] implementation for\n@@ -353,7 +363,7 @@ impl FromStr for SocketAddr {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct AddrParseError(());\n+pub struct AddrParseError(AddrKind);\n \n #[stable(feature = \"addr_parse_error_error\", since = \"1.4.0\")]\n impl fmt::Display for AddrParseError {\n@@ -367,6 +377,13 @@ impl fmt::Display for AddrParseError {\n impl Error for AddrParseError {\n     #[allow(deprecated)]\n     fn description(&self) -> &str {\n-        \"invalid IP address syntax\"\n+        match self.0 {\n+            AddrKind::Ip => \"invalid IP address syntax\",\n+            AddrKind::Ipv4 => \"invalid IPv4 address syntax\",\n+            AddrKind::Ipv6 => \"invalid IPv6 address syntax\",\n+            AddrKind::Socket => \"invalid socket address syntax\",\n+            AddrKind::SocketV4 => \"invalid IPv4 socket address syntax\",\n+            AddrKind::SocketV6 => \"invalid IPv6 socket address syntax\",\n+        }\n     }\n }"}]}