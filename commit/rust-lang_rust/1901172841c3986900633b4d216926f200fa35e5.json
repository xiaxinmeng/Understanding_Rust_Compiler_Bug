{"sha": "1901172841c3986900633b4d216926f200fa35e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MDExNzI4NDFjMzk4NjkwMDYzM2I0ZDIxNjkyNmYyMDBmYTM1ZTU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-13T19:49:04Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-13T19:49:04Z"}, "message": "Prevent aliases from being renamed for now", "tree": {"sha": "05166b750ccc5329b18e2b2e7ff4f171bc044aae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05166b750ccc5329b18e2b2e7ff4f171bc044aae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1901172841c3986900633b4d216926f200fa35e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1901172841c3986900633b4d216926f200fa35e5", "html_url": "https://github.com/rust-lang/rust/commit/1901172841c3986900633b4d216926f200fa35e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1901172841c3986900633b4d216926f200fa35e5/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "205e72f34d26898779c8ab11c8500e74fd8ce28b", "url": "https://api.github.com/repos/rust-lang/rust/commits/205e72f34d26898779c8ab11c8500e74fd8ce28b", "html_url": "https://github.com/rust-lang/rust/commit/205e72f34d26898779c8ab11c8500e74fd8ce28b"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "0e79fbe477beec2ce1435be3a96a7c67bf56d383", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1901172841c3986900633b4d216926f200fa35e5/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1901172841c3986900633b4d216926f200fa35e5/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=1901172841c3986900633b4d216926f200fa35e5", "patch": "@@ -75,8 +75,7 @@ pub(crate) fn rename_with_semantics(\n     let source_file = sema.parse(position.file_id);\n     let syntax = source_file.syntax();\n \n-    let def = find_definition(sema, syntax, position)\n-        .ok_or_else(|| format_err!(\"No references found at position\"))?;\n+    let def = find_definition(sema, syntax, position)?;\n     match def {\n         Definition::ModuleDef(ModuleDef::Module(module)) => rename_mod(&sema, module, new_name),\n         def => rename_reference(sema, def, new_name),\n@@ -149,18 +148,30 @@ fn find_definition(\n     sema: &Semantics<RootDatabase>,\n     syntax: &SyntaxNode,\n     position: FilePosition,\n-) -> Option<Definition> {\n-    let def = match find_name_like(sema, syntax, position)? {\n-        NameLike::Name(name) => NameClass::classify(sema, &name)?.referenced_or_defined(sema.db),\n-        NameLike::NameRef(name_ref) => NameRefClass::classify(sema, &name_ref)?.referenced(sema.db),\n+) -> RenameResult<Definition> {\n+    match find_name_like(sema, syntax, position)\n+        .ok_or_else(|| format_err!(\"No references found at position\"))?\n+    {\n+        // renaming aliases would rename the item being aliased as the HIR doesn't track aliases yet\n+        NameLike::Name(name)\n+            if name.syntax().parent().map_or(false, |it| ast::Rename::can_cast(it.kind())) =>\n+        {\n+            bail!(\"Renaming aliases is currently unsupported\")\n+        }\n+        NameLike::Name(name) => {\n+            NameClass::classify(sema, &name).map(|class| class.referenced_or_defined(sema.db))\n+        }\n+        NameLike::NameRef(name_ref) => {\n+            NameRefClass::classify(sema, &name_ref).map(|class| class.referenced(sema.db))\n+        }\n         NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, &lifetime)\n             .map(|class| NameRefClass::referenced(class, sema.db))\n             .or_else(|| {\n                 NameClass::classify_lifetime(sema, &lifetime)\n                     .map(|it| it.referenced_or_defined(sema.db))\n-            })?,\n-    };\n-    Some(def)\n+            }),\n+    }\n+    .ok_or_else(|| format_err!(\"No references found at position\"))\n }\n \n fn source_edit_from_references(\n@@ -172,10 +183,10 @@ fn source_edit_from_references(\n ) -> (FileId, TextEdit) {\n     let mut edit = TextEdit::builder();\n     for reference in references {\n-        let (range, replacement) = match &reference.name {\n-            NameLike::Name(_) => (None, format!(\"{}\", new_name)),\n-            NameLike::NameRef(name_ref) => source_edit_from_name_ref(name_ref, new_name, def),\n-            NameLike::Lifetime(_) => (None, format!(\"{}\", new_name)),\n+        let (range, replacement) = if let Some(name_ref) = reference.name.as_name_ref() {\n+            source_edit_from_name_ref(name_ref, new_name, def)\n+        } else {\n+            (None, new_name.to_owned())\n         };\n         // FIXME: Some(range) will be incorrect when we are inside macros\n         edit.replace(range.unwrap_or(reference.range), replacement);"}]}