{"sha": "c17a1fd7d0ef0f1f546445d0c8bdb11be55e4be7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxN2ExZmQ3ZDBlZjBmMWY1NDY0NDVkMGM4YmRiMTFiZTU1ZTRiZTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-21T16:05:26Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-23T22:32:03Z"}, "message": "pre-expansion gate associated_type_bounds", "tree": {"sha": "cfb224137c513499e9dfc7dd49e3005b4ad6e47d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfb224137c513499e9dfc7dd49e3005b4ad6e47d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c17a1fd7d0ef0f1f546445d0c8bdb11be55e4be7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c17a1fd7d0ef0f1f546445d0c8bdb11be55e4be7", "html_url": "https://github.com/rust-lang/rust/commit/c17a1fd7d0ef0f1f546445d0c8bdb11be55e4be7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c17a1fd7d0ef0f1f546445d0c8bdb11be55e4be7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d182b82ce5ecfe8090ba3d4e78f1cd72c072ef1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d182b82ce5ecfe8090ba3d4e78f1cd72c072ef1", "html_url": "https://github.com/rust-lang/rust/commit/2d182b82ce5ecfe8090ba3d4e78f1cd72c072ef1"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "43a3f45bb06a944434587303f2aaa95e93d9e45b", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c17a1fd7d0ef0f1f546445d0c8bdb11be55e4be7/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17a1fd7d0ef0f1f546445d0c8bdb11be55e4be7/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=c17a1fd7d0ef0f1f546445d0c8bdb11be55e4be7", "patch": "@@ -3,10 +3,7 @@ use super::accepted::ACCEPTED_FEATURES;\n use super::removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n use super::builtin_attrs::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n \n-use crate::ast::{\n-    self, AssocTyConstraint, AssocTyConstraintKind, NodeId, GenericParam, GenericParamKind,\n-    PatKind, RangeEnd, VariantData,\n-};\n+use crate::ast::{self, NodeId, GenericParam, GenericParamKind, PatKind, RangeEnd, VariantData};\n use crate::attr::{self, check_builtin_attribute};\n use crate::source_map::Spanned;\n use crate::edition::{ALL_EDITIONS, Edition};\n@@ -584,16 +581,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_generic_param(self, param)\n     }\n \n-    fn visit_assoc_ty_constraint(&mut self, constraint: &'a AssocTyConstraint) {\n-        match constraint.kind {\n-            AssocTyConstraintKind::Bound { .. } =>\n-                gate_feature_post!(&self, associated_type_bounds, constraint.span,\n-                    \"associated type bounds are unstable\"),\n-            _ => {}\n-        }\n-        visit::walk_assoc_ty_constraint(self, constraint)\n-    }\n-\n     fn visit_trait_item(&mut self, ti: &'a ast::TraitItem) {\n         match ti.kind {\n             ast::TraitItemKind::Method(ref sig, ref block) => {\n@@ -859,6 +846,7 @@ pub fn check_crate(krate: &ast::Crate,\n     gate_all!(or_patterns, \"or-patterns syntax is experimental\");\n     gate_all!(const_extern_fn, \"`const extern fn` definitions are unstable\");\n     gate_all!(trait_alias, \"trait aliases are experimental\");\n+    gate_all!(associated_type_bounds, \"associated type bounds are unstable\");\n \n     visit::walk_crate(&mut visitor, krate);\n }"}, {"sha": "77709a2295339fb5ac5765852f451004090fac45", "filename": "src/libsyntax/parse/parser/path.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c17a1fd7d0ef0f1f546445d0c8bdb11be55e4be7/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17a1fd7d0ef0f1f546445d0c8bdb11be55e4be7/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs?ref=c17a1fd7d0ef0f1f546445d0c8bdb11be55e4be7", "patch": "@@ -404,8 +404,9 @@ impl<'a> Parser<'a> {\n                 // Parse lifetime argument.\n                 args.push(GenericArg::Lifetime(self.expect_lifetime()));\n                 misplaced_assoc_ty_constraints.append(&mut assoc_ty_constraints);\n-            } else if self.check_ident() && self.look_ahead(1,\n-                    |t| t == &token::Eq || t == &token::Colon) {\n+            } else if self.check_ident()\n+                && self.look_ahead(1, |t| t == &token::Eq || t == &token::Colon)\n+            {\n                 // Parse associated type constraint.\n                 let lo = self.token.span;\n                 let ident = self.parse_ident()?;\n@@ -420,7 +421,14 @@ impl<'a> Parser<'a> {\n                 } else {\n                     unreachable!();\n                 };\n+\n                 let span = lo.to(self.prev_span);\n+\n+                // Gate associated type bounds, e.g., `Iterator<Item: Ord>`.\n+                if let AssocTyConstraintKind::Bound { .. } = kind {\n+                    self.sess.gated_spans.associated_type_bounds.borrow_mut().push(span);\n+                }\n+\n                 constraints.push(AssocTyConstraint {\n                     id: ast::DUMMY_NODE_ID,\n                     ident,"}, {"sha": "13f89c3720bb5fe95f65d2281fba09fb193ff3e8", "filename": "src/libsyntax/sess.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c17a1fd7d0ef0f1f546445d0c8bdb11be55e4be7/src%2Flibsyntax%2Fsess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17a1fd7d0ef0f1f546445d0c8bdb11be55e4be7/src%2Flibsyntax%2Fsess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsess.rs?ref=c17a1fd7d0ef0f1f546445d0c8bdb11be55e4be7", "patch": "@@ -32,6 +32,8 @@ crate struct GatedSpans {\n     crate const_extern_fn: Lock<Vec<Span>>,\n     /// Spans collected for gating `trait_alias`, e.g. `trait Foo = Ord + Eq;`.\n     pub trait_alias: Lock<Vec<Span>>,\n+    /// Spans collected for gating `associated_type_bounds`, e.g. `Iterator<Item: Ord>`.\n+    pub associated_type_bounds: Lock<Vec<Span>>,\n }\n \n /// Info about a parsing session."}, {"sha": "00737d8428b3da9c87be6e03aff4de9f15f6074b", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c17a1fd7d0ef0f1f546445d0c8bdb11be55e4be7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17a1fd7d0ef0f1f546445d0c8bdb11be55e4be7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs?ref=c17a1fd7d0ef0f1f546445d0c8bdb11be55e4be7", "patch": "@@ -70,3 +70,7 @@ fn main() {\n     // FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\n     // let _: &dyn Tr1<As1: Copy> = &S1;\n }\n+\n+macro_rules! accept_path { ($p:path) => {} }\n+accept_path!(Iterator<Item: Ord>);\n+//~^ ERROR associated type bounds are unstable"}, {"sha": "a7ab7614d7b78c646dfc42c044f8e971baef3689", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c17a1fd7d0ef0f1f546445d0c8bdb11be55e4be7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c17a1fd7d0ef0f1f546445d0c8bdb11be55e4be7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=c17a1fd7d0ef0f1f546445d0c8bdb11be55e4be7", "patch": "@@ -115,6 +115,15 @@ LL |     let _: impl Tr1<As1: Copy> = S1;\n    = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n+error[E0658]: associated type bounds are unstable\n+  --> $DIR/feature-gate-associated_type_bounds.rs:75:23\n+   |\n+LL | accept_path!(Iterator<Item: Ord>);\n+   |                       ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n+   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n+\n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/feature-gate-associated_type_bounds.rs:54:14\n    |\n@@ -139,7 +148,7 @@ LL |     let _: impl Tr1<As1: Copy> = S1;\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 17 previous errors\n \n Some errors have detailed explanations: E0562, E0658.\n For more information about an error, try `rustc --explain E0562`."}]}