{"sha": "ab6fb9d2aa440a48723d311bcd065be9552a27f0", "node_id": "C_kwDOAAsO6NoAKGFiNmZiOWQyYWE0NDBhNDg3MjNkMzExYmNkMDY1YmU5NTUyYTI3ZjA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-14T10:03:08Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-20T15:54:35Z"}, "message": "Allow tests to have dependencies", "tree": {"sha": "351377cd6d5bd76f4d258ef16ecdec8dc3889490", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/351377cd6d5bd76f4d258ef16ecdec8dc3889490"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab6fb9d2aa440a48723d311bcd065be9552a27f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab6fb9d2aa440a48723d311bcd065be9552a27f0", "html_url": "https://github.com/rust-lang/rust/commit/ab6fb9d2aa440a48723d311bcd065be9552a27f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab6fb9d2aa440a48723d311bcd065be9552a27f0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5e199f4416718f00cbf01f7c7ee6b774025a7a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e199f4416718f00cbf01f7c7ee6b774025a7a8", "html_url": "https://github.com/rust-lang/rust/commit/d5e199f4416718f00cbf01f7c7ee6b774025a7a8"}], "stats": {"total": 957, "additions": 792, "deletions": 165}, "files": [{"sha": "f660ed77620a13e1c84199311b05f4446ab5621f", "filename": "Cargo.lock", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -73,6 +73,37 @@ version = \"1.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n \n+[[package]]\n+name = \"camino\"\n+version = \"1.0.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"869119e97797867fd90f5e22af7d0bd274bd4635ebb9eb68c04f3f513ae6c412\"\n+dependencies = [\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"cargo-platform\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cbdb825da8a5df079a43676dbe042702f1707b1109f713a01420fbb4cc71fa27\"\n+dependencies = [\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"cargo_metadata\"\n+version = \"0.15.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3abb7553d5b9b8421c6de7cb02606ff15e0c6eea7d8eadd75ef013fd636bec36\"\n+dependencies = [\n+ \"camino\",\n+ \"cargo-platform\",\n+ \"semver\",\n+ \"serde\",\n+ \"serde_json\",\n+]\n+\n [[package]]\n name = \"cc\"\n version = \"1.0.73\"\n@@ -596,6 +627,9 @@ name = \"semver\"\n version = \"1.0.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"8cb243bdfdb5936c8dc3c45762a19d12ab4550cdc753bc247637d4ec35a040fd\"\n+dependencies = [\n+ \"serde\",\n+]\n \n [[package]]\n name = \"serde\"\n@@ -724,6 +758,7 @@ dependencies = [\n name = \"ui_test\"\n version = \"0.1.0\"\n dependencies = [\n+ \"cargo_metadata\",\n  \"color-eyre\",\n  \"colored\",\n  \"crossbeam\","}, {"sha": "6e140ab7143d400326ea837dcc7367aacd40f95c", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 50, "deletions": 12, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -3,6 +3,7 @@\n \n mod version;\n \n+use std::collections::HashMap;\n use std::env;\n use std::ffi::{OsStr, OsString};\n use std::fmt::Write as _;\n@@ -114,10 +115,14 @@ fn show_error(msg: String) -> ! {\n     std::process::exit(1)\n }\n \n-// Determines whether a `--flag` is present.\n+/// Determines whether a `--flag` is present.\n fn has_arg_flag(name: &str) -> bool {\n-    let mut args = std::env::args().take_while(|val| val != \"--\");\n-    args.any(|val| val == name)\n+    num_arg_flag(name) > 0\n+}\n+\n+/// Determines how many times a `--flag` is present.\n+fn num_arg_flag(name: &str) -> usize {\n+    std::env::args().take_while(|val| val != \"--\").filter(|val| val == name).count()\n }\n \n /// Yields all values of command line flag `name` as `Ok(arg)`, and all other arguments except\n@@ -588,7 +593,7 @@ fn phase_cargo_miri(mut args: env::Args) {\n                 \"`cargo miri` supports the following subcommands: `run`, `test`, and `setup`.\"\n             )),\n     };\n-    let verbose = has_arg_flag(\"-v\");\n+    let verbose = num_arg_flag(\"-v\");\n \n     // We always setup.\n     setup(&subcommand);\n@@ -685,15 +690,15 @@ fn phase_cargo_miri(mut args: env::Args) {\n     cmd.env(\"MIRI_LOCAL_CRATES\", local_crates(&metadata));\n \n     // Run cargo.\n-    if verbose {\n+    if verbose > 0 {\n         eprintln!(\"[cargo-miri miri] RUSTC_WRAPPER={:?}\", cargo_miri_path);\n         eprintln!(\"[cargo-miri miri] {}={:?}\", target_runner_env_name, cargo_miri_path);\n         if *target != host {\n             eprintln!(\"[cargo-miri miri] {}={:?}\", host_runner_env_name, cargo_miri_path);\n         }\n         eprintln!(\"[cargo-miri miri] RUSTDOC={:?}\", cargo_miri_path);\n         eprintln!(\"[cargo-miri miri] {:?}\", cmd);\n-        cmd.env(\"MIRI_VERBOSE\", \"\"); // This makes the other phases verbose.\n+        cmd.env(\"MIRI_VERBOSE\", verbose.to_string()); // This makes the other phases verbose.\n     }\n     exec(cmd)\n }\n@@ -752,7 +757,8 @@ fn phase_rustc(mut args: env::Args, phase: RustcPhase) {\n         }\n     }\n \n-    let verbose = std::env::var_os(\"MIRI_VERBOSE\").is_some();\n+    let verbose = std::env::var(\"MIRI_VERBOSE\")\n+        .map_or(0, |verbose| verbose.parse().expect(\"verbosity flag must be an integer\"));\n     let target_crate = is_target_crate();\n     let print = get_arg_flag_value(\"--print\").is_some() || has_arg_flag(\"-vV\"); // whether this is cargo/xargo invoking rustc to get some infos\n \n@@ -761,13 +767,13 @@ fn phase_rustc(mut args: env::Args, phase: RustcPhase) {\n         // https://github.com/rust-lang/miri/issues/1724#issuecomment-787115693\n         // As we store a JSON file instead of building the crate here, an empty file is fine.\n         let dep_info_name = out_filename(\"\", \".d\");\n-        if verbose {\n+        if verbose > 0 {\n             eprintln!(\"[cargo-miri rustc] writing stub dep-info to `{}`\", dep_info_name.display());\n         }\n         File::create(dep_info_name).expect(\"failed to create fake .d file\");\n \n         let filename = out_filename(\"\", \"\");\n-        if verbose {\n+        if verbose > 0 {\n             eprintln!(\"[cargo-miri rustc] writing run info to `{}`\", filename.display());\n         }\n         info.store(&filename);\n@@ -810,7 +816,7 @@ fn phase_rustc(mut args: env::Args, phase: RustcPhase) {\n             cmd.args(&env.args);\n             cmd.env(\"MIRI_BE_RUSTC\", \"target\");\n \n-            if verbose {\n+            if verbose > 0 {\n                 eprintln!(\n                     \"[cargo-miri rustc] captured input:\\n{}\",\n                     std::str::from_utf8(&env.stdin).unwrap()\n@@ -877,6 +883,15 @@ fn phase_rustc(mut args: env::Args, phase: RustcPhase) {\n             cmd.arg(\"-C\").arg(\"panic=abort\");\n         }\n     } else {\n+        // For host crates (but not when we are printing), we might still have to set the sysroot.\n+        if !print {\n+            // When we're running `cargo-miri` from `x.py` we need to pass the sysroot explicitly as rustc\n+            // can't figure out the sysroot on its own unless it's from rustup.\n+            if let Some(sysroot) = std::env::var_os(\"SYSROOT\") {\n+                cmd.arg(\"--sysroot\").arg(sysroot);\n+            }\n+        }\n+\n         // For host crates or when we are printing, just forward everything.\n         cmd.args(args);\n     }\n@@ -888,8 +903,14 @@ fn phase_rustc(mut args: env::Args, phase: RustcPhase) {\n     cmd.env(\"MIRI_BE_RUSTC\", if target_crate { \"target\" } else { \"host\" });\n \n     // Run it.\n-    if verbose {\n-        eprintln!(\"[cargo-miri rustc] {:?}\", cmd);\n+    if verbose > 0 {\n+        eprint!(\"[cargo-miri rustc] \");\n+        if verbose > 1 {\n+            for (key, value) in env_vars_from_cmd(&cmd) {\n+                eprintln!(\"{key}={value:?} \\\\\");\n+            }\n+        }\n+        eprintln!(\"{:?}\", cmd);\n     }\n     exec(cmd);\n \n@@ -908,6 +929,23 @@ fn phase_rustc(mut args: env::Args, phase: RustcPhase) {\n     }\n }\n \n+fn env_vars_from_cmd(cmd: &Command) -> Vec<(String, String)> {\n+    let mut envs = HashMap::new();\n+    for (key, value) in std::env::vars() {\n+        envs.insert(key, value);\n+    }\n+    for (key, value) in cmd.get_envs() {\n+        if let Some(value) = value {\n+            envs.insert(key.to_str().unwrap().into(), value.to_str().unwrap().to_owned());\n+        } else {\n+            envs.remove(key.to_str().unwrap());\n+        }\n+    }\n+    let mut envs: Vec<_> = envs.into_iter().collect();\n+    envs.sort();\n+    envs\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq)]\n enum RunnerPhase {\n     /// `cargo` is running a binary"}, {"sha": "4cf58d723a2560c4e49d43202ceebb140dd13806", "filename": "test-cargo-miri/Cargo.lock", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/test-cargo-miri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/test-cargo-miri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2FCargo.lock?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -15,8 +15,6 @@ dependencies = [\n  \"byteorder\",\n  \"cdylib\",\n  \"exported_symbol\",\n- \"getrandom 0.1.16\",\n- \"getrandom 0.2.7\",\n  \"issue_1567\",\n  \"issue_1691\",\n  \"issue_1705\",\n@@ -51,17 +49,6 @@ dependencies = [\n name = \"exported_symbol_dep\"\n version = \"0.1.0\"\n \n-[[package]]\n-name = \"getrandom\"\n-version = \"0.1.16\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8fc3cb4d91f53b50155bdcfd23f6a4c39ae1969c2ae85982b135750cccaf5fce\"\n-dependencies = [\n- \"cfg-if\",\n- \"libc\",\n- \"wasi 0.9.0+wasi-snapshot-preview1\",\n-]\n-\n [[package]]\n name = \"getrandom\"\n version = \"0.2.7\"\n@@ -70,7 +57,7 @@ checksum = \"4eb1a864a501629691edf6c15a593b7a51eebaa1e8468e9ddc623de7c9b58ec6\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\",\n- \"wasi 0.11.0+wasi-snapshot-preview1\",\n+ \"wasi\",\n ]\n \n [[package]]\n@@ -185,7 +172,7 @@ version = \"0.6.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"d34f1408f55294453790c48b2f1ebbb1c5b4b7563eb1f418bcfcfdbb06ebb4e7\"\n dependencies = [\n- \"getrandom 0.2.7\",\n+ \"getrandom\",\n ]\n \n [[package]]\n@@ -223,12 +210,6 @@ version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"5bd2fe26506023ed7b5e1e315add59d6f584c621d037f9368fea9cfb988f368c\"\n \n-[[package]]\n-name = \"wasi\"\n-version = \"0.9.0+wasi-snapshot-preview1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n-\n [[package]]\n name = \"wasi\"\n version = \"0.11.0+wasi-snapshot-preview1\""}, {"sha": "89a8463e4b3255aea3bae0a0351175f5fc64fbda", "filename": "test-cargo-miri/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/test-cargo-miri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/test-cargo-miri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2FCargo.toml?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -19,8 +19,6 @@ issue_rust_86261 = { path = \"issue-rust-86261\" }\n \n [dev-dependencies]\n rand = { version = \"0.8\", features = [\"small_rng\"] }\n-getrandom_1 = { package = \"getrandom\", version = \"0.1\" }\n-getrandom_2 = { package = \"getrandom\", version = \"0.2\" }\n serde_derive = \"1.0\" # not actually used, but exercises some unique code path (`--extern` .so file)\n page_size = \"0.4.1\"\n "}, {"sha": "bc0046ffb148dc814cba33f89a4465ca4daace10", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -5,7 +5,7 @@\n and the working directory to contain the cargo-miri-test project.\n '''\n \n-import sys, subprocess, os, re\n+import sys, subprocess, os, re, difflib\n \n CGREEN  = '\\33[32m'\n CBOLD   = '\\33[1m'\n@@ -27,6 +27,17 @@ def normalize_stdout(str):\n     str = str.replace(\"src\\\\\", \"src/\") # normalize paths across platforms\n     return re.sub(\"finished in \\d+\\.\\d\\ds\", \"finished in $TIME\", str)\n \n+def check_output(actual, path, name):\n+    expected = open(path).read()\n+    if expected == actual:\n+        return True\n+    print(f\"{path} did not match reference!\")\n+    print(f\"--- BEGIN diff {name} ---\")\n+    for text in difflib.unified_diff(expected.split(\"\\n\"), actual.split(\"\\n\")):\n+        print(text)\n+    print(f\"--- END diff {name} ---\")\n+    return False\n+\n def test(name, cmd, stdout_ref, stderr_ref, stdin=b'', env={}):\n     print(\"Testing {}...\".format(name))\n     ## Call `cargo miri`, capture all output\n@@ -42,17 +53,14 @@ def test(name, cmd, stdout_ref, stderr_ref, stdin=b'', env={}):\n     (stdout, stderr) = p.communicate(input=stdin)\n     stdout = stdout.decode(\"UTF-8\")\n     stderr = stderr.decode(\"UTF-8\")\n-    if p.returncode == 0 and normalize_stdout(stdout) == open(stdout_ref).read() and stderr == open(stderr_ref).read():\n+    stdout = normalize_stdout(stdout)\n+\n+    stdout_matches = check_output(stdout, stdout_ref, \"stdout\")\n+    stderr_matches = check_output(stderr, stderr_ref, \"stderr\")\n+    \n+    if p.returncode == 0 and stdout_matches and stderr_matches:\n         # All good!\n         return\n-    # Show output\n-    print(\"Test stdout or stderr did not match reference!\")\n-    print(\"--- BEGIN test stdout ---\")\n-    print(stdout, end=\"\")\n-    print(\"--- END test stdout ---\")\n-    print(\"--- BEGIN test stderr ---\")\n-    print(stderr, end=\"\")\n-    print(\"--- END test stderr ---\")\n     fail(\"exit code was {}\".format(p.returncode))\n \n def test_no_rebuild(name, cmd, env={}):"}, {"sha": "eb31058e1c19b833f6060d85f3682bb12088eac3", "filename": "test-cargo-miri/tests/test.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/test-cargo-miri%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/test-cargo-miri%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftests%2Ftest.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -20,15 +20,9 @@ fn does_not_work_on_miri() {\n     assert!(&x as *const _ as usize % 4 < 4);\n }\n \n-// We also use this to test some external crates, that we cannot depend on in the compiletest suite.\n-\n+// Make sure integration tests can access dev-dependencies\n #[test]\n fn entropy_rng() {\n-    // Test `getrandom` directly (in multiple different versions).\n-    let mut data = vec![0; 16];\n-    getrandom_1::getrandom(&mut data).unwrap();\n-    getrandom_2::getrandom(&mut data).unwrap();\n-\n     // Try seeding with \"real\" entropy.\n     let mut rng = SmallRng::from_entropy();\n     let _val = rng.gen::<i32>();"}, {"sha": "6b5e8c942244f9818a9eb788d79917f907e1544f", "filename": "test_dependencies/Cargo.lock", "status": "added", "additions": 376, "deletions": 0, "changes": 376, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/test_dependencies%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/test_dependencies%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test_dependencies%2FCargo.lock?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -0,0 +1,376 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 3\n+\n+[[package]]\n+name = \"autocfg\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n+\n+[[package]]\n+name = \"bitflags\"\n+version = \"1.3.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n+\n+[[package]]\n+name = \"bytes\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c4872d67bab6358e59559027aa3b9157c53d9358c51423c17554809a8858e0f8\"\n+\n+[[package]]\n+name = \"cfg-if\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n+\n+[[package]]\n+name = \"getrandom\"\n+version = \"0.1.16\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8fc3cb4d91f53b50155bdcfd23f6a4c39ae1969c2ae85982b135750cccaf5fce\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"libc\",\n+ \"wasi 0.9.0+wasi-snapshot-preview1\",\n+]\n+\n+[[package]]\n+name = \"getrandom\"\n+version = \"0.2.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4eb1a864a501629691edf6c15a593b7a51eebaa1e8468e9ddc623de7c9b58ec6\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"libc\",\n+ \"wasi 0.11.0+wasi-snapshot-preview1\",\n+]\n+\n+[[package]]\n+name = \"hermit-abi\"\n+version = \"0.1.19\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33\"\n+dependencies = [\n+ \"libc\",\n+]\n+\n+[[package]]\n+name = \"libc\"\n+version = \"0.2.126\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"349d5a591cd28b49e1d1037471617a32ddcda5731b99419008085f72d5a53836\"\n+\n+[[package]]\n+name = \"lock_api\"\n+version = \"0.4.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"327fa5b6a6940e4699ec49a9beae1ea4845c6bab9314e4f84ac68742139d8c53\"\n+dependencies = [\n+ \"autocfg\",\n+ \"scopeguard\",\n+]\n+\n+[[package]]\n+name = \"log\"\n+version = \"0.4.17\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"abb12e687cfb44aa40f41fc3978ef76448f9b6038cad6aef4259d3c095a2382e\"\n+dependencies = [\n+ \"cfg-if\",\n+]\n+\n+[[package]]\n+name = \"memchr\"\n+version = \"2.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d\"\n+\n+[[package]]\n+name = \"mio\"\n+version = \"0.8.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"57ee1c23c7c63b0c9250c339ffdc69255f110b298b901b9f6c82547b7b87caaf\"\n+dependencies = [\n+ \"libc\",\n+ \"log\",\n+ \"wasi 0.11.0+wasi-snapshot-preview1\",\n+ \"windows-sys\",\n+]\n+\n+[[package]]\n+name = \"miri-test-deps\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"getrandom 0.1.16\",\n+ \"getrandom 0.2.7\",\n+ \"libc\",\n+ \"rand\",\n+ \"tokio\",\n+]\n+\n+[[package]]\n+name = \"num_cpus\"\n+version = \"1.13.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"19e64526ebdee182341572e50e9ad03965aa510cd94427a4549448f285e957a1\"\n+dependencies = [\n+ \"hermit-abi\",\n+ \"libc\",\n+]\n+\n+[[package]]\n+name = \"once_cell\"\n+version = \"1.13.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"18a6dbe30758c9f83eb00cbea4ac95966305f5a7772f3f42ebfc7fc7eddbd8e1\"\n+\n+[[package]]\n+name = \"parking_lot\"\n+version = \"0.12.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3742b2c103b9f06bc9fff0a37ff4912935851bee6d36f3c02bcc755bcfec228f\"\n+dependencies = [\n+ \"lock_api\",\n+ \"parking_lot_core\",\n+]\n+\n+[[package]]\n+name = \"parking_lot_core\"\n+version = \"0.9.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"09a279cbf25cb0757810394fbc1e359949b59e348145c643a939a525692e6929\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"libc\",\n+ \"redox_syscall\",\n+ \"smallvec\",\n+ \"windows-sys\",\n+]\n+\n+[[package]]\n+name = \"pin-project-lite\"\n+version = \"0.2.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e0a7ae3ac2f1173085d398531c705756c94a4c56843785df85a60c1a0afac116\"\n+\n+[[package]]\n+name = \"ppv-lite86\"\n+version = \"0.2.16\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"eb9f9e6e233e5c4a35559a617bf40a4ec447db2e84c20b55a6f83167b7e57872\"\n+\n+[[package]]\n+name = \"proc-macro2\"\n+version = \"1.0.40\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"dd96a1e8ed2596c337f8eae5f24924ec83f5ad5ab21ea8e455d3566c69fbcaf7\"\n+dependencies = [\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"quote\"\n+version = \"1.0.20\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3bcdf212e9776fbcb2d23ab029360416bb1706b1aea2d1a5ba002727cbcab804\"\n+dependencies = [\n+ \"proc-macro2\",\n+]\n+\n+[[package]]\n+name = \"rand\"\n+version = \"0.8.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\n+dependencies = [\n+ \"libc\",\n+ \"rand_chacha\",\n+ \"rand_core\",\n+]\n+\n+[[package]]\n+name = \"rand_chacha\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\n+dependencies = [\n+ \"ppv-lite86\",\n+ \"rand_core\",\n+]\n+\n+[[package]]\n+name = \"rand_core\"\n+version = \"0.6.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d34f1408f55294453790c48b2f1ebbb1c5b4b7563eb1f418bcfcfdbb06ebb4e7\"\n+dependencies = [\n+ \"getrandom 0.2.7\",\n+]\n+\n+[[package]]\n+name = \"redox_syscall\"\n+version = \"0.2.13\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"62f25bc4c7e55e0b0b7a1d43fb893f4fa1361d0abe38b9ce4f323c2adfe6ef42\"\n+dependencies = [\n+ \"bitflags\",\n+]\n+\n+[[package]]\n+name = \"scopeguard\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n+\n+[[package]]\n+name = \"signal-hook-registry\"\n+version = \"1.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e51e73328dc4ac0c7ccbda3a494dfa03df1de2f46018127f60c693f2648455b0\"\n+dependencies = [\n+ \"libc\",\n+]\n+\n+[[package]]\n+name = \"smallvec\"\n+version = \"1.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2fd0db749597d91ff862fd1d55ea87f7855a744a8425a64695b6fca237d1dad1\"\n+\n+[[package]]\n+name = \"socket2\"\n+version = \"0.4.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"66d72b759436ae32898a2af0a14218dbf55efde3feeb170eb623637db85ee1e0\"\n+dependencies = [\n+ \"libc\",\n+ \"winapi\",\n+]\n+\n+[[package]]\n+name = \"syn\"\n+version = \"1.0.98\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c50aef8a904de4c23c788f104b7dddc7d6f79c647c7c8ce4cc8f73eb0ca773dd\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"tokio\"\n+version = \"1.19.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c51a52ed6686dd62c320f9b89299e9dfb46f730c7a48e635c19f21d116cb1439\"\n+dependencies = [\n+ \"bytes\",\n+ \"libc\",\n+ \"memchr\",\n+ \"mio\",\n+ \"num_cpus\",\n+ \"once_cell\",\n+ \"parking_lot\",\n+ \"pin-project-lite\",\n+ \"signal-hook-registry\",\n+ \"socket2\",\n+ \"tokio-macros\",\n+ \"winapi\",\n+]\n+\n+[[package]]\n+name = \"tokio-macros\"\n+version = \"1.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9724f9a975fb987ef7a3cd9be0350edcbe130698af5b8f7a631e23d42d052484\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"unicode-ident\"\n+version = \"1.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5bd2fe26506023ed7b5e1e315add59d6f584c621d037f9368fea9cfb988f368c\"\n+\n+[[package]]\n+name = \"wasi\"\n+version = \"0.9.0+wasi-snapshot-preview1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n+\n+[[package]]\n+name = \"wasi\"\n+version = \"0.11.0+wasi-snapshot-preview1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n+\n+[[package]]\n+name = \"winapi\"\n+version = \"0.3.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\n+dependencies = [\n+ \"winapi-i686-pc-windows-gnu\",\n+ \"winapi-x86_64-pc-windows-gnu\",\n+]\n+\n+[[package]]\n+name = \"winapi-i686-pc-windows-gnu\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n+\n+[[package]]\n+name = \"winapi-x86_64-pc-windows-gnu\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n+\n+[[package]]\n+name = \"windows-sys\"\n+version = \"0.36.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ea04155a16a59f9eab786fe12a4a450e75cdb175f9e0d80da1e17db09f55b8d2\"\n+dependencies = [\n+ \"windows_aarch64_msvc\",\n+ \"windows_i686_gnu\",\n+ \"windows_i686_msvc\",\n+ \"windows_x86_64_gnu\",\n+ \"windows_x86_64_msvc\",\n+]\n+\n+[[package]]\n+name = \"windows_aarch64_msvc\"\n+version = \"0.36.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9bb8c3fd39ade2d67e9874ac4f3db21f0d710bee00fe7cab16949ec184eeaa47\"\n+\n+[[package]]\n+name = \"windows_i686_gnu\"\n+version = \"0.36.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"180e6ccf01daf4c426b846dfc66db1fc518f074baa793aa7d9b9aaeffad6a3b6\"\n+\n+[[package]]\n+name = \"windows_i686_msvc\"\n+version = \"0.36.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e2e7917148b2812d1eeafaeb22a97e4813dfa60a3f8f78ebe204bcc88f12f024\"\n+\n+[[package]]\n+name = \"windows_x86_64_gnu\"\n+version = \"0.36.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4dcd171b8776c41b97521e5da127a2d86ad280114807d0b2ab1e462bc764d9e1\"\n+\n+[[package]]\n+name = \"windows_x86_64_msvc\"\n+version = \"0.36.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c811ca4a8c853ef420abd8592ba53ddbbac90410fab6903b3e79972a631f7680\""}, {"sha": "edaa6a6926030f128df0fed2edefff79418b3283", "filename": "test_dependencies/Cargo.toml", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/test_dependencies%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/test_dependencies%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test_dependencies%2FCargo.toml?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -0,0 +1,19 @@\n+[package]\n+authors = [\"Miri Team\"]\n+description = \"dependencies that unit tests can have\"\n+license = \"MIT OR Apache-2.0\"\n+name = \"miri-test-deps\"\n+repository = \"https://github.com/rust-lang/miri\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+\n+[dependencies]\n+# all dependencies (and their transitive ones) listed here can be used in `tests/`.\n+tokio = { version = \"1.0\", features = [\"full\"] }\n+libc = \"0.2\"\n+\n+getrandom_1 = { package = \"getrandom\", version = \"0.1\" }\n+getrandom_2 = { package = \"getrandom\", version = \"0.2\" }\n+rand = { version = \"0.8\", features = [\"small_rng\"] }\n+\n+[workspace]"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "test_dependencies/src/main.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/test_dependencies%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/test_dependencies%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test_dependencies%2Fsrc%2Fmain.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -0,0 +1 @@\n+fn main() {}"}, {"sha": "37b9de7327a296d7f9d0642c8534fb5f914cea8f", "filename": "tests/compiletest.rs", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -1,8 +1,8 @@\n use colored::*;\n use regex::Regex;\n-use std::env;\n-use std::path::PathBuf;\n-use ui_test::{color_eyre::Result, Config, Mode, OutputConflictHandling};\n+use std::path::{Path, PathBuf};\n+use std::{env, ffi::OsString};\n+use ui_test::{color_eyre::Result, Config, DependencyBuilder, Mode, OutputConflictHandling};\n \n fn miri_path() -> PathBuf {\n     PathBuf::from(option_env!(\"MIRI\").unwrap_or(env!(\"CARGO_BIN_EXE_miri\")))\n@@ -12,31 +12,31 @@ fn run_tests(mode: Mode, path: &str, target: Option<String>) -> Result<()> {\n     let in_rustc_test_suite = option_env!(\"RUSTC_STAGE\").is_some();\n \n     // Add some flags we always want.\n-    let mut flags = Vec::new();\n-    flags.push(\"--edition\".to_owned());\n-    flags.push(\"2018\".to_owned());\n+    let mut flags: Vec<OsString> = Vec::new();\n+    flags.push(\"--edition\".into());\n+    flags.push(\"2018\".into());\n     if in_rustc_test_suite {\n         // Less aggressive warnings to make the rustc toolstate management less painful.\n         // (We often get warnings when e.g. a feature gets stabilized or some lint gets added/improved.)\n-        flags.push(\"-Astable-features\".to_owned());\n-        flags.push(\"-Aunused\".to_owned());\n+        flags.push(\"-Astable-features\".into());\n+        flags.push(\"-Aunused\".into());\n     } else {\n-        flags.push(\"-Dwarnings\".to_owned());\n-        flags.push(\"-Dunused\".to_owned());\n+        flags.push(\"-Dwarnings\".into());\n+        flags.push(\"-Dunused\".into());\n     }\n-    if let Ok(sysroot) = env::var(\"MIRI_SYSROOT\") {\n-        flags.push(\"--sysroot\".to_string());\n+    if let Some(sysroot) = env::var_os(\"MIRI_SYSROOT\") {\n+        flags.push(\"--sysroot\".into());\n         flags.push(sysroot);\n     }\n     if let Ok(extra_flags) = env::var(\"MIRIFLAGS\") {\n         for flag in extra_flags.split_whitespace() {\n-            flags.push(flag.to_string());\n+            flags.push(flag.into());\n         }\n     }\n-    flags.push(\"-Zui-testing\".to_string());\n+    flags.push(\"-Zui-testing\".into());\n     if let Some(target) = &target {\n-        flags.push(\"--target\".to_string());\n-        flags.push(target.clone());\n+        flags.push(\"--target\".into());\n+        flags.push(target.into());\n     }\n \n     let skip_ui_checks = env::var_os(\"MIRI_SKIP_UI_CHECKS\").is_some();\n@@ -51,6 +51,8 @@ fn run_tests(mode: Mode, path: &str, target: Option<String>) -> Result<()> {\n     // Pass on all arguments as filters.\n     let path_filter = std::env::args().skip(1);\n \n+    let use_std = env::var_os(\"MIRI_NO_STD\").is_none();\n+\n     let config = Config {\n         args: flags,\n         target,\n@@ -61,6 +63,19 @@ fn run_tests(mode: Mode, path: &str, target: Option<String>) -> Result<()> {\n         path_filter: path_filter.collect(),\n         program: miri_path(),\n         output_conflict_handling,\n+        dependencies_crate_manifest_path: use_std\n+            .then(|| Path::new(\"test_dependencies\").join(\"Cargo.toml\")),\n+        dependency_builder: Some(DependencyBuilder {\n+            program: std::env::var_os(\"CARGO\").unwrap().into(),\n+            args: vec![\n+                \"run\".into(),\n+                \"--manifest-path\".into(),\n+                \"cargo-miri/Cargo.toml\".into(),\n+                \"--\".into(),\n+                \"miri\".into(),\n+            ],\n+            envs: vec![],\n+        }),\n     };\n     ui_test::run_tests(config)\n }\n@@ -107,6 +122,8 @@ regexes! {\n     \"[^ `]*/(rust[^/]*|checkout)/library/\" => \"RUSTLIB/\",\n     // erase platform file paths\n     \"sys/[a-z]+/\"                    => \"sys/PLATFORM/\",\n+    // erase paths into the crate registry\n+    r\"[^ ]*/\\.cargo/registry/.*/(.*\\.rs)\"  => \"CARGO_REGISTRY/$1\",\n }\n \n fn ui(mode: Mode, path: &str) -> Result<()> {"}, {"sha": "9da9fbf2029d1c58e315761cabf8d39df5fb5bd7", "filename": "tests/fail/concurrency/libc_pthread_create_main_terminate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -5,8 +5,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n use std::{mem, ptr};\n \n extern \"C\" fn thread_start(_null: *mut libc::c_void) -> *mut libc::c_void {"}, {"sha": "e81978fc9953a767b03a49b297dfff322092c977", "filename": "tests/fail/concurrency/libc_pthread_join_detached.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_detached.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_detached.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_detached.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -4,8 +4,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n use std::{mem, ptr};\n \n extern \"C\" fn thread_start(_null: *mut libc::c_void) -> *mut libc::c_void {"}, {"sha": "11e00429c6cedd23377ad9a41afb787f8d052c52", "filename": "tests/fail/concurrency/libc_pthread_join_joined.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_joined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_joined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_joined.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -4,8 +4,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n use std::{mem, ptr};\n \n extern \"C\" fn thread_start(_null: *mut libc::c_void) -> *mut libc::c_void {"}, {"sha": "f029f08772f2e60fcc93fa905bd939cd2391ec62", "filename": "tests/fail/concurrency/libc_pthread_join_main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_main.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -4,8 +4,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n use std::{ptr, thread};\n \n fn main() {"}, {"sha": "017036ab01e18d293896a4cf108524e23beeff6b", "filename": "tests/fail/concurrency/libc_pthread_join_multiple.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_multiple.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -4,8 +4,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n use std::thread;\n use std::{mem, ptr};\n "}, {"sha": "ae61488931737b664faef4142de38de6e26b5911", "filename": "tests/fail/concurrency/libc_pthread_join_self.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -6,8 +6,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n use std::{ptr, thread};\n \n fn main() {"}, {"sha": "4760fbb6b0513b55febbea158eb1868bd9f0ece6", "filename": "tests/fail/concurrency/too_few_args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fconcurrency%2Ftoo_few_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fconcurrency%2Ftoo_few_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Ftoo_few_args.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -4,8 +4,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n use std::{mem, ptr};\n \n extern \"C\" fn thread_start() -> *mut libc::c_void {"}, {"sha": "6abe767dc8a73dcc951b85ce1ecd717965d92206", "filename": "tests/fail/concurrency/too_many_args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fconcurrency%2Ftoo_many_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fconcurrency%2Ftoo_many_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Ftoo_many_args.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -4,8 +4,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n use std::{mem, ptr};\n \n extern \"C\" fn thread_start(_null: *mut libc::c_void, _x: i32) -> *mut libc::c_void {"}, {"sha": "bd49401e61f575244b0c14d14987885dbf2c5369", "filename": "tests/fail/concurrency/unwind_top_of_stack.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -5,8 +5,6 @@\n \n #![feature(rustc_private, c_unwind)]\n \n-extern crate libc;\n-\n use std::{mem, ptr};\n \n extern \"C-unwind\" fn thread_start(_null: *mut libc::c_void) -> *mut libc::c_void {"}, {"sha": "86a6239f5f36482ae02a653a7991819f9d5a3870", "filename": "tests/fail/fs/close_stdout.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Ffs%2Fclose_stdout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Ffs%2Fclose_stdout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fclose_stdout.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -5,8 +5,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n fn main() {\n     unsafe {\n         libc::close(1); //~ ERROR: stdout cannot be closed"}, {"sha": "86b04a0383543ba541633fdc8e294a3cacfeb8f3", "filename": "tests/fail/fs/isolated_stdin.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Ffs%2Fisolated_stdin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Ffs%2Fisolated_stdin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fisolated_stdin.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n fn main() -> std::io::Result<()> {\n     let mut bytes = [0u8; 512];\n     unsafe {"}, {"sha": "0fd8ba2fc41950cdfb43190819fee28b3fc72323", "filename": "tests/fail/fs/read_from_stdout.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Ffs%2Fread_from_stdout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Ffs%2Fread_from_stdout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fread_from_stdout.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -3,8 +3,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n fn main() -> std::io::Result<()> {\n     let mut bytes = [0u8; 512];\n     unsafe {"}, {"sha": "4740dcebe920025ca296ea891d816de6d7bf34ef", "filename": "tests/fail/fs/unix_open_missing_required_mode.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Ffs%2Funix_open_missing_required_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Ffs%2Funix_open_missing_required_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Funix_open_missing_required_mode.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -3,8 +3,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n fn main() {\n     test_file_open_missing_needed_mode();\n }"}, {"sha": "0e9109fc6e238212d239c9d1746647b2fbcbab43", "filename": "tests/fail/fs/write_to_stdin.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Ffs%2Fwrite_to_stdin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Ffs%2Fwrite_to_stdin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fwrite_to_stdin.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n fn main() -> std::io::Result<()> {\n     let bytes = b\"hello\";\n     unsafe {"}, {"sha": "90d5997f8712043c02c3a1f8e207c252230683a3", "filename": "tests/fail/sync/libc_pthread_cond_double_destroy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_cond_double_destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_cond_double_destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_cond_double_destroy.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,7 +2,6 @@\n #![feature(rustc_private)]\n \n /// Test that destroying a pthread_cond twice fails, even without a check for number validity\n-extern crate libc;\n \n fn main() {\n     unsafe {"}, {"sha": "028a924196f279e4440c48c89961762722015136", "filename": "tests/fail/sync/libc_pthread_condattr_double_destroy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_condattr_double_destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_condattr_double_destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_condattr_double_destroy.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,7 +2,6 @@\n #![feature(rustc_private)]\n \n /// Test that destroying a pthread_condattr twice fails, even without a check for number validity\n-extern crate libc;\n \n fn main() {\n     unsafe {"}, {"sha": "d87455877abcd674ca56f0bfcbbe08eb9b8534a3", "filename": "tests/fail/sync/libc_pthread_mutex_NULL_deadlock.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -4,8 +4,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n fn main() {\n     unsafe {\n         let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();"}, {"sha": "f77f5c2e20226740921e6da24a100fd3cef08564", "filename": "tests/fail/sync/libc_pthread_mutex_deadlock.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_deadlock.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n use std::cell::UnsafeCell;\n use std::sync::Arc;\n use std::thread;"}, {"sha": "b28101e20b246e6ec2f4eb4ee29b742c867b0b37", "filename": "tests/fail/sync/libc_pthread_mutex_default_deadlock.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_default_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_default_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_default_deadlock.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -4,8 +4,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n fn main() {\n     unsafe {\n         let mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();"}, {"sha": "0f74446fa27e75659d9cd495b37225bb496c19dc", "filename": "tests/fail/sync/libc_pthread_mutex_destroy_locked.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_destroy_locked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_destroy_locked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_destroy_locked.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n fn main() {\n     unsafe {\n         let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();"}, {"sha": "89022f3b5625e021661535ee606c685b352372fa", "filename": "tests/fail/sync/libc_pthread_mutex_double_destroy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_double_destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_double_destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_double_destroy.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,7 +2,6 @@\n #![feature(rustc_private)]\n \n /// Test that destroying a pthread_mutex twice fails, even without a check for number validity\n-extern crate libc;\n \n fn main() {\n     unsafe {"}, {"sha": "ab6d9c7739d7b2cf50eae66800230d8abdc26a07", "filename": "tests/fail/sync/libc_pthread_mutex_normal_deadlock.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n fn main() {\n     unsafe {\n         let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();"}, {"sha": "f259a4dee7d8dca082d8ada69e6cd0dfe69d820b", "filename": "tests/fail/sync/libc_pthread_mutex_normal_unlock_unlocked.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n fn main() {\n     unsafe {\n         let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();"}, {"sha": "b8e57f8f74e9e1f4695772b9b23cbe71ddd24955", "filename": "tests/fail/sync/libc_pthread_mutex_wrong_owner.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_wrong_owner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_wrong_owner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_wrong_owner.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n use std::cell::UnsafeCell;\n use std::sync::Arc;\n use std::thread;"}, {"sha": "ac6292570e497595a7daa9d178983d0def6a934a", "filename": "tests/fail/sync/libc_pthread_mutexattr_double_destroy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_mutexattr_double_destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_mutexattr_double_destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutexattr_double_destroy.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,7 +2,6 @@\n #![feature(rustc_private)]\n \n /// Test that destroying a pthread_mutexattr twice fails, even without a check for number validity\n-extern crate libc;\n \n fn main() {\n     unsafe {"}, {"sha": "ae7c1bbde72af9d1d3aa38d47c0df43636b9f592", "filename": "tests/fail/sync/libc_pthread_rwlock_destroy_read_locked.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {"}, {"sha": "9642595ca4e0b83ceb3e0b5b3f98af672d1bbee6", "filename": "tests/fail/sync/libc_pthread_rwlock_destroy_write_locked.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {"}, {"sha": "81b1661ce8d419825e1e1671b0d92cee774e52f5", "filename": "tests/fail/sync/libc_pthread_rwlock_double_destroy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_double_destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_double_destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_double_destroy.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,7 +2,6 @@\n #![feature(rustc_private)]\n \n /// Test that destroying a pthread_rwlock twice fails, even without a check for number validity\n-extern crate libc;\n \n fn main() {\n     unsafe {"}, {"sha": "158dd8c1cda339e7d977c42f81c269b5125bdcf0", "filename": "tests/fail/sync/libc_pthread_rwlock_read_write_deadlock_single_thread.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {"}, {"sha": "23dda68c6a428d819a374076252332d0c6098d5a", "filename": "tests/fail/sync/libc_pthread_rwlock_read_wrong_owner.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n use std::cell::UnsafeCell;\n use std::sync::Arc;\n use std::thread;"}, {"sha": "fdcf8e41d36fb9d71d3bc114fa06ba1bd7128884", "filename": "tests/fail/sync/libc_pthread_rwlock_unlock_unlocked.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {"}, {"sha": "adbb95fc28e8b143302012cc2d39cca5db801c41", "filename": "tests/fail/sync/libc_pthread_rwlock_write_read_deadlock.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n use std::cell::UnsafeCell;\n use std::sync::Arc;\n use std::thread;"}, {"sha": "a7d16caa7a4918749256c950ec3d396c63223381", "filename": "tests/fail/sync/libc_pthread_rwlock_write_read_deadlock_single_thread.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {"}, {"sha": "070373255d3277e0b86c95d459543bbff78da8d5", "filename": "tests/fail/sync/libc_pthread_rwlock_write_write_deadlock.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n use std::cell::UnsafeCell;\n use std::sync::Arc;\n use std::thread;"}, {"sha": "867c6272c4633c9ee9b3ee024f794d0bb52da95d", "filename": "tests/fail/sync/libc_pthread_rwlock_write_write_deadlock_single_thread.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {"}, {"sha": "cff2a7a2e98c2ec606e4158e5b8f7af8d45e09f6", "filename": "tests/fail/sync/libc_pthread_rwlock_write_wrong_owner.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n use std::cell::UnsafeCell;\n use std::sync::Arc;\n use std::thread;"}, {"sha": "7cb42c09a9677015c6dfab3772fdd0404dcfd1ca", "filename": "tests/fail/tokio_mvp.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Ftokio_mvp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Ftokio_mvp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftokio_mvp.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -0,0 +1,7 @@\n+//@compile-flags: -Zmiri-disable-isolation\n+//@error-pattern: can't call foreign function: epoll_create1\n+//@normalize-stderr-test: \"   = note: inside .*\\n\" -> \"\"\n+//@only-target-linux: the errors differ too much between platforms\n+\n+#[tokio::main]\n+async fn main() {}"}, {"sha": "cff948f364087733f5de80f8ec9b4b51136ab16f", "filename": "tests/fail/tokio_mvp.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Ftokio_mvp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Ftokio_mvp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftokio_mvp.stderr?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -0,0 +1,19 @@\n+error: unsupported operation: can't call foreign function: epoll_create1\n+  --> CARGO_REGISTRY/epoll.rs:LL:CC\n+   |\n+LL |         syscall!(epoll_create1(flag)).map(|ep| Selector {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't call foreign function: epoll_create1\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+   = note: backtrace:\n+note: inside `main` at $DIR/tokio_mvp.rs:LL:CC\n+  --> $DIR/tokio_mvp.rs:LL:CC\n+   |\n+LL | #[tokio::main]\n+   | ^^^^^^^^^^^^^^\n+   = note: this error originates in the macro `syscall` which comes from the expansion of the attribute macro `tokio::main` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "20ebcc9bc4735d13caa3f002049e67e783812704", "filename": "tests/fail/unsupported_signal.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Funsupported_signal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Ffail%2Funsupported_signal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funsupported_signal.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -3,8 +3,6 @@\n //@ignore-target-windows: No libc on Windows\n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n fn main() {\n     unsafe {\n         libc::signal(libc::SIGPIPE, libc::SIG_IGN);"}, {"sha": "27595bf1071fff08080268d9e8f845c3761f0bb3", "filename": "tests/panic/panic/unsupported_syscall.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpanic%2Fpanic%2Funsupported_syscall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpanic%2Fpanic%2Funsupported_syscall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpanic%2Fpanic%2Funsupported_syscall.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -3,8 +3,6 @@\n //@compile-flags: -Zmiri-panic-on-unsupported\n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n fn main() {\n     unsafe {\n         libc::syscall(0);"}, {"sha": "e155d53ce812e0a310c99213025127a08a6658ff", "filename": "tests/pass/calloc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Fcalloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Fcalloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fcalloc.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n use core::slice;\n \n fn main() {"}, {"sha": "c5b0e86666a0a0f755d02d55b2f9bef6cb828ea7", "filename": "tests/pass/concurrency/libc_pthread_cond.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Fconcurrency%2Flibc_pthread_cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Fconcurrency%2Flibc_pthread_cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Flibc_pthread_cond.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -6,8 +6,6 @@\n \n /// Test that conditional variable timeouts are working properly with both\n /// monotonic and system clocks.\n-extern crate libc;\n-\n use std::mem::MaybeUninit;\n use std::time::Instant;\n "}, {"sha": "43216481e76fbe69359050a569dd6477138322df", "filename": "tests/pass/concurrency/linux-futex.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Fconcurrency%2Flinux-futex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Fconcurrency%2Flinux-futex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Flinux-futex.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,7 +2,6 @@\n //@compile-flags: -Zmiri-disable-isolation\n \n #![feature(rustc_private)]\n-extern crate libc;\n \n use std::mem::MaybeUninit;\n use std::ptr;"}, {"sha": "1ccc57da25fad3e6b8d16e5bdc0e69c4dcbdcf0c", "filename": "tests/pass/concurrency/tls_pthread_drop_order.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Fconcurrency%2Ftls_pthread_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Fconcurrency%2Ftls_pthread_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Ftls_pthread_drop_order.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -1,7 +1,6 @@\n //@ignore-target-windows: No libc on Windows\n \n #![feature(rustc_private)]\n-extern crate libc;\n \n use std::mem;\n use std::ptr;"}, {"sha": "40aeb2ef6313f74ca16f0964cead8b6bcee5bb57", "filename": "tests/pass/foreign-fn-linkname.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fforeign-fn-linkname.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -1,8 +1,6 @@\n //ignore-windows: Uses POSIX APIs\n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n use std::ffi::CString;\n \n mod mlibc {"}, {"sha": "9d59fedb20edb5c0259f2b52399eb3c876f81d7f", "filename": "tests/pass/fs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Ffs.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -4,8 +4,6 @@\n #![feature(rustc_private)]\n #![feature(io_error_more)]\n \n-extern crate libc;\n-\n use std::ffi::CString;\n use std::fs::{\n     create_dir, read_dir, read_link, remove_dir, remove_dir_all, remove_file, rename, File,"}, {"sha": "f73e64ad17a2667a4254a4558083a294df30e4b1", "filename": "tests/pass/fs_with_isolation.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Ffs_with_isolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Ffs_with_isolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Ffs_with_isolation.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -4,8 +4,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n use std::ffi::CString;\n use std::fs::{self, File};\n use std::io::{Error, ErrorKind};"}, {"sha": "9b83ab45b0c017c5861e08618ea38c93b64024a4", "filename": "tests/pass/libc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Flibc.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -5,8 +5,6 @@\n use std::fs::{remove_file, File};\n use std::os::unix::io::AsRawFd;\n \n-extern crate libc;\n-\n fn tmp() -> std::path::PathBuf {\n     std::env::var(\"MIRI_TEMP\")\n         .map(std::path::PathBuf::from)"}, {"sha": "12b42552bd5d6bc4048d6e05552697ab4f2a4807", "filename": "tests/pass/linux-getrandom-without-isolation.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Flinux-getrandom-without-isolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Flinux-getrandom-without-isolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Flinux-getrandom-without-isolation.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -1,7 +1,6 @@\n //@only-target-linux\n //@compile-flags: -Zmiri-disable-isolation\n #![feature(rustc_private)]\n-extern crate libc;\n \n use std::ptr;\n "}, {"sha": "e3309f480d36e73373e4ad402d44aea28ce83fa4", "filename": "tests/pass/linux-getrandom.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Flinux-getrandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Flinux-getrandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Flinux-getrandom.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -1,6 +1,5 @@\n //@only-target-linux\n #![feature(rustc_private)]\n-extern crate libc;\n \n use std::ptr;\n "}, {"sha": "9066e2af25fa3ef075c7c26b025d2c756867efdf", "filename": "tests/pass/malloc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Fmalloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Fmalloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fmalloc.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n use core::{ptr, slice};\n \n fn main() {"}, {"sha": "808d1006d4f3a50739674b3be89a4e27c8b0e7da", "filename": "tests/pass/random.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Frandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Frandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Frandom.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -0,0 +1,22 @@\n+use rand::{rngs::SmallRng, Rng, SeedableRng};\n+// mac-os `getrandom_1` does some pointer shenanigans\n+//@compile-flags: -Zmiri-permissive-provenance\n+\n+fn main() {\n+    // Test `getrandom` directly (in multiple different versions).\n+    let mut data = vec![0; 16];\n+    getrandom_1::getrandom(&mut data).unwrap();\n+    getrandom_2::getrandom(&mut data).unwrap();\n+\n+    // Try seeding with \"real\" entropy.\n+    let mut rng = SmallRng::from_entropy();\n+    let _val = rng.gen::<i32>();\n+    let _val = rng.gen::<isize>();\n+    let _val = rng.gen::<i128>();\n+\n+    // Also try per-thread RNG.\n+    let mut rng = rand::thread_rng();\n+    let _val = rng.gen::<i32>();\n+    let _val = rng.gen::<isize>();\n+    let _val = rng.gen::<i128>();\n+}"}, {"sha": "7432ea9582618b413a34e71a9e4baacc29503215", "filename": "tests/pass/regions-mock-trans.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/tests%2Fpass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fregions-mock-trans.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(rustc_private)]\n \n-extern crate libc;\n-\n use std::mem;\n \n struct Arena(());"}, {"sha": "9addea9b19d0b8fec0d3af74bb6a2d0cb8e10d99", "filename": "ui_test/Cargo.lock", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/ui_test%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/ui_test%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2FCargo.lock?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -67,6 +67,37 @@ dependencies = [\n  \"rustc-demangle\",\n ]\n \n+[[package]]\n+name = \"camino\"\n+version = \"1.0.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"869119e97797867fd90f5e22af7d0bd274bd4635ebb9eb68c04f3f513ae6c412\"\n+dependencies = [\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"cargo-platform\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cbdb825da8a5df079a43676dbe042702f1707b1109f713a01420fbb4cc71fa27\"\n+dependencies = [\n+ \"serde\",\n+]\n+\n+[[package]]\n+name = \"cargo_metadata\"\n+version = \"0.15.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3abb7553d5b9b8421c6de7cb02606ff15e0c6eea7d8eadd75ef013fd636bec36\"\n+dependencies = [\n+ \"camino\",\n+ \"cargo-platform\",\n+ \"semver\",\n+ \"serde\",\n+ \"serde_json\",\n+]\n+\n [[package]]\n name = \"cc\"\n version = \"1.0.73\"\n@@ -390,6 +421,9 @@ name = \"semver\"\n version = \"1.0.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"8cb243bdfdb5936c8dc3c45762a19d12ab4550cdc753bc247637d4ec35a040fd\"\n+dependencies = [\n+ \"serde\",\n+]\n \n [[package]]\n name = \"serde\"\n@@ -497,6 +531,7 @@ dependencies = [\n name = \"ui_test\"\n version = \"0.1.0\"\n dependencies = [\n+ \"cargo_metadata\",\n  \"color-eyre\",\n  \"colored\",\n  \"crossbeam\","}, {"sha": "bb14eb7ecfe3091be88db83ff48f40ee28869957", "filename": "ui_test/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/ui_test%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/ui_test%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2FCargo.toml?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -18,4 +18,4 @@ lazy_static = \"1.4.0\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n color-eyre = { version = \"0.6.1\", default-features = false, features = [\"capture-spantrace\"] }\n-\n+cargo_metadata = \"0.15\""}, {"sha": "3db3361faa5328c2d5ad26e9288c5b9119a7f6af", "filename": "ui_test/README.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/ui_test%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/ui_test%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2FREADME.md?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -47,3 +47,5 @@ their command specifies, or the test will fail without even being run.\n \n * `ignore-target-*` and `only-target-*` opereate solely on the triple, instead of supporting things like `macos`\n * only `//~` comments can be individualized per revision\n+* only supports `ui` tests\n+* tests are run in named order, so you can prefix slow tests with `0` in order to make them get run first"}, {"sha": "ab3a0156595f7b2e45b3e8bf7d084b9a19b3e8d3", "filename": "ui_test/src/dependencies.rs", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/ui_test%2Fsrc%2Fdependencies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/ui_test%2Fsrc%2Fdependencies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Fdependencies.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -0,0 +1,137 @@\n+use color_eyre::eyre::{bail, Result};\n+use std::{\n+    collections::{HashMap, HashSet},\n+    path::{Path, PathBuf},\n+    process::Command,\n+};\n+\n+use crate::Config;\n+\n+#[derive(Default, Debug)]\n+pub struct Dependencies {\n+    /// All paths that must be imported with `-L dependency=`. This is for\n+    /// finding proc macros run on the host and dependencies for the target.\n+    pub import_paths: Vec<PathBuf>,\n+    /// The name as chosen in the `Cargo.toml` and its corresponding rmeta file.\n+    pub dependencies: Vec<(String, PathBuf)>,\n+}\n+\n+/// Compiles dependencies and returns the crate names and corresponding rmeta files.\n+pub fn build_dependencies(config: &Config) -> Result<Dependencies> {\n+    let manifest_path = match &config.dependencies_crate_manifest_path {\n+        Some(path) => path,\n+        None => return Ok(Default::default()),\n+    };\n+    let (program, args, envs): (&Path, &[_], &[_]) = match &config.dependency_builder {\n+        Some(db) => (&db.program, &db.args, &db.envs),\n+        None => (Path::new(\"cargo\"), &[], &[]),\n+    };\n+    let mut build = Command::new(program);\n+    build.args(args);\n+    // HACK: we're using `cargo run` (or `cargo miri run`), because the latter does not\n+    // support `cargo miri build` yet.\n+    build.arg(\"run\");\n+\n+    if let Some(target) = &config.target {\n+        build.arg(format!(\"--target={target}\"));\n+    }\n+\n+    // Reusable closure for setting up the environment both for artifact generation and `cargo_metadata`\n+    let setup_command = |cmd: &mut Command| {\n+        cmd.envs(envs.iter().map(|(k, v)| (k, v)));\n+        cmd.arg(\"--manifest-path\").arg(manifest_path);\n+    };\n+\n+    setup_command(&mut build);\n+    build\n+        .arg(\"--target-dir=target/test_dependencies\")\n+        .arg(\"--message-format=json\")\n+        .arg(\"-Zunstable-options\");\n+\n+    let output = build.output()?;\n+\n+    if !output.status.success() {\n+        let stdout = String::from_utf8(output.stdout)?;\n+        let stderr = String::from_utf8(output.stderr)?;\n+        bail!(\"failed to compile dependencies:\\nstderr:\\n{stderr}\\n\\nstdout:{stdout}\");\n+    }\n+\n+    // Collect all artifacts generated\n+    let output = output.stdout;\n+    let output = String::from_utf8(output)?;\n+    let mut import_paths: HashSet<PathBuf> = HashSet::new();\n+    let mut artifacts: HashMap<_, _> = output\n+        .lines()\n+        .filter_map(|line| {\n+            let message = serde_json::from_str::<cargo_metadata::Message>(line).ok()?;\n+            if let cargo_metadata::Message::CompilerArtifact(artifact) = message {\n+                for filename in &artifact.filenames {\n+                    import_paths.insert(filename.parent().unwrap().into());\n+                }\n+                let filename = artifact\n+                    .filenames\n+                    .into_iter()\n+                    .find(|filename| filename.extension() == Some(\"rmeta\"))?;\n+                Some((artifact.package_id, filename.into_std_path_buf()))\n+            } else {\n+                None\n+            }\n+        })\n+        .collect();\n+\n+    // Check which crates are mentioned in the crate itself\n+    let mut metadata = cargo_metadata::MetadataCommand::new().cargo_command();\n+    setup_command(&mut metadata);\n+    let output = metadata.output()?;\n+\n+    if !output.status.success() {\n+        let stdout = String::from_utf8(output.stdout)?;\n+        let stderr = String::from_utf8(output.stderr)?;\n+        bail!(\"failed to run cargo-metadata:\\nstderr:\\n{stderr}\\n\\nstdout:{stdout}\");\n+    }\n+\n+    let output = output.stdout;\n+    let output = String::from_utf8(output)?;\n+\n+    for line in output.lines() {\n+        if !line.starts_with('{') {\n+            continue;\n+        }\n+        let metadata: cargo_metadata::Metadata = serde_json::from_str(line)?;\n+        // Only take artifacts that are defined in the Cargo.toml\n+\n+        // First, find the root artifact\n+        let root = metadata\n+            .packages\n+            .iter()\n+            .find(|package| {\n+                package.manifest_path.as_std_path().canonicalize().unwrap()\n+                    == manifest_path.canonicalize().unwrap()\n+            })\n+            .unwrap();\n+\n+        // Then go over all of its dependencies\n+        let dependencies = root\n+            .dependencies\n+            .iter()\n+            .map(|package| {\n+                // Get the id for the package matching the version requirement of the dep\n+                let id = &metadata\n+                    .packages\n+                    .iter()\n+                    .find(|&dep| dep.name == package.name && package.req.matches(&dep.version))\n+                    .expect(\"dependency does not exist\")\n+                    .id;\n+                // Return the name chosen in `Cargo.toml` and the path to the corresponding artifact\n+                (\n+                    package.rename.clone().unwrap_or_else(|| package.name.clone()),\n+                    artifacts.remove(id).expect(\"package without artifact\"),\n+                )\n+            })\n+            .collect();\n+        let import_paths = import_paths.into_iter().collect();\n+        return Ok(Dependencies { dependencies, import_paths });\n+    }\n+\n+    bail!(\"no json found in cargo-metadata output\")\n+}"}, {"sha": "4318e8a8e034d4bd1920997b3f49bcff048ea576", "filename": "ui_test/src/lib.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/ui_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/ui_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Flib.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -1,6 +1,7 @@\n #![allow(clippy::enum_variant_names, clippy::useless_format, clippy::too_many_arguments)]\n \n use std::collections::VecDeque;\n+use std::ffi::OsString;\n use std::fmt::Write;\n use std::path::{Path, PathBuf};\n use std::process::{Command, ExitStatus};\n@@ -14,8 +15,10 @@ use parser::{ErrorMatch, Pattern};\n use regex::Regex;\n use rustc_stderr::{Level, Message};\n \n+use crate::dependencies::build_dependencies;\n use crate::parser::{Comments, Condition};\n \n+mod dependencies;\n mod parser;\n mod rustc_stderr;\n #[cfg(test)]\n@@ -24,7 +27,7 @@ mod tests;\n #[derive(Debug)]\n pub struct Config {\n     /// Arguments passed to the binary that is executed.\n-    pub args: Vec<String>,\n+    pub args: Vec<OsString>,\n     /// `None` to run on the host, otherwise a target triple\n     pub target: Option<String>,\n     /// Filters applied to stderr output before processing it\n@@ -38,6 +41,18 @@ pub struct Config {\n     pub output_conflict_handling: OutputConflictHandling,\n     /// Only run tests with one of these strings in their path/name\n     pub path_filter: Vec<String>,\n+    /// Path to a `Cargo.toml` that describes which dependencies the tests can access.\n+    pub dependencies_crate_manifest_path: Option<PathBuf>,\n+    /// Can be used to override what command to run instead of `cargo` to build the\n+    /// dependencies in `manifest_path`\n+    pub dependency_builder: Option<DependencyBuilder>,\n+}\n+\n+#[derive(Debug)]\n+pub struct DependencyBuilder {\n+    pub program: PathBuf,\n+    pub args: Vec<String>,\n+    pub envs: Vec<(String, String)>,\n }\n \n #[derive(Debug)]\n@@ -53,12 +68,26 @@ pub enum OutputConflictHandling {\n \n pub type Filter = Vec<(Regex, &'static str)>;\n \n-pub fn run_tests(config: Config) -> Result<()> {\n+pub fn run_tests(mut config: Config) -> Result<()> {\n     eprintln!(\"   Compiler flags: {:?}\", config.args);\n \n     // Get the triple with which to run the tests\n     let target = config.target.clone().unwrap_or_else(|| config.get_host());\n \n+    let dependencies = build_dependencies(&config)?;\n+    for (name, dependency) in dependencies.dependencies {\n+        config.args.push(\"--extern\".into());\n+        let mut dep = OsString::from(name);\n+        dep.push(\"=\");\n+        dep.push(dependency);\n+        config.args.push(dep);\n+    }\n+    for import_path in dependencies.import_paths {\n+        config.args.push(\"-L\".into());\n+        config.args.push(import_path.into());\n+    }\n+    let config = config;\n+\n     // A channel for files to process\n     let (submit, receive) = crossbeam::channel::unbounded();\n \n@@ -294,9 +323,7 @@ fn run_test(\n     for arg in &comments.compile_flags {\n         miri.arg(arg);\n     }\n-    for (k, v) in &comments.env_vars {\n-        miri.env(k, v);\n-    }\n+    miri.envs(comments.env_vars.iter().map(|(k, v)| (k, v)));\n     let output = miri.output().expect(\"could not execute miri\");\n     let mut errors = config.mode.ok(output.status);\n     let stderr = check_test_result("}, {"sha": "8b0bd517a10544bdeef2264978c6fb821c009372", "filename": "ui_test/src/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab6fb9d2aa440a48723d311bcd065be9552a27f0/ui_test%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab6fb9d2aa440a48723d311bcd065be9552a27f0/ui_test%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Ftests.rs?ref=ab6fb9d2aa440a48723d311bcd065be9552a27f0", "patch": "@@ -16,6 +16,8 @@ fn config() -> Config {\n         path_filter: vec![],\n         program: PathBuf::from(\"cake\"),\n         output_conflict_handling: OutputConflictHandling::Error,\n+        dependencies_crate_manifest_path: None,\n+        dependency_builder: None,\n     }\n }\n "}]}