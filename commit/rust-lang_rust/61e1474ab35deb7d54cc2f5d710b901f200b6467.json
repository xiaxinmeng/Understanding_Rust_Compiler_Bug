{"sha": "61e1474ab35deb7d54cc2f5d710b901f200b6467", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZTE0NzRhYjM1ZGViN2Q1NGNjMmY1ZDcxMGI5MDFmMjAwYjY0Njc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-28T15:46:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-28T15:46:11Z"}, "message": "fix typos in mbe tests", "tree": {"sha": "158afa2f165a70fdcb5870c940cc9653854e59fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/158afa2f165a70fdcb5870c940cc9653854e59fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61e1474ab35deb7d54cc2f5d710b901f200b6467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61e1474ab35deb7d54cc2f5d710b901f200b6467", "html_url": "https://github.com/rust-lang/rust/commit/61e1474ab35deb7d54cc2f5d710b901f200b6467", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61e1474ab35deb7d54cc2f5d710b901f200b6467/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66", "html_url": "https://github.com/rust-lang/rust/commit/c8bcfe6a05d82e151d459bcd2bd8a7b2742f7a66"}], "stats": {"total": 183, "additions": 92, "deletions": 91}, "files": [{"sha": "1d58d9e7104a367472c51a63e91ca21f4287ba6f", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -71,7 +71,7 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n     where\n         F: FnOnce(AssistCtx<DB>) -> T,\n     {\n-        let source_file = &db.parse(frange.file_id);\n+        let source_file = &db.parse(frange.file_id).tree;\n         let assist =\n             if should_compute_edit { Assist::Resolved(vec![]) } else { Assist::Unresolved(vec![]) };\n "}, {"sha": "cabb3d862f2b009d9d4dabafaea3d890c199ff6c", "filename": "crates/ra_assists/src/ast_editor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_editor.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -283,7 +283,7 @@ impl AstBuilder<ast::NameRef> {\n }\n \n fn ast_node_from_file_text<N: AstNode>(text: &str) -> TreeArc<N> {\n-    let file = SourceFile::parse(text);\n+    let file = SourceFile::parse(text).tree;\n     let res = file.syntax().descendants().find_map(N::cast).unwrap().to_owned();\n     res\n }\n@@ -292,7 +292,7 @@ mod tokens {\n     use once_cell::sync::Lazy;\n     use ra_syntax::{AstNode, SourceFile, TreeArc, SyntaxToken, SyntaxKind::*, T};\n \n-    static SOURCE_FILE: Lazy<TreeArc<SourceFile>> = Lazy::new(|| SourceFile::parse(\",\\n; ;\"));\n+    static SOURCE_FILE: Lazy<TreeArc<SourceFile>> = Lazy::new(|| SourceFile::parse(\",\\n; ;\").tree);\n \n     pub(crate) fn comma() -> SyntaxToken<'static> {\n         SOURCE_FILE\n@@ -326,7 +326,7 @@ mod tokens {\n \n     impl WsBuilder {\n         pub(crate) fn new(text: &str) -> WsBuilder {\n-            WsBuilder(SourceFile::parse(text))\n+            WsBuilder(SourceFile::parse(text).ok().unwrap())\n         }\n         pub(crate) fn ws(&self) -> SyntaxToken<'_> {\n             self.0.syntax().first_child_or_token().unwrap().as_token().unwrap()"}, {"sha": "c9ca13bbc80f2cce9e72352d80474960b21fad85", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -34,7 +34,7 @@ fn main() -> Result<()> {\n             if !matches.is_present(\"no-dump\") {\n                 println!(\"{}\", file.syntax().debug_dump());\n             }\n-            ::std::mem::forget(file);\n+            std::mem::forget(file);\n         }\n         (\"symbols\", _) => {\n             let file = file()?;\n@@ -60,11 +60,11 @@ fn main() -> Result<()> {\n \n fn file() -> Result<TreeArc<SourceFile>> {\n     let text = read_stdin()?;\n-    Ok(SourceFile::parse(&text))\n+    Ok(SourceFile::parse(&text).tree)\n }\n \n fn read_stdin() -> Result<String> {\n     let mut buff = String::new();\n-    ::std::io::stdin().read_to_string(&mut buff)?;\n+    std::io::stdin().read_to_string(&mut buff)?;\n     Ok(buff)\n }"}, {"sha": "5d43282fd47e0ffd7b98a0e40c9388bbf8e95f47", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -10,7 +10,7 @@ use crate::{FilePosition, CallInfo, FunctionSignature, db::RootDatabase};\n \n /// Computes parameter information for the given call expression.\n pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<CallInfo> {\n-    let file = db.parse(position.file_id);\n+    let file = db.parse(position.file_id).tree;\n     let syntax = file.syntax();\n \n     // Find the calling expression and it's NameRef"}, {"sha": "4b597afc04afba104032f4c751820ea56f7ac176", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -138,7 +138,7 @@ impl LibraryData {\n         files: Vec<(FileId, RelativePathBuf, Arc<String>)>,\n     ) -> LibraryData {\n         let symbol_index = SymbolIndex::for_files(files.par_iter().map(|(file_id, _, text)| {\n-            let file = SourceFile::parse(text);\n+            let file = SourceFile::parse(text).tree;\n             (*file_id, file)\n         }));\n         let mut root_change = RootChange::default();"}, {"sha": "3a75bbf9218a8fb06ff672ba90775875c1f1a997", "filename": "crates/ra_ide_api/src/completion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -51,8 +51,8 @@ pub use crate::completion::completion_item::{CompletionItem, CompletionItemKind,\n /// identifier prefix/fuzzy match should be done higher in the stack, together\n /// with ordering of completions (currently this is done by the client).\n pub(crate) fn completions(db: &db::RootDatabase, position: FilePosition) -> Option<Completions> {\n-    let original_file = db.parse(position.file_id);\n-    let ctx = CompletionContext::new(db, &original_file, position)?;\n+    let original_parse = db.parse(position.file_id);\n+    let ctx = CompletionContext::new(db, &original_parse, position)?;\n \n     let mut acc = Completions::default();\n "}, {"sha": "bda7d9bb24c2044e0b974b6557ba54e35276bfb2", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -1,6 +1,6 @@\n use ra_text_edit::AtomTextEdit;\n use ra_syntax::{\n-    AstNode, SyntaxNode, SourceFile, TextUnit, TextRange, SyntaxToken,\n+    AstNode, SyntaxNode, SourceFile, TextUnit, TextRange, SyntaxToken, Parse,\n     ast,\n     algo::{find_token_at_offset, find_covering_element, find_node_at_offset},\n     SyntaxKind::*,\n@@ -43,11 +43,12 @@ pub(crate) struct CompletionContext<'a> {\n impl<'a> CompletionContext<'a> {\n     pub(super) fn new(\n         db: &'a db::RootDatabase,\n-        original_file: &'a SourceFile,\n+        original_parse: &'a Parse,\n         position: FilePosition,\n     ) -> Option<CompletionContext<'a>> {\n         let module = source_binder::module_from_position(db, position);\n-        let token = find_token_at_offset(original_file.syntax(), position.offset).left_biased()?;\n+        let token =\n+            find_token_at_offset(original_parse.tree.syntax(), position.offset).left_biased()?;\n         let analyzer =\n             hir::SourceAnalyzer::new(db, position.file_id, token.parent(), Some(position.offset));\n         let mut ctx = CompletionContext {\n@@ -69,7 +70,7 @@ impl<'a> CompletionContext<'a> {\n             dot_receiver: None,\n             is_call: false,\n         };\n-        ctx.fill(original_file, position.offset);\n+        ctx.fill(&original_parse, position.offset);\n         Some(ctx)\n     }\n \n@@ -82,13 +83,13 @@ impl<'a> CompletionContext<'a> {\n         }\n     }\n \n-    fn fill(&mut self, original_file: &'a SourceFile, offset: TextUnit) {\n+    fn fill(&mut self, original_parse: &'a Parse, offset: TextUnit) {\n         // Insert a fake ident to get a valid parse tree. We will use this file\n         // to determine context, though the original_file will be used for\n         // actual completion.\n         let file = {\n             let edit = AtomTextEdit::insert(offset, \"intellijRulezz\".to_string());\n-            original_file.reparse(&edit)\n+            original_parse.reparse(&edit).tree\n         };\n \n         // First, let's try to complete a reference to some declaration.\n@@ -99,7 +100,7 @@ impl<'a> CompletionContext<'a> {\n                 self.is_param = true;\n                 return;\n             }\n-            self.classify_name_ref(original_file, name_ref);\n+            self.classify_name_ref(&original_parse.tree, name_ref);\n         }\n \n         // Otherwise, see if this is a declaration. We can use heuristics to"}, {"sha": "4cf2a0b700b9d45982a212fdac48753faf520297", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -4,7 +4,7 @@ use itertools::Itertools;\n use hir::{source_binder, diagnostics::{Diagnostic as _, DiagnosticSink}};\n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    T, Location, SourceFile, TextRange, SyntaxNode,\n+    T, Location, TextRange, SyntaxNode,\n     ast::{self, AstNode, NamedFieldList, NamedField},\n };\n use ra_assists::ast_editor::{AstEditor, AstBuilder};\n@@ -21,10 +21,17 @@ pub enum Severity {\n \n pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic> {\n     let _p = profile(\"diagnostics\");\n-    let source_file = db.parse(file_id);\n+    let parse = db.parse(file_id);\n     let mut res = Vec::new();\n \n-    syntax_errors(&mut res, &source_file);\n+    res.extend(parse.errors.iter().map(|err| Diagnostic {\n+        range: location_to_range(err.location()),\n+        message: format!(\"Syntax Error: {}\", err),\n+        severity: Severity::Error,\n+        fix: None,\n+    }));\n+\n+    let source_file = parse.tree;\n \n     for node in source_file.syntax().descendants() {\n         check_unnecessary_braces_in_use_statement(&mut res, file_id, node);\n@@ -51,8 +58,9 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         })\n     })\n     .on::<hir::diagnostics::MissingFields, _>(|d| {\n+        //TODO: commment\n         let file_id = d.file().original_file(db);\n-        let source_file = db.parse(file_id);\n+        let source_file = db.parse(file_id).tree;\n         let syntax_node = d.syntax_node_ptr();\n         let node = NamedFieldList::cast(syntax_node.to_node(source_file.syntax())).unwrap();\n         let mut ast_editor = AstEditor::new(node);\n@@ -77,21 +85,11 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n     drop(sink);\n     res.into_inner()\n }\n-\n-fn syntax_errors(acc: &mut Vec<Diagnostic>, source_file: &SourceFile) {\n-    fn location_to_range(location: Location) -> TextRange {\n-        match location {\n-            Location::Offset(offset) => TextRange::offset_len(offset, 1.into()),\n-            Location::Range(range) => range,\n-        }\n+fn location_to_range(location: Location) -> TextRange {\n+    match location {\n+        Location::Offset(offset) => TextRange::offset_len(offset, 1.into()),\n+        Location::Range(range) => range,\n     }\n-\n-    acc.extend(source_file.errors().into_iter().map(|err| Diagnostic {\n-        range: location_to_range(err.location()),\n-        message: format!(\"Syntax Error: {}\", err),\n-        severity: Severity::Error,\n-        fix: None,\n-    }));\n }\n \n fn check_unnecessary_braces_in_use_statement(\n@@ -177,6 +175,7 @@ fn check_struct_shorthand_initialization(\n mod tests {\n     use test_utils::assert_eq_text;\n     use insta::assert_debug_snapshot_matches;\n+    use ra_syntax::SourceFile;\n \n     use crate::mock_analysis::single_file;\n \n@@ -185,7 +184,7 @@ mod tests {\n     type DiagnosticChecker = fn(&mut Vec<Diagnostic>, FileId, &SyntaxNode) -> Option<()>;\n \n     fn check_not_applicable(code: &str, func: DiagnosticChecker) {\n-        let file = SourceFile::parse(code);\n+        let file = SourceFile::parse(code).tree;\n         let mut diagnostics = Vec::new();\n         for node in file.syntax().descendants() {\n             func(&mut diagnostics, FileId(0), node);\n@@ -194,7 +193,7 @@ mod tests {\n     }\n \n     fn check_apply(before: &str, after: &str, func: DiagnosticChecker) {\n-        let file = SourceFile::parse(before);\n+        let file = SourceFile::parse(before).tree;\n         let mut diagnostics = Vec::new();\n         for node in file.syntax().descendants() {\n             func(&mut diagnostics, FileId(0), node);"}, {"sha": "ae729614f78669a5fc555f2cc0192b77b062e100", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -79,7 +79,7 @@ impl NavigationTarget {\n         file_id: FileId,\n         pat: AstPtr<ast::Pat>,\n     ) -> NavigationTarget {\n-        let file = db.parse(file_id);\n+        let file = db.parse(file_id).tree;\n         let (name, full_range) = match pat.to_node(file.syntax()).kind() {\n             ast::PatKind::BindPat(pat) => return NavigationTarget::from_bind_pat(file_id, &pat),\n             _ => (\"_\".into(), pat.syntax_node_ptr().range()),\n@@ -290,7 +290,7 @@ impl NavigationTarget {\n     }\n \n     pub(crate) fn node(&self, db: &RootDatabase) -> Option<TreeArc<SyntaxNode>> {\n-        let source_file = db.parse(self.file_id());\n+        let source_file = db.parse(self.file_id()).tree;\n         let source_file = source_file.syntax();\n         let node = source_file\n             .descendants()"}, {"sha": "24ab7b59cfe78b79c816da7a5acf2715b5bd71ad", "filename": "crates/ra_ide_api/src/display/structure.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -183,7 +183,9 @@ fn obsolete() {}\n #[deprecated(note = \"for awhile\")]\n fn very_obsolete() {}\n \"#,\n-        );\n+        )\n+        .ok()\n+        .unwrap();\n         let structure = file_structure(&file);\n         assert_debug_snapshot_matches!(\"file_structure\", structure);\n     }"}, {"sha": "00c445310e222cb5b4d4b693dd43efb2bdbb7b6d", "filename": "crates/ra_ide_api/src/extend_selection.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -11,7 +11,7 @@ use crate::{FileRange, db::RootDatabase};\n \n // FIXME: restore macro support\n pub(crate) fn extend_selection(db: &RootDatabase, frange: FileRange) -> TextRange {\n-    let source_file = db.parse(frange.file_id);\n+    let source_file = db.parse(frange.file_id).tree;\n     try_extend_selection(source_file.syntax(), frange.range).unwrap_or(frange.range)\n }\n \n@@ -212,7 +212,7 @@ mod tests {\n \n     fn do_check(before: &str, afters: &[&str]) {\n         let (cursor, before) = extract_offset(before);\n-        let file = SourceFile::parse(&before);\n+        let file = SourceFile::parse(&before).tree;\n         let mut range = TextRange::offset_len(cursor, 0.into());\n         for &after in afters {\n             range = try_extend_selection(file.syntax(), range).unwrap();"}, {"sha": "b50bbee38b420e78b04a90fce0b94027167b8454", "filename": "crates/ra_ide_api/src/folding_ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -191,7 +191,7 @@ mod tests {\n \n     fn do_check(text: &str, fold_kinds: &[FoldKind]) {\n         let (ranges, text) = extract_ranges(text, \"fold\");\n-        let file = SourceFile::parse(&text);\n+        let file = SourceFile::parse(&text).tree;\n         let folds = folding_ranges(&file);\n \n         assert_eq!("}, {"sha": "4f8554625bbe80562f39b30e00df05d04c912472", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -19,7 +19,7 @@ pub(crate) fn goto_definition(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n-    let file = db.parse(position.file_id);\n+    let file = db.parse(position.file_id).tree;\n     let syntax = file.syntax();\n     if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, position.offset) {\n         let navs = reference_definition(db, position.file_id, name_ref).to_vec();"}, {"sha": "0f638b170c0132759a62fa80a552beccf73707be", "filename": "crates/ra_ide_api/src/goto_type_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -10,7 +10,7 @@ pub(crate) fn goto_type_definition(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n-    let file = db.parse(position.file_id);\n+    let file = db.parse(position.file_id).tree;\n \n     let node = find_token_at_offset(file.syntax(), position.offset).find_map(|token| {\n         token"}, {"sha": "a390dab65da17c0014b74006ee6e57a6c633b72d", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -68,7 +68,7 @@ impl HoverResult {\n }\n \n pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<HoverResult>> {\n-    let file = db.parse(position.file_id);\n+    let file = db.parse(position.file_id).tree;\n     let mut res = HoverResult::new();\n \n     let mut range = None;\n@@ -120,7 +120,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n }\n \n pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Option<String> {\n-    let file = db.parse(frange.file_id);\n+    let file = db.parse(frange.file_id).tree;\n     let syntax = file.syntax();\n     let leaf_node = find_covering_element(syntax, frange.range);\n     // if we picked identifier, expand to pattern/expression"}, {"sha": "b80238d9e0464618d7109c52425d17ff3d5f3aeb", "filename": "crates/ra_ide_api/src/impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -11,7 +11,7 @@ pub(crate) fn goto_implementation(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n-    let file = db.parse(position.file_id);\n+    let file = db.parse(position.file_id).tree;\n     let syntax = file.syntax();\n \n     let module = source_binder::module_from_position(db, position)?;"}, {"sha": "3978e9635855d266e1d333f005d7fe89e2284adc", "filename": "crates/ra_ide_api/src/join_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -506,7 +506,7 @@ fn foo() {\n \n     fn check_join_lines_sel(before: &str, after: &str) {\n         let (sel, before) = extract_range(before);\n-        let file = SourceFile::parse(&before);\n+        let file = SourceFile::parse(&before).tree;\n         let result = join_lines(&file, sel);\n         let actual = result.apply(&before);\n         assert_eq_text!(after, &actual);"}, {"sha": "2fe46cd133ea3cfaa7eaf157b7399117255001b3", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -314,7 +314,7 @@ impl Analysis {\n \n     /// Gets the syntax tree of the file.\n     pub fn parse(&self, file_id: FileId) -> TreeArc<SourceFile> {\n-        self.db.parse(file_id).clone()\n+        self.db.parse(file_id).tree\n     }\n \n     /// Gets the file's `LineIndex`: data structure to convert between absolute\n@@ -331,7 +331,7 @@ impl Analysis {\n     /// Returns position of the matching brace (all types of braces are\n     /// supported).\n     pub fn matching_brace(&self, position: FilePosition) -> Option<TextUnit> {\n-        let file = self.db.parse(position.file_id);\n+        let file = self.db.parse(position.file_id).tree;\n         matching_brace::matching_brace(&file, position.offset)\n     }\n \n@@ -344,7 +344,7 @@ impl Analysis {\n     /// Returns an edit to remove all newlines in the range, cleaning up minor\n     /// stuff like trailing commas.\n     pub fn join_lines(&self, frange: FileRange) -> SourceChange {\n-        let file = self.db.parse(frange.file_id);\n+        let file = self.db.parse(frange.file_id).tree;\n         let file_edit = SourceFileEdit {\n             file_id: frange.file_id,\n             edit: join_lines::join_lines(&file, frange.range),\n@@ -362,7 +362,7 @@ impl Analysis {\n     /// this works when adding `let =`.\n     // FIXME: use a snippet completion instead of this hack here.\n     pub fn on_eq_typed(&self, position: FilePosition) -> Option<SourceChange> {\n-        let file = self.db.parse(position.file_id);\n+        let file = self.db.parse(position.file_id).tree;\n         let edit = typing::on_eq_typed(&file, position.offset)?;\n         Some(SourceChange::source_file_edit(\n             \"add semicolon\",\n@@ -378,13 +378,13 @@ impl Analysis {\n     /// Returns a tree representation of symbols in the file. Useful to draw a\n     /// file outline.\n     pub fn file_structure(&self, file_id: FileId) -> Vec<StructureNode> {\n-        let file = self.db.parse(file_id);\n+        let file = self.db.parse(file_id).tree;\n         file_structure(&file)\n     }\n \n     /// Returns the set of folding ranges.\n     pub fn folding_ranges(&self, file_id: FileId) -> Vec<Fold> {\n-        let file = self.db.parse(file_id);\n+        let file = self.db.parse(file_id).tree;\n         folding_ranges::folding_ranges(&file)\n     }\n "}, {"sha": "7f3e65b460cefd2e0c0adbbb7409d4321f42bd95", "filename": "crates/ra_ide_api/src/matching_brace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fmatching_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fmatching_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmatching_brace.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -31,7 +31,7 @@ mod tests {\n     fn test_matching_brace() {\n         fn do_check(before: &str, after: &str) {\n             let (pos, before) = extract_offset(before);\n-            let file = SourceFile::parse(&before);\n+            let file = SourceFile::parse(&before).tree;\n             let new_pos = match matching_brace(&file, pos) {\n                 None => pos,\n                 Some(pos) => pos,"}, {"sha": "a75042b76aaee6d85cb38c59e13d94ca88204850", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -60,7 +60,7 @@ pub(crate) fn find_all_refs(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Option<ReferenceSearchResult> {\n-    let file = db.parse(position.file_id);\n+    let file = db.parse(position.file_id).tree;\n     let (binding, analyzer) = find_binding(db, &file, position)?;\n     let declaration = NavigationTarget::from_bind_pat(position.file_id, binding);\n \n@@ -99,7 +99,7 @@ pub(crate) fn rename(\n     position: FilePosition,\n     new_name: &str,\n ) -> Option<SourceChange> {\n-    let source_file = db.parse(position.file_id);\n+    let source_file = db.parse(position.file_id).tree;\n     let syntax = source_file.syntax();\n \n     if let Some((ast_name, ast_module)) = find_name_and_module_at_offset(syntax, position) {"}, {"sha": "afe629d5016f7711491e2e6ee91a5c1994b07d52", "filename": "crates/ra_ide_api/src/runnables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -22,7 +22,7 @@ pub enum RunnableKind {\n }\n \n pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n-    let source_file = db.parse(file_id);\n+    let source_file = db.parse(file_id).tree;\n     source_file.syntax().descendants().filter_map(|i| runnable(db, file_id, i)).collect()\n }\n "}, {"sha": "821106fea1fb16026aa270c696c1ef1a016a0ccb", "filename": "crates/ra_ide_api/src/status.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -4,7 +4,7 @@ use std::{\n     sync::Arc,\n };\n \n-use ra_syntax::{AstNode, TreeArc, SourceFile};\n+use ra_syntax::{AstNode, Parse};\n use ra_db::{\n     ParseQuery, FileTextQuery, SourceRootId,\n     salsa::{Database, debug::{DebugQueryTable, TableEntry}},\n@@ -72,17 +72,17 @@ impl fmt::Display for SyntaxTreeStats {\n     }\n }\n \n-impl FromIterator<TableEntry<FileId, TreeArc<SourceFile>>> for SyntaxTreeStats {\n+impl FromIterator<TableEntry<FileId, Parse>> for SyntaxTreeStats {\n     fn from_iter<T>(iter: T) -> SyntaxTreeStats\n     where\n-        T: IntoIterator<Item = TableEntry<FileId, TreeArc<SourceFile>>>,\n+        T: IntoIterator<Item = TableEntry<FileId, Parse>>,\n     {\n         let mut res = SyntaxTreeStats::default();\n         for entry in iter {\n             res.total += 1;\n             if let Some(value) = entry.value {\n                 res.retained += 1;\n-                res.retained_size += value.syntax().memory_size_of_subtree();\n+                res.retained_size += value.tree.syntax().memory_size_of_subtree();\n             }\n         }\n         res"}, {"sha": "a6cd7bf610bbae537a874be54654133a1eed5103", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -63,7 +63,7 @@ pub(crate) trait SymbolsDatabase: hir::db::HirDatabase {\n \n fn file_symbols(db: &impl SymbolsDatabase, file_id: FileId) -> Arc<SymbolIndex> {\n     db.check_canceled();\n-    let source_file = db.parse(file_id);\n+    let source_file = db.parse(file_id).tree;\n \n     let symbols = source_file_to_file_symbols(&source_file, file_id);\n "}, {"sha": "416e1133479094668eb82b7949df6b2f46a6ab8f", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -30,7 +30,7 @@ fn is_control_keyword(kind: SyntaxKind) -> bool {\n \n pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRange> {\n     let _p = profile(\"highlight\");\n-    let source_file = db.parse(file_id);\n+    let source_file = db.parse(file_id).tree;\n \n     fn calc_binding_hash(file_id: FileId, text: &SmolStr, shadow_count: u32) -> u64 {\n         fn hash<T: std::hash::Hash + std::fmt::Debug>(x: T) -> u64 {\n@@ -162,7 +162,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n }\n \n pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: bool) -> String {\n-    let source_file = db.parse(file_id);\n+    let source_file = db.parse(file_id).tree;\n \n     fn rainbowify(seed: u64) -> String {\n         use rand::prelude::*;"}, {"sha": "7165fa97a1ed949418b091ec5e0369eb76e3b183", "filename": "crates/ra_ide_api/src/syntax_tree.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -14,7 +14,7 @@ pub(crate) fn syntax_tree(\n     text_range: Option<TextRange>,\r\n ) -> String {\r\n     if let Some(text_range) = text_range {\r\n-        let file = db.parse(file_id);\r\n+        let file = db.parse(file_id).tree;\r\n         let node = match algo::find_covering_element(file.syntax(), text_range) {\r\n             SyntaxElement::Node(node) => node,\r\n             SyntaxElement::Token(token) => {\r\n@@ -27,7 +27,7 @@ pub(crate) fn syntax_tree(\n \r\n         node.debug_dump()\r\n     } else {\r\n-        db.parse(file_id).syntax().debug_dump()\r\n+        db.parse(file_id).tree.syntax().debug_dump()\r\n     }\r\n }\r\n \r\n@@ -84,8 +84,8 @@ fn syntax_tree_for_token(node: SyntaxToken, text_range: TextRange) -> Option<Str\n \r\n     // If the \"file\" parsed without errors,\r\n     // return its syntax\r\n-    if parsed.errors().is_empty() {\r\n-        return Some(parsed.syntax().debug_dump());\r\n+    if parsed.errors.is_empty() {\r\n+        return Some(parsed.tree.syntax().debug_dump());\r\n     }\r\n \r\n     None\r"}, {"sha": "6e0d883b46abaaed6320ae65e55ed3c6c27054a1", "filename": "crates/ra_ide_api/src/test_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ftest_utils.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -9,7 +9,7 @@ pub fn check_action<F: Fn(&SourceFile, TextUnit) -> Option<TextEdit>>(\n     f: F,\n ) {\n     let (before_cursor_pos, before) = extract_offset(before);\n-    let file = SourceFile::parse(&before);\n+    let file = SourceFile::parse(&before).ok().unwrap();\n     let result = f(&file, before_cursor_pos).expect(\"code action is not applicable\");\n     let actual = result.apply(&before);\n     let actual_cursor_pos ="}, {"sha": "63bc0cf88ce7ec74066ca2ef273d5e216d41f54b", "filename": "crates/ra_ide_api/src/typing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -10,7 +10,7 @@ use ra_db::{FilePosition, SourceDatabase};\n use crate::{db::RootDatabase, SourceChange, SourceFileEdit};\n \n pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<SourceChange> {\n-    let file = db.parse(position.file_id);\n+    let file = db.parse(position.file_id).tree;\n     let comment = find_token_at_offset(file.syntax(), position.offset)\n         .left_biased()\n         .and_then(ast::Comment::cast)?;\n@@ -85,7 +85,7 @@ pub fn on_eq_typed(file: &SourceFile, eq_offset: TextUnit) -> Option<TextEdit> {\n }\n \n pub(crate) fn on_dot_typed(db: &RootDatabase, position: FilePosition) -> Option<SourceChange> {\n-    let file = db.parse(position.file_id);\n+    let file = db.parse(position.file_id).tree;\n     assert_eq!(file.syntax().text().char_at(position.offset), Some('.'));\n \n     let whitespace = find_token_at_offset(file.syntax(), position.offset)\n@@ -138,7 +138,7 @@ mod tests {\n             let mut edit = TextEditBuilder::default();\n             edit.insert(offset, \"=\".to_string());\n             let before = edit.finish().apply(&before);\n-            let file = SourceFile::parse(&before);\n+            let file = SourceFile::parse(&before).tree;\n             if let Some(result) = on_eq_typed(&file, offset) {\n                 let actual = result.apply(&before);\n                 assert_eq_text!(after, &actual);"}, {"sha": "dce82f33d20a7d494bd40d1d470e4b2cc06e5331", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -384,7 +384,7 @@ mod tests {\n             }\n             \"#,\n         );\n-        let expansion = expand(&rules, \"literals!(foo)\");\n+        let expansion = expand(&rules, \"literals!(foo);\");\n         let buffer = tt::buffer::TokenBuffer::new(&[expansion.clone().into()]);\n         let mut tt_src = SubtreeTokenSource::new(&buffer);\n         let mut tokens = vec![];\n@@ -423,7 +423,7 @@ mod tests {\n             }\n             \"#,\n         );\n-        let expansion = expand(&rules, \"stmts!()\");\n+        let expansion = expand(&rules, \"stmts!();\");\n         assert!(token_tree_to_expr(&expansion).is_err());\n     }\n }"}, {"sha": "1db35cd8d3b0c21b2922d66e4b18d9534704db2e", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e1474ab35deb7d54cc2f5d710b901f200b6467/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=61e1474ab35deb7d54cc2f5d710b901f200b6467", "patch": "@@ -95,7 +95,7 @@ pub(crate) fn expand_to_expr(\n pub(crate) fn text_to_tokentree(text: &str) -> tt::Subtree {\n     // wrap the given text to a macro call\n     let wrapped = format!(\"wrap_macro!( {} )\", text);\n-    let wrapped = ast::SourceFile::parse(&wrapped).ok().unwrap();\n+    let wrapped = ast::SourceFile::parse(&wrapped).tree;\n     let wrapped = wrapped.syntax().descendants().find_map(ast::TokenTree::cast).unwrap();\n     let mut wrapped = ast_to_token_tree(wrapped).unwrap().0;\n     wrapped.delimiter = tt::Delimiter::None;\n@@ -378,7 +378,7 @@ fn test_match_group_with_multichar_sep() {\n     assert_expansion(\n         MacroKind::Items,\n         &rules,\n-        \"foo! (fn baz {true true} )\",\n+        \"foo! (fn baz {true true} );\",\n         \"fn baz () -> bool {true &&true}\",\n     );\n }\n@@ -392,7 +392,7 @@ fn test_match_group_zero_match() {\n         }\"#,\n     );\n \n-    assert_expansion(MacroKind::Items, &rules, \"foo! ()\", \"\");\n+    assert_expansion(MacroKind::Items, &rules, \"foo! ();\", \"\");\n }\n \n #[test]\n@@ -404,7 +404,7 @@ fn test_match_group_in_group() {\n         }\"#,\n     );\n \n-    assert_expansion(MacroKind::Items, &rules, \"foo! ( (a b) )\", \"(a b)\");\n+    assert_expansion(MacroKind::Items, &rules, \"foo! ( (a b) );\", \"(a b)\");\n }\n \n #[test]\n@@ -418,7 +418,7 @@ fn test_expand_to_item_list() {\n             }\n             \",\n     );\n-    let expansion = expand(&rules, \"structs!(Foo, Bar)\");\n+    let expansion = expand(&rules, \"structs!(Foo, Bar);\");\n     let tree = token_tree_to_macro_items(&expansion);\n     assert_eq!(\n         tree.unwrap().syntax().debug_dump().trim(),\n@@ -490,7 +490,7 @@ fn test_expand_literals_to_token_tree() {\n             }\n             \"#,\n     );\n-    let expansion = expand(&rules, \"literals!(foo)\");\n+    let expansion = expand(&rules, \"literals!(foo);\");\n     let stm_tokens = &to_subtree(&expansion.token_trees[0]).token_trees;\n \n     // [let] [a] [=] ['c'] [;]\n@@ -586,7 +586,7 @@ fn test_match_literal() {\n     }\n \"#,\n     );\n-    assert_expansion(MacroKind::Items, &rules, \"foo! ['(']\", \"fn foo () {}\");\n+    assert_expansion(MacroKind::Items, &rules, \"foo! ['('];\", \"fn foo () {}\");\n }\n \n // The following tests are port from intellij-rust directly\n@@ -725,7 +725,7 @@ fn test_last_expr() {\n     assert_expansion(\n         MacroKind::Items,\n         &rules,\n-        \"vec!(1,2,3)\",\n+        \"vec!(1,2,3);\",\n         \"{let mut v = Vec :: new () ; v . push (1) ; v . push (2) ; v . push (3) ; v}\",\n     );\n }\n@@ -902,7 +902,7 @@ fn test_meta_doc_comments() {\n                 MultiLines Doc\n             */\n         }\"#,\n-        \"# [doc = \\\" Single Line Doc 1\\\"] # [doc = \\\" \\\\\\\\n                MultiLines Doc\\\\\\\\n            \\\"] fn bar () {}\",\n+        \"# [doc = \\\" Single Line Doc 1\\\"] # [doc = \\\"\\\\\\\\n                MultiLines Doc\\\\\\\\n            \\\"] fn bar () {}\",\n     );\n }\n \n@@ -950,7 +950,7 @@ fn test_literal() {\n         }\n \"#,\n     );\n-    assert_expansion(MacroKind::Items, &rules, r#\"foo!(u8 0)\"#, r#\"const VALUE : u8 = 0 ;\"#);\n+    assert_expansion(MacroKind::Items, &rules, r#\"foo!(u8 0);\"#, r#\"const VALUE : u8 = 0 ;\"#);\n }\n \n #[test]\n@@ -1017,12 +1017,12 @@ fn test_vec() {\n     assert_expansion(\n         MacroKind::Items,\n         &rules,\n-        r#\"vec![1u32,2]\"#,\n+        r#\"vec![1u32,2];\"#,\n         r#\"{let mut v = Vec :: new () ; v . push (1u32) ; v . push (2) ; v}\"#,\n     );\n \n     assert_eq!(\n-        expand_to_expr(&rules, r#\"vec![1u32,2]\"#).syntax().debug_dump().trim(),\n+        expand_to_expr(&rules, r#\"vec![1u32,2];\"#).syntax().debug_dump().trim(),\n         r#\"BLOCK_EXPR@[0; 45)\n   BLOCK@[0; 45)\n     L_CURLY@[0; 1) \"{\"\n@@ -1161,7 +1161,7 @@ macro_rules! generate_pattern_iterators {\n \"#,\n     );\n \n-    assert_expansion(MacroKind::Items, &rules, r#\"generate_pattern_iterators ! ( double ended ; with # [ stable ( feature = \"rust1\" , since = \"1.0.0\" ) ] , Split , RSplit , & 'a str )\"#,\n+    assert_expansion(MacroKind::Items, &rules, r#\"generate_pattern_iterators ! ( double ended ; with # [ stable ( feature = \"rust1\" , since = \"1.0.0\" ) ] , Split , RSplit , & 'a str );\"#,\n         \"fn foo () {}\");\n }\n \n@@ -1208,7 +1208,6 @@ $body: block; )+\n         )+\n }\n         }\n-}\n \"#,\n     );\n "}]}