{"sha": "0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZjA2OTFlYTE4NzlhODRkMDlkNTNhMTllMGYwYjA2ODI3Y2Y5NWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-26T23:15:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-26T23:15:30Z"}, "message": "Auto merge of #51149 - zackmdavis:\u2024\u2024\u2024_to_\u2024\u2024=, r=nikomatsakis\n\nlint to favor `..=` over `...` range patterns; migrate to `..=` throughout codebase\n\nWe probably need an RFC to actually deprecate the `...` syntax, but here's a candidate implementation for the lint considered in #51043. (My local build is super flaky, but hopefully I got all of the test revisions.)", "tree": {"sha": "8a72b059c5adc812cf4a73c7603c9b3ad6c49d2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a72b059c5adc812cf4a73c7603c9b3ad6c49d2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "html_url": "https://github.com/rust-lang/rust/commit/0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84804c3874a15f55a905c0b53d820372003b0c24", "url": "https://api.github.com/repos/rust-lang/rust/commits/84804c3874a15f55a905c0b53d820372003b0c24", "html_url": "https://github.com/rust-lang/rust/commit/84804c3874a15f55a905c0b53d820372003b0c24"}, {"sha": "64365e46f2675403babb2669d60d418fae3e0a7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/64365e46f2675403babb2669d60d418fae3e0a7c", "html_url": "https://github.com/rust-lang/rust/commit/64365e46f2675403babb2669d60d418fae3e0a7c"}], "stats": {"total": 613, "additions": 373, "deletions": 240}, "files": [{"sha": "6ee91e0b22ff09bd9b0879df889d634f06bad365", "filename": "src/libcore/ascii.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibcore%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibcore%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fascii.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -108,15 +108,15 @@ pub fn escape_default(c: u8) -> EscapeDefault {\n         b'\\\\' => ([b'\\\\', b'\\\\', 0, 0], 2),\n         b'\\'' => ([b'\\\\', b'\\'', 0, 0], 2),\n         b'\"' => ([b'\\\\', b'\"', 0, 0], 2),\n-        b'\\x20' ... b'\\x7e' => ([c, 0, 0, 0], 1),\n+        b'\\x20' ..= b'\\x7e' => ([c, 0, 0, 0], 1),\n         _ => ([b'\\\\', b'x', hexify(c >> 4), hexify(c & 0xf)], 4),\n     };\n \n     return EscapeDefault { range: 0..len, data };\n \n     fn hexify(b: u8) -> u8 {\n         match b {\n-            0 ... 9 => b'0' + b,\n+            0 ..= 9 => b'0' + b,\n             _ => b'a' + b - 10,\n         }\n     }"}, {"sha": "0b8dce19dffa1c053437ce55f3da3cd36760a027", "filename": "src/libcore/char/decode.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibcore%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibcore%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fdecode.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -64,7 +64,7 @@ impl<I: Iterator<Item = u8>> Iterator for DecodeUtf8<I> {\n                 }\n             }\n             macro_rules! continuation_byte {\n-                () => { continuation_byte!(0x80...0xBF) };\n+                () => { continuation_byte!(0x80..=0xBF) };\n                 ($range: pat) => {\n                     match self.0.peek() {\n                         Some(&byte @ $range) => {\n@@ -77,43 +77,43 @@ impl<I: Iterator<Item = u8>> Iterator for DecodeUtf8<I> {\n             }\n \n             match first_byte {\n-                0x00...0x7F => {\n+                0x00..=0x7F => {\n                     first_byte!(0b1111_1111);\n                 }\n-                0xC2...0xDF => {\n+                0xC2..=0xDF => {\n                     first_byte!(0b0001_1111);\n                     continuation_byte!();\n                 }\n                 0xE0 => {\n                     first_byte!(0b0000_1111);\n-                    continuation_byte!(0xA0...0xBF);  // 0x80...0x9F here are overlong\n+                    continuation_byte!(0xA0..=0xBF);  // 0x80..=0x9F here are overlong\n                     continuation_byte!();\n                 }\n-                0xE1...0xEC | 0xEE...0xEF => {\n+                0xE1..=0xEC | 0xEE..=0xEF => {\n                     first_byte!(0b0000_1111);\n                     continuation_byte!();\n                     continuation_byte!();\n                 }\n                 0xED => {\n                     first_byte!(0b0000_1111);\n-                    continuation_byte!(0x80...0x9F);  // 0xA0..0xBF here are surrogates\n+                    continuation_byte!(0x80..=0x9F);  // 0xA0..0xBF here are surrogates\n                     continuation_byte!();\n                 }\n                 0xF0 => {\n                     first_byte!(0b0000_0111);\n-                    continuation_byte!(0x90...0xBF);  // 0x80..0x8F here are overlong\n+                    continuation_byte!(0x90..=0xBF);  // 0x80..0x8F here are overlong\n                     continuation_byte!();\n                     continuation_byte!();\n                 }\n-                0xF1...0xF3 => {\n+                0xF1..=0xF3 => {\n                     first_byte!(0b0000_0111);\n                     continuation_byte!();\n                     continuation_byte!();\n                     continuation_byte!();\n                 }\n                 0xF4 => {\n                     first_byte!(0b0000_0111);\n-                    continuation_byte!(0x80...0x8F);  // 0x90..0xBF here are beyond char::MAX\n+                    continuation_byte!(0x80..=0x8F);  // 0x90..0xBF here are beyond char::MAX\n                     continuation_byte!();\n                     continuation_byte!();\n                 }"}, {"sha": "eee78de903628cee1514f40a0dc86315637dc210", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -125,9 +125,9 @@ impl char {\n             panic!(\"to_digit: radix is too high (maximum 36)\");\n         }\n         let val = match self {\n-          '0' ... '9' => self as u32 - '0' as u32,\n-          'a' ... 'z' => self as u32 - 'a' as u32 + 10,\n-          'A' ... 'Z' => self as u32 - 'A' as u32 + 10,\n+          '0' ..= '9' => self as u32 - '0' as u32,\n+          'a' ..= 'z' => self as u32 - 'a' as u32 + 10,\n+          'A' ..= 'Z' => self as u32 - 'A' as u32 + 10,\n           _ => return None,\n         };\n         if val < radix { Some(val) }\n@@ -305,7 +305,7 @@ impl char {\n             '\\r' => EscapeDefaultState::Backslash('r'),\n             '\\n' => EscapeDefaultState::Backslash('n'),\n             '\\\\' | '\\'' | '\"' => EscapeDefaultState::Backslash(self),\n-            '\\x20' ... '\\x7e' => EscapeDefaultState::Char(self),\n+            '\\x20' ..= '\\x7e' => EscapeDefaultState::Char(self),\n             _ => EscapeDefaultState::Unicode(self.escape_unicode())\n         };\n         EscapeDefault { state: init_state }\n@@ -543,7 +543,7 @@ impl char {\n     #[inline]\n     pub fn is_alphabetic(self) -> bool {\n         match self {\n-            'a'...'z' | 'A'...'Z' => true,\n+            'a'..='z' | 'A'..='Z' => true,\n             c if c > '\\x7f' => derived_property::Alphabetic(c),\n             _ => false,\n         }\n@@ -599,7 +599,7 @@ impl char {\n     #[inline]\n     pub fn is_lowercase(self) -> bool {\n         match self {\n-            'a'...'z' => true,\n+            'a'..='z' => true,\n             c if c > '\\x7f' => derived_property::Lowercase(c),\n             _ => false,\n         }\n@@ -627,7 +627,7 @@ impl char {\n     #[inline]\n     pub fn is_uppercase(self) -> bool {\n         match self {\n-            'A'...'Z' => true,\n+            'A'..='Z' => true,\n             c if c > '\\x7f' => derived_property::Uppercase(c),\n             _ => false,\n         }\n@@ -654,7 +654,7 @@ impl char {\n     #[inline]\n     pub fn is_whitespace(self) -> bool {\n         match self {\n-            ' ' | '\\x09'...'\\x0d' => true,\n+            ' ' | '\\x09'..='\\x0d' => true,\n             c if c > '\\x7f' => property::White_Space(c),\n             _ => false,\n         }\n@@ -737,7 +737,7 @@ impl char {\n     #[inline]\n     pub fn is_numeric(self) -> bool {\n         match self {\n-            '0'...'9' => true,\n+            '0'..='9' => true,\n             c if c > '\\x7f' => general_category::N(c),\n             _ => false,\n         }"}, {"sha": "51391fa50d56f915dfd51cb32c778a311a969d08", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -121,19 +121,19 @@ macro_rules! radix {\n             fn digit(x: u8) -> u8 {\n                 match x {\n                     $($x => $conv,)+\n-                    x => panic!(\"number not in the range 0..{}: {}\", Self::BASE - 1, x),\n+                    x => panic!(\"number not in the range 0..={}: {}\", Self::BASE - 1, x),\n                 }\n             }\n         }\n     }\n }\n \n-radix! { Binary,    2, \"0b\", x @  0 ...  1 => b'0' + x }\n-radix! { Octal,     8, \"0o\", x @  0 ...  7 => b'0' + x }\n-radix! { LowerHex, 16, \"0x\", x @  0 ...  9 => b'0' + x,\n-                             x @ 10 ... 15 => b'a' + (x - 10) }\n-radix! { UpperHex, 16, \"0x\", x @  0 ...  9 => b'0' + x,\n-                             x @ 10 ... 15 => b'A' + (x - 10) }\n+radix! { Binary,    2, \"0b\", x @  0 ..=  1 => b'0' + x }\n+radix! { Octal,     8, \"0o\", x @  0 ..=  7 => b'0' + x }\n+radix! { LowerHex, 16, \"0x\", x @  0 ..=  9 => b'0' + x,\n+                             x @ 10 ..= 15 => b'a' + (x - 10) }\n+radix! { UpperHex, 16, \"0x\", x @  0 ..=  9 => b'0' + x,\n+                             x @ 10 ..= 15 => b'A' + (x - 10) }\n \n macro_rules! int_base {\n     ($Trait:ident for $T:ident as $U:ident -> $Radix:ident) => {"}, {"sha": "e74e527927d7bc47cff1d9ea70820a31d651ac8c", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -1230,7 +1230,7 @@ impl<T> [T] {\n     /// assert_eq!(s.binary_search(&4),   Err(7));\n     /// assert_eq!(s.binary_search(&100), Err(13));\n     /// let r = s.binary_search(&1);\n-    /// assert!(match r { Ok(1...4) => true, _ => false, });\n+    /// assert!(match r { Ok(1..=4) => true, _ => false, });\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn binary_search(&self, x: &T) -> Result<usize, usize>\n@@ -1268,7 +1268,7 @@ impl<T> [T] {\n     /// assert_eq!(s.binary_search_by(|probe| probe.cmp(&seek)), Err(13));\n     /// let seek = 1;\n     /// let r = s.binary_search_by(|probe| probe.cmp(&seek));\n-    /// assert!(match r { Ok(1...4) => true, _ => false, });\n+    /// assert!(match r { Ok(1..=4) => true, _ => false, });\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -1325,7 +1325,7 @@ impl<T> [T] {\n     /// assert_eq!(s.binary_search_by_key(&4, |&(a,b)| b),   Err(7));\n     /// assert_eq!(s.binary_search_by_key(&100, |&(a,b)| b), Err(13));\n     /// let r = s.binary_search_by_key(&1, |&(a,b)| b);\n-    /// assert!(match r { Ok(1...4) => true, _ => false, });\n+    /// assert!(match r { Ok(1..=4) => true, _ => false, });\n     /// ```\n     #[stable(feature = \"slice_binary_search_by_key\", since = \"1.10.0\")]\n     #[inline]"}, {"sha": "5cfb36d3b195bbcc2673673b2c2155cd74f8975f", "filename": "src/libcore/str/lossy.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibcore%2Fstr%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibcore%2Fstr%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Flossy.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -101,10 +101,10 @@ impl<'a> Iterator for Utf8LossyChunksIter<'a> {\n                     }\n                     3 => {\n                         match (byte, safe_get(self.source, i)) {\n-                            (0xE0, 0xA0 ... 0xBF) => (),\n-                            (0xE1 ... 0xEC, 0x80 ... 0xBF) => (),\n-                            (0xED, 0x80 ... 0x9F) => (),\n-                            (0xEE ... 0xEF, 0x80 ... 0xBF) => (),\n+                            (0xE0, 0xA0 ..= 0xBF) => (),\n+                            (0xE1 ..= 0xEC, 0x80 ..= 0xBF) => (),\n+                            (0xED, 0x80 ..= 0x9F) => (),\n+                            (0xEE ..= 0xEF, 0x80 ..= 0xBF) => (),\n                             _ => {\n                                 error!();\n                             }\n@@ -117,9 +117,9 @@ impl<'a> Iterator for Utf8LossyChunksIter<'a> {\n                     }\n                     4 => {\n                         match (byte, safe_get(self.source, i)) {\n-                            (0xF0, 0x90 ... 0xBF) => (),\n-                            (0xF1 ... 0xF3, 0x80 ... 0xBF) => (),\n-                            (0xF4, 0x80 ... 0x8F) => (),\n+                            (0xF0, 0x90 ..= 0xBF) => (),\n+                            (0xF1 ..= 0xF3, 0x80 ..= 0xBF) => (),\n+                            (0xF4, 0x80 ..= 0x8F) => (),\n                             _ => {\n                                 error!();\n                             }"}, {"sha": "42fb1bc238b8e3504440dd7af8df2b7cd48199d4", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -1484,10 +1484,10 @@ fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {\n                 },\n                 3 => {\n                     match (first, next!()) {\n-                        (0xE0         , 0xA0 ... 0xBF) |\n-                        (0xE1 ... 0xEC, 0x80 ... 0xBF) |\n-                        (0xED         , 0x80 ... 0x9F) |\n-                        (0xEE ... 0xEF, 0x80 ... 0xBF) => {}\n+                        (0xE0         , 0xA0 ..= 0xBF) |\n+                        (0xE1 ..= 0xEC, 0x80 ..= 0xBF) |\n+                        (0xED         , 0x80 ..= 0x9F) |\n+                        (0xEE ..= 0xEF, 0x80 ..= 0xBF) => {}\n                         _ => err!(Some(1))\n                     }\n                     if next!() & !CONT_MASK != TAG_CONT_U8 {\n@@ -1496,9 +1496,9 @@ fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {\n                 }\n                 4 => {\n                     match (first, next!()) {\n-                        (0xF0         , 0x90 ... 0xBF) |\n-                        (0xF1 ... 0xF3, 0x80 ... 0xBF) |\n-                        (0xF4         , 0x80 ... 0x8F) => {}\n+                        (0xF0         , 0x90 ..= 0xBF) |\n+                        (0xF1 ..= 0xF3, 0x80 ..= 0xBF) |\n+                        (0xF4         , 0x80 ..= 0x8F) => {}\n                         _ => err!(Some(1))\n                     }\n                     if next!() & !CONT_MASK != TAG_CONT_U8 {"}, {"sha": "7981567067dad3c1f241d175c39474e29b819cfc", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -60,8 +60,8 @@ fn test_binary_search() {\n     assert_eq!(b.binary_search(&0), Err(0));\n     assert_eq!(b.binary_search(&1), Ok(0));\n     assert_eq!(b.binary_search(&2), Err(1));\n-    assert!(match b.binary_search(&3) { Ok(1...3) => true, _ => false });\n-    assert!(match b.binary_search(&3) { Ok(1...3) => true, _ => false });\n+    assert!(match b.binary_search(&3) { Ok(1..=3) => true, _ => false });\n+    assert!(match b.binary_search(&3) { Ok(1..=3) => true, _ => false });\n     assert_eq!(b.binary_search(&4), Err(4));\n     assert_eq!(b.binary_search(&5), Err(4));\n     assert_eq!(b.binary_search(&6), Err(4));"}, {"sha": "110ebf6b215a15ab4d840564d6ee0c3210d892a1", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -3356,7 +3356,7 @@ impl<'a> LoweringContext<'a> {\n             PatKind::Ref(ref inner, mutbl) => {\n                 hir::PatKind::Ref(self.lower_pat(inner), self.lower_mutability(mutbl))\n             }\n-            PatKind::Range(ref e1, ref e2, ref end) => hir::PatKind::Range(\n+            PatKind::Range(ref e1, ref e2, Spanned { node: ref end, .. }) => hir::PatKind::Range(\n                 P(self.lower_expr(e1)),\n                 P(self.lower_expr(e2)),\n                 self.lower_range_end(end),"}, {"sha": "b21448df582a9786748e2a7f08ff642ebb220515", "filename": "src/librustc_apfloat/ieee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibrustc_apfloat%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibrustc_apfloat%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Fieee.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -1753,9 +1753,9 @@ impl<S: Semantics> IeeeFloat<S> {\n                     } else {\n                         loss = Some(match hex_value {\n                             0 => Loss::ExactlyZero,\n-                            1...7 => Loss::LessThanHalf,\n+                            1..=7 => Loss::LessThanHalf,\n                             8 => Loss::ExactlyHalf,\n-                            9...15 => Loss::MoreThanHalf,\n+                            9..=15 => Loss::MoreThanHalf,\n                             _ => unreachable!(),\n                         });\n                     }"}, {"sha": "ac71ecff96457b59e579ab0e7606360dd2b222bf", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -424,7 +424,7 @@ pub fn sanitize(result: &mut String, s: &str) -> bool {\n             '-' | ':' => result.push('.'),\n \n             // These are legal symbols\n-            'a'...'z' | 'A'...'Z' | '0'...'9' | '_' | '.' | '$' => result.push(c),\n+            'a'..='z' | 'A'..='Z' | '0'..='9' | '_' | '.' | '$' => result.push(c),\n \n             _ => {\n                 result.push('$');"}, {"sha": "dfbfcfccf7c896f9bb6bc97598c4dcad75c644e5", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -43,6 +43,7 @@ use std::collections::HashSet;\n \n use syntax::ast;\n use syntax::attr;\n+use syntax::codemap::Spanned;\n use syntax::edition::Edition;\n use syntax::feature_gate::{AttributeGate, AttributeType, Stability, deprecated_attributes};\n use syntax_pos::{BytePos, Span, SyntaxContext};\n@@ -1669,6 +1670,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TrivialConstraints {\n     }\n }\n \n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -1701,3 +1703,39 @@ impl LintPass for SoftLints {\n         )\n     }\n }\n+\n+\n+declare_lint! {\n+    pub ELLIPSIS_INCLUSIVE_RANGE_PATTERNS,\n+    Allow,\n+    \"`...` range patterns are deprecated\"\n+}\n+\n+\n+pub struct EllipsisInclusiveRangePatterns;\n+\n+impl LintPass for EllipsisInclusiveRangePatterns {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS)\n+    }\n+}\n+\n+impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n+    fn check_pat(&mut self, cx: &EarlyContext, pat: &ast::Pat) {\n+        use self::ast::{PatKind, RangeEnd, RangeSyntax};\n+\n+        if let PatKind::Range(\n+            _, _, Spanned { span, node: RangeEnd::Included(RangeSyntax::DotDotDot) }\n+        ) = pat.node {\n+            let msg = \"`...` range patterns are deprecated\";\n+            let mut err = cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, span, msg);\n+            err.span_suggestion_short_with_applicability(\n+                span, \"use `..=` for an inclusive range\", \"..=\".to_owned(),\n+                // FIXME: outstanding problem with precedence in ref patterns:\n+                // https://github.com/rust-lang/rust/issues/51043#issuecomment-392252285\n+                Applicability::MaybeIncorrect\n+            );\n+            err.emit()\n+        }\n+    }\n+}"}, {"sha": "13e97a9d3e5914b3d36fce41ccbdb01da6bdc8f0", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -100,6 +100,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                        AnonymousParameters,\n                        UnusedDocComment,\n                        BadRepr,\n+                       EllipsisInclusiveRangePatterns,\n                        );\n \n     add_early_builtin_with_new!(sess,\n@@ -176,7 +177,8 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     \"rust_2018_idioms\",\n                     BARE_TRAIT_OBJECTS,\n                     UNREACHABLE_PUB,\n-                    UNUSED_EXTERN_CRATES);\n+                    UNUSED_EXTERN_CRATES,\n+                    ELLIPSIS_INCLUSIVE_RANGE_PATTERNS);\n \n     // Guidelines for creating a future incompatibility lint:\n     //"}, {"sha": "c2da1bee3954ab3fa2ecb0f551b2e52b4475b2c8", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -306,9 +306,9 @@ For example:\n ```compile_fail\n match 5u32 {\n     // This range is ok, albeit pointless.\n-    1 ... 1 => {}\n+    1 ..= 1 => {}\n     // This range is empty, and the compiler can tell.\n-    1000 ... 5 => {}\n+    1000 ..= 5 => {}\n }\n ```\n \"##,"}, {"sha": "24301e970f506dee709e332988ee24bd85796450", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -481,7 +481,7 @@ fn check_exhaustive<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n             let joined_patterns = match witnesses.len() {\n                 0 => bug!(),\n                 1 => format!(\"`{}`\", witnesses[0]),\n-                2...LIMIT => {\n+                2..=LIMIT => {\n                     let (tail, head) = witnesses.split_last().unwrap();\n                     let head: Vec<_> = head.iter().map(|w| w.to_string()).collect();\n                     format!(\"`{}` and `{}`\", head.join(\"`, `\"), tail)"}, {"sha": "3195823eb09820758b69bd39031994f1de4ad0e2", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -139,11 +139,11 @@ impl Reg {\n             RegKind::Integer => {\n                 match self.size.bits() {\n                     1 => dl.i1_align,\n-                    2...8 => dl.i8_align,\n-                    9...16 => dl.i16_align,\n-                    17...32 => dl.i32_align,\n-                    33...64 => dl.i64_align,\n-                    65...128 => dl.i128_align,\n+                    2..=8 => dl.i8_align,\n+                    9..=16 => dl.i16_align,\n+                    17..=32 => dl.i32_align,\n+                    33..=64 => dl.i64_align,\n+                    65..=128 => dl.i128_align,\n                     _ => panic!(\"unsupported integer: {:?}\", self)\n                 }\n             }"}, {"sha": "9003e30357cbd8b24a22ceed894398a829866a26", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -441,21 +441,21 @@ impl Integer {\n     /// Find the smallest Integer type which can represent the signed value.\n     pub fn fit_signed(x: i128) -> Integer {\n         match x {\n-            -0x0000_0000_0000_0080...0x0000_0000_0000_007f => I8,\n-            -0x0000_0000_0000_8000...0x0000_0000_0000_7fff => I16,\n-            -0x0000_0000_8000_0000...0x0000_0000_7fff_ffff => I32,\n-            -0x8000_0000_0000_0000...0x7fff_ffff_ffff_ffff => I64,\n+            -0x0000_0000_0000_0080..=0x0000_0000_0000_007f => I8,\n+            -0x0000_0000_0000_8000..=0x0000_0000_0000_7fff => I16,\n+            -0x0000_0000_8000_0000..=0x0000_0000_7fff_ffff => I32,\n+            -0x8000_0000_0000_0000..=0x7fff_ffff_ffff_ffff => I64,\n             _ => I128\n         }\n     }\n \n     /// Find the smallest Integer type which can represent the unsigned value.\n     pub fn fit_unsigned(x: u128) -> Integer {\n         match x {\n-            0...0x0000_0000_0000_00ff => I8,\n-            0...0x0000_0000_0000_ffff => I16,\n-            0...0x0000_0000_ffff_ffff => I32,\n-            0...0xffff_ffff_ffff_ffff => I64,\n+            0..=0x0000_0000_0000_00ff => I8,\n+            0..=0x0000_0000_0000_ffff => I16,\n+            0..=0x0000_0000_ffff_ffff => I32,\n+            0..=0xffff_ffff_ffff_ffff => I64,\n             _ => I128,\n         }\n     }"}, {"sha": "dd09bf96da594e3dedd478073b545b808fc0cc66", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -207,7 +207,7 @@ let string = \"salutations !\";\n // The ordering relation for strings can't be evaluated at compile time,\n // so this doesn't work:\n match string {\n-    \"hello\" ... \"world\" => {}\n+    \"hello\" ..= \"world\" => {}\n     _ => {}\n }\n \n@@ -2146,7 +2146,7 @@ fn main() -> i32 { 0 }\n \n let x = 1u8;\n match x {\n-    0u8...3i8 => (),\n+    0u8..=3i8 => (),\n     // error: mismatched types in range: expected u8, found i8\n     _ => ()\n }\n@@ -2189,7 +2189,7 @@ as the type you're matching on. Example:\n let x = 1u8;\n \n match x {\n-    0u8...3u8 => (), // ok!\n+    0u8..=3u8 => (), // ok!\n     _ => ()\n }\n ```"}, {"sha": "4c306d9b2d37505087f7c10643ffdbbe97118f57", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -125,9 +125,9 @@ impl FromHex for str {\n             buf <<= 4;\n \n             match byte {\n-                b'A'...b'F' => buf |= byte - b'A' + 10,\n-                b'a'...b'f' => buf |= byte - b'a' + 10,\n-                b'0'...b'9' => buf |= byte - b'0',\n+                b'A'..=b'F' => buf |= byte - b'A' + 10,\n+                b'a'..=b'f' => buf |= byte - b'a' + 10,\n+                b'0'..=b'9' => buf |= byte - b'0',\n                 b' '|b'\\r'|b'\\n'|b'\\t' => {\n                     buf >>= 4;\n                     continue"}, {"sha": "9959d5ce40d2d20c0384ffe230db1c2441c6ad6c", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -1557,14 +1557,14 @@ impl<T: Iterator<Item=char>> Parser<T> {\n                 self.bump();\n \n                 // A leading '0' must be the only digit before the decimal point.\n-                if let '0' ... '9' = self.ch_or_null() {\n+                if let '0' ..= '9' = self.ch_or_null() {\n                     return self.error(InvalidNumber)\n                 }\n             },\n-            '1' ... '9' => {\n+            '1' ..= '9' => {\n                 while !self.eof() {\n                     match self.ch_or_null() {\n-                        c @ '0' ... '9' => {\n+                        c @ '0' ..= '9' => {\n                             accum = accum.wrapping_mul(10);\n                             accum = accum.wrapping_add((c as u64) - ('0' as u64));\n \n@@ -1588,14 +1588,14 @@ impl<T: Iterator<Item=char>> Parser<T> {\n \n         // Make sure a digit follows the decimal place.\n         match self.ch_or_null() {\n-            '0' ... '9' => (),\n+            '0' ..= '9' => (),\n              _ => return self.error(InvalidNumber)\n         }\n \n         let mut dec = 1.0;\n         while !self.eof() {\n             match self.ch_or_null() {\n-                c @ '0' ... '9' => {\n+                c @ '0' ..= '9' => {\n                     dec /= 10.0;\n                     res += (((c as isize) - ('0' as isize)) as f64) * dec;\n                     self.bump();\n@@ -1622,12 +1622,12 @@ impl<T: Iterator<Item=char>> Parser<T> {\n \n         // Make sure a digit follows the exponent place.\n         match self.ch_or_null() {\n-            '0' ... '9' => (),\n+            '0' ..= '9' => (),\n             _ => return self.error(InvalidNumber)\n         }\n         while !self.eof() {\n             match self.ch_or_null() {\n-                c @ '0' ... '9' => {\n+                c @ '0' ..= '9' => {\n                     exp *= 10;\n                     exp += (c as usize) - ('0' as usize);\n \n@@ -1653,7 +1653,7 @@ impl<T: Iterator<Item=char>> Parser<T> {\n         while i < 4 && !self.eof() {\n             self.bump();\n             n = match self.ch_or_null() {\n-                c @ '0' ... '9' => n * 16 + ((c as u16) - ('0' as u16)),\n+                c @ '0' ..= '9' => n * 16 + ((c as u16) - ('0' as u16)),\n                 'a' | 'A' => n * 16 + 10,\n                 'b' | 'B' => n * 16 + 11,\n                 'c' | 'C' => n * 16 + 12,\n@@ -1695,13 +1695,13 @@ impl<T: Iterator<Item=char>> Parser<T> {\n                     'r' => res.push('\\r'),\n                     't' => res.push('\\t'),\n                     'u' => match self.decode_hex_escape()? {\n-                        0xDC00 ... 0xDFFF => {\n+                        0xDC00 ..= 0xDFFF => {\n                             return self.error(LoneLeadingSurrogateInHexEscape)\n                         }\n \n                         // Non-BMP characters are encoded as a sequence of\n                         // two hex escapes, representing UTF-16 surrogates.\n-                        n1 @ 0xD800 ... 0xDBFF => {\n+                        n1 @ 0xD800 ..= 0xDBFF => {\n                             match (self.next_char(), self.next_char()) {\n                                 (Some('\\\\'), Some('u')) => (),\n                                 _ => return self.error(UnexpectedEndOfHexEscape),\n@@ -1928,7 +1928,7 @@ impl<T: Iterator<Item=char>> Parser<T> {\n             'n' => { self.parse_ident(\"ull\", NullValue) }\n             't' => { self.parse_ident(\"rue\", BooleanValue(true)) }\n             'f' => { self.parse_ident(\"alse\", BooleanValue(false)) }\n-            '0' ... '9' | '-' => self.parse_number(),\n+            '0' ..= '9' | '-' => self.parse_number(),\n             '\"' => match self.parse_str() {\n                 Ok(s) => StringValue(s),\n                 Err(e) => Error(e),"}, {"sha": "61d7ed463dd3856010c89f9ab624602fb0708b26", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -263,7 +263,7 @@ pub fn demangle(writer: &mut Write, mut s: &str, format: PrintFormat) -> io::Res\n         let candidate = &s[i + llvm.len()..];\n         let all_hex = candidate.chars().all(|c| {\n             match c {\n-                'A' ... 'F' | '0' ... '9' => true,\n+                'A' ..= 'F' | '0' ..= '9' => true,\n                 _ => false,\n             }\n         });"}, {"sha": "bbb5980bd9da6e6f112685931325191ff120a14c", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -76,7 +76,7 @@ impl CodePoint {\n     #[inline]\n     pub fn from_u32(value: u32) -> Option<CodePoint> {\n         match value {\n-            0 ... 0x10FFFF => Some(CodePoint { value: value }),\n+            0 ..= 0x10FFFF => Some(CodePoint { value: value }),\n             _ => None\n         }\n     }\n@@ -101,7 +101,7 @@ impl CodePoint {\n     #[inline]\n     pub fn to_char(&self) -> Option<char> {\n         match self.value {\n-            0xD800 ... 0xDFFF => None,\n+            0xD800 ..= 0xDFFF => None,\n             _ => Some(unsafe { char::from_u32_unchecked(self.value) })\n         }\n     }\n@@ -305,7 +305,7 @@ impl Wtf8Buf {\n     /// like concatenating ill-formed UTF-16 strings effectively would.\n     #[inline]\n     pub fn push(&mut self, code_point: CodePoint) {\n-        if let trail @ 0xDC00...0xDFFF = code_point.to_u32() {\n+        if let trail @ 0xDC00..=0xDFFF = code_point.to_u32() {\n             if let Some(lead) = (&*self).final_lead_surrogate() {\n                 let len_without_lead_surrogate = self.len() - 3;\n                 self.bytes.truncate(len_without_lead_surrogate);\n@@ -525,7 +525,7 @@ impl Wtf8 {\n     #[inline]\n     pub fn ascii_byte_at(&self, position: usize) -> u8 {\n         match self.bytes[position] {\n-            ascii_byte @ 0x00 ... 0x7F => ascii_byte,\n+            ascii_byte @ 0x00 ..= 0x7F => ascii_byte,\n             _ => 0xFF\n         }\n     }\n@@ -630,7 +630,7 @@ impl Wtf8 {\n             return None\n         }\n         match &self.bytes[(len - 3)..] {\n-            &[0xED, b2 @ 0xA0...0xAF, b3] => Some(decode_surrogate(b2, b3)),\n+            &[0xED, b2 @ 0xA0..=0xAF, b3] => Some(decode_surrogate(b2, b3)),\n             _ => None\n         }\n     }\n@@ -642,7 +642,7 @@ impl Wtf8 {\n             return None\n         }\n         match &self.bytes[..3] {\n-            &[0xED, b2 @ 0xB0...0xBF, b3] => Some(decode_surrogate(b2, b3)),\n+            &[0xED, b2 @ 0xB0..=0xBF, b3] => Some(decode_surrogate(b2, b3)),\n             _ => None\n         }\n     }"}, {"sha": "53465c071f33a1db651f031967010d4b513baca4", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -617,7 +617,7 @@ pub enum PatKind {\n     /// A literal\n     Lit(P<Expr>),\n     /// A range pattern, e.g. `1...2`, `1..=2` or `1..2`\n-    Range(P<Expr>, P<Expr>, RangeEnd),\n+    Range(P<Expr>, P<Expr>, Spanned<RangeEnd>),\n     /// `[a, b, ..i, y, z]` is represented as:\n     ///     `PatKind::Slice(box [a, b], Some(i), box [y, z])`\n     Slice(Vec<P<Pat>>, Option<P<Pat>>, Vec<P<Pat>>),\n@@ -843,11 +843,11 @@ pub struct Local {\n \n /// An arm of a 'match'.\n ///\n-/// E.g. `0...10 => { println!(\"match!\") }` as in\n+/// E.g. `0..=10 => { println!(\"match!\") }` as in\n ///\n /// ```\n /// match 123 {\n-///     0...10 => { println!(\"match!\") },\n+///     0..=10 => { println!(\"match!\") },\n ///     _ => { println!(\"no match!\") },\n /// }\n /// ```"}, {"sha": "c813ec1977b881bc00ee8cb3f6379af7f89c9c79", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -28,6 +28,7 @@ use self::AttributeGate::*;\n use rustc_target::spec::abi::Abi;\n use ast::{self, NodeId, PatKind, RangeEnd};\n use attr;\n+use codemap::Spanned;\n use edition::{ALL_EDITIONS, Edition};\n use syntax_pos::{Span, DUMMY_SP};\n use errors::{DiagnosticBuilder, Handler, FatalError};\n@@ -1752,7 +1753,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                   pattern.span,\n                                   \"box pattern syntax is experimental\");\n             }\n-            PatKind::Range(_, _, RangeEnd::Excluded) => {\n+            PatKind::Range(_, _, Spanned { node: RangeEnd::Excluded, .. }) => {\n                 gate_feature_post!(&self, exclusive_range_pattern, pattern.span,\n                                    \"exclusive range pattern syntax is experimental\");\n             }"}, {"sha": "712d00fde32db9293496c68b0716a1c064b56a83", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -1137,10 +1137,10 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n             }\n             PatKind::Box(inner) => PatKind::Box(folder.fold_pat(inner)),\n             PatKind::Ref(inner, mutbl) => PatKind::Ref(folder.fold_pat(inner), mutbl),\n-            PatKind::Range(e1, e2, end) => {\n+            PatKind::Range(e1, e2, Spanned { span, node: end }) => {\n                 PatKind::Range(folder.fold_expr(e1),\n                                folder.fold_expr(e2),\n-                               folder.fold_range_end(end))\n+                               Spanned { span, node: folder.fold_range_end(end) })\n             },\n             PatKind::Slice(before, slice, after) => {\n                 PatKind::Slice(before.move_map(|x| folder.fold_pat(x)),"}, {"sha": "c09cfd910d207adf8efba17bf785781876fdc5c4", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -266,7 +266,7 @@ impl<'a> StringReader<'a> {\n     /// Pushes a character to a message string for error reporting\n     fn push_escaped_char_for_msg(m: &mut String, c: char) {\n         match c {\n-            '\\u{20}'...'\\u{7e}' => {\n+            '\\u{20}'..='\\u{7e}' => {\n                 // Don't escape \\, ' or \" for user-facing messages\n                 m.push(c);\n             }\n@@ -779,7 +779,7 @@ impl<'a> StringReader<'a> {\n                     base = 16;\n                     num_digits = self.scan_digits(16, 16);\n                 }\n-                '0'...'9' | '_' | '.' | 'e' | 'E' => {\n+                '0'..='9' | '_' | '.' | 'e' | 'E' => {\n                     num_digits = self.scan_digits(10, 10) + 1;\n                 }\n                 _ => {"}, {"sha": "21bd6c083244d0f8050d67dcf29bd313d5dee087", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -4024,12 +4024,14 @@ impl<'a> Parser<'a> {\n                             _ => panic!(\"can only parse `..`/`...`/`..=` for ranges \\\n                                          (checked above)\"),\n                         };\n+                        let op_span = self.span;\n                         // Parse range\n                         let span = lo.to(self.prev_span);\n                         let begin = self.mk_expr(span, ExprKind::Path(qself, path), ThinVec::new());\n                         self.bump();\n                         let end = self.parse_pat_range_end()?;\n-                        pat = PatKind::Range(begin, end, end_kind);\n+                        let op = Spanned { span: op_span, node: end_kind };\n+                        pat = PatKind::Range(begin, end, op);\n                     }\n                     token::OpenDelim(token::Brace) => {\n                         if qself.is_some() {\n@@ -4065,17 +4067,22 @@ impl<'a> Parser<'a> {\n                 // Try to parse everything else as literal with optional minus\n                 match self.parse_literal_maybe_minus() {\n                     Ok(begin) => {\n-                        if self.eat(&token::DotDotDot) {\n+                        let op_span = self.span;\n+                        if self.check(&token::DotDot) || self.check(&token::DotDotEq) ||\n+                                self.check(&token::DotDotDot) {\n+                            let end_kind = if self.eat(&token::DotDotDot) {\n+                                RangeEnd::Included(RangeSyntax::DotDotDot)\n+                            } else if self.eat(&token::DotDotEq) {\n+                                RangeEnd::Included(RangeSyntax::DotDotEq)\n+                            } else if self.eat(&token::DotDot) {\n+                                RangeEnd::Excluded\n+                            } else {\n+                                panic!(\"impossible case: we already matched \\\n+                                        on a range-operator token\")\n+                            };\n                             let end = self.parse_pat_range_end()?;\n-                            pat = PatKind::Range(begin, end,\n-                                    RangeEnd::Included(RangeSyntax::DotDotDot));\n-                        } else if self.eat(&token::DotDotEq) {\n-                            let end = self.parse_pat_range_end()?;\n-                            pat = PatKind::Range(begin, end,\n-                                    RangeEnd::Included(RangeSyntax::DotDotEq));\n-                        } else if self.eat(&token::DotDot) {\n-                            let end = self.parse_pat_range_end()?;\n-                            pat = PatKind::Range(begin, end, RangeEnd::Excluded);\n+                            let op = Spanned { span: op_span, node: end_kind };\n+                            pat = PatKind::Range(begin, end, op);\n                         } else {\n                             pat = PatKind::Lit(begin);\n                         }\n@@ -4096,7 +4103,9 @@ impl<'a> Parser<'a> {\n \n         if !allow_range_pat {\n             match pat.node {\n-                PatKind::Range(_, _, RangeEnd::Included(RangeSyntax::DotDotDot)) => {}\n+                PatKind::Range(\n+                    _, _, Spanned { node: RangeEnd::Included(RangeSyntax::DotDotDot), .. }\n+                ) => {},\n                 PatKind::Range(..) => {\n                     let mut err = self.struct_span_err(\n                         pat.span,"}, {"sha": "3359225e1596595647c813057f791f73c1e9375e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -16,7 +16,7 @@ use ast::{SelfKind, GenericBound, TraitBoundModifier};\n use ast::{Attribute, MacDelimiter, GenericArg};\n use util::parser::{self, AssocOp, Fixity};\n use attr;\n-use codemap::{self, CodeMap};\n+use codemap::{self, CodeMap, Spanned};\n use syntax_pos::{self, BytePos};\n use syntax_pos::hygiene::{Mark, SyntaxContext};\n use parse::token::{self, BinOpToken, Token};\n@@ -2624,7 +2624,7 @@ impl<'a> State<'a> {\n                 self.print_pat(inner)?;\n             }\n             PatKind::Lit(ref e) => self.print_expr(&**e)?,\n-            PatKind::Range(ref begin, ref end, ref end_kind) => {\n+            PatKind::Range(ref begin, ref end, Spanned { node: ref end_kind, .. }) => {\n                 self.print_expr(begin)?;\n                 self.s.space()?;\n                 match *end_kind {"}, {"sha": "2393af76c340b9e13f10caf5081a42f17bbab480", "filename": "src/libsyntax_ext/format_foreign.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibsyntax_ext%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibsyntax_ext%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat_foreign.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -374,7 +374,7 @@ pub mod printf {\n \n         if let Start = state {\n             match c {\n-                '1'...'9' => {\n+                '1'..='9' => {\n                     let end = at_next_cp_while(next, is_digit);\n                     match end.next_cp() {\n                         // Yes, this *is* the parameter.\n@@ -416,7 +416,7 @@ pub mod printf {\n                     state = WidthArg;\n                     move_to!(next);\n                 },\n-                '1' ... '9' => {\n+                '1' ..= '9' => {\n                     let end = at_next_cp_while(next, is_digit);\n                     state = Prec;\n                     width = Some(Num::from_str(at.slice_between(end).unwrap(), None));\n@@ -477,7 +477,7 @@ pub mod printf {\n                         }\n                     }\n                 },\n-                '0' ... '9' => {\n+                '0' ..= '9' => {\n                     let end = at_next_cp_while(next, is_digit);\n                     state = Length;\n                     precision = Some(Num::from_str(at.slice_between(end).unwrap(), None));\n@@ -570,7 +570,7 @@ pub mod printf {\n \n     fn is_digit(c: char) -> bool {\n         match c {\n-            '0' ... '9' => true,\n+            '0' ..= '9' => true,\n             _ => false\n         }\n     }\n@@ -799,7 +799,7 @@ pub mod shell {\n             let start = s.find('$')?;\n             match s[start+1..].chars().next()? {\n                 '$' => return Some((Substitution::Escape, &s[start+2..])),\n-                c @ '0' ... '9' => {\n+                c @ '0' ..= '9' => {\n                     let n = (c as u8) - b'0';\n                     return Some((Substitution::Ordinal(n), &s[start+2..]));\n                 },\n@@ -836,14 +836,14 @@ pub mod shell {\n \n     fn is_ident_head(c: char) -> bool {\n         match c {\n-            'a' ... 'z' | 'A' ... 'Z' | '_' => true,\n+            'a' ..= 'z' | 'A' ..= 'Z' | '_' => true,\n             _ => false\n         }\n     }\n \n     fn is_ident_tail(c: char) -> bool {\n         match c {\n-            '0' ... '9' => true,\n+            '0' ..= '9' => true,\n             c => is_ident_head(c)\n         }\n     }"}, {"sha": "756e0c059a729a57ddf00b52c78a43cbfc31901d", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -818,8 +818,8 @@ impl Encodable for FileMap {\n                     };\n \n                     let bytes_per_diff: u8 = match max_line_length {\n-                        0 ... 0xFF => 1,\n-                        0x100 ... 0xFFFF => 2,\n+                        0 ..= 0xFF => 1,\n+                        0x100 ..= 0xFFFF => 2,\n                         _ => 4\n                     };\n "}, {"sha": "b720d55594fd17f5e4ad89f4ac0820b5f91a5758", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -215,15 +215,15 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables) -> Result<Vec<\n                             return Err(\"stack is empty\".to_string());\n                         }\n                     }\n-                    ':' | '#' | ' ' | '.' | '0'...'9' => {\n+                    ':' | '#' | ' ' | '.' | '0'..='9' => {\n                         let mut flags = Flags::new();\n                         let mut fstate = FormatStateFlags;\n                         match cur {\n                             ':' => (),\n                             '#' => flags.alternate = true,\n                             ' ' => flags.space = true,\n                             '.' => fstate = FormatStatePrecision,\n-                            '0'...'9' => {\n+                            '0'..='9' => {\n                                 flags.width = cur as usize - '0' as usize;\n                                 fstate = FormatStateWidth;\n                             }\n@@ -337,14 +337,14 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables) -> Result<Vec<\n                     (FormatStateFlags, ' ') => {\n                         flags.space = true;\n                     }\n-                    (FormatStateFlags, '0'...'9') => {\n+                    (FormatStateFlags, '0'..='9') => {\n                         flags.width = cur as usize - '0' as usize;\n                         *fstate = FormatStateWidth;\n                     }\n                     (FormatStateFlags, '.') => {\n                         *fstate = FormatStatePrecision;\n                     }\n-                    (FormatStateWidth, '0'...'9') => {\n+                    (FormatStateWidth, '0'..='9') => {\n                         let old = flags.width;\n                         flags.width = flags.width * 10 + (cur as usize - '0' as usize);\n                         if flags.width < old {\n@@ -354,7 +354,7 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables) -> Result<Vec<\n                     (FormatStateWidth, '.') => {\n                         *fstate = FormatStatePrecision;\n                     }\n-                    (FormatStatePrecision, '0'...'9') => {\n+                    (FormatStatePrecision, '0'..='9') => {\n                         let old = flags.precision;\n                         flags.precision = flags.precision * 10 + (cur as usize - '0' as usize);\n                         if flags.precision < old {"}, {"sha": "7daf0d3c4e29758522cab5cd06e86d4dc2b1c120", "filename": "src/test/compile-fail/associated-path-shl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fcompile-fail%2Fassociated-path-shl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fcompile-fail%2Fassociated-path-shl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-path-shl.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let _: <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n     let _ = <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n     let <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n-    let 0 ... <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+    let 0 ..= <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n                            //~^ ERROR only char and numeric types are allowed in range patterns\n     <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n }"}, {"sha": "6063755c04f2873f8d24707ff237b3bf8e7a5a43", "filename": "src/test/compile-fail/issue-27895.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fcompile-fail%2Fissue-27895.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fcompile-fail%2Fissue-27895.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27895.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -13,7 +13,7 @@ fn main() {\n     let index = 6;\n \n     match i {\n-        0...index => println!(\"winner\"),\n+        0..=index => println!(\"winner\"),\n         //~^ ERROR runtime values cannot be referenced in patterns\n         _ => println!(\"hello\"),\n     }"}, {"sha": "29912de37eb0e793c1aa4c365e8f7009393a6069", "filename": "src/test/compile-fail/issue-41255.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fcompile-fail%2Fissue-41255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fcompile-fail%2Fissue-41255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-41255.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -27,7 +27,7 @@ fn main() {\n                            //~| WARNING hard error\n                            //~| ERROR floating-point types cannot be used in patterns\n                            //~| WARNING hard error\n-        39.0 ... 70.0 => {}, //~ ERROR floating-point types cannot be used in patterns\n+        39.0 ..= 70.0 => {}, //~ ERROR floating-point types cannot be used in patterns\n                              //~| WARNING hard error\n                              //~| ERROR floating-point types cannot be used in patterns\n                              //~| WARNING hard error"}, {"sha": "b42e2ff919acbd958005f45670d130f5deaa9f70", "filename": "src/test/compile-fail/match-range-fail-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-2.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -12,7 +12,7 @@\n \n fn main() {\n     match 5 {\n-        6 ... 1 => { }\n+        6 ..= 1 => { }\n         _ => { }\n     };\n     //~^^^ ERROR lower range bound must be less than or equal to upper\n@@ -24,7 +24,7 @@ fn main() {\n     //~^^^ ERROR lower range bound must be less than upper\n \n     match 5u64 {\n-        0xFFFF_FFFF_FFFF_FFFF ... 1 => { }\n+        0xFFFF_FFFF_FFFF_FFFF ..= 1 => { }\n         _ => { }\n     };\n     //~^^^ ERROR lower range bound must be less than or equal to upper"}, {"sha": "ca99b0c7b8938fa72e561f3e81acbd4d40946066", "filename": "src/test/compile-fail/match-range-fail.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -10,21 +10,21 @@\n \n fn main() {\n     match \"wow\" {\n-        \"bar\" ... \"foo\" => { }\n+        \"bar\" ..= \"foo\" => { }\n     };\n     //~^^ ERROR only char and numeric types are allowed in range\n     //~| start type: &'static str\n     //~| end type: &'static str\n \n     match \"wow\" {\n-        10 ... \"what\" => ()\n+        10 ..= \"what\" => ()\n     };\n     //~^^ ERROR only char and numeric types are allowed in range\n     //~| start type: {integer}\n     //~| end type: &'static str\n \n     match 5 {\n-        'c' ... 100 => { }\n+        'c' ..= 100 => { }\n         _ => { }\n     };\n     //~^^^ ERROR mismatched types"}, {"sha": "1aae25105a8132f3662396a72fa6e18aede433a1", "filename": "src/test/compile-fail/non-constant-in-const-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fcompile-fail%2Fnon-constant-in-const-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fcompile-fail%2Fnon-constant-in-const-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-in-const-path.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -11,7 +11,7 @@\n fn main() {\n     let x = 0;\n     match 1 {\n-        0 ... x => {}\n+        0 ..= x => {}\n         //~^ ERROR runtime values cannot be referenced in patterns\n     };\n }"}, {"sha": "8fef98f815f22511b748e10fcee465555edfdad8", "filename": "src/test/compile-fail/patkind-litrange-no-expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fcompile-fail%2Fpatkind-litrange-no-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fcompile-fail%2Fpatkind-litrange-no-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpatkind-litrange-no-expr.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -17,7 +17,7 @@ macro_rules! enum_number {\n         fn foo(value: i32) -> Option<$name> {\n             match value {\n                 $( $value => Some($name::$variant), )* // PatKind::Lit\n-                $( $value ... 42 => Some($name::$variant), )* // PatKind::Range\n+                $( $value ..= 42 => Some($name::$variant), )* // PatKind::Range\n                 _ => None\n             }\n         }\n@@ -32,4 +32,3 @@ enum_number!(Change {\n });\n \n fn main() {}\n-"}, {"sha": "018a3b2ae32580aabb67e1933f836c6b1ad70863", "filename": "src/test/compile-fail/qualified-path-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fcompile-fail%2Fqualified-path-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fcompile-fail%2Fqualified-path-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqualified-path-params.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -29,6 +29,6 @@ fn main() {\n     match 10 {\n         <S as Tr>::A::f::<u8> => {}\n         //~^ ERROR expected unit struct/variant or constant, found method `<<S as Tr>::A>::f<u8>`\n-        0 ... <S as Tr>::A::f::<u8> => {} //~ ERROR only char and numeric types are allowed in range\n+        0 ..= <S as Tr>::A::f::<u8> => {} //~ ERROR only char and numeric types are allowed in range\n     }\n }"}, {"sha": "7b4009481abd473eb44847f7db62f7a2ccd2df48", "filename": "src/test/compile-fail/refutable-pattern-errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-errors.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n \n-fn func((1, (Some(1), 2...3)): (isize, (Option<isize>, isize))) { }\n+fn func((1, (Some(1), 2..=3)): (isize, (Option<isize>, isize))) { }\n //~^ ERROR refutable pattern in function argument: `(_, _)` not covered\n \n fn main() {\n-    let (1, (Some(1), 2...3)) = (1, (None, 2));\n+    let (1, (Some(1), 2..=3)) = (1, (None, 2));\n     //~^ ERROR refutable pattern in local binding: `(_, _)` not covered\n }"}, {"sha": "2ef7eba6c05d13ecd46c181a0e90d3aada71f1a5", "filename": "src/test/run-pass-fulldeps/ast_stmt_expr_attr.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -284,18 +284,20 @@ fn run() {\n \n     // FIXME: Allow attributes in pattern constexprs?\n     // would require parens in patterns to allow disambiguation...\n+    // \u2014which is now available under the `pattern_parentheses` feature gate\n+    // (tracking issue #51087)\n \n     reject_expr_parse(\"match 0 {\n-        0...#[attr] 10 => ()\n+        0..=#[attr] 10 => ()\n     }\");\n     reject_expr_parse(\"match 0 {\n-        0...#[attr] -10 => ()\n+        0..=#[attr] -10 => ()\n     }\");\n     reject_expr_parse(\"match 0 {\n-        0...-#[attr] 10 => ()\n+        0..=-#[attr] 10 => ()\n     }\");\n     reject_expr_parse(\"match 0 {\n-        0...#[attr] FOO => ()\n+        0..=#[attr] FOO => ()\n     }\");\n \n     // make sure we don't catch this bug again..."}, {"sha": "f5acb72429ae077754a26378cc602f7eac0f5aee", "filename": "src/test/run-pass/byte-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbyte-literals.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -36,7 +36,7 @@ pub fn main() {\n     }\n \n     match 100 {\n-        b'a' ... b'z' => {},\n+        b'a' ..= b'z' => {},\n         _ => panic!()\n     }\n "}, {"sha": "89d26aade2ec3de1dbebe0b7902727f75da520ba", "filename": "src/test/run-pass/inferred-suffix-in-pattern-range.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -12,21 +12,21 @@\n pub fn main() {\n     let x = 2;\n     let x_message = match x {\n-      0 ... 1    => { \"not many\".to_string() }\n+      0 ..= 1    => { \"not many\".to_string() }\n       _          => { \"lots\".to_string() }\n     };\n     assert_eq!(x_message, \"lots\".to_string());\n \n     let y = 2;\n     let y_message = match y {\n-      0 ... 1    => { \"not many\".to_string() }\n+      0 ..= 1    => { \"not many\".to_string() }\n       _          => { \"lots\".to_string() }\n     };\n     assert_eq!(y_message, \"lots\".to_string());\n \n     let z = 1u64;\n     let z_message = match z {\n-      0 ... 1    => { \"not many\".to_string() }\n+      0 ..= 1    => { \"not many\".to_string() }\n       _          => { \"lots\".to_string() }\n     };\n     assert_eq!(z_message, \"not many\".to_string());"}, {"sha": "b89964d968e8438f8f5bd10d363c08d0a25e6b76", "filename": "src/test/run-pass/issue-12582.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fissue-12582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fissue-12582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12582.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -16,15 +16,15 @@ pub fn main() {\n     assert_eq!(3, match (x, y) {\n         (1, 1) => 1,\n         (2, 2) => 2,\n-        (1...2, 2) => 3,\n+        (1..=2, 2) => 3,\n         _ => 4,\n     });\n \n     // nested tuple\n     assert_eq!(3, match ((x, y),) {\n         ((1, 1),) => 1,\n         ((2, 2),) => 2,\n-        ((1...2, 2),) => 3,\n+        ((1..=2, 2),) => 3,\n         _ => 4,\n     });\n }"}, {"sha": "2c460900ef6288c687220e0d7ee777904b3d0cb5", "filename": "src/test/run-pass/issue-13027.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fissue-13027.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fissue-13027.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13027.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -30,115 +30,115 @@ pub fn main() {\n fn lit_shadow_range() {\n     assert_eq!(2, match 1 {\n         1 if false => 1,\n-        1...2 => 2,\n+        1..=2 => 2,\n         _ => 3\n     });\n \n     let x = 0;\n     assert_eq!(2, match x+1 {\n         0 => 0,\n         1 if false => 1,\n-        1...2 => 2,\n+        1..=2 => 2,\n         _ => 3\n     });\n \n     assert_eq!(2, match val() {\n         1 if false => 1,\n-        1...2 => 2,\n+        1..=2 => 2,\n         _ => 3\n     });\n \n     assert_eq!(2, match CONST {\n         0 => 0,\n         1 if false => 1,\n-        1...2 => 2,\n+        1..=2 => 2,\n         _ => 3\n     });\n \n     // value is out of the range of second arm, should match wildcard pattern\n     assert_eq!(3, match 3 {\n         1 if false => 1,\n-        1...2 => 2,\n+        1..=2 => 2,\n         _ => 3\n     });\n }\n \n fn range_shadow_lit() {\n     assert_eq!(2, match 1 {\n-        1...2 if false => 1,\n+        1..=2 if false => 1,\n         1 => 2,\n         _ => 3\n     });\n \n     let x = 0;\n     assert_eq!(2, match x+1 {\n         0 => 0,\n-        1...2 if false => 1,\n+        1..=2 if false => 1,\n         1 => 2,\n         _ => 3\n     });\n \n     assert_eq!(2, match val() {\n-        1...2 if false => 1,\n+        1..=2 if false => 1,\n         1 => 2,\n         _ => 3\n     });\n \n     assert_eq!(2, match CONST {\n         0 => 0,\n-        1...2 if false => 1,\n+        1..=2 if false => 1,\n         1 => 2,\n         _ => 3\n     });\n \n     // ditto\n     assert_eq!(3, match 3 {\n-        1...2 if false => 1,\n+        1..=2 if false => 1,\n         1 => 2,\n         _ => 3\n     });\n }\n \n fn range_shadow_range() {\n     assert_eq!(2, match 1 {\n-        0...2 if false => 1,\n-        1...3 => 2,\n+        0..=2 if false => 1,\n+        1..=3 => 2,\n         _ => 3,\n     });\n \n     let x = 0;\n     assert_eq!(2, match x+1 {\n         100 => 0,\n-        0...2 if false => 1,\n-        1...3 => 2,\n+        0..=2 if false => 1,\n+        1..=3 => 2,\n         _ => 3,\n     });\n \n     assert_eq!(2, match val() {\n-        0...2 if false => 1,\n-        1...3 => 2,\n+        0..=2 if false => 1,\n+        1..=3 => 2,\n         _ => 3,\n     });\n \n     assert_eq!(2, match CONST {\n         100 => 0,\n-        0...2 if false => 1,\n-        1...3 => 2,\n+        0..=2 if false => 1,\n+        1..=3 => 2,\n         _ => 3,\n     });\n \n     // ditto\n     assert_eq!(3, match 5 {\n-        0...2 if false => 1,\n-        1...3 => 2,\n+        0..=2 if false => 1,\n+        1..=3 => 2,\n         _ => 3,\n     });\n }\n \n fn multi_pats_shadow_lit() {\n     assert_eq!(2, match 1 {\n         100 => 0,\n-        0 | 1...10 if false => 1,\n+        0 | 1..=10 if false => 1,\n         1 => 2,\n         _ => 3,\n     });\n@@ -147,8 +147,8 @@ fn multi_pats_shadow_lit() {\n fn multi_pats_shadow_range() {\n     assert_eq!(2, match 1 {\n         100 => 0,\n-        0 | 1...10 if false => 1,\n-        1...3 => 2,\n+        0 | 1..=10 if false => 1,\n+        1..=3 => 2,\n         _ => 3,\n     });\n }\n@@ -157,16 +157,16 @@ fn lit_shadow_multi_pats() {\n     assert_eq!(2, match 1 {\n         100 => 0,\n         1 if false => 1,\n-        0 | 1...10 => 2,\n+        0 | 1..=10 => 2,\n         _ => 3,\n     });\n }\n \n fn range_shadow_multi_pats() {\n     assert_eq!(2, match 1 {\n         100 => 0,\n-        1...3 if false => 1,\n-        0 | 1...10 => 2,\n+        1..=3 if false => 1,\n+        0 | 1..=10 => 2,\n         _ => 3,\n     });\n }"}, {"sha": "bc28dc54de6f66e57aa74eb501446f0f23ef0365", "filename": "src/test/run-pass/issue-13867.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fissue-13867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fissue-13867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13867.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -19,38 +19,38 @@ enum Foo {\n \n fn main() {\n     let r = match (Foo::FooNullary, 'a') {\n-        (Foo::FooUint(..), 'a'...'z') => 1,\n+        (Foo::FooUint(..), 'a'..='z') => 1,\n         (Foo::FooNullary, 'x') => 2,\n         _ => 0\n     };\n     assert_eq!(r, 0);\n \n     let r = match (Foo::FooUint(0), 'a') {\n-        (Foo::FooUint(1), 'a'...'z') => 1,\n+        (Foo::FooUint(1), 'a'..='z') => 1,\n         (Foo::FooUint(..), 'x') => 2,\n         (Foo::FooNullary, 'a') => 3,\n         _ => 0\n     };\n     assert_eq!(r, 0);\n \n     let r = match ('a', Foo::FooUint(0)) {\n-        ('a'...'z', Foo::FooUint(1)) => 1,\n+        ('a'..='z', Foo::FooUint(1)) => 1,\n         ('x', Foo::FooUint(..)) => 2,\n         ('a', Foo::FooNullary) => 3,\n         _ => 0\n     };\n     assert_eq!(r, 0);\n \n     let r = match ('a', 'a') {\n-        ('a'...'z', 'b') => 1,\n-        ('x', 'a'...'z') => 2,\n+        ('a'..='z', 'b') => 1,\n+        ('x', 'a'..='z') => 2,\n         _ => 0\n     };\n     assert_eq!(r, 0);\n \n     let r = match ('a', 'a') {\n-        ('a'...'z', 'b') => 1,\n-        ('x', 'a'...'z') => 2,\n+        ('a'..='z', 'b') => 1,\n+        ('x', 'a'..='z') => 2,\n         ('a', 'a') => 3,\n         _ => 0\n     };"}, {"sha": "322a3d8c9bb2e3240414fc661265fad70ed36182", "filename": "src/test/run-pass/issue-18060.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fissue-18060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fissue-18060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18060.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -11,7 +11,7 @@\n // Regression test for #18060: match arms were matching in the wrong order.\n \n fn main() {\n-    assert_eq!(2, match (1, 3) { (0, 2...5) => 1, (1, 3) => 2, (_, 2...5) => 3, (_, _) => 4 });\n-    assert_eq!(2, match (1, 3) {                  (1, 3) => 2, (_, 2...5) => 3, (_, _) => 4 });\n-    assert_eq!(2, match (1, 7) { (0, 2...5) => 1, (1, 7) => 2, (_, 2...5) => 3, (_, _) => 4 });\n+    assert_eq!(2, match (1, 3) { (0, 2..=5) => 1, (1, 3) => 2, (_, 2..=5) => 3, (_, _) => 4 });\n+    assert_eq!(2, match (1, 3) {                  (1, 3) => 2, (_, 2..=5) => 3, (_, _) => 4 });\n+    assert_eq!(2, match (1, 7) { (0, 2..=5) => 1, (1, 7) => 2, (_, 2..=5) => 3, (_, _) => 4 });\n }"}, {"sha": "f4faab5e468539aff003f005751acf989fddb491", "filename": "src/test/run-pass/issue-18464.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fissue-18464.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fissue-18464.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18464.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -15,7 +15,7 @@ const HIGH_RANGE: char = '9';\n \n fn main() {\n     match '5' {\n-        LOW_RANGE...HIGH_RANGE => (),\n+        LOW_RANGE..=HIGH_RANGE => (),\n         _ => ()\n     };\n }"}, {"sha": "99839b56506f997c7c1a8e0d8749725735f6749d", "filename": "src/test/run-pass/issue-21475.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fissue-21475.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fissue-21475.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21475.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -14,9 +14,9 @@ use m::{START, END};\n \n fn main() {\n     match 42 {\n-        m::START...m::END => {},\n-        0...m::END => {},\n-        m::START...59 => {},\n+        m::START..=m::END => {},\n+        0..=m::END => {},\n+        m::START..=59 => {},\n         _  => {},\n     }\n }"}, {"sha": "3735d36147d1fb6629c69d348b5c0fa740bd64d4", "filename": "src/test/run-pass/issue-26251.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fissue-26251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fissue-26251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-26251.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -12,9 +12,9 @@ fn main() {\n     let x = 'a';\n \n     let y = match x {\n-        'a'...'b' if false => \"one\",\n+        'a'..='b' if false => \"one\",\n         'a' => \"two\",\n-        'a'...'b' => \"three\",\n+        'a'..='b' => \"three\",\n         _ => panic!(\"what?\"),\n     };\n "}, {"sha": "34cb2930db0cf7d821bd1e2cbd47e1ed97ddd6ee", "filename": "src/test/run-pass/issue-35423.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fissue-35423.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fissue-35423.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-35423.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -12,7 +12,7 @@ fn main () {\n     let x = 4;\n     match x {\n         ref r if *r < 0 => println!(\"got negative num {} < 0\", r),\n-        e @ 1 ... 100 => println!(\"got number within range [1,100] {}\", e),\n+        e @ 1 ..= 100 => println!(\"got number within range [1,100] {}\", e),\n         _ => println!(\"no\"),\n     }\n }"}, {"sha": "3eb39ad6aad595e36c39ef4cb44ba5e51e8d7452", "filename": "src/test/run-pass/issue-7222.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fissue-7222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fissue-7222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7222.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -14,7 +14,7 @@ pub fn main() {\n     const FOO: f64 = 10.0;\n \n     match 0.0 {\n-        0.0 ... FOO => (),\n+        0.0 ..= FOO => (),\n         _ => ()\n     }\n }"}, {"sha": "6d5e8bc97c0e9b481a64e84e8074d2bfe61aafc4", "filename": "src/test/run-pass/macro-literal.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fmacro-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fmacro-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-literal.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -41,18 +41,18 @@ macro_rules! mtester_dbg {\n }\n \n macro_rules! catch_range {\n-    ($s:literal ... $e:literal) => {\n-        &format!(\"macro caught literal: {} ... {}\", $s, $e)\n+    ($s:literal ..= $e:literal) => {\n+        &format!(\"macro caught literal: {} ..= {}\", $s, $e)\n     };\n-    (($s:expr) ... ($e:expr)) => { // Must use ')' before '...'\n-        &format!(\"macro caught expr: {} ... {}\", $s, $e)\n+    (($s:expr) ..= ($e:expr)) => { // Must use ')' before '..='\n+        &format!(\"macro caught expr: {} ..= {}\", $s, $e)\n     };\n }\n \n macro_rules! pat_match {\n-    ($s:literal ... $e:literal) => {\n+    ($s:literal ..= $e:literal) => {\n         match 3 {\n-            $s ... $e => \"literal, in range\",\n+            $s ..= $e => \"literal, in range\",\n             _ => \"literal, other\",\n         }\n     };\n@@ -115,22 +115,22 @@ pub fn main() {\n     assert_eq!(mtester!('c'), \"macro caught literal: c\");\n     assert_eq!(mtester!(-1.2), \"macro caught literal: -1.2\");\n     assert_eq!(two_negative_literals!(-2 -3), \"macro caught literals: -2, -3\");\n-    assert_eq!(catch_range!(2 ... 3), \"macro caught literal: 2 ... 3\");\n+    assert_eq!(catch_range!(2 ..= 3), \"macro caught literal: 2 ..= 3\");\n     assert_eq!(match_attr!(#[attr] 1), \"attr matched literal\");\n     assert_eq!(test_user!(10, 20), \"literal\");\n     assert_eq!(mtester!(false), \"macro caught literal: false\");\n     assert_eq!(mtester!(true), \"macro caught literal: true\");\n     match_produced_attr!(\"a\");\n     let _a = LiteralProduced;\n-    assert_eq!(pat_match!(1 ... 3), \"literal, in range\");\n-    assert_eq!(pat_match!(4 ... 6), \"literal, other\");\n+    assert_eq!(pat_match!(1 ..= 3), \"literal, in range\");\n+    assert_eq!(pat_match!(4 ..= 6), \"literal, other\");\n \n     // Cases where 'expr' catches\n     assert_eq!(mtester!((-1.2)), \"macro caught expr: -1.2\");\n     assert_eq!(only_expr!(-1.2), \"macro caught expr: -1.2\");\n     assert_eq!(mtester!((1 + 3)), \"macro caught expr: 4\");\n     assert_eq!(mtester_dbg!(()), \"macro caught expr: ()\");\n-    assert_eq!(catch_range!((1 + 1) ... (2 + 2)), \"macro caught expr: 2 ... 4\");\n+    assert_eq!(catch_range!((1 + 1) ..= (2 + 2)), \"macro caught expr: 2 ..= 4\");\n     assert_eq!(match_attr!(#[attr] (1 + 2)), \"attr matched expr\");\n     assert_eq!(test_user!(10, (20 + 2)), \"expr\");\n "}, {"sha": "cf07345d3433a4d4cff04aa336cfb6665274e138", "filename": "src/test/run-pass/match-range-infer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fmatch-range-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fmatch-range-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-range-infer.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -12,15 +12,15 @@\n \n pub fn main() {\n     match 1 {\n-        1 ... 3 => {}\n+        1 ..= 3 => {}\n         _ => panic!(\"should match range\")\n     }\n     match 1 {\n-        1 ... 3u16 => {}\n+        1 ..= 3u16 => {}\n         _ => panic!(\"should match range with inferred start type\")\n     }\n     match 1 {\n-        1u16 ... 3 => {}\n+        1u16 ..= 3 => {}\n         _ => panic!(\"should match range with inferred end type\")\n     }\n }"}, {"sha": "b63ca7defd61a252ea0d9b56771b03dcafd5f727", "filename": "src/test/run-pass/match-range-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fmatch-range-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fmatch-range-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-range-static.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -15,7 +15,7 @@ const e: isize = 42;\n \n pub fn main() {\n     match 7 {\n-        s...e => (),\n+        s..=e => (),\n         _ => (),\n     }\n }"}, {"sha": "859edb80a07438ca51be080cba7c18cf2fa01241", "filename": "src/test/run-pass/match-range.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-range.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -12,15 +12,15 @@\n \n pub fn main() {\n     match 5_usize {\n-      1_usize...5_usize => {}\n+      1_usize..=5_usize => {}\n       _ => panic!(\"should match range\"),\n     }\n     match 1_usize {\n         1_usize..5_usize => {}\n         _ => panic!(\"should match range start\"),\n     }\n     match 5_usize {\n-      6_usize...7_usize => panic!(\"shouldn't match range\"),\n+      6_usize..=7_usize => panic!(\"shouldn't match range\"),\n       _ => {}\n     }\n     match 7_usize {\n@@ -29,23 +29,23 @@ pub fn main() {\n     }\n     match 5_usize {\n       1_usize => panic!(\"should match non-first range\"),\n-      2_usize...6_usize => {}\n+      2_usize..=6_usize => {}\n       _ => panic!(\"math is broken\")\n     }\n     match 'c' {\n-      'a'...'z' => {}\n+      'a'..='z' => {}\n       _ => panic!(\"should suppport char ranges\")\n     }\n     match -3 {\n-      -7...5 => {}\n+      -7..=5 => {}\n       _ => panic!(\"should match signed range\")\n     }\n     match 3.0f64 {\n-      1.0...5.0 => {}\n+      1.0..=5.0 => {}\n       _ => panic!(\"should match float range\")\n     }\n     match -1.5f64 {\n-      -3.6...3.6 => {}\n+      -3.6..=3.6 => {}\n       _ => panic!(\"should match negative float range\")\n     }\n     match 3.5 {"}, {"sha": "f38bd2de869712dcd976e21d6d40988fbd4ba527", "filename": "src/test/run-pass/rfc-2005-default-binding-mode/range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Frange.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -11,8 +11,8 @@\n pub fn main() {\n     let i = 5;\n     match &&&&i {\n-        1 ... 3 => panic!(),\n-        3 ... 8 => {},\n+        1 ..= 3 => panic!(),\n+        3 ..= 8 => {},\n         _ => panic!(),\n     }\n }"}, {"sha": "aace8c0c02b20bfc9b447a3f3280948c9ec4ca23", "filename": "src/test/ui/check_match/issue-43253.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -23,13 +23,13 @@ fn main() {\n \n     match 10 {\n         1..10 => {},\n-        9...10 => {},\n+        9..=10 => {},\n         _ => {},\n     }\n \n     match 10 {\n         1..10 => {},\n-        10...10 => {},\n+        10..=10 => {},\n         _ => {},\n     }\n \n@@ -42,13 +42,13 @@ fn main() {\n \n     match 10 {\n         1..10 => {},\n-        8...9 => {},\n+        8..=9 => {},\n         _ => {},\n     }\n \n     match 10 {\n         1..10 => {},\n-        9...9 => {},\n+        9..=9 => {},\n         _ => {},\n     }\n }"}, {"sha": "2af6a2a636841989909e6b48f80fb1f843de0849", "filename": "src/test/ui/check_match/issue-43253.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.stderr?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -13,12 +13,12 @@ LL | #![warn(unreachable_patterns)]\n warning: unreachable pattern\n   --> $DIR/issue-43253.rs:45:9\n    |\n-LL |         8...9 => {},\n+LL |         8..=9 => {},\n    |         ^^^^^\n \n warning: unreachable pattern\n   --> $DIR/issue-43253.rs:51:9\n    |\n-LL |         9...9 => {},\n+LL |         9..=9 => {},\n    |         ^^^^^\n "}, {"sha": "008ebf13c6354faf27666c63a5ecad42543d27d7", "filename": "src/test/ui/const-eval/const_signed_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Fconst-eval%2Fconst_signed_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Fconst-eval%2Fconst_signed_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_signed_pat.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -13,7 +13,7 @@\n fn main() {\n     const MIN: i8 = -5;\n     match 5i8 {\n-        MIN...-1 => {},\n+        MIN..=-1 => {},\n         _ => {},\n     }\n }"}, {"sha": "8ad7f11f0cee8ebe2978cf09362aa58925ef906b", "filename": "src/test/ui/const-eval/ref_to_int_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -11,8 +11,8 @@\n fn main() {\n     let n: Int = 40;\n     match n {\n-        0...10 => {},\n-        10...BAR => {}, //~ ERROR lower range bound must be less than or equal to upper\n+        0..=10 => {},\n+        10..=BAR => {}, //~ ERROR lower range bound must be less than or equal to upper\n         _ => {},\n     }\n }"}, {"sha": "64ea57702d7063b595624f28f0d1c3636cec080e", "filename": "src/test/ui/const-eval/ref_to_int_match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.stderr?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -1,7 +1,7 @@\n error[E0030]: lower range bound must be less than or equal to upper\n   --> $DIR/ref_to_int_match.rs:15:9\n    |\n-LL |         10...BAR => {}, //~ ERROR lower range bound must be less than or equal to upper\n+LL |         10..=BAR => {}, //~ ERROR lower range bound must be less than or equal to upper\n    |         ^^ lower bound larger than upper bound\n \n error: aborting due to previous error"}, {"sha": "328c46311af56b774177620d6979579ae4bb4db3", "filename": "src/test/ui/error-codes/E0029-teach.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let s = \"hoho\";\n \n     match s {\n-        \"hello\" ... \"world\" => {}\n+        \"hello\" ..= \"world\" => {}\n         //~^ ERROR only char and numeric types are allowed in range patterns\n         _ => {}\n     }"}, {"sha": "bb4fac9a4cb4c8d89031c188706a040f753a11f6", "filename": "src/test/ui/error-codes/E0029-teach.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -1,7 +1,7 @@\n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/E0029-teach.rs:17:9\n    |\n-LL |         \"hello\" ... \"world\" => {}\n+LL |         \"hello\" ..= \"world\" => {}\n    |         ^^^^^^^^^^^^^^^^^^^ ranges require char or numeric types\n    |\n    = note: start type: &'static str"}, {"sha": "c89b4f5b3771f3e64238763be377b0fd6c958a60", "filename": "src/test/ui/error-codes/E0029.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Ferror-codes%2FE0029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Ferror-codes%2FE0029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let s = \"hoho\";\n \n     match s {\n-        \"hello\" ... \"world\" => {}\n+        \"hello\" ..= \"world\" => {}\n         //~^ ERROR only char and numeric types are allowed in range patterns\n         _ => {}\n     }"}, {"sha": "d25666f9cf84aae1d33a2dfb07ba6e263c810cd1", "filename": "src/test/ui/error-codes/E0029.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -1,7 +1,7 @@\n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/E0029.rs:15:9\n    |\n-LL |         \"hello\" ... \"world\" => {}\n+LL |         \"hello\" ..= \"world\" => {}\n    |         ^^^^^^^^^^^^^^^^^^^ ranges require char or numeric types\n    |\n    = note: start type: &'static str"}, {"sha": "cf860cea24c86e17d7daffa2bef5a7e009229c28", "filename": "src/test/ui/error-codes/E0030-teach.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -12,7 +12,7 @@\n \n fn main() {\n     match 5u32 {\n-        1000 ... 5 => {}\n+        1000 ..= 5 => {}\n         //~^ ERROR lower range bound must be less than or equal to upper\n     }\n }"}, {"sha": "2a7243a95690e3f723717d513e242566fd29f289", "filename": "src/test/ui/error-codes/E0030-teach.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0030-teach.stderr?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -1,7 +1,7 @@\n error[E0030]: lower range bound must be less than or equal to upper\n   --> $DIR/E0030-teach.rs:15:9\n    |\n-LL |         1000 ... 5 => {}\n+LL |         1000 ..= 5 => {}\n    |         ^^^^ lower bound larger than upper bound\n    |\n    = note: When matching against a range, the compiler verifies that the range is non-empty. Range patterns include both end-points, so this is equivalent to requiring the start of the range to be less than or equal to the end of the range."}, {"sha": "e147dd932b0ddf34b413baeadd7f1fa289bc5ce5", "filename": "src/test/ui/error-codes/E0030.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Ferror-codes%2FE0030.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Ferror-codes%2FE0030.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0030.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -11,7 +11,7 @@\n \n fn main() {\n     match 5u32 {\n-        1000 ... 5 => {}\n+        1000 ..= 5 => {}\n         //~^ ERROR lower range bound must be less than or equal to upper\n     }\n }"}, {"sha": "020655ee45b541526433221583fdf6bbfe96bb34", "filename": "src/test/ui/error-codes/E0030.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Ferror-codes%2FE0030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Ferror-codes%2FE0030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0030.stderr?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -1,7 +1,7 @@\n error[E0030]: lower range bound must be less than or equal to upper\n   --> $DIR/E0030.rs:14:9\n    |\n-LL |         1000 ... 5 => {}\n+LL |         1000 ..= 5 => {}\n    |         ^^^^ lower bound larger than upper bound\n \n error: aborting due to previous error"}, {"sha": "106c55817c11af4c8a580233f2de768f2845a2e7", "filename": "src/test/ui/error-codes/E0308-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -11,7 +11,7 @@\n fn main() {\n     let x = 1u8;\n     match x {\n-        0u8...3i8 => (), //~ ERROR E0308\n+        0u8..=3i8 => (), //~ ERROR E0308\n         _ => ()\n     }\n }"}, {"sha": "8943c7332e94d21c5e0a119f3b1ce6599eb48ef9", "filename": "src/test/ui/error-codes/E0308-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/E0308-4.rs:14:9\n    |\n-LL |         0u8...3i8 => (), //~ ERROR E0308\n+LL |         0u8..=3i8 => (), //~ ERROR E0308\n    |         ^^^^^^^^^ expected u8, found i8\n \n error: aborting due to previous error"}, {"sha": "d16859df79e257c154b102d179e03cf01b55cc6d", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.fixed", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+// run-rustfix\n+\n+#![warn(ellipsis_inclusive_range_patterns)]\n+\n+fn main() {\n+    let despondency = 2;\n+    match despondency {\n+        1..=2 => {}\n+        //~^ WARN `...` range patterns are deprecated\n+        _ => {}\n+    }\n+}"}, {"sha": "9d418aec0858fc3b416e91c4cb2b5ba153f09728", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+// run-rustfix\n+\n+#![warn(ellipsis_inclusive_range_patterns)]\n+\n+fn main() {\n+    let despondency = 2;\n+    match despondency {\n+        1...2 => {}\n+        //~^ WARN `...` range patterns are deprecated\n+        _ => {}\n+    }\n+}"}, {"sha": "de04fed589b2396b09bed0f3032103c2bd39f78b", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -0,0 +1,12 @@\n+warning: `...` range patterns are deprecated\n+  --> $DIR/inclusive-range-pattern-syntax.rs:19:10\n+   |\n+LL |         1...2 => {}\n+   |          ^^^ help: use `..=` for an inclusive range\n+   |\n+note: lint level defined here\n+  --> $DIR/inclusive-range-pattern-syntax.rs:14:9\n+   |\n+LL | #![warn(ellipsis_inclusive_range_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "ce0c9947a05f67bb9ef281e30e421832a3528a4f", "filename": "src/test/ui/range-inclusive-pattern-precedence.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.rs?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -16,10 +16,14 @@\n // older ... syntax is still allowed as a stability guarantee.\n \n #![feature(box_patterns)]\n+#![warn(ellipsis_inclusive_range_patterns)]\n+\n \n pub fn main() {\n     match &12 {\n         &0...9 => {}\n+        //~^ WARN `...` range patterns are deprecated\n+        //~| HELP use `..=` for an inclusive range\n         &10..=15 => {}\n         //~^ ERROR the range pattern here has ambiguous interpretation\n         //~^^ HELP add parentheses to clarify the precedence\n@@ -29,6 +33,8 @@ pub fn main() {\n \n     match Box::new(12) {\n         box 0...9 => {}\n+        //~^ WARN `...` range patterns are deprecated\n+        //~| HELP use `..=` for an inclusive range\n         box 10..=15 => {}\n         //~^ ERROR the range pattern here has ambiguous interpretation\n         //~^^ HELP add parentheses to clarify the precedence"}, {"sha": "cd5ce3035c683247399ab268bbe3c0fac809c4bb", "filename": "src/test/ui/range-inclusive-pattern-precedence.stderr", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cf0691ea1879a84d09d53a19e0f0b06827cf95a/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.stderr?ref=0cf0691ea1879a84d09d53a19e0f0b06827cf95a", "patch": "@@ -1,14 +1,32 @@\n error: the range pattern here has ambiguous interpretation\n-  --> $DIR/range-inclusive-pattern-precedence.rs:23:10\n+  --> $DIR/range-inclusive-pattern-precedence.rs:27:10\n    |\n LL |         &10..=15 => {}\n    |          ^^^^^^^ help: add parentheses to clarify the precedence: `(10 ..=15)`\n \n error: the range pattern here has ambiguous interpretation\n-  --> $DIR/range-inclusive-pattern-precedence.rs:32:13\n+  --> $DIR/range-inclusive-pattern-precedence.rs:38:13\n    |\n LL |         box 10..=15 => {}\n    |             ^^^^^^^ help: add parentheses to clarify the precedence: `(10 ..=15)`\n \n+warning: `...` range patterns are deprecated\n+  --> $DIR/range-inclusive-pattern-precedence.rs:24:11\n+   |\n+LL |         &0...9 => {}\n+   |           ^^^ help: use `..=` for an inclusive range\n+   |\n+note: lint level defined here\n+  --> $DIR/range-inclusive-pattern-precedence.rs:19:9\n+   |\n+LL | #![warn(ellipsis_inclusive_range_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: `...` range patterns are deprecated\n+  --> $DIR/range-inclusive-pattern-precedence.rs:35:14\n+   |\n+LL |         box 0...9 => {}\n+   |              ^^^ help: use `..=` for an inclusive range\n+\n error: aborting due to 2 previous errors\n "}]}