{"sha": "cd495cb04f10eb2149f3a57bc0310af4c8c3ac3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNDk1Y2IwNGYxMGViMjE0OWYzYTU3YmMwMzEwYWY0YzhjM2FjM2I=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-30T16:46:07Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-01T16:10:37Z"}, "message": "Add file writing capabilities", "tree": {"sha": "c3915816be3bb34191a3fbd48d8eac6ac2ad8521", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3915816be3bb34191a3fbd48d8eac6ac2ad8521"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd495cb04f10eb2149f3a57bc0310af4c8c3ac3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd495cb04f10eb2149f3a57bc0310af4c8c3ac3b", "html_url": "https://github.com/rust-lang/rust/commit/cd495cb04f10eb2149f3a57bc0310af4c8c3ac3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd495cb04f10eb2149f3a57bc0310af4c8c3ac3b/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1037f69bf6dcf73dfbe06453336eeae61ba7c51f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1037f69bf6dcf73dfbe06453336eeae61ba7c51f", "html_url": "https://github.com/rust-lang/rust/commit/1037f69bf6dcf73dfbe06453336eeae61ba7c51f"}], "stats": {"total": 77, "additions": 65, "deletions": 12}, "files": [{"sha": "847169f38dca6bbac31c3eb89745f2dccd88c138", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd495cb04f10eb2149f3a57bc0310af4c8c3ac3b/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd495cb04f10eb2149f3a57bc0310af4c8c3ac3b/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=cd495cb04f10eb2149f3a57bc0310af4c8c3ac3b", "patch": "@@ -494,9 +494,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         Err(_) => -1,\n                     }\n                 } else {\n-                    eprintln!(\"Miri: Ignored output to FD {}\", fd);\n-                    // Pretend it all went well.\n-                    n as i64\n+                    this.write(args[0], args[1], args[2])?\n                 };\n                 // Now, `result` is the value we return back to the program.\n                 this.write_scalar("}, {"sha": "afb6e6311e727e71dae1e5dff60a02d647329149", "filename": "src/shims/io.rs", "status": "modified", "additions": 56, "deletions": 6, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/cd495cb04f10eb2149f3a57bc0310af4c8c3ac3b/src%2Fshims%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd495cb04f10eb2149f3a57bc0310af4c8c3ac3b/src%2Fshims%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fio.rs?ref=cd495cb04f10eb2149f3a57bc0310af4c8c3ac3b", "patch": "@@ -1,6 +1,6 @@\n use std::collections::HashMap;\n-use std::fs::File;\n-use std::io::Read;\n+use std::fs::{ File, OpenOptions };\n+use std::io::{ Read, Write };\n \n use rustc::ty::layout::Size;\n \n@@ -42,16 +42,38 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let flag = this.read_scalar(flag_op)?.to_i32()?;\n \n-        if flag != this.eval_libc_i32(\"O_RDONLY\")? && flag != this.eval_libc_i32(\"O_CLOEXEC\")? {\n-            throw_unsup_format!(\"Unsupported flag {:#x}\", flag);\n+        let mut options = OpenOptions::new();\n+\n+        // The first two bits of the flag correspond to the access mode of the file in linux.\n+        let access_mode = flag & 0b11;\n+\n+        if access_mode == this.eval_libc_i32(\"O_RDONLY\")? {\n+            options.read(true);\n+        } else if access_mode == this.eval_libc_i32(\"O_WRONLY\")? {\n+            options.write(true);\n+        } else if access_mode == this.eval_libc_i32(\"O_RDWR\")? {\n+            options.read(true).write(true);\n+        } else {\n+            throw_unsup_format!(\"Unsupported access mode {:#x}\", access_mode);\n+        }\n+\n+        if flag & this.eval_libc_i32(\"O_APPEND\")? != 0 {\n+            options.append(true);\n+        }\n+        if flag & this.eval_libc_i32(\"O_TRUNC\")? != 0 {\n+            options.truncate(true);\n+        }\n+        if flag & this.eval_libc_i32(\"O_CREAT\")? != 0 {\n+            options.create(true);\n         }\n \n         let path_bytes = this\n             .memory()\n             .read_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n         let path = std::str::from_utf8(path_bytes)\n             .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", path_bytes))?;\n-        let fd = File::open(path).map(|file| {\n+\n+        let fd = options.open(path).map(|file| {\n             let mut fh = &mut this.machine.file_handler;\n             fh.low += 1;\n             fh.handles.insert(fh.low, FileHandle { file, flag });\n@@ -151,8 +173,36 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         )\n     }\n \n+    fn write(\n+        &mut self,\n+        fd_op: OpTy<'tcx, Tag>,\n+        buf_op: OpTy<'tcx, Tag>,\n+        count_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i64> {\n+        let this = self.eval_context_mut();\n+\n+        if !this.machine.communicate {\n+            throw_unsup_format!(\"`write` not available when isolation is enabled\")\n+        }\n+\n+        let tcx = &{ this.tcx.tcx };\n+\n+        let fd = this.read_scalar(fd_op)?.to_i32()?;\n+        let buf = this.force_ptr(this.read_scalar(buf_op)?.not_undef()?)?;\n+        let count = this.read_scalar(count_op)?.to_usize(&*this.tcx)?;\n+\n+        // `to_vec` is needed to avoid borrowing issues when writing to the file.\n+        let bytes = this.memory().get(buf.alloc_id)?.get_bytes(tcx, buf, Size::from_bytes(count))?.to_vec();\n+\n+        this.remove_handle_and(fd, |mut handle, this| {\n+            let bytes = handle.file.write(&bytes).map(|bytes| bytes as i64);\n+            this.machine.file_handler.handles.insert(fd, handle);\n+            this.consume_result(bytes)\n+        })\n+    }\n+\n     /// Helper function that gets a `FileHandle` immutable reference and allows to manipulate it\n-    /// using `f`.\n+    /// using the `f` closure.\n     ///\n     /// If the `fd` file descriptor does not corresponds to a file, this functions returns `Ok(-1)`\n     /// and sets `Evaluator::last_error` to `libc::EBADF` (invalid file descriptor)."}, {"sha": "8ab686eafeb1f44702738c8b0f24f2567c36da6d", "filename": "tests/hello.txt", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1037f69bf6dcf73dfbe06453336eeae61ba7c51f/tests%2Fhello.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1037f69bf6dcf73dfbe06453336eeae61ba7c51f/tests%2Fhello.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fhello.txt?ref=1037f69bf6dcf73dfbe06453336eeae61ba7c51f", "patch": "@@ -1 +0,0 @@\n-Hello, World!"}, {"sha": "b0f2618920bf8061ea38b9daef5d1c5d4aa43e04", "filename": "tests/run-pass/file_read.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd495cb04f10eb2149f3a57bc0310af4c8c3ac3b/tests%2Frun-pass%2Ffile_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd495cb04f10eb2149f3a57bc0310af4c8c3ac3b/tests%2Frun-pass%2Ffile_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffile_read.rs?ref=cd495cb04f10eb2149f3a57bc0310af4c8c3ac3b", "patch": "@@ -2,10 +2,16 @@\n // compile-flags: -Zmiri-disable-isolation\n \n use std::fs::File;\n-use std::io::Read;\n+use std::io::{ Read, Write };\n \n fn main() {\n-    // FIXME: create the file and delete it when `rm` is implemented.\n+    // FIXME: remove the file and delete it when `rm` is implemented.\n+\n+    // Test creating, writing and closing a file (closing is tested when `file` is dropped).\n+    let mut file = File::create(\"./tests/hello.txt\").unwrap();\n+    file.write(b\"Hello, World!\\n\").unwrap();\n+\n+    // Test opening, reading and closing a file.\n     let mut file = File::open(\"./tests/hello.txt\").unwrap();\n     let mut contents = String::new();\n     file.read_to_string(&mut contents).unwrap();"}]}