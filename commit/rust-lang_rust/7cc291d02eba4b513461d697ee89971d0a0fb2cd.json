{"sha": "7cc291d02eba4b513461d697ee89971d0a0fb2cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYzI5MWQwMmViYTRiNTEzNDYxZDY5N2VlODk5NzFkMGEwZmIyY2Q=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-09-20T11:57:27Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-09-20T11:57:31Z"}, "message": "generalize let_and_return for any block (closes #340)", "tree": {"sha": "87e719f5e645a118857e6f4adc21700fe9c8df01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87e719f5e645a118857e6f4adc21700fe9c8df01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cc291d02eba4b513461d697ee89971d0a0fb2cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cc291d02eba4b513461d697ee89971d0a0fb2cd", "html_url": "https://github.com/rust-lang/rust/commit/7cc291d02eba4b513461d697ee89971d0a0fb2cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cc291d02eba4b513461d697ee89971d0a0fb2cd/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56b9682624cfad6c48d1cb7b16d659630622ed19", "url": "https://api.github.com/repos/rust-lang/rust/commits/56b9682624cfad6c48d1cb7b16d659630622ed19", "html_url": "https://github.com/rust-lang/rust/commit/56b9682624cfad6c48d1cb7b16d659630622ed19"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "d04307ffd5dffd7b7450de7e28a3c7186802df6e", "filename": "src/returns.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7cc291d02eba4b513461d697ee89971d0a0fb2cd/src%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc291d02eba4b513461d697ee89971d0a0fb2cd/src%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freturns.rs?ref=7cc291d02eba4b513461d697ee89971d0a0fb2cd", "patch": "@@ -10,7 +10,7 @@ declare_lint!(pub NEEDLESS_RETURN, Warn,\n               \"using a return statement like `return expr;` where an expression would suffice\");\n declare_lint!(pub LET_AND_RETURN, Warn,\n               \"creating a let-binding and then immediately returning it like `let x = expr; x` at \\\n-               the end of a function\");\n+               the end of a block\");\n \n #[derive(Copy, Clone)]\n pub struct ReturnPass;\n@@ -71,11 +71,11 @@ impl ReturnPass {\n         if_let_chain! {\n             [\n                 let Some(stmt) = block.stmts.last(),\n+                let Some(ref retexpr) = block.expr,\n                 let StmtDecl(ref decl, _) = stmt.node,\n                 let DeclLocal(ref local) = decl.node,\n                 let Some(ref initexpr) = local.init,\n                 let PatIdent(_, Spanned { node: id, .. }, _) = local.pat.node,\n-                let Some(ref retexpr) = block.expr,\n                 let ExprPath(_, ref path) = retexpr.node,\n                 match_path(path, &[&id.name.as_str()])\n             ], {\n@@ -87,7 +87,7 @@ impl ReturnPass {\n     fn emit_let_lint(&mut self, cx: &LateContext, lint_span: Span, note_span: Span) {\n         if in_external_macro(cx, note_span) {return;}\n         span_lint(cx, LET_AND_RETURN, lint_span,\n-                  \"returning the result of a let binding. \\\n+                  \"returning the result of a let binding from a block. \\\n                    Consider returning the expression directly.\");\n         if cx.current_level(LET_AND_RETURN) != Level::Allow {\n             cx.sess().span_note(note_span,\n@@ -106,6 +106,9 @@ impl LateLintPass for ReturnPass {\n     fn check_fn(&mut self, cx: &LateContext, _: FnKind, _: &FnDecl,\n                 block: &Block, _: Span, _: NodeId) {\n         self.check_block_return(cx, block);\n+    }\n+\n+    fn check_block(&mut self, cx: &LateContext, block: &Block) {\n         self.check_let_return(cx, block);\n     }\n }"}, {"sha": "33d2d6a823afc19cb5f739e929a163d9723ddd46", "filename": "tests/compile-fail/let_return.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7cc291d02eba4b513461d697ee89971d0a0fb2cd/tests%2Fcompile-fail%2Flet_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc291d02eba4b513461d697ee89971d0a0fb2cd/tests%2Fcompile-fail%2Flet_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flet_return.rs?ref=7cc291d02eba4b513461d697ee89971d0a0fb2cd", "patch": "@@ -1,5 +1,6 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n+#![allow(unused)]\n \n #![deny(let_and_return)]\n \n@@ -9,6 +10,15 @@ fn test() -> i32 {\n     x            //~ERROR returning the result of a let binding\n }\n \n+fn test_inner() -> i32 {\n+    if true {\n+        let x = 5;\n+        x            //~ERROR returning the result of a let binding\n+    } else {\n+        0\n+    }\n+}\n+\n fn test_nowarn_1() -> i32 {\n     let mut x = 5;\n     x += 1;\n@@ -27,8 +37,4 @@ fn test_nowarn_3() -> (i32, i32) {\n }\n \n fn main() {\n-    test();\n-    test_nowarn_1();\n-    test_nowarn_2();\n-    test_nowarn_3();\n }"}]}