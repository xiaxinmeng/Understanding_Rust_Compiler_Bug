{"sha": "0207e25d70b1a5733b170ac9f16a9702db8ee8ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMDdlMjVkNzBiMWE1NzMzYjE3MGFjOWYxNmE5NzAyZGI4ZWU4ZWQ=", "commit": {"author": {"name": "Damien Radtke", "email": "dradtke@channeliq.com", "date": "2014-10-24T23:14:45Z"}, "committer": {"name": "Damien Radtke", "email": "dradtke@channeliq.com", "date": "2014-10-24T23:14:45Z"}, "message": "Updates based on kballard's feedback.", "tree": {"sha": "5fe2d20478508c83dae3ccdf9983ef04cda4d310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fe2d20478508c83dae3ccdf9983ef04cda4d310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0207e25d70b1a5733b170ac9f16a9702db8ee8ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0207e25d70b1a5733b170ac9f16a9702db8ee8ed", "html_url": "https://github.com/rust-lang/rust/commit/0207e25d70b1a5733b170ac9f16a9702db8ee8ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0207e25d70b1a5733b170ac9f16a9702db8ee8ed/comments", "author": null, "committer": null, "parents": [{"sha": "83f6a29f12c0e8231606d56b6a20df0dd0a78464", "url": "https://api.github.com/repos/rust-lang/rust/commits/83f6a29f12c0e8231606d56b6a20df0dd0a78464", "html_url": "https://github.com/rust-lang/rust/commit/83f6a29f12c0e8231606d56b6a20df0dd0a78464"}], "stats": {"total": 31, "additions": 11, "deletions": 20}, "files": [{"sha": "8b646595c6a2d6b7274899a0c90590c5418699dd", "filename": "src/etc/vim/compiler/cargo.vim", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0207e25d70b1a5733b170ac9f16a9702db8ee8ed/src%2Fetc%2Fvim%2Fcompiler%2Fcargo.vim", "raw_url": "https://github.com/rust-lang/rust/raw/0207e25d70b1a5733b170ac9f16a9702db8ee8ed/src%2Fetc%2Fvim%2Fcompiler%2Fcargo.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fcompiler%2Fcargo.vim?ref=0207e25d70b1a5733b170ac9f16a9702db8ee8ed", "patch": "@@ -6,35 +6,26 @@\n if exists('current_compiler')\n   finish\n endif\n+runtime compiler/rustc.vim\n let current_compiler = \"cargo\"\n \n if exists(':CompilerSet') != 2\n     command -nargs=* CompilerSet setlocal <args>\n endif\n \n if exists('g:cargo_makeprg_params')\n-    execute 'CompilerSet makeprg=cargo\\ '.g:cargo_makeprg_params.'\\ $*'\n+    execute 'CompilerSet makeprg=cargo\\ '.escape(g:cargo_makeprg_params, ' \\|\"').'\\ $*'\n else\n     CompilerSet makeprg=cargo\\ $*\n endif\n \n-CompilerSet errorformat=\n-\t\t\t\\%f:%l:%c:\\ %t%*[^:]:\\ %m,\n-\t\t\t\\%f:%l:%c:\\ %*\\\\d:%*\\\\d\\ %t%*[^:]:\\ %m,\n-\t\t\t\\%-G%f:%l\\ %s,\n-\t\t\t\\%-G%*[\\ ]^,\n-\t\t\t\\%-G%*[\\ ]^%*[~],\n-\t\t\t\\%-G%*[\\ ]...\n-\n \" Allow a configurable global Cargo.toml name. This makes it easy to\n \" support variations like 'cargo.toml'.\n-if !exists('g:cargo_manifest_name')\n-    let g:cargo_manifest_name = 'Cargo.toml'\n-endif\n-\n-let s:local_manifest = fnamemodify(findfile(g:cargo_manifest_name, '.;'), ':p:h').'/'\n+let s:cargo_manifest_name = get(g:, 'cargo_manifest_name', 'Cargo.toml')\n \n+let s:local_manifest = findfile(s:cargo_manifest_name, '.;')\n if s:local_manifest != ''\n+\tlet s:local_manifest = fnamemodify(s:local_manifest, ':p:h').'/'\n     augroup cargo\n         au!\n         au QuickfixCmdPost make call s:FixPaths()\n@@ -46,23 +37,23 @@ if s:local_manifest != ''\n         let qflist = getqflist()\n         let manifest = s:local_manifest\n         for qf in qflist\n-            if !qf['valid']\n-                let m = matchlist(qf['text'], '\\v.*\\(file://(.*)\\)$')\n-                if len(m) > 0\n+            if !qf.valid\n+                let m = matchlist(qf.text, '(file://\\(.*\\))$')\n+                if !empty(m)\n                     let manifest = m[1].'/'\n                     \" Manually strip another slash if needed; usually just an\n                     \" issue on Windows.\n-                    if manifest =~ '^/[A-Z]*:/'\n+                    if manifest =~ '^/[A-Z]:/'\n                         let manifest = manifest[1:]\n                     endif\n                 endif\n                 continue\n             endif\n-            let filename = bufname(qf['bufnr'])\n+            let filename = bufname(qf.bufnr)\n             if filereadable(filename)\n                 continue\n             endif\n-            let qf['filename'] = simplify(manifest.filename)\n+            let qf.filename = simplify(manifest.filename)\n             call remove(qf, 'bufnr')\n         endfor\n         call setqflist(qflist, 'r')"}]}