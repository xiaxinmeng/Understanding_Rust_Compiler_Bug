{"sha": "e3fb05dc3c32160e89ad354297b168fae11ffba1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZmIwNWRjM2MzMjE2MGU4OWFkMzU0Mjk3YjE2OGZhZTExZmZiYTE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T11:10:43Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T11:10:43Z"}, "message": "Rename some `_sty` variables to `_kind`", "tree": {"sha": "92c76cff5b4e73f9792c66f04ec9b3bed3d79039", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92c76cff5b4e73f9792c66f04ec9b3bed3d79039"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3fb05dc3c32160e89ad354297b168fae11ffba1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3fb05dc3c32160e89ad354297b168fae11ffba1", "html_url": "https://github.com/rust-lang/rust/commit/e3fb05dc3c32160e89ad354297b168fae11ffba1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3fb05dc3c32160e89ad354297b168fae11ffba1/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bea3d67c77dd643ef1f89c8bd6562e90b373cec4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bea3d67c77dd643ef1f89c8bd6562e90b373cec4", "html_url": "https://github.com/rust-lang/rust/commit/bea3d67c77dd643ef1f89c8bd6562e90b373cec4"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "6c3bb3ebb779529ef5c8b9c384aa425756ea82c0", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3fb05dc3c32160e89ad354297b168fae11ffba1/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3fb05dc3c32160e89ad354297b168fae11ffba1/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e3fb05dc3c32160e89ad354297b168fae11ffba1", "patch": "@@ -132,13 +132,13 @@ impl<'tcx> CtxtInterners<'tcx> {\n     #[allow(rustc::usage_of_ty_tykind)]\n     #[inline(never)]\n     fn intern_ty(&self,\n-        st: TyKind<'tcx>\n+        kind: TyKind<'tcx>\n     ) -> Ty<'tcx> {\n-        self.type_.intern(st, |st| {\n-            let flags = super::flags::FlagComputation::for_sty(&st);\n+        self.type_.intern(kind, |kind| {\n+            let flags = super::flags::FlagComputation::for_kind(&kind);\n \n             let ty_struct = TyS {\n-                kind: st,\n+                kind,\n                 flags: flags.flags,\n                 outer_exclusive_binder: flags.outer_exclusive_binder,\n             };"}, {"sha": "6e43aa6a25d555bc366fca718cae5140bdb6cf42", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3fb05dc3c32160e89ad354297b168fae11ffba1/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3fb05dc3c32160e89ad354297b168fae11ffba1/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=e3fb05dc3c32160e89ad354297b168fae11ffba1", "patch": "@@ -19,9 +19,9 @@ impl FlagComputation {\n     }\n \n     #[allow(rustc::usage_of_ty_tykind)]\n-    pub fn for_sty(st: &ty::TyKind<'_>) -> FlagComputation {\n+    pub fn for_kind(kind: &ty::TyKind<'_>) -> FlagComputation {\n         let mut result = FlagComputation::new();\n-        result.add_sty(st);\n+        result.add_kind(kind);\n         result\n     }\n \n@@ -63,8 +63,8 @@ impl FlagComputation {\n     }\n \n     #[allow(rustc::usage_of_ty_tykind)]\n-    fn add_sty(&mut self, st: &ty::TyKind<'_>) {\n-        match st {\n+    fn add_kind(&mut self, kind: &ty::TyKind<'_>) {\n+        match kind {\n             &ty::Bool |\n             &ty::Char |\n             &ty::Int(_) |"}, {"sha": "71a6067fd48a14f89f8d58fb67bcc80aa084d398", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3fb05dc3c32160e89ad354297b168fae11ffba1/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3fb05dc3c32160e89ad354297b168fae11ffba1/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=e3fb05dc3c32160e89ad354297b168fae11ffba1", "patch": "@@ -324,15 +324,15 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         use syntax::ast::UintTy::*;\n         use rustc::ty::{Int, Uint};\n \n-        let new_sty = match ty.kind {\n+        let new_kind = match ty.kind {\n             Int(Isize) => Int(self.tcx.sess.target.isize_ty),\n             Uint(Usize) => Uint(self.tcx.sess.target.usize_ty),\n             ref t @ Uint(_) | ref t @ Int(_) => t.clone(),\n             _ => panic!(\"tried to get overflow intrinsic for op applied to non-int type\")\n         };\n \n         let name = match oop {\n-            OverflowOp::Add => match new_sty {\n+            OverflowOp::Add => match new_kind {\n                 Int(I8) => \"llvm.sadd.with.overflow.i8\",\n                 Int(I16) => \"llvm.sadd.with.overflow.i16\",\n                 Int(I32) => \"llvm.sadd.with.overflow.i32\",\n@@ -347,7 +347,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n \n                 _ => unreachable!(),\n             },\n-            OverflowOp::Sub => match new_sty {\n+            OverflowOp::Sub => match new_kind {\n                 Int(I8) => \"llvm.ssub.with.overflow.i8\",\n                 Int(I16) => \"llvm.ssub.with.overflow.i16\",\n                 Int(I32) => \"llvm.ssub.with.overflow.i32\",\n@@ -362,7 +362,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n \n                 _ => unreachable!(),\n             },\n-            OverflowOp::Mul => match new_sty {\n+            OverflowOp::Mul => match new_kind {\n                 Int(I8) => \"llvm.smul.with.overflow.i8\",\n                 Int(I16) => \"llvm.smul.with.overflow.i16\",\n                 Int(I32) => \"llvm.smul.with.overflow.i32\","}, {"sha": "e4a8720f5eabccda2a3bdf55925af34ff379cf3f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3fb05dc3c32160e89ad354297b168fae11ffba1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3fb05dc3c32160e89ad354297b168fae11ffba1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e3fb05dc3c32160e89ad354297b168fae11ffba1", "patch": "@@ -1098,7 +1098,7 @@ fn external_generic_args(\n     substs: SubstsRef<'_>,\n ) -> GenericArgs {\n     let mut skip_self = has_self;\n-    let mut ty_sty = None;\n+    let mut ty_kind = None;\n     let args: Vec<_> = substs.iter().filter_map(|kind| match kind.unpack() {\n         GenericArgKind::Lifetime(lt) => {\n             lt.clean(cx).and_then(|lt| Some(GenericArg::Lifetime(lt)))\n@@ -1108,7 +1108,7 @@ fn external_generic_args(\n             None\n         }\n         GenericArgKind::Type(ty) => {\n-            ty_sty = Some(&ty.kind);\n+            ty_kind = Some(&ty.kind);\n             Some(GenericArg::Type(ty.clean(cx)))\n         }\n         GenericArgKind::Const(ct) => Some(GenericArg::Const(ct.clean(cx))),\n@@ -1117,8 +1117,8 @@ fn external_generic_args(\n     match trait_did {\n         // Attempt to sugar an external path like Fn<(A, B,), C> to Fn(A, B) -> C\n         Some(did) if cx.tcx.lang_items().fn_trait_kind(did).is_some() => {\n-            assert!(ty_sty.is_some());\n-            let inputs = match ty_sty {\n+            assert!(ty_kind.is_some());\n+            let inputs = match ty_kind {\n                 Some(ty::Tuple(ref tys)) => tys.iter().map(|t| t.expect_ty().clean(cx)).collect(),\n                 _ => return GenericArgs::AngleBracketed { args, bindings },\n             };"}]}