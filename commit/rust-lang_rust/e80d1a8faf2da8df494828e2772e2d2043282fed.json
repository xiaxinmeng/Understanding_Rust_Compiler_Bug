{"sha": "e80d1a8faf2da8df494828e2772e2d2043282fed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MGQxYThmYWYyZGE4ZGY0OTQ4MjhlMjc3MmUyZDIwNDMyODJmZWQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-29T23:36:27Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-12-18T23:26:29Z"}, "message": "Remove `MacroDef`'s fields `imported_from` and `allow_internal_unstable`,\nremove `export` argument of `resolver.add_macro()`.", "tree": {"sha": "423a320eddf2b638d013a6392121841adfe16000", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/423a320eddf2b638d013a6392121841adfe16000"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e80d1a8faf2da8df494828e2772e2d2043282fed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e80d1a8faf2da8df494828e2772e2d2043282fed", "html_url": "https://github.com/rust-lang/rust/commit/e80d1a8faf2da8df494828e2772e2d2043282fed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e80d1a8faf2da8df494828e2772e2d2043282fed/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d638fd1131c3f909d6e328c20d88e361a444a99", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d638fd1131c3f909d6e328c20d88e361a444a99", "html_url": "https://github.com/rust-lang/rust/commit/4d638fd1131c3f909d6e328c20d88e361a444a99"}], "stats": {"total": 39, "additions": 12, "deletions": 27}, "files": [{"sha": "186d6f626509fd0b0daf5f37ddeefa42d516ab1a", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=e80d1a8faf2da8df494828e2772e2d2043282fed", "patch": "@@ -365,7 +365,6 @@ pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate) {\n pub fn walk_macro_def<'v, V: Visitor<'v>>(visitor: &mut V, macro_def: &'v MacroDef) {\n     visitor.visit_id(macro_def.id);\n     visitor.visit_name(macro_def.span, macro_def.name);\n-    walk_opt_name(visitor, macro_def.span, macro_def.imported_from);\n     walk_list!(visitor, visit_attribute, &macro_def.attrs);\n }\n "}, {"sha": "f5773d351780477c255d70f52d69b308d81775a3", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e80d1a8faf2da8df494828e2772e2d2043282fed", "patch": "@@ -987,8 +987,6 @@ impl<'a> LoweringContext<'a> {\n             attrs: self.lower_attrs(&m.attrs),\n             id: m.id,\n             span: m.span,\n-            imported_from: m.imported_from.map(|x| x.name),\n-            allow_internal_unstable: m.allow_internal_unstable,\n             body: m.body.clone().into(),\n         }\n     }"}, {"sha": "f52ee35e1757306ae0605e1dd774db9d770398b4", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=e80d1a8faf2da8df494828e2772e2d2043282fed", "patch": "@@ -475,8 +475,6 @@ pub struct MacroDef {\n     pub attrs: HirVec<Attribute>,\n     pub id: NodeId,\n     pub span: Span,\n-    pub imported_from: Option<Name>,\n-    pub allow_internal_unstable: bool,\n     pub body: HirVec<TokenTree>,\n }\n "}, {"sha": "f45e86f2f4b9615d32aae1b8c51fb41adf328ff2", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=e80d1a8faf2da8df494828e2772e2d2043282fed", "patch": "@@ -302,9 +302,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     }\n \n     fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef) {\n-        if md.imported_from.is_none() {\n-            self.annotate(md.id, &md.attrs, md.span, AnnotationKind::Required, |_| {});\n-        }\n+        self.annotate(md.id, &md.attrs, md.span, AnnotationKind::Required, |_| {});\n     }\n }\n \n@@ -373,9 +371,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n     }\n \n     fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef) {\n-        if md.imported_from.is_none() {\n-            self.check_missing_stability(md.id, md.span);\n-        }\n+        self.check_missing_stability(md.id, md.span);\n     }\n }\n "}, {"sha": "ac830318ce9a39b851f8247954f873311a160bc1", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=e80d1a8faf2da8df494828e2772e2d2043282fed", "patch": "@@ -418,8 +418,6 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n             ident: ast::Ident::with_empty_ctxt(name),\n             id: ast::DUMMY_NODE_ID,\n             span: local_span,\n-            imported_from: None, // FIXME\n-            allow_internal_unstable: attr::contains_name(&attrs, \"allow_internal_unstable\"),\n             attrs: attrs,\n             body: body,\n         })"}, {"sha": "5e356878ba8006f2f63ed80cd83fa13b55b39174", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=e80d1a8faf2da8df494828e2772e2d2043282fed", "patch": "@@ -20,6 +20,7 @@ use rustc::ty;\n use std::cell::Cell;\n use std::rc::Rc;\n use syntax::ast::{self, Name, Ident};\n+use syntax::attr;\n use syntax::errors::DiagnosticBuilder;\n use syntax::ext::base::{self, Determinacy, MultiModifier, MultiDecorator};\n use syntax::ext::base::{NormalTT, SyntaxExtension};\n@@ -138,7 +139,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         invocation.expansion.set(visitor.legacy_scope);\n     }\n \n-    fn add_macro(&mut self, scope: Mark, mut def: ast::MacroDef, export: bool) {\n+    fn add_macro(&mut self, scope: Mark, mut def: ast::MacroDef) {\n         if def.ident.name == \"macro_rules\" {\n             self.session.span_err(def.span, \"user-defined macros may not be named `macro_rules`\");\n         }\n@@ -153,7 +154,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         invocation.legacy_scope.set(LegacyScope::Binding(binding));\n         self.macro_names.insert(def.ident.name);\n \n-        if export {\n+        if attr::contains_name(&def.attrs, \"macro_export\") {\n             def.id = self.next_node_id();\n             DefCollector::new(&mut self.definitions).with_parent(CRATE_DEF_INDEX, |collector| {\n                 collector.visit_macro_def(&def)"}, {"sha": "e5410c6341f84d2bb0cf40440d241f9aaa199a92", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=e80d1a8faf2da8df494828e2772e2d2043282fed", "patch": "@@ -201,6 +201,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     if def_id.krate == LOCAL_CRATE {\n                         continue // These are `krate.exported_macros`, handled in `self.visit()`.\n                     }\n+                    let imported_from = self.cx.sess().cstore.original_crate_name(def_id.krate);\n                     let def = match self.cx.sess().cstore.load_macro(def_id, self.cx.sess()) {\n                         LoadedMacro::MacroRules(macro_rules) => macro_rules,\n                         // FIXME(jseyfried): document proc macro reexports\n@@ -217,7 +218,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         matchers: matchers,\n                         stab: self.stability(def.id),\n                         depr: self.deprecation(def.id),\n-                        imported_from: def.imported_from.map(|ident| ident.name),\n+                        imported_from: Some(imported_from),\n                     })\n                 }\n             }\n@@ -525,7 +526,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             matchers: matchers,\n             stab: self.stability(def.id),\n             depr: self.deprecation(def.id),\n-            imported_from: def.imported_from,\n+            imported_from: None,\n         }\n     }\n }"}, {"sha": "39d78cd87761e4cd124d6f60fa86bda270bfc713", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e80d1a8faf2da8df494828e2772e2d2043282fed", "patch": "@@ -1972,8 +1972,6 @@ pub struct MacroDef {\n     pub attrs: Vec<Attribute>,\n     pub id: NodeId,\n     pub span: Span,\n-    pub imported_from: Option<Ident>,\n-    pub allow_internal_unstable: bool,\n     pub body: Vec<TokenTree>,\n }\n "}, {"sha": "508c5eaed8cc1cc36618025ea43d2bb266c50075", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=e80d1a8faf2da8df494828e2772e2d2043282fed", "patch": "@@ -520,7 +520,7 @@ pub trait Resolver {\n     fn eliminate_crate_var(&mut self, item: P<ast::Item>) -> P<ast::Item>;\n \n     fn visit_expansion(&mut self, mark: Mark, expansion: &Expansion);\n-    fn add_macro(&mut self, scope: Mark, def: ast::MacroDef, export: bool);\n+    fn add_macro(&mut self, scope: Mark, def: ast::MacroDef);\n     fn add_ext(&mut self, ident: ast::Ident, ext: Rc<SyntaxExtension>);\n     fn add_expansions_at_stmt(&mut self, id: ast::NodeId, macros: Vec<Mark>);\n \n@@ -544,7 +544,7 @@ impl Resolver for DummyResolver {\n     fn eliminate_crate_var(&mut self, item: P<ast::Item>) -> P<ast::Item> { item }\n \n     fn visit_expansion(&mut self, _invoc: Mark, _expansion: &Expansion) {}\n-    fn add_macro(&mut self, _scope: Mark, _def: ast::MacroDef, _export: bool) {}\n+    fn add_macro(&mut self, _scope: Mark, _def: ast::MacroDef) {}\n     fn add_ext(&mut self, _ident: ast::Ident, _ext: Rc<SyntaxExtension>) {}\n     fn add_expansions_at_stmt(&mut self, _id: ast::NodeId, _macros: Vec<Mark>) {}\n "}, {"sha": "5a028594a2158bc51a424f64113af132c0b8ecd1", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=e80d1a8faf2da8df494828e2772e2d2043282fed", "patch": "@@ -160,14 +160,11 @@ impl IdentMacroExpander for MacroRulesExpander {\n               tts: Vec<tokenstream::TokenTree>,\n               attrs: Vec<ast::Attribute>)\n               -> Box<MacResult> {\n-        let export = attr::contains_name(&attrs, \"macro_export\");\n         let def = ast::MacroDef {\n             ident: ident,\n             id: ast::DUMMY_NODE_ID,\n             span: span,\n-            imported_from: None,\n             body: tts,\n-            allow_internal_unstable: attr::contains_name(&attrs, \"allow_internal_unstable\"),\n             attrs: attrs,\n         };\n \n@@ -178,7 +175,7 @@ impl IdentMacroExpander for MacroRulesExpander {\n             MacEager::items(placeholders::macro_scope_placeholder().make_items())\n         };\n \n-        cx.resolver.add_macro(cx.current_expansion.mark, def, export);\n+        cx.resolver.add_macro(cx.current_expansion.mark, def);\n         result\n     }\n }\n@@ -282,7 +279,7 @@ pub fn compile(sess: &ParseSess, def: &ast::MacroDef) -> SyntaxExtension {\n         valid: valid,\n     });\n \n-    NormalTT(exp, Some(def.span), def.allow_internal_unstable)\n+    NormalTT(exp, Some(def.span), attr::contains_name(&def.attrs, \"allow_internal_unstable\"))\n }\n \n fn check_lhs_nt_follows(sess: &ParseSess, lhs: &TokenTree) -> bool {"}, {"sha": "c1391d0b1c2f18f50bf3094a335e1850c3e32205", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80d1a8faf2da8df494828e2772e2d2043282fed/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=e80d1a8faf2da8df494828e2772e2d2043282fed", "patch": "@@ -178,7 +178,6 @@ pub fn walk_crate<'a, V: Visitor<'a>>(visitor: &mut V, krate: &'a Crate) {\n \n pub fn walk_macro_def<'a, V: Visitor<'a>>(visitor: &mut V, macro_def: &'a MacroDef) {\n     visitor.visit_ident(macro_def.span, macro_def.ident);\n-    walk_opt_ident(visitor, macro_def.span, macro_def.imported_from);\n     walk_list!(visitor, visit_attribute, &macro_def.attrs);\n }\n "}]}