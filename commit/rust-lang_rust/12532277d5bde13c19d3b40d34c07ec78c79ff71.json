{"sha": "12532277d5bde13c19d3b40d34c07ec78c79ff71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNTMyMjc3ZDViZGUxM2MxOWQzYjQwZDM0YzA3ZWM3OGM3OWZmNzE=", "commit": {"author": {"name": "Simon Heath", "email": "icefoxen@gmail.com", "date": "2019-01-31T01:19:01Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-02-27T15:02:25Z"}, "message": "Add basic docs to integer TryFrom impl macros.\n\nThey're not as good as `From` 'cause they don't stringify\nthe types and generate examples and so on, but it's a start.", "tree": {"sha": "434d07c12b905e27a9bd35a76d323ccb8ebe6430", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/434d07c12b905e27a9bd35a76d323ccb8ebe6430"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12532277d5bde13c19d3b40d34c07ec78c79ff71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12532277d5bde13c19d3b40d34c07ec78c79ff71", "html_url": "https://github.com/rust-lang/rust/commit/12532277d5bde13c19d3b40d34c07ec78c79ff71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12532277d5bde13c19d3b40d34c07ec78c79ff71/comments", "author": {"login": "icefoxen", "id": 1335133, "node_id": "MDQ6VXNlcjEzMzUxMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1335133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/icefoxen", "html_url": "https://github.com/icefoxen", "followers_url": "https://api.github.com/users/icefoxen/followers", "following_url": "https://api.github.com/users/icefoxen/following{/other_user}", "gists_url": "https://api.github.com/users/icefoxen/gists{/gist_id}", "starred_url": "https://api.github.com/users/icefoxen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/icefoxen/subscriptions", "organizations_url": "https://api.github.com/users/icefoxen/orgs", "repos_url": "https://api.github.com/users/icefoxen/repos", "events_url": "https://api.github.com/users/icefoxen/events{/privacy}", "received_events_url": "https://api.github.com/users/icefoxen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2b1212558b25e69eb867402792d5b5b5a07ad19", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b1212558b25e69eb867402792d5b5b5a07ad19", "html_url": "https://github.com/rust-lang/rust/commit/d2b1212558b25e69eb867402792d5b5b5a07ad19"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "39a1b48e0766e8ffb04c502b250571ca82af0b65", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/12532277d5bde13c19d3b40d34c07ec78c79ff71/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12532277d5bde13c19d3b40d34c07ec78c79ff71/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=12532277d5bde13c19d3b40d34c07ec78c79ff71", "patch": "@@ -4544,6 +4544,9 @@ macro_rules! try_from_unbounded {\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n+            /// Try to create the target type from the source type.\n+            /// This particular variant will never fail, but is included\n+            /// for completeness's sake.\n             #[inline]\n             fn try_from(value: $source) -> Result<Self, Self::Error> {\n                 Ok(value as $target)\n@@ -4559,6 +4562,10 @@ macro_rules! try_from_lower_bounded {\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n+            /// Try to create a target number type from a\n+            /// source type that has `source::MIN > dest::MIN`.\n+            /// Will return an error if `source` is less than \n+            /// `dest::MIN`.\n             #[inline]\n             fn try_from(u: $source) -> Result<$target, TryFromIntError> {\n                 if u >= 0 {\n@@ -4578,6 +4585,10 @@ macro_rules! try_from_upper_bounded {\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n+            /// Try to create a target number type from a\n+            /// source type that has `source::MAX > dest::MAX`.\n+            /// Will return an error if `source` is greater than \n+            /// `dest::MAX`.\n             #[inline]\n             fn try_from(u: $source) -> Result<$target, TryFromIntError> {\n                 if u > (<$target>::max_value() as $source) {\n@@ -4597,6 +4608,11 @@ macro_rules! try_from_both_bounded {\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n+            /// Try to \"narrow\" a number from the source type\n+            /// to the target type.  Will return an error if \n+            /// the source value is either larger than the \n+            /// `MAX` value for the target type or smaller \n+            /// than the `MIN` value for it.\n             #[inline]\n             fn try_from(u: $source) -> Result<$target, TryFromIntError> {\n                 let min = <$target>::min_value() as $source;"}]}