{"sha": "371f04d4330f70cfab5fa2a5fdb65df7ccd0604c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MWYwNGQ0MzMwZjcwY2ZhYjVmYTJhNWZkYjY1ZGY3Y2NkMDYwNGM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-30T23:05:17Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-01T03:50:25Z"}, "message": "std: unbox closures used in function arguments", "tree": {"sha": "501d58736b4db70155b452b58d39fc658721ef6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/501d58736b4db70155b452b58d39fc658721ef6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/371f04d4330f70cfab5fa2a5fdb65df7ccd0604c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/371f04d4330f70cfab5fa2a5fdb65df7ccd0604c", "html_url": "https://github.com/rust-lang/rust/commit/371f04d4330f70cfab5fa2a5fdb65df7ccd0604c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/371f04d4330f70cfab5fa2a5fdb65df7ccd0604c/comments", "author": null, "committer": null, "parents": [{"sha": "a17c2b60e1c32e950b011296025a9f88f4d3c4e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a17c2b60e1c32e950b011296025a9f88f4d3c4e4", "html_url": "https://github.com/rust-lang/rust/commit/a17c2b60e1c32e950b011296025a9f88f4d3c4e4"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "b7d069eb19e581313b203e57bd293078d5e5b23e", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371f04d4330f70cfab5fa2a5fdb65df7ccd0604c/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371f04d4330f70cfab5fa2a5fdb65df7ccd0604c/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=371f04d4330f70cfab5fa2a5fdb65df7ccd0604c", "patch": "@@ -334,7 +334,7 @@ pub fn set_stderr(stderr: Box<Writer + Send>) -> Option<Box<Writer + Send>> {\n //          // io1 aliases io2\n //      })\n //  })\n-fn with_task_stdout(f: |&mut Writer| -> IoResult<()>) {\n+fn with_task_stdout<F>(f: F) where F: FnOnce(&mut Writer) -> IoResult<()> {\n     let mut my_stdout = LOCAL_STDOUT.with(|slot| {\n         slot.borrow_mut().take()\n     }).unwrap_or_else(|| {"}, {"sha": "41e91d1b6ef9be4fea4719e858efcf8a9aed1767", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371f04d4330f70cfab5fa2a5fdb65df7ccd0604c/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371f04d4330f70cfab5fa2a5fdb65df7ccd0604c/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=371f04d4330f70cfab5fa2a5fdb65df7ccd0604c", "patch": "@@ -174,7 +174,7 @@ impl Task {\n     ///\n     /// It is invalid to call this function with a thread that has been previously\n     /// destroyed via a failed call to `run`.\n-    pub fn run(mut self: Box<Task>, f: ||) -> Box<Task> {\n+    pub fn run<F>(mut self: Box<Task>, f: F) -> Box<Task> where F: FnOnce() {\n         assert!(!self.is_destroyed(), \"cannot re-use a destroyed thread\");\n \n         // First, make sure that no one else is in TLS. This does not allow"}, {"sha": "8c76eb1504db72e779de18eca9bdcc7d727488ef", "filename": "src/libstd/sys/common/thread_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371f04d4330f70cfab5fa2a5fdb65df7ccd0604c/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371f04d4330f70cfab5fa2a5fdb65df7ccd0604c/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs?ref=371f04d4330f70cfab5fa2a5fdb65df7ccd0604c", "patch": "@@ -26,13 +26,13 @@ struct ThreadInfo {\n thread_local! { static THREAD_INFO: RefCell<Option<ThreadInfo>> = RefCell::new(None) }\n \n impl ThreadInfo {\n-    fn with<R>(f: |&mut ThreadInfo| -> R) -> R {\n+    fn with<R, F>(f: F) -> R where F: FnOnce(&mut ThreadInfo) -> R {\n         if THREAD_INFO.destroyed() {\n             panic!(\"Use of std::thread::Thread::current() is not possible after \\\n                     the thread's local data has been destroyed\");\n         }\n \n-        THREAD_INFO.with(|c| {\n+        THREAD_INFO.with(move |c| {\n             if c.borrow().is_none() {\n                 *c.borrow_mut() = Some(ThreadInfo {\n                     stack_bounds: (0, 0),"}, {"sha": "0f26e36a80fd6f85b95d5da7c0ffe4d47a091d93", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371f04d4330f70cfab5fa2a5fdb65df7ccd0604c/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371f04d4330f70cfab5fa2a5fdb65df7ccd0604c/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=371f04d4330f70cfab5fa2a5fdb65df7ccd0604c", "patch": "@@ -124,7 +124,9 @@ pub unsafe fn pipe() -> IoResult<(FileDesc, FileDesc)> {\n     }\n }\n \n-pub fn fill_utf16_buf_and_decode(f: |*mut u16, DWORD| -> DWORD) -> Option<String> {\n+pub fn fill_utf16_buf_and_decode<F>(mut f: F) -> Option<String> where\n+    F: FnMut(*mut u16, DWORD) -> DWORD,\n+{\n     unsafe {\n         let mut n = TMPBUF_SZ as DWORD;\n         let mut res = None;"}]}