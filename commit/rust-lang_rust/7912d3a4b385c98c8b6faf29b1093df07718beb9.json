{"sha": "7912d3a4b385c98c8b6faf29b1093df07718beb9", "node_id": "C_kwDOAAsO6NoAKDc5MTJkM2E0YjM4NWM5OGM4YjZmYWYyOWIxMDkzZGYwNzcxOGJlYjk", "commit": {"author": {"name": "zhoufan", "email": "1247714429@qq.com", "date": "2021-09-21T16:15:57Z"}, "committer": {"name": "zhoufan", "email": "1247714429@qq.com", "date": "2021-09-21T16:15:57Z"}, "message": "Generate function assist creates bad param names for const/static item args", "tree": {"sha": "9f402f85b5cd53c843e895f91ecd502c9f9c57e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f402f85b5cd53c843e895f91ecd502c9f9c57e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7912d3a4b385c98c8b6faf29b1093df07718beb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7912d3a4b385c98c8b6faf29b1093df07718beb9", "html_url": "https://github.com/rust-lang/rust/commit/7912d3a4b385c98c8b6faf29b1093df07718beb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7912d3a4b385c98c8b6faf29b1093df07718beb9/comments", "author": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "254022c13cd286d3697f97bc8ef6be7d90d18d9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/254022c13cd286d3697f97bc8ef6be7d90d18d9d", "html_url": "https://github.com/rust-lang/rust/commit/254022c13cd286d3697f97bc8ef6be7d90d18d9d"}], "stats": {"total": 100, "additions": 93, "deletions": 7}, "files": [{"sha": "ad0090ed8afbf815301fd544f9d136a55b166183", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 93, "deletions": 7, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/7912d3a4b385c98c8b6faf29b1093df07718beb9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7912d3a4b385c98c8b6faf29b1093df07718beb9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=7912d3a4b385c98c8b6faf29b1093df07718beb9", "patch": "@@ -1,5 +1,9 @@\n-use hir::{HasSource, HirDisplay, Module, TypeInfo};\n-use ide_db::{base_db::FileId, helpers::SnippetCap};\n+use hir::{HasSource, HirDisplay, Module, ModuleDef, TypeInfo};\n+use ide_db::{\n+    base_db::FileId,\n+    defs::{Definition, NameRefClass},\n+    helpers::SnippetCap,\n+};\n use rustc_hash::{FxHashMap, FxHashSet};\n use stdx::to_lower_snake_case;\n use syntax::{\n@@ -438,7 +442,7 @@ fn fn_args(\n     let mut arg_names = Vec::new();\n     let mut arg_types = Vec::new();\n     for arg in call.arg_list()?.args() {\n-        arg_names.push(fn_arg_name(&arg));\n+        arg_names.push(fn_arg_name(ctx, &arg));\n         arg_types.push(match fn_arg_type(ctx, target_module, &arg) {\n             Some(ty) => {\n                 if !ty.is_empty() && ty.starts_with('&') {\n@@ -503,12 +507,25 @@ fn deduplicate_arg_names(arg_names: &mut Vec<String>) {\n     }\n }\n \n-fn fn_arg_name(arg_expr: &ast::Expr) -> String {\n+fn fn_arg_name(ctx: &AssistContext, arg_expr: &ast::Expr) -> String {\n     let name = (|| match arg_expr {\n-        ast::Expr::CastExpr(cast_expr) => Some(fn_arg_name(&cast_expr.expr()?)),\n+        ast::Expr::CastExpr(cast_expr) => Some(fn_arg_name(ctx, &cast_expr.expr()?)),\n         expr => {\n-            let s = expr.syntax().descendants().filter_map(ast::NameRef::cast).last()?.to_string();\n-            Some(to_lower_snake_case(&s))\n+            let name_ref = expr.syntax().descendants().filter_map(ast::NameRef::cast).last()?;\n+            if let Some(NameRefClass::Definition(def)) =\n+                NameRefClass::classify(&ctx.sema, &name_ref)\n+            {\n+                match def {\n+                    Definition::ModuleDef(ModuleDef::Const(_)) => {\n+                        return Some(name_ref.to_string().to_lowercase());\n+                    }\n+                    Definition::ModuleDef(ModuleDef::Static(_)) => {\n+                        return Some(name_ref.to_string().to_lowercase());\n+                    }\n+                    _ => {}\n+                }\n+            };\n+            Some(to_lower_snake_case(&name_ref.to_string()))\n         }\n     })();\n     match name {\n@@ -1683,6 +1700,75 @@ fn main() {\n fn foo(arg0: ()) ${0:-> _} {\n     todo!()\n }\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn add_function_with_const_arg() {\n+        check_assist(\n+            generate_function,\n+            r\"\n+const VALUE: usize = 0;\n+fn main() {\n+    foo$0(VALUE);\n+}\n+\",\n+            r\"\n+const VALUE: usize = 0;\n+fn main() {\n+    foo(VALUE);\n+}\n+\n+fn foo(value: usize) ${0:-> _} {\n+    todo!()\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn add_function_with_static_arg() {\n+        check_assist(\n+            generate_function,\n+            r\"\n+static VALUE: usize = 0;\n+fn main() {\n+    foo$0(VALUE);\n+}\n+\",\n+            r\"\n+static VALUE: usize = 0;\n+fn main() {\n+    foo(VALUE);\n+}\n+\n+fn foo(value: usize) ${0:-> _} {\n+    todo!()\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn add_function_with_static_mut_arg() {\n+        check_assist(\n+            generate_function,\n+            r\"\n+static mut VALUE: usize = 0;\n+fn main() {\n+    foo$0(VALUE);\n+}\n+\",\n+            r\"\n+static mut VALUE: usize = 0;\n+fn main() {\n+    foo(VALUE);\n+}\n+\n+fn foo(value: usize) ${0:-> _} {\n+    todo!()\n+}\n \",\n         )\n     }"}]}