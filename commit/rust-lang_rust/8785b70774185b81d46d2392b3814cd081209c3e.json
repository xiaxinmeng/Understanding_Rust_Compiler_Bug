{"sha": "8785b70774185b81d46d2392b3814cd081209c3e", "node_id": "C_kwDOAAsO6NoAKDg3ODViNzA3NzQxODViODFkNDZkMjM5MmIzODE0Y2QwODEyMDljM2U", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-17T09:49:30Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-20T16:46:25Z"}, "message": "Inline DepNodeParams methods.", "tree": {"sha": "fa389f19b2a8dabba7620716561997cb39f54099", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa389f19b2a8dabba7620716561997cb39f54099"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8785b70774185b81d46d2392b3814cd081209c3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8785b70774185b81d46d2392b3814cd081209c3e", "html_url": "https://github.com/rust-lang/rust/commit/8785b70774185b81d46d2392b3814cd081209c3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8785b70774185b81d46d2392b3814cd081209c3e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df71d0874a09610ad7fd8f44cde2ad8df83d6182", "url": "https://api.github.com/repos/rust-lang/rust/commits/df71d0874a09610ad7fd8f44cde2ad8df83d6182", "html_url": "https://github.com/rust-lang/rust/commit/df71d0874a09610ad7fd8f44cde2ad8df83d6182"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "7ea13649eeff5832b614fbc91381534c671d7f85", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8785b70774185b81d46d2392b3814cd081209c3e/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8785b70774185b81d46d2392b3814cd081209c3e/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=8785b70774185b81d46d2392b3814cd081209c3e", "patch": "@@ -308,10 +308,12 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for () {\n         FingerprintStyle::Unit\n     }\n \n+    #[inline(always)]\n     fn to_fingerprint(&self, _: TyCtxt<'tcx>) -> Fingerprint {\n         Fingerprint::ZERO\n     }\n \n+    #[inline(always)]\n     fn recover(_: TyCtxt<'tcx>, _: &DepNode) -> Option<Self> {\n         Some(())\n     }\n@@ -323,14 +325,17 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for DefId {\n         FingerprintStyle::DefPathHash\n     }\n \n+    #[inline(always)]\n     fn to_fingerprint(&self, tcx: TyCtxt<'tcx>) -> Fingerprint {\n         tcx.def_path_hash(*self).0\n     }\n \n+    #[inline(always)]\n     fn to_debug_str(&self, tcx: TyCtxt<'tcx>) -> String {\n         tcx.def_path_str(*self)\n     }\n \n+    #[inline(always)]\n     fn recover(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> Option<Self> {\n         dep_node.extract_def_id(tcx)\n     }\n@@ -342,14 +347,17 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for LocalDefId {\n         FingerprintStyle::DefPathHash\n     }\n \n+    #[inline(always)]\n     fn to_fingerprint(&self, tcx: TyCtxt<'tcx>) -> Fingerprint {\n         self.to_def_id().to_fingerprint(tcx)\n     }\n \n+    #[inline(always)]\n     fn to_debug_str(&self, tcx: TyCtxt<'tcx>) -> String {\n         self.to_def_id().to_debug_str(tcx)\n     }\n \n+    #[inline(always)]\n     fn recover(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> Option<Self> {\n         dep_node.extract_def_id(tcx).map(|id| id.expect_local())\n     }\n@@ -361,15 +369,18 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for CrateNum {\n         FingerprintStyle::DefPathHash\n     }\n \n+    #[inline(always)]\n     fn to_fingerprint(&self, tcx: TyCtxt<'tcx>) -> Fingerprint {\n         let def_id = DefId { krate: *self, index: CRATE_DEF_INDEX };\n         def_id.to_fingerprint(tcx)\n     }\n \n+    #[inline(always)]\n     fn to_debug_str(&self, tcx: TyCtxt<'tcx>) -> String {\n         tcx.crate_name(*self).to_string()\n     }\n \n+    #[inline(always)]\n     fn recover(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> Option<Self> {\n         dep_node.extract_def_id(tcx).map(|id| id.krate)\n     }\n@@ -384,6 +395,7 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for (DefId, DefId) {\n     // We actually would not need to specialize the implementation of this\n     // method but it's faster to combine the hashes than to instantiate a full\n     // hashing context and stable-hashing state.\n+    #[inline(always)]\n     fn to_fingerprint(&self, tcx: TyCtxt<'tcx>) -> Fingerprint {\n         let (def_id_0, def_id_1) = *self;\n \n@@ -393,6 +405,7 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for (DefId, DefId) {\n         def_path_hash_0.0.combine(def_path_hash_1.0)\n     }\n \n+    #[inline(always)]\n     fn to_debug_str(&self, tcx: TyCtxt<'tcx>) -> String {\n         let (def_id_0, def_id_1) = *self;\n \n@@ -409,6 +422,7 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for HirId {\n     // We actually would not need to specialize the implementation of this\n     // method but it's faster to combine the hashes than to instantiate a full\n     // hashing context and stable-hashing state.\n+    #[inline(always)]\n     fn to_fingerprint(&self, tcx: TyCtxt<'tcx>) -> Fingerprint {\n         let HirId { owner, local_id } = *self;\n "}, {"sha": "c274c2cc26c157008ee9b7eec3d207564cfd385c", "filename": "compiler/rustc_query_system/src/dep_graph/dep_node.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8785b70774185b81d46d2392b3814cd081209c3e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8785b70774185b81d46d2392b3814cd081209c3e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=8785b70774185b81d46d2392b3814cd081209c3e", "patch": "@@ -124,11 +124,12 @@ impl<Ctxt: DepContext, T> DepNodeParams<Ctxt> for T\n where\n     T: for<'a> HashStable<StableHashingContext<'a>> + fmt::Debug,\n {\n-    #[inline]\n+    #[inline(always)]\n     default fn fingerprint_style() -> FingerprintStyle {\n         FingerprintStyle::Opaque\n     }\n \n+    #[inline(always)]\n     default fn to_fingerprint(&self, tcx: Ctxt) -> Fingerprint {\n         let mut hcx = tcx.create_stable_hashing_context();\n         let mut hasher = StableHasher::new();\n@@ -138,10 +139,12 @@ where\n         hasher.finish()\n     }\n \n+    #[inline(always)]\n     default fn to_debug_str(&self, _: Ctxt) -> String {\n         format!(\"{:?}\", *self)\n     }\n \n+    #[inline(always)]\n     default fn recover(_: Ctxt, _: &DepNode<Ctxt::DepKind>) -> Option<Self> {\n         None\n     }"}]}