{"sha": "6586074426a2f88a8eb9c530a586c74fdb26503f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ODYwNzQ0MjZhMmY4OGE4ZWI5YzUzMGE1ODZjNzRmZGIyNjUwM2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-20T12:52:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-20T12:52:50Z"}, "message": "Auto merge of #50062 - varkor:xpy-check-rustdoc, r=Mark-Simulacrum\n\nAdd rustdoc to x.py check\n\nModifying rustc can often cause errors in rustdoc, so it's useful to include it in the steps that are checked.\n\nOne thing that I was unsure about was when to call `clear_if_dirty` (both in this step, and in other steps in relation to this one) \u2014 we want to be sure rustdoc will always be rechecked after modifying previous steps \u2014\u00a0but does this belong in rustdoc, or the other steps?\n\nFixes #49917.\n\nr? @Mark-Simulacrum", "tree": {"sha": "237f9d322ca4dba6568d096a33417ebddd2cadea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/237f9d322ca4dba6568d096a33417ebddd2cadea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6586074426a2f88a8eb9c530a586c74fdb26503f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6586074426a2f88a8eb9c530a586c74fdb26503f", "html_url": "https://github.com/rust-lang/rust/commit/6586074426a2f88a8eb9c530a586c74fdb26503f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6586074426a2f88a8eb9c530a586c74fdb26503f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85f5dd489ea1cb93707ba1ddf4a7678d3aee3f74", "url": "https://api.github.com/repos/rust-lang/rust/commits/85f5dd489ea1cb93707ba1ddf4a7678d3aee3f74", "html_url": "https://github.com/rust-lang/rust/commit/85f5dd489ea1cb93707ba1ddf4a7678d3aee3f74"}, {"sha": "261da7108df3c49431282f8e7d2fcb736286dc17", "url": "https://api.github.com/repos/rust-lang/rust/commits/261da7108df3c49431282f8e7d2fcb736286dc17", "html_url": "https://github.com/rust-lang/rust/commit/261da7108df3c49431282f8e7d2fcb736286dc17"}], "stats": {"total": 62, "additions": 60, "deletions": 2}, "files": [{"sha": "b9c82127342fddf94f4125c60934a1eb944c0e05", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6586074426a2f88a8eb9c530a586c74fdb26503f/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6586074426a2f88a8eb9c530a586c74fdb26503f/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=6586074426a2f88a8eb9c530a586c74fdb26503f", "patch": "@@ -310,7 +310,8 @@ impl<'a> Builder<'a> {\n                 tool::Compiletest, tool::RemoteTestServer, tool::RemoteTestClient,\n                 tool::RustInstaller, tool::Cargo, tool::Rls, tool::Rustdoc, tool::Clippy,\n                 native::Llvm, tool::Rustfmt, tool::Miri, native::Lld),\n-            Kind::Check => describe!(check::Std, check::Test, check::Rustc, check::CodegenBackend),\n+            Kind::Check => describe!(check::Std, check::Test, check::Rustc, check::CodegenBackend,\n+                check::Rustdoc),\n             Kind::Test => describe!(test::Tidy, test::Bootstrap, test::Ui, test::RunPass,\n                 test::CompileFail, test::ParseFail, test::RunFail, test::RunPassValgrind,\n                 test::MirOpt, test::Codegen, test::CodegenUnits, test::Incremental, test::Debuginfo,"}, {"sha": "64354ae29aa243c6b49b916ae5a6954174970a9c", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6586074426a2f88a8eb9c530a586c74fdb26503f/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6586074426a2f88a8eb9c530a586c74fdb26503f/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=6586074426a2f88a8eb9c530a586c74fdb26503f", "patch": "@@ -12,6 +12,7 @@\n \n use compile::{run_cargo, std_cargo, test_cargo, rustc_cargo, rustc_cargo_env, add_to_sysroot};\n use builder::{RunConfig, Builder, ShouldRun, Step};\n+use tool::{self, prepare_tool_cargo};\n use {Compiler, Mode};\n use cache::{INTERNER, Interned};\n use std::path::PathBuf;\n@@ -41,6 +42,7 @@ impl Step for Std {\n \n         let out_dir = builder.stage_out(compiler, Mode::Libstd);\n         builder.clear_if_dirty(&out_dir, &builder.rustc(compiler));\n+\n         let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"check\");\n         std_cargo(builder, &compiler, target, &mut cargo);\n \n@@ -170,11 +172,12 @@ impl Step for Test {\n     }\n \n     fn run(self, builder: &Builder) {\n-        let target = self.target;\n         let compiler = builder.compiler(0, builder.config.build);\n+        let target = self.target;\n \n         let out_dir = builder.stage_out(compiler, Mode::Libtest);\n         builder.clear_if_dirty(&out_dir, &libstd_stamp(builder, compiler, target));\n+\n         let mut cargo = builder.cargo(compiler, Mode::Libtest, target, \"check\");\n         test_cargo(builder, &compiler, target, &mut cargo);\n \n@@ -190,6 +193,54 @@ impl Step for Test {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct Rustdoc {\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for Rustdoc {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = true;\n+    const DEFAULT: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/rustdoc\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Rustdoc {\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) {\n+        let compiler = builder.compiler(0, builder.config.build);\n+        let target = self.target;\n+\n+        let mut cargo = prepare_tool_cargo(builder,\n+                                           compiler,\n+                                           target,\n+                                           \"check\",\n+                                           \"src/tools/rustdoc\");\n+\n+        let _folder = builder.fold_output(|| format!(\"stage{}-rustdoc\", compiler.stage));\n+        println!(\"Checking rustdoc artifacts ({} -> {})\", &compiler.host, target);\n+        run_cargo(builder,\n+                  &mut cargo,\n+                  &rustdoc_stamp(builder, compiler, target),\n+                  true);\n+\n+        let libdir = builder.sysroot_libdir(compiler, target);\n+        add_to_sysroot(&builder, &libdir, &rustdoc_stamp(builder, compiler, target));\n+\n+        builder.ensure(tool::CleanTools {\n+            compiler,\n+            target,\n+            mode: Mode::Tool,\n+        });\n+    }\n+}\n+\n /// Cargo's output path for the standard library in a given stage, compiled\n /// by a particular compiler for the specified target.\n pub fn libstd_stamp(builder: &Builder, compiler: Compiler, target: Interned<String>) -> PathBuf {\n@@ -217,3 +268,9 @@ fn codegen_backend_stamp(builder: &Builder,\n     builder.cargo_out(compiler, Mode::Librustc, target)\n          .join(format!(\".librustc_trans-{}-check.stamp\", backend))\n }\n+\n+/// Cargo's output path for rustdoc in a given stage, compiled by a particular\n+/// compiler for the specified target.\n+pub fn rustdoc_stamp(builder: &Builder, compiler: Compiler, target: Interned<String>) -> PathBuf {\n+    builder.cargo_out(compiler, Mode::Tool, target).join(\".rustdoc-check.stamp\")\n+}"}]}