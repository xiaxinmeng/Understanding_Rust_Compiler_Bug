{"sha": "0fce468fe80ef818587d3fd2b4702a7d99f59cc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmY2U0NjhmZTgwZWY4MTg1ODdkM2ZkMmI0NzAyYTdkOTlmNTljYzQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-07-19T09:37:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-19T09:37:41Z"}, "message": "Rollup merge of #86230 - GuillaumeGomez:nocapture, r=camelid\n\nAdd --nocapture option to rustdoc\n\nFixes https://github.com/rust-lang/rust/issues/26309.\nFixes #45724.\n\nOnce this PR is merged, I'll send a PR to cargo to also pass `--nocapture` to rustdoc.\n\ncc `@jyn514`\nr? `@camelid`", "tree": {"sha": "93df4ff2c586d14a57ef99c7a1013e0a1bb63289", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93df4ff2c586d14a57ef99c7a1013e0a1bb63289"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fce468fe80ef818587d3fd2b4702a7d99f59cc4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg9UfmCRBK7hj4Ov3rIwAA7UEIAIgU+UyZjG4iAzJeSLNMC3DH\nvGdqKE/w4U3PJrICqVBvNxvIF32q1klrst3wXXp9k2NW/eGhy1m7yJZenOZtg/vt\nNm+pnjXFymmJ7cHZUMZlwhLpDYRBGnh7JuBfsSRr+65OzUn/x14h2UpDVgqypcyv\nHn3PthKQ3fPjvPPsg/KB6N21fZH2VeFeN2/gpDkhXCv+eMfWVAwq56OEPGwn+acM\n2L2KbFVMbrOeagaIEXu5UDYj0cyj+dajhK33wcnTBOp3keL6V9SRUlD9mi5ZWLvq\npJSgP8cEZOp8QHf7fmQOye/ku8pUqU+CygxWfs7oNgKc6erJm02B9t+Fok3dskA=\n=4oQ/\n-----END PGP SIGNATURE-----\n", "payload": "tree 93df4ff2c586d14a57ef99c7a1013e0a1bb63289\nparent 83f08223a90b71f59e5dc5f38e384a49a76c8452\nparent d5e32947344751a421c85aed2e4dd370160f5470\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1626687461 +0200\ncommitter GitHub <noreply@github.com> 1626687461 +0200\n\nRollup merge of #86230 - GuillaumeGomez:nocapture, r=camelid\n\nAdd --nocapture option to rustdoc\n\nFixes https://github.com/rust-lang/rust/issues/26309.\nFixes #45724.\n\nOnce this PR is merged, I'll send a PR to cargo to also pass `--nocapture` to rustdoc.\n\ncc `@jyn514`\nr? `@camelid`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fce468fe80ef818587d3fd2b4702a7d99f59cc4", "html_url": "https://github.com/rust-lang/rust/commit/0fce468fe80ef818587d3fd2b4702a7d99f59cc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83f08223a90b71f59e5dc5f38e384a49a76c8452", "url": "https://api.github.com/repos/rust-lang/rust/commits/83f08223a90b71f59e5dc5f38e384a49a76c8452", "html_url": "https://github.com/rust-lang/rust/commit/83f08223a90b71f59e5dc5f38e384a49a76c8452"}, {"sha": "d5e32947344751a421c85aed2e4dd370160f5470", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e32947344751a421c85aed2e4dd370160f5470", "html_url": "https://github.com/rust-lang/rust/commit/d5e32947344751a421c85aed2e4dd370160f5470"}], "stats": {"total": 87, "additions": 86, "deletions": 1}, "files": [{"sha": "c8af369a9695e7f6f9f82985a7e32181f25c6f02", "filename": "src/doc/rustdoc/src/command-line-arguments.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md?ref=0fce468fe80ef818587d3fd2b4702a7d99f59cc4", "patch": "@@ -417,3 +417,10 @@ This flag is **deprecated** and **has no effect**.\n Rustdoc only supports Rust source code and Markdown input formats. If the\n file ends in `.md` or `.markdown`, `rustdoc` treats it as a Markdown file.\n Otherwise, it assumes that the input file is Rust.\n+\n+## `--nocapture`\n+\n+When this flag is used with `--test`, the output (stdout and stderr) of your tests won't be\n+captured by rustdoc. Instead, the output will be directed to your terminal,\n+as if you had run the test executable manually. This is especially useful\n+for debugging your tests!"}, {"sha": "adbdde0d92cd6034fe7ea78c33dc7dec546757c2", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=0fce468fe80ef818587d3fd2b4702a7d99f59cc4", "patch": "@@ -156,6 +156,8 @@ crate struct Options {\n     crate run_check: bool,\n     /// Whether doctests should emit unused externs\n     crate json_unused_externs: bool,\n+    /// Whether to skip capturing stdout and stderr of tests.\n+    crate nocapture: bool,\n }\n \n impl fmt::Debug for Options {\n@@ -199,6 +201,7 @@ impl fmt::Debug for Options {\n             .field(\"enable-per-target-ignores\", &self.enable_per_target_ignores)\n             .field(\"run_check\", &self.run_check)\n             .field(\"no_run\", &self.no_run)\n+            .field(\"nocapture\", &self.nocapture)\n             .finish()\n     }\n }\n@@ -627,6 +630,7 @@ impl Options {\n         let run_check = matches.opt_present(\"check\");\n         let generate_redirect_map = matches.opt_present(\"generate-redirect-map\");\n         let show_type_layout = matches.opt_present(\"show-type-layout\");\n+        let nocapture = matches.opt_present(\"nocapture\");\n \n         let (lint_opts, describe_lints, lint_cap, _) =\n             get_cmd_lint_options(matches, error_format, &debugging_opts);\n@@ -665,6 +669,7 @@ impl Options {\n             test_builder,\n             run_check,\n             no_run,\n+            nocapture,\n             render_options: RenderOptions {\n                 output,\n                 external_html,"}, {"sha": "5ce7c49278d23baea4b41267e8931ff2a0f9af42", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=0fce468fe80ef818587d3fd2b4702a7d99f59cc4", "patch": "@@ -107,6 +107,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n \n     let mut test_args = options.test_args.clone();\n     let display_warnings = options.display_warnings;\n+    let nocapture = options.nocapture;\n     let externs = options.externs.clone();\n     let json_unused_externs = options.json_unused_externs;\n \n@@ -166,6 +167,9 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n     };\n \n     test_args.insert(0, \"rustdoctest\".to_string());\n+    if nocapture {\n+        test_args.push(\"--nocapture\".to_string());\n+    }\n \n     test::test_main(&test_args, tests, Some(test::Options::new().display_output(display_warnings)));\n \n@@ -456,7 +460,16 @@ fn run_test(\n         cmd.current_dir(run_directory);\n     }\n \n-    match cmd.output() {\n+    let result = if options.nocapture {\n+        cmd.status().map(|status| process::Output {\n+            status,\n+            stdout: Vec::new(),\n+            stderr: Vec::new(),\n+        })\n+    } else {\n+        cmd.output()\n+    };\n+    match result {\n         Err(e) => return Err(TestFailure::ExecutionError(e)),\n         Ok(out) => {\n             if should_panic && out.status.success() {"}, {"sha": "19deaa11388d8601d012b03a6299d3ba44939506", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=0fce468fe80ef818587d3fd2b4702a7d99f59cc4", "patch": "@@ -604,6 +604,9 @@ fn opts() -> Vec<RustcOptGroup> {\n         unstable(\"show-type-layout\", |o| {\n             o.optflagmulti(\"\", \"show-type-layout\", \"Include the memory layout of types in the docs\")\n         }),\n+        unstable(\"nocapture\", |o| {\n+            o.optflag(\"\", \"nocapture\", \"Don't capture stdout and stderr of tests\")\n+        }),\n     ]\n }\n "}, {"sha": "6c8b95c04c9e4be674830bf15916feed5b805e3c", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=0fce468fe80ef818587d3fd2b4702a7d99f59cc4", "patch": "@@ -136,6 +136,9 @@ crate fn test(mut options: Options) -> Result<(), String> {\n     find_testable_code(&input_str, &mut collector, codes, options.enable_per_target_ignores, None);\n \n     options.test_args.insert(0, \"rustdoctest\".to_string());\n+    if options.nocapture {\n+        options.test_args.push(\"--nocapture\".to_string());\n+    }\n     test::test_main(\n         &options.test_args,\n         collector.tests,"}, {"sha": "7706bd1f3e39ca19937fe6ce90b4ebe6251ae54f", "filename": "src/test/rustdoc-ui/nocapture-fail.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.rs?ref=0fce468fe80ef818587d3fd2b4702a7d99f59cc4", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+// compile-flags:--test -Zunstable-options --nocapture\n+// normalize-stderr-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n+\n+/// ```compile_fail\n+/// fn foo() {\n+///     Input: 123\n+/// }\n+/// ```\n+pub struct Foo;"}, {"sha": "16a5ac47cd2579401e3c06df48f346751e207156", "filename": "src/test/rustdoc-ui/nocapture-fail.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.stderr?ref=0fce468fe80ef818587d3fd2b4702a7d99f59cc4", "patch": "@@ -0,0 +1,18 @@\n+error: struct literal body without path\n+  --> $DIR/nocapture-fail.rs:8:10\n+   |\n+LL |   fn foo() {\n+   |  __________^\n+LL | |     Input: 123\n+LL | | }\n+   | |_^\n+   |\n+help: you might have forgotten to add the struct literal inside the block\n+   |\n+LL | fn foo() { SomeStruct {\n+LL |     Input: 123\n+LL | } }\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "754f77db53ca3a535ad4a25565a389499eb89d53", "filename": "src/test/rustdoc-ui/nocapture-fail.stdout", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fnocapture-fail.stdout?ref=0fce468fe80ef818587d3fd2b4702a7d99f59cc4", "patch": "@@ -0,0 +1,6 @@\n+\n+running 1 test\n+test $DIR/nocapture-fail.rs - Foo (line 7) - compile fail ... ok\n+\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n+"}, {"sha": "321f5ca08eded169d0bb4f4ca150804df0f71d2c", "filename": "src/test/rustdoc-ui/nocapture.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Ftest%2Frustdoc-ui%2Fnocapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Ftest%2Frustdoc-ui%2Fnocapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fnocapture.rs?ref=0fce468fe80ef818587d3fd2b4702a7d99f59cc4", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+// compile-flags:--test -Zunstable-options --nocapture\n+// normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n+\n+/// ```\n+/// println!(\"hello!\");\n+/// eprintln!(\"stderr\");\n+/// ```\n+pub struct Foo;"}, {"sha": "af6415db3c72404d1adfed96a44dde1c9af0f416", "filename": "src/test/rustdoc-ui/nocapture.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Ftest%2Frustdoc-ui%2Fnocapture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Ftest%2Frustdoc-ui%2Fnocapture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fnocapture.stderr?ref=0fce468fe80ef818587d3fd2b4702a7d99f59cc4", "patch": "@@ -0,0 +1 @@\n+stderr"}, {"sha": "4880e75da706227b5b992429e9361f1d871f3066", "filename": "src/test/rustdoc-ui/nocapture.stdout", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Ftest%2Frustdoc-ui%2Fnocapture.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0fce468fe80ef818587d3fd2b4702a7d99f59cc4/src%2Ftest%2Frustdoc-ui%2Fnocapture.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fnocapture.stdout?ref=0fce468fe80ef818587d3fd2b4702a7d99f59cc4", "patch": "@@ -0,0 +1,7 @@\n+\n+running 1 test\n+hello!\n+test $DIR/nocapture.rs - Foo (line 6) ... ok\n+\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n+"}]}