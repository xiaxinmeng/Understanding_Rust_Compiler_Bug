{"sha": "f86f03263cb2de5090ac71663327fba3bd452315", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NmYwMzI2M2NiMmRlNTA5MGFjNzE2NjMzMjdmYmEzYmQ0NTIzMTU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-16T20:18:44Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-16T20:18:44Z"}, "message": "outlives: ignore lifetimes shallowly found in `ty::FnDef`s.", "tree": {"sha": "ed783ca439f04b1d39bfc1b9b74f8cef88e57b2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed783ca439f04b1d39bfc1b9b74f8cef88e57b2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f86f03263cb2de5090ac71663327fba3bd452315", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f86f03263cb2de5090ac71663327fba3bd452315", "html_url": "https://github.com/rust-lang/rust/commit/f86f03263cb2de5090ac71663327fba3bd452315", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f86f03263cb2de5090ac71663327fba3bd452315/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fb5187d0423f4cd0441526571b8cd61927123c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fb5187d0423f4cd0441526571b8cd61927123c9", "html_url": "https://github.com/rust-lang/rust/commit/7fb5187d0423f4cd0441526571b8cd61927123c9"}], "stats": {"total": 70, "additions": 64, "deletions": 6}, "files": [{"sha": "3a7ae0c66312fafd56a6674d641cd9a4a301fe6e", "filename": "src/librustc_infer/infer/outlives/verify.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f86f03263cb2de5090ac71663327fba3bd452315/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f86f03263cb2de5090ac71663327fba3bd452315/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs?ref=f86f03263cb2de5090ac71663327fba3bd452315", "patch": "@@ -42,6 +42,31 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         match ty.kind {\n             ty::Param(p) => self.param_bound(p),\n             ty::Projection(data) => self.projection_bound(data),\n+            ty::FnDef(_, substs) => {\n+                // HACK(eddyb) ignore lifetimes found shallowly in `substs`.\n+                // This is inconsistent with `ty::Adt` (including all substs),\n+                // but consistent with previous (accidental) behavior.\n+                // See https://github.com/rust-lang/rust/issues/70917\n+                // for further background and discussion.\n+                let mut bounds = substs\n+                    .iter()\n+                    .filter_map(|&child| match child.unpack() {\n+                        GenericArgKind::Type(ty) => Some(self.type_bound(ty)),\n+                        GenericArgKind::Lifetime(_) => None,\n+                        GenericArgKind::Const(_) => Some(self.recursive_bound(child)),\n+                    })\n+                    .filter(|bound| {\n+                        // Remove bounds that must hold, since they are not interesting.\n+                        !bound.must_hold()\n+                    });\n+\n+                match (bounds.next(), bounds.next()) {\n+                    (Some(first), None) => first,\n+                    (first, second) => VerifyBound::AllBounds(\n+                        first.into_iter().chain(second).chain(bounds).collect(),\n+                    ),\n+                }\n+            }\n             _ => self.recursive_bound(ty.into()),\n         }\n     }"}, {"sha": "4fd4d0d1f062717cd6556854b8aa0803dd3039c9", "filename": "src/librustc_middle/ty/outlives.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f86f03263cb2de5090ac71663327fba3bd452315/src%2Flibrustc_middle%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f86f03263cb2de5090ac71663327fba3bd452315/src%2Flibrustc_middle%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Foutlives.rs?ref=f86f03263cb2de5090ac71663327fba3bd452315", "patch": "@@ -62,6 +62,27 @@ fn compute_components(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, out: &mut SmallVec<[Compo\n     // in the `subtys` iterator (e.g., when encountering a\n     // projection).\n     match ty.kind {\n+            ty::FnDef(_, substs) => {\n+                // HACK(eddyb) ignore lifetimes found shallowly in `substs`.\n+                // This is inconsistent with `ty::Adt` (including all substs)\n+                // and with `ty::Closure` (ignoring all substs other than\n+                // upvars, of which a `ty::FnDef` doesn't have any), but\n+                // consistent with previous (accidental) behavior.\n+                // See https://github.com/rust-lang/rust/issues/70917\n+                // for further background and discussion.\n+                for &child in substs {\n+                    match child.unpack() {\n+                        GenericArgKind::Type(ty) => {\n+                            compute_components(tcx, ty, out);\n+                        }\n+                        GenericArgKind::Lifetime(_) => {}\n+                        GenericArgKind::Const(_) => {\n+                            compute_components_recursive(tcx, child, out);\n+                        }\n+                    }\n+                }\n+            }\n+\n             ty::Closure(_, ref substs) => {\n                 for upvar_ty in substs.as_closure().upvar_tys() {\n                     compute_components(tcx, upvar_ty, out);\n@@ -136,23 +157,22 @@ fn compute_components(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, out: &mut SmallVec<[Compo\n             ty::Float(..) |       // OutlivesScalar\n             ty::Never |           // ...\n             ty::Adt(..) |         // OutlivesNominalType\n-            ty::Opaque(..) |        // OutlivesNominalType (ish)\n+            ty::Opaque(..) |      // OutlivesNominalType (ish)\n             ty::Foreign(..) |     // OutlivesNominalType\n             ty::Str |             // OutlivesScalar (ish)\n             ty::Array(..) |       // ...\n             ty::Slice(..) |       // ...\n             ty::RawPtr(..) |      // ...\n             ty::Ref(..) |         // OutlivesReference\n             ty::Tuple(..) |       // ...\n-            ty::FnDef(..) |       // OutlivesFunction (*)\n             ty::FnPtr(_) |        // OutlivesFunction (*)\n-            ty::Dynamic(..) |       // OutlivesObject, OutlivesFragment (*)\n+            ty::Dynamic(..) |     // OutlivesObject, OutlivesFragment (*)\n             ty::Placeholder(..) |\n             ty::Bound(..) |\n             ty::Error => {\n-                // (*) Bare functions and traits are both binders. In the\n-                // RFC, this means we would add the bound regions to the\n-                // \"bound regions list\".  In our representation, no such\n+                // (*) Function pointers and trait objects are both binders.\n+                // In the RFC, this means we would add the bound regions to\n+                // the \"bound regions list\".  In our representation, no such\n                 // list is maintained explicitly, because bound regions\n                 // themselves can be readily identified.\n                 compute_components_recursive(tcx, ty.into(), out);"}, {"sha": "b9aab27142e312fa2aa55b0554a9d674d22e200d", "filename": "src/test/ui/lifetimes/issue-70917-lifetimes-in-fn-def.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f86f03263cb2de5090ac71663327fba3bd452315/src%2Ftest%2Fui%2Flifetimes%2Fissue-70917-lifetimes-in-fn-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f86f03263cb2de5090ac71663327fba3bd452315/src%2Ftest%2Fui%2Flifetimes%2Fissue-70917-lifetimes-in-fn-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-70917-lifetimes-in-fn-def.rs?ref=f86f03263cb2de5090ac71663327fba3bd452315", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+\n+fn assert_static<T: 'static>(_: T) {}\n+\n+// NOTE(eddyb) the `'a: 'a` may look a bit strange, but we *really* want\n+// `'a` to be an *early-bound* parameter, otherwise it doesn't matter anyway.\n+fn capture_lifetime<'a: 'a>() {}\n+\n+fn test_lifetime<'a>() {\n+    assert_static(capture_lifetime::<'a>);\n+}\n+\n+fn main() {}"}]}