{"sha": "6c9e708f4be04a5da9267171602be135789b12b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjOWU3MDhmNGJlMDRhNWRhOTI2NzE3MTYwMmJlMTM1Nzg5YjEyYjg=", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2021-09-01T12:35:58Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2021-09-01T12:36:57Z"}, "message": "`fmt::Formatter::pad`: don't call chars().count() more than one time", "tree": {"sha": "92fd42839310abcf518ee3ed7e36f5860c00c520", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92fd42839310abcf518ee3ed7e36f5860c00c520"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c9e708f4be04a5da9267171602be135789b12b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9e708f4be04a5da9267171602be135789b12b8", "html_url": "https://github.com/rust-lang/rust/commit/6c9e708f4be04a5da9267171602be135789b12b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c9e708f4be04a5da9267171602be135789b12b8/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "608b5e1c209ffb4d6d0cf83817c823b12bbb7659", "url": "https://api.github.com/repos/rust-lang/rust/commits/608b5e1c209ffb4d6d0cf83817c823b12bbb7659", "html_url": "https://github.com/rust-lang/rust/commit/608b5e1c209ffb4d6d0cf83817c823b12bbb7659"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "18539fc95889befb870369c0e7cf224c83b06535", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6c9e708f4be04a5da9267171602be135789b12b8/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9e708f4be04a5da9267171602be135789b12b8/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=6c9e708f4be04a5da9267171602be135789b12b8", "patch": "@@ -1421,16 +1421,21 @@ impl<'a> Formatter<'a> {\n             // If we're under the maximum length, and there's no minimum length\n             // requirements, then we can just emit the string\n             None => self.buf.write_str(s),\n-            // If we're under the maximum width, check if we're over the minimum\n-            // width, if so it's as easy as just emitting the string.\n-            Some(width) if s.chars().count() >= width => self.buf.write_str(s),\n-            // If we're under both the maximum and the minimum width, then fill\n-            // up the minimum width with the specified string + some alignment.\n             Some(width) => {\n-                let align = rt::v1::Alignment::Left;\n-                let post_padding = self.padding(width - s.chars().count(), align)?;\n-                self.buf.write_str(s)?;\n-                post_padding.write(self.buf)\n+                let chars_count = s.chars().count();\n+                // If we're under the maximum width, check if we're over the minimum\n+                // width, if so it's as easy as just emitting the string.\n+                if chars_count >= width {\n+                    self.buf.write_str(s)\n+                }\n+                // If we're under both the maximum and the minimum width, then fill\n+                // up the minimum width with the specified string + some alignment.\n+                else {\n+                    let align = rt::v1::Alignment::Left;\n+                    let post_padding = self.padding(width - chars_count, align)?;\n+                    self.buf.write_str(s)?;\n+                    post_padding.write(self.buf)\n+                }\n             }\n         }\n     }"}]}