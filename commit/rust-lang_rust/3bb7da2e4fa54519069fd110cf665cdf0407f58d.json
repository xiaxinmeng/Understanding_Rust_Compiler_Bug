{"sha": "3bb7da2e4fa54519069fd110cf665cdf0407f58d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYjdkYTJlNGZhNTQ1MTkwNjlmZDExMGNmNjY1Y2RmMDQwN2Y1OGQ=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-11T18:41:28Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-19T18:51:40Z"}, "message": "Replace `rustc_typeck::Namespace` with `rustc_hir::def::Namespace`", "tree": {"sha": "99cdec1179023d91cadff2e27353bf6deb2e6c66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99cdec1179023d91cadff2e27353bf6deb2e6c66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bb7da2e4fa54519069fd110cf665cdf0407f58d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bb7da2e4fa54519069fd110cf665cdf0407f58d", "html_url": "https://github.com/rust-lang/rust/commit/3bb7da2e4fa54519069fd110cf665cdf0407f58d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bb7da2e4fa54519069fd110cf665cdf0407f58d/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea3c9d27cffceb9d4c8dcfda1c96b138d7f01f3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3c9d27cffceb9d4c8dcfda1c96b138d7f01f3d", "html_url": "https://github.com/rust-lang/rust/commit/ea3c9d27cffceb9d4c8dcfda1c96b138d7f01f3d"}], "stats": {"total": 80, "additions": 32, "deletions": 48}, "files": [{"sha": "c70a296e34bf6f95e9077aaf02ec5ee79e0bfa0d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3bb7da2e4fa54519069fd110cf665cdf0407f58d/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb7da2e4fa54519069fd110cf665cdf0407f58d/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=3bb7da2e4fa54519069fd110cf665cdf0407f58d", "patch": "@@ -33,7 +33,7 @@ use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{self, par_iter, Lrc, ParallelIterator};\n use rustc_hir as hir;\n-use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n+use rustc_hir::def::{CtorKind, CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::{Constness, GlobMap, Node, TraitMap};\n use rustc_index::vec::{Idx, IndexVec};\n@@ -216,6 +216,13 @@ impl AssocKind {\n             ty::AssocKind::Const => \"associated constant\",\n         }\n     }\n+\n+    pub fn namespace(&self) -> Namespace {\n+        match *self {\n+            ty::AssocKind::OpaqueTy | ty::AssocKind::Type => Namespace::TypeNS,\n+            ty::AssocKind::Const | ty::AssocKind::Method => Namespace::ValueNS,\n+        }\n+    }\n }\n \n impl AssocItem {"}, {"sha": "8496a6ed23b8c72e94a3cc11566665e19aeec294", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3bb7da2e4fa54519069fd110cf665cdf0407f58d/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb7da2e4fa54519069fd110cf665cdf0407f58d/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=3bb7da2e4fa54519069fd110cf665cdf0407f58d", "patch": "@@ -1,4 +1,4 @@\n-use crate::def::{DefKind, Res};\n+use crate::def::{DefKind, Namespace, Res};\n use crate::def_id::DefId;\n crate use crate::hir_id::HirId;\n use crate::itemlikevisit;\n@@ -1897,6 +1897,15 @@ pub enum ImplItemKind<'hir> {\n     OpaqueTy(GenericBounds<'hir>),\n }\n \n+impl ImplItemKind<'_> {\n+    pub fn namespace(&self) -> Namespace {\n+        match self {\n+            ImplItemKind::OpaqueTy(..) | ImplItemKind::TyAlias(..) => Namespace::TypeNS,\n+            ImplItemKind::Const(..) | ImplItemKind::Method(..) => Namespace::ValueNS,\n+        }\n+    }\n+}\n+\n // The name of the associated type for `Fn` return types.\n pub const FN_OUTPUT_NAME: Symbol = sym::Output;\n "}, {"sha": "635c3038e0a9f24fb31474e502e7594408d617b6", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bb7da2e4fa54519069fd110cf665cdf0407f58d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb7da2e4fa54519069fd110cf665cdf0407f58d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=3bb7da2e4fa54519069fd110cf665cdf0407f58d", "patch": "@@ -9,7 +9,6 @@ use crate::collect::PlaceholderHirTyCollector;\n use crate::lint;\n use crate::middle::lang_items::SizedTraitLangItem;\n use crate::middle::resolve_lifetime as rl;\n-use crate::namespace::Namespace;\n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::ErrorReported;\n use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n@@ -20,7 +19,7 @@ use rustc::ty::{GenericParamDef, GenericParamDefKind};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId};\n use rustc_hir as hir;\n-use rustc_hir::def::{CtorOf, DefKind, Res};\n+use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::print;\n@@ -2202,7 +2201,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let item = tcx\n             .associated_items(trait_did)\n             .iter()\n-            .find(|i| Namespace::from(i.kind) == Namespace::Type && i.ident.modern() == assoc_ident)\n+            .find(|i| i.kind.namespace() == Namespace::TypeNS && i.ident.modern() == assoc_ident)\n             .expect(\"missing associated type\");\n \n         let ty = self.projected_ty_from_poly_trait_ref(span, item.def_id, assoc_segment, bound);"}, {"sha": "84e0024494215c685d34808cd65889fbeee02d9f", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bb7da2e4fa54519069fd110cf665cdf0407f58d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb7da2e4fa54519069fd110cf665cdf0407f58d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=3bb7da2e4fa54519069fd110cf665cdf0407f58d", "patch": "@@ -11,15 +11,14 @@ pub use self::CandidateSource::*;\n pub use self::MethodError::*;\n \n use crate::check::FnCtxt;\n-use crate::namespace::Namespace;\n use rustc::ty::subst::Subst;\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::GenericParamDefKind;\n use rustc::ty::{self, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TypeFoldable, WithConstness};\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n-use rustc_hir::def::{CtorOf, DefKind};\n+use rustc_hir::def::{CtorOf, DefKind, Namespace};\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::{self, InferOk};\n use rustc_infer::traits;\n@@ -342,7 +341,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Trait must have a method named `m_name` and it should not have\n         // type parameters or early-bound regions.\n         let tcx = self.tcx;\n-        let method_item = match self.associated_item(trait_def_id, m_name, Namespace::Value) {\n+        let method_item = match self.associated_item(trait_def_id, m_name, Namespace::ValueNS) {\n             Some(method_item) => method_item,\n             None => {\n                 tcx.sess.delay_span_bug("}, {"sha": "5ed39f04b073a3fdefc39505a88ccbcb6630cf90", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bb7da2e4fa54519069fd110cf665cdf0407f58d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb7da2e4fa54519069fd110cf665cdf0407f58d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=3bb7da2e4fa54519069fd110cf665cdf0407f58d", "patch": "@@ -7,7 +7,6 @@ use crate::check::autoderef::{self, Autoderef};\n use crate::check::FnCtxt;\n use crate::hir::def::DefKind;\n use crate::hir::def_id::DefId;\n-use crate::namespace::Namespace;\n \n use rustc::lint;\n use rustc::middle::stability;\n@@ -22,6 +21,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n+use rustc_hir::def::Namespace;\n use rustc_infer::infer::canonical::OriginalQueryValues;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -1699,13 +1699,13 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     .iter()\n                     .filter(|x| {\n                         let dist = lev_distance(&*name.as_str(), &x.ident.as_str());\n-                        Namespace::from(x.kind) == Namespace::Value && dist > 0 && dist <= max_dist\n+                        x.kind.namespace() == Namespace::ValueNS && dist > 0 && dist <= max_dist\n                     })\n                     .copied()\n                     .collect()\n             } else {\n                 self.fcx\n-                    .associated_item(def_id, name, Namespace::Value)\n+                    .associated_item(def_id, name, Namespace::ValueNS)\n                     .map_or(Vec::new(), |x| vec![x])\n             }\n         } else {"}, {"sha": "ea83b40a1cb6b1d88bc943b7e1035e7cce7bb755", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3bb7da2e4fa54519069fd110cf665cdf0407f58d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb7da2e4fa54519069fd110cf665cdf0407f58d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=3bb7da2e4fa54519069fd110cf665cdf0407f58d", "patch": "@@ -3,15 +3,14 @@\n \n use crate::check::FnCtxt;\n use crate::middle::lang_items::FnOnceTraitLangItem;\n-use crate::namespace::Namespace;\n use rustc::hir::map as hir_map;\n use rustc::hir::map::Map;\n use rustc::ty::print::with_crate_prefix;\n use rustc::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n-use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def::{DefKind, Namespace, Res};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::intravisit;\n use rustc_hir::{ExprKind, Node, QPath};\n@@ -97,13 +96,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // Provide the best span we can. Use the item, if local to crate, else\n                         // the impl, if local to crate (item may be defaulted), else nothing.\n                         let item = match self\n-                            .associated_item(impl_did, item_name, Namespace::Value)\n+                            .associated_item(impl_did, item_name, Namespace::ValueNS)\n                             .or_else(|| {\n                                 let impl_trait_ref = self.tcx.impl_trait_ref(impl_did)?;\n                                 self.associated_item(\n                                     impl_trait_ref.def_id,\n                                     item_name,\n-                                    Namespace::Value,\n+                                    Namespace::ValueNS,\n                                 )\n                             }) {\n                             Some(item) => item,\n@@ -185,7 +184,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     CandidateSource::TraitSource(trait_did) => {\n                         let item =\n-                            match self.associated_item(trait_did, item_name, Namespace::Value) {\n+                            match self.associated_item(trait_did, item_name, Namespace::ValueNS) {\n                                 Some(item) => item,\n                                 None => continue,\n                             };\n@@ -264,7 +263,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // be used exists at all, and the type is an ambiguous numeric type\n                     // ({integer}/{float}).\n                     let mut candidates = all_traits(self.tcx).into_iter().filter_map(|info| {\n-                        self.associated_item(info.def_id, item_name, Namespace::Value)\n+                        self.associated_item(info.def_id, item_name, Namespace::ValueNS)\n                     });\n                     if let (true, false, SelfSource::MethodCall(expr), Some(_)) = (\n                         actual.is_numeric(),\n@@ -779,7 +778,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // here).\n                 (type_is_local || info.def_id.is_local())\n                     && self\n-                        .associated_item(info.def_id, item_name, Namespace::Value)\n+                        .associated_item(info.def_id, item_name, Namespace::ValueNS)\n                         .filter(|item| {\n                             // We only want to suggest public or local traits (#45781).\n                             item.vis == ty::Visibility::Public || info.def_id.is_local()"}, {"sha": "d6acd8dd8947687e704f4dbd541ad476fada1492", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bb7da2e4fa54519069fd110cf665cdf0407f58d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb7da2e4fa54519069fd110cf665cdf0407f58d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3bb7da2e4fa54519069fd110cf665cdf0407f58d", "patch": "@@ -89,7 +89,6 @@ pub mod writeback;\n \n use crate::astconv::{AstConv, PathSeg};\n use crate::middle::lang_items;\n-use crate::namespace::Namespace;\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::hir::map::Map;\n use rustc::middle::region;\n@@ -1972,6 +1971,7 @@ fn check_impl_items_against_trait<'tcx>(\n     // Check existing impl methods to see if they are both present in trait\n     // and compatible with trait signature\n     for impl_item in impl_items() {\n+        let namespace = impl_item.kind.namespace();\n         let ty_impl_item = tcx.associated_item(tcx.hir().local_def_id(impl_item.hir_id));\n         let ty_trait_item = tcx\n             .associated_items(impl_trait_ref.def_id)"}, {"sha": "ad0e462afc748aca9d49da1f9e0398d972bbf882", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bb7da2e4fa54519069fd110cf665cdf0407f58d/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb7da2e4fa54519069fd110cf665cdf0407f58d/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=3bb7da2e4fa54519069fd110cf665cdf0407f58d", "patch": "@@ -1,4 +1,3 @@\n-use crate::namespace::Namespace;\n use rustc::ty::{AssocItem, TyCtxt};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;"}, {"sha": "c5f339d6b7648eb0a5192cc9cbc279c07d78f56e", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bb7da2e4fa54519069fd110cf665cdf0407f58d/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb7da2e4fa54519069fd110cf665cdf0407f58d/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=3bb7da2e4fa54519069fd110cf665cdf0407f58d", "patch": "@@ -83,7 +83,6 @@ mod collect;\n mod constrained_generic_params;\n mod impl_wf_check;\n mod mem_categorization;\n-mod namespace;\n mod outlives;\n mod structured_errors;\n mod variance;"}, {"sha": "2aa97aa7e6f0bf02fe1bb5462b3d9b049d72dae2", "filename": "src/librustc_typeck/namespace.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ea3c9d27cffceb9d4c8dcfda1c96b138d7f01f3d/src%2Flibrustc_typeck%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3c9d27cffceb9d4c8dcfda1c96b138d7f01f3d/src%2Flibrustc_typeck%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fnamespace.rs?ref=ea3c9d27cffceb9d4c8dcfda1c96b138d7f01f3d", "patch": "@@ -1,27 +0,0 @@\n-use rustc::ty;\n-use rustc_hir as hir;\n-\n-// Whether an item exists in the type or value namespace.\n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n-pub enum Namespace {\n-    Type,\n-    Value,\n-}\n-\n-impl From<ty::AssocKind> for Namespace {\n-    fn from(a_kind: ty::AssocKind) -> Self {\n-        match a_kind {\n-            ty::AssocKind::OpaqueTy | ty::AssocKind::Type => Namespace::Type,\n-            ty::AssocKind::Const | ty::AssocKind::Method => Namespace::Value,\n-        }\n-    }\n-}\n-\n-impl<'a> From<&'a hir::ImplItemKind<'_>> for Namespace {\n-    fn from(impl_kind: &'a hir::ImplItemKind<'_>) -> Self {\n-        match *impl_kind {\n-            hir::ImplItemKind::OpaqueTy(..) | hir::ImplItemKind::TyAlias(..) => Namespace::Type,\n-            hir::ImplItemKind::Const(..) | hir::ImplItemKind::Method(..) => Namespace::Value,\n-        }\n-    }\n-}"}]}