{"sha": "a83ad1b9e657307f395361be0c687a4690bbcd6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4M2FkMWI5ZTY1NzMwN2YzOTUzNjFiZTBjNjg3YTQ2OTBiYmNkNmY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-16T05:42:10Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-17T18:33:28Z"}, "message": "encode variant names and have log print them out.", "tree": {"sha": "570214cea440be14fc55ec90483a7e2006d567b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/570214cea440be14fc55ec90483a7e2006d567b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a83ad1b9e657307f395361be0c687a4690bbcd6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a83ad1b9e657307f395361be0c687a4690bbcd6f", "html_url": "https://github.com/rust-lang/rust/commit/a83ad1b9e657307f395361be0c687a4690bbcd6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a83ad1b9e657307f395361be0c687a4690bbcd6f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3bc8fada838c15e09e76a9d5d85438667c1636c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3bc8fada838c15e09e76a9d5d85438667c1636c", "html_url": "https://github.com/rust-lang/rust/commit/c3bc8fada838c15e09e76a9d5d85438667c1636c"}], "stats": {"total": 88, "additions": 75, "deletions": 13}, "files": [{"sha": "ace34b79a0c26c59b0564a23bb9ccf4011dd162e", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a83ad1b9e657307f395361be0c687a4690bbcd6f/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83ad1b9e657307f395361be0c687a4690bbcd6f/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=a83ad1b9e657307f395361be0c687a4690bbcd6f", "patch": "@@ -246,6 +246,7 @@ fn get_tag_variants(cdata: cmd, id: ast::node_id, tcx: ty::ctxt)\n     for did: ast::def_id in variant_ids {\n         let item = find_item(did.node, items);\n         let ctor_ty = item_type(item, tcx, cdata);\n+        let name = item_name(item);\n         let arg_tys: [ty::t] = [];\n         alt ty::struct(tcx, ctor_ty) {\n           ty::ty_fn(f) {\n@@ -257,8 +258,8 @@ fn get_tag_variants(cdata: cmd, id: ast::node_id, tcx: ty::ctxt)\n           some(val) { disr_val = val; }\n           _         { /* empty */ }\n         }\n-        infos += [@{args: arg_tys, ctor_ty: ctor_ty, id: did,\n-                    disr_val: disr_val}];\n+        infos += [@{args: arg_tys, ctor_ty: ctor_ty, name: name,\n+                    id: did, disr_val: disr_val}];\n         disr_val += 1;\n     }\n     ret infos;"}, {"sha": "1a0a6cfef9087dcc7874da49a39b192862ae2848", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a83ad1b9e657307f395361be0c687a4690bbcd6f/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83ad1b9e657307f395361be0c687a4690bbcd6f/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=a83ad1b9e657307f395361be0c687a4690bbcd6f", "patch": "@@ -239,6 +239,7 @@ fn encode_tag_variant_info(ecx: @encode_ctxt, ebml_w: ebml::writer,\n         ebml::start_tag(ebml_w, tag_items_data_item);\n         encode_def_id(ebml_w, local_def(variant.node.id));\n         encode_family(ebml_w, 'v' as u8);\n+        encode_name(ebml_w, variant.node.name);\n         encode_tag_id(ebml_w, local_def(id));\n         encode_type(ecx, ebml_w,\n                     node_id_to_monotype(ecx.ccx.tcx, variant.node.id));"}, {"sha": "8e49aeaa080344140b9cc20ba074a97cf3b96037", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a83ad1b9e657307f395361be0c687a4690bbcd6f/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83ad1b9e657307f395361be0c687a4690bbcd6f/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=a83ad1b9e657307f395361be0c687a4690bbcd6f", "patch": "@@ -458,6 +458,15 @@ fn shape_of_variant(ccx: @crate_ctxt, v: ty::variant_info,\n     ret s;\n }\n \n+//fn variant_names(ccx: @crate_ctxt, tag_id: ast::def_id) -> [str] {\n+//    assert ast::local_crate == tag_id.crate;\n+//    alt ccx.tcx.items.get(tag_id.node) {\n+//      ast_map::node_item(@{node: ast::item_tag(variants, _), _}) {\n+//        vec::map(variants) {|variant| variant.node.name}\n+//      }\n+//    }\n+//}\n+\n fn gen_tag_shapes(ccx: @crate_ctxt) -> ValueRef {\n     // Loop over all the tag variants and write their shapes into a data\n     // buffer. As we do this, it's possible for us to discover new tags, so we\n@@ -471,11 +480,14 @@ fn gen_tag_shapes(ccx: @crate_ctxt) -> ValueRef {\n         let item_tyt = ty::lookup_item_type(ccx.tcx, did);\n         let ty_param_count = vec::len(*item_tyt.bounds);\n \n-        for v: ty::variant_info in *variants {\n+        vec::iter(*variants) {|v|\n             offsets += [vec::len(data) as u16];\n \n             let variant_shape = shape_of_variant(ccx, v, ty_param_count);\n             add_substr(data, variant_shape);\n+\n+            let zname = str::bytes(v.name) + [0u8];\n+            add_substr(data, zname);\n         }\n \n         i += 1u;"}, {"sha": "18ec1e86f3ecf38b4a847fb163f6dc9506063ae7", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a83ad1b9e657307f395361be0c687a4690bbcd6f/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83ad1b9e657307f395361be0c687a4690bbcd6f/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=a83ad1b9e657307f395361be0c687a4690bbcd6f", "patch": "@@ -2633,8 +2633,8 @@ fn impl_iface(cx: ctxt, id: ast::def_id) -> option::t<t> {\n }\n \n // Tag information\n-type variant_info = @{args: [ty::t], ctor_ty: ty::t, id: ast::def_id,\n-                      disr_val: int};\n+type variant_info = @{args: [ty::t], ctor_ty: ty::t, name: str,\n+                      id: ast::def_id, disr_val: int};\n \n fn tag_variants(cx: ctxt, id: ast::def_id) -> @[variant_info] {\n     alt cx.tag_var_cache.find(id) {\n@@ -2666,6 +2666,7 @@ fn tag_variants(cx: ctxt, id: ast::def_id) -> @[variant_info] {\n                 }\n                 @{args: arg_tys,\n                   ctor_ty: ctor_ty,\n+                  name: variant.node.name,\n                   id: ast_util::local_def(variant.node.id),\n                   disr_val: disr_val\n                  }"}, {"sha": "37d8a42e95a191383b81bd6d34bb86dd68556769", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a83ad1b9e657307f395361be0c687a4690bbcd6f/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a83ad1b9e657307f395361be0c687a4690bbcd6f/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=a83ad1b9e657307f395361be0c687a4690bbcd6f", "patch": "@@ -358,7 +358,8 @@ class cmp : public data<cmp,ptr_pair> {\n     void walk_res2(const rust_fn *dtor, uint16_t n_ty_params,\n                    const type_param *ty_params_sp, const uint8_t *end_sp,\n                    const data_pair<uintptr_t> &live);\n-    void walk_variant2(tag_info &tinfo, tag_variant_t variant_id,\n+    void walk_variant2(tag_info &tinfo,\n+                       tag_variant_t variant_id,\n                        const std::pair<const uint8_t *,const uint8_t *>\n                        variant_ptr_and_end);\n \n@@ -413,7 +414,8 @@ cmp::walk_res2(const rust_fn *dtor, uint16_t n_ty_params,\n }\n \n void\n-cmp::walk_variant2(tag_info &tinfo, tag_variant_t variant_id,\n+cmp::walk_variant2(tag_info &tinfo,\n+                   tag_variant_t variant_id,\n                    const std::pair<const uint8_t *,const uint8_t *>\n                    variant_ptr_and_end) {\n     cmp sub(*this, variant_ptr_and_end.first, tinfo.params);\n@@ -485,7 +487,8 @@ log::walk_vec2(bool is_pod, const std::pair<ptr,ptr> &data) {\n }\n \n void\n-log::walk_variant2(tag_info &tinfo, tag_variant_t variant_id,\n+log::walk_variant2(tag_info &tinfo,\n+                   tag_variant_t variant_id,\n                    const std::pair<const uint8_t *,const uint8_t *>\n                    variant_ptr_and_end) {\n     log sub(*this, variant_ptr_and_end.first, tinfo.params);"}, {"sha": "848e304df3025452d446e17761498f5015f0f37b", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a83ad1b9e657307f395361be0c687a4690bbcd6f/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/a83ad1b9e657307f395361be0c687a4690bbcd6f/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=a83ad1b9e657307f395361be0c687a4690bbcd6f", "patch": "@@ -246,6 +246,9 @@ class ctxt {\n     std::pair<const uint8_t *,const uint8_t *>\n     get_variant_sp(tag_info &info, tag_variant_t variant_id);\n \n+    const char *\n+    get_variant_name(tag_info &info, tag_variant_t variant_id);\n+\n protected:\n     inline uint8_t peek() { return *sp; }\n \n@@ -415,9 +418,19 @@ ctxt<T>::get_variant_sp(tag_info &tinfo, tag_variant_t variant_id) {\n     const uint8_t *variant_ptr = tables->tags + variant_offset;\n     uint16_t variant_len = get_u16_bump(variant_ptr);\n     const uint8_t *variant_end = variant_ptr + variant_len;\n+    \n     return std::make_pair(variant_ptr, variant_end);\n }\n \n+template<typename T>\n+const char *\n+ctxt<T>::get_variant_name(tag_info &tinfo, tag_variant_t variant_id) {\n+    std::pair<const uint8_t *,const uint8_t *> variant_ptr_and_end =\n+      this->get_variant_sp(tinfo, variant_id);\n+    // skip over the length to get the null-terminated string:\n+    return (const char*)(variant_ptr_and_end.second + 2);\n+}\n+\n template<typename T>\n void\n ctxt<T>::walk_vec0() {\n@@ -951,7 +964,7 @@ template<typename T,typename U>\n void\n data<T,U>::walk_variant1(tag_info &tinfo, tag_variant_t variant_id) {\n     std::pair<const uint8_t *,const uint8_t *> variant_ptr_and_end =\n-        this->get_variant_sp(tinfo, variant_id);\n+      this->get_variant_sp(tinfo, variant_id);\n     static_cast<T *>(this)->walk_variant2(tinfo, variant_id,\n                                           variant_ptr_and_end);\n }\n@@ -1128,7 +1141,8 @@ class log : public data<log,ptr> {\n     }\n \n     void walk_tag2(tag_info &tinfo, tag_variant_t tag_variant) {\n-        out << prefix << \"tag\" << tag_variant;\n+        // out << prefix << \"tag\" << tag_variant;\n+        out << prefix << get_variant_name(tinfo, tag_variant);\n         data<log,ptr>::walk_variant1(tinfo, tag_variant);\n     }\n \n@@ -1187,9 +1201,10 @@ class log : public data<log,ptr> {\n \n     void walk_struct2(const uint8_t *end_sp);\n     void walk_vec2(bool is_pod, const std::pair<ptr,ptr> &data);\n-    void walk_variant2(tag_info &tinfo, tag_variant_t variant_id,\n-                      const std::pair<const uint8_t *,const uint8_t *>\n-                      variant_ptr_and_end);\n+    void walk_variant2(tag_info &tinfo,\n+                       tag_variant_t variant_id,\n+                       const std::pair<const uint8_t *,const uint8_t *>\n+                       variant_ptr_and_end);\n     void walk_string2(const std::pair<ptr,ptr> &data);\n     void walk_res2(const rust_fn *dtor, unsigned n_params,\n                    const type_param *params, const uint8_t *end_sp, bool live);"}, {"sha": "1ac1e0e3ef56337fcd9d835fa9ebe963a75afac0", "filename": "src/test/run-pass/log-knows-the-names-of-variants-in-std.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a83ad1b9e657307f395361be0c687a4690bbcd6f/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83ad1b9e657307f395361be0c687a4690bbcd6f/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs?ref=a83ad1b9e657307f395361be0c687a4690bbcd6f", "patch": "@@ -0,0 +1,18 @@\n+use std;\n+import std::list;\n+\n+tag foo {\n+  a(uint);\n+  b(str);\n+}\n+\n+fn check_log<T>(exp: str, v: T) {\n+    assert exp == #fmt[\"%?\", v];\n+}\n+\n+fn main() {\n+    let x = list::from_vec([a(22u), b(\"hi\")]);\n+    let exp = \"cons(a(22), @cons(b(\\\"hi\\\"), @nil))\";\n+    assert #fmt[\"%?\", x] == exp;\n+    check_log(exp, x);\n+}"}, {"sha": "ac8e368540cad2ebe9ff1bececd37a1bdb2beebb", "filename": "src/test/run-pass/log-knows-the-names-of-variants.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a83ad1b9e657307f395361be0c687a4690bbcd6f/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a83ad1b9e657307f395361be0c687a4690bbcd6f/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs?ref=a83ad1b9e657307f395361be0c687a4690bbcd6f", "patch": "@@ -0,0 +1,11 @@\n+tag foo {\n+  a(uint);\n+  b(str);\n+  c;\n+}\n+\n+fn main() {\n+    assert \"a(22)\" == #fmt[\"%?\", a(22u)];\n+    assert \"b(\\\"hi\\\")\" == #fmt[\"%?\", b(\"hi\")];\n+    assert \"c\" == #fmt[\"%?\", c];\n+}"}]}