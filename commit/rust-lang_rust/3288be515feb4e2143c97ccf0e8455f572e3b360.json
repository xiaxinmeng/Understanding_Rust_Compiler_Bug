{"sha": "3288be515feb4e2143c97ccf0e8455f572e3b360", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyODhiZTUxNWZlYjRlMjE0M2M5N2NjZjBlODQ1NWY1NzJlM2IzNjA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-17T20:11:43Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-17T20:11:43Z"}, "message": "test in a way that works even with musl", "tree": {"sha": "5852440678d20d4ce5c4c915968cf70e219a26a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5852440678d20d4ce5c4c915968cf70e219a26a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3288be515feb4e2143c97ccf0e8455f572e3b360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3288be515feb4e2143c97ccf0e8455f572e3b360", "html_url": "https://github.com/rust-lang/rust/commit/3288be515feb4e2143c97ccf0e8455f572e3b360", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3288be515feb4e2143c97ccf0e8455f572e3b360/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72d9fe8b0e4940b4314f190dd14235fa83046338", "url": "https://api.github.com/repos/rust-lang/rust/commits/72d9fe8b0e4940b4314f190dd14235fa83046338", "html_url": "https://github.com/rust-lang/rust/commit/72d9fe8b0e4940b4314f190dd14235fa83046338"}], "stats": {"total": 123, "additions": 58, "deletions": 65}, "files": [{"sha": "5cf62b869123975f0a7c43568a0f5199c8475e92", "filename": "src/test/ui/lint/uninitialized-zeroed.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3288be515feb4e2143c97ccf0e8455f572e3b360/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3288be515feb4e2143c97ccf0e8455f572e3b360/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs?ref=3288be515feb4e2143c97ccf0e8455f572e3b360", "patch": "@@ -7,6 +7,7 @@\n #![deny(invalid_value)]\n \n use std::mem::{self, MaybeUninit};\n+use std::ptr::NonNull;\n use std::num::NonZeroU32;\n \n enum Void {}\n@@ -63,8 +64,8 @@ fn main() {\n         let _val: Wrap<(RefPair, i32)> = mem::zeroed(); //~ ERROR: does not permit zero-initialization\n         let _val: Wrap<(RefPair, i32)> = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n \n-        let _val: Vec<i32> = mem::zeroed(); //~ ERROR: does not permit zero-initialization\n-        let _val: Vec<i32> = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n+        let _val: NonNull<i32> = mem::zeroed(); //~ ERROR: does not permit zero-initialization\n+        let _val: NonNull<i32> = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n \n         // Things that can be zero, but not uninit.\n         let _val: bool = mem::zeroed();"}, {"sha": "a36a32a39a11b3ab2675883f838ce6bca3ef0e2b", "filename": "src/test/ui/lint/uninitialized-zeroed.stderr", "status": "modified", "additions": 55, "deletions": 63, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/3288be515feb4e2143c97ccf0e8455f572e3b360/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3288be515feb4e2143c97ccf0e8455f572e3b360/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr?ref=3288be515feb4e2143c97ccf0e8455f572e3b360", "patch": "@@ -1,5 +1,5 @@\n error: the type `&'static T` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:28:32\n+  --> $DIR/uninitialized-zeroed.rs:29:32\n    |\n LL |         let _val: &'static T = mem::zeroed();\n    |                                ^^^^^^^^^^^^^\n@@ -15,7 +15,7 @@ LL | #![deny(invalid_value)]\n    = note: References must be non-null\n \n error: the type `&'static T` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:29:32\n+  --> $DIR/uninitialized-zeroed.rs:30:32\n    |\n LL |         let _val: &'static T = mem::uninitialized();\n    |                                ^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |         let _val: &'static T = mem::uninitialized();\n    = note: References must be non-null\n \n error: the type `Wrap<&'static T>` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:31:38\n+  --> $DIR/uninitialized-zeroed.rs:32:38\n    |\n LL |         let _val: Wrap<&'static T> = mem::zeroed();\n    |                                      ^^^^^^^^^^^^^\n@@ -35,13 +35,13 @@ LL |         let _val: Wrap<&'static T> = mem::zeroed();\n    |                                      help: use `MaybeUninit<T>` instead\n    |\n note: References must be non-null (in this struct field)\n-  --> $DIR/uninitialized-zeroed.rs:17:18\n+  --> $DIR/uninitialized-zeroed.rs:18:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n \n error: the type `Wrap<&'static T>` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:32:38\n+  --> $DIR/uninitialized-zeroed.rs:33:38\n    |\n LL |         let _val: Wrap<&'static T> = mem::uninitialized();\n    |                                      ^^^^^^^^^^^^^^^^^^^^\n@@ -50,13 +50,13 @@ LL |         let _val: Wrap<&'static T> = mem::uninitialized();\n    |                                      help: use `MaybeUninit<T>` instead\n    |\n note: References must be non-null (in this struct field)\n-  --> $DIR/uninitialized-zeroed.rs:17:18\n+  --> $DIR/uninitialized-zeroed.rs:18:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n \n error: the type `!` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:39:23\n+  --> $DIR/uninitialized-zeroed.rs:40:23\n    |\n LL |         let _val: ! = mem::zeroed();\n    |                       ^^^^^^^^^^^^^\n@@ -67,7 +67,7 @@ LL |         let _val: ! = mem::zeroed();\n    = note: The never type (`!`) has no valid value\n \n error: the type `!` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:40:23\n+  --> $DIR/uninitialized-zeroed.rs:41:23\n    |\n LL |         let _val: ! = mem::uninitialized();\n    |                       ^^^^^^^^^^^^^^^^^^^^\n@@ -78,7 +78,7 @@ LL |         let _val: ! = mem::uninitialized();\n    = note: The never type (`!`) has no valid value\n \n error: the type `(i32, !)` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:42:30\n+  --> $DIR/uninitialized-zeroed.rs:43:30\n    |\n LL |         let _val: (i32, !) = mem::zeroed();\n    |                              ^^^^^^^^^^^^^\n@@ -89,7 +89,7 @@ LL |         let _val: (i32, !) = mem::zeroed();\n    = note: The never type (`!`) has no valid value\n \n error: the type `(i32, !)` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:43:30\n+  --> $DIR/uninitialized-zeroed.rs:44:30\n    |\n LL |         let _val: (i32, !) = mem::uninitialized();\n    |                              ^^^^^^^^^^^^^^^^^^^^\n@@ -100,7 +100,7 @@ LL |         let _val: (i32, !) = mem::uninitialized();\n    = note: The never type (`!`) has no valid value\n \n error: the type `Void` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:45:26\n+  --> $DIR/uninitialized-zeroed.rs:46:26\n    |\n LL |         let _val: Void = mem::zeroed();\n    |                          ^^^^^^^^^^^^^\n@@ -111,7 +111,7 @@ LL |         let _val: Void = mem::zeroed();\n    = note: 0-variant enums have no valid value\n \n error: the type `Void` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:46:26\n+  --> $DIR/uninitialized-zeroed.rs:47:26\n    |\n LL |         let _val: Void = mem::uninitialized();\n    |                          ^^^^^^^^^^^^^^^^^^^^\n@@ -122,7 +122,7 @@ LL |         let _val: Void = mem::uninitialized();\n    = note: 0-variant enums have no valid value\n \n error: the type `&'static i32` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:48:34\n+  --> $DIR/uninitialized-zeroed.rs:49:34\n    |\n LL |         let _val: &'static i32 = mem::zeroed();\n    |                                  ^^^^^^^^^^^^^\n@@ -133,7 +133,7 @@ LL |         let _val: &'static i32 = mem::zeroed();\n    = note: References must be non-null\n \n error: the type `&'static i32` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:49:34\n+  --> $DIR/uninitialized-zeroed.rs:50:34\n    |\n LL |         let _val: &'static i32 = mem::uninitialized();\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n@@ -144,7 +144,7 @@ LL |         let _val: &'static i32 = mem::uninitialized();\n    = note: References must be non-null\n \n error: the type `Ref` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:51:25\n+  --> $DIR/uninitialized-zeroed.rs:52:25\n    |\n LL |         let _val: Ref = mem::zeroed();\n    |                         ^^^^^^^^^^^^^\n@@ -153,13 +153,13 @@ LL |         let _val: Ref = mem::zeroed();\n    |                         help: use `MaybeUninit<T>` instead\n    |\n note: References must be non-null (in this struct field)\n-  --> $DIR/uninitialized-zeroed.rs:14:12\n+  --> $DIR/uninitialized-zeroed.rs:15:12\n    |\n LL | struct Ref(&'static i32);\n    |            ^^^^^^^^^^^^\n \n error: the type `Ref` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:52:25\n+  --> $DIR/uninitialized-zeroed.rs:53:25\n    |\n LL |         let _val: Ref = mem::uninitialized();\n    |                         ^^^^^^^^^^^^^^^^^^^^\n@@ -168,13 +168,13 @@ LL |         let _val: Ref = mem::uninitialized();\n    |                         help: use `MaybeUninit<T>` instead\n    |\n note: References must be non-null (in this struct field)\n-  --> $DIR/uninitialized-zeroed.rs:14:12\n+  --> $DIR/uninitialized-zeroed.rs:15:12\n    |\n LL | struct Ref(&'static i32);\n    |            ^^^^^^^^^^^^\n \n error: the type `fn()` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:54:26\n+  --> $DIR/uninitialized-zeroed.rs:55:26\n    |\n LL |         let _val: fn() = mem::zeroed();\n    |                          ^^^^^^^^^^^^^\n@@ -185,7 +185,7 @@ LL |         let _val: fn() = mem::zeroed();\n    = note: Function pointers must be non-null\n \n error: the type `fn()` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:55:26\n+  --> $DIR/uninitialized-zeroed.rs:56:26\n    |\n LL |         let _val: fn() = mem::uninitialized();\n    |                          ^^^^^^^^^^^^^^^^^^^^\n@@ -196,7 +196,7 @@ LL |         let _val: fn() = mem::uninitialized();\n    = note: Function pointers must be non-null\n \n error: the type `Wrap<fn()>` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:57:32\n+  --> $DIR/uninitialized-zeroed.rs:58:32\n    |\n LL |         let _val: Wrap<fn()> = mem::zeroed();\n    |                                ^^^^^^^^^^^^^\n@@ -205,13 +205,13 @@ LL |         let _val: Wrap<fn()> = mem::zeroed();\n    |                                help: use `MaybeUninit<T>` instead\n    |\n note: Function pointers must be non-null (in this struct field)\n-  --> $DIR/uninitialized-zeroed.rs:17:18\n+  --> $DIR/uninitialized-zeroed.rs:18:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n \n error: the type `Wrap<fn()>` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:58:32\n+  --> $DIR/uninitialized-zeroed.rs:59:32\n    |\n LL |         let _val: Wrap<fn()> = mem::uninitialized();\n    |                                ^^^^^^^^^^^^^^^^^^^^\n@@ -220,13 +220,13 @@ LL |         let _val: Wrap<fn()> = mem::uninitialized();\n    |                                help: use `MaybeUninit<T>` instead\n    |\n note: Function pointers must be non-null (in this struct field)\n-  --> $DIR/uninitialized-zeroed.rs:17:18\n+  --> $DIR/uninitialized-zeroed.rs:18:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n \n error: the type `WrapEnum<fn()>` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:60:36\n+  --> $DIR/uninitialized-zeroed.rs:61:36\n    |\n LL |         let _val: WrapEnum<fn()> = mem::zeroed();\n    |                                    ^^^^^^^^^^^^^\n@@ -235,13 +235,13 @@ LL |         let _val: WrapEnum<fn()> = mem::zeroed();\n    |                                    help: use `MaybeUninit<T>` instead\n    |\n note: Function pointers must be non-null (in this enum field)\n-  --> $DIR/uninitialized-zeroed.rs:18:28\n+  --> $DIR/uninitialized-zeroed.rs:19:28\n    |\n LL | enum WrapEnum<T> { Wrapped(T) }\n    |                            ^\n \n error: the type `WrapEnum<fn()>` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:61:36\n+  --> $DIR/uninitialized-zeroed.rs:62:36\n    |\n LL |         let _val: WrapEnum<fn()> = mem::uninitialized();\n    |                                    ^^^^^^^^^^^^^^^^^^^^\n@@ -250,13 +250,13 @@ LL |         let _val: WrapEnum<fn()> = mem::uninitialized();\n    |                                    help: use `MaybeUninit<T>` instead\n    |\n note: Function pointers must be non-null (in this enum field)\n-  --> $DIR/uninitialized-zeroed.rs:18:28\n+  --> $DIR/uninitialized-zeroed.rs:19:28\n    |\n LL | enum WrapEnum<T> { Wrapped(T) }\n    |                            ^\n \n error: the type `Wrap<(RefPair, i32)>` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:63:42\n+  --> $DIR/uninitialized-zeroed.rs:64:42\n    |\n LL |         let _val: Wrap<(RefPair, i32)> = mem::zeroed();\n    |                                          ^^^^^^^^^^^^^\n@@ -265,13 +265,13 @@ LL |         let _val: Wrap<(RefPair, i32)> = mem::zeroed();\n    |                                          help: use `MaybeUninit<T>` instead\n    |\n note: References must be non-null (in this struct field)\n-  --> $DIR/uninitialized-zeroed.rs:15:16\n+  --> $DIR/uninitialized-zeroed.rs:16:16\n    |\n LL | struct RefPair((&'static i32, i32));\n    |                ^^^^^^^^^^^^^^^^^^^\n \n error: the type `Wrap<(RefPair, i32)>` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:64:42\n+  --> $DIR/uninitialized-zeroed.rs:65:42\n    |\n LL |         let _val: Wrap<(RefPair, i32)> = mem::uninitialized();\n    |                                          ^^^^^^^^^^^^^^^^^^^^\n@@ -280,43 +280,35 @@ LL |         let _val: Wrap<(RefPair, i32)> = mem::uninitialized();\n    |                                          help: use `MaybeUninit<T>` instead\n    |\n note: References must be non-null (in this struct field)\n-  --> $DIR/uninitialized-zeroed.rs:15:16\n+  --> $DIR/uninitialized-zeroed.rs:16:16\n    |\n LL | struct RefPair((&'static i32, i32));\n    |                ^^^^^^^^^^^^^^^^^^^\n \n-error: the type `std::vec::Vec<i32>` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:66:30\n-   |\n-LL |         let _val: Vec<i32> = mem::zeroed();\n-   |                              ^^^^^^^^^^^^^\n-   |                              |\n-   |                              this code causes undefined behavior when executed\n-   |                              help: use `MaybeUninit<T>` instead\n+error: the type `std::ptr::NonNull<i32>` does not permit zero-initialization\n+  --> $DIR/uninitialized-zeroed.rs:67:34\n    |\n-note: std::ptr::Unique<i32> must be non-null (in this struct field)\n-  --> $SRC_DIR/liballoc/raw_vec.rs:LL:COL\n+LL |         let _val: NonNull<i32> = mem::zeroed();\n+   |                                  ^^^^^^^^^^^^^\n+   |                                  |\n+   |                                  this code causes undefined behavior when executed\n+   |                                  help: use `MaybeUninit<T>` instead\n    |\n-LL |     ptr: Unique<T>,\n-   |     ^^^^^^^^^^^^^^\n+   = note: std::ptr::NonNull<i32> must be non-null\n \n-error: the type `std::vec::Vec<i32>` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:67:30\n-   |\n-LL |         let _val: Vec<i32> = mem::uninitialized();\n-   |                              ^^^^^^^^^^^^^^^^^^^^\n-   |                              |\n-   |                              this code causes undefined behavior when executed\n-   |                              help: use `MaybeUninit<T>` instead\n+error: the type `std::ptr::NonNull<i32>` does not permit being left uninitialized\n+  --> $DIR/uninitialized-zeroed.rs:68:34\n    |\n-note: std::ptr::Unique<i32> must be non-null (in this struct field)\n-  --> $SRC_DIR/liballoc/raw_vec.rs:LL:COL\n+LL |         let _val: NonNull<i32> = mem::uninitialized();\n+   |                                  ^^^^^^^^^^^^^^^^^^^^\n+   |                                  |\n+   |                                  this code causes undefined behavior when executed\n+   |                                  help: use `MaybeUninit<T>` instead\n    |\n-LL |     ptr: Unique<T>,\n-   |     ^^^^^^^^^^^^^^\n+   = note: std::ptr::NonNull<i32> must be non-null\n \n error: the type `bool` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:71:26\n+  --> $DIR/uninitialized-zeroed.rs:72:26\n    |\n LL |         let _val: bool = mem::uninitialized();\n    |                          ^^^^^^^^^^^^^^^^^^^^\n@@ -327,7 +319,7 @@ LL |         let _val: bool = mem::uninitialized();\n    = note: Booleans must be `true` or `false`\n \n error: the type `Wrap<char>` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:74:32\n+  --> $DIR/uninitialized-zeroed.rs:75:32\n    |\n LL |         let _val: Wrap<char> = mem::uninitialized();\n    |                                ^^^^^^^^^^^^^^^^^^^^\n@@ -336,13 +328,13 @@ LL |         let _val: Wrap<char> = mem::uninitialized();\n    |                                help: use `MaybeUninit<T>` instead\n    |\n note: Characters must be a valid unicode codepoint (in this struct field)\n-  --> $DIR/uninitialized-zeroed.rs:17:18\n+  --> $DIR/uninitialized-zeroed.rs:18:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n \n error: the type `NonBig` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:77:28\n+  --> $DIR/uninitialized-zeroed.rs:78:28\n    |\n LL |         let _val: NonBig = mem::uninitialized();\n    |                            ^^^^^^^^^^^^^^^^^^^^\n@@ -353,7 +345,7 @@ LL |         let _val: NonBig = mem::uninitialized();\n    = note: NonBig must be initialized inside its custom valid range\n \n error: the type `&'static i32` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:80:34\n+  --> $DIR/uninitialized-zeroed.rs:81:34\n    |\n LL |         let _val: &'static i32 = mem::transmute(0usize);\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^\n@@ -364,7 +356,7 @@ LL |         let _val: &'static i32 = mem::transmute(0usize);\n    = note: References must be non-null\n \n error: the type `&'static [i32]` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:81:36\n+  --> $DIR/uninitialized-zeroed.rs:82:36\n    |\n LL |         let _val: &'static [i32] = mem::transmute((0usize, 0usize));\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -375,7 +367,7 @@ LL |         let _val: &'static [i32] = mem::transmute((0usize, 0usize));\n    = note: References must be non-null\n \n error: the type `std::num::NonZeroU32` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:82:32\n+  --> $DIR/uninitialized-zeroed.rs:83:32\n    |\n LL |         let _val: NonZeroU32 = mem::transmute(0);\n    |                                ^^^^^^^^^^^^^^^^^"}]}