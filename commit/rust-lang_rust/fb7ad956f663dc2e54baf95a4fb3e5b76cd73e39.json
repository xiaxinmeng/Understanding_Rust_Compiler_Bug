{"sha": "fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiN2FkOTU2ZjY2M2RjMmU1NGJhZjk1YTRmYjNlNWI3NmNkNzNlMzk=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2020-08-04T10:06:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-04T10:06:43Z"}, "message": "Rollup merge of #5856 - phansch:remove-symbol-reexport, r=flip1995\n\nRemove old Symbol reexport\n\nI couldn't really tell what it was meant to improve. It seems more clear\nwithout the renaming to `Name`?\n\nchangelog: none", "tree": {"sha": "e4583a0bc1667e01f507f0cc739c86a40bf48a6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4583a0bc1667e01f507f0cc739c86a40bf48a6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfKTMzCRBK7hj4Ov3rIwAAdHIIADRP5MjrQqbsX59FLIo/FSIs\n1zIbENiZ/sS6aRme1iQsMhtw+nasCvGUxQFbZsbpWYxeCryknJIwTFWUjnJT6kOI\nGGEED0XBgpyOoypamzUUl+/ybb/UDowmuqE/CPMNO7TY/8iPVACV/zPavr5Xy5Jo\nRo+DqZUYFhxMggAAHqmqf2cUKLPBrVvLYhyI0RZU81REYXW89Cwurjs3840d/iTy\nPL/yJ4xulB+3MOnn+d3Gy6/CadOOTdwDHNLyMK5eJKwXgYBfGq1S8XBdpvrd21/o\nJumFKeAKQ/fGZaw0h6guQu4Wr02mqpMiuB41Er6tLet81ohieghlRAmTGjOK95w=\n=Dh/r\n-----END PGP SIGNATURE-----\n", "payload": "tree e4583a0bc1667e01f507f0cc739c86a40bf48a6d\nparent 84455b211f8d9bfdde766ebb2f3240caa66591a4\nparent bb6e857980748b000ba3b88d125c6b29aced0693\nauthor Philipp Krones <hello@philkrones.com> 1596535603 +0200\ncommitter GitHub <noreply@github.com> 1596535603 +0200\n\nRollup merge of #5856 - phansch:remove-symbol-reexport, r=flip1995\n\nRemove old Symbol reexport\n\nI couldn't really tell what it was meant to improve. It seems more clear\nwithout the renaming to `Name`?\n\nchangelog: none\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39", "html_url": "https://github.com/rust-lang/rust/commit/fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84455b211f8d9bfdde766ebb2f3240caa66591a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/84455b211f8d9bfdde766ebb2f3240caa66591a4", "html_url": "https://github.com/rust-lang/rust/commit/84455b211f8d9bfdde766ebb2f3240caa66591a4"}, {"sha": "bb6e857980748b000ba3b88d125c6b29aced0693", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6e857980748b000ba3b88d125c6b29aced0693", "html_url": "https://github.com/rust-lang/rust/commit/bb6e857980748b000ba3b88d125c6b29aced0693"}], "stats": {"total": 64, "additions": 28, "deletions": 36}, "files": [{"sha": "3ce110e8e0f7a7e6c8117baeb2d3f86c6d03f8ff", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39", "patch": "@@ -1,6 +1,5 @@\n //! checks for attributes\n \n-use crate::reexport::Name;\n use crate::utils::{\n     first_line_of_span, is_present_in_source, match_def_path, paths, snippet_opt, span_lint, span_lint_and_help,\n     span_lint_and_sugg, span_lint_and_then, without_block_comments,\n@@ -517,7 +516,7 @@ fn is_relevant_expr(cx: &LateContext<'_>, typeck_results: &ty::TypeckResults<'_>\n     }\n }\n \n-fn check_attrs(cx: &LateContext<'_>, span: Span, name: Name, attrs: &[Attribute]) {\n+fn check_attrs(cx: &LateContext<'_>, span: Span, name: Symbol, attrs: &[Attribute]) {\n     if span.from_expansion() {\n         return;\n     }"}, {"sha": "26aff6af8cdb9515c2a65169250c330f1f31084a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39", "patch": "@@ -322,10 +322,6 @@ mod zero_div_zero;\n \n pub use crate::utils::conf::Conf;\n \n-mod reexport {\n-    pub use rustc_span::Symbol as Name;\n-}\n-\n /// Register all pre expansion lints\n ///\n /// Pre-expansion lints run before any macro expansion has happened."}, {"sha": "4df6827d77f94027551ba7663b1cace0af537c88", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39", "patch": "@@ -13,9 +13,8 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::kw;\n+use rustc_span::symbol::{kw, Symbol};\n \n-use crate::reexport::Name;\n use crate::utils::{in_macro, last_path_segment, span_lint, trait_ref_of_method};\n \n declare_clippy_lint! {\n@@ -113,7 +112,7 @@ impl<'tcx> LateLintPass<'tcx> for Lifetimes {\n enum RefLt {\n     Unnamed,\n     Static,\n-    Named(Name),\n+    Named(Symbol),\n }\n \n fn check_fn_inner<'tcx>(\n@@ -456,7 +455,7 @@ fn has_where_lifetimes<'tcx>(cx: &LateContext<'tcx>, where_clause: &'tcx WhereCl\n }\n \n struct LifetimeChecker {\n-    map: FxHashMap<Name, Span>,\n+    map: FxHashMap<Symbol, Span>,\n }\n \n impl<'tcx> Visitor<'tcx> for LifetimeChecker {"}, {"sha": "6359c20040c7a7458c02ee1fd78f60e58c0f2443", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39", "patch": "@@ -1,5 +1,4 @@\n use crate::consts::constant;\n-use crate::reexport::Name;\n use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::usage::{is_unused, mutated_variables};\n@@ -1184,7 +1183,7 @@ fn check_for_loop_range<'tcx>(\n     }\n }\n \n-fn is_len_call(expr: &Expr<'_>, var: Name) -> bool {\n+fn is_len_call(expr: &Expr<'_>, var: Symbol) -> bool {\n     if_chain! {\n         if let ExprKind::MethodCall(ref method, _, ref len_args, _) = expr.kind;\n         if len_args.len() == 1;\n@@ -1640,15 +1639,15 @@ struct VarVisitor<'a, 'tcx> {\n     /// var name to look for as index\n     var: HirId,\n     /// indexed variables that are used mutably\n-    indexed_mut: FxHashSet<Name>,\n+    indexed_mut: FxHashSet<Symbol>,\n     /// indirectly indexed variables (`v[(i + 4) % N]`), the extend is `None` for global\n-    indexed_indirectly: FxHashMap<Name, Option<region::Scope>>,\n+    indexed_indirectly: FxHashMap<Symbol, Option<region::Scope>>,\n     /// subset of `indexed` of vars that are indexed directly: `v[i]`\n     /// this will not contain cases like `v[calc_index(i)]` or `v[(i + 4) % N]`\n-    indexed_directly: FxHashMap<Name, (Option<region::Scope>, Ty<'tcx>)>,\n+    indexed_directly: FxHashMap<Symbol, (Option<region::Scope>, Ty<'tcx>)>,\n     /// Any names that are used outside an index operation.\n     /// Used to detect things like `&mut vec` used together with `vec[i]`\n-    referenced: FxHashSet<Name>,\n+    referenced: FxHashSet<Symbol>,\n     /// has the loop variable been used in expressions other than the index of\n     /// an index op?\n     nonindex: bool,\n@@ -2004,7 +2003,7 @@ struct InitializeVisitor<'a, 'tcx> {\n     end_expr: &'tcx Expr<'tcx>, // the for loop. Stop scanning here.\n     var_id: HirId,\n     state: VarState,\n-    name: Option<Name>,\n+    name: Option<Symbol>,\n     depth: u32, // depth of conditional expressions\n     past_loop: bool,\n }\n@@ -2167,7 +2166,7 @@ use self::Nesting::{LookFurther, RuledOut, Unknown};\n \n struct LoopNestVisitor {\n     hir_id: HirId,\n-    iterator: Name,\n+    iterator: Symbol,\n     nesting: Nesting,\n }\n \n@@ -2218,7 +2217,7 @@ impl<'tcx> Visitor<'tcx> for LoopNestVisitor {\n     }\n }\n \n-fn path_name(e: &Expr<'_>) -> Option<Name> {\n+fn path_name(e: &Expr<'_>) -> Option<Symbol> {\n     if let ExprKind::Path(QPath::Resolved(_, ref path)) = e.kind {\n         let segments = &path.segments;\n         if segments.len() == 1 {"}, {"sha": "2610157763a8b97dcdb9a818c1ee1cfb7417190f", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39", "patch": "@@ -1,4 +1,3 @@\n-use crate::reexport::Name;\n use crate::utils::{contains_name, higher, iter_input_pats, snippet, span_lint_and_then};\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n@@ -10,6 +9,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n+use rustc_span::symbol::Symbol;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for bindings that shadow other bindings already in\n@@ -123,7 +123,7 @@ fn check_fn<'tcx>(cx: &LateContext<'tcx>, decl: &'tcx FnDecl<'_>, body: &'tcx Bo\n     check_expr(cx, &body.value, &mut bindings);\n }\n \n-fn check_block<'tcx>(cx: &LateContext<'tcx>, block: &'tcx Block<'_>, bindings: &mut Vec<(Name, Span)>) {\n+fn check_block<'tcx>(cx: &LateContext<'tcx>, block: &'tcx Block<'_>, bindings: &mut Vec<(Symbol, Span)>) {\n     let len = bindings.len();\n     for stmt in block.stmts {\n         match stmt.kind {\n@@ -138,7 +138,7 @@ fn check_block<'tcx>(cx: &LateContext<'tcx>, block: &'tcx Block<'_>, bindings: &\n     bindings.truncate(len);\n }\n \n-fn check_local<'tcx>(cx: &LateContext<'tcx>, local: &'tcx Local<'_>, bindings: &mut Vec<(Name, Span)>) {\n+fn check_local<'tcx>(cx: &LateContext<'tcx>, local: &'tcx Local<'_>, bindings: &mut Vec<(Symbol, Span)>) {\n     if in_external_macro(cx.sess(), local.span) {\n         return;\n     }\n@@ -173,7 +173,7 @@ fn check_pat<'tcx>(\n     pat: &'tcx Pat<'_>,\n     init: Option<&'tcx Expr<'_>>,\n     span: Span,\n-    bindings: &mut Vec<(Name, Span)>,\n+    bindings: &mut Vec<(Symbol, Span)>,\n ) {\n     // TODO: match more stuff / destructuring\n     match pat.kind {\n@@ -254,7 +254,7 @@ fn check_pat<'tcx>(\n \n fn lint_shadow<'tcx>(\n     cx: &LateContext<'tcx>,\n-    name: Name,\n+    name: Symbol,\n     span: Span,\n     pattern_span: Span,\n     init: Option<&'tcx Expr<'_>>,\n@@ -315,7 +315,7 @@ fn lint_shadow<'tcx>(\n     }\n }\n \n-fn check_expr<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, bindings: &mut Vec<(Name, Span)>) {\n+fn check_expr<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, bindings: &mut Vec<(Symbol, Span)>) {\n     if in_external_macro(cx.sess(), expr.span) {\n         return;\n     }\n@@ -351,7 +351,7 @@ fn check_expr<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, bindings: &mut\n     }\n }\n \n-fn check_ty<'tcx>(cx: &LateContext<'tcx>, ty: &'tcx Ty<'_>, bindings: &mut Vec<(Name, Span)>) {\n+fn check_ty<'tcx>(cx: &LateContext<'tcx>, ty: &'tcx Ty<'_>, bindings: &mut Vec<(Symbol, Span)>) {\n     match ty.kind {\n         TyKind::Slice(ref sty) => check_ty(cx, sty, bindings),\n         TyKind::Array(ref fty, ref anon_const) => {\n@@ -371,7 +371,7 @@ fn check_ty<'tcx>(cx: &LateContext<'tcx>, ty: &'tcx Ty<'_>, bindings: &mut Vec<(\n     }\n }\n \n-fn is_self_shadow(name: Name, expr: &Expr<'_>) -> bool {\n+fn is_self_shadow(name: Symbol, expr: &Expr<'_>) -> bool {\n     match expr.kind {\n         ExprKind::Box(ref inner) | ExprKind::AddrOf(_, _, ref inner) => is_self_shadow(name, inner),\n         ExprKind::Block(ref block, _) => {\n@@ -383,6 +383,6 @@ fn is_self_shadow(name: Name, expr: &Expr<'_>) -> bool {\n     }\n }\n \n-fn path_eq_name(name: Name, path: &Path<'_>) -> bool {\n+fn path_eq_name(name: Symbol, path: &Path<'_>) -> bool {\n     !path.is_global() && path.segments.len() == 1 && path.segments[0].ident.as_str() == name.as_str()\n }"}, {"sha": "214bfb7dda2cf0d9aa231616792e42bbe5cd208c", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=fb7ad956f663dc2e54baf95a4fb3e5b76cd73e39", "patch": "@@ -52,7 +52,6 @@ use rustc_trait_selection::traits::query::normalize::AtExt;\n use smallvec::SmallVec;\n \n use crate::consts::{constant, Constant};\n-use crate::reexport::Name;\n \n /// Returns `true` if the two spans come from differing expansions (i.e., one is\n /// from a macro and one isn't).\n@@ -150,7 +149,7 @@ pub fn match_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, path: &[&str])\n }\n \n /// Checks if an expression references a variable of the given name.\n-pub fn match_var(expr: &Expr<'_>, var: Name) -> bool {\n+pub fn match_var(expr: &Expr<'_>, var: Symbol) -> bool {\n     if let ExprKind::Path(QPath::Resolved(None, ref path)) = expr.kind {\n         if let [p] = path.segments {\n             return p.ident.name == var;\n@@ -420,7 +419,7 @@ pub fn is_entrypoint_fn(cx: &LateContext<'_>, def_id: DefId) -> bool {\n }\n \n /// Gets the name of the item the expression is in, if available.\n-pub fn get_item_name(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<Name> {\n+pub fn get_item_name(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<Symbol> {\n     let parent_id = cx.tcx.hir().get_parent_item(expr.hir_id);\n     match cx.tcx.hir().find(parent_id) {\n         Some(\n@@ -433,7 +432,7 @@ pub fn get_item_name(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<Name> {\n }\n \n /// Gets the name of a `Pat`, if any.\n-pub fn get_pat_name(pat: &Pat<'_>) -> Option<Name> {\n+pub fn get_pat_name(pat: &Pat<'_>) -> Option<Symbol> {\n     match pat.kind {\n         PatKind::Binding(.., ref spname, _) => Some(spname.name),\n         PatKind::Path(ref qpath) => single_segment_path(qpath).map(|ps| ps.ident.name),\n@@ -443,14 +442,14 @@ pub fn get_pat_name(pat: &Pat<'_>) -> Option<Name> {\n }\n \n struct ContainsName {\n-    name: Name,\n+    name: Symbol,\n     result: bool,\n }\n \n impl<'tcx> Visitor<'tcx> for ContainsName {\n     type Map = Map<'tcx>;\n \n-    fn visit_name(&mut self, _: Span, name: Name) {\n+    fn visit_name(&mut self, _: Span, name: Symbol) {\n         if self.name == name {\n             self.result = true;\n         }\n@@ -461,7 +460,7 @@ impl<'tcx> Visitor<'tcx> for ContainsName {\n }\n \n /// Checks if an `Expr` contains a certain name.\n-pub fn contains_name(name: Name, expr: &Expr<'_>) -> bool {\n+pub fn contains_name(name: Symbol, expr: &Expr<'_>) -> bool {\n     let mut cn = ContainsName { name, result: false };\n     cn.visit_expr(expr);\n     cn.result\n@@ -1027,7 +1026,7 @@ pub fn is_allowed(cx: &LateContext<'_>, lint: &'static Lint, id: HirId) -> bool\n     cx.tcx.lint_level_at_node(lint, id).0 == Level::Allow\n }\n \n-pub fn get_arg_name(pat: &Pat<'_>) -> Option<Name> {\n+pub fn get_arg_name(pat: &Pat<'_>) -> Option<Symbol> {\n     match pat.kind {\n         PatKind::Binding(.., ident, None) => Some(ident.name),\n         PatKind::Ref(ref subpat, _) => get_arg_name(subpat),"}]}