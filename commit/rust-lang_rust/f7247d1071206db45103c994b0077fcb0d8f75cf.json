{"sha": "f7247d1071206db45103c994b0077fcb0d8f75cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MjQ3ZDEwNzEyMDZkYjQ1MTAzYzk5NGIwMDc3ZmNiMGQ4Zjc1Y2Y=", "commit": {"author": {"name": "Timon Van Overveldt", "email": "timonvo@gmail.com", "date": "2016-04-28T01:02:31Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-07-30T20:39:13Z"}, "message": "Add ARM MUSL targets.\n\nThe targets are:\n- `arm-unknown-linux-musleabi`\n- `arm-unknown-linux-musleabihf`\n- `armv7-unknown-linux-musleabihf`\n\nThese mirror the existing `gnueabi` targets.\n\nAll of these targets produce fully static binaries, similar to the\nx86 MUSL targets.\n\nFor now these targets can only be used with `--rustbuild` builds, as\nhttps://github.com/rust-lang/compiler-rt/pull/22 only made the\nnecessary compiler-rt changes in the CMake configs, not the plain\nGNU Make configs.\n\nI've tested these targets GCC 5.3.0 compiled again musl-1.1.12\n(downloaded from http://musl.codu.org/). An example `./configure`\ninvocation is:\n\n```\n./configure \\\n    --enable-rustbuild\n    --target=arm-unknown-linux-musleabi \\\n    --musl-root=\"$MUSL_ROOT\"\n```\n\nwhere `MUSL_ROOT` points to the `arm-linux-musleabi` prefix.\nUsually that path will be of the form\n`/foobar/arm-linux-musleabi/arm-linux-musleabi`.\n\nUsually the cross-compile toolchain will live under\n`/foobar/arm-linux-musleabi/bin`. That path should either by added\nto your `PATH` variable, or you should add a section to your\n`config.toml` as follows:\n\n```\n[target.arm-unknown-linux-musleabi]\ncc = \"/foobar/arm-linux-musleabi/bin/arm-linux-musleabi-gcc\"\ncxx = \"/foobar/arm-linux-musleabi/bin/arm-linux-musleabi-g++\"\n```\n\nAs a prerequisite you'll also have to put a cross-compiled static\n`libunwind.a` library in `$MUSL_ROOT/lib`. This is similar to [how\nthe x86_64 MUSL targets are built]\n(https://doc.rust-lang.org/book/advanced-linking.html).", "tree": {"sha": "33d5ac9fa78bce8d09e6f6e0a3271b1fa2b53fa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33d5ac9fa78bce8d09e6f6e0a3271b1fa2b53fa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7247d1071206db45103c994b0077fcb0d8f75cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7247d1071206db45103c994b0077fcb0d8f75cf", "html_url": "https://github.com/rust-lang/rust/commit/f7247d1071206db45103c994b0077fcb0d8f75cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7247d1071206db45103c994b0077fcb0d8f75cf/comments", "author": {"login": "timonvo", "id": 364229, "node_id": "MDQ6VXNlcjM2NDIyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/364229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timonvo", "html_url": "https://github.com/timonvo", "followers_url": "https://api.github.com/users/timonvo/followers", "following_url": "https://api.github.com/users/timonvo/following{/other_user}", "gists_url": "https://api.github.com/users/timonvo/gists{/gist_id}", "starred_url": "https://api.github.com/users/timonvo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timonvo/subscriptions", "organizations_url": "https://api.github.com/users/timonvo/orgs", "repos_url": "https://api.github.com/users/timonvo/repos", "events_url": "https://api.github.com/users/timonvo/events{/privacy}", "received_events_url": "https://api.github.com/users/timonvo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57cad5722db3043804bc4c38ec3b456e9ff497be", "url": "https://api.github.com/repos/rust-lang/rust/commits/57cad5722db3043804bc4c38ec3b456e9ff497be", "html_url": "https://github.com/rust-lang/rust/commit/57cad5722db3043804bc4c38ec3b456e9ff497be"}], "stats": {"total": 219, "additions": 210, "deletions": 9}, "files": [{"sha": "a7e24a506fbef989170e3dfd346545594df1ee31", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7247d1071206db45103c994b0077fcb0d8f75cf/configure", "raw_url": "https://github.com/rust-lang/rust/raw/f7247d1071206db45103c994b0077fcb0d8f75cf/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=f7247d1071206db45103c994b0077fcb0d8f75cf", "patch": "@@ -1192,7 +1192,7 @@ do\n             ;;\n \n \n-        x86_64-*-musl)\n+        x86_64-*-musl | arm-*-musleabi)\n             if [ ! -f $CFG_MUSL_ROOT/lib/libc.a ]\n             then\n                 err \"musl libc $CFG_MUSL_ROOT/lib/libc.a not found\""}, {"sha": "8120250150d43abae3d03e0be4fe31573d862b61", "filename": "mk/cfg/arm-unknown-linux-musleabi.mk", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7247d1071206db45103c994b0077fcb0d8f75cf/mk%2Fcfg%2Farm-unknown-linux-musleabi.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f7247d1071206db45103c994b0077fcb0d8f75cf/mk%2Fcfg%2Farm-unknown-linux-musleabi.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farm-unknown-linux-musleabi.mk?ref=f7247d1071206db45103c994b0077fcb0d8f75cf", "patch": "@@ -0,0 +1,3 @@\n+# This file is intentially left empty to indicate that, while this target is\n+# supported, it's not supported using plain GNU Make builds. Use a --rustbuild\n+# instead.\n\\ No newline at end of file"}, {"sha": "8120250150d43abae3d03e0be4fe31573d862b61", "filename": "mk/cfg/arm-unknown-linux-musleabihf.mk", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7247d1071206db45103c994b0077fcb0d8f75cf/mk%2Fcfg%2Farm-unknown-linux-musleabihf.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f7247d1071206db45103c994b0077fcb0d8f75cf/mk%2Fcfg%2Farm-unknown-linux-musleabihf.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farm-unknown-linux-musleabihf.mk?ref=f7247d1071206db45103c994b0077fcb0d8f75cf", "patch": "@@ -0,0 +1,3 @@\n+# This file is intentially left empty to indicate that, while this target is\n+# supported, it's not supported using plain GNU Make builds. Use a --rustbuild\n+# instead.\n\\ No newline at end of file"}, {"sha": "8120250150d43abae3d03e0be4fe31573d862b61", "filename": "mk/cfg/armv7-unknown-linux-musleabihf.mk", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7247d1071206db45103c994b0077fcb0d8f75cf/mk%2Fcfg%2Farmv7-unknown-linux-musleabihf.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f7247d1071206db45103c994b0077fcb0d8f75cf/mk%2Fcfg%2Farmv7-unknown-linux-musleabihf.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farmv7-unknown-linux-musleabihf.mk?ref=f7247d1071206db45103c994b0077fcb0d8f75cf", "patch": "@@ -0,0 +1,3 @@\n+# This file is intentially left empty to indicate that, while this target is\n+# supported, it's not supported using plain GNU Make builds. Use a --rustbuild\n+# instead.\n\\ No newline at end of file"}, {"sha": "061192ebd1340b318aedbea2441339eebb4282fe", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=f7247d1071206db45103c994b0077fcb0d8f75cf", "patch": "@@ -92,8 +92,7 @@ pub fn std_link(build: &Build,\n     }\n     add_to_sysroot(&out_dir, &libdir);\n \n-    if target.contains(\"musl\") &&\n-       (target.contains(\"x86_64\") || target.contains(\"i686\")) {\n+    if target.contains(\"musl\") && !target.contains(\"mips\") {\n         copy_third_party_objects(build, target, &libdir);\n     }\n }"}, {"sha": "09f96782e7184a9af4a9564430164224fcfb6fb2", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=f7247d1071206db45103c994b0077fcb0d8f75cf", "patch": "@@ -109,7 +109,7 @@ pub fn check(build: &mut Build) {\n         }\n \n         // Make sure musl-root is valid if specified\n-        if target.contains(\"musl\") && (target.contains(\"x86_64\") || target.contains(\"i686\")) {\n+        if target.contains(\"musl\") && !target.contains(\"mips\") {\n             match build.config.musl_root {\n                 Some(ref root) => {\n                     if fs::metadata(root.join(\"lib/libc.a\")).is_err() {"}, {"sha": "dc1b8d6ea983509ef7b91dfb2f9867552e718f20", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=f7247d1071206db45103c994b0077fcb0d8f75cf", "patch": "@@ -73,7 +73,16 @@ fn main() {\n                    .replace(\"\\\\\", \"/\"))\n        .current_dir(&build_dir)\n        .env(\"CC\", compiler.path())\n-       .env(\"EXTRA_CFLAGS\", cflags)\n+       .env(\"EXTRA_CFLAGS\", cflags.clone())\n+       // jemalloc generates Makefile deps using GCC's \"-MM\" flag. This means\n+       // that GCC will run the preprocessor, and only the preprocessor, over\n+       // jemalloc's source files. If we don't specify CPPFLAGS, then at least\n+       // on ARM that step fails with a \"Missing implementation for 32-bit\n+       // atomic operations\" error. This is because no \"-march\" flag will be\n+       // passed to GCC, and then GCC won't define the\n+       // \"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4\" macro that jemalloc needs to\n+       // select an atomic operation implementation.\n+       .env(\"CPPFLAGS\", cflags.clone())\n        .env(\"AR\", &ar)\n        .env(\"RANLIB\", format!(\"{} s\", ar.display()));\n "}, {"sha": "ccf3d978fe434c122030acc62e46fcae0f8aaa24", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=f7247d1071206db45103c994b0077fcb0d8f75cf", "patch": "@@ -36,7 +36,9 @@ use libc::{c_int, c_void, size_t};\n #[cfg_attr(target_os = \"android\", link(name = \"gcc\"))]\n #[cfg_attr(all(not(windows),\n                not(target_os = \"android\"),\n-               not(target_env = \"musl\")),\n+               not(target_env = \"musl\"),\n+               not(target_env = \"musleabi\"),\n+               not(target_env = \"musleabihf\")),\n            link(name = \"pthread\"))]\n #[cfg(not(cargobuild))]\n extern \"C\" {}"}, {"sha": "906f60f1c9a18c829f1d5c125377158e8a09cb4e", "filename": "src/librustc_back/target/arm_unknown_linux_musleabi.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabi.rs?ref=f7247d1071206db45103c994b0077fcb0d8f75cf", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::musl_base::opts();\n+\n+    // Most of these settings are copied from the arm_unknown_linux_gnueabi\n+    // target.\n+    base.features = \"+v6\".to_string();\n+    Target {\n+        // It's important we use \"gnueabi\" and not \"musleabi\" here. LLVM uses it\n+        // to determine the calling convention and float ABI, and it doesn't\n+        // support the \"musleabi\" value.\n+        llvm_target: \"arm-unknown-linux-gnueabi\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"musleabi\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "3051721b8c21fc4a1094fc9c342ca37cc07c46fa", "filename": "src/librustc_back/target/arm_unknown_linux_musleabihf.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabihf.rs?ref=f7247d1071206db45103c994b0077fcb0d8f75cf", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::musl_base::opts();\n+\n+    // Most of these settings are copied from the arm_unknown_linux_gnueabihf\n+    // target.\n+    base.features = \"+v6,+vfp2\".to_string();\n+    Target {\n+        // It's important we use \"gnueabihf\" and not \"musleabihf\" here. LLVM\n+        // uses it to determine the calling convention and float ABI, and it\n+        // doesn't support the \"musleabihf\" value.\n+        llvm_target: \"arm-unknown-linux-gnueabihf\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"musleabi\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "8732681fb4929dc196aa455ac4b3716613a8637b", "filename": "src/librustc_back/target/armv7_unknown_linux_musleabihf.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs?ref=f7247d1071206db45103c994b0077fcb0d8f75cf", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::musl_base::opts();\n+\n+    // Most of these settings are copied from the armv7_unknown_linux_gnueabihf\n+    // target.\n+    base.features = \"+v7,+vfp3,+neon\".to_string();\n+    base.cpu = \"cortex-a8\".to_string();\n+    Target {\n+        // It's important we use \"gnueabihf\" and not \"musleabihf\" here. LLVM\n+        // uses it to determine the calling convention and float ABI, and LLVM\n+        // doesn't support the \"musleabihf\" value.\n+        llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"musleabi\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "694b1340bbbf13c0230f674dc58b4681b602acca", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=f7247d1071206db45103c994b0077fcb0d8f75cf", "patch": "@@ -59,6 +59,7 @@ mod freebsd_base;\n mod linux_base;\n mod linux_musl_base;\n mod openbsd_base;\n+mod musl_base;\n mod netbsd_base;\n mod solaris_base;\n mod windows_base;\n@@ -134,7 +135,10 @@ supported_targets! {\n     (\"powerpc64le-unknown-linux-gnu\", powerpc64le_unknown_linux_gnu),\n     (\"arm-unknown-linux-gnueabi\", arm_unknown_linux_gnueabi),\n     (\"arm-unknown-linux-gnueabihf\", arm_unknown_linux_gnueabihf),\n+    (\"arm-unknown-linux-musleabi\", arm_unknown_linux_musleabi),\n+    (\"arm-unknown-linux-musleabihf\", arm_unknown_linux_musleabihf),\n     (\"armv7-unknown-linux-gnueabihf\", armv7_unknown_linux_gnueabihf),\n+    (\"armv7-unknown-linux-musleabihf\", armv7_unknown_linux_musleabihf),\n     (\"aarch64-unknown-linux-gnu\", aarch64_unknown_linux_gnu),\n     (\"x86_64-unknown-linux-musl\", x86_64_unknown_linux_musl),\n     (\"i686-unknown-linux-musl\", i686_unknown_linux_musl),"}, {"sha": "77cf015e1d9b3f047d98be88ef06c06e4e810986", "filename": "src/librustc_back/target/musl_base.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Flibrustc_back%2Ftarget%2Fmusl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Flibrustc_back%2Ftarget%2Fmusl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmusl_base.rs?ref=f7247d1071206db45103c994b0077fcb0d8f75cf", "patch": "@@ -0,0 +1,72 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::TargetOptions;\n+\n+pub fn opts() -> TargetOptions {\n+    let mut base = super::linux_base::opts();\n+\n+    // Make sure that the linker/gcc really don't pull in anything, including\n+    // default objects, libs, etc.\n+    base.pre_link_args.push(\"-nostdlib\".to_string());\n+    base.pre_link_args.push(\"-static\".to_string());\n+\n+    // At least when this was tested, the linker would not add the\n+    // `GNU_EH_FRAME` program header to executables generated, which is required\n+    // when unwinding to locate the unwinding information. I'm not sure why this\n+    // argument is *not* necessary for normal builds, but it can't hurt!\n+    base.pre_link_args.push(\"-Wl,--eh-frame-hdr\".to_string());\n+\n+    // There's a whole bunch of circular dependencies when dealing with MUSL\n+    // unfortunately. To put this in perspective libc is statically linked to\n+    // liblibc and libunwind is statically linked to libstd:\n+    //\n+    // * libcore depends on `fmod` which is in libc (transitively in liblibc).\n+    //   liblibc, however, depends on libcore.\n+    // * compiler-rt has personality symbols that depend on libunwind, but\n+    //   libunwind is in libstd which depends on compiler-rt.\n+    //\n+    // Recall that linkers discard libraries and object files as much as\n+    // possible, and with all the static linking and archives flying around with\n+    // MUSL the linker is super aggressively stripping out objects. For example\n+    // the first case has fmod stripped from liblibc (it's in its own object\n+    // file) so it's not there when libcore needs it. In the second example all\n+    // the unused symbols from libunwind are stripped (each is in its own object\n+    // file in libstd) before we end up linking compiler-rt which depends on\n+    // those symbols.\n+    //\n+    // To deal with these circular dependencies we just force the compiler to\n+    // link everything as a group, not stripping anything out until everything\n+    // is processed. The linker will still perform a pass to strip out object\n+    // files but it won't do so until all objects/archives have been processed.\n+    base.pre_link_args.push(\"-Wl,-(\".to_string());\n+    base.post_link_args.push(\"-Wl,-)\".to_string());\n+\n+    // When generating a statically linked executable there's generally some\n+    // small setup needed which is listed in these files. These are provided by\n+    // a musl toolchain and are linked by default by the `musl-gcc` script. Note\n+    // that `gcc` also does this by default, it just uses some different files.\n+    //\n+    // Each target directory for musl has these object files included in it so\n+    // they'll be included from there.\n+    base.pre_link_objects_exe.push(\"crt1.o\".to_string());\n+    base.pre_link_objects_exe.push(\"crti.o\".to_string());\n+    base.post_link_objects.push(\"crtn.o\".to_string());\n+\n+    // MUSL support doesn't currently include dynamic linking, so there's no\n+    // need for dylibs or rpath business. Additionally `-pie` is incompatible\n+    // with `-static`, so we can't pass `-pie`.\n+    base.dynamic_linking = false;\n+    base.has_rpath = false;\n+    base.position_independent_executables = false;\n+\n+    return base;\n+}\n+"}, {"sha": "f23ac32f51c39b282871bc6c0358c6c404aec9e8", "filename": "src/libstd/rtdeps.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=f7247d1071206db45103c994b0077fcb0d8f75cf", "patch": "@@ -19,7 +19,9 @@\n //\n // On Linux, librt and libdl are indirect dependencies via std,\n // and binutils 2.22+ won't add them automatically\n-#[cfg(all(target_os = \"linux\", not(target_env = \"musl\")))]\n+#[cfg(all(target_os = \"linux\", not(any(target_env = \"musl\",\n+                                       target_env = \"musleabi\",\n+                                       target_env = \"musleabihf\"))))]\n #[link(name = \"dl\")]\n #[link(name = \"pthread\")]\n extern {}"}, {"sha": "7f05aec4e6ea90927c258f2c2942b048027ee58f", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7247d1071206db45103c994b0077fcb0d8f75cf/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=f7247d1071206db45103c994b0077fcb0d8f75cf", "patch": "@@ -171,7 +171,9 @@ impl Drop for Thread {\n     }\n }\n \n-#[cfg(all(not(all(target_os = \"linux\", not(target_env = \"musl\"))),\n+#[cfg(all(not(all(target_os = \"linux\", not(any(target_env = \"musl\",\n+                                               target_env = \"musleabi\",\n+                                               target_env = \"musleabihf\")))),\n           not(target_os = \"freebsd\"),\n           not(target_os = \"macos\"),\n           not(target_os = \"bitrig\"),\n@@ -185,7 +187,9 @@ pub mod guard {\n }\n \n \n-#[cfg(any(all(target_os = \"linux\", not(target_env = \"musl\")),\n+#[cfg(any(all(target_os = \"linux\", not(any(target_env = \"musl\",\n+                                           target_env = \"musleabi\",\n+                                           target_env = \"musleabihf\"))),\n           target_os = \"freebsd\",\n           target_os = \"macos\",\n           target_os = \"bitrig\","}]}