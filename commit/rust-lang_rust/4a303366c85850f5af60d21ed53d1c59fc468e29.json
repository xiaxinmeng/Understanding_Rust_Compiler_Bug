{"sha": "4a303366c85850f5af60d21ed53d1c59fc468e29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMzAzMzY2Yzg1ODUwZjVhZjYwZDIxZWQ1M2QxYzU5ZmM0NjhlMjk=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-04-21T17:44:21Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-04-21T17:44:21Z"}, "message": "Improve remove dervie attrs", "tree": {"sha": "26186b4707e343cb8ef4fac44f2fed373a6db9fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26186b4707e343cb8ef4fac44f2fed373a6db9fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a303366c85850f5af60d21ed53d1c59fc468e29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a303366c85850f5af60d21ed53d1c59fc468e29", "html_url": "https://github.com/rust-lang/rust/commit/4a303366c85850f5af60d21ed53d1c59fc468e29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a303366c85850f5af60d21ed53d1c59fc468e29/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec645f2d75d2939a2f64959019dd916750f1ec00", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec645f2d75d2939a2f64959019dd916750f1ec00", "html_url": "https://github.com/rust-lang/rust/commit/ec645f2d75d2939a2f64959019dd916750f1ec00"}], "stats": {"total": 108, "additions": 98, "deletions": 10}, "files": [{"sha": "3738cfe8c2460d6b4e2474d1e6c615ee1d84ca0a", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a303366c85850f5af60d21ed53d1c59fc468e29/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4a303366c85850f5af60d21ed53d1c59fc468e29/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4a303366c85850f5af60d21ed53d1c59fc468e29", "patch": "@@ -1012,6 +1012,7 @@ dependencies = [\n  \"ra_prof\",\n  \"ra_syntax\",\n  \"ra_tt\",\n+ \"test_utils\",\n ]\n \n [[package]]"}, {"sha": "2cd522766066d20a95614ca57f6ef06ec1ce8870", "filename": "crates/ra_hir_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a303366c85850f5af60d21ed53d1c59fc468e29/crates%2Fra_hir_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4a303366c85850f5af60d21ed53d1c59fc468e29/crates%2Fra_hir_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2FCargo.toml?ref=4a303366c85850f5af60d21ed53d1c59fc468e29", "patch": "@@ -18,3 +18,4 @@ ra_parser = { path = \"../ra_parser\" }\n ra_prof = { path = \"../ra_prof\" }\n tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }\n+test_utils = { path = \"../test_utils\"}"}, {"sha": "4e0e069c8c271b8e0007056631774db71fd1390c", "filename": "crates/ra_hir_expand/src/proc_macro.rs", "status": "modified", "additions": 96, "deletions": 10, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/4a303366c85850f5af60d21ed53d1c59fc468e29/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a303366c85850f5af60d21ed53d1c59fc468e29/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs?ref=4a303366c85850f5af60d21ed53d1c59fc468e29", "patch": "@@ -2,6 +2,7 @@\n \n use crate::{db::AstDatabase, LazyMacroId};\n use ra_db::{CrateId, ProcMacroId};\n+use tt::buffer::{Cursor, TokenBuffer};\n \n #[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]\n pub struct ProcMacroExpander {\n@@ -36,22 +37,107 @@ impl ProcMacroExpander {\n             .clone()\n             .ok_or_else(|| err!(\"No derive macro found.\"))?;\n \n-        let tt = remove_derive_atr(tt, &proc_macro.name)\n+        let tt = remove_derive_attrs(tt)\n             .ok_or_else(|| err!(\"Fail to remove derive for custom derive\"))?;\n \n         proc_macro.expander.expand(&tt, None).map_err(mbe::ExpandError::from)\n     }\n }\n \n-fn remove_derive_atr(tt: &tt::Subtree, _name: &str) -> Option<tt::Subtree> {\n-    // FIXME: proper handle the remove derive\n-    // We assume the first 2 tokens are #[derive(name)]\n-    if tt.token_trees.len() > 2 {\n-        let mut tt = tt.clone();\n-        tt.token_trees.remove(0);\n-        tt.token_trees.remove(0);\n-        return Some(tt);\n+fn eat_punct(cursor: &mut Cursor, c: char) -> bool {\n+    if let Some(tt::TokenTree::Leaf(tt::Leaf::Punct(punct))) = cursor.token_tree() {\n+        if punct.char == c {\n+            *cursor = cursor.bump();\n+            return true;\n+        }\n     }\n+    false\n+}\n+\n+fn eat_subtree(cursor: &mut Cursor, kind: tt::DelimiterKind) -> bool {\n+    if let Some(tt::TokenTree::Subtree(subtree)) = cursor.token_tree() {\n+        if Some(kind) == subtree.delimiter_kind() {\n+            *cursor = cursor.bump_subtree();\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n+fn eat_ident(cursor: &mut Cursor, t: &str) -> bool {\n+    if let Some(tt::TokenTree::Leaf(tt::Leaf::Ident(ident))) = cursor.token_tree() {\n+        if t == ident.text.as_str() {\n+            *cursor = cursor.bump();\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n+fn remove_derive_attrs(tt: &tt::Subtree) -> Option<tt::Subtree> {\n+    let buffer = TokenBuffer::new(&tt.token_trees);\n+    let mut p = buffer.begin();\n+    let mut result = tt::Subtree::default();\n+\n+    while !p.eof() {\n+        let curr = p;\n \n-    None\n+        if eat_punct(&mut p, '#') {\n+            eat_punct(&mut p, '!');\n+            let parent = p;\n+            if eat_subtree(&mut p, tt::DelimiterKind::Bracket) {\n+                if eat_ident(&mut p, \"derive\") {\n+                    p = parent.bump();\n+                    continue;\n+                }\n+            }\n+        }\n+\n+        result.token_trees.push(curr.token_tree()?.clone());\n+        p = curr.bump();\n+    }\n+\n+    Some(result)\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+    use test_utils::assert_eq_text;\n+\n+    #[test]\n+    fn test_remove_derive_attrs() {\n+        let tt = mbe::parse_to_token_tree(\n+            r#\"\n+    #[allow(unused)]\n+    #[derive(Copy)]\n+    #[derive(Hello)]\n+    struct A {\n+        bar: u32\n+    }\n+\"#,\n+        )\n+        .unwrap()\n+        .0;\n+        let result = format!(\"{:#?}\", remove_derive_attrs(&tt).unwrap());\n+\n+        assert_eq_text!(\n+            &result,\n+            r#\"\n+SUBTREE $\n+  PUNCH   # [alone] 0\n+  SUBTREE [] 1\n+    IDENT   allow 2\n+    SUBTREE () 3\n+      IDENT   unused 4\n+  IDENT   struct 15\n+  IDENT   A 16\n+  SUBTREE {} 17\n+    IDENT   bar 18\n+    PUNCH   : [alone] 19\n+    IDENT   u32 20\n+\"#\n+            .trim()\n+        );\n+    }\n }"}]}