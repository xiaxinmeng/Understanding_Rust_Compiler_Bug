{"sha": "b119b6585959b77017d75149075b22927c452207", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMTliNjU4NTk1OWI3NzAxN2Q3NTE0OTA3NWIyMjkyN2M0NTIyMDc=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-24T12:50:11Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-28T01:22:05Z"}, "message": "tests: add test that roughly ensures that our lint messages conform with the diagnostics convention of the rustc dev guide\n\nlint message should not start with uppercase letters\nlint messages should not have punctuation at the end of the last line\n\nhttps://rustc-dev-guide.rust-lang.org/diagnostics.html#diagnostic-structure\n\nThe test reads through all the .stderr files in the testsuit and checks lint messages that start with \"help: \", \"error: \" etc.\nThere is also an exception list for special messages that are deemed acceptable.\n\nchangelog: make sure lint messages conform with the rustc dev guide and add test", "tree": {"sha": "add81809407ff754338682e3988210e863dbcd99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/add81809407ff754338682e3988210e863dbcd99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b119b6585959b77017d75149075b22927c452207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b119b6585959b77017d75149075b22927c452207", "html_url": "https://github.com/rust-lang/rust/commit/b119b6585959b77017d75149075b22927c452207", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b119b6585959b77017d75149075b22927c452207/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abd2c7ebfb47b3e2dbbb3ce3a7a54ef3847bb7dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/abd2c7ebfb47b3e2dbbb3ce3a7a54ef3847bb7dc", "html_url": "https://github.com/rust-lang/rust/commit/abd2c7ebfb47b3e2dbbb3ce3a7a54ef3847bb7dc"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "98a5be2898dcf9167a1668e8e4eca76262ef2f36", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b119b6585959b77017d75149075b22927c452207/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b119b6585959b77017d75149075b22927c452207/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=b119b6585959b77017d75149075b22927c452207", "patch": "@@ -42,6 +42,7 @@ tester = \"0.9\"\n clippy-mini-macro-test = { version = \"0.2\", path = \"mini-macro\" }\n serde = { version = \"1.0\", features = [\"derive\"] }\n derive-new = \"0.5\"\n+regex = \"1.4\"\n \n # A noop dependency that changes in the Rust repository, it's a bit of a hack.\n # See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`"}, {"sha": "45e0d7336c13a4281dce9173765a697e85010da3", "filename": "tests/lint_message_convention.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/b119b6585959b77017d75149075b22927c452207/tests%2Flint_message_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b119b6585959b77017d75149075b22927c452207/tests%2Flint_message_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flint_message_convention.rs?ref=b119b6585959b77017d75149075b22927c452207", "patch": "@@ -0,0 +1,102 @@\n+use std::path::PathBuf;\n+\n+use regex::RegexSet;\n+\n+#[derive(Debug)]\n+struct Message {\n+    path: PathBuf,\n+    bad_lines: Vec<String>,\n+}\n+\n+impl Message {\n+    fn new(path: PathBuf) -> Self {\n+        let content: String = std::fs::read_to_string(&path).unwrap();\n+        // we don't want the first letter after \"error: \", \"help: \" ... to be capitalized\n+        // also no puncutation (except for \"?\" ?) at the end of a line\n+        let regex_set: RegexSet = RegexSet::new(&[\n+            r\"error: [A-Z]\",\n+            r\"help: [A-Z]\",\n+            r\"warning: [A-Z]\",\n+            r\"note: [A-Z]\",\n+            r\"try this: [A-Z]\",\n+            r\"error: .*[.!]$\",\n+            r\"help: .*[.!]$\",\n+            r\"warning: .*[.!]$\",\n+            r\"note: .*[.!]$\",\n+            r\"try this: .*[.!]$\",\n+        ])\n+        .unwrap();\n+\n+        // sometimes the first character is capitalized and it is legal (like in \"Iterator...\") or\n+        // we want to ask a question ending in \"?\"\n+        let exceptions_set: RegexSet = RegexSet::new(&[\n+            r\".*error: I see you're using a LinkedList! Perhaps you meant some other data structure?\",\n+            r\".*C-like enum variant discriminant is not portable to 32-bit targets\",\n+            r\".*Iterator::step_by(0) will panic at runtime\",\n+            r\".*did you mean `unix`?\",\n+            r\".*the arguments may be inverted...\",\n+            r\".*Intel x86 assembly syntax used\",\n+            r\".*AT&T x86 assembly syntax used\",\n+            r\".*remove .* the return type...\",\n+            r\"note: Clippy version: .*\",\n+        ])\n+        .unwrap();\n+\n+        let bad_lines = content\n+            .lines()\n+            .filter(|line| regex_set.matches(line).matched_any())\n+            // ignore exceptions\n+            .filter(|line| !exceptions_set.matches(line).matched_any())\n+            .map(|s| s.to_owned())\n+            .collect::<Vec<String>>();\n+\n+        Message { path, bad_lines }\n+    }\n+}\n+\n+#[test]\n+fn lint_message_convention() {\n+    // make sure that lint messages:\n+    // * are not capitalized\n+    // * don't have puncuation at the end of the last sentence\n+\n+    // these directories have interesting tests\n+    let test_dirs = [\"ui\", \"ui-cargo\", \"ui-internal\", \"ui-toml\"]\n+        .iter()\n+        .map(PathBuf::from)\n+        .map(|p| {\n+            let base = PathBuf::from(\"tests\");\n+            base.join(p)\n+        });\n+\n+    // gather all .stderr files\n+    let tests = test_dirs\n+        .map(|dir| {\n+            std::fs::read_dir(dir)\n+                .expect(\"failed to read dir\")\n+                .map(|direntry| direntry.unwrap().path())\n+        })\n+        .flatten()\n+        .filter(|file| matches!(file.extension().map(|s| s.to_str()), Some(Some(\"stderr\"))));\n+\n+    // get all files that have any \"bad lines\" in them\n+    let bad_tests: Vec<Message> = tests\n+        .map(|path| Message::new(path))\n+        .filter(|message| !message.bad_lines.is_empty())\n+        .collect();\n+\n+    bad_tests.iter().for_each(|message| {\n+        eprintln!(\n+            \"error: the test '{}' contained the following nonconforming lines :\",\n+            message.path.display()\n+        );\n+        message.bad_lines.iter().for_each(|line| eprintln!(\"{}\", line));\n+        eprintln!(\"\\n\\n\");\n+    });\n+\n+    eprintln!(\"\\n\\n\\nLint message should not start with a capital letter and should not have punctuation at the end of the message unless multiple sentences are needed.\");\n+    eprintln!(\"Check out the rustc-dev-guide for more information:\");\n+    eprintln!(\"https://rustc-dev-guide.rust-lang.org/diagnostics.html#diagnostic-structure\");\n+\n+    assert!(bad_tests.is_empty());\n+}"}]}