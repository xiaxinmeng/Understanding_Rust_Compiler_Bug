{"sha": "338fb7a3e913fee1567ab01d8fa110603da718e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzOGZiN2EzZTkxM2ZlZTE1NjdhYjAxZDhmYTExMDYwM2RhNzE4ZTc=", "commit": {"author": {"name": "Areredify", "email": "misha-babenko@yandex.ru", "date": "2020-02-01T23:49:52Z"}, "committer": {"name": "Mikhail Babenko", "email": "misha-babenko@yandex.ru", "date": "2020-02-05T17:54:58Z"}, "message": "add excessive bools lints", "tree": {"sha": "b7b9d9e63ed4944c356a1d555d51196895c7ba78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7b9d9e63ed4944c356a1d555d51196895c7ba78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/338fb7a3e913fee1567ab01d8fa110603da718e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/338fb7a3e913fee1567ab01d8fa110603da718e7", "html_url": "https://github.com/rust-lang/rust/commit/338fb7a3e913fee1567ab01d8fa110603da718e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/338fb7a3e913fee1567ab01d8fa110603da718e7/comments", "author": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e28b2fdf1ac00d1d922b8c9f698eac3cff5f7c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e28b2fdf1ac00d1d922b8c9f698eac3cff5f7c1", "html_url": "https://github.com/rust-lang/rust/commit/8e28b2fdf1ac00d1d922b8c9f698eac3cff5f7c1"}], "stats": {"total": 428, "additions": 424, "deletions": 4}, "files": [{"sha": "0953432bfad729666691653475d3df5dda4b1d41", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/338fb7a3e913fee1567ab01d8fa110603da718e7/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/338fb7a3e913fee1567ab01d8fa110603da718e7/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=338fb7a3e913fee1567ab01d8fa110603da718e7", "patch": "@@ -1147,6 +1147,7 @@ Released 2018-09-13\n [`float_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_arithmetic\n [`float_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp\n [`float_cmp_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp_const\n+[`fn_params_excessive_bools`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_params_excessive_bools\n [`fn_to_numeric_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast\n [`fn_to_numeric_cast_with_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_with_truncation\n [`for_kv_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map\n@@ -1342,6 +1343,7 @@ Released 2018-09-13\n [`string_extend_chars`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_extend_chars\n [`string_lit_as_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_lit_as_bytes\n [`string_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_to_string\n+[`struct_excessive_bools`]: https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools\n [`suspicious_arithmetic_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_arithmetic_impl\n [`suspicious_assignment_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_assignment_formatting\n [`suspicious_else_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_else_formatting"}, {"sha": "96584dfef5c6382eeadb70bc08de262b1194cf2d", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/338fb7a3e913fee1567ab01d8fa110603da718e7/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/338fb7a3e913fee1567ab01d8fa110603da718e7/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=338fb7a3e913fee1567ab01d8fa110603da718e7", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 352 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 354 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "a1bfb0a710108e05aa617db0ea5eaf8e8adc867d", "filename": "clippy_lints/src/excessive_bools.rs", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/338fb7a3e913fee1567ab01d8fa110603da718e7/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338fb7a3e913fee1567ab01d8fa110603da718e7/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=338fb7a3e913fee1567ab01d8fa110603da718e7", "patch": "@@ -0,0 +1,174 @@\n+use crate::utils::{attr_by_name, in_macro, match_path_ast, span_lint_and_help};\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::Span;\n+use syntax::ast::{AssocItemKind, Extern, FnSig, Item, ItemKind, Ty, TyKind};\n+\n+use std::convert::TryInto;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for excessive\n+    /// use of bools in structs.\n+    ///\n+    /// **Why is this bad?** Excessive bools in a struct\n+    /// is often a sign that it's used as a state machine,\n+    /// which is much better implemented as an enum.\n+    /// If it's not the case, excessive bools usually benefit\n+    /// from refactoring into two-variant enums for better\n+    /// readability and API.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// Bad:\n+    /// ```rust\n+    /// struct S {\n+    ///     is_pending: bool,\n+    ///     is_processing: bool,\n+    ///     is_finished: bool,\n+    /// }\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust\n+    /// enum S {\n+    ///     Pending,\n+    ///     Processing,\n+    ///     Finished,\n+    /// }\n+    /// ```\n+    pub STRUCT_EXCESSIVE_BOOLS,\n+    pedantic,\n+    \"using too many bools in a struct\"\n+}\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for excessive use of\n+    /// bools in function definitions.\n+    ///\n+    /// **Why is this bad?** Calls to such functions\n+    /// are confusing and error prone, because it's\n+    /// hard to remember argument order and you have\n+    /// no type system support to back you up. Using\n+    /// two-variant enums instead of bools often makes\n+    /// API easier to use.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// Bad:\n+    /// ```rust,ignore\n+    /// fn f(is_round: bool, is_hot: bool) { ... }\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust,ignore\n+    /// enum Shape {\n+    ///     Round,\n+    ///     Spiky,\n+    /// }\n+    ///\n+    /// enum Temperature {\n+    ///     Hot,\n+    ///     IceCold,\n+    /// }\n+    ///\n+    /// fn f(shape: Shape, temperature: Temperature) { ... }\n+    /// ```\n+    pub FN_PARAMS_EXCESSIVE_BOOLS,\n+    pedantic,\n+    \"using too many bools in function parameters\"\n+}\n+\n+pub struct ExcessiveBools {\n+    max_struct_bools: u64,\n+    max_fn_params_bools: u64,\n+}\n+\n+impl ExcessiveBools {\n+    #[must_use]\n+    pub fn new(max_struct_bools: u64, max_fn_params_bools: u64) -> Self {\n+        Self {\n+            max_struct_bools,\n+            max_fn_params_bools,\n+        }\n+    }\n+\n+    fn check_fn_sig(&self, cx: &EarlyContext<'_>, fn_sig: &FnSig, span: Span) {\n+        match fn_sig.header.ext {\n+            Extern::Implicit | Extern::Explicit(_) => return,\n+            Extern::None => (),\n+        }\n+\n+        let fn_sig_bools = fn_sig\n+            .decl\n+            .inputs\n+            .iter()\n+            .filter(|param| is_bool_ty(&param.ty))\n+            .count()\n+            .try_into()\n+            .unwrap();\n+        if self.max_fn_params_bools < fn_sig_bools {\n+            span_lint_and_help(\n+                cx,\n+                FN_PARAMS_EXCESSIVE_BOOLS,\n+                span,\n+                &format!(\"more than {} bools in function parameters\", self.max_fn_params_bools),\n+                \"consider refactoring bools into two-variant enums\",\n+            );\n+        }\n+    }\n+}\n+\n+impl_lint_pass!(ExcessiveBools => [STRUCT_EXCESSIVE_BOOLS, FN_PARAMS_EXCESSIVE_BOOLS]);\n+\n+fn is_bool_ty(ty: &Ty) -> bool {\n+    if let TyKind::Path(None, path) = &ty.kind {\n+        return match_path_ast(path, &[\"bool\"]);\n+    }\n+    false\n+}\n+\n+impl EarlyLintPass for ExcessiveBools {\n+    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n+        if in_macro(item.span) {\n+            return;\n+        }\n+        match &item.kind {\n+            ItemKind::Struct(variant_data, _) => {\n+                if attr_by_name(&item.attrs, \"repr\").is_some() {\n+                    return;\n+                }\n+\n+                let struct_bools = variant_data\n+                    .fields()\n+                    .iter()\n+                    .filter(|field| is_bool_ty(&field.ty))\n+                    .count()\n+                    .try_into()\n+                    .unwrap();\n+                if self.max_struct_bools < struct_bools {\n+                    span_lint_and_help(\n+                        cx,\n+                        STRUCT_EXCESSIVE_BOOLS,\n+                        item.span,\n+                        &format!(\"more than {} bools in a struct\", self.max_struct_bools),\n+                        \"consider using a state machine or refactoring bools into two-variant enums\",\n+                    );\n+                }\n+            },\n+            ItemKind::Impl {\n+                of_trait: None, items, ..\n+            }\n+            | ItemKind::Trait(_, _, _, _, items) => {\n+                for item in items {\n+                    if let AssocItemKind::Fn(fn_sig, _) = &item.kind {\n+                        self.check_fn_sig(cx, fn_sig, item.span);\n+                    }\n+                }\n+            },\n+            ItemKind::Fn(fn_sig, _, _) => self.check_fn_sig(cx, fn_sig, item.span),\n+            _ => (),\n+        }\n+    }\n+}"}, {"sha": "5084e4e599c247f664ec510298712ef8622aca4b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/338fb7a3e913fee1567ab01d8fa110603da718e7/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338fb7a3e913fee1567ab01d8fa110603da718e7/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=338fb7a3e913fee1567ab01d8fa110603da718e7", "patch": "@@ -202,6 +202,7 @@ pub mod erasing_op;\n pub mod escape;\n pub mod eta_reduction;\n pub mod eval_order_dependence;\n+pub mod excessive_bools;\n pub mod excessive_precision;\n pub mod exit;\n pub mod explicit_write;\n@@ -528,6 +529,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS,\n         &eval_order_dependence::DIVERGING_SUB_EXPRESSION,\n         &eval_order_dependence::EVAL_ORDER_DEPENDENCE,\n+        &excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS,\n+        &excessive_bools::STRUCT_EXCESSIVE_BOOLS,\n         &excessive_precision::EXCESSIVE_PRECISION,\n         &exit::EXIT,\n         &explicit_write::EXPLICIT_WRITE,\n@@ -997,6 +1000,9 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box let_underscore::LetUnderscore);\n     store.register_late_pass(|| box atomic_ordering::AtomicOrdering);\n     store.register_early_pass(|| box single_component_path_imports::SingleComponentPathImports);\n+    let max_fn_params_bools = conf.max_fn_params_bools;\n+    let max_struct_bools = conf.max_struct_bools;\n+    store.register_early_pass(move || box excessive_bools::ExcessiveBools::new(max_struct_bools, max_fn_params_bools));\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1051,6 +1057,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&enum_variants::MODULE_NAME_REPETITIONS),\n         LintId::of(&enum_variants::PUB_ENUM_VARIANT_NAMES),\n         LintId::of(&eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS),\n+        LintId::of(&excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS),\n+        LintId::of(&excessive_bools::STRUCT_EXCESSIVE_BOOLS),\n         LintId::of(&functions::MUST_USE_CANDIDATE),\n         LintId::of(&functions::TOO_MANY_LINES),\n         LintId::of(&if_not_else::IF_NOT_ELSE),"}, {"sha": "584cde2678f3959928e2f3f3b62b1e9c69f39286", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/338fb7a3e913fee1567ab01d8fa110603da718e7/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338fb7a3e913fee1567ab01d8fa110603da718e7/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=338fb7a3e913fee1567ab01d8fa110603da718e7", "patch": "@@ -154,6 +154,10 @@ define_Conf! {\n     (array_size_threshold, \"array_size_threshold\": u64, 512_000),\n     /// Lint: VEC_BOX. The size of the boxed type in bytes, where boxing in a `Vec` is allowed\n     (vec_box_size_threshold, \"vec_box_size_threshold\": u64, 4096),\n+    /// Lint: STRUCT_EXCESSIVE_BOOLS. The maximum number of bools a struct can have\n+    (max_struct_bools, \"max_struct_bools\": u64, 3),\n+    /// Lint: FN_PARAMS_EXCESSIVE_BOOLS. The maximum number of bools function parameters can have\n+    (max_fn_params_bools, \"max_fn_params_bools\": u64, 3),\n }\n \n impl Default for Conf {"}, {"sha": "4b7e21bc3bad1fb00402260313a498e213b270e1", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/338fb7a3e913fee1567ab01d8fa110603da718e7/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338fb7a3e913fee1567ab01d8fa110603da718e7/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=338fb7a3e913fee1567ab01d8fa110603da718e7", "patch": "@@ -1355,6 +1355,13 @@ pub fn is_no_std_crate(krate: &Crate<'_>) -> bool {\n     })\n }\n \n+/// Check if parent of a hir node is a trait implementation block.\n+/// For example, `f` in\n+/// ```rust,ignore\n+/// impl Trait for S {\n+///     fn f() {}\n+/// }\n+/// ```\n pub fn is_trait_impl_item(cx: &LateContext<'_, '_>, hir_id: HirId) -> bool {\n     if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n         matches!(item.kind, ItemKind::Impl{ of_trait: Some(_), .. })"}, {"sha": "f725ce2563fa0f306341d5b526f47b523ba8e4ba", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/338fb7a3e913fee1567ab01d8fa110603da718e7/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338fb7a3e913fee1567ab01d8fa110603da718e7/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=338fb7a3e913fee1567ab01d8fa110603da718e7", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 352] = [\n+pub const ALL_LINTS: [Lint; 354] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -623,6 +623,13 @@ pub const ALL_LINTS: [Lint; 352] = [\n         deprecation: None,\n         module: \"misc\",\n     },\n+    Lint {\n+        name: \"fn_params_excessive_bools\",\n+        group: \"pedantic\",\n+        desc: \"using too many bools in function parameters\",\n+        deprecation: None,\n+        module: \"excessive_bools\",\n+    },\n     Lint {\n         name: \"fn_to_numeric_cast\",\n         group: \"style\",\n@@ -1932,6 +1939,13 @@ pub const ALL_LINTS: [Lint; 352] = [\n         deprecation: None,\n         module: \"strings\",\n     },\n+    Lint {\n+        name: \"struct_excessive_bools\",\n+        group: \"pedantic\",\n+        desc: \"using too many bools in a struct\",\n+        deprecation: None,\n+        module: \"excessive_bools\",\n+    },\n     Lint {\n         name: \"suspicious_arithmetic_impl\",\n         group: \"correctness\","}, {"sha": "022eec3e0e2bf2f021fd61709cb87746ee59425b", "filename": "tests/ui-toml/fn_params_excessive_bools/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui-toml%2Ffn_params_excessive_bools%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui-toml%2Ffn_params_excessive_bools%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ffn_params_excessive_bools%2Fclippy.toml?ref=338fb7a3e913fee1567ab01d8fa110603da718e7", "patch": "@@ -0,0 +1 @@\n+max-fn-params-bools = 1"}, {"sha": "42897b389edfc6e82d4279b78d1ca7633541ec20", "filename": "tests/ui-toml/fn_params_excessive_bools/test.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui-toml%2Ffn_params_excessive_bools%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui-toml%2Ffn_params_excessive_bools%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ffn_params_excessive_bools%2Ftest.rs?ref=338fb7a3e913fee1567ab01d8fa110603da718e7", "patch": "@@ -0,0 +1,6 @@\n+#![warn(clippy::fn_params_excessive_bools)]\n+\n+fn f(_: bool) {}\n+fn g(_: bool, _: bool) {}\n+\n+fn main() {}"}, {"sha": "d05adc3d36e3350d97cc31a27c3704321af0b254", "filename": "tests/ui-toml/fn_params_excessive_bools/test.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui-toml%2Ffn_params_excessive_bools%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui-toml%2Ffn_params_excessive_bools%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ffn_params_excessive_bools%2Ftest.stderr?ref=338fb7a3e913fee1567ab01d8fa110603da718e7", "patch": "@@ -0,0 +1,11 @@\n+error: more than 1 bools in function parameters\n+  --> $DIR/test.rs:4:1\n+   |\n+LL | fn g(_: bool, _: bool) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::fn-params-excessive-bools` implied by `-D warnings`\n+   = help: consider refactoring bools into two-variant enums\n+\n+error: aborting due to previous error\n+"}, {"sha": "3912ab542777dc5723cd4d602b157cec48469e41", "filename": "tests/ui-toml/struct_excessive_bools/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui-toml%2Fstruct_excessive_bools%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui-toml%2Fstruct_excessive_bools%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fstruct_excessive_bools%2Fclippy.toml?ref=338fb7a3e913fee1567ab01d8fa110603da718e7", "patch": "@@ -0,0 +1 @@\n+max-struct-bools = 0"}, {"sha": "242984680e163bd9eef1de3b132ffe93c7663c73", "filename": "tests/ui-toml/struct_excessive_bools/test.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui-toml%2Fstruct_excessive_bools%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui-toml%2Fstruct_excessive_bools%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fstruct_excessive_bools%2Ftest.rs?ref=338fb7a3e913fee1567ab01d8fa110603da718e7", "patch": "@@ -0,0 +1,9 @@\n+#![warn(clippy::struct_excessive_bools)]\n+\n+struct S {\n+    a: bool,\n+}\n+\n+struct Foo {}\n+\n+fn main() {}"}, {"sha": "65861d10d0fdb52a37ac512694ce1f9161d75ebc", "filename": "tests/ui-toml/struct_excessive_bools/test.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui-toml%2Fstruct_excessive_bools%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui-toml%2Fstruct_excessive_bools%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fstruct_excessive_bools%2Ftest.stderr?ref=338fb7a3e913fee1567ab01d8fa110603da718e7", "patch": "@@ -0,0 +1,13 @@\n+error: more than 0 bools in a struct\n+  --> $DIR/test.rs:3:1\n+   |\n+LL | / struct S {\n+LL | |     a: bool,\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::struct-excessive-bools` implied by `-D warnings`\n+   = help: consider using a state machine or refactoring bools into two-variant enums\n+\n+error: aborting due to previous error\n+"}, {"sha": "18f5d994ba8aaf1df45a039a5275c14c6264f49f", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=338fb7a3e913fee1567ab01d8fa110603da718e7", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-struct-bools`, `max-fn-params-bools`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}, {"sha": "7d6fd607e6545469dc9fa2e0286eae5417d00628", "filename": "tests/ui/fn_params_excessive_bools.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui%2Ffn_params_excessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui%2Ffn_params_excessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_params_excessive_bools.rs?ref=338fb7a3e913fee1567ab01d8fa110603da718e7", "patch": "@@ -0,0 +1,44 @@\n+#![warn(clippy::fn_params_excessive_bools)]\n+\n+extern \"C\" {\n+    fn f(_: bool, _: bool, _: bool, _: bool);\n+}\n+\n+macro_rules! foo {\n+    () => {\n+        fn fff(_: bool, _: bool, _: bool, _: bool) {}\n+    };\n+}\n+\n+foo!();\n+\n+#[no_mangle]\n+extern \"C\" fn k(_: bool, _: bool, _: bool, _: bool) {}\n+fn g(_: bool, _: bool, _: bool, _: bool) {}\n+fn h(_: bool, _: bool, _: bool) {}\n+fn e(_: S, _: S, _: Box<S>, _: Vec<u32>) {}\n+fn t(_: S, _: S, _: Box<S>, _: Vec<u32>, _: bool, _: bool, _: bool, _: bool) {}\n+\n+struct S {}\n+trait Trait {\n+    fn f(_: bool, _: bool, _: bool, _: bool);\n+    fn g(_: bool, _: bool, _: bool, _: Vec<u32>);\n+}\n+\n+impl S {\n+    fn f(&self, _: bool, _: bool, _: bool, _: bool) {}\n+    fn g(&self, _: bool, _: bool, _: bool) {}\n+    #[no_mangle]\n+    extern \"C\" fn h(_: bool, _: bool, _: bool, _: bool) {}\n+}\n+\n+impl Trait for S {\n+    fn f(_: bool, _: bool, _: bool, _: bool) {}\n+    fn g(_: bool, _: bool, _: bool, _: Vec<u32>) {}\n+}\n+\n+fn main() {\n+    fn n(_: bool, _: u32, _: bool, _: Box<u32>, _: bool, _: bool) {\n+        fn nn(_: bool, _: bool, _: bool, _: bool) {}\n+    }\n+}"}, {"sha": "4e5dbc261d66bababa570af2a3b283536f668e45", "filename": "tests/ui/fn_params_excessive_bools.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui%2Ffn_params_excessive_bools.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui%2Ffn_params_excessive_bools.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_params_excessive_bools.stderr?ref=338fb7a3e913fee1567ab01d8fa110603da718e7", "patch": "@@ -0,0 +1,53 @@\n+error: more than 3 bools in function parameters\n+  --> $DIR/fn_params_excessive_bools.rs:17:1\n+   |\n+LL | fn g(_: bool, _: bool, _: bool, _: bool) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::fn-params-excessive-bools` implied by `-D warnings`\n+   = help: consider refactoring bools into two-variant enums\n+\n+error: more than 3 bools in function parameters\n+  --> $DIR/fn_params_excessive_bools.rs:20:1\n+   |\n+LL | fn t(_: S, _: S, _: Box<S>, _: Vec<u32>, _: bool, _: bool, _: bool, _: bool) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider refactoring bools into two-variant enums\n+\n+error: more than 3 bools in function parameters\n+  --> $DIR/fn_params_excessive_bools.rs:24:5\n+   |\n+LL |     fn f(_: bool, _: bool, _: bool, _: bool);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider refactoring bools into two-variant enums\n+\n+error: more than 3 bools in function parameters\n+  --> $DIR/fn_params_excessive_bools.rs:29:5\n+   |\n+LL |     fn f(&self, _: bool, _: bool, _: bool, _: bool) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider refactoring bools into two-variant enums\n+\n+error: more than 3 bools in function parameters\n+  --> $DIR/fn_params_excessive_bools.rs:41:5\n+   |\n+LL | /     fn n(_: bool, _: u32, _: bool, _: Box<u32>, _: bool, _: bool) {\n+LL | |         fn nn(_: bool, _: bool, _: bool, _: bool) {}\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: consider refactoring bools into two-variant enums\n+\n+error: more than 3 bools in function parameters\n+  --> $DIR/fn_params_excessive_bools.rs:42:9\n+   |\n+LL |         fn nn(_: bool, _: bool, _: bool, _: bool) {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider refactoring bools into two-variant enums\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "ce4fe830a0a210e17e692b00fa01baf6f4c444fe", "filename": "tests/ui/struct_excessive_bools.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui%2Fstruct_excessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui%2Fstruct_excessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstruct_excessive_bools.rs?ref=338fb7a3e913fee1567ab01d8fa110603da718e7", "patch": "@@ -0,0 +1,44 @@\n+#![warn(clippy::struct_excessive_bools)]\n+\n+macro_rules! foo {\n+    () => {\n+        struct MacroFoo {\n+            a: bool,\n+            b: bool,\n+            c: bool,\n+            d: bool,\n+        }\n+    };\n+}\n+\n+foo!();\n+\n+struct Foo {\n+    a: bool,\n+    b: bool,\n+    c: bool,\n+}\n+\n+struct BadFoo {\n+    a: bool,\n+    b: bool,\n+    c: bool,\n+    d: bool,\n+}\n+\n+#[repr(C)]\n+struct Bar {\n+    a: bool,\n+    b: bool,\n+    c: bool,\n+    d: bool,\n+}\n+\n+fn main() {\n+    struct FooFoo {\n+        a: bool,\n+        b: bool,\n+        c: bool,\n+        d: bool,\n+    }\n+}"}, {"sha": "2941bf2983aa8ba739591a15e34cc599a6af6e39", "filename": "tests/ui/struct_excessive_bools.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui%2Fstruct_excessive_bools.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui%2Fstruct_excessive_bools.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstruct_excessive_bools.stderr?ref=338fb7a3e913fee1567ab01d8fa110603da718e7", "patch": "@@ -0,0 +1,29 @@\n+error: more than 3 bools in a struct\n+  --> $DIR/struct_excessive_bools.rs:22:1\n+   |\n+LL | / struct BadFoo {\n+LL | |     a: bool,\n+LL | |     b: bool,\n+LL | |     c: bool,\n+LL | |     d: bool,\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::struct-excessive-bools` implied by `-D warnings`\n+   = help: consider using a state machine or refactoring bools into two-variant enums\n+\n+error: more than 3 bools in a struct\n+  --> $DIR/struct_excessive_bools.rs:38:5\n+   |\n+LL | /     struct FooFoo {\n+LL | |         a: bool,\n+LL | |         b: bool,\n+LL | |         c: bool,\n+LL | |         d: bool,\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: consider using a state machine or refactoring bools into two-variant enums\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "42d432a2c9e2483ebf4209db61cd912d9a17a944", "filename": "tests/ui/unused_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338fb7a3e913fee1567ab01d8fa110603da718e7/tests%2Fui%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_self.rs?ref=338fb7a3e913fee1567ab01d8fa110603da718e7", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::unused_self)]\n-#![allow(clippy::boxed_local)]\n+#![allow(clippy::boxed_local, clippy::fn_params_excessive_bools)]\n \n mod unused_self {\n     use std::pin::Pin;"}]}