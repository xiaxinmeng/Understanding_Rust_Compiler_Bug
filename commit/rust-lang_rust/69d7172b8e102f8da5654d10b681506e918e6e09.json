{"sha": "69d7172b8e102f8da5654d10b681506e918e6e09", "node_id": "C_kwDOAAsO6NoAKDY5ZDcxNzJiOGUxMDJmOGRhNTY1NGQxMGI2ODE1MDZlOTE4ZTZlMDk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-14T05:58:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-14T05:58:40Z"}, "message": "Rollup merge of #110207 - compiler-errors:new-solver-unpin, r=lcnr\n\nAssemble `Unpin` candidates specially for generators in new solver\n\nFixes compiler-errors/next-solver-hir-issues#16\n\nr? ``@lcnr``", "tree": {"sha": "ab0cd92e20641f3452dcb83d93a4222f00fc5d79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab0cd92e20641f3452dcb83d93a4222f00fc5d79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69d7172b8e102f8da5654d10b681506e918e6e09", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkOOuQCRBK7hj4Ov3rIwAAXTEIAGaC5y4tCPsmGolfw/P0Pfo6\nmPa/+EBLmSGbgRPuh3LzwrriF+rHAK4yTPHt+zMIBsUm6SDeisc8FQl3ZVr7w3Vg\ndT4HlXsrMJ+homq2lMKrP+2lEoKSQdBxicYPaqcpEFrac1HXo0uTaL0RUo6TXi+b\nIe7YCKFxoN0Y4kMEXgUH+weXIqTk9Or5fLJ3/Zv7yA/dRI3C2SBcKsOfmfCNFgYC\nMSysM3sqKKcb86ysiQvcRR6k55bfGJQwrqymYaUfW/dq2/ji82+eXsXTYpF0pNWV\nVbcJtleb3zaB5aqcVOkv97ckqHsXw9RP0v2fVDTukVgLrvttEE0nm1D37bPWaK4=\n=6FrG\n-----END PGP SIGNATURE-----\n", "payload": "tree ab0cd92e20641f3452dcb83d93a4222f00fc5d79\nparent 44db7c3b5af658370e5e55d8b7f6338cce225538\nparent 319c790600c2f8bfccf112da216e64566a61e5b6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681451920 +0200\ncommitter GitHub <noreply@github.com> 1681451920 +0200\n\nRollup merge of #110207 - compiler-errors:new-solver-unpin, r=lcnr\n\nAssemble `Unpin` candidates specially for generators in new solver\n\nFixes compiler-errors/next-solver-hir-issues#16\n\nr? ``@lcnr``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69d7172b8e102f8da5654d10b681506e918e6e09", "html_url": "https://github.com/rust-lang/rust/commit/69d7172b8e102f8da5654d10b681506e918e6e09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69d7172b8e102f8da5654d10b681506e918e6e09/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44db7c3b5af658370e5e55d8b7f6338cce225538", "url": "https://api.github.com/repos/rust-lang/rust/commits/44db7c3b5af658370e5e55d8b7f6338cce225538", "html_url": "https://github.com/rust-lang/rust/commit/44db7c3b5af658370e5e55d8b7f6338cce225538"}, {"sha": "319c790600c2f8bfccf112da216e64566a61e5b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/319c790600c2f8bfccf112da216e64566a61e5b6", "html_url": "https://github.com/rust-lang/rust/commit/319c790600c2f8bfccf112da216e64566a61e5b6"}], "stats": {"total": 195, "additions": 130, "deletions": 65}, "files": [{"sha": "10d817f75ac77e1ac6cc0fd616b53a807467fe42", "filename": "compiler/rustc_trait_selection/src/solve/assembly/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69d7172b8e102f8da5654d10b681506e918e6e09/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d7172b8e102f8da5654d10b681506e918e6e09/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs?ref=69d7172b8e102f8da5654d10b681506e918e6e09", "patch": "@@ -348,6 +348,14 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n     ) {\n         let lang_items = self.tcx().lang_items();\n         let trait_def_id = goal.predicate.trait_def_id(self.tcx());\n+\n+        // N.B. When assembling built-in candidates for lang items that are also\n+        // `auto` traits, then the auto trait candidate that is assembled in\n+        // `consider_auto_trait_candidate` MUST be disqualified to remain sound.\n+        //\n+        // Instead of adding the logic here, it's a better idea to add it in\n+        // `EvalCtxt::disqualify_auto_trait_candidate_due_to_possible_impl` in\n+        // `solve::trait_goals` instead.\n         let result = if self.tcx().trait_is_auto(trait_def_id) {\n             G::consider_auto_trait_candidate(self, goal)\n         } else if self.tcx().trait_is_alias(trait_def_id) {"}, {"sha": "abd11a15ac23a4437fde18bc8822fa3ff357ac14", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 94, "deletions": 61, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/69d7172b8e102f8da5654d10b681506e918e6e09/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d7172b8e102f8da5654d10b681506e918e6e09/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=69d7172b8e102f8da5654d10b681506e918e6e09", "patch": "@@ -3,7 +3,7 @@\n use super::assembly::{self, structural_traits};\n use super::{EvalCtxt, SolverMode};\n use rustc_hir::def_id::DefId;\n-use rustc_hir::LangItem;\n+use rustc_hir::{LangItem, Movability};\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::util::supertraits;\n use rustc_middle::traits::solve::{CanonicalResponse, Certainty, Goal, QueryResult};\n@@ -147,66 +147,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n-        let self_ty = goal.predicate.self_ty();\n-        match *self_ty.kind() {\n-            // Stall int and float vars until they are resolved to a concrete\n-            // numerical type. That's because the check for impls below treats\n-            // int vars as matching any impl. Even if we filtered such impls,\n-            // we probably don't want to treat an `impl !AutoTrait for i32` as\n-            // disqualifying the built-in auto impl for `i64: AutoTrait` either.\n-            ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {\n-                return ecx.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS);\n-            }\n-\n-            // These types cannot be structurally decomposed into constitutent\n-            // types, and therefore have no builtin impl.\n-            ty::Dynamic(..)\n-            | ty::Param(..)\n-            | ty::Foreign(..)\n-            | ty::Alias(ty::Projection, ..)\n-            | ty::Placeholder(..) => return Err(NoSolution),\n-\n-            ty::Infer(_) | ty::Bound(_, _) => bug!(\"unexpected type `{self_ty}`\"),\n-\n-            // For rigid types, we only register a builtin auto implementation\n-            // if there is no implementation that could ever apply to the self\n-            // type.\n-            //\n-            // This differs from the current stable behavior and fixes #84857.\n-            // Due to breakage found via crater, we currently instead lint\n-            // patterns which can be used to exploit this unsoundness on stable,\n-            // see #93367 for more details.\n-            ty::Bool\n-            | ty::Char\n-            | ty::Int(_)\n-            | ty::Uint(_)\n-            | ty::Float(_)\n-            | ty::Str\n-            | ty::Array(_, _)\n-            | ty::Slice(_)\n-            | ty::RawPtr(_)\n-            | ty::Ref(_, _, _)\n-            | ty::FnDef(_, _)\n-            | ty::FnPtr(_)\n-            | ty::Closure(_, _)\n-            | ty::Generator(_, _, _)\n-            | ty::GeneratorWitness(_)\n-            | ty::GeneratorWitnessMIR(_, _)\n-            | ty::Never\n-            | ty::Tuple(_)\n-            | ty::Error(_)\n-            | ty::Adt(_, _)\n-            | ty::Alias(ty::Opaque, _) => {\n-                if let Some(def_id) = ecx.tcx().find_map_relevant_impl(\n-                    goal.predicate.def_id(),\n-                    goal.predicate.self_ty(),\n-                    TreatProjections::NextSolverLookup,\n-                    Some,\n-                ) {\n-                    debug!(?def_id, ?goal, \"disqualified auto-trait implementation\");\n-                    return Err(NoSolution);\n-                }\n-            }\n+        if let Some(result) = ecx.disqualify_auto_trait_candidate_due_to_possible_impl(goal) {\n+            return result;\n         }\n \n         ecx.probe_and_evaluate_goal_for_constituent_tys(\n@@ -630,6 +572,97 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {\n+    // Return `Some` if there is an impl (built-in or user provided) that may\n+    // hold for the self type of the goal, which for coherence and soundness\n+    // purposes must disqualify the built-in auto impl assembled by considering\n+    // the type's constituent types.\n+    fn disqualify_auto_trait_candidate_due_to_possible_impl(\n+        &mut self,\n+        goal: Goal<'tcx, TraitPredicate<'tcx>>,\n+    ) -> Option<QueryResult<'tcx>> {\n+        let self_ty = goal.predicate.self_ty();\n+        match *self_ty.kind() {\n+            // Stall int and float vars until they are resolved to a concrete\n+            // numerical type. That's because the check for impls below treats\n+            // int vars as matching any impl. Even if we filtered such impls,\n+            // we probably don't want to treat an `impl !AutoTrait for i32` as\n+            // disqualifying the built-in auto impl for `i64: AutoTrait` either.\n+            ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {\n+                Some(self.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS))\n+            }\n+\n+            // These types cannot be structurally decomposed into constitutent\n+            // types, and therefore have no built-in auto impl.\n+            ty::Dynamic(..)\n+            | ty::Param(..)\n+            | ty::Foreign(..)\n+            | ty::Alias(ty::Projection, ..)\n+            | ty::Placeholder(..) => Some(Err(NoSolution)),\n+\n+            ty::Infer(_) | ty::Bound(_, _) => bug!(\"unexpected type `{self_ty}`\"),\n+\n+            // Generators have one special built-in candidate, `Unpin`, which\n+            // takes precedence over the structural auto trait candidate being\n+            // assembled.\n+            ty::Generator(_, _, movability)\n+                if Some(goal.predicate.def_id()) == self.tcx().lang_items().unpin_trait() =>\n+            {\n+                match movability {\n+                    Movability::Static => Some(Err(NoSolution)),\n+                    Movability::Movable => {\n+                        Some(self.evaluate_added_goals_and_make_canonical_response(Certainty::Yes))\n+                    }\n+                }\n+            }\n+\n+            // For rigid types, any possible implementation that could apply to\n+            // the type (even if after unification and processing nested goals\n+            // it does not hold) will disqualify the built-in auto impl.\n+            //\n+            // This differs from the current stable behavior and fixes #84857.\n+            // Due to breakage found via crater, we currently instead lint\n+            // patterns which can be used to exploit this unsoundness on stable,\n+            // see #93367 for more details.\n+            ty::Bool\n+            | ty::Char\n+            | ty::Int(_)\n+            | ty::Uint(_)\n+            | ty::Float(_)\n+            | ty::Str\n+            | ty::Array(_, _)\n+            | ty::Slice(_)\n+            | ty::RawPtr(_)\n+            | ty::Ref(_, _, _)\n+            | ty::FnDef(_, _)\n+            | ty::FnPtr(_)\n+            | ty::Closure(_, _)\n+            | ty::Generator(_, _, _)\n+            | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(_, _)\n+            | ty::Never\n+            | ty::Tuple(_)\n+            | ty::Adt(_, _)\n+            // FIXME: Handling opaques here is kinda sus. Especially because we\n+            // simplify them to PlaceholderSimplifiedType.\n+            | ty::Alias(ty::Opaque, _) => {\n+                if let Some(def_id) = self.tcx().find_map_relevant_impl(\n+                    goal.predicate.def_id(),\n+                    goal.predicate.self_ty(),\n+                    TreatProjections::NextSolverLookup,\n+                    Some,\n+                ) {\n+                    debug!(?def_id, ?goal, \"disqualified auto-trait implementation\");\n+                    // No need to actually consider the candidate here,\n+                    // since we do that in `consider_impl_candidate`.\n+                    return Some(Err(NoSolution));\n+                } else {\n+                    None\n+                }\n+            }\n+            ty::Error(_) => None,\n+        }\n+    }\n+\n     /// Convenience function for traits that are structural, i.e. that only\n     /// have nested subgoals that only change the self type. Unlike other\n     /// evaluate-like helpers, this does a probe, so it doesn't need to be"}, {"sha": "17e23f5bcd2faf50bf8cc2537f75ef04a3be675d", "filename": "tests/ui/generator/non-static-is-unpin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d7172b8e102f8da5654d10b681506e918e6e09/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d7172b8e102f8da5654d10b681506e918e6e09/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs?ref=69d7172b8e102f8da5654d10b681506e918e6e09", "patch": "@@ -1,3 +1,5 @@\n+// revisions: current next\n+//[next] compile-flags: -Ztrait-solver=next\n // run-pass\n \n #![feature(generators, generator_trait)]"}, {"sha": "ecd8ca60c6f2c4ee8148df9ccf321eef9ba762fd", "filename": "tests/ui/generator/static-not-unpin.current.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69d7172b8e102f8da5654d10b681506e918e6e09/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69d7172b8e102f8da5654d10b681506e918e6e09/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.current.stderr?ref=69d7172b8e102f8da5654d10b681506e918e6e09", "patch": "@@ -1,15 +1,15 @@\n-error[E0277]: `[static generator@$DIR/static-not-unpin.rs:11:25: 11:34]` cannot be unpinned\n-  --> $DIR/static-not-unpin.rs:14:18\n+error[E0277]: `[static generator@$DIR/static-not-unpin.rs:14:25: 14:34]` cannot be unpinned\n+  --> $DIR/static-not-unpin.rs:17:18\n    |\n LL |     assert_unpin(generator);\n-   |     ------------ ^^^^^^^^^ the trait `Unpin` is not implemented for `[static generator@$DIR/static-not-unpin.rs:11:25: 11:34]`\n+   |     ------------ ^^^^^^^^^ the trait `Unpin` is not implemented for `[static generator@$DIR/static-not-unpin.rs:14:25: 14:34]`\n    |     |\n    |     required by a bound introduced by this call\n    |\n    = note: consider using the `pin!` macro\n            consider using `Box::pin` if you need to access the pinned value outside of the current scope\n note: required by a bound in `assert_unpin`\n-  --> $DIR/static-not-unpin.rs:7:20\n+  --> $DIR/static-not-unpin.rs:10:20\n    |\n LL | fn assert_unpin<T: Unpin>(_: T) {\n    |                    ^^^^^ required by this bound in `assert_unpin`", "previous_filename": "tests/ui/generator/static-not-unpin.stderr"}, {"sha": "ecd8ca60c6f2c4ee8148df9ccf321eef9ba762fd", "filename": "tests/ui/generator/static-not-unpin.next.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/69d7172b8e102f8da5654d10b681506e918e6e09/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69d7172b8e102f8da5654d10b681506e918e6e09/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.next.stderr?ref=69d7172b8e102f8da5654d10b681506e918e6e09", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: `[static generator@$DIR/static-not-unpin.rs:14:25: 14:34]` cannot be unpinned\n+  --> $DIR/static-not-unpin.rs:17:18\n+   |\n+LL |     assert_unpin(generator);\n+   |     ------------ ^^^^^^^^^ the trait `Unpin` is not implemented for `[static generator@$DIR/static-not-unpin.rs:14:25: 14:34]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = note: consider using the `pin!` macro\n+           consider using `Box::pin` if you need to access the pinned value outside of the current scope\n+note: required by a bound in `assert_unpin`\n+  --> $DIR/static-not-unpin.rs:10:20\n+   |\n+LL | fn assert_unpin<T: Unpin>(_: T) {\n+   |                    ^^^^^ required by this bound in `assert_unpin`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "30d3f29187096bf2538f835e785f2ffb48dce36d", "filename": "tests/ui/generator/static-not-unpin.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69d7172b8e102f8da5654d10b681506e918e6e09/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d7172b8e102f8da5654d10b681506e918e6e09/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.rs?ref=69d7172b8e102f8da5654d10b681506e918e6e09", "patch": "@@ -1,3 +1,6 @@\n+// revisions: current next\n+//[next] compile-flags: -Ztrait-solver=next\n+\n #![feature(generators)]\n \n // normalize-stderr-test \"std::pin::Unpin\" -> \"std::marker::Unpin\""}]}