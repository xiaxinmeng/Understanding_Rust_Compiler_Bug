{"sha": "c233c2edfdc4639963dc2310783cd84bc4aefa7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMzNjMmVkZmRjNDYzOTk2M2RjMjMxMDc4M2NkODRiYzRhZWZhN2Q=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-27T21:27:03Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:01:57Z"}, "message": "libsyntax: De-`@mut` `TtReader::cur_tok`", "tree": {"sha": "0ceb753884ce9dc6b45b18fd1fb5affc55417826", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ceb753884ce9dc6b45b18fd1fb5affc55417826"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c233c2edfdc4639963dc2310783cd84bc4aefa7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c233c2edfdc4639963dc2310783cd84bc4aefa7d", "html_url": "https://github.com/rust-lang/rust/commit/c233c2edfdc4639963dc2310783cd84bc4aefa7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c233c2edfdc4639963dc2310783cd84bc4aefa7d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bac8b2e557109b24277d28a00aea5448fc6933f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bac8b2e557109b24277d28a00aea5448fc6933f6", "html_url": "https://github.com/rust-lang/rust/commit/bac8b2e557109b24277d28a00aea5448fc6933f6"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "ff06505034be70cb0dd24e97028a58efe7dfab98", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c233c2edfdc4639963dc2310783cd84bc4aefa7d/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c233c2edfdc4639963dc2310783cd84bc4aefa7d/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=c233c2edfdc4639963dc2310783cd84bc4aefa7d", "patch": "@@ -39,7 +39,7 @@ pub struct TtReader {\n     priv repeat_idx: RefCell<~[uint]>,\n     priv repeat_len: RefCell<~[uint]>,\n     /* cached: */\n-    cur_tok: Token,\n+    cur_tok: RefCell<Token>,\n     cur_span: Span\n }\n \n@@ -66,7 +66,7 @@ pub fn new_tt_reader(sp_diag: @mut SpanHandler,\n         repeat_idx: RefCell::new(~[]),\n         repeat_len: RefCell::new(~[]),\n         /* dummy values, never read: */\n-        cur_tok: EOF,\n+        cur_tok: RefCell::new(EOF),\n         cur_span: DUMMY_SP\n     };\n     tt_next_token(r); /* get cur_tok and cur_span set up */\n@@ -175,7 +175,7 @@ fn lockstep_iter_size(t: &token_tree, r: &mut TtReader) -> lis {\n pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n     // XXX(pcwalton): Bad copy?\n     let ret_val = TokenAndSpan {\n-        tok: r.cur_tok.clone(),\n+        tok: r.cur_tok.get(),\n         sp: r.cur_span,\n     };\n     loop {\n@@ -195,7 +195,7 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n \n             match r.stack.up {\n               None => {\n-                r.cur_tok = EOF;\n+                r.cur_tok.set(EOF);\n                 return ret_val;\n               }\n               Some(tt_f) => {\n@@ -221,7 +221,7 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n             }\n             match r.stack.sep.clone() {\n               Some(tk) => {\n-                r.cur_tok = tk; /* repeat same span, I guess */\n+                r.cur_tok.set(tk); /* repeat same span, I guess */\n                 return ret_val;\n               }\n               None => ()\n@@ -244,7 +244,7 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n           }\n           tt_tok(sp, tok) => {\n             r.cur_span = sp;\n-            r.cur_tok = tok;\n+            r.cur_tok.set(tok);\n             r.stack.idx += 1u;\n             return ret_val;\n           }\n@@ -299,14 +299,15 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n               (a) idents can be in lots of places, so it'd be a pain\n               (b) we actually can, since it's a token. */\n               matched_nonterminal(nt_ident(~sn,b)) => {\n-                r.cur_span = sp; r.cur_tok = IDENT(sn,b);\n+                r.cur_span = sp;\n+                r.cur_tok.set(IDENT(sn,b));\n                 r.stack.idx += 1u;\n                 return ret_val;\n               }\n               matched_nonterminal(ref other_whole_nt) => {\n                 // XXX(pcwalton): Bad copy.\n                 r.cur_span = sp;\n-                r.cur_tok = INTERPOLATED((*other_whole_nt).clone());\n+                r.cur_tok.set(INTERPOLATED((*other_whole_nt).clone()));\n                 r.stack.idx += 1u;\n                 return ret_val;\n               }"}, {"sha": "fa82e8c67f29f7e7b031d8996282291c376b185e", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c233c2edfdc4639963dc2310783cd84bc4aefa7d/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c233c2edfdc4639963dc2310783cd84bc4aefa7d/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=c233c2edfdc4639963dc2310783cd84bc4aefa7d", "patch": "@@ -133,7 +133,10 @@ impl reader for StringReader {\n }\n \n impl reader for TtReader {\n-    fn is_eof(@mut self) -> bool { self.cur_tok == token::EOF }\n+    fn is_eof(@mut self) -> bool {\n+        let cur_tok = self.cur_tok.borrow();\n+        *cur_tok.get() == token::EOF\n+    }\n     fn next_token(@mut self) -> TokenAndSpan {\n         let r = tt_next_token(self);\n         debug!(\"TtReader: r={:?}\", r);\n@@ -145,7 +148,7 @@ impl reader for TtReader {\n     fn span_diag(@mut self) -> @mut SpanHandler { self.sp_diag }\n     fn peek(@mut self) -> TokenAndSpan {\n         TokenAndSpan {\n-            tok: self.cur_tok.clone(),\n+            tok: self.cur_tok.get(),\n             sp: self.cur_span,\n         }\n     }"}]}