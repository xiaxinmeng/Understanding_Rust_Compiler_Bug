{"sha": "1120c5e01df508de64fe6642f22fadeb574afd6d", "node_id": "C_kwDOAAsO6NoAKDExMjBjNWUwMWRmNTA4ZGU2NGZlNjY0MmYyMmZhZGViNTc0YWZkNmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-08T19:01:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-08T19:01:39Z"}, "message": "Auto merge of #101437 - compiler-errors:erase-normalize-ordering, r=tmandry\n\nNormalize before erasing late-bound regions in `equal_up_to_regions`\n\nNormalize erasing regions **first**, before passing the type through a `BottomUpFolder` which erases late-bound regions too.\n\nThe root cause of this issue is due to 96d4137deed6c52c6db2dd19568c37d1c160f1e7, which removes a `normalize_erasing_regions` that happens before this call to `equal_up_to_regions`. While reverting that commit might be a fix, I think it was suspicious to be erasing late-bound regions first _then_ normalizing types in the first place in `equal_up_to_regions`.\n\n-----\n\nI am tempted to ask the reviewer to review and `r+` this without a UI test, since the existing issues that I think this fixes are all incredibly difficult to minimize (anything hyper/warp related, given the nature of those libraries :sweat:) or impossible to reproduce locally (the miri test), namely:\n* This recently reported issue with tokio + warp: #101430\n* This issue from `@RalfJung` about Miri being broken: #101344\n* This additional issue reported in a comment by `@tmandry` (issue with fuchsia + hyper): https://github.com/rust-lang/rust/issues/101344#issuecomment-1235974564\n\nI have locally verified that the repro in #101430 is fixed with this PR, but after a couple of hours of attempting to minimize this error and either failing to actually repro the ICE, or being overwhelmed with the number of traits and functions I need to inline into a UI test, I have basically given up. Thoughts are appreciated on how best to handle this.\n\nr? `@oli-obk` who is at the intersection of MIR and types-related stuff who may be able to give advice :sweat_smile:", "tree": {"sha": "78f3a29b504586b16e14494ce72239c39b69a4fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78f3a29b504586b16e14494ce72239c39b69a4fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1120c5e01df508de64fe6642f22fadeb574afd6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1120c5e01df508de64fe6642f22fadeb574afd6d", "html_url": "https://github.com/rust-lang/rust/commit/1120c5e01df508de64fe6642f22fadeb574afd6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1120c5e01df508de64fe6642f22fadeb574afd6d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87788097b776f8e3662f76627944230684b671bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/87788097b776f8e3662f76627944230684b671bd", "html_url": "https://github.com/rust-lang/rust/commit/87788097b776f8e3662f76627944230684b671bd"}, {"sha": "76b494a9dd7ba5a151882afc7c85a75c5aeb94db", "url": "https://api.github.com/repos/rust-lang/rust/commits/76b494a9dd7ba5a151882afc7c85a75c5aeb94db", "html_url": "https://github.com/rust-lang/rust/commit/76b494a9dd7ba5a151882afc7c85a75c5aeb94db"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "8576e0f0f7c16ad856d9f41ef09b6eefb7423944", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1120c5e01df508de64fe6642f22fadeb574afd6d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1120c5e01df508de64fe6642f22fadeb574afd6d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=1120c5e01df508de64fe6642f22fadeb574afd6d", "patch": "@@ -90,20 +90,21 @@ pub fn equal_up_to_regions<'tcx>(\n \n     // Normalize lifetimes away on both sides, then compare.\n     let normalize = |ty: Ty<'tcx>| {\n-        let ty = ty.fold_with(&mut BottomUpFolder {\n-            tcx,\n-            // FIXME: We erase all late-bound lifetimes, but this is not fully correct.\n-            // If you have a type like `<for<'a> fn(&'a u32) as SomeTrait>::Assoc`,\n-            // this is not necessarily equivalent to `<fn(&'static u32) as SomeTrait>::Assoc`,\n-            // since one may have an `impl SomeTrait for fn(&32)` and\n-            // `impl SomeTrait for fn(&'static u32)` at the same time which\n-            // specify distinct values for Assoc. (See also #56105)\n-            lt_op: |_| tcx.lifetimes.re_erased,\n-            // Leave consts and types unchanged.\n-            ct_op: |ct| ct,\n-            ty_op: |ty| ty,\n-        });\n-        tcx.try_normalize_erasing_regions(param_env, ty).unwrap_or(ty)\n+        tcx.try_normalize_erasing_regions(param_env, ty).unwrap_or(ty).fold_with(\n+            &mut BottomUpFolder {\n+                tcx,\n+                // FIXME: We erase all late-bound lifetimes, but this is not fully correct.\n+                // If you have a type like `<for<'a> fn(&'a u32) as SomeTrait>::Assoc`,\n+                // this is not necessarily equivalent to `<fn(&'static u32) as SomeTrait>::Assoc`,\n+                // since one may have an `impl SomeTrait for fn(&32)` and\n+                // `impl SomeTrait for fn(&'static u32)` at the same time which\n+                // specify distinct values for Assoc. (See also #56105)\n+                lt_op: |_| tcx.lifetimes.re_erased,\n+                // Leave consts and types unchanged.\n+                ct_op: |ct| ct,\n+                ty_op: |ty| ty,\n+            },\n+        )\n     };\n     tcx.infer_ctxt().enter(|infcx| infcx.can_eq(param_env, normalize(src), normalize(dest)).is_ok())\n }"}]}