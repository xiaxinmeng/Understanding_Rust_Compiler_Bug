{"sha": "b03ed42c365b3412fe5a181cbdba79ed7b936bbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwM2VkNDJjMzY1YjM0MTJmZTVhMTgxY2JkYmE3OWVkN2I5MzZiYmU=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-06-01T04:09:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-01T04:09:22Z"}, "message": "Rollup merge of #42297 - tschottdorf:proj-ty, r=nikomatsakis\n\nUpgrade ProjectionTy's Name to a DefId\n\nPart of #42171, in preparation for downgrading the contained `TraitRef` to\nonly its `substs`.\n\nSome inline questions in the diff. Look for `FIXME(tschottdorf)`. These comments\nshould be addressed before merging.", "tree": {"sha": "b581c0ad5f669c5430120a886c743ec3b102549d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b581c0ad5f669c5430120a886c743ec3b102549d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b03ed42c365b3412fe5a181cbdba79ed7b936bbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b03ed42c365b3412fe5a181cbdba79ed7b936bbe", "html_url": "https://github.com/rust-lang/rust/commit/b03ed42c365b3412fe5a181cbdba79ed7b936bbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae75dbfc230ec8c7b835e799a7bd611450906f9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae75dbfc230ec8c7b835e799a7bd611450906f9a", "html_url": "https://github.com/rust-lang/rust/commit/ae75dbfc230ec8c7b835e799a7bd611450906f9a"}, {"sha": "e5e664fb07fcfa29f131243e5b8830834133280e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e664fb07fcfa29f131243e5b8830834133280e", "html_url": "https://github.com/rust-lang/rust/commit/e5e664fb07fcfa29f131243e5b8830834133280e"}], "stats": {"total": 150, "additions": 91, "deletions": 59}, "files": [{"sha": "b43c516f317f2e746889631ceae4516bd4eb5760", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=b03ed42c365b3412fe5a181cbdba79ed7b936bbe", "patch": "@@ -181,7 +181,7 @@ impl<'a, 'tcx, A, B> HashStable<StableHashingContext<'a, 'tcx>> for ty::Outlives\n }\n \n impl_stable_hash_for!(struct ty::ProjectionPredicate<'tcx> { projection_ty, ty });\n-impl_stable_hash_for!(struct ty::ProjectionTy<'tcx> { trait_ref, item_name });\n+impl_stable_hash_for!(struct ty::ProjectionTy<'tcx> { trait_ref, item_def_id });\n \n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for ty::Predicate<'tcx> {"}, {"sha": "acc1a397b456041a6523ad5360f9b64b16f3a8ef", "filename": "src/librustc/infer/region_inference/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs?ref=b03ed42c365b3412fe5a181cbdba79ed7b936bbe", "patch": "@@ -1542,7 +1542,8 @@ impl<'a, 'gcx, 'tcx> GenericKind<'tcx> {\n     pub fn to_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {\n         match *self {\n             GenericKind::Param(ref p) => p.to_ty(tcx),\n-            GenericKind::Projection(ref p) => tcx.mk_projection(p.trait_ref.clone(), p.item_name),\n+            GenericKind::Projection(ref p) => tcx.mk_projection(\n+                p.trait_ref.clone(), p.item_name(tcx)),\n         }\n     }\n }"}, {"sha": "f5672ffbdc53498dc5eec9c959db753569d254ce", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=b03ed42c365b3412fe5a181cbdba79ed7b936bbe", "patch": "@@ -355,7 +355,7 @@ pub fn normalize_projection_type<'a, 'b, 'gcx, 'tcx>(\n \n             let tcx = selcx.infcx().tcx;\n             let def_id = tcx.associated_items(projection_ty.trait_ref.def_id).find(|i|\n-                i.name == projection_ty.item_name && i.kind == ty::AssociatedKind::Type\n+                i.name == projection_ty.item_name(tcx) && i.kind == ty::AssociatedKind::Type\n             ).map(|i| i.def_id).unwrap();\n             let ty_var = selcx.infcx().next_ty_var(\n                 TypeVariableOrigin::NormalizeProjectionType(tcx.def_span(def_id)));\n@@ -436,7 +436,7 @@ fn opt_normalize_projection_type<'a, 'b, 'gcx, 'tcx>(\n             //\n             // ```\n             // let ty = selcx.tcx().mk_projection(projection_ty.trait_ref,\n-            //                                    projection_ty.item_name);\n+            //                                    projection_ty.item_name(tcx);\n             // return Some(NormalizedTy { value: v, obligations: vec![] });\n             // ```\n \n@@ -574,7 +574,7 @@ fn normalize_to_error<'a, 'gcx, 'tcx>(selcx: &mut SelectionContext<'a, 'gcx, 'tc\n                                         predicate: trait_ref.to_predicate() };\n     let tcx = selcx.infcx().tcx;\n     let def_id = tcx.associated_items(projection_ty.trait_ref.def_id).find(|i|\n-        i.name == projection_ty.item_name && i.kind == ty::AssociatedKind::Type\n+        i.name == projection_ty.item_name(tcx) && i.kind == ty::AssociatedKind::Type\n     ).map(|i| i.def_id).unwrap();\n     let new_value = selcx.infcx().next_ty_var(\n         TypeVariableOrigin::NormalizeProjectionType(tcx.def_span(def_id)));\n@@ -729,7 +729,7 @@ fn project_type<'cx, 'gcx, 'tcx>(\n             Ok(ProjectedTy::NoProgress(\n                 selcx.tcx().mk_projection(\n                     obligation.predicate.trait_ref.clone(),\n-                    obligation.predicate.item_name)))\n+                    obligation.predicate.item_name(selcx.tcx()))))\n         }\n     }\n }\n@@ -815,7 +815,8 @@ fn assemble_candidates_from_predicates<'cx, 'gcx, 'tcx, I>(\n                predicate);\n         match predicate {\n             ty::Predicate::Projection(ref data) => {\n-                let same_name = data.item_name() == obligation.predicate.item_name;\n+                let tcx = selcx.tcx();\n+                let same_name = data.item_name(tcx) == obligation.predicate.item_name(tcx);\n \n                 let is_match = same_name && infcx.probe(|_| {\n                     let data_poly_trait_ref =\n@@ -902,7 +903,7 @@ fn assemble_candidates_from_impls<'cx, 'gcx, 'tcx>(\n                 // type.\n                 let node_item = assoc_ty_def(selcx,\n                                              impl_data.impl_def_id,\n-                                             obligation.predicate.item_name);\n+                                             obligation.predicate.item_name(selcx.tcx()));\n \n                 let is_default = if node_item.node.is_from_trait() {\n                     // If true, the impl inherited a `type Foo = Bar`\n@@ -1075,9 +1076,10 @@ fn confirm_object_candidate<'cx, 'gcx, 'tcx>(\n \n         // select only those projections that are actually projecting an\n         // item with the correct name\n+        let tcx = selcx.tcx();\n         let env_predicates = env_predicates.filter_map(|p| match p {\n             ty::Predicate::Projection(data) =>\n-                if data.item_name() == obligation.predicate.item_name {\n+                if data.item_name(tcx) == obligation.predicate.item_name(tcx) {\n                     Some(data)\n                 } else {\n                     None\n@@ -1180,10 +1182,11 @@ fn confirm_callable_candidate<'cx, 'gcx, 'tcx>(\n                                               flag);\n \n     let predicate = ty::Binder(ty::ProjectionPredicate { // (1) recreate binder here\n-        projection_ty: ty::ProjectionTy {\n-            trait_ref: trait_ref,\n-            item_name: Symbol::intern(FN_OUTPUT_NAME),\n-        },\n+        projection_ty: ty::ProjectionTy::from_ref_and_name(\n+            tcx,\n+            trait_ref,\n+            Symbol::intern(FN_OUTPUT_NAME),\n+        ),\n         ty: ret_type\n     });\n \n@@ -1228,7 +1231,7 @@ fn confirm_impl_candidate<'cx, 'gcx, 'tcx>(\n     let VtableImplData { substs, nested, impl_def_id } = impl_vtable;\n \n     let tcx = selcx.tcx();\n-    let assoc_ty = assoc_ty_def(selcx, impl_def_id, obligation.predicate.item_name);\n+    let assoc_ty = assoc_ty_def(selcx, impl_def_id, obligation.predicate.item_name(tcx));\n \n     let ty = if !assoc_ty.item.defaultness.has_value() {\n         // This means that the impl is missing a definition for the"}, {"sha": "8c801c6fa2b977b31f17f2357f66be8418914141", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=b03ed42c365b3412fe5a181cbdba79ed7b936bbe", "patch": "@@ -1323,7 +1323,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                          item_name: Name)\n         -> Ty<'tcx> {\n             // take a copy of substs so that we own the vectors inside\n-            let inner = ProjectionTy { trait_ref: trait_ref, item_name: item_name };\n+            let inner = ProjectionTy::from_ref_and_name(self, trait_ref, item_name);\n             self.mk_ty(TyProjection(inner))\n         }\n "}, {"sha": "22fcc61953b2b4a838e66c0bec702ef743a7b3f2", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=b03ed42c365b3412fe5a181cbdba79ed7b936bbe", "patch": "@@ -1051,8 +1051,8 @@ pub struct ProjectionPredicate<'tcx> {\n pub type PolyProjectionPredicate<'tcx> = Binder<ProjectionPredicate<'tcx>>;\n \n impl<'tcx> PolyProjectionPredicate<'tcx> {\n-    pub fn item_name(&self) -> Name {\n-        self.0.projection_ty.item_name // safe to skip the binder to access a name\n+    pub fn item_name(&self, tcx: TyCtxt) -> Name {\n+        self.0.projection_ty.item_name(tcx) // safe to skip the binder to access a name\n     }\n }\n "}, {"sha": "d4f06a902eeaa46221b45ead63abfcb74ea69cb0", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=b03ed42c365b3412fe5a181cbdba79ed7b936bbe", "patch": "@@ -225,12 +225,13 @@ impl<'tcx> Relate<'tcx> for ty::ProjectionTy<'tcx> {\n                            -> RelateResult<'tcx, ty::ProjectionTy<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'a+'tcx, 'tcx: 'a\n     {\n-        if a.item_name != b.item_name {\n+        let tcx = relation.tcx();\n+        if a.item_name(tcx) != b.item_name(tcx) {\n             Err(TypeError::ProjectionNameMismatched(\n-                expected_found(relation, &a.item_name, &b.item_name)))\n+                expected_found(relation, &a.item_name(tcx), &b.item_name(tcx))))\n         } else {\n             let trait_ref = relation.relate(&a.trait_ref, &b.trait_ref)?;\n-            Ok(ty::ProjectionTy { trait_ref: trait_ref, item_name: a.item_name })\n+            Ok(ty::ProjectionTy::from_ref_and_name(tcx, trait_ref, a.item_name(tcx)))\n         }\n     }\n }\n@@ -457,7 +458,7 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n         (&ty::TyProjection(ref a_data), &ty::TyProjection(ref b_data)) =>\n         {\n             let projection_ty = relation.relate(a_data, b_data)?;\n-            Ok(tcx.mk_projection(projection_ty.trait_ref, projection_ty.item_name))\n+            Ok(tcx.mk_projection(projection_ty.trait_ref, projection_ty.item_name(tcx)))\n         }\n \n         (&ty::TyAnon(a_def_id, a_substs), &ty::TyAnon(b_def_id, b_substs))"}, {"sha": "c3ca679153759c2a23f4d63b267c8f94e9ee2bd0", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=b03ed42c365b3412fe5a181cbdba79ed7b936bbe", "patch": "@@ -135,10 +135,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ProjectionTy<'a> {\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>)\n                              -> Option<ty::ProjectionTy<'tcx>> {\n         tcx.lift(&self.trait_ref).map(|trait_ref| {\n-            ty::ProjectionTy {\n-                trait_ref: trait_ref,\n-                item_name: self.item_name\n-            }\n+            ty::ProjectionTy::from_ref_and_name(tcx, trait_ref, self.item_name(tcx))\n         })\n     }\n }\n@@ -771,7 +768,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ProjectionTy<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         ty::ProjectionTy {\n             trait_ref: self.trait_ref.fold_with(folder),\n-            item_name: self.item_name,\n+            item_def_id: self.item_def_id,\n         }\n     }\n "}, {"sha": "bbb399434d6ae219c5aa25e068c6e52015110752", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=b03ed42c365b3412fe5a181cbdba79ed7b936bbe", "patch": "@@ -556,9 +556,34 @@ pub struct ProjectionTy<'tcx> {\n     /// The trait reference `T as Trait<..>`.\n     pub trait_ref: ty::TraitRef<'tcx>,\n \n-    /// The name `N` of the associated type.\n-    pub item_name: Name,\n+    /// The DefId of the TraitItem for the associated type N.\n+    ///\n+    /// Note that this is not the DefId of the TraitRef containing this\n+    /// associated type, which is in tcx.associated_item(item_def_id).container.\n+    pub item_def_id: DefId,\n }\n+\n+impl<'a, 'tcx> ProjectionTy<'tcx> {\n+    /// Construct a ProjectionTy by searching the trait from trait_ref for the\n+    /// associated item named item_name.\n+    pub fn from_ref_and_name(\n+        tcx: TyCtxt, trait_ref: ty::TraitRef<'tcx>, item_name: Name\n+    ) -> ProjectionTy<'tcx> {\n+        let item_def_id = tcx.associated_items(trait_ref.def_id).find(\n+            |item| item.name == item_name).unwrap().def_id;\n+\n+        ProjectionTy {\n+            trait_ref: trait_ref,\n+            item_def_id: item_def_id,\n+        }\n+    }\n+\n+    pub fn item_name(self, tcx: TyCtxt) -> Name {\n+        tcx.associated_item(self.item_def_id).name\n+    }\n+}\n+\n+\n /// Signature of a function type, which I have arbitrarily\n /// decided to use to refer to the input/output types.\n ///\n@@ -871,10 +896,10 @@ impl<'a, 'tcx, 'gcx> ExistentialProjection<'tcx> {\n         assert!(!self_ty.has_escaping_regions());\n \n         ty::ProjectionPredicate {\n-            projection_ty: ty::ProjectionTy {\n-                trait_ref: self.trait_ref.with_self_ty(tcx, self_ty),\n-                item_name: self.item_name,\n-            },\n+            projection_ty: ty::ProjectionTy::from_ref_and_name(\n+                tcx,\n+                self.trait_ref.with_self_ty(tcx, self_ty),\n+                self.item_name),\n             ty: self.ty,\n         }\n     }"}, {"sha": "ce0f1ed5bb86c884c6dc33cc9efc768eb7bc9ae1", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=b03ed42c365b3412fe5a181cbdba79ed7b936bbe", "patch": "@@ -691,8 +691,7 @@ impl<'a, 'gcx, 'tcx, W> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx, W>\n                 self.hash(p.name.as_str());\n             }\n             TyProjection(ref data) => {\n-                self.def_id(data.trait_ref.def_id);\n-                self.hash(data.item_name.as_str());\n+                self.def_id(data.item_def_id);\n             }\n             TyNever |\n             TyBool |"}, {"sha": "5a1b7393db312562395f68c1ae1d793950c8b4af", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=b03ed42c365b3412fe5a181cbdba79ed7b936bbe", "patch": "@@ -216,9 +216,11 @@ pub fn parameterized(f: &mut fmt::Formatter,\n \n     for projection in projections {\n         start_or_continue(f, \"<\", \", \")?;\n-        write!(f, \"{}={}\",\n-               projection.projection_ty.item_name,\n-               projection.ty)?;\n+        ty::tls::with(|tcx|\n+            write!(f, \"{}={}\",\n+            projection.projection_ty.item_name(tcx),\n+            projection.ty)\n+        )?;\n     }\n \n     start_or_continue(f, \"\", \">\")?;\n@@ -929,9 +931,10 @@ impl<'tcx> fmt::Display for ty::ProjectionPredicate<'tcx> {\n \n impl<'tcx> fmt::Display for ty::ProjectionTy<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let item_name = ty::tls::with(|tcx| self.item_name(tcx));\n         write!(f, \"{:?}::{}\",\n                self.trait_ref,\n-               self.item_name)\n+               item_name)\n     }\n }\n "}, {"sha": "fa74e4d6ffcccfae3d5539c3363a37b4d2e82d77", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=b03ed42c365b3412fe5a181cbdba79ed7b936bbe", "patch": "@@ -618,7 +618,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                             if let ty::TyProjection(proj) = ty.sty {\n                                 for item in self.tcx.associated_items(proj.trait_ref.def_id) {\n                                     if item.kind == ty::AssociatedKind::Type {\n-                                        if item.name == proj.item_name {\n+                                        if item.name == proj.item_name(self.tcx) {\n                                             return Def::AssociatedTy(item.def_id);\n                                         }\n                                     }"}, {"sha": "212461a6d70e20145ecf7a8b91802d907465399d", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=b03ed42c365b3412fe5a181cbdba79ed7b936bbe", "patch": "@@ -553,10 +553,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         if self.trait_defines_associated_type_named(trait_ref.def_id(), binding.item_name) {\n             return Ok(trait_ref.map_bound(|trait_ref| {\n                 ty::ProjectionPredicate {\n-                    projection_ty: ty::ProjectionTy {\n-                        trait_ref: trait_ref,\n-                        item_name: binding.item_name,\n-                    },\n+                    projection_ty: ty::ProjectionTy::from_ref_and_name(\n+                        tcx,\n+                        trait_ref,\n+                        binding.item_name,\n+                    ),\n                     ty: binding.ty,\n                 }\n             }));\n@@ -575,10 +576,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         Ok(candidate.map_bound(|trait_ref| {\n             ty::ProjectionPredicate {\n-                projection_ty: ty::ProjectionTy {\n-                    trait_ref: trait_ref,\n-                    item_name: binding.item_name,\n-                },\n+                projection_ty: ty::ProjectionTy::from_ref_and_name(\n+                    tcx,\n+                    trait_ref,\n+                    binding.item_name,\n+                ),\n                 ty: binding.ty,\n             }\n         }))\n@@ -652,7 +654,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 let p = b.projection_ty;\n                 ty::ExistentialProjection {\n                     trait_ref: self.trait_ref_to_existential(p.trait_ref),\n-                    item_name: p.item_name,\n+                    item_name: p.item_name(tcx),\n                     ty: b.ty\n                 }\n             })\n@@ -679,7 +681,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         for projection_bound in &projection_bounds {\n             let pair = (projection_bound.0.projection_ty.trait_ref.def_id,\n-                        projection_bound.0.projection_ty.item_name);\n+                        projection_bound.0.projection_ty.item_name(tcx));\n             associated_types.remove(&pair);\n         }\n "}, {"sha": "7d3a63263edbf9aad7d6f652a47b246fd4330b7d", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=b03ed42c365b3412fe5a181cbdba79ed7b936bbe", "patch": "@@ -124,10 +124,11 @@ impl<'a, 'gcx, 'tcx> Autoderef<'a, 'gcx, 'tcx> {\n         }\n \n         let normalized = traits::normalize_projection_type(&mut selcx,\n-                                                           ty::ProjectionTy {\n-                                                               trait_ref: trait_ref,\n-                                                               item_name: Symbol::intern(\"Target\"),\n-                                                           },\n+                                                           ty::ProjectionTy::from_ref_and_name(\n+                                                               tcx,\n+                                                               trait_ref,\n+                                                               Symbol::intern(\"Target\"),\n+                                                           ),\n                                                            cause,\n                                                            0);\n "}, {"sha": "fd26ff65661ca366c51a9ff77c4bb7db61c21c9f", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=b03ed42c365b3412fe5a181cbdba79ed7b936bbe", "patch": "@@ -1651,8 +1651,8 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                declared_bounds, projection_ty);\n \n         // see the extensive comment in projection_must_outlive\n-\n-        let ty = self.tcx.mk_projection(projection_ty.trait_ref, projection_ty.item_name);\n+        let item_name = projection_ty.item_name(self.tcx);\n+        let ty = self.tcx.mk_projection(projection_ty.trait_ref, item_name);\n         let recursive_bound = self.recursive_type_bound(span, ty);\n \n         VerifyBound::AnyRegion(declared_bounds).or(recursive_bound)\n@@ -1718,9 +1718,9 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n     {\n         debug!(\"projection_bounds(projection_ty={:?})\",\n                projection_ty);\n-\n+        let item_name = projection_ty.item_name(self.tcx);\n         let ty = self.tcx.mk_projection(projection_ty.trait_ref.clone(),\n-                                        projection_ty.item_name);\n+                                        item_name);\n \n         // Say we have a projection `<T as SomeTrait<'a>>::SomeType`. We are interested\n         // in looking for a trait definition like:\n@@ -1758,7 +1758,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                     let (outlives, _) =\n                         self.replace_late_bound_regions_with_fresh_var(\n                             span,\n-                            infer::AssocTypeProjection(projection_ty.item_name),\n+                            infer::AssocTypeProjection(projection_ty.item_name(self.tcx)),\n                             &outlives);\n \n                     debug!(\"projection_bounds: outlives={:?} (3)\","}, {"sha": "9464ac83870d92ba946be207c0970467281ebc7d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03ed42c365b3412fe5a181cbdba79ed7b936bbe/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b03ed42c365b3412fe5a181cbdba79ed7b936bbe", "patch": "@@ -955,7 +955,7 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n             }\n         };\n         Type::QPath {\n-            name: self.item_name.clean(cx),\n+            name: self.item_name(cx.tcx).clean(cx),\n             self_type: box self.trait_ref.self_ty().clean(cx),\n             trait_: box trait_\n         }"}]}