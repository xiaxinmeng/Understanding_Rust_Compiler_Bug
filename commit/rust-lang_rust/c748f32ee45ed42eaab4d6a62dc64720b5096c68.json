{"sha": "c748f32ee45ed42eaab4d6a62dc64720b5096c68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NDhmMzJlZTQ1ZWQ0MmVhYWI0ZDZhNjJkYzY0NzIwYjUwOTZjNjg=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-12-13T05:11:15Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-01-29T20:37:44Z"}, "message": "Fix incorrect use mut diagnostics", "tree": {"sha": "3b313ccc06b55ec07a05fe276429c1009b59d3ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b313ccc06b55ec07a05fe276429c1009b59d3ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c748f32ee45ed42eaab4d6a62dc64720b5096c68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c748f32ee45ed42eaab4d6a62dc64720b5096c68", "html_url": "https://github.com/rust-lang/rust/commit/c748f32ee45ed42eaab4d6a62dc64720b5096c68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c748f32ee45ed42eaab4d6a62dc64720b5096c68/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "604cbdcfddb959cd1d7de2f9afa14a199561a428", "url": "https://api.github.com/repos/rust-lang/rust/commits/604cbdcfddb959cd1d7de2f9afa14a199561a428", "html_url": "https://github.com/rust-lang/rust/commit/604cbdcfddb959cd1d7de2f9afa14a199561a428"}], "stats": {"total": 201, "additions": 129, "deletions": 72}, "files": [{"sha": "7681041863e9ad1fc75fc3103dbdfc1bc0d498ff", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c748f32ee45ed42eaab4d6a62dc64720b5096c68/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748f32ee45ed42eaab4d6a62dc64720b5096c68/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=c748f32ee45ed42eaab4d6a62dc64720b5096c68", "patch": "@@ -674,6 +674,15 @@ pub struct CapturedPlace<'tcx> {\n     pub mutability: hir::Mutability,\n }\n \n+impl CapturedPlace<'tcx> {\n+    pub fn get_root_variable(&self) -> hir::HirId {\n+        match self.place.base {\n+            HirPlaceBase::Upvar(upvar_id) => upvar_id.var_path.hir_id,\n+            base => bug!(\"Expected upvar, found={:?}\", base),\n+        }\n+    }\n+}\n+\n pub fn place_to_string_for_capture(tcx: TyCtxt<'tcx>, place: &HirPlace<'tcx>) -> String {\n     let name = match place.base {\n         HirPlaceBase::Upvar(upvar_id) => tcx.hir().name(upvar_id.var_path.hir_id).to_string(),"}, {"sha": "fb7694b7d88e969ce71641a8ae982d71cd1e9dc5", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c748f32ee45ed42eaab4d6a62dc64720b5096c68/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748f32ee45ed42eaab4d6a62dc64720b5096c68/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=c748f32ee45ed42eaab4d6a62dc64720b5096c68", "patch": "@@ -345,7 +345,9 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 };\n \n                 let upvar = &self.upvars[upvar_field.unwrap().index()];\n-                let upvar_hir_id = upvar.var_hir_id;\n+                // FIXME(project-rfc-2229#8): Improve borrow-check diagnostics in case of precise\n+                //                            capture.\n+                let upvar_hir_id = upvar.place.get_root_variable();\n                 let upvar_name = upvar.name;\n                 let upvar_span = self.infcx.tcx.hir().span(upvar_hir_id);\n "}, {"sha": "74abe2d35ee748814c01f83ead67999cc05d9ab6", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c748f32ee45ed42eaab4d6a62dc64720b5096c68/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748f32ee45ed42eaab4d6a62dc64720b5096c68/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=c748f32ee45ed42eaab4d6a62dc64720b5096c68", "patch": "@@ -64,12 +64,29 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     Place::ty_from(local, proj_base, self.body, self.infcx.tcx).ty\n                 ));\n \n-                item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n-                if self.is_upvar_field_projection(access_place.as_ref()).is_some() {\n-                    reason = \", as it is not declared as mutable\".to_string();\n+                let imm_borrow_derefed = self.upvars[upvar_index.index()]\n+                    .place\n+                    .place\n+                    .deref_tys()\n+                    .any(|ty| matches!(ty.kind(), ty::Ref(.., hir::Mutability::Not)));\n+\n+                // If the place is immutable then:\n+                //\n+                // - Either we deref a immutable ref to get to our final place.\n+                //    - We don't capture derefs of raw ptrs\n+                // - Or the final place is immut because the root variable of the capture\n+                //   isn't marked mut and we should suggest that to the user.\n+                if imm_borrow_derefed {\n+                    // If we deref an immutable ref then the suggestion here doesn't help.\n+                    return;\n                 } else {\n-                    let name = self.upvars[upvar_index.index()].name;\n-                    reason = format!(\", as `{}` is not declared as mutable\", name);\n+                    item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n+                    if self.is_upvar_field_projection(access_place.as_ref()).is_some() {\n+                        reason = \", as it is not declared as mutable\".to_string();\n+                    } else {\n+                        let name = self.upvars[upvar_index.index()].name;\n+                        reason = format!(\", as `{}` is not declared as mutable\", name);\n+                    }\n                 }\n             }\n \n@@ -259,9 +276,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     Place::ty_from(local, proj_base, self.body, self.infcx.tcx).ty\n                 ));\n \n+                let captured_place = &self.upvars[upvar_index.index()].place;\n+\n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n \n-                let upvar_hir_id = self.upvars[upvar_index.index()].var_hir_id;\n+                let upvar_hir_id = captured_place.get_root_variable();\n+\n                 if let Some(Node::Binding(pat)) = self.infcx.tcx.hir().find(upvar_hir_id) {\n                     if let hir::PatKind::Binding(\n                         hir::BindingAnnotation::Unannotated,"}, {"sha": "4abc623fc5f371f15a768b3958681a0861d379eb", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/var_name.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c748f32ee45ed42eaab4d6a62dc64720b5096c68/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748f32ee45ed42eaab4d6a62dc64720b5096c68/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fvar_name.rs?ref=c748f32ee45ed42eaab4d6a62dc64720b5096c68", "patch": "@@ -12,7 +12,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         body: &Body<'tcx>,\n         local_names: &IndexVec<Local, Option<Symbol>>,\n-        upvars: &[Upvar],\n+        upvars: &[Upvar<'tcx>],\n         fr: RegionVid,\n     ) -> Option<(Option<Symbol>, Span)> {\n         debug!(\"get_var_name_and_span_for_region(fr={:?})\", fr);\n@@ -21,6 +21,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         debug!(\"get_var_name_and_span_for_region: attempting upvar\");\n         self.get_upvar_index_for_region(tcx, fr)\n             .map(|index| {\n+                // FIXME(project-rfc-2229#8): Use place span for diagnostics\n                 let (name, span) = self.get_upvar_name_and_span_for_region(tcx, upvars, index);\n                 (Some(name), span)\n             })\n@@ -59,10 +60,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     crate fn get_upvar_name_and_span_for_region(\n         &self,\n         tcx: TyCtxt<'tcx>,\n-        upvars: &[Upvar],\n+        upvars: &[Upvar<'tcx>],\n         upvar_index: usize,\n     ) -> (Symbol, Span) {\n-        let upvar_hir_id = upvars[upvar_index].var_hir_id;\n+        let upvar_hir_id = upvars[upvar_index].place.get_root_variable();\n         debug!(\"get_upvar_name_and_span_for_region: upvar_hir_id={:?}\", upvar_hir_id);\n \n         let upvar_name = tcx.hir().name(upvar_hir_id);"}, {"sha": "b51cba15d32a706ce0a36d750b3dfc6b23b02fb5", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c748f32ee45ed42eaab4d6a62dc64720b5096c68/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748f32ee45ed42eaab4d6a62dc64720b5096c68/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=c748f32ee45ed42eaab4d6a62dc64720b5096c68", "patch": "@@ -5,11 +5,10 @@ use rustc_data_structures::graph::dominators::Dominators;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_hir::{HirId, Node};\n+use rustc_hir::Node;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n-use rustc_middle::hir::place::PlaceBase as HirPlaceBase;\n use rustc_middle::mir::{\n     traversal, Body, ClearCrossCrate, Local, Location, Mutability, Operand, Place, PlaceElem,\n     PlaceRef, VarDebugInfoContents,\n@@ -18,7 +17,7 @@ use rustc_middle::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind\n use rustc_middle::mir::{Field, ProjectionElem, Promoted, Rvalue, Statement, StatementKind};\n use rustc_middle::mir::{InlineAsmOperand, Terminator, TerminatorKind};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, ParamEnv, RegionVid, TyCtxt};\n+use rustc_middle::ty::{self, CapturedPlace, ParamEnv, RegionVid, TyCtxt};\n use rustc_session::lint::builtin::{MUTABLE_BORROW_RESERVATION_CONFLICT, UNUSED_MUT};\n use rustc_span::{Span, Symbol, DUMMY_SP};\n \n@@ -73,16 +72,15 @@ crate use region_infer::RegionInferenceContext;\n \n // FIXME(eddyb) perhaps move this somewhere more centrally.\n #[derive(Debug)]\n-crate struct Upvar {\n+crate struct Upvar<'tcx> {\n+    // FIXME(project-rfc-2229#8): ty::CapturePlace should have a to_string(), or similar\n+    //                           then this should not be needed.\n     name: Symbol,\n \n-    // FIXME(project-rfc-2229#8): This should use Place or something similar\n-    var_hir_id: HirId,\n+    place: CapturedPlace<'tcx>,\n \n     /// If true, the capture is behind a reference.\n     by_ref: bool,\n-\n-    mutability: Mutability,\n }\n \n const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];\n@@ -161,21 +159,13 @@ fn do_mir_borrowck<'a, 'tcx>(\n     let upvars: Vec<_> = tables\n         .closure_min_captures_flattened(def.did.to_def_id())\n         .map(|captured_place| {\n-            let var_hir_id = match captured_place.place.base {\n-                HirPlaceBase::Upvar(upvar_id) => upvar_id.var_path.hir_id,\n-                _ => bug!(\"Expected upvar\"),\n-            };\n+            let var_hir_id = captured_place.get_root_variable();\n             let capture = captured_place.info.capture_kind;\n             let by_ref = match capture {\n                 ty::UpvarCapture::ByValue(_) => false,\n                 ty::UpvarCapture::ByRef(..) => true,\n             };\n-            Upvar {\n-                name: tcx.hir().name(var_hir_id),\n-                var_hir_id,\n-                by_ref,\n-                mutability: captured_place.mutability,\n-            }\n+            Upvar { name: tcx.hir().name(var_hir_id), place: captured_place.clone(), by_ref }\n         })\n         .collect();\n \n@@ -544,7 +534,7 @@ crate struct MirBorrowckCtxt<'cx, 'tcx> {\n     dominators: Dominators<BasicBlock>,\n \n     /// Information about upvars not necessarily preserved in types or MIR\n-    upvars: Vec<Upvar>,\n+    upvars: Vec<Upvar<'tcx>>,\n \n     /// Names of local (user) variables (extracted from `var_debug_info`).\n     local_names: IndexVec<Local, Option<Symbol>>,\n@@ -2251,7 +2241,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                  place={:?}\",\n                                 upvar, is_local_mutation_allowed, place\n                             );\n-                            match (upvar.mutability, is_local_mutation_allowed) {\n+                            match (upvar.place.mutability, is_local_mutation_allowed) {\n                                 (\n                                     Mutability::Not,\n                                     LocalMutationIsAllowed::No"}, {"sha": "a0265b20d127bd268d90baa60e0edcaabb917054", "filename": "compiler/rustc_mir/src/borrow_check/nll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c748f32ee45ed42eaab4d6a62dc64720b5096c68/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748f32ee45ed42eaab4d6a62dc64720b5096c68/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs?ref=c748f32ee45ed42eaab4d6a62dc64720b5096c68", "patch": "@@ -165,7 +165,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     flow_inits: &mut ResultsCursor<'cx, 'tcx, MaybeInitializedPlaces<'cx, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n     borrow_set: &BorrowSet<'tcx>,\n-    upvars: &[Upvar],\n+    upvars: &[Upvar<'tcx>],\n ) -> NllOutput<'tcx> {\n     let mut all_facts = AllFacts::enabled(infcx.tcx).then_some(AllFacts::default());\n "}, {"sha": "80de3b4e363bfb369a40b701ff9cf944e43df84a", "filename": "compiler/rustc_mir/src/borrow_check/path_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c748f32ee45ed42eaab4d6a62dc64720b5096c68/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748f32ee45ed42eaab4d6a62dc64720b5096c68/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fpath_utils.rs?ref=c748f32ee45ed42eaab4d6a62dc64720b5096c68", "patch": "@@ -143,7 +143,7 @@ pub(super) fn borrow_of_local_data(place: Place<'_>) -> bool {\n /// of a closure type.\n pub(crate) fn is_upvar_field_projection(\n     tcx: TyCtxt<'tcx>,\n-    upvars: &[Upvar],\n+    upvars: &[Upvar<'tcx>],\n     place_ref: PlaceRef<'tcx>,\n     body: &Body<'tcx>,\n ) -> Option<Field> {"}, {"sha": "24bbd2b8c49c17723d1f9aed5f6c474125e706d3", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c748f32ee45ed42eaab4d6a62dc64720b5096c68/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748f32ee45ed42eaab4d6a62dc64720b5096c68/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=c748f32ee45ed42eaab4d6a62dc64720b5096c68", "patch": "@@ -132,7 +132,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n     flow_inits: &mut ResultsCursor<'mir, 'tcx, MaybeInitializedPlaces<'mir, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n     elements: &Rc<RegionValueElements>,\n-    upvars: &[Upvar],\n+    upvars: &[Upvar<'tcx>],\n ) -> MirTypeckResults<'tcx> {\n     let implicit_region_bound = infcx.tcx.mk_region(ty::ReVar(universal_regions.fr_fn_body));\n     let mut constraints = MirTypeckRegionConstraints {\n@@ -821,7 +821,7 @@ struct BorrowCheckContext<'a, 'tcx> {\n     all_facts: &'a mut Option<AllFacts>,\n     borrow_set: &'a BorrowSet<'tcx>,\n     constraints: &'a mut MirTypeckRegionConstraints<'tcx>,\n-    upvars: &'a [Upvar],\n+    upvars: &'a [Upvar<'tcx>],\n }\n \n crate struct MirTypeckResults<'tcx> {\n@@ -2490,7 +2490,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             body,\n         );\n         let category = if let Some(field) = field {\n-            ConstraintCategory::ClosureUpvar(self.borrowck_context.upvars[field.index()].var_hir_id)\n+            let var_hir_id = self.borrowck_context.upvars[field.index()].place.get_root_variable();\n+            // FIXME(project-rfc-2229#8): Use Place for better diagnostics\n+            ConstraintCategory::ClosureUpvar(var_hir_id)\n         } else {\n             ConstraintCategory::Boring\n         };"}, {"sha": "1ea38e260b645d91d6ed09da639fbe57fbafa4e0", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/cant-mutate-imm-borrow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c748f32ee45ed42eaab4d6a62dc64720b5096c68/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748f32ee45ed42eaab4d6a62dc64720b5096c68/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.rs?ref=c748f32ee45ed42eaab4d6a62dc64720b5096c68", "patch": "@@ -14,7 +14,6 @@ fn main() {\n     let mut c = || {\n     //~^ ERROR: cannot borrow `z.0.0.0` as mutable, as it is behind a `&` reference\n         z.0.0.0 = format!(\"X1\");\n-        //~^ ERROR: cannot assign to `z`, as it is not declared as mutable\n     };\n \n     c();"}, {"sha": "861bc44b78ded3a7c08c554d2796ec5e6546ee0c", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/cant-mutate-imm-borrow.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c748f32ee45ed42eaab4d6a62dc64720b5096c68/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c748f32ee45ed42eaab4d6a62dc64720b5096c68/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm-borrow.stderr?ref=c748f32ee45ed42eaab4d6a62dc64720b5096c68", "patch": "@@ -7,15 +7,6 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error[E0594]: cannot assign to `z`, as it is not declared as mutable\n-  --> $DIR/cant-mutate-imm-borrow.rs:16:9\n-   |\n-LL |     let z = (&mut y, \"Z\");\n-   |         - help: consider changing this to be mutable: `mut z`\n-...\n-LL |         z.0.0.0 = format!(\"X1\");\n-   |         ^^^^^^^ cannot assign\n-\n error[E0596]: cannot borrow `z.0.0.0` as mutable, as it is behind a `&` reference\n   --> $DIR/cant-mutate-imm-borrow.rs:14:17\n    |\n@@ -25,7 +16,6 @@ LL |\n LL |         z.0.0.0 = format!(\"X1\");\n    |         - mutable borrow occurs due to use of `z.0.0.0` in closure\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to previous error; 1 warning emitted\n \n-Some errors have detailed explanations: E0594, E0596.\n-For more information about an error, try `rustc --explain E0594`.\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "997ecc7ddddf1eb33048f08f50c2a8c48aa28205", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/cant-mutate-imm.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c748f32ee45ed42eaab4d6a62dc64720b5096c68/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748f32ee45ed42eaab4d6a62dc64720b5096c68/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm.rs?ref=c748f32ee45ed42eaab4d6a62dc64720b5096c68", "patch": "@@ -0,0 +1,35 @@\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+\n+// Ensure that diagnostics for mutability error (because the root variable\n+// isn't mutable) work with `capture_disjoint_fields` enabled.\n+\n+fn mut_error_struct() {\n+    let x = (10, 10);\n+    let y = (x, 10);\n+    let z = (y, 10);\n+\n+    let mut c = || {\n+        z.0.0.0 = 20;\n+        //~^ ERROR: cannot assign to `z`, as it is not declared as mutable\n+    };\n+\n+    c();\n+}\n+\n+fn mut_error_box() {\n+    let x = (10, 10);\n+    let bx = Box::new(x);\n+\n+    let mut c = || {\n+        bx.0 = 20;\n+        //~^ ERROR: cannot assign to `bx`, as it is not declared as mutable\n+    };\n+\n+    c();\n+}\n+\n+fn main() {\n+    mut_error_struct();\n+    mut_error_box();\n+}"}, {"sha": "5e15635ac6e1bf38f7c651c31aa06fd406e2e742", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/cant-mutate-imm.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c748f32ee45ed42eaab4d6a62dc64720b5096c68/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c748f32ee45ed42eaab4d6a62dc64720b5096c68/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fcant-mutate-imm.stderr?ref=c748f32ee45ed42eaab4d6a62dc64720b5096c68", "patch": "@@ -0,0 +1,30 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/cant-mutate-imm.rs:1:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error[E0594]: cannot assign to `z`, as it is not declared as mutable\n+  --> $DIR/cant-mutate-imm.rs:13:9\n+   |\n+LL |     let z = (y, 10);\n+   |         - help: consider changing this to be mutable: `mut z`\n+...\n+LL |         z.0.0.0 = 20;\n+   |         ^^^^^^^^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `bx`, as it is not declared as mutable\n+  --> $DIR/cant-mutate-imm.rs:25:9\n+   |\n+LL |     let bx = Box::new(x);\n+   |         -- help: consider changing this to be mutable: `mut bx`\n+...\n+LL |         bx.0 = 20;\n+   |         ^^^^^^^^^ cannot assign\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "676fde558dfbc684d81a732cef204de7effe072b", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/mut_ref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c748f32ee45ed42eaab4d6a62dc64720b5096c68/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748f32ee45ed42eaab4d6a62dc64720b5096c68/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.rs?ref=c748f32ee45ed42eaab4d6a62dc64720b5096c68", "patch": "@@ -13,7 +13,6 @@ fn imm_mut_ref() {\n     let c = || {\n     //~^ ERROR: cannot borrow `**ref_mref_x` as mutable, as it is behind a `&` reference\n         **ref_mref_x = y;\n-        //~^ERROR: cannot assign to `ref_mref_x`, as it is not declared as mutable\n     };\n \n     c();\n@@ -28,7 +27,6 @@ fn mut_imm_ref() {\n     let c = || {\n     //~^ ERROR: cannot borrow `**mref_ref_x` as mutable, as it is behind a `&` reference\n         **mref_ref_x = y;\n-        //~^ERROR: cannot assign to `mref_ref_x`, as it is not declared as mutable\n     };\n \n     c();"}, {"sha": "8cb2ed2235d55395f2945d8e58b338e0c42226b1", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/mut_ref.stderr", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c748f32ee45ed42eaab4d6a62dc64720b5096c68/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c748f32ee45ed42eaab4d6a62dc64720b5096c68/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr?ref=c748f32ee45ed42eaab4d6a62dc64720b5096c68", "patch": "@@ -7,15 +7,6 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-error[E0594]: cannot assign to `ref_mref_x`, as it is not declared as mutable\n-  --> $DIR/mut_ref.rs:15:9\n-   |\n-LL |     let ref_mref_x = &mref_x;\n-   |         ---------- help: consider changing this to be mutable: `mut ref_mref_x`\n-...\n-LL |         **ref_mref_x = y;\n-   |         ^^^^^^^^^^^^ cannot assign\n-\n error[E0596]: cannot borrow `**ref_mref_x` as mutable, as it is behind a `&` reference\n   --> $DIR/mut_ref.rs:13:13\n    |\n@@ -28,25 +19,15 @@ LL |\n LL |         **ref_mref_x = y;\n    |           ---------- mutable borrow occurs due to use of `**ref_mref_x` in closure\n \n-error[E0594]: cannot assign to `mref_ref_x`, as it is not declared as mutable\n-  --> $DIR/mut_ref.rs:30:9\n-   |\n-LL |     let mref_ref_x = &mut ref_x;\n-   |         ---------- help: consider changing this to be mutable: `mut mref_ref_x`\n-...\n-LL |         **mref_ref_x = y;\n-   |         ^^^^^^^^^^^^ cannot assign\n-\n error[E0596]: cannot borrow `**mref_ref_x` as mutable, as it is behind a `&` reference\n-  --> $DIR/mut_ref.rs:28:13\n+  --> $DIR/mut_ref.rs:27:13\n    |\n LL |     let c = || {\n    |             ^^ cannot borrow as mutable\n LL |\n LL |         **mref_ref_x = y;\n    |           ---------- mutable borrow occurs due to use of `**mref_ref_x` in closure\n \n-error: aborting due to 4 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n-Some errors have detailed explanations: E0594, E0596.\n-For more information about an error, try `rustc --explain E0594`.\n+For more information about this error, try `rustc --explain E0596`."}]}