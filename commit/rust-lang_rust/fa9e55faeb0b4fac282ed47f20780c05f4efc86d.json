{"sha": "fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhOWU1NWZhZWIwYjRmYWMyODJlZDQ3ZjIwNzgwYzA1ZjRlZmM4NmQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-05-02T15:43:15Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-05-04T22:01:28Z"}, "message": "test: Make a dedicated testsuite for rustfix\n\nThis commit adds a dedicated mode to compiletest for running rustfix tests,\nadding a new `src/test/rustfix` directory which will execute all tests as a\n\"rustfix\" test, namely requiring that a `*.fixed` is next to the main file which\nis the result of the rustfix project's application of fixes.\n\nThe `rustfix` crate is pulled in to actually perform the fixing, and the rustfix\ncompiletest mode will assert a few properties about the fixing:\n\n* The expected fixed output must be the same as rustc's output suggestions\n  applied to the original code.\n* The fixed code must compile successfully\n* The fixed code must have no further diagnostics emitted about it", "tree": {"sha": "0dd43731c9c58b5a41d1cc4be32821d873b71801", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dd43731c9c58b5a41d1cc4be32821d873b71801"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "html_url": "https://github.com/rust-lang/rust/commit/fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2645044039cb59858ec494e0ddacbe597757cdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2645044039cb59858ec494e0ddacbe597757cdb", "html_url": "https://github.com/rust-lang/rust/commit/b2645044039cb59858ec494e0ddacbe597757cdb"}], "stats": {"total": 515, "additions": 471, "deletions": 44}, "files": [{"sha": "113369c99713042770619ada7c7712718ccb4124", "filename": "src/Cargo.lock", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -394,6 +394,7 @@ dependencies = [\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustfix 0.1.0 (git+https://github.com/rust-lang-nursery/rustfix?branch=apply_suggestion)\",\n  \"serde 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2234,6 +2235,19 @@ dependencies = [\n  \"rustdoc 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustfix\"\n+version = \"0.1.0\"\n+source = \"git+https://github.com/rust-lang-nursery/rustfix?branch=apply_suggestion#571b43a1a1777561ddd7a41b37512bf0e3452c1a\"\n+dependencies = [\n+ \"clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"colored 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quick-error 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rustfmt-nightly\"\n version = \"0.6.1\"\n@@ -3146,6 +3160,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rustc-ap-syntax_pos 113.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"55793c2a775230c42661194c48d44b35d4c8439d79ad8528e56651e854c48c63\"\n \"checksum rustc-demangle 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11fb43a206a04116ffd7cfcf9bcb941f8eb6cc7ff667272246b0a1c74259a3cb\"\n \"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n+\"checksum rustfix 0.1.0 (git+https://github.com/rust-lang-nursery/rustfix?branch=apply_suggestion)\" = \"<none>\"\n \"checksum same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d931a44fdaa43b8637009e7632a02adc4f2b2e0733c08caa4cf00e8da4a117a7\"\n \"checksum same-file 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cfb6eded0b06a0b512c8ddbcf04089138c9b4362c2f696f3c3d76039d68f3637\"\n \"checksum schannel 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"85fd9df495640643ad2d00443b3d78aae69802ad488debab4f1dd52fc1806ade\""}, {"sha": "5920e356bca40dabe83c8a3dfa4faee9a6c72ddb", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -326,7 +326,7 @@ impl<'a> Builder<'a> {\n                 test::TheBook, test::UnstableBook, test::RustcBook,\n                 test::Rustfmt, test::Miri, test::Clippy, test::RustdocJS, test::RustdocTheme,\n                 // Run run-make last, since these won't pass without make on Windows\n-                test::RunMake, test::RustdocUi),\n+                test::RunMake, test::RustdocUi, test::Rustfix),\n             Kind::Bench => describe!(test::Crate, test::CrateLibrustc),\n             Kind::Doc => describe!(doc::UnstableBook, doc::UnstableBookGen, doc::TheBook,\n                 doc::Standalone, doc::Std, doc::Test, doc::WhitelistedRustc, doc::Rustc,"}, {"sha": "fa32dd3163560ec6e6f683f92c27c903d2075b6d", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -716,6 +716,12 @@ default_test!(RunFail {\n     suite: \"run-fail\"\n });\n \n+default_test!(Rustfix {\n+    path: \"src/test/rustfix\",\n+    mode: \"rustfix\",\n+    suite: \"rustfix\"\n+});\n+\n default_test!(RunPassValgrind {\n     path: \"src/test/run-pass-valgrind\",\n     mode: \"run-pass-valgrind\","}, {"sha": "bddc2eab16dd86467e346bb5a5a4ad4ece9e1162", "filename": "src/test/rustfix/closure-immutable-outer-variable.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fclosure-immutable-outer-variable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fclosure-immutable-outer-variable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fclosure-immutable-outer-variable.fixed?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Point at the captured immutable outer variable\n+\n+fn foo(mut f: Box<FnMut()>) {\n+    f();\n+}\n+\n+fn main() {\n+    let mut y = true;\n+    foo(Box::new(move || y = false) as Box<_>);\n+}"}, {"sha": "fe8e2bc6c8ed10046f0f45891af5dec585c8e67f", "filename": "src/test/rustfix/closure-immutable-outer-variable.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fclosure-immutable-outer-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fclosure-immutable-outer-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fclosure-immutable-outer-variable.rs?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Point at the captured immutable outer variable\n+\n+fn foo(mut f: Box<FnMut()>) {\n+    f();\n+}\n+\n+fn main() {\n+    let y = true;\n+    foo(Box::new(move || y = false) as Box<_>);\n+}"}, {"sha": "39e19566d7652d1b0fa31eb8c9380790809a4097", "filename": "src/test/rustfix/empty-no-fixes.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fempty-no-fixes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fempty-no-fixes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fempty-no-fixes.fixed?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:--crate-type lib"}, {"sha": "39e19566d7652d1b0fa31eb8c9380790809a4097", "filename": "src/test/rustfix/empty-no-fixes.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fempty-no-fixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fempty-no-fixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fempty-no-fixes.rs?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:--crate-type lib"}, {"sha": "ee58e77825343fb514a29ffad69f755ab53422ea", "filename": "src/test/rustfix/empty-no-fixes.rs.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fempty-no-fixes.rs.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fempty-no-fixes.rs.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fempty-no-fixes.rs.fixed?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:--crate-type lib\n+fn foo() {}"}, {"sha": "d7a27a11fc07ae7ed77027a4b01907f2ea7411e8", "filename": "src/test/rustfix/issue-45562.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fissue-45562.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fissue-45562.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fissue-45562.fixed?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[no_mangle] pub static RAH: usize = 5;\n+\n+fn main() {}"}, {"sha": "39576e9c845e4bec5cbce87891f7799f5bc5f4d6", "filename": "src/test/rustfix/issue-45562.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fissue-45562.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fissue-45562.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fissue-45562.rs?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[no_mangle] pub const RAH: usize = 5;\n+\n+fn main() {}"}, {"sha": "d931f90cd04313b0e17daa27e0464d9edb6d5862", "filename": "src/test/rustfix/issue-45799-bad-extern-crate-rename-suggestion-formatting.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.fixed?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate std as other_std;\n+fn main() {}"}, {"sha": "7c55f9c4eb9f0230b7a9f7049c50dc7a6f6e2841", "filename": "src/test/rustfix/issue-45799-bad-extern-crate-rename-suggestion-formatting.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.rs?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate std;\n+fn main() {}"}, {"sha": "aaa04ef40042d892512e1807996d26f87131a14c", "filename": "src/test/rustfix/issue-46756-consider-borrowing-cast-or-binexpr.fixed", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fissue-46756-consider-borrowing-cast-or-binexpr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fissue-46756-consider-borrowing-cast-or-binexpr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fissue-46756-consider-borrowing-cast-or-binexpr.fixed?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused)]\n+\n+fn light_flows_our_war_of_mocking_words(and_yet: &usize) -> usize {\n+    and_yet + 1\n+}\n+\n+fn main() {\n+    let behold: isize = 2;\n+    let with_tears: usize = 3;\n+    light_flows_our_war_of_mocking_words(&(behold as usize));\n+    light_flows_our_war_of_mocking_words(&(with_tears + 4));\n+}"}, {"sha": "d21681747e9d3a8de97a5ced754ad4495687a776", "filename": "src/test/rustfix/issue-46756-consider-borrowing-cast-or-binexpr.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fissue-46756-consider-borrowing-cast-or-binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fissue-46756-consider-borrowing-cast-or-binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fissue-46756-consider-borrowing-cast-or-binexpr.rs?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused)]\n+\n+fn light_flows_our_war_of_mocking_words(and_yet: &usize) -> usize {\n+    and_yet + 1\n+}\n+\n+fn main() {\n+    let behold: isize = 2;\n+    let with_tears: usize = 3;\n+    light_flows_our_war_of_mocking_words(behold as usize);\n+    light_flows_our_war_of_mocking_words(with_tears + 4);\n+}"}, {"sha": "3f07b46791d22753d7a5492210b1d50c99c07cc7", "filename": "src/test/rustfix/main-no-fixes.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fmain-no-fixes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fmain-no-fixes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fmain-no-fixes.fixed?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {}"}, {"sha": "3f07b46791d22753d7a5492210b1d50c99c07cc7", "filename": "src/test/rustfix/main-no-fixes.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fmain-no-fixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fmain-no-fixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fmain-no-fixes.rs?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {}"}, {"sha": "3f07b46791d22753d7a5492210b1d50c99c07cc7", "filename": "src/test/rustfix/main-no-fixes.rs.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fmain-no-fixes.rs.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fmain-no-fixes.rs.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fmain-no-fixes.rs.fixed?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {}"}, {"sha": "621a4127bc2932d30988f8edb1a6be24f11b838e", "filename": "src/test/rustfix/missing-comma-in-match.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fmissing-comma-in-match.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fmissing-comma-in-match.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fmissing-comma-in-match.fixed?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    match &Some(3) {\n+        &None => 1,\n+        &Some(2) => { 3 }\n+        _ => 2\n+    };\n+}"}, {"sha": "8ccad7b9c9411dfa3eff161de705bcf26d7c51f1", "filename": "src/test/rustfix/missing-comma-in-match.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fmissing-comma-in-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fmissing-comma-in-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fmissing-comma-in-match.rs?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    match &Some(3) {\n+        &None => 1\n+        &Some(2) => { 3 }\n+        _ => 2\n+    };\n+}"}, {"sha": "0ace6d96613d72e7d708372f9cacdb05650cae49", "filename": "src/test/rustfix/str-as-char.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fstr-as-char.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fstr-as-char.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fstr-as-char.fixed?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!(\"\u25cf\u25cf\");\n+}"}, {"sha": "fa0e474fc7fb7a19e55acc33086d8f380780a69a", "filename": "src/test/rustfix/str-as-char.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fstr-as-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fstr-as-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fstr-as-char.rs?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!('\u25cf\u25cf');\n+}"}, {"sha": "9cb7537b42807e2f114d60474d8aadaca62a9725", "filename": "src/test/rustfix/tuple-float-index.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Ftuple-float-index.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Ftuple-float-index.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Ftuple-float-index.fixed?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+fn main () {\n+    ((1, (2, 3)).1).1;\n+}"}, {"sha": "8bfbd0e74db228a4739c570a0b607920820cb5df", "filename": "src/test/rustfix/tuple-float-index.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Ftuple-float-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Ftuple-float-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Ftuple-float-index.rs?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+fn main () {\n+    (1, (2, 3)).1.1;\n+}"}, {"sha": "c3f615066bbbd9d4c3a977791db4e8bae6f30f3d", "filename": "src/test/rustfix/update-all-references.sh", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fupdate-all-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fupdate-all-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fupdate-all-references.sh?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,31 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# A script to update the references for all tests. The idea is that\n+# you do a run, which will generate files in the build directory\n+# containing the (normalized) actual output of the compiler. You then\n+# run this script, which will copy those files over. If you find\n+# yourself manually editing a foo.stderr file, you're doing it wrong.\n+#\n+# See all `update-references.sh`, if you just want to update a single test.\n+\n+if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" || \"$2\" != \"\" ]]; then\n+    echo \"usage: $0 <build-directory>\"\n+    echo \"\"\n+    echo \"For example:\"\n+    echo \"   $0 ../../../build/x86_64-apple-darwin/test/rustfix\"\n+fi\n+\n+BUILD_DIR=$PWD/$1\n+MY_DIR=$(dirname $0)\n+cd $MY_DIR\n+find . -name '*.rs' | xargs ./update-references.sh $BUILD_DIR"}, {"sha": "bcca2fec10d33c830b306b87d0a763f2164cd14c", "filename": "src/test/rustfix/update-references.sh", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fupdate-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftest%2Frustfix%2Fupdate-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustfix%2Fupdate-references.sh?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -0,0 +1,45 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# A script to update the references for particular tests. The idea is\n+# that you do a run, which will generate files in the build directory\n+# containing the (normalized) actual output of the compiler. This\n+# script will then copy that output and replace the \"expected output\"\n+# files. You can then commit the changes.\n+#\n+# If you find yourself manually editing a foo.stderr file, you're\n+# doing it wrong.\n+\n+if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" || \"$2\" == \"\" ]]; then\n+    echo \"usage: $0 <build-directory> <relative-path-to-rs-files>\"\n+    echo \"\"\n+    echo \"For example:\"\n+    echo \"   $0 ../../../build/x86_64-apple-darwin/test/rustfix *.rs */*.rs\"\n+fi\n+\n+MYDIR=$(dirname $0)\n+\n+BUILD_DIR=\"$1\"\n+shift\n+\n+shopt -s nullglob\n+\n+while [[ \"$1\" != \"\" ]]; do\n+    for OUT_NAME in $BUILD_DIR/${1%.rs}.*fixed; do\n+        OUT_BASE=`basename \"$OUT_NAME\"`\n+        if ! (diff $OUT_NAME $MYDIR/$OUT_BASE >& /dev/null); then\n+            echo updating $MYDIR/$OUT_BASE\n+            cp $OUT_NAME $MYDIR\n+        fi\n+    done\n+    shift\n+done"}, {"sha": "733fc1f16d24bef905fb103e3054fd17047e33ae", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -32,6 +32,7 @@ pub enum Mode {\n     RunMake,\n     Ui,\n     MirOpt,\n+    Rustfix,\n }\n \n impl Mode {\n@@ -67,31 +68,33 @@ impl FromStr for Mode {\n             \"run-make\" => Ok(RunMake),\n             \"ui\" => Ok(Ui),\n             \"mir-opt\" => Ok(MirOpt),\n+            \"rustfix\" => Ok(Rustfix),\n             _ => Err(()),\n         }\n     }\n }\n \n impl fmt::Display for Mode {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(match *self {\n-                              CompileFail => \"compile-fail\",\n-                              ParseFail => \"parse-fail\",\n-                              RunFail => \"run-fail\",\n-                              RunPass => \"run-pass\",\n-                              RunPassValgrind => \"run-pass-valgrind\",\n-                              Pretty => \"pretty\",\n-                              DebugInfoGdb => \"debuginfo-gdb\",\n-                              DebugInfoLldb => \"debuginfo-lldb\",\n-                              Codegen => \"codegen\",\n-                              Rustdoc => \"rustdoc\",\n-                              CodegenUnits => \"codegen-units\",\n-                              Incremental => \"incremental\",\n-                              RunMake => \"run-make\",\n-                              Ui => \"ui\",\n-                              MirOpt => \"mir-opt\",\n-                          },\n-                          f)\n+        let s = match *self {\n+            CompileFail => \"compile-fail\",\n+            ParseFail => \"parse-fail\",\n+            RunFail => \"run-fail\",\n+            RunPass => \"run-pass\",\n+            RunPassValgrind => \"run-pass-valgrind\",\n+            Pretty => \"pretty\",\n+            DebugInfoGdb => \"debuginfo-gdb\",\n+            DebugInfoLldb => \"debuginfo-lldb\",\n+            Codegen => \"codegen\",\n+            Rustdoc => \"rustdoc\",\n+            CodegenUnits => \"codegen-units\",\n+            Incremental => \"incremental\",\n+            RunMake => \"run-make\",\n+            Ui => \"ui\",\n+            MirOpt => \"mir-opt\",\n+            Rustfix => \"rustfix\",\n+        };\n+        fmt::Display::fmt(s, f)\n     }\n }\n \n@@ -272,4 +275,4 @@ pub fn expected_output_path(testpaths: &TestPaths,\n pub const UI_EXTENSIONS: &[&str] = &[UI_STDERR, UI_STDOUT, UI_FIXED];\n pub const UI_STDERR: &str = \"stderr\";\n pub const UI_STDOUT: &str = \"stdout\";\n-pub const UI_FIXED: &str = \"rs.fixed\";\n+pub const UI_FIXED: &str = \"fixed\";"}, {"sha": "ea1863b2fd16cdb830ff470fcc4b9d81deb9c3b2", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 60, "deletions": 24, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9e55faeb0b4fac282ed47f20780c05f4efc86d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=fa9e55faeb0b4fac282ed47f20780c05f4efc86d", "patch": "@@ -11,7 +11,7 @@\n use common::{Config, TestPaths};\n use common::{CompileFail, ParseFail, Pretty, RunFail, RunPass, RunPassValgrind};\n use common::{Codegen, CodegenUnits, DebugInfoGdb, DebugInfoLldb, Rustdoc};\n-use common::{Incremental, MirOpt, RunMake, Ui};\n+use common::{Incremental, MirOpt, RunMake, Ui, Rustfix};\n use common::{expected_output_path, UI_STDERR, UI_STDOUT, UI_FIXED};\n use common::CompareMode;\n use diff;\n@@ -21,6 +21,7 @@ use json;\n use header::TestProps;\n use util::logv;\n use regex::Regex;\n+use rustfix::{apply_suggestions, get_suggestions_from_json};\n \n use std::collections::VecDeque;\n use std::collections::HashMap;\n@@ -241,6 +242,7 @@ impl<'test> TestCx<'test> {\n             CodegenUnits => self.run_codegen_units_test(),\n             Incremental => self.run_incremental_test(),\n             RunMake => self.run_rmake_test(),\n+            Rustfix => self.run_rustfix_test(),\n             Ui => self.run_ui_test(),\n             MirOpt => self.run_mir_opt_test(),\n         }\n@@ -1687,6 +1689,7 @@ impl<'test> TestCx<'test> {\n \n                 rustc.arg(dir_opt);\n             }\n+            Rustfix |\n             RunPass |\n             RunFail |\n             RunPassValgrind |\n@@ -2603,29 +2606,6 @@ impl<'test> TestCx<'test> {\n                 self.check_error_patterns(&proc_res.stderr, &proc_res);\n             }\n         }\n-\n-        let fixture_path = expected_output_path(&self.testpaths, None, &None, UI_FIXED);\n-\n-        // FIXME(killercup): Add `nll.rs.fixed` files matching\n-        let nll = self.config.compare_mode\n-            .as_ref()\n-            .map(|x| *x == CompareMode::Nll)\n-            .unwrap_or(false);\n-        if fixture_path.exists() && !nll {\n-            use std::collections::HashSet;\n-            use rustfix::{apply_suggestions, get_suggestions_from_json};\n-\n-            let unfixed_code = self.load_expected_output_from_path(&self.testpaths.file)\n-                .unwrap();\n-            let expected_fixed = self.load_expected_output_from_path(&fixture_path).unwrap();\n-            let suggestions = get_suggestions_from_json(&proc_res.stderr, &HashSet::new()).unwrap();\n-            let fixed_code = apply_suggestions(&unfixed_code, &suggestions);\n-            let errors = self.compare_output(\"rs.fixed\", &fixed_code, &expected_fixed);\n-            if errors > 0 {\n-                panic!(\"rustfix produced different fixed file!\");\n-                // FIXME(killercup): Add info for update-references.sh call\n-            }\n-        }\n     }\n \n     fn run_mir_opt_test(&self) {\n@@ -2950,6 +2930,62 @@ impl<'test> TestCx<'test> {\n         println!(\"Actual {} saved to {}\", kind, output_file.display());\n         1\n     }\n+\n+    fn run_rustfix_test(&self) {\n+        // First up, compile the test with --error-format=json\n+        let mut rustc = self.make_compile_args(\n+            &self.testpaths.file,\n+            TargetLocation::ThisFile(self.make_exe_name()),\n+        );\n+        rustc.arg(\"--error-format\").arg(\"json\")\n+            .arg(\"-L\").arg(&self.aux_output_dir_name());\n+        let proc_res = self.compose_and_run_compiler(rustc, None);\n+\n+        // Now apply suggestions from rustc to the code itself\n+        let unfixed_code = self.load_expected_output_from_path(&self.testpaths.file)\n+            .unwrap();\n+        let suggestions = get_suggestions_from_json(&proc_res.stderr, &HashSet::new()).unwrap();\n+        let fixed_code = apply_suggestions(&unfixed_code, &suggestions);\n+\n+        // Load up what the expected result of fixing should be\n+        let fixture_path = expected_output_path(&self.testpaths, None, &None, UI_FIXED);\n+        let expected_fixed = self.load_expected_output_from_path(&fixture_path)\n+            .unwrap_or(String::new());\n+\n+        // Make sure our fixed code is the same as what we're expecting\n+        let errors = self.compare_output(UI_FIXED, &fixed_code, &expected_fixed);\n+        if errors > 0 {\n+            println!(\"To update references, run this command from build directory:\");\n+            let relative_path_to_file = self.testpaths\n+                .relative_dir\n+                .join(self.testpaths.file.file_name().unwrap());\n+            println!(\n+                \"{}/update-references.sh '{}' '{}'\",\n+                self.config.src_base.display(),\n+                self.config.build_base.display(),\n+                relative_path_to_file.display()\n+            );\n+            self.fatal_proc_rec(\n+                &format!(\"{} errors occurred comparing output.\", errors),\n+                &proc_res,\n+            );\n+        }\n+\n+        // And finally, compile the fixed code and make sure it both succeeds\n+        // and has no diagnostics.\n+        let mut rustc = self.make_compile_args(\n+            &self.testpaths.file.with_extension(UI_FIXED),\n+            TargetLocation::ThisFile(self.make_exe_name()),\n+        );\n+        rustc.arg(\"-L\").arg(&self.aux_output_dir_name());\n+        let res = self.compose_and_run_compiler(rustc, None);\n+        if !res.status.success() {\n+            self.fatal_proc_rec(\"failed to compile fixed code\", &res);\n+        }\n+        if !res.stderr.is_empty() {\n+            self.fatal_proc_rec(\"fixed code is still producing diagnostics\", &res);\n+        }\n+    }\n }\n \n struct ProcArgs {"}]}