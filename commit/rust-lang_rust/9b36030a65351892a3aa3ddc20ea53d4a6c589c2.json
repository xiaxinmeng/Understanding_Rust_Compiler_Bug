{"sha": "9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMzYwMzBhNjUzNTE4OTJhM2FhM2RkYzIwZWE1M2Q0YTZjNTg5YzI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-15T22:26:36Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-15T22:56:32Z"}, "message": "On E0283, point at method with the requirements\n\nOn required type annotation diagnostic error, point at method with the\nrequirements if the span is available.", "tree": {"sha": "8b7ab87bb4bd6e347b19ef6bd23992d138b87c4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b7ab87bb4bd6e347b19ef6bd23992d138b87c4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "html_url": "https://github.com/rust-lang/rust/commit/9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb345a0be3ba3fa1970fe02789791c5c72788d8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb345a0be3ba3fa1970fe02789791c5c72788d8f", "html_url": "https://github.com/rust-lang/rust/commit/bb345a0be3ba3fa1970fe02789791c5c72788d8f"}], "stats": {"total": 308, "additions": 260, "deletions": 48}, "files": [{"sha": "1aca687af2bf3e808bbff8cedaf4741ee28ef9e3", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -1241,7 +1241,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n             ObligationCauseCode::ItemObligation(item_def_id) => {\n                 let item_name = tcx.item_path_str(item_def_id);\n-                err.note(&format!(\"required by `{}`\", item_name));\n+                let msg = format!(\"required by `{}`\", item_name);\n+                if let Some(sp) = tcx.hir.span_if_local(item_def_id) {\n+                    let sp = tcx.sess.codemap().def_span(sp);\n+                    err.span_note(sp, &msg);\n+                } else {\n+                    err.note(&msg);\n+                }\n             }\n             ObligationCauseCode::ObjectCastObligation(object_ty) => {\n                 err.note(&format!(\"required for the cast to the object type `{}`\","}, {"sha": "4bd3b684b7ba3cf62983be6aaf5399383bfde4ea", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -6,7 +6,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), &'s ()) -> _`\n    |\n-   = note: required by `f1`\n+note: required by `f1`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:26:1\n+   |\n+26 | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:13:5\n@@ -16,7 +20,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n    |\n-   = note: required by `f2`\n+note: required by `f2`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:27:1\n+   |\n+27 | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n@@ -26,7 +34,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r> fn(&(), &'r ()) -> _`\n    |\n-   = note: required by `f3`\n+note: required by `f3`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:28:1\n+   |\n+28 | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:15:5\n@@ -36,7 +48,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'s, 'r> fn(&'s (), &'r ()) -> _`\n    |\n-   = note: required by `f4`\n+note: required by `f4`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:29:1\n+   |\n+29 | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n@@ -46,7 +62,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), &'r ()) -> _`\n    |\n-   = note: required by `f5`\n+note: required by `f5`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:30:1\n+   |\n+30 | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:17:5\n@@ -56,7 +76,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), std::boxed::Box<for<'s> std::ops::Fn(&'s ()) + 'static>) -> _`\n    |\n-   = note: required by `g1`\n+note: required by `g1`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:33:1\n+   |\n+33 | fn g1<F>(_: F) where F: Fn(&(), Box<Fn(&())>) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n@@ -66,7 +90,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), for<'s> fn(&'s ())) -> _`\n    |\n-   = note: required by `g2`\n+note: required by `g2`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:34:1\n+   |\n+34 | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:19:5\n@@ -76,7 +104,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), std::boxed::Box<for<'r> std::ops::Fn(&'r ()) + 'static>) -> _`\n    |\n-   = note: required by `g3`\n+note: required by `g3`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:35:1\n+   |\n+35 | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<Fn(&())>) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n@@ -86,7 +118,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n    |\n-   = note: required by `g4`\n+note: required by `g4`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:36:1\n+   |\n+36 | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:21:5\n@@ -96,7 +132,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), std::boxed::Box<for<'t0> std::ops::Fn(&'t0 ()) + 'static>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n    |\n-   = note: required by `h1`\n+note: required by `h1`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:39:1\n+   |\n+39 | fn h1<F>(_: F) where F: Fn(&(), Box<Fn(&())>, &(), fn(&(), &())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n@@ -106,7 +146,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r, 't0> fn(&'r (), std::boxed::Box<for<'s> std::ops::Fn(&'s ()) + 'static>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n    |\n-   = note: required by `h2`\n+note: required by `h2`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:40:1\n+   |\n+40 | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<Fn(&())>, &'t0 (), fn(&(), &())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 11 previous errors\n "}, {"sha": "7ca3e8728fd9c237cb1d84d2869adf25d70a16c7", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -10,7 +10,11 @@ error[E0277]: the trait bound `i8: Foo<i32>` is not satisfied\n              <i8 as Foo<u32>>\n              <i8 as Foo<u64>>\n              <i8 as Foo<bool>>\n-   = note: required by `Foo::bar`\n+note: required by `Foo::bar`\n+  --> $DIR/issue-39802-show-5-trait-impls.rs:12:5\n+   |\n+12 |     fn bar(&self){}\n+   |     ^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:35:5\n@@ -23,7 +27,11 @@ error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n              <u8 as Foo<u32>>\n              <u8 as Foo<u64>>\n              <u8 as Foo<bool>>\n-   = note: required by `Foo::bar`\n+note: required by `Foo::bar`\n+  --> $DIR/issue-39802-show-5-trait-impls.rs:12:5\n+   |\n+12 |     fn bar(&self){}\n+   |     ^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:36:5\n@@ -37,7 +45,11 @@ error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n              <bool as Foo<u32>>\n              <bool as Foo<u64>>\n            and 2 others\n-   = note: required by `Foo::bar`\n+note: required by `Foo::bar`\n+  --> $DIR/issue-39802-show-5-trait-impls.rs:12:5\n+   |\n+12 |     fn bar(&self){}\n+   |     ^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2bc7e9e46e7c53a7556914f1ec565906e3d5e4b8", "filename": "src/test/ui/did_you_mean/recursion_limit.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -15,7 +15,11 @@ error[E0275]: overflow evaluating the requirement `K: std::marker::Send`\n    = note: required because it appears within the type `C`\n    = note: required because it appears within the type `B`\n    = note: required because it appears within the type `A`\n-   = note: required by `is_send`\n+note: required by `is_send`\n+  --> $DIR/recursion_limit.rs:41:1\n+   |\n+41 | fn is_send<T:Send>() { }\n+   | ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4ec5c9ebd2712e3eee5af0c252531e4e1cf05877", "filename": "src/test/ui/fmt/send-sync.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -12,7 +12,11 @@ error[E0277]: the trait bound `*mut std::ops::Fn() + 'static: std::marker::Sync`\n    = note: required because it appears within the type `[std::fmt::ArgumentV1<'_>]`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&[std::fmt::ArgumentV1<'_>]`\n    = note: required because it appears within the type `std::fmt::Arguments<'_>`\n-   = note: required by `send`\n+note: required by `send`\n+  --> $DIR/send-sync.rs:11:1\n+   |\n+11 | fn send<T: Send>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `*mut std::ops::Fn() + 'static: std::marker::Sync` is not satisfied in `std::fmt::Arguments<'_>`\n   --> $DIR/send-sync.rs:19:5\n@@ -28,7 +32,11 @@ error[E0277]: the trait bound `*mut std::ops::Fn() + 'static: std::marker::Sync`\n    = note: required because it appears within the type `[std::fmt::ArgumentV1<'_>]`\n    = note: required because it appears within the type `&[std::fmt::ArgumentV1<'_>]`\n    = note: required because it appears within the type `std::fmt::Arguments<'_>`\n-   = note: required by `sync`\n+note: required by `sync`\n+  --> $DIR/send-sync.rs:12:1\n+   |\n+12 | fn sync<T: Sync>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d30255335a660628906619b92846ff0eb73f87cc", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -7,7 +7,11 @@ error[E0277]: the trait bound `std::cell::Cell<i32>: std::marker::Sync` is not s\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&std::cell::Cell<i32>`\n    = note: required because it appears within the type `[generator@$DIR/not-send-sync.rs:26:17: 30:6 a:&std::cell::Cell<i32> _]`\n-   = note: required by `main::assert_send`\n+note: required by `main::assert_send`\n+  --> $DIR/not-send-sync.rs:17:5\n+   |\n+17 |     fn assert_send<T: Send>(_: T) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::cell::Cell<i32>: std::marker::Sync` is not satisfied in `[generator@$DIR/not-send-sync.rs:19:17: 23:6 (std::cell::Cell<i32>, ())]`\n   --> $DIR/not-send-sync.rs:19:5\n@@ -18,7 +22,11 @@ error[E0277]: the trait bound `std::cell::Cell<i32>: std::marker::Sync` is not s\n    = help: within `[generator@$DIR/not-send-sync.rs:19:17: 23:6 (std::cell::Cell<i32>, ())]`, the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n    = note: required because it appears within the type `(std::cell::Cell<i32>, ())`\n    = note: required because it appears within the type `[generator@$DIR/not-send-sync.rs:19:17: 23:6 (std::cell::Cell<i32>, ())]`\n-   = note: required by `main::assert_sync`\n+note: required by `main::assert_sync`\n+  --> $DIR/not-send-sync.rs:16:5\n+   |\n+16 |     fn assert_sync<T: Sync>(_: T) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "838a3002e3aa7b9872d4c3efdb28e76d9b8f85b8", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -7,7 +7,11 @@ error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::S\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak.rs:21:5: 21:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n    = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\n-   = note: required by `send`\n+note: required by `send`\n+  --> $DIR/auto-trait-leak.rs:24:1\n+   |\n+24 | fn send<T: Send>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied in `impl std::ops::Fn<(i32,)>`\n   --> $DIR/auto-trait-leak.rs:30:5\n@@ -18,7 +22,11 @@ error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::S\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak.rs:38:5: 38:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n    = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\n-   = note: required by `send`\n+note: required by `send`\n+  --> $DIR/auto-trait-leak.rs:24:1\n+   |\n+24 | fn send<T: Send>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0391]: unsupported cyclic reference between types/traits detected\n   --> $DIR/auto-trait-leak.rs:44:1"}, {"sha": "55af26dd91ea3d0dffc5b81501d02823d9c4828a", "filename": "src/test/ui/issue-24424.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-24424.stderr?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -4,7 +4,11 @@ error[E0283]: type annotations required: cannot resolve `T0: Trait0<'l0>`\n 14 | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: required by `Trait0`\n+note: required by `Trait0`\n+  --> $DIR/issue-24424.rs:12:1\n+   |\n+12 | trait Trait0<'l0>  {}\n+   | ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "53f2f54325d57c834e71c426b799b35cb21ef44a", "filename": "src/test/ui/mismatched_types/E0631.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -6,7 +6,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `fn(usize) -> _`\n    |\n-   = note: required by `foo`\n+note: required by `foo`\n+  --> $DIR/E0631.rs:13:1\n+   |\n+13 | fn foo<F: Fn(usize)>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/E0631.rs:18:5\n@@ -16,7 +20,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `fn(usize) -> _`\n    |\n-   = note: required by `bar`\n+note: required by `bar`\n+  --> $DIR/E0631.rs:14:1\n+   |\n+14 | fn bar<F: Fn<usize>>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:19:5\n@@ -27,7 +35,11 @@ error[E0631]: type mismatch in function arguments\n 19 |     foo(f); //~ ERROR type mismatch\n    |     ^^^ expected signature of `fn(usize) -> _`\n    |\n-   = note: required by `foo`\n+note: required by `foo`\n+  --> $DIR/E0631.rs:13:1\n+   |\n+13 | fn foo<F: Fn(usize)>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:20:5\n@@ -38,7 +50,11 @@ error[E0631]: type mismatch in function arguments\n 20 |     bar(f); //~ ERROR type mismatch\n    |     ^^^ expected signature of `fn(usize) -> _`\n    |\n-   = note: required by `bar`\n+note: required by `bar`\n+  --> $DIR/E0631.rs:14:1\n+   |\n+14 | fn bar<F: Fn<usize>>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ba25d67d76ef2fc7fb0fff65e6caf7a04ff9fa05", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -30,7 +30,11 @@ error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n    |     |\n    |     expected closure that takes 1 argument\n    |\n-   = note: required by `f`\n+note: required by `f`\n+  --> $DIR/closure-arg-count.rs:13:1\n+   |\n+13 | fn f<F: Fn<usize>>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0593]: closure is expected to take a single tuple as argument, but it takes 2 distinct arguments\n   --> $DIR/closure-arg-count.rs:24:53"}, {"sha": "dfd02fe23b686e03ceba9ada8e790021c46a0ce1", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -31,15 +31,23 @@ error[E0631]: type mismatch in function arguments\n    |     expected signature of `for<'r> fn(*mut &'r u32) -> _`\n    |     found signature of `fn(*mut &'a u32) -> _`\n    |\n-   = note: required by `baz`\n+note: required by `baz`\n+  --> $DIR/closure-arg-type-mismatch.rs:18:1\n+   |\n+18 | fn baz<F: Fn(*mut &u32)>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `for<'r> <fn(*mut &'a u32) as std::ops::FnOnce<(*mut &'r u32,)>>::Output == ()`\n   --> $DIR/closure-arg-type-mismatch.rs:20:5\n    |\n 20 |     baz(f); //~ ERROR type mismatch\n    |     ^^^ expected bound lifetime parameter, found concrete lifetime\n    |\n-   = note: required by `baz`\n+note: required by `baz`\n+  --> $DIR/closure-arg-type-mismatch.rs:18:1\n+   |\n+18 | fn baz<F: Fn(*mut &u32)>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "01de7e0749500ba17385bad3a0f0d5b2084f35bf", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -5,7 +5,11 @@ error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/closure-mismatch.r\n    |     ^^^ expected bound lifetime parameter, found concrete lifetime\n    |\n    = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]`\n-   = note: required by `baz`\n+note: required by `baz`\n+  --> $DIR/closure-mismatch.rs:15:1\n+   |\n+15 | fn baz<T: Foo>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-mismatch.rs:18:5\n@@ -16,7 +20,11 @@ error[E0631]: type mismatch in closure arguments\n    |     expected signature of `for<'r> fn(&'r ()) -> _`\n    |\n    = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]`\n-   = note: required by `baz`\n+note: required by `baz`\n+  --> $DIR/closure-mismatch.rs:15:1\n+   |\n+15 | fn baz<T: Foo>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "64c260c30ed49962815da7923df5bf3d5ed982f3", "filename": "src/test/ui/mismatched_types/fn-variance-1.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -7,7 +7,11 @@ error[E0631]: type mismatch in function arguments\n 21 |     apply(&3, takes_mut);\n    |     ^^^^^ expected signature of `fn(&{integer}) -> _`\n    |\n-   = note: required by `apply`\n+note: required by `apply`\n+  --> $DIR/fn-variance-1.rs:15:1\n+   |\n+15 | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/fn-variance-1.rs:25:5\n@@ -18,7 +22,11 @@ error[E0631]: type mismatch in function arguments\n 25 |     apply(&mut 3, takes_imm);\n    |     ^^^^^ expected signature of `fn(&mut {integer}) -> _`\n    |\n-   = note: required by `apply`\n+note: required by `apply`\n+  --> $DIR/fn-variance-1.rs:15:1\n+   |\n+15 | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f2237e495a00ce255a40c40929518b9ec21a4123", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -15,13 +15,15 @@ use std::ops::FnMut;\n fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n \n fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n+//~^ NOTE required by `call_it`\n     f(2, y)\n }\n \n pub fn main() {\n     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n+    //~^ NOTE found signature of `fn(usize, isize) -> _`\n     let z = call_it(3, f);\n     //~^ ERROR type mismatch\n-    //~| required by `call_it`\n+    //~| NOTE expected signature of `fn(isize, isize) -> _`\n     println!(\"{}\", z);\n }"}, {"sha": "9c9bbd19c7552250c112cd0422b9d2fd0610beee", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -1,12 +1,17 @@\n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/unboxed-closures-vtable-mismatch.rs:23:13\n+  --> $DIR/unboxed-closures-vtable-mismatch.rs:25:13\n    |\n-22 |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n+23 |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n    |                       ----------------------------- found signature of `fn(usize, isize) -> _`\n-23 |     let z = call_it(3, f);\n+24 |     //~^ NOTE found signature of `fn(usize, isize) -> _`\n+25 |     let z = call_it(3, f);\n    |             ^^^^^^^ expected signature of `fn(isize, isize) -> _`\n    |\n-   = note: required by `call_it`\n+note: required by `call_it`\n+  --> $DIR/unboxed-closures-vtable-mismatch.rs:17:1\n+   |\n+17 | fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "cfac3981be284fbd49069b6abaeaca7da77fc8af", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -5,7 +5,11 @@ error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n    |     ^^^^^^^^^^^^ trait message\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n-   = note: required by `Index::index`\n+note: required by `Index::index`\n+  --> $DIR/multiple-impls.rs:22:5\n+   |\n+22 |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/multiple-impls.rs:43:5\n@@ -22,7 +26,11 @@ error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n    |     ^^^^^^^^^^^^ on impl for Foo\n    |\n    = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n-   = note: required by `Index::index`\n+note: required by `Index::index`\n+  --> $DIR/multiple-impls.rs:22:5\n+   |\n+22 |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:46:5\n@@ -39,7 +47,11 @@ error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n    |     ^^^^^^^^^^^^ on impl for Bar\n    |\n    = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n-   = note: required by `Index::index`\n+note: required by `Index::index`\n+  --> $DIR/multiple-impls.rs:22:5\n+   |\n+22 |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:49:5"}, {"sha": "ed2da68f081675d10c98648b680908effa89bbc6", "filename": "src/test/ui/on-unimplemented/on-impl.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -5,7 +5,11 @@ error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n    |     ^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n-   = note: required by `Index::index`\n+note: required by `Index::index`\n+  --> $DIR/on-impl.rs:19:5\n+   |\n+19 |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/on-impl.rs:32:5"}, {"sha": "028200a5558c88a51a482698004472cb8dfa4cda", "filename": "src/test/ui/on-unimplemented/on-trait.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -5,7 +5,11 @@ error[E0277]: the trait bound `std::option::Option<std::vec::Vec<u8>>: MyFromIte\n    |                              ^^^^^^^ a collection of type `std::option::Option<std::vec::Vec<u8>>` cannot be built from an iterator over elements of type `&u8`\n    |\n    = help: the trait `MyFromIterator<&u8>` is not implemented for `std::option::Option<std::vec::Vec<u8>>`\n-   = note: required by `collect`\n+note: required by `collect`\n+  --> $DIR/on-trait.rs:31:1\n+   |\n+31 | fn collect<A, I: Iterator<Item=A>, B: MyFromIterator<A>>(it: I) -> B {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::string::String: Bar::Foo<u8, _, u32>` is not satisfied\n   --> $DIR/on-trait.rs:40:21\n@@ -14,7 +18,11 @@ error[E0277]: the trait bound `std::string::String: Bar::Foo<u8, _, u32>` is not\n    |                     ^^^^^^ test error `std::string::String` with `u8` `_` `u32` in `Bar::Foo`\n    |\n    = help: the trait `Bar::Foo<u8, _, u32>` is not implemented for `std::string::String`\n-   = note: required by `foobar`\n+note: required by `foobar`\n+  --> $DIR/on-trait.rs:21:1\n+   |\n+21 | fn foobar<U: Clone, T: Foo<u8, U, u32>>() -> T {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9046b90f0e9c3333b7dd62766abf201e7c06c465", "filename": "src/test/ui/span/issue-29595.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -4,7 +4,11 @@ error[E0277]: the trait bound `u8: Tr` is not satisfied\n 17 |     let a: u8 = Tr::C; //~ ERROR the trait bound `u8: Tr` is not satisfied\n    |                 ^^^^^ the trait `Tr` is not implemented for `u8`\n    |\n-   = note: required by `Tr::C`\n+note: required by `Tr::C`\n+  --> $DIR/issue-29595.rs:13:5\n+   |\n+13 |     const C: Self;\n+   |     ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3b32b4a9eb7ba44f016784de1a326775530c10f2", "filename": "src/test/ui/suggestions/try-operator-on-main.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -28,7 +28,11 @@ error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n 25 |     try_trait_generic::<()>(); //~ ERROR the trait bound\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Try` is not implemented for `()`\n    |\n-   = note: required by `try_trait_generic`\n+note: required by `try_trait_generic`\n+  --> $DIR/try-operator-on-main.rs:30:1\n+   |\n+30 | fn try_trait_generic<T: Try>() -> T {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n   --> $DIR/try-operator-on-main.rs:32:5"}, {"sha": "3ed6e5daf00613500f6af0ea98716db52de22d91", "filename": "src/test/ui/type-annotation-needed.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Ftype-annotation-needed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Ftype-annotation-needed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-annotation-needed.rs?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo<T: Into<String>>(x: i32) {}\n+//~^ NOTE required by\n+\n+fn main() {\n+    foo(42);\n+    //~^ ERROR type annotations required\n+}"}, {"sha": "7d49afbaff8af3431a5ca833b5a3d9c7b3907996", "filename": "src/test/ui/type-annotation-needed.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-annotation-needed.stderr?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -0,0 +1,14 @@\n+error[E0283]: type annotations required: cannot resolve `_: std::convert::Into<std::string::String>`\n+  --> $DIR/type-annotation-needed.rs:15:5\n+   |\n+15 |     foo(42);\n+   |     ^^^\n+   |\n+note: required by `foo`\n+  --> $DIR/type-annotation-needed.rs:11:1\n+   |\n+11 | fn foo<T: Into<String>>(x: i32) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "cf270afdeb173f5ce9cf0b4c30a428232c70213d", "filename": "src/test/ui/type-check/issue-40294.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b36030a65351892a3aa3ddc20ea53d4a6c589c2/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr?ref=9b36030a65351892a3aa3ddc20ea53d4a6c589c2", "patch": "@@ -10,7 +10,11 @@ error[E0283]: type annotations required: cannot resolve `&'a T: Foo`\n 21 | | }\n    | |_^\n    |\n-   = note: required by `Foo`\n+note: required by `Foo`\n+  --> $DIR/issue-40294.rs:11:1\n+   |\n+11 | trait Foo: Sized {\n+   | ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}