{"sha": "0c25e6f509dfd14b4516dd1cf209e1a0deedec65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMjVlNmY1MDlkZmQxNGI0NTE2ZGQxY2YyMDllMWEwZGVlZGVjNjU=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-02-19T14:23:26Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-02-22T14:03:21Z"}, "message": "Convert some panics to bug diagnostics in trans", "tree": {"sha": "a28f2d6a45b55bc1eba11c4e604e9b9b8b824660", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a28f2d6a45b55bc1eba11c4e604e9b9b8b824660"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c25e6f509dfd14b4516dd1cf209e1a0deedec65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c25e6f509dfd14b4516dd1cf209e1a0deedec65", "html_url": "https://github.com/rust-lang/rust/commit/0c25e6f509dfd14b4516dd1cf209e1a0deedec65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c25e6f509dfd14b4516dd1cf209e1a0deedec65/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb1b500a9a69b149295c37c2fe2c9409f406f9ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb1b500a9a69b149295c37c2fe2c9409f406f9ea", "html_url": "https://github.com/rust-lang/rust/commit/eb1b500a9a69b149295c37c2fe2c9409f406f9ea"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "b5393247f720d583ac42b4dd72d5c7022a2ede53", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0c25e6f509dfd14b4516dd1cf209e1a0deedec65/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c25e6f509dfd14b4516dd1cf209e1a0deedec65/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=0c25e6f509dfd14b4516dd1cf209e1a0deedec65", "patch": "@@ -301,7 +301,7 @@ pub fn decl_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                    self_type.repr(ccx.tcx()));\n             (&function_type.sig, RustCall, Some(llenvironment_type))\n         }\n-        _ => panic!(\"expected closure or fn\")\n+        _ => ccx.sess().bug(\"expected closure or fn\")\n     };\n \n     let sig = ty::erase_late_bound_regions(ccx.tcx(), sig);\n@@ -2410,12 +2410,15 @@ fn register_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                          node_id: ast::NodeId,\n                          node_type: Ty<'tcx>)\n                          -> ValueRef {\n-    match node_type.sty {\n-        ty::ty_bare_fn(_, ref f) => {\n-            assert!(f.abi == Rust || f.abi == RustCall);\n+    if let ty::ty_bare_fn(_, ref f) = node_type.sty {\n+        if f.abi != Rust && f.abi != RustCall {\n+            ccx.sess().span_bug(sp, &format!(\"only `Rust` or `rust-call` calling conventions \\\n+                                              are valid for this function, but it uses `{:?}`\",\n+                                              f.abi.name));\n         }\n-        _ => panic!(\"expected bare rust fn\")\n-    };\n+    } else {\n+        ccx.sess().span_bug(sp, \"expected bare rust function\")\n+    }\n \n     let llfn = decl_rust_fn(ccx, node_type, &sym[..]);\n     finish_register_fn(ccx, sp, sym, node_id, llfn);\n@@ -2802,7 +2805,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n                     llfn\n                 }\n \n-                _ => panic!(\"get_item_val: weird result in table\")\n+                _ => ccx.sess().bug(\"get_item_val: weird result in table\")\n             };\n \n             match attr::first_attr_value_str_by_name(&i.attrs,\n@@ -2866,7 +2869,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n             let args = match v.node.kind {\n                 ast::TupleVariantKind(ref args) => args,\n                 ast::StructVariantKind(_) => {\n-                    panic!(\"struct variant kind unexpected in get_item_val\")\n+                    ccx.sess().bug(\"struct variant kind unexpected in get_item_val\")\n                 }\n             };\n             assert!(args.len() != 0);\n@@ -2882,7 +2885,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n                 ast::ItemEnum(_, _) => {\n                     register_fn(ccx, (*v).span, sym, id, ty)\n                 }\n-                _ => panic!(\"NodeVariant, shouldn't happen\")\n+                _ => ccx.sess().bug(\"NodeVariant, shouldn't happen\")\n             };\n             set_inline_hint(llfn);\n             llfn"}]}