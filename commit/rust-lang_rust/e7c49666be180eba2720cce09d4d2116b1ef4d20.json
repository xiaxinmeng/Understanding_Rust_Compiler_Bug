{"sha": "e7c49666be180eba2720cce09d4d2116b1ef4d20", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YzQ5NjY2YmUxODBlYmEyNzIwY2NlMDlkNGQyMTE2YjFlZjRkMjA=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-31T20:44:51Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-31T20:44:51Z"}, "message": "Expand fixme comments", "tree": {"sha": "3d5a9bd6fa75c44c4964738b57df21bf4e64b29f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d5a9bd6fa75c44c4964738b57df21bf4e64b29f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7c49666be180eba2720cce09d4d2116b1ef4d20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c49666be180eba2720cce09d4d2116b1ef4d20", "html_url": "https://github.com/rust-lang/rust/commit/e7c49666be180eba2720cce09d4d2116b1ef4d20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7c49666be180eba2720cce09d4d2116b1ef4d20/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31b6a750f8e37d011060a17ffd816d721d087844", "url": "https://api.github.com/repos/rust-lang/rust/commits/31b6a750f8e37d011060a17ffd816d721d087844", "html_url": "https://github.com/rust-lang/rust/commit/31b6a750f8e37d011060a17ffd816d721d087844"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "4cdb5913deb5affac5c188ddaa1876a7a2b535ee", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7c49666be180eba2720cce09d4d2116b1ef4d20/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c49666be180eba2720cce09d4d2116b1ef4d20/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=e7c49666be180eba2720cce09d4d2116b1ef4d20", "patch": "@@ -166,7 +166,10 @@ impl Path {\n     }\n \n     /// Converts a known mod path to `Path`.\n-    pub fn from_known_path(path: ModPath, generic_args: Vec<Option<Interned<GenericArgs>>>) -> Path {\n+    pub fn from_known_path(\n+        path: ModPath,\n+        generic_args: Vec<Option<Interned<GenericArgs>>>,\n+    ) -> Path {\n         Path { type_anchor: None, mod_path: Interned::new(path), generic_args }\n     }\n "}, {"sha": "3efbce77361ebf9dd29d0106385a7e8a2e4a9a94", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7c49666be180eba2720cce09d4d2116b1ef4d20/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c49666be180eba2720cce09d4d2116b1ef4d20/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=e7c49666be180eba2720cce09d4d2116b1ef4d20", "patch": "@@ -376,6 +376,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         // https://github.com/rust-lang/rust/blob/25c15cdbe/compiler/rustc_mir_build/src/thir/pattern/check_match.rs#L200-L201\n \n         let witnesses = report.non_exhaustiveness_witnesses;\n+        // FIXME Report witnesses\n         // eprintln!(\"compute_match_usefulness(..) -> {:?}\", &witnesses);\n         if !witnesses.is_empty() {\n             if let Ok(source_ptr) = source_map.expr_syntax(id) {"}, {"sha": "1f4219b4226e4751942438946af077a855cb5945", "filename": "crates/hir_ty/src/diagnostics/match_check/deconstruct_pat.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7c49666be180eba2720cce09d4d2116b1ef4d20/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c49666be180eba2720cce09d4d2116b1ef4d20/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs?ref=e7c49666be180eba2720cce09d4d2116b1ef4d20", "patch": "@@ -864,7 +864,8 @@ impl Fields {\n         pat: PatId,\n         cx: &MatchCheckCtx<'_>,\n     ) -> Self {\n-        // FIXME(iDawer): these alocations and clones are so unfortunate (+1 for switching to references)\n+        // FIXME(iDawer): Factor out pattern deep cloning. See discussion:\n+        // https://github.com/rust-analyzer/rust-analyzer/pull/8717#discussion_r633086640\n         let mut arena = cx.pattern_arena.borrow_mut();\n         match arena[pat].kind.as_ref() {\n             PatKind::Deref { subpattern } => {"}, {"sha": "83b094a893831b77d098613b1cbdc681d67c5f0c", "filename": "crates/hir_ty/src/diagnostics/match_check/usefulness.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7c49666be180eba2720cce09d4d2116b1ef4d20/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c49666be180eba2720cce09d4d2116b1ef4d20/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs?ref=e7c49666be180eba2720cce09d4d2116b1ef4d20", "patch": "@@ -376,9 +376,10 @@ impl PatIdExt for PatId {\n     fn expand_or_pat(self, cx: &MatchCheckCtx<'_>) -> Vec<Self> {\n         fn expand(pat: PatId, vec: &mut Vec<PatId>, pat_arena: &mut PatternArena) {\n             if let PatKind::Or { pats } = pat_arena[pat].kind.as_ref() {\n+                // FIXME(iDawer): Factor out pattern deep cloning. See discussion:\n+                // https://github.com/rust-analyzer/rust-analyzer/pull/8717#discussion_r633086640\n                 let pats = pats.clone();\n                 for pat in pats {\n-                    // FIXME(iDawer): Ugh, I want to go back to references (PatId -> &Pat)\n                     let pat = pat_arena.alloc(pat.clone());\n                     expand(pat, vec, pat_arena);\n                 }"}]}