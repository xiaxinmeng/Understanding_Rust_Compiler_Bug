{"sha": "9375207461dc69d622ecc46e924be70c08339d33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNzUyMDc0NjFkYzY5ZDYyMmVjYzQ2ZTkyNGJlNzBjMDgzMzlkMzM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-16T19:28:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-16T19:28:47Z"}, "message": "Merge #8060\n\n8060: Move more bounds r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2f1c13483133277b4bc79adac16559d4e2a58418", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f1c13483133277b4bc79adac16559d4e2a58418"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9375207461dc69d622ecc46e924be70c08339d33", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgUQbvCRBK7hj4Ov3rIwAAdHIIAKIVaMf6ihe8FbyJukV0zcU1\nxbjN23JphY5Um/pbqz1gftGYvyDiOoMkpJCBU3r7bVnwXdb4ctt+cf3Z7/YKEvNH\nPLPDKno7llN9THHZSGHGaTBMSXVt3WnMnk1V7TZ7jzl7vb3yUFltSqj9+IRswyNN\nL8QGRcnEcFilInLcBJGqTJry943K7qr9ipRtw58nQuBWm8Q5indAFDP8fzWv4rJt\nIQJQZJS7Ax8S4Wn8EHJcpAF79Esmx/1O+daQvWXSnv3uKYb+1Pth+5BxpXNkRSlC\nbVMSNW+xiuwLCvF9JxUWa61j+eo8PK3X5AvXOasMsNI+vZKrnxsyA8y7h1PJXJ0=\n=Gi8I\n-----END PGP SIGNATURE-----\n", "payload": "tree 2f1c13483133277b4bc79adac16559d4e2a58418\nparent 4771a5f1ca810a3f3697aea8da5af6dc8c03bbd1\nparent d733c9bdad81e23959b1a43421a9fa6ea92eda9f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615922927 +0000\ncommitter GitHub <noreply@github.com> 1615922927 +0000\n\nMerge #8060\n\n8060: Move more bounds r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9375207461dc69d622ecc46e924be70c08339d33", "html_url": "https://github.com/rust-lang/rust/commit/9375207461dc69d622ecc46e924be70c08339d33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9375207461dc69d622ecc46e924be70c08339d33/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4771a5f1ca810a3f3697aea8da5af6dc8c03bbd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4771a5f1ca810a3f3697aea8da5af6dc8c03bbd1", "html_url": "https://github.com/rust-lang/rust/commit/4771a5f1ca810a3f3697aea8da5af6dc8c03bbd1"}, {"sha": "d733c9bdad81e23959b1a43421a9fa6ea92eda9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d733c9bdad81e23959b1a43421a9fa6ea92eda9f", "html_url": "https://github.com/rust-lang/rust/commit/d733c9bdad81e23959b1a43421a9fa6ea92eda9f"}], "stats": {"total": 90, "additions": 54, "deletions": 36}, "files": [{"sha": "9ad0c98168cae3d12b498f78916924d37c72afe7", "filename": "crates/ide_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9375207461dc69d622ecc46e924be70c08339d33/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9375207461dc69d622ecc46e924be70c08339d33/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=9375207461dc69d622ecc46e924be70c08339d33", "patch": "@@ -40,9 +40,9 @@ pub(crate) fn move_bounds_to_where_clause(acc: &mut Assists, ctx: &AssistContext\n             let where_clause: ast::WhereClause = match_ast! {\n                 match parent {\n                     ast::Fn(it) => it.get_or_create_where_clause(),\n-                    // ast::Trait(it) => it.get_or_create_where_clause(),\n+                    ast::Trait(it) => it.get_or_create_where_clause(),\n                     ast::Impl(it) => it.get_or_create_where_clause(),\n-                    // ast::Enum(it) => it.get_or_create_where_clause(),\n+                    ast::Enum(it) => it.get_or_create_where_clause(),\n                     ast::Struct(it) => it.get_or_create_where_clause(),\n                     _ => return,\n                 }\n@@ -82,51 +82,35 @@ mod tests {\n     fn move_bounds_to_where_clause_fn() {\n         check_assist(\n             move_bounds_to_where_clause,\n-            r#\"\n-            fn foo<T: u32, $0F: FnOnce(T) -> T>() {}\n-            \"#,\n-            r#\"\n-            fn foo<T, F>() where T: u32, F: FnOnce(T) -> T {}\n-            \"#,\n+            r#\"fn foo<T: u32, $0F: FnOnce(T) -> T>() {}\"#,\n+            r#\"fn foo<T, F>() where T: u32, F: FnOnce(T) -> T {}\"#,\n         );\n     }\n \n     #[test]\n     fn move_bounds_to_where_clause_impl() {\n         check_assist(\n             move_bounds_to_where_clause,\n-            r#\"\n-            impl<U: u32, $0T> A<U, T> {}\n-            \"#,\n-            r#\"\n-            impl<U, T> A<U, T> where U: u32 {}\n-            \"#,\n+            r#\"impl<U: u32, $0T> A<U, T> {}\"#,\n+            r#\"impl<U, T> A<U, T> where U: u32 {}\"#,\n         );\n     }\n \n     #[test]\n     fn move_bounds_to_where_clause_struct() {\n         check_assist(\n             move_bounds_to_where_clause,\n-            r#\"\n-            struct A<$0T: Iterator<Item = u32>> {}\n-            \"#,\n-            r#\"\n-            struct A<T> where T: Iterator<Item = u32> {}\n-            \"#,\n+            r#\"struct A<$0T: Iterator<Item = u32>> {}\"#,\n+            r#\"struct A<T> where T: Iterator<Item = u32> {}\"#,\n         );\n     }\n \n     #[test]\n     fn move_bounds_to_where_clause_tuple_struct() {\n         check_assist(\n             move_bounds_to_where_clause,\n-            r#\"\n-            struct Pair<$0T: u32>(T, T);\n-            \"#,\n-            r#\"\n-            struct Pair<T>(T, T) where T: u32;\n-            \"#,\n+            r#\"struct Pair<$0T: u32>(T, T);\"#,\n+            r#\"struct Pair<T>(T, T) where T: u32;\"#,\n         );\n     }\n }"}, {"sha": "1788f2a40a81bc20f630c3fa48a54af147968e91", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 44, "deletions": 10, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/9375207461dc69d622ecc46e924be70c08339d33/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9375207461dc69d622ecc46e924be70c08339d33/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=9375207461dc69d622ecc46e924be70c08339d33", "patch": "@@ -27,7 +27,7 @@ impl GenericParamsOwnerEdit for ast::Fn {\n             } else {\n                 Position::last_child_of(self.syntax().clone())\n             };\n-            create_where_clause(position)\n+            create_where_clause(position, true)\n         }\n         self.where_clause().unwrap()\n     }\n@@ -36,16 +36,31 @@ impl GenericParamsOwnerEdit for ast::Fn {\n impl GenericParamsOwnerEdit for ast::Impl {\n     fn get_or_create_where_clause(&self) -> WhereClause {\n         if self.where_clause().is_none() {\n-            let position = if let Some(ty) = self.self_ty() {\n-                Position::after(ty.syntax().clone())\n+            let position = if let Some(items) = self.assoc_item_list() {\n+                Position::before(items.syntax().clone())\n             } else {\n                 Position::last_child_of(self.syntax().clone())\n             };\n-            create_where_clause(position)\n+            create_where_clause(position, false)\n         }\n         self.where_clause().unwrap()\n     }\n }\n+\n+impl GenericParamsOwnerEdit for ast::Trait {\n+    fn get_or_create_where_clause(&self) -> WhereClause {\n+        if self.where_clause().is_none() {\n+            let position = if let Some(items) = self.assoc_item_list() {\n+                Position::before(items.syntax().clone())\n+            } else {\n+                Position::last_child_of(self.syntax().clone())\n+            };\n+            create_where_clause(position, false)\n+        }\n+        self.where_clause().unwrap()\n+    }\n+}\n+\n impl GenericParamsOwnerEdit for ast::Struct {\n     fn get_or_create_where_clause(&self) -> WhereClause {\n         if self.where_clause().is_none() {\n@@ -62,17 +77,36 @@ impl GenericParamsOwnerEdit for ast::Struct {\n             } else {\n                 Position::last_child_of(self.syntax().clone())\n             };\n-            create_where_clause(position)\n+            create_where_clause(position, true)\n+        }\n+        self.where_clause().unwrap()\n+    }\n+}\n+\n+impl GenericParamsOwnerEdit for ast::Enum {\n+    fn get_or_create_where_clause(&self) -> WhereClause {\n+        if self.where_clause().is_none() {\n+            let position = if let Some(gpl) = self.generic_param_list() {\n+                Position::after(gpl.syntax().clone())\n+            } else if let Some(name) = self.name() {\n+                Position::after(name.syntax().clone())\n+            } else {\n+                Position::last_child_of(self.syntax().clone())\n+            };\n+            create_where_clause(position, true)\n         }\n         self.where_clause().unwrap()\n     }\n }\n \n-fn create_where_clause(position: Position) {\n-    let elements = vec![\n-        make::tokens::single_space().into(),\n-        make::where_clause(empty()).clone_for_update().syntax().clone().into(),\n-    ];\n+fn create_where_clause(position: Position, after: bool) {\n+    let mut elements = vec![make::where_clause(empty()).clone_for_update().syntax().clone().into()];\n+    let ws = make::tokens::single_space().into();\n+    if after {\n+        elements.insert(0, ws)\n+    } else {\n+        elements.push(ws)\n+    }\n     ted::insert_all(position, elements);\n }\n "}]}