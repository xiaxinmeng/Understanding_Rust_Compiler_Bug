{"sha": "ca49fd402af8e7bf613c43e996274b5a017958d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNDlmZDQwMmFmOGU3YmY2MTNjNDNlOTk2Mjc0YjVhMDE3OTU4ZDI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-05T21:27:56Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-05T22:39:12Z"}, "message": "wip", "tree": {"sha": "967e847cfe10d615ebb0629da3972388ff045644", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/967e847cfe10d615ebb0629da3972388ff045644"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca49fd402af8e7bf613c43e996274b5a017958d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca49fd402af8e7bf613c43e996274b5a017958d2", "html_url": "https://github.com/rust-lang/rust/commit/ca49fd402af8e7bf613c43e996274b5a017958d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca49fd402af8e7bf613c43e996274b5a017958d2/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e16dbb7888504ef5d0de0c14493fc8ecc492ee30", "url": "https://api.github.com/repos/rust-lang/rust/commits/e16dbb7888504ef5d0de0c14493fc8ecc492ee30", "html_url": "https://github.com/rust-lang/rust/commit/e16dbb7888504ef5d0de0c14493fc8ecc492ee30"}], "stats": {"total": 190, "additions": 93, "deletions": 97}, "files": [{"sha": "b0aeb78afaa836e2fd8667da0522001d935300da", "filename": "src/libcore/cmath.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Flibcore%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Flibcore%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmath.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -40,15 +40,15 @@ pub extern mod c_double {\n     #[link_name=\"fmax\"] pure fn fmax(a: c_double, b: c_double) -> c_double;\n     #[link_name=\"fmin\"] pure fn fmin(a: c_double, b: c_double) -> c_double;\n     pure fn nextafter(x: c_double, y: c_double) -> c_double;\n-    pure fn frexp(n: c_double, &value: c_int) -> c_double;\n+    pure fn frexp(n: c_double, value: &mut c_int) -> c_double;\n     pure fn hypot(x: c_double, y: c_double) -> c_double;\n     pure fn ldexp(x: c_double, n: c_int) -> c_double;\n     #[cfg(unix)]\n     #[link_name=\"lgamma_r\"] pure fn lgamma(n: c_double,\n-                                           &sign: c_int) -> c_double;\n+                                           sign: &mut c_int) -> c_double;\n     #[cfg(windows)]\n     #[link_name=\"__lgamma_r\"] pure fn lgamma(n: c_double,\n-                                             &sign: c_int) -> c_double;\n+                                             sign: &mut c_int) -> c_double;\n     // renamed: log is a reserved keyword; ln seems more natural, too\n     #[link_name=\"log\"] pure fn ln(n: c_double) -> c_double;\n     // renamed: \"logb\" /often/ is confused for log2 by beginners\n@@ -58,7 +58,7 @@ pub extern mod c_double {\n     pure fn log10(n: c_double) -> c_double;\n     pure fn log2(n: c_double) -> c_double;\n     #[link_name=\"ilogb\"] pure fn ilog_radix(n: c_double) -> c_int;\n-    pure fn modf(n: c_double, &iptr: c_double) -> c_double;\n+    pure fn modf(n: c_double, iptr: &mut c_double) -> c_double;\n     pure fn pow(n: c_double, e: c_double) -> c_double;\n // FIXME (#1379): enable when rounding modes become available\n //    pure fn rint(n: c_double) -> c_double;\n@@ -110,7 +110,7 @@ pub extern mod c_float {\n     #[link_name=\"fdimf\"] pure fn abs_sub(a: c_float, b: c_float) -> c_float;\n     #[link_name=\"floorf\"] pure fn floor(n: c_float) -> c_float;\n     #[link_name=\"frexpf\"] pure fn frexp(n: c_float,\n-                                        &value: c_int) -> c_float;\n+                                        value: &mut c_int) -> c_float;\n     #[link_name=\"fmaf\"] pure fn mul_add(a: c_float,\n                                         b: c_float, c: c_float) -> c_float;\n     #[link_name=\"fmaxf\"] pure fn fmax(a: c_float, b: c_float) -> c_float;\n@@ -122,11 +122,11 @@ pub extern mod c_float {\n \n     #[cfg(unix)]\n     #[link_name=\"lgammaf_r\"] pure fn lgamma(n: c_float,\n-                                            &sign: c_int) -> c_float;\n+                                            sign: &mut c_int) -> c_float;\n \n     #[cfg(windows)]\n     #[link_name=\"__lgammaf_r\"] pure fn lgamma(n: c_float,\n-                                              &sign: c_int) -> c_float;\n+                                              sign: &mut c_int) -> c_float;\n \n     #[link_name=\"logf\"] pure fn ln(n: c_float) -> c_float;\n     #[link_name=\"logbf\"] pure fn log_radix(n: c_float) -> c_float;\n@@ -135,7 +135,7 @@ pub extern mod c_float {\n     #[link_name=\"log10f\"] pure fn log10(n: c_float) -> c_float;\n     #[link_name=\"ilogbf\"] pure fn ilog_radix(n: c_float) -> c_int;\n     #[link_name=\"modff\"] pure fn modf(n: c_float,\n-                                      &iptr: c_float) -> c_float;\n+                                      iptr: &mut c_float) -> c_float;\n     #[link_name=\"powf\"] pure fn pow(n: c_float, e: c_float) -> c_float;\n // FIXME (#1379): enable when rounding modes become available\n //    #[link_name=\"rintf\"] pure fn rint(n: c_float) -> c_float;"}, {"sha": "8fa1e0cf3f0a03f6307e9245868140746be4f427", "filename": "src/libstd/time.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -7,9 +7,18 @@ use result::{Result, Ok, Err};\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n-    #[legacy_exports];\n+    #[legacy_exports]\n+    #[cfg(stage0)]\n     fn get_time(&sec: i64, &nsec: i32);\n+    #[cfg(stage1)]\n+    #[cfg(stage2)]\n+    fn get_time(sec: &mut i64, nsec: &mut i32);\n+\n+    #[cfg(stage0)]\n     fn precise_time_ns(&ns: u64);\n+    #[cfg(stage1)]\n+    #[cfg(stage2)]\n+    fn precise_time_ns(ns: &mut u64);\n \n     fn rust_tzset();\n     // FIXME: The i64 values can be passed by-val when #2064 is fixed.\n@@ -33,22 +42,41 @@ impl Timespec : Eq {\n  * Returns the current time as a `timespec` containing the seconds and\n  * nanoseconds since 1970-01-01T00:00:00Z.\n  */\n+#[cfg(stage0)]\n pub fn get_time() -> Timespec {\n     let mut sec = 0i64;\n     let mut nsec = 0i32;\n     rustrt::get_time(sec, nsec);\n     return {sec: sec, nsec: nsec};\n }\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub fn get_time() -> Timespec {\n+    let mut sec = 0i64;\n+    let mut nsec = 0i32;\n+    rustrt::get_time(&mut sec, &mut nsec);\n+    return {sec: sec, nsec: nsec};\n+}\n+\n \n /**\n  * Returns the current value of a high-resolution performance counter\n  * in nanoseconds since an unspecified epoch.\n  */\n+#[cfg(stage0)]\n pub fn precise_time_ns() -> u64 {\n     let mut ns = 0u64;\n     rustrt::precise_time_ns(ns);\n     ns\n }\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub fn precise_time_ns() -> u64 {\n+    let mut ns = 0u64;\n+    rustrt::precise_time_ns(&mut ns);\n+    ns\n+}\n+\n \n /**\n  * Returns the current value of a high-resolution performance counter"}, {"sha": "a50189cf5989a701b22fdf9a6fdb2e979ac99a76", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -574,7 +574,7 @@ impl<T:cmp::Eq> inferable<T> : cmp::Eq {\n \n // \"resolved\" mode: the real modes.\n #[auto_serialize]\n-enum rmode { by_ref, by_val, by_mutbl_ref, by_move, by_copy }\n+enum rmode { by_ref, by_val, by_move, by_copy }\n \n impl rmode : to_bytes::IterBytes {\n     pure fn iter_bytes(+lsb0: bool, f: to_bytes::Cb) {"}, {"sha": "4f265e1919c2eee2b34a9dc6b01fe51e9d863934", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -127,14 +127,14 @@ fn consume_non_eol_whitespace(rdr: string_reader) {\n     }\n }\n \n-fn push_blank_line_comment(rdr: string_reader, &comments: ~[cmnt]) {\n+fn push_blank_line_comment(rdr: string_reader, comments: &mut ~[cmnt]) {\n     debug!(\">>> blank-line comment\");\n     let v: ~[~str] = ~[];\n     comments.push({style: blank_line, lines: v, pos: rdr.chpos});\n }\n \n fn consume_whitespace_counting_blank_lines(rdr: string_reader,\n-                                           &comments: ~[cmnt]) {\n+                                           comments: &mut ~[cmnt]) {\n     while is_whitespace(rdr.curr) && !is_eof(rdr) {\n         if rdr.col == 0u && rdr.curr == '\\n' {\n             push_blank_line_comment(rdr, comments);\n@@ -145,7 +145,7 @@ fn consume_whitespace_counting_blank_lines(rdr: string_reader,\n \n \n fn read_shebang_comment(rdr: string_reader, code_to_the_left: bool,\n-                                                        &comments: ~[cmnt]) {\n+                                            comments: &mut ~[cmnt]) {\n     debug!(\">>> shebang comment\");\n     let p = rdr.chpos;\n     debug!(\"<<< shebang comment\");\n@@ -157,7 +157,7 @@ fn read_shebang_comment(rdr: string_reader, code_to_the_left: bool,\n }\n \n fn read_line_comments(rdr: string_reader, code_to_the_left: bool,\n-                                                        &comments: ~[cmnt]) {\n+                                          comments: &mut ~[cmnt]) {\n     debug!(\">>> line comments\");\n     let p = rdr.chpos;\n     let mut lines: ~[~str] = ~[];\n@@ -188,8 +188,8 @@ fn all_whitespace(s: ~str, begin: uint, end: uint) -> bool {\n     return true;\n }\n \n-fn trim_whitespace_prefix_and_push_line(&lines: ~[~str],\n-                                        s: ~str, col: uint) unsafe {\n+fn trim_whitespace_prefix_and_push_line(lines: &mut ~[~str],\n+                                        s: ~str, col: uint) {\n     let mut s1;\n     let len = str::len(s);\n     if all_whitespace(s, 0u, uint::min(len, col)) {\n@@ -202,7 +202,7 @@ fn trim_whitespace_prefix_and_push_line(&lines: ~[~str],\n }\n \n fn read_block_comment(rdr: string_reader, code_to_the_left: bool,\n-                                                        &comments: ~[cmnt]) {\n+                                          comments: &mut ~[cmnt]) {\n     debug!(\">>> block comment\");\n     let p = rdr.chpos;\n     let mut lines: ~[~str] = ~[];\n@@ -228,7 +228,7 @@ fn read_block_comment(rdr: string_reader, code_to_the_left: bool,\n         debug!(\"=== block comment level %d\", level);\n         if is_eof(rdr) {(rdr as reader).fatal(~\"unterminated block comment\");}\n         if rdr.curr == '\\n' {\n-            trim_whitespace_prefix_and_push_line(lines, curr_line, col);\n+            trim_whitespace_prefix_and_push_line(&mut lines, curr_line, col);\n             curr_line = ~\"\";\n             bump(rdr);\n         } else {\n@@ -248,8 +248,8 @@ fn read_block_comment(rdr: string_reader, code_to_the_left: bool,\n             }\n         }\n     }\n-    if str::len(curr_line) != 0u {\n-        trim_whitespace_prefix_and_push_line(lines, curr_line, col);\n+    if str::len(curr_line) != 0 {\n+        trim_whitespace_prefix_and_push_line(&mut lines, curr_line, col);\n     }\n     let mut style = if code_to_the_left { trailing } else { isolated };\n     consume_non_eol_whitespace(rdr);\n@@ -267,7 +267,7 @@ fn peeking_at_comment(rdr: string_reader) -> bool {\n }\n \n fn consume_comment(rdr: string_reader, code_to_the_left: bool,\n-                   &comments: ~[cmnt]) {\n+                   comments: &mut ~[cmnt]) {\n     debug!(\">>> consume comment\");\n     if rdr.curr == '/' && nextch(rdr) == '/' {\n         read_line_comments(rdr, code_to_the_left, comments);\n@@ -299,11 +299,11 @@ fn gather_comments_and_literals(span_diagnostic: diagnostic::span_handler,\n             consume_non_eol_whitespace(rdr);\n             if rdr.curr == '\\n' {\n                 code_to_the_left = false;\n-                consume_whitespace_counting_blank_lines(rdr, comments);\n+                consume_whitespace_counting_blank_lines(rdr, &mut comments);\n             }\n             while peeking_at_comment(rdr) {\n-                consume_comment(rdr, code_to_the_left, comments);\n-                consume_whitespace_counting_blank_lines(rdr, comments);\n+                consume_comment(rdr, code_to_the_left, &mut comments);\n+                consume_whitespace_counting_blank_lines(rdr, &mut comments);\n             }\n             break;\n         }"}, {"sha": "c91060284910fda1eaf66293271dbe6b7b0c18aa", "filename": "src/libsyntax/parse/eval.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Flibsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Flibsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Feval.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -10,8 +10,8 @@ type ctx =\n fn eval_crate_directives(cx: ctx,\n                          cdirs: ~[@ast::crate_directive],\n                          prefix: &Path,\n-                         &view_items: ~[@ast::view_item],\n-                         &items: ~[@ast::item]) {\n+                         view_items: &mut~[@ast::view_item],\n+                         items: &mut~[@ast::item]) {\n     for cdirs.each |sub_cdir| {\n         eval_crate_directive(cx, *sub_cdir, prefix, view_items, items);\n     }\n@@ -24,7 +24,7 @@ fn eval_crate_directives_to_mod(cx: ctx, cdirs: ~[@ast::crate_directive],\n         = parse_companion_mod(cx, prefix, suffix);\n     let mut view_items: ~[@ast::view_item] = ~[];\n     let mut items: ~[@ast::item] = ~[];\n-    eval_crate_directives(cx, cdirs, prefix, view_items, items);\n+    eval_crate_directives(cx, cdirs, prefix, &mut view_items, &mut items);\n     return ({view_items: vec::append(view_items, cview_items),\n           items: vec::append(items, citems)},\n          cattrs);\n@@ -82,8 +82,8 @@ fn cdir_path_opt(default: ~str, attrs: ~[ast::attribute]) -> ~str {\n }\n \n fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: &Path,\n-                        &view_items: ~[@ast::view_item],\n-                        &items: ~[@ast::item]) {\n+                        view_items: &mut ~[@ast::view_item],\n+                        items: &mut ~[@ast::item]) {\n     match cdir.node {\n       ast::cdir_src_mod(vis, id, attrs) => {\n         let file_path = Path(cdir_path_opt("}, {"sha": "79f7d72d2a563cd257d9180b2792b7ff31db3dd8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -26,7 +26,7 @@ use ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              bind_by_ref, bind_by_implicit_ref, bind_by_value, bind_by_move,\n              bitand, bitor, bitxor, blk, blk_check_mode, bound_const,\n              bound_copy, bound_send, bound_trait, bound_owned, box, by_copy,\n-             by_move, by_mutbl_ref, by_ref, by_val, capture_clause,\n+             by_move, by_ref, by_val, capture_clause,\n              capture_item, cdir_dir_mod, cdir_src_mod, cdir_view_item,\n              class_immutable, class_mutable,\n              crate, crate_cfg, crate_directive, decl, decl_item, decl_local,\n@@ -571,7 +571,7 @@ impl parser {\n     fn parse_arg_mode() -> mode {\n         if self.eat(token::BINOP(token::AND)) {\n             self.warn(~\"Obsolete syntax has no effect\");\n-            expl(by_mutbl_ref)\n+            expl(by_val)\n         } else if self.eat(token::BINOP(token::MINUS)) {\n             expl(by_move)\n         } else if self.eat(token::ANDAND) {\n@@ -1276,7 +1276,8 @@ impl parser {\n \n         return match self.token {\n           token::LPAREN | token::LBRACE | token::LBRACKET => {\n-            let ket = token::flip_delimiter(self.token);\n+              // tjc: ??????\n+            let ket = token::flip_delimiter(copy self.token);\n             tt_delim(vec::append(\n                 ~[parse_tt_tok(self, true)],\n                 vec::append(\n@@ -1297,7 +1298,8 @@ impl parser {\n         return match self.token {\n           token::LBRACE | token::LPAREN | token::LBRACKET => {\n             self.parse_matcher_subseq(name_idx, copy self.token,\n-                                      token::flip_delimiter(self.token))\n+                                      // tjc: not sure why we need a copy\n+                                      token::flip_delimiter(copy self.token))\n           }\n           _ => self.fatal(~\"expected open delimiter\")\n         }"}, {"sha": "99b789cf63fc7bbe01d9612711a8cdcc77c6cf88", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -230,7 +230,7 @@ pure fn can_begin_expr(t: token) -> bool {\n }\n \n /// what's the opposite delimiter?\n-fn flip_delimiter(&t: token::token) -> token::token {\n+fn flip_delimiter(t: token::token) -> token::token {\n     match t {\n       token::LPAREN => token::RPAREN,\n       token::LBRACE => token::RBRACE,"}, {"sha": "bff356e5cb72751a8a28821c1dc00fa51d4e1cb9", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -1688,7 +1688,6 @@ fn print_fn_block_args(s: ps, decl: ast::fn_decl,\n \n fn mode_to_str(m: ast::mode) -> ~str {\n     match m {\n-      ast::expl(ast::by_mutbl_ref) => ~\"&\",\n       ast::expl(ast::by_move) => ~\"-\",\n       ast::expl(ast::by_ref) => ~\"&&\",\n       ast::expl(ast::by_val) => ~\"++\","}, {"sha": "47d91c10818c578c437476973c1fd079d2a38f6e", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -116,7 +116,7 @@ fn encode_mutability(ebml_w: ebml::Writer, mt: class_mutability) {\n type entry<T> = {val: T, pos: uint};\n \n fn add_to_index(ecx: @encode_ctxt, ebml_w: ebml::Writer, path: &[ident],\n-                &index: ~[entry<~str>], name: ident) {\n+                index: &mut ~[entry<~str>], name: ident) {\n     let mut full_path = ~[];\n     full_path.push_all(path);\n     full_path.push(name);"}, {"sha": "1375ff2d0be08d14a2f2cf3e393e6186abfafb96", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -394,7 +394,6 @@ fn parse_arg(st: @pstate, conv: conv_did) -> ty::arg {\n \n fn parse_mode(st: @pstate) -> ast::mode {\n     let m = ast::expl(match next(st) {\n-        '&' => ast::by_mutbl_ref,\n         '-' => ast::by_move,\n         '+' => ast::by_copy,\n         '=' => ast::by_ref,"}, {"sha": "83f92b44fe8f5a996fa113594792605655f6ec89", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -332,7 +332,6 @@ fn enc_arg(w: io::Writer, cx: @ctxt, arg: ty::arg) {\n \n fn enc_mode(w: io::Writer, cx: @ctxt, m: mode) {\n     match ty::resolved_mode(cx.tcx, m) {\n-      by_mutbl_ref => w.write_char('&'),\n       by_move => w.write_char('-'),\n       by_copy => w.write_char('+'),\n       by_ref => w.write_char('='),"}, {"sha": "e2f7ba20642aaf23563b83f7b06c257bf33fca49", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -396,10 +396,10 @@ type req_maps = {\n     pure_map: HashMap<ast::node_id, bckerr>\n };\n \n-fn save_and_restore<T:Copy,U>(&save_and_restore_t: T, f: fn() -> U) -> U {\n-    let old_save_and_restore_t = save_and_restore_t;\n+fn save_and_restore<T:Copy,U>(save_and_restore_t: &mut T, f: fn() -> U) -> U {\n+    let old_save_and_restore_t = *save_and_restore_t;\n     let u <- f();\n-    save_and_restore_t = old_save_and_restore_t;\n+    *save_and_restore_t = old_save_and_restore_t;\n     move u\n }\n "}, {"sha": "51beff021fa7e329a25f1948c2d37081a85e54f4", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -529,8 +529,7 @@ impl check_loan_ctxt {\n                 ast::by_move => {\n                     self.check_move_out(*arg);\n                 }\n-                ast::by_mutbl_ref | ast::by_ref |\n-                ast::by_copy | ast::by_val => {\n+                ast::by_ref | ast::by_copy | ast::by_val => {\n                 }\n             }\n         }\n@@ -542,9 +541,9 @@ fn check_loans_in_fn(fk: visit::fn_kind, decl: ast::fn_decl, body: ast::blk,\n                      visitor: visit::vt<check_loan_ctxt>) {\n \n     debug!(\"purity on entry=%?\", copy self.declared_purity);\n-    do save_and_restore(self.in_ctor) {\n-        do save_and_restore(self.declared_purity) {\n-            do save_and_restore(self.fn_args) {\n+    do save_and_restore(&mut(self.in_ctor)) {\n+        do save_and_restore(&mut(self.declared_purity)) {\n+            do save_and_restore(&mut(self.fn_args)) {\n                 let is_stack_closure = self.is_stack_closure(id);\n                 let fty = ty::node_id_to_type(self.tcx(), id);\n                 self.declared_purity = ty::determine_inherited_purity(\n@@ -667,7 +666,7 @@ fn check_loans_in_expr(expr: @ast::expr,\n fn check_loans_in_block(blk: ast::blk,\n                         &&self: check_loan_ctxt,\n                         vt: visit::vt<check_loan_ctxt>) {\n-    do save_and_restore(self.declared_purity) {\n+    do save_and_restore(&mut(self.declared_purity)) {\n         self.check_for_conflicting_loans(blk.node.id);\n \n         match blk.node.rules {"}, {"sha": "5dfde8c9af649c4844c240e6439b786226a2640d", "filename": "src/rustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -115,10 +115,6 @@ fn req_loans_in_expr(ex: @ast::expr,\n         let scope_r = ty::re_scope(ex.id);\n         for vec::each2(args, arg_tys) |arg, arg_ty| {\n             match ty::resolved_mode(self.tcx(), arg_ty.mode) {\n-              ast::by_mutbl_ref => {\n-                let arg_cmt = self.bccx.cat_expr(*arg);\n-                self.guarantee_valid(arg_cmt, m_mutbl, scope_r);\n-              }\n               ast::by_ref => {\n                 let arg_cmt = self.bccx.cat_expr(*arg);\n                 self.guarantee_valid(arg_cmt, m_imm,  scope_r);"}, {"sha": "1da145cabc9fa9eb10dea0cddd03d3b42be15c2d", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -319,13 +319,13 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n         for exprs.each |expr| { maybe_copy(cx, *expr, None); }\n       }\n       expr_call(f, args, _) => {\n-        let mut i = 0u;\n+        let mut i = 0;\n         for ty::ty_fn_args(ty::expr_ty(cx.tcx, f)).each |arg_t| {\n             match ty::arg_mode(cx.tcx, *arg_t) {\n               by_copy => maybe_copy(cx, args[i], None),\n-              by_ref | by_val | by_mutbl_ref | by_move => ()\n+              by_ref | by_val | by_move => ()\n             }\n-            i += 1u;\n+            i += 1;\n         }\n       }\n       expr_field(lhs, _, _) => {\n@@ -335,7 +335,7 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n             Some(ref mme) => {\n                 match ty::arg_mode(cx.tcx, mme.self_arg) {\n                     by_copy => maybe_copy(cx, lhs, None),\n-                    by_ref | by_val | by_mutbl_ref | by_move => ()\n+                    by_ref | by_val | by_move => ()\n                 }\n             }\n             _ => ()\n@@ -465,18 +465,10 @@ fn check_imm_free_var(cx: ctx, def: def, sp: span) {\n             cx.tcx.sess.span_err(sp, msg);\n         }\n       }\n-      def_arg(_, mode) => {\n-        match ty::resolved_mode(cx.tcx, mode) {\n-          by_ref | by_val | by_move | by_copy => { /* ok */ }\n-          by_mutbl_ref => {\n-            cx.tcx.sess.span_err(sp, msg);\n-          }\n-        }\n-      }\n       def_upvar(_, def1, _, _) => {\n         check_imm_free_var(cx, *def1, sp);\n       }\n-      def_binding(*) | def_self(*) => { /*ok*/ }\n+      def_arg(*) | def_binding(*) | def_self(*) => { /*ok*/ }\n       _ => {\n         cx.tcx.sess.span_bug(\n             sp,"}, {"sha": "bdf808e8568f3332f24de824b058918584cc9c5a", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -398,8 +398,8 @@ impl IrMaps {\n \n             (*v).push(id);\n           }\n-          Arg(_, _, by_ref) | Arg(_, _, by_mutbl_ref) |\n-          Arg(_, _, by_val) | Self | Field(_) | ImplicitRet |\n+          Arg(_, _, by_ref) | Arg(_, _, by_val) | Self | Field(_) |\n+          ImplicitRet |\n           Local(LocalInfo {kind: FromMatch(bind_by_implicit_ref), _}) => {\n             debug!(\"--but it is not owned\");\n           }\n@@ -831,9 +831,9 @@ impl Liveness {\n         let mut changed = false;\n         do self.indices2(ln, succ_ln) |idx, succ_idx| {\n             changed |= copy_if_invalid(copy self.users[succ_idx].reader,\n-                                       self.users[idx].reader);\n+                                       &mut self.users[idx].reader);\n             changed |= copy_if_invalid(copy self.users[succ_idx].writer,\n-                                       self.users[idx].writer);\n+                                       &mut self.users[idx].writer);\n             if self.users[succ_idx].used && !self.users[idx].used {\n                 self.users[idx].used = true;\n                 changed = true;\n@@ -844,10 +844,10 @@ impl Liveness {\n                ln.to_str(), self.ln_str(succ_ln), first_merge, changed);\n         return changed;\n \n-        fn copy_if_invalid(src: LiveNode, &dst: LiveNode) -> bool {\n+        fn copy_if_invalid(src: LiveNode, dst: &mut LiveNode) -> bool {\n             if src.is_valid() {\n                 if !dst.is_valid() {\n-                    dst = src;\n+                    *dst = src;\n                     return true;\n                 }\n             }\n@@ -919,7 +919,7 @@ impl Liveness {\n         // inputs passed by & mode should be considered live on exit:\n         for decl.inputs.each |arg| {\n             match ty::resolved_mode(self.tcx, arg.mode) {\n-              by_mutbl_ref | by_ref | by_val => {\n+              by_ref | by_val => {\n                 // These are \"non-owned\" modes, so register a read at\n                 // the end.  This will prevent us from moving out of\n                 // such variables but also prevent us from registering\n@@ -1573,7 +1573,7 @@ fn check_expr(expr: @expr, &&self: @Liveness, vt: vt<@Liveness>) {\n         let targs = ty::ty_fn_args(ty::expr_ty(self.tcx, f));\n         for vec::each2(args, targs) |arg_expr, arg_ty| {\n             match ty::resolved_mode(self.tcx, arg_ty.mode) {\n-                by_val | by_copy | by_ref | by_mutbl_ref => {}\n+                by_val | by_copy | by_ref => {}\n                 by_move => {\n                     self.check_move_from_expr(*arg_expr, vt);\n                 }\n@@ -1866,19 +1866,6 @@ impl @Liveness {\n         for decl.inputs.each |arg| {\n             let var = self.variable(arg.id, arg.ty.span);\n             match ty::resolved_mode(self.tcx, arg.mode) {\n-              by_mutbl_ref => {\n-                // for mutable reference arguments, something like\n-                //    x = 1;\n-                // is not worth warning about, as it has visible\n-                // side effects outside the fn.\n-                match self.assigned_on_entry(entry_ln, var) {\n-                  Some(_) => { /*ok*/ }\n-                  None => {\n-                    // but if it is not written, it ought to be used\n-                    self.warn_about_unused(sp, entry_ln, var);\n-                  }\n-                }\n-              }\n               by_val | by_ref | by_move | by_copy => {\n                 self.warn_about_unused(sp, entry_ln, var);\n               }"}, {"sha": "dc5874ea2cfaebe2e19149a2b10f0d9553cbe94d", "filename": "src/rustc/middle/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmem_categorization.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -523,9 +523,6 @@ impl &mem_categorization_ctxt {\n             // m: mutability of the argument\n             // lp: loan path, must be none for aliasable things\n             let {m,lp} = match ty::resolved_mode(self.tcx, mode) {\n-              ast::by_mutbl_ref => {\n-                {m: m_mutbl, lp: None}\n-              }\n               ast::by_move | ast::by_copy => {\n                 {m: m_imm, lp: Some(@lp_arg(vid))}\n               }"}, {"sha": "368a523306e05e9c38d8456a9a9185a17efbe6be", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -1503,7 +1503,7 @@ fn copy_args_to_allocas(fcx: fn_ctxt,\n         // the event it's not truly needed.\n         let llarg;\n         match ty::resolved_mode(tcx, arg_ty.mode) {\n-            ast::by_ref | ast::by_mutbl_ref => {\n+            ast::by_ref => {\n                 llarg = raw_llarg;\n             }\n             ast::by_move | ast::by_copy => {"}, {"sha": "c851c5bc7250823432bc5d90e2742b4d88a07e22", "filename": "src/rustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -592,7 +592,7 @@ fn trans_arg_expr(bcx: block,\n             DoAutorefArg => { val = arg_datum.to_ref_llval(bcx); }\n             DontAutorefArg => {\n                 match arg_mode {\n-                    ast::by_ref | ast::by_mutbl_ref => {\n+                    ast::by_ref => {\n                         val = arg_datum.to_ref_llval(bcx);\n                     }\n "}, {"sha": "ef1cc15f5c0eaa1fb8750d5c7464136f695bf169", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -208,7 +208,6 @@ impl reflector {\n                   ast::expl(e) => match e {\n                     ast::by_ref => 1u,\n                     ast::by_val => 2u,\n-                    ast::by_mutbl_ref => 3u,\n                     ast::by_move => 4u,\n                     ast::by_copy => 5u\n                   }"}, {"sha": "e7dfac42becccb42145a94af8c1f3c9496d46753", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -49,12 +49,12 @@ fn mk_ctxt(llmod: ModuleRef) -> ctxt {\n     return {mut next_tag_id: 0u16, pad: 0u16, pad2: 0u32};\n }\n \n-fn add_u16(&dest: ~[u8], val: u16) {\n-    dest += ~[(val & 0xffu16) as u8, (val >> 8u16) as u8];\n+fn add_u16(dest: &mut ~[u8], val: u16) {\n+    *dest += ~[(val & 0xffu16) as u8, (val >> 8u16) as u8];\n }\n \n-fn add_substr(&dest: ~[u8], src: ~[u8]) {\n+fn add_substr(dest: &mut ~[u8], src: ~[u8]) {\n     add_u16(dest, vec::len(src) as u16);\n-    dest += src;\n+    *dest += src;\n }\n "}, {"sha": "9140ea94e9cab1fb555e50ec6a4e6fc63da59bdd", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -53,7 +53,7 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n                     by_val | by_move | by_copy => {\n                         type_needs(cx, use_repr, arg.ty);\n                     }\n-                    by_ref | by_mutbl_ref => {}\n+                    by_ref => {}\n                 }\n             }\n         }"}, {"sha": "50ea363ace2accb96b0e5907f0fa076bec977f15", "filename": "src/rustc/middle/trans/uniq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca49fd402af8e7bf613c43e996274b5a017958d2/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs?ref=ca49fd402af8e7bf613c43e996274b5a017958d2", "patch": "@@ -3,7 +3,6 @@ use lib::llvm::ValueRef;\n use common::*;\n use build::*;\n use base::*;\n-use shape::llsize_of;\n use datum::immediate_rvalue;\n \n export make_free_glue, autoderef, duplicate;"}]}