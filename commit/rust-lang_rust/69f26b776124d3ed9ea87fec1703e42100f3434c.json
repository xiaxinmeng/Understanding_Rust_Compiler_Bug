{"sha": "69f26b776124d3ed9ea87fec1703e42100f3434c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZjI2Yjc3NjEyNGQzZWQ5ZWE4N2ZlYzE3MDNlNDIxMDBmMzQzNGM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-10T14:18:36Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-10T14:18:36Z"}, "message": "Use fixed type for CodegenResults\n\nThis also moves the -Zno-link implementation to rustc_interface", "tree": {"sha": "570dbf219768f98b450cacfe441dc92920e56c59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/570dbf219768f98b450cacfe441dc92920e56c59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69f26b776124d3ed9ea87fec1703e42100f3434c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69f26b776124d3ed9ea87fec1703e42100f3434c", "html_url": "https://github.com/rust-lang/rust/commit/69f26b776124d3ed9ea87fec1703e42100f3434c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69f26b776124d3ed9ea87fec1703e42100f3434c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f141acf0678139ac31375d02feebcc2be220715b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f141acf0678139ac31375d02feebcc2be220715b", "html_url": "https://github.com/rust-lang/rust/commit/f141acf0678139ac31375d02feebcc2be220715b"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "b3ff0f9e700af61331c1d4e4b439053552c187c8", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/69f26b776124d3ed9ea87fec1703e42100f3434c/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f26b776124d3ed9ea87fec1703e42100f3434c/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=69f26b776124d3ed9ea87fec1703e42100f3434c", "patch": "@@ -28,14 +28,12 @@ use rustc_errors::{ErrorReported, FatalError, Handler};\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_serialize::json;\n-use rustc_session::config::{self, OptLevel, OutputFilenames, PrintRequest};\n+use rustc_session::config::{OptLevel, OutputFilenames, PrintRequest};\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n \n use std::any::Any;\n use std::ffi::CStr;\n-use std::fs;\n use std::sync::Arc;\n \n mod back {\n@@ -275,7 +273,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n         sess: &Session,\n-    ) -> Result<(Box<dyn Any>, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n+    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n         let (codegen_results, work_products) = ongoing_codegen\n             .downcast::<rustc_codegen_ssa::back::write::OngoingCodegen<LlvmCodegenBackend>>()\n             .expect(\"Expected LlvmCodegenBackend's OngoingCodegen, found Box<Any>\")\n@@ -284,31 +282,15 @@ impl CodegenBackend for LlvmCodegenBackend {\n             rustc_codegen_ssa::back::write::dump_incremental_data(&codegen_results);\n         }\n \n-        Ok((Box::new(codegen_results), work_products))\n+        Ok((codegen_results, work_products))\n     }\n \n     fn link(\n         &self,\n         sess: &Session,\n-        codegen_results: Box<dyn Any>,\n+        codegen_results: CodegenResults,\n         outputs: &OutputFilenames,\n     ) -> Result<(), ErrorReported> {\n-        let codegen_results = codegen_results\n-            .downcast::<CodegenResults>()\n-            .expect(\"Expected CodegenResults, found Box<Any>\");\n-\n-        if sess.opts.debugging_opts.no_link {\n-            // FIXME: use a binary format to encode the `.rlink` file\n-            let rlink_data = json::encode(&codegen_results).map_err(|err| {\n-                sess.fatal(&format!(\"failed to encode rlink: {}\", err));\n-            })?;\n-            let rlink_file = outputs.with_extension(config::RLINK_EXT);\n-            fs::write(&rlink_file, rlink_data).map_err(|err| {\n-                sess.fatal(&format!(\"failed to write file {}: {}\", rlink_file.display(), err));\n-            })?;\n-            return Ok(());\n-        }\n-\n         // Run the linker on any artifacts that resulted from the LLVM run.\n         // This should produce either a finished executable or library.\n         sess.time(\"link_crate\", || {"}, {"sha": "c6fbca39ee451f02ae1f86f829166d483ef79c1a", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69f26b776124d3ed9ea87fec1703e42100f3434c/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f26b776124d3ed9ea87fec1703e42100f3434c/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=69f26b776124d3ed9ea87fec1703e42100f3434c", "patch": "@@ -1,6 +1,6 @@\n use super::write::WriteBackendMethods;\n use super::CodegenObject;\n-use crate::ModuleCodegen;\n+use crate::{CodegenResults, ModuleCodegen};\n \n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::fx::FxHashMap;\n@@ -81,7 +81,7 @@ pub trait CodegenBackend {\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n         sess: &Session,\n-    ) -> Result<(Box<dyn Any>, FxHashMap<WorkProductId, WorkProduct>), ErrorReported>;\n+    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported>;\n \n     /// This is called on the returned `Box<dyn Any>` from `join_codegen`\n     ///\n@@ -91,7 +91,7 @@ pub trait CodegenBackend {\n     fn link(\n         &self,\n         sess: &Session,\n-        codegen_results: Box<dyn Any>,\n+        codegen_results: CodegenResults,\n         outputs: &OutputFilenames,\n     ) -> Result<(), ErrorReported>;\n }"}, {"sha": "26a388aa3ed00cc4e8df91a164369554e0a68ed6", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69f26b776124d3ed9ea87fec1703e42100f3434c/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f26b776124d3ed9ea87fec1703e42100f3434c/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=69f26b776124d3ed9ea87fec1703e42100f3434c", "patch": "@@ -599,7 +599,7 @@ impl RustcDefaultCalls {\n             let codegen_results: CodegenResults = json::decode(&rlink_data).unwrap_or_else(|err| {\n                 sess.fatal(&format!(\"failed to decode rlink: {}\", err));\n             });\n-            compiler.codegen_backend().link(&sess, Box::new(codegen_results), &outputs)\n+            compiler.codegen_backend().link(&sess, codegen_results, &outputs)\n         } else {\n             sess.fatal(\"rlink must be a file\")\n         }"}, {"sha": "1de7350a3e21c5d333320954f26871221f04ca2d", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69f26b776124d3ed9ea87fec1703e42100f3434c/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f26b776124d3ed9ea87fec1703e42100f3434c/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=69f26b776124d3ed9ea87fec1703e42100f3434c", "patch": "@@ -14,7 +14,8 @@ use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::ty::steal::Steal;\n use rustc_middle::ty::{GlobalCtxt, ResolverOutputs, TyCtxt};\n-use rustc_session::config::{OutputFilenames, OutputType};\n+use rustc_serialize::json;\n+use rustc_session::config::{self, OutputFilenames, OutputType};\n use rustc_session::{output::find_crate_name, Session};\n use rustc_span::symbol::sym;\n use std::any::Any;\n@@ -387,6 +388,19 @@ impl Linker {\n         {\n             return Ok(());\n         }\n+\n+        if sess.opts.debugging_opts.no_link {\n+            // FIXME: use a binary format to encode the `.rlink` file\n+            let rlink_data = json::encode(&codegen_results).map_err(|err| {\n+                sess.fatal(&format!(\"failed to encode rlink: {}\", err));\n+            })?;\n+            let rlink_file = self.prepare_outputs.with_extension(config::RLINK_EXT);\n+            std::fs::write(&rlink_file, rlink_data).map_err(|err| {\n+                sess.fatal(&format!(\"failed to write file {}: {}\", rlink_file.display(), err));\n+            })?;\n+            return Ok(());\n+        }\n+\n         self.codegen_backend.link(&self.sess, codegen_results, &self.prepare_outputs)\n     }\n }"}]}