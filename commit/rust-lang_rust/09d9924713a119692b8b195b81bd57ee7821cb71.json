{"sha": "09d9924713a119692b8b195b81bd57ee7821cb71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZDk5MjQ3MTNhMTE5NjkyYjhiMTk1YjgxYmQ1N2VlNzgyMWNiNzE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git1984941651981@oli-obk.de", "date": "2015-01-20T09:58:06Z"}, "committer": {"name": "Oliver Schneider", "email": "git1984941651981@oli-obk.de", "date": "2015-01-20T09:58:06Z"}, "message": "librustc: hint close matches on accessing nonexisting fields", "tree": {"sha": "ed9264348299a00402e88e5a10c60f5341456b59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed9264348299a00402e88e5a10c60f5341456b59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09d9924713a119692b8b195b81bd57ee7821cb71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09d9924713a119692b8b195b81bd57ee7821cb71", "html_url": "https://github.com/rust-lang/rust/commit/09d9924713a119692b8b195b81bd57ee7821cb71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09d9924713a119692b8b195b81bd57ee7821cb71/comments", "author": null, "committer": null, "parents": [{"sha": "3bf41dafcfb6c979efb4e2438e047e1a54045eec", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf41dafcfb6c979efb4e2438e047e1a54045eec", "html_url": "https://github.com/rust-lang/rust/commit/3bf41dafcfb6c979efb4e2438e047e1a54045eec"}], "stats": {"total": 113, "additions": 112, "deletions": 1}, "files": [{"sha": "df9d54ccd8a3e68bd43aae2fe5b910e7a0cc5dc8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/09d9924713a119692b8b195b81bd57ee7821cb71/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d9924713a119692b8b195b81bd57ee7821cb71/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=09d9924713a119692b8b195b81bd57ee7821cb71", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -108,6 +108,7 @@ use lint;\n use util::common::{block_query, indenter, loop_query};\n use util::ppaux::{self, Repr};\n use util::nodemap::{DefIdMap, FnvHashMap, NodeMap};\n+use util::lev_distance::lev_distance;\n \n use std::cell::{Cell, Ref, RefCell};\n use std::mem::replace;\n@@ -3074,11 +3075,43 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                             actual)\n                 },\n                 expr_t, None);\n+            if let Some(t) = ty::ty_to_def_id(expr_t) {\n+                suggest_field_names(t, field, tcx, vec![]);\n+            }\n         }\n \n         fcx.write_error(expr.id);\n     }\n \n+    // displays hints about the closest matches in field names\n+    fn suggest_field_names<'tcx>(id : DefId,\n+                                 field : &ast::SpannedIdent,\n+                                 tcx : &ty::ctxt<'tcx>,\n+                                 skip : Vec<&str>) {\n+        let ident = token::get_ident(field.node);\n+        let name = ident.get();\n+        // only find fits with at least one matching letter\n+        let mut best_dist = name.len();\n+        let mut best = None;\n+        let fields = ty::lookup_struct_fields(tcx, id);\n+        for elem in fields.iter() {\n+            let n = elem.name.as_str();\n+            // ignore already set fields\n+            if skip.iter().any(|&x| x == n) {\n+                continue;\n+            }\n+            let dist = lev_distance(n, name);\n+            if dist < best_dist {\n+                best = Some(n);\n+                best_dist = dist;\n+            }\n+        }\n+        if let Some(n) = best {\n+            tcx.sess.span_help(field.span,\n+                format!(\"did you mean `{}`?\", n).as_slice());\n+        }\n+    }\n+\n     // Check tuple index expressions\n     fn check_tup_field(fcx: &FnCtxt,\n                        expr: &ast::Expr,\n@@ -3186,6 +3219,13 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                         },\n                         struct_ty,\n                         None);\n+                    // prevent all specified fields from being suggested\n+                    let skip_fields = ast_fields.iter().map(|ref x| x.ident.node.name.as_str());\n+                    let actual_id = match enum_id_opt {\n+                        Some(_) => class_id,\n+                        None => ty::ty_to_def_id(struct_ty).unwrap()\n+                    };\n+                    suggest_field_names(actual_id, &field.ident, tcx, skip_fields.collect());\n                     error_happened = true;\n                 }\n                 Some((_, true)) => {"}, {"sha": "8df9ffd6cc73f2526424359bc5a88935adb3b0f3", "filename": "src/test/compile-fail/struct-fields-hints-no-dupe.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/09d9924713a119692b8b195b81bd57ee7821cb71/src%2Ftest%2Fcompile-fail%2Fstruct-fields-hints-no-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d9924713a119692b8b195b81bd57ee7821cb71/src%2Ftest%2Fcompile-fail%2Fstruct-fields-hints-no-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-fields-hints-no-dupe.rs?ref=09d9924713a119692b8b195b81bd57ee7821cb71", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct A {\n+    foo : i32,\n+    car : i32,\n+    barr : i32\n+}\n+\n+fn main() {\n+    let a = A {\n+        foo : 5,\n+        bar : 42,//~ ERROR structure `A` has no field named `bar`\n+        //~^ HELP did you mean `barr`?\n+        car : 9,\n+    };\n+}"}, {"sha": "37001f1e60a0fb2e0dc586ed780913a957d8b9bb", "filename": "src/test/compile-fail/struct-fields-hints.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/09d9924713a119692b8b195b81bd57ee7821cb71/src%2Ftest%2Fcompile-fail%2Fstruct-fields-hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d9924713a119692b8b195b81bd57ee7821cb71/src%2Ftest%2Fcompile-fail%2Fstruct-fields-hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-fields-hints.rs?ref=09d9924713a119692b8b195b81bd57ee7821cb71", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct A {\n+    foo : i32,\n+    car : i32,\n+    barr : i32\n+}\n+\n+fn main() {\n+    let a = A {\n+        foo : 5,\n+        bar : 42,//~ ERROR structure `A` has no field named `bar`\n+        //~^ HELP did you mean `car`?\n+    };\n+}"}, {"sha": "c897dc55204b1235f98e7b7f760ecc9b1c86015a", "filename": "src/test/compile-fail/struct-fields-typo.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/09d9924713a119692b8b195b81bd57ee7821cb71/src%2Ftest%2Fcompile-fail%2Fstruct-fields-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d9924713a119692b8b195b81bd57ee7821cb71/src%2Ftest%2Fcompile-fail%2Fstruct-fields-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-fields-typo.rs?ref=09d9924713a119692b8b195b81bd57ee7821cb71", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct BuildData {\n+    foo: isize,\n+    bar: f32\n+}\n+\n+fn main() {\n+    let foo = BuildData {\n+        foo: 0,\n+        bar: 0.5,\n+    };\n+    let x = foo.baa;//~ ERROR attempted access of field `baa` on type `BuildData`\n+    //~^ HELP did you mean `bar`?\n+    println!(\"{}\", x);\n+}"}]}