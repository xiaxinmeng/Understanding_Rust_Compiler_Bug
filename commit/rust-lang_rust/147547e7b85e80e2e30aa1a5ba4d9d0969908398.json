{"sha": "147547e7b85e80e2e30aa1a5ba4d9d0969908398", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NzU0N2U3Yjg1ZTgwZTJlMzBhYTFhNWJhNGQ5ZDA5Njk5MDgzOTg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-12T14:36:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-12T14:36:01Z"}, "message": "Merge #5724\n\n5724: Rename ra_prof -> profile\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "c39749d1b71b73b4017c2d0d848ebdc85e570c39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c39749d1b71b73b4017c2d0d848ebdc85e570c39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/147547e7b85e80e2e30aa1a5ba4d9d0969908398", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfM/5RCRBK7hj4Ov3rIwAAdHIIAGzDtgm9Fl5URUIEeXdg2wbr\nHbLlw9d/HoBQ/LizueR6l/y903GLNBOoGyPhBzzqKEUw2xB3NPL67jEBU2f7nsoe\n+oT5denmcySYtuzyyomzAyE9KwN6ej9UvCtl6VDAbHxWs2Pj6uxs4NPIOtbt2pqi\ndEnmE6pIkBcQ0gIJq5qzPn9Lj5/ELRW0zhP0Ofy1l45Rkad0tOTFj2Q4C35PARDt\nf7K1NH19DmK3sSnLKAgFLGs9cijkIrSxRtPSy3xQ2EQpoLYyE1Ex7rJSg/fbcC0I\n52XpiyBurmk2x5dv9/h0mPgI7dKBMLUj1PsIGjJuE+R2qFmnapztCfp9ZdGZKOk=\n=tcK8\n-----END PGP SIGNATURE-----\n", "payload": "tree c39749d1b71b73b4017c2d0d848ebdc85e570c39\nparent 6be5ab02008b442c85c201968b97f24f13c4692e\nparent 208b7bd7ba687fb570feb1b89219f14c63712ce8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597242961 +0000\ncommitter GitHub <noreply@github.com> 1597242961 +0000\n\nMerge #5724\n\n5724: Rename ra_prof -> profile\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/147547e7b85e80e2e30aa1a5ba4d9d0969908398", "html_url": "https://github.com/rust-lang/rust/commit/147547e7b85e80e2e30aa1a5ba4d9d0969908398", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/147547e7b85e80e2e30aa1a5ba4d9d0969908398/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6be5ab02008b442c85c201968b97f24f13c4692e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6be5ab02008b442c85c201968b97f24f13c4692e", "html_url": "https://github.com/rust-lang/rust/commit/6be5ab02008b442c85c201968b97f24f13c4692e"}, {"sha": "208b7bd7ba687fb570feb1b89219f14c63712ce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/208b7bd7ba687fb570feb1b89219f14c63712ce8", "html_url": "https://github.com/rust-lang/rust/commit/208b7bd7ba687fb570feb1b89219f14c63712ce8"}], "stats": {"total": 418, "additions": 192, "deletions": 226}, "files": [{"sha": "c2a0457c76f5bf4769fc48dc471dd52295e16217", "filename": "Cargo.lock", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -45,6 +45,10 @@ version = \"0.12.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"33954243bd79057c2de7338850b85983a44588021f8a5fee574a8888c6de4344\"\n \n+[[package]]\n+name = \"arena\"\n+version = \"0.0.0\"\n+\n [[package]]\n name = \"arrayvec\"\n version = \"0.5.1\"\n@@ -890,6 +894,18 @@ dependencies = [\n  \"unicode-xid\",\n ]\n \n+[[package]]\n+name = \"profile\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"arena\",\n+ \"backtrace\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"once_cell\",\n+ \"perf-event\",\n+]\n+\n [[package]]\n name = \"quote\"\n version = \"1.0.7\"\n@@ -899,21 +915,17 @@ dependencies = [\n  \"proc-macro2\",\n ]\n \n-[[package]]\n-name = \"ra_arena\"\n-version = \"0.1.0\"\n-\n [[package]]\n name = \"ra_assists\"\n version = \"0.1.0\"\n dependencies = [\n  \"either\",\n  \"itertools\",\n+ \"profile\",\n  \"ra_db\",\n  \"ra_fmt\",\n  \"ra_hir\",\n  \"ra_ide_db\",\n- \"ra_prof\",\n  \"ra_syntax\",\n  \"ra_text_edit\",\n  \"rustc-hash\",\n@@ -935,8 +947,8 @@ dependencies = [\n name = \"ra_db\"\n version = \"0.1.0\"\n dependencies = [\n+ \"profile\",\n  \"ra_cfg\",\n- \"ra_prof\",\n  \"ra_syntax\",\n  \"ra_tt\",\n  \"rustc-hash\",\n@@ -962,11 +974,11 @@ dependencies = [\n  \"either\",\n  \"itertools\",\n  \"log\",\n+ \"profile\",\n  \"ra_db\",\n  \"ra_hir_def\",\n  \"ra_hir_expand\",\n  \"ra_hir_ty\",\n- \"ra_prof\",\n  \"ra_syntax\",\n  \"rustc-hash\",\n  \"stdx\",\n@@ -977,6 +989,7 @@ name = \"ra_hir_def\"\n version = \"0.1.0\"\n dependencies = [\n  \"anymap\",\n+ \"arena\",\n  \"drop_bomb\",\n  \"either\",\n  \"expect\",\n@@ -985,12 +998,11 @@ dependencies = [\n  \"itertools\",\n  \"log\",\n  \"once_cell\",\n- \"ra_arena\",\n+ \"profile\",\n  \"ra_cfg\",\n  \"ra_db\",\n  \"ra_hir_expand\",\n  \"ra_mbe\",\n- \"ra_prof\",\n  \"ra_syntax\",\n  \"ra_tt\",\n  \"rustc-hash\",\n@@ -1003,13 +1015,13 @@ dependencies = [\n name = \"ra_hir_expand\"\n version = \"0.1.0\"\n dependencies = [\n+ \"arena\",\n  \"either\",\n  \"log\",\n- \"ra_arena\",\n+ \"profile\",\n  \"ra_db\",\n  \"ra_mbe\",\n  \"ra_parser\",\n- \"ra_prof\",\n  \"ra_syntax\",\n  \"ra_tt\",\n  \"rustc-hash\",\n@@ -1020,6 +1032,7 @@ dependencies = [\n name = \"ra_hir_ty\"\n version = \"0.1.0\"\n dependencies = [\n+ \"arena\",\n  \"arrayvec\",\n  \"chalk-ir\",\n  \"chalk-recursive\",\n@@ -1028,11 +1041,10 @@ dependencies = [\n  \"expect\",\n  \"itertools\",\n  \"log\",\n- \"ra_arena\",\n+ \"profile\",\n  \"ra_db\",\n  \"ra_hir_def\",\n  \"ra_hir_expand\",\n- \"ra_prof\",\n  \"ra_syntax\",\n  \"rustc-hash\",\n  \"scoped-tls\",\n@@ -1054,13 +1066,13 @@ dependencies = [\n  \"itertools\",\n  \"log\",\n  \"oorandom\",\n+ \"profile\",\n  \"ra_assists\",\n  \"ra_cfg\",\n  \"ra_db\",\n  \"ra_fmt\",\n  \"ra_hir\",\n  \"ra_ide_db\",\n- \"ra_prof\",\n  \"ra_ssr\",\n  \"ra_syntax\",\n  \"ra_text_edit\",\n@@ -1077,9 +1089,9 @@ dependencies = [\n  \"fst\",\n  \"log\",\n  \"once_cell\",\n+ \"profile\",\n  \"ra_db\",\n  \"ra_hir\",\n- \"ra_prof\",\n  \"ra_syntax\",\n  \"ra_text_edit\",\n  \"rayon\",\n@@ -1137,27 +1149,15 @@ dependencies = [\n  \"test_utils\",\n ]\n \n-[[package]]\n-name = \"ra_prof\"\n-version = \"0.1.0\"\n-dependencies = [\n- \"backtrace\",\n- \"cfg-if\",\n- \"libc\",\n- \"once_cell\",\n- \"perf-event\",\n- \"ra_arena\",\n-]\n-\n [[package]]\n name = \"ra_project_model\"\n version = \"0.1.0\"\n dependencies = [\n  \"anyhow\",\n+ \"arena\",\n  \"cargo_metadata\",\n  \"log\",\n  \"paths\",\n- \"ra_arena\",\n  \"ra_cfg\",\n  \"ra_db\",\n  \"ra_proc_macro\",\n@@ -1314,6 +1314,7 @@ dependencies = [\n  \"oorandom\",\n  \"parking_lot\",\n  \"pico-args\",\n+ \"profile\",\n  \"ra_cfg\",\n  \"ra_db\",\n  \"ra_hir\",\n@@ -1323,7 +1324,6 @@ dependencies = [\n  \"ra_ide_db\",\n  \"ra_mbe\",\n  \"ra_proc_macro_srv\",\n- \"ra_prof\",\n  \"ra_project_model\",\n  \"ra_ssr\",\n  \"ra_syntax\","}, {"sha": "f2bb5cc4567b7e158f70dc716a9da00201fb1507", "filename": "crates/arena/Cargo.toml", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Farena%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Farena%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Farena%2FCargo.toml?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -1,9 +1,9 @@\n [package]\n-edition = \"2018\"\n-name = \"ra_arena\"\n-version = \"0.1.0\"\n-authors = [\"rust-analyzer developers\"]\n+name = \"arena\"\n+version = \"0.0.0\"\n license = \"MIT OR Apache-2.0\"\n+authors = [\"rust-analyzer developers\"]\n+edition = \"2018\"\n \n [lib]\n doctest = false", "previous_filename": "crates/ra_arena/Cargo.toml"}, {"sha": "3169aa5b8cc4d25f4f8a058784af309b3a144f46", "filename": "crates/arena/src/lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Farena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Farena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Farena%2Fsrc%2Flib.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "previous_filename": "crates/ra_arena/src/lib.rs"}, {"sha": "0f33907c0aee2572d17c571ae2d0a0672be0f752", "filename": "crates/arena/src/map.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Farena%2Fsrc%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Farena%2Fsrc%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Farena%2Fsrc%2Fmap.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "previous_filename": "crates/ra_arena/src/map.rs"}, {"sha": "e271e3a56700b138fc147e7af4e6e1da9baa2ae2", "filename": "crates/profile/Cargo.toml", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fprofile%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fprofile%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2FCargo.toml?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -1,20 +1,20 @@\n [package]\n-edition = \"2018\"\n-name = \"ra_prof\"\n-version = \"0.1.0\"\n-authors = [\"rust-analyzer developers\"]\n-publish = false\n+name = \"profile\"\n+version = \"0.0.0\"\n license = \"MIT OR Apache-2.0\"\n+authors = [\"rust-analyzer developers\"]\n+edition = \"2018\"\n \n [lib]\n doctest = false\n \n [dependencies]\n-ra_arena = { path = \"../ra_arena\" }\n once_cell = \"1.3.1\"\n-backtrace = { version = \"0.3.44\", optional = true }\n cfg-if = \"0.1.10\"\n libc = \"0.2.73\"\n+backtrace = { version = \"0.3.44\", optional = true }\n+\n+arena = { path = \"../arena\" }\n \n [target.'cfg(target_os = \"linux\")'.dependencies]\n perf-event = \"0.4\"", "previous_filename": "crates/ra_prof/Cargo.toml"}, {"sha": "db865c65be17e80716c93cbbbe9c870e506ae79c", "filename": "crates/profile/src/google_cpu_profiler.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fprofile%2Fsrc%2Fgoogle_cpu_profiler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fprofile%2Fsrc%2Fgoogle_cpu_profiler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fgoogle_cpu_profiler.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "previous_filename": "crates/ra_prof/src/google_cpu_profiler.rs"}, {"sha": "934cc8e37a5da0e1838d011c085310bd690d3076", "filename": "crates/profile/src/hprof.rs", "status": "renamed", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fprofile%2Fsrc%2Fhprof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fprofile%2Fsrc%2Fhprof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fhprof.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -37,47 +37,44 @@ pub type Label = &'static str;\n ///\n /// # Example\n /// ```\n-/// use ra_prof::{profile, set_filter, Filter};\n-///\n-/// let f = Filter::from_spec(\"profile1|profile2@2\");\n-/// set_filter(f);\n+/// profile::init_from(\"profile1|profile2@2\");\n /// profiling_function1();\n ///\n /// fn profiling_function1() {\n-///     let _p = profile(\"profile1\");\n+///     let _p = profile::span(\"profile1\");\n ///     profiling_function2();\n /// }\n ///\n /// fn profiling_function2() {\n-///     let _p = profile(\"profile2\");\n+///     let _p = profile::span(\"profile2\");\n /// }\n /// ```\n /// This will print in the stderr the following:\n /// ```text\n ///  0ms - profile\n ///      0ms - profile2\n /// ```\n-pub fn profile(label: Label) -> Profiler {\n+pub fn span(label: Label) -> ProfileSpan {\n     assert!(!label.is_empty());\n \n     if PROFILING_ENABLED.load(Ordering::Relaxed)\n         && PROFILE_STACK.with(|stack| stack.borrow_mut().push(label))\n     {\n-        Profiler(Some(ProfilerImpl { label, detail: None }))\n+        ProfileSpan(Some(ProfilerImpl { label, detail: None }))\n     } else {\n-        Profiler(None)\n+        ProfileSpan(None)\n     }\n }\n \n-pub struct Profiler(Option<ProfilerImpl>);\n+pub struct ProfileSpan(Option<ProfilerImpl>);\n \n struct ProfilerImpl {\n     label: Label,\n     detail: Option<String>,\n }\n \n-impl Profiler {\n-    pub fn detail(mut self, detail: impl FnOnce() -> String) -> Profiler {\n+impl ProfileSpan {\n+    pub fn detail(mut self, detail: impl FnOnce() -> String) -> ProfileSpan {\n         if let Some(profiler) = &mut self.0 {\n             profiler.detail = Some(detail())\n         }", "previous_filename": "crates/ra_prof/src/hprof.rs"}, {"sha": "ab19271c70cf6aaaa09e62a350c1f4c392c68336", "filename": "crates/profile/src/lib.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fprofile%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fprofile%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Flib.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -10,7 +10,7 @@ mod tree;\n use std::cell::RefCell;\n \n pub use crate::{\n-    hprof::{init, init_from, profile},\n+    hprof::{init, init_from, span},\n     memory_usage::{Bytes, MemoryUsage},\n     stop_watch::{StopWatch, StopWatchSpan},\n };\n@@ -25,7 +25,7 @@ pub fn print_backtrace() {\n pub fn print_backtrace() {\n     eprintln!(\n         r#\"enable the backtrace feature:\n-    ra_prof = {{ path = \"../ra_prof\", features = [ \"backtrace\"] }}\n+    profile = {{ path = \"../profile\", features = [ \"backtrace\"] }}\n \"#\n     );\n }\n@@ -76,12 +76,12 @@ impl Drop for Scope {\n ///\n /// https://github.com/rust-analyzer/rust-analyzer/pull/5306\n #[derive(Debug)]\n-pub struct CpuProfiler {\n+pub struct CpuSpan {\n     _private: (),\n }\n \n #[must_use]\n-pub fn cpu_profiler() -> CpuProfiler {\n+pub fn cpu_span() -> CpuSpan {\n     #[cfg(feature = \"cpu_profiler\")]\n     {\n         google_cpu_profiler::start(\"./out.profile\".as_ref())\n@@ -92,10 +92,10 @@ pub fn cpu_profiler() -> CpuProfiler {\n         eprintln!(\"cpu_profiler feature is disabled\")\n     }\n \n-    CpuProfiler { _private: () }\n+    CpuSpan { _private: () }\n }\n \n-impl Drop for CpuProfiler {\n+impl Drop for CpuSpan {\n     fn drop(&mut self) {\n         #[cfg(feature = \"cpu_profiler\")]\n         {", "previous_filename": "crates/ra_prof/src/lib.rs"}, {"sha": "83390212ae0bbc81691430c2a332d2eecdd9725e", "filename": "crates/profile/src/memory_usage.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "previous_filename": "crates/ra_prof/src/memory_usage.rs"}, {"sha": "5e276190e5c0ace0b6a087977f917fdcc0657d67", "filename": "crates/profile/src/stop_watch.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fprofile%2Fsrc%2Fstop_watch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fprofile%2Fsrc%2Fstop_watch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fstop_watch.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "previous_filename": "crates/ra_prof/src/stop_watch.rs"}, {"sha": "096f58511cafcb763efdd90fa93d56627cc8a5e7", "filename": "crates/profile/src/tree.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fprofile%2Fsrc%2Ftree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fprofile%2Fsrc%2Ftree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Ftree.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -1,15 +1,15 @@\n //! A simple tree implementation which tries to not allocate all over the place.\n use std::ops;\n \n-use ra_arena::Arena;\n+use arena::Arena;\n \n #[derive(Default)]\n pub struct Tree<T> {\n     nodes: Arena<Node<T>>,\n     current_path: Vec<(Idx<T>, Option<Idx<T>>)>,\n }\n \n-pub type Idx<T> = ra_arena::Idx<Node<T>>;\n+pub type Idx<T> = arena::Idx<Node<T>>;\n \n impl<T> Tree<T> {\n     pub fn start(&mut self)", "previous_filename": "crates/ra_prof/src/tree.rs"}, {"sha": "6f5ace941fbe967a08b79cb211ee94238937c28b", "filename": "crates/ra_assists/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_assists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_assists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2FCargo.toml?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -18,7 +18,7 @@ stdx = { path = \"../stdx\" }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_fmt = { path = \"../ra_fmt\" }\n-ra_prof = { path = \"../ra_prof\" }\n+profile = { path = \"../profile\" }\n ra_db = { path = \"../ra_db\" }\n ra_ide_db = { path = \"../ra_ide_db\" }\n hir = { path = \"../ra_hir\", package = \"ra_hir\" }"}, {"sha": "dd1406228c610c6e5df3af650df90925433b91ea", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -110,7 +110,7 @@ fn add_missing_impl_members_inner(\n     assist_id: &'static str,\n     label: &'static str,\n ) -> Option<()> {\n-    let _p = ra_prof::profile(\"add_missing_impl_members_inner\");\n+    let _p = profile::span(\"add_missing_impl_members_inner\");\n     let impl_def = ctx.find_node_at_offset::<ast::Impl>()?;\n     let impl_item_list = impl_def.assoc_item_list()?;\n "}, {"sha": "6ec59ec4d4f8b8a9a5bf992e40474f414957ba2e", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -6,7 +6,6 @@ use hir::{\n     Type,\n };\n use ra_ide_db::{imports_locator, RootDatabase};\n-use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, AstNode},\n     SyntaxNode,\n@@ -130,7 +129,7 @@ impl AutoImportAssets {\n     }\n \n     fn search_for_imports(&self, ctx: &AssistContext) -> BTreeSet<ModPath> {\n-        let _p = profile(\"auto_import::search_for_imports\");\n+        let _p = profile::span(\"auto_import::search_for_imports\");\n         let db = ctx.db();\n         let current_crate = self.module_with_name_to_import.krate();\n         imports_locator::find_imports(&ctx.sema, current_crate, &self.get_search_query())"}, {"sha": "9cb9ba11c793cf1acf27fbf7a85c07c559f46e8e", "filename": "crates/ra_db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2FCargo.toml?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -14,7 +14,7 @@ rustc-hash = \"1.1.0\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_cfg = { path = \"../ra_cfg\" }\n-ra_prof = { path = \"../ra_prof\" }\n+profile = { path = \"../profile\" }\n ra_tt = { path = \"../ra_tt\" }\n test_utils = { path = \"../test_utils\" }\n vfs = { path = \"../vfs\" }"}, {"sha": "795d7d2b613e1088de6fd8e60a108c2322d737fb", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -5,7 +5,6 @@ pub mod fixture;\n \n use std::{panic, sync::Arc};\n \n-use ra_prof::profile;\n use ra_syntax::{ast, Parse, SourceFile, TextRange, TextSize};\n use rustc_hash::FxHashSet;\n \n@@ -113,7 +112,7 @@ pub trait SourceDatabase: CheckCanceled + FileLoader + std::fmt::Debug {\n }\n \n fn parse_query(db: &dyn SourceDatabase, file_id: FileId) -> Parse<ast::SourceFile> {\n-    let _p = profile(\"parse_query\").detail(|| format!(\"{:?}\", file_id));\n+    let _p = profile::span(\"parse_query\").detail(|| format!(\"{:?}\", file_id));\n     let text = db.file_text(file_id);\n     SourceFile::parse(&*text)\n }"}, {"sha": "903406e849c34ff021a70e1515356f22958d5e6d", "filename": "crates/ra_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2FCargo.toml?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -19,7 +19,7 @@ itertools = \"0.9.0\"\n stdx = { path = \"../stdx\" }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_db = { path = \"../ra_db\" }\n-ra_prof = { path = \"../ra_prof\" }\n+profile = { path = \"../profile\" }\n hir_expand = { path = \"../ra_hir_expand\", package = \"ra_hir_expand\" }\n hir_def = { path = \"../ra_hir_def\", package = \"ra_hir_def\" }\n hir_ty = { path = \"../ra_hir_ty\", package = \"ra_hir_ty\" }"}, {"sha": "5c0c6184a709f2ed5c4419e479937152a3783807", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -31,7 +31,6 @@ use hir_ty::{\n     InEnvironment, Substs, TraitEnvironment, Ty, TyDefId, TypeCtor,\n };\n use ra_db::{CrateId, Edition, FileId};\n-use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, AttrsOwner, NameOwner},\n     AstNode,\n@@ -304,7 +303,7 @@ impl Module {\n     }\n \n     pub fn diagnostics(self, db: &dyn HirDatabase, sink: &mut DiagnosticSink) {\n-        let _p = profile(\"Module::diagnostics\");\n+        let _p = profile::span(\"Module::diagnostics\");\n         let crate_def_map = db.crate_def_map(self.id.krate);\n         crate_def_map.add_diagnostics(db.upcast(), self.id.local_id, sink);\n         for decl in self.declarations(db) {"}, {"sha": "7e3ec6315e1165a57619cfc5f5515106664e436a", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -12,7 +12,6 @@ use hir_expand::{hygiene::Hygiene, name::AsName, ExpansionInfo};\n use hir_ty::associated_type_shorthand_candidates;\n use itertools::Itertools;\n use ra_db::{FileId, FileRange};\n-use ra_prof::profile;\n use ra_syntax::{\n     algo::{find_node_at_offset, skip_trivia_token},\n     ast, AstNode, Direction, SyntaxNode, SyntaxToken, TextRange, TextSize,\n@@ -334,7 +333,7 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn descend_into_macros(&self, token: SyntaxToken) -> SyntaxToken {\n-        let _p = profile(\"descend_into_macros\");\n+        let _p = profile::span(\"descend_into_macros\");\n         let parent = token.parent();\n         let parent = self.find_file(parent);\n         let sa = self.analyze2(parent.as_ref(), None);\n@@ -523,7 +522,7 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn analyze2(&self, src: InFile<&SyntaxNode>, offset: Option<TextSize>) -> SourceAnalyzer {\n-        let _p = profile(\"Semantics::analyze2\");\n+        let _p = profile::span(\"Semantics::analyze2\");\n \n         let container = match self.with_ctx(|ctx| ctx.find_container(src)) {\n             Some(it) => it,"}, {"sha": "a6ff8b0bfcbf991d11008cbed54d0e4a5477c2c1", "filename": "crates/ra_hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -10,7 +10,6 @@ use hir_def::{\n };\n use hir_expand::{name::AsName, AstId, MacroDefKind};\n use ra_db::FileId;\n-use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, NameOwner},\n     match_ast, AstNode, SyntaxNode,\n@@ -29,7 +28,7 @@ pub(super) struct SourceToDefCtx<'a, 'b> {\n \n impl SourceToDefCtx<'_, '_> {\n     pub(super) fn file_to_def(&mut self, file: FileId) -> Option<ModuleId> {\n-        let _p = profile(\"SourceBinder::to_module_def\");\n+        let _p = profile::span(\"SourceBinder::to_module_def\");\n         let (krate, local_id) = self.db.relevant_crates(file).iter().find_map(|&crate_id| {\n             let crate_def_map = self.db.crate_def_map(crate_id);\n             let local_id = crate_def_map.modules_for_file(file).next()?;\n@@ -39,7 +38,7 @@ impl SourceToDefCtx<'_, '_> {\n     }\n \n     pub(super) fn module_to_def(&mut self, src: InFile<ast::Module>) -> Option<ModuleId> {\n-        let _p = profile(\"module_to_def\");\n+        let _p = profile::span(\"module_to_def\");\n         let parent_declaration = src\n             .as_ref()\n             .map(|it| it.syntax())"}, {"sha": "adfd8c7b71ff8fe57c541ec80dcb9531133c99ac", "filename": "crates/ra_hir_def/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2FCargo.toml?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -22,10 +22,10 @@ smallvec = \"1.4.0\"\n \n stdx = { path = \"../stdx\" }\n \n-ra_arena = { path = \"../ra_arena\" }\n+arena = { path = \"../arena\" }\n ra_db = { path = \"../ra_db\" }\n ra_syntax = { path = \"../ra_syntax\" }\n-ra_prof = { path = \"../ra_prof\" }\n+profile = { path = \"../profile\" }\n hir_expand = { path = \"../ra_hir_expand\", package = \"ra_hir_expand\" }\n test_utils = { path = \"../test_utils\" }\n mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }"}, {"sha": "896a69ca80218bd3462baa23c9c4dcffb2f05123", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -2,12 +2,12 @@\n \n use std::sync::Arc;\n \n+use arena::{map::ArenaMap, Arena};\n use either::Either;\n use hir_expand::{\n     name::{AsName, Name},\n     InFile,\n };\n-use ra_arena::{map::ArenaMap, Arena};\n use ra_syntax::ast::{self, NameOwner, VisibilityOwner};\n use tt::{Delimiter, DelimiterKind, Leaf, Subtree, TokenTree};\n "}, {"sha": "1deb1a8371a6a8aad5e0330827e24120fe2a926f", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -5,13 +5,12 @@ pub mod scope;\n \n use std::{mem, ops::Index, sync::Arc};\n \n+use arena::{map::ArenaMap, Arena};\n use drop_bomb::DropBomb;\n use either::Either;\n use hir_expand::{ast_id_map::AstIdMap, hygiene::Hygiene, AstId, HirFileId, InFile, MacroDefId};\n-use ra_arena::{map::ArenaMap, Arena};\n use ra_cfg::CfgOptions;\n use ra_db::CrateId;\n-use ra_prof::profile;\n use ra_syntax::{ast, AstNode, AstPtr};\n use rustc_hash::FxHashMap;\n use test_utils::mark;\n@@ -228,7 +227,7 @@ impl Body {\n         db: &dyn DefDatabase,\n         def: DefWithBodyId,\n     ) -> (Arc<Body>, Arc<BodySourceMap>) {\n-        let _p = profile(\"body_with_source_map_query\");\n+        let _p = profile::span(\"body_with_source_map_query\");\n         let mut params = None;\n \n         let (file_id, module, body) = match def {"}, {"sha": "4823930062db537ac16f344f34be05a32e53ff9b", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -3,13 +3,13 @@\n \n use std::{any::type_name, sync::Arc};\n \n+use arena::Arena;\n use either::Either;\n use hir_expand::{\n     hygiene::Hygiene,\n     name::{name, AsName, Name},\n     HirFileId, MacroDefId, MacroDefKind,\n };\n-use ra_arena::Arena;\n use ra_syntax::{\n     ast::{\n         self, ArgListOwner, ArrayExprKind, AstChildren, LiteralKind, LoopBodyOwner, NameOwner,"}, {"sha": "f783e18b5467da1b901472be11042e8fc702dbc2", "filename": "crates/ra_hir_def/src/body/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -1,8 +1,8 @@\n //! Name resolution for expressions.\n use std::sync::Arc;\n \n+use arena::{Arena, Idx};\n use hir_expand::name::Name;\n-use ra_arena::{Arena, Idx};\n use rustc_hash::FxHashMap;\n \n use crate::{"}, {"sha": "758c12f33167a75f46de22c174d915721e4d1029", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -3,7 +3,6 @@\n use std::sync::Arc;\n \n use hir_expand::{name::Name, InFile};\n-use ra_prof::profile;\n use ra_syntax::ast;\n \n use crate::{\n@@ -133,7 +132,7 @@ pub struct ImplData {\n \n impl ImplData {\n     pub(crate) fn impl_data_query(db: &dyn DefDatabase, id: ImplId) -> Arc<ImplData> {\n-        let _p = profile(\"impl_data_query\");\n+        let _p = profile::span(\"impl_data_query\");\n         let impl_loc = id.lookup(db);\n \n         let item_tree = db.item_tree(impl_loc.id.file_id);"}, {"sha": "1dd4197f85dbf5ae0ff0b1a83365c5ce9204e6e6", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -3,7 +3,6 @@ use std::sync::Arc;\n \n use hir_expand::{db::AstDatabase, HirFileId};\n use ra_db::{salsa, CrateId, SourceDatabase, Upcast};\n-use ra_prof::profile;\n use ra_syntax::SmolStr;\n \n use crate::{\n@@ -116,6 +115,6 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n }\n \n fn crate_def_map_wait(db: &impl DefDatabase, krate: CrateId) -> Arc<CrateDefMap> {\n-    let _p = profile(\"crate_def_map:wait\");\n+    let _p = profile::span(\"crate_def_map:wait\");\n     db.crate_def_map_query(krate)\n }"}, {"sha": "befe41c2aea2e72a2b42ce4cde7b67908d674ac0", "filename": "crates/ra_hir_def/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -12,8 +12,8 @@\n //!\n //! See also a neighboring `body` module.\n \n+use arena::{Idx, RawId};\n use hir_expand::name::Name;\n-use ra_arena::{Idx, RawId};\n use ra_syntax::ast::RangeOp;\n \n use crate::{"}, {"sha": "46e70eb48ad5662c1b77d09f550f723efdab3ea8", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -1,7 +1,6 @@\n //! An algorithm to find a path to refer to a certain item.\n \n use hir_expand::name::{known, AsName, Name};\n-use ra_prof::profile;\n use rustc_hash::FxHashSet;\n use test_utils::mark;\n \n@@ -18,7 +17,7 @@ use crate::{\n /// Find a path that can be used to refer to a certain item. This can depend on\n /// *from where* you're referring to the item, hence the `from` parameter.\n pub fn find_path(db: &dyn DefDatabase, item: ItemInNs, from: ModuleId) -> Option<ModPath> {\n-    let _p = profile(\"find_path\");\n+    let _p = profile::span(\"find_path\");\n     find_path_inner(db, item, from, MAX_PATH_LEN)\n }\n \n@@ -215,7 +214,7 @@ fn find_local_import_locations(\n     item: ItemInNs,\n     from: ModuleId,\n ) -> Vec<(ModuleId, Name)> {\n-    let _p = profile(\"find_local_import_locations\");\n+    let _p = profile::span(\"find_local_import_locations\");\n \n     // `from` can import anything below `from` with visibility of at least `from`, and anything\n     // above `from` with any visibility. That means we do not need to descend into private siblings"}, {"sha": "0e06a0b12e809be9ac6d6881341400a3f2ec7395", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -4,14 +4,13 @@\n //! in rustc.\n use std::sync::Arc;\n \n+use arena::{map::ArenaMap, Arena};\n use either::Either;\n use hir_expand::{\n     name::{name, AsName, Name},\n     InFile,\n };\n-use ra_arena::{map::ArenaMap, Arena};\n use ra_db::FileId;\n-use ra_prof::profile;\n use ra_syntax::ast::{self, GenericParamsOwner, NameOwner, TypeBoundsOwner};\n \n use crate::{\n@@ -73,7 +72,7 @@ impl GenericParams {\n         db: &dyn DefDatabase,\n         def: GenericDefId,\n     ) -> Arc<GenericParams> {\n-        let _p = profile(\"generic_params_query\");\n+        let _p = profile::span(\"generic_params_query\");\n \n         let generics = match def {\n             GenericDefId::FunctionId(id) => {"}, {"sha": "3a9eec8873c8701027a46e75cb9f611c94fd2fa9", "filename": "crates/ra_hir_def/src/import_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -56,7 +56,7 @@ pub struct ImportMap {\n \n impl ImportMap {\n     pub fn import_map_query(db: &dyn DefDatabase, krate: CrateId) -> Arc<Self> {\n-        let _p = ra_prof::profile(\"import_map_query\");\n+        let _p = profile::span(\"import_map_query\");\n         let def_map = db.crate_def_map(krate);\n         let mut import_map = Self::default();\n \n@@ -254,7 +254,7 @@ pub fn search_dependencies<'a>(\n     krate: CrateId,\n     query: Query,\n ) -> Vec<ItemInNs> {\n-    let _p = ra_prof::profile(\"search_dependencies\").detail(|| format!(\"{:?}\", query));\n+    let _p = profile::span(\"search_dependencies\").detail(|| format!(\"{:?}\", query));\n \n     let graph = db.crate_graph();\n     let import_maps: Vec<_> ="}, {"sha": "104966c7f249b34de127446fbb4205b88658d54d", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -13,6 +13,7 @@ use std::{\n     sync::Arc,\n };\n \n+use arena::{Arena, Idx, RawId};\n use ast::{AstNode, AttrsOwner, NameOwner, StructKind};\n use either::Either;\n use hir_expand::{\n@@ -21,7 +22,6 @@ use hir_expand::{\n     name::{name, AsName, Name},\n     HirFileId, InFile,\n };\n-use ra_arena::{Arena, Idx, RawId};\n use ra_syntax::{ast, match_ast};\n use rustc_hash::FxHashMap;\n use smallvec::SmallVec;\n@@ -77,7 +77,7 @@ pub struct ItemTree {\n \n impl ItemTree {\n     pub fn item_tree_query(db: &dyn DefDatabase, file_id: HirFileId) -> Arc<ItemTree> {\n-        let _p = ra_prof::profile(\"item_tree_query\").detail(|| format!(\"{:?}\", file_id));\n+        let _p = profile::span(\"item_tree_query\").detail(|| format!(\"{:?}\", file_id));\n         let syntax = if let Some(node) = db.parse_or_expand(file_id) {\n             node\n         } else {"}, {"sha": "4523d0fbbf5400dc50a0c26db15a12835225e682", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -2,8 +2,8 @@\n \n use std::{collections::hash_map::Entry, mem, sync::Arc};\n \n+use arena::map::ArenaMap;\n use hir_expand::{ast_id_map::AstIdMap, hygiene::Hygiene, HirFileId};\n-use ra_arena::map::ArenaMap;\n use ra_syntax::{\n     ast::{self, ModuleItemOwner},\n     SyntaxNode,"}, {"sha": "3631499bf71587a1f16f0345fdb8db508b147865", "filename": "crates/ra_hir_def/src/lang_item.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -4,7 +4,6 @@\n //! features, such as Fn family of traits.\n use std::sync::Arc;\n \n-use ra_prof::profile;\n use ra_syntax::SmolStr;\n use rustc_hash::FxHashMap;\n \n@@ -79,7 +78,7 @@ impl LangItems {\n \n     /// Salsa query. This will look for lang items in a specific crate.\n     pub(crate) fn crate_lang_items_query(db: &dyn DefDatabase, krate: CrateId) -> Arc<LangItems> {\n-        let _p = profile(\"crate_lang_items_query\");\n+        let _p = profile::span(\"crate_lang_items_query\");\n \n         let mut lang_items = LangItems::default();\n \n@@ -98,7 +97,7 @@ impl LangItems {\n         db: &dyn DefDatabase,\n         module: ModuleId,\n     ) -> Option<Arc<LangItems>> {\n-        let _p = profile(\"module_lang_items_query\");\n+        let _p = profile::span(\"module_lang_items_query\");\n         let mut lang_items = LangItems::default();\n         lang_items.collect_lang_items(db, module);\n         if lang_items.items.is_empty() {\n@@ -115,7 +114,7 @@ impl LangItems {\n         start_crate: CrateId,\n         item: SmolStr,\n     ) -> Option<LangItemTarget> {\n-        let _p = profile(\"lang_item_query\");\n+        let _p = profile::span(\"lang_item_query\");\n         let lang_items = db.crate_lang_items(start_crate);\n         let start_crate_target = lang_items.items.get(&item);\n         if let Some(target) = start_crate_target {"}, {"sha": "8103937397d313b4f4aaa6323c70d0885ac9d624", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -52,11 +52,11 @@ mod test_db;\n \n use std::hash::{Hash, Hasher};\n \n+use arena::Idx;\n use hir_expand::{\n     ast_id_map::FileAstId, eager::expand_eager_macro, hygiene::Hygiene, AstId, HirFileId, InFile,\n     MacroCallId, MacroCallKind, MacroDefId, MacroDefKind,\n };\n-use ra_arena::Idx;\n use ra_db::{impl_intern_key, salsa, CrateId};\n use ra_syntax::ast;\n "}, {"sha": "dc239997f95653bf8982f8241755df5fe3d09bd3", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -56,10 +56,9 @@ mod tests;\n \n use std::sync::Arc;\n \n+use arena::Arena;\n use hir_expand::{diagnostics::DiagnosticSink, name::Name, InFile};\n-use ra_arena::Arena;\n use ra_db::{CrateId, Edition, FileId};\n-use ra_prof::profile;\n use ra_syntax::ast;\n use rustc_hash::FxHashMap;\n use stdx::format_to;\n@@ -172,7 +171,7 @@ pub struct ModuleData {\n \n impl CrateDefMap {\n     pub(crate) fn crate_def_map_query(db: &dyn DefDatabase, krate: CrateId) -> Arc<CrateDefMap> {\n-        let _p = profile(\"crate_def_map_query\").detail(|| {\n+        let _p = profile::span(\"crate_def_map_query\").detail(|| {\n             db.crate_graph()[krate]\n                 .display_name\n                 .as_ref()"}, {"sha": "52ee401d9ef4372f5df621489d9e7f6ec06d258e", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -1208,7 +1208,7 @@ fn is_macro_rules(path: &ModPath) -> bool {\n #[cfg(test)]\n mod tests {\n     use crate::{db::DefDatabase, test_db::TestDB};\n-    use ra_arena::Arena;\n+    use arena::Arena;\n     use ra_db::{fixture::WithFixture, SourceDatabase};\n \n     use super::*;"}, {"sha": "7a79b0314993d22a7d37b1a82f9c391beb29c07a", "filename": "crates/ra_hir_def/src/src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -1,7 +1,7 @@\n //! Utilities for mapping between hir IDs and the surface syntax.\n \n+use arena::map::ArenaMap;\n use hir_expand::InFile;\n-use ra_arena::map::ArenaMap;\n \n use crate::{db::DefDatabase, item_tree::ItemTreeNode, AssocItemLoc, ItemLoc};\n "}, {"sha": "fd64e701888396bad624cc9f39aff8334305d706", "filename": "crates/ra_hir_def/src/trace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_def%2Fsrc%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftrace.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -9,7 +9,7 @@\n //! absolute offsets. The `Trace` structure (inspired, at least in name, by\n //! Kotlin's `BindingTrace`) allows use the same code to compute both\n //! projections.\n-use ra_arena::{map::ArenaMap, Arena, Idx, RawId};\n+use arena::{map::ArenaMap, Arena, Idx, RawId};\n \n pub(crate) struct Trace<T, V> {\n     arena: Option<Arena<T>>,"}, {"sha": "711a93c56beaa3ae6616e6654fdbb2b69c16b1e1", "filename": "crates/ra_hir_expand/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2FCargo.toml?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -13,11 +13,11 @@ log = \"0.4.8\"\n either = \"1.5.3\"\n rustc-hash = \"1.0.0\"\n \n-ra_arena = { path = \"../ra_arena\" }\n+arena = { path = \"../arena\" }\n ra_db = { path = \"../ra_db\" }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_parser = { path = \"../ra_parser\" }\n-ra_prof = { path = \"../ra_prof\" }\n+profile = { path = \"../profile\" }\n tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n mbe = { path = \"../ra_mbe\", package = \"ra_mbe\" }\n test_utils = { path = \"../test_utils\"}"}, {"sha": "703a85b0f7ac5ace72e1381e3449d43b8f057032", "filename": "crates/ra_hir_expand/src/ast_id_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -12,7 +12,7 @@ use std::{\n     marker::PhantomData,\n };\n \n-use ra_arena::{Arena, Idx};\n+use arena::{Arena, Idx};\n use ra_syntax::{ast, AstNode, AstPtr, SyntaxNode, SyntaxNodePtr};\n \n /// `AstId` points to an AST node in a specific file."}, {"sha": "f30528b3e27bbe00496e4791f1dc55c2cf4e15c1", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -5,7 +5,6 @@ use std::sync::Arc;\n use mbe::{ExpandResult, MacroRules};\n use ra_db::{salsa, SourceDatabase};\n use ra_parser::FragmentKind;\n-use ra_prof::profile;\n use ra_syntax::{algo::diff, AstNode, GreenNode, Parse, SyntaxKind::*, SyntaxNode};\n \n use crate::{\n@@ -278,7 +277,7 @@ pub fn parse_macro_with_arg(\n     macro_file: MacroFile,\n     arg: Option<Arc<(tt::Subtree, mbe::TokenMap)>>,\n ) -> Option<(Parse<SyntaxNode>, Arc<mbe::TokenMap>)> {\n-    let _p = profile(\"parse_macro_query\");\n+    let _p = profile::span(\"parse_macro_query\");\n \n     let macro_call_id = macro_file.macro_call_id;\n     let (tt, err) = if let Some(arg) = arg {"}, {"sha": "380d5e6015d1c4dbb45c2093d8d1a1189b4c7ac4", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -20,9 +20,9 @@ stdx = { path = \"../stdx\" }\n \n hir_def = { path = \"../ra_hir_def\", package = \"ra_hir_def\" }\n hir_expand = { path = \"../ra_hir_expand\", package = \"ra_hir_expand\" }\n-ra_arena = { path = \"../ra_arena\" }\n+arena = { path = \"../arena\" }\n ra_db = { path = \"../ra_db\" }\n-ra_prof = { path = \"../ra_prof\" }\n+profile = { path = \"../profile\" }\n ra_syntax = { path = \"../ra_syntax\" }\n test_utils = { path = \"../test_utils\" }\n "}, {"sha": "7a28673b16769a51b463bc4be4520534e81ed723", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -2,13 +2,12 @@\n \n use std::sync::Arc;\n \n+use arena::map::ArenaMap;\n use hir_def::{\n     db::DefDatabase, expr::ExprId, DefWithBodyId, FunctionId, GenericDefId, ImplId, LocalFieldId,\n     TypeParamId, VariantId,\n };\n-use ra_arena::map::ArenaMap;\n use ra_db::{impl_intern_key, salsa, CrateId, Upcast};\n-use ra_prof::profile;\n \n use crate::{\n     method_resolution::{InherentImpls, TraitImpls},\n@@ -123,7 +122,7 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n }\n \n fn infer_wait(db: &impl HirDatabase, def: DefWithBodyId) -> Arc<InferenceResult> {\n-    let _p = profile(\"infer:wait\").detail(|| match def {\n+    let _p = profile::span(\"infer:wait\").detail(|| match def {\n         DefWithBodyId::FunctionId(it) => db.function_data(it).name.to_string(),\n         DefWithBodyId::StaticId(it) => {\n             db.static_data(it).name.clone().unwrap_or_else(Name::missing).to_string()"}, {"sha": "55c02c1febca9234a37d84d76ad00134a75b25f3", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -8,7 +8,6 @@ use std::any::Any;\n use hir_def::DefWithBodyId;\n use hir_expand::diagnostics::{Diagnostic, DiagnosticSink};\n use hir_expand::{name::Name, HirFileId, InFile};\n-use ra_prof::profile;\n use ra_syntax::{ast, AstPtr, SyntaxNodePtr};\n use stdx::format_to;\n \n@@ -17,7 +16,7 @@ use crate::db::HirDatabase;\n pub use crate::diagnostics::expr::{record_literal_missing_fields, record_pattern_missing_fields};\n \n pub fn validate_body(db: &dyn HirDatabase, owner: DefWithBodyId, sink: &mut DiagnosticSink<'_>) {\n-    let _p = profile(\"validate_body\");\n+    let _p = profile::span(\"validate_body\");\n     let infer = db.infer(owner);\n     infer.add_diagnostics(db, owner, sink);\n     let mut validator = expr::ExprValidator::new(owner, infer.clone(), sink);"}, {"sha": "7f007f1d652e1acfbcb619e6e92209a2e855fbb4", "filename": "crates/ra_hir_ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -218,13 +218,13 @@\n //!   ```\n use std::sync::Arc;\n \n+use arena::Idx;\n use hir_def::{\n     adt::VariantData,\n     body::Body,\n     expr::{Expr, Literal, Pat, PatId},\n     AdtId, EnumVariantId, VariantId,\n };\n-use ra_arena::Idx;\n use smallvec::{smallvec, SmallVec};\n \n use crate::{db::HirDatabase, ApplicationTy, InferenceResult, Ty, TypeCtor};"}, {"sha": "784ae1c3ccfb9d21aaff76a140509f4fd6ee0fea", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -18,6 +18,7 @@ use std::mem;\n use std::ops::Index;\n use std::sync::Arc;\n \n+use arena::map::ArenaMap;\n use hir_def::{\n     body::Body,\n     data::{ConstData, FunctionData, StaticData},\n@@ -30,8 +31,6 @@ use hir_def::{\n     TypeAliasId, VariantId,\n };\n use hir_expand::{diagnostics::DiagnosticSink, name::name};\n-use ra_arena::map::ArenaMap;\n-use ra_prof::profile;\n use ra_syntax::SmolStr;\n use rustc_hash::FxHashMap;\n use stdx::impl_from;\n@@ -64,7 +63,7 @@ mod coerce;\n \n /// The entry point of type inference.\n pub(crate) fn infer_query(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<InferenceResult> {\n-    let _p = profile(\"infer_query\");\n+    let _p = profile::span(\"infer_query\");\n     let resolver = def.resolver(db.upcast());\n     let mut ctx = InferenceContext::new(db, def, resolver);\n "}, {"sha": "7b805fe7ae0126b72a3b49532fc60b66a619955f", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -7,6 +7,7 @@\n //! This usually involves resolving names, collecting generic arguments etc.\n use std::{iter, sync::Arc};\n \n+use arena::map::ArenaMap;\n use hir_def::{\n     adt::StructKind,\n     builtin_type::BuiltinType,\n@@ -19,7 +20,6 @@ use hir_def::{\n     UnionId, VariantId,\n };\n use hir_expand::name::Name;\n-use ra_arena::map::ArenaMap;\n use ra_db::CrateId;\n use smallvec::SmallVec;\n use stdx::impl_from;"}, {"sha": "3b3bee6a70a1dbe213b231a3f13bfccc62694d11", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -13,7 +13,6 @@ use hir_def::{\n };\n use hir_expand::name::Name;\n use ra_db::CrateId;\n-use ra_prof::profile;\n use rustc_hash::{FxHashMap, FxHashSet};\n \n use super::Substs;\n@@ -109,7 +108,7 @@ pub struct TraitImpls {\n \n impl TraitImpls {\n     pub(crate) fn trait_impls_in_crate_query(db: &dyn HirDatabase, krate: CrateId) -> Arc<Self> {\n-        let _p = profile(\"trait_impls_in_crate_query\");\n+        let _p = profile::span(\"trait_impls_in_crate_query\");\n         let mut impls = Self { map: FxHashMap::default() };\n \n         let crate_def_map = db.crate_def_map(krate);\n@@ -135,7 +134,7 @@ impl TraitImpls {\n     }\n \n     pub(crate) fn trait_impls_in_deps_query(db: &dyn HirDatabase, krate: CrateId) -> Arc<Self> {\n-        let _p = profile(\"trait_impls_in_deps_query\");\n+        let _p = profile::span(\"trait_impls_in_deps_query\");\n         let crate_graph = db.crate_graph();\n         let mut res = Self { map: FxHashMap::default() };\n "}, {"sha": "2576a9dfc36f088e43e7c2e01dedbd42e4cf2fec", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -5,7 +5,6 @@ use chalk_ir::cast::Cast;\n use chalk_solve::Solver;\n use hir_def::{lang_item::LangItemTarget, TraitId};\n use ra_db::CrateId;\n-use ra_prof::profile;\n \n use crate::{db::HirDatabase, DebruijnIndex, Substs};\n \n@@ -125,7 +124,7 @@ pub(crate) fn trait_solve_query(\n     krate: CrateId,\n     goal: Canonical<InEnvironment<Obligation>>,\n ) -> Option<Solution> {\n-    let _p = profile(\"trait_solve_query\").detail(|| match &goal.value.value {\n+    let _p = profile::span(\"trait_solve_query\").detail(|| match &goal.value.value {\n         Obligation::Trait(it) => db.trait_data(it.trait_).name.to_string(),\n         Obligation::Projection(_) => \"projection\".to_string(),\n     });"}, {"sha": "3b6af5c9a834db670cceaad8055f8f6c63ccc6c8", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -410,7 +410,7 @@ pub(crate) fn impl_datum_query(\n     krate: CrateId,\n     impl_id: ImplId,\n ) -> Arc<ImplDatum> {\n-    let _p = ra_prof::profile(\"impl_datum\");\n+    let _p = profile::span(\"impl_datum\");\n     debug!(\"impl_datum {:?}\", impl_id);\n     let impl_: hir_def::ImplId = from_chalk(db, impl_id);\n     impl_def_datum(db, krate, impl_id, impl_)"}, {"sha": "bbc9ba4e77d939bb8d058698ab7043068840f5d9", "filename": "crates/ra_ide/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2FCargo.toml?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -27,7 +27,7 @@ ra_db = { path = \"../ra_db\" }\n ra_ide_db = { path = \"../ra_ide_db\" }\n ra_cfg = { path = \"../ra_cfg\" }\n ra_fmt = { path = \"../ra_fmt\" }\n-ra_prof = { path = \"../ra_prof\" }\n+profile = { path = \"../profile\" }\n test_utils = { path = \"../test_utils\" }\n ra_assists = { path = \"../ra_assists\" }\n ra_ssr = { path = \"../ra_ssr\" }"}, {"sha": "07bf133bd6c8a62673a304f06075d7ec5225bfe5", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -10,7 +10,6 @@ use hir::{diagnostics::DiagnosticSinkBuilder, Semantics};\n use itertools::Itertools;\n use ra_db::SourceDatabase;\n use ra_ide_db::RootDatabase;\n-use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, AstNode},\n     SyntaxNode, TextRange, T,\n@@ -33,7 +32,7 @@ pub(crate) fn diagnostics(\n     file_id: FileId,\n     enable_experimental: bool,\n ) -> Vec<Diagnostic> {\n-    let _p = profile(\"diagnostics\");\n+    let _p = profile::span(\"diagnostics\");\n     let sema = Semantics::new(db);\n     let parse = db.parse(file_id);\n     let mut res = Vec::new();"}, {"sha": "920b04e8d735aec2da5fdd3e703d4e3e092b7e67", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -1,6 +1,5 @@\n use hir::{Adt, Callable, HirDisplay, Semantics, Type};\n use ra_ide_db::RootDatabase;\n-use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, ArgListOwner, AstNode},\n     match_ast, Direction, NodeOrToken, SmolStr, SyntaxKind, TextRange, T,\n@@ -64,7 +63,7 @@ pub(crate) fn inlay_hints(\n     file_id: FileId,\n     config: &InlayHintsConfig,\n ) -> Vec<InlayHint> {\n-    let _p = profile(\"inlay_hints\");\n+    let _p = profile::span(\"inlay_hints\");\n     let sema = Semantics::new(db);\n     let file = sema.parse(file_id);\n "}, {"sha": "bfcf5d750a4aa00736f270cbf5345b38d6497d10", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -176,7 +176,7 @@ impl AnalysisHost {\n         self.db.collect_garbage();\n     }\n     /// NB: this clears the database\n-    pub fn per_query_memory_usage(&mut self) -> Vec<(String, ra_prof::Bytes)> {\n+    pub fn per_query_memory_usage(&mut self) -> Vec<(String, profile::Bytes)> {\n         self.db.per_query_memory_usage()\n     }\n     pub fn request_cancellation(&mut self) {"}, {"sha": "c4eea3a45bbf303e9bf070e88692a92aeb1b7185", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -17,7 +17,6 @@ use ra_ide_db::{\n     search::SearchScope,\n     RootDatabase,\n };\n-use ra_prof::profile;\n use ra_syntax::{\n     algo::find_node_at_offset,\n     ast::{self, NameOwner},\n@@ -90,7 +89,7 @@ pub(crate) fn find_all_refs(\n     position: FilePosition,\n     search_scope: Option<SearchScope>,\n ) -> Option<RangeInfo<ReferenceSearchResult>> {\n-    let _p = profile(\"find_all_refs\");\n+    let _p = profile::span(\"find_all_refs\");\n     let syntax = sema.parse(position.file_id).syntax().clone();\n \n     let (opt_name, search_kind) = if let Some(name) ="}, {"sha": "009bb662f7704d732fb51e7bb4f102b0334e11f0", "filename": "crates/ra_ide/src/status.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fstatus.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -1,6 +1,7 @@\n use std::{fmt, iter::FromIterator, sync::Arc};\n \n use hir::MacroFile;\n+use profile::{memory_usage, Bytes};\n use ra_db::{\n     salsa::debug::{DebugQueryTable, TableEntry},\n     FileTextQuery, SourceRootId,\n@@ -9,7 +10,6 @@ use ra_ide_db::{\n     symbol_index::{LibrarySymbolsQuery, SymbolIndex},\n     RootDatabase,\n };\n-use ra_prof::{memory_usage, Bytes};\n use ra_syntax::{ast, Parse, SyntaxNode};\n use rustc_hash::FxHashMap;\n "}, {"sha": "ebdf05127a9383b01188b790b70703e82e22d0e4", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -9,7 +9,6 @@ use ra_ide_db::{\n     defs::{classify_name, classify_name_ref, Definition, NameClass, NameRefClass},\n     RootDatabase,\n };\n-use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, HasFormatSpecifier},\n     AstNode, AstToken, Direction, NodeOrToken, SyntaxElement,\n@@ -46,7 +45,7 @@ pub(crate) fn highlight(\n     range_to_highlight: Option<TextRange>,\n     syntactic_name_ref_highlighting: bool,\n ) -> Vec<HighlightedRange> {\n-    let _p = profile(\"highlight\");\n+    let _p = profile::span(\"highlight\");\n     let sema = Semantics::new(db);\n \n     // Determine the root based on the given range."}, {"sha": "92b8ef82a7a9ee1c3b5987d74b89dca9dcfbdfe1", "filename": "crates/ra_ide_db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2FCargo.toml?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -24,7 +24,7 @@ stdx = { path = \"../stdx\" }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_db = { path = \"../ra_db\" }\n-ra_prof = { path = \"../ra_prof\" }\n+profile = { path = \"../profile\" }\n test_utils = { path = \"../test_utils\" }\n \n # ra_ide should depend only on the top-level `hir` package. if you need"}, {"sha": "7a4e04ca9bb27615bd101782c805ae2e5d414c85", "filename": "crates/ra_ide_db/src/change.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fchange.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -3,11 +3,11 @@\n \n use std::{fmt, sync::Arc, time};\n \n+use profile::{memory_usage, Bytes};\n use ra_db::{\n     salsa::{Database, Durability, SweepStrategy},\n     CrateGraph, FileId, SourceDatabase, SourceDatabaseExt, SourceRoot, SourceRootId,\n };\n-use ra_prof::{memory_usage, profile, Bytes};\n use rustc_hash::FxHashSet;\n \n use crate::{symbol_index::SymbolsDatabase, RootDatabase};\n@@ -85,12 +85,12 @@ const GC_COOLDOWN: time::Duration = time::Duration::from_millis(100);\n \n impl RootDatabase {\n     pub fn request_cancellation(&mut self) {\n-        let _p = profile(\"RootDatabase::request_cancellation\");\n+        let _p = profile::span(\"RootDatabase::request_cancellation\");\n         self.salsa_runtime_mut().synthetic_write(Durability::LOW);\n     }\n \n     pub fn apply_change(&mut self, change: AnalysisChange) {\n-        let _p = profile(\"RootDatabase::apply_change\");\n+        let _p = profile::span(\"RootDatabase::apply_change\");\n         self.request_cancellation();\n         log::info!(\"apply_change {:?}\", change);\n         if let Some(roots) = change.roots {\n@@ -141,7 +141,7 @@ impl RootDatabase {\n             return;\n         }\n \n-        let _p = profile(\"RootDatabase::collect_garbage\");\n+        let _p = profile::span(\"RootDatabase::collect_garbage\");\n         self.last_gc = crate::wasm_shims::Instant::now();\n \n         let sweep = SweepStrategy::default().discard_values().sweep_all_revisions();"}, {"sha": "d46d1fe71baa8c87c004a3cdddaec8c75946451f", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -9,7 +9,6 @@ use hir::{\n     db::HirDatabase, Crate, Field, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef,\n     Name, PathResolution, Semantics, TypeParam, Visibility,\n };\n-use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, AstNode},\n     match_ast, SyntaxNode,\n@@ -110,7 +109,7 @@ impl NameClass {\n }\n \n pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option<NameClass> {\n-    let _p = profile(\"classify_name\");\n+    let _p = profile::span(\"classify_name\");\n \n     let parent = name.syntax().parent()?;\n \n@@ -249,7 +248,7 @@ pub fn classify_name_ref(\n     sema: &Semantics<RootDatabase>,\n     name_ref: &ast::NameRef,\n ) -> Option<NameRefClass> {\n-    let _p = profile(\"classify_name_ref\");\n+    let _p = profile::span(\"classify_name_ref\");\n \n     let parent = name_ref.syntax().parent()?;\n "}, {"sha": "d510ce3b76e3a841334761e226c40a3af47604fa", "filename": "crates/ra_ide_db/src/imports_locator.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -2,7 +2,6 @@\n //! Later, this should be moved away to a separate crate that is accessible from the ra_assists module.\n \n use hir::{Crate, MacroDef, ModuleDef, Semantics};\n-use ra_prof::profile;\n use ra_syntax::{ast, AstNode, SyntaxKind::NAME};\n \n use crate::{\n@@ -18,7 +17,7 @@ pub fn find_imports<'a>(\n     krate: Crate,\n     name_to_import: &str,\n ) -> Vec<Either<ModuleDef, MacroDef>> {\n-    let _p = profile(\"search_for_imports\");\n+    let _p = profile::span(\"search_for_imports\");\n     let db = sema.db;\n \n     // Query dependencies first.\n@@ -51,7 +50,7 @@ fn get_name_definition<'a>(\n     sema: &Semantics<'a, RootDatabase>,\n     import_candidate: &FileSymbol,\n ) -> Option<Definition> {\n-    let _p = profile(\"get_name_definition\");\n+    let _p = profile::span(\"get_name_definition\");\n     let file_id = import_candidate.file_id;\n \n     let candidate_node = import_candidate.ptr.to_node(sema.parse(file_id).syntax());"}, {"sha": "d90b830d0c91d92ca5b886849a3a67568dd85a55", "filename": "crates/ra_ide_db/src/search.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -9,7 +9,6 @@ use std::{convert::TryInto, mem};\n use hir::{DefWithBody, HasSource, Module, ModuleSource, Semantics, Visibility};\n use once_cell::unsync::Lazy;\n use ra_db::{FileId, FileRange, SourceDatabaseExt};\n-use ra_prof::profile;\n use ra_syntax::{ast, match_ast, AstNode, TextRange, TextSize};\n use rustc_hash::FxHashMap;\n \n@@ -107,7 +106,7 @@ impl IntoIterator for SearchScope {\n \n impl Definition {\n     fn search_scope(&self, db: &RootDatabase) -> SearchScope {\n-        let _p = profile(\"search_scope\");\n+        let _p = profile::span(\"search_scope\");\n         let module = match self.module(db) {\n             Some(it) => it,\n             None => return SearchScope::empty(),\n@@ -187,7 +186,7 @@ impl Definition {\n         sema: &Semantics<RootDatabase>,\n         search_scope: Option<SearchScope>,\n     ) -> Vec<Reference> {\n-        let _p = profile(\"Definition::find_usages\");\n+        let _p = profile::span(\"Definition::find_usages\");\n \n         let search_scope = {\n             let base = self.search_scope(sema.db);"}, {"sha": "6ca8bb516986182a9f6b38e639bd30ab2cd02c52", "filename": "crates/ra_ide_db/src/symbol_index.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -34,7 +34,6 @@ use ra_db::{\n     salsa::{self, ParallelDatabase},\n     CrateId, FileId, SourceDatabaseExt, SourceRootId,\n };\n-use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, NameOwner},\n     match_ast, AstNode, Parse, SmolStr, SourceFile,\n@@ -101,7 +100,7 @@ pub trait SymbolsDatabase: hir::db::HirDatabase + SourceDatabaseExt {\n }\n \n fn library_symbols(db: &dyn SymbolsDatabase) -> Arc<FxHashMap<SourceRootId, SymbolIndex>> {\n-    let _p = profile(\"library_symbols\");\n+    let _p = profile::span(\"library_symbols\");\n \n     let roots = db.library_roots();\n     let res = roots\n@@ -162,7 +161,7 @@ impl<DB: ParallelDatabase> Clone for Snap<salsa::Snapshot<DB>> {\n // | VS Code | kbd:[Ctrl+T]\n // |===\n pub fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol> {\n-    let _p = ra_prof::profile(\"world_symbols\").detail(|| query.query.clone());\n+    let _p = profile::span(\"world_symbols\").detail(|| query.query.clone());\n \n     let tmp1;\n     let tmp2;"}, {"sha": "27b1f5d33f91123c50a44905af2de6073a6693cb", "filename": "crates/ra_project_model/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_project_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_project_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2FCargo.toml?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -14,7 +14,7 @@ rustc-hash = \"1.1.0\"\n \n cargo_metadata = \"0.11.1\"\n \n-ra_arena = { path = \"../ra_arena\" }\n+arena = { path = \"../arena\" }\n ra_cfg = { path = \"../ra_cfg\" }\n ra_db = { path = \"../ra_db\" }\n ra_toolchain = { path = \"../ra_toolchain\" }"}, {"sha": "a526d743d4ed113dca96437451149136a5b34795", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -8,9 +8,9 @@ use std::{\n };\n \n use anyhow::{Context, Result};\n+use arena::{Arena, Idx};\n use cargo_metadata::{BuildScript, CargoOpt, Message, MetadataCommand, PackageId};\n use paths::{AbsPath, AbsPathBuf};\n-use ra_arena::{Arena, Idx};\n use ra_db::Edition;\n use rustc_hash::FxHashMap;\n "}, {"sha": "6ef001769c9628de829631bf75d860966175031b", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -3,8 +3,8 @@\n use std::{convert::TryFrom, env, ops, path::Path, process::Command};\n \n use anyhow::{bail, format_err, Result};\n+use arena::{Arena, Idx};\n use paths::{AbsPath, AbsPathBuf};\n-use ra_arena::{Arena, Idx};\n \n use crate::utf8_stdout;\n "}, {"sha": "6cbf43bb2e705ef61b680a3ffbddfe60e266493d", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -36,7 +36,7 @@ stdx = { path = \"../stdx\" }\n lsp-server = \"0.3.3\"\n flycheck = { path = \"../flycheck\" }\n ra_ide = { path = \"../ra_ide\" }\n-ra_prof = { path = \"../ra_prof\" }\n+profile = { path = \"../profile\" }\n ra_project_model = { path = \"../ra_project_model\" }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }"}, {"sha": "9622d71c06b5fd6b5b77af766691a67a2ef94c94", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -55,7 +55,7 @@ fn try_main() -> Result<()> {\n fn setup_logging() -> Result<()> {\n     std::env::set_var(\"RUST_BACKTRACE\", \"short\");\n     env_logger::try_init_from_env(\"RA_LOG\")?;\n-    ra_prof::init();\n+    profile::init();\n     Ok(())\n }\n "}, {"sha": "46d70fcb2ae08aa9662412977812cee5c2b61ad0", "filename": "crates/rust-analyzer/src/cli.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -11,7 +11,6 @@ use std::io::Read;\n \n use anyhow::Result;\n use ra_ide::Analysis;\n-use ra_prof::profile;\n use ra_syntax::{AstNode, SourceFile};\n \n pub use analysis_bench::{BenchCmd, BenchWhat, Position};\n@@ -38,7 +37,7 @@ impl Verbosity {\n }\n \n pub fn parse(no_dump: bool) -> Result<()> {\n-    let _p = profile(\"parsing\");\n+    let _p = profile::span(\"parsing\");\n     let file = file()?;\n     if !no_dump {\n         println!(\"{:#?}\", file.syntax());"}, {"sha": "bc5f77e1a9d4f644df53d09cf0185f60b3c63b21", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -52,7 +52,7 @@ impl FromStr for Position {\n \n impl BenchCmd {\n     pub fn run(self, verbosity: Verbosity) -> Result<()> {\n-        ra_prof::init();\n+        profile::init();\n \n         let start = Instant::now();\n         eprint!(\"loading: \");"}, {"sha": "a30c1ec7980f8cfea1c3ddb332a9aca7a3624df0", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -29,7 +29,7 @@ use crate::{\n     },\n     print_memory_usage,\n };\n-use ra_prof::StopWatch;\n+use profile::StopWatch;\n \n /// Need to wrap Snapshot to provide `Clone` impl for `map_with`\n struct Snap<DB>(DB);"}, {"sha": "8c115c8a67c83e2909e36308060196f03a153f62", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -27,7 +27,6 @@ use crate::{\n     to_proto::url_from_abs_path,\n     Result,\n };\n-use ra_prof::profile;\n \n #[derive(Eq, PartialEq, Copy, Clone)]\n pub(crate) enum Status {\n@@ -135,7 +134,7 @@ impl GlobalState {\n     }\n \n     pub(crate) fn process_changes(&mut self) -> bool {\n-        let _p = profile(\"GlobalState::process_changes\");\n+        let _p = profile::span(\"GlobalState::process_changes\");\n         let mut fs_changes = Vec::new();\n         let mut has_fs_changes = false;\n "}, {"sha": "d9b75eed45b00e6b13e8db7a32a25a48965894c4", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 38, "deletions": 39, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -22,7 +22,6 @@ use ra_ide::{\n     FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, NavigationTarget, Query,\n     RangeInfo, Runnable, RunnableKind, SearchScope, TextEdit,\n };\n-use ra_prof::profile;\n use ra_project_model::TargetKind;\n use ra_syntax::{algo, ast, AstNode, SyntaxKind, TextRange, TextSize};\n use serde::{Deserialize, Serialize};\n@@ -39,7 +38,7 @@ use crate::{\n };\n \n pub(crate) fn handle_analyzer_status(snap: GlobalStateSnapshot, _: ()) -> Result<String> {\n-    let _p = profile(\"handle_analyzer_status\");\n+    let _p = profile::span(\"handle_analyzer_status\");\n \n     let mut buf = String::new();\n     if snap.workspaces.is_empty() {\n@@ -64,7 +63,7 @@ pub(crate) fn handle_analyzer_status(snap: GlobalStateSnapshot, _: ()) -> Result\n }\n \n pub(crate) fn handle_memory_usage(state: &mut GlobalState, _: ()) -> Result<String> {\n-    let _p = profile(\"handle_memory_usage\");\n+    let _p = profile::span(\"handle_memory_usage\");\n     let mem = state.analysis_host.per_query_memory_usage();\n \n     let mut out = String::new();\n@@ -78,7 +77,7 @@ pub(crate) fn handle_syntax_tree(\n     snap: GlobalStateSnapshot,\n     params: lsp_ext::SyntaxTreeParams,\n ) -> Result<String> {\n-    let _p = profile(\"handle_syntax_tree\");\n+    let _p = profile::span(\"handle_syntax_tree\");\n     let id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let line_index = snap.analysis.file_line_index(id)?;\n     let text_range = params.range.map(|r| from_proto::text_range(&line_index, r));\n@@ -90,7 +89,7 @@ pub(crate) fn handle_expand_macro(\n     snap: GlobalStateSnapshot,\n     params: lsp_ext::ExpandMacroParams,\n ) -> Result<Option<lsp_ext::ExpandedMacro>> {\n-    let _p = profile(\"handle_expand_macro\");\n+    let _p = profile::span(\"handle_expand_macro\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let line_index = snap.analysis.file_line_index(file_id)?;\n     let offset = from_proto::offset(&line_index, params.position);\n@@ -103,7 +102,7 @@ pub(crate) fn handle_selection_range(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::SelectionRangeParams,\n ) -> Result<Option<Vec<lsp_types::SelectionRange>>> {\n-    let _p = profile(\"handle_selection_range\");\n+    let _p = profile::span(\"handle_selection_range\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let line_index = snap.analysis.file_line_index(file_id)?;\n     let res: Result<Vec<lsp_types::SelectionRange>> = params\n@@ -146,7 +145,7 @@ pub(crate) fn handle_matching_brace(\n     snap: GlobalStateSnapshot,\n     params: lsp_ext::MatchingBraceParams,\n ) -> Result<Vec<Position>> {\n-    let _p = profile(\"handle_matching_brace\");\n+    let _p = profile::span(\"handle_matching_brace\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let line_index = snap.analysis.file_line_index(file_id)?;\n     let res = params\n@@ -168,7 +167,7 @@ pub(crate) fn handle_join_lines(\n     snap: GlobalStateSnapshot,\n     params: lsp_ext::JoinLinesParams,\n ) -> Result<Vec<lsp_types::TextEdit>> {\n-    let _p = profile(\"handle_join_lines\");\n+    let _p = profile::span(\"handle_join_lines\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let line_index = snap.analysis.file_line_index(file_id)?;\n     let line_endings = snap.file_line_endings(file_id);\n@@ -191,7 +190,7 @@ pub(crate) fn handle_on_enter(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::TextDocumentPositionParams,\n ) -> Result<Option<Vec<lsp_ext::SnippetTextEdit>>> {\n-    let _p = profile(\"handle_on_enter\");\n+    let _p = profile::span(\"handle_on_enter\");\n     let position = from_proto::file_position(&snap, params)?;\n     let edit = match snap.analysis.on_enter(position)? {\n         None => return Ok(None),\n@@ -208,7 +207,7 @@ pub(crate) fn handle_on_type_formatting(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::DocumentOnTypeFormattingParams,\n ) -> Result<Option<Vec<lsp_types::TextEdit>>> {\n-    let _p = profile(\"handle_on_type_formatting\");\n+    let _p = profile::span(\"handle_on_type_formatting\");\n     let mut position = from_proto::file_position(&snap, params.text_document_position)?;\n     let line_index = snap.analysis.file_line_index(position.file_id)?;\n     let line_endings = snap.file_line_endings(position.file_id);\n@@ -247,7 +246,7 @@ pub(crate) fn handle_document_symbol(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::DocumentSymbolParams,\n ) -> Result<Option<lsp_types::DocumentSymbolResponse>> {\n-    let _p = profile(\"handle_document_symbol\");\n+    let _p = profile::span(\"handle_document_symbol\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let line_index = snap.analysis.file_line_index(file_id)?;\n \n@@ -332,7 +331,7 @@ pub(crate) fn handle_workspace_symbol(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::WorkspaceSymbolParams,\n ) -> Result<Option<Vec<SymbolInformation>>> {\n-    let _p = profile(\"handle_workspace_symbol\");\n+    let _p = profile::span(\"handle_workspace_symbol\");\n     let all_symbols = params.query.contains('#');\n     let libs = params.query.contains('*');\n     let query = {\n@@ -380,7 +379,7 @@ pub(crate) fn handle_goto_definition(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::GotoDefinitionParams,\n ) -> Result<Option<lsp_types::GotoDefinitionResponse>> {\n-    let _p = profile(\"handle_goto_definition\");\n+    let _p = profile::span(\"handle_goto_definition\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n     let nav_info = match snap.analysis.goto_definition(position)? {\n         None => return Ok(None),\n@@ -395,7 +394,7 @@ pub(crate) fn handle_goto_implementation(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::request::GotoImplementationParams,\n ) -> Result<Option<lsp_types::request::GotoImplementationResponse>> {\n-    let _p = profile(\"handle_goto_implementation\");\n+    let _p = profile::span(\"handle_goto_implementation\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n     let nav_info = match snap.analysis.goto_implementation(position)? {\n         None => return Ok(None),\n@@ -410,7 +409,7 @@ pub(crate) fn handle_goto_type_definition(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::request::GotoTypeDefinitionParams,\n ) -> Result<Option<lsp_types::request::GotoTypeDefinitionResponse>> {\n-    let _p = profile(\"handle_goto_type_definition\");\n+    let _p = profile::span(\"handle_goto_type_definition\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n     let nav_info = match snap.analysis.goto_type_definition(position)? {\n         None => return Ok(None),\n@@ -425,7 +424,7 @@ pub(crate) fn handle_parent_module(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::TextDocumentPositionParams,\n ) -> Result<Option<lsp_types::GotoDefinitionResponse>> {\n-    let _p = profile(\"handle_parent_module\");\n+    let _p = profile::span(\"handle_parent_module\");\n     let position = from_proto::file_position(&snap, params)?;\n     let navs = snap.analysis.parent_module(position)?;\n     let res = to_proto::goto_definition_response(&snap, None, navs)?;\n@@ -436,7 +435,7 @@ pub(crate) fn handle_runnables(\n     snap: GlobalStateSnapshot,\n     params: lsp_ext::RunnablesParams,\n ) -> Result<Vec<lsp_ext::Runnable>> {\n-    let _p = profile(\"handle_runnables\");\n+    let _p = profile::span(\"handle_runnables\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let line_index = snap.analysis.file_line_index(file_id)?;\n     let offset = params.position.map(|it| from_proto::offset(&line_index, it));\n@@ -513,7 +512,7 @@ pub(crate) fn handle_completion(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::CompletionParams,\n ) -> Result<Option<lsp_types::CompletionResponse>> {\n-    let _p = profile(\"handle_completion\");\n+    let _p = profile::span(\"handle_completion\");\n     let position = from_proto::file_position(&snap, params.text_document_position)?;\n     let completion_triggered_after_single_colon = {\n         let mut res = false;\n@@ -555,7 +554,7 @@ pub(crate) fn handle_folding_range(\n     snap: GlobalStateSnapshot,\n     params: FoldingRangeParams,\n ) -> Result<Option<Vec<FoldingRange>>> {\n-    let _p = profile(\"handle_folding_range\");\n+    let _p = profile::span(\"handle_folding_range\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let folds = snap.analysis.folding_ranges(file_id)?;\n     let text = snap.analysis.file_text(file_id)?;\n@@ -572,7 +571,7 @@ pub(crate) fn handle_signature_help(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::SignatureHelpParams,\n ) -> Result<Option<lsp_types::SignatureHelp>> {\n-    let _p = profile(\"handle_signature_help\");\n+    let _p = profile::span(\"handle_signature_help\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n     let call_info = match snap.analysis.call_info(position)? {\n         Some(it) => it,\n@@ -591,7 +590,7 @@ pub(crate) fn handle_hover(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::HoverParams,\n ) -> Result<Option<lsp_ext::Hover>> {\n-    let _p = profile(\"handle_hover\");\n+    let _p = profile::span(\"handle_hover\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n     let info = match snap.analysis.hover(position)? {\n         None => return Ok(None),\n@@ -614,7 +613,7 @@ pub(crate) fn handle_prepare_rename(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::TextDocumentPositionParams,\n ) -> Result<Option<PrepareRenameResponse>> {\n-    let _p = profile(\"handle_prepare_rename\");\n+    let _p = profile::span(\"handle_prepare_rename\");\n     let position = from_proto::file_position(&snap, params)?;\n \n     let optional_change = snap.analysis.rename(position, \"dummy\")?;\n@@ -632,7 +631,7 @@ pub(crate) fn handle_rename(\n     snap: GlobalStateSnapshot,\n     params: RenameParams,\n ) -> Result<Option<WorkspaceEdit>> {\n-    let _p = profile(\"handle_rename\");\n+    let _p = profile::span(\"handle_rename\");\n     let position = from_proto::file_position(&snap, params.text_document_position)?;\n \n     if params.new_name.is_empty() {\n@@ -656,7 +655,7 @@ pub(crate) fn handle_references(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::ReferenceParams,\n ) -> Result<Option<Vec<Location>>> {\n-    let _p = profile(\"handle_references\");\n+    let _p = profile::span(\"handle_references\");\n     let position = from_proto::file_position(&snap, params.text_document_position)?;\n \n     let refs = match snap.analysis.find_all_refs(position, None)? {\n@@ -683,7 +682,7 @@ pub(crate) fn handle_formatting(\n     snap: GlobalStateSnapshot,\n     params: DocumentFormattingParams,\n ) -> Result<Option<Vec<lsp_types::TextEdit>>> {\n-    let _p = profile(\"handle_formatting\");\n+    let _p = profile::span(\"handle_formatting\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let file = snap.analysis.file_text(file_id)?;\n     let crate_ids = snap.analysis.crate_for(file_id)?;\n@@ -805,7 +804,7 @@ pub(crate) fn handle_code_action(\n     mut snap: GlobalStateSnapshot,\n     params: lsp_types::CodeActionParams,\n ) -> Result<Option<Vec<lsp_ext::CodeAction>>> {\n-    let _p = profile(\"handle_code_action\");\n+    let _p = profile::span(\"handle_code_action\");\n     // We intentionally don't support command-based actions, as those either\n     // requires custom client-code anyway, or requires server-initiated edits.\n     // Server initiated edits break causality, so we avoid those as well.\n@@ -847,7 +846,7 @@ pub(crate) fn handle_resolve_code_action(\n     mut snap: GlobalStateSnapshot,\n     params: lsp_ext::ResolveCodeActionParams,\n ) -> Result<Option<lsp_ext::SnippetWorkspaceEdit>> {\n-    let _p = profile(\"handle_resolve_code_action\");\n+    let _p = profile::span(\"handle_resolve_code_action\");\n     let file_id = from_proto::file_id(&snap, &params.code_action_params.text_document.uri)?;\n     let line_index = snap.analysis.file_line_index(file_id)?;\n     let range = from_proto::text_range(&line_index, params.code_action_params.range);\n@@ -871,7 +870,7 @@ pub(crate) fn handle_code_lens(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::CodeLensParams,\n ) -> Result<Option<Vec<CodeLens>>> {\n-    let _p = profile(\"handle_code_lens\");\n+    let _p = profile::span(\"handle_code_lens\");\n     let mut lenses: Vec<CodeLens> = Default::default();\n \n     if snap.config.lens.none() {\n@@ -957,7 +956,7 @@ pub(crate) fn handle_code_lens_resolve(\n     snap: GlobalStateSnapshot,\n     code_lens: CodeLens,\n ) -> Result<CodeLens> {\n-    let _p = profile(\"handle_code_lens_resolve\");\n+    let _p = profile::span(\"handle_code_lens_resolve\");\n     let data = code_lens.data.unwrap();\n     let resolve = from_json::<Option<CodeLensResolveData>>(\"CodeLensResolveData\", data)?;\n     match resolve {\n@@ -994,7 +993,7 @@ pub(crate) fn handle_document_highlight(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::DocumentHighlightParams,\n ) -> Result<Option<Vec<DocumentHighlight>>> {\n-    let _p = profile(\"handle_document_highlight\");\n+    let _p = profile::span(\"handle_document_highlight\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n     let line_index = snap.analysis.file_line_index(position.file_id)?;\n \n@@ -1021,7 +1020,7 @@ pub(crate) fn handle_ssr(\n     snap: GlobalStateSnapshot,\n     params: lsp_ext::SsrParams,\n ) -> Result<lsp_types::WorkspaceEdit> {\n-    let _p = profile(\"handle_ssr\");\n+    let _p = profile::span(\"handle_ssr\");\n     let selections = params\n         .selections\n         .iter()\n@@ -1041,7 +1040,7 @@ pub(crate) fn publish_diagnostics(\n     snap: &GlobalStateSnapshot,\n     file_id: FileId,\n ) -> Result<Vec<Diagnostic>> {\n-    let _p = profile(\"publish_diagnostics\");\n+    let _p = profile::span(\"publish_diagnostics\");\n     let line_index = snap.analysis.file_line_index(file_id)?;\n     let diagnostics: Vec<Diagnostic> = snap\n         .analysis\n@@ -1064,7 +1063,7 @@ pub(crate) fn handle_inlay_hints(\n     snap: GlobalStateSnapshot,\n     params: InlayHintsParams,\n ) -> Result<Vec<InlayHint>> {\n-    let _p = profile(\"handle_inlay_hints\");\n+    let _p = profile::span(\"handle_inlay_hints\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let line_index = snap.analysis.file_line_index(file_id)?;\n     Ok(snap\n@@ -1079,7 +1078,7 @@ pub(crate) fn handle_call_hierarchy_prepare(\n     snap: GlobalStateSnapshot,\n     params: CallHierarchyPrepareParams,\n ) -> Result<Option<Vec<CallHierarchyItem>>> {\n-    let _p = profile(\"handle_call_hierarchy_prepare\");\n+    let _p = profile::span(\"handle_call_hierarchy_prepare\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n \n     let nav_info = match snap.analysis.call_hierarchy(position)? {\n@@ -1101,7 +1100,7 @@ pub(crate) fn handle_call_hierarchy_incoming(\n     snap: GlobalStateSnapshot,\n     params: CallHierarchyIncomingCallsParams,\n ) -> Result<Option<Vec<CallHierarchyIncomingCall>>> {\n-    let _p = profile(\"handle_call_hierarchy_incoming\");\n+    let _p = profile::span(\"handle_call_hierarchy_incoming\");\n     let item = params.item;\n \n     let doc = TextDocumentIdentifier::new(item.uri);\n@@ -1136,7 +1135,7 @@ pub(crate) fn handle_call_hierarchy_outgoing(\n     snap: GlobalStateSnapshot,\n     params: CallHierarchyOutgoingCallsParams,\n ) -> Result<Option<Vec<CallHierarchyOutgoingCall>>> {\n-    let _p = profile(\"handle_call_hierarchy_outgoing\");\n+    let _p = profile::span(\"handle_call_hierarchy_outgoing\");\n     let item = params.item;\n \n     let doc = TextDocumentIdentifier::new(item.uri);\n@@ -1171,7 +1170,7 @@ pub(crate) fn handle_semantic_tokens(\n     snap: GlobalStateSnapshot,\n     params: SemanticTokensParams,\n ) -> Result<Option<SemanticTokensResult>> {\n-    let _p = profile(\"handle_semantic_tokens\");\n+    let _p = profile::span(\"handle_semantic_tokens\");\n \n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let text = snap.analysis.file_text(file_id)?;\n@@ -1190,7 +1189,7 @@ pub(crate) fn handle_semantic_tokens_edits(\n     snap: GlobalStateSnapshot,\n     params: SemanticTokensEditsParams,\n ) -> Result<Option<SemanticTokensEditResult>> {\n-    let _p = profile(\"handle_semantic_tokens_edits\");\n+    let _p = profile::span(\"handle_semantic_tokens_edits\");\n \n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let text = snap.analysis.file_text(file_id)?;\n@@ -1220,7 +1219,7 @@ pub(crate) fn handle_semantic_tokens_range(\n     snap: GlobalStateSnapshot,\n     params: SemanticTokensRangeParams,\n ) -> Result<Option<SemanticTokensRangeResult>> {\n-    let _p = profile(\"handle_semantic_tokens_range\");\n+    let _p = profile::span(\"handle_semantic_tokens_range\");\n \n     let frange = from_proto::file_range(&snap, params.text_document, params.range)?;\n     let text = snap.analysis.file_text(frange.file_id)?;"}, {"sha": "8d2e76cc2409e1b0cf054f795c4876ad58465f6c", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -74,16 +74,16 @@ impl std::error::Error for LspError {}\n fn print_memory_usage(mut host: AnalysisHost, vfs: Vfs) {\n     let mut mem = host.per_query_memory_usage();\n \n-    let before = ra_prof::memory_usage();\n+    let before = profile::memory_usage();\n     drop(vfs);\n-    let vfs = before.allocated - ra_prof::memory_usage().allocated;\n+    let vfs = before.allocated - profile::memory_usage().allocated;\n     mem.push((\"VFS\".into(), vfs));\n \n-    let before = ra_prof::memory_usage();\n+    let before = profile::memory_usage();\n     drop(host);\n-    mem.push((\"Unaccounted\".into(), before.allocated - ra_prof::memory_usage().allocated));\n+    mem.push((\"Unaccounted\".into(), before.allocated - profile::memory_usage().allocated));\n \n-    mem.push((\"Remaining\".into(), ra_prof::memory_usage().allocated));\n+    mem.push((\"Remaining\".into(), profile::memory_usage().allocated));\n \n     for (name, bytes) in mem {\n         eprintln!(\"{:>8} {}\", bytes, name);"}, {"sha": "32962b088538190f5bf6107518a91773f9e9b37b", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -10,7 +10,6 @@ use lsp_server::{Connection, Notification, Request, Response};\n use lsp_types::notification::Notification as _;\n use ra_db::VfsPath;\n use ra_ide::{Canceled, FileId};\n-use ra_prof::profile;\n \n use crate::{\n     config::Config,\n@@ -173,7 +172,7 @@ impl GlobalState {\n     fn handle_event(&mut self, event: Event) -> Result<()> {\n         let loop_start = Instant::now();\n         // NOTE: don't count blocking select! call as a loop-turn time\n-        let _p = profile(\"GlobalState::handle_event\");\n+        let _p = profile::span(\"GlobalState::handle_event\");\n \n         log::info!(\"handle_event({:?})\", event);\n         let queue_count = self.task_pool.handle.len();\n@@ -204,7 +203,7 @@ impl GlobalState {\n                 self.analysis_host.maybe_collect_garbage();\n             }\n             Event::Vfs(mut task) => {\n-                let _p = profile(\"GlobalState::handle_event/vfs\");\n+                let _p = profile::span(\"GlobalState::handle_event/vfs\");\n                 loop {\n                     match task {\n                         vfs::loader::Message::Loaded { files } => {"}, {"sha": "f74f2c02c87fc94ae949e7c6f1b77d16d9494b51", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -4,7 +4,6 @@ use std::{mem, sync::Arc};\n use flycheck::FlycheckHandle;\n use ra_db::{CrateGraph, SourceRoot, VfsPath};\n use ra_ide::AnalysisChange;\n-use ra_prof::profile;\n use ra_project_model::{ProcMacroClient, ProjectWorkspace};\n use vfs::{file_set::FileSetConfig, AbsPath, AbsPathBuf, ChangeKind};\n \n@@ -17,7 +16,7 @@ use crate::{\n \n impl GlobalState {\n     pub(crate) fn update_configuration(&mut self, config: Config) {\n-        let _p = profile(\"GlobalState::update_configuration\");\n+        let _p = profile::span(\"GlobalState::update_configuration\");\n         let old_config = mem::replace(&mut self.config, config);\n         if self.config.lru_capacity != old_config.lru_capacity {\n             self.analysis_host.update_lru_capacity(old_config.lru_capacity);\n@@ -115,7 +114,7 @@ impl GlobalState {\n         });\n     }\n     pub(crate) fn switch_workspaces(&mut self, workspaces: Vec<anyhow::Result<ProjectWorkspace>>) {\n-        let _p = profile(\"GlobalState::switch_workspaces\");\n+        let _p = profile::span(\"GlobalState::switch_workspaces\");\n         log::info!(\"reloading projects: {:?}\", self.config.linked_projects);\n \n         let mut has_errors = false;\n@@ -300,7 +299,7 @@ pub(crate) struct SourceRootConfig {\n \n impl SourceRootConfig {\n     pub(crate) fn partition(&self, vfs: &vfs::Vfs) -> Vec<SourceRoot> {\n-        let _p = profile(\"SourceRootConfig::partition\");\n+        let _p = profile::span(\"SourceRootConfig::partition\");\n         self.fsc\n             .partition(vfs)\n             .into_iter()"}, {"sha": "15866fbb168b4f6d38032745b1f8043e50977fa6", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -62,7 +62,7 @@ impl<'a> Project<'a> {\n         static INIT: Once = Once::new();\n         INIT.call_once(|| {\n             env_logger::builder().is_test(true).try_init().unwrap();\n-            ra_prof::init_from(crate::PROFILE);\n+            profile::init_from(crate::PROFILE);\n         });\n \n         for entry in Fixture::parse(self.fixture) {"}, {"sha": "7384205db47770f85c805629e23eedd9ab6919de", "filename": "xtask/tests/tidy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/147547e7b85e80e2e30aa1a5ba4d9d0969908398/xtask%2Ftests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147547e7b85e80e2e30aa1a5ba4d9d0969908398/xtask%2Ftests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy.rs?ref=147547e7b85e80e2e30aa1a5ba4d9d0969908398", "patch": "@@ -197,7 +197,7 @@ impl TidyDocs {\n             \"ra_ide\",\n             \"ra_mbe\",\n             \"ra_parser\",\n-            \"ra_prof\",\n+            \"profile\",\n             \"ra_project_model\",\n             \"ra_syntax\",\n             \"ra_tt\","}]}