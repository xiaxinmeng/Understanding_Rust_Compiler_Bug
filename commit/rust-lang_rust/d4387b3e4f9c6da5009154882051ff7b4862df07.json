{"sha": "d4387b3e4f9c6da5009154882051ff7b4862df07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0Mzg3YjNlNGY5YzZkYTUwMDkxNTQ4ODIwNTFmZjdiNDg2MmRmMDc=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-06-17T19:54:28Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-06-17T19:59:49Z"}, "message": "rustdoc: import cross-crate macros alongside everything else", "tree": {"sha": "f8d9a0e713ee1a454ed51a2fe26f3453d55d555f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8d9a0e713ee1a454ed51a2fe26f3453d55d555f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4387b3e4f9c6da5009154882051ff7b4862df07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4387b3e4f9c6da5009154882051ff7b4862df07", "html_url": "https://github.com/rust-lang/rust/commit/d4387b3e4f9c6da5009154882051ff7b4862df07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4387b3e4f9c6da5009154882051ff7b4862df07/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "499583aa92203845353c45001e56d0dbe281e270", "url": "https://api.github.com/repos/rust-lang/rust/commits/499583aa92203845353c45001e56d0dbe281e270", "html_url": "https://github.com/rust-lang/rust/commit/499583aa92203845353c45001e56d0dbe281e270"}], "stats": {"total": 161, "additions": 116, "deletions": 45}, "files": [{"sha": "8bcd10626674d76300ca45a1d04a1c60e27dc016", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d4387b3e4f9c6da5009154882051ff7b4862df07/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4387b3e4f9c6da5009154882051ff7b4862df07/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=d4387b3e4f9c6da5009154882051ff7b4862df07", "patch": "@@ -13,16 +13,19 @@\n use std::iter::once;\n \n use syntax::ast;\n-use rustc::hir;\n+use syntax::ext::base::MacroKind;\n+use syntax_pos::Span;\n \n+use rustc::hir;\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::DefId;\n+use rustc::middle::cstore::LoadedMacro;\n use rustc::ty;\n use rustc::util::nodemap::FxHashSet;\n \n use core::{DocContext, DocAccessLevels};\n use doctree;\n-use clean::{self, GetDefId, get_auto_traits_with_def_id};\n+use clean::{self, GetDefId, ToSource, get_auto_traits_with_def_id};\n \n use super::Clean;\n \n@@ -97,9 +100,12 @@ pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name, visited: &mut FxHa\n             record_extern_fqn(cx, did, clean::TypeKind::Const);\n             clean::ConstantItem(build_const(cx, did))\n         }\n-        // Macros are eagerly inlined back in visit_ast, don't show their export statements\n-        // FIXME(50647): the eager inline does not take doc(hidden)/doc(no_inline) into account\n-        Def::Macro(..) => return Some(Vec::new()),\n+        // FIXME(misdreavus): if attributes/derives come down here we should probably document them\n+        // separately\n+        Def::Macro(did, MacroKind::Bang) => {\n+            record_extern_fqn(cx, did, clean::TypeKind::Macro);\n+            clean::MacroItem(build_macro(cx, did))\n+        }\n         _ => return None,\n     };\n     cx.renderinfo.borrow_mut().inlined.insert(did);\n@@ -457,6 +463,33 @@ fn build_static(cx: &DocContext, did: DefId, mutable: bool) -> clean::Static {\n     }\n }\n \n+fn build_macro(cx: &DocContext, did: DefId) -> clean::Macro {\n+    let imported_from = cx.tcx.original_crate_name(did.krate);\n+    let def = match cx.cstore.load_macro_untracked(did, cx.sess()) {\n+        LoadedMacro::MacroDef(macro_def) => macro_def,\n+        // FIXME(jseyfried): document proc macro re-exports\n+        LoadedMacro::ProcMacro(..) => panic!(\"attempting to document proc-macro re-export\"),\n+    };\n+\n+    let matchers: hir::HirVec<Span> = if let ast::ItemKind::MacroDef(ref def) = def.node {\n+        let tts: Vec<_> = def.stream().into_trees().collect();\n+        tts.chunks(4).map(|arm| arm[0].span()).collect()\n+    } else {\n+        unreachable!()\n+    };\n+\n+    let source = format!(\"macro_rules! {} {{\\n{}}}\",\n+                         def.ident.name.clean(cx),\n+                         matchers.iter().map(|span| {\n+                             format!(\"    {} => {{ ... }};\\n\", span.to_src(cx))\n+                         }).collect::<String>());\n+\n+    clean::Macro {\n+        source,\n+        imported_from: Some(imported_from).clean(cx),\n+    }\n+}\n+\n /// A trait's generics clause actually contains all of the predicates for all of\n /// its associated types as well. We specifically move these clauses to the\n /// associated types instead when displaying, so when we're generating the"}, {"sha": "70d0d078308bf3c77a4c73cdd6a209823e311c21", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d4387b3e4f9c6da5009154882051ff7b4862df07/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4387b3e4f9c6da5009154882051ff7b4862df07/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=d4387b3e4f9c6da5009154882051ff7b4862df07", "patch": "@@ -21,9 +21,8 @@ use syntax_pos::Span;\n use rustc::hir::map as hir_map;\n use rustc::hir::def::Def;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc::middle::cstore::{LoadedMacro, CrateStore};\n+use rustc::middle::cstore::CrateStore;\n use rustc::middle::privacy::AccessLevel;\n-use rustc::ty::Visibility;\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n \n use rustc::hir;\n@@ -215,44 +214,6 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n             self.visit_item(item, None, &mut om);\n         }\n         self.inside_public_path = orig_inside_public_path;\n-        let def_id = self.cx.tcx.hir.local_def_id(id);\n-        if let Some(exports) = self.cx.tcx.module_exports(def_id) {\n-            for export in exports.iter().filter(|e| e.vis == Visibility::Public) {\n-                if let Def::Macro(def_id, ..) = export.def {\n-                    // FIXME(50647): this eager macro inlining does not take\n-                    // doc(hidden)/doc(no_inline) into account\n-                    if def_id.krate == LOCAL_CRATE {\n-                        continue // These are `krate.exported_macros`, handled in `self.visit()`.\n-                    }\n-\n-                    let imported_from = self.cx.tcx.original_crate_name(def_id.krate);\n-                    let def = match self.cstore.load_macro_untracked(def_id, self.cx.sess()) {\n-                        LoadedMacro::MacroDef(macro_def) => macro_def,\n-                        // FIXME(jseyfried): document proc macro re-exports\n-                        LoadedMacro::ProcMacro(..) => continue,\n-                    };\n-\n-                    let matchers = if let ast::ItemKind::MacroDef(ref def) = def.node {\n-                        let tts: Vec<_> = def.stream().into_trees().collect();\n-                        tts.chunks(4).map(|arm| arm[0].span()).collect()\n-                    } else {\n-                        unreachable!()\n-                    };\n-\n-                    debug!(\"inlining macro {}\", def.ident.name);\n-                    om.macros.push(Macro {\n-                        def_id,\n-                        attrs: def.attrs.clone().into(),\n-                        name: def.ident.name,\n-                        whence: self.cx.tcx.def_span(def_id),\n-                        matchers,\n-                        stab: self.cx.tcx.lookup_stability(def_id).cloned(),\n-                        depr: self.cx.tcx.lookup_deprecation(def_id),\n-                        imported_from: Some(imported_from),\n-                    })\n-                }\n-            }\n-        }\n         om\n     }\n "}, {"sha": "d4a9a9f379b920d4a607bb83bb4253724fc3de46", "filename": "src/test/rustdoc/inline_cross/auxiliary/macro-vis.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d4387b3e4f9c6da5009154882051ff7b4862df07/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fmacro-vis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4387b3e4f9c6da5009154882051ff7b4862df07/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fmacro-vis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fmacro-vis.rs?ref=d4387b3e4f9c6da5009154882051ff7b4862df07", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"qwop\"]\n+\n+/// (writen on a spider's web) Some Macro\n+#[macro_export]\n+macro_rules! some_macro {\n+    () => {\n+        println!(\"this is some macro, for sure\");\n+    };\n+}\n+\n+/// Some other macro, to fill space.\n+#[macro_export]\n+macro_rules! other_macro {\n+    () => {\n+        println!(\"this is some other macro, whatev\");\n+    };\n+}\n+\n+/// This macro is so cool, it's Super.\n+#[macro_export]\n+macro_rules! super_macro {\n+    () => {\n+        println!(\"is it a bird? a plane? no, it's Super Macro!\");\n+    };\n+}"}, {"sha": "4dde19f2a0a39638876b08c96a1a643d96e3f357", "filename": "src/test/rustdoc/inline_cross/macro-vis.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d4387b3e4f9c6da5009154882051ff7b4862df07/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacro-vis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4387b3e4f9c6da5009154882051ff7b4862df07/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacro-vis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fmacro-vis.rs?ref=d4387b3e4f9c6da5009154882051ff7b4862df07", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:macro-vis.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+#![feature(use_extern_macros)]\n+\n+#[macro_use] extern crate qwop;\n+\n+// @has macro_vis/macro.some_macro.html\n+// @has macro_vis/index.html '//a/@href' 'macro.some_macro.html'\n+pub use qwop::some_macro;\n+\n+// @!has macro_vis/macro.other_macro.html\n+// @!has macro_vis/index.html '//a/@href' 'macro.other_macro.html'\n+// @!has - '//code' 'pub use qwop::other_macro;'\n+#[doc(hidden)]\n+pub use qwop::other_macro;\n+\n+// @has macro_vis/index.html '//code' 'pub use qwop::super_macro;'\n+// @!has macro_vis/macro.super_macro.html\n+#[doc(no_inline)]\n+pub use qwop::super_macro;\n+\n+// @has macro_vis/macro.this_is_dope.html\n+// @has macro_vis/index.html '//a/@href' 'macro.this_is_dope.html'\n+/// What it says on the tin.\n+#[macro_export]\n+macro_rules! this_is_dope {\n+    () => {\n+        println!(\"yo check this out\");\n+    };\n+}"}]}