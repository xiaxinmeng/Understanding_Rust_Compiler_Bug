{"sha": "6299c3302216174de41a24ca44033f978cd64666", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyOTljMzMwMjIxNjE3NGRlNDFhMjRjYTQ0MDMzZjk3OGNkNjQ2NjY=", "commit": {"author": {"name": "Quentin Boyer", "email": "qbsecond@gmail.com", "date": "2019-11-03T15:42:09Z"}, "committer": {"name": "Quentin Boyer", "email": "qbsecond@gmail.com", "date": "2019-11-03T15:42:09Z"}, "message": "add header to compiletest to check for ice", "tree": {"sha": "f8e77adb716d8f49497f5065df8928dcaf791db0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8e77adb716d8f49497f5065df8928dcaf791db0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6299c3302216174de41a24ca44033f978cd64666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6299c3302216174de41a24ca44033f978cd64666", "html_url": "https://github.com/rust-lang/rust/commit/6299c3302216174de41a24ca44033f978cd64666", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6299c3302216174de41a24ca44033f978cd64666/comments", "author": {"login": "traxys", "id": 5623227, "node_id": "MDQ6VXNlcjU2MjMyMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/5623227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/traxys", "html_url": "https://github.com/traxys", "followers_url": "https://api.github.com/users/traxys/followers", "following_url": "https://api.github.com/users/traxys/following{/other_user}", "gists_url": "https://api.github.com/users/traxys/gists{/gist_id}", "starred_url": "https://api.github.com/users/traxys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/traxys/subscriptions", "organizations_url": "https://api.github.com/users/traxys/orgs", "repos_url": "https://api.github.com/users/traxys/repos", "events_url": "https://api.github.com/users/traxys/events{/privacy}", "received_events_url": "https://api.github.com/users/traxys/received_events", "type": "User", "site_admin": false}, "committer": {"login": "traxys", "id": 5623227, "node_id": "MDQ6VXNlcjU2MjMyMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/5623227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/traxys", "html_url": "https://github.com/traxys", "followers_url": "https://api.github.com/users/traxys/followers", "following_url": "https://api.github.com/users/traxys/following{/other_user}", "gists_url": "https://api.github.com/users/traxys/gists{/gist_id}", "starred_url": "https://api.github.com/users/traxys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/traxys/subscriptions", "organizations_url": "https://api.github.com/users/traxys/orgs", "repos_url": "https://api.github.com/users/traxys/repos", "events_url": "https://api.github.com/users/traxys/events{/privacy}", "received_events_url": "https://api.github.com/users/traxys/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5930551f6a471164d61d0b67cd412b32461924e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5930551f6a471164d61d0b67cd412b32461924e3", "html_url": "https://github.com/rust-lang/rust/commit/5930551f6a471164d61d0b67cd412b32461924e3"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "f63b5997a4ac613ac04f58461ba1bf325689c99d", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6299c3302216174de41a24ca44033f978cd64666/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6299c3302216174de41a24ca44033f978cd64666/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=6299c3302216174de41a24ca44033f978cd64666", "patch": "@@ -376,6 +376,8 @@ pub struct TestProps {\n     // If true, `rustfix` will only apply `MachineApplicable` suggestions.\n     pub rustfix_only_machine_applicable: bool,\n     pub assembly_output: Option<String>,\n+    // If true, the test is expected to ICE\n+    pub should_ice: bool,\n }\n \n impl TestProps {\n@@ -414,6 +416,7 @@ impl TestProps {\n             run_rustfix: false,\n             rustfix_only_machine_applicable: false,\n             assembly_output: None,\n+            should_ice: false,\n         }\n     }\n \n@@ -464,6 +467,10 @@ impl TestProps {\n                 self.pp_exact = config.parse_pp_exact(ln, testfile);\n             }\n \n+            if !self.should_ice {\n+                self.should_ice = config.parse_should_ice(ln);\n+            }\n+\n             if !self.build_aux_docs {\n                 self.build_aux_docs = config.parse_build_aux_docs(ln);\n             }\n@@ -688,6 +695,9 @@ fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut dyn FnMut(&str)) {\n }\n \n impl Config {\n+    fn parse_should_ice(&self, line: &str) -> bool {\n+        self.parse_name_directive(line, \"should-ice\")\n+    }\n     fn parse_error_pattern(&self, line: &str) -> Option<String> {\n         self.parse_name_value_directive(line, \"error-pattern\")\n     }"}, {"sha": "c239e045cc12ccddbc63cab5861020a4db0d433e", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6299c3302216174de41a24ca44033f978cd64666/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6299c3302216174de41a24ca44033f978cd64666/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=6299c3302216174de41a24ca44033f978cd64666", "patch": "@@ -383,7 +383,7 @@ impl<'test> TestCx<'test> {\n     fn run_cfail_test(&self) {\n         let proc_res = self.compile_test();\n         self.check_if_test_should_compile(&proc_res);\n-        self.check_no_compiler_crash(&proc_res);\n+        self.check_no_compiler_crash(&proc_res, self.props.should_ice);\n \n         let output_to_check = self.get_output(&proc_res);\n         let expected_errors = errors::load_errors(&self.testpaths.file, self.revision);\n@@ -395,6 +395,12 @@ impl<'test> TestCx<'test> {\n         } else {\n             self.check_error_patterns(&output_to_check, &proc_res);\n         }\n+        if self.props.should_ice {\n+            match proc_res.status.code() {\n+                Some(101) => (),\n+                _ => self.fatal(\"expected ICE\"),\n+            }\n+        }\n \n         self.check_forbid_output(&output_to_check, &proc_res);\n     }\n@@ -1402,9 +1408,9 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    fn check_no_compiler_crash(&self, proc_res: &ProcRes) {\n+    fn check_no_compiler_crash(&self, proc_res: &ProcRes, should_ice: bool) {\n         match proc_res.status.code() {\n-            Some(101) => self.fatal_proc_rec(\"compiler encountered internal error\", proc_res),\n+            Some(101) if !should_ice => self.fatal_proc_rec(\"compiler encountered internal error\", proc_res),\n             None => self.fatal_proc_rec(\"compiler terminated by signal\", proc_res),\n             _ => (),\n         }\n@@ -2518,7 +2524,7 @@ impl<'test> TestCx<'test> {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n         }\n \n-        self.check_no_compiler_crash(&proc_res);\n+        self.check_no_compiler_crash(&proc_res, self.props.should_ice);\n \n         const PREFIX: &'static str = \"MONO_ITEM \";\n         const CGU_MARKER: &'static str = \"@@\";"}]}