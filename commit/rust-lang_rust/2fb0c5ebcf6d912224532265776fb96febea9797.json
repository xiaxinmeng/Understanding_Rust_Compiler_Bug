{"sha": "2fb0c5ebcf6d912224532265776fb96febea9797", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYjBjNWViY2Y2ZDkxMjIyNDUzMjI2NTc3NmZiOTZmZWJlYTk3OTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-14T22:23:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-14T22:23:59Z"}, "message": "Auto merge of #30916 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #30712, #30895, #30902, #30903, #30909, #30910, #30911, #30912, #30914\n- Failed merges:", "tree": {"sha": "60309b6ce82ca33f616667fd10c13910755f8319", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60309b6ce82ca33f616667fd10c13910755f8319"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fb0c5ebcf6d912224532265776fb96febea9797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb0c5ebcf6d912224532265776fb96febea9797", "html_url": "https://github.com/rust-lang/rust/commit/2fb0c5ebcf6d912224532265776fb96febea9797", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fb0c5ebcf6d912224532265776fb96febea9797/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c12c42de0ac3f4ab50f2c138e53e6e94f8da11ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/c12c42de0ac3f4ab50f2c138e53e6e94f8da11ec", "html_url": "https://github.com/rust-lang/rust/commit/c12c42de0ac3f4ab50f2c138e53e6e94f8da11ec"}, {"sha": "6ab39ff098fb7b3c04372380c059e144e5d88993", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ab39ff098fb7b3c04372380c059e144e5d88993", "html_url": "https://github.com/rust-lang/rust/commit/6ab39ff098fb7b3c04372380c059e144e5d88993"}], "stats": {"total": 177, "additions": 76, "deletions": 101}, "files": [{"sha": "e864172e813320ff2167b69fbbd74f6dc4cfb92f", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0c5ebcf6d912224532265776fb96febea9797/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0c5ebcf6d912224532265776fb96febea9797/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=2fb0c5ebcf6d912224532265776fb96febea9797", "patch": "@@ -174,7 +174,7 @@ labels to triage issues:\n * Yellow, **A**-prefixed labels state which **area** of the project an issue\n   relates to.\n \n-* Magenta, **B**-prefixed labels identify bugs which **belong** elsewhere.\n+* Magenta, **B**-prefixed labels identify bugs which are **blockers**.\n \n * Green, **E**-prefixed labels explain the level of **experience** necessary\n   to fix the issue."}, {"sha": "fe5e1c3990c5c8412a41fd3efe9c6b7835531c03", "filename": "src/doc/book/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0c5ebcf6d912224532265776fb96febea9797/src%2Fdoc%2Fbook%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0c5ebcf6d912224532265776fb96febea9797/src%2Fdoc%2Fbook%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2FSUMMARY.md?ref=2fb0c5ebcf6d912224532265776fb96febea9797", "patch": "@@ -51,6 +51,7 @@\n     * [FFI](ffi.md)\n     * [Borrow and AsRef](borrow-and-asref.md)\n     * [Release Channels](release-channels.md)\n+    * [Using Rust without the standard library](using-rust-without-the-standard-library.md)\n * [Nightly Rust](nightly-rust.md)\n     * [Compiler Plugins](compiler-plugins.md)\n     * [Inline Assembly](inline-assembly.md)"}, {"sha": "9b1d16170b97f1c879e6c6c85169f8f6f807d761", "filename": "src/doc/book/error-handling.md", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0c5ebcf6d912224532265776fb96febea9797/src%2Fdoc%2Fbook%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0c5ebcf6d912224532265776fb96febea9797/src%2Fdoc%2Fbook%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ferror-handling.md?ref=2fb0c5ebcf6d912224532265776fb96febea9797", "patch": "@@ -1795,6 +1795,10 @@ To convert this to proper error handling, we need to do the following:\n Let's try it:\n \n ```rust,ignore\n+use std::error::Error;\n+\n+// The rest of the code before this is unchanged\n+\n fn search<P: AsRef<Path>>\n          (file_path: P, city: &str)\n          -> Result<Vec<PopulationCount>, Box<Error+Send+Sync>> {\n@@ -1903,8 +1907,13 @@ let city = if !matches.free.is_empty() {\n \treturn;\n };\n \n-for pop in search(&data_file, &city) {\n-\tprintln!(\"{}, {}: {:?}\", pop.city, pop.country, pop.count);\n+match search(&data_file, &city) {\n+    Ok(pops) => {\n+        for pop in pops {\n+            println!(\"{}, {}: {:?}\", pop.city, pop.country, pop.count);\n+        }\n+    }\n+    Err(err) => println!(\"{}\", err)\n }\n ...\n ```\n@@ -1927,6 +1936,10 @@ that it is generic on some type parameter `R` that satisfies\n `io::Read`. Another way is to use trait objects:\n \n ```rust,ignore\n+use std::io;\n+\n+// The rest of the code before this is unchanged\n+\n fn search<P: AsRef<Path>>\n          (file_path: &Option<P>, city: &str)\n          -> Result<Vec<PopulationCount>, Box<Error+Send+Sync>> {"}, {"sha": "65beaed2fc7e9a563ab08dd926b45b5efa9e831d", "filename": "src/doc/book/no-stdlib.md", "status": "modified", "additions": 10, "deletions": 89, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0c5ebcf6d912224532265776fb96febea9797/src%2Fdoc%2Fbook%2Fno-stdlib.md", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0c5ebcf6d912224532265776fb96febea9797/src%2Fdoc%2Fbook%2Fno-stdlib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fno-stdlib.md?ref=2fb0c5ebcf6d912224532265776fb96febea9797", "patch": "@@ -1,8 +1,15 @@\n % No stdlib\n \n-By default, `std` is linked to every Rust crate. In some contexts,\n-this is undesirable, and can be avoided with the `#![no_std]`\n-attribute attached to the crate.\n+Rust\u2019s standard library provides a lot of useful functionality, but assumes\n+support for various features of its host system: threads, networking, heap\n+allocation, and others. There are systems that do not have these features,\n+however, and Rust can work with those too! To do so, we tell Rust that we\n+don\u2019t want to use the standard library via an attribute: `#![no_std]`.\n+\n+> Note: This feature is technically stable, but there are some caveats. For\n+> one, you can build a `#![no_std]` _library_ on stable, but not a _binary_.\n+> For details on libraries without the standard library, see [the chapter on\n+> `#![no_std]`](using-rust-without-the-standard-library.html)\n \n Obviously there's more to life than just libraries: one can use\n `#[no_std]` with an executable, controlling the entry point is\n@@ -77,89 +84,3 @@ personality function (see the\n information), but crates which do not trigger a panic can be assured\n that this function is never called. The second function, `panic_fmt`, is\n also used by the failure mechanisms of the compiler.\n-\n-## Using libcore\n-\n-> **Note**: the core library's structure is unstable, and it is recommended to\n-> use the standard library instead wherever possible.\n-\n-With the above techniques, we've got a bare-metal executable running some Rust\n-code. There is a good deal of functionality provided by the standard library,\n-however, that is necessary to be productive in Rust. If the standard library is\n-not sufficient, then [libcore](../core/index.html) is designed to be used\n-instead.\n-\n-The core library has very few dependencies and is much more portable than the\n-standard library itself. Additionally, the core library has most of the\n-necessary functionality for writing idiomatic and effective Rust code. When\n-using `#![no_std]`, Rust will automatically inject the `core` crate, like\n-we do for `std` when we\u2019re using it.\n-\n-As an example, here is a program that will calculate the dot product of two\n-vectors provided from C, using idiomatic Rust practices.\n-\n-```rust\n-# #![feature(libc)]\n-#![feature(lang_items)]\n-#![feature(start)]\n-#![feature(raw)]\n-#![no_std]\n-\n-extern crate libc;\n-\n-use core::mem;\n-\n-#[no_mangle]\n-pub extern fn dot_product(a: *const u32, a_len: u32,\n-                          b: *const u32, b_len: u32) -> u32 {\n-    use core::raw::Slice;\n-\n-    // Convert the provided arrays into Rust slices.\n-    // The core::raw module guarantees that the Slice\n-    // structure has the same memory layout as a &[T]\n-    // slice.\n-    //\n-    // This is an unsafe operation because the compiler\n-    // cannot tell the pointers are valid.\n-    let (a_slice, b_slice): (&[u32], &[u32]) = unsafe {\n-        mem::transmute((\n-            Slice { data: a, len: a_len as usize },\n-            Slice { data: b, len: b_len as usize },\n-        ))\n-    };\n-\n-    // Iterate over the slices, collecting the result\n-    let mut ret = 0;\n-    for (i, j) in a_slice.iter().zip(b_slice.iter()) {\n-        ret += (*i) * (*j);\n-    }\n-    return ret;\n-}\n-\n-#[lang = \"panic_fmt\"]\n-extern fn panic_fmt(args: &core::fmt::Arguments,\n-                    file: &str,\n-                    line: u32) -> ! {\n-    loop {}\n-}\n-\n-#[lang = \"eh_personality\"] extern fn eh_personality() {}\n-# #[start] fn start(argc: isize, argv: *const *const u8) -> isize { 0 }\n-# #[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n-# #[no_mangle] pub extern fn rust_eh_register_frames () {}\n-# #[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n-# fn main() {}\n-```\n-\n-Note that there is one lang item here whose signature differs from the examples\n-above, `panic_fmt`. This must be defined by consumers of libcore because the\n-core library declares panics, but it does not define it. The `panic_fmt`\n-lang item is this crate's definition of panic, and it must be guaranteed to\n-never return.\n-\n-As can be seen in this example, the core library is intended to provide the\n-power of Rust in all circumstances, regardless of platform requirements. Further\n-libraries, such as liballoc, add functionality to libcore which make other\n-platform-specific assumptions, but continue to be more portable than the\n-standard library itself.\n-"}, {"sha": "a7b6faccd8d6e01bac21c0e22c8e6c3a7e9bf36a", "filename": "src/doc/book/the-stack-and-the-heap.md", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0c5ebcf6d912224532265776fb96febea9797/src%2Fdoc%2Fbook%2Fthe-stack-and-the-heap.md", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0c5ebcf6d912224532265776fb96febea9797/src%2Fdoc%2Fbook%2Fthe-stack-and-the-heap.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fthe-stack-and-the-heap.md?ref=2fb0c5ebcf6d912224532265776fb96febea9797", "patch": "@@ -185,7 +185,7 @@ After `italic()` is over, its frame is deallocated, leaving only `bold()` and\n | **3**   | **c**|**1**  |\n | **2**   | **b**|**100**|\n | **1**   | **a**| **5** |\n-| 0       | x    | 42    | \n+| 0       | x    | 42    |\n \n And then `bold()` ends, leaving only `main()`:\n \n@@ -554,8 +554,8 @@ Managing the memory for the stack is trivial: The machine\n increments or decrements a single value, the so-called \u201cstack pointer\u201d.\n Managing memory for the heap is non-trivial: heap-allocated memory is freed at\n arbitrary points, and each block of heap-allocated memory can be of arbitrary\n-size, the memory manager must generally work much harder to identify memory for\n-reuse.\n+size, so the memory manager must generally work much harder to\n+identify memory for reuse.\n \n If you\u2019d like to dive into this topic in greater detail, [this paper][wilson]\n is a great introduction.\n@@ -579,4 +579,3 @@ comes at the cost of either significant runtime support (e.g. in the form of a\n garbage collector) or significant programmer effort (in the form of explicit\n memory management calls that require verification not provided by the Rust\n compiler).\n-"}, {"sha": "59182e1a4efcee7fefd0a9bc0d7068052cc7ef94", "filename": "src/doc/book/using-rust-without-the-standard-library.md", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0c5ebcf6d912224532265776fb96febea9797/src%2Fdoc%2Fbook%2Fusing-rust-without-the-standard-library.md", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0c5ebcf6d912224532265776fb96febea9797/src%2Fdoc%2Fbook%2Fusing-rust-without-the-standard-library.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fusing-rust-without-the-standard-library.md?ref=2fb0c5ebcf6d912224532265776fb96febea9797", "patch": "@@ -0,0 +1,41 @@\n+% Using Rust Without the Standard Library\n+\n+Rust\u2019s standard library provides a lot of useful functionality, but assumes\n+support for various features of its host system: threads, networking, heap\n+allocation, and others. There are systems that do not have these features,\n+however, and Rust can work with those too! To do so, we tell Rust that we\n+don\u2019t want to use the standard library via an attribute: `#![no_std]`.\n+\n+> Note: This feature is technically stable, but there are some caveats. For\n+> one, you can build a `#![no_std]` _library_ on stable, but not a _binary_.\n+> For details on binaries without the standard library, see [the nightly\n+> chapter on `#![no_std]`](no-stdlib.html)\n+\n+To use `#![no_std]`, add a it to your crate root:\n+\n+```rust\n+#![no_std]\n+\n+fn plus_one(x: i32) -> i32 {\n+    x + 1\n+}\n+```\n+\n+Much of the functionality that\u2019s exposed in the standard library is also\n+available via the [`core` crate](../core/). When we\u2019re using the standard\n+library, Rust automatically brings `std` into scope, allowing you to use\n+its features without an explicit import. By the same token, when using\n+`!#[no_std]`, Rust will bring `core` into scope for you, as well as [its\n+prelude](../core/prelude/v1/). This means that a lot of code will Just Work:\n+\n+```rust\n+#![no_std]\n+\n+fn may_fail(failure: bool) -> Result<(), &'static str> {\n+    if failure {\n+        Err(\"this didn\u2019t work!\")\n+    } else {\n+        Ok(())\n+    }\n+}\n+```"}, {"sha": "be140469eb662b3493e979f8b0a7ddeea8f50b55", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0c5ebcf6d912224532265776fb96febea9797/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0c5ebcf6d912224532265776fb96febea9797/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=2fb0c5ebcf6d912224532265776fb96febea9797", "patch": "@@ -222,12 +222,12 @@ impl<T: ?Sized> Drop for IntermediateBox<T> {\n }\n \n impl<T> Box<T> {\n-    /// Allocates memory on the heap and then moves `x` into it.\n+    /// Allocates memory on the heap and then places `x` into it.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// let x = Box::new(5);\n+    /// let five = Box::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline(always)]\n@@ -266,7 +266,7 @@ impl<T: ?Sized> Box<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let seventeen = Box::new(17u32);\n+    /// let seventeen = Box::new(17);\n     /// let raw = Box::into_raw(seventeen);\n     /// let boxed_again = unsafe { Box::from_raw(raw) };\n     /// ```"}, {"sha": "fb6dac407983423fa721668cd4a07728f19f933d", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0c5ebcf6d912224532265776fb96febea9797/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0c5ebcf6d912224532265776fb96febea9797/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=2fb0c5ebcf6d912224532265776fb96febea9797", "patch": "@@ -130,7 +130,7 @@ pub fn size_of<T>() -> usize {\n     unsafe { intrinsics::size_of::<T>() }\n }\n \n-/// Returns the size of the type that `val` points to in bytes.\n+/// Returns the size of the given value in bytes.\n ///\n /// # Examples\n ///"}, {"sha": "7f57d6dc650bab145670458d28143328787cf85e", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fb0c5ebcf6d912224532265776fb96febea9797/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb0c5ebcf6d912224532265776fb96febea9797/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=2fb0c5ebcf6d912224532265776fb96febea9797", "patch": "@@ -62,7 +62,7 @@ mod cmath {\n         pub fn hypotf(x: c_float, y: c_float) -> c_float;\n     }\n \n-    // See the comments in `core::float::Float::floor` for why MSVC is special\n+    // See the comments in the `floor` function for why MSVC is special\n     // here.\n     #[cfg(not(target_env = \"msvc\"))]\n     extern {"}]}