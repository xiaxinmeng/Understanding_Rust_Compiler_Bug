{"sha": "cfcd449c4c36c68541c3389878e3262dac5e4746", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmY2Q0NDljNGMzNmM2ODU0MWMzMzg5ODc4ZTMyNjJkYWM1ZTQ3NDY=", "commit": {"author": {"name": "Sean McArthur", "email": "sean.monstar@gmail.com", "date": "2015-08-01T05:20:25Z"}, "committer": {"name": "Sean McArthur", "email": "sean.monstar@gmail.com", "date": "2015-08-08T18:54:15Z"}, "message": "rustc: rename multiple imports in a list", "tree": {"sha": "9b938e41ecaffb056741c5e55d7afd7d01a82d18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b938e41ecaffb056741c5e55d7afd7d01a82d18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfcd449c4c36c68541c3389878e3262dac5e4746", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfcd449c4c36c68541c3389878e3262dac5e4746", "html_url": "https://github.com/rust-lang/rust/commit/cfcd449c4c36c68541c3389878e3262dac5e4746", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfcd449c4c36c68541c3389878e3262dac5e4746/comments", "author": {"login": "seanmonstar", "id": 51479, "node_id": "MDQ6VXNlcjUxNDc5", "avatar_url": "https://avatars.githubusercontent.com/u/51479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanmonstar", "html_url": "https://github.com/seanmonstar", "followers_url": "https://api.github.com/users/seanmonstar/followers", "following_url": "https://api.github.com/users/seanmonstar/following{/other_user}", "gists_url": "https://api.github.com/users/seanmonstar/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanmonstar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanmonstar/subscriptions", "organizations_url": "https://api.github.com/users/seanmonstar/orgs", "repos_url": "https://api.github.com/users/seanmonstar/repos", "events_url": "https://api.github.com/users/seanmonstar/events{/privacy}", "received_events_url": "https://api.github.com/users/seanmonstar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "seanmonstar", "id": 51479, "node_id": "MDQ6VXNlcjUxNDc5", "avatar_url": "https://avatars.githubusercontent.com/u/51479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanmonstar", "html_url": "https://github.com/seanmonstar", "followers_url": "https://api.github.com/users/seanmonstar/followers", "following_url": "https://api.github.com/users/seanmonstar/following{/other_user}", "gists_url": "https://api.github.com/users/seanmonstar/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanmonstar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanmonstar/subscriptions", "organizations_url": "https://api.github.com/users/seanmonstar/orgs", "repos_url": "https://api.github.com/users/seanmonstar/repos", "events_url": "https://api.github.com/users/seanmonstar/events{/privacy}", "received_events_url": "https://api.github.com/users/seanmonstar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d03456183e85fe7bd465bbe7c8f67885a2528444", "url": "https://api.github.com/repos/rust-lang/rust/commits/d03456183e85fe7bd465bbe7c8f67885a2528444", "html_url": "https://github.com/rust-lang/rust/commit/d03456183e85fe7bd465bbe7c8f67885a2528444"}], "stats": {"total": 202, "additions": 169, "deletions": 33}, "files": [{"sha": "abdef4aa5ac89fd46e0eec47d86fd975ee3092aa", "filename": "src/grammar/parser-lalr.y", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Fgrammar%2Fparser-lalr.y", "raw_url": "https://github.com/rust-lang/rust/raw/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Fgrammar%2Fparser-lalr.y", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fparser-lalr.y?ref=cfcd449c4c36c68541c3389878e3262dac5e4746", "patch": "@@ -472,6 +472,7 @@ visibility\n \n idents_or_self\n : ident_or_self                    { $$ = mk_node(\"IdentsOrSelf\", 1, $1); }\n+| ident_or_self AS ident           { $$ = mk_node(\"IdentsOrSelf\", 2, $1, $3); }\n | idents_or_self ',' ident_or_self { $$ = ext_node($1, 1, $3); }\n ;\n "}, {"sha": "d49c5c5517b05f2a4ba5f2690efece3a68e7f527", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=cfcd449c4c36c68541c3389878e3262dac5e4746", "patch": "@@ -862,11 +862,11 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n             if let ast::ViewPathList(ref prefix, ref list) = vpath.node {\n                 for pid in list {\n                     match pid.node {\n-                        ast::PathListIdent { id, name } => {\n+                        ast::PathListIdent { id, name, .. } => {\n                             debug!(\"privacy - ident item {}\", id);\n                             self.check_path(pid.span, id, name.name);\n                         }\n-                        ast::PathListMod { id } => {\n+                        ast::PathListMod { id, .. } => {\n                             debug!(\"privacy - mod item {}\", id);\n                             let name = prefix.segments.last().unwrap().identifier.name;\n                             self.check_path(pid.span, id, name);"}, {"sha": "66177d3df91a6b6d70dc7d8889825b9eda107150", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=cfcd449c4c36c68541c3389878e3262dac5e4746", "patch": "@@ -341,10 +341,10 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                         }\n \n                         for source_item in source_items {\n-                            let (module_path, name) = match source_item.node {\n-                                PathListIdent { name, .. } =>\n-                                    (module_path.clone(), name.name),\n-                                PathListMod { .. } => {\n+                            let (module_path, name, rename) = match source_item.node {\n+                                PathListIdent { name, rename, .. } =>\n+                                    (module_path.clone(), name.name, rename.unwrap_or(name).name),\n+                                PathListMod { rename, .. } => {\n                                     let name = match module_path.last() {\n                                         Some(name) => *name,\n                                         None => {\n@@ -358,13 +358,14 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                         }\n                                     };\n                                     let module_path = module_path.split_last().unwrap().1;\n-                                    (module_path.to_vec(), name)\n+                                    let rename = rename.map(|n| n.name).unwrap_or(name);\n+                                    (module_path.to_vec(), name, rename)\n                                 }\n                             };\n                             self.build_import_directive(\n                                 &**parent,\n                                 module_path,\n-                                SingleImport(name, name),\n+                                SingleImport(rename, name),\n                                 source_item.span,\n                                 source_item.node.id(),\n                                 is_public,"}, {"sha": "6431e688c8a170a853b765cd5c647a677563d0fb", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cfcd449c4c36c68541c3389878e3262dac5e4746", "patch": "@@ -2362,7 +2362,7 @@ impl Clean<Vec<Item>> for doctree::Import {\n                 let remaining = if !denied {\n                     let mut remaining = vec![];\n                     for path in list {\n-                        match inline::try_inline(cx, path.node.id(), None) {\n+                        match inline::try_inline(cx, path.node.id(), path.node.rename()) {\n                             Some(items) => {\n                                 ret.extend(items);\n                             }\n@@ -2424,18 +2424,21 @@ pub struct ImportSource {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ViewListIdent {\n     pub name: String,\n+    pub rename: Option<String>,\n     pub source: Option<ast::DefId>,\n }\n \n impl Clean<ViewListIdent> for ast::PathListItem {\n     fn clean(&self, cx: &DocContext) -> ViewListIdent {\n         match self.node {\n-            ast::PathListIdent { id, name } => ViewListIdent {\n+            ast::PathListIdent { id, name, rename } => ViewListIdent {\n                 name: name.clean(cx),\n+                rename: rename.map(|r| r.clean(cx)),\n                 source: resolve_def(cx, id)\n             },\n-            ast::PathListMod { id } => ViewListIdent {\n+            ast::PathListMod { id, rename } => ViewListIdent {\n                 name: \"self\".to_string(),\n+                rename: rename.map(|r| r.clean(cx)),\n                 source: resolve_def(cx, id)\n             }\n         }"}, {"sha": "7d86a547e94e96134cdcf2ec3a69c27e6db3604d", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=cfcd449c4c36c68541c3389878e3262dac5e4746", "patch": "@@ -687,10 +687,15 @@ impl fmt::Display for clean::ViewListIdent {\n         match self.source {\n             Some(did) => {\n                 let path = clean::Path::singleton(self.name.clone());\n-                resolved_path(f, did, &path, false)\n+                try!(resolved_path(f, did, &path, false));\n             }\n-            _ => write!(f, \"{}\", self.name),\n+            _ => try!(write!(f, \"{}\", self.name)),\n+        }\n+\n+        if let Some(ref name) = self.rename {\n+            try!(write!(f, \" as {}\", name));\n         }\n+        Ok(())\n     }\n }\n "}, {"sha": "555a249e3686efb1fd93314724c73d59fd9eb7b0", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=cfcd449c4c36c68541c3389878e3262dac5e4746", "patch": "@@ -1656,14 +1656,29 @@ pub type Variant = Spanned<Variant_>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum PathListItem_ {\n-    PathListIdent { name: Ident, id: NodeId },\n-    PathListMod { id: NodeId }\n+    PathListIdent {\n+        name: Ident,\n+        /// renamed in list, eg `use foo::{bar as baz};`\n+        rename: Option<Ident>,\n+        id: NodeId\n+    },\n+    PathListMod {\n+        /// renamed in list, eg `use foo::{self as baz};`\n+        rename: Option<Ident>,\n+        id: NodeId\n+    }\n }\n \n impl PathListItem_ {\n     pub fn id(&self) -> NodeId {\n         match *self {\n-            PathListIdent { id, .. } | PathListMod { id } => id\n+            PathListIdent { id, .. } | PathListMod { id, .. } => id\n+        }\n+    }\n+\n+    pub fn rename(&self) -> Option<Ident> {\n+        match *self {\n+            PathListIdent { rename, .. } | PathListMod { rename, .. } => rename\n         }\n     }\n }"}, {"sha": "771ac85ef19210bff535ed753fb9b4265ec2b37c", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=cfcd449c4c36c68541c3389878e3262dac5e4746", "patch": "@@ -1141,7 +1141,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn item_use_list(&self, sp: Span, vis: ast::Visibility,\n                      path: Vec<ast::Ident>, imports: &[ast::Ident]) -> P<ast::Item> {\n         let imports = imports.iter().map(|id| {\n-            respan(sp, ast::PathListIdent { name: *id, id: ast::DUMMY_NODE_ID })\n+            respan(sp, ast::PathListIdent { name: *id, rename: None, id: ast::DUMMY_NODE_ID })\n         }).collect();\n \n         self.item_use(sp, vis,"}, {"sha": "418a2cf5a879cb087dfa6eaefe7b31d1959907c5", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=cfcd449c4c36c68541c3389878e3262dac5e4746", "patch": "@@ -335,13 +335,17 @@ pub fn noop_fold_view_path<T: Folder>(view_path: P<ViewPath>, fld: &mut T) -> P<\n                              path_list_idents.move_map(|path_list_ident| {\n                                 Spanned {\n                                     node: match path_list_ident.node {\n-                                        PathListIdent { id, name } =>\n+                                        PathListIdent { id, name, rename } =>\n                                             PathListIdent {\n                                                 id: fld.new_id(id),\n+                                                rename: rename,\n                                                 name: name\n                                             },\n-                                        PathListMod { id } =>\n-                                            PathListMod { id: fld.new_id(id) }\n+                                        PathListMod { id, rename } =>\n+                                            PathListMod {\n+                                                id: fld.new_id(id),\n+                                                rename: rename\n+                                            }\n                                     },\n                                     span: fld.new_span(path_list_ident.span)\n                                 }"}, {"sha": "981d6e1055a5269ed619b729d010ec429d681bb3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=cfcd449c4c36c68541c3389878e3262dac5e4746", "patch": "@@ -573,10 +573,12 @@ impl<'a> Parser<'a> {\n     pub fn parse_path_list_item(&mut self) -> PResult<ast::PathListItem> {\n         let lo = self.span.lo;\n         let node = if try!(self.eat_keyword(keywords::SelfValue)) {\n-            ast::PathListMod { id: ast::DUMMY_NODE_ID }\n+            let rename = try!(self.parse_rename());\n+            ast::PathListMod { id: ast::DUMMY_NODE_ID, rename: rename }\n         } else {\n             let ident = try!(self.parse_ident());\n-            ast::PathListIdent { name: ident, id: ast::DUMMY_NODE_ID }\n+            let rename = try!(self.parse_rename());\n+            ast::PathListIdent { name: ident, rename: rename, id: ast::DUMMY_NODE_ID }\n         };\n         let hi = self.last_span.hi;\n         Ok(spanned(lo, hi, node))\n@@ -5104,8 +5106,8 @@ impl<'a> Parser<'a> {\n                                 -> PResult<P<Item>> {\n \n         let crate_name = try!(self.parse_ident());\n-        let (maybe_path, ident) = if try!(self.eat_keyword(keywords::As)) {\n-            (Some(crate_name.name), try!(self.parse_ident()))\n+        let (maybe_path, ident) = if let Some(ident) = try!(self.parse_rename()) {\n+            (Some(crate_name.name), ident)\n         } else {\n             (None, crate_name)\n         };\n@@ -5766,10 +5768,16 @@ impl<'a> Parser<'a> {\n                 }\n             }).collect()\n         };\n+        rename_to = try!(self.parse_rename()).unwrap_or(rename_to);\n+        Ok(P(spanned(lo, self.last_span.hi, ViewPathSimple(rename_to, path))))\n+    }\n+\n+    fn parse_rename(&mut self) -> PResult<Option<Ident>> {\n         if try!(self.eat_keyword(keywords::As)) {\n-            rename_to = try!(self.parse_ident())\n+            self.parse_ident().map(Some)\n+        } else {\n+            Ok(None)\n         }\n-        Ok(P(spanned(lo, self.last_span.hi, ViewPathSimple(rename_to, path))))\n     }\n \n     /// Parses a source module as a crate. This is the main"}, {"sha": "1de922a0428f5f38d4754d495a299274ca85a2f6", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=cfcd449c4c36c68541c3389878e3262dac5e4746", "patch": "@@ -2643,11 +2643,23 @@ impl<'a> State<'a> {\n                 }\n                 try!(self.commasep(Inconsistent, &idents[..], |s, w| {\n                     match w.node {\n-                        ast::PathListIdent { name, .. } => {\n-                            s.print_ident(name)\n+                        ast::PathListIdent { name, rename, .. } => {\n+                            try!(s.print_ident(name));\n+                            if let Some(ident) = rename {\n+                                try!(space(&mut s.s));\n+                                try!(s.word_space(\"as\"));\n+                                try!(s.print_ident(ident));\n+                            }\n+                            Ok(())\n                         },\n-                        ast::PathListMod { .. } => {\n-                            word(&mut s.s, \"self\")\n+                        ast::PathListMod { rename, .. } => {\n+                            try!(word(&mut s.s, \"self\"));\n+                            if let Some(ident) = rename {\n+                                try!(space(&mut s.s));\n+                                try!(s.word_space(\"as\"));\n+                                try!(s.print_ident(ident));\n+                            }\n+                            Ok(())\n                         }\n                     }\n                 }));"}, {"sha": "27d95cbcf5ba392dce5063e7767fe6330da1aeab", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=cfcd449c4c36c68541c3389878e3262dac5e4746", "patch": "@@ -233,10 +233,17 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n                 ViewPathList(ref prefix, ref list) => {\n                     for id in list {\n                         match id.node {\n-                            PathListIdent { name, .. } => {\n+                            PathListIdent { name, rename, .. } => {\n                                 visitor.visit_ident(id.span, name);\n+                                if let Some(ident) = rename {\n+                                    visitor.visit_ident(id.span, ident);\n+                                }\n+                            }\n+                            PathListMod { rename, .. } => {\n+                                if let Some(ident) = rename {\n+                                    visitor.visit_ident(id.span, ident);\n+                                }\n                             }\n-                            PathListMod { .. } => ()\n                         }\n                     }\n "}, {"sha": "5edcf1d99a02bda2285b092177f6a65d4fdf793d", "filename": "src/test/compile-fail/unresolved-import.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs?ref=cfcd449c4c36c68541c3389878e3262dac5e4746", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -12,6 +12,20 @@ use foo::bar; //~ ERROR unresolved import `foo::bar`. Maybe a missing `extern cr\n \n use bar::baz as x; //~ ERROR unresolved import `bar::baz`. There is no `baz` in `bar`\n \n+use food::baz; //~ ERROR unresolved import `food::baz`. There is no `baz` in `food`\n+\n+use food::{quux as beans}; //~ ERROR unresolved import `food::quux`. There is no `quux` in `food`\n+\n mod bar {\n     struct bar;\n }\n+\n+mod food {\n+    pub use self::zug::baz::{self as bag, quux as beans};\n+\n+    mod zug {\n+        pub mod baz {\n+            pub struct quux;\n+        }\n+    }\n+}"}, {"sha": "47a878711ba20d18449d14b7708016ae89c10dfb", "filename": "src/test/pretty/import-renames.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Ftest%2Fpretty%2Fimport-renames.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Ftest%2Fpretty%2Fimport-renames.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fimport-renames.rs?ref=cfcd449c4c36c68541c3389878e3262dac5e4746", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pp-exact\n+\n+use std::io::{self, Error as IoError};\n+use std::net::{self as stdnet, TcpStream};"}, {"sha": "f293c284f946fb6c5a875ae90a0c7e986775ffdd", "filename": "src/test/run-pass/import-rename.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Ftest%2Frun-pass%2Fimport-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Ftest%2Frun-pass%2Fimport-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-rename.rs?ref=cfcd449c4c36c68541c3389878e3262dac5e4746", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use foo::{x, y as fooy};\n+use Maybe::{Yes as MaybeYes};\n+\n+pub enum Maybe { Yes, No }\n+mod foo {\n+    use super::Maybe::{self as MaybeFoo};\n+    pub fn x(a: MaybeFoo) {}\n+    pub fn y(a: i32) { println!(\"{}\", a); }\n+}\n+\n+pub fn main() { x(MaybeYes); fooy(10); }"}, {"sha": "09a3849b9153bec7cdb201b3387105c86b8a4cfa", "filename": "src/test/run-pass/use.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Ftest%2Frun-pass%2Fuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Ftest%2Frun-pass%2Fuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse.rs?ref=cfcd449c4c36c68541c3389878e3262dac5e4746", "patch": "@@ -19,6 +19,9 @@ extern crate std as zed;\n \n use std::str;\n use zed::str as x;\n+\n+use std::io::{self, Error as IoError, Result as IoResult};\n+use std::error::{self as foo};\n mod baz {\n     pub use std::str as x;\n }"}, {"sha": "ccc0acab7f379bc6c6ef8508f1b646e50ecd322e", "filename": "src/test/rustdoc/viewpath-rename.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Ftest%2Frustdoc%2Fviewpath-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcd449c4c36c68541c3389878e3262dac5e4746/src%2Ftest%2Frustdoc%2Fviewpath-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fviewpath-rename.rs?ref=cfcd449c4c36c68541c3389878e3262dac5e4746", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+pub mod io {\n+    pub trait Reader { fn dummy(&self) { } }\n+}\n+\n+pub enum Maybe<A> {\n+    Just(A),\n+    Nothing\n+}\n+\n+// @has foo/prelude/index.html\n+pub mod prelude {\n+    // @has foo/prelude/index.html '//code' 'pub use io::{self as FooIo, Reader as FooReader}'\n+    #[doc(no_inline)] pub use io::{self as FooIo, Reader as FooReader};\n+    // @has foo/prelude/index.html '//code' 'pub use Maybe::{self, Just as MaybeJust, Nothing}'\n+    #[doc(no_inline)] pub use Maybe::{self, Just as MaybeJust, Nothing};\n+}"}]}