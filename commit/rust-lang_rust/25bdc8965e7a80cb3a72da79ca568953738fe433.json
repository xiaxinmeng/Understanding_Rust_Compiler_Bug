{"sha": "25bdc8965e7a80cb3a72da79ca568953738fe433", "node_id": "C_kwDOAAsO6NoAKDI1YmRjODk2NWU3YTgwY2IzYTcyZGE3OWNhNTY4OTUzNzM4ZmU0MzM", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-07-16T03:13:04Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-07-29T22:25:58Z"}, "message": "Change maybe_body_owned_by to take local def id\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "9e5c141b84918483db882f87c8d1bbb6b3702da1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e5c141b84918483db882f87c8d1bbb6b3702da1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25bdc8965e7a80cb3a72da79ca568953738fe433", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25bdc8965e7a80cb3a72da79ca568953738fe433", "html_url": "https://github.com/rust-lang/rust/commit/25bdc8965e7a80cb3a72da79ca568953738fe433", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25bdc8965e7a80cb3a72da79ca568953738fe433/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3924dac7bb29bc8eb348059c901e8f912399c857", "url": "https://api.github.com/repos/rust-lang/rust/commits/3924dac7bb29bc8eb348059c901e8f912399c857", "html_url": "https://github.com/rust-lang/rust/commit/3924dac7bb29bc8eb348059c901e8f912399c857"}], "stats": {"total": 97, "additions": 50, "deletions": 47}, "files": [{"sha": "255c31d0b1a7a79804951f01155ca88e49426e95", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=25bdc8965e7a80cb3a72da79ca568953738fe433", "patch": "@@ -353,9 +353,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         // We use the statements were the binding was initialized, and inspect the HIR to look\n         // for the branching codepaths that aren't covered, to point at them.\n-        let hir_id = self.mir_hir_id();\n         let map = self.infcx.tcx.hir();\n-        let body_id = map.body_owned_by(hir_id);\n+        let body_id = map.body_owned_by(self.mir_def_id());\n         let body = map.body(body_id);\n \n         let mut visitor = ConditionVisitor { spans: &spans, name: &name, errors: vec![] };"}, {"sha": "a514f1a9489f9d82ff8a512de797ee4935ed2073", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=25bdc8965e7a80cb3a72da79ca568953738fe433", "patch": "@@ -328,7 +328,7 @@ impl<'tcx> pprust_hir::PpAnn for TypedAnnotation<'tcx> {\n             let typeck_results = self.maybe_typeck_results.get().or_else(|| {\n                 self.tcx\n                     .hir()\n-                    .maybe_body_owned_by(self.tcx.hir().local_def_id_to_hir_id(expr.hir_id.owner))\n+                    .maybe_body_owned_by(self.tcx.hir().local_def_id(expr.hir_id))\n                     .map(|body_id| self.tcx.typeck_body(body_id))\n             });\n "}, {"sha": "4c63024367c6c3ce0e4614ccce134a6cb1073d40", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=25bdc8965e7a80cb3a72da79ca568953738fe433", "patch": "@@ -49,10 +49,10 @@ pub fn find_param_with_region<'tcx>(\n     };\n \n     let hir = &tcx.hir();\n-    let hir_id = hir.local_def_id_to_hir_id(id.as_local()?);\n-    let body_id = hir.maybe_body_owned_by(hir_id)?;\n-    let body = hir.body(body_id);\n+    let local_did = id.as_local()?;\n+    let hir_id = hir.local_def_id_to_hir_id(local_did);\n \n+    // FIXME: use def_kind\n     // Don't perform this on closures\n     match hir.get(hir_id) {\n         hir::Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure { .. }, .. }) => {\n@@ -61,11 +61,14 @@ pub fn find_param_with_region<'tcx>(\n         _ => {}\n     }\n \n+    let body_id = hir.maybe_body_owned_by(local_did)?;\n+\n     let owner_id = hir.body_owner(body_id);\n     let fn_decl = hir.fn_decl_by_hir_id(owner_id).unwrap();\n     let poly_fn_sig = tcx.fn_sig(id);\n \n     let fn_sig = tcx.liberate_late_bound_regions(id, poly_fn_sig);\n+    let body = hir.body(body_id);\n     body.params\n         .iter()\n         .take(if fn_sig.c_variadic {"}, {"sha": "d2ed6e08ff713c99fb9d0974a4bda108c583148d", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=25bdc8965e7a80cb3a72da79ca568953738fe433", "patch": "@@ -1614,16 +1614,16 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     }\n \n     fn encode_info_for_anon_const(&mut self, id: hir::HirId) {\n-        let def_id = self.tcx.hir().local_def_id(id);\n-        debug!(\"EncodeContext::encode_info_for_anon_const({:?})\", def_id);\n-        let body_id = self.tcx.hir().body_owned_by(id);\n+        let local_did = self.tcx.hir().local_def_id(id);\n+        debug!(\"EncodeContext::encode_info_for_anon_const({:?})\", local_did);\n+        let body_id = self.tcx.hir().body_owned_by(local_did);\n         let const_data = self.encode_rendered_const_for_body(body_id);\n-        let qualifs = self.tcx.mir_const_qualif(def_id);\n+        let qualifs = self.tcx.mir_const_qualif(local_did);\n \n-        record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::AnonConst);\n-        record!(self.tables.mir_const_qualif[def_id.to_def_id()] <- qualifs);\n-        record!(self.tables.rendered_const[def_id.to_def_id()] <- const_data);\n-        self.encode_item_type(def_id.to_def_id());\n+        record!(self.tables.kind[local_did.to_def_id()] <- EntryKind::AnonConst);\n+        record!(self.tables.mir_const_qualif[local_did.to_def_id()] <- qualifs);\n+        record!(self.tables.rendered_const[local_did.to_def_id()] <- const_data);\n+        self.encode_item_type(local_did.to_def_id());\n     }\n \n     fn encode_native_libraries(&mut self) -> LazyArray<NativeLib> {"}, {"sha": "adb591fe09c5a15f42a2e1469a8712d6ddc1212a", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=25bdc8965e7a80cb3a72da79ca568953738fe433", "patch": "@@ -398,7 +398,7 @@ impl<'hir> Map<'hir> {\n \n     pub fn enclosing_body_owner(self, hir_id: HirId) -> HirId {\n         for (parent, _) in self.parent_iter(hir_id) {\n-            if let Some(body) = self.maybe_body_owned_by(parent) {\n+            if let Some(local_did) = parent.as_owner() && let Some(body) = self.maybe_body_owned_by(local_did) {\n                 return self.body_owner(body);\n             }\n         }\n@@ -419,19 +419,20 @@ impl<'hir> Map<'hir> {\n         self.local_def_id(self.body_owner(id))\n     }\n \n-    /// Given a `HirId`, returns the `BodyId` associated with it,\n+    /// Given a `LocalDefId`, returns the `BodyId` associated with it,\n     /// if the node is a body owner, otherwise returns `None`.\n-    pub fn maybe_body_owned_by(self, hir_id: HirId) -> Option<BodyId> {\n-        self.find(hir_id).map(associated_body).flatten()\n+    pub fn maybe_body_owned_by(self, id: LocalDefId) -> Option<BodyId> {\n+        self.get_if_local(id.to_def_id()).map(associated_body).flatten()\n     }\n \n     /// Given a body owner's id, returns the `BodyId` associated with it.\n-    pub fn body_owned_by(self, id: HirId) -> BodyId {\n+    pub fn body_owned_by(self, id: LocalDefId) -> BodyId {\n         self.maybe_body_owned_by(id).unwrap_or_else(|| {\n+            let hir_id = self.local_def_id_to_hir_id(id);\n             span_bug!(\n-                self.span(id),\n+                self.span(hir_id),\n                 \"body_owned_by: {} has no associated body\",\n-                self.node_to_string(id)\n+                self.node_to_string(hir_id)\n             );\n         })\n     }"}, {"sha": "3c0087493582f5f1ff0b1305acc13de1386d5065", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=25bdc8965e7a80cb3a72da79ca568953738fe433", "patch": "@@ -157,8 +157,9 @@ pub fn provide(providers: &mut Providers) {\n     };\n     providers.fn_arg_names = |tcx, id| {\n         let hir = tcx.hir();\n-        let hir_id = hir.local_def_id_to_hir_id(id.expect_local());\n-        if let Some(body_id) = hir.maybe_body_owned_by(hir_id) {\n+        let local_did = id.expect_local();\n+        let hir_id = hir.local_def_id_to_hir_id(local_did);\n+        if let Some(body_id) = hir.maybe_body_owned_by(local_did) {\n             tcx.arena.alloc_from_iter(hir.body_param_names(body_id))\n         } else if let Node::TraitItem(&TraitItem {\n             kind: TraitItemKind::Fn(_, TraitFn::Required(idents)),"}, {"sha": "f7351a4caa9545250d59dcbf5c21a146724fcc27", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=25bdc8965e7a80cb3a72da79ca568953738fe433", "patch": "@@ -21,7 +21,7 @@ pub(crate) fn thir_body<'tcx>(\n     owner_def: ty::WithOptConstParam<LocalDefId>,\n ) -> Result<(&'tcx Steal<Thir<'tcx>>, ExprId), ErrorGuaranteed> {\n     let hir = tcx.hir();\n-    let body = hir.body(hir.body_owned_by(hir.local_def_id_to_hir_id(owner_def.did)));\n+    let body = hir.body(hir.body_owned_by(owner_def.did));\n     let mut cx = Cx::new(tcx, owner_def);\n     if let Some(reported) = cx.typeck_results.tainted_by_errors {\n         return Err(reported);"}, {"sha": "c6e38520f640dd29404836719b1a149158875a9b", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=25bdc8965e7a80cb3a72da79ca568953738fe433", "patch": "@@ -26,7 +26,7 @@ use rustc_span::{BytePos, Span};\n pub(crate) fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n     let body_id = match def_id.as_local() {\n         None => return,\n-        Some(id) => tcx.hir().body_owned_by(tcx.hir().local_def_id_to_hir_id(id)),\n+        Some(did) => tcx.hir().body_owned_by(did),\n     };\n \n     let pattern_arena = TypedArena::default();"}, {"sha": "13ae8a1cd3e2068a40fd09f026f4df61d8c34a45", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=25bdc8965e7a80cb3a72da79ca568953738fe433", "patch": "@@ -464,15 +464,15 @@ fn check_unused_unsafe(\n     def_id: LocalDefId,\n     used_unsafe_blocks: &FxHashMap<HirId, UsedUnsafeBlockData>,\n ) -> Vec<(HirId, UnusedUnsafe)> {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    let body_id = tcx.hir().maybe_body_owned_by(hir_id);\n+    let body_id = tcx.hir().maybe_body_owned_by(def_id);\n \n     let Some(body_id) = body_id else {\n         debug!(\"check_unused_unsafe({:?}) - no body found\", def_id);\n         return vec![];\n     };\n-    let body = tcx.hir().body(body_id);\n \n+    let body = tcx.hir().body(body_id);\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let context = match tcx.hir().fn_sig_by_hir_id(hir_id) {\n         Some(sig) if sig.header.unsafety == hir::Unsafety::Unsafe => Context::UnsafeFn(hir_id),\n         _ => Context::Safe,"}, {"sha": "6f3b0eea4b59db0c7fc8aa88eb95ed481ec19cce", "filename": "compiler/rustc_passes/src/upvars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs?ref=25bdc8965e7a80cb3a72da79ca568953738fe433", "patch": "@@ -15,8 +15,8 @@ pub fn provide(providers: &mut Providers) {\n             return None;\n         }\n \n-        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-        let body = tcx.hir().body(tcx.hir().maybe_body_owned_by(hir_id)?);\n+        let local_did = def_id.expect_local();\n+        let body = tcx.hir().body(tcx.hir().maybe_body_owned_by(local_did)?);\n \n         let mut local_collector = LocalCollector::default();\n         local_collector.visit_body(body);"}, {"sha": "b000774ed2a291d3eadabab425f615d9cb94515d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=25bdc8965e7a80cb3a72da79ca568953738fe433", "patch": "@@ -1783,8 +1783,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         let generator_body = generator_did\n             .as_local()\n-            .map(|def_id| hir.local_def_id_to_hir_id(def_id))\n-            .and_then(|hir_id| hir.maybe_body_owned_by(hir_id))\n+            .and_then(|local_did| hir.maybe_body_owned_by(local_did))\n             .map(|body_id| hir.body(body_id));\n         let is_async = match generator_did.as_local() {\n             Some(_) => generator_body\n@@ -2752,7 +2751,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let body_hir_id = obligation.cause.body_id;\n         let item_id = self.tcx.hir().get_parent_node(body_hir_id);\n \n-        if let Some(body_id) = self.tcx.hir().maybe_body_owned_by(item_id) {\n+        if let Some(body_id) =\n+            self.tcx.hir().maybe_body_owned_by(self.tcx.hir().local_def_id(item_id))\n+        {\n             let body = self.tcx.hir().body(body_id);\n             if let Some(hir::GeneratorKind::Async(_)) = body.generator_kind {\n                 let future_trait = self.tcx.require_lang_item(LangItem::Future, None);"}, {"sha": "f437eb98942a5702ef73e771f482a998b125ba8a", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=25bdc8965e7a80cb3a72da79ca568953738fe433", "patch": "@@ -207,9 +207,10 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n         constness,\n     );\n \n-    let body_id = hir_id.map_or(hir::CRATE_HIR_ID, |id| {\n-        tcx.hir().maybe_body_owned_by(id).map_or(id, |body| body.hir_id)\n-    });\n+    let body_id = local_did\n+        .and_then(|id| tcx.hir().maybe_body_owned_by(id).map(|body| body.hir_id))\n+        .or(hir_id)\n+        .map_or(hir::CRATE_HIR_ID, |did| did);\n     let cause = traits::ObligationCause::misc(tcx.def_span(def_id), body_id);\n     traits::normalize_param_env_or_error(tcx, unnormalized_env, cause)\n }"}, {"sha": "2116e2db5f569c4fc34ca1dff84883d381ff6ac6", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=25bdc8965e7a80cb3a72da79ca568953738fe433", "patch": "@@ -768,7 +768,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // the first place.\n                 assert_ne!(hir::HirId::make_owner(encl_item_id), encl_body_owner_id);\n \n-                let encl_body_id = self.tcx.hir().body_owned_by(encl_body_owner_id);\n+                let encl_body_id =\n+                    self.tcx.hir().body_owned_by(self.tcx.hir().local_def_id(encl_body_owner_id));\n                 let encl_body = self.tcx.hir().body(encl_body_id);\n \n                 err.encl_body_span = Some(encl_body.value.span);"}, {"sha": "99895dc122452edecc9d609210e6fc9a36ea9845", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=25bdc8965e7a80cb3a72da79ca568953738fe433", "patch": "@@ -107,8 +107,7 @@ impl<'tcx> InheritedBuilder<'tcx> {\n impl<'a, 'tcx> Inherited<'a, 'tcx> {\n     fn new(infcx: InferCtxt<'a, 'tcx>, def_id: LocalDefId) -> Self {\n         let tcx = infcx.tcx;\n-        let item_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-        let body_id = tcx.hir().maybe_body_owned_by(item_id);\n+        let body_id = tcx.hir().maybe_body_owned_by(def_id);\n         let typeck_results =\n             infcx.in_progress_typeck_results.expect(\"building `FnCtxt` without typeck results\");\n "}, {"sha": "0081e9049eeca87a7cd612a06f4835c3c71f307f", "filename": "compiler/rustc_typeck/src/check/region.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdc8965e7a80cb3a72da79ca568953738fe433/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs?ref=25bdc8965e7a80cb3a72da79ca568953738fe433", "patch": "@@ -814,8 +814,7 @@ pub fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> &ScopeTree {\n         return tcx.region_scope_tree(typeck_root_def_id);\n     }\n \n-    let id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-    let scope_tree = if let Some(body_id) = tcx.hir().maybe_body_owned_by(id) {\n+    let scope_tree = if let Some(body_id) = tcx.hir().maybe_body_owned_by(def_id.expect_local()) {\n         let mut visitor = RegionResolutionVisitor {\n             tcx,\n             scope_tree: ScopeTree::default(),"}, {"sha": "621f70f0da9865f18fbaa564613dbad70b78e479", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25bdc8965e7a80cb3a72da79ca568953738fe433/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdc8965e7a80cb3a72da79ca568953738fe433/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=25bdc8965e7a80cb3a72da79ca568953738fe433", "patch": "@@ -236,8 +236,7 @@ pub(crate) fn print_const(cx: &DocContext<'_>, n: ty::Const<'_>) -> String {\n     match n.kind() {\n         ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) => {\n             let mut s = if let Some(def) = def.as_local() {\n-                let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def.did);\n-                print_const_expr(cx.tcx, cx.tcx.hir().body_owned_by(hir_id))\n+                print_const_expr(cx.tcx, cx.tcx.hir().body_owned_by(def.did))\n             } else {\n                 inline::print_inlined_const(cx.tcx, def.did)\n             };"}, {"sha": "c48b25aea4a373022cd73c51884e2ca61ac6216e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25bdc8965e7a80cb3a72da79ca568953738fe433/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdc8965e7a80cb3a72da79ca568953738fe433/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=25bdc8965e7a80cb3a72da79ca568953738fe433", "patch": "@@ -313,7 +313,7 @@ pub(crate) fn create_config(\n                 }\n \n                 let hir = tcx.hir();\n-                let body = hir.body(hir.body_owned_by(hir.local_def_id_to_hir_id(def_id)));\n+                let body = hir.body(hir.body_owned_by(def_id));\n                 debug!(\"visiting body for {:?}\", def_id);\n                 EmitIgnoredResolutionErrors::new(tcx).visit_body(body);\n                 (rustc_interface::DEFAULT_QUERY_PROVIDERS.typeck)(tcx, def_id)"}, {"sha": "fd0b19034a259022f51f2f9db9f5bd10e4992c65", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25bdc8965e7a80cb3a72da79ca568953738fe433/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdc8965e7a80cb3a72da79ca568953738fe433/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=25bdc8965e7a80cb3a72da79ca568953738fe433", "patch": "@@ -143,8 +143,7 @@ where\n         // then we need to exit before calling typeck (which will panic). See\n         // test/run-make/rustdoc-scrape-examples-invalid-expr for an example.\n         let hir = tcx.hir();\n-        let owner = hir.local_def_id_to_hir_id(ex.hir_id.owner);\n-        if hir.maybe_body_owned_by(owner).is_none() {\n+        if hir.maybe_body_owned_by(ex.hir_id.owner).is_none() {\n             return;\n         }\n "}, {"sha": "59e07313f549ec50f48e2dd4c274fd38aedf384f", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25bdc8965e7a80cb3a72da79ca568953738fe433/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bdc8965e7a80cb3a72da79ca568953738fe433/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=25bdc8965e7a80cb3a72da79ca568953738fe433", "patch": "@@ -138,7 +138,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n \n fn check_item(cx: &LateContext<'_>, hir_id: HirId) {\n     let hir = cx.tcx.hir();\n-    if let Some(body_id) = hir.maybe_body_owned_by(hir_id) {\n+    if let Some(body_id) = hir.maybe_body_owned_by(hir.local_def_id(hir_id)) {\n         check_node(cx, hir_id, |v| {\n             v.expr(&v.bind(\"expr\", &hir.body(body_id).value));\n         });"}]}