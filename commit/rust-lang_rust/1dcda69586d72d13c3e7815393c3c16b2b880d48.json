{"sha": "1dcda69586d72d13c3e7815393c3c16b2b880d48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkY2RhNjk1ODZkNzJkMTNjM2U3ODE1MzkzYzNjMTZiMmI4ODBkNDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-01T06:42:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-01T06:42:12Z"}, "message": "Auto merge of #51225 - oli-obk:miri_oob_ptr, r=eddyb\n\nFix the miri submodule\n\ncc @bjorn3\n\nr? @eddyb", "tree": {"sha": "1fbcf9cdca5b4d33f864b8ffb2a1bc68fbdbeac9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fbcf9cdca5b4d33f864b8ffb2a1bc68fbdbeac9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dcda69586d72d13c3e7815393c3c16b2b880d48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dcda69586d72d13c3e7815393c3c16b2b880d48", "html_url": "https://github.com/rust-lang/rust/commit/1dcda69586d72d13c3e7815393c3c16b2b880d48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dcda69586d72d13c3e7815393c3c16b2b880d48/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7", "html_url": "https://github.com/rust-lang/rust/commit/63cd4a39ead1bdcc6f4df5f11d187916bd8d3ea7"}, {"sha": "06394518f8c53ac940977fb16467942c0a1ca58c", "url": "https://api.github.com/repos/rust-lang/rust/commits/06394518f8c53ac940977fb16467942c0a1ca58c", "html_url": "https://github.com/rust-lang/rust/commit/06394518f8c53ac940977fb16467942c0a1ca58c"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "632f7abfdb499bc7ac3d0918e4f9c7d70ed7cba6", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dcda69586d72d13c3e7815393c3c16b2b880d48/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcda69586d72d13c3e7815393c3c16b2b880d48/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=1dcda69586d72d13c3e7815393c3c16b2b880d48", "patch": "@@ -793,7 +793,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                 let ty = self.place_ty(place);\n                 let place = self.eval_place(place)?;\n                 let discr_val = self.read_discriminant_value(place, ty)?;\n-                let defined = self.layout_of(ty).unwrap().size.bits() as u8;\n+                let defined = self.layout_of(dest_ty).unwrap().size.bits() as u8;\n                 self.write_scalar(dest, Scalar::Bits {\n                     bits: discr_val,\n                     defined,"}, {"sha": "dc56de47fbf63c902d4bd1d1bded7f98980aa6ab", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dcda69586d72d13c3e7815393c3c16b2b880d48/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcda69586d72d13c3e7815393c3c16b2b880d48/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=1dcda69586d72d13c3e7815393c3c16b2b880d48", "patch": "@@ -844,7 +844,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         }\n \n         // Forget all the relocations.\n-        alloc.relocations.remove_range(first ..= last);\n+        alloc.relocations.remove_range(first..last);\n \n         Ok(())\n     }"}, {"sha": "9151bfbdd1b3c57cc7757dc806e98f272cf4de35", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1dcda69586d72d13c3e7815393c3c16b2b880d48/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcda69586d72d13c3e7815393c3c16b2b880d48/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=1dcda69586d72d13c3e7815393c3c16b2b880d48", "patch": "@@ -39,12 +39,15 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             } => {\n                 let discr_val = self.eval_operand(discr)?;\n                 let discr_prim = self.value_to_scalar(discr_val)?;\n+                let discr_layout = self.layout_of(discr_val.ty).unwrap();\n+                trace!(\"SwitchInt({:?}, {:#?})\", discr_prim, discr_layout);\n+                let discr_prim = discr_prim.to_bits(discr_layout.size)?;\n \n                 // Branch to the `otherwise` case by default, if no match is found.\n                 let mut target_block = targets[targets.len() - 1];\n \n                 for (index, &const_int) in values.iter().enumerate() {\n-                    if discr_prim.to_bits(self.layout_of(discr_val.ty).unwrap().size)? == const_int {\n+                    if discr_prim == const_int {\n                         target_block = targets[index];\n                         break;\n                     }\n@@ -288,10 +291,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                     // and need to pack arguments\n                     Abi::Rust => {\n                         trace!(\n-                            \"arg_locals: {:?}\",\n+                            \"arg_locals: {:#?}\",\n                             self.frame().mir.args_iter().collect::<Vec<_>>()\n                         );\n-                        trace!(\"args: {:?}\", args);\n+                        trace!(\"args: {:#?}\", args);\n                         let local = arg_locals.nth(1).unwrap();\n                         for (i, &valty) in args.into_iter().enumerate() {\n                             let dest = self.eval_place(&mir::Place::Local(local).field(\n@@ -318,10 +321,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 let mut arg_locals = self.frame().mir.args_iter();\n                 trace!(\"ABI: {:?}\", sig.abi);\n                 trace!(\n-                    \"arg_locals: {:?}\",\n+                    \"arg_locals: {:#?}\",\n                     self.frame().mir.args_iter().collect::<Vec<_>>()\n                 );\n-                trace!(\"args: {:?}\", args);\n+                trace!(\"args: {:#?}\", args);\n                 match sig.abi {\n                     Abi::RustCall => {\n                         assert_eq!(args.len(), 2);\n@@ -373,14 +376,26 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                                             }\n                                             break;\n                                         }\n-                                        let dest = self.eval_place(&mir::Place::Local(\n-                                            arg_locals.next().unwrap(),\n-                                        ))?;\n-                                        let valty = ValTy {\n-                                            value: other,\n-                                            ty: layout.ty,\n-                                        };\n-                                        self.write_value(valty, dest)?;\n+                                        {\n+                                            let mut write_next = |value| {\n+                                                let dest = self.eval_place(&mir::Place::Local(\n+                                                    arg_locals.next().unwrap(),\n+                                                ))?;\n+                                                let valty = ValTy {\n+                                                    value: Value::Scalar(value),\n+                                                    ty: layout.ty,\n+                                                };\n+                                                self.write_value(valty, dest)\n+                                            };\n+                                            match other {\n+                                                Value::Scalar(value) | Value::ScalarPair(value, _) => write_next(value)?,\n+                                                _ => unreachable!(),\n+                                            }\n+                                            if let Value::ScalarPair(_, value) = other {\n+                                                write_next(value)?;\n+                                            }\n+                                        }\n+                                        assert!(arg_locals.next().is_none());\n                                     }\n                                 }\n                             } else {"}, {"sha": "066a284557ff6e6a2aa19084f599f167a724af7b", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=1dcda69586d72d13c3e7815393c3c16b2b880d48", "patch": "@@ -1 +1 @@\n-Subproject commit 6a4c62c1673c3dabcc9a0c99018bd08fec46fda7\n+Subproject commit 066a284557ff6e6a2aa19084f599f167a724af7b"}]}