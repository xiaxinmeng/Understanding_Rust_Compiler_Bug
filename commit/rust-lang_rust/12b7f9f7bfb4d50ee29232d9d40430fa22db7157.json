{"sha": "12b7f9f7bfb4d50ee29232d9d40430fa22db7157", "node_id": "C_kwDOAAsO6NoAKDEyYjdmOWY3YmZiNGQ1MGVlMjkyMzJkOWQ0MDQzMGZhMjJkYjcxNTc", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-21T15:00:05Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-09T13:35:17Z"}, "message": "Add an option to minimize parentheses for adjustment hints", "tree": {"sha": "45b9a79b511a7c24b8f2d5b158faa8914226de59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45b9a79b511a7c24b8f2d5b158faa8914226de59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12b7f9f7bfb4d50ee29232d9d40430fa22db7157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12b7f9f7bfb4d50ee29232d9d40430fa22db7157", "html_url": "https://github.com/rust-lang/rust/commit/12b7f9f7bfb4d50ee29232d9d40430fa22db7157", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12b7f9f7bfb4d50ee29232d9d40430fa22db7157/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b89c4f0a0529ca90dbe13d41fdd5e52331770900", "url": "https://api.github.com/repos/rust-lang/rust/commits/b89c4f0a0529ca90dbe13d41fdd5e52331770900", "html_url": "https://github.com/rust-lang/rust/commit/b89c4f0a0529ca90dbe13d41fdd5e52331770900"}], "stats": {"total": 191, "additions": 162, "deletions": 29}, "files": [{"sha": "48a7bbfecffa09a01d752abed39b597e83cec3da", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/12b7f9f7bfb4d50ee29232d9d40430fa22db7157/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b7f9f7bfb4d50ee29232d9d40430fa22db7157/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=12b7f9f7bfb4d50ee29232d9d40430fa22db7157", "patch": "@@ -35,7 +35,7 @@ pub struct InlayHintsConfig {\n     pub parameter_hints: bool,\n     pub chaining_hints: bool,\n     pub adjustment_hints: AdjustmentHints,\n-    pub adjustment_hints_postfix: bool,\n+    pub adjustment_hints_mode: AdjustmentHintsMode,\n     pub adjustment_hints_hide_outside_unsafe: bool,\n     pub closure_return_type_hints: ClosureReturnTypeHints,\n     pub binding_mode_hints: bool,\n@@ -75,6 +75,14 @@ pub enum AdjustmentHints {\n     Never,\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub enum AdjustmentHintsMode {\n+    Prefix,\n+    Postfix,\n+    PreferPrefix,\n+    PreferPostfix,\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum InlayKind {\n     BindingModeHint,\n@@ -432,7 +440,7 @@ mod tests {\n     use itertools::Itertools;\n     use test_utils::extract_annotations;\n \n-    use crate::inlay_hints::AdjustmentHints;\n+    use crate::inlay_hints::{AdjustmentHints, AdjustmentHintsMode};\n     use crate::DiscriminantHints;\n     use crate::{fixture, inlay_hints::InlayHintsConfig, LifetimeElisionHints};\n \n@@ -448,7 +456,7 @@ mod tests {\n         lifetime_elision_hints: LifetimeElisionHints::Never,\n         closure_return_type_hints: ClosureReturnTypeHints::Never,\n         adjustment_hints: AdjustmentHints::Never,\n-        adjustment_hints_postfix: false,\n+        adjustment_hints_mode: AdjustmentHintsMode::Prefix,\n         adjustment_hints_hide_outside_unsafe: false,\n         binding_mode_hints: false,\n         hide_named_constructor_hints: false,"}, {"sha": "47e854e4bd74386c0aef3cbfcaa272608305cd59", "filename": "crates/ide/src/inlay_hints/adjustment.rs", "status": "modified", "additions": 97, "deletions": 14, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/12b7f9f7bfb4d50ee29232d9d40430fa22db7157/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b7f9f7bfb4d50ee29232d9d40430fa22db7157/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs?ref=12b7f9f7bfb4d50ee29232d9d40430fa22db7157", "patch": "@@ -11,7 +11,7 @@ use syntax::{\n     ted,\n };\n \n-use crate::{AdjustmentHints, InlayHint, InlayHintsConfig, InlayKind};\n+use crate::{AdjustmentHints, AdjustmentHintsMode, InlayHint, InlayHintsConfig, InlayKind};\n \n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n@@ -40,8 +40,8 @@ pub(super) fn hints(\n     let desc_expr = descended.as_ref().unwrap_or(expr);\n     let adjustments = sema.expr_adjustments(desc_expr).filter(|it| !it.is_empty())?;\n \n-    let (needs_outer_parens, needs_inner_parens) =\n-        needs_parens_for_adjustment_hints(expr, config.adjustment_hints_postfix);\n+    let (postfix, needs_outer_parens, needs_inner_parens) =\n+        mode_and_needs_parens_for_adjustment_hints(expr, config.adjustment_hints_mode);\n \n     if needs_outer_parens {\n         acc.push(InlayHint {\n@@ -52,7 +52,7 @@ pub(super) fn hints(\n         });\n     }\n \n-    if config.adjustment_hints_postfix && needs_inner_parens {\n+    if postfix && needs_inner_parens {\n         acc.push(InlayHint {\n             range: expr.syntax().text_range(),\n             kind: InlayKind::OpeningParenthesis,\n@@ -68,7 +68,7 @@ pub(super) fn hints(\n     }\n \n     let (mut tmp0, mut tmp1);\n-    let iter: &mut dyn Iterator<Item = _> = if config.adjustment_hints_postfix {\n+    let iter: &mut dyn Iterator<Item = _> = if postfix {\n         tmp0 = adjustments.into_iter();\n         &mut tmp0\n     } else {\n@@ -112,20 +112,16 @@ pub(super) fn hints(\n         };\n         acc.push(InlayHint {\n             range: expr.syntax().text_range(),\n-            kind: if config.adjustment_hints_postfix {\n+            kind: if postfix {\n                 InlayKind::AdjustmentHintPostfix\n             } else {\n                 InlayKind::AdjustmentHint\n             },\n-            label: if config.adjustment_hints_postfix {\n-                format!(\".{}\", text.trim_end()).into()\n-            } else {\n-                text.into()\n-            },\n+            label: if postfix { format!(\".{}\", text.trim_end()).into() } else { text.into() },\n             tooltip: None,\n         });\n     }\n-    if !config.adjustment_hints_postfix && needs_inner_parens {\n+    if !postfix && needs_inner_parens {\n         acc.push(InlayHint {\n             range: expr.syntax().text_range(),\n             kind: InlayKind::OpeningParenthesis,\n@@ -150,6 +146,41 @@ pub(super) fn hints(\n     Some(())\n }\n \n+/// Returns whatever the hint should be postfix and if we need to add paretheses on the inside and/or outside of `expr`,\n+/// if we are going to add (`postfix`) adjustments hints to it.\n+fn mode_and_needs_parens_for_adjustment_hints(\n+    expr: &ast::Expr,\n+    mode: AdjustmentHintsMode,\n+) -> (bool, bool, bool) {\n+    use {std::cmp::Ordering::*, AdjustmentHintsMode::*};\n+\n+    match mode {\n+        Prefix | Postfix => {\n+            let postfix = matches!(mode, Postfix);\n+            let (inside, outside) = needs_parens_for_adjustment_hints(expr, postfix);\n+            (postfix, inside, outside)\n+        }\n+        PreferPrefix | PreferPostfix => {\n+            let prefer_postfix = matches!(mode, PreferPostfix);\n+\n+            let (pre_inside, pre_outside) = needs_parens_for_adjustment_hints(expr, false);\n+            let prefix = (false, pre_inside, pre_outside);\n+            let pre_count = pre_inside as u8 + pre_outside as u8;\n+\n+            let (post_inside, post_outside) = needs_parens_for_adjustment_hints(expr, true);\n+            let postfix = (true, post_inside, post_outside);\n+            let post_count = post_inside as u8 + post_outside as u8;\n+\n+            match pre_count.cmp(&post_count) {\n+                Less => prefix,\n+                Greater => postfix,\n+                Equal if prefer_postfix => postfix,\n+                Equal => prefix,\n+            }\n+        }\n+    }\n+}\n+\n /// Returns whatever we need to add paretheses on the inside and/or outside of `expr`,\n /// if we are going to add (`postfix`) adjustments hints to it.\n fn needs_parens_for_adjustment_hints(expr: &ast::Expr, postfix: bool) -> (bool, bool) {\n@@ -217,7 +248,7 @@ fn needs_parens_for_adjustment_hints(expr: &ast::Expr, postfix: bool) -> (bool,\n mod tests {\n     use crate::{\n         inlay_hints::tests::{check_with_config, DISABLED_CONFIG},\n-        AdjustmentHints, InlayHintsConfig,\n+        AdjustmentHints, AdjustmentHintsMode, InlayHintsConfig,\n     };\n \n     #[test]\n@@ -333,7 +364,7 @@ impl Struct {\n         check_with_config(\n             InlayHintsConfig {\n                 adjustment_hints: AdjustmentHints::Always,\n-                adjustment_hints_postfix: true,\n+                adjustment_hints_mode: AdjustmentHintsMode::Postfix,\n                 ..DISABLED_CONFIG\n             },\n             r#\"\n@@ -419,6 +450,58 @@ impl Struct {\n         );\n     }\n \n+    #[test]\n+    fn adjustment_hints_prefer_prefix() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                adjustment_hints: AdjustmentHints::Always,\n+                adjustment_hints_mode: AdjustmentHintsMode::PreferPrefix,\n+                ..DISABLED_CONFIG\n+            },\n+            r#\"\n+fn main() {\n+    let _: u32         = loop {};\n+                       //^^^^^^^<never-to-any>\n+\n+    Struct.by_ref();\n+  //^^^^^^.&\n+\n+    let (): () = return ();\n+               //^^^^^^^^^<never-to-any>\n+\n+    struct Struct;\n+    impl Struct { fn by_ref(&self) {} }\n+}\n+            \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn adjustment_hints_prefer_postfix() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                adjustment_hints: AdjustmentHints::Always,\n+                adjustment_hints_mode: AdjustmentHintsMode::PreferPostfix,\n+                ..DISABLED_CONFIG\n+            },\n+            r#\"\n+fn main() {\n+    let _: u32         = loop {};\n+                       //^^^^^^^.<never-to-any>\n+\n+    Struct.by_ref();\n+  //^^^^^^.&\n+\n+    let (): () = return ();\n+               //^^^^^^^^^<never-to-any>\n+\n+    struct Struct;\n+    impl Struct { fn by_ref(&self) {} }\n+}\n+            \"#,\n+        )\n+    }\n+\n     #[test]\n     fn never_to_never_is_never_shown() {\n         check_with_config("}, {"sha": "239456cb281676809f5105aeef75bd844f9fb89f", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12b7f9f7bfb4d50ee29232d9d40430fa22db7157/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b7f9f7bfb4d50ee29232d9d40430fa22db7157/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=12b7f9f7bfb4d50ee29232d9d40430fa22db7157", "patch": "@@ -81,8 +81,8 @@ pub use crate::{\n     highlight_related::{HighlightRelatedConfig, HighlightedRange},\n     hover::{HoverAction, HoverConfig, HoverDocFormat, HoverGotoTypeData, HoverResult},\n     inlay_hints::{\n-        AdjustmentHints, ClosureReturnTypeHints, DiscriminantHints, InlayHint, InlayHintLabel,\n-        InlayHintsConfig, InlayKind, InlayTooltip, LifetimeElisionHints,\n+        AdjustmentHints, AdjustmentHintsMode, ClosureReturnTypeHints, DiscriminantHints, InlayHint,\n+        InlayHintLabel, InlayHintsConfig, InlayKind, InlayTooltip, LifetimeElisionHints,\n     },\n     join_lines::JoinLinesConfig,\n     markup::Markup,"}, {"sha": "a6b30ba1396217c788f558cbc2ff9d424b6d8d6e", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12b7f9f7bfb4d50ee29232d9d40430fa22db7157/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b7f9f7bfb4d50ee29232d9d40430fa22db7157/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=12b7f9f7bfb4d50ee29232d9d40430fa22db7157", "patch": "@@ -13,6 +13,7 @@ use syntax::{AstNode, SyntaxKind::*, SyntaxToken, TextRange, T};\n \n use crate::{\n     hover::hover_for_definition,\n+    inlay_hints::AdjustmentHintsMode,\n     moniker::{def_to_moniker, MonikerResult},\n     parent_module::crates_for,\n     Analysis, Fold, HoverConfig, HoverDocFormat, HoverResult, InlayHint, InlayHintsConfig,\n@@ -115,7 +116,7 @@ impl StaticIndex<'_> {\n                     closure_return_type_hints: crate::ClosureReturnTypeHints::WithBlock,\n                     lifetime_elision_hints: crate::LifetimeElisionHints::Never,\n                     adjustment_hints: crate::AdjustmentHints::Never,\n-                    adjustment_hints_postfix: false,\n+                    adjustment_hints_mode: AdjustmentHintsMode::Prefix,\n                     adjustment_hints_hide_outside_unsafe: false,\n                     hide_named_constructor_hints: false,\n                     hide_closure_initialization_hints: false,"}, {"sha": "27a86db382d4637804d2694486e51f204c23726c", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/12b7f9f7bfb4d50ee29232d9d40430fa22db7157/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b7f9f7bfb4d50ee29232d9d40430fa22db7157/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=12b7f9f7bfb4d50ee29232d9d40430fa22db7157", "patch": "@@ -333,8 +333,8 @@ config_data! {\n         inlayHints_expressionAdjustmentHints_enable: AdjustmentHintsDef = \"\\\"never\\\"\",\n         /// Whether to hide inlay hints for type adjustments outside of `unsafe` blocks.\n         inlayHints_expressionAdjustmentHints_hideOutsideUnsafe: bool = \"false\",\n-        /// Whether to show inlay hints for type adjustments as postfix ops (`.*` instead of `*`, etc).\n-        inlayHints_expressionAdjustmentHints_postfix: bool = \"false\",\n+        /// Whether to show inlay hints as postfix ops (`.*` instead of `*`, etc).\n+        inlayHints_expressionAdjustmentHints_mode: AdjustmentHintsModeDef = \"\\\"prefix\\\"\",\n         /// Whether to show inlay type hints for elided lifetimes in function signatures.\n         inlayHints_lifetimeElisionHints_enable: LifetimeElisionDef = \"\\\"never\\\"\",\n         /// Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n@@ -1254,7 +1254,12 @@ impl Config {\n                 },\n                 AdjustmentHintsDef::Reborrow => ide::AdjustmentHints::ReborrowOnly,\n             },\n-            adjustment_hints_postfix: self.data.inlayHints_expressionAdjustmentHints_postfix,\n+            adjustment_hints_mode: match self.data.inlayHints_expressionAdjustmentHints_mode {\n+                AdjustmentHintsModeDef::Prefix => ide::AdjustmentHintsMode::Prefix,\n+                AdjustmentHintsModeDef::Postfix => ide::AdjustmentHintsMode::Postfix,\n+                AdjustmentHintsModeDef::PreferPrefix => ide::AdjustmentHintsMode::PreferPrefix,\n+                AdjustmentHintsModeDef::PreferPostfix => ide::AdjustmentHintsMode::PreferPostfix,\n+            },\n             adjustment_hints_hide_outside_unsafe: self\n                 .data\n                 .inlayHints_expressionAdjustmentHints_hideOutsideUnsafe,\n@@ -1771,6 +1776,15 @@ enum DiscriminantHintsDef {\n     Fieldless,\n }\n \n+#[derive(Deserialize, Debug, Clone)]\n+#[serde(rename_all = \"snake_case\")]\n+enum AdjustmentHintsModeDef {\n+    Prefix,\n+    Postfix,\n+    PreferPrefix,\n+    PreferPostfix,\n+}\n+\n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n enum FilesWatcherDef {\n@@ -2104,6 +2118,21 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n                 \"Only show discriminant hints on fieldless enum variants.\"\n             ]\n         },\n+        \"AdjustmentHintsModeDef\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\n+                \"prefix\",\n+                \"postfix\",\n+                \"prefer_prefix\",\n+                \"prefer_postfix\",\n+            ],\n+            \"enumDescriptions\": [\n+                \"Always show adjustment hints as prefix (`*expr`).\",\n+                \"Always show adjustment hints as postfix (`expr.*`).\",\n+                \"Show prefix or postfix depending on which uses less parenthesis, prefering prefix.\",\n+                \"Show prefix or postfix depending on which uses less parenthesis, prefering postfix.\",\n+            ]\n+        },\n         \"CargoFeaturesDef\" => set! {\n             \"anyOf\": [\n                 {"}, {"sha": "0aaf07ebf38a889fff929cdcd72139457852c5e3", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12b7f9f7bfb4d50ee29232d9d40430fa22db7157/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/12b7f9f7bfb4d50ee29232d9d40430fa22db7157/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=12b7f9f7bfb4d50ee29232d9d40430fa22db7157", "patch": "@@ -469,10 +469,10 @@ Whether to show inlay hints for type adjustments.\n --\n Whether to hide inlay hints for type adjustments outside of `unsafe` blocks.\n --\n-[[rust-analyzer.inlayHints.expressionAdjustmentHints.postfix]]rust-analyzer.inlayHints.expressionAdjustmentHints.postfix (default: `false`)::\n+[[rust-analyzer.inlayHints.expressionAdjustmentHints.mode]]rust-analyzer.inlayHints.expressionAdjustmentHints.mode (default: `\"prefix\"`)::\n +\n --\n-Whether to show inlay hints for type adjustments as postfix ops (`.*` instead of `*`, etc).\n+Whether to show inlay hints as postfix ops (`.*` instead of `*`, etc).\n --\n [[rust-analyzer.inlayHints.lifetimeElisionHints.enable]]rust-analyzer.inlayHints.lifetimeElisionHints.enable (default: `\"never\"`)::\n +"}, {"sha": "5ffce2f5536520e3180d87ede9b6a4116f8ac7d3", "filename": "editors/code/package.json", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12b7f9f7bfb4d50ee29232d9d40430fa22db7157/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/12b7f9f7bfb4d50ee29232d9d40430fa22db7157/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=12b7f9f7bfb4d50ee29232d9d40430fa22db7157", "patch": "@@ -1000,10 +1000,22 @@\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.inlayHints.expressionAdjustmentHints.postfix\": {\n-                    \"markdownDescription\": \"Whether to show inlay hints for type adjustments as postfix ops (`.*` instead of `*`, etc).\",\n-                    \"default\": false,\n-                    \"type\": \"boolean\"\n+                \"rust-analyzer.inlayHints.expressionAdjustmentHints.mode\": {\n+                    \"markdownDescription\": \"Whether to show inlay hints as postfix ops (`.*` instead of `*`, etc).\",\n+                    \"default\": \"prefix\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"prefix\",\n+                        \"postfix\",\n+                        \"prefer_prefix\",\n+                        \"prefer_postfix\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Always show adjustment hints as prefix (`*expr`).\",\n+                        \"Always show adjustment hints as postfix (`expr.*`).\",\n+                        \"Show prefix or postfix depending on which uses less parenthesis, prefering prefix.\",\n+                        \"Show prefix or postfix depending on which uses less parenthesis, prefering postfix.\"\n+                    ]\n                 },\n                 \"rust-analyzer.inlayHints.lifetimeElisionHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for elided lifetimes in function signatures.\","}]}