{"sha": "c15335c8b02dbc0ccc04f04c56d6471120db1bd2", "node_id": "C_kwDOAAsO6NoAKGMxNTMzNWM4YjAyZGJjMGNjYzA0ZjA0YzU2ZDY0NzExMjBkYjFiZDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-14T17:48:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-14T17:48:49Z"}, "message": "Auto merge of #14307 - davidbarsky:davidbarsky/add-cargo-style-project-discovery-for-buck-and-bazel-sickos, r=Veykril\n\nAdd Cargo-style project discovery for Buck and Bazel Users\n\nThis feature requires the user to add a command that generates a `rust-project.json` from a set of files. Project discovery can be invoked in two ways:\n\n1. At extension activation time, which includes the generated `rust-project.json` as part of the linkedProjects argument in `InitializeParams`.\n2. Through a new command titled \"rust-analyzer: Add current file to workspace\", which makes use of a new, rust-analyzer-specific LSP request that adds the workspace without erasing any existing workspaces. Note that there is no mechanism to _remove_ workspaces other than \"quit the rust-analyzer server\".\n\nFew notes:\n-  I think that the command-running functionality _could_ merit being placed into its own extension (and expose it via extension contribution points) to provide build-system idiomatic progress reporting and status handling, but I haven't (yet) made an extension that does this nor does Buck expose this sort of functionality.\n-  This approach would _just work_ for Bazel. I'll try and get the tool that's responsible for Buck integration open-sourced soon.\n- On the testing side of things, I've used this in around my employer's Buck-powered monorepo and it's a nice experience. That being said, I can't think of an open-source repository where this can be tested in public, so you might need to trust me on this one.\n\nI'd love to get feedback on:\n- Naming of LSP extensions/new commands. I'm not too pleased with how \"rust-analyzer: Add current file to workspace\" is named, in that it's creating a _new_ workspace. I think that this command being added should be gated on `rust-analyzer.discoverProjectCommand` on being set, so I can add this in sequent commits.\n- My Typescript. It's not particularly good.\n- Suggestions on handling folders with _both_ Cargo and non-Cargo build systems and if I make activation a bit better.\n\n(I previously tried to add this functionality entirely within rust-analyzer-the-LSP server itself, but matklad was right\u2014an extension side approach is much, much easier.)", "tree": {"sha": "ca0ee8481be7701dc4878b1e7da100ab53a48de8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca0ee8481be7701dc4878b1e7da100ab53a48de8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c15335c8b02dbc0ccc04f04c56d6471120db1bd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c15335c8b02dbc0ccc04f04c56d6471120db1bd2", "html_url": "https://github.com/rust-lang/rust/commit/c15335c8b02dbc0ccc04f04c56d6471120db1bd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad91622d115a9501277c6902ecbdfd70d882bfef", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad91622d115a9501277c6902ecbdfd70d882bfef", "html_url": "https://github.com/rust-lang/rust/commit/ad91622d115a9501277c6902ecbdfd70d882bfef"}, {"sha": "6e7bc07cdf225aea811f793c2f712f25846b8d20", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e7bc07cdf225aea811f793c2f712f25846b8d20", "html_url": "https://github.com/rust-lang/rust/commit/6e7bc07cdf225aea811f793c2f712f25846b8d20"}], "stats": {"total": 269, "additions": 257, "deletions": 12}, "files": [{"sha": "05ad7ab4c4af64e1e8e501fd062324762c26878e", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=c15335c8b02dbc0ccc04f04c56d6471120db1bd2", "patch": "@@ -272,7 +272,6 @@ config_data! {\n         /// The warnings will be indicated by a blue squiggly underline in code\n         /// and a blue icon in the `Problems Panel`.\n         diagnostics_warningsAsInfo: Vec<String> = \"[]\",\n-\n         /// These directories will be ignored by rust-analyzer. They are\n         /// relative to the workspace root, and globs are not supported. You may\n         /// also need to add the folders to Code's `files.watcherExclude`.\n@@ -895,6 +894,15 @@ impl Config {\n         }\n     }\n \n+    pub fn add_linked_projects(&mut self, linked_projects: Vec<ProjectJsonData>) {\n+        let mut linked_projects = linked_projects\n+            .into_iter()\n+            .map(ManifestOrProjectJson::ProjectJson)\n+            .collect::<Vec<ManifestOrProjectJson>>();\n+\n+        self.data.linkedProjects.append(&mut linked_projects);\n+    }\n+\n     pub fn did_save_text_document_dynamic_registration(&self) -> bool {\n         let caps = try_or_def!(self.caps.text_document.as_ref()?.synchronization.clone()?);\n         caps.did_save == Some(true) && caps.dynamic_registration == Some(true)"}, {"sha": "2fca2ab851d416ec75998236fa45ef323a0aa286", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=c15335c8b02dbc0ccc04f04c56d6471120db1bd2", "patch": "@@ -46,6 +46,7 @@ use crate::{\n pub(crate) fn handle_workspace_reload(state: &mut GlobalState, _: ()) -> Result<()> {\n     state.proc_macro_clients.clear();\n     state.proc_macro_changed = false;\n+\n     state.fetch_workspaces_queue.request_op(\"reload workspace request\".to_string());\n     state.fetch_build_data_queue.request_op(\"reload workspace request\".to_string());\n     Ok(())"}, {"sha": "c5eb08748bfab5176592a9f4c4bfccf1c60ddbc6", "filename": "editors/code/package.json", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=c15335c8b02dbc0ccc04f04c56d6471120db1bd2", "patch": "@@ -199,6 +199,11 @@\n                 \"title\": \"Reload workspace\",\n                 \"category\": \"rust-analyzer\"\n             },\n+            {\n+                \"command\": \"rust-analyzer.addProject\",\n+                \"title\": \"Add current file's crate to workspace\",\n+                \"category\": \"rust-analyzer\"\n+            },\n             {\n                 \"command\": \"rust-analyzer.reload\",\n                 \"title\": \"Restart server\",\n@@ -428,6 +433,17 @@\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.discoverProjectCommand\": {\n+                    \"markdownDescription\": \"Sets the command that rust-analyzer uses to generate `rust-project.json` files. This command should only be used\\n if a build system like Buck or Bazel is also in use. The command must accept files as arguments and return \\n a rust-project.json over stdout.\",\n+                    \"default\": null,\n+                    \"type\": [\n+                        \"null\",\n+                        \"array\"\n+                    ],\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    }\n+                },\n                 \"$generated-start\": {},\n                 \"rust-analyzer.assist.emitMustUse\": {\n                     \"markdownDescription\": \"Whether to insert #[must_use] when generating `as_` methods\\nfor enum variants.\","}, {"sha": "565cb9c6432f426aca5c7319e227001b141bda52", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=c15335c8b02dbc0ccc04f04c56d6471120db1bd2", "patch": "@@ -6,7 +6,7 @@ import * as Is from \"vscode-languageclient/lib/common/utils/is\";\n import { assert } from \"./util\";\n import * as diagnostics from \"./diagnostics\";\n import { WorkspaceEdit } from \"vscode\";\n-import { Config, substituteVSCodeVariables } from \"./config\";\n+import { Config, prepareVSCodeConfig } from \"./config\";\n import { randomUUID } from \"crypto\";\n \n export interface Env {\n@@ -95,7 +95,16 @@ export async function createClient(\n                     const resp = await next(params, token);\n                     if (resp && Array.isArray(resp)) {\n                         return resp.map((val) => {\n-                            return substituteVSCodeVariables(val);\n+                            return prepareVSCodeConfig(val, (key, cfg) => {\n+                                // we only want to set discovered workspaces on the right key\n+                                // and if a workspace has been discovered.\n+                                if (\n+                                    key === \"linkedProjects\" &&\n+                                    config.discoveredWorkspaces.length > 0\n+                                ) {\n+                                    cfg[key] = config.discoveredWorkspaces;\n+                                }\n+                            });\n                         });\n                     } else {\n                         return resp;"}, {"sha": "8a953577e99d368d8ead2bf5f03714a3447d6f93", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=c15335c8b02dbc0ccc04f04c56d6471120db1bd2", "patch": "@@ -3,7 +3,7 @@ import * as lc from \"vscode-languageclient\";\n import * as ra from \"./lsp_ext\";\n import * as path from \"path\";\n \n-import { Ctx, Cmd, CtxInit } from \"./ctx\";\n+import { Ctx, Cmd, CtxInit, discoverWorkspace } from \"./ctx\";\n import { applySnippetWorkspaceEdit, applySnippetTextEdits } from \"./snippets\";\n import { spawnSync } from \"child_process\";\n import { RunnableQuickPick, selectRunnable, createTask, createArgs } from \"./run\";\n@@ -749,6 +749,33 @@ export function reloadWorkspace(ctx: CtxInit): Cmd {\n     return async () => ctx.client.sendRequest(ra.reloadWorkspace);\n }\n \n+export function addProject(ctx: CtxInit): Cmd {\n+    return async () => {\n+        const discoverProjectCommand = ctx.config.discoverProjectCommand;\n+        if (!discoverProjectCommand) {\n+            return;\n+        }\n+\n+        const workspaces: JsonProject[] = await Promise.all(\n+            vscode.workspace.workspaceFolders!.map(async (folder): Promise<JsonProject> => {\n+                const rustDocuments = vscode.workspace.textDocuments.filter(isRustDocument);\n+                return discoverWorkspace(rustDocuments, discoverProjectCommand, {\n+                    cwd: folder.uri.fsPath,\n+                });\n+            })\n+        );\n+\n+        ctx.addToDiscoveredWorkspaces(workspaces);\n+\n+        // this is a workaround to avoid needing writing the `rust-project.json` into\n+        // a workspace-level VS Code-specific settings folder. We'd like to keep the\n+        // `rust-project.json` entirely in-memory.\n+        await ctx.client?.sendNotification(lc.DidChangeConfigurationNotification.type, {\n+            settings: \"\",\n+        });\n+    };\n+}\n+\n async function showReferencesImpl(\n     client: LanguageClient | undefined,\n     uri: string,"}, {"sha": "da7c74c28bae901a8a3dcb3cb0924da57a53ec5b", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=c15335c8b02dbc0ccc04f04c56d6471120db1bd2", "patch": "@@ -34,6 +34,7 @@ export class Config {\n \n     constructor(ctx: vscode.ExtensionContext) {\n         this.globalStorageUri = ctx.globalStorageUri;\n+        this.discoveredWorkspaces = [];\n         vscode.workspace.onDidChangeConfiguration(\n             this.onDidChangeConfiguration,\n             this,\n@@ -55,6 +56,8 @@ export class Config {\n         log.info(\"Using configuration\", Object.fromEntries(cfg));\n     }\n \n+    public discoveredWorkspaces: JsonProject[];\n+\n     private async onDidChangeConfiguration(event: vscode.ConfigurationChangeEvent) {\n         this.refreshLogging();\n \n@@ -191,7 +194,7 @@ export class Config {\n      * So this getter handles this quirk by not requiring the caller to use postfix `!`\n      */\n     private get<T>(path: string): T | undefined {\n-        return substituteVSCodeVariables(this.cfg.get<T>(path));\n+        return prepareVSCodeConfig(this.cfg.get<T>(path));\n     }\n \n     get serverPath() {\n@@ -214,6 +217,10 @@ export class Config {\n         return this.get<boolean>(\"trace.extension\");\n     }\n \n+    get discoverProjectCommand() {\n+        return this.get<string[] | undefined>(\"discoverProjectCommand\");\n+    }\n+\n     get cargoRunner() {\n         return this.get<string | undefined>(\"cargoRunner\");\n     }\n@@ -280,18 +287,32 @@ export class Config {\n     }\n }\n \n-export function substituteVSCodeVariables<T>(resp: T): T {\n+// the optional `cb?` parameter is meant to be used to add additional\n+// key/value pairs to the VS Code configuration. This needed for, e.g.,\n+// including a `rust-project.json` into the `linkedProjects` key as part\n+// of the configuration/InitializationParams _without_ causing VS Code\n+// configuration to be written out to workspace-level settings. This is\n+// undesirable behavior because rust-project.json files can be tens of\n+// thousands of lines of JSON, most of which is not meant for humans\n+// to interact with.\n+export function prepareVSCodeConfig<T>(\n+    resp: T,\n+    cb?: (key: Extract<keyof T, string>, res: { [key: string]: any }) => void\n+): T {\n     if (Is.string(resp)) {\n         return substituteVSCodeVariableInString(resp) as T;\n     } else if (resp && Is.array<any>(resp)) {\n         return resp.map((val) => {\n-            return substituteVSCodeVariables(val);\n+            return prepareVSCodeConfig(val);\n         }) as T;\n     } else if (resp && typeof resp === \"object\") {\n         const res: { [key: string]: any } = {};\n         for (const key in resp) {\n             const val = resp[key];\n-            res[key] = substituteVSCodeVariables(val);\n+            res[key] = prepareVSCodeConfig(val);\n+            if (cb) {\n+                cb(key, res);\n+            }\n         }\n         return res as T;\n     }"}, {"sha": "c2dca733df8f53aeb2d457cfaf15b9973b9990ab", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 57, "deletions": 4, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=c15335c8b02dbc0ccc04f04c56d6471120db1bd2", "patch": "@@ -2,12 +2,20 @@ import * as vscode from \"vscode\";\n import * as lc from \"vscode-languageclient/node\";\n import * as ra from \"./lsp_ext\";\n \n-import { Config, substituteVSCodeVariables } from \"./config\";\n+import { Config, prepareVSCodeConfig } from \"./config\";\n import { createClient } from \"./client\";\n-import { isRustDocument, isRustEditor, LazyOutputChannel, log, RustEditor } from \"./util\";\n+import {\n+    executeDiscoverProject,\n+    isRustDocument,\n+    isRustEditor,\n+    LazyOutputChannel,\n+    log,\n+    RustEditor,\n+} from \"./util\";\n import { ServerStatusParams } from \"./lsp_ext\";\n import { PersistentState } from \"./persistent_state\";\n import { bootstrap } from \"./bootstrap\";\n+import { ExecOptions } from \"child_process\";\n \n // We only support local folders, not eg. Live Share (`vlsl:` scheme), so don't activate if\n // only those are in use. We use \"Empty\" to represent these scenarios\n@@ -41,6 +49,17 @@ export function fetchWorkspace(): Workspace {\n         : { kind: \"Workspace Folder\" };\n }\n \n+export async function discoverWorkspace(\n+    files: readonly vscode.TextDocument[],\n+    command: string[],\n+    options: ExecOptions\n+): Promise<JsonProject> {\n+    const paths = files.map((f) => `\"${f.uri.fsPath}\"`).join(\" \");\n+    const joinedCommand = command.join(\" \");\n+    const data = await executeDiscoverProject(`${joinedCommand} ${paths}`, options);\n+    return JSON.parse(data) as JsonProject;\n+}\n+\n export type CommandFactory = {\n     enabled: (ctx: CtxInit) => Cmd;\n     disabled?: (ctx: Ctx) => Cmd;\n@@ -52,7 +71,7 @@ export type CtxInit = Ctx & {\n \n export class Ctx {\n     readonly statusBar: vscode.StatusBarItem;\n-    readonly config: Config;\n+    config: Config;\n     readonly workspace: Workspace;\n \n     private _client: lc.LanguageClient | undefined;\n@@ -169,7 +188,30 @@ export class Ctx {\n                 };\n             }\n \n-            const initializationOptions = substituteVSCodeVariables(rawInitializationOptions);\n+            const discoverProjectCommand = this.config.discoverProjectCommand;\n+            if (discoverProjectCommand) {\n+                const workspaces: JsonProject[] = await Promise.all(\n+                    vscode.workspace.workspaceFolders!.map(async (folder): Promise<JsonProject> => {\n+                        const rustDocuments = vscode.workspace.textDocuments.filter(isRustDocument);\n+                        return discoverWorkspace(rustDocuments, discoverProjectCommand, {\n+                            cwd: folder.uri.fsPath,\n+                        });\n+                    })\n+                );\n+\n+                this.addToDiscoveredWorkspaces(workspaces);\n+            }\n+\n+            const initializationOptions = prepareVSCodeConfig(\n+                rawInitializationOptions,\n+                (key, obj) => {\n+                    // we only want to set discovered workspaces on the right key\n+                    // and if a workspace has been discovered.\n+                    if (key === \"linkedProjects\" && this.config.discoveredWorkspaces.length > 0) {\n+                        obj[\"linkedProjects\"] = this.config.discoveredWorkspaces;\n+                    }\n+                }\n+            );\n \n             this._client = await createClient(\n                 this.traceOutputChannel,\n@@ -251,6 +293,17 @@ export class Ctx {\n         return this._serverPath;\n     }\n \n+    addToDiscoveredWorkspaces(workspaces: JsonProject[]) {\n+        for (const workspace of workspaces) {\n+            const index = this.config.discoveredWorkspaces.indexOf(workspace);\n+            if (~index) {\n+                this.config.discoveredWorkspaces[index] = workspace;\n+            } else {\n+                this.config.discoveredWorkspaces.push(workspace);\n+            }\n+        }\n+    }\n+\n     private updateCommands(forceDisable?: \"disable\") {\n         this.commandDisposables.forEach((disposable) => disposable.dispose());\n         this.commandDisposables = [];"}, {"sha": "872d7199b838a9926ee529a329f650d6938ba6f0", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=c15335c8b02dbc0ccc04f04c56d6471120db1bd2", "patch": "@@ -43,6 +43,7 @@ export const relatedTests = new lc.RequestType<lc.TextDocumentPositionParams, Te\n     \"rust-analyzer/relatedTests\"\n );\n export const reloadWorkspace = new lc.RequestType0<null, void>(\"rust-analyzer/reloadWorkspace\");\n+\n export const runFlycheck = new lc.NotificationType<{\n     textDocument: lc.TextDocumentIdentifier | null;\n }>(\"rust-analyzer/runFlycheck\");"}, {"sha": "d5de00561b1235f4e8c9071a15e33d53a763a017", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=c15335c8b02dbc0ccc04f04c56d6471120db1bd2", "patch": "@@ -153,6 +153,7 @@ function createCommands(): Record<string, CommandFactory> {\n         memoryUsage: { enabled: commands.memoryUsage },\n         shuffleCrateGraph: { enabled: commands.shuffleCrateGraph },\n         reloadWorkspace: { enabled: commands.reloadWorkspace },\n+        addProject: { enabled: commands.addProject },\n         matchingBrace: { enabled: commands.matchingBrace },\n         joinLines: { enabled: commands.joinLines },\n         parentModule: { enabled: commands.parentModule },"}, {"sha": "187a1a96c10c5c39874b0be3bc6bdf74b48d2d8d", "filename": "editors/code/src/rust_project.ts", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/editors%2Fcode%2Fsrc%2Frust_project.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/editors%2Fcode%2Fsrc%2Frust_project.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frust_project.ts?ref=c15335c8b02dbc0ccc04f04c56d6471120db1bd2", "patch": "@@ -0,0 +1,91 @@\n+interface JsonProject {\n+    /// Path to the directory with *source code* of\n+    /// sysroot crates.\n+    ///\n+    /// It should point to the directory where std,\n+    /// core, and friends can be found:\n+    ///\n+    /// https://github.com/rust-lang/rust/tree/master/library.\n+    ///\n+    /// If provided, rust-analyzer automatically adds\n+    /// dependencies on sysroot crates. Conversely,\n+    /// if you omit this path, you can specify sysroot\n+    /// dependencies yourself and, for example, have\n+    /// several different \"sysroots\" in one graph of\n+    /// crates.\n+    sysroot_src?: string;\n+    /// The set of crates comprising the current\n+    /// project. Must include all transitive\n+    /// dependencies as well as sysroot crate (libstd,\n+    /// libcore and such).\n+    crates: Crate[];\n+}\n+\n+interface Crate {\n+    /// Optional crate name used for display purposes,\n+    /// without affecting semantics. See the `deps`\n+    /// key for semantically-significant crate names.\n+    display_name?: string;\n+    /// Path to the root module of the crate.\n+    root_module: string;\n+    /// Edition of the crate.\n+    edition: \"2015\" | \"2018\" | \"2021\";\n+    /// Dependencies\n+    deps: Dep[];\n+    /// Should this crate be treated as a member of\n+    /// current \"workspace\".\n+    ///\n+    /// By default, inferred from the `root_module`\n+    /// (members are the crates which reside inside\n+    /// the directory opened in the editor).\n+    ///\n+    /// Set this to `false` for things like standard\n+    /// library and 3rd party crates to enable\n+    /// performance optimizations (rust-analyzer\n+    /// assumes that non-member crates don't change).\n+    is_workspace_member?: boolean;\n+    /// Optionally specify the (super)set of `.rs`\n+    /// files comprising this crate.\n+    ///\n+    /// By default, rust-analyzer assumes that only\n+    /// files under `root_module.parent` can belong\n+    /// to a crate. `include_dirs` are included\n+    /// recursively, unless a subdirectory is in\n+    /// `exclude_dirs`.\n+    ///\n+    /// Different crates can share the same `source`.\n+    ///\n+    /// If two crates share an `.rs` file in common,\n+    /// they *must* have the same `source`.\n+    /// rust-analyzer assumes that files from one\n+    /// source can't refer to files in another source.\n+    source?: {\n+        include_dirs: string[];\n+        exclude_dirs: string[];\n+    };\n+    /// The set of cfgs activated for a given crate, like\n+    /// `[\"unix\", \"feature=\\\"foo\\\"\", \"feature=\\\"bar\\\"\"]`.\n+    cfg: string[];\n+    /// Target triple for this Crate.\n+    ///\n+    /// Used when running `rustc --print cfg`\n+    /// to get target-specific cfgs.\n+    target?: string;\n+    /// Environment variables, used for\n+    /// the `env!` macro\n+    env: { [key: string]: string };\n+\n+    /// Whether the crate is a proc-macro crate.\n+    is_proc_macro: boolean;\n+    /// For proc-macro crates, path to compiled\n+    /// proc-macro (.so file).\n+    proc_macro_dylib_path?: string;\n+}\n+\n+interface Dep {\n+    /// Index of a crate in the `crates` array.\n+    crate: number;\n+    /// Name as should appear in the (implicit)\n+    /// `extern crate name` declaration.\n+    name: string;\n+}"}, {"sha": "922fbcbcf35a5037ca624c9c72f34cf59de238e0", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c15335c8b02dbc0ccc04f04c56d6471120db1bd2/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=c15335c8b02dbc0ccc04f04c56d6471120db1bd2", "patch": "@@ -150,9 +150,11 @@ export function memoizeAsync<Ret, TThis, Param extends string>(\n \n /** Awaitable wrapper around `child_process.exec` */\n export function execute(command: string, options: ExecOptions): Promise<string> {\n+    log.info(`running command: ${command}`);\n     return new Promise((resolve, reject) => {\n         exec(command, options, (err, stdout, stderr) => {\n             if (err) {\n+                log.error(err);\n                 reject(err);\n                 return;\n             }\n@@ -167,6 +169,21 @@ export function execute(command: string, options: ExecOptions): Promise<string>\n     });\n }\n \n+export function executeDiscoverProject(command: string, options: ExecOptions): Promise<string> {\n+    log.info(`running command: ${command}`);\n+    return new Promise((resolve, reject) => {\n+        exec(command, options, (err, stdout, _) => {\n+            if (err) {\n+                log.error(err);\n+                reject(err);\n+                return;\n+            }\n+\n+            resolve(stdout.trimEnd());\n+        });\n+    });\n+}\n+\n export class LazyOutputChannel implements vscode.OutputChannel {\n     constructor(name: string) {\n         this.name = name;"}]}