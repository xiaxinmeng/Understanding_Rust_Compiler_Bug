{"sha": "68122edac38c20ee4b643e4e1cb3a943cb8208da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MTIyZWRhYzM4YzIwZWU0YjY0M2U0ZTFjYjNhOTQzY2I4MjA4ZGE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-17T23:38:47Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-17T23:38:47Z"}, "message": "Revert \"rustc: Fix a bunch of memory management bugs relating to generic interior vectors\"\n\nThis reverts commit 2b5e40311ddb6afcacf772e54a96a5204223dcc5.", "tree": {"sha": "9b1f779db59ab4732350afc4058c5ce538e2dba8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b1f779db59ab4732350afc4058c5ce538e2dba8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68122edac38c20ee4b643e4e1cb3a943cb8208da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68122edac38c20ee4b643e4e1cb3a943cb8208da", "html_url": "https://github.com/rust-lang/rust/commit/68122edac38c20ee4b643e4e1cb3a943cb8208da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68122edac38c20ee4b643e4e1cb3a943cb8208da/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b5e40311ddb6afcacf772e54a96a5204223dcc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b5e40311ddb6afcacf772e54a96a5204223dcc5", "html_url": "https://github.com/rust-lang/rust/commit/2b5e40311ddb6afcacf772e54a96a5204223dcc5"}], "stats": {"total": 93, "additions": 6, "deletions": 87}, "files": [{"sha": "57880dd281560b9477d165daae3e074332990733", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 6, "deletions": 87, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/68122edac38c20ee4b643e4e1cb3a943cb8208da/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68122edac38c20ee4b643e4e1cb3a943cb8208da/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=68122edac38c20ee4b643e4e1cb3a943cb8208da", "patch": "@@ -1327,8 +1327,7 @@ fn dynamic_size_of(&@block_ctxt cx, ty::t t) -> result {\n             auto bcx = rslt.bcx;\n             auto llunitszptr = rslt.val;\n             auto llunitsz = bcx.build.Load(llunitszptr);\n-            auto llsz = bcx.build.Add(llsize_of(T_opaque_ivec()),\n-                bcx.build.Mul(llunitsz, C_uint(abi::ivec_default_length)));\n+            auto llsz = bcx.build.Add(llsize_of(T_opaque_ivec()), llunitsz);\n             ret res(bcx, llsz);\n         }\n     }\n@@ -2970,21 +2969,9 @@ fn memmove_ty(&@block_ctxt cx, ValueRef dst, ValueRef src, &ty::t t) ->\n     } else { ret res(cx, cx.build.Store(cx.build.Load(src), dst)); }\n }\n \n-// Duplicates the heap-owned memory owned by a value of the given type.\n-fn duplicate_heap_parts(&@block_ctxt cx, ValueRef vptr, ty::t typ) -> result {\n-    alt (ty::struct(cx.fcx.lcx.ccx.tcx, typ)) {\n-        case (ty::ty_ivec(?tm)) {\n-            ret ivec::duplicate_heap_part(cx, vptr, tm.ty);\n-        }\n-        case (ty::ty_str) {\n-            ret ivec::duplicate_heap_part(cx, vptr,\n-                ty::mk_mach(cx.fcx.lcx.ccx.tcx, common::ty_u8));\n-        }\n-    }\n-}\n-\n tag copy_action { INIT; DROP_EXISTING; }\n \n+// FIXME: This should copy the contents of the heap part for ivecs.\n fn copy_val(&@block_ctxt cx, copy_action action, ValueRef dst, ValueRef src,\n             &ty::t t) -> result {\n \n@@ -3004,11 +2991,7 @@ fn copy_val(&@block_ctxt cx, copy_action action, ValueRef dst, ValueRef src,\n                    ty::type_has_dynamic_size(cx.fcx.lcx.ccx.tcx, t)) {\n         auto r = take_ty(cx, src, t);\n         if (action == DROP_EXISTING) { r = drop_ty(r.bcx, dst, t); }\n-        r = memmove_ty(r.bcx, dst, src, t);\n-        if (ty::type_owns_heap_mem(cx.fcx.lcx.ccx.tcx, t)) {\n-            r = duplicate_heap_parts(cx, dst, t);\n-        }\n-        ret r;\n+        ret memmove_ty(r.bcx, dst, src, t);\n     }\n     cx.fcx.lcx.ccx.sess.bug(\"unexpected type in trans::copy_val: \" +\n                                 ty_to_str(cx.fcx.lcx.ccx.tcx, t));\n@@ -3518,8 +3501,8 @@ mod ivec {\n                                          copy_loop_body_cx.llbb,\n                                          next_cx.llbb);\n         auto copy_src_ptr = copy_loop_body_cx.build.Load(src_ptr);\n-        rslt = copy_val(copy_loop_body_cx, INIT, copy_dest_ptr, copy_src_ptr,\n-                        unit_ty);\n+        rslt =\n+            copy_val(copy_loop_body_cx, INIT, copy_dest_ptr, copy_src_ptr, t);\n         auto post_copy_cx = rslt.bcx;\n         // Increment both pointers.\n \n@@ -3757,66 +3740,6 @@ mod ivec {\n \n         ret res(next_cx, llvecptr);\n     }\n-\n-    // NB: This does *not* adjust reference counts. The caller must have done\n-    // this via take_ty() beforehand.\n-    fn duplicate_heap_part(&@block_ctxt cx, ValueRef orig_vptr,\n-                           ty::t unit_ty) -> result {\n-        // Cast to an opaque interior vector if we can't trust the pointer\n-        // type.\n-        auto vptr;\n-        if (ty::type_has_dynamic_size(cx.fcx.lcx.ccx.tcx, unit_ty)) {\n-            vptr = cx.build.PointerCast(orig_vptr, T_ptr(T_opaque_ivec()));\n-        } else {\n-            vptr = orig_vptr;\n-        }\n-\n-        auto llunitty = type_of_or_i8(cx, unit_ty);\n-        auto llheappartty = T_ivec_heap_part(llunitty);\n-\n-        // Check to see if the vector is heapified.\n-        auto stack_len_ptr = cx.build.InBoundsGEP(vptr, [C_int(0),\n-            C_uint(abi::ivec_elt_len)]);\n-        auto stack_len = cx.build.Load(stack_len_ptr);\n-        auto stack_len_is_zero = cx.build.ICmp(lib::llvm::LLVMIntEQ,\n-                                               stack_len, C_int(0));\n-        auto maybe_on_heap_cx = new_sub_block_ctxt(cx, \"maybe_on_heap\");\n-        auto next_cx = new_sub_block_ctxt(cx, \"next\");\n-        cx.build.CondBr(stack_len_is_zero, maybe_on_heap_cx.llbb,\n-                        next_cx.llbb);\n-\n-        auto stub_ptr = maybe_on_heap_cx.build.PointerCast(vptr,\n-            T_ptr(T_ivec_heap(llunitty)));\n-        auto heap_ptr_ptr = maybe_on_heap_cx.build.InBoundsGEP(stub_ptr,\n-            [C_int(0), C_uint(abi::ivec_heap_stub_elt_ptr)]);\n-        auto heap_ptr = maybe_on_heap_cx.build.Load(heap_ptr_ptr);\n-        auto heap_ptr_is_nonnull = maybe_on_heap_cx.build.ICmp(\n-            lib::llvm::LLVMIntNE, heap_ptr, C_null(T_ptr(llheappartty)));\n-        auto on_heap_cx = new_sub_block_ctxt(cx, \"on_heap\");\n-        maybe_on_heap_cx.build.CondBr(heap_ptr_is_nonnull, on_heap_cx.llbb,\n-                                      next_cx.llbb);\n-\n-        // Ok, the vector is on the heap. Copy the heap part.\n-        auto alen_ptr = on_heap_cx.build.InBoundsGEP(stub_ptr,\n-            [C_int(0), C_uint(abi::ivec_heap_stub_elt_alen)]);\n-        auto alen = on_heap_cx.build.Load(alen_ptr);\n-\n-        auto heap_part_sz = on_heap_cx.build.Add(alen,\n-            llsize_of(T_opaque_ivec_heap_part()));\n-        auto rslt = trans_raw_malloc(on_heap_cx, T_ptr(llheappartty),\n-                                     heap_part_sz);\n-        on_heap_cx = rslt.bcx;\n-        auto new_heap_ptr = rslt.val;\n-\n-        rslt = call_memmove(on_heap_cx, new_heap_ptr, heap_ptr, heap_part_sz,\n-                            C_int(4));  // FIXME: align\n-        on_heap_cx = rslt.bcx;\n-\n-        on_heap_cx.build.Store(new_heap_ptr, heap_ptr_ptr);\n-        on_heap_cx.build.Br(next_cx.llbb);\n-\n-        ret res(next_cx, C_nil());\n-    }\n }\n \n fn trans_vec_add(&@block_ctxt cx, &ty::t t, ValueRef lhs, ValueRef rhs) ->\n@@ -5508,8 +5431,6 @@ fn trans_ivec(@block_ctxt bcx, &vec[@ast::expr] args, &ast::ann ann) ->\n     auto unit_sz = ares.llunitsz;\n     auto llalen = ares.llalen;\n \n-    find_scope_cx(bcx).cleanups += [clean(bind drop_ty(_, llvecptr, typ))];\n-\n     auto lllen = bcx.build.Mul(C_uint(vec::len(args)), unit_sz);\n     // Allocate the vector pieces and store length and allocated length.\n \n@@ -5538,17 +5459,15 @@ fn trans_ivec(@block_ctxt bcx, &vec[@ast::expr] args, &ast::ann ann) ->\n         auto llstubty = T_ivec_heap(llunitty);\n         auto llstubptr = bcx.build.PointerCast(llvecptr, T_ptr(llstubty));\n         bcx.build.Store(C_int(0), bcx.build.InBoundsGEP(llstubptr, stub_z));\n+        bcx.build.Store(lllen, bcx.build.InBoundsGEP(llstubptr, stub_a));\n         auto llheapty = T_ivec_heap_part(llunitty);\n         if (vec::len(args) == 0u) {\n             // Null heap pointer indicates a zero-length vector.\n \n-            bcx.build.Store(llalen, bcx.build.InBoundsGEP(llstubptr, stub_a));\n             bcx.build.Store(C_null(T_ptr(llheapty)),\n                             bcx.build.InBoundsGEP(llstubptr, stub_p));\n             llfirsteltptr = C_null(T_ptr(llunitty));\n         } else {\n-            bcx.build.Store(lllen, bcx.build.InBoundsGEP(llstubptr, stub_a));\n-\n             auto llheapsz = bcx.build.Add(llsize_of(llheapty), lllen);\n             auto rslt = trans_raw_malloc(bcx, T_ptr(llheapty), llheapsz);\n             bcx = rslt.bcx;"}]}