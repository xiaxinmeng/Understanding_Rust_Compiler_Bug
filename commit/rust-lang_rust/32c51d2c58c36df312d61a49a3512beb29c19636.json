{"sha": "32c51d2c58c36df312d61a49a3512beb29c19636", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyYzUxZDJjNThjMzZkZjMxMmQ2MWE0OWEzNTEyYmViMjljMTk2MzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-25T11:39:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-25T11:39:30Z"}, "message": "Auto merge of #6201 - Suyash458:master, r=flip1995\n\nAdd support for minimum supported rust version\n\nadd configuration option for minimum supported rust version\nadd msrv attribute to some lints listed in #6097\nadd tests\naddresses #6097\n\nchangelog: Add `msrv` configuration to Clippy. This should get a longer changelog entry.", "tree": {"sha": "90de56ee5f562cc46e8a0ad7c83038f40b06a7b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90de56ee5f562cc46e8a0ad7c83038f40b06a7b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32c51d2c58c36df312d61a49a3512beb29c19636", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32c51d2c58c36df312d61a49a3512beb29c19636", "html_url": "https://github.com/rust-lang/rust/commit/32c51d2c58c36df312d61a49a3512beb29c19636", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32c51d2c58c36df312d61a49a3512beb29c19636/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f897d27d8b394464048a60e5bf38d4cd1e31a5fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f897d27d8b394464048a60e5bf38d4cd1e31a5fe", "html_url": "https://github.com/rust-lang/rust/commit/f897d27d8b394464048a60e5bf38d4cd1e31a5fe"}, {"sha": "d06076c0c56a2b254b061d569d421b887a7c6bbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d06076c0c56a2b254b061d569d421b887a7c6bbe", "html_url": "https://github.com/rust-lang/rust/commit/d06076c0c56a2b254b061d569d421b887a7c6bbe"}], "stats": {"total": 449, "additions": 427, "deletions": 22}, "files": [{"sha": "866dae110cc97f348a7af1ffa1354a32567fc8b3", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -44,6 +44,7 @@ extern crate rustc_target;\n extern crate rustc_trait_selection;\n extern crate rustc_typeck;\n \n+use crate::utils::parse_msrv;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_lint::LintId;\n use rustc_session::Session;\n@@ -933,7 +934,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n     ]);\n     // end register lints, do not remove this comment, it\u2019s used in `update_lints`\n-\n     store.register_late_pass(|| box await_holding_invalid::AwaitHolding);\n     store.register_late_pass(|| box serde_api::SerdeAPI);\n     store.register_late_pass(|| box utils::internal_lints::CompilerLintFunctions::new());\n@@ -969,7 +969,23 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box strings::StringAdd);\n     store.register_late_pass(|| box implicit_return::ImplicitReturn);\n     store.register_late_pass(|| box implicit_saturating_sub::ImplicitSaturatingSub);\n-    store.register_late_pass(|| box methods::Methods);\n+\n+    let parsed_msrv = conf.msrv.as_ref().and_then(|s| {\n+        parse_msrv(s, None, None).or_else(|| {\n+            sess.err(&format!(\"error reading Clippy's configuration file. `{}` is not a valid Rust version\", s));\n+            None\n+        })\n+    });\n+\n+    let msrv = parsed_msrv.clone();\n+    store.register_late_pass(move || box methods::Methods::new(msrv.clone()));\n+    let msrv = parsed_msrv.clone();\n+    store.register_late_pass(move || box matches::Matches::new(msrv.clone()));\n+    let msrv = parsed_msrv.clone();\n+    store.register_early_pass(move || box manual_non_exhaustive::ManualNonExhaustive::new(msrv.clone()));\n+    let msrv = parsed_msrv;\n+    store.register_late_pass(move || box manual_strip::ManualStrip::new(msrv.clone()));\n+\n     store.register_late_pass(|| box map_clone::MapClone);\n     store.register_late_pass(|| box map_err_ignore::MapErrIgnore);\n     store.register_late_pass(|| box shadow::Shadow);\n@@ -983,7 +999,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box types::Casts);\n     let type_complexity_threshold = conf.type_complexity_threshold;\n     store.register_late_pass(move || box types::TypeComplexity::new(type_complexity_threshold));\n-    store.register_late_pass(|| box matches::Matches::default());\n     store.register_late_pass(|| box minmax::MinMaxPass);\n     store.register_late_pass(|| box open_options::OpenOptions);\n     store.register_late_pass(|| box zero_div_zero::ZeroDiv);\n@@ -1144,7 +1159,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box if_let_mutex::IfLetMutex);\n     store.register_late_pass(|| box mut_mutex_lock::MutMutexLock);\n     store.register_late_pass(|| box match_on_vec_items::MatchOnVecItems);\n-    store.register_early_pass(|| box manual_non_exhaustive::ManualNonExhaustive);\n     store.register_late_pass(|| box manual_async_fn::ManualAsyncFn);\n     store.register_early_pass(|| box redundant_field_names::RedundantFieldNames);\n     store.register_late_pass(|| box vec_resize_to_zero::VecResizeToZero);\n@@ -1166,7 +1180,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box manual_ok_or::ManualOkOr);\n     store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n     store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n-    store.register_late_pass(|| box manual_strip::ManualStrip);\n     store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n     let disallowed_methods = conf.disallowed_methods.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_late_pass(move || box disallowed_method::DisallowedMethod::new(&disallowed_methods));"}, {"sha": "703e6feeca500a48b9aff173a49d2d047a89d2c0", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -1,11 +1,20 @@\n-use crate::utils::{snippet_opt, span_lint_and_then};\n+use crate::utils::{meets_msrv, snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_ast::ast::{Attribute, Item, ItemKind, StructField, Variant, VariantData, VisibilityKind};\n use rustc_attr as attr;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n+use semver::{Version, VersionReq};\n+\n+const MANUAL_NON_EXHAUSTIVE_MSRV: Version = Version {\n+    major: 1,\n+    minor: 40,\n+    patch: 0,\n+    pre: Vec::new(),\n+    build: Vec::new(),\n+};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for manual implementations of the non-exhaustive pattern.\n@@ -55,10 +64,26 @@ declare_clippy_lint! {\n     \"manual implementations of the non-exhaustive pattern can be simplified using #[non_exhaustive]\"\n }\n \n-declare_lint_pass!(ManualNonExhaustive => [MANUAL_NON_EXHAUSTIVE]);\n+#[derive(Clone)]\n+pub struct ManualNonExhaustive {\n+    msrv: Option<VersionReq>,\n+}\n+\n+impl ManualNonExhaustive {\n+    #[must_use]\n+    pub fn new(msrv: Option<VersionReq>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(ManualNonExhaustive => [MANUAL_NON_EXHAUSTIVE]);\n \n impl EarlyLintPass for ManualNonExhaustive {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n+        if !meets_msrv(self.msrv.as_ref(), &MANUAL_NON_EXHAUSTIVE_MSRV) {\n+            return;\n+        }\n+\n         match &item.kind {\n             ItemKind::Enum(def, _) => {\n                 check_manual_non_exhaustive_enum(cx, item, &def.variants);\n@@ -73,6 +98,8 @@ impl EarlyLintPass for ManualNonExhaustive {\n             _ => {},\n         }\n     }\n+\n+    extract_msrv_attr!(EarlyContext);\n }\n \n fn check_manual_non_exhaustive_enum(cx: &EarlyContext<'_>, item: &Item, variants: &[Variant]) {"}, {"sha": "e17e3adb94f02f7fe43b9b8f78815344f4226566", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -1,7 +1,7 @@\n use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n-    eq_expr_value, higher, match_def_path, multispan_sugg, paths, qpath_res, snippet, span_lint_and_then,\n+    eq_expr_value, higher, match_def_path, meets_msrv, multispan_sugg, paths, qpath_res, snippet, span_lint_and_then,\n };\n \n use if_chain::if_chain;\n@@ -10,12 +10,21 @@ use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::BinOpKind;\n use rustc_hir::{BorrowKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Spanned;\n use rustc_span::Span;\n+use semver::{Version, VersionReq};\n+\n+const MANUAL_STRIP_MSRV: Version = Version {\n+    major: 1,\n+    minor: 45,\n+    patch: 0,\n+    pre: Vec::new(),\n+    build: Vec::new(),\n+};\n \n declare_clippy_lint! {\n     /// **What it does:**\n@@ -51,7 +60,18 @@ declare_clippy_lint! {\n     \"suggests using `strip_{prefix,suffix}` over `str::{starts,ends}_with` and slicing\"\n }\n \n-declare_lint_pass!(ManualStrip => [MANUAL_STRIP]);\n+pub struct ManualStrip {\n+    msrv: Option<VersionReq>,\n+}\n+\n+impl ManualStrip {\n+    #[must_use]\n+    pub fn new(msrv: Option<VersionReq>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(ManualStrip => [MANUAL_STRIP]);\n \n #[derive(Clone, Copy, Debug, Eq, PartialEq)]\n enum StripKind {\n@@ -61,6 +81,10 @@ enum StripKind {\n \n impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if !meets_msrv(self.msrv.as_ref(), &MANUAL_STRIP_MSRV) {\n+            return;\n+        }\n+\n         if_chain! {\n             if let Some((cond, then, _)) = higher::if_block(&expr);\n             if let ExprKind::MethodCall(_, _, [target_arg, pattern], _) = cond.kind;\n@@ -114,6 +138,8 @@ impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n             }\n         }\n     }\n+\n+    extract_msrv_attr!(LateContext);\n }\n \n // Returns `Some(arg)` if `expr` matches `arg.len()` and `None` otherwise."}, {"sha": "d695af4de21ba02069634ec668477ba01c66decf", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -3,8 +3,8 @@ use crate::utils::sugg::Sugg;\n use crate::utils::usage::is_unused;\n use crate::utils::{\n     expr_block, get_arg_name, get_parent_expr, in_macro, indent_of, is_allowed, is_expn_of, is_refutable,\n-    is_type_diagnostic_item, is_wild, match_qpath, match_type, match_var, multispan_sugg, remove_blocks, snippet,\n-    snippet_block, snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg,\n+    is_type_diagnostic_item, is_wild, match_qpath, match_type, match_var, meets_msrv, multispan_sugg, remove_blocks,\n+    snippet, snippet_block, snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg,\n     span_lint_and_then,\n };\n use crate::utils::{paths, search_same, SpanlessEq, SpanlessHash};\n@@ -23,6 +23,7 @@ use rustc_middle::ty::{self, Ty, TyS};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::{sym, Symbol};\n+use semver::{Version, VersionReq};\n use std::cmp::Ordering;\n use std::collections::hash_map::Entry;\n use std::collections::Bound;\n@@ -527,9 +528,20 @@ declare_clippy_lint! {\n \n #[derive(Default)]\n pub struct Matches {\n+    msrv: Option<VersionReq>,\n     infallible_destructuring_match_linted: bool,\n }\n \n+impl Matches {\n+    #[must_use]\n+    pub fn new(msrv: Option<VersionReq>) -> Self {\n+        Self {\n+            msrv,\n+            ..Matches::default()\n+        }\n+    }\n+}\n+\n impl_lint_pass!(Matches => [\n     SINGLE_MATCH,\n     MATCH_REF_PATS,\n@@ -549,14 +561,27 @@ impl_lint_pass!(Matches => [\n     MATCH_SAME_ARMS,\n ]);\n \n+const MATCH_LIKE_MATCHES_MACRO_MSRV: Version = Version {\n+    major: 1,\n+    minor: 42,\n+    patch: 0,\n+    pre: Vec::new(),\n+    build: Vec::new(),\n+};\n+\n impl<'tcx> LateLintPass<'tcx> for Matches {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if in_external_macro(cx.sess(), expr.span) || in_macro(expr.span) {\n             return;\n         }\n \n         redundant_pattern_match::check(cx, expr);\n-        if !check_match_like_matches(cx, expr) {\n+\n+        if meets_msrv(self.msrv.as_ref(), &MATCH_LIKE_MATCHES_MACRO_MSRV) {\n+            if !check_match_like_matches(cx, expr) {\n+                lint_match_arms(cx, expr);\n+            }\n+        } else {\n             lint_match_arms(cx, expr);\n         }\n \n@@ -640,6 +665,8 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n             }\n         }\n     }\n+\n+    extract_msrv_attr!(LateContext);\n }\n \n #[rustfmt::skip]"}, {"sha": "50dd760432dbf4c29c64b9befcf24671b21dcee7", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -20,7 +20,7 @@ use rustc_lint::{LateContext, LateLintPass, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, SymbolStr};\n \n@@ -30,10 +30,11 @@ use crate::utils::usage::mutated_variables;\n use crate::utils::{\n     contains_ty, get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait, in_macro,\n     is_copy, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment, match_def_path, match_qpath,\n-    match_trait_method, match_type, match_var, method_calls, method_chain_args, paths, remove_blocks, return_ty,\n-    single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint,\n+    match_trait_method, match_type, match_var, meets_msrv, method_calls, method_chain_args, paths, remove_blocks,\n+    return_ty, single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint,\n     span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg, walk_ptrs_ty_depth, SpanlessEq,\n };\n+use semver::{Version, VersionReq};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `.unwrap()` calls on `Option`s and on `Result`s.\n@@ -1404,7 +1405,18 @@ declare_clippy_lint! {\n     \"use `.collect()` instead of `::from_iter()`\"\n }\n \n-declare_lint_pass!(Methods => [\n+pub struct Methods {\n+    msrv: Option<VersionReq>,\n+}\n+\n+impl Methods {\n+    #[must_use]\n+    pub fn new(msrv: Option<VersionReq>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(Methods => [\n     UNWRAP_USED,\n     EXPECT_USED,\n     SHOULD_IMPLEMENT_TRAIT,\n@@ -1531,8 +1543,12 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 check_pointer_offset(cx, expr, arg_lists[0])\n             },\n             [\"is_file\", ..] => lint_filetype_is_file(cx, expr, arg_lists[0]),\n-            [\"map\", \"as_ref\"] => lint_option_as_ref_deref(cx, expr, arg_lists[1], arg_lists[0], false),\n-            [\"map\", \"as_mut\"] => lint_option_as_ref_deref(cx, expr, arg_lists[1], arg_lists[0], true),\n+            [\"map\", \"as_ref\"] => {\n+                lint_option_as_ref_deref(cx, expr, arg_lists[1], arg_lists[0], false, self.msrv.as_ref())\n+            },\n+            [\"map\", \"as_mut\"] => {\n+                lint_option_as_ref_deref(cx, expr, arg_lists[1], arg_lists[0], true, self.msrv.as_ref())\n+            },\n             [\"unwrap_or_else\", ..] => unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"unwrap_or\"),\n             [\"get_or_insert_with\", ..] => unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"get_or_insert\"),\n             [\"ok_or_else\", ..] => unnecessary_lazy_eval::lint(cx, expr, arg_lists[0], \"ok_or\"),\n@@ -1738,6 +1754,8 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             }\n         }\n     }\n+\n+    extract_msrv_attr!(LateContext);\n }\n \n /// Checks for the `OR_FUN_CALL` lint.\n@@ -3453,14 +3471,27 @@ fn lint_suspicious_map(cx: &LateContext<'_>, expr: &hir::Expr<'_>) {\n     );\n }\n \n+const OPTION_AS_REF_DEREF_MSRV: Version = Version {\n+    major: 1,\n+    minor: 40,\n+    patch: 0,\n+    pre: Vec::new(),\n+    build: Vec::new(),\n+};\n+\n /// lint use of `_.as_ref().map(Deref::deref)` for `Option`s\n fn lint_option_as_ref_deref<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &hir::Expr<'_>,\n     as_ref_args: &[hir::Expr<'_>],\n     map_args: &[hir::Expr<'_>],\n     is_mut: bool,\n+    msrv: Option<&VersionReq>,\n ) {\n+    if !meets_msrv(msrv, &OPTION_AS_REF_DEREF_MSRV) {\n+        return;\n+    }\n+\n     let same_mutability = |m| (is_mut && m == &hir::Mutability::Mut) || (!is_mut && m == &hir::Mutability::Not);\n \n     let option_ty = cx.typeck_results().expr_ty(&as_ref_args[0]);"}, {"sha": "24052a243af8245bf8c86e0408e7db4366c71751", "filename": "clippy_lints/src/utils/attrs.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fattrs.rs?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -21,6 +21,7 @@ pub const BUILTIN_ATTRIBUTES: &[(&str, DeprecationStatus)] = &[\n         DeprecationStatus::Replaced(\"cognitive_complexity\"),\n     ),\n     (\"dump\", DeprecationStatus::None),\n+    (\"msrv\", DeprecationStatus::None),\n ];\n \n pub struct LimitStack {\n@@ -123,6 +124,24 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n     }\n }\n \n+pub fn get_unique_inner_attr(sess: &Session, attrs: &[ast::Attribute], name: &'static str) -> Option<ast::Attribute> {\n+    let mut unique_attr = None;\n+    for attr in get_attr(sess, attrs, name) {\n+        match attr.style {\n+            ast::AttrStyle::Inner if unique_attr.is_none() => unique_attr = Some(attr.clone()),\n+            ast::AttrStyle::Inner => {\n+                sess.struct_span_err(attr.span, &format!(\"`{}` is defined multiple times\", name))\n+                    .span_note(unique_attr.as_ref().unwrap().span, \"first definition found here\")\n+                    .emit();\n+            },\n+            ast::AttrStyle::Outer => {\n+                sess.span_err(attr.span, &format!(\"`{}` cannot be an outer attribute\", name));\n+            },\n+        }\n+    }\n+    unique_attr\n+}\n+\n /// Return true if the attributes contain any of `proc_macro`,\n /// `proc_macro_derive` or `proc_macro_attribute`, false otherwise\n pub fn is_proc_macro(sess: &Session, attrs: &[ast::Attribute]) -> bool {"}, {"sha": "fc6304118d98823865438349cddb86b255b3aacf", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -106,6 +106,8 @@ macro_rules! define_Conf {\n \n pub use self::helpers::Conf;\n define_Conf! {\n+    /// Lint: MANUAL_NON_EXHAUSTIVE, MANUAL_STRIP, OPTION_AS_REF_DEREF, MATCH_LIKE_MATCHES_MACRO. The minimum rust version that the project supports\n+    (msrv, \"msrv\": Option<String>, None),\n     /// Lint: BLACKLISTED_NAME. The list of blacklisted names to lint about. NB: `bar` is not here since it has legitimate uses\n     (blacklisted_names, \"blacklisted_names\": Vec<String>, [\"foo\", \"baz\", \"quux\"].iter().map(ToString::to_string).collect()),\n     /// Lint: COGNITIVE_COMPLEXITY. The maximum cognitive complexity a function can have"}, {"sha": "6f89e51279adf69b4d4f8565e76f311194ccb88c", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -51,17 +51,62 @@ use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, layout::IntegerExt, Ty, TyCtxt, TypeFoldable};\n+use rustc_session::Session;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n use rustc_span::sym as rustc_sym;\n use rustc_span::symbol::{self, kw, Symbol};\n use rustc_span::{BytePos, Pos, Span, DUMMY_SP};\n use rustc_target::abi::Integer;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n+use semver::{Version, VersionReq};\n use smallvec::SmallVec;\n \n use crate::consts::{constant, Constant};\n \n+pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Option<VersionReq> {\n+    if let Ok(version) = VersionReq::parse(msrv) {\n+        return Some(version);\n+    } else if let Some(sess) = sess {\n+        if let Some(span) = span {\n+            sess.span_err(span, &format!(\"`{}` is not a valid Rust version\", msrv));\n+        }\n+    }\n+    None\n+}\n+\n+pub fn meets_msrv(msrv: Option<&VersionReq>, lint_msrv: &Version) -> bool {\n+    msrv.map_or(true, |msrv| !msrv.matches(lint_msrv))\n+}\n+\n+macro_rules! extract_msrv_attr {\n+    (LateContext) => {\n+        extract_msrv_attr!(@LateContext, ());\n+    };\n+    (EarlyContext) => {\n+        extract_msrv_attr!(@EarlyContext);\n+    };\n+    (@$context:ident$(, $call:tt)?) => {\n+        fn enter_lint_attrs(&mut self, cx: &rustc_lint::$context<'tcx>, attrs: &'tcx [rustc_ast::ast::Attribute]) {\n+            use $crate::utils::get_unique_inner_attr;\n+            match get_unique_inner_attr(cx.sess$($call)?, attrs, \"msrv\") {\n+                Some(msrv_attr) => {\n+                    if let Some(msrv) = msrv_attr.value_str() {\n+                        self.msrv = $crate::utils::parse_msrv(\n+                            &msrv.to_string(),\n+                            Some(cx.sess$($call)?),\n+                            Some(msrv_attr.span),\n+                        );\n+                    } else {\n+                        cx.sess$($call)?.span_err(msrv_attr.span, \"bad clippy attribute\");\n+                    }\n+                },\n+                _ => (),\n+            }\n+        }\n+    };\n+}\n+\n /// Returns `true` if the two spans come from differing expansions (i.e., one is\n /// from a macro and one isn't).\n #[must_use]"}, {"sha": "088b12b2daca61c66f1974f221d65a1d42e4cc95", "filename": "tests/ui-toml/invalid_min_rust_version/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui-toml%2Finvalid_min_rust_version%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui-toml%2Finvalid_min_rust_version%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Finvalid_min_rust_version%2Fclippy.toml?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -0,0 +1 @@\n+msrv = \"invalid.version\""}, {"sha": "2ebf28645e51e53a969fbac0b02340bab8e7eeb0", "filename": "tests/ui-toml/invalid_min_rust_version/invalid_min_rust_version.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui-toml%2Finvalid_min_rust_version%2Finvalid_min_rust_version.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui-toml%2Finvalid_min_rust_version%2Finvalid_min_rust_version.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Finvalid_min_rust_version%2Finvalid_min_rust_version.rs?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -0,0 +1,3 @@\n+#![allow(clippy::redundant_clone)]\n+\n+fn main() {}"}, {"sha": "e9d8fd2e0f525649eb8c2fc7471b320e21efe12e", "filename": "tests/ui-toml/invalid_min_rust_version/invalid_min_rust_version.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui-toml%2Finvalid_min_rust_version%2Finvalid_min_rust_version.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui-toml%2Finvalid_min_rust_version%2Finvalid_min_rust_version.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Finvalid_min_rust_version%2Finvalid_min_rust_version.stderr?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -0,0 +1,4 @@\n+error: error reading Clippy's configuration file. `invalid.version` is not a valid Rust version\n+\n+error: aborting due to previous error\n+"}, {"sha": "8e17d8074c41f7f7dbb57d3b2b2fd9a3ff0dfa9a", "filename": "tests/ui-toml/min_rust_version/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui-toml%2Fmin_rust_version%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui-toml%2Fmin_rust_version%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fmin_rust_version%2Fclippy.toml?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -0,0 +1 @@\n+msrv = \"1.0.0\""}, {"sha": "bc41efa42a17ce1f8f14e53f48f6d048bdc9e5b5", "filename": "tests/ui-toml/min_rust_version/min_rust_version.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui-toml%2Fmin_rust_version%2Fmin_rust_version.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui-toml%2Fmin_rust_version%2Fmin_rust_version.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fmin_rust_version%2Fmin_rust_version.rs?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -0,0 +1,68 @@\n+#![allow(clippy::redundant_clone)]\n+#![warn(clippy::manual_non_exhaustive)]\n+\n+use std::ops::Deref;\n+\n+mod enums {\n+    enum E {\n+        A,\n+        B,\n+        #[doc(hidden)]\n+        _C,\n+    }\n+\n+    // user forgot to remove the marker\n+    #[non_exhaustive]\n+    enum Ep {\n+        A,\n+        B,\n+        #[doc(hidden)]\n+        _C,\n+    }\n+}\n+\n+fn option_as_ref_deref() {\n+    let mut opt = Some(String::from(\"123\"));\n+\n+    let _ = opt.as_ref().map(String::as_str);\n+    let _ = opt.as_ref().map(|x| x.as_str());\n+    let _ = opt.as_mut().map(String::as_mut_str);\n+    let _ = opt.as_mut().map(|x| x.as_mut_str());\n+}\n+\n+fn match_like_matches() {\n+    let _y = match Some(5) {\n+        Some(0) => true,\n+        _ => false,\n+    };\n+}\n+\n+fn match_same_arms() {\n+    match (1, 2, 3) {\n+        (1, .., 3) => 42,\n+        (.., 3) => 42, //~ ERROR match arms have same body\n+        _ => 0,\n+    };\n+}\n+\n+fn match_same_arms2() {\n+    let _ = match Some(42) {\n+        Some(_) => 24,\n+        None => 24, //~ ERROR match arms have same body\n+    };\n+}\n+\n+fn manual_strip_msrv() {\n+    let s = \"hello, world!\";\n+    if s.starts_with(\"hello, \") {\n+        assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+    }\n+}\n+\n+fn main() {\n+    option_as_ref_deref();\n+    match_like_matches();\n+    match_same_arms();\n+    match_same_arms2();\n+    manual_strip_msrv();\n+}"}, {"sha": "af3d9ecf6e846b28d20ad832e8243009a9fe009a", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}, {"sha": "8ed483a3ac6130dc55cbed0c87ab408075ca1f7b", "filename": "tests/ui/min_rust_version_attr.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.rs?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -0,0 +1,51 @@\n+#![allow(clippy::redundant_clone)]\n+#![feature(custom_inner_attributes)]\n+#![clippy::msrv = \"1.0.0\"]\n+\n+use std::ops::Deref;\n+\n+fn option_as_ref_deref() {\n+    let mut opt = Some(String::from(\"123\"));\n+\n+    let _ = opt.as_ref().map(String::as_str);\n+    let _ = opt.as_ref().map(|x| x.as_str());\n+    let _ = opt.as_mut().map(String::as_mut_str);\n+    let _ = opt.as_mut().map(|x| x.as_mut_str());\n+}\n+\n+fn match_like_matches() {\n+    let _y = match Some(5) {\n+        Some(0) => true,\n+        _ => false,\n+    };\n+}\n+\n+fn match_same_arms() {\n+    match (1, 2, 3) {\n+        (1, .., 3) => 42,\n+        (.., 3) => 42, //~ ERROR match arms have same body\n+        _ => 0,\n+    };\n+}\n+\n+fn match_same_arms2() {\n+    let _ = match Some(42) {\n+        Some(_) => 24,\n+        None => 24, //~ ERROR match arms have same body\n+    };\n+}\n+\n+fn manual_strip_msrv() {\n+    let s = \"hello, world!\";\n+    if s.starts_with(\"hello, \") {\n+        assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+    }\n+}\n+\n+fn main() {\n+    option_as_ref_deref();\n+    match_like_matches();\n+    match_same_arms();\n+    match_same_arms2();\n+    manual_strip_msrv();\n+}"}, {"sha": "f20841891a7429f213294e520dc32159697d4869", "filename": "tests/ui/min_rust_version_invalid_attr.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui%2Fmin_rust_version_invalid_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui%2Fmin_rust_version_invalid_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_invalid_attr.rs?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -0,0 +1,4 @@\n+#![feature(custom_inner_attributes)]\n+#![clippy::msrv = \"invalid.version\"]\n+\n+fn main() {}"}, {"sha": "6ff88ca56f8b92fac4ba9446420e0f19d20602d2", "filename": "tests/ui/min_rust_version_invalid_attr.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui%2Fmin_rust_version_invalid_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui%2Fmin_rust_version_invalid_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_invalid_attr.stderr?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -0,0 +1,8 @@\n+error: `invalid.version` is not a valid Rust version\n+  --> $DIR/min_rust_version_invalid_attr.rs:2:1\n+   |\n+LL | #![clippy::msrv = \"invalid.version\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e882d5ccf91a8f6b7657c63fa218b33a5593174b", "filename": "tests/ui/min_rust_version_multiple_inner_attr.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui%2Fmin_rust_version_multiple_inner_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui%2Fmin_rust_version_multiple_inner_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_multiple_inner_attr.rs?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -0,0 +1,11 @@\n+#![feature(custom_inner_attributes)]\n+#![clippy::msrv = \"1.40\"]\n+#![clippy::msrv = \"=1.35.0\"]\n+#![clippy::msrv = \"1.10.1\"]\n+\n+mod foo {\n+    #![clippy::msrv = \"1\"]\n+    #![clippy::msrv = \"1.0.0\"]\n+}\n+\n+fn main() {}"}, {"sha": "e3ff6605cde87b891cd80d18b77bd64f1d77dcfd", "filename": "tests/ui/min_rust_version_multiple_inner_attr.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui%2Fmin_rust_version_multiple_inner_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui%2Fmin_rust_version_multiple_inner_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_multiple_inner_attr.stderr?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -0,0 +1,38 @@\n+error: `msrv` is defined multiple times\n+  --> $DIR/min_rust_version_multiple_inner_attr.rs:3:1\n+   |\n+LL | #![clippy::msrv = \"=1.35.0\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first definition found here\n+  --> $DIR/min_rust_version_multiple_inner_attr.rs:2:1\n+   |\n+LL | #![clippy::msrv = \"1.40\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `msrv` is defined multiple times\n+  --> $DIR/min_rust_version_multiple_inner_attr.rs:4:1\n+   |\n+LL | #![clippy::msrv = \"1.10.1\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first definition found here\n+  --> $DIR/min_rust_version_multiple_inner_attr.rs:2:1\n+   |\n+LL | #![clippy::msrv = \"1.40\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `msrv` is defined multiple times\n+  --> $DIR/min_rust_version_multiple_inner_attr.rs:8:5\n+   |\n+LL |     #![clippy::msrv = \"1.0.0\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first definition found here\n+  --> $DIR/min_rust_version_multiple_inner_attr.rs:7:5\n+   |\n+LL |     #![clippy::msrv = \"1\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "515fe8f95e95233953e2f2b9cf0d921f7f9da9bd", "filename": "tests/ui/min_rust_version_no_patch.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui%2Fmin_rust_version_no_patch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui%2Fmin_rust_version_no_patch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_no_patch.rs?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -0,0 +1,14 @@\n+#![allow(clippy::redundant_clone)]\n+#![feature(custom_inner_attributes)]\n+#![clippy::msrv = \"^1.0\"]\n+\n+fn manual_strip_msrv() {\n+    let s = \"hello, world!\";\n+    if s.starts_with(\"hello, \") {\n+        assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n+    }\n+}\n+\n+fn main() {\n+    manual_strip_msrv()\n+}"}, {"sha": "551948bd72ef1be61145dacfed4dc98f7e33d2ba", "filename": "tests/ui/min_rust_version_outer_attr.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui%2Fmin_rust_version_outer_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui%2Fmin_rust_version_outer_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_outer_attr.rs?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -0,0 +1,4 @@\n+#![feature(custom_inner_attributes)]\n+\n+#[clippy::msrv = \"invalid.version\"]\n+fn main() {}"}, {"sha": "579ee7a87d23ceef6bf2c06ebfc097d8d6e17686", "filename": "tests/ui/min_rust_version_outer_attr.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui%2Fmin_rust_version_outer_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32c51d2c58c36df312d61a49a3512beb29c19636/tests%2Fui%2Fmin_rust_version_outer_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_outer_attr.stderr?ref=32c51d2c58c36df312d61a49a3512beb29c19636", "patch": "@@ -0,0 +1,8 @@\n+error: `msrv` cannot be an outer attribute\n+  --> $DIR/min_rust_version_outer_attr.rs:3:1\n+   |\n+LL | #[clippy::msrv = \"invalid.version\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}