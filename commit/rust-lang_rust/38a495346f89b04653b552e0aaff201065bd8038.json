{"sha": "38a495346f89b04653b552e0aaff201065bd8038", "node_id": "C_kwDOAAsO6NoAKDM4YTQ5NTM0NmY4OWIwNDY1M2I1NTJlMGFhZmYyMDEwNjViZDgwMzg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-11T23:04:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-11T23:06:30Z"}, "message": "remove prctl, now that std does not use it any more\n\nit is a terrible variadic function...", "tree": {"sha": "7ede01fb6fd3bdb5661d70e205fe51e9e4e9aa20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ede01fb6fd3bdb5661d70e205fe51e9e4e9aa20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38a495346f89b04653b552e0aaff201065bd8038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38a495346f89b04653b552e0aaff201065bd8038", "html_url": "https://github.com/rust-lang/rust/commit/38a495346f89b04653b552e0aaff201065bd8038", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38a495346f89b04653b552e0aaff201065bd8038/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23cd7b863ff0ca4fba9e28402a067f3f75772d26", "url": "https://api.github.com/repos/rust-lang/rust/commits/23cd7b863ff0ca4fba9e28402a067f3f75772d26", "html_url": "https://github.com/rust-lang/rust/commit/23cd7b863ff0ca4fba9e28402a067f3f75772d26"}], "stats": {"total": 108, "additions": 0, "deletions": 108}, "files": [{"sha": "8c569fb34bba660ef8f2469682e4d25e5c6acc27", "filename": "src/shims/unix/linux/foreign_items.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38a495346f89b04653b552e0aaff201065bd8038/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a495346f89b04653b552e0aaff201065bd8038/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs?ref=38a495346f89b04653b552e0aaff201065bd8038", "patch": "@@ -51,12 +51,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // Threading\n-            \"prctl\" => {\n-                // prctl is variadic. (It is not documented like that in the manpage, but defined like that in the libc crate.)\n-                this.check_abi_and_shim_symbol_clash(abi, Abi::C { unwind: false }, link_name)?;\n-                let result = this.prctl(args)?;\n-                this.write_scalar(Scalar::from_i32(result), dest)?;\n-            }\n             \"pthread_condattr_setclock\" => {\n                 let [attr, clock_id] =\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;"}, {"sha": "0df70543fac8895f839a42b0b5bcf92d30b42bf6", "filename": "src/shims/unix/thread.rs", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/38a495346f89b04653b552e0aaff201065bd8038/src%2Fshims%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a495346f89b04653b552e0aaff201065bd8038/src%2Fshims%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fthread.rs?ref=38a495346f89b04653b552e0aaff201065bd8038", "patch": "@@ -107,53 +107,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(Scalar::from_u32(0))\n     }\n \n-    fn prctl(&mut self, args: &[OpTy<'tcx, Provenance>]) -> InterpResult<'tcx, i32> {\n-        let this = self.eval_context_mut();\n-        this.assert_target_os(\"linux\", \"prctl\");\n-\n-        if args.is_empty() {\n-            throw_ub_format!(\n-                \"incorrect number of arguments for `prctl`: got {}, expected at least 1\",\n-                args.len()\n-            );\n-        }\n-\n-        let option = this.read_scalar(&args[0])?.to_i32()?;\n-        if option == this.eval_libc_i32(\"PR_SET_NAME\")? {\n-            if args.len() < 2 {\n-                throw_ub_format!(\n-                    \"incorrect number of arguments for `prctl` with `PR_SET_NAME`: got {}, expected at least 2\",\n-                    args.len()\n-                );\n-            }\n-\n-            let address = this.read_pointer(&args[1])?;\n-            let mut name = this.read_c_str(address)?.to_owned();\n-            // The name should be no more than 16 bytes, including the null\n-            // byte. Since `read_c_str` returns the string without the null\n-            // byte, we need to truncate to 15.\n-            name.truncate(15);\n-            this.set_thread_name(this.get_active_thread(), name);\n-        } else if option == this.eval_libc_i32(\"PR_GET_NAME\")? {\n-            if args.len() < 2 {\n-                throw_ub_format!(\n-                    \"incorrect number of arguments for `prctl` with `PR_SET_NAME`: got {}, expected at least 2\",\n-                    args.len()\n-                );\n-            }\n-\n-            let address = this.read_pointer(&args[1])?;\n-            let mut name = this.get_thread_name(this.get_active_thread()).to_vec();\n-            name.push(0u8);\n-            assert!(name.len() <= 16);\n-            this.write_bytes_ptr(address, name)?;\n-        } else {\n-            throw_unsup_format!(\"unsupported prctl option {}\", option);\n-        }\n-\n-        Ok(0)\n-    }\n-\n     fn sched_yield(&mut self) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n "}, {"sha": "f3aaccd57411b0eb8a2fcb1bdc33288fdcdf6c85", "filename": "tests/pass/libc.rs", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/38a495346f89b04653b552e0aaff201065bd8038/tests%2Fpass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a495346f89b04653b552e0aaff201065bd8038/tests%2Fpass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Flibc.rs?ref=38a495346f89b04653b552e0aaff201065bd8038", "patch": "@@ -277,58 +277,6 @@ fn test_rwlock_libc_static_initializer() {\n     }\n }\n \n-/// Test whether the `prctl` shim correctly sets the thread name.\n-///\n-/// Note: `prctl` exists only on Linux.\n-#[cfg(any(target_os = \"linux\"))]\n-fn test_prctl_thread_name() {\n-    use libc::c_long;\n-    use std::ffi::CString;\n-    unsafe {\n-        let mut buf = [255; 10];\n-        assert_eq!(\n-            libc::prctl(libc::PR_GET_NAME, buf.as_mut_ptr(), 0 as c_long, 0 as c_long, 0 as c_long),\n-            0,\n-        );\n-        // Rust runtime might set thread name, so we allow two options here.\n-        assert!(&buf[..10] == b\"<unnamed>\\0\" || &buf[..5] == b\"main\\0\");\n-        let thread_name = CString::new(\"hello\").expect(\"CString::new failed\");\n-        assert_eq!(\n-            libc::prctl(\n-                libc::PR_SET_NAME,\n-                thread_name.as_ptr(),\n-                0 as c_long,\n-                0 as c_long,\n-                0 as c_long,\n-            ),\n-            0,\n-        );\n-        let mut buf = [255; 6];\n-        assert_eq!(\n-            libc::prctl(libc::PR_GET_NAME, buf.as_mut_ptr(), 0 as c_long, 0 as c_long, 0 as c_long),\n-            0,\n-        );\n-        assert_eq!(b\"hello\\0\", &buf);\n-        let long_thread_name = CString::new(\"01234567890123456789\").expect(\"CString::new failed\");\n-        assert_eq!(\n-            libc::prctl(\n-                libc::PR_SET_NAME,\n-                long_thread_name.as_ptr(),\n-                0 as c_long,\n-                0 as c_long,\n-                0 as c_long,\n-            ),\n-            0,\n-        );\n-        let mut buf = [255; 16];\n-        assert_eq!(\n-            libc::prctl(libc::PR_GET_NAME, buf.as_mut_ptr(), 0 as c_long, 0 as c_long, 0 as c_long),\n-            0,\n-        );\n-        assert_eq!(b\"012345678901234\\0\", &buf);\n-    }\n-}\n-\n /// Tests whether each thread has its own `__errno_location`.\n fn test_thread_local_errno() {\n     #[cfg(target_os = \"linux\")]\n@@ -473,9 +421,6 @@ fn main() {\n     #[cfg(any(target_os = \"linux\"))]\n     test_mutex_libc_static_initializer_recursive();\n \n-    #[cfg(any(target_os = \"linux\"))]\n-    test_prctl_thread_name();\n-\n     test_thread_local_errno();\n \n     #[cfg(any(target_os = \"linux\"))]"}]}