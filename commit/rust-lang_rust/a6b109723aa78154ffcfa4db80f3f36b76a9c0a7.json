{"sha": "a6b109723aa78154ffcfa4db80f3f36b76a9c0a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YjEwOTcyM2FhNzgxNTRmZmNmYTRkYjgwZjNmMzZiNzZhOWMwYTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-03T01:10:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-03T01:10:40Z"}, "message": "auto merge of #19835 : pythonesque/rust/add-unordered-intrinsic, r=thestinger\n\nThis corresponds to the JMM memory model's non-volatile reads and writes to shared variables.  It provides fairly weak guarantees, but prevents UB (specifically, you will never see a value that was not written _at some point_ to the provided location).  It is not part of the C++ memory model and is only legal to provide to LLVM for loads and stores (not fences, atomicrmw, etc.).\r\n\r\nValid uses of this ordering are things like racy counters where you don't care about the operation actually being atomic, just want to avoid UB.  It cannot be used for synchronization without additional memory barriers since unordered loads and stores may be reordered freely by the optimizer (this is the main way it differs from relaxed).\r\n\r\nBecause it is new to Rust and it provides so few guarantees, for now only the intrinsic is provided--this patch doesn't add it to any of the higher-level atomic wrappers.", "tree": {"sha": "ea43adf184b114e02447b84305f73be34a8a9425", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea43adf184b114e02447b84305f73be34a8a9425"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6b109723aa78154ffcfa4db80f3f36b76a9c0a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b109723aa78154ffcfa4db80f3f36b76a9c0a7", "html_url": "https://github.com/rust-lang/rust/commit/a6b109723aa78154ffcfa4db80f3f36b76a9c0a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6b109723aa78154ffcfa4db80f3f36b76a9c0a7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c89417130f042c58adc60012e7cddc4ef70b70b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c89417130f042c58adc60012e7cddc4ef70b70b9", "html_url": "https://github.com/rust-lang/rust/commit/c89417130f042c58adc60012e7cddc4ef70b70b9"}, {"sha": "ccd88c523597e2e33a32e92175659d8f5e9a475b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccd88c523597e2e33a32e92175659d8f5e9a475b", "html_url": "https://github.com/rust-lang/rust/commit/ccd88c523597e2e33a32e92175659d8f5e9a475b"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "c5af7e27c6a84460a41a44859d5654fc9c5376b9", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6b109723aa78154ffcfa4db80f3f36b76a9c0a7/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b109723aa78154ffcfa4db80f3f36b76a9c0a7/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=a6b109723aa78154ffcfa4db80f3f36b76a9c0a7", "patch": "@@ -74,10 +74,12 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_load<T>(src: *const T) -> T;\n     pub fn atomic_load_acq<T>(src: *const T) -> T;\n     pub fn atomic_load_relaxed<T>(src: *const T) -> T;\n+    pub fn atomic_load_unordered<T>(src: *const T) -> T;\n \n     pub fn atomic_store<T>(dst: *mut T, val: T);\n     pub fn atomic_store_rel<T>(dst: *mut T, val: T);\n     pub fn atomic_store_relaxed<T>(dst: *mut T, val: T);\n+    pub fn atomic_store_unordered<T>(dst: *mut T, val: T);\n \n     pub fn atomic_xchg<T>(dst: *mut T, src: T) -> T;\n     pub fn atomic_xchg_acq<T>(dst: *mut T, src: T) -> T;"}, {"sha": "94149325018faf806f66255e6a64a02b7469b8a0", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6b109723aa78154ffcfa4db80f3f36b76a9c0a7/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b109723aa78154ffcfa4db80f3f36b76a9c0a7/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=a6b109723aa78154ffcfa4db80f3f36b76a9c0a7", "patch": "@@ -525,6 +525,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                 llvm::SequentiallyConsistent\n             } else {\n                 match split[2] {\n+                    \"unordered\" => llvm::Unordered,\n                     \"relaxed\" => llvm::Monotonic,\n                     \"acq\"     => llvm::Acquire,\n                     \"rel\"     => llvm::Release,"}]}