{"sha": "fc64aefe0aebe547322e86b3e5daa4564d038e63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNjRhZWZlMGFlYmU1NDczMjJlODZiM2U1ZGFhNDU2NGQwMzhlNjM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-25T01:40:22Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-25T01:57:23Z"}, "message": "rustdoc: Add a pass to trim whitespace from docs", "tree": {"sha": "5936fa0a750d428ce3001bb1cbbc9087fa26cae8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5936fa0a750d428ce3001bb1cbbc9087fa26cae8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc64aefe0aebe547322e86b3e5daa4564d038e63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc64aefe0aebe547322e86b3e5daa4564d038e63", "html_url": "https://github.com/rust-lang/rust/commit/fc64aefe0aebe547322e86b3e5daa4564d038e63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc64aefe0aebe547322e86b3e5daa4564d038e63/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb44fa2a2176bb81e3d7fa9e99503805d08eebf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb44fa2a2176bb81e3d7fa9e99503805d08eebf2", "html_url": "https://github.com/rust-lang/rust/commit/cb44fa2a2176bb81e3d7fa9e99503805d08eebf2"}], "stats": {"total": 132, "additions": 132, "deletions": 0}, "files": [{"sha": "258ff4aab8088180d4d387bd5ce7979d737458c8", "filename": "src/rustdoc/rustdoc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc64aefe0aebe547322e86b3e5daa4564d038e63/src%2Frustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/fc64aefe0aebe547322e86b3e5daa4564d038e63/src%2Frustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rc?ref=fc64aefe0aebe547322e86b3e5daa4564d038e63", "patch": "@@ -24,4 +24,5 @@ mod tystr_pass;\n mod prune_undoc_pass;\n mod prune_unexported_pass;\n mod desc_to_brief_pass;\n+mod trim_pass;\n mod astsrv;"}, {"sha": "c7445e8d35d3d309ada2d595262038431dcb5c27", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc64aefe0aebe547322e86b3e5daa4564d038e63/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc64aefe0aebe547322e86b3e5daa4564d038e63/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=fc64aefe0aebe547322e86b3e5daa4564d038e63", "patch": "@@ -101,6 +101,7 @@ fn run(source_file: str) {\n         // FIXME: This pass should be optional\n         prune_undoc_pass::mk_pass(),\n         desc_to_brief_pass::mk_pass(),\n+        trim_pass::mk_pass(),\n         gen::mk_pass {|| std::io:: stdout()}\n     ]);\n }\n\\ No newline at end of file"}, {"sha": "ad8ad279be7275490581286e727569475905233f", "filename": "src/rustdoc/trim_pass.rs", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/fc64aefe0aebe547322e86b3e5daa4564d038e63/src%2Frustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc64aefe0aebe547322e86b3e5daa4564d038e63/src%2Frustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftrim_pass.rs?ref=fc64aefe0aebe547322e86b3e5daa4564d038e63", "patch": "@@ -0,0 +1,130 @@\n+#[doc = \"\n+\n+Pulls a brief description out of a long description.\n+\n+If the first paragraph of a long description is short enough then it\n+is interpreted as the brief description.\n+\n+\"];\n+\n+export mk_pass;\n+\n+fn mk_pass() -> pass {\n+    run\n+}\n+\n+fn run(\n+    _srv: astsrv::srv,\n+    doc: doc::cratedoc\n+) -> doc::cratedoc {\n+    let fold = fold::fold({\n+        fold_mod: fold_mod,\n+        fold_const: fold_const,\n+        fold_fn: fold_fn\n+        with *fold::default_seq_fold(())\n+    });\n+    fold.fold_crate(fold, doc)\n+}\n+\n+fn trimopt(s: option<str>) -> option<str> {\n+    option::map(s, {|s| str::trim(s) })\n+}\n+\n+fn fold_mod(fold: fold::fold<()>, doc: doc::moddoc) -> doc::moddoc {\n+    let doc = fold::default_seq_fold_mod(fold, doc);\n+\n+    ~{\n+        brief: trimopt(doc.brief),\n+        desc: trimopt(doc.desc)\n+        with *doc\n+    }\n+}\n+\n+#[test]\n+fn should_trim_mod() {\n+    let source = \"#[doc(brief = \\\"\\nbrief\\n\\\", \\\n+                  desc = \\\"\\ndesc\\n\\\")] \\\n+                  mod m { }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = run(srv, doc);\n+    assert doc.topmod.mods[0].brief == some(\"brief\");\n+    assert doc.topmod.mods[0].desc == some(\"desc\");\n+}\n+\n+fn fold_const(fold: fold::fold<()>, doc: doc::constdoc) -> doc::constdoc {\n+    let doc = fold::default_seq_fold_const(fold, doc);\n+\n+    ~{\n+        brief: trimopt(doc.brief),\n+        desc: trimopt(doc.desc)\n+        with *doc\n+    }\n+}\n+\n+#[test]\n+fn should_trim_const() {\n+    let source = \"#[doc(brief = \\\"\\nbrief\\n\\\", \\\n+                  desc = \\\"\\ndesc\\n\\\")] \\\n+                  const a: bool = true;\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = run(srv, doc);\n+    assert doc.topmod.consts[0].brief == some(\"brief\");\n+    assert doc.topmod.consts[0].desc == some(\"desc\");\n+}\n+\n+fn fold_fn(fold: fold::fold<()>, doc: doc::fndoc) -> doc::fndoc {\n+    let doc = fold::default_seq_fold_fn(fold, doc);\n+\n+    ~{\n+        brief: trimopt(doc.brief),\n+        desc: trimopt(doc.desc),\n+        args: vec::map(doc.args) {|doc|\n+            ~{\n+                desc: trimopt(doc.desc)\n+                with *doc\n+            }\n+        },\n+        return: {\n+            desc: trimopt(doc.return.desc)\n+            with doc.return\n+        }\n+        with *doc\n+    }\n+}\n+\n+#[test]\n+fn should_trim_fn() {\n+    let source = \"#[doc(brief = \\\"\\nbrief\\n\\\", \\\n+                  desc = \\\"\\ndesc\\n\\\")] \\\n+                  fn a() { }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = run(srv, doc);\n+    assert doc.topmod.fns[0].brief == some(\"brief\");\n+    assert doc.topmod.fns[0].desc == some(\"desc\");\n+}\n+\n+#[test]\n+fn should_trim_args() {\n+    let source = \"#[doc(args(a = \\\"\\na\\n\\\"))] fn a(a: int) { }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = run(srv, doc);\n+    assert doc.topmod.fns[0].args[0].desc == some(\"a\");\n+}\n+\n+#[test]\n+fn should_trim_ret() {\n+    let source = \"#[doc(return = \\\"\\na\\n\\\")] fn a() -> int { }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = run(srv, doc);\n+    assert doc.topmod.fns[0].return.desc == some(\"a\");\n+}"}]}