{"sha": "73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczYzM2ZmRiZDIwNjBiZDQ1NWZmZWVmMzNkY2ExZWNjMmFlMDdlYmI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-04T09:44:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-04T09:44:31Z"}, "message": "Merge #2962\n\n2962: Differentiate underscore alias from named aliases r=matklad a=zombiefungus\n\npre for Fixing Issue 2736 \r\nedited to avoid autoclosing the issue\n\nCo-authored-by: zombiefungus <divmermarlav@gmail.com>", "tree": {"sha": "59440abef01f92ac250e45cac4923dd6de712180", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59440abef01f92ac250e45cac4923dd6de712180"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeOTz/CRBK7hj4Ov3rIwAAdHIIAFq8nQWnytaEsPoGy7RavBHk\nmlgOHEvzODzUqZ+siTThwfb53RLHO2odsLmtCzZBcE6GbZ9ngfNqMUdCtosiwLqN\nHvr1OBUMFRLShbhRQHicJLwvHhxoT1n5BF5lJ155nREnqKF5io4QzON9afZ/5OOj\nTnQAMBKS+0NBvoq0kHZ5SupfqwNmNIDhB7DrnAeVWqlcg3p2QQqZJ37Wy7Oi8E3V\nkRyUk3x13zue6oHGK5KlxGIoaljsYSugkmlTVcKKVSf/kT20XWJbMWAtcNx2LQgW\n/ag4sbFU6X6w/2JXlBdMEswz7ro1AcoIkvT2Vev/pAIqrW31ry1jcpY8DJ03h+Q=\n=3gXg\n-----END PGP SIGNATURE-----\n", "payload": "tree 59440abef01f92ac250e45cac4923dd6de712180\nparent 918547dbe9a2907401102eba491ac25cebe1404d\nparent f4f71e361ee632a7a09b633934a9c0a11f4a9be7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1580809471 +0000\ncommitter GitHub <noreply@github.com> 1580809471 +0000\n\nMerge #2962\n\n2962: Differentiate underscore alias from named aliases r=matklad a=zombiefungus\n\npre for Fixing Issue 2736 \r\nedited to avoid autoclosing the issue\n\nCo-authored-by: zombiefungus <divmermarlav@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb", "html_url": "https://github.com/rust-lang/rust/commit/73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "918547dbe9a2907401102eba491ac25cebe1404d", "url": "https://api.github.com/repos/rust-lang/rust/commits/918547dbe9a2907401102eba491ac25cebe1404d", "html_url": "https://github.com/rust-lang/rust/commit/918547dbe9a2907401102eba491ac25cebe1404d"}, {"sha": "f4f71e361ee632a7a09b633934a9c0a11f4a9be7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f71e361ee632a7a09b633934a9c0a11f4a9be7", "html_url": "https://github.com/rust-lang/rust/commit/f4f71e361ee632a7a09b633934a9c0a11f4a9be7"}], "stats": {"total": 48, "additions": 34, "deletions": 14}, "files": [{"sha": "6352c71ef18c387866ce06842c510e1a774d704f", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb", "patch": "@@ -22,7 +22,7 @@ use crate::{\n         diagnostics::DefDiagnostic, mod_resolution::ModDir, path_resolution::ReachedFixedPoint,\n         raw, BuiltinShadowMode, CrateDefMap, ModuleData, ModuleOrigin, ResolveMode,\n     },\n-    path::{ModPath, PathKind},\n+    path::{ImportAlias, ModPath, PathKind},\n     per_ns::PerNs,\n     visibility::Visibility,\n     AdtId, AstId, ConstLoc, ContainerId, EnumLoc, EnumVariantId, FunctionLoc, ImplLoc, Intern,\n@@ -438,7 +438,11 @@ where\n         } else {\n             match import.path.segments.last() {\n                 Some(last_segment) => {\n-                    let name = import.alias.clone().unwrap_or_else(|| last_segment.clone());\n+                    let name = match &import.alias {\n+                        Some(ImportAlias::Alias(name)) => name.clone(),\n+                        Some(ImportAlias::Underscore) => last_segment.clone(), // FIXME rust-analyzer#2736\n+                        None => last_segment.clone(),\n+                    };\n                     log::debug!(\"resolved import {:?} ({:?}) to {:?}\", name, import, def);\n \n                     // extern crates in the crate root are special-cased to insert entries into the extern prelude: rust-lang/rust#54658"}, {"sha": "650cf1f98b0b10407bfd62785d04f0da9e5370ca", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb", "patch": "@@ -22,8 +22,11 @@ use ra_syntax::{\n use test_utils::tested_by;\n \n use crate::{\n-    attr::Attrs, db::DefDatabase, path::ModPath, visibility::RawVisibility, FileAstId, HirFileId,\n-    InFile,\n+    attr::Attrs,\n+    db::DefDatabase,\n+    path::{ImportAlias, ModPath},\n+    visibility::RawVisibility,\n+    FileAstId, HirFileId, InFile,\n };\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n@@ -145,7 +148,7 @@ impl_arena_id!(Import);\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ImportData {\n     pub(super) path: ModPath,\n-    pub(super) alias: Option<Name>,\n+    pub(super) alias: Option<ImportAlias>,\n     pub(super) is_glob: bool,\n     pub(super) is_prelude: bool,\n     pub(super) is_extern_crate: bool,\n@@ -353,7 +356,11 @@ impl RawItemsCollector {\n             let path = ModPath::from_name_ref(&name_ref);\n             let visibility =\n                 RawVisibility::from_ast_with_hygiene(extern_crate.visibility(), &self.hygiene);\n-            let alias = extern_crate.alias().and_then(|a| a.name()).map(|it| it.as_name());\n+            let alias = extern_crate.alias().map(|a| {\n+                a.name()\n+                    .map(|it| it.as_name())\n+                    .map_or(ImportAlias::Underscore, |a| ImportAlias::Alias(a))\n+            });\n             let attrs = self.parse_attrs(&extern_crate);\n             // FIXME: cfg_attr\n             let is_macro_use = extern_crate.has_atom_attr(\"macro_use\");"}, {"sha": "246032c13fc79a13e22ee9a8382c607981526337", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb", "patch": "@@ -34,6 +34,14 @@ pub enum PathKind {\n     DollarCrate(CrateId),\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum ImportAlias {\n+    /// Unnamed alias, as in `use Foo as _;`\n+    Underscore,\n+    /// Named alias\n+    Alias(Name),\n+}\n+\n impl ModPath {\n     pub fn from_src(path: ast::Path, hygiene: &Hygiene) -> Option<ModPath> {\n         lower::lower_path(path, hygiene).map(|it| it.mod_path)\n@@ -57,7 +65,7 @@ impl ModPath {\n     pub(crate) fn expand_use_item(\n         item_src: InFile<ast::UseItem>,\n         hygiene: &Hygiene,\n-        mut cb: impl FnMut(ModPath, &ast::UseTree, /* is_glob */ bool, Option<Name>),\n+        mut cb: impl FnMut(ModPath, &ast::UseTree, /* is_glob */ bool, Option<ImportAlias>),\n     ) {\n         if let Some(tree) = item_src.value.use_tree() {\n             lower::lower_use_tree(None, tree, hygiene, &mut cb);"}, {"sha": "d2bc9d1934547f761b9ca2fc50017ae129ae9179", "filename": "crates/ra_hir_def/src/path/lower/lower_use.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs?ref=73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb", "patch": "@@ -4,20 +4,17 @@\n use std::iter;\n \n use either::Either;\n-use hir_expand::{\n-    hygiene::Hygiene,\n-    name::{AsName, Name},\n-};\n+use hir_expand::{hygiene::Hygiene, name::AsName};\n use ra_syntax::ast::{self, NameOwner};\n use test_utils::tested_by;\n \n-use crate::path::{ModPath, PathKind};\n+use crate::path::{ImportAlias, ModPath, PathKind};\n \n pub(crate) fn lower_use_tree(\n     prefix: Option<ModPath>,\n     tree: ast::UseTree,\n     hygiene: &Hygiene,\n-    cb: &mut dyn FnMut(ModPath, &ast::UseTree, bool, Option<Name>),\n+    cb: &mut dyn FnMut(ModPath, &ast::UseTree, bool, Option<ImportAlias>),\n ) {\n     if let Some(use_tree_list) = tree.use_tree_list() {\n         let prefix = match tree.path() {\n@@ -34,7 +31,11 @@ pub(crate) fn lower_use_tree(\n             lower_use_tree(prefix.clone(), child_tree, hygiene, cb);\n         }\n     } else {\n-        let alias = tree.alias().and_then(|a| a.name()).map(|a| a.as_name());\n+        let alias = tree.alias().map(|a| {\n+            a.name()\n+                .map(|it| it.as_name())\n+                .map_or(ImportAlias::Underscore, |a| ImportAlias::Alias(a))\n+        });\n         let is_glob = tree.has_star();\n         if let Some(ast_path) = tree.path() {\n             // Handle self in a path."}]}