{"sha": "abce9e7c9fc0520da4556ca641cce9aee462c2fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiY2U5ZTdjOWZjMDUyMGRhNDU1NmNhNjQxY2NlOWFlZTQ2MmMyZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-30T21:44:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-30T21:44:29Z"}, "message": "Auto merge of #6092 - jethrogb:jb/inline-asm-syntax-lint, r=ebroto\n\nAdd lint for inline assembly syntax style preference\n\nchangelog: Add lint for inline assembly syntax style preference", "tree": {"sha": "e604fd410e3aa929452827afd3e81b1bf33cf914", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e604fd410e3aa929452827afd3e81b1bf33cf914"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abce9e7c9fc0520da4556ca641cce9aee462c2fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abce9e7c9fc0520da4556ca641cce9aee462c2fc", "html_url": "https://github.com/rust-lang/rust/commit/abce9e7c9fc0520da4556ca641cce9aee462c2fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abce9e7c9fc0520da4556ca641cce9aee462c2fc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99483be1c7629a17fad45b9c208982c3891639e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/99483be1c7629a17fad45b9c208982c3891639e3", "html_url": "https://github.com/rust-lang/rust/commit/99483be1c7629a17fad45b9c208982c3891639e3"}, {"sha": "507561ecfcec33d4263cff17cfe953518b8c3ce6", "url": "https://api.github.com/repos/rust-lang/rust/commits/507561ecfcec33d4263cff17cfe953518b8c3ce6", "html_url": "https://github.com/rust-lang/rust/commit/507561ecfcec33d4263cff17cfe953518b8c3ce6"}], "stats": {"total": 223, "additions": 223, "deletions": 0}, "files": [{"sha": "0de6f4b4235f198a8c95418dad8080ce11216dd1", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abce9e7c9fc0520da4556ca641cce9aee462c2fc/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/abce9e7c9fc0520da4556ca641cce9aee462c2fc/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=abce9e7c9fc0520da4556ca641cce9aee462c2fc", "patch": "@@ -1635,6 +1635,8 @@ Released 2018-09-13\n [`inherent_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string\n [`inherent_to_string_shadow_display`]: https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string_shadow_display\n [`inline_always`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_always\n+[`inline_asm_x86_att_syntax`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_asm_x86_att_syntax\n+[`inline_asm_x86_intel_syntax`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_asm_x86_intel_syntax\n [`inline_fn_without_body`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_fn_without_body\n [`int_plus_one`]: https://rust-lang.github.io/rust-clippy/master/index.html#int_plus_one\n [`integer_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#integer_arithmetic"}, {"sha": "ef1f1a14afcace4c1c21eb7e1e3e373b02194522", "filename": "clippy_lints/src/asm_syntax.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/abce9e7c9fc0520da4556ca641cce9aee462c2fc/clippy_lints%2Fsrc%2Fasm_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abce9e7c9fc0520da4556ca641cce9aee462c2fc/clippy_lints%2Fsrc%2Fasm_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fasm_syntax.rs?ref=abce9e7c9fc0520da4556ca641cce9aee462c2fc", "patch": "@@ -0,0 +1,125 @@\n+use std::fmt;\n+\n+use crate::utils::span_lint_and_help;\n+use rustc_ast::ast::{Expr, ExprKind, InlineAsmOptions};\n+use rustc_lint::{EarlyContext, EarlyLintPass, Lint};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+#[derive(Clone, Copy, PartialEq, Eq)]\n+enum AsmStyle {\n+    Intel,\n+    Att,\n+}\n+\n+impl fmt::Display for AsmStyle {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            AsmStyle::Intel => f.write_str(\"Intel\"),\n+            AsmStyle::Att => f.write_str(\"AT&T\"),\n+        }\n+    }\n+}\n+\n+impl std::ops::Not for AsmStyle {\n+    type Output = AsmStyle;\n+\n+    fn not(self) -> AsmStyle {\n+        match self {\n+            AsmStyle::Intel => AsmStyle::Att,\n+            AsmStyle::Att => AsmStyle::Intel,\n+        }\n+    }\n+}\n+\n+fn check_expr_asm_syntax(lint: &'static Lint, cx: &EarlyContext<'_>, expr: &Expr, check_for: AsmStyle) {\n+    if let ExprKind::InlineAsm(ref inline_asm) = expr.kind {\n+        let style = if inline_asm.options.contains(InlineAsmOptions::ATT_SYNTAX) {\n+            AsmStyle::Att\n+        } else {\n+            AsmStyle::Intel\n+        };\n+\n+        if style == check_for {\n+            span_lint_and_help(\n+                cx,\n+                lint,\n+                expr.span,\n+                &format!(\"{} x86 assembly syntax used\", style),\n+                None,\n+                &format!(\"use {} x86 assembly syntax\", !style),\n+            );\n+        }\n+    }\n+}\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of Intel x86 assembly syntax.\n+    ///\n+    /// **Why is this bad?** The lint has been enabled to indicate a preference\n+    /// for AT&T x86 assembly syntax.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust,no_run\n+    /// # #![feature(asm)]\n+    /// # unsafe { let ptr = \"\".as_ptr();\n+    /// asm!(\"lea {}, [{}]\", lateout(reg) _, in(reg) ptr);\n+    /// # }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,no_run\n+    /// # #![feature(asm)]\n+    /// # unsafe { let ptr = \"\".as_ptr();\n+    /// asm!(\"lea ({}), {}\", in(reg) ptr, lateout(reg) _, options(att_syntax));\n+    /// # }\n+    /// ```\n+    pub INLINE_ASM_X86_INTEL_SYNTAX,\n+    restriction,\n+    \"prefer AT&T x86 assembly syntax\"\n+}\n+\n+declare_lint_pass!(InlineAsmX86IntelSyntax => [INLINE_ASM_X86_INTEL_SYNTAX]);\n+\n+impl EarlyLintPass for InlineAsmX86IntelSyntax {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n+        check_expr_asm_syntax(Self::get_lints()[0], cx, expr, AsmStyle::Intel);\n+    }\n+}\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of AT&T x86 assembly syntax.\n+    ///\n+    /// **Why is this bad?** The lint has been enabled to indicate a preference\n+    /// for Intel x86 assembly syntax.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust,no_run\n+    /// # #![feature(asm)]\n+    /// # unsafe { let ptr = \"\".as_ptr();\n+    /// asm!(\"lea ({}), {}\", in(reg) ptr, lateout(reg) _, options(att_syntax));\n+    /// # }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,no_run\n+    /// # #![feature(asm)]\n+    /// # unsafe { let ptr = \"\".as_ptr();\n+    /// asm!(\"lea {}, [{}]\", lateout(reg) _, in(reg) ptr);\n+    /// # }\n+    /// ```\n+    pub INLINE_ASM_X86_ATT_SYNTAX,\n+    restriction,\n+    \"prefer Intel x86 assembly syntax\"\n+}\n+\n+declare_lint_pass!(InlineAsmX86AttSyntax => [INLINE_ASM_X86_ATT_SYNTAX]);\n+\n+impl EarlyLintPass for InlineAsmX86AttSyntax {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n+        check_expr_asm_syntax(Self::get_lints()[0], cx, expr, AsmStyle::Att);\n+    }\n+}"}, {"sha": "10da59c7a7a0714696f1674ea70bf2e1e5b8d560", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/abce9e7c9fc0520da4556ca641cce9aee462c2fc/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abce9e7c9fc0520da4556ca641cce9aee462c2fc/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=abce9e7c9fc0520da4556ca641cce9aee462c2fc", "patch": "@@ -153,6 +153,7 @@ mod utils;\n mod approx_const;\n mod arithmetic;\n mod as_conversions;\n+mod asm_syntax;\n mod assertions_on_constants;\n mod assign_ops;\n mod async_yields_async;\n@@ -487,6 +488,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &arithmetic::FLOAT_ARITHMETIC,\n         &arithmetic::INTEGER_ARITHMETIC,\n         &as_conversions::AS_CONVERSIONS,\n+        &asm_syntax::INLINE_ASM_X86_ATT_SYNTAX,\n+        &asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX,\n         &assertions_on_constants::ASSERTIONS_ON_CONSTANTS,\n         &assign_ops::ASSIGN_OP_PATTERN,\n         &assign_ops::MISREFACTORED_ASSIGN_OP,\n@@ -1123,12 +1126,16 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n     let disallowed_methods = conf.disallowed_methods.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_late_pass(move || box disallowed_method::DisallowedMethod::new(&disallowed_methods));\n+    store.register_early_pass(|| box asm_syntax::InlineAsmX86AttSyntax);\n+    store.register_early_pass(|| box asm_syntax::InlineAsmX86IntelSyntax);\n \n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n         LintId::of(&arithmetic::INTEGER_ARITHMETIC),\n         LintId::of(&as_conversions::AS_CONVERSIONS),\n+        LintId::of(&asm_syntax::INLINE_ASM_X86_ATT_SYNTAX),\n+        LintId::of(&asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX),\n         LintId::of(&create_dir::CREATE_DIR),\n         LintId::of(&dbg_macro::DBG_MACRO),\n         LintId::of(&else_if_without_else::ELSE_IF_WITHOUT_ELSE),"}, {"sha": "16ceb6179654bc79207a731992b1f660fe68d8cf", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/abce9e7c9fc0520da4556ca641cce9aee462c2fc/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abce9e7c9fc0520da4556ca641cce9aee462c2fc/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=abce9e7c9fc0520da4556ca641cce9aee462c2fc", "patch": "@@ -899,6 +899,20 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"attrs\",\n     },\n+    Lint {\n+        name: \"inline_asm_x86_att_syntax\",\n+        group: \"restriction\",\n+        desc: \"prefer Intel x86 assembly syntax\",\n+        deprecation: None,\n+        module: \"asm_syntax\",\n+    },\n+    Lint {\n+        name: \"inline_asm_x86_intel_syntax\",\n+        group: \"restriction\",\n+        desc: \"prefer AT&T x86 assembly syntax\",\n+        deprecation: None,\n+        module: \"asm_syntax\",\n+    },\n     Lint {\n         name: \"inline_fn_without_body\",\n         group: \"correctness\","}, {"sha": "658cae397e1494b3f5ab0595a21d501229e5d9e7", "filename": "tests/ui/asm_syntax.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/abce9e7c9fc0520da4556ca641cce9aee462c2fc/tests%2Fui%2Fasm_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abce9e7c9fc0520da4556ca641cce9aee462c2fc/tests%2Fui%2Fasm_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm_syntax.rs?ref=abce9e7c9fc0520da4556ca641cce9aee462c2fc", "patch": "@@ -0,0 +1,31 @@\n+#![feature(asm)]\n+// only-x86_64\n+\n+#[warn(clippy::inline_asm_x86_intel_syntax)]\n+mod warn_intel {\n+    pub(super) unsafe fn use_asm() {\n+        asm!(\"\");\n+        asm!(\"\", options());\n+        asm!(\"\", options(nostack));\n+        asm!(\"\", options(att_syntax));\n+        asm!(\"\", options(nostack, att_syntax));\n+    }\n+}\n+\n+#[warn(clippy::inline_asm_x86_att_syntax)]\n+mod warn_att {\n+    pub(super) unsafe fn use_asm() {\n+        asm!(\"\");\n+        asm!(\"\", options());\n+        asm!(\"\", options(nostack));\n+        asm!(\"\", options(att_syntax));\n+        asm!(\"\", options(nostack, att_syntax));\n+    }\n+}\n+\n+fn main() {\n+    unsafe {\n+        warn_att::use_asm();\n+        warn_intel::use_asm();\n+    }\n+}"}, {"sha": "27b51166eacb8321c52938fed00fddbbe14602a1", "filename": "tests/ui/asm_syntax.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/abce9e7c9fc0520da4556ca641cce9aee462c2fc/tests%2Fui%2Fasm_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abce9e7c9fc0520da4556ca641cce9aee462c2fc/tests%2Fui%2Fasm_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm_syntax.stderr?ref=abce9e7c9fc0520da4556ca641cce9aee462c2fc", "patch": "@@ -0,0 +1,44 @@\n+error: Intel x86 assembly syntax used\n+  --> $DIR/asm_syntax.rs:7:9\n+   |\n+LL |         asm!(\"\");\n+   |         ^^^^^^^^^\n+   |\n+   = note: `-D clippy::inline-asm-x86-intel-syntax` implied by `-D warnings`\n+   = help: use AT&T x86 assembly syntax\n+\n+error: Intel x86 assembly syntax used\n+  --> $DIR/asm_syntax.rs:8:9\n+   |\n+LL |         asm!(\"\", options());\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use AT&T x86 assembly syntax\n+\n+error: Intel x86 assembly syntax used\n+  --> $DIR/asm_syntax.rs:9:9\n+   |\n+LL |         asm!(\"\", options(nostack));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use AT&T x86 assembly syntax\n+\n+error: AT&T x86 assembly syntax used\n+  --> $DIR/asm_syntax.rs:21:9\n+   |\n+LL |         asm!(\"\", options(att_syntax));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::inline-asm-x86-att-syntax` implied by `-D warnings`\n+   = help: use Intel x86 assembly syntax\n+\n+error: AT&T x86 assembly syntax used\n+  --> $DIR/asm_syntax.rs:22:9\n+   |\n+LL |         asm!(\"\", options(nostack, att_syntax));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use Intel x86 assembly syntax\n+\n+error: aborting due to 5 previous errors\n+"}]}