{"sha": "d8263c4758e8821d87d4fc300fd30e78457c769f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MjYzYzQ3NThlODgyMWQ4N2Q0ZmMzMDBmZDMwZTc4NDU3Yzc2OWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-28T21:39:57Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-06T16:42:46Z"}, "message": "add function to retrace a DefPath to a DefId\n\nused after loading state from previous compilation", "tree": {"sha": "caaa65d415239893022f661492f330648ce0a2eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caaa65d415239893022f661492f330648ce0a2eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8263c4758e8821d87d4fc300fd30e78457c769f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8263c4758e8821d87d4fc300fd30e78457c769f", "html_url": "https://github.com/rust-lang/rust/commit/d8263c4758e8821d87d4fc300fd30e78457c769f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8263c4758e8821d87d4fc300fd30e78457c769f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9b6205aff943d44820df53d63d14a06b319b9dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b6205aff943d44820df53d63d14a06b319b9dd", "html_url": "https://github.com/rust-lang/rust/commit/a9b6205aff943d44820df53d63d14a06b319b9dd"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "2e26fe5057e2f6913bad177ded8c74e75a652f7f", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d8263c4758e8821d87d4fc300fd30e78457c769f/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8263c4758e8821d87d4fc300fd30e78457c769f/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=d8263c4758e8821d87d4fc300fd30e78457c769f", "patch": "@@ -203,17 +203,56 @@ impl Definitions {\n         }\n     }\n \n+    pub fn retrace_path(&self, path: &DefPath) -> Option<DefIndex> {\n+        debug!(\"retrace_path(path={:?})\", path);\n+\n+        // we assume that we only want to retrace paths relative to\n+        // the crate root\n+        assert!(path.is_local());\n+\n+        let root_key = DefKey {\n+            parent: None,\n+            disambiguated_data: DisambiguatedDefPathData {\n+                data: DefPathData::CrateRoot,\n+                disambiguator: 0,\n+            },\n+        };\n+        let root_id = self.key_map[&root_key];\n+\n+        debug!(\"retrace_path: root_id={:?}\", root_id);\n+\n+        let mut id = root_id;\n+        for data in &path.data {\n+            let key = DefKey { parent: Some(id), disambiguated_data: data.clone() };\n+            debug!(\"key = {:?}\", key);\n+            id = match self.key_map.get(&key) {\n+                Some(&id) => id,\n+                None => return None\n+            };\n+        }\n+\n+        Some(id)\n+    }\n+\n     pub fn create_def_with_parent(&mut self,\n                                   parent: Option<DefIndex>,\n                                   node_id: ast::NodeId,\n                                   data: DefPathData)\n                                   -> DefIndex {\n+        debug!(\"create_def_with_parent(parent={:?}, node_id={:?}, data={:?})\",\n+               parent, node_id, data);\n+\n         assert!(!self.node_map.contains_key(&node_id),\n                 \"adding a def'n for node-id {:?} and data {:?} but a previous def'n exists: {:?}\",\n                 node_id,\n                 data,\n                 self.data[self.node_map[&node_id].as_usize()]);\n \n+        assert!(parent.is_some() ^ match data {\n+            DefPathData::CrateRoot | DefPathData::InlinedRoot(_) => true,\n+            _ => false,\n+        });\n+\n         // Find a unique DefKey. This basically means incrementing the disambiguator\n         // until we get no match.\n         let mut key = DefKey {\n@@ -228,12 +267,17 @@ impl Definitions {\n             key.disambiguated_data.disambiguator += 1;\n         }\n \n+        debug!(\"create_def_with_parent: after disambiguation, key = {:?}\", key);\n+\n         // Create the definition.\n         let index = DefIndex::new(self.data.len());\n         self.data.push(DefData { key: key.clone(), node_id: node_id });\n+        debug!(\"create_def_with_parent: node_map[{:?}] = {:?}\", node_id, index);\n         self.node_map.insert(node_id, index);\n+        debug!(\"create_def_with_parent: key_map[{:?}] = {:?}\", key, index);\n         self.key_map.insert(key, index);\n \n+\n         index\n     }\n }"}, {"sha": "644591d22c8158ac2edbbae4b47b21b7d5fb1ec7", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d8263c4758e8821d87d4fc300fd30e78457c769f/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8263c4758e8821d87d4fc300fd30e78457c769f/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=d8263c4758e8821d87d4fc300fd30e78457c769f", "patch": "@@ -282,6 +282,11 @@ impl<'ast> Map<'ast> {\n         self.definitions.borrow().def_path(def_id.index)\n     }\n \n+    pub fn retrace_path(&self, path: &DefPath) -> Option<DefId> {\n+        self.definitions.borrow().retrace_path(path)\n+                                 .map(DefId::local)\n+    }\n+\n     pub fn local_def_id(&self, node: NodeId) -> DefId {\n         self.opt_local_def_id(node).unwrap_or_else(|| {\n             bug!(\"local_def_id: no entry for `{}`, which has a map of `{:?}`\","}]}