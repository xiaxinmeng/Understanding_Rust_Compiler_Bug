{"sha": "6f6fe3e651832796b2454dad5adafe9e21a09498", "node_id": "C_kwDOAAsO6NoAKDZmNmZlM2U2NTE4MzI3OTZiMjQ1NGRhZDVhZGFmZTllMjFhMDk0OTg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-28T00:40:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-28T00:40:35Z"}, "message": "Rollup merge of #96466 - compiler-errors:error-collect-array, r=davidtwco\n\nBetter error messages when collecting into `[T; n]`\n\nFixes #96461", "tree": {"sha": "14fb5393e6ef193a91be67da710bd1f2e755a470", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14fb5393e6ef193a91be67da710bd1f2e755a470"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f6fe3e651832796b2454dad5adafe9e21a09498", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiaeKDCRBK7hj4Ov3rIwAANkYIALHok/KH/1turEizXJipmaOr\nGsEoPNTIfBM6EIctkPa9yg/xHuQPqBETZYeYEeYKUK9Y9HpLsLhKkDL4n/47S4F8\nFMYyh8lrcdTOnkkEwALLEPDtsgBzvIoW63RAuuhmPztZ5h454ocyNjzO5IZIdToj\nSdihP3gUrI1XAI4fMTxA3t7jlagJN2XFWycdQB9OEV3CjT7Mgz5ULcxEm+uqcsPW\nsdroGUOnP4abMI+BuQHvToER9cOR2LRahaHL1vqYsgJJr17wAD8w9+Bztv68rGJA\nmRZMObLCgFJMWVwRCOXLlQN8dHpw6NbNkb7ZWa/15Axhn3f3eelXdk4w506uVHs=\n=tf5z\n-----END PGP SIGNATURE-----\n", "payload": "tree 14fb5393e6ef193a91be67da710bd1f2e755a470\nparent d956d014f28d4a57e62b22ef6993a7d6811a573d\nparent 83d701e569914b9dbf7be002f62d63e790a5cb70\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1651106435 +0200\ncommitter GitHub <noreply@github.com> 1651106435 +0200\n\nRollup merge of #96466 - compiler-errors:error-collect-array, r=davidtwco\n\nBetter error messages when collecting into `[T; n]`\n\nFixes #96461\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f6fe3e651832796b2454dad5adafe9e21a09498", "html_url": "https://github.com/rust-lang/rust/commit/6f6fe3e651832796b2454dad5adafe9e21a09498", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f6fe3e651832796b2454dad5adafe9e21a09498/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d956d014f28d4a57e62b22ef6993a7d6811a573d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d956d014f28d4a57e62b22ef6993a7d6811a573d", "html_url": "https://github.com/rust-lang/rust/commit/d956d014f28d4a57e62b22ef6993a7d6811a573d"}, {"sha": "83d701e569914b9dbf7be002f62d63e790a5cb70", "url": "https://api.github.com/repos/rust-lang/rust/commits/83d701e569914b9dbf7be002f62d63e790a5cb70", "html_url": "https://github.com/rust-lang/rust/commit/83d701e569914b9dbf7be002f62d63e790a5cb70"}], "stats": {"total": 101, "additions": 69, "deletions": 32}, "files": [{"sha": "9e9c230aebb85b2a597cf5dad201e09aa02eda42", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6f6fe3e651832796b2454dad5adafe9e21a09498/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6fe3e651832796b2454dad5adafe9e21a09498/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=6f6fe3e651832796b2454dad5adafe9e21a09498", "patch": "@@ -217,22 +217,42 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 flags.push((sym::_Self, Some(shortname.to_owned())));\n             }\n \n+            // Slices give us `[]`, `[{ty}]`\n+            if let ty::Slice(aty) = self_ty.kind() {\n+                flags.push((sym::_Self, Some(\"[]\".to_string())));\n+                if let Some(def) = aty.ty_adt_def() {\n+                    // We also want to be able to select the slice's type's original\n+                    // signature with no type arguments resolved\n+                    let type_string = self.tcx.type_of(def.did()).to_string();\n+                    flags.push((sym::_Self, Some(format!(\"[{type_string}]\"))));\n+                }\n+                if aty.is_integral() {\n+                    flags.push((sym::_Self, Some(\"[{integral}]\".to_string())));\n+                }\n+            }\n+\n+            // Arrays give us `[]`, `[{ty}; _]` and `[{ty}; N]`\n             if let ty::Array(aty, len) = self_ty.kind() {\n-                flags.push((sym::_Self, Some(\"[]\".to_owned())));\n-                flags.push((sym::_Self, Some(format!(\"[{}]\", aty))));\n+                flags.push((sym::_Self, Some(\"[]\".to_string())));\n+                let len = len.val().try_to_value().and_then(|v| v.try_to_machine_usize(self.tcx));\n+                flags.push((sym::_Self, Some(format!(\"[{}; _]\", aty))));\n+                if let Some(n) = len {\n+                    flags.push((sym::_Self, Some(format!(\"[{}; {}]\", aty, n))));\n+                }\n                 if let Some(def) = aty.ty_adt_def() {\n                     // We also want to be able to select the array's type's original\n                     // signature with no type arguments resolved\n                     let type_string = self.tcx.type_of(def.did()).to_string();\n-                    flags.push((sym::_Self, Some(format!(\"[{}]\", type_string))));\n-\n-                    let len =\n-                        len.val().try_to_value().and_then(|v| v.try_to_machine_usize(self.tcx));\n-                    let string = match len {\n-                        Some(n) => format!(\"[{}; {}]\", type_string, n),\n-                        None => format!(\"[{}; _]\", type_string),\n-                    };\n-                    flags.push((sym::_Self, Some(string)));\n+                    flags.push((sym::_Self, Some(format!(\"[{type_string}; _]\"))));\n+                    if let Some(n) = len {\n+                        flags.push((sym::_Self, Some(format!(\"[{type_string}; {n}]\"))));\n+                    }\n+                }\n+                if aty.is_integral() {\n+                    flags.push((sym::_Self, Some(\"[{integral}; _]\".to_string())));\n+                    if let Some(n) = len {\n+                        flags.push((sym::_Self, Some(format!(\"[{{integral}}; {n}]\"))));\n+                    }\n                 }\n             }\n             if let ty::Dynamic(traits, _) = self_ty.kind() {"}, {"sha": "12ca508bed2b93e5e49d494c9f7429e676c68d3b", "filename": "library/core/src/iter/traits/collect.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6f6fe3e651832796b2454dad5adafe9e21a09498/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6fe3e651832796b2454dad5adafe9e21a09498/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs?ref=6f6fe3e651832796b2454dad5adafe9e21a09498", "patch": "@@ -96,30 +96,24 @@\n #[rustc_on_unimplemented(\n     on(\n         _Self = \"[{A}]\",\n-        message = \"a value of type `{Self}` cannot be built since `{Self}` has no definite size\",\n+        message = \"a slice of type `{Self}` cannot be built since `{Self}` has no definite size\",\n         label = \"try explicitly collecting into a `Vec<{A}>`\",\n     ),\n     on(\n-        all(\n-            A = \"{integer}\",\n-            any(\n-                _Self = \"[i8]\",\n-                _Self = \"[i16]\",\n-                _Self = \"[i32]\",\n-                _Self = \"[i64]\",\n-                _Self = \"[i128]\",\n-                _Self = \"[isize]\",\n-                _Self = \"[u8]\",\n-                _Self = \"[u16]\",\n-                _Self = \"[u32]\",\n-                _Self = \"[u64]\",\n-                _Self = \"[u128]\",\n-                _Self = \"[usize]\"\n-            )\n-        ),\n-        message = \"a value of type `{Self}` cannot be built since `{Self}` has no definite size\",\n+        all(A = \"{integer}\", any(_Self = \"[{integral}]\",)),\n+        message = \"a slice of type `{Self}` cannot be built since `{Self}` has no definite size\",\n         label = \"try explicitly collecting into a `Vec<{A}>`\",\n     ),\n+    on(\n+        _Self = \"[{A}; _]\",\n+        message = \"an array of type `{Self}` cannot be built directly from an iterator\",\n+        label = \"try collecting into a `Vec<{A}>`, then using `.try_into()`\",\n+    ),\n+    on(\n+        all(A = \"{integer}\", any(_Self = \"[{integral}; _]\",)),\n+        message = \"an array of type `{Self}` cannot be built directly from an iterator\",\n+        label = \"try collecting into a `Vec<{A}>`, then using `.try_into()`\",\n+    ),\n     message = \"a value of type `{Self}` cannot be built from an iterator \\\n                over elements of type `{A}`\",\n     label = \"value of type `{Self}` cannot be built from `std::iter::Iterator<Item={A}>`\""}, {"sha": "a1144c8cb8c6ae72eef12533c75420e038c4eb51", "filename": "src/test/ui/iterators/collect-into-array.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f6fe3e651832796b2454dad5adafe9e21a09498/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6fe3e651832796b2454dad5adafe9e21a09498/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.rs?ref=6f6fe3e651832796b2454dad5adafe9e21a09498", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    //~^ NOTE required by a bound in this\n+    let whatever: [u32; 10] = (0..10).collect();\n+    //~^ ERROR an array of type `[u32; 10]` cannot be built directly from an iterator\n+    //~| NOTE try collecting into a `Vec<{integer}>`, then using `.try_into()`\n+    //~| NOTE required by a bound in `collect`\n+}"}, {"sha": "7be53a4873bccd45d12eb78e47a3e390988d7f37", "filename": "src/test/ui/iterators/collect-into-array.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f6fe3e651832796b2454dad5adafe9e21a09498/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f6fe3e651832796b2454dad5adafe9e21a09498/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr?ref=6f6fe3e651832796b2454dad5adafe9e21a09498", "patch": "@@ -0,0 +1,16 @@\n+error[E0277]: an array of type `[u32; 10]` cannot be built directly from an iterator\n+  --> $DIR/collect-into-array.rs:3:39\n+   |\n+LL |     let whatever: [u32; 10] = (0..10).collect();\n+   |                                       ^^^^^^^ try collecting into a `Vec<{integer}>`, then using `.try_into()`\n+   |\n+   = help: the trait `FromIterator<{integer}>` is not implemented for `[u32; 10]`\n+note: required by a bound in `collect`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "aafa6bc8b951476245a47f487237e96baa4dc2e8", "filename": "src/test/ui/iterators/collect-into-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f6fe3e651832796b2454dad5adafe9e21a09498/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6fe3e651832796b2454dad5adafe9e21a09498/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.rs?ref=6f6fe3e651832796b2454dad5adafe9e21a09498", "patch": "@@ -6,7 +6,7 @@ fn process_slice(data: &[i32]) {\n fn main() {\n     let some_generated_vec = (0..10).collect();\n     //~^ ERROR the size for values of type `[i32]` cannot be known at compilation time\n-    //~| ERROR a value of type `[i32]` cannot be built since `[i32]` has no definite size\n+    //~| ERROR a slice of type `[i32]` cannot be built since `[i32]` has no definite size\n     //~| NOTE try explicitly collecting into a `Vec<{integer}>`\n     //~| NOTE required by a bound in `collect`\n     //~| NOTE all local variables must have a statically known size"}, {"sha": "4842e65fe976b205f05726c4ea876f55e273f460", "filename": "src/test/ui/iterators/collect-into-slice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f6fe3e651832796b2454dad5adafe9e21a09498/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f6fe3e651832796b2454dad5adafe9e21a09498/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr?ref=6f6fe3e651832796b2454dad5adafe9e21a09498", "patch": "@@ -8,7 +8,7 @@ LL |     let some_generated_vec = (0..10).collect();\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n-error[E0277]: a value of type `[i32]` cannot be built since `[i32]` has no definite size\n+error[E0277]: a slice of type `[i32]` cannot be built since `[i32]` has no definite size\n   --> $DIR/collect-into-slice.rs:7:38\n    |\n LL |     let some_generated_vec = (0..10).collect();"}]}