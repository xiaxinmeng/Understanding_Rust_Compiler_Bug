{"sha": "253631d73fdb310a437edff1134caee904e28b94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MzYzMWQ3M2ZkYjMxMGE0MzdlZGZmMTEzNGNhZWU5MDRlMjhiOTQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-02-17T19:37:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-17T19:37:55Z"}, "message": "Rollup merge of #82094 - gilescope:to_digit_speedup2, r=m-ou-se\n\nTo digit simplification\n\nI found out the other day that all the ascii digits have the first four bits as one would hope them to. (Eg. char `2` ends `0b0010`). There are two bits to indicate it's in the digit range ( `0b0011_0000`). If it is a true digit then all the higher bits aside from these two will be 0 (as ascii is the lowest part of the unicode u32 spectrum). So XORing with `0b11_0000` should mean we either get the number 0-9 or alternativly we get a larger number in the u32 space. If we get something that's not 0-9 then it will be discarded as it will be greater than the radix.\n\nThe code seems so fast though that there's quite a lot of noise in the benchmarks so it's not that easy to prove conclusively that it's faster as well as less instructions.\n\nThe non-fast path I was toying with as well wondering if we could do this as then we'd only have one return and less instructions still:\n```\n           match self {\n                'a'..='z' => self as u32 - 'a' as u32 + 10,\n                'A'..='Z' => self as u32 - 'A' as u32 + 10,\n                _ => { radix = 10; self as u32 ^ ASCII_DIGIT_MASK},\n            }\n```\n\nHere's the [godbolt](https://godbolt.org/z/883c9n).\n\n( H/T to ``@byteshadow`` for pointing out xor was what I needed)", "tree": {"sha": "3d409191546f08dc3bc596c7c158c3cb59fe3598", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d409191546f08dc3bc596c7c158c3cb59fe3598"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/253631d73fdb310a437edff1134caee904e28b94", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLXCUCRBK7hj4Ov3rIwAAdHIIADpwCgVeKrd9uURWt/9LgB5m\nI162d3808ubc3gHgMKFXQIYyS6LqicN7JGR/UxolkcyderUmJKN2TZq2Da3gb4CW\nTZzm3wbZl/px84Brd3NlbO9da/Vq3EZvL4HWSpTlcl0ILQqyAAqNmCDBrg/rNzAd\ncBYaLSkkVJJjc7vVnrIZ+e9ojFcrYz4X1gve3Wd4PlRInWr3D7tOD4XCSmgoGhTq\nlgX+3P+i0PLcWmHOENQ/1xk9vRqnImWfvOLcOSEht3hBTNeRfSyVSB99garbmE8B\nQW1un6e1751PU4J4/oEQch/4+0VMOXUzlykp2vwEkdTPcZBxVv1jhwBih4UkXgc=\n=ndbP\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d409191546f08dc3bc596c7c158c3cb59fe3598\nparent ec007845cfe6a3c54aa44468df9ff2be05fe25b8\nparent d2ba68b24eba7e763b5e0937ab1ef6dcb5a09ca3\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1613590675 +0100\ncommitter GitHub <noreply@github.com> 1613590675 +0100\n\nRollup merge of #82094 - gilescope:to_digit_speedup2, r=m-ou-se\n\nTo digit simplification\n\nI found out the other day that all the ascii digits have the first four bits as one would hope them to. (Eg. char `2` ends `0b0010`). There are two bits to indicate it's in the digit range ( `0b0011_0000`). If it is a true digit then all the higher bits aside from these two will be 0 (as ascii is the lowest part of the unicode u32 spectrum). So XORing with `0b11_0000` should mean we either get the number 0-9 or alternativly we get a larger number in the u32 space. If we get something that's not 0-9 then it will be discarded as it will be greater than the radix.\n\nThe code seems so fast though that there's quite a lot of noise in the benchmarks so it's not that easy to prove conclusively that it's faster as well as less instructions.\n\nThe non-fast path I was toying with as well wondering if we could do this as then we'd only have one return and less instructions still:\n```\n           match self {\n                'a'..='z' => self as u32 - 'a' as u32 + 10,\n                'A'..='Z' => self as u32 - 'A' as u32 + 10,\n                _ => { radix = 10; self as u32 ^ ASCII_DIGIT_MASK},\n            }\n```\n\nHere's the [godbolt](https://godbolt.org/z/883c9n).\n\n( H/T to ``@byteshadow`` for pointing out xor was what I needed)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/253631d73fdb310a437edff1134caee904e28b94", "html_url": "https://github.com/rust-lang/rust/commit/253631d73fdb310a437edff1134caee904e28b94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/253631d73fdb310a437edff1134caee904e28b94/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec007845cfe6a3c54aa44468df9ff2be05fe25b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec007845cfe6a3c54aa44468df9ff2be05fe25b8", "html_url": "https://github.com/rust-lang/rust/commit/ec007845cfe6a3c54aa44468df9ff2be05fe25b8"}, {"sha": "d2ba68b24eba7e763b5e0937ab1ef6dcb5a09ca3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2ba68b24eba7e763b5e0937ab1ef6dcb5a09ca3", "html_url": "https://github.com/rust-lang/rust/commit/d2ba68b24eba7e763b5e0937ab1ef6dcb5a09ca3"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "64ae7db0d9b53c7882839ce4f38b97ea475f6fa1", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/253631d73fdb310a437edff1134caee904e28b94/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253631d73fdb310a437edff1134caee904e28b94/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=253631d73fdb310a437edff1134caee904e28b94", "patch": "@@ -1,5 +1,6 @@\n //! impl char {}\n \n+use crate::intrinsics::likely;\n use crate::slice;\n use crate::str::from_utf8_unchecked_mut;\n use crate::unicode::printable::is_printable;\n@@ -330,16 +331,13 @@ impl char {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_digit(self, radix: u32) -> Option<u32> {\n+        assert!(radix <= 36, \"to_digit: radix is too high (maximum 36)\");\n         // the code is split up here to improve execution speed for cases where\n         // the `radix` is constant and 10 or smaller\n-        let val = if radix <= 10 {\n-            match self {\n-                '0'..='9' => self as u32 - '0' as u32,\n-                _ => return None,\n-            }\n+        let val = if likely(radix <= 10) {\n+            // If not a digit, a number greater than radix will be created.\n+            (self as u32).wrapping_sub('0' as u32)\n         } else {\n-            assert!(radix <= 36, \"to_digit: radix is too high (maximum 36)\");\n-\n             match self {\n                 '0'..='9' => self as u32 - '0' as u32,\n                 'a'..='z' => self as u32 - 'a' as u32 + 10,"}]}