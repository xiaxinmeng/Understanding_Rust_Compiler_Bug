{"sha": "06ca7b700cae83324b4bad8be3286da4f964bb58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2Y2E3YjcwMGNhZTgzMzI0YjRiYWQ4YmUzMjg2ZGE0Zjk2NGJiNTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-12-20T14:49:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-12-20T14:54:20Z"}, "message": "validate promoteds", "tree": {"sha": "5756db310758494b1727a41b841882e9e2f6026c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5756db310758494b1727a41b841882e9e2f6026c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06ca7b700cae83324b4bad8be3286da4f964bb58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06ca7b700cae83324b4bad8be3286da4f964bb58", "html_url": "https://github.com/rust-lang/rust/commit/06ca7b700cae83324b4bad8be3286da4f964bb58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06ca7b700cae83324b4bad8be3286da4f964bb58/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd2f1cb2785f87177249e2bdb628ed782fcd8def", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd2f1cb2785f87177249e2bdb628ed782fcd8def", "html_url": "https://github.com/rust-lang/rust/commit/bd2f1cb2785f87177249e2bdb628ed782fcd8def"}], "stats": {"total": 28, "additions": 9, "deletions": 19}, "files": [{"sha": "3a3117d5ccf7e93af86349e620876714329cbe05", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/06ca7b700cae83324b4bad8be3286da4f964bb58/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ca7b700cae83324b4bad8be3286da4f964bb58/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=06ca7b700cae83324b4bad8be3286da4f964bb58", "patch": "@@ -383,25 +383,15 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n         Ok(mplace) => {\n             // Since evaluation had no errors, valiate the resulting constant:\n             let validation = try {\n-                // FIXME do not validate promoteds until a decision on\n-                // https://github.com/rust-lang/rust/issues/67465 and\n-                // https://github.com/rust-lang/rust/issues/67534 is made.\n-                // Promoteds can contain unexpected `UnsafeCell` and reference `static`s, but their\n-                // otherwise restricted form ensures that this is still sound. We just lose the\n-                // extra safety net of some of the dynamic checks. They can also contain invalid\n-                // values, but since we do not usually check intermediate results of a computation\n-                // for validity, it might be surprising to do that here.\n-                if cid.promoted.is_none() {\n-                    let mut ref_tracking = RefTracking::new(mplace);\n-                    let mut inner = false;\n-                    while let Some((mplace, path)) = ref_tracking.todo.pop() {\n-                        let mode = match tcx.static_mutability(cid.instance.def_id()) {\n-                            Some(_) => CtfeValidationMode::Regular, // a `static`\n-                            None => CtfeValidationMode::Const { inner },\n-                        };\n-                        ecx.const_validate_operand(mplace.into(), path, &mut ref_tracking, mode)?;\n-                        inner = true;\n-                    }\n+                let mut ref_tracking = RefTracking::new(mplace);\n+                let mut inner = false;\n+                while let Some((mplace, path)) = ref_tracking.todo.pop() {\n+                    let mode = match tcx.static_mutability(cid.instance.def_id()) {\n+                        Some(_) if cid.promoted.is_none() => CtfeValidationMode::Regular, // a `static`\n+                        _ => CtfeValidationMode::Const { inner },\n+                    };\n+                    ecx.const_validate_operand(mplace.into(), path, &mut ref_tracking, mode)?;\n+                    inner = true;\n                 }\n             };\n             if let Err(error) = validation {"}]}