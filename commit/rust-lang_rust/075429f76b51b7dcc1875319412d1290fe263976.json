{"sha": "075429f76b51b7dcc1875319412d1290fe263976", "node_id": "C_kwDOAAsO6NoAKDA3NTQyOWY3NmI1MWI3ZGNjMTg3NTMxOTQxMmQxMjkwZmUyNjM5NzY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-20T22:18:50Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-21T07:39:41Z"}, "message": "Recover when resolution did not resolve lifetimes.", "tree": {"sha": "c3df3400b5012f96bd33f00559cc7d559d45f799", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3df3400b5012f96bd33f00559cc7d559d45f799"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/075429f76b51b7dcc1875319412d1290fe263976", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/075429f76b51b7dcc1875319412d1290fe263976", "html_url": "https://github.com/rust-lang/rust/commit/075429f76b51b7dcc1875319412d1290fe263976", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/075429f76b51b7dcc1875319412d1290fe263976/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5caa5a8421f84cb7664f999b7635801bcf3f96a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5caa5a8421f84cb7664f999b7635801bcf3f96a", "html_url": "https://github.com/rust-lang/rust/commit/b5caa5a8421f84cb7664f999b7635801bcf3f96a"}], "stats": {"total": 103, "additions": 92, "deletions": 11}, "files": [{"sha": "b76e3c4bd469ec48c53a75f0beae5b9f30e94c59", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/075429f76b51b7dcc1875319412d1290fe263976/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075429f76b51b7dcc1875319412d1290fe263976/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=075429f76b51b7dcc1875319412d1290fe263976", "patch": "@@ -1169,15 +1169,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             TyKind::Ptr(ref mt) => hir::TyKind::Ptr(self.lower_mt(mt, itctx)),\n             TyKind::Rptr(ref region, ref mt) => {\n                 let region = region.unwrap_or_else(|| {\n-                    let Some(LifetimeRes::ElidedAnchor { start, end }) = self.resolver.get_lifetime_res(t.id) else {\n-                        panic!()\n+                    let id = if let Some(LifetimeRes::ElidedAnchor { start, end }) =\n+                        self.resolver.get_lifetime_res(t.id)\n+                    {\n+                        debug_assert_eq!(start.plus(1), end);\n+                        start\n+                    } else {\n+                        self.resolver.next_node_id()\n                     };\n-                    debug_assert_eq!(start.plus(1), end);\n                     let span = self.sess.source_map().next_point(t.span.shrink_to_lo());\n-                    Lifetime {\n-                        ident: Ident::new(kw::UnderscoreLifetime, span),\n-                        id: start,\n-                    }\n+                    Lifetime { ident: Ident::new(kw::UnderscoreLifetime, span), id }\n                 });\n                 let lifetime = self.lower_lifetime(&region);\n                 hir::TyKind::Rptr(lifetime, self.lower_mt(mt, itctx))\n@@ -1836,10 +1837,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_lifetime(&mut self, l: &Lifetime) -> hir::Lifetime {\n         let span = self.lower_span(l.ident.span);\n         let ident = self.lower_ident(l.ident);\n-        let res = self\n-            .resolver\n-            .get_lifetime_res(l.id)\n-            .unwrap_or_else(|| panic!(\"Missing resolution for lifetime {:?} at {:?}\", l, span));\n+        let res = self.resolver.get_lifetime_res(l.id).unwrap_or(LifetimeRes::Error);\n         self.new_named_lifetime_with_res(l.id, span, ident, res)\n     }\n "}, {"sha": "6c82c29dd9d4871f69642d52dcecf9f3c10c1513", "filename": "src/test/ui/lifetimes/issue-97193.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/075429f76b51b7dcc1875319412d1290fe263976/src%2Ftest%2Fui%2Flifetimes%2Fissue-97193.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075429f76b51b7dcc1875319412d1290fe263976/src%2Ftest%2Fui%2Flifetimes%2Fissue-97193.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-97193.rs?ref=075429f76b51b7dcc1875319412d1290fe263976", "patch": "@@ -0,0 +1,9 @@\n+extern \"C\" {\n+    fn a(&mut self) {\n+        //~^ ERROR incorrect function inside `extern` block\n+        //~| ERROR `self` parameter is only allowed in associated functions\n+        fn b(buf: &Self) {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "21be543ccf9ce519bae2c9da6df398af20f97f5c", "filename": "src/test/ui/lifetimes/issue-97193.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/075429f76b51b7dcc1875319412d1290fe263976/src%2Ftest%2Fui%2Flifetimes%2Fissue-97193.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/075429f76b51b7dcc1875319412d1290fe263976/src%2Ftest%2Fui%2Flifetimes%2Fissue-97193.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-97193.stderr?ref=075429f76b51b7dcc1875319412d1290fe263976", "patch": "@@ -0,0 +1,28 @@\n+error: incorrect function inside `extern` block\n+  --> $DIR/issue-97193.rs:2:8\n+   |\n+LL |   extern \"C\" {\n+   |   ---------- `extern` blocks define existing foreign functions and functions inside of them cannot have a body\n+LL |       fn a(&mut self) {\n+   |  ________^____________-\n+   | |        |\n+   | |        cannot have a body\n+LL | |\n+LL | |\n+LL | |         fn b(buf: &Self) {}\n+LL | |     }\n+   | |_____- help: remove the invalid body: `;`\n+   |\n+   = help: you might have meant to write a function accessible through FFI, which can be done by writing `extern fn` outside of the `extern` block\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/issue-97193.rs:2:10\n+   |\n+LL |     fn a(&mut self) {\n+   |          ^^^^^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "accb4a9983071ee995d6527f1ec7d1a0136825e4", "filename": "src/test/ui/lifetimes/issue-97194.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/075429f76b51b7dcc1875319412d1290fe263976/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075429f76b51b7dcc1875319412d1290fe263976/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.rs?ref=075429f76b51b7dcc1875319412d1290fe263976", "patch": "@@ -0,0 +1,10 @@\n+extern \"C\" {\n+    fn bget(&self, index: [usize; Self::DIM]) -> bool {\n+        //~^ ERROR incorrect function inside `extern` block\n+        //~| ERROR `self` parameter is only allowed in associated functions\n+        //~| ERROR use of undeclared type `Self`\n+        type T<'a> = &'a str;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "15ad5aadf9fddc3967fec9b26afb3421aa61ee06", "filename": "src/test/ui/lifetimes/issue-97194.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/075429f76b51b7dcc1875319412d1290fe263976/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/075429f76b51b7dcc1875319412d1290fe263976/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.stderr?ref=075429f76b51b7dcc1875319412d1290fe263976", "patch": "@@ -0,0 +1,36 @@\n+error: incorrect function inside `extern` block\n+  --> $DIR/issue-97194.rs:2:8\n+   |\n+LL |   extern \"C\" {\n+   |   ---------- `extern` blocks define existing foreign functions and functions inside of them cannot have a body\n+LL |       fn bget(&self, index: [usize; Self::DIM]) -> bool {\n+   |  ________^^^^___________________________________________-\n+   | |        |\n+   | |        cannot have a body\n+LL | |\n+LL | |\n+LL | |\n+LL | |         type T<'a> = &'a str;\n+LL | |     }\n+   | |_____- help: remove the invalid body: `;`\n+   |\n+   = help: you might have meant to write a function accessible through FFI, which can be done by writing `extern fn` outside of the `extern` block\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: `self` parameter is only allowed in associated functions\n+  --> $DIR/issue-97194.rs:2:13\n+   |\n+LL |     fn bget(&self, index: [usize; Self::DIM]) -> bool {\n+   |             ^^^^^ not semantically valid as function parameter\n+   |\n+   = note: associated functions are those in `impl` or `trait` definitions\n+\n+error[E0433]: failed to resolve: use of undeclared type `Self`\n+  --> $DIR/issue-97194.rs:2:35\n+   |\n+LL |     fn bget(&self, index: [usize; Self::DIM]) -> bool {\n+   |                                   ^^^^ use of undeclared type `Self`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0433`."}]}