{"sha": "03999c23944e5d06cab3ddc6919c5f98b494aad0", "node_id": "C_kwDOAAsO6NoAKDAzOTk5YzIzOTQ0ZTVkMDZjYWIzZGRjNjkxOWM1Zjk4YjQ5NGFhZDA", "commit": {"author": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2022-06-13T21:10:25Z"}, "committer": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2022-06-13T21:10:25Z"}, "message": "Add provider API to error trait", "tree": {"sha": "9d63c23c53bdf6624be0f393e035a264148e652c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d63c23c53bdf6624be0f393e035a264148e652c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03999c23944e5d06cab3ddc6919c5f98b494aad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03999c23944e5d06cab3ddc6919c5f98b494aad0", "html_url": "https://github.com/rust-lang/rust/commit/03999c23944e5d06cab3ddc6919c5f98b494aad0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03999c23944e5d06cab3ddc6919c5f98b494aad0/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "083721a1a7365d3afe1521cd2661b2201aac0450", "url": "https://api.github.com/repos/rust-lang/rust/commits/083721a1a7365d3afe1521cd2661b2201aac0450", "html_url": "https://github.com/rust-lang/rust/commit/083721a1a7365d3afe1521cd2661b2201aac0450"}], "stats": {"total": 117, "additions": 116, "deletions": 1}, "files": [{"sha": "3d7d8191770a5d48f4ec656efd6be324dac24d88", "filename": "library/std/src/error.rs", "status": "modified", "additions": 115, "deletions": 1, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/03999c23944e5d06cab3ddc6919c5f98b494aad0/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03999c23944e5d06cab3ddc6919c5f98b494aad0/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=03999c23944e5d06cab3ddc6919c5f98b494aad0", "patch": "@@ -156,7 +156,7 @@ use core::array;\n use core::convert::Infallible;\n \n use crate::alloc::{AllocError, LayoutError};\n-use crate::any::TypeId;\n+use crate::any::{Demand, Provider, TypeId};\n use crate::backtrace::Backtrace;\n use crate::borrow::Cow;\n use crate::cell;\n@@ -295,6 +295,84 @@ pub trait Error: Debug + Display {\n     fn cause(&self) -> Option<&dyn Error> {\n         self.source()\n     }\n+\n+    /// Provides type based access to context intended for error reports.\n+    ///\n+    /// Used in conjunction with [`context`] and [`context_ref`] to extract\n+    /// references to member variables from `dyn Error` trait objects.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// #![feature(provide_any)]\n+    /// #![feature(error_in_core)]\n+    /// use core::fmt;\n+    /// use core::any::Demand;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct MyBacktrace {\n+    ///     // ...\n+    /// }\n+    ///\n+    /// impl MyBacktrace {\n+    ///     fn new() -> MyBacktrace {\n+    ///         // ...\n+    ///         # MyBacktrace {}\n+    ///     }\n+    /// }\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct SourceError {\n+    ///     // ...\n+    /// }\n+    ///\n+    /// impl fmt::Display for SourceError {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         write!(f, \"Example Source Error\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl std::error::Error for SourceError {}\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct Error {\n+    ///     source: SourceError,\n+    ///     backtrace: MyBacktrace,\n+    /// }\n+    ///\n+    /// impl fmt::Display for Error {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         write!(f, \"Example Error\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl std::error::Error for Error {\n+    ///     fn provide<'a>(&'a self, req: &mut Demand<'a>) {\n+    ///         req\n+    ///             .provide_ref::<MyBacktrace>(&self.backtrace)\n+    ///             .provide_ref::<dyn std::error::Error + 'static>(&self.source);\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let backtrace = MyBacktrace::new();\n+    ///     let source = SourceError {};\n+    ///     let error = Error { source, backtrace };\n+    ///     let dyn_error = &error as &dyn std::error::Error;\n+    ///     let backtrace_ref = dyn_error.request_ref::<MyBacktrace>().unwrap();\n+    ///\n+    ///     assert!(core::ptr::eq(&error.backtrace, backtrace_ref));\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"generic_member_access\", issue = \"none\")]\n+    fn provide<'a>(&'a self, _req: &mut Demand<'a>) {}\n+}\n+\n+#[unstable(feature = \"generic_member_access\", issue = \"none\")]\n+impl Provider for dyn Error + 'static {\n+    fn provide<'a>(&'a self, req: &mut Demand<'a>) {\n+        self.provide(req)\n+    }\n }\n \n mod private {\n@@ -831,6 +909,18 @@ impl dyn Error + 'static {\n             None\n         }\n     }\n+\n+    /// Request a reference to context of type `T`.\n+    #[unstable(feature = \"generic_member_access\", issue = \"none\")]\n+    pub fn request_ref<T: ?Sized + 'static>(&self) -> Option<&T> {\n+        core::any::request_ref(self)\n+    }\n+\n+    /// Request a value to context of type `T`.\n+    #[unstable(feature = \"generic_member_access\", issue = \"none\")]\n+    pub fn request_value<T: 'static>(&self) -> Option<T> {\n+        core::any::request_value(self)\n+    }\n }\n \n impl dyn Error + 'static + Send {\n@@ -854,6 +944,18 @@ impl dyn Error + 'static + Send {\n     pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n         <dyn Error + 'static>::downcast_mut::<T>(self)\n     }\n+\n+    /// Request a reference to context of type `T`.\n+    #[unstable(feature = \"generic_member_access\", issue = \"none\")]\n+    pub fn request_ref<T: ?Sized + 'static>(&self) -> Option<&T> {\n+        <dyn Error + 'static>::request_ref(self)\n+    }\n+\n+    /// Request a value to context of type `T`.\n+    #[unstable(feature = \"generic_member_access\", issue = \"none\")]\n+    pub fn request_value<T: 'static>(&self) -> Option<T> {\n+        <dyn Error + 'static>::request_value(self)\n+    }\n }\n \n impl dyn Error + 'static + Send + Sync {\n@@ -877,6 +979,18 @@ impl dyn Error + 'static + Send + Sync {\n     pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n         <dyn Error + 'static>::downcast_mut::<T>(self)\n     }\n+\n+    /// Request a reference to context of type `T`.\n+    #[unstable(feature = \"generic_member_access\", issue = \"none\")]\n+    pub fn request_ref<T: ?Sized + 'static>(&self) -> Option<&T> {\n+        <dyn Error + 'static>::request_ref(self)\n+    }\n+\n+    /// Request a value to context of type `T`.\n+    #[unstable(feature = \"generic_member_access\", issue = \"none\")]\n+    pub fn request_value<T: 'static>(&self) -> Option<T> {\n+        <dyn Error + 'static>::request_value(self)\n+    }\n }\n \n impl dyn Error {"}, {"sha": "c46752cc6f956a0322993be3d322da8e292d5806", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03999c23944e5d06cab3ddc6919c5f98b494aad0/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03999c23944e5d06cab3ddc6919c5f98b494aad0/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=03999c23944e5d06cab3ddc6919c5f98b494aad0", "patch": "@@ -284,6 +284,7 @@\n #![feature(panic_internals)]\n #![feature(portable_simd)]\n #![feature(prelude_2024)]\n+#![feature(provide_any)]\n #![feature(ptr_as_uninit)]\n #![feature(raw_os_nonzero)]\n #![feature(slice_internals)]"}]}