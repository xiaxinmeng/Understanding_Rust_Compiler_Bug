{"sha": "f9755c666d9e3b5134fd977bf9653f2d29347e8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NzU1YzY2NmQ5ZTNiNTEzNGZkOTc3YmY5NjUzZjJkMjkzNDdlOGE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-10T02:12:15Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-10T02:13:14Z"}, "message": "rustdoc: Simplify attribute parsing", "tree": {"sha": "02b8c253ee3723a3cf6c8cd6313b91ee9f136d6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02b8c253ee3723a3cf6c8cd6313b91ee9f136d6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9755c666d9e3b5134fd977bf9653f2d29347e8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9755c666d9e3b5134fd977bf9653f2d29347e8a", "html_url": "https://github.com/rust-lang/rust/commit/f9755c666d9e3b5134fd977bf9653f2d29347e8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9755c666d9e3b5134fd977bf9653f2d29347e8a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "effe4559d23b117f41448007fd870726f86d17d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/effe4559d23b117f41448007fd870726f86d17d7", "html_url": "https://github.com/rust-lang/rust/commit/effe4559d23b117f41448007fd870726f86d17d7"}], "stats": {"total": 289, "additions": 59, "deletions": 230}, "files": [{"sha": "4e53151bf9a337bca020f68f48e5ad98e2979ffb", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 21, "deletions": 156, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/f9755c666d9e3b5134fd977bf9653f2d29347e8a/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9755c666d9e3b5134fd977bf9653f2d29347e8a/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=f9755c666d9e3b5134fd977bf9653f2d29347e8a", "patch": "@@ -9,23 +9,14 @@ import rustc::syntax::ast;\n import rustc::front::attr;\n import core::tuple;\n \n-export crate_attrs, basic_attrs, variant_attrs;\n-export parse_crate, parse_basic, parse_variant;\n+export crate_attrs;\n+export parse_crate, parse_desc;\n export parse_hidden;\n \n type crate_attrs = {\n     name: option<str>\n };\n \n-type basic_attrs = {\n-    brief: option<str>,\n-    desc: option<str>\n-};\n-\n-type variant_attrs = {\n-    desc: option<str>\n-};\n-\n #[cfg(test)]\n mod test {\n \n@@ -102,172 +93,46 @@ fn should_not_extract_crate_name_if_no_name_value_in_link_attribute() {\n     assert attrs.name == none;\n }\n \n-fn parse_basic(\n-    attrs: [ast::attribute]\n-) -> {\n-    brief: option<str>,\n-    desc: option<str>\n-} {\n-    parse_short_doc_or(\n-        attrs,\n-        {|desc|\n-            {\n-                brief: none,\n-                desc: desc\n-            }\n-        },\n-        {|_items, brief, desc|\n-            {\n-                brief: brief,\n-                desc: desc\n-            }\n-        }\n-    )\n+fn parse_desc(attrs: [ast::attribute]) -> option<str> {\n+    alt doc_meta(attrs) {\n+      some(meta) {\n+        attr::get_meta_item_value_str(meta)\n+      }\n+      none { none }\n+    }\n }\n \n #[test]\n-fn parse_basic_should_handle_undocumented_mods() {\n+fn parse_desc_should_handle_undocumented_mods() {\n     let source = \"\";\n     let attrs = test::parse_attributes(source);\n-    let attrs = parse_basic(attrs);\n-    assert attrs.brief == none;\n-    assert attrs.desc == none;\n+    let attrs = parse_desc(attrs);\n+    assert attrs == none;\n }\n \n #[test]\n-fn parse_basic_should_parse_simple_doc_attributes() {\n+fn parse_desc_should_parse_simple_doc_attributes() {\n     let source = \"#[doc = \\\"basic\\\"]\";\n     let attrs = test::parse_attributes(source);\n-    let attrs = parse_basic(attrs);\n-    assert attrs.desc == some(\"basic\");\n-}\n-\n-#[test]\n-fn parse_basic_should_parse_the_brief_description() {\n-    let source = \"#[doc(brief = \\\"short\\\")]\";\n-    let attrs = test::parse_attributes(source);\n-    let attrs = parse_basic(attrs);\n-    assert attrs.brief == some(\"short\");\n-}\n-\n-#[test]\n-fn parse_basic_should_parse_the_long_description() {\n-    let source = \"#[doc(desc = \\\"description\\\")]\";\n-    let attrs = test::parse_attributes(source);\n-    let attrs = parse_basic(attrs);\n-    assert attrs.desc == some(\"description\");\n-}\n-\n-fn parse_short_doc_or<T>(\n-    attrs: [ast::attribute],\n-    handle_short: fn&(\n-        short_desc: option<str>\n-    ) -> T,\n-    parse_long: fn&(\n-        doc_items: [@ast::meta_item],\n-        brief: option<str>,\n-        desc: option<str>\n-    ) -> T\n-) -> T {\n-    alt doc_meta(attrs) {\n-      some(meta) {\n-        alt attr::get_meta_item_value_str(meta) {\n-          some(desc) { handle_short(some(desc)) }\n-          none {\n-            alt attr::get_meta_item_list(meta) {\n-              some(list) {\n-                let brief = attr::meta_item_value_from_list(list, \"brief\");\n-                let desc = attr::meta_item_value_from_list(list, \"desc\");\n-                parse_long(list, brief, desc)\n-              }\n-              none {\n-                handle_short(none)\n-              }\n-            }\n-          }\n-        }\n-      }\n-      none {\n-        handle_short(none)\n-      }\n-    }\n+    let attrs = parse_desc(attrs);\n+    assert attrs == some(\"basic\");\n }\n \n-fn parse_long_doc<T>(\n-    attrs: [ast::attribute],\n-    parse_long: fn&(doc_items: [@ast::meta_item]) -> T\n-) -> T {\n+fn parse_hidden(attrs: [ast::attribute]) -> bool {\n     alt doc_meta(attrs) {\n       some(meta) {\n         alt attr::get_meta_item_list(meta) {\n-          some(list) {\n-            parse_long(list)\n-          }\n-          none {\n-            parse_long([])\n+          some(metas) {\n+            let hiddens = attr::find_meta_items_by_name(metas, \"hidden\");\n+            vec::is_not_empty(hiddens)\n           }\n+          none { false }\n         }\n       }\n-      none { parse_long([]) }\n+      none { false }\n     }\n }\n \n-fn parse_variant(attrs: [ast::attribute]) -> variant_attrs {\n-    parse_short_doc_or(\n-        attrs,\n-        {|desc|\n-            {\n-                desc: desc\n-            }\n-        },\n-        {|_items, brief, desc|\n-            if option::is_some(brief) && option::is_some(desc) {\n-                // FIXME: Warn about dropping brief description\n-            }\n-\n-            {\n-                // Prefer desc over brief\n-                desc: option::maybe(brief, desc, {|s| some(s) })\n-            }\n-        }\n-    )\n-}\n-\n-#[test]\n-fn should_parse_variant_short_doc() {\n-    let source = \"#[doc = \\\"a\\\"]\";\n-    let attrs = test::parse_attributes(source);\n-    let attrs = parse_variant(attrs);\n-    assert attrs.desc == some(\"a\");\n-}\n-\n-#[test]\n-fn should_parse_variant_brief_doc() {\n-    let source = \"#[doc(brief = \\\"a\\\")]\";\n-    let attrs = test::parse_attributes(source);\n-    let attrs = parse_variant(attrs);\n-    assert attrs.desc == some(\"a\");\n-}\n-\n-#[test]\n-fn should_parse_variant_long_doc() {\n-    let source = \"#[doc(desc = \\\"a\\\")]\";\n-    let attrs = test::parse_attributes(source);\n-    let attrs = parse_variant(attrs);\n-    assert attrs.desc == some(\"a\");\n-}\n-\n-fn parse_hidden(attrs: [ast::attribute]) -> bool {\n-    parse_short_doc_or(\n-        attrs,\n-        {|_desc| false },\n-        {|metas, _brief, _desc|\n-            let hiddens = attr::find_meta_items_by_name(metas, \"hidden\");\n-            vec::is_not_empty(hiddens)\n-        }\n-    )\n-}\n-\n #[test]\n fn shoulde_parse_hidden_attribute() {\n     let source = \"#[doc(hidden)]\";"}, {"sha": "c5f89209db4a46d9d0b9a60a142979d9a6d21b41", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 13, "deletions": 33, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f9755c666d9e3b5134fd977bf9653f2d29347e8a/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9755c666d9e3b5134fd977bf9653f2d29347e8a/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=f9755c666d9e3b5134fd977bf9653f2d29347e8a", "patch": "@@ -72,18 +72,17 @@ fn fold_item(\n     let srv = fold.ctxt;\n     let doc = fold::default_seq_fold_item(fold, doc);\n \n-    let attrs = if doc.id == ast::crate_node_id {\n+    let desc = if doc.id == ast::crate_node_id {\n         // This is the top-level mod, use the crate attributes\n         astsrv::exec(srv) {|ctxt|\n-            attr_parser::parse_basic(ctxt.ast.node.attrs)\n+            attr_parser::parse_desc(ctxt.ast.node.attrs)\n         }\n     } else {\n-        parse_item_attrs(srv, doc.id, attr_parser::parse_basic)\n+        parse_item_attrs(srv, doc.id, attr_parser::parse_desc)\n     };\n \n     {\n-        brief: attrs.brief,\n-        desc: attrs.desc\n+        desc: desc\n         with doc\n     }\n }\n@@ -134,14 +133,6 @@ fn should_extract_fn_attributes() {\n     assert doc.cratemod().fns()[0].desc() == some(\"test\");\n }\n \n-#[test]\n-fn should_extract_const_docs() {\n-    let doc = test::mk_doc(\"#[doc(brief = \\\"foo\\\", desc = \\\"bar\\\")]\\\n-                            const a: bool = true;\");\n-    assert doc.cratemod().consts()[0].brief() == some(\"foo\");\n-    assert doc.cratemod().consts()[0].desc() == some(\"bar\");\n-}\n-\n fn fold_enum(\n     fold: fold::fold<astsrv::srv>,\n     doc: doc::enumdoc\n@@ -153,7 +144,7 @@ fn fold_enum(\n \n     {\n         variants: par::anymap(doc.variants) {|variant|\n-            let attrs = astsrv::exec(srv) {|ctxt|\n+            let desc = astsrv::exec(srv) {|ctxt|\n                 alt check ctxt.ast_map.get(doc_id) {\n                   ast_map::node_item(@{\n                     node: ast::item_enum(ast_variants, _), _\n@@ -163,13 +154,13 @@ fn fold_enum(\n                             v.node.name == variant.name\n                         });\n \n-                    attr_parser::parse_variant(ast_variant.node.attrs)\n+                    attr_parser::parse_desc(ast_variant.node.attrs)\n                   }\n                 }\n             };\n \n             {\n-                desc: attrs.desc\n+                desc: desc\n                 with variant\n             }\n         }\n@@ -179,9 +170,8 @@ fn fold_enum(\n \n #[test]\n fn should_extract_enum_docs() {\n-    let doc = test::mk_doc(\"#[doc(brief = \\\"a\\\", desc = \\\"b\\\")]\\\n+    let doc = test::mk_doc(\"#[doc = \\\"b\\\"]\\\n                             enum a { v }\");\n-    assert doc.cratemod().enums()[0].brief() == some(\"a\");\n     assert doc.cratemod().enums()[0].desc() == some(\"b\");\n }\n \n@@ -211,20 +201,20 @@ fn merge_method_attrs(\n ) -> [doc::methoddoc] {\n \n     // Create an assoc list from method name to attributes\n-    let attrs: [(str, attr_parser::basic_attrs)] = astsrv::exec(srv) {|ctxt|\n+    let attrs: [(str, option<str>)] = astsrv::exec(srv) {|ctxt|\n         alt ctxt.ast_map.get(item_id) {\n           ast_map::node_item(@{\n             node: ast::item_iface(_, methods), _\n           }, _) {\n             par::seqmap(methods) {|method|\n-                (method.ident, attr_parser::parse_basic(method.attrs))\n+                (method.ident, attr_parser::parse_desc(method.attrs))\n             }\n           }\n           ast_map::node_item(@{\n             node: ast::item_impl(_, _, _, methods), _\n           }, _) {\n             par::seqmap(methods) {|method|\n-                (method.ident, attr_parser::parse_basic(method.attrs))\n+                (method.ident, attr_parser::parse_desc(method.attrs))\n             }\n           }\n           _ { fail \"unexpected item\" }\n@@ -233,11 +223,10 @@ fn merge_method_attrs(\n \n     vec::map2(docs, attrs) {|doc, attrs|\n         assert doc.name == tuple::first(attrs);\n-        let basic_attrs = tuple::second(attrs);\n+        let desc = tuple::second(attrs);\n \n         {\n-            brief: basic_attrs.brief,\n-            desc: basic_attrs.desc\n+            desc: desc\n             with doc\n         }\n     }\n@@ -290,15 +279,6 @@ fn should_extract_impl_method_docs() {\n     assert doc.cratemod().impls()[0].methods[0].desc == some(\"desc\");\n }\n \n-#[test]\n-fn should_extract_type_docs() {\n-    let doc = test::mk_doc(\n-        \"#[doc(brief = \\\"brief\\\", desc = \\\"desc\\\")]\\\n-         type t = int;\");\n-    assert doc.cratemod().types()[0].brief() == some(\"brief\");\n-    assert doc.cratemod().types()[0].desc() == some(\"desc\");\n-}\n-\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::doc {"}, {"sha": "28b9c015af0695ed2b92262fe6634fc1b0fe8f65", "filename": "src/rustdoc/markdown_index_pass.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9755c666d9e3b5134fd977bf9653f2d29347e8a/src%2Frustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9755c666d9e3b5134fd977bf9653f2d29347e8a/src%2Frustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_index_pass.rs?ref=f9755c666d9e3b5134fd977bf9653f2d29347e8a", "patch": "@@ -145,7 +145,7 @@ fn should_index_mod_contents_multi_page() {\n fn should_add_brief_desc_to_index() {\n     let doc = test::mk_doc(\n         config::doc_per_mod,\n-        \"#[doc(brief = \\\"test\\\")] mod a { }\"\n+        \"#[doc = \\\"test\\\"] mod a { }\"\n     );\n     assert option::get(doc.cratemod().index).entries[0].brief == some(\"test\");\n }\n@@ -160,6 +160,7 @@ mod test {\n             };\n             let doc = extract::from_srv(srv, \"\");\n             let doc = attr_pass::mk_pass().f(srv, doc);\n+            let doc = desc_to_brief_pass::mk_pass().f(srv, doc);\n             let doc = path_pass::mk_pass().f(srv, doc);\n             run(srv, doc, config)\n         }"}, {"sha": "6eb790d4851957eb26e51395e2bf4428dde2ec94", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9755c666d9e3b5134fd977bf9653f2d29347e8a/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9755c666d9e3b5134fd977bf9653f2d29347e8a/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=f9755c666d9e3b5134fd977bf9653f2d29347e8a", "patch": "@@ -347,7 +347,7 @@ fn should_write_index() {\n \n #[test]\n fn should_write_index_brief() {\n-    let markdown = test::render(\"#[doc(brief = \\\"test\\\")] mod a { }\");\n+    let markdown = test::render(\"#[doc = \\\"test\\\"] mod a { }\");\n     assert str::contains(markdown, \"(#module-a) - test\\n\");\n }\n \n@@ -617,7 +617,7 @@ fn should_write_iface_header() {\n #[test]\n fn should_write_iface_desc() {\n     let markdown = test::render(\n-        \"#[doc(desc = \\\"desc\\\")] iface i { fn a(); }\");\n+        \"#[doc = \\\"desc\\\"] iface i { fn a(); }\");\n     assert str::contains(markdown, \"desc\");\n }\n \n@@ -656,7 +656,7 @@ fn should_write_impl_header_with_iface() {\n #[test]\n fn should_write_impl_desc() {\n     let markdown = test::render(\n-        \"#[doc(desc = \\\"desc\\\")] impl i for int { fn a() { } }\");\n+        \"#[doc = \\\"desc\\\"] impl i for int { fn a() { } }\");\n     assert str::contains(markdown, \"desc\");\n }\n \n@@ -692,7 +692,7 @@ fn should_write_type_header() {\n #[test]\n fn should_write_type_desc() {\n     let markdown = test::render(\n-        \"#[doc(desc = \\\"desc\\\")] type t = int;\");\n+        \"#[doc = \\\"desc\\\"] type t = int;\");\n     assert str::contains(markdown, \"\\n\\ndesc\\n\\n\");\n }\n \n@@ -727,6 +727,8 @@ mod test {\n             #debug(\"doc (path): %?\", doc);\n             let doc = attr_pass::mk_pass().f(srv, doc);\n             #debug(\"doc (attr): %?\", doc);\n+            let doc = desc_to_brief_pass::mk_pass().f(srv, doc);\n+            #debug(\"doc (desc_to_brief): %?\", doc);\n             let doc = unindent_pass::mk_pass().f(srv, doc);\n             #debug(\"doc (unindent): %?\", doc);\n             let doc = sectionalize_pass::mk_pass().f(srv, doc);"}, {"sha": "18eb6c42110c3fb9ff1e334e06cfc61d1d23d44b", "filename": "src/rustdoc/text_pass.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f9755c666d9e3b5134fd977bf9653f2d29347e8a/src%2Frustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9755c666d9e3b5134fd977bf9653f2d29347e8a/src%2Frustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftext_pass.rs?ref=f9755c666d9e3b5134fd977bf9653f2d29347e8a", "patch": "@@ -98,13 +98,13 @@ fn fold_impl(fold: fold::fold<op>, doc: doc::impldoc) -> doc::impldoc {\n \n #[test]\n fn should_execute_op_on_enum_brief() {\n-    let doc = test::mk_doc(\"#[doc(brief = \\\" a \\\")] enum a { b }\");\n+    let doc = test::mk_doc(\"#[doc = \\\" a \\\"] enum a { b }\");\n     assert doc.cratemod().enums()[0].brief() == some(\"a\");\n }\n \n #[test]\n fn should_execute_op_on_enum_desc() {\n-    let doc = test::mk_doc(\"#[doc(desc = \\\" a \\\")] enum a { b }\");\n+    let doc = test::mk_doc(\"#[doc = \\\" a \\\"] enum a { b }\");\n     assert doc.cratemod().enums()[0].desc() == some(\"a\");\n }\n \n@@ -116,83 +116,83 @@ fn should_execute_op_on_variant_desc() {\n \n #[test]\n fn should_execute_op_on_resource_brief() {\n-    let doc = test::mk_doc(\"#[doc(brief = \\\" a \\\")] resource r(a: bool) { }\");\n+    let doc = test::mk_doc(\"#[doc = \\\" a \\\"] resource r(a: bool) { }\");\n     assert doc.cratemod().resources()[0].brief() == some(\"a\");\n }\n \n #[test]\n fn should_execute_op_on_resource_desc() {\n-    let doc = test::mk_doc(\"#[doc(desc = \\\" a \\\")] resource r(a: bool) { }\");\n+    let doc = test::mk_doc(\"#[doc = \\\" a \\\"] resource r(a: bool) { }\");\n     assert doc.cratemod().resources()[0].desc() == some(\"a\");\n }\n \n #[test]\n fn should_execute_op_on_iface_brief() {\n     let doc = test::mk_doc(\n-        \"#[doc(brief = \\\" a \\\")] iface i { fn a(); }\");\n+        \"#[doc = \\\" a \\\"] iface i { fn a(); }\");\n     assert doc.cratemod().ifaces()[0].brief() == some(\"a\");\n }\n \n #[test]\n fn should_execute_op_on_iface_desc() {\n     let doc = test::mk_doc(\n-        \"#[doc(desc = \\\" a \\\")] iface i { fn a(); }\");\n+        \"#[doc = \\\" a \\\"] iface i { fn a(); }\");\n     assert doc.cratemod().ifaces()[0].desc() == some(\"a\");\n }\n \n #[test]\n fn should_execute_op_on_iface_method_brief() {\n     let doc = test::mk_doc(\n-        \"iface i { #[doc(brief = \\\" a \\\")] fn a(); }\");\n+        \"iface i { #[doc = \\\" a \\\"] fn a(); }\");\n     assert doc.cratemod().ifaces()[0].methods[0].brief == some(\"a\");\n }\n \n #[test]\n fn should_execute_op_on_iface_method_desc() {\n     let doc = test::mk_doc(\n-        \"iface i { #[doc(desc = \\\" a \\\")] fn a(); }\");\n+        \"iface i { #[doc = \\\" a \\\"] fn a(); }\");\n     assert doc.cratemod().ifaces()[0].methods[0].desc == some(\"a\");\n }\n \n #[test]\n fn should_execute_op_on_impl_brief() {\n     let doc = test::mk_doc(\n-        \"#[doc(brief = \\\" a \\\")] impl i for int { fn a() { } }\");\n+        \"#[doc = \\\" a \\\"] impl i for int { fn a() { } }\");\n     assert doc.cratemod().impls()[0].brief() == some(\"a\");\n }\n \n #[test]\n fn should_execute_op_on_impl_desc() {\n     let doc = test::mk_doc(\n-        \"#[doc(desc = \\\" a \\\")] impl i for int { fn a() { } }\");\n+        \"#[doc = \\\" a \\\"] impl i for int { fn a() { } }\");\n     assert doc.cratemod().impls()[0].desc() == some(\"a\");\n }\n \n #[test]\n fn should_execute_op_on_impl_method_brief() {\n     let doc = test::mk_doc(\n-        \"impl i for int { #[doc(brief = \\\" a \\\")] fn a() { } }\");\n+        \"impl i for int { #[doc = \\\" a \\\"] fn a() { } }\");\n     assert doc.cratemod().impls()[0].methods[0].brief == some(\"a\");\n }\n \n #[test]\n fn should_execute_op_on_impl_method_desc() {\n     let doc = test::mk_doc(\n-        \"impl i for int { #[doc(desc = \\\" a \\\")] fn a() { } }\");\n+        \"impl i for int { #[doc = \\\" a \\\"] fn a() { } }\");\n     assert doc.cratemod().impls()[0].methods[0].desc == some(\"a\");\n }\n \n #[test]\n fn should_execute_op_on_type_brief() {\n     let doc = test::mk_doc(\n-        \"#[doc(brief = \\\" a \\\")] type t = int;\");\n+        \"#[doc = \\\" a \\\"] type t = int;\");\n     assert doc.cratemod().types()[0].brief() == some(\"a\");\n }\n \n #[test]\n fn should_execute_op_on_type_desc() {\n     let doc = test::mk_doc(\n-        \"#[doc(desc = \\\" a \\\")] type t = int;\");\n+        \"#[doc = \\\" a \\\"] type t = int;\");\n     assert doc.cratemod().types()[0].desc() == some(\"a\");\n }\n \n@@ -268,6 +268,7 @@ mod test {\n         astsrv::from_str(source) {|srv|\n             let doc = extract::from_srv(srv, \"\");\n             let doc = attr_pass::mk_pass().f(srv, doc);\n+            let doc = desc_to_brief_pass::mk_pass().f(srv, doc);\n             let doc = sectionalize_pass::mk_pass().f(srv, doc);\n             mk_pass(\"\", {|s| str::trim(s)}).f(srv, doc)\n         }"}, {"sha": "c0e9560ea02ce986039c53d5165693bb54c0a368", "filename": "src/rustdoc/trim_pass.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f9755c666d9e3b5134fd977bf9653f2d29347e8a/src%2Frustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9755c666d9e3b5134fd977bf9653f2d29347e8a/src%2Frustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftrim_pass.rs?ref=f9755c666d9e3b5134fd977bf9653f2d29347e8a", "patch": "@@ -14,32 +14,12 @@ fn mk_pass() -> pass {\n }\n \n #[test]\n-fn should_trim_mod() {\n-    let doc = test::mk_doc(\"#[doc(brief = \\\"\\nbrief\\n\\\", \\\n-                            desc = \\\"\\ndesc\\n\\\")] \\\n+fn should_trim_text() {\n+    let doc = test::mk_doc(\"#[doc = \\\" desc \\\"] \\\n                             mod m { }\");\n-    assert doc.cratemod().mods()[0].brief() == some(\"brief\");\n     assert doc.cratemod().mods()[0].desc() == some(\"desc\");\n }\n \n-#[test]\n-fn should_trim_const() {\n-    let doc = test::mk_doc(\"#[doc(brief = \\\"\\nbrief\\n\\\", \\\n-                            desc = \\\"\\ndesc\\n\\\")] \\\n-                            const a: bool = true;\");\n-    assert doc.cratemod().consts()[0].brief() == some(\"brief\");\n-    assert doc.cratemod().consts()[0].desc() == some(\"desc\");\n-}\n-\n-#[test]\n-fn should_trim_fn() {\n-    let doc = test::mk_doc(\"#[doc(brief = \\\"\\nbrief\\n\\\", \\\n-                            desc = \\\"\\ndesc\\n\\\")] \\\n-                            fn a() { }\");\n-    assert doc.cratemod().fns()[0].brief() == some(\"brief\");\n-    assert doc.cratemod().fns()[0].desc() == some(\"desc\");\n-}\n-\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::doc {"}]}