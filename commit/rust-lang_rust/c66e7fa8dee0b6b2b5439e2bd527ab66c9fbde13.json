{"sha": "c66e7fa8dee0b6b2b5439e2bd527ab66c9fbde13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NmU3ZmE4ZGVlMGI2YjJiNTQzOWUyYmQ1MjdhYjY2YzlmYmRlMTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-30T08:06:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-30T08:06:42Z"}, "message": "Auto merge of #43903 - oli-obk:alignto, r=aturon\n\nAdd align_offset intrinsic\n\nsee https://github.com/rust-lang/rfcs/pull/2043 for details and the plan towards stabilization (reexport in `core::mem` via various convenience functions)\n\nas per @scottmcm 's [comment](https://github.com/rust-lang/rfcs/pull/2043#issuecomment-316818169), this is just the intrinsic (which is obviously unstable).", "tree": {"sha": "3aa5b315b66f38c18890c727d66e48b9f1e7ef7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aa5b315b66f38c18890c727d66e48b9f1e7ef7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c66e7fa8dee0b6b2b5439e2bd527ab66c9fbde13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c66e7fa8dee0b6b2b5439e2bd527ab66c9fbde13", "html_url": "https://github.com/rust-lang/rust/commit/c66e7fa8dee0b6b2b5439e2bd527ab66c9fbde13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c66e7fa8dee0b6b2b5439e2bd527ab66c9fbde13/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b58e31ac03d3f338385593496426534ad5a150a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b58e31ac03d3f338385593496426534ad5a150a7", "html_url": "https://github.com/rust-lang/rust/commit/b58e31ac03d3f338385593496426534ad5a150a7"}, {"sha": "be96ad2c85b680be68d38ab7aa115f0b9c32b3d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/be96ad2c85b680be68d38ab7aa115f0b9c32b3d5", "html_url": "https://github.com/rust-lang/rust/commit/be96ad2c85b680be68d38ab7aa115f0b9c32b3d5"}], "stats": {"total": 100, "additions": 99, "deletions": 1}, "files": [{"sha": "607f6f3701799c3337f0bad75fe5878f17c34fd9", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/c66e7fa8dee0b6b2b5439e2bd527ab66c9fbde13/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66e7fa8dee0b6b2b5439e2bd527ab66c9fbde13/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=c66e7fa8dee0b6b2b5439e2bd527ab66c9fbde13", "patch": "@@ -1343,4 +1343,81 @@ extern \"rust-intrinsic\" {\n     /// on MSVC it's `*mut [usize; 2]`. For more information see the compiler's\n     /// source as well as std's catch implementation.\n     pub fn try(f: fn(*mut u8), data: *mut u8, local_ptr: *mut u8) -> i32;\n+\n+    /// Computes the byte offset that needs to be applied to `ptr` in order to\n+    /// make it aligned to `align`.\n+    /// If it is not possible to align `ptr`, the implementation returns\n+    /// `usize::max_value()`.\n+    ///\n+    /// There are no guarantees whatsover that offsetting the pointer will not\n+    /// overflow or go beyond the allocation that `ptr` points into.\n+    /// It is up to the caller to ensure that the returned offset is correct\n+    /// in all terms other than alignment.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Accessing adjacent `u8` as `u16`\n+    ///\n+    /// ```\n+    /// # #![feature(core_intrinsics)]\n+    /// # fn foo(n: usize) {\n+    /// # use std::intrinsics::align_offset;\n+    /// # use std::mem::align_of;\n+    /// # unsafe {\n+    /// let x = [5u8, 6u8, 7u8, 8u8, 9u8];\n+    /// let ptr = &x[n] as *const u8;\n+    /// let offset = align_offset(ptr as *const (), align_of::<u16>());\n+    /// if offset < x.len() - n - 1 {\n+    ///     let u16_ptr = ptr.offset(offset as isize) as *const u16;\n+    ///     assert_ne!(*u16_ptr, 500);\n+    /// } else {\n+    ///     // while the pointer can be aligned via `offset`, it would point\n+    ///     // outside the allocation\n+    /// }\n+    /// # } }\n+    /// ```\n+    #[cfg(not(stage0))]\n+    pub fn align_offset(ptr: *const (), align: usize) -> usize;\n+}\n+\n+#[cfg(stage0)]\n+/// Computes the byte offset that needs to be applied to `ptr` in order to\n+/// make it aligned to `align`.\n+/// If it is not possible to align `ptr`, the implementation returns\n+/// `usize::max_value()`.\n+///\n+/// There are no guarantees whatsover that offsetting the pointer will not\n+/// overflow or go beyond the allocation that `ptr` points into.\n+/// It is up to the caller to ensure that the returned offset is correct\n+/// in all terms other than alignment.\n+///\n+/// # Examples\n+///\n+/// Accessing adjacent `u8` as `u16`\n+///\n+/// ```\n+/// # #![feature(core_intrinsics)]\n+/// # fn foo(n: usize) {\n+/// # use std::intrinsics::align_offset;\n+/// # use std::mem::align_of;\n+/// # unsafe {\n+/// let x = [5u8, 6u8, 7u8, 8u8, 9u8];\n+/// let ptr = &x[n] as *const u8;\n+/// let offset = align_offset(ptr as *const (), align_of::<u16>());\n+/// if offset < x.len() - n - 1 {\n+///     let u16_ptr = ptr.offset(offset as isize) as *const u16;\n+///     assert_ne!(*u16_ptr, 500);\n+/// } else {\n+///     // while the pointer can be aligned via `offset`, it would point\n+///     // outside the allocation\n+/// }\n+/// # } }\n+/// ```\n+pub unsafe fn align_offset(ptr: *const (), align: usize) -> usize {\n+    let offset = ptr as usize % align;\n+    if offset == 0 {\n+        0\n+    } else {\n+        align - offset\n+    }\n }"}, {"sha": "62e84c9ebd0175f5278e644411e5950493fcfd72", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c66e7fa8dee0b6b2b5439e2bd527ab66c9fbde13/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66e7fa8dee0b6b2b5439e2bd527ab66c9fbde13/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=c66e7fa8dee0b6b2b5439e2bd527ab66c9fbde13", "patch": "@@ -23,6 +23,7 @@ use fmt;\n use iter::{Map, Cloned, FusedIterator};\n use slice::{self, SliceIndex};\n use mem;\n+use intrinsics::align_offset;\n \n pub mod pattern;\n \n@@ -1468,7 +1469,10 @@ fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {\n             // When the pointer is aligned, read 2 words of data per iteration\n             // until we find a word containing a non-ascii byte.\n             let ptr = v.as_ptr();\n-            let align = (ptr as usize + index) & (usize_bytes - 1);\n+            let align = unsafe {\n+                // the offset is safe, because `index` is guaranteed inbounds\n+                align_offset(ptr.offset(index as isize) as *const (), usize_bytes)\n+            };\n             if align == 0 {\n                 while index < blocks_end {\n                     unsafe {"}, {"sha": "9a3c8a5079a2f2b9c8dc6f42089f0f6b2b36f745", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c66e7fa8dee0b6b2b5439e2bd527ab66c9fbde13/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66e7fa8dee0b6b2b5439e2bd527ab66c9fbde13/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=c66e7fa8dee0b6b2b5439e2bd527ab66c9fbde13", "patch": "@@ -383,6 +383,18 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n                 _ => C_null(llret_ty)\n             }\n         }\n+\n+        \"align_offset\" => {\n+            // `ptr as usize`\n+            let ptr_val = bcx.ptrtoint(llargs[0], bcx.ccx.int_type());\n+            // `ptr_val % align`\n+            let offset = bcx.urem(ptr_val, llargs[1]);\n+            let zero = C_null(bcx.ccx.int_type());\n+            // `offset == 0`\n+            let is_zero = bcx.icmp(llvm::IntPredicate::IntEQ, offset, zero);\n+            // `if offset == 0 { 0 } else { offset - align }`\n+            bcx.select(is_zero, zero, bcx.sub(offset, llargs[1]))\n+        }\n         name if name.starts_with(\"simd_\") => {\n             generic_simd_intrinsic(bcx, name,\n                                    callee_ty,"}, {"sha": "6fee7e58633fcf12e560c189f648b324e192b978", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c66e7fa8dee0b6b2b5439e2bd527ab66c9fbde13/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66e7fa8dee0b6b2b5439e2bd527ab66c9fbde13/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=c66e7fa8dee0b6b2b5439e2bd527ab66c9fbde13", "patch": "@@ -313,6 +313,11 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 (0, vec![tcx.mk_fn_ptr(fn_ty), mut_u8, mut_u8], tcx.types.i32)\n             }\n \n+            \"align_offset\" => {\n+                let ptr_ty = tcx.mk_imm_ptr(tcx.mk_nil());\n+                (0, vec![ptr_ty, tcx.types.usize], tcx.types.usize)\n+            },\n+\n             ref other => {\n                 struct_span_err!(tcx.sess, it.span, E0093,\n                                 \"unrecognized intrinsic function: `{}`\","}]}