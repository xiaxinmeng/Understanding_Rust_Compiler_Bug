{"sha": "518e39bfe6e0f8b3502ffb296dba82d1a2ba9dd5", "node_id": "C_kwDOAAsO6NoAKDUxOGUzOWJmZTZlMGY4YjM1MDJmZmIyOTZkYmE4MmQxYTJiYTlkZDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-10T11:17:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-10T11:17:18Z"}, "message": "Auto merge of #13742 - lowr:fix/assoc-type-shorthand-with-gats, r=flodiebold\n\nfix: only shift `BoundVar`s that come from outside lowering context\n\nFixes #13734\n\nThere are some free functions `TyLoweringContext` methods call, which do not know anything about current binders in scope. We need to shift in the `BoundVar`s in substitutions that we get from them (#4952), but not those we get from `TyLoweringContext` methods.", "tree": {"sha": "1ae24657d441d1f5fe342086b32efa375409bbc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ae24657d441d1f5fe342086b32efa375409bbc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/518e39bfe6e0f8b3502ffb296dba82d1a2ba9dd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/518e39bfe6e0f8b3502ffb296dba82d1a2ba9dd5", "html_url": "https://github.com/rust-lang/rust/commit/518e39bfe6e0f8b3502ffb296dba82d1a2ba9dd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/518e39bfe6e0f8b3502ffb296dba82d1a2ba9dd5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14492043dba29d626ea98667c3c7c0002f75feff", "url": "https://api.github.com/repos/rust-lang/rust/commits/14492043dba29d626ea98667c3c7c0002f75feff", "html_url": "https://github.com/rust-lang/rust/commit/14492043dba29d626ea98667c3c7c0002f75feff"}, {"sha": "19e3085481351cf9e0d1ef954a1b03c55c534f27", "url": "https://api.github.com/repos/rust-lang/rust/commits/19e3085481351cf9e0d1ef954a1b03c55c534f27", "html_url": "https://github.com/rust-lang/rust/commit/19e3085481351cf9e0d1ef954a1b03c55c534f27"}], "stats": {"total": 67, "additions": 46, "deletions": 21}, "files": [{"sha": "e8466a7eda5cf73ff7d4955738b690b12ec77197", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/518e39bfe6e0f8b3502ffb296dba82d1a2ba9dd5/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518e39bfe6e0f8b3502ffb296dba82d1a2ba9dd5/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=518e39bfe6e0f8b3502ffb296dba82d1a2ba9dd5", "patch": "@@ -603,9 +603,8 @@ impl<'a> TyLoweringContext<'a> {\n     }\n \n     fn select_associated_type(&self, res: Option<TypeNs>, segment: PathSegment<'_>) -> Ty {\n-        let (def, res) = match (self.resolver.generic_def(), res) {\n-            (Some(def), Some(res)) => (def, res),\n-            _ => return TyKind::Error.intern(Interner),\n+        let Some((def, res)) = self.resolver.generic_def().zip(res) else {\n+            return TyKind::Error.intern(Interner);\n         };\n         let ty = named_associated_type_shorthand_candidates(\n             self.db,\n@@ -617,6 +616,21 @@ impl<'a> TyLoweringContext<'a> {\n                     return None;\n                 }\n \n+                let parent_subst = t.substitution.clone();\n+                let parent_subst = match self.type_param_mode {\n+                    ParamLoweringMode::Placeholder => {\n+                        // if we're lowering to placeholders, we have to put them in now.\n+                        let generics = generics(self.db.upcast(), def);\n+                        let s = generics.placeholder_subst(self.db);\n+                        s.apply(parent_subst, Interner)\n+                    }\n+                    ParamLoweringMode::Variable => {\n+                        // We need to shift in the bound vars, since\n+                        // `named_associated_type_shorthand_candidates` does not do that.\n+                        parent_subst.shifted_in_from(Interner, self.in_binders)\n+                    }\n+                };\n+\n                 // FIXME: `substs_from_path_segment()` pushes `TyKind::Error` for every parent\n                 // generic params. It's inefficient to splice the `Substitution`s, so we may want\n                 // that method to optionally take parent `Substitution` as we already know them at\n@@ -632,22 +646,9 @@ impl<'a> TyLoweringContext<'a> {\n \n                 let substs = Substitution::from_iter(\n                     Interner,\n-                    substs.iter(Interner).take(len_self).chain(t.substitution.iter(Interner)),\n+                    substs.iter(Interner).take(len_self).chain(parent_subst.iter(Interner)),\n                 );\n \n-                let substs = match self.type_param_mode {\n-                    ParamLoweringMode::Placeholder => {\n-                        // if we're lowering to placeholders, we have to put\n-                        // them in now\n-                        let generics = generics(self.db.upcast(), def);\n-                        let s = generics.placeholder_subst(self.db);\n-                        s.apply(substs, Interner)\n-                    }\n-                    ParamLoweringMode::Variable => substs,\n-                };\n-                // We need to shift in the bound vars, since\n-                // associated_type_shorthand_candidates does not do that\n-                let substs = substs.shifted_in_from(Interner, self.in_binders);\n                 Some(\n                     TyKind::Alias(AliasTy::Projection(ProjectionTy {\n                         associated_ty_id: to_assoc_type_id(associated_ty),\n@@ -1190,9 +1191,9 @@ pub fn associated_type_shorthand_candidates<R>(\n     db: &dyn HirDatabase,\n     def: GenericDefId,\n     res: TypeNs,\n-    cb: impl FnMut(&Name, &TraitRef, TypeAliasId) -> Option<R>,\n+    mut cb: impl FnMut(&Name, TypeAliasId) -> Option<R>,\n ) -> Option<R> {\n-    named_associated_type_shorthand_candidates(db, def, res, None, cb)\n+    named_associated_type_shorthand_candidates(db, def, res, None, |name, _, id| cb(name, id))\n }\n \n fn named_associated_type_shorthand_candidates<R>(\n@@ -1202,6 +1203,9 @@ fn named_associated_type_shorthand_candidates<R>(\n     def: GenericDefId,\n     res: TypeNs,\n     assoc_name: Option<Name>,\n+    // Do NOT let `cb` touch `TraitRef` outside of `TyLoweringContext`. Its substitution contains\n+    // free `BoundVar`s that need to be shifted and only `TyLoweringContext` knows how to do that\n+    // properly (see `TyLoweringContext::select_associated_type()`).\n     mut cb: impl FnMut(&Name, &TraitRef, TypeAliasId) -> Option<R>,\n ) -> Option<R> {\n     let mut search = |t| {"}, {"sha": "de6ae7fff8fbd01c88b051b4a40f8387d0641acf", "filename": "crates/hir-ty/src/tests/regression.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/518e39bfe6e0f8b3502ffb296dba82d1a2ba9dd5/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518e39bfe6e0f8b3502ffb296dba82d1a2ba9dd5/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs?ref=518e39bfe6e0f8b3502ffb296dba82d1a2ba9dd5", "patch": "@@ -1723,3 +1723,24 @@ fn bar() -> ControlFlow<(), ()> {\n \"#,\n     );\n }\n+\n+#[test]\n+fn assoc_type_shorthand_with_gats_in_binders() {\n+    // c.f. test `issue_4885()`\n+    check_no_mismatches(\n+        r#\"\n+trait Gats {\n+    type Assoc<T>;\n+}\n+trait Foo<T> {}\n+\n+struct Bar<'a, B: Gats, A> {\n+    field: &'a dyn Foo<B::Assoc<A>>,\n+}\n+\n+fn foo(b: Bar) {\n+    let _ = b.field;\n+}\n+\"#,\n+    );\n+}"}, {"sha": "f887c759849776a9642d90e76a5ab82425270beb", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/518e39bfe6e0f8b3502ffb296dba82d1a2ba9dd5/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518e39bfe6e0f8b3502ffb296dba82d1a2ba9dd5/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=518e39bfe6e0f8b3502ffb296dba82d1a2ba9dd5", "patch": "@@ -1600,7 +1600,7 @@ impl<'a> SemanticsScope<'a> {\n             self.db,\n             def,\n             resolution.in_type_ns()?,\n-            |name, _, id| cb(name, id.into()),\n+            |name, id| cb(name, id.into()),\n         )\n     }\n }"}, {"sha": "38950b12a116808f290dcb9b90cc38e243291143", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/518e39bfe6e0f8b3502ffb296dba82d1a2ba9dd5/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518e39bfe6e0f8b3502ffb296dba82d1a2ba9dd5/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=518e39bfe6e0f8b3502ffb296dba82d1a2ba9dd5", "patch": "@@ -967,7 +967,7 @@ fn resolve_hir_path_(\n                         db,\n                         def,\n                         res.in_type_ns()?,\n-                        |name, _, id| (name == unresolved.name).then(|| id),\n+                        |name, id| (name == unresolved.name).then(|| id),\n                     )\n                 })\n                 .map(TypeAlias::from)"}]}