{"sha": "de32266a1780aa4ef748ce7f6200a1554fad0aca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMzIyNjZhMTc4MGFhNGVmNzQ4Y2U3ZjYyMDBhMTU1NGZhZDBhY2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-16T08:45:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-16T08:45:52Z"}, "message": "Auto merge of #75565 - nixphix:docs/vxworks-ext, r=jyn514\n\nSwitch to intra-doc links in std/src/sys/vxworks/ext/{fs,process}.rs\n\nPartial fix for #75080\n\n@rustbot modify labels: T-doc, A-intra-doc-links, T-rustdoc\n\nr? @jyn514", "tree": {"sha": "8183856fdd0ffa7dac8711e91a0061097194c1d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8183856fdd0ffa7dac8711e91a0061097194c1d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de32266a1780aa4ef748ce7f6200a1554fad0aca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de32266a1780aa4ef748ce7f6200a1554fad0aca", "html_url": "https://github.com/rust-lang/rust/commit/de32266a1780aa4ef748ce7f6200a1554fad0aca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de32266a1780aa4ef748ce7f6200a1554fad0aca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "243c725c2401e00c83ac68e80fa18d3b0dd3f551", "url": "https://api.github.com/repos/rust-lang/rust/commits/243c725c2401e00c83ac68e80fa18d3b0dd3f551", "html_url": "https://github.com/rust-lang/rust/commit/243c725c2401e00c83ac68e80fa18d3b0dd3f551"}, {"sha": "c5849ae3e0631698014f4d9bde52b54b36cbb0cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5849ae3e0631698014f4d9bde52b54b36cbb0cc", "html_url": "https://github.com/rust-lang/rust/commit/c5849ae3e0631698014f4d9bde52b54b36cbb0cc"}], "stats": {"total": 41, "additions": 11, "deletions": 30}, "files": [{"sha": "4ff86daf0dd73878ac57ad908b3a542ac961ee9c", "filename": "library/std/src/sys/vxworks/ext/fs.rs", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/de32266a1780aa4ef748ce7f6200a1554fad0aca/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de32266a1780aa4ef748ce7f6200a1554fad0aca/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Ffs.rs?ref=de32266a1780aa4ef748ce7f6200a1554fad0aca", "patch": "@@ -7,9 +7,7 @@ use crate::sys;\n use crate::sys::platform::fs::MetadataExt as UnixMetadataExt;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner};\n \n-/// Unix-specific extensions to [`File`].\n-///\n-/// [`File`]: ../../../../std/fs/struct.File.html\n+/// Unix-specific extensions to [`fs::File`].\n #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n pub trait FileExt {\n     /// Reads a number of bytes starting from a given offset.\n@@ -24,7 +22,7 @@ pub trait FileExt {\n     /// Note that similar to [`File::read`], it is not an error to return with a\n     /// short read.\n     ///\n-    /// [`File::read`]: ../../../../std/fs/struct.File.html#method.read\n+    /// [`File::read`]: fs::File::read\n     ///\n     /// # Examples\n     ///\n@@ -55,8 +53,8 @@ pub trait FileExt {\n     ///\n     /// Similar to [`Read::read_exact`] but uses [`read_at`] instead of `read`.\n     ///\n-    /// [`Read::read_exact`]: ../../../../std/io/trait.Read.html#method.read_exact\n-    /// [`read_at`]: #tymethod.read_at\n+    /// [`Read::read_exact`]: io::Read::read_exact\n+    /// [`read_at`]: FileExt::read_at\n     ///\n     /// # Errors\n     ///\n@@ -75,8 +73,8 @@ pub trait FileExt {\n     /// has read, but it will never read more than would be necessary to\n     /// completely fill the buffer.\n     ///\n-    /// [`ErrorKind::Interrupted`]: ../../../../std/io/enum.ErrorKind.html#variant.Interrupted\n-    /// [`ErrorKind::UnexpectedEof`]: ../../../../std/io/enum.ErrorKind.html#variant.UnexpectedEof\n+    /// [`ErrorKind::Interrupted`]: io::ErrorKind::Interrupted\n+    /// [`ErrorKind::UnexpectedEof`]: io::ErrorKind::UnexpectedEof\n     ///\n     /// # Examples\n     ///\n@@ -132,7 +130,7 @@ pub trait FileExt {\n     /// Note that similar to [`File::write`], it is not an error to return a\n     /// short write.\n     ///\n-    /// [`File::write`]: ../../../../std/fs/struct.File.html#method.write\n+    /// [`File::write`]: fs::File::write\n     ///\n     /// # Examples\n     ///\n@@ -171,8 +169,8 @@ pub trait FileExt {\n     /// This function will return the first error of\n     /// non-[`ErrorKind::Interrupted`] kind that [`write_at`] returns.\n     ///\n-    /// [`ErrorKind::Interrupted`]: ../../../../std/io/enum.ErrorKind.html#variant.Interrupted\n-    /// [`write_at`]: #tymethod.write_at\n+    /// [`ErrorKind::Interrupted`]: io::ErrorKind::Interrupted\n+    /// [`write_at`]: FileExt::write_at\n     ///\n     /// # Examples\n     ///\n@@ -223,8 +221,6 @@ impl FileExt for fs::File {\n }\n \n /// Unix-specific extensions to [`fs::Permissions`].\n-///\n-/// [`fs::Permissions`]: ../../../../std/fs/struct.Permissions.html\n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n pub trait PermissionsExt {\n     /// Returns the underlying raw `st_mode` bits that contain the standard\n@@ -300,8 +296,6 @@ impl PermissionsExt for Permissions {\n }\n \n /// Unix-specific extensions to [`fs::OpenOptions`].\n-///\n-/// [`fs::OpenOptions`]: ../../../../std/fs/struct.OpenOptions.html\n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n pub trait OpenOptionsExt {\n     /// Sets the mode bits that a new file will be created with.\n@@ -369,8 +363,6 @@ impl OpenOptionsExt for OpenOptions {\n */\n \n /// Unix-specific extensions to [`fs::Metadata`].\n-///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Returns the ID of the device containing the file.\n@@ -650,12 +642,10 @@ impl MetadataExt for fs::Metadata {\n     }\n }\n \n-/// Unix-specific extensions for [`FileType`].\n+/// Unix-specific extensions for [`fs::FileType`].\n ///\n /// Adds support for special Unix file types such as block/character devices,\n /// pipes, and sockets.\n-///\n-/// [`FileType`]: ../../../../std/fs/struct.FileType.html\n #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n pub trait FileTypeExt {\n     /// Returns whether this file type is a block device.\n@@ -749,8 +739,6 @@ impl FileTypeExt for fs::FileType {\n }\n \n /// Unix-specific extension methods for [`fs::DirEntry`].\n-///\n-/// [`fs::DirEntry`]: ../../../../std/fs/struct.DirEntry.html\n #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n pub trait DirEntryExt {\n     /// Returns the underlying `d_ino` field in the contained `dirent`\n@@ -811,8 +799,6 @@ pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()>\n }\n \n /// Unix-specific extensions to [`fs::DirBuilder`].\n-///\n-/// [`fs::DirBuilder`]: ../../../../std/fs/struct.DirBuilder.html\n #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n pub trait DirBuilderExt {\n     /// Sets the mode to create new directories with. This option defaults to"}, {"sha": "3ffa5be1b3bf1c64eafd74e09694cb4723822ae5", "filename": "library/std/src/sys/vxworks/ext/process.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de32266a1780aa4ef748ce7f6200a1554fad0aca/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de32266a1780aa4ef748ce7f6200a1554fad0aca/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fext%2Fprocess.rs?ref=de32266a1780aa4ef748ce7f6200a1554fad0aca", "patch": "@@ -10,8 +10,6 @@ use crate::sys::vxworks::ext::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n \n /// Unix-specific extensions to the [`process::Command`] builder.\n-///\n-/// [`process::Command`]: ../../../../std/process/struct.Command.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait CommandExt {\n     /// Sets the child process's user ID. This translates to a\n@@ -65,7 +63,7 @@ pub trait CommandExt {\n     /// This method is stable and usable, but it should be unsafe. To fix\n     /// that, it got deprecated in favor of the unsafe [`pre_exec`].\n     ///\n-    /// [`pre_exec`]: #tymethod.pre_exec\n+    /// [`pre_exec`]: CommandExt::pre_exec\n     #[stable(feature = \"process_exec\", since = \"1.15.0\")]\n     #[rustc_deprecated(since = \"1.37.0\", reason = \"should be unsafe, use `pre_exec` instead\")]\n     fn before_exec<F>(&mut self, f: F) -> &mut process::Command\n@@ -94,7 +92,6 @@ pub trait CommandExt {\n     /// a new child. Like spawn, however, the default behavior for the stdio\n     /// descriptors will be to inherited from the current process.\n     ///\n-    /// [`process::exit`]: ../../../process/fn.exit.html\n     ///\n     /// # Notes\n     ///\n@@ -151,8 +148,6 @@ impl CommandExt for process::Command {\n }\n \n /// Unix-specific extensions to [`process::ExitStatus`].\n-///\n-/// [`process::ExitStatus`]: ../../../../std/process/struct.ExitStatus.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ExitStatusExt {\n     /// Creates a new `ExitStatus` from the raw underlying `i32` return value of"}]}