{"sha": "93e8201ca75ebadc341c20c92ad24a4122c83991", "node_id": "C_kwDOAAsO6NoAKDkzZTgyMDFjYTc1ZWJhZGMzNDFjMjBjOTJhZDI0YTQxMjJjODM5OTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-01T07:04:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-01T07:04:17Z"}, "message": "Auto merge of #93534 - ehuss:rollup-9ecozo9, r=ehuss\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #91343 (Fix suggestion to slice if scrutinee is a `Result` or `Option`)\n - #93019 (If an integer is entered with an upper-case base prefix (0Xbeef, 0O755, 0B1010), suggest to make it lowercase)\n - #93090 (`impl Display for io::ErrorKind`)\n - #93456 (Remove an unnecessary transmute from opaque::Encoder)\n - #93492 (Hide failed command unless in verbose mode)\n - #93504 (kmc-solid: Increase the default stack size)\n - #93513 (Allow any pretty printed line to have at least 60 chars)\n - #93532 (Update books)\n - #93533 (Update cargo)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f1c0bbe3af9e7e5318afb05de365ec68d8826f08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1c0bbe3af9e7e5318afb05de365ec68d8826f08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93e8201ca75ebadc341c20c92ad24a4122c83991", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93e8201ca75ebadc341c20c92ad24a4122c83991", "html_url": "https://github.com/rust-lang/rust/commit/93e8201ca75ebadc341c20c92ad24a4122c83991", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93e8201ca75ebadc341c20c92ad24a4122c83991/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25862ffc8d360b34dd8ec82a2f01750aaab976b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/25862ffc8d360b34dd8ec82a2f01750aaab976b7", "html_url": "https://github.com/rust-lang/rust/commit/25862ffc8d360b34dd8ec82a2f01750aaab976b7"}, {"sha": "81900f469239738d7166ad2022f60182817d57ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/81900f469239738d7166ad2022f60182817d57ca", "html_url": "https://github.com/rust-lang/rust/commit/81900f469239738d7166ad2022f60182817d57ca"}], "stats": {"total": 511, "additions": 467, "deletions": 44}, "files": [{"sha": "1e124963d0d37154fefcd733b7e2c90df9e6fa4a", "filename": "Cargo.lock", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93e8201ca75ebadc341c20c92ad24a4122c83991/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/93e8201ca75ebadc341c20c92ad24a4122c83991/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -337,7 +337,7 @@ dependencies = [\n  \"cargo-test-macro\",\n  \"cargo-test-support\",\n  \"cargo-util\",\n- \"clap 3.0.10\",\n+ \"clap 3.0.13\",\n  \"crates-io\",\n  \"crossbeam-utils\",\n  \"curl\",\n@@ -627,9 +627,9 @@ dependencies = [\n \n [[package]]\n name = \"clap\"\n-version = \"3.0.10\"\n+version = \"3.0.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7a30c3bf9ff12dfe5dae53f0a96e0febcd18420d1c0e7fad77796d9d5c4b5375\"\n+checksum = \"08799f92c961c7a1cf0cc398a9073da99e21ce388b46372c37f3191f2f3eed3e\"\n dependencies = [\n  \"atty\",\n  \"bitflags\",\n@@ -5233,9 +5233,9 @@ dependencies = [\n \n [[package]]\n name = \"toml_edit\"\n-version = \"0.13.0\"\n+version = \"0.13.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3b80ac5e1b91e3378c63dab121962472b5ca20cf9ab1975e3d588548717807a8\"\n+checksum = \"744e9ed5b352340aa47ce033716991b5589e23781acb97cad37d4ea70560f55b\"\n dependencies = [\n  \"combine\",\n  \"indexmap\","}, {"sha": "26d600cefc7c0bfd68fe18da57b0e4407a4fe461", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93e8201ca75ebadc341c20c92ad24a4122c83991/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e8201ca75ebadc341c20c92ad24a4122c83991/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -136,6 +136,7 @@ mod ring;\n \n use ring::RingBuffer;\n use std::borrow::Cow;\n+use std::cmp;\n use std::collections::VecDeque;\n use std::iter;\n \n@@ -199,10 +200,13 @@ enum PrintFrame {\n \n const SIZE_INFINITY: isize = 0xffff;\n \n+/// Target line width.\n+const MARGIN: isize = 78;\n+/// Every line is allowed at least this much space, even if highly indented.\n+const MIN_SPACE: isize = 60;\n+\n pub struct Printer {\n     out: String,\n-    /// Width of lines we're constrained to\n-    margin: isize,\n     /// Number of spaces left on line\n     space: isize,\n     /// Ring-buffer of tokens and calculated sizes\n@@ -237,11 +241,9 @@ struct BufEntry {\n \n impl Printer {\n     pub fn new() -> Self {\n-        let linewidth = 78;\n         Printer {\n             out: String::new(),\n-            margin: linewidth as isize,\n-            space: linewidth as isize,\n+            space: MARGIN,\n             buf: RingBuffer::new(),\n             left_total: 0,\n             right_total: 0,\n@@ -395,7 +397,7 @@ impl Printer {\n             self.print_stack.push(PrintFrame::Broken { indent: self.indent, breaks: token.breaks });\n             self.indent = match token.indent {\n                 IndentStyle::Block { offset } => (self.indent as isize + offset) as usize,\n-                IndentStyle::Visual => (self.margin - self.space) as usize,\n+                IndentStyle::Visual => (MARGIN - self.space) as usize,\n             };\n         } else {\n             self.print_stack.push(PrintFrame::Fits);\n@@ -421,7 +423,7 @@ impl Printer {\n             self.out.push('\\n');\n             let indent = self.indent as isize + token.offset;\n             self.pending_indentation = indent;\n-            self.space = self.margin - indent;\n+            self.space = cmp::max(MARGIN - indent, MIN_SPACE);\n         }\n     }\n "}, {"sha": "0115d498a7fb889b4415d8aa1e4165d917c7bf10", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/93e8201ca75ebadc341c20c92ad24a4122c83991/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e8201ca75ebadc341c20c92ad24a4122c83991/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -1700,6 +1700,19 @@ impl<'a> Parser<'a> {\n             s.len() > 1 && s.starts_with(first_chars) && s[1..].chars().all(|c| c.is_ascii_digit())\n         }\n \n+        // Try to lowercase the prefix if it's a valid base prefix.\n+        fn fix_base_capitalisation(s: &str) -> Option<String> {\n+            if let Some(stripped) = s.strip_prefix(\"B\") {\n+                Some(format!(\"0b{stripped}\"))\n+            } else if let Some(stripped) = s.strip_prefix(\"O\") {\n+                Some(format!(\"0o{stripped}\"))\n+            } else if let Some(stripped) = s.strip_prefix(\"X\") {\n+                Some(format!(\"0x{stripped}\"))\n+            } else {\n+                None\n+            }\n+        }\n+\n         let token::Lit { kind, suffix, .. } = lit;\n         match err {\n             // `NotLiteral` is not an error by itself, so we don't report\n@@ -1724,6 +1737,18 @@ impl<'a> Parser<'a> {\n                     self.struct_span_err(span, &msg)\n                         .help(\"valid widths are 8, 16, 32, 64 and 128\")\n                         .emit();\n+                } else if let Some(fixed) = fix_base_capitalisation(suf) {\n+                    let msg = \"invalid base prefix for number literal\";\n+\n+                    self.struct_span_err(span, &msg)\n+                        .note(\"base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\")\n+                        .span_suggestion(\n+                            span,\n+                            \"try making the prefix lowercase\",\n+                            fixed,\n+                            Applicability::MaybeIncorrect,\n+                        )\n+                        .emit();\n                 } else {\n                     let msg = format!(\"invalid suffix `{}` for number literal\", suf);\n                     self.struct_span_err(span, &msg)"}, {"sha": "7a05d2b762a47dfa0df44f4be783efe02b9ed519", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93e8201ca75ebadc341c20c92ad24a4122c83991/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e8201ca75ebadc341c20c92ad24a4122c83991/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -130,8 +130,7 @@ impl serialize::Encoder for Encoder {\n \n     #[inline]\n     fn emit_i8(&mut self, v: i8) -> EncodeResult {\n-        let as_u8: u8 = unsafe { std::mem::transmute(v) };\n-        self.emit_u8(as_u8)\n+        self.emit_u8(v as u8)\n     }\n \n     #[inline]\n@@ -629,9 +628,9 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n \n     #[inline]\n     fn read_i8(&mut self) -> i8 {\n-        let as_u8 = self.data[self.position];\n+        let value = self.data[self.position];\n         self.position += 1;\n-        unsafe { ::std::mem::transmute(as_u8) }\n+        value as i8\n     }\n \n     #[inline]"}, {"sha": "62cd9c64a4a7c8205af4600d1fc14fca32a1fb00", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/93e8201ca75ebadc341c20c92ad24a4122c83991/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e8201ca75ebadc341c20c92ad24a4122c83991/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -15,7 +15,7 @@ use rustc_session::lint::builtin::NON_EXHAUSTIVE_OMITTED_PATTERNS;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::{Span, Spanned};\n-use rustc_span::symbol::Ident;\n+use rustc_span::symbol::{sym, Ident};\n use rustc_span::{BytePos, MultiSpan, DUMMY_SP};\n use rustc_trait_selection::autoderef::Autoderef;\n use rustc_trait_selection::traits::{ObligationCause, Pattern};\n@@ -2033,12 +2033,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         {\n             if let (Some(span), true) = (ti.span, ti.origin_expr) {\n                 if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n-                    err.span_suggestion(\n-                        span,\n-                        \"consider slicing here\",\n-                        format!(\"{}[..]\", snippet),\n-                        Applicability::MachineApplicable,\n-                    );\n+                    let applicability = match self.resolve_vars_if_possible(ti.expected).kind() {\n+                        ty::Adt(adt_def, _)\n+                            if self.tcx.is_diagnostic_item(sym::Option, adt_def.did)\n+                                || self.tcx.is_diagnostic_item(sym::Result, adt_def.did) =>\n+                        {\n+                            // Slicing won't work here, but `.as_deref()` might (issue #91328).\n+                            err.span_suggestion(\n+                                span,\n+                                \"consider using `as_deref` here\",\n+                                format!(\"{}.as_deref()\", snippet),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                            None\n+                        }\n+                        // FIXME: instead of checking for Vec only, we could check whether the\n+                        // type implements `Deref<Target=X>`; see\n+                        // https://github.com/rust-lang/rust/pull/91343#discussion_r761466979\n+                        ty::Adt(adt_def, _)\n+                            if self.tcx.is_diagnostic_item(sym::Vec, adt_def.did) =>\n+                        {\n+                            Some(Applicability::MachineApplicable)\n+                        }\n+                        _ => Some(Applicability::MaybeIncorrect),\n+                    };\n+\n+                    if let Some(applicability) = applicability {\n+                        err.span_suggestion(\n+                            span,\n+                            \"consider slicing here\",\n+                            format!(\"{}[..]\", snippet),\n+                            applicability,\n+                        );\n+                    }\n                 }\n             }\n         }"}, {"sha": "074d693b83155dcfddf0808d7751b17b0ac3c31d", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/93e8201ca75ebadc341c20c92ad24a4122c83991/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e8201ca75ebadc341c20c92ad24a4122c83991/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -361,13 +361,29 @@ impl ErrorKind {\n     }\n }\n \n+#[stable(feature = \"io_errorkind_display\", since = \"1.60.0\")]\n+impl fmt::Display for ErrorKind {\n+    /// Shows a human-readable description of the `ErrorKind`.\n+    ///\n+    /// This is similar to `impl Display for Error`, but doesn't require first converting to Error.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// use std::io::ErrorKind;\n+    /// assert_eq!(\"entity not found\", ErrorKind::NotFound.to_string());\n+    /// ```\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt.write_str(self.as_str())\n+    }\n+}\n+\n /// Intended for use for errors not exposed to the user, where allocating onto\n /// the heap (for normal construction via Error::new) is too costly.\n #[stable(feature = \"io_error_from_errorkind\", since = \"1.14.0\")]\n impl From<ErrorKind> for Error {\n     /// Converts an [`ErrorKind`] into an [`Error`].\n     ///\n-    /// This conversion allocates a new error with a simple representation of error kind.\n+    /// This conversion creates a new error with a simple representation of error kind.\n     ///\n     /// # Examples\n     ///"}, {"sha": "5b718a460dfa9e4c991e49d5e57e623a004090c3", "filename": "library/std/src/sys/itron/thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93e8201ca75ebadc341c20c92ad24a4122c83991/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e8201ca75ebadc341c20c92ad24a4122c83991/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -77,7 +77,8 @@ const LIFECYCLE_DETACHED_OR_JOINED: usize = usize::MAX;\n const LIFECYCLE_EXITED_OR_FINISHED_OR_JOIN_FINALIZE: usize = usize::MAX;\n // there's no single value for `JOINING`\n \n-pub const DEFAULT_MIN_STACK_SIZE: usize = 1024 * crate::mem::size_of::<usize>();\n+// 64KiB for 32-bit ISAs, 128KiB for 64-bit ISAs.\n+pub const DEFAULT_MIN_STACK_SIZE: usize = 0x4000 * crate::mem::size_of::<usize>();\n \n impl Thread {\n     /// # Safety"}, {"sha": "e5f84d417bf0b24f558889ec45cf5b0746677f7a", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -851,7 +851,7 @@ impl Build {\n             return;\n         }\n         self.verbose(&format!(\"running: {:?}\", cmd));\n-        run(cmd)\n+        run(cmd, self.is_verbose())\n     }\n \n     /// Runs a command, printing out nice contextual information if it fails.\n@@ -871,7 +871,7 @@ impl Build {\n             return true;\n         }\n         self.verbose(&format!(\"running: {:?}\", cmd));\n-        try_run(cmd)\n+        try_run(cmd, self.is_verbose())\n     }\n \n     /// Runs a command, printing out nice contextual information if it fails."}, {"sha": "24aded547315e9828dd8a0a8e92b5457aaf9914e", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -55,18 +55,18 @@ pub fn restore_library_path() {\n     }\n }\n \n-pub fn run(cmd: &mut Command) {\n-    if !try_run(cmd) {\n+pub fn run(cmd: &mut Command, print_cmd_on_fail: bool) {\n+    if !try_run(cmd, print_cmd_on_fail) {\n         std::process::exit(1);\n     }\n }\n \n-pub fn try_run(cmd: &mut Command) -> bool {\n+pub fn try_run(cmd: &mut Command, print_cmd_on_fail: bool) -> bool {\n     let status = match cmd.status() {\n         Ok(status) => status,\n         Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\", cmd, e)),\n     };\n-    if !status.success() {\n+    if !status.success() && print_cmd_on_fail {\n         println!(\n             \"\\n\\ncommand did not execute successfully: {:?}\\n\\\n              expected success, got: {}\\n\\n\","}, {"sha": "98904efaa4fc968db8ff59cf2744d9f7ed158166", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -1 +1 @@\n-Subproject commit f17df27fc14696912c48b8b7a7a8fa49e648088d\n+Subproject commit 98904efaa4fc968db8ff59cf2744d9f7ed158166"}, {"sha": "d5fc1bce3f8eb398f9c25f1b15e0257d7537cd41", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -1 +1 @@\n-Subproject commit 8c395bdd8073deb20ca67e1ed4b14a3a7e315a37\n+Subproject commit d5fc1bce3f8eb398f9c25f1b15e0257d7537cd41"}, {"sha": "9493715a6280a1f74be759c7e1ef9999b5d13e6f", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -1 +1 @@\n-Subproject commit 66d097d3d80e8f88c288c6879c7c2b909ecf8ad4\n+Subproject commit 9493715a6280a1f74be759c7e1ef9999b5d13e6f"}, {"sha": "411c2f0d5cebf48453ae2d136ad0c5e611d39aec", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -1 +1 @@\n-Subproject commit 4dee6eb63d728ffb9e7a2ed443e9ada9275c69d2\n+Subproject commit 411c2f0d5cebf48453ae2d136ad0c5e611d39aec"}, {"sha": "8763adb62c712df69b1d39ea3e692b6d696cc4d9", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -1 +1 @@\n-Subproject commit 78dd6a4684cf8d6b72275fab6d0429ea40b66338\n+Subproject commit 8763adb62c712df69b1d39ea3e692b6d696cc4d9"}, {"sha": "ea74a267be81e1cd03831aeaf6b75c8c2ff54a42", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -35,8 +35,7 @@\n                             for<'r> fn(Arguments<'r>) -> String {format})(((::core::fmt::Arguments::new_v1\n                                 as\n                                 fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1})((&([(\"test\"\n-                                            as &str)] as [&str; 1]) as\n-                                &[&str; 1]),\n+                                            as &str)] as [&str; 1]) as &[&str; 1]),\n                             (&([] as [ArgumentV1; 0]) as &[ArgumentV1; 0])) as\n                             Arguments)) as String);\n                 (res as String)"}, {"sha": "bcab76b7c6b692620ac26809ff9deff472a7a794", "filename": "src/test/ui/match/issue-82392.stdout", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -11,7 +11,6 @@ pub fn main() ({\n                 ({ } as\n                     ()) else if (let Some(a) =\n                        ((Some as\n-                               fn(i32) -> Option<i32> {Option::<i32>::Some})((3\n-                               as i32)) as Option<i32>) as bool) ({ } as ())\n-                   as ())\n+                               fn(i32) -> Option<i32> {Option::<i32>::Some})((3 as i32)) as\n+                           Option<i32>) as bool) ({ } as ()) as ())\n                } as ())"}, {"sha": "1b1c837ec5040ef1ac3d2ddfe6d644b4a01b8f0c", "filename": "src/test/ui/numeric/uppercase-base-prefix.fixed", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Ftest%2Fui%2Fnumeric%2Fuppercase-base-prefix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Ftest%2Fui%2Fnumeric%2Fuppercase-base-prefix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fuppercase-base-prefix.fixed?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -0,0 +1,77 @@\n+// run-rustfix\n+// Checks that integers with an uppercase base prefix (0B, 0X, 0O) have a nice error\n+#![allow(unused_variables)]\n+\n+fn main() {\n+    let a = 0xABCDEF;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0xABCDEF\n+\n+    let b = 0o755;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0o755\n+\n+    let c = 0b10101010;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0b10101010\n+\n+    let d = 0xABC_DEF;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0xABC_DEF\n+\n+    let e = 0o7_55;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0o7_55\n+\n+    let f = 0b1010_1010;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0b1010_1010\n+\n+    let g = 0xABC_DEF_u64;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0xABC_DEF_u64\n+\n+    let h = 0o7_55_u32;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0o7_55_u32\n+\n+    let i = 0b1010_1010_u8;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0b1010_1010_u8\n+    //\n+    let j = 0xABCDEFu64;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0xABCDEFu64\n+\n+    let k = 0o755u32;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0o755u32\n+\n+    let l = 0b10101010u8;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0b10101010u8\n+}"}, {"sha": "233d553da6585b017c730eb21c359b20fbb8da15", "filename": "src/test/ui/numeric/uppercase-base-prefix.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Ftest%2Fui%2Fnumeric%2Fuppercase-base-prefix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Ftest%2Fui%2Fnumeric%2Fuppercase-base-prefix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fuppercase-base-prefix.rs?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -0,0 +1,77 @@\n+// run-rustfix\n+// Checks that integers with an uppercase base prefix (0B, 0X, 0O) have a nice error\n+#![allow(unused_variables)]\n+\n+fn main() {\n+    let a = 0XABCDEF;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0xABCDEF\n+\n+    let b = 0O755;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0o755\n+\n+    let c = 0B10101010;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0b10101010\n+\n+    let d = 0XABC_DEF;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0xABC_DEF\n+\n+    let e = 0O7_55;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0o7_55\n+\n+    let f = 0B1010_1010;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0b1010_1010\n+\n+    let g = 0XABC_DEF_u64;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0xABC_DEF_u64\n+\n+    let h = 0O7_55_u32;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0o7_55_u32\n+\n+    let i = 0B1010_1010_u8;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0b1010_1010_u8\n+    //\n+    let j = 0XABCDEFu64;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0xABCDEFu64\n+\n+    let k = 0O755u32;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0o755u32\n+\n+    let l = 0B10101010u8;\n+    //~^ ERROR invalid base prefix for number literal\n+    //~| NOTE base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    //~| HELP try making the prefix lowercase\n+    //~| SUGGESTION 0b10101010u8\n+}"}, {"sha": "4ba8d5224b3e6f107cfc197dcdd88fd817772781", "filename": "src/test/ui/numeric/uppercase-base-prefix.stderr", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Ftest%2Fui%2Fnumeric%2Fuppercase-base-prefix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Ftest%2Fui%2Fnumeric%2Fuppercase-base-prefix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fuppercase-base-prefix.stderr?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -0,0 +1,98 @@\n+error: invalid base prefix for number literal\n+  --> $DIR/uppercase-base-prefix.rs:6:13\n+   |\n+LL |     let a = 0XABCDEF;\n+   |             ^^^^^^^^ help: try making the prefix lowercase (notice the capitalization): `0xABCDEF`\n+   |\n+   = note: base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+\n+error: invalid base prefix for number literal\n+  --> $DIR/uppercase-base-prefix.rs:12:13\n+   |\n+LL |     let b = 0O755;\n+   |             ^^^^^ help: try making the prefix lowercase (notice the capitalization): `0o755`\n+   |\n+   = note: base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+\n+error: invalid base prefix for number literal\n+  --> $DIR/uppercase-base-prefix.rs:18:13\n+   |\n+LL |     let c = 0B10101010;\n+   |             ^^^^^^^^^^ help: try making the prefix lowercase: `0b10101010`\n+   |\n+   = note: base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+\n+error: invalid base prefix for number literal\n+  --> $DIR/uppercase-base-prefix.rs:24:13\n+   |\n+LL |     let d = 0XABC_DEF;\n+   |             ^^^^^^^^^ help: try making the prefix lowercase (notice the capitalization): `0xABC_DEF`\n+   |\n+   = note: base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+\n+error: invalid base prefix for number literal\n+  --> $DIR/uppercase-base-prefix.rs:30:13\n+   |\n+LL |     let e = 0O7_55;\n+   |             ^^^^^^ help: try making the prefix lowercase (notice the capitalization): `0o7_55`\n+   |\n+   = note: base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+\n+error: invalid base prefix for number literal\n+  --> $DIR/uppercase-base-prefix.rs:36:13\n+   |\n+LL |     let f = 0B1010_1010;\n+   |             ^^^^^^^^^^^ help: try making the prefix lowercase: `0b1010_1010`\n+   |\n+   = note: base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+\n+error: invalid base prefix for number literal\n+  --> $DIR/uppercase-base-prefix.rs:42:13\n+   |\n+LL |     let g = 0XABC_DEF_u64;\n+   |             ^^^^^^^^^^^^^ help: try making the prefix lowercase (notice the capitalization): `0xABC_DEF_u64`\n+   |\n+   = note: base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+\n+error: invalid base prefix for number literal\n+  --> $DIR/uppercase-base-prefix.rs:48:13\n+   |\n+LL |     let h = 0O7_55_u32;\n+   |             ^^^^^^^^^^ help: try making the prefix lowercase (notice the capitalization): `0o7_55_u32`\n+   |\n+   = note: base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+\n+error: invalid base prefix for number literal\n+  --> $DIR/uppercase-base-prefix.rs:54:13\n+   |\n+LL |     let i = 0B1010_1010_u8;\n+   |             ^^^^^^^^^^^^^^ help: try making the prefix lowercase: `0b1010_1010_u8`\n+   |\n+   = note: base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+\n+error: invalid base prefix for number literal\n+  --> $DIR/uppercase-base-prefix.rs:60:13\n+   |\n+LL |     let j = 0XABCDEFu64;\n+   |             ^^^^^^^^^^^ help: try making the prefix lowercase (notice the capitalization): `0xABCDEFu64`\n+   |\n+   = note: base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+\n+error: invalid base prefix for number literal\n+  --> $DIR/uppercase-base-prefix.rs:66:13\n+   |\n+LL |     let k = 0O755u32;\n+   |             ^^^^^^^^ help: try making the prefix lowercase (notice the capitalization): `0o755u32`\n+   |\n+   = note: base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+\n+error: invalid base prefix for number literal\n+  --> $DIR/uppercase-base-prefix.rs:72:13\n+   |\n+LL |     let l = 0B10101010u8;\n+   |             ^^^^^^^^^^^^ help: try making the prefix lowercase: `0b10101010u8`\n+   |\n+   = note: base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "a648d6b6d4b54d92f103161d6586ebedc29fd4fd", "filename": "src/test/ui/proc-macro/quote-debug.stdout", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -27,8 +27,7 @@ fn main() {\n                         crate::TokenStream::from(crate::TokenTree::Literal({\n                                     let mut iter =\n                                         \"\\\"world\\\"\".parse::<crate::TokenStream>().unwrap().into_iter();\n-                                    if let (Some(crate::TokenTree::Literal(mut lit)),\n-                                                None) =\n+                                    if let (Some(crate::TokenTree::Literal(mut lit)), None) =\n                                                 (iter.next(), iter.next()) {\n                                             lit.set_span(crate::Span::recover_proc_macro_span(2));\n                                             lit"}, {"sha": "81b6a996072156dd6e306c56c8286f7f41426ef4", "filename": "src/test/ui/typeck/issue-91328.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.fixed?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -0,0 +1,37 @@\n+// Regression test for issue #91328.\n+\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+fn foo(r: Result<Vec<i32>, i32>) -> i32 {\n+    match r.as_deref() {\n+    //~^ HELP: consider using `as_deref` here\n+        Ok([a, b]) => a + b,\n+        //~^ ERROR: expected an array or slice\n+        //~| NOTE: pattern cannot match with input type\n+        _ => 42,\n+    }\n+}\n+\n+fn bar(o: Option<Vec<i32>>) -> i32 {\n+    match o.as_deref() {\n+    //~^ HELP: consider using `as_deref` here\n+        Some([a, b]) => a + b,\n+        //~^ ERROR: expected an array or slice\n+        //~| NOTE: pattern cannot match with input type\n+        _ => 42,\n+    }\n+}\n+\n+fn baz(v: Vec<i32>) -> i32 {\n+    match v[..] {\n+    //~^ HELP: consider slicing here\n+        [a, b] => a + b,\n+        //~^ ERROR: expected an array or slice\n+        //~| NOTE: pattern cannot match with input type\n+        _ => 42,\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e938d8f5c9f04b96d66bb93883dbd83b3eec4ad5", "filename": "src/test/ui/typeck/issue-91328.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.rs?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -0,0 +1,37 @@\n+// Regression test for issue #91328.\n+\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+fn foo(r: Result<Vec<i32>, i32>) -> i32 {\n+    match r {\n+    //~^ HELP: consider using `as_deref` here\n+        Ok([a, b]) => a + b,\n+        //~^ ERROR: expected an array or slice\n+        //~| NOTE: pattern cannot match with input type\n+        _ => 42,\n+    }\n+}\n+\n+fn bar(o: Option<Vec<i32>>) -> i32 {\n+    match o {\n+    //~^ HELP: consider using `as_deref` here\n+        Some([a, b]) => a + b,\n+        //~^ ERROR: expected an array or slice\n+        //~| NOTE: pattern cannot match with input type\n+        _ => 42,\n+    }\n+}\n+\n+fn baz(v: Vec<i32>) -> i32 {\n+    match v {\n+    //~^ HELP: consider slicing here\n+        [a, b] => a + b,\n+        //~^ ERROR: expected an array or slice\n+        //~| NOTE: pattern cannot match with input type\n+        _ => 42,\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "96ad00cde4f7b619f35219b956185e4e65bdda47", "filename": "src/test/ui/typeck/issue-91328.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93e8201ca75ebadc341c20c92ad24a4122c83991/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.stderr?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -0,0 +1,30 @@\n+error[E0529]: expected an array or slice, found `Vec<i32>`\n+  --> $DIR/issue-91328.rs:10:12\n+   |\n+LL |     match r {\n+   |           - help: consider using `as_deref` here: `r.as_deref()`\n+LL |\n+LL |         Ok([a, b]) => a + b,\n+   |            ^^^^^^ pattern cannot match with input type `Vec<i32>`\n+\n+error[E0529]: expected an array or slice, found `Vec<i32>`\n+  --> $DIR/issue-91328.rs:20:14\n+   |\n+LL |     match o {\n+   |           - help: consider using `as_deref` here: `o.as_deref()`\n+LL |\n+LL |         Some([a, b]) => a + b,\n+   |              ^^^^^^ pattern cannot match with input type `Vec<i32>`\n+\n+error[E0529]: expected an array or slice, found `Vec<i32>`\n+  --> $DIR/issue-91328.rs:30:9\n+   |\n+LL |     match v {\n+   |           - help: consider slicing here: `v[..]`\n+LL |\n+LL |         [a, b] => a + b,\n+   |         ^^^^^^ pattern cannot match with input type `Vec<i32>`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0529`."}, {"sha": "25fcb135d02ea897ce894b67ae021f48107d522b", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=93e8201ca75ebadc341c20c92ad24a4122c83991", "patch": "@@ -1 +1 @@\n-Subproject commit 1c034752de0df744fcd7788fcbca158830b8bf85\n+Subproject commit 25fcb135d02ea897ce894b67ae021f48107d522b"}]}