{"sha": "2f454be47a934c774cdfd0651193157d9b96bf71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNDU0YmU0N2E5MzRjNzc0Y2RmZDA2NTExOTMxNTdkOWI5NmJmNzE=", "commit": {"author": {"name": "Stu Black", "email": "trurl@freeshell.org", "date": "2016-03-14T20:35:08Z"}, "committer": {"name": "Stu Black", "email": "trurl@freeshell.org", "date": "2016-03-14T20:35:08Z"}, "message": "Expose the key of Entry variants for HashMap and BTreeMap.", "tree": {"sha": "8bc530149895fd1021cf690d857e35d923dee25c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bc530149895fd1021cf690d857e35d923dee25c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f454be47a934c774cdfd0651193157d9b96bf71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f454be47a934c774cdfd0651193157d9b96bf71", "html_url": "https://github.com/rust-lang/rust/commit/2f454be47a934c774cdfd0651193157d9b96bf71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f454be47a934c774cdfd0651193157d9b96bf71/comments", "author": {"login": "dstu", "id": 127874, "node_id": "MDQ6VXNlcjEyNzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/127874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dstu", "html_url": "https://github.com/dstu", "followers_url": "https://api.github.com/users/dstu/followers", "following_url": "https://api.github.com/users/dstu/following{/other_user}", "gists_url": "https://api.github.com/users/dstu/gists{/gist_id}", "starred_url": "https://api.github.com/users/dstu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dstu/subscriptions", "organizations_url": "https://api.github.com/users/dstu/orgs", "repos_url": "https://api.github.com/users/dstu/repos", "events_url": "https://api.github.com/users/dstu/events{/privacy}", "received_events_url": "https://api.github.com/users/dstu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dstu", "id": 127874, "node_id": "MDQ6VXNlcjEyNzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/127874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dstu", "html_url": "https://github.com/dstu", "followers_url": "https://api.github.com/users/dstu/followers", "following_url": "https://api.github.com/users/dstu/following{/other_user}", "gists_url": "https://api.github.com/users/dstu/gists{/gist_id}", "starred_url": "https://api.github.com/users/dstu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dstu/subscriptions", "organizations_url": "https://api.github.com/users/dstu/orgs", "repos_url": "https://api.github.com/users/dstu/repos", "events_url": "https://api.github.com/users/dstu/events{/privacy}", "received_events_url": "https://api.github.com/users/dstu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af8f85cc397e10cc63b7c1c2ece7423d438afc67", "url": "https://api.github.com/repos/rust-lang/rust/commits/af8f85cc397e10cc63b7c1c2ece7423d438afc67", "html_url": "https://github.com/rust-lang/rust/commit/af8f85cc397e10cc63b7c1c2ece7423d438afc67"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "04c571110645cab641665cf9a7c7b4b60d601b93", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2f454be47a934c774cdfd0651193157d9b96bf71/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f454be47a934c774cdfd0651193157d9b96bf71/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=2f454be47a934c774cdfd0651193157d9b96bf71", "patch": "@@ -1465,6 +1465,13 @@ impl<'a, K: Ord, V> Entry<'a, K, V> {\n }\n \n impl<'a, K: Ord, V> VacantEntry<'a, K, V> {\n+    /// Gets a reference to the key that would be used when inserting a value\n+    /// through the VacantEntry.\n+    #[unstable(feature = \"map_entry_keys\", issue = \"1541\")]\n+    pub fn key(&self) -> &K {\n+        &self.key\n+    }\n+\n     /// Sets the value of the entry with the VacantEntry's key,\n     /// and returns a mutable reference to it.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1509,6 +1516,12 @@ impl<'a, K: Ord, V> VacantEntry<'a, K, V> {\n }\n \n impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n+    /// Gets a reference to the key in the entry.\n+    #[unstable(feature = \"map_entry_keys\", issue = \"1541\")]\n+    pub fn key(&self) -> &K {\n+        self.handle.reborrow().into_kv().0\n+    }\n+\n     /// Gets a reference to the value in the entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get(&self) -> &V {"}, {"sha": "a27c2847a98bcc9f770fb43851ea9b8bf7e5ef65", "filename": "src/libcollectionstest/btree/map.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2f454be47a934c774cdfd0651193157d9b96bf71/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f454be47a934c774cdfd0651193157d9b96bf71/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbtree%2Fmap.rs?ref=2f454be47a934c774cdfd0651193157d9b96bf71", "patch": "@@ -395,6 +395,42 @@ fn test_variance() {\n     fn vals<'a, 'new>(v: Values<'a, (), &'static str>) -> Values<'a, (), &'new str> { v }\n }\n \n+#[test]\n+fn test_occupied_entry_key() {\n+    let mut a = BTreeMap::new();\n+    let key = \"hello there\";\n+    let value = \"value goes here\";\n+    assert!(a.is_empty());\n+    a.insert(key.clone(), value.clone());\n+    assert_eq!(a.len(), 1);\n+    assert_eq!(a[key], value);\n+\n+    match a.entry(key.clone()) {\n+        Vacant(_) => panic!(),\n+        Occupied(e) => assert_eq!(key, *e.key()),\n+    }\n+    assert_eq!(a.len(), 1);\n+    assert_eq!(a[key], value);\n+}\n+\n+#[test]\n+fn test_vacant_entry_key() {\n+    let mut a = BTreeMap::new();\n+    let key = \"hello there\";\n+    let value = \"value goes here\";\n+\n+    assert!(a.is_empty());\n+    match a.entry(key.clone()) {\n+        Occupied(_) => panic!(),\n+        Vacant(e) => {\n+            assert_eq!(key, *e.key());\n+            e.insert(value.clone());\n+        },\n+    }\n+    assert_eq!(a.len(), 1);\n+    assert_eq!(a[key], value);\n+}\n+\n mod bench {\n     use std::collections::BTreeMap;\n     use std::__rand::{Rng, thread_rng};"}, {"sha": "62fefaa10f677a694c66962b6d5f398d42206c30", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f454be47a934c774cdfd0651193157d9b96bf71/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f454be47a934c774cdfd0651193157d9b96bf71/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=2f454be47a934c774cdfd0651193157d9b96bf71", "patch": "@@ -21,6 +21,7 @@\n #![feature(fn_traits)]\n #![feature(enumset)]\n #![feature(iter_arith)]\n+#![feature(map_entry_keys)]\n #![feature(pattern)]\n #![feature(rand)]\n #![feature(set_recovery)]"}, {"sha": "9511133dda51b0d419f05a7ffc08e56d735e74ec", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2f454be47a934c774cdfd0651193157d9b96bf71/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f454be47a934c774cdfd0651193157d9b96bf71/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=2f454be47a934c774cdfd0651193157d9b96bf71", "patch": "@@ -1554,6 +1554,12 @@ impl<'a, K, V> Entry<'a, K, V> {\n }\n \n impl<'a, K, V> OccupiedEntry<'a, K, V> {\n+    /// Gets a reference to the key in the entry.\n+    #[unstable(feature = \"map_entry_keys\", issue = \"1541\")]\n+    pub fn key(&self) -> &K {\n+        self.elem.read().0\n+    }\n+\n     /// Gets a reference to the value in the entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get(&self) -> &V {\n@@ -1589,6 +1595,13 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n }\n \n impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {\n+    /// Gets a reference to the key that would be used when inserting a value\n+    /// through the VacantEntry.\n+    #[unstable(feature = \"map_entry_keys\", issue = \"1541\")]\n+    pub fn key(&self) -> &K {\n+        &self.key\n+    }\n+\n     /// Sets the value of the entry with the VacantEntry's key,\n     /// and returns a mutable reference to it\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2434,4 +2447,40 @@ mod test_map {\n         a.insert(item, 0);\n         assert!(a.capacity() > a.len());\n     }\n+\n+    #[test]\n+    fn test_occupied_entry_key() {\n+        let mut a = HashMap::new();\n+        let key = \"hello there\";\n+        let value = \"value goes here\";\n+        assert!(a.is_empty());\n+        a.insert(key.clone(), value.clone());\n+        assert_eq!(a.len(), 1);\n+        assert_eq!(a[key], value);\n+\n+        match a.entry(key.clone()) {\n+            Vacant(_) => panic!(),\n+            Occupied(e) => assert_eq!(key, *e.key()),\n+        }\n+        assert_eq!(a.len(), 1);\n+        assert_eq!(a[key], value);\n+    }\n+\n+    #[test]\n+    fn test_vacant_entry_key() {\n+        let mut a = HashMap::new();\n+        let key = \"hello there\";\n+        let value = \"value goes here\";\n+\n+        assert!(a.is_empty());\n+        match a.entry(key.clone()) {\n+            Occupied(_) => panic!(),\n+            Vacant(e) => {\n+                assert_eq!(key, *e.key());\n+                e.insert(value.clone());\n+            },\n+        }\n+        assert_eq!(a.len(), 1);\n+        assert_eq!(a[key], value);\n+    }\n }"}]}