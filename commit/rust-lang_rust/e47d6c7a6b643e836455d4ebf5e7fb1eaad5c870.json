{"sha": "e47d6c7a6b643e836455d4ebf5e7fb1eaad5c870", "node_id": "C_kwDOAAsO6NoAKGU0N2Q2YzdhNmI2NDNlODM2NDU1ZDRlYmY1ZTdmYjFlYWFkNWM4NzA", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-05T07:55:38Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-05T07:55:38Z"}, "message": "give it a scary name", "tree": {"sha": "0ae81bd402d2c0103466cc3dbcb42e56d36654ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ae81bd402d2c0103466cc3dbcb42e56d36654ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e47d6c7a6b643e836455d4ebf5e7fb1eaad5c870", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e47d6c7a6b643e836455d4ebf5e7fb1eaad5c870", "html_url": "https://github.com/rust-lang/rust/commit/e47d6c7a6b643e836455d4ebf5e7fb1eaad5c870", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e47d6c7a6b643e836455d4ebf5e7fb1eaad5c870/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b20da81805c70c1991f58452b8fa1b7dc5b3256", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b20da81805c70c1991f58452b8fa1b7dc5b3256", "html_url": "https://github.com/rust-lang/rust/commit/5b20da81805c70c1991f58452b8fa1b7dc5b3256"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "a8a5ac2f9d95d4b6aae2cf0d801890322edd7c42", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e47d6c7a6b643e836455d4ebf5e7fb1eaad5c870/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47d6c7a6b643e836455d4ebf5e7fb1eaad5c870/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=e47d6c7a6b643e836455d4ebf5e7fb1eaad5c870", "patch": "@@ -252,7 +252,9 @@ impl<'tcx, Tag: Provenance> ImmTy<'tcx, Tag> {\n impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Try reading an immediate in memory; this is interesting particularly for `ScalarPair`.\n     /// Returns `None` if the layout does not permit loading this as a value.\n-    fn try_read_immediate_from_mplace(\n+    ///\n+    /// This is an internal function; call `read_immediate` instead.\n+    fn read_immediate_from_mplace_raw(\n         &self,\n         mplace: &MPlaceTy<'tcx, M::PointerTag>,\n         force: bool,\n@@ -312,24 +314,25 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         return Ok(None);\n     }\n \n-    /// Try returning an immediate for the operand.\n-    /// If the layout does not permit loading this as an immediate, return where in memory\n-    /// we can find the data.\n+    /// Try returning an immediate for the operand. If the layout does not permit loading this as an\n+    /// immediate, return where in memory we can find the data.\n     /// Note that for a given layout, this operation will either always fail or always\n     /// succeed!  Whether it succeeds depends on whether the layout can be represented\n     /// in an `Immediate`, not on which data is stored there currently.\n     ///\n     /// If `force` is `true`, then even scalars with fields that can be ununit will be\n     /// read. This means the load is lossy and should not be written back!\n     /// This flag exists only for validity checking.\n-    pub fn try_read_immediate(\n+    ///\n+    /// This is an internal function that should not usually be used; call `read_immediate` instead.\n+    pub fn read_immediate_raw(\n         &self,\n         src: &OpTy<'tcx, M::PointerTag>,\n         force: bool,\n     ) -> InterpResult<'tcx, Result<ImmTy<'tcx, M::PointerTag>, MPlaceTy<'tcx, M::PointerTag>>> {\n         Ok(match src.try_as_mplace() {\n             Ok(ref mplace) => {\n-                if let Some(val) = self.try_read_immediate_from_mplace(mplace, force)? {\n+                if let Some(val) = self.read_immediate_from_mplace_raw(mplace, force)? {\n                     Ok(val)\n                 } else {\n                     Err(*mplace)\n@@ -345,7 +348,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         &self,\n         op: &OpTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx, ImmTy<'tcx, M::PointerTag>> {\n-        if let Ok(imm) = self.try_read_immediate(op, /*force*/ false)? {\n+        if let Ok(imm) = self.read_immediate_raw(op, /*force*/ false)? {\n             Ok(imm)\n         } else {\n             span_bug!(self.cur_span(), \"primitive read failed for type: {:?}\", op.layout.ty);"}, {"sha": "df6e05bb13cde81b839894c3f2496d1a71c03123", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e47d6c7a6b643e836455d4ebf5e7fb1eaad5c870/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47d6c7a6b643e836455d4ebf5e7fb1eaad5c870/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=e47d6c7a6b643e836455d4ebf5e7fb1eaad5c870", "patch": "@@ -720,7 +720,7 @@ where\n         }\n         trace!(\"write_immediate: {:?} <- {:?}: {}\", *dest, src, dest.layout.ty);\n \n-        // See if we can avoid an allocation. This is the counterpart to `try_read_immediate`,\n+        // See if we can avoid an allocation. This is the counterpart to `read_immediate_raw`,\n         // but not factored as a separate function.\n         let mplace = match dest.place {\n             Place::Local { frame, local } => {\n@@ -879,7 +879,7 @@ where\n         }\n \n         // Let us see if the layout is simple so we take a shortcut, avoid force_allocation.\n-        let src = match self.try_read_immediate(src, /*force*/ false)? {\n+        let src = match self.read_immediate_raw(src, /*force*/ false)? {\n             Ok(src_val) => {\n                 assert!(!src.layout.is_unsized(), \"cannot have unsized immediates\");\n                 // Yay, we got a value that we can write directly."}, {"sha": "92e3ac04dc41813522fd6266356d9611f85876f2", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e47d6c7a6b643e836455d4ebf5e7fb1eaad5c870/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47d6c7a6b643e836455d4ebf5e7fb1eaad5c870/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=e47d6c7a6b643e836455d4ebf5e7fb1eaad5c870", "patch": "@@ -492,7 +492,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         op: &OpTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx, Immediate<M::PointerTag>> {\n         Ok(*try_validation!(\n-            self.ecx.try_read_immediate(op, /*force*/ true),\n+            self.ecx.read_immediate_raw(op, /*force*/ true),\n             self.path,\n             err_unsup!(ReadPointerAsBytes) => { \"(potentially part of) a pointer\" } expected { \"plain (non-pointer) bytes\" },\n         ).unwrap())"}, {"sha": "f7535d338da40dd05caa6e7a8e037498d2e94257", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e47d6c7a6b643e836455d4ebf5e7fb1eaad5c870/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47d6c7a6b643e836455d4ebf5e7fb1eaad5c870/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=e47d6c7a6b643e836455d4ebf5e7fb1eaad5c870", "patch": "@@ -415,7 +415,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n \n         // Try to read the local as an immediate so that if it is representable as a scalar, we can\n         // handle it as such, but otherwise, just return the value as is.\n-        Some(match self.ecx.try_read_immediate(&op, /*force*/ false) {\n+        Some(match self.ecx.read_immediate_raw(&op, /*force*/ false) {\n             Ok(Ok(imm)) => imm.into(),\n             _ => op,\n         })\n@@ -709,8 +709,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return;\n         }\n \n-        // FIXME> figure out what to do when try_read_immediate fails\n-        let imm = self.use_ecx(|this| this.ecx.try_read_immediate(value, /*force*/ false));\n+        // FIXME> figure out what to do when read_immediate_raw fails\n+        let imm = self.use_ecx(|this| this.ecx.read_immediate_raw(value, /*force*/ false));\n \n         if let Some(Ok(imm)) = imm {\n             match *imm {"}, {"sha": "aa898cfd3ba5ef3e5f14529e1cb3973599378348", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e47d6c7a6b643e836455d4ebf5e7fb1eaad5c870/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47d6c7a6b643e836455d4ebf5e7fb1eaad5c870/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=e47d6c7a6b643e836455d4ebf5e7fb1eaad5c870", "patch": "@@ -412,7 +412,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n \n         // Try to read the local as an immediate so that if it is representable as a scalar, we can\n         // handle it as such, but otherwise, just return the value as is.\n-        Some(match self.ecx.try_read_immediate(&op, /*force*/ false) {\n+        Some(match self.ecx.read_immediate_raw(&op, /*force*/ false) {\n             Ok(Ok(imm)) => imm.into(),\n             _ => op,\n         })"}]}