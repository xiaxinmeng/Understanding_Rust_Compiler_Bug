{"sha": "9157775152de849681105fbf6752135cd1b7d1e5", "node_id": "C_kwDOAAsO6NoAKDkxNTc3NzUxNTJkZTg0OTY4MTEwNWZiZjY3NTIxMzVjZDFiN2QxZTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-21T18:36:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-21T18:36:54Z"}, "message": "Rollup merge of #94215 - lcnr:leak-check, r=jackh726\n\ntrait system: comments and small nonfunctional changes\n\nr? `@nikomatsakis` because of the leak-check check removal", "tree": {"sha": "29553257c517aa96480f9e39d4da82b9595289c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29553257c517aa96480f9e39d4da82b9595289c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9157775152de849681105fbf6752135cd1b7d1e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiE9vGCRBK7hj4Ov3rIwAAK9MIAD4chKVTTPt+77mspfu0vV1h\nT7o8aY7VmIuqqTNlrC+iuNQGRGvgqlRhIGORToMkR1yKawe2v/EkyPg4lhC8Uos/\ngCLZ8oTbAJ4bbqx5l+05q+JQyQp5TzoutUTE4i31ogEePYjYJAxJSEbApblTdgVJ\nxdJngieATOh1VOC6PqclQQUehaxMloHXbGg0CPpniTh2mLi/qqvFa2oe1/RTtD91\nSC8JPcfuBX78EsQTk8yxY87uj8kf32lQI0OM6Aj11MmHoqQV7CZoKPO/12sMHLzi\nLhguM/OABBAzq4TtBfc8pQQxhyMFafpdP9W5PmKa2l+ZW3h3rrKqLHZfIbWveyg=\n=CAhV\n-----END PGP SIGNATURE-----\n", "payload": "tree 29553257c517aa96480f9e39d4da82b9595289c3\nparent d3649f8d52c9e6d7b1877f6d6781d31c356b76af\nparent 6a1f5eab83eda92bbdad3f0e680f4a32f5c8a2a1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645468614 +0100\ncommitter GitHub <noreply@github.com> 1645468614 +0100\n\nRollup merge of #94215 - lcnr:leak-check, r=jackh726\n\ntrait system: comments and small nonfunctional changes\n\nr? `@nikomatsakis` because of the leak-check check removal\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9157775152de849681105fbf6752135cd1b7d1e5", "html_url": "https://github.com/rust-lang/rust/commit/9157775152de849681105fbf6752135cd1b7d1e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9157775152de849681105fbf6752135cd1b7d1e5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3649f8d52c9e6d7b1877f6d6781d31c356b76af", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3649f8d52c9e6d7b1877f6d6781d31c356b76af", "html_url": "https://github.com/rust-lang/rust/commit/d3649f8d52c9e6d7b1877f6d6781d31c356b76af"}, {"sha": "6a1f5eab83eda92bbdad3f0e680f4a32f5c8a2a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a1f5eab83eda92bbdad3f0e680f4a32f5c8a2a1", "html_url": "https://github.com/rust-lang/rust/commit/6a1f5eab83eda92bbdad3f0e680f4a32f5c8a2a1"}], "stats": {"total": 42, "additions": 19, "deletions": 23}, "files": [{"sha": "5fe2a1fb84bd76a8521db89806ed981c53308325", "filename": "compiler/rustc_data_structures/src/obligation_forest/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9157775152de849681105fbf6752135cd1b7d1e5/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9157775152de849681105fbf6752135cd1b7d1e5/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs?ref=9157775152de849681105fbf6752135cd1b7d1e5", "patch": "@@ -132,11 +132,11 @@ type ObligationTreeIdGenerator =\n     std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;\n \n pub struct ObligationForest<O: ForestObligation> {\n-    /// The list of obligations. In between calls to `process_obligations`,\n+    /// The list of obligations. In between calls to [Self::process_obligations],\n     /// this list only contains nodes in the `Pending` or `Waiting` state.\n     ///\n     /// `usize` indices are used here and throughout this module, rather than\n-    /// `rustc_index::newtype_index!` indices, because this code is hot enough\n+    /// [`rustc_index::newtype_index!`] indices, because this code is hot enough\n     /// that the `u32`-to-`usize` conversions that would be required are\n     /// significant, and space considerations are not important.\n     nodes: Vec<Node<O>>,\n@@ -146,10 +146,11 @@ pub struct ObligationForest<O: ForestObligation> {\n \n     /// A cache of the nodes in `nodes`, indexed by predicate. Unfortunately,\n     /// its contents are not guaranteed to match those of `nodes`. See the\n-    /// comments in `process_obligation` for details.\n+    /// comments in [`Self::process_obligation` for details.\n     active_cache: FxHashMap<O::CacheKey, usize>,\n \n-    /// A vector reused in compress() and find_cycles_from_node(), to avoid allocating new vectors.\n+    /// A vector reused in [Self::compress()] and [Self::find_cycles_from_node()],\n+    /// to avoid allocating new vectors.\n     reused_node_vec: Vec<usize>,\n \n     obligation_tree_id_generator: ObligationTreeIdGenerator,"}, {"sha": "652f5abab151f6659b6bf277ba8bd6e7f51cb358", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9157775152de849681105fbf6752135cd1b7d1e5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9157775152de849681105fbf6752135cd1b7d1e5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=9157775152de849681105fbf6752135cd1b7d1e5", "patch": "@@ -123,7 +123,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         result\n     }\n \n-    /// See `infer::region_constraints::RegionConstraintCollector::leak_check`.\n+    /// See [RegionConstraintCollector::leak_check][1].\n+    ///\n+    /// [1]: crate::infer::region_constraints::RegionConstraintCollector::leak_check\n     pub fn leak_check(\n         &self,\n         overly_polymorphic: bool,"}, {"sha": "817aaf10053efdf1812244e07f0fde928e6da47b", "filename": "compiler/rustc_infer/src/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9157775152de849681105fbf6752135cd1b7d1e5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9157775152de849681105fbf6752135cd1b7d1e5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=9157775152de849681105fbf6752135cd1b7d1e5", "patch": "@@ -100,6 +100,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n struct LeakCheck<'me, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     universe_at_start_of_snapshot: ty::UniverseIndex,\n+    /// Only used when reporting region errors.\n     overly_polymorphic: bool,\n     mini_graph: &'me MiniGraph<'tcx>,\n     rcc: &'me RegionConstraintCollector<'me, 'tcx>,"}, {"sha": "8b76f3f7151063de3cd84d48bce7b9e8642f772e", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9157775152de849681105fbf6752135cd1b7d1e5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9157775152de849681105fbf6752135cd1b7d1e5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=9157775152de849681105fbf6752135cd1b7d1e5", "patch": "@@ -160,20 +160,12 @@ fn overlap<'cx, 'tcx>(\n     );\n \n     selcx.infcx().probe_maybe_skip_leak_check(skip_leak_check.is_yes(), |snapshot| {\n-        overlap_within_probe(\n-            selcx,\n-            skip_leak_check,\n-            impl1_def_id,\n-            impl2_def_id,\n-            overlap_mode,\n-            snapshot,\n-        )\n+        overlap_within_probe(selcx, impl1_def_id, impl2_def_id, overlap_mode, snapshot)\n     })\n }\n \n fn overlap_within_probe<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n-    skip_leak_check: SkipLeakCheck,\n     impl1_def_id: DefId,\n     impl2_def_id: DefId,\n     overlap_mode: OverlapMode,\n@@ -207,11 +199,11 @@ fn overlap_within_probe<'cx, 'tcx>(\n         }\n     }\n \n-    if !skip_leak_check.is_yes() {\n-        if infcx.leak_check(true, snapshot).is_err() {\n-            debug!(\"overlap: leak check failed\");\n-            return None;\n-        }\n+    // We disable the leak when when creating the `snapshot` by using\n+    // `infcx.probe_maybe_disable_leak_check`.\n+    if infcx.leak_check(true, snapshot).is_err() {\n+        debug!(\"overlap: leak check failed\");\n+        return None;\n     }\n \n     let intercrate_ambiguity_causes = selcx.take_intercrate_ambiguity_causes();"}, {"sha": "362d669f867e01ac8d86d147553a417b8e3479fa", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9157775152de849681105fbf6752135cd1b7d1e5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9157775152de849681105fbf6752135cd1b7d1e5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=9157775152de849681105fbf6752135cd1b7d1e5", "patch": "@@ -314,7 +314,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n             return ProcessResult::Unchanged;\n         }\n \n-        self.progress_changed_obligations(pending_obligation)\n+        self.process_changed_obligations(pending_obligation)\n     }\n \n     fn process_backedge<'c, I>(\n@@ -338,7 +338,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n     // actually uses this, so move this part of the code\n     // out of that loop.\n     #[inline(never)]\n-    fn progress_changed_obligations(\n+    fn process_changed_obligations(\n         &mut self,\n         pending_obligation: &mut PendingPredicateObligation<'tcx>,\n     ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {"}, {"sha": "4d7c9ef89e62b4915e80d762b3ae8f2db8e9da3a", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9157775152de849681105fbf6752135cd1b7d1e5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9157775152de849681105fbf6752135cd1b7d1e5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=9157775152de849681105fbf6752135cd1b7d1e5", "patch": "@@ -389,7 +389,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         for bound in matching_bounds {\n             // FIXME(oli-obk): it is suspicious that we are dropping the constness and\n             // polarity here.\n-            let wc = self.evaluate_where_clause(stack, bound.map_bound(|t| t.trait_ref))?;\n+            let wc = self.where_clause_may_apply(stack, bound.map_bound(|t| t.trait_ref))?;\n             if wc.may_apply() {\n                 candidates.vec.push(ParamCandidate(bound));\n             }"}, {"sha": "4f804069df997840b7aa6c4daa44a85fd7b0d8f8", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9157775152de849681105fbf6752135cd1b7d1e5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9157775152de849681105fbf6752135cd1b7d1e5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=9157775152de849681105fbf6752135cd1b7d1e5", "patch": "@@ -1481,7 +1481,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .map_err(|_| ())\n     }\n \n-    fn evaluate_where_clause<'o>(\n+    fn where_clause_may_apply<'o>(\n         &mut self,\n         stack: &TraitObligationStack<'o, 'tcx>,\n         where_clause_trait_ref: ty::PolyTraitRef<'tcx>,"}]}