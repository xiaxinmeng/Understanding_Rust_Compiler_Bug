{"sha": "c3fdc8c7b56fe8e786801b87f809ddc2f51eea42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZmRjOGM3YjU2ZmU4ZTc4NjgwMWI4N2Y4MDlkZGMyZjUxZWVhNDI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-31T18:39:31Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-31T18:40:17Z"}, "message": "Remove the no-longer-true fact of cmp (and soon, log) being universal.", "tree": {"sha": "f659d0f0e132a57d7a8f8e0f0a617be44ee0c725", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f659d0f0e132a57d7a8f8e0f0a617be44ee0c725"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3fdc8c7b56fe8e786801b87f809ddc2f51eea42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3fdc8c7b56fe8e786801b87f809ddc2f51eea42", "html_url": "https://github.com/rust-lang/rust/commit/c3fdc8c7b56fe8e786801b87f809ddc2f51eea42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3fdc8c7b56fe8e786801b87f809ddc2f51eea42/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee37f8a0065f5e050b65aadabbb66fcae5085db4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee37f8a0065f5e050b65aadabbb66fcae5085db4", "html_url": "https://github.com/rust-lang/rust/commit/ee37f8a0065f5e050b65aadabbb66fcae5085db4"}], "stats": {"total": 13, "additions": 0, "deletions": 13}, "files": [{"sha": "5b5623020c842550aa4bce058597ffe00493388e", "filename": "doc/tutorial.md", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c3fdc8c7b56fe8e786801b87f809ddc2f51eea42/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/c3fdc8c7b56fe8e786801b87f809ddc2f51eea42/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=c3fdc8c7b56fe8e786801b87f809ddc2f51eea42", "patch": "@@ -1993,19 +1993,6 @@ comparison operator, so you'll have to write `::<T>` to explicitly\n give a type to a name that denotes a generic value. Fortunately, this\n is rarely necessary.\n \n-## Polymorphic built-ins\n-\n-There are two built-in operations that, perhaps surprisingly, act on\n-values of any type. It was already mentioned earlier that `log` can\n-take any type of value and output it.\n-\n-More interesting is that Rust also defines an ordering for values of\n-all datatypes, and allows you to meaningfully apply comparison\n-operators (`<`, `>`, `<=`, `>=`, `==`, `!=`) to them. For structural\n-types, the comparison happens left to right, so `~\"abc\" < ~\"bac\"` (but\n-note that `~\"bac\" < ~\"\u00e1c\"`, because the ordering acts on UTF-8 sequences\n-without any sophistication).\n-\n ## Kinds\n \n Perhaps surprisingly, the 'copy' (duplicate) operation is not defined"}]}