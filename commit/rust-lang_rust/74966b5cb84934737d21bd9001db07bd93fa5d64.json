{"sha": "74966b5cb84934737d21bd9001db07bd93fa5d64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0OTY2YjVjYjg0OTM0NzM3ZDIxYmQ5MDAxZGIwN2JkOTNmYTVkNjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-09T04:22:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-09T04:22:50Z"}, "message": "Auto merge of #47276 - kennytm:rollup, r=kennytm\n\nRollup of 10 pull requests\n\n- Successful merges: #47210, #47233, #47246, #47254, #47256, #47258, #47259, #47263, #47270, #47272\n- Failed merges: #47248", "tree": {"sha": "91adae4383a3e9a5dcbd68543a78ef9adcda5b29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91adae4383a3e9a5dcbd68543a78ef9adcda5b29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74966b5cb84934737d21bd9001db07bd93fa5d64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74966b5cb84934737d21bd9001db07bd93fa5d64", "html_url": "https://github.com/rust-lang/rust/commit/74966b5cb84934737d21bd9001db07bd93fa5d64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74966b5cb84934737d21bd9001db07bd93fa5d64/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5392f54503fdaf04df4b9578510b2baa944f4af", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5392f54503fdaf04df4b9578510b2baa944f4af", "html_url": "https://github.com/rust-lang/rust/commit/b5392f54503fdaf04df4b9578510b2baa944f4af"}, {"sha": "9ef98545c9d55e109242b6b3489060ebc690ab05", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ef98545c9d55e109242b6b3489060ebc690ab05", "html_url": "https://github.com/rust-lang/rust/commit/9ef98545c9d55e109242b6b3489060ebc690ab05"}], "stats": {"total": 354, "additions": 192, "deletions": 162}, "files": [{"sha": "65aacb23bd76813511c1381d85f73b17b1a1a344", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -83,9 +83,12 @@ pub type Result = result::Result<(), Error>;\n /// some other means.\n ///\n /// An important thing to remember is that the type `fmt::Error` should not be\n-/// confused with `std::io::Error` or `std::error::Error`, which you may also\n+/// confused with [`std::io::Error`] or [`std::error::Error`], which you may also\n /// have in scope.\n ///\n+/// [`std::io::Error`]: ../../std/io/struct.Error.html\n+/// [`std::error::Error`]: ../../std/error/trait.Error.html\n+///\n /// # Examples\n ///\n /// ```rust"}, {"sha": "904d80a4c021bc04774a5e8e9df466d44054391a", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -50,7 +50,7 @@ struct MarkSymbolVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n     live_symbols: Box<FxHashSet<ast::NodeId>>,\n-    struct_has_extern_repr: bool,\n+    repr_has_repr_c: bool,\n     in_pat: bool,\n     inherited_pub_visibility: bool,\n     ignore_variant_stack: Vec<DefId>,\n@@ -102,7 +102,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     fn handle_field_access(&mut self, lhs: &hir::Expr, name: ast::Name) {\n         match self.tables.expr_ty_adjusted(lhs).sty {\n             ty::TyAdt(def, _) => {\n-                self.insert_def_id(def.struct_variant().field_named(name).did);\n+                self.insert_def_id(def.non_enum_variant().field_named(name).did);\n             }\n             _ => span_bug!(lhs.span, \"named field access on non-ADT\"),\n         }\n@@ -111,7 +111,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     fn handle_tup_field_access(&mut self, lhs: &hir::Expr, idx: usize) {\n         match self.tables.expr_ty_adjusted(lhs).sty {\n             ty::TyAdt(def, _) => {\n-                self.insert_def_id(def.struct_variant().fields[idx].did);\n+                self.insert_def_id(def.non_enum_variant().fields[idx].did);\n             }\n             ty::TyTuple(..) => {}\n             _ => span_bug!(lhs.span, \"numeric field access on non-ADT\"),\n@@ -149,8 +149,8 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     }\n \n     fn visit_node(&mut self, node: &hir_map::Node<'tcx>) {\n-        let had_extern_repr = self.struct_has_extern_repr;\n-        self.struct_has_extern_repr = false;\n+        let had_repr_c = self.repr_has_repr_c;\n+        self.repr_has_repr_c = false;\n         let had_inherited_pub_visibility = self.inherited_pub_visibility;\n         self.inherited_pub_visibility = false;\n         match *node {\n@@ -159,7 +159,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                     hir::ItemStruct(..) | hir::ItemUnion(..) => {\n                         let def_id = self.tcx.hir.local_def_id(item.id);\n                         let def = self.tcx.adt_def(def_id);\n-                        self.struct_has_extern_repr = def.repr.c();\n+                        self.repr_has_repr_c = def.repr.c();\n \n                         intravisit::walk_item(self, &item);\n                     }\n@@ -187,7 +187,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             }\n             _ => ()\n         }\n-        self.struct_has_extern_repr = had_extern_repr;\n+        self.repr_has_repr_c = had_repr_c;\n         self.inherited_pub_visibility = had_inherited_pub_visibility;\n     }\n \n@@ -223,10 +223,10 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n \n     fn visit_variant_data(&mut self, def: &'tcx hir::VariantData, _: ast::Name,\n                         _: &hir::Generics, _: ast::NodeId, _: syntax_pos::Span) {\n-        let has_extern_repr = self.struct_has_extern_repr;\n+        let has_repr_c = self.repr_has_repr_c;\n         let inherited_pub_visibility = self.inherited_pub_visibility;\n         let live_fields = def.fields().iter().filter(|f| {\n-            has_extern_repr || inherited_pub_visibility || f.vis == hir::Public\n+            has_repr_c || inherited_pub_visibility || f.vis == hir::Public\n         });\n         self.live_symbols.extend(live_fields.map(|f| f.id));\n \n@@ -428,7 +428,7 @@ fn find_live<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         tcx,\n         tables: &ty::TypeckTables::empty(None),\n         live_symbols: box FxHashSet(),\n-        struct_has_extern_repr: false,\n+        repr_has_repr_c: false,\n         in_pat: false,\n         inherited_pub_visibility: false,\n         ignore_variant_stack: vec![],"}, {"sha": "c69005101c67141ae474e3dc4274a060160cb564", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -663,7 +663,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n         match with_cmt.ty.sty {\n             ty::TyAdt(adt, substs) if adt.is_struct() => {\n                 // Consume those fields of the with expression that are needed.\n-                for with_field in &adt.struct_variant().fields {\n+                for with_field in &adt.non_enum_variant().fields {\n                     if !contains_field_named(with_field, fields) {\n                         let cmt_field = self.mc.cat_field(\n                             &*with_expr,"}, {"sha": "a8955723e3ae01da07466a4d5161209ad9992179", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -1248,7 +1248,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                 Def::StructCtor(_, CtorKind::Fn) => {\n                     match self.pat_ty(&pat)?.sty {\n                         ty::TyAdt(adt_def, _) => {\n-                            (cmt, adt_def.struct_variant().fields.len())\n+                            (cmt, adt_def.non_enum_variant().fields.len())\n                         }\n                         ref ty => {\n                             span_bug!(pat.span, \"tuple struct pattern unexpected type {:?}\", ty);"}, {"sha": "5e470e8d86eac218ab3318ea90c6935bd0cb293c", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -1084,8 +1084,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"omit landing pads for unwinding\"),\n     fewer_names: bool = (false, parse_bool, [TRACKED],\n         \"reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR)\"),\n-    debug_llvm: bool = (false, parse_bool, [UNTRACKED],\n-        \"enable debug output from LLVM\"),\n     meta_stats: bool = (false, parse_bool, [UNTRACKED],\n         \"gather metadata statistics\"),\n     print_link_args: bool = (false, parse_bool, [UNTRACKED],\n@@ -2747,8 +2745,6 @@ mod tests {\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n         opts.debugging_opts.borrowck_stats = true;\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-        opts.debugging_opts.debug_llvm = true;\n-        assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n         opts.debugging_opts.meta_stats = true;\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n         opts.debugging_opts.print_link_args = true;"}, {"sha": "50efb73003731af4346c40c25165e25bddbfd3fc", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -2295,6 +2295,13 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n             }, niche_start))\n         };\n \n+        // Locals variables which live across yields are stored\n+        // in the generator type as fields. These may be uninitialized\n+        // so we don't look for niches there.\n+        if let ty::TyGenerator(..) = self.ty.sty {\n+            return Ok(None);\n+        }\n+\n         match self.abi {\n             Abi::Scalar(ref scalar) => {\n                 return Ok(scalar_component(scalar, Size::from_bytes(0)));"}, {"sha": "1dea5122aa7cc4feb104c35c4112e54f4882679a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -1538,7 +1538,7 @@ impl ReprOptions {\n         for attr in tcx.get_attrs(did).iter() {\n             for r in attr::find_repr_attrs(tcx.sess.diagnostic(), attr) {\n                 flags.insert(match r {\n-                    attr::ReprExtern => ReprFlags::IS_C,\n+                    attr::ReprC => ReprFlags::IS_C,\n                     attr::ReprPacked => ReprFlags::IS_PACKED,\n                     attr::ReprSimd => ReprFlags::IS_SIMD,\n                     attr::ReprInt(i) => {\n@@ -1691,10 +1691,9 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         self.destructor(tcx).is_some()\n     }\n \n-    /// Asserts this is a struct and returns the struct's unique\n-    /// variant.\n-    pub fn struct_variant(&self) -> &VariantDef {\n-        assert!(!self.is_enum());\n+    /// Asserts this is a struct or union and returns its unique variant.\n+    pub fn non_enum_variant(&self) -> &VariantDef {\n+        assert!(self.is_struct() || self.is_union());\n         &self.variants[0]\n     }\n \n@@ -1733,7 +1732,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         match def {\n             Def::Variant(vid) | Def::VariantCtor(vid, ..) => self.variant_with_id(vid),\n             Def::Struct(..) | Def::StructCtor(..) | Def::Union(..) |\n-            Def::TyAlias(..) | Def::AssociatedTy(..) | Def::SelfTy(..) => self.struct_variant(),\n+            Def::TyAlias(..) | Def::AssociatedTy(..) | Def::SelfTy(..) => self.non_enum_variant(),\n             _ => bug!(\"unexpected def {:?} in variant_of_def\", def)\n         }\n     }\n@@ -2319,11 +2318,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 self.adt_def(enum_did).variant_with_id(did)\n             }\n             Def::Struct(did) | Def::Union(did) => {\n-                self.adt_def(did).struct_variant()\n+                self.adt_def(did).non_enum_variant()\n             }\n             Def::StructCtor(ctor_did, ..) => {\n                 let did = self.parent_def_id(ctor_did).expect(\"struct ctor has no parent\");\n-                self.adt_def(did).struct_variant()\n+                self.adt_def(did).non_enum_variant()\n             }\n             _ => bug!(\"expect_variant_def used with unexpected def {:?}\", def)\n         }"}, {"sha": "0889efdc142b11e4450b3e2df7828ad51896e191", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -1351,15 +1351,15 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     pub fn simd_type(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {\n         match self.sty {\n             TyAdt(def, substs) => {\n-                def.struct_variant().fields[0].ty(tcx, substs)\n+                def.non_enum_variant().fields[0].ty(tcx, substs)\n             }\n             _ => bug!(\"simd_type called on invalid type\")\n         }\n     }\n \n     pub fn simd_size(&self, _cx: TyCtxt) -> usize {\n         match self.sty {\n-            TyAdt(def, _) => def.struct_variant().fields.len(),\n+            TyAdt(def, _) => def.non_enum_variant().fields.len(),\n             _ => bug!(\"simd_size called on invalid type\")\n         }\n     }"}, {"sha": "de96e9dc8ff2d510ae54602c71658f2318c70035", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -258,7 +258,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 adt.variant_with_id(vid).fields.get(i).map(|f| f.ty(self, substs))\n             }\n             (&TyAdt(adt, substs), None) => {\n-                // Don't use `struct_variant`, this may be a univariant enum.\n+                // Don't use `non_enum_variant`, this may be a univariant enum.\n                 adt.variants[0].fields.get(i).map(|f| f.ty(self, substs))\n             }\n             (&TyTuple(ref v, _), None) => v.get(i).cloned(),\n@@ -277,7 +277,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 adt.variant_with_id(vid).find_field_named(n).map(|f| f.ty(self, substs))\n             }\n             (&TyAdt(adt, substs), None) => {\n-                adt.struct_variant().find_field_named(n).map(|f| f.ty(self, substs))\n+                adt.non_enum_variant().find_field_named(n).map(|f| f.ty(self, substs))\n             }\n             _ => return None\n         }\n@@ -293,7 +293,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     if !def.is_struct() {\n                         break;\n                     }\n-                    match def.struct_variant().fields.last() {\n+                    match def.non_enum_variant().fields.last() {\n                         Some(f) => ty = f.ty(self, substs),\n                         None => break,\n                     }\n@@ -329,7 +329,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             match (&a.sty, &b.sty) {\n                 (&TyAdt(a_def, a_substs), &TyAdt(b_def, b_substs))\n                         if a_def == b_def && a_def.is_struct() => {\n-                    if let Some(f) = a_def.struct_variant().fields.last() {\n+                    if let Some(f) = a_def.non_enum_variant().fields.last() {\n                         a = f.ty(self, a_substs);\n                         b = f.ty(self, b_substs);\n                     } else {"}, {"sha": "5cfbe49f77f11bb266aca3e92971ec71af00cc83", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -107,7 +107,7 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                     ty::TyAdt(adt_def, _) if adt_def.is_union() => match result {\n                         RestrictionResult::Safe => RestrictionResult::Safe,\n                         RestrictionResult::SafeIf(base_lp, mut base_vec) => {\n-                            for field in &adt_def.struct_variant().fields {\n+                            for field in &adt_def.non_enum_variant().fields {\n                                 let field = InteriorKind::InteriorField(mc::NamedField(field.name));\n                                 let field_ty = if field == interior {\n                                     cmt.ty"}, {"sha": "98de394ae3967cbe67a9493989f96747e385c5bb", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -343,7 +343,7 @@ impl<'a, 'tcx> MoveData<'tcx> {\n             if let (&ty::TyAdt(adt_def, _), LpInterior(opt_variant_id, interior))\n                     = (&base_lp.ty.sty, lp_elem) {\n                 if adt_def.is_union() {\n-                    for field in &adt_def.struct_variant().fields {\n+                    for field in &adt_def.non_enum_variant().fields {\n                         let field = InteriorKind::InteriorField(mc::NamedField(field.name));\n                         if field != interior {\n                             let sibling_lp_kind =\n@@ -395,7 +395,7 @@ impl<'a, 'tcx> MoveData<'tcx> {\n         if let LpExtend(ref base_lp, mutbl, LpInterior(opt_variant_id, interior)) = lp.kind {\n             if let ty::TyAdt(adt_def, _) = base_lp.ty.sty {\n                 if adt_def.is_union() {\n-                    for field in &adt_def.struct_variant().fields {\n+                    for field in &adt_def.non_enum_variant().fields {\n                         let field = InteriorKind::InteriorField(mc::NamedField(field.name));\n                         let field_ty = if field == interior {\n                             lp.ty"}, {"sha": "237656eb43c69d3d0001e4f9e29ed6698c5e0d49", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -167,7 +167,6 @@ mod rustc_trans {\n     pub use rustc_trans_utils::trans_crate::TranslatedCrate as CrateTranslation;\n \n     pub fn init(_sess: &Session) {}\n-    pub fn enable_llvm_debug() {}\n     pub fn print_version() {}\n     pub fn print_passes() {}\n     pub fn print(_req: PrintRequest, _sess: &Session) {}\n@@ -205,10 +204,6 @@ pub fn run_compiler<'a>(args: &[String],\n \n     let (sopts, cfg) = config::build_session_options_and_crate_config(&matches);\n \n-    if sopts.debugging_opts.debug_llvm {\n-        rustc_trans::enable_llvm_debug();\n-    }\n-\n     let descriptions = diagnostics_registry();\n \n     do_or_return!(callbacks.early_callback(&matches,"}, {"sha": "ad3760eed8019488cc47913b9985dc2c266e2daf", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -120,17 +120,15 @@ impl LintPass for NonCamelCaseTypes {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCamelCaseTypes {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n-        let extern_repr_count = it.attrs\n+        let has_repr_c = it.attrs\n             .iter()\n-            .filter(|attr| {\n+            .any(|attr| {\n                 attr::find_repr_attrs(cx.tcx.sess.diagnostic(), attr)\n                     .iter()\n-                    .any(|r| r == &attr::ReprExtern)\n-            })\n-            .count();\n-        let has_extern_repr = extern_repr_count > 0;\n+                    .any(|r| r == &attr::ReprC)\n+            });\n \n-        if has_extern_repr {\n+        if has_repr_c {\n             return;\n         }\n "}, {"sha": "bf5d16696f9cd28f440b94e5e10ef0474ea7b6de", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -422,15 +422,15 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                               consider adding a #[repr(C)] attribute to the type\");\n                         }\n \n-                        if def.struct_variant().fields.is_empty() {\n+                        if def.non_enum_variant().fields.is_empty() {\n                             return FfiUnsafe(\"found zero-size struct in foreign module, consider \\\n                                               adding a member to this struct\");\n                         }\n \n                         // We can't completely trust repr(C) markings; make sure the\n                         // fields are actually safe.\n                         let mut all_phantom = true;\n-                        for field in &def.struct_variant().fields {\n+                        for field in &def.non_enum_variant().fields {\n                             let field_ty = cx.fully_normalize_associated_types_in(\n                                 &field.ty(cx, substs)\n                             );\n@@ -458,13 +458,13 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                               consider adding a #[repr(C)] attribute to the type\");\n                         }\n \n-                        if def.struct_variant().fields.is_empty() {\n+                        if def.non_enum_variant().fields.is_empty() {\n                             return FfiUnsafe(\"found zero-size union in foreign module, consider \\\n                                               adding a member to this union\");\n                         }\n \n                         let mut all_phantom = true;\n-                        for field in &def.struct_variant().fields {\n+                        for field in &def.non_enum_variant().fields {\n                             let field_ty = cx.fully_normalize_associated_types_in(\n                                 &field.ty(cx, substs)\n                             );"}, {"sha": "2cfb151ae85da6bc41bde3192d8fd50cd453cfae", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -1315,9 +1315,6 @@ extern \"C\" {\n                              ElementCount: c_uint,\n                              Packed: Bool);\n \n-    /// Enables LLVM debug output.\n-    pub fn LLVMRustSetDebug(Enabled: c_int);\n-\n     /// Prepares inline assembly.\n     pub fn LLVMRustInlineAsm(Ty: TypeRef,\n                              AsmString: *const c_char,\n@@ -1610,7 +1607,6 @@ extern \"C\" {\n     pub fn LLVMRustSetNormalizedTarget(M: ModuleRef, triple: *const c_char);\n     pub fn LLVMRustAddAlwaysInlinePass(P: PassManagerBuilderRef, AddLifetimes: bool);\n     pub fn LLVMRustLinkInExternalBitcode(M: ModuleRef, bc: *const c_char, len: size_t) -> bool;\n-    pub fn LLVMRustLinkInParsedExternalBitcode(M: ModuleRef, M: ModuleRef) -> bool;\n     pub fn LLVMRustRunRestrictionPass(M: ModuleRef, syms: *const *const c_char, len: size_t);\n     pub fn LLVMRustMarkAllFunctionsNounwind(M: ModuleRef);\n \n@@ -1646,8 +1642,6 @@ extern \"C\" {\n     pub fn LLVMRustWriteDiagnosticInfoToString(DI: DiagnosticInfoRef, s: RustStringRef);\n     pub fn LLVMRustGetDiagInfoKind(DI: DiagnosticInfoRef) -> DiagnosticKind;\n \n-    pub fn LLVMRustWriteDebugLocToString(C: ContextRef, DL: DebugLocRef, s: RustStringRef);\n-\n     pub fn LLVMRustSetInlineAsmDiagnosticHandler(C: ContextRef,\n                                                  H: InlineAsmDiagHandler,\n                                                  CX: *mut c_void);"}, {"sha": "c75a026a0f8b9465740cda6f78dbcf7aecb5a1fd", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -296,11 +296,6 @@ pub unsafe fn twine_to_string(tr: TwineRef) -> String {\n     build_string(|s| LLVMRustWriteTwineToString(tr, s)).expect(\"got a non-UTF8 Twine from LLVM\")\n }\n \n-pub unsafe fn debug_loc_to_string(c: ContextRef, tr: DebugLocRef) -> String {\n-    build_string(|s| LLVMRustWriteDebugLocToString(c, tr, s))\n-        .expect(\"got a non-UTF8 DebugLoc from LLVM\")\n-}\n-\n pub fn initialize_available_targets() {\n     macro_rules! init_target(\n         ($cfg:meta, $($method:ident),*) => { {"}, {"sha": "0152266095085971d6fea09771420e1400d23e8a", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -625,7 +625,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         debug!(\"IsolatedEncoder::encode_struct_ctor({:?})\", def_id);\n         let tcx = self.tcx;\n         let adt_def = tcx.adt_def(adt_def_id);\n-        let variant = adt_def.struct_variant();\n+        let variant = adt_def.non_enum_variant();\n \n         let data = VariantData {\n             ctor_kind: variant.ctor_kind,\n@@ -935,7 +935,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             hir::ItemTy(..) => EntryKind::Type,\n             hir::ItemEnum(..) => EntryKind::Enum(get_repr_options(&tcx, def_id)),\n             hir::ItemStruct(ref struct_def, _) => {\n-                let variant = tcx.adt_def(def_id).struct_variant();\n+                let variant = tcx.adt_def(def_id).non_enum_variant();\n \n                 // Encode def_ids for each field and method\n                 // for methods, write all the stuff get_trait_method\n@@ -956,7 +956,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 }), repr_options)\n             }\n             hir::ItemUnion(..) => {\n-                let variant = tcx.adt_def(def_id).struct_variant();\n+                let variant = tcx.adt_def(def_id).non_enum_variant();\n                 let repr_options = get_repr_options(&tcx, def_id);\n \n                 EntryKind::Union(self.lazy(&VariantData {\n@@ -1049,7 +1049,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 hir::ItemStruct(..) |\n                 hir::ItemUnion(..) => {\n                     let def = self.tcx.adt_def(def_id);\n-                    self.lazy_seq(def.struct_variant().fields.iter().map(|f| {\n+                    self.lazy_seq(def.non_enum_variant().fields.iter().map(|f| {\n                         assert!(f.did.is_local());\n                         f.did.index\n                     }))"}, {"sha": "b65452fa2e27b5cacada8760c2f9ba2fe4e2dbeb", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -719,7 +719,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 ty::TyAdt(def, _) => if def.is_enum() {\n                     format!(\"{}\", field.index())\n                 } else {\n-                    format!(\"{}\", def.struct_variant().fields[field.index()].name)\n+                    format!(\"{}\", def.non_enum_variant().fields[field.index()].name)\n                 },\n                 ty::TyTuple(_, _) => format!(\"{}\", field.index()),\n                 ty::TyRef(_, tnm) | ty::TyRawPtr(tnm) => {"}, {"sha": "2b95449f767dd69a5e7d2abe535e02c0d5c039db", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -488,7 +488,7 @@ fn check_ctfe_against_miri<'a, 'tcx>(\n                 miri_place = ecx.place_downcast(miri_place, variant).unwrap();\n                 &def.variants[variant]\n             } else {\n-                def.struct_variant()\n+                def.non_enum_variant()\n             };\n             let vec = match ctfe {\n                 ConstVal::Aggregate(Struct(v)) => v,"}, {"sha": "aa3cacae874b93d2c3a603469867ccf0d56cce7c", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -838,8 +838,8 @@ fn find_vtable_types_for_unsizing<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 CustomCoerceUnsized::Struct(i) => i\n             };\n \n-            let source_fields = &source_adt_def.struct_variant().fields;\n-            let target_fields = &target_adt_def.struct_variant().fields;\n+            let source_fields = &source_adt_def.non_enum_variant().fields;\n+            let target_fields = &target_adt_def.non_enum_variant().fields;\n \n             assert!(coerce_index < source_fields.len() &&\n                     source_fields.len() == target_fields.len());"}, {"sha": "c39faf021df8ea4295c346c5d6fa15fb8561300b", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -1583,10 +1583,12 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                         if !self.span.filter_generated(sub_span, ex.span) {\n                             let span =\n                                 self.span_from_span(sub_span.expect(\"No span found for var ref\"));\n+                            let ref_id =\n+                                ::id_from_def_id(def.non_enum_variant().fields[idx.node].did);\n                             self.dumper.dump_ref(Ref {\n                                 kind: RefKind::Variable,\n                                 span,\n-                                ref_id: ::id_from_def_id(def.struct_variant().fields[idx.node].did),\n+                                ref_id,\n                             });\n                         }\n                     }"}, {"sha": "94057b70124f5a4ed7c7166d2522fc8296cdba9d", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -528,7 +528,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 };\n                 match self.tables.expr_ty_adjusted(&hir_node).sty {\n                     ty::TyAdt(def, _) if !def.is_enum() => {\n-                        let f = def.struct_variant().field_named(ident.node.name);\n+                        let f = def.non_enum_variant().field_named(ident.node.name);\n                         let sub_span = self.span_utils.span_for_last_ident(expr.span);\n                         filter!(self.span_utils, sub_span, expr.span, None);\n                         let span = self.span_from_span(sub_span.unwrap());"}, {"sha": "6f3556516c4cb1ab522293bd94f93ebe860d4284", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -969,7 +969,7 @@ fn prepare_struct_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let struct_name = compute_debuginfo_type_name(cx, struct_type, false);\n \n     let (struct_def_id, variant) = match struct_type.sty {\n-        ty::TyAdt(def, _) => (def.did, def.struct_variant()),\n+        ty::TyAdt(def, _) => (def.did, def.non_enum_variant()),\n         _ => bug!(\"prepare_struct_metadata on a non-ADT\")\n     };\n \n@@ -1084,7 +1084,7 @@ fn prepare_union_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let union_name = compute_debuginfo_type_name(cx, union_type, false);\n \n     let (union_def_id, variant) = match union_type.sty {\n-        ty::TyAdt(def, _) => (def.did, def.struct_variant()),\n+        ty::TyAdt(def, _) => (def.did, def.non_enum_variant()),\n         _ => bug!(\"prepare_union_metadata on a non-ADT\")\n     };\n "}, {"sha": "fd6cd5c371d9781fc691e92cd0e9e734a31a38d3", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -69,7 +69,7 @@ pub use base::trans_crate;\n use back::bytecode::RLIB_BYTECODE_EXTENSION;\n \n pub use metadata::LlvmMetadataLoader;\n-pub use llvm_util::{init, target_features, print_version, print_passes, print, enable_llvm_debug};\n+pub use llvm_util::{init, target_features, print_version, print_passes, print};\n \n use std::any::Any;\n use std::path::PathBuf;"}, {"sha": "b3d0b574d1d432bd08f9e7f7101564b9baf78bd1", "filename": "src/librustc_trans/llvm_util.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_trans%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_trans%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fllvm_util.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -140,7 +140,3 @@ pub fn print(req: PrintRequest, sess: &Session) {\n         }\n     }\n }\n-\n-pub fn enable_llvm_debug() {\n-    unsafe { llvm::LLVMRustSetDebug(1); }\n-}"}, {"sha": "d2f759f5d99a47c2a5fe4d4f90a4a346052bd871", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -107,7 +107,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             ty::TyDynamic(ref tty, ..) =>\n                 Some(PointerKind::Vtable(tty.principal().map(|p| p.def_id()))),\n             ty::TyAdt(def, substs) if def.is_struct() => {\n-                match def.struct_variant().fields.last() {\n+                match def.non_enum_variant().fields.last() {\n                     None => Some(PointerKind::Thin),\n                     Some(f) => {\n                         let field_ty = self.field_ty(span, f, substs);"}, {"sha": "3f8792aa637a9cb711303f1f064faa86da2250c3", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -289,7 +289,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     for (ty, _) in self.autoderef(span, rcvr_ty) {\n                         match ty.sty {\n                             ty::TyAdt(def, substs) if !def.is_enum() => {\n-                                if let Some(field) = def.struct_variant()\n+                                if let Some(field) = def.non_enum_variant()\n                                     .find_field_named(item_name) {\n                                     let snippet = tcx.sess.codemap().span_to_snippet(expr.span);\n                                     let expr_string = match snippet {"}, {"sha": "57598f99bd14e570955b4721373187f3d50380c4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -1444,7 +1444,7 @@ pub fn check_simd<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span, def_id: DefId\n     let t = tcx.type_of(def_id);\n     match t.sty {\n         ty::TyAdt(def, substs) if def.is_struct() => {\n-            let fields = &def.struct_variant().fields;\n+            let fields = &def.non_enum_variant().fields;\n             if fields.is_empty() {\n                 span_err!(tcx.sess, sp, E0075, \"SIMD vector cannot be empty\");\n                 return;\n@@ -1498,7 +1498,7 @@ fn check_packed_inner<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n             // push struct def_id before checking fields\n             stack.push(def_id);\n-            for field in &def.struct_variant().fields {\n+            for field in &def.non_enum_variant().fields {\n                 let f = field.ty(tcx, substs);\n                 match f.sty {\n                     ty::TyAdt(def, _) => {\n@@ -2945,7 +2945,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     debug!(\"struct named {:?}\",  base_t);\n                     let (ident, def_scope) =\n                         self.tcx.adjust(field.node, base_def.did, self.body_id);\n-                    let fields = &base_def.struct_variant().fields;\n+                    let fields = &base_def.non_enum_variant().fields;\n                     if let Some(field) = fields.iter().find(|f| f.name.to_ident() == ident) {\n                         let field_ty = self.field_ty(expr.span, field, substs);\n                         if field.vis.is_accessible_from(def_scope, self.tcx) {\n@@ -2993,12 +2993,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 match expr_t.sty {\n                     ty::TyAdt(def, _) if !def.is_enum() => {\n                         if let Some(suggested_field_name) =\n-                            Self::suggest_field_name(def.struct_variant(), field, vec![]) {\n+                            Self::suggest_field_name(def.non_enum_variant(), field, vec![]) {\n                                 err.span_label(field.span,\n                                                format!(\"did you mean `{}`?\", suggested_field_name));\n                             } else {\n                                 err.span_label(field.span, \"unknown field\");\n-                                let struct_variant_def = def.struct_variant();\n+                                let struct_variant_def = def.non_enum_variant();\n                                 let field_names = self.available_field_names(struct_variant_def);\n                                 if !field_names.is_empty() {\n                                     err.note(&format!(\"available fields are: {}\",\n@@ -3080,7 +3080,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         while let Some((base_t, _)) = autoderef.next() {\n             let field = match base_t.sty {\n                 ty::TyAdt(base_def, substs) if base_def.is_struct() => {\n-                    tuple_like = base_def.struct_variant().ctor_kind == CtorKind::Fn;\n+                    tuple_like = base_def.non_enum_variant().ctor_kind == CtorKind::Fn;\n                     if !tuple_like { continue }\n \n                     debug!(\"tuple struct named {:?}\",  base_t);\n@@ -3090,7 +3090,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     };\n                     let (ident, def_scope) =\n                         self.tcx.adjust_ident(ident, base_def.did, self.body_id);\n-                    let fields = &base_def.struct_variant().fields;\n+                    let fields = &base_def.non_enum_variant().fields;\n                     if let Some(field) = fields.iter().find(|f| f.name.to_ident() == ident) {\n                         let field_ty = self.field_ty(expr.span, field, substs);\n                         if field.vis.is_accessible_from(def_scope, self.tcx) {\n@@ -3350,7 +3350,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Def::AssociatedTy(..) | Def::SelfTy(..) => {\n                 match ty.sty {\n                     ty::TyAdt(adt, substs) if !adt.is_enum() => {\n-                        Some((adt.struct_variant(), adt.did, substs))\n+                        Some((adt.non_enum_variant(), adt.did, substs))\n                     }\n                     _ => None,\n                 }\n@@ -3412,7 +3412,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             self.check_expr_has_type_or_error(base_expr, struct_ty);\n             match struct_ty.sty {\n                 ty::TyAdt(adt, substs) if adt.is_struct() => {\n-                    let fru_field_types = adt.struct_variant().fields.iter().map(|f| {\n+                    let fru_field_types = adt.non_enum_variant().fields.iter().map(|f| {\n                         self.normalize_associated_types_in(expr.span, &f.ty(self.tcx, substs))\n                     }).collect();\n "}, {"sha": "aefee1ce30a422faf9529c0abc9f72416136acfe", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -130,14 +130,14 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n             }\n             hir::ItemStruct(ref struct_def, ref ast_generics) => {\n                 self.check_type_defn(item, false, |fcx| {\n-                    vec![fcx.struct_variant(struct_def)]\n+                    vec![fcx.non_enum_variant(struct_def)]\n                 });\n \n                 self.check_variances_for_type_defn(item, ast_generics);\n             }\n             hir::ItemUnion(ref struct_def, ref ast_generics) => {\n                 self.check_type_defn(item, true, |fcx| {\n-                    vec![fcx.struct_variant(struct_def)]\n+                    vec![fcx.non_enum_variant(struct_def)]\n                 });\n \n                 self.check_variances_for_type_defn(item, ast_generics);\n@@ -689,7 +689,7 @@ struct AdtField<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n-    fn struct_variant(&self, struct_def: &hir::VariantData) -> AdtVariant<'tcx> {\n+    fn non_enum_variant(&self, struct_def: &hir::VariantData) -> AdtVariant<'tcx> {\n         let fields =\n             struct_def.fields().iter()\n             .map(|field| {\n@@ -704,7 +704,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     fn enum_variants(&self, enum_def: &hir::EnumDef) -> Vec<AdtVariant<'tcx>> {\n         enum_def.variants.iter()\n-            .map(|variant| self.struct_variant(&variant.node.data))\n+            .map(|variant| self.non_enum_variant(&variant.node.data))\n             .collect()\n     }\n "}, {"sha": "2f1c42bbef8ca27e8d817e05ad19042a43f941c2", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -288,7 +288,7 @@ pub fn coerce_unsized_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 // conversion). This will work out because `U:\n                 // Unsize<V>`, and we have a builtin rule that `*mut\n                 // U` can be coerced to `*mut V` if `U: Unsize<V>`.\n-                let fields = &def_a.struct_variant().fields;\n+                let fields = &def_a.non_enum_variant().fields;\n                 let diff_fields = fields.iter()\n                     .enumerate()\n                     .filter_map(|(i, f)| {"}, {"sha": "8a9dc3ca122488b2f769fba4aa30188781d56a17", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -186,7 +186,7 @@ fn build_enum(cx: &DocContext, did: DefId) -> clean::Enum {\n \n fn build_struct(cx: &DocContext, did: DefId) -> clean::Struct {\n     let predicates = cx.tcx.predicates_of(did);\n-    let variant = cx.tcx.adt_def(did).struct_variant();\n+    let variant = cx.tcx.adt_def(did).non_enum_variant();\n \n     clean::Struct {\n         struct_type: match variant.ctor_kind {\n@@ -202,7 +202,7 @@ fn build_struct(cx: &DocContext, did: DefId) -> clean::Struct {\n \n fn build_union(cx: &DocContext, did: DefId) -> clean::Union {\n     let predicates = cx.tcx.predicates_of(did);\n-    let variant = cx.tcx.adt_def(did).struct_variant();\n+    let variant = cx.tcx.adt_def(did).non_enum_variant();\n \n     clean::Union {\n         struct_type: doctree::Plain,"}, {"sha": "5d80611d6a209ae2ad4db779191ae3d96ebdf402", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -23,6 +23,7 @@ use rustc::hir::def::Def;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::cstore::{LoadedMacro, CrateStore};\n use rustc::middle::privacy::AccessLevel;\n+use rustc::ty::Visibility;\n use rustc::util::nodemap::FxHashSet;\n \n use rustc::hir;\n@@ -204,7 +205,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         self.inside_public_path = orig_inside_public_path;\n         let def_id = self.cx.tcx.hir.local_def_id(id);\n         if let Some(exports) = self.cx.tcx.module_exports(def_id) {\n-            for export in exports.iter() {\n+            for export in exports.iter().filter(|e| e.vis == Visibility::Public) {\n                 if let Def::Macro(def_id, ..) = export.def {\n                     if def_id.krate == LOCAL_CRATE || self.reexported_macros.contains(&def_id) {\n                         continue // These are `krate.exported_macros`, handled in `self.visit()`."}, {"sha": "4e5385c17e9857678b07a04be842e4930288d814", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -1241,6 +1241,46 @@ impl<K, V, S> HashMap<K, V, S>\n         self.search_mut(k).into_occupied_bucket().map(|bucket| pop_internal(bucket).1)\n     }\n \n+    /// Removes a key from the map, returning the stored key and value if the\n+    /// key was previously in the map.\n+    ///\n+    /// The key may be any borrowed form of the map's key type, but\n+    /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n+    /// the key type.\n+    ///\n+    /// [`Eq`]: ../../std/cmp/trait.Eq.html\n+    /// [`Hash`]: ../../std/hash/trait.Hash.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(hash_map_remove_entry)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// # fn main() {\n+    /// let mut map = HashMap::new();\n+    /// map.insert(1, \"a\");\n+    /// assert_eq!(map.remove_entry(&1), Some((1, \"a\")));\n+    /// assert_eq!(map.remove(&1), None);\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"hash_map_remove_entry\", issue = \"46344\")]\n+    pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>\n+        where K: Borrow<Q>,\n+              Q: Hash + Eq\n+    {\n+        if self.table.size() == 0 {\n+            return None;\n+        }\n+\n+        self.search_mut(k)\n+            .into_occupied_bucket()\n+            .map(|bucket| {\n+                let (k, v, _) = pop_internal(bucket);\n+                (k, v)\n+            })\n+    }\n+\n     /// Retains only the elements specified by the predicate.\n     ///\n     /// In other words, remove all pairs `(k, v)` such that `f(&k,&mut v)` returns `false`.\n@@ -3040,13 +3080,21 @@ mod test_map {\n     }\n \n     #[test]\n-    fn test_pop() {\n+    fn test_remove() {\n         let mut m = HashMap::new();\n         m.insert(1, 2);\n         assert_eq!(m.remove(&1), Some(2));\n         assert_eq!(m.remove(&1), None);\n     }\n \n+    #[test]\n+    fn test_remove_entry() {\n+        let mut m = HashMap::new();\n+        m.insert(1, 2);\n+        assert_eq!(m.remove_entry(&1), Some((1, 2)));\n+        assert_eq!(m.remove(&1), None);\n+    }\n+\n     #[test]\n     fn test_iterate() {\n         let mut m = HashMap::with_capacity(4);"}, {"sha": "33d11ebb35022b2ad411e2de6d76fc8ac9077900", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -997,9 +997,9 @@ pub trait Write {\n     ///\n     /// Calls to `write` are not guaranteed to block waiting for data to be\n     /// written, and a write which would otherwise block can be indicated through\n-    /// an `Err` variant.\n+    /// an [`Err`] variant.\n     ///\n-    /// If the return value is `Ok(n)` then it must be guaranteed that\n+    /// If the return value is [`Ok(n)`] then it must be guaranteed that\n     /// `0 <= n <= buf.len()`. A return value of `0` typically means that the\n     /// underlying object is no longer able to accept bytes and will likely not\n     /// be able to in the future as well, or that the buffer provided is empty.\n@@ -1013,9 +1013,13 @@ pub trait Write {\n     /// It is **not** considered an error if the entire buffer could not be\n     /// written to this writer.\n     ///\n-    /// An error of the `ErrorKind::Interrupted` kind is non-fatal and the\n+    /// An error of the [`ErrorKind::Interrupted`] kind is non-fatal and the\n     /// write operation should be retried if there is nothing else to do.\n     ///\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`Ok(n)`]:  ../../std/result/enum.Result.html#variant.Ok\n+    /// [`ErrorKind::Interrupted`]: ../../std/io/enum.ErrorKind.html#variant.Interrupted\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1061,17 +1065,20 @@ pub trait Write {\n \n     /// Attempts to write an entire buffer into this write.\n     ///\n-    /// This method will continuously call `write` until there is no more data\n-    /// to be written or an error of non-`ErrorKind::Interrupted` kind is\n+    /// This method will continuously call [`write`] until there is no more data\n+    /// to be written or an error of non-[`ErrorKind::Interrupted`] kind is\n     /// returned. This method will not return until the entire buffer has been\n     /// successfully written or such an error occurs. The first error that is\n-    /// not of `ErrorKind::Interrupted` kind generated from this method will be\n+    /// not of [`ErrorKind::Interrupted`] kind generated from this method will be\n     /// returned.\n     ///\n     /// # Errors\n     ///\n     /// This function will return the first error of\n-    /// non-`ErrorKind::Interrupted` kind that `write` returns.\n+    /// non-[`ErrorKind::Interrupted`] kind that [`write`] returns.\n+    ///\n+    /// [`ErrorKind::Interrupted`]: ../../std/io/enum.ErrorKind.html#variant.Interrupted\n+    /// [`write`]: #tymethod.write\n     ///\n     /// # Examples\n     ///"}, {"sha": "3b79e0c4f826744dafb1c5cf5d66ca0ea4782b72", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -296,7 +296,6 @@\n #![feature(rand)]\n #![feature(raw)]\n #![feature(repr_align)]\n-#![feature(repr_simd)]\n #![feature(rustc_attrs)]\n #![feature(shared)]\n #![feature(sip_hash_13)]"}, {"sha": "ba3d6a2813a451a28573303ccbd08cfe625584db", "filename": "src/libstd/sys/wasm/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -39,6 +39,7 @@ use os::raw::c_char;\n const DEBUG: bool = false;\n \n pub mod args;\n+#[cfg(feature = \"backtrace\")]\n pub mod backtrace;\n pub mod cmath;\n pub mod condvar;"}, {"sha": "66b44f1402fc6989df09805b7153d0b95b2cb651", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -20,11 +20,6 @@ use os::raw::c_ulonglong;\n use libc::{wchar_t, size_t, c_void};\n use ptr;\n \n-#[repr(simd)]\n-#[repr(C)]\n-#[cfg(target_arch = \"x86_64\")]\n-struct u64x2(u64, u64);\n-\n pub use self::FILE_INFO_BY_HANDLE_CLASS::*;\n pub use self::EXCEPTION_DISPOSITION::*;\n \n@@ -700,9 +695,8 @@ pub struct FLOATING_SAVE_AREA {\n }\n \n #[cfg(target_arch = \"x86_64\")]\n-#[repr(C)]\n+#[repr(C, align(16))]\n pub struct CONTEXT {\n-    _align_hack: [u64x2; 0], // FIXME align on 16-byte\n     pub P1Home: DWORDLONG,\n     pub P2Home: DWORDLONG,\n     pub P3Home: DWORDLONG,\n@@ -760,17 +754,15 @@ pub struct CONTEXT {\n }\n \n #[cfg(target_arch = \"x86_64\")]\n-#[repr(C)]\n+#[repr(C, align(16))]\n pub struct M128A {\n-    _align_hack: [u64x2; 0], // FIXME align on 16-byte\n     pub Low:  c_ulonglong,\n     pub High: c_longlong\n }\n \n #[cfg(target_arch = \"x86_64\")]\n-#[repr(C)]\n+#[repr(C, align(16))]\n pub struct FLOATING_SAVE_AREA {\n-    _align_hack: [u64x2; 0], // FIXME align on 16-byte\n     _Dummy: [u8; 512] // FIXME: Fill this out\n }\n "}, {"sha": "4291f811f3f74ba1e63b65e91bdbf0c9aaaa608a", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -1008,8 +1008,7 @@ pub fn find_repr_attrs(diagnostic: &Handler, attr: &Attribute) -> Vec<ReprAttr>\n                 if let Some(mi) = item.word() {\n                     let word = &*mi.name().as_str();\n                     let hint = match word {\n-                        // Can't use \"extern\" because it's not a lexical identifier.\n-                        \"C\" => Some(ReprExtern),\n+                        \"C\" => Some(ReprC),\n                         \"packed\" => Some(ReprPacked),\n                         \"simd\" => Some(ReprSimd),\n                         _ => match int_type_of_word(word) {\n@@ -1080,7 +1079,7 @@ fn int_type_of_word(s: &str) -> Option<IntType> {\n #[derive(PartialEq, Debug, RustcEncodable, RustcDecodable, Copy, Clone)]\n pub enum ReprAttr {\n     ReprInt(IntType),\n-    ReprExtern,\n+    ReprC,\n     ReprPacked,\n     ReprSimd,\n     ReprAlign(u32),"}, {"sha": "49362f077992145d08abde3248857ad56786b98d", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -101,7 +101,7 @@ pub fn strip_doc_comment_decoration(comment: &str) -> String {\n                     break;\n                 }\n             }\n-            if i > line.len() {\n+            if i >= line.len() {\n                 can_trim = false;\n             }\n             if !can_trim {"}, {"sha": "08a7f85d14b2f5be0b2b419825780bde38612a7e", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -831,7 +831,7 @@ fn find_repr_type_name(diagnostic: &Handler, type_attrs: &[ast::Attribute]) -> &\n         for r in &attr::find_repr_attrs(diagnostic, a) {\n             repr_type_name = match *r {\n                 attr::ReprPacked | attr::ReprSimd | attr::ReprAlign(_) => continue,\n-                attr::ReprExtern => \"i32\",\n+                attr::ReprC => \"i32\",\n \n                 attr::ReprInt(attr::SignedInt(ast::IntTy::Isize)) => \"isize\",\n                 attr::ReprInt(attr::SignedInt(ast::IntTy::I8)) => \"i8\","}, {"sha": "95130d596e165b05498143c96feb0805d7dc78ba", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -384,12 +384,6 @@ LLVMRustBuildAtomicFence(LLVMBuilderRef B, LLVMAtomicOrdering Order,\n   return wrap(unwrap(B)->CreateFence(fromRust(Order), fromRust(Scope)));\n }\n \n-extern \"C\" void LLVMRustSetDebug(int Enabled) {\n-#ifndef NDEBUG\n-  DebugFlag = Enabled;\n-#endif\n-}\n-\n enum class LLVMRustAsmDialect {\n   Other,\n   Att,\n@@ -933,23 +927,6 @@ extern \"C\" bool LLVMRustLinkInExternalBitcode(LLVMModuleRef DstRef, char *BC,\n   return true;\n }\n \n-extern \"C\" bool LLVMRustLinkInParsedExternalBitcode(\n-    LLVMModuleRef DstRef, LLVMModuleRef SrcRef) {\n-#if LLVM_VERSION_GE(4, 0)\n-  Module *Dst = unwrap(DstRef);\n-  std::unique_ptr<Module> Src(unwrap(SrcRef));\n-\n-  if (Linker::linkModules(*Dst, std::move(Src))) {\n-    LLVMRustSetLastError(\"failed to link modules\");\n-    return false;\n-  }\n-  return true;\n-#else\n-  LLVMRustSetLastError(\"can't link parsed modules on this LLVM\");\n-  return false;\n-#endif\n-}\n-\n // Note that the two following functions look quite similar to the\n // LLVMGetSectionName function. Sadly, it appears that this function only\n // returns a char* pointer, which isn't guaranteed to be null-terminated. The\n@@ -981,7 +958,6 @@ extern \"C\" LLVMTypeRef LLVMRustArrayType(LLVMTypeRef ElementTy,\n }\n \n DEFINE_SIMPLE_CONVERSION_FUNCTIONS(Twine, LLVMTwineRef)\n-DEFINE_SIMPLE_CONVERSION_FUNCTIONS(DebugLoc, LLVMDebugLocRef)\n \n extern \"C\" void LLVMRustWriteTwineToString(LLVMTwineRef T, RustStringRef Str) {\n   RawRustStringOstream OS(Str);\n@@ -1130,13 +1106,6 @@ extern \"C\" LLVMTypeKind LLVMRustGetTypeKind(LLVMTypeRef Ty) {\n   report_fatal_error(\"Unhandled TypeID.\");\n }\n \n-extern \"C\" void LLVMRustWriteDebugLocToString(LLVMContextRef C,\n-                                              LLVMDebugLocRef DL,\n-                                              RustStringRef Str) {\n-  RawRustStringOstream OS(Str);\n-  unwrap(DL)->print(OS);\n-}\n-\n DEFINE_SIMPLE_CONVERSION_FUNCTIONS(SMDiagnostic, LLVMSMDiagnosticRef)\n \n extern \"C\" void LLVMRustSetInlineAsmDiagnosticHandler("}, {"sha": "f4bd78147f6316ed0d0e4c6330c68b68291a5642", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -103,9 +103,7 @@ enum LLVMRustAttribute {\n \n typedef struct OpaqueRustString *RustStringRef;\n typedef struct LLVMOpaqueTwine *LLVMTwineRef;\n-typedef struct LLVMOpaqueDebugLoc *LLVMDebugLocRef;\n typedef struct LLVMOpaqueSMDiagnostic *LLVMSMDiagnosticRef;\n-typedef struct LLVMOpaqueRustJITMemoryManager *LLVMRustJITMemoryManagerRef;\n \n extern \"C\" void LLVMRustStringWriteImpl(RustStringRef Str, const char *Ptr,\n                                         size_t Size);"}, {"sha": "453cd663d2c8c71bdce7ed39f1858c391eaf24cf", "filename": "src/test/rustdoc/issue-47038.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Ftest%2Frustdoc%2Fissue-47038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Ftest%2Frustdoc%2Fissue-47038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-47038.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(decl_macro)]\n+\n+#![crate_name = \"foo\"]\n+\n+use std::vec;\n+\n+// @has 'foo/index.html'\n+// @!has - '//*[@id=\"macros\"]' 'Macros'\n+// @!has - '//a/@href' 'macro.vec.html'\n+// @!has 'foo/macro.vec.html'"}, {"sha": "8c4d9845f561ec06e941a825fd4d97cfaeb90f3c", "filename": "src/test/rustdoc/issue-47197-blank-line-in-doc-block.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Ftest%2Frustdoc%2Fissue-47197-blank-line-in-doc-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Ftest%2Frustdoc%2Fissue-47197-blank-line-in-doc-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-47197-blank-line-in-doc-block.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// @has issue_47197_blank_line_in_doc_block/fn.whose_woods_these_are_i_think_i_know.html\n+\n+/**\n+* snow\n+\n+* ice\n+*/\n+pub fn whose_woods_these_are_i_think_i_know() {}"}, {"sha": "6458ec02669aab24a6263690daab0d6ace254ced", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74966b5cb84934737d21bd9001db07bd93fa5d64/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=74966b5cb84934737d21bd9001db07bd93fa5d64", "patch": "@@ -158,13 +158,6 @@ fn check(cache: &mut Cache,\n        file.ends_with(\"sync/struct.RwLock.html\") {\n         return None;\n     }\n-    // FIXME(#47038)\n-    if file.ends_with(\"deriving/generic/index.html\") ||\n-       file.ends_with(\"deriving/generic/macro.vec.html\") ||\n-       file.ends_with(\"deriving/custom/macro.panic.html\") ||\n-       file.ends_with(\"proc_macro_impl/macro.panic.html\") {\n-        return None;\n-    }\n \n     let res = load_file(cache, root, file, SkipRedirect);\n     let (pretty_file, contents) = match res {"}]}