{"sha": "955979ab287037f8c1972dfc53c54f0677db04c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NTk3OWFiMjg3MDM3ZjhjMTk3MmRmYzUzYzU0ZjA2NzdkYjA0YzY=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-07-11T19:40:38Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-07-11T19:40:38Z"}, "message": "Make cold unwraps take &dyn Debug", "tree": {"sha": "399f73fc56ee200a8584da1e67ee25275b3a0e94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/399f73fc56ee200a8584da1e67ee25275b3a0e94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/955979ab287037f8c1972dfc53c54f0677db04c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/955979ab287037f8c1972dfc53c54f0677db04c6", "html_url": "https://github.com/rust-lang/rust/commit/955979ab287037f8c1972dfc53c54f0677db04c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/955979ab287037f8c1972dfc53c54f0677db04c6/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a7e7309356c70d04ac62765c395978ffd49cf5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7e7309356c70d04ac62765c395978ffd49cf5e", "html_url": "https://github.com/rust-lang/rust/commit/5a7e7309356c70d04ac62765c395978ffd49cf5e"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "237994a83cfd114d643f560de2e3093fe5c70273", "filename": "src/libcore/option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/955979ab287037f8c1972dfc53c54f0677db04c6/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955979ab287037f8c1972dfc53c54f0677db04c6/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=955979ab287037f8c1972dfc53c54f0677db04c6", "patch": "@@ -1011,7 +1011,7 @@ impl<T: fmt::Debug> Option<T> {\n     #[unstable(feature = \"option_expect_none\", reason = \"newly added\", issue = \"0\")]\n     pub fn expect_none(self, msg: &str) {\n         if let Some(val) = self {\n-            expect_none_failed(msg, val);\n+            expect_none_failed(msg, &val);\n         }\n     }\n \n@@ -1053,7 +1053,7 @@ impl<T: fmt::Debug> Option<T> {\n     #[unstable(feature = \"option_unwrap_none\", reason = \"newly added\", issue = \"0\")]\n     pub fn unwrap_none(self) {\n         if let Some(val) = self {\n-            expect_none_failed(\"called `Option::unwrap_none()` on a `Some` value\", val);\n+            expect_none_failed(\"called `Option::unwrap_none()` on a `Some` value\", &val);\n         }\n     }\n }\n@@ -1153,7 +1153,7 @@ fn expect_failed(msg: &str) -> ! {\n // This is a separate function to reduce the code size of .expect_none() itself.\n #[inline(never)]\n #[cold]\n-fn expect_none_failed<T: fmt::Debug>(msg: &str, value: T) -> ! {\n+fn expect_none_failed(msg: &str, value: &dyn fmt::Debug) -> ! {\n     panic!(\"{}: {:?}\", msg, value)\n }\n "}, {"sha": "14980ce1cff428220bdb03cf4ab434813575798b", "filename": "src/libcore/result.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/955979ab287037f8c1972dfc53c54f0677db04c6/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955979ab287037f8c1972dfc53c54f0677db04c6/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=955979ab287037f8c1972dfc53c54f0677db04c6", "patch": "@@ -849,7 +849,7 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     pub fn unwrap(self) -> T {\n         match self {\n             Ok(t) => t,\n-            Err(e) => unwrap_failed(\"called `Result::unwrap()` on an `Err` value\", e),\n+            Err(e) => unwrap_failed(\"called `Result::unwrap()` on an `Err` value\", &e),\n         }\n     }\n \n@@ -876,7 +876,7 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     pub fn expect(self, msg: &str) -> T {\n         match self {\n             Ok(t) => t,\n-            Err(e) => unwrap_failed(msg, e),\n+            Err(e) => unwrap_failed(msg, &e),\n         }\n     }\n }\n@@ -908,7 +908,7 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn unwrap_err(self) -> E {\n         match self {\n-            Ok(t) => unwrap_failed(\"called `Result::unwrap_err()` on an `Ok` value\", t),\n+            Ok(t) => unwrap_failed(\"called `Result::unwrap_err()` on an `Ok` value\", &t),\n             Err(e) => e,\n         }\n     }\n@@ -935,7 +935,7 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     #[stable(feature = \"result_expect_err\", since = \"1.17.0\")]\n     pub fn expect_err(self, msg: &str) -> E {\n         match self {\n-            Ok(t) => unwrap_failed(msg, t),\n+            Ok(t) => unwrap_failed(msg, &t),\n             Err(e) => e,\n         }\n     }\n@@ -1047,7 +1047,7 @@ impl<T, E> Result<Option<T>, E> {\n // This is a separate function to reduce the code size of the methods\n #[inline(never)]\n #[cold]\n-fn unwrap_failed<E: fmt::Debug>(msg: &str, error: E) -> ! {\n+fn unwrap_failed(msg: &str, error: &dyn fmt::Debug) -> ! {\n     panic!(\"{}: {:?}\", msg, error)\n }\n "}]}