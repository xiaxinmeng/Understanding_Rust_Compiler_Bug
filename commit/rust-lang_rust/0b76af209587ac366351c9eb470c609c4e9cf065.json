{"sha": "0b76af209587ac366351c9eb470c609c4e9cf065", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNzZhZjIwOTU4N2FjMzY2MzUxYzllYjQ3MGM2MDljNGU5Y2YwNjU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-07T12:35:10Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-07T12:35:10Z"}, "message": "Remove should_codegen", "tree": {"sha": "6c6bc5006e8a0c6e3f88a890fd530bbc5a7367f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c6bc5006e8a0c6e3f88a890fd530bbc5a7367f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b76af209587ac366351c9eb470c609c4e9cf065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b76af209587ac366351c9eb470c609c4e9cf065", "html_url": "https://github.com/rust-lang/rust/commit/0b76af209587ac366351c9eb470c609c4e9cf065", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b76af209587ac366351c9eb470c609c4e9cf065/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29b4c34c540db66fd13b63037109528eeb97146b", "url": "https://api.github.com/repos/rust-lang/rust/commits/29b4c34c540db66fd13b63037109528eeb97146b", "html_url": "https://github.com/rust-lang/rust/commit/29b4c34c540db66fd13b63037109528eeb97146b"}], "stats": {"total": 41, "additions": 14, "deletions": 27}, "files": [{"sha": "3bf906a460c2bfae4cf223278f007bf8ff80fe58", "filename": "src/base.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0b76af209587ac366351c9eb470c609c4e9cf065/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b76af209587ac366351c9eb470c609c4e9cf065/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=0b76af209587ac366351c9eb470c609c4e9cf065", "patch": "@@ -129,14 +129,11 @@ fn trans_fn<'a, 'tcx: 'a>(\n     verify_func(tcx, writer, &func);\n \n     // Step 9. Define function\n-    // TODO: cranelift doesn't yet support some of the things needed\n-    if should_codegen(tcx.sess) {\n-        caches.context.func = func;\n-        module\n-            .define_function(func_id, &mut caches.context)\n-            .unwrap();\n-        caches.context.clear();\n-    }\n+    caches.context.func = func;\n+    module\n+        .define_function(func_id, &mut caches.context)\n+        .unwrap();\n+    caches.context.clear();\n }\n \n fn verify_func(tcx: TyCtxt, writer: crate::pretty_clif::CommentWriter, func: &Function) {"}, {"sha": "2fd5d8c04eac65ce5d80eb2fafcc439c9160c682", "filename": "src/lib.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0b76af209587ac366351c9eb470c609c4e9cf065/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b76af209587ac366351c9eb470c609c4e9cf065/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0b76af209587ac366351c9eb470c609c4e9cf065", "patch": "@@ -98,12 +98,6 @@ mod prelude {\n     pub use crate::base::{trans_operand, trans_place};\n     pub use crate::common::*;\n     pub use crate::Caches;\n-\n-    pub fn should_codegen(_sess: &Session) -> bool {\n-        true\n-        //::std::env::var(\"SHOULD_CODEGEN\").is_ok()\n-        //    || sess.crate_types.get().contains(&CrateType::Executable)\n-    }\n }\n \n use crate::constant::ConstantCx;\n@@ -242,9 +236,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n \n             tcx.sess.abort_if_errors();\n \n-            if should_codegen(tcx.sess) {\n-                faerie_module.finalize_definitions();\n-            }\n+            faerie_module.finalize_definitions();\n \n             return Box::new(OngoingCodegen {\n                 product: faerie_module.finish(),\n@@ -294,16 +286,14 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                     let file = File::create(&output_name).unwrap();\n                     let mut builder = ar::Builder::new(file);\n \n-                    if should_codegen(sess) {\n-                        // Add main object file\n-                        let obj = artifact.emit().unwrap();\n-                        builder\n-                            .append(\n-                                &ar::Header::new(b\"data.o\".to_vec(), obj.len() as u64),\n-                                ::std::io::Cursor::new(obj),\n-                            )\n-                            .unwrap();\n-                    }\n+                    // Add main object file\n+                    let obj = artifact.emit().unwrap();\n+                    builder\n+                        .append(\n+                            &ar::Header::new(b\"data.o\".to_vec(), obj.len() as u64),\n+                            ::std::io::Cursor::new(obj),\n+                        )\n+                        .unwrap();\n \n                     // Non object files need to be added after object files, because ranlib will\n                     // try to read the native architecture from the first file, even if it isn't"}]}