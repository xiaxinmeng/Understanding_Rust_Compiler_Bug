{"sha": "22987c73e924547081a70082d9372eb921d1414f", "node_id": "C_kwDOAAsO6NoAKDIyOTg3YzczZTkyNDU0NzA4MWE3MDA4MmQ5MzcyZWI5MjFkMTQxNGY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-21T12:39:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-21T12:39:32Z"}, "message": "Merge #11082\n\n11082: internal: Do less work in `hir::Semantics` r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "14a3c04a8ec4641be0bd39f256d496381cee8f33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14a3c04a8ec4641be0bd39f256d496381cee8f33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22987c73e924547081a70082d9372eb921d1414f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhwcsECRBK7hj4Ov3rIwAAbokIAD5SLy4ONG5U9jr2b+CuJkkY\n17A0WivPKylkVjvCma08qRpQFQ2Lc/E+hUObybw2VFwocL7Bdf1lOYxa8bF48jal\n5zqaO4kcGJ7AYugmP9lh7LrEVfHbOCuJfQsJP1HyZnYUFVz3/bC/EM58LVSiWO5w\n2BFORz4wk+pxaFwVw+NxwEXBvgWKiteCNxQa2HCVOplcTrP28kr3Mn9P8z/PHAO5\nZgkqhWQWXmcNn298bOPUafpOCi80P7ifsrDrNh3YO1PlopP1ecjo/W20HlLDpOSK\nD2oQazURzB6RJLDtGjnsGUxIp1eC91wXCfYuT8sHYHe7G984exhQtiUMosiiTjQ=\n=T2tz\n-----END PGP SIGNATURE-----\n", "payload": "tree 14a3c04a8ec4641be0bd39f256d496381cee8f33\nparent 7ce8906326afed99b9a836ed04a6cf3b4c8630af\nparent 8e084132f8008ef2b1fba13ae0d6b402d140d225\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1640090372 +0000\ncommitter GitHub <noreply@github.com> 1640090372 +0000\n\nMerge #11082\n\n11082: internal: Do less work in `hir::Semantics` r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22987c73e924547081a70082d9372eb921d1414f", "html_url": "https://github.com/rust-lang/rust/commit/22987c73e924547081a70082d9372eb921d1414f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22987c73e924547081a70082d9372eb921d1414f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ce8906326afed99b9a836ed04a6cf3b4c8630af", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ce8906326afed99b9a836ed04a6cf3b4c8630af", "html_url": "https://github.com/rust-lang/rust/commit/7ce8906326afed99b9a836ed04a6cf3b4c8630af"}, {"sha": "8e084132f8008ef2b1fba13ae0d6b402d140d225", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e084132f8008ef2b1fba13ae0d6b402d140d225", "html_url": "https://github.com/rust-lang/rust/commit/8e084132f8008ef2b1fba13ae0d6b402d140d225"}], "stats": {"total": 113, "additions": 54, "deletions": 59}, "files": [{"sha": "02cfeb361cf9691107774cfbc4d1a1af82c0f2a1", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 40, "deletions": 38, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/22987c73e924547081a70082d9372eb921d1414f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22987c73e924547081a70082d9372eb921d1414f/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=22987c73e924547081a70082d9372eb921d1414f", "patch": "@@ -210,7 +210,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n     }\n \n     pub fn hir_file_for(&self, syntax_node: &SyntaxNode) -> HirFileId {\n-        self.imp.find_file(syntax_node.clone()).file_id\n+        self.imp.find_file(syntax_node).file_id\n     }\n \n     pub fn original_range(&self, node: &SyntaxNode) -> FileRange {\n@@ -362,7 +362,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n     }\n \n     pub fn to_def<T: ToDef>(&self, src: &T) -> Option<T::Def> {\n-        let src = self.imp.find_file(src.syntax().clone()).with_value(src).cloned();\n+        let src = self.imp.find_file(src.syntax()).with_value(src).cloned();\n         T::to_def(&self.imp, src)\n     }\n \n@@ -427,16 +427,15 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn expand(&self, macro_call: &ast::MacroCall) -> Option<SyntaxNode> {\n-        let sa = self.analyze(macro_call.syntax());\n+        let sa = self.analyze_no_infer(macro_call.syntax());\n         let file_id = sa.expand(self.db, InFile::new(sa.file_id, macro_call))?;\n         let node = self.db.parse_or_expand(file_id)?;\n         self.cache(node.clone(), file_id);\n         Some(node)\n     }\n \n     fn expand_attr_macro(&self, item: &ast::Item) -> Option<SyntaxNode> {\n-        let sa = self.analyze(item.syntax());\n-        let src = InFile::new(sa.file_id, item.clone());\n+        let src = self.find_file(item.syntax()).with_value(item.clone());\n         let macro_call_id = self.with_ctx(|ctx| ctx.item_to_macro_call(src))?;\n         let file_id = macro_call_id.as_file();\n         let node = self.db.parse_or_expand(file_id)?;\n@@ -446,9 +445,9 @@ impl<'db> SemanticsImpl<'db> {\n \n     fn expand_derive_macro(&self, attr: &ast::Attr) -> Option<Vec<SyntaxNode>> {\n         let item = attr.syntax().parent().and_then(ast::Item::cast)?;\n-        let sa = self.analyze(item.syntax());\n-        let item = InFile::new(sa.file_id, &item);\n-        let src = InFile::new(sa.file_id, attr.clone());\n+        let file_id = self.find_file(item.syntax()).file_id;\n+        let item = InFile::new(file_id, &item);\n+        let src = InFile::new(file_id, attr.clone());\n         self.with_ctx(|ctx| {\n             let macro_call_ids = ctx.attr_to_derive_macro_call(item, src)?;\n \n@@ -470,8 +469,8 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn is_attr_macro_call(&self, item: &ast::Item) -> bool {\n-        let sa = self.analyze(item.syntax());\n-        let src = InFile::new(sa.file_id, item.clone());\n+        let file_id = self.find_file(item.syntax()).file_id;\n+        let src = InFile::new(file_id, item.clone());\n         self.with_ctx(|ctx| ctx.item_to_macro_call(src).is_some())\n     }\n \n@@ -481,11 +480,12 @@ impl<'db> SemanticsImpl<'db> {\n         speculative_args: &ast::TokenTree,\n         token_to_map: SyntaxToken,\n     ) -> Option<(SyntaxNode, SyntaxToken)> {\n-        let sa = self.analyze(actual_macro_call.syntax());\n-        let macro_call = InFile::new(sa.file_id, actual_macro_call);\n-        let krate = sa.resolver.krate()?;\n+        let SourceAnalyzer { file_id, resolver, .. } =\n+            self.analyze_no_infer(actual_macro_call.syntax());\n+        let macro_call = InFile::new(file_id, actual_macro_call);\n+        let krate = resolver.krate()?;\n         let macro_call_id = macro_call.as_call_id(self.db.upcast(), krate, |path| {\n-            sa.resolver.resolve_path_as_macro(self.db.upcast(), &path)\n+            resolver.resolve_path_as_macro(self.db.upcast(), &path)\n         })?;\n         hir_expand::db::expand_speculative(\n             self.db.upcast(),\n@@ -501,8 +501,8 @@ impl<'db> SemanticsImpl<'db> {\n         speculative_args: &ast::Item,\n         token_to_map: SyntaxToken,\n     ) -> Option<(SyntaxNode, SyntaxToken)> {\n-        let sa = self.analyze(actual_macro_call.syntax());\n-        let macro_call = InFile::new(sa.file_id, actual_macro_call.clone());\n+        let file_id = self.find_file(actual_macro_call.syntax()).file_id;\n+        let macro_call = InFile::new(file_id, actual_macro_call.clone());\n         let macro_call_id = self.with_ctx(|ctx| ctx.item_to_macro_call(macro_call))?;\n         hir_expand::db::expand_speculative(\n             self.db.upcast(),\n@@ -712,18 +712,18 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn original_range(&self, node: &SyntaxNode) -> FileRange {\n-        let node = self.find_file(node.clone());\n-        node.as_ref().original_file_range(self.db.upcast())\n+        let node = self.find_file(node);\n+        node.original_file_range(self.db.upcast())\n     }\n \n     fn original_range_opt(&self, node: &SyntaxNode) -> Option<FileRange> {\n-        let node = self.find_file(node.clone());\n-        node.as_ref().original_file_range_opt(self.db.upcast())\n+        let node = self.find_file(node);\n+        node.original_file_range_opt(self.db.upcast())\n     }\n \n     fn original_ast_node<N: AstNode>(&self, node: N) -> Option<N> {\n-        let file = self.find_file(node.syntax().clone());\n-        file.with_value(node).original_ast_node(self.db.upcast()).map(|it| it.value)\n+        let InFile { file_id, .. } = self.find_file(node.syntax());\n+        InFile::new(file_id, node).original_ast_node(self.db.upcast()).map(|it| it.value)\n     }\n \n     fn diagnostics_display_range(&self, src: InFile<SyntaxNodePtr>) -> FileRange {\n@@ -744,7 +744,7 @@ impl<'db> SemanticsImpl<'db> {\n         &self,\n         node: SyntaxNode,\n     ) -> impl Iterator<Item = SyntaxNode> + Clone + '_ {\n-        let node = self.find_file(node);\n+        let node = self.find_file(&node);\n         node.ancestors_with_macros(self.db.upcast()).map(|it| it.value)\n     }\n \n@@ -765,7 +765,8 @@ impl<'db> SemanticsImpl<'db> {\n             gpl.lifetime_params()\n                 .find(|tp| tp.lifetime().as_ref().map(|lt| lt.text()).as_ref() == Some(&text))\n         })?;\n-        let src = self.find_file(lifetime_param.syntax().clone()).with_value(lifetime_param);\n+        let file_id = self.find_file(lifetime_param.syntax()).file_id;\n+        let src = InFile::new(file_id, lifetime_param);\n         ToDef::to_def(self, src)\n     }\n \n@@ -787,7 +788,8 @@ impl<'db> SemanticsImpl<'db> {\n                     .map_or(false, |lt| lt.text() == text)\n             })\n         })?;\n-        let src = self.find_file(label.syntax().clone()).with_value(label);\n+        let file_id = self.find_file(label.syntax()).file_id;\n+        let src = InFile::new(file_id, label);\n         ToDef::to_def(self, src)\n     }\n \n@@ -846,12 +848,12 @@ impl<'db> SemanticsImpl<'db> {\n \n     fn resolve_macro_call(&self, macro_call: &ast::MacroCall) -> Option<MacroDef> {\n         let sa = self.analyze(macro_call.syntax());\n-        let macro_call = self.find_file(macro_call.syntax().clone()).with_value(macro_call);\n+        let macro_call = self.find_file(macro_call.syntax()).with_value(macro_call);\n         sa.resolve_macro_call(self.db, macro_call)\n     }\n \n     fn resolve_attr_macro_call(&self, item: &ast::Item) -> Option<MacroDef> {\n-        let item_in_file = self.find_file(item.syntax().clone()).with_value(item.clone());\n+        let item_in_file = self.find_file(item.syntax()).with_value(item.clone());\n         let macro_call_id = self.with_ctx(|ctx| ctx.item_to_macro_call(item_in_file))?;\n         Some(MacroDef { id: self.db.lookup_intern_macro_call(macro_call_id).def })\n     }\n@@ -902,12 +904,13 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn scope(&self, node: &SyntaxNode) -> SemanticsScope<'db> {\n-        let SourceAnalyzer { file_id, resolver, .. } = self.analyze(node);\n+        let SourceAnalyzer { file_id, resolver, .. } = self.analyze_no_infer(node);\n         SemanticsScope { db: self.db, file_id, resolver }\n     }\n \n     fn scope_at_offset(&self, node: &SyntaxNode, offset: TextSize) -> SemanticsScope<'db> {\n-        let SourceAnalyzer { file_id, resolver, .. } = self.analyze_with_offset(node, offset);\n+        let SourceAnalyzer { file_id, resolver, .. } =\n+            self.analyze_with_offset_no_infer(node, offset);\n         SemanticsScope { db: self.db, file_id, resolver }\n     }\n \n@@ -930,23 +933,22 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze_impl(node, None, true)\n     }\n \n-    fn analyze_with_offset(&self, node: &SyntaxNode, offset: TextSize) -> SourceAnalyzer {\n-        self.analyze_impl(node, Some(offset), true)\n-    }\n-\n     fn analyze_no_infer(&self, node: &SyntaxNode) -> SourceAnalyzer {\n         self.analyze_impl(node, None, false)\n     }\n \n+    fn analyze_with_offset_no_infer(&self, node: &SyntaxNode, offset: TextSize) -> SourceAnalyzer {\n+        self.analyze_impl(node, Some(offset), false)\n+    }\n+\n     fn analyze_impl(\n         &self,\n         node: &SyntaxNode,\n         offset: Option<TextSize>,\n         infer_body: bool,\n     ) -> SourceAnalyzer {\n         let _p = profile::span(\"Semantics::analyze_impl\");\n-        let node = self.find_file(node.clone());\n-        let node = node.as_ref();\n+        let node = self.find_file(node);\n \n         let container = match self.with_ctx(|ctx| ctx.find_container(node)) {\n             Some(it) => it,\n@@ -980,16 +982,16 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn assert_contains_node(&self, node: &SyntaxNode) {\n-        self.find_file(node.clone());\n+        self.find_file(node);\n     }\n \n     fn lookup(&self, root_node: &SyntaxNode) -> Option<HirFileId> {\n         let cache = self.cache.borrow();\n         cache.get(root_node).copied()\n     }\n \n-    fn find_file(&self, node: SyntaxNode) -> InFile<SyntaxNode> {\n-        let root_node = find_root(&node);\n+    fn find_file<'node>(&self, node: &'node SyntaxNode) -> InFile<&'node SyntaxNode> {\n+        let root_node = find_root(node);\n         let file_id = self.lookup(&root_node).unwrap_or_else(|| {\n             panic!(\n                 \"\\n\\nFailed to lookup {:?} in this Semantics.\\n\\"}, {"sha": "dd83f1c86e019fc30cf21e06222c2267c55e715d", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/22987c73e924547081a70082d9372eb921d1414f/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22987c73e924547081a70082d9372eb921d1414f/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=22987c73e924547081a70082d9372eb921d1414f", "patch": "@@ -131,15 +131,13 @@ impl SourceToDefCtx<'_, '_> {\n \n     pub(super) fn module_to_def(&mut self, src: InFile<ast::Module>) -> Option<ModuleId> {\n         let _p = profile::span(\"module_to_def\");\n-        let parent_declaration = src\n-            .syntax()\n-            .cloned()\n-            .ancestors_with_macros_skip_attr_item(self.db.upcast())\n-            .skip(1)\n-            .find_map(|it| {\n-                let m = ast::Module::cast(it.value.clone())?;\n-                Some(it.with_value(m))\n-            });\n+        let parent_declaration =\n+            src.syntax().ancestors_with_macros_skip_attr_item(self.db.upcast()).skip(1).find_map(\n+                |it| {\n+                    let m = ast::Module::cast(it.value.clone())?;\n+                    Some(it.with_value(m))\n+                },\n+            );\n \n         let parent_module = match parent_declaration {\n             Some(parent_declaration) => self.module_to_def(parent_declaration),\n@@ -333,8 +331,7 @@ impl SourceToDefCtx<'_, '_> {\n     }\n \n     pub(super) fn find_container(&mut self, src: InFile<&SyntaxNode>) -> Option<ChildContainer> {\n-        for container in src.cloned().ancestors_with_macros_skip_attr_item(self.db.upcast()).skip(1)\n-        {\n+        for container in src.ancestors_with_macros_skip_attr_item(self.db.upcast()).skip(1) {\n             if let Some(res) = self.container_to_def(container) {\n                 return Some(res);\n             }\n@@ -398,8 +395,7 @@ impl SourceToDefCtx<'_, '_> {\n     }\n \n     fn find_generic_param_container(&mut self, src: InFile<&SyntaxNode>) -> Option<GenericDefId> {\n-        for container in src.cloned().ancestors_with_macros_skip_attr_item(self.db.upcast()).skip(1)\n-        {\n+        for container in src.ancestors_with_macros_skip_attr_item(self.db.upcast()).skip(1) {\n             let res: GenericDefId = match_ast! {\n                 match (container.value) {\n                     ast::Fn(it) => self.fn_to_def(container.with_value(it))?.into(),\n@@ -417,8 +413,7 @@ impl SourceToDefCtx<'_, '_> {\n     }\n \n     fn find_pat_or_label_container(&mut self, src: InFile<&SyntaxNode>) -> Option<DefWithBodyId> {\n-        for container in src.cloned().ancestors_with_macros_skip_attr_item(self.db.upcast()).skip(1)\n-        {\n+        for container in src.ancestors_with_macros_skip_attr_item(self.db.upcast()).skip(1) {\n             let res: DefWithBodyId = match_ast! {\n                 match (container.value) {\n                     ast::Const(it) => self.const_to_def(container.with_value(it))?.into(),"}, {"sha": "fe9f7ef27491055cda9af9b94e64ede459b355db", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/22987c73e924547081a70082d9372eb921d1414f/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22987c73e924547081a70082d9372eb921d1414f/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=22987c73e924547081a70082d9372eb921d1414f", "patch": "@@ -578,12 +578,12 @@ impl<T> InFile<Option<T>> {\n     }\n }\n \n-impl InFile<SyntaxNode> {\n+impl<'a> InFile<&'a SyntaxNode> {\n     pub fn ancestors_with_macros(\n         self,\n         db: &dyn db::AstDatabase,\n     ) -> impl Iterator<Item = InFile<SyntaxNode>> + Clone + '_ {\n-        iter::successors(Some(self), move |node| match node.value.parent() {\n+        iter::successors(Some(self.cloned()), move |node| match node.value.parent() {\n             Some(parent) => Some(node.with_value(parent)),\n             None => {\n                 let parent_node = node.file_id.call_node(db)?;\n@@ -597,7 +597,7 @@ impl InFile<SyntaxNode> {\n         self,\n         db: &dyn db::AstDatabase,\n     ) -> impl Iterator<Item = InFile<SyntaxNode>> + '_ {\n-        iter::successors(Some(self), move |node| match node.value.parent() {\n+        iter::successors(Some(self.cloned()), move |node| match node.value.parent() {\n             Some(parent) => Some(node.with_value(parent)),\n             None => {\n                 let parent_node = node.file_id.call_node(db)?;\n@@ -611,9 +611,7 @@ impl InFile<SyntaxNode> {\n             }\n         })\n     }\n-}\n \n-impl<'a> InFile<&'a SyntaxNode> {\n     /// Falls back to the macro call range if the node cannot be mapped up fully.\n     pub fn original_file_range(self, db: &dyn db::AstDatabase) -> FileRange {\n         if let Some(res) = self.original_file_range_opt(db) {\n@@ -701,7 +699,7 @@ impl InFile<SyntaxToken> {\n     ) -> impl Iterator<Item = InFile<SyntaxNode>> + '_ {\n         self.value.parent().into_iter().flat_map({\n             let file_id = self.file_id;\n-            move |parent| InFile::new(file_id, parent).ancestors_with_macros(db)\n+            move |parent| InFile::new(file_id, &parent).ancestors_with_macros(db)\n         })\n     }\n }"}]}