{"sha": "67b03007cf40f2331892d5b0f65d2917ac3603d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YjAzMDA3Y2Y0MGYyMzMxODkyZDViMGY2NWQyOTE3YWMzNjAzZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-23T20:26:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-23T20:26:33Z"}, "message": "Auto merge of #87413 - JohnTitor:rollup-dht22jk, r=JohnTitor\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #86410 (VecMap::get_value_matching should return just one element)\n - #86790 (Document iteration order of `retain` functions)\n - #87171 (Remove Option from BufWriter)\n - #87175 (Stabilize `into_parts()` and `into_error()`)\n - #87185 (Fix panics on Windows when the build was cancelled)\n - #87191 (Package LLVM libs for the target rather than the build host)\n - #87255 (better support for running libcore tests with Miri)\n - #87266 (Add testcase for 87076)\n - #87283 (Add `--codegen-backends=foo,bar` configure flag)\n - #87322 (fix: clarify suggestion that `&T` must refer to `T: Sync` for `&T: Send`)\n - #87358 (Fix `--dry-run` when download-ci-llvm is set)\n - #87380 (Don't default to `submodules = true` unless the rust repo has a .git directory)\n - #87398 (Add test for fonts used for module items)\n - #87412 (Add missing article)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "fc0eeae25f29e324e89f3ad0d11045fcce5f446f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc0eeae25f29e324e89f3ad0d11045fcce5f446f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67b03007cf40f2331892d5b0f65d2917ac3603d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67b03007cf40f2331892d5b0f65d2917ac3603d5", "html_url": "https://github.com/rust-lang/rust/commit/67b03007cf40f2331892d5b0f65d2917ac3603d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67b03007cf40f2331892d5b0f65d2917ac3603d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a1f419e641c7ec56a60f1714ced5c343e0a2b38", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1f419e641c7ec56a60f1714ced5c343e0a2b38", "html_url": "https://github.com/rust-lang/rust/commit/4a1f419e641c7ec56a60f1714ced5c343e0a2b38"}, {"sha": "a6515816a644be708578328b425a60c7f1e6168e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6515816a644be708578328b425a60c7f1e6168e", "html_url": "https://github.com/rust-lang/rust/commit/a6515816a644be708578328b425a60c7f1e6168e"}], "stats": {"total": 257, "additions": 213, "deletions": 44}, "files": [{"sha": "cc7ec9432faed31803376bbc5113cebd642229ca", "filename": "compiler/rustc_data_structures/src/vec_map.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -1,4 +1,5 @@\n use std::borrow::Borrow;\n+use std::fmt::Debug;\n use std::iter::FromIterator;\n use std::slice::Iter;\n use std::vec::IntoIter;\n@@ -12,7 +13,8 @@ pub struct VecMap<K, V>(Vec<(K, V)>);\n \n impl<K, V> VecMap<K, V>\n where\n-    K: PartialEq,\n+    K: Debug + PartialEq,\n+    V: Debug,\n {\n     pub fn new() -> Self {\n         VecMap(Default::default())\n@@ -37,14 +39,31 @@ where\n         self.0.iter().find(|(key, _)| k == key.borrow()).map(|elem| &elem.1)\n     }\n \n-    /// Returns the value corresponding to the supplied predicate filter.\n+    /// Returns the any value corresponding to the supplied predicate filter.\n     ///\n     /// The supplied predicate will be applied to each (key, value) pair and it will return a\n     /// reference to the values where the predicate returns `true`.\n-    pub fn get_by(&self, mut predicate: impl FnMut(&(K, V)) -> bool) -> Option<&V> {\n+    pub fn any_value_matching(&self, mut predicate: impl FnMut(&(K, V)) -> bool) -> Option<&V> {\n         self.0.iter().find(|kv| predicate(kv)).map(|elem| &elem.1)\n     }\n \n+    /// Returns the value corresponding to the supplied predicate filter. It crashes if there's\n+    /// more than one matching element.\n+    ///\n+    /// The supplied predicate will be applied to each (key, value) pair and it will return a\n+    /// reference to the value where the predicate returns `true`.\n+    pub fn get_value_matching(&self, mut predicate: impl FnMut(&(K, V)) -> bool) -> Option<&V> {\n+        let mut filter = self.0.iter().filter(|kv| predicate(kv));\n+        let (_, value) = filter.next()?;\n+        // This should return just one element, otherwise it's a bug\n+        assert!(\n+            filter.next().is_none(),\n+            \"Collection {:?} should have just one matching element\",\n+            self\n+        );\n+        Some(value)\n+    }\n+\n     /// Returns `true` if the map contains a value for the specified key.\n     ///\n     /// The key may be any borrowed form of the map's key type,\n@@ -131,7 +150,7 @@ impl<K, V> IntoIterator for VecMap<K, V> {\n     }\n }\n \n-impl<K: PartialEq, V> Extend<(K, V)> for VecMap<K, V> {\n+impl<K: PartialEq + Debug, V: Debug> Extend<(K, V)> for VecMap<K, V> {\n     fn extend<I: IntoIterator<Item = (K, V)>>(&mut self, iter: I) {\n         for (k, v) in iter {\n             self.insert(k, v);"}, {"sha": "9a33875d6e493f293d9e1efb9c24004b2821681e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -1857,12 +1857,37 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 }\n             }\n             GeneratorInteriorOrUpvar::Upvar(upvar_span) => {\n+                // `Some(ref_ty)` if `target_ty` is `&T` and `T` fails to impl `Sync`\n+                let refers_to_non_sync = match target_ty.kind() {\n+                    ty::Ref(_, ref_ty, _) => match self.evaluate_obligation(&obligation) {\n+                        Ok(eval) if !eval.may_apply() => Some(ref_ty),\n+                        _ => None,\n+                    },\n+                    _ => None,\n+                };\n+\n+                let (span_label, span_note) = match refers_to_non_sync {\n+                    // if `target_ty` is `&T` and `T` fails to impl `Sync`,\n+                    // include suggestions to make `T: Sync` so that `&T: Send`\n+                    Some(ref_ty) => (\n+                        format!(\n+                            \"has type `{}` which {}, because `{}` is not `Sync`\",\n+                            target_ty, trait_explanation, ref_ty\n+                        ),\n+                        format!(\n+                            \"captured value {} because `&` references cannot be sent unless their referent is `Sync`\",\n+                            trait_explanation\n+                        ),\n+                    ),\n+                    None => (\n+                        format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n+                        format!(\"captured value {}\", trait_explanation),\n+                    ),\n+                };\n+\n                 let mut span = MultiSpan::from_span(upvar_span);\n-                span.push_span_label(\n-                    upvar_span,\n-                    format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n-                );\n-                err.span_note(span, &format!(\"captured value {}\", trait_explanation));\n+                span.push_span_label(upvar_span, span_label);\n+                err.span_note(span, &span_note);\n             }\n         }\n "}, {"sha": "50e4ba4fe6c3e23cd22c40c364bb2f661905a552", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -364,7 +364,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     let concrete_ty = tcx\n                         .mir_borrowck(owner.expect_local())\n                         .concrete_opaque_types\n-                        .get_by(|(key, _)| key.def_id == def_id.to_def_id())\n+                        .get_value_matching(|(key, _)| key.def_id == def_id.to_def_id())\n                         .map(|concrete_ty| *concrete_ty)\n                         .unwrap_or_else(|| {\n                             tcx.sess.delay_span_bug(\n@@ -512,8 +512,15 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n \n     struct ConstraintLocator<'tcx> {\n         tcx: TyCtxt<'tcx>,\n+\n+        /// def_id of the opaque type whose defining uses are being checked\n         def_id: DefId,\n-        // (first found type span, actual type)\n+\n+        /// as we walk the defining uses, we are checking that all of them\n+        /// define the same hidden type. This variable is set to `Some`\n+        /// with the first type that we find, and then later types are\n+        /// checked against it (we also carry the span of that first\n+        /// type).\n         found: Option<(Span, Ty<'tcx>)>,\n     }\n \n@@ -531,7 +538,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n                 .tcx\n                 .typeck(def_id)\n                 .concrete_opaque_types\n-                .get_by(|(key, _)| key.def_id == self.def_id)\n+                .any_value_matching(|(key, _)| key.def_id == self.def_id)\n                 .is_none()\n             {\n                 debug!(\"no constraints in typeck results\");"}, {"sha": "775133f2ab3194f96dce98c507447f8617149542", "filename": "config.toml.example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -38,7 +38,7 @@ changelog-seen = 2\n # This is false by default so that distributions don't unexpectedly download\n # LLVM from the internet.\n #\n-# All tier 1 targets are currently supported; set this to `\"if-supported\"` if\n+# All tier 1 targets are currently supported; set this to `\"if-available\"` if\n # you are not sure whether you're on a tier 1 target.\n #\n # We also currently only support this when building LLVM for the build triple."}, {"sha": "79042ab739c748a41167cd92822eb243f9ffc36c", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -935,6 +935,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// Retains only the elements specified by the predicate.\n     ///\n     /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\n+    /// The elements are visited in ascending key order.\n     ///\n     /// # Examples\n     ///"}, {"sha": "9711214aea62381204cbbece21ef3067250b809a", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -846,6 +846,7 @@ impl<T> BTreeSet<T> {\n     /// Retains only the elements specified by the predicate.\n     ///\n     /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n+    /// The elements are visited in ascending order.\n     ///\n     /// # Examples\n     ///"}, {"sha": "fa1f361a5b6d1998e478024953a84e5803677dae", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -56,6 +56,10 @@\n //! [`Rc`]: rc\n //! [`RefCell`]: core::cell\n \n+// To run liballoc tests without x.py without ending up with two copies of liballoc, Miri needs to be\n+// able to \"empty\" this crate. See <https://github.com/rust-lang/miri-test-libstd/issues/4>.\n+// rustc itself never sets the feature, so this line has no affect there.\n+#![cfg(any(not(feature = \"miri-test-libstd\"), test, doctest))]\n #![allow(unused_attributes)]\n #![stable(feature = \"alloc\", since = \"1.36.0\")]\n #![doc("}, {"sha": "6d87a7ab055c2daafb22330291bd342053d776eb", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -49,6 +49,10 @@\n //\n // This cfg won't affect doc tests.\n #![cfg(not(test))]\n+// To run libcore tests without x.py without ending up with two copies of libcore, Miri needs to be\n+// able to \"empty\" this crate. See <https://github.com/rust-lang/miri-test-libstd/issues/4>.\n+// rustc itself never sets the feature, so this line has no affect there.\n+#![cfg(any(not(feature = \"miri-test-libstd\"), test, doctest))]\n #![stable(feature = \"core\", since = \"1.6.0\")]\n #![doc(\n     html_playground_url = \"https://play.rust-lang.org/\","}, {"sha": "4a5efab9055b3c33ac62424efbbc178d3f7daaa2", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -934,6 +934,7 @@ where\n     /// Retains only the elements specified by the predicate.\n     ///\n     /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\n+    /// The elements are visited in unsorted (and unspecified) order.\n     ///\n     /// # Examples\n     ///"}, {"sha": "1a2a8afac8bed6568e82960fcd21da0df86cd984", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -912,6 +912,7 @@ where\n     /// Retains only the elements specified by the predicate.\n     ///\n     /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n+    /// The elements are visited in unsorted (and unspecified) order.\n     ///\n     /// # Examples\n     ///"}, {"sha": "c98244132befd62e3be3eb547b7feb841a3c1b18", "filename": "library/std/src/io/buffered/bufwriter.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -68,7 +68,7 @@ use crate::ptr;\n /// [`flush`]: BufWriter::flush\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BufWriter<W: Write> {\n-    inner: Option<W>,\n+    inner: W,\n     // The buffer. Avoid using this like a normal `Vec` in common code paths.\n     // That is, don't use `buf.push`, `buf.extend_from_slice`, or any other\n     // methods that require bounds checking or the like. This makes an enormous\n@@ -112,7 +112,7 @@ impl<W: Write> BufWriter<W> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(capacity: usize, inner: W) -> BufWriter<W> {\n-        BufWriter { inner: Some(inner), buf: Vec::with_capacity(capacity), panicked: false }\n+        BufWriter { inner, buf: Vec::with_capacity(capacity), panicked: false }\n     }\n \n     /// Send data in our local buffer into the inner writer, looping as\n@@ -161,10 +161,9 @@ impl<W: Write> BufWriter<W> {\n         }\n \n         let mut guard = BufGuard::new(&mut self.buf);\n-        let inner = self.inner.as_mut().unwrap();\n         while !guard.done() {\n             self.panicked = true;\n-            let r = inner.write(guard.remaining());\n+            let r = self.inner.write(guard.remaining());\n             self.panicked = false;\n \n             match r {\n@@ -212,7 +211,7 @@ impl<W: Write> BufWriter<W> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_ref(&self) -> &W {\n-        self.inner.as_ref().unwrap()\n+        &self.inner\n     }\n \n     /// Gets a mutable reference to the underlying writer.\n@@ -232,7 +231,7 @@ impl<W: Write> BufWriter<W> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_mut(&mut self) -> &mut W {\n-        self.inner.as_mut().unwrap()\n+        &mut self.inner\n     }\n \n     /// Returns a reference to the internally buffered data.\n@@ -308,7 +307,7 @@ impl<W: Write> BufWriter<W> {\n     pub fn into_inner(mut self) -> Result<W, IntoInnerError<BufWriter<W>>> {\n         match self.flush_buf() {\n             Err(e) => Err(IntoInnerError::new(self, e)),\n-            Ok(()) => Ok(self.inner.take().unwrap()),\n+            Ok(()) => Ok(self.into_raw_parts().0),\n         }\n     }\n \n@@ -339,7 +338,12 @@ impl<W: Write> BufWriter<W> {\n     pub fn into_raw_parts(mut self) -> (W, Result<Vec<u8>, WriterPanicked>) {\n         let buf = mem::take(&mut self.buf);\n         let buf = if !self.panicked { Ok(buf) } else { Err(WriterPanicked { buf }) };\n-        (self.inner.take().unwrap(), buf)\n+\n+        // SAFETY: forget(self) prevents double dropping inner\n+        let inner = unsafe { ptr::read(&mut self.inner) };\n+        mem::forget(self);\n+\n+        (inner, buf)\n     }\n \n     // Ensure this function does not get inlined into `write`, so that it\n@@ -643,7 +647,7 @@ where\n {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt.debug_struct(\"BufWriter\")\n-            .field(\"writer\", &self.inner.as_ref().unwrap())\n+            .field(\"writer\", &self.inner)\n             .field(\"buffer\", &format_args!(\"{}/{}\", self.buf.len(), self.buf.capacity()))\n             .finish()\n     }\n@@ -663,7 +667,7 @@ impl<W: Write + Seek> Seek for BufWriter<W> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<W: Write> Drop for BufWriter<W> {\n     fn drop(&mut self) {\n-        if self.inner.is_some() && !self.panicked {\n+        if !self.panicked {\n             // dtors should not panic, so we ignore a failed flush\n             let _r = self.flush_buf();\n         }"}, {"sha": "38076ab3a2b7bc04255d7848e0c3e71af9c23c2b", "filename": "library/std/src/io/buffered/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fmod.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -133,7 +133,6 @@ impl<W> IntoInnerError<W> {\n     ///\n     /// # Example\n     /// ```\n-    /// #![feature(io_into_inner_error_parts)]\n     /// use std::io::{BufWriter, ErrorKind, Write};\n     ///\n     /// let mut not_enough_space = [0u8; 10];\n@@ -143,7 +142,7 @@ impl<W> IntoInnerError<W> {\n     /// let err = into_inner_err.into_error();\n     /// assert_eq!(err.kind(), ErrorKind::WriteZero);\n     /// ```\n-    #[unstable(feature = \"io_into_inner_error_parts\", issue = \"79704\")]\n+    #[stable(feature = \"io_into_inner_error_parts\", since = \"1.55.0\")]\n     pub fn into_error(self) -> Error {\n         self.1\n     }\n@@ -156,7 +155,6 @@ impl<W> IntoInnerError<W> {\n     ///\n     /// # Example\n     /// ```\n-    /// #![feature(io_into_inner_error_parts)]\n     /// use std::io::{BufWriter, ErrorKind, Write};\n     ///\n     /// let mut not_enough_space = [0u8; 10];\n@@ -167,7 +165,7 @@ impl<W> IntoInnerError<W> {\n     /// assert_eq!(err.kind(), ErrorKind::WriteZero);\n     /// assert_eq!(recovered_writer.buffer(), b\"t be actually written\");\n     /// ```\n-    #[unstable(feature = \"io_into_inner_error_parts\", issue = \"79704\")]\n+    #[stable(feature = \"io_into_inner_error_parts\", since = \"1.55.0\")]\n     pub fn into_parts(self) -> (Error, W) {\n         (self.1, self.0)\n     }"}, {"sha": "78c9a25262243bca4be37e44f3aa990d26d5696f", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -3,7 +3,7 @@\n //!\n //! This module contains some of the real meat in the rustbuild build system\n //! which is where Cargo is used to compile the standard library, libtest, and\n-//! compiler. This module is also responsible for assembling the sysroot as it\n+//! the compiler. This module is also responsible for assembling the sysroot as it\n //! goes along from the output of the previous stage.\n \n use std::borrow::Cow;"}, {"sha": "4b3c25b02c2789ca327b318a6688e566e222b08c", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -13,6 +13,7 @@ use std::path::{Path, PathBuf};\n use std::str::FromStr;\n \n use crate::cache::{Interned, INTERNER};\n+use crate::channel::GitInfo;\n pub use crate::flags::Subcommand;\n use crate::flags::{Color, Flags};\n use crate::util::exe;\n@@ -48,7 +49,7 @@ pub struct Config {\n     /// Call Build::ninja() instead of this.\n     pub ninja_in_file: bool,\n     pub verbose: usize,\n-    pub submodules: bool,\n+    pub submodules: Option<bool>,\n     pub fast_submodules: bool,\n     pub compiler_docs: bool,\n     pub docs_minification: bool,\n@@ -552,7 +553,7 @@ impl Config {\n         config.backtrace = true;\n         config.rust_optimize = true;\n         config.rust_optimize_tests = true;\n-        config.submodules = true;\n+        config.submodules = None;\n         config.fast_submodules = true;\n         config.docs = true;\n         config.docs_minification = true;\n@@ -658,11 +659,11 @@ impl Config {\n         config.npm = build.npm.map(PathBuf::from);\n         config.gdb = build.gdb.map(PathBuf::from);\n         config.python = build.python.map(PathBuf::from);\n+        config.submodules = build.submodules;\n         set(&mut config.low_priority, build.low_priority);\n         set(&mut config.compiler_docs, build.compiler_docs);\n         set(&mut config.docs_minification, build.docs_minification);\n         set(&mut config.docs, build.docs);\n-        set(&mut config.submodules, build.submodules);\n         set(&mut config.fast_submodules, build.fast_submodules);\n         set(&mut config.locked_deps, build.locked_deps);\n         set(&mut config.vendor, build.vendor);\n@@ -792,8 +793,16 @@ impl Config {\n \n                 // CI-built LLVM can be either dynamic or static.\n                 let ci_llvm = config.out.join(&*config.build.triple).join(\"ci-llvm\");\n-                let link_type = t!(std::fs::read_to_string(ci_llvm.join(\"link-type.txt\")));\n-                config.llvm_link_shared = link_type == \"dynamic\";\n+                config.llvm_link_shared = if config.dry_run {\n+                    // just assume dynamic for now\n+                    true\n+                } else {\n+                    let link_type = t!(\n+                        std::fs::read_to_string(ci_llvm.join(\"link-type.txt\")),\n+                        format!(\"CI llvm missing: {}\", ci_llvm.display())\n+                    );\n+                    link_type == \"dynamic\"\n+                };\n             }\n \n             if config.llvm_thin_lto {\n@@ -1075,6 +1084,10 @@ impl Config {\n     pub fn llvm_enabled(&self) -> bool {\n         self.rust_codegen_backends.contains(&INTERNER.intern_str(\"llvm\"))\n     }\n+\n+    pub fn submodules(&self, rust_info: &GitInfo) -> bool {\n+        self.submodules.unwrap_or(rust_info.is_git())\n+    }\n }\n \n fn set<T>(field: &mut T, val: Option<T>) {"}, {"sha": "8d9f169e6c50d495f6ffa7461ec05fea57b9a559", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -160,6 +160,7 @@ def v(*args):\n o(\"extended\", \"build.extended\", \"build an extended rust tool set\")\n \n v(\"tools\", None, \"List of extended tools will be installed\")\n+v(\"codegen-backends\", None, \"List of codegen backends to build\")\n v(\"build\", \"build.build\", \"GNUs ./configure syntax LLVM build triple\")\n v(\"host\", None, \"GNUs ./configure syntax LLVM host triples\")\n v(\"target\", None, \"GNUs ./configure syntax LLVM target triples\")\n@@ -339,6 +340,8 @@ def set(key, value):\n         set('target.{}.llvm-filecheck'.format(build()), value)\n     elif option.name == 'tools':\n         set('build.tools', value.split(','))\n+    elif option.name == 'codegen-backends':\n+        set('rust.codegen-backends', value.split(','))\n     elif option.name == 'host':\n         set('build.host', value.split(','))\n     elif option.name == 'target':"}, {"sha": "c37763243c0a55ab118318e3f8506f6decbcb568", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -1955,8 +1955,16 @@ fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir\n         cmd.arg(\"--libfiles\");\n         builder.verbose(&format!(\"running {:?}\", cmd));\n         let files = output(&mut cmd);\n+        let build_llvm_out = &builder.llvm_out(builder.config.build);\n+        let target_llvm_out = &builder.llvm_out(target);\n         for file in files.trim_end().split(' ') {\n-            builder.install(Path::new(file), dst_libdir, 0o644);\n+            // If we're not using a custom LLVM, make sure we package for the target.\n+            let file = if let Ok(relative_path) = Path::new(file).strip_prefix(build_llvm_out) {\n+                target_llvm_out.join(relative_path)\n+            } else {\n+                PathBuf::from(file)\n+            };\n+            builder.install(&file, dst_libdir, 0o644);\n         }\n         !builder.config.dry_run\n     } else {"}, {"sha": "5c0322e18a4ab9fff09fa2b62be5592c546aa08d", "filename": "src/bootstrap/job.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Fbootstrap%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Fbootstrap%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fjob.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -103,12 +103,20 @@ pub unsafe fn setup(build: &mut Build) {\n     };\n \n     let parent = OpenProcess(PROCESS_DUP_HANDLE, FALSE, pid.parse().unwrap());\n-    assert!(\n-        !parent.is_null(),\n-        \"PID `{}` doesn't seem to exist: {}\",\n-        pid,\n-        io::Error::last_os_error()\n-    );\n+\n+    // If we get a null parent pointer here, it is possible that either\n+    // we have got an invalid pid or the parent process has been closed.\n+    // Since the first case rarely happens\n+    // (only when wrongly setting the environmental variable),\n+    // so it might be better to improve the experience of the second case\n+    // when users have interrupted the parent process and we don't finish\n+    // duplicating the handle yet.\n+    // We just need close the job object if that occurs.\n+    if parent.is_null() {\n+        CloseHandle(job);\n+        return;\n+    }\n+\n     let mut parent_handle = ptr::null_mut();\n     let r = DuplicateHandle(\n         GetCurrentProcess(),"}, {"sha": "245f3eada2af7719d6ab33a61912ed15b3257883", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -486,7 +486,7 @@ impl Build {\n             t!(std::fs::read_dir(dir)).next().is_none()\n         }\n \n-        if !self.config.submodules {\n+        if !self.config.submodules(&self.rust_info) {\n             return;\n         }\n \n@@ -562,7 +562,7 @@ impl Build {\n             \"library/stdarch\",\n         ];\n         // Avoid running git when there isn't a git checkout.\n-        if !self.config.submodules {\n+        if !self.config.submodules(&self.rust_info) {\n             return;\n         }\n         let output = output("}, {"sha": "817b148bee1a6309fae5a486fa11c5b35e3564fa", "filename": "src/test/rustdoc-gui/module-items-font.goml", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Frustdoc-gui%2Fmodule-items-font.goml", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Frustdoc-gui%2Fmodule-items-font.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fmodule-items-font.goml?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -0,0 +1,4 @@\n+// This test checks that the correct font is used on module items (in index.html pages).\n+goto: file://|DOC_PATH|/test_docs/index.html\n+assert-css: (\".item-table .module-item a\", {\"font-family\": '\"Fira Sans\", Arial, sans-serif'}, ALL)\n+assert-css: (\".item-table .docblock-short\", {\"font-family\": '\"Source Serif 4\", \"Noto Sans KR\", serif'}, ALL)"}, {"sha": "317f0317664b6733f3287fb87bc5cfdad7705738", "filename": "src/test/ui/async-await/issue-86507.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -0,0 +1,25 @@\n+// edition:2018\n+\n+use ::core::pin::Pin;\n+use ::core::future::Future;\n+use ::core::marker::Send;\n+\n+trait Foo {\n+    fn bar<'me, 'async_trait, T: Send>(x: &'me T)\n+        -> Pin<Box<dyn Future<Output = ()> + Send + 'async_trait>>\n+        where 'me: 'async_trait;\n+}\n+\n+impl Foo for () {\n+    fn bar<'me, 'async_trait, T: Send>(x: &'me T)\n+        -> Pin<Box<dyn Future<Output = ()> + Send + 'async_trait>>\n+        where 'me:'async_trait {\n+            Box::pin( //~ ERROR future cannot be sent between threads safely\n+                async move {\n+                    let x = x;\n+                }\n+            )\n+         }\n+}\n+\n+fn main() { }"}, {"sha": "51e8f61085b22987afacccefb43e68d51c1e01f8", "filename": "src/test/ui/async-await/issue-86507.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -0,0 +1,23 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-86507.rs:17:13\n+   |\n+LL | /             Box::pin(\n+LL | |                 async move {\n+LL | |                     let x = x;\n+LL | |                 }\n+LL | |             )\n+   | |_____________^ future created by async block is not `Send`\n+   |\n+note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n+  --> $DIR/issue-86507.rs:19:29\n+   |\n+LL |                     let x = x;\n+   |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n+   = note: required for the cast to the object type `dyn Future<Output = ()> + Send`\n+help: consider further restricting type parameter `T`\n+   |\n+LL |         where 'me:'async_trait, T: std::marker::Sync {\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "4a6b57842217ee9ecbc1179a4dc9cfe172748d0b", "filename": "src/test/ui/const-generics/issues/auxiliary/impl-const.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fimpl-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fimpl-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fimpl-const.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/auxiliary/impl-const.rs"}, {"sha": "56deec16548f5c562998c16e15c6d9834c5b7645", "filename": "src/test/ui/const-generics/issues/issue-61522-array-len-succ.full.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61522-array-len-succ.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61522-array-len-succ.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61522-array-len-succ.full.stderr?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-61522-array-len-succ.full.stderr"}, {"sha": "36a0a37ae9c3f69b2a16bf1bc34a6bd2b2ec7eaf", "filename": "src/test/ui/const-generics/issues/issue-61522-array-len-succ.min.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61522-array-len-succ.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61522-array-len-succ.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61522-array-len-succ.min.stderr?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-61522-array-len-succ.min.stderr"}, {"sha": "d4a948b92597d5727d01fec5128c578244d81692", "filename": "src/test/ui/const-generics/issues/issue-61522-array-len-succ.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61522-array-len-succ.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61522-array-len-succ.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61522-array-len-succ.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-61522-array-len-succ.rs"}, {"sha": "e96b9e70352649575bf056c3ee504d489ed69f16", "filename": "src/test/ui/const-generics/issues/issue-66596-impl-trait-for-str-const-arg.min.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66596-impl-trait-for-str-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66596-impl-trait-for-str-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66596-impl-trait-for-str-const-arg.min.stderr?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-66596-impl-trait-for-str-const-arg.min.stderr"}, {"sha": "2a741ba87a980957e337143885379e9b47eed37a", "filename": "src/test/ui/const-generics/issues/issue-66596-impl-trait-for-str-const-arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66596-impl-trait-for-str-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66596-impl-trait-for-str-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66596-impl-trait-for-str-const-arg.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-66596-impl-trait-for-str-const-arg.rs"}, {"sha": "0fe65272f1b78d0bea6437c2da47606da92fc59d", "filename": "src/test/ui/const-generics/issues/issue-67375.full.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.full.stderr?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-67375.full.stderr"}, {"sha": "be81fa921297b2a67ffa0ed00d89a2c4ed011318", "filename": "src/test/ui/const-generics/issues/issue-67375.min.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.min.stderr?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-67375.min.stderr"}, {"sha": "a8875b8b6bfcabf59e148ac2b3917686c2fe627b", "filename": "src/test/ui/const-generics/issues/issue-67375.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-67375.rs"}, {"sha": "63c50b5ca542387bc5058f9b94c222a2314e313c", "filename": "src/test/ui/const-generics/issues/issue-67945-1.full.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.full.stderr?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-67945-1.full.stderr"}, {"sha": "074d36c8ef3ed2d41a3894f4115f7636fac0c387", "filename": "src/test/ui/const-generics/issues/issue-67945-1.min.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.min.stderr?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-67945-1.min.stderr"}, {"sha": "84737e4e9857839380f0b6569e9ca132027e0860", "filename": "src/test/ui/const-generics/issues/issue-67945-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-67945-1.rs"}, {"sha": "b900406023117111434003fc8c6cf261bd131300", "filename": "src/test/ui/const-generics/issues/issue-67945-2.full.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.full.stderr?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-67945-2.full.stderr"}, {"sha": "c06df79f8428c51a3b3da3e8ea9cafd31b319bb6", "filename": "src/test/ui/const-generics/issues/issue-67945-2.min.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.min.stderr?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-67945-2.min.stderr"}, {"sha": "4a46786e9a9bf3c3751f1a1df06d07fb5584a390", "filename": "src/test/ui/const-generics/issues/issue-67945-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-67945-2.rs"}, {"sha": "fa66252bd6946f60b49dd710bde84e70db8908ca", "filename": "src/test/ui/const-generics/issues/issue-67945-3.full.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-3.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-3.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-3.full.stderr?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-67945-3.full.stderr"}, {"sha": "5c30429c89581ecbe92ed24a15e64d4b446a3cd7", "filename": "src/test/ui/const-generics/issues/issue-67945-3.min.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-3.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-3.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-3.min.stderr?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-67945-3.min.stderr"}, {"sha": "5bad61cfc763870a7b562b01260d9eb89b2328ca", "filename": "src/test/ui/const-generics/issues/issue-67945-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-3.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-67945-3.rs"}, {"sha": "43c3999133c650b934f34ff5b965565a4b151fc3", "filename": "src/test/ui/const-generics/issues/issue-68104-print-stack-overflow.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68104-print-stack-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68104-print-stack-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68104-print-stack-overflow.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-68104-print-stack-overflow.rs"}, {"sha": "f0554823273a8f478e85fa64b790374d4fca7b08", "filename": "src/test/ui/const-generics/issues/issue-70180-1-stalled_on.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70180-1-stalled_on.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70180-1-stalled_on.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70180-1-stalled_on.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-70180-1-stalled_on.rs"}, {"sha": "21cefc09c253a8b27ede78c0d55d42e5690b4d47", "filename": "src/test/ui/const-generics/issues/issue-70180-2-stalled_on.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70180-2-stalled_on.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70180-2-stalled_on.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70180-2-stalled_on.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-70180-2-stalled_on.rs"}, {"sha": "78dee1717f1fade104a9b6e0a931b8b7bb449e16", "filename": "src/test/ui/const-generics/issues/issue-71202.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71202.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71202.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71202.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-71202.rs"}, {"sha": "6bfdba5711ef652a62af4e79c680d8ff36dee1d5", "filename": "src/test/ui/const-generics/issues/issue-71986.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71986.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71986.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71986.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-71986.rs"}, {"sha": "2a3a5ab2a3bb08bcc1ef117a6739d7c9df35f9e1", "filename": "src/test/ui/const-generics/issues/issue-73899.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73899.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73899.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73899.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-73899.rs"}, {"sha": "dc3c33736dabfc81b90fa07e856ea461dad89fdf", "filename": "src/test/ui/const-generics/issues/issue-74906.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74906.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-74906.rs"}, {"sha": "c311de05a1cff1c4e6bcfea32053ad516217c6b7", "filename": "src/test/ui/const-generics/issues/issue-75763.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75763.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-75763.rs"}, {"sha": "8f02bfb937a5a0708c012c161396493187458b18", "filename": "src/test/ui/const-generics/issues/issue-79518-default_trait_method_normalization.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-79518-default_trait_method_normalization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-79518-default_trait_method_normalization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-79518-default_trait_method_normalization.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-79518-default_trait_method_normalization.rs"}, {"sha": "c90774e944f1f48d690099893a5025992b15054c", "filename": "src/test/ui/const-generics/issues/issue-79518-default_trait_method_normalization.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-79518-default_trait_method_normalization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-79518-default_trait_method_normalization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-79518-default_trait_method_normalization.stderr?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-79518-default_trait_method_normalization.stderr"}, {"sha": "a34d74b29e9f014164f93ce212828af5574e0e5c", "filename": "src/test/ui/const-generics/issues/issue-80561-incorrect-param-env.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-80561-incorrect-param-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-80561-incorrect-param-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-80561-incorrect-param-env.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-80561-incorrect-param-env.rs"}, {"sha": "04650403c6bafe70b6b1c7c8be14ff44555d36c7", "filename": "src/test/ui/const-generics/issues/issue-86820.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-86820.rs"}, {"sha": "f4396f2f2b0a27599d09e23e60b012529c285b77", "filename": "src/test/ui/const-generics/issues/issue-86820.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "previous_filename": "src/test/ui/const-generics/issue-86820.stderr"}, {"sha": "5dfda943bf69c3f0cf2cf177f7027918155e1af5", "filename": "src/test/ui/const-generics/issues/issue-87076.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87076.rs?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -0,0 +1,20 @@\n+// build-pass\n+\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+#[derive(PartialEq, Eq)]\n+pub struct UnitDims {\n+    pub time: u8,\n+    pub length: u8,\n+}\n+\n+pub struct UnitValue<const DIMS: UnitDims>;\n+\n+impl<const DIMS: UnitDims> UnitValue<DIMS> {\n+    fn crash() {}\n+}\n+\n+fn main() {\n+    UnitValue::<{ UnitDims { time: 1, length: 2 } }>::crash();\n+}"}, {"sha": "c734051ccf320b086567185414793a707c50a379", "filename": "src/tools/clippy/tests/ui/future_not_send.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffuture_not_send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b03007cf40f2331892d5b0f65d2917ac3603d5/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffuture_not_send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffuture_not_send.stderr?ref=67b03007cf40f2331892d5b0f65d2917ac3603d5", "patch": "@@ -55,11 +55,11 @@ note: captured value is not `Send`\n LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |                          ^^ has type `std::rc::Rc<[u8]>` which is not `Send`\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\n-note: captured value is not `Send`\n+note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n   --> $DIR/future_not_send.rs:20:40\n    |\n LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n-   |                                        ^^^^ has type `&std::cell::Cell<usize>` which is not `Send`\n+   |                                        ^^^^ has type `&std::cell::Cell<usize>` which is not `Send`, because `std::cell::Cell<usize>` is not `Sync`\n    = note: `std::cell::Cell<usize>` doesn't implement `std::marker::Sync`\n \n error: future cannot be sent between threads safely"}]}