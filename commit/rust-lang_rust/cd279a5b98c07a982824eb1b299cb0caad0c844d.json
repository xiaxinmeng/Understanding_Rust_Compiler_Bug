{"sha": "cd279a5b98c07a982824eb1b299cb0caad0c844d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMjc5YTViOThjMDdhOTgyODI0ZWIxYjI5OWNiMGNhYWQwYzg0NGQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-11-05T16:09:39Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-11-06T21:41:18Z"}, "message": "run unsafety checking before dead block collection\n\nFixes #45087.", "tree": {"sha": "ca20a41d99d84eb049d9df88ebc123d013702e09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca20a41d99d84eb049d9df88ebc123d013702e09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd279a5b98c07a982824eb1b299cb0caad0c844d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd279a5b98c07a982824eb1b299cb0caad0c844d", "html_url": "https://github.com/rust-lang/rust/commit/cd279a5b98c07a982824eb1b299cb0caad0c844d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd279a5b98c07a982824eb1b299cb0caad0c844d/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6b1a81750e6eb6cc79a62ea4592686bce750638", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b1a81750e6eb6cc79a62ea4592686bce750638", "html_url": "https://github.com/rust-lang/rust/commit/a6b1a81750e6eb6cc79a62ea4592686bce750638"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "8e48513baa049fea481201f38af3c993511c98a3", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd279a5b98c07a982824eb1b299cb0caad0c844d/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd279a5b98c07a982824eb1b299cb0caad0c844d/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=cd279a5b98c07a982824eb1b299cb0caad0c844d", "patch": "@@ -473,6 +473,7 @@ define_dep_nodes!( <'tcx>\n     // Represents the MIR for a fn; also used as the task node for\n     // things read/modify that MIR.\n     [] MirConstQualif(DefId),\n+    [] MirBuilt(DefId),\n     [] MirConst(DefId),\n     [] MirValidated(DefId),\n     [] MirOptimized(DefId),\n@@ -812,4 +813,3 @@ impl WorkProductId {\n impl_stable_hash_for!(struct ::dep_graph::WorkProductId {\n     hash\n });\n-"}, {"sha": "8a9c38fde3270edd51145b3c6bcbc73abfc460c3", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd279a5b98c07a982824eb1b299cb0caad0c844d/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd279a5b98c07a982824eb1b299cb0caad0c844d/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=cd279a5b98c07a982824eb1b299cb0caad0c844d", "patch": "@@ -151,6 +151,10 @@ define_maps! { <'tcx>\n     /// the value isn't known except to the pass itself.\n     [] fn mir_const_qualif: MirConstQualif(DefId) -> (u8, Rc<IdxSetBuf<mir::Local>>),\n \n+    /// Fetch the MIR for a given def-id right after it's built - this includes\n+    /// unreachable code.\n+    [] fn mir_built: MirBuilt(DefId) -> &'tcx Steal<mir::Mir<'tcx>>,\n+\n     /// Fetch the MIR for a given def-id up till the point where it is\n     /// ready for const evaluation.\n     ///"}, {"sha": "fc5f9b88ef374749749433ce4edae88010e2e604", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd279a5b98c07a982824eb1b299cb0caad0c844d/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd279a5b98c07a982824eb1b299cb0caad0c844d/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=cd279a5b98c07a982824eb1b299cb0caad0c844d", "patch": "@@ -712,6 +712,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n             force!(crate_inherent_impls_overlap_check, LOCAL_CRATE)\n         },\n         DepKind::PrivacyAccessLevels => { force!(privacy_access_levels, LOCAL_CRATE); }\n+        DepKind::MirBuilt => { force!(mir_built, def_id!()); }\n         DepKind::MirConstQualif => { force!(mir_const_qualif, def_id!()); }\n         DepKind::MirConst => { force!(mir_const, def_id!()); }\n         DepKind::MirValidated => { force!(mir_validated, def_id!()); }\n@@ -852,4 +853,3 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n \n     true\n }\n-"}, {"sha": "30a60cc759066173644c5d991b7853d126b69fca", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd279a5b98c07a982824eb1b299cb0caad0c844d/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd279a5b98c07a982824eb1b299cb0caad0c844d/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=cd279a5b98c07a982824eb1b299cb0caad0c844d", "patch": "@@ -344,8 +344,8 @@ fn unsafety_violations<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) ->\n     debug!(\"unsafety_violations({:?})\", def_id);\n \n     // NB: this borrow is valid because all the consumers of\n-    // `mir_const` force this.\n-    let mir = &tcx.mir_const(def_id).borrow();\n+    // `mir_built` force this.\n+    let mir = &tcx.mir_built(def_id).borrow();\n \n     let visibility_scope_info = match mir.visibility_scope_info {\n         ClearOnDecode::Set(ref data) => data,"}, {"sha": "ad17cc5e58f6489d7b998b58d4cb9760e5012419", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd279a5b98c07a982824eb1b299cb0caad0c844d/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd279a5b98c07a982824eb1b299cb0caad0c844d/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=cd279a5b98c07a982824eb1b299cb0caad0c844d", "patch": "@@ -50,6 +50,7 @@ pub(crate) fn provide(providers: &mut Providers) {\n     self::check_unsafety::provide(providers);\n     *providers = Providers {\n         mir_keys,\n+        mir_built,\n         mir_const,\n         mir_validated,\n         optimized_mir,\n@@ -103,9 +104,17 @@ fn mir_keys<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, krate: CrateNum)\n     Rc::new(set)\n }\n \n+fn mir_built<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Mir<'tcx>> {\n+    let mir = build::mir_build(tcx, def_id);\n+    tcx.alloc_steal_mir(mir)\n+}\n+\n fn mir_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Mir<'tcx>> {\n-    let mut mir = build::mir_build(tcx, def_id);\n+    // Unsafety check uses the raw mir, so make sure it is run\n+    let _ = tcx.unsafety_violations(def_id);\n+\n     let source = MirSource::from_local_def_id(tcx, def_id);\n+    let mut mir = tcx.mir_built(def_id).steal();\n     transform::run_suite(tcx, source, MIR_CONST, &mut mir);\n     tcx.alloc_steal_mir(mir)\n }\n@@ -117,7 +126,6 @@ fn mir_validated<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n         // this point, before we steal the mir-const result.\n         let _ = tcx.mir_const_qualif(def_id);\n     }\n-    let _ = tcx.unsafety_violations(def_id);\n \n     let mut mir = tcx.mir_const(def_id).steal();\n     transform::run_suite(tcx, source, MIR_VALIDATED, &mut mir);"}, {"sha": "eeb66fa0e2c3b01de118b62f85fa9b94fd8e62e4", "filename": "src/test/compile-fail/issue-45087-unreachable-unsafe.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd279a5b98c07a982824eb1b299cb0caad0c844d/src%2Ftest%2Fcompile-fail%2Fissue-45087-unreachable-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd279a5b98c07a982824eb1b299cb0caad0c844d/src%2Ftest%2Fcompile-fail%2Fissue-45087-unreachable-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-45087-unreachable-unsafe.rs?ref=cd279a5b98c07a982824eb1b299cb0caad0c844d", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    return;\n+    *(1 as *mut u32) = 42;\n+    //~^ ERROR dereference of raw pointer requires unsafe\n+}"}]}