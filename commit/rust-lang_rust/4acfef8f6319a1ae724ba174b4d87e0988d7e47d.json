{"sha": "4acfef8f6319a1ae724ba174b4d87e0988d7e47d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhY2ZlZjhmNjMxOWExYWU3MjRiYTE3NGI0ZDg3ZTA5ODhkN2U0N2Q=", "commit": {"author": {"name": "Hunter Praska", "email": "hunter@wiggin-labs.com", "date": "2017-08-13T00:43:43Z"}, "committer": {"name": "Hunter Praska", "email": "hunter@wiggin-labs.com", "date": "2017-08-13T00:43:43Z"}, "message": "Implement CompilerDesugaringKind enum", "tree": {"sha": "6c6d0d74db5258b60b78474261c38a4afa03c4e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c6d0d74db5258b60b78474261c38a4afa03c4e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4acfef8f6319a1ae724ba174b4d87e0988d7e47d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niH4EABMJAAYFAlmPoPIACgkQPJ616gy8RBfmEAGAjl9gnZ8wj5YMy240/IACz3MC\njBGO01q8lxc2OdfoRGs93rrwee6CMUA+vP7uLC8QAYCkvFH+IotPwfGDA+fsBMfF\nxZdlgwz0Hjv57lSDIYbdC1oykfcJngpuNl1gpR94h4I=\n=SaK6\n-----END PGP SIGNATURE-----", "payload": "tree 6c6d0d74db5258b60b78474261c38a4afa03c4e7\nparent 045ca8b43b86f6a1671a59cc43cf535eebcb074e\nauthor Hunter Praska <hunter@wiggin-labs.com> 1502585023 -0500\ncommitter Hunter Praska <hunter@wiggin-labs.com> 1502585023 -0500\n\nImplement CompilerDesugaringKind enum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4acfef8f6319a1ae724ba174b4d87e0988d7e47d", "html_url": "https://github.com/rust-lang/rust/commit/4acfef8f6319a1ae724ba174b4d87e0988d7e47d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4acfef8f6319a1ae724ba174b4d87e0988d7e47d/comments", "author": {"login": "huntiep", "id": 28681177, "node_id": "MDQ6VXNlcjI4NjgxMTc3", "avatar_url": "https://avatars.githubusercontent.com/u/28681177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huntiep", "html_url": "https://github.com/huntiep", "followers_url": "https://api.github.com/users/huntiep/followers", "following_url": "https://api.github.com/users/huntiep/following{/other_user}", "gists_url": "https://api.github.com/users/huntiep/gists{/gist_id}", "starred_url": "https://api.github.com/users/huntiep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huntiep/subscriptions", "organizations_url": "https://api.github.com/users/huntiep/orgs", "repos_url": "https://api.github.com/users/huntiep/repos", "events_url": "https://api.github.com/users/huntiep/events{/privacy}", "received_events_url": "https://api.github.com/users/huntiep/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huntiep", "id": 28681177, "node_id": "MDQ6VXNlcjI4NjgxMTc3", "avatar_url": "https://avatars.githubusercontent.com/u/28681177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huntiep", "html_url": "https://github.com/huntiep", "followers_url": "https://api.github.com/users/huntiep/followers", "following_url": "https://api.github.com/users/huntiep/following{/other_user}", "gists_url": "https://api.github.com/users/huntiep/gists{/gist_id}", "starred_url": "https://api.github.com/users/huntiep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huntiep/subscriptions", "organizations_url": "https://api.github.com/users/huntiep/orgs", "repos_url": "https://api.github.com/users/huntiep/repos", "events_url": "https://api.github.com/users/huntiep/events{/privacy}", "received_events_url": "https://api.github.com/users/huntiep/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "045ca8b43b86f6a1671a59cc43cf535eebcb074e", "url": "https://api.github.com/repos/rust-lang/rust/commits/045ca8b43b86f6a1671a59cc43cf535eebcb074e", "html_url": "https://github.com/rust-lang/rust/commit/045ca8b43b86f6a1671a59cc43cf535eebcb074e"}], "stats": {"total": 54, "additions": 49, "deletions": 5}, "files": [{"sha": "d8ea6f123ab54b6a37d615d5379d246f709a1931", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4acfef8f6319a1ae724ba174b4d87e0988d7e47d/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4acfef8f6319a1ae724ba174b4d87e0988d7e47d/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=4acfef8f6319a1ae724ba174b4d87e0988d7e47d", "patch": "@@ -397,11 +397,12 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn allow_internal_unstable(&self, reason: &'static str, mut span: Span) -> Span {\n+        let reason = codemap::CompilerDesugaringKind::from(reason);\n         let mark = Mark::fresh(Mark::root());\n         mark.set_expn_info(codemap::ExpnInfo {\n             call_site: span,\n             callee: codemap::NameAndSpan {\n-                format: codemap::CompilerDesugaring(Symbol::intern(reason)),\n+                format: codemap::CompilerDesugaring(reason),\n                 span: Some(span),\n                 allow_internal_unstable: true,\n                 allow_internal_unsafe: false,"}, {"sha": "6cef7775c34852a5a2c3e469412bd07964c55e07", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4acfef8f6319a1ae724ba174b4d87e0988d7e47d/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4acfef8f6319a1ae724ba174b4d87e0988d7e47d/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=4acfef8f6319a1ae724ba174b4d87e0988d7e47d", "patch": "@@ -323,8 +323,8 @@ impl NameAndSpan {\n     pub fn name(&self) -> Symbol {\n         match self.format {\n             ExpnFormat::MacroAttribute(s) |\n-            ExpnFormat::MacroBang(s) |\n-            ExpnFormat::CompilerDesugaring(s) => s,\n+            ExpnFormat::MacroBang(s) => s,\n+            ExpnFormat::CompilerDesugaring(ref kind) => kind.as_symbol(),\n         }\n     }\n }\n@@ -337,7 +337,39 @@ pub enum ExpnFormat {\n     /// e.g. `format!()`\n     MacroBang(Symbol),\n     /// Desugaring done by the compiler during HIR lowering.\n-    CompilerDesugaring(Symbol)\n+    CompilerDesugaring(CompilerDesugaringKind)\n+}\n+\n+/// The kind of compiler desugaring.\n+#[derive(Clone, Hash, Debug, PartialEq, Eq)]\n+pub enum CompilerDesugaringKind {\n+    BackArrow,\n+    DotFill,\n+    QuestionMark,\n+}\n+\n+impl CompilerDesugaringKind {\n+    pub fn as_symbol(&self) -> Symbol {\n+        use CompilerDesugaringKind::*;\n+        let s = match *self {\n+            BackArrow => \"<-\",\n+            DotFill => \"...\",\n+            QuestionMark => \"?\",\n+        };\n+        Symbol::intern(s)\n+    }\n+}\n+\n+impl<'a> From<&'a str> for CompilerDesugaringKind {\n+    fn from(s: &'a str) -> Self {\n+        use CompilerDesugaringKind::*;\n+        match s {\n+            \"<-\" => BackArrow,\n+            \"...\" => DotFill,\n+            \"?\" => QuestionMark,\n+            _ => panic!(\"Invalid compiler desugaring\"),\n+        }\n+    }\n }\n \n impl Encodable for SyntaxContext {"}, {"sha": "f0e53c6408ca75c9ae6160ec4acb18a1d619ae65", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4acfef8f6319a1ae724ba174b4d87e0988d7e47d/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4acfef8f6319a1ae724ba174b4d87e0988d7e47d/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=4acfef8f6319a1ae724ba174b4d87e0988d7e47d", "patch": "@@ -47,7 +47,7 @@ extern crate serialize;\n extern crate serialize as rustc_serialize; // used by deriving\n \n pub mod hygiene;\n-pub use hygiene::{SyntaxContext, ExpnInfo, ExpnFormat, NameAndSpan};\n+pub use hygiene::{SyntaxContext, ExpnInfo, ExpnFormat, NameAndSpan, CompilerDesugaringKind};\n \n pub mod symbol;\n \n@@ -153,6 +153,17 @@ impl Span {\n         }\n     }\n \n+    /// Check if this span arises from a compiler desugaring of kind `kind`.\n+    pub fn is_compiler_desugaring(&self, kind: CompilerDesugaringKind) -> bool {\n+        match self.ctxt.outer().expn_info() {\n+            Some(info) => match info.callee.format {\n+                ExpnFormat::CompilerDesugaring(k) => k == kind,\n+                _ => false,\n+            },\n+            None => false,\n+        }\n+    }\n+\n     /// Check if a span is \"internal\" to a macro in which `unsafe`\n     /// can be used without triggering the `unsafe_code` lint\n     //  (that is, a macro marked with `#[allow_internal_unsafe]`)."}]}