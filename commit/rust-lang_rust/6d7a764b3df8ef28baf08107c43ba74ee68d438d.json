{"sha": "6d7a764b3df8ef28baf08107c43ba74ee68d438d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkN2E3NjRiM2RmOGVmMjhiYWYwODEwN2M0M2JhNzRlZTY4ZDQzOGQ=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seiichi.uchida@dena.com", "date": "2018-07-24T15:34:46Z"}, "committer": {"name": "Seiichi Uchida", "email": "seiichi.uchida@dena.com", "date": "2018-07-24T15:34:46Z"}, "message": "Remove span from rewrite_generics's parameter\n\nWe can just use the span from ast::Generics.", "tree": {"sha": "bb7631ac7c5cf9d5d496ef8eecd48a5734c58564", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb7631ac7c5cf9d5d496ef8eecd48a5734c58564"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d7a764b3df8ef28baf08107c43ba74ee68d438d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d7a764b3df8ef28baf08107c43ba74ee68d438d", "html_url": "https://github.com/rust-lang/rust/commit/6d7a764b3df8ef28baf08107c43ba74ee68d438d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d7a764b3df8ef28baf08107c43ba74ee68d438d/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc307ff582002f36a4400fa4cb0c2e0458e936e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc307ff582002f36a4400fa4cb0c2e0458e936e3", "html_url": "https://github.com/rust-lang/rust/commit/fc307ff582002f36a4400fa4cb0c2e0458e936e3"}], "stats": {"total": 30, "additions": 8, "deletions": 22}, "files": [{"sha": "6b81dbaf7966be156f2c825d39deb559466f822a", "filename": "src/items.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6d7a764b3df8ef28baf08107c43ba74ee68d438d/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d7a764b3df8ef28baf08107c43ba74ee68d438d/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=6d7a764b3df8ef28baf08107c43ba74ee68d438d", "patch": "@@ -801,17 +801,12 @@ fn format_impl_ref_and_type(\n         result.push_str(format_defaultness(defaultness));\n         result.push_str(format_unsafety(unsafety));\n \n-        let lo = context.snippet_provider.span_after(item.span, \"impl\");\n-        let hi = match *trait_ref {\n-            Some(ref tr) => tr.path.span.lo(),\n-            None => self_ty.span.lo(),\n-        };\n         let shape = generics_shape_from_config(\n             context.config,\n             Shape::indented(offset + last_line_width(&result), context.config),\n             0,\n         )?;\n-        let generics_str = rewrite_generics(context, \"impl\", generics, shape, mk_sp(lo, hi))?;\n+        let generics_str = rewrite_generics(context, \"impl\", generics, shape)?;\n         result.push_str(&generics_str);\n \n         let polarity_str = if polarity == ast::ImplPolarity::Negative {\n@@ -986,13 +981,8 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n         let body_lo = context.snippet_provider.span_after(item.span, \"{\");\n \n         let shape = Shape::indented(offset, context.config).offset_left(result.len())?;\n-        let generics_str = rewrite_generics(\n-            context,\n-            rewrite_ident(context, item.ident),\n-            generics,\n-            shape,\n-            mk_sp(item.span.lo(), body_lo),\n-        )?;\n+        let generics_str =\n+            rewrite_generics(context, rewrite_ident(context, item.ident), generics, shape)?;\n         result.push_str(&generics_str);\n \n         // FIXME(#2055): rustfmt fails to format when there are comments between trait bounds.\n@@ -1138,7 +1128,7 @@ pub fn format_trait_alias(\n     let alias = rewrite_ident(context, ident);\n     // 6 = \"trait \", 2 = \" =\"\n     let g_shape = shape.offset_left(6)?.sub_width(2)?;\n-    let generics_str = rewrite_generics(context, &alias, generics, g_shape, generics.span)?;\n+    let generics_str = rewrite_generics(context, &alias, generics, g_shape)?;\n     let lhs = format!(\"trait {} =\", generics_str);\n     // 1 = \";\"\n     rewrite_assign_rhs(context, lhs, generic_bounds, shape.sub_width(1)?).map(|s| s + \";\")\n@@ -1340,8 +1330,7 @@ fn format_tuple_struct(\n         Some(generics) => {\n             let budget = context.budget(last_line_width(&header_str));\n             let shape = Shape::legacy(budget, offset);\n-            let g_span = mk_sp(span.lo(), body_lo);\n-            let generics_str = rewrite_generics(context, \"\", generics, shape, g_span)?;\n+            let generics_str = rewrite_generics(context, \"\", generics, shape)?;\n             result.push_str(&generics_str);\n \n             let where_budget = context.budget(last_line_width(&result));\n@@ -1418,7 +1407,7 @@ fn rewrite_type_prefix(\n         let g_shape = Shape::indented(indent, context.config)\n             .offset_left(result.len())?\n             .sub_width(2)?;\n-        let generics_str = rewrite_generics(context, ident_str, generics, g_shape, generics.span)?;\n+        let generics_str = rewrite_generics(context, ident_str, generics, g_shape)?;\n         result.push_str(&generics_str);\n     }\n \n@@ -1942,13 +1931,11 @@ fn rewrite_fn_base(\n         offset: used_width,\n     };\n     let fd = fn_sig.decl;\n-    let g_span = mk_sp(span.lo(), fd.output.span().lo());\n     let generics_str = rewrite_generics(\n         context,\n         rewrite_ident(context, ident),\n         fn_sig.generics,\n         shape,\n-        g_span,\n     )?;\n     result.push_str(&generics_str);\n \n@@ -2466,7 +2453,6 @@ fn rewrite_generics(\n     ident: &str,\n     generics: &ast::Generics,\n     shape: Shape,\n-    span: Span,\n ) -> Option<String> {\n     // FIXME: convert bounds to where clauses where they get too big or if\n     // there is a where clause at all.\n@@ -2476,7 +2462,7 @@ fn rewrite_generics(\n     }\n \n     let params = &generics.params.iter().map(|e| &*e).collect::<Vec<_>>();\n-    overflow::rewrite_with_angle_brackets(context, ident, params, shape, span)\n+    overflow::rewrite_with_angle_brackets(context, ident, params, shape, generics.span)\n }\n \n pub fn generics_shape_from_config(config: &Config, shape: Shape, offset: usize) -> Option<Shape> {\n@@ -2764,7 +2750,7 @@ fn format_generics(\n     used_width: usize,\n ) -> Option<String> {\n     let shape = Shape::legacy(context.budget(used_width + offset.width()), offset);\n-    let mut result = rewrite_generics(context, \"\", generics, shape, span)?;\n+    let mut result = rewrite_generics(context, \"\", generics, shape)?;\n \n     let same_line_brace = if !generics.where_clause.predicates.is_empty() || result.contains('\\n') {\n         let budget = context.budget(last_line_used_width(&result, offset.width()));"}]}