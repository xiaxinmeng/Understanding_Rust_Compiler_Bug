{"sha": "28abc0a6aad5e282dd69193b3fec64fd2fef1348", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YWJjMGE2YWFkNWUyODJkZDY5MTkzYjNmZWM2NGZkMmZlZjEzNDg=", "commit": {"author": {"name": "Scott A Carr", "email": "s.carr1024@gmail.com", "date": "2016-08-05T22:59:51Z"}, "committer": {"name": "Scott A Carr", "email": "s.carr1024@gmail.com", "date": "2016-08-05T22:59:51Z"}, "message": "refactor lvalue_ty to be method of lvalue", "tree": {"sha": "2c036ee14e3f014ffb517d69c31bfdeb266772e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c036ee14e3f014ffb517d69c31bfdeb266772e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28abc0a6aad5e282dd69193b3fec64fd2fef1348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28abc0a6aad5e282dd69193b3fec64fd2fef1348", "html_url": "https://github.com/rust-lang/rust/commit/28abc0a6aad5e282dd69193b3fec64fd2fef1348", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28abc0a6aad5e282dd69193b3fec64fd2fef1348/comments", "author": {"login": "scottcarr", "id": 472477, "node_id": "MDQ6VXNlcjQ3MjQ3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/472477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottcarr", "html_url": "https://github.com/scottcarr", "followers_url": "https://api.github.com/users/scottcarr/followers", "following_url": "https://api.github.com/users/scottcarr/following{/other_user}", "gists_url": "https://api.github.com/users/scottcarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottcarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottcarr/subscriptions", "organizations_url": "https://api.github.com/users/scottcarr/orgs", "repos_url": "https://api.github.com/users/scottcarr/repos", "events_url": "https://api.github.com/users/scottcarr/events{/privacy}", "received_events_url": "https://api.github.com/users/scottcarr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottcarr", "id": 472477, "node_id": "MDQ6VXNlcjQ3MjQ3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/472477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottcarr", "html_url": "https://github.com/scottcarr", "followers_url": "https://api.github.com/users/scottcarr/followers", "following_url": "https://api.github.com/users/scottcarr/following{/other_user}", "gists_url": "https://api.github.com/users/scottcarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottcarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottcarr/subscriptions", "organizations_url": "https://api.github.com/users/scottcarr/orgs", "repos_url": "https://api.github.com/users/scottcarr/repos", "events_url": "https://api.github.com/users/scottcarr/events{/privacy}", "received_events_url": "https://api.github.com/users/scottcarr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c02363852e6ce41cf2da1b43a32cb7780a9b067", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c02363852e6ce41cf2da1b43a32cb7780a9b067", "html_url": "https://github.com/rust-lang/rust/commit/4c02363852e6ce41cf2da1b43a32cb7780a9b067"}], "stats": {"total": 112, "additions": 57, "deletions": 55}, "files": [{"sha": "36ae4237b1918a898bc4b2a1558235d892ba5796", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=28abc0a6aad5e282dd69193b3fec64fd2fef1348", "patch": "@@ -32,6 +32,8 @@ use syntax::ast::{self, Name};\n use syntax_pos::Span;\n \n use super::cache::Cache;\n+use super::super::ty::TyCtxt;\n+use super::tcx::LvalueTy;\n \n macro_rules! newtype_index {\n     ($name:ident, $debug_name:expr) => (\n@@ -809,8 +811,29 @@ impl<'tcx> Lvalue<'tcx> {\n             elem: elem,\n         }))\n     }\n+\n+    pub fn ty<'a, 'gcx>(&self, mir: &Mir<'tcx>, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> LvalueTy<'tcx>\n+    {\n+        match self {\n+            &Lvalue::Var(index) =>\n+                LvalueTy::Ty { ty: mir.var_decls[index].ty },\n+            &Lvalue::Temp(index) =>\n+                LvalueTy::Ty { ty: mir.temp_decls[index].ty },\n+            &Lvalue::Arg(index) =>\n+                LvalueTy::Ty { ty: mir.arg_decls[index].ty },\n+            &Lvalue::Static(def_id) =>\n+                LvalueTy::Ty { ty: tcx.lookup_item_type(def_id).ty },\n+            &Lvalue::ReturnPointer =>\n+                LvalueTy::Ty { ty: mir.return_ty.unwrap() },\n+            &Lvalue::Projection(ref proj) =>\n+                proj.base.ty(mir, tcx).projection_ty(tcx, &proj.elem),\n+        }\n+    }\n }\n \n+\n+\n+\n impl<'tcx> Debug for Lvalue<'tcx> {\n     fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n         use self::Lvalue::*;"}, {"sha": "6c19db9a0f79e198f893d211ad25acdd3e9529da", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=28abc0a6aad5e282dd69193b3fec64fd2fef1348", "patch": "@@ -119,7 +119,7 @@ impl<'a, 'gcx, 'tcx> Mir<'tcx> {\n                       -> Ty<'tcx>\n     {\n         match *operand {\n-            Operand::Consume(ref l) => self.lvalue_ty(tcx, l).to_ty(tcx),\n+            Operand::Consume(ref l) => l.ty(self, tcx).to_ty(tcx),\n             Operand::Constant(ref c) => c.ty,\n         }\n     }\n@@ -148,26 +148,6 @@ impl<'a, 'gcx, 'tcx> Mir<'tcx> {\n         }\n     }\n \n-    pub fn lvalue_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                     lvalue: &Lvalue<'tcx>)\n-                     -> LvalueTy<'tcx>\n-    {\n-        match *lvalue {\n-            Lvalue::Var(index) =>\n-                LvalueTy::Ty { ty: self.var_decls[index].ty },\n-            Lvalue::Temp(index) =>\n-                LvalueTy::Ty { ty: self.temp_decls[index].ty },\n-            Lvalue::Arg(index) =>\n-                LvalueTy::Ty { ty: self.arg_decls[index].ty },\n-            Lvalue::Static(def_id) =>\n-                LvalueTy::Ty { ty: tcx.lookup_item_type(def_id).ty },\n-            Lvalue::ReturnPointer =>\n-                LvalueTy::Ty { ty: self.return_ty.unwrap() },\n-            Lvalue::Projection(ref proj) =>\n-                self.lvalue_ty(tcx, &proj.base).projection_ty(tcx, &proj.elem)\n-        }\n-    }\n-\n     pub fn rvalue_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                      rvalue: &Rvalue<'tcx>)\n                      -> Option<Ty<'tcx>>\n@@ -181,7 +161,7 @@ impl<'a, 'gcx, 'tcx> Mir<'tcx> {\n                 Some(tcx.mk_array(op_ty, count as usize))\n             }\n             Rvalue::Ref(reg, bk, ref lv) => {\n-                let lv_ty = self.lvalue_ty(tcx, lv).to_ty(tcx);\n+                let lv_ty = lv.ty(self, tcx).to_ty(tcx);\n                 Some(tcx.mk_ref(\n                     tcx.mk_region(reg),\n                     ty::TypeAndMut {"}, {"sha": "f6e9484eda1a4ca54d363454e2531319a8f83e7c", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=28abc0a6aad5e282dd69193b3fec64fd2fef1348", "patch": "@@ -185,7 +185,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n     {\n         match self.move_data().move_paths[path].content {\n             MovePathContent::Lvalue(ref lvalue) => {\n-                let ty = self.mir.lvalue_ty(self.tcx, lvalue).to_ty(self.tcx);\n+                let ty = lvalue.ty(self.mir, self.tcx).to_ty(self.tcx);\n                 debug!(\"path_needs_drop({:?}, {:?} : {:?})\", path, lvalue, ty);\n \n                 self.tcx.type_needs_drop_given_env(ty, self.param_env())\n@@ -555,7 +555,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n \n         let mut fields = fields;\n         fields.retain(|&(ref lvalue, _)| {\n-            let ty = self.mir.lvalue_ty(self.tcx, lvalue).to_ty(self.tcx);\n+            let ty = lvalue.ty(self.mir, self.tcx).to_ty(self.tcx);\n             self.tcx.type_needs_drop_given_env(ty, self.param_env())\n         });\n \n@@ -706,7 +706,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n     /// This creates a \"drop ladder\" that drops the needed fields of the\n     /// ADT, both in the success case or if one of the destructors fail.\n     fn open_drop<'a>(&mut self, c: &DropCtxt<'a, 'tcx>) -> BasicBlock {\n-        let ty = self.mir.lvalue_ty(self.tcx, c.lvalue).to_ty(self.tcx);\n+        let ty = c.lvalue.ty(self.mir, self.tcx).to_ty(self.tcx);\n         match ty.sty {\n             ty::TyStruct(def, substs) | ty::TyEnum(def, substs) => {\n                 self.open_drop_for_adt(c, def, substs)\n@@ -892,7 +892,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         // dataflow can create unneeded children in some cases\n         // - be sure to ignore them.\n \n-        let ty = self.mir.lvalue_ty(self.tcx, c.lvalue).to_ty(self.tcx);\n+        let ty = c.lvalue.ty(self.mir, self.tcx).to_ty(self.tcx);\n \n         match ty.sty {\n             ty::TyStruct(def, _) | ty::TyEnum(def, _) => {"}, {"sha": "7c912e8bac6bbe9ede63801c133e23c07c19f91f", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=28abc0a6aad5e282dd69193b3fec64fd2fef1348", "patch": "@@ -256,7 +256,7 @@ fn move_path_children_matching<'tcx, F>(move_paths: &MovePathData<'tcx>,\n fn lvalue_contents_drop_state_cannot_differ<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                       mir: &Mir<'tcx>,\n                                                       lv: &repr::Lvalue<'tcx>) -> bool {\n-    let ty = mir.lvalue_ty(tcx, lv).to_ty(tcx);\n+    let ty = lv.ty(mir, tcx).to_ty(tcx);\n     match ty.sty {\n         ty::TyArray(..) | ty::TySlice(..) | ty::TyRef(..) | ty::TyRawPtr(..) => {\n             debug!(\"lvalue_contents_drop_state_cannot_differ lv: {:?} ty: {:?} refd => false\",\n@@ -355,7 +355,7 @@ fn drop_flag_effects_for_location<'a, 'tcx, F>(\n \n         // don't move out of non-Copy things\n         if let MovePathContent::Lvalue(ref lvalue) = move_data.move_paths[path].content {\n-            let ty = mir.lvalue_ty(tcx, lvalue).to_ty(tcx);\n+            let ty = lvalue.ty(mir, tcx).to_ty(tcx);\n             if !ty.moves_by_default(tcx, param_env, DUMMY_SP) {\n                 continue;\n             }"}, {"sha": "f1e3f55ec8bb1a786579a6f4e0cf025c9990de09", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=28abc0a6aad5e282dd69193b3fec64fd2fef1348", "patch": "@@ -347,7 +347,7 @@ pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n                         continue;\n                     }\n                 }\n-                (statement.source_info.span, mir.lvalue_ty(tcx, dest).to_ty(tcx))\n+                (statement.source_info.span, dest.ty(mir, tcx).to_ty(tcx))\n             }\n             Candidate::ShuffleIndices(bb) => {\n                 let terminator = mir[bb].terminator();"}, {"sha": "5148cd6735f03250e5cce8e902d4190453e393ca", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=28abc0a6aad5e282dd69193b3fec64fd2fef1348", "patch": "@@ -485,8 +485,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                 this.add(Qualif::STATIC);\n                             }\n \n-                            let base_ty = this.mir.lvalue_ty(this.tcx, &proj.base)\n-                                              .to_ty(this.tcx);\n+                            let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n                             if let ty::TyRawPtr(_) = base_ty.sty {\n                                 this.add(Qualif::NOT_CONST);\n                                 if this.mode != Mode::Fn {\n@@ -505,8 +504,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                           \"cannot refer to the interior of another \\\n                                            static, use a constant instead\");\n                             }\n-                            let ty = this.mir.lvalue_ty(this.tcx, lvalue)\n-                                         .to_ty(this.tcx);\n+                            let ty = lvalue.ty(this.mir, this.tcx).to_ty(this.tcx);\n                             this.qualif.restrict(ty, this.tcx, &this.param_env);\n                         }\n \n@@ -591,7 +589,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     self.add(Qualif::STATIC_REF);\n                 }\n \n-                let ty = self.mir.lvalue_ty(self.tcx, lvalue).to_ty(self.tcx);\n+                let ty = lvalue.ty(self.mir, self.tcx).to_ty(self.tcx);\n                 if kind == BorrowKind::Mut {\n                     // In theory, any zero-sized value could be borrowed\n                     // mutably without consequences. However, only &mut []\n@@ -801,7 +799,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 } else {\n                     // Be conservative about the returned value of a const fn.\n                     let tcx = self.tcx;\n-                    let ty = self.mir.lvalue_ty(tcx, dest).to_ty(tcx);\n+                    let ty = dest.ty(self.mir, tcx).to_ty(tcx);\n                     self.qualif = Qualif::empty();\n                     self.add_type(ty);\n "}, {"sha": "7606c21ed7b752a9ec5ac21e2b34d1033eee5656", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=28abc0a6aad5e282dd69193b3fec64fd2fef1348", "patch": "@@ -355,7 +355,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         let tcx = self.tcx();\n         match stmt.kind {\n             StatementKind::Assign(ref lv, ref rv) => {\n-                let lv_ty = mir.lvalue_ty(tcx, lv).to_ty(tcx);\n+                let lv_ty = lv.ty(mir, tcx).to_ty(tcx);\n                 let rv_ty = mir.rvalue_ty(tcx, rv);\n                 if let Some(rv_ty) = rv_ty {\n                     if let Err(terr) = self.sub_types(self.last_span, rv_ty, lv_ty) {\n@@ -390,7 +390,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 ref value,\n                 ..\n             } => {\n-                let lv_ty = mir.lvalue_ty(tcx, location).to_ty(tcx);\n+                let lv_ty = location.ty(mir, tcx).to_ty(tcx);\n                 let rv_ty = mir.operand_ty(tcx, value);\n                 if let Err(terr) = self.sub_types(self.last_span, rv_ty, lv_ty) {\n                     span_mirbug!(self, term, \"bad DropAndReplace ({:?} = {:?}): {:?}\",\n@@ -408,7 +408,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 }\n             }\n             TerminatorKind::SwitchInt { ref discr, switch_ty, .. } => {\n-                let discr_ty = mir.lvalue_ty(tcx, discr).to_ty(tcx);\n+                let discr_ty = discr.ty(mir, tcx).to_ty(tcx);\n                 if let Err(terr) = self.sub_types(self.last_span, discr_ty, switch_ty) {\n                     span_mirbug!(self, term, \"bad SwitchInt ({:?} on {:?}): {:?}\",\n                                  switch_ty, discr_ty, terr);\n@@ -421,7 +421,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 // FIXME: check the values\n             }\n             TerminatorKind::Switch { ref discr, adt_def, ref targets } => {\n-                let discr_ty = mir.lvalue_ty(tcx, discr).to_ty(tcx);\n+                let discr_ty = discr.ty(mir, tcx).to_ty(tcx);\n                 match discr_ty.sty {\n                     ty::TyEnum(def, _)\n                         if def == adt_def && adt_def.variants.len() == targets.len()\n@@ -481,7 +481,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 span_mirbug!(self, term, \"call to diverging function {:?} with dest\", sig);\n             }\n             (&Some((ref dest, _)), ty::FnConverging(ty)) => {\n-                let dest_ty = mir.lvalue_ty(tcx, dest).to_ty(tcx);\n+                let dest_ty = dest.ty(mir, tcx).to_ty(tcx);\n                 if let Err(terr) = self.sub_types(self.last_span, ty, dest_ty) {\n                     span_mirbug!(self, term,\n                                  \"call dest mismatch ({:?} <- {:?}): {:?}\","}, {"sha": "6246e4a9d35627649cf5c59910054a4c3d8d3dce", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=28abc0a6aad5e282dd69193b3fec64fd2fef1348", "patch": "@@ -525,8 +525,8 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         debug!(\"visiting lvalue {:?}\", *lvalue);\n \n         if let mir_visit::LvalueContext::Drop = context {\n-            let ty = self.mir.lvalue_ty(self.scx.tcx(), lvalue)\n-                             .to_ty(self.scx.tcx());\n+            let ty = lvalue.ty(self.mir, self.scx.tcx())\n+                           .to_ty(self.scx.tcx());\n \n             let ty = monomorphize::apply_param_substs(self.scx.tcx(),\n                                                       self.param_substs,"}, {"sha": "d6dbefec0346752254731824e160fbe80a4e9db5", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=28abc0a6aad5e282dd69193b3fec64fd2fef1348", "patch": "@@ -143,7 +143,8 @@ impl<'mir, 'bcx, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'bcx, 'tcx> {\n         // Allow uses of projections of immediate pair fields.\n         if let mir::Lvalue::Projection(ref proj) = *lvalue {\n             if self.mir.local_index(&proj.base).is_some() {\n-                let ty = self.mir.lvalue_ty(self.bcx.tcx(), &proj.base);\n+                let ty = proj.base.ty(self.mir, self.bcx.tcx());\n+\n                 let ty = self.bcx.monomorphize(&ty.to_ty(self.bcx.tcx()));\n                 if common::type_is_imm_pair(self.bcx.ccx(), ty) {\n                     if let mir::ProjectionElem::Field(..) = proj.elem {\n@@ -170,7 +171,7 @@ impl<'mir, 'bcx, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'bcx, 'tcx> {\n                     self.mark_as_lvalue(index);\n                 }\n                 LvalueContext::Drop => {\n-                    let ty = self.mir.lvalue_ty(self.bcx.tcx(), lvalue);\n+                    let ty = lvalue.ty(self.mir, self.bcx.tcx());\n                     let ty = self.bcx.monomorphize(&ty.to_ty(self.bcx.tcx()));\n \n                     // Only need the lvalue if we're actually dropping it."}, {"sha": "3290bbf59c56a8253eed8f707e18b2b7fe9f5ec9", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=28abc0a6aad5e282dd69193b3fec64fd2fef1348", "patch": "@@ -230,7 +230,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n             }\n \n             mir::TerminatorKind::Drop { ref location, target, unwind } => {\n-                let ty = mir.lvalue_ty(bcx.tcx(), location).to_ty(bcx.tcx());\n+                let ty = location.ty(&mir, bcx.tcx()).to_ty(bcx.tcx());\n                 let ty = bcx.monomorphize(&ty);\n \n                 // Double check for necessity to drop\n@@ -828,7 +828,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n             return ReturnDest::Nothing;\n         }\n         let dest = if let Some(index) = self.mir.local_index(dest) {\n-            let ret_ty = self.lvalue_ty(dest);\n+            let ret_ty = self.monomorphized_lvalue_ty(dest);\n             match self.locals[index] {\n                 LocalRef::Lvalue(dest) => dest,\n                 LocalRef::Operand(None) => {"}, {"sha": "fa40dfd64d6ed746987cb720ea78bf8af80da7cf", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=28abc0a6aad5e282dd69193b3fec64fd2fef1348", "patch": "@@ -278,7 +278,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                 let span = statement.source_info.span;\n                 match statement.kind {\n                     mir::StatementKind::Assign(ref dest, ref rvalue) => {\n-                        let ty = self.mir.lvalue_ty(tcx, dest);\n+                        let ty = dest.ty(self.mir, tcx);\n                         let ty = self.monomorphize(&ty).to_ty(tcx);\n                         match self.const_rvalue(rvalue, ty, span) {\n                             Ok(value) => self.store(dest, value, span),\n@@ -386,7 +386,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                 ConstLvalue {\n                     base: Base::Static(consts::get_static(self.ccx, def_id).val),\n                     llextra: ptr::null_mut(),\n-                    ty: self.mir.lvalue_ty(tcx, lvalue).to_ty(tcx)\n+                    ty: lvalue.ty(self.mir, tcx).to_ty(tcx)\n                 }\n             }\n             mir::Lvalue::Projection(ref projection) => {"}, {"sha": "94db2e3c23cef29a965a16c4bb7feec768e9f3b7", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=28abc0a6aad5e282dd69193b3fec64fd2fef1348", "patch": "@@ -108,7 +108,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n             mir::Lvalue::Arg(_) |\n             mir::Lvalue::ReturnPointer => bug!(), // handled above\n             mir::Lvalue::Static(def_id) => {\n-                let const_ty = self.lvalue_ty(lvalue);\n+                let const_ty = self.monomorphized_lvalue_ty(lvalue);\n                 LvalueRef::new_sized(consts::get_static(ccx, def_id).val,\n                                      LvalueTy::from_ty(const_ty))\n             },\n@@ -200,7 +200,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                             ty::TyArray(..) => {\n                                 // must cast the lvalue pointer type to the new\n                                 // array type (*[%_; new_len]).\n-                                let base_ty = self.lvalue_ty(lvalue);\n+                                let base_ty = self.monomorphized_lvalue_ty(lvalue);\n                                 let llbasety = type_of::type_of(bcx.ccx(), base_ty).ptr_to();\n                                 let llbase = bcx.pointercast(llbase, llbasety);\n                                 (llbase, ptr::null_mut())\n@@ -240,7 +240,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n             match self.locals[index] {\n                 LocalRef::Lvalue(lvalue) => f(self, lvalue),\n                 LocalRef::Operand(None) => {\n-                    let lvalue_ty = self.lvalue_ty(lvalue);\n+                    let lvalue_ty = self.monomorphized_lvalue_ty(lvalue);\n                     let lvalue = LvalueRef::alloca(bcx,\n                                                    lvalue_ty,\n                                                    \"lvalue_temp\");\n@@ -252,7 +252,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 LocalRef::Operand(Some(_)) => {\n                     // See comments in LocalRef::new_operand as to why\n                     // we always have Some in a ZST LocalRef::Operand.\n-                    let ty = self.lvalue_ty(lvalue);\n+                    let ty = self.monomorphized_lvalue_ty(lvalue);\n                     if common::type_is_zero_size(bcx.ccx(), ty) {\n                         // Pass an undef pointer as no stores can actually occur.\n                         let llptr = C_undef(type_of(bcx.ccx(), ty).ptr_to());\n@@ -289,9 +289,9 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n         }\n     }\n \n-    pub fn lvalue_ty(&self, lvalue: &mir::Lvalue<'tcx>) -> Ty<'tcx> {\n+    pub fn monomorphized_lvalue_ty(&self, lvalue: &mir::Lvalue<'tcx>) -> Ty<'tcx> {\n         let tcx = self.fcx.ccx.tcx();\n-        let lvalue_ty = self.mir.lvalue_ty(tcx, lvalue);\n+        let lvalue_ty = lvalue.ty(&self.mir, tcx);\n         self.fcx.monomorphize(&lvalue_ty.to_ty(tcx))\n     }\n }"}, {"sha": "44d264c7e98f27cacd710ef00caed9622cba1c3b", "filename": "src/librustc_trans/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28abc0a6aad5e282dd69193b3fec64fd2fef1348/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fstatement.rs?ref=28abc0a6aad5e282dd69193b3fec64fd2fef1348", "patch": "@@ -39,7 +39,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                             bcx\n                         }\n                         LocalRef::Operand(Some(_)) => {\n-                            let ty = self.lvalue_ty(lvalue);\n+                            let ty = self.monomorphized_lvalue_ty(lvalue);\n \n                             if !common::type_is_zero_size(bcx.ccx(), ty) {\n                                 span_bug!(statement.source_info.span,"}]}