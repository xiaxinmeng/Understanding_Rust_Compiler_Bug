{"sha": "2d6981756da4a21cb54c2b76378a66b326df209e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNjk4MTc1NmRhNGEyMWNiNTRjMmI3NjM3OGE2NmIzMjZkZjIwOWU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-30T11:25:20Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-30T11:25:20Z"}, "message": "Handle argument extension mode", "tree": {"sha": "2a4ebc42bcc26b9918b6ebbfeb09fbd60a25420d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a4ebc42bcc26b9918b6ebbfeb09fbd60a25420d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d6981756da4a21cb54c2b76378a66b326df209e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d6981756da4a21cb54c2b76378a66b326df209e", "html_url": "https://github.com/rust-lang/rust/commit/2d6981756da4a21cb54c2b76378a66b326df209e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d6981756da4a21cb54c2b76378a66b326df209e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5ddb76f84f3e6df242e8c766b5015a124a50c15", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ddb76f84f3e6df242e8c766b5015a124a50c15", "html_url": "https://github.com/rust-lang/rust/commit/b5ddb76f84f3e6df242e8c766b5015a124a50c15"}], "stats": {"total": 52, "additions": 35, "deletions": 17}, "files": [{"sha": "2f91e83386ceb7fb15291e58abec9f20ff8afe25", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2d6981756da4a21cb54c2b76378a66b326df209e/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6981756da4a21cb54c2b76378a66b326df209e/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=2d6981756da4a21cb54c2b76378a66b326df209e", "patch": "@@ -3,8 +3,10 @@\n use crate::prelude::*;\n use crate::value_and_place::assert_assignable;\n \n-use cranelift_codegen::ir::ArgumentPurpose;\n-use rustc_target::abi::call::{ArgAbi, CastTarget, PassMode, Reg, RegKind};\n+use cranelift_codegen::ir::{ArgumentExtension, ArgumentPurpose};\n+use rustc_target::abi::call::{\n+    ArgAbi, ArgAttributes, ArgExtension as RustcArgExtension, CastTarget, PassMode, Reg, RegKind,\n+};\n use smallvec::{smallvec, SmallVec};\n \n pub(super) trait ArgAbiExt<'tcx> {\n@@ -27,6 +29,15 @@ fn reg_to_abi_param(reg: Reg) -> AbiParam {\n     AbiParam::new(clif_ty)\n }\n \n+fn apply_arg_attrs_to_abi_param(mut param: AbiParam, arg_attrs: ArgAttributes) -> AbiParam {\n+    match arg_attrs.arg_ext {\n+        RustcArgExtension::None => {}\n+        RustcArgExtension::Zext => param.extension = ArgumentExtension::Uext,\n+        RustcArgExtension::Sext => param.extension = ArgumentExtension::Sext,\n+    }\n+    param\n+}\n+\n fn cast_target_to_abi_params(cast: CastTarget) -> SmallVec<[AbiParam; 2]> {\n     let (rest_count, rem_bytes) = if cast.rest.unit.size.bytes() == 0 {\n         (0, 0)\n@@ -82,55 +93,62 @@ fn cast_target_to_abi_params(cast: CastTarget) -> SmallVec<[AbiParam; 2]> {\n     args\n }\n \n-// FIXME respect argument extension mode\n-\n impl<'tcx> ArgAbiExt<'tcx> for ArgAbi<'tcx, Ty<'tcx>> {\n     fn get_abi_param(&self, tcx: TyCtxt<'tcx>) -> SmallVec<[AbiParam; 2]> {\n         match self.mode {\n             PassMode::Ignore => smallvec![],\n-            PassMode::Direct(_) => match &self.layout.abi {\n+            PassMode::Direct(attrs) => match &self.layout.abi {\n                 Abi::Scalar(scalar) => {\n-                    smallvec![AbiParam::new(scalar_to_clif_type(tcx, scalar.clone()))]\n+                    smallvec![apply_arg_attrs_to_abi_param(\n+                        AbiParam::new(scalar_to_clif_type(tcx, scalar.clone())),\n+                        attrs\n+                    )]\n                 }\n                 Abi::Vector { .. } => {\n                     let vector_ty = crate::intrinsics::clif_vector_type(tcx, self.layout).unwrap();\n                     smallvec![AbiParam::new(vector_ty)]\n                 }\n                 _ => unreachable!(\"{:?}\", self.layout.abi),\n             },\n-            PassMode::Pair(_, _) => match &self.layout.abi {\n+            PassMode::Pair(attrs_a, attrs_b) => match &self.layout.abi {\n                 Abi::ScalarPair(a, b) => {\n                     let a = scalar_to_clif_type(tcx, a.clone());\n                     let b = scalar_to_clif_type(tcx, b.clone());\n-                    smallvec![AbiParam::new(a), AbiParam::new(b)]\n+                    smallvec![\n+                        apply_arg_attrs_to_abi_param(AbiParam::new(a), attrs_a),\n+                        apply_arg_attrs_to_abi_param(AbiParam::new(b), attrs_b),\n+                    ]\n                 }\n                 _ => unreachable!(\"{:?}\", self.layout.abi),\n             },\n             PassMode::Cast(cast) => cast_target_to_abi_params(cast),\n             PassMode::Indirect {\n-                attrs: _,\n+                attrs,\n                 extra_attrs: None,\n                 on_stack,\n             } => {\n                 if on_stack {\n                     let size = u32::try_from(self.layout.size.bytes()).unwrap();\n-                    smallvec![AbiParam::special(\n-                        pointer_ty(tcx),\n-                        ArgumentPurpose::StructArgument(size),\n+                    smallvec![apply_arg_attrs_to_abi_param(\n+                        AbiParam::special(pointer_ty(tcx), ArgumentPurpose::StructArgument(size),),\n+                        attrs\n                     )]\n                 } else {\n-                    smallvec![AbiParam::new(pointer_ty(tcx))]\n+                    smallvec![apply_arg_attrs_to_abi_param(\n+                        AbiParam::new(pointer_ty(tcx)),\n+                        attrs\n+                    )]\n                 }\n             }\n             PassMode::Indirect {\n-                attrs: _,\n-                extra_attrs: Some(_),\n+                attrs,\n+                extra_attrs: Some(extra_attrs),\n                 on_stack,\n             } => {\n                 assert!(!on_stack);\n                 smallvec![\n-                    AbiParam::new(pointer_ty(tcx)),\n-                    AbiParam::new(pointer_ty(tcx)),\n+                    apply_arg_attrs_to_abi_param(AbiParam::new(pointer_ty(tcx)), attrs),\n+                    apply_arg_attrs_to_abi_param(AbiParam::new(pointer_ty(tcx)), extra_attrs),\n                 ]\n             }\n         }"}]}