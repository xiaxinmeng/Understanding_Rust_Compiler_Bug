{"sha": "3d67e0747238c392bfb03984db132576aa19bec1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNjdlMDc0NzIzOGMzOTJiZmIwMzk4NGRiMTMyNTc2YWExOWJlYzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-01T02:53:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-01T02:53:55Z"}, "message": "Auto merge of #84463 - jyn514:refactor-impl, r=CraftSpider\n\nrustdoc: Remove unnecessary `provided_trait_methods` field from Impl\n\nIt can be calculated on-demand.\n\nHelps with https://github.com/rust-lang/rust/issues/76382.", "tree": {"sha": "50338e527a88cee21ee5e6813a9610e2282ea6f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50338e527a88cee21ee5e6813a9610e2282ea6f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d67e0747238c392bfb03984db132576aa19bec1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d67e0747238c392bfb03984db132576aa19bec1", "html_url": "https://github.com/rust-lang/rust/commit/3d67e0747238c392bfb03984db132576aa19bec1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d67e0747238c392bfb03984db132576aa19bec1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b52769b804a12b7045ee1bce893a64045cdb974a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b52769b804a12b7045ee1bce893a64045cdb974a", "html_url": "https://github.com/rust-lang/rust/commit/b52769b804a12b7045ee1bce893a64045cdb974a"}, {"sha": "b1f5917930c5bb8f44522b260460c34618cd4c89", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1f5917930c5bb8f44522b260460c34618cd4c89", "html_url": "https://github.com/rust-lang/rust/commit/b1f5917930c5bb8f44522b260460c34618cd4c89"}], "stats": {"total": 48, "additions": 18, "deletions": 30}, "files": [{"sha": "dbdf2e4bbb0f96393805b9a85e006966c9ebe4ac", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d67e0747238c392bfb03984db132576aa19bec1/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d67e0747238c392bfb03984db132576aa19bec1/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=3d67e0747238c392bfb03984db132576aa19bec1", "patch": "@@ -118,7 +118,6 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 span: Span::dummy(),\n                 unsafety: hir::Unsafety::Normal,\n                 generics: new_generics,\n-                provided_trait_methods: Default::default(),\n                 trait_: Some(trait_ref.clean(self.cx).get_trait_type().unwrap()),\n                 for_: ty.clean(self.cx),\n                 items: Vec::new(),"}, {"sha": "f5c4034a61de2913a8db477915e65bb8085afd23", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3d67e0747238c392bfb03984db132576aa19bec1/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d67e0747238c392bfb03984db132576aa19bec1/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=3d67e0747238c392bfb03984db132576aa19bec1", "patch": "@@ -92,12 +92,6 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                 }\n \n                 self.cx.generated_synthetics.insert((ty, trait_def_id));\n-                let provided_trait_methods = self\n-                    .cx\n-                    .tcx\n-                    .provided_trait_methods(trait_def_id)\n-                    .map(|meth| meth.ident.name)\n-                    .collect();\n \n                 impls.push(Item {\n                     name: None,\n@@ -112,7 +106,6 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             self.cx.tcx.explicit_predicates_of(impl_def_id),\n                         )\n                             .clean(self.cx),\n-                        provided_trait_methods,\n                         // FIXME(eddyb) compute both `trait_` and `for_` from\n                         // the post-inference `trait_ref`, as it's more accurate.\n                         trait_: Some(trait_ref.clean(self.cx).get_trait_type().unwrap()),"}, {"sha": "5dd9f3f1ebd34018434c23befcb32dabd9d96a9d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3d67e0747238c392bfb03984db132576aa19bec1/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d67e0747238c392bfb03984db132576aa19bec1/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=3d67e0747238c392bfb03984db132576aa19bec1", "patch": "@@ -414,24 +414,17 @@ crate fn build_impl(\n         record_extern_trait(cx, trait_did);\n     }\n \n-    let provided = trait_\n-        .def_id()\n-        .map(|did| tcx.provided_trait_methods(did).map(|meth| meth.ident.name).collect())\n-        .unwrap_or_default();\n-\n-    debug!(\"build_impl: impl {:?} for {:?}\", trait_.def_id(), for_.def_id());\n-\n     let (merged_attrs, cfg) = merge_attrs(cx, parent_module.into(), load_attrs(cx, did), attrs);\n     debug!(\"merged_attrs={:?}\", merged_attrs);\n \n+    debug!(\"build_impl: impl {:?} for {:?}\", trait_.def_id(), for_.def_id());\n     ret.push(clean::Item::from_def_id_and_attrs_and_parts(\n         did,\n         None,\n         clean::ImplItem(clean::Impl {\n             span: clean::types::rustc_span(did, cx.tcx),\n             unsafety: hir::Unsafety::Normal,\n             generics,\n-            provided_trait_methods: provided,\n             trait_,\n             for_,\n             items: trait_items,"}, {"sha": "39ff18e8bf5056c72860f308d93bc128cb725542", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d67e0747238c392bfb03984db132576aa19bec1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d67e0747238c392bfb03984db132576aa19bec1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3d67e0747238c392bfb03984db132576aa19bec1", "patch": "@@ -1930,11 +1930,6 @@ fn clean_impl(impl_: &hir::Impl<'_>, hir_id: hir::HirId, cx: &mut DocContext<'_>\n         build_deref_target_impls(cx, &items, &mut ret);\n     }\n \n-    let provided: FxHashSet<Symbol> = trait_\n-        .def_id()\n-        .map(|did| tcx.provided_trait_methods(did).map(|meth| meth.ident.name).collect())\n-        .unwrap_or_default();\n-\n     let for_ = impl_.self_ty.clean(cx);\n     let type_alias = for_.def_id().and_then(|did| match tcx.def_kind(did) {\n         DefKind::TyAlias => Some(tcx.type_of(did).clean(cx)),\n@@ -1945,7 +1940,6 @@ fn clean_impl(impl_: &hir::Impl<'_>, hir_id: hir::HirId, cx: &mut DocContext<'_>\n             span: types::rustc_span(tcx.hir().local_def_id(hir_id).to_def_id(), tcx),\n             unsafety: impl_.unsafety,\n             generics: impl_.generics.clean(cx),\n-            provided_trait_methods: provided.clone(),\n             trait_,\n             for_,\n             items,"}, {"sha": "fa8eec847b25158dfaa8a0741514a064d26c16bb", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d67e0747238c392bfb03984db132576aa19bec1/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d67e0747238c392bfb03984db132576aa19bec1/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=3d67e0747238c392bfb03984db132576aa19bec1", "patch": "@@ -2150,7 +2150,6 @@ crate struct Impl {\n     crate span: Span,\n     crate unsafety: hir::Unsafety,\n     crate generics: Generics,\n-    crate provided_trait_methods: FxHashSet<Symbol>,\n     crate trait_: Option<Type>,\n     crate for_: Type,\n     crate items: Vec<Item>,\n@@ -2159,6 +2158,15 @@ crate struct Impl {\n     crate blanket_impl: Option<Type>,\n }\n \n+impl Impl {\n+    crate fn provided_trait_methods(&self, tcx: TyCtxt<'_>) -> FxHashSet<Symbol> {\n+        self.trait_\n+            .def_id()\n+            .map(|did| tcx.provided_trait_methods(did).map(|meth| meth.ident.name).collect())\n+            .unwrap_or_default()\n+    }\n+}\n+\n #[derive(Clone, Debug)]\n crate struct Import {\n     crate kind: ImportKind,"}, {"sha": "0a8026ef942b1495f99758fe830d486159e371b6", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d67e0747238c392bfb03984db132576aa19bec1/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d67e0747238c392bfb03984db132576aa19bec1/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=3d67e0747238c392bfb03984db132576aa19bec1", "patch": "@@ -726,7 +726,8 @@ fn render_impls(\n         .iter()\n         .map(|i| {\n             let did = i.trait_did_full(cache).unwrap();\n-            let assoc_link = AssocItemLink::GotoSource(did, &i.inner_impl().provided_trait_methods);\n+            let provided_trait_methods = i.inner_impl().provided_trait_methods(tcx);\n+            let assoc_link = AssocItemLink::GotoSource(did, &provided_trait_methods);\n             let mut buffer = if w.is_for_html() { Buffer::html() } else { Buffer::new() };\n             render_impl(\n                 &mut buffer,\n@@ -1490,7 +1491,8 @@ fn render_impl(\n                 continue;\n             }\n             let did = i.trait_.as_ref().unwrap().def_id_full(cx.cache()).unwrap();\n-            let assoc_link = AssocItemLink::GotoSource(did, &i.provided_trait_methods);\n+            let provided_methods = i.provided_trait_methods(cx.tcx());\n+            let assoc_link = AssocItemLink::GotoSource(did, &provided_methods);\n \n             doc_impl_item(\n                 w,"}, {"sha": "1bf726dd31a46a5083c699ff5aa8c9f9bde77c34", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3d67e0747238c392bfb03984db132576aa19bec1/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d67e0747238c392bfb03984db132576aa19bec1/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=3d67e0747238c392bfb03984db132576aa19bec1", "patch": "@@ -669,10 +669,9 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n             write_small_section_header(w, \"foreign-impls\", \"Implementations on Foreign Types\", \"\");\n \n             for implementor in foreign {\n-                let assoc_link = AssocItemLink::GotoSource(\n-                    implementor.impl_item.def_id,\n-                    &implementor.inner_impl().provided_trait_methods,\n-                );\n+                let provided_methods = implementor.inner_impl().provided_trait_methods(cx.tcx());\n+                let assoc_link =\n+                    AssocItemLink::GotoSource(implementor.impl_item.def_id, &provided_methods);\n                 render_impl(\n                     w,\n                     cx,"}, {"sha": "8ca6342462fc405eab2181ee51c5430b23cfeaeb", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d67e0747238c392bfb03984db132576aa19bec1/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d67e0747238c392bfb03984db132576aa19bec1/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=3d67e0747238c392bfb03984db132576aa19bec1", "patch": "@@ -453,10 +453,10 @@ impl FromWithTcx<clean::Trait> for Trait {\n \n impl FromWithTcx<clean::Impl> for Impl {\n     fn from_tcx(impl_: clean::Impl, tcx: TyCtxt<'_>) -> Self {\n+        let provided_trait_methods = impl_.provided_trait_methods(tcx);\n         let clean::Impl {\n             unsafety,\n             generics,\n-            provided_trait_methods,\n             trait_,\n             for_,\n             items,"}]}