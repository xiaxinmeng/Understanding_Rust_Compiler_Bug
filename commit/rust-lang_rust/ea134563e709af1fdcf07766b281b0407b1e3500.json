{"sha": "ea134563e709af1fdcf07766b281b0407b1e3500", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMTM0NTYzZTcwOWFmMWZkY2YwNzc2NmIyODFiMDQwN2IxZTM1MDA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-04-11T15:24:38Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-15T15:23:50Z"}, "message": "rustc_metadata: use NonZeroUsize for the position of a Lazy.", "tree": {"sha": "143537aab044706894f391e27f062789ded65d53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/143537aab044706894f391e27f062789ded65d53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea134563e709af1fdcf07766b281b0407b1e3500", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea134563e709af1fdcf07766b281b0407b1e3500", "html_url": "https://github.com/rust-lang/rust/commit/ea134563e709af1fdcf07766b281b0407b1e3500", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea134563e709af1fdcf07766b281b0407b1e3500/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e505857914795dd2171acb4193a010f9d09ebc7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e505857914795dd2171acb4193a010f9d09ebc7c", "html_url": "https://github.com/rust-lang/rust/commit/e505857914795dd2171acb4193a010f9d09ebc7c"}], "stats": {"total": 63, "additions": 38, "deletions": 25}, "files": [{"sha": "a2955212bd493885756670638dfbdedd3f9e256a", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ea134563e709af1fdcf07766b281b0407b1e3500/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea134563e709af1fdcf07766b281b0407b1e3500/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=ea134563e709af1fdcf07766b281b0407b1e3500", "patch": "@@ -25,6 +25,7 @@ use rustc::util::captures::Captures;\n \n use std::io;\n use std::mem;\n+use std::num::NonZeroUsize;\n use std::u32;\n \n use rustc_serialize::{Decodable, Decoder, SpecializedDecoder, opaque};\n@@ -131,7 +132,7 @@ impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a CrateMetadata, TyCtxt<'tcx>) {\n \n impl<'a, 'tcx, T: Decodable> Lazy<T> {\n     crate fn decode<M: Metadata<'a, 'tcx>>(self, meta: M) -> T {\n-        let mut dcx = meta.decoder(self.position);\n+        let mut dcx = meta.decoder(self.position.get());\n         dcx.lazy_state = LazyState::NodeStart(self.position);\n         T::decode(&mut dcx).unwrap()\n     }\n@@ -142,7 +143,7 @@ impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable> Lazy<[T]> {\n         self,\n         meta: M,\n     ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {\n-        let mut dcx = meta.decoder(self.position);\n+        let mut dcx = meta.decoder(self.position.get());\n         dcx.lazy_state = LazyState::NodeStart(self.position);\n         (0..self.meta).map(move |_| T::decode(&mut dcx).unwrap())\n     }\n@@ -166,13 +167,14 @@ impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n         let position = match self.lazy_state {\n             LazyState::NoNode => bug!(\"read_lazy_with_meta: outside of a metadata node\"),\n             LazyState::NodeStart(start) => {\n+                let start = start.get();\n                 assert!(distance + min_size <= start);\n                 start - distance - min_size\n             }\n-            LazyState::Previous(last_min_end) => last_min_end + distance,\n+            LazyState::Previous(last_min_end) => last_min_end.get() + distance,\n         };\n-        self.lazy_state = LazyState::Previous(position + min_size);\n-        Ok(Lazy::from_position_and_meta(position, meta))\n+        self.lazy_state = LazyState::Previous(NonZeroUsize::new(position + min_size).unwrap());\n+        Ok(Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta))\n     }\n }\n \n@@ -384,7 +386,9 @@ impl<'tcx> MetadataBlob {\n     }\n \n     crate fn get_rustc_version(&self) -> String {\n-        Lazy::<String>::from_position(METADATA_HEADER.len() + 4).decode(self)\n+        Lazy::<String>::from_position(\n+            NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap(),\n+        ).decode(self)\n     }\n \n     crate fn get_root(&self) -> CrateRoot<'tcx> {\n@@ -393,7 +397,9 @@ impl<'tcx> MetadataBlob {\n         let pos = (((slice[offset + 0] as u32) << 24) | ((slice[offset + 1] as u32) << 16) |\n                    ((slice[offset + 2] as u32) << 8) |\n                    ((slice[offset + 3] as u32) << 0)) as usize;\n-        Lazy::<CrateRoot<'tcx>>::from_position(pos).decode(self)\n+        Lazy::<CrateRoot<'tcx>>::from_position(\n+            NonZeroUsize::new(pos).unwrap(),\n+        ).decode(self)\n     }\n \n     crate fn list_crate_metadata(&self,"}, {"sha": "76bac1251260c81c168b0a49d12ae33da6d186b5", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ea134563e709af1fdcf07766b281b0407b1e3500/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea134563e709af1fdcf07766b281b0407b1e3500/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=ea134563e709af1fdcf07766b281b0407b1e3500", "patch": "@@ -23,11 +23,12 @@ use rustc::session::config::{self, CrateType};\n use rustc::util::nodemap::FxHashMap;\n \n use rustc_data_structures::stable_hasher::StableHasher;\n+use rustc_data_structures::sync::Lrc;\n use rustc_serialize::{Encodable, Encoder, SpecializedEncoder, opaque};\n \n use std::hash::Hash;\n+use std::num::NonZeroUsize;\n use std::path::Path;\n-use rustc_data_structures::sync::Lrc;\n use std::u32;\n use syntax::ast;\n use syntax::attr;\n@@ -271,10 +272,11 @@ impl<'tcx> EncodeContext<'tcx> {\n         &mut self,\n         lazy: Lazy<T>,\n     ) -> Result<(), <Self as Encoder>::Error> {\n-        let min_end = lazy.position + T::min_size(lazy.meta);\n+        let min_end = lazy.position.get() + T::min_size(lazy.meta);\n         let distance = match self.lazy_state {\n             LazyState::NoNode => bug!(\"emit_lazy_distance: outside of a metadata node\"),\n             LazyState::NodeStart(start) => {\n+                let start = start.get();\n                 assert!(min_end <= start);\n                 start - min_end\n             }\n@@ -284,25 +286,25 @@ impl<'tcx> EncodeContext<'tcx> {\n                     \"make sure that the calls to `lazy*` \\\n                     are in the same order as the metadata fields\",\n                 );\n-                lazy.position - last_min_end\n+                lazy.position.get() - last_min_end.get()\n             }\n         };\n-        self.lazy_state = LazyState::Previous(min_end);\n+        self.lazy_state = LazyState::Previous(NonZeroUsize::new(min_end).unwrap());\n         self.emit_usize(distance)\n     }\n \n     fn lazy<T: ?Sized + LazyMeta>(\n         &mut self,\n         value: impl EncodeContentsForLazy<T>,\n     ) -> Lazy<T> {\n-        let pos = self.position();\n+        let pos = NonZeroUsize::new(self.position()).unwrap();\n \n         assert_eq!(self.lazy_state, LazyState::NoNode);\n         self.lazy_state = LazyState::NodeStart(pos);\n         let meta = value.encode_contents_for_lazy(self);\n         self.lazy_state = LazyState::NoNode;\n \n-        assert!(pos + <T>::min_size(meta) <= self.position());\n+        assert!(pos.get() + <T>::min_size(meta) <= self.position());\n \n         Lazy::from_position_and_meta(pos, meta)\n     }\n@@ -1934,7 +1936,7 @@ crate fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {\n \n     // Encode the root position.\n     let header = METADATA_HEADER.len();\n-    let pos = root.position;\n+    let pos = root.position.get();\n     result[header + 0] = (pos >> 24) as u8;\n     result[header + 1] = (pos >> 16) as u8;\n     result[header + 2] = (pos >> 8) as u8;"}, {"sha": "6f47ebb914464a53f53c3b6c1f3128829bba1be5", "filename": "src/librustc_metadata/index.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ea134563e709af1fdcf07766b281b0407b1e3500/src%2Flibrustc_metadata%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea134563e709af1fdcf07766b281b0407b1e3500/src%2Flibrustc_metadata%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex.rs?ref=ea134563e709af1fdcf07766b281b0407b1e3500", "patch": "@@ -3,6 +3,7 @@ use crate::schema::*;\n use rustc::hir::def_id::{DefId, DefIndex};\n use rustc_serialize::opaque::Encoder;\n use std::marker::PhantomData;\n+use std::num::NonZeroUsize;\n use std::u32;\n use log::debug;\n \n@@ -94,8 +95,8 @@ impl Index<'tcx> {\n     }\n \n     fn record_index(&mut self, item: DefIndex, entry: Lazy<Entry<'tcx>>) {\n-        assert!(entry.position < (u32::MAX as usize));\n-        let position = entry.position as u32;\n+        assert!(entry.position.get() < (u32::MAX as usize));\n+        let position = entry.position.get() as u32;\n         let array_index = item.index();\n \n         let positions = &mut self.positions;\n@@ -111,7 +112,10 @@ impl Index<'tcx> {\n     crate fn write_index(&self, buf: &mut Encoder) -> Lazy<[Self]> {\n         let pos = buf.position();\n         buf.emit_raw_bytes(&self.positions);\n-        Lazy::from_position_and_meta(pos as usize, self.positions.len() / 4)\n+        Lazy::from_position_and_meta(\n+            NonZeroUsize::new(pos as usize).unwrap(),\n+            self.positions.len() / 4,\n+        )\n     }\n }\n \n@@ -124,14 +128,14 @@ impl Lazy<[Index<'tcx>]> {\n                def_index,\n                self.meta);\n \n-        let bytes = &bytes[self.position..][..self.meta * 4];\n+        let bytes = &bytes[self.position.get()..][..self.meta * 4];\n         let position = u32::read_from_bytes_at(bytes, def_index.index());\n         if position == u32::MAX {\n             debug!(\"Index::lookup: position=u32::MAX\");\n             None\n         } else {\n             debug!(\"Index::lookup: position={:?}\", position);\n-            Some(Lazy::from_position(position as usize))\n+            Some(Lazy::from_position(NonZeroUsize::new(position as usize).unwrap()))\n         }\n     }\n }"}, {"sha": "9541e5c39cda3a6e096a90a98b7ba21a42ce3378", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ea134563e709af1fdcf07766b281b0407b1e3500/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea134563e709af1fdcf07766b281b0407b1e3500/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=ea134563e709af1fdcf07766b281b0407b1e3500", "patch": "@@ -20,6 +20,7 @@ use syntax::symbol::Symbol;\n use syntax_pos::{self, Span};\n \n use std::marker::PhantomData;\n+use std::num::NonZeroUsize;\n \n crate fn rustc_version() -> String {\n     format!(\"rustc {}\",\n@@ -102,13 +103,13 @@ crate struct Lazy<T, Meta = <T as LazyMeta>::Meta>\n     where T: ?Sized + LazyMeta<Meta = Meta>,\n           Meta: 'static + Copy,\n {\n-    pub position: usize,\n+    pub position: NonZeroUsize,\n     pub meta: Meta,\n     _marker: PhantomData<T>,\n }\n \n impl<T: ?Sized + LazyMeta> Lazy<T> {\n-    crate fn from_position_and_meta(position: usize, meta: T::Meta) -> Lazy<T> {\n+     crate fn from_position_and_meta(position: NonZeroUsize, meta: T::Meta) -> Lazy<T> {\n         Lazy {\n             position,\n             meta,\n@@ -118,14 +119,14 @@ impl<T: ?Sized + LazyMeta> Lazy<T> {\n }\n \n impl<T> Lazy<T> {\n-    crate fn from_position(position: usize) -> Lazy<T> {\n+    crate fn from_position(position: NonZeroUsize) -> Lazy<T> {\n         Lazy::from_position_and_meta(position, ())\n     }\n }\n \n impl<T> Lazy<[T]> {\n     crate fn empty() -> Lazy<[T]> {\n-        Lazy::from_position_and_meta(0, 0)\n+        Lazy::from_position_and_meta(NonZeroUsize::new(1).unwrap(), 0)\n     }\n }\n \n@@ -147,12 +148,12 @@ crate enum LazyState {\n \n     /// Inside a metadata node, and before any `Lazy`.\n     /// The position is that of the node itself.\n-    NodeStart(usize),\n+    NodeStart(NonZeroUsize),\n \n     /// Inside a metadata node, with a previous `Lazy`.\n     /// The position is a conservative estimate of where that\n     /// previous `Lazy` would end (see their comments).\n-    Previous(usize),\n+    Previous(NonZeroUsize),\n }\n \n #[derive(RustcEncodable, RustcDecodable)]"}]}