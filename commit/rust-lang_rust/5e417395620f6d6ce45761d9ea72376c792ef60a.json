{"sha": "5e417395620f6d6ce45761d9ea72376c792ef60a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNDE3Mzk1NjIwZjZkNmNlNDU3NjFkOWVhNzIzNzZjNzkyZWY2MGE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-19T23:35:28Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-19T23:35:53Z"}, "message": "Remove final bits of residual hokey-hash functions. Close #1616.", "tree": {"sha": "70df9a87a0ab61f5b8b55e9bd5d50be5077fe9ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70df9a87a0ab61f5b8b55e9bd5d50be5077fe9ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e417395620f6d6ce45761d9ea72376c792ef60a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e417395620f6d6ce45761d9ea72376c792ef60a", "html_url": "https://github.com/rust-lang/rust/commit/5e417395620f6d6ce45761d9ea72376c792ef60a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e417395620f6d6ce45761d9ea72376c792ef60a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10e760efc8c99e15c50b925a48f7df4fdd704a48", "url": "https://api.github.com/repos/rust-lang/rust/commits/10e760efc8c99e15c50b925a48f7df4fdd704a48", "html_url": "https://github.com/rust-lang/rust/commit/10e760efc8c99e15c50b925a48f7df4fdd704a48"}], "stats": {"total": 141, "additions": 27, "deletions": 114}, "files": [{"sha": "8566c5e10709e6a2f5aa4d017f5b4ef8edaa7b41", "filename": "src/libcore/core.rc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e417395620f6d6ce45761d9ea72376c792ef60a/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5e417395620f6d6ce45761d9ea72376c792ef60a/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=5e417395620f6d6ce45761d9ea72376c792ef60a", "patch": "@@ -80,8 +80,8 @@ export private;\n /// Operations and constants for `int`\n #[path = \"int-template\"]\n mod int {\n-    use inst::{ hash, pow };\n-    export hash, pow;\n+    use inst::{ pow };\n+    export pow;\n     #[path = \"int.rs\"]\n     mod inst;\n }\n@@ -118,10 +118,10 @@ mod i64 {\n #[path = \"uint-template\"]\n mod uint {\n     use inst::{\n-        div_ceil, div_round, div_floor, hash, iterate,\n+        div_ceil, div_round, div_floor, iterate,\n         next_power_of_two\n     };\n-    export div_ceil, div_round, div_floor, hash, iterate,\n+    export div_ceil, div_round, div_floor, iterate,\n     next_power_of_two;\n \n     #[path = \"uint.rs\"]"}, {"sha": "abc72ddfd31fcb161bd414d2956157aa222f6f68", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 20, "deletions": 67, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/5e417395620f6d6ce45761d9ea72376c792ef60a/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e417395620f6d6ce45761d9ea72376c792ef60a/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=5e417395620f6d6ce45761d9ea72376c792ef60a", "patch": "@@ -19,20 +19,6 @@ use to_bytes::IterBytes;\n \n export Streaming, State, Hash, HashUtil;\n export default_state;\n-export hash_bytes_keyed;\n-export hash_str_keyed;\n-export hash_u64_keyed;\n-export hash_u32_keyed;\n-export hash_u16_keyed;\n-export hash_u8_keyed;\n-export hash_uint_keyed;\n-export hash_bytes;\n-export hash_str;\n-export hash_u64;\n-export hash_u32;\n-export hash_u16;\n-export hash_u8;\n-export hash_uint;\n \n /**\n  * Types that can meaningfully be hashed should implement this.\n@@ -95,8 +81,6 @@ impl <A: IterBytes> A: Hash {\n     }\n }\n \n-// implementations\n-\n pure fn hash_keyed_2<A: IterBytes,\n                      B: IterBytes>(a: &A, b: &B,\n                                    k0: u64, k1: u64) -> u64 {\n@@ -153,37 +137,6 @@ pure fn hash_keyed_5<A: IterBytes,\n     }\n }\n \n-pure fn hash_bytes_keyed(val: &[u8], k0: u64, k1: u64) -> u64 {\n-    val.hash_keyed(k0, k1)\n-}\n-pure fn hash_str_keyed(val: &str, k0: u64, k1: u64) -> u64 {\n-    val.hash_keyed(k0, k1)\n-}\n-pure fn hash_u64_keyed(val: u64, k0: u64, k1: u64) -> u64 {\n-    val.hash_keyed(k0, k1)\n-}\n-pure fn hash_u32_keyed(val: u32, k0: u64, k1: u64) -> u64 {\n-    val.hash_keyed(k0, k1)\n-}\n-pure fn hash_u16_keyed(val: u16, k0: u64, k1: u64) -> u64 {\n-    val.hash_keyed(k0, k1)\n-}\n-pure fn hash_u8_keyed(val: u8, k0: u64, k1: u64) -> u64 {\n-    val.hash_keyed(k0, k1)\n-}\n-pure fn hash_uint_keyed(val: uint, k0: u64, k1: u64) -> u64 {\n-    val.hash_keyed(k0, k1)\n-}\n-\n-pure fn hash_bytes(val: &[u8]) -> u64 { hash_bytes_keyed(val, 0, 0) }\n-pure fn hash_str(val: &str) -> u64 { hash_str_keyed(val, 0, 0) }\n-pure fn hash_u64(val: u64) -> u64 { hash_u64_keyed(val, 0, 0) }\n-pure fn hash_u32(val: u32) -> u64 { hash_u32_keyed(val, 0, 0) }\n-pure fn hash_u16(val: u16) -> u64 { hash_u16_keyed(val, 0, 0) }\n-pure fn hash_u8(val: u8) -> u64 { hash_u8_keyed(val, 0, 0) }\n-pure fn hash_uint(val: uint) -> u64 { hash_uint_keyed(val, 0, 0) }\n-\n-\n // Implement State as SipState\n \n type State = SipState;\n@@ -517,42 +470,42 @@ fn test_siphash() {\n #[test] #[cfg(target_arch = \"arm\")]\n fn test_hash_uint() {\n     let val = 0xdeadbeef_deadbeef_u64;\n-    assert hash_u64(val as u64) == hash_uint(val as uint);\n-    assert hash_u32(val as u32) != hash_uint(val as uint);\n+    assert (val as u64).hash() != (val as uint).hash();\n+    assert (val as u32).hash() == (val as uint).hash();\n }\n #[test] #[cfg(target_arch = \"x86_64\")]\n fn test_hash_uint() {\n     let val = 0xdeadbeef_deadbeef_u64;\n-    assert hash_u64(val as u64) == hash_uint(val as uint);\n-    assert hash_u32(val as u32) != hash_uint(val as uint);\n+    assert (val as u64).hash() == (val as uint).hash();\n+    assert (val as u32).hash() != (val as uint).hash();\n }\n #[test] #[cfg(target_arch = \"x86\")]\n fn test_hash_uint() {\n     let val = 0xdeadbeef_deadbeef_u64;\n-    assert hash_u64(val as u64) != hash_uint(val as uint);\n-    assert hash_u32(val as u32) == hash_uint(val as uint);\n+    assert (val as u64).hash() != (val as uint).hash();\n+    assert (val as u32).hash() == (val as uint).hash();\n }\n \n #[test]\n fn test_hash_idempotent() {\n     let val64 = 0xdeadbeef_deadbeef_u64;\n-    assert hash_u64(val64) == hash_u64(val64);\n+    val64.hash() == val64.hash();\n     let val32 = 0xdeadbeef_u32;\n-    assert hash_u32(val32) == hash_u32(val32);\n+    val32.hash() == val32.hash();\n }\n \n #[test]\n fn test_hash_no_bytes_dropped_64() {\n     let val = 0xdeadbeef_deadbeef_u64;\n \n-    assert hash_u64(val) != hash_u64(zero_byte(val, 0));\n-    assert hash_u64(val) != hash_u64(zero_byte(val, 1));\n-    assert hash_u64(val) != hash_u64(zero_byte(val, 2));\n-    assert hash_u64(val) != hash_u64(zero_byte(val, 3));\n-    assert hash_u64(val) != hash_u64(zero_byte(val, 4));\n-    assert hash_u64(val) != hash_u64(zero_byte(val, 5));\n-    assert hash_u64(val) != hash_u64(zero_byte(val, 6));\n-    assert hash_u64(val) != hash_u64(zero_byte(val, 7));\n+    assert val.hash() != zero_byte(val, 0).hash();\n+    assert val.hash() != zero_byte(val, 1).hash();\n+    assert val.hash() != zero_byte(val, 2).hash();\n+    assert val.hash() != zero_byte(val, 3).hash();\n+    assert val.hash() != zero_byte(val, 4).hash();\n+    assert val.hash() != zero_byte(val, 5).hash();\n+    assert val.hash() != zero_byte(val, 6).hash();\n+    assert val.hash() != zero_byte(val, 7).hash();\n \n     fn zero_byte(val: u64, byte: uint) -> u64 {\n         assert 0 <= byte; assert byte < 8;\n@@ -564,10 +517,10 @@ fn test_hash_no_bytes_dropped_64() {\n fn test_hash_no_bytes_dropped_32() {\n     let val = 0xdeadbeef_u32;\n \n-    assert hash_u32(val) != hash_u32(zero_byte(val, 0));\n-    assert hash_u32(val) != hash_u32(zero_byte(val, 1));\n-    assert hash_u32(val) != hash_u32(zero_byte(val, 2));\n-    assert hash_u32(val) != hash_u32(zero_byte(val, 3));\n+    assert val.hash() != zero_byte(val, 0).hash();\n+    assert val.hash() != zero_byte(val, 1).hash();\n+    assert val.hash() != zero_byte(val, 2).hash();\n+    assert val.hash() != zero_byte(val, 3).hash();\n \n     fn zero_byte(val: u32, byte: uint) -> u32 {\n         assert 0 <= byte; assert byte < 4;"}, {"sha": "7e7cddf9b300be8349a3dcb9fc41dc357efb0040", "filename": "src/libcore/int-template/int.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e417395620f6d6ce45761d9ea72376c792ef60a/src%2Flibcore%2Fint-template%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e417395620f6d6ce45761d9ea72376c792ef60a/src%2Flibcore%2Fint-template%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fint.rs?ref=5e417395620f6d6ce45761d9ea72376c792ef60a", "patch": "@@ -1,12 +1,6 @@\n type T = int;\n const bits: uint = uint::bits;\n \n-/// Produce a uint suitable for use in a hash table\n-pure fn hash(x: int) -> uint {\n-    let u : uint = x as uint;\n-    uint::hash(u)\n-}\n-\n /// Returns `base` raised to the power of `exponent`\n fn pow(base: int, exponent: uint) -> int {\n     if exponent == 0u { return 1; } //Not mathemtically true if ~[base == 0]"}, {"sha": "4c01656ba2ecfce30ef5af596fead8b63b5caeea", "filename": "src/libcore/str.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e417395620f6d6ce45761d9ea72376c792ef60a/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e417395620f6d6ce45761d9ea72376c792ef60a/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=5e417395620f6d6ce45761d9ea72376c792ef60a", "patch": "@@ -853,11 +853,6 @@ impl @str : Ord {\n     pure fn gt(&&other: @str) -> bool { gt(self, other) }\n }\n \n-/// String hash function\n-pure fn hash(s: &~str) -> uint {\n-    hash::hash_str(*s) as uint\n-}\n-\n /*\n Section: Iterating through strings\n */"}, {"sha": "a02ce84052e2e4761ce282391611b42cb221cc36", "filename": "src/libcore/uint-template/uint.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e417395620f6d6ce45761d9ea72376c792ef60a/src%2Flibcore%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e417395620f6d6ce45761d9ea72376c792ef60a/src%2Flibcore%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fuint.rs?ref=5e417395620f6d6ce45761d9ea72376c792ef60a", "patch": "@@ -60,11 +60,6 @@ pure fn div_round(x: uint, y: uint) -> uint {\n  */\n pure fn div_floor(x: uint, y: uint) -> uint { return x / y; }\n \n-/// Produce a uint suitable for use in a hash table\n-pure fn hash(x: uint) -> uint {\n-    hash::hash_uint(x) as uint\n-}\n-\n /**\n  * Iterate over the range [`lo`..`hi`), or stop when requested\n  *"}, {"sha": "c81baf524765f18a1393a133967a34b9dc5be801", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e417395620f6d6ce45761d9ea72376c792ef60a/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e417395620f6d6ce45761d9ea72376c792ef60a/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=5e417395620f6d6ce45761d9ea72376c792ef60a", "patch": "@@ -1799,7 +1799,6 @@ mod raw {\n mod bytes {\n     export cmp;\n     export lt, le, eq, ne, ge, gt;\n-    export hash;\n     export memcpy, memmove;\n \n     /// Bytewise string comparison\n@@ -1841,11 +1840,6 @@ mod bytes {\n     /// Bytewise greater than\n     pure fn gt(a: &~[u8], b: &~[u8]) -> bool { cmp(a, b) > 0 }\n \n-    /// Byte-vec hash function\n-    pure fn hash(s: &~[u8]) -> uint {\n-        hash::hash_bytes(*s) as uint\n-    }\n-\n     /**\n       * Copies data from one vector to another.\n       *"}, {"sha": "1784a2cac4390d31120709ca65bc705bf3922d85", "filename": "src/libstd/map.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e417395620f6d6ce45761d9ea72376c792ef60a/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e417395620f6d6ce45761d9ea72376c792ef60a/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=5e417395620f6d6ce45761d9ea72376c792ef60a", "patch": "@@ -658,12 +658,6 @@ mod tests {\n     fn test_removal() {\n         debug!(\"*** starting test_removal\");\n         let num_to_insert: uint = 64u;\n-        fn eq(x: &uint, y: &uint) -> bool { *x == *y }\n-        fn hash(u: &uint) -> uint {\n-            // This hash function intentionally causes collisions between\n-            // consecutive integer pairs.\n-            *u / 2u * 2u\n-        }\n         assert (hash(&0u) == hash(&1u));\n         assert (hash(&2u) == hash(&3u));\n         assert (hash(&0u) != hash(&2u));"}, {"sha": "4ec6f36a8eb705667e3ed97585ce60ae92dd5097", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e417395620f6d6ce45761d9ea72376c792ef60a/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e417395620f6d6ce45761d9ea72376c792ef60a/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=5e417395620f6d6ce45761d9ea72376c792ef60a", "patch": "@@ -1055,8 +1055,6 @@ fn name_has_type(tn: type_names, s: ~str) -> Option<TypeRef> {\n }\n \n fn mk_type_names() -> type_names {\n-    pure fn hash(t: &TypeRef) -> uint { *t as uint }\n-    pure fn eq(a: &TypeRef, b: &TypeRef) -> bool { *a == *b }\n     @{type_names: std::map::HashMap(),\n       named_types: std::map::HashMap()}\n }"}, {"sha": "606a5aa53b9a60daad05949cf9318308fe779ffb", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e417395620f6d6ce45761d9ea72376c792ef60a/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e417395620f6d6ce45761d9ea72376c792ef60a/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=5e417395620f6d6ce45761d9ea72376c792ef60a", "patch": "@@ -39,16 +39,6 @@ trait word_reader {\n     fn read_word() -> Option<~str>;\n }\n \n-trait hash_key {\n-    pure fn hash() -> uint;\n-    pure fn eq(&&k: self) -> bool;\n-}\n-\n-impl ~str: hash_key {\n-    pure fn hash() -> uint { str::hash(&self) }\n-    pure fn eq(&&x: ~str) -> bool { self == x }\n-}\n-\n // These used to be in task, but they disappeard.\n type joinable_task = Port<()>;\n fn spawn_joinable(+f: fn~()) -> joinable_task {\n@@ -152,7 +142,7 @@ mod map_reduce {\n \n     enum reduce_proto<V: Copy Send> { emit_val(V), done, addref, release }\n \n-    fn start_mappers<K1: Copy Send, K2: Hash IterBytes Eq Const Copy Send hash_key,\n+    fn start_mappers<K1: Copy Send, K2: Hash IterBytes Eq Const Copy Send,\n                      V: Copy Send>(\n         map: mapper<K1, K2, V>,\n         &ctrls: ~[ctrl_proto::server::open<K2, V>],\n@@ -169,7 +159,7 @@ mod map_reduce {\n         return tasks;\n     }\n \n-    fn map_task<K1: Copy Send, K2: Hash IterBytes Eq Const Copy Send hash_key, V: Copy Send>(\n+    fn map_task<K1: Copy Send, K2: Hash IterBytes Eq Const Copy Send, V: Copy Send>(\n         map: mapper<K1, K2, V>,\n         ctrl: box<ctrl_proto::client::open<K2, V>>,\n         input: K1)\n@@ -242,7 +232,7 @@ mod map_reduce {\n         reduce(key, || get(p, ref_count, is_done) );\n     }\n \n-    fn map_reduce<K1: Copy Send, K2: Hash IterBytes Eq Const Copy Send hash_key, V: Copy Send>(\n+    fn map_reduce<K1: Copy Send, K2: Hash IterBytes Eq Const Copy Send, V: Copy Send>(\n         map: mapper<K1, K2, V>,\n         reduce: reducer<K2, V>,\n         inputs: ~[K1])"}]}