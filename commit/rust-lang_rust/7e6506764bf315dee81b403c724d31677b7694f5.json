{"sha": "7e6506764bf315dee81b403c724d31677b7694f5", "node_id": "C_kwDOAAsO6NoAKDdlNjUwNjc2NGJmMzE1ZGVlODFiNDAzYzcyNGQzMTY3N2I3Njk0ZjU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-13T19:35:29Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-21T15:38:52Z"}, "message": "IdentitySubsts::identity_for_item takes Into<DefId>", "tree": {"sha": "f73ae72c223ff09fda15a5b90c99804b610bbf05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f73ae72c223ff09fda15a5b90c99804b610bbf05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e6506764bf315dee81b403c724d31677b7694f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e6506764bf315dee81b403c724d31677b7694f5", "html_url": "https://github.com/rust-lang/rust/commit/7e6506764bf315dee81b403c724d31677b7694f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e6506764bf315dee81b403c724d31677b7694f5/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "979ef5981f40f1475aa05095b82a783daf79c352", "url": "https://api.github.com/repos/rust-lang/rust/commits/979ef5981f40f1475aa05095b82a783daf79c352", "html_url": "https://github.com/rust-lang/rust/commit/979ef5981f40f1475aa05095b82a783daf79c352"}], "stats": {"total": 55, "additions": 27, "deletions": 28}, "files": [{"sha": "e542a1da053be7d1742d74715f98b2949e905691", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=7e6506764bf315dee81b403c724d31677b7694f5", "patch": "@@ -284,7 +284,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         // hidden type is well formed even without those bounds.\n         let predicate = ty::Binder::dummy(ty::PredicateKind::WellFormed(definition_ty.into()));\n \n-        let id_substs = InternalSubsts::identity_for_item(self.tcx, def_id.to_def_id());\n+        let id_substs = InternalSubsts::identity_for_item(self.tcx, def_id);\n \n         // Require that the hidden type actually fulfills all the bounds of the opaque type, even without\n         // the bounds that the function supplies."}, {"sha": "4082759006de737f1cb9747afd78d60e00aad450", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=7e6506764bf315dee81b403c724d31677b7694f5", "patch": "@@ -211,7 +211,7 @@ fn check_opaque(tcx: TyCtxt<'_>, id: hir::ItemId) {\n         return;\n     }\n \n-    let substs = InternalSubsts::identity_for_item(tcx, item.owner_id.to_def_id());\n+    let substs = InternalSubsts::identity_for_item(tcx, item.owner_id);\n     let span = tcx.def_span(item.owner_id.def_id);\n \n     if !tcx.features().impl_trait_projections {\n@@ -304,7 +304,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n         ..\n     }) = item.kind\n     {\n-        let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+        let substs = InternalSubsts::identity_for_item(tcx, def_id);\n         let opaque_identity_ty = if in_trait {\n             tcx.mk_projection(def_id.to_def_id(), substs)\n         } else {\n@@ -535,7 +535,7 @@ fn check_item_type(tcx: TyCtxt<'_>, id: hir::ItemId) {\n                     }\n                     ty::AssocKind::Type if assoc_item.defaultness(tcx).has_value() => {\n                         let trait_substs =\n-                            InternalSubsts::identity_for_item(tcx, id.owner_id.to_def_id());\n+                            InternalSubsts::identity_for_item(tcx, id.owner_id);\n                         let _: Result<_, rustc_errors::ErrorGuaranteed> = check_type_bounds(\n                             tcx,\n                             assoc_item,"}, {"sha": "aa66d7bb5efc8556c1350763fb7a59cd5c0f9315", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=7e6506764bf315dee81b403c724d31677b7694f5", "patch": "@@ -22,7 +22,7 @@ fn associated_type_bounds<'tcx>(\n ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n     let item_ty = tcx.mk_projection(\n         assoc_item_def_id.to_def_id(),\n-        InternalSubsts::identity_for_item(tcx, assoc_item_def_id.to_def_id()),\n+        InternalSubsts::identity_for_item(tcx, assoc_item_def_id),\n     );\n \n     let icx = ItemCtxt::new(tcx, assoc_item_def_id);\n@@ -92,7 +92,7 @@ pub(super) fn explicit_item_bounds(\n                 opaque_ty.bounds,\n                 tcx.mk_projection(\n                     def_id.to_def_id(),\n-                    ty::InternalSubsts::identity_for_item(tcx, def_id.to_def_id()),\n+                    ty::InternalSubsts::identity_for_item(tcx, def_id),\n                 ),\n                 item.span,\n             );\n@@ -114,7 +114,7 @@ pub(super) fn explicit_item_bounds(\n             span,\n             ..\n         }) => {\n-            let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+            let substs = InternalSubsts::identity_for_item(tcx, def_id);\n             let item_ty = if *in_trait && !tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n                 tcx.mk_projection(def_id.to_def_id(), substs)\n             } else {"}, {"sha": "fdab87b6acea7e06c8a08f7fea57799c6ace91e8", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=7e6506764bf315dee81b403c724d31677b7694f5", "patch": "@@ -405,7 +405,7 @@ pub(super) fn explicit_predicates_of<'tcx>(\n         // Remove bounds on associated types from the predicates, they will be\n         // returned by `explicit_item_bounds`.\n         let predicates_and_bounds = tcx.trait_explicit_predicates_and_bounds(def_id);\n-        let trait_identity_substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+        let trait_identity_substs = InternalSubsts::identity_for_item(tcx, def_id);\n \n         let is_assoc_item_ty = |ty: Ty<'tcx>| {\n             // For a predicate from a where clause to become a bound on an"}, {"sha": "9bbca9b4e96995938ef63fa282bd7857f3d489ca", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=7e6506764bf315dee81b403c724d31677b7694f5", "patch": "@@ -274,7 +274,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty\n     let output = match tcx.hir().get(hir_id) {\n         Node::TraitItem(item) => match item.kind {\n             TraitItemKind::Fn(..) => {\n-                let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+                let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id.to_def_id(), substs)\n             }\n             TraitItemKind::Const(ty, body_id) => body_id\n@@ -294,7 +294,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty\n \n         Node::ImplItem(item) => match item.kind {\n             ImplItemKind::Fn(..) => {\n-                let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+                let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id.to_def_id(), substs)\n             }\n             ImplItemKind::Const(ty, body_id) => {\n@@ -350,12 +350,12 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty\n                     _ => icx.to_ty(*self_ty),\n                 },\n                 ItemKind::Fn(..) => {\n-                    let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+                    let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                     tcx.mk_fn_def(def_id.to_def_id(), substs)\n                 }\n                 ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) => {\n                     let def = tcx.adt_def(def_id);\n-                    let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+                    let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                     tcx.mk_adt(def, substs)\n                 }\n                 ItemKind::OpaqueTy(OpaqueTy { origin: hir::OpaqueTyOrigin::TyAlias, .. }) => {\n@@ -395,7 +395,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty\n \n         Node::ForeignItem(foreign_item) => match foreign_item.kind {\n             ForeignItemKind::Fn(..) => {\n-                let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+                let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id.to_def_id(), substs)\n             }\n             ForeignItemKind::Static(t, _) => icx.to_ty(t),\n@@ -407,7 +407,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty\n                 tcx.type_of(tcx.hir().get_parent_item(hir_id)).subst_identity()\n             }\n             VariantData::Tuple(..) => {\n-                let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+                let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id.to_def_id(), substs)\n             }\n         },\n@@ -440,7 +440,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty\n                 Node::Expr(Expr { kind: ExprKind::ConstBlock(anon_const), .. })\n                     if anon_const.hir_id == hir_id =>\n                 {\n-                    let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+                    let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                     substs.as_inline_const().ty()\n                 }\n "}, {"sha": "91c64eeec1ebaae196b74344c5e9c5dc48307e61", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=7e6506764bf315dee81b403c724d31677b7694f5", "patch": "@@ -168,7 +168,7 @@ fn get_impl_substs(\n     let assumed_wf_types =\n         ocx.assumed_wf_types(param_env, tcx.def_span(impl1_def_id), impl1_def_id);\n \n-    let impl1_substs = InternalSubsts::identity_for_item(tcx, impl1_def_id.to_def_id());\n+    let impl1_substs = InternalSubsts::identity_for_item(tcx, impl1_def_id);\n     let impl2_substs =\n         translate_substs(infcx, param_env, impl1_def_id.to_def_id(), impl1_substs, impl2_node);\n "}, {"sha": "0a45119ff055b10bd55bd35fa83c5f37cbc03993", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=7e6506764bf315dee81b403c724d31677b7694f5", "patch": "@@ -152,7 +152,7 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n \n     let mut collector =\n         OpaqueTypeLifetimeCollector { tcx, root_def_id: item_def_id.to_def_id(), variances };\n-    let id_substs = ty::InternalSubsts::identity_for_item(tcx, item_def_id.to_def_id());\n+    let id_substs = ty::InternalSubsts::identity_for_item(tcx, item_def_id);\n     for pred in tcx.bound_explicit_item_bounds(item_def_id.to_def_id()).transpose_iter() {\n         let pred = pred.map_bound(|(pred, _)| *pred).subst(tcx, id_substs);\n         debug!(?pred);"}, {"sha": "e720af73c39f23abf3730d2bf409c4145d20a066", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=7e6506764bf315dee81b403c724d31677b7694f5", "patch": "@@ -306,9 +306,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             // Replace the explicit self type with `Self` for better suggestion rendering\n             .with_self_ty(self.tcx, self.tcx.mk_ty_param(0, kw::SelfUpper))\n             .substs;\n-        let trait_item_substs =\n-            ty::InternalSubsts::identity_for_item(self.tcx, impl_item_def_id.to_def_id())\n-                .rebase_onto(self.tcx, impl_def_id, trait_substs);\n+        let trait_item_substs = ty::InternalSubsts::identity_for_item(self.tcx, impl_item_def_id)\n+            .rebase_onto(self.tcx, impl_def_id, trait_substs);\n \n         let Ok(trait_predicates) = self\n             .tcx"}, {"sha": "638c082cc84c771a26a096421df8f961f418dba2", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=7e6506764bf315dee81b403c724d31677b7694f5", "patch": "@@ -2525,7 +2525,7 @@ impl<'tcx> ConstantKind<'tcx> {\n         let parent_substs = if let Some(parent_hir_id) = tcx.hir().opt_parent_id(hir_id)\n             && let Some(parent_did) = parent_hir_id.as_owner()\n         {\n-            InternalSubsts::identity_for_item(tcx, parent_did.to_def_id())\n+            InternalSubsts::identity_for_item(tcx, parent_did)\n         } else {\n             List::empty()\n         };\n@@ -2554,7 +2554,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 Self::Unevaluated(\n                     UnevaluatedConst {\n                         def: def.to_global(),\n-                        substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n+                        substs: InternalSubsts::identity_for_item(tcx, def.did),\n                         promoted: None,\n                     },\n                     ty,"}, {"sha": "bcedae233d93d618a31d45eda2c7003a5c96d477", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=7e6506764bf315dee81b403c724d31677b7694f5", "patch": "@@ -83,7 +83,7 @@ impl<'tcx> Const<'tcx> {\n             None => tcx.mk_const(\n                 ty::UnevaluatedConst {\n                     def: def.to_global(),\n-                    substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n+                    substs: InternalSubsts::identity_for_item(tcx, def.did),\n                 },\n                 ty,\n             ),"}, {"sha": "5457cac5567982eae1a6acfab91cb0810a22723f", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=7e6506764bf315dee81b403c724d31677b7694f5", "patch": "@@ -1385,7 +1385,7 @@ impl<'tcx> OpaqueHiddenType<'tcx> {\n         // lifetimes with 'static and remapping only those used in the\n         // `impl Trait` return type, resulting in the parameters\n         // shifting.\n-        let id_substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+        let id_substs = InternalSubsts::identity_for_item(tcx, def_id);\n         debug!(?id_substs);\n \n         // This zip may have several times the same lifetime in `substs` paired with a different"}, {"sha": "f05b873432d29e0ffece15ca6a80a41a17455e08", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=7e6506764bf315dee81b403c724d31677b7694f5", "patch": "@@ -302,8 +302,8 @@ impl<'tcx> InternalSubsts<'tcx> {\n     }\n \n     /// Creates an `InternalSubsts` that maps each generic parameter to itself.\n-    pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {\n-        Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))\n+    pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: impl Into<DefId>) -> SubstsRef<'tcx> {\n+        Self::for_item(tcx, def_id.into(), |param, _| tcx.mk_param_from_def(param))\n     }\n \n     /// Creates an `InternalSubsts` for generic parameter definitions,"}, {"sha": "8937b78fe34e895f326b5f9ae68cf8e4ea4a243e", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=7e6506764bf315dee81b403c724d31677b7694f5", "patch": "@@ -18,7 +18,7 @@ pub(crate) fn check<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n         let trait_substs = match tcx.trait_of_item(def_id.to_def_id()) {\n             Some(trait_def_id) => {\n                 let trait_substs_count = tcx.generics_of(trait_def_id).count();\n-                &InternalSubsts::identity_for_item(tcx, def_id.to_def_id())[..trait_substs_count]\n+                &InternalSubsts::identity_for_item(tcx, def_id)[..trait_substs_count]\n             }\n             _ => &[],\n         };"}, {"sha": "6d9ad96fa74d4d654e4568713312e8948016e2c8", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6506764bf315dee81b403c724d31677b7694f5/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=7e6506764bf315dee81b403c724d31677b7694f5", "patch": "@@ -296,7 +296,7 @@ fn associated_type_for_impl_trait_in_trait(\n     // Copy type_of of the opaque.\n     trait_assoc_ty.type_of(ty::EarlyBinder(tcx.mk_opaque(\n         opaque_ty_def_id.to_def_id(),\n-        InternalSubsts::identity_for_item(tcx, opaque_ty_def_id.to_def_id()),\n+        InternalSubsts::identity_for_item(tcx, opaque_ty_def_id),\n     )));\n \n     trait_assoc_ty.is_type_alias_impl_trait(false);"}]}