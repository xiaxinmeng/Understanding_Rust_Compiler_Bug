{"sha": "46ef6208f8a3dd0629a9d6c592c2a980e52c9bee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZWY2MjA4ZjhhM2RkMDYyOWE5ZDZjNTkyYzJhOTgwZTUyYzliZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-28T23:38:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-28T23:38:52Z"}, "message": "Auto merge of #44528 - tmnilsson:attr_proc_macro_cfg_process, r=jseyfried\n\nApply attr proc macros before cfg processing\n\nFixes #39336.\nr? @jseyfried", "tree": {"sha": "30759c75386c4fb2dc2e3b082674312c95e7de4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30759c75386c4fb2dc2e3b082674312c95e7de4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46ef6208f8a3dd0629a9d6c592c2a980e52c9bee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46ef6208f8a3dd0629a9d6c592c2a980e52c9bee", "html_url": "https://github.com/rust-lang/rust/commit/46ef6208f8a3dd0629a9d6c592c2a980e52c9bee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46ef6208f8a3dd0629a9d6c592c2a980e52c9bee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c96d40d326b64f6a50f4a902051fe71c4acdc92", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c96d40d326b64f6a50f4a902051fe71c4acdc92", "html_url": "https://github.com/rust-lang/rust/commit/3c96d40d326b64f6a50f4a902051fe71c4acdc92"}, {"sha": "0f97b6b73c647604ad08e475b68058f52c4951c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f97b6b73c647604ad08e475b68058f52c4951c4", "html_url": "https://github.com/rust-lang/rust/commit/0f97b6b73c647604ad08e475b68058f52c4951c4"}], "stats": {"total": 160, "additions": 146, "deletions": 14}, "files": [{"sha": "6e7a8203b61ca76d2c84ea5d7380b6085f72cb61", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/46ef6208f8a3dd0629a9d6c592c2a980e52c9bee/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ef6208f8a3dd0629a9d6c592c2a980e52c9bee/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=46ef6208f8a3dd0629a9d6c592c2a980e52c9bee", "patch": "@@ -308,7 +308,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         err.emit();\n                     }\n \n-                    let item = item\n+                    let item = self.fully_configure(item)\n                         .map_attrs(|mut attrs| { attrs.retain(|a| a.path != \"derive\"); attrs });\n                     let item_with_markers =\n                         add_derived_markers(&mut self.cx, item.span(), &traits, item.clone());\n@@ -400,6 +400,27 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         result\n     }\n \n+    fn fully_configure(&mut self, item: Annotatable) -> Annotatable {\n+        let mut cfg = StripUnconfigured {\n+            should_test: self.cx.ecfg.should_test,\n+            sess: self.cx.parse_sess,\n+            features: self.cx.ecfg.features,\n+        };\n+        // Since the item itself has already been configured by the InvocationCollector,\n+        // we know that fold result vector will contain exactly one element\n+        match item {\n+            Annotatable::Item(item) => {\n+                Annotatable::Item(cfg.fold_item(item).pop().unwrap())\n+            }\n+            Annotatable::TraitItem(item) => {\n+                Annotatable::TraitItem(item.map(|item| cfg.fold_trait_item(item).pop().unwrap()))\n+            }\n+            Annotatable::ImplItem(item) => {\n+                Annotatable::ImplItem(item.map(|item| cfg.fold_impl_item(item).pop().unwrap()))\n+            }\n+        }\n+    }\n+\n     fn expand_invoc(&mut self, invoc: Invocation, ext: Rc<SyntaxExtension>) -> Expansion {\n         let result = match invoc.kind {\n             InvocationKind::Bang { .. } => self.expand_bang_invoc(invoc, ext),\n@@ -740,15 +761,6 @@ struct InvocationCollector<'a, 'b: 'a> {\n     monotonic: bool,\n }\n \n-macro_rules! fully_configure {\n-    ($this:ident, $node:ident, $noop_fold:ident) => {\n-        match $noop_fold($node, &mut $this.cfg).pop() {\n-            Some(node) => node,\n-            None => return SmallVector::new(),\n-        }\n-    }\n-}\n-\n impl<'a, 'b> InvocationCollector<'a, 'b> {\n     fn collect(&mut self, expansion_kind: ExpansionKind, kind: InvocationKind) -> Expansion {\n         let mark = Mark::fresh(self.cx.current_expansion.mark);\n@@ -900,7 +912,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n \n         let (attr, traits, mut item) = self.classify_item(item);\n         if attr.is_some() || !traits.is_empty() {\n-            let item = Annotatable::Item(fully_configure!(self, item, noop_fold_item));\n+            let item = Annotatable::Item(item);\n             return self.collect_attr(attr, traits, item, ExpansionKind::Items).make_items();\n         }\n \n@@ -974,8 +986,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n \n         let (attr, traits, item) = self.classify_item(item);\n         if attr.is_some() || !traits.is_empty() {\n-            let item =\n-                Annotatable::TraitItem(P(fully_configure!(self, item, noop_fold_trait_item)));\n+            let item = Annotatable::TraitItem(P(item));\n             return self.collect_attr(attr, traits, item, ExpansionKind::TraitItems)\n                 .make_trait_items()\n         }\n@@ -995,7 +1006,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n \n         let (attr, traits, item) = self.classify_item(item);\n         if attr.is_some() || !traits.is_empty() {\n-            let item = Annotatable::ImplItem(P(fully_configure!(self, item, noop_fold_impl_item)));\n+            let item = Annotatable::ImplItem(P(item));\n             return self.collect_attr(attr, traits, item, ExpansionKind::ImplItems)\n                 .make_impl_items();\n         }"}, {"sha": "5a28d756df5a55e151d99a51750d506d78bb9326", "filename": "src/test/run-pass-fulldeps/proc-macro/attr-cfg.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/46ef6208f8a3dd0629a9d6c592c2a980e52c9bee/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ef6208f8a3dd0629a9d6c592c2a980e52c9bee/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-cfg.rs?ref=46ef6208f8a3dd0629a9d6c592c2a980e52c9bee", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:attr-cfg.rs\n+// ignore-stage1\n+// revisions: foo bar\n+\n+#![feature(proc_macro)]\n+\n+extern crate attr_cfg;\n+use attr_cfg::attr_cfg;\n+\n+#[attr_cfg]\n+fn outer() -> u8 {\n+    #[cfg(foo)]\n+    fn inner() -> u8 { 1 }\n+\n+    #[cfg(bar)]\n+    fn inner() -> u8 { 2 }\n+\n+    inner()\n+}\n+\n+#[cfg(foo)]\n+fn main() {\n+    assert_eq!(outer(), 1);\n+}\n+\n+#[cfg(bar)]\n+fn main() {\n+    assert_eq!(outer(), 2);\n+}"}, {"sha": "9145c46cfc7c9d3203453cb7b17aaf4a675494cd", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/attr-cfg.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/46ef6208f8a3dd0629a9d6c592c2a980e52c9bee/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ef6208f8a3dd0629a9d6c592c2a980e52c9bee/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-cfg.rs?ref=46ef6208f8a3dd0629a9d6c592c2a980e52c9bee", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+#![feature(proc_macro)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn attr_cfg(args: TokenStream, input: TokenStream) -> TokenStream {\n+    let input_str = input.to_string();\n+\n+    assert_eq!(input_str, \"fn outer() -> u8 {\n+    #[cfg(foo)]\n+    fn inner() -> u8 { 1 }\n+    #[cfg(bar)]\n+    fn inner() -> u8 { 2 }\n+    inner()\n+}\");\n+\n+    input\n+}"}, {"sha": "787a4a470e257df84c3e3ba815572e1adcb2d1de", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-attr-cfg.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/46ef6208f8a3dd0629a9d6c592c2a980e52c9bee/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-attr-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ef6208f8a3dd0629a9d6c592c2a980e52c9bee/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-attr-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-attr-cfg.rs?ref=46ef6208f8a3dd0629a9d6c592c2a980e52c9bee", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+#![feature(proc_macro)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_derive(Foo, attributes(foo))]\n+pub fn derive(input: TokenStream) -> TokenStream {\n+    assert!(!input.to_string().contains(\"#[cfg(any())]\"));\n+    \"\".parse().unwrap()\n+}"}, {"sha": "b94c45248dae524d2b779b968200ea4ac618c7a2", "filename": "src/test/run-pass-fulldeps/proc-macro/derive-attr-cfg.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/46ef6208f8a3dd0629a9d6c592c2a980e52c9bee/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-attr-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ef6208f8a3dd0629a9d6c592c2a980e52c9bee/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-attr-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-attr-cfg.rs?ref=46ef6208f8a3dd0629a9d6c592c2a980e52c9bee", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:derive-attr-cfg.rs\n+// ignore-stage1\n+\n+#![feature(proc_macro)]\n+\n+extern crate derive_attr_cfg;\n+use derive_attr_cfg::Foo;\n+\n+#[derive(Foo)]\n+#[foo]\n+struct S {\n+    #[cfg(any())]\n+    x: i32\n+}\n+\n+fn main() {\n+}"}]}