{"sha": "21f2e9334567b64436f4e6525c5c98adafd16ca2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZjJlOTMzNDU2N2I2NDQzNmY0ZTY1MjVjNWM5OGFkYWZkMTZjYTI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-15T00:57:28Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-21T18:58:24Z"}, "message": "Add terminal_width debugging flag", "tree": {"sha": "0e43136339829eaf74a710779a90f688e26ebb30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e43136339829eaf74a710779a90f688e26ebb30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21f2e9334567b64436f4e6525c5c98adafd16ca2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21f2e9334567b64436f4e6525c5c98adafd16ca2", "html_url": "https://github.com/rust-lang/rust/commit/21f2e9334567b64436f4e6525c5c98adafd16ca2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21f2e9334567b64436f4e6525c5c98adafd16ca2/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9980796d6d29f532e9a49a5b3767285e2a5e2d02", "url": "https://api.github.com/repos/rust-lang/rust/commits/9980796d6d29f532e9a49a5b3767285e2a5e2d02", "html_url": "https://github.com/rust-lang/rust/commit/9980796d6d29f532e9a49a5b3767285e2a5e2d02"}], "stats": {"total": 73, "additions": 50, "deletions": 23}, "files": [{"sha": "89481e9eafde5fd7263f566d893953f8020f4617", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f2e9334567b64436f4e6525c5c98adafd16ca2/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f2e9334567b64436f4e6525c5c98adafd16ca2/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=21f2e9334567b64436f4e6525c5c98adafd16ca2", "patch": "@@ -1292,6 +1292,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"show macro backtraces even for non-local macros\"),\n     teach: bool = (false, parse_bool, [TRACKED],\n         \"show extended diagnostic help\"),\n+    terminal_width: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n+        \"set the current terminal width\"),\n     continue_parse_after_error: bool = (false, parse_bool, [TRACKED],\n         \"attempt to recover from parse errors (experimental)\"),\n     dep_tasks: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "f01883d9634cdf3f501f2df8dd564a4d6865af2d", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f2e9334567b64436f4e6525c5c98adafd16ca2/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f2e9334567b64436f4e6525c5c98adafd16ca2/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=21f2e9334567b64436f4e6525c5c98adafd16ca2", "patch": "@@ -1055,13 +1055,15 @@ fn default_emitter(\n                         Some(source_map.clone()),\n                         short,\n                         sopts.debugging_opts.teach,\n+                        sopts.debugging_opts.terminal_width,\n                     ),\n                     Some(dst) => EmitterWriter::new(\n                         dst,\n                         Some(source_map.clone()),\n                         short,\n                         false, // no teach messages when writing to a buffer\n                         false, // no colors when writing to a buffer\n+                        None,  // no terminal width\n                     ),\n                 };\n                 Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing))\n@@ -1375,7 +1377,7 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n         config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n-            Box::new(EmitterWriter::stderr(color_config, None, short, false))\n+            Box::new(EmitterWriter::stderr(color_config, None, short, false, None))\n         }\n         config::ErrorOutputType::Json { pretty, json_rendered } =>\n             Box::new(JsonEmitter::basic(pretty, json_rendered)),\n@@ -1389,7 +1391,7 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n         config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n-            Box::new(EmitterWriter::stderr(color_config, None, short, false))\n+            Box::new(EmitterWriter::stderr(color_config, None, short, false, None))\n         }\n         config::ErrorOutputType::Json { pretty, json_rendered } =>\n             Box::new(JsonEmitter::basic(pretty, json_rendered)),"}, {"sha": "3d94d51f17ec06fae2f5242a9af3dc1d3389ac37", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21f2e9334567b64436f4e6525c5c98adafd16ca2/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f2e9334567b64436f4e6525c5c98adafd16ca2/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=21f2e9334567b64436f4e6525c5c98adafd16ca2", "patch": "@@ -1135,11 +1135,13 @@ pub fn report_ices_to_stderr_if_any<F: FnOnce() -> R, R>(f: F) -> Result<R, Erro\n             // Thread panicked without emitting a fatal diagnostic\n             eprintln!(\"\");\n \n-            let emitter =\n-                Box::new(errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto,\n-                                                                None,\n-                                                                false,\n-                                                                false));\n+            let emitter = Box::new(errors::emitter::EmitterWriter::stderr(\n+                errors::ColorConfig::Auto,\n+                None,\n+                false,\n+                false,\n+                None,\n+            ));\n             let handler = errors::Handler::with_emitter(true, None, emitter);\n \n             // a .span_bug or .bug call has already printed what"}, {"sha": "77d373e7a8ca83af1c7dee8fa821e93d22eedfb9", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/21f2e9334567b64436f4e6525c5c98adafd16ca2/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f2e9334567b64436f4e6525c5c98adafd16ca2/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=21f2e9334567b64436f4e6525c5c98adafd16ca2", "patch": "@@ -51,9 +51,11 @@ impl HumanReadableErrorType {\n         dst: Box<dyn Write + Send>,\n         source_map: Option<Lrc<SourceMapperDyn>>,\n         teach: bool,\n+        terminal_width: Option<usize>,\n     ) -> EmitterWriter {\n         let (short, color_config) = self.unzip();\n-        EmitterWriter::new(dst, source_map, short, teach, color_config.suggests_using_colors())\n+        let color = color_config.suggests_using_colors();\n+        EmitterWriter::new(dst, source_map, short, teach, color, terminal_width)\n     }\n }\n \n@@ -296,6 +298,7 @@ pub struct EmitterWriter {\n     short_message: bool,\n     teach: bool,\n     ui_testing: bool,\n+    terminal_width: Option<usize>,\n }\n \n #[derive(Debug)]\n@@ -306,18 +309,21 @@ pub struct FileWithAnnotatedLines {\n }\n \n impl EmitterWriter {\n-    pub fn stderr(color_config: ColorConfig,\n-                  source_map: Option<Lrc<SourceMapperDyn>>,\n-                  short_message: bool,\n-                  teach: bool)\n-                  -> EmitterWriter {\n+    pub fn stderr(\n+        color_config: ColorConfig,\n+        source_map: Option<Lrc<SourceMapperDyn>>,\n+        short_message: bool,\n+        teach: bool,\n+        terminal_width: Option<usize>,\n+    ) -> EmitterWriter {\n         let dst = Destination::from_stderr(color_config);\n         EmitterWriter {\n             dst,\n             sm: source_map,\n             short_message,\n             teach,\n             ui_testing: false,\n+            terminal_width,\n         }\n     }\n \n@@ -327,13 +333,15 @@ impl EmitterWriter {\n         short_message: bool,\n         teach: bool,\n         colored: bool,\n+        terminal_width: Option<usize>,\n     ) -> EmitterWriter {\n         EmitterWriter {\n             dst: Raw(dst, colored),\n             sm: source_map,\n             short_message,\n             teach,\n             ui_testing: false,\n+            terminal_width,\n         }\n     }\n \n@@ -1295,7 +1303,9 @@ impl EmitterWriter {\n                     width_offset + annotated_file.multiline_depth + 1\n                 };\n \n-                let column_width = if self.ui_testing {\n+                let column_width = if let Some(width) = self.terminal_width {\n+                    width\n+                } else if self.ui_testing {\n                     140\n                 } else {\n                     term_size::dimensions().map(|(w, _)| w - code_offset).unwrap_or(140)"}, {"sha": "6585633e00af85dda299db9e58629f800d3d0970", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f2e9334567b64436f4e6525c5c98adafd16ca2/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f2e9334567b64436f4e6525c5c98adafd16ca2/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=21f2e9334567b64436f4e6525c5c98adafd16ca2", "patch": "@@ -383,7 +383,7 @@ impl Handler {\n                                       cm: Option<Lrc<SourceMapperDyn>>,\n                                       flags: HandlerFlags)\n                                       -> Handler {\n-        let emitter = Box::new(EmitterWriter::stderr(color_config, cm, false, false));\n+        let emitter = Box::new(EmitterWriter::stderr(color_config, cm, false, false, None));\n         Handler::with_emitter_and_flags(emitter, flags)\n     }\n "}, {"sha": "98362464771e0268e5b1948ad816db87f5d0a870", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21f2e9334567b64436f4e6525c5c98adafd16ca2/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f2e9334567b64436f4e6525c5c98adafd16ca2/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=21f2e9334567b64436f4e6525c5c98adafd16ca2", "patch": "@@ -193,6 +193,7 @@ pub fn new_handler(error_format: ErrorOutputType,\n                     source_map.map(|cm| cm as _),\n                     short,\n                     sessopts.debugging_opts.teach,\n+                    sessopts.debugging_opts.terminal_width,\n                 ).ui_testing(ui_testing)\n             )\n         },"}, {"sha": "8db0eb15929dc96af66f37e20d7ee7b15ab63f55", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f2e9334567b64436f4e6525c5c98adafd16ca2/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f2e9334567b64436f4e6525c5c98adafd16ca2/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=21f2e9334567b64436f4e6525c5c98adafd16ca2", "patch": "@@ -427,7 +427,7 @@ pub fn make_test(s: &str,\n         // Any errors in parsing should also appear when the doctest is compiled for real, so just\n         // send all the errors that libsyntax emits directly into a `Sink` instead of stderr.\n         let cm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-        let emitter = EmitterWriter::new(box io::sink(), None, false, false, false);\n+        let emitter = EmitterWriter::new(box io::sink(), None, false, false, false, None);\n         // FIXME(misdreavus): pass `-Z treat-err-as-bug` to the doctest parser\n         let handler = Handler::with_emitter(false, None, box emitter);\n         let sess = ParseSess::with_span_handler(handler, cm);"}, {"sha": "ada46f7bc5a746f62814866ee3fd37f8565aef33", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21f2e9334567b64436f4e6525c5c98adafd16ca2/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f2e9334567b64436f4e6525c5c98adafd16ca2/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=21f2e9334567b64436f4e6525c5c98adafd16ca2", "patch": "@@ -219,7 +219,7 @@ impl Diagnostic {\n         }\n         let buf = BufWriter::default();\n         let output = buf.clone();\n-        je.json_rendered.new_emitter(Box::new(buf), Some(je.sm.clone()), false)\n+        je.json_rendered.new_emitter(Box::new(buf), Some(je.sm.clone()), false, None)\n             .ui_testing(je.ui_testing).emit_diagnostic(db);\n         let output = Arc::try_unwrap(output.0).unwrap().into_inner().unwrap();\n         let output = String::from_utf8(output).unwrap();"}, {"sha": "963ad2c0b8f11d7bb4109a0f4a18d3ba51986903", "filename": "src/libsyntax/parse/lexer/tests.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/21f2e9334567b64436f4e6525c5c98adafd16ca2/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f2e9334567b64436f4e6525c5c98adafd16ca2/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs?ref=21f2e9334567b64436f4e6525c5c98adafd16ca2", "patch": "@@ -10,7 +10,14 @@ use errors::{Handler, emitter::EmitterWriter};\n use syntax_pos::{BytePos, Span};\n \n fn mk_sess(sm: Lrc<SourceMap>) -> ParseSess {\n-    let emitter = EmitterWriter::new(Box::new(io::sink()), Some(sm.clone()), false, false, false);\n+    let emitter = errors::emitter::EmitterWriter::new(\n+        Box::new(io::sink()),\n+        Some(sm.clone()),\n+        false,\n+        false,\n+        false,\n+        None,\n+    );\n     ParseSess::with_span_handler(Handler::with_emitter(true, None, Box::new(emitter)), sm)\n }\n "}, {"sha": "c472212bc20962b6bc202ea8184b3562e46a65b5", "filename": "src/libsyntax/tests.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/21f2e9334567b64436f4e6525c5c98adafd16ca2/src%2Flibsyntax%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f2e9334567b64436f4e6525c5c98adafd16ca2/src%2Flibsyntax%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftests.rs?ref=21f2e9334567b64436f4e6525c5c98adafd16ca2", "patch": "@@ -144,11 +144,14 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n             println!(\"text: {:?}\", source_map.span_to_snippet(span));\n         }\n \n-        let emitter = EmitterWriter::new(Box::new(Shared { data: output.clone() }),\n-                                        Some(source_map.clone()),\n-                                        false,\n-                                        false,\n-                                        false);\n+        let emitter = EmitterWriter::new(\n+            Box::new(Shared { data: output.clone() }),\n+            Some(source_map.clone()),\n+            false,\n+            false,\n+            false,\n+            None,\n+        );\n         let handler = Handler::with_emitter(true, None, Box::new(emitter));\n         handler.span_err(msp, \"foo\");\n "}]}