{"sha": "8e969cdcefefe6792537dac11855bc5f91904f0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOTY5Y2RjZWZlZmU2NzkyNTM3ZGFjMTE4NTViYzVmOTE5MDRmMGI=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-06-23T17:04:09Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-06-25T09:17:00Z"}, "message": "Updated several clippy_dev messages and types (PR suggestions)\n\nCo-authored-by: Philipp Krones <hello@philkrones.com>", "tree": {"sha": "5674719c69bbd8d38d52efd4076b17701f862cca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5674719c69bbd8d38d52efd4076b17701f862cca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e969cdcefefe6792537dac11855bc5f91904f0b", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmDVnwwACgkQHKDfKvWd\naKX26A/+LjTEdKOP7XA7aS0WQFPki8ektKYRJBTRz0baVMKgZT9TVflfTSc7kea5\nQQvF+NV3AELaZ8u9Gb5Ii7WxNSaslDZ7fMokUMTKdTSVfY1a7tD0hJktvB2lZyGD\n+5S+817f11IsTyyeAs/7dhfnmdV2FEVewkXr4bHtZxN2dkqh06YARPN8IOp/7Kzs\nu93aoeFnFs0TxKQiDcPkoaZ3To5v7hcJVJfr1gH4l4jm3pBh9Fqg8Swpda9+v2wy\nTqFgodODepZRagw0It7nF3/DLr3g9YRt2dp360rrOxOdo/08foY/KKmafFs2IwVU\n1pF8lmvEsFCT8Lv1sRpj4rhpX9kXk60Q/9kERq7eWbX6JhysVCKhDq6r5EQ6URRF\nuX5tEZy/9AMlmQbGfZmilPr45jrkusoulwHlfZM/0dwiKhStF/fan0bDf5B67EzX\n4IcPdXe2Ct2FnCtUCgFLVnhyBECqhj2xBZqyjo9THeKilemCZ1HUjNxJ4QJJQ1BD\nzlwAt6vqio1xaCOAdc4ECoHSeUNi5OSwJopiYth6tiqb7KVuL+RyuvP4V7Phdw/k\nnIgfx9YrDQzIOUZDWm4f8GmPtoVhXtO/ySewLaL+6ZYbejtTm9SJj1SDh0m9R/R3\noUzcqgL3jbFKf56VY+nbrYbFqOX+Y/jKxrxscQOSUQzQVml/bYM=\n=FIlP\n-----END PGP SIGNATURE-----", "payload": "tree 5674719c69bbd8d38d52efd4076b17701f862cca\nparent f0fa3636536f3843fee2315fc062aa022479fdee\nauthor xFrednet <xFrednet@gmail.com> 1624467849 +0200\ncommitter flip1995 <philipp.krones@embecosm.com> 1624612620 +0200\n\nUpdated several clippy_dev messages and types (PR suggestions)\n\nCo-authored-by: Philipp Krones <hello@philkrones.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e969cdcefefe6792537dac11855bc5f91904f0b", "html_url": "https://github.com/rust-lang/rust/commit/8e969cdcefefe6792537dac11855bc5f91904f0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e969cdcefefe6792537dac11855bc5f91904f0b/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0fa3636536f3843fee2315fc062aa022479fdee", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0fa3636536f3843fee2315fc062aa022479fdee", "html_url": "https://github.com/rust-lang/rust/commit/f0fa3636536f3843fee2315fc062aa022479fdee"}], "stats": {"total": 112, "additions": 41, "deletions": 71}, "files": [{"sha": "f27b69a195b4a2de620f296f5eaeace5f57b53cb", "filename": "clippy_dev/src/setup/git_hook.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8e969cdcefefe6792537dac11855bc5f91904f0b/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e969cdcefefe6792537dac11855bc5f91904f0b/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs?ref=8e969cdcefefe6792537dac11855bc5f91904f0b", "patch": "@@ -10,7 +10,7 @@ const HOOK_SOURCE_FILE: &str = \"util/etc/pre-commit.sh\";\n const HOOK_TARGET_FILE: &str = \".git/hooks/pre-commit\";\n \n pub fn install_hook(force_override: bool) {\n-    if check_precondition(force_override).is_err() {\n+    if !check_precondition(force_override) {\n         return;\n     }\n \n@@ -25,52 +25,55 @@ pub fn install_hook(force_override: bool) {\n     // include the `execute` permission.\n     match fs::copy(HOOK_SOURCE_FILE, HOOK_TARGET_FILE) {\n         Ok(_) => {\n-            println!(\"note: the hook can be removed with `cargo dev remove git-hook`\");\n-            println!(\"Git hook successfully installed :)\");\n+            println!(\"info: the hook can be removed with `cargo dev remove git-hook`\");\n+            println!(\"git hook successfully installed\");\n         },\n-        Err(err) => println!(\n+        Err(err) => eprintln!(\n             \"error: unable to copy `{}` to `{}` ({})\",\n             HOOK_SOURCE_FILE, HOOK_TARGET_FILE, err\n         ),\n     }\n }\n \n-fn check_precondition(force_override: bool) -> Result<(), ()> {\n+fn check_precondition(force_override: bool) -> bool {\n     // Make sure that we can find the git repository\n     let git_path = Path::new(REPO_GIT_DIR);\n     if !git_path.exists() || !git_path.is_dir() {\n-        println!(\"error: clippy_dev was unable to find the `.git` directory\");\n-        return Err(());\n+        eprintln!(\"error: clippy_dev was unable to find the `.git` directory\");\n+        return false;\n     }\n \n     // Make sure that we don't override an existing hook by accident\n     let path = Path::new(HOOK_TARGET_FILE);\n     if path.exists() {\n-        if force_override || super::ask_yes_no_question(\"Do you want to override the existing pre-commit hook it?\") {\n+        if force_override {\n             return delete_git_hook_file(path);\n         }\n-        return Err(());\n+\n+        eprintln!(\"error: there is already a pre-commit hook installed\");\n+        println!(\"info: use the `--force-override` flag to override the existing hook\");\n+        return false;\n     }\n \n-    Ok(())\n+    true\n }\n \n pub fn remove_hook() {\n     let path = Path::new(HOOK_TARGET_FILE);\n     if path.exists() {\n-        if delete_git_hook_file(path).is_ok() {\n-            println!(\"Git hook successfully removed :)\");\n+        if delete_git_hook_file(path) {\n+            println!(\"git hook successfully removed\");\n         }\n     } else {\n-        println!(\"No pre-commit hook was found. You're good to go :)\");\n+        println!(\"no pre-commit hook was found\");\n     }\n }\n \n-fn delete_git_hook_file(path: &Path) -> Result<(), ()> {\n-    if fs::remove_file(path).is_err() {\n-        println!(\"error: unable to delete existing pre-commit git hook\");\n-        Err(())\n+fn delete_git_hook_file(path: &Path) -> bool {\n+    if let Err(err) = fs::remove_file(path) {\n+        eprintln!(\"error: unable to delete existing pre-commit git hook ({})\", err);\n+        false\n     } else {\n-        Ok(())\n+        true\n     }\n }"}, {"sha": "bf741e6d1217f98b25b1168ba8ede7df757440ff", "filename": "clippy_dev/src/setup/intellij.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8e969cdcefefe6792537dac11855bc5f91904f0b/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e969cdcefefe6792537dac11855bc5f91904f0b/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs?ref=8e969cdcefefe6792537dac11855bc5f91904f0b", "patch": "@@ -5,8 +5,8 @@ use std::path::{Path, PathBuf};\n \n // This module takes an absolute path to a rustc repo and alters the dependencies to point towards\n // the respective rustc subcrates instead of using extern crate xyz.\n-// This allows rust analyzer to analyze rustc internals and show proper information inside clippy\n-// code. See https://github.com/rust-analyzer/rust-analyzer/issues/3517 and https://github.com/rust-lang/rust-clippy/issues/5514 for details\n+// This allows IntelliJ to analyze rustc internals and show proper information inside Clippy\n+// code. See https://github.com/rust-lang/rust-clippy/issues/5514 for details\n \n const RUSTC_PATH_SECTION: &str = \"[target.'cfg(NOT_A_PLATFORM)'.dependencies]\";\n const DEPENDENCIES_SECTION: &str = \"[dependencies]\";\n@@ -75,16 +75,16 @@ fn check_and_get_rustc_dir(rustc_path: &str) -> Result<PathBuf, ()> {\n     }\n \n     if !path.is_dir() {\n-        eprintln!(\"error: the given path is a file and not a directory\");\n+        eprintln!(\"error: the given path is not a directory\");\n         return Err(());\n     }\n \n     Ok(path)\n }\n \n fn inject_deps_into_project(rustc_source_dir: &Path, project: &ClippyProjectInfo) -> Result<(), ()> {\n-    let cargo_content = read_project_file(project.cargo_file, \"Cargo.toml\", project.name)?;\n-    let lib_content = read_project_file(project.lib_rs_file, \"lib.rs\", project.name)?;\n+    let cargo_content = read_project_file(project.cargo_file)?;\n+    let lib_content = read_project_file(project.lib_rs_file)?;\n \n     if inject_deps_into_manifest(rustc_source_dir, project.cargo_file, &cargo_content, &lib_content).is_err() {\n         eprintln!(\n@@ -100,23 +100,17 @@ fn inject_deps_into_project(rustc_source_dir: &Path, project: &ClippyProjectInfo\n /// `clippy_dev` expects to be executed in the root directory of Clippy. This function\n /// loads the given file or returns an error. Having it in this extra function ensures\n /// that the error message looks nice.\n-fn read_project_file(file_path: &str, file_name: &str, project: &str) -> Result<String, ()> {\n+fn read_project_file(file_path: &str) -> Result<String, ()> {\n     let path = Path::new(file_path);\n     if !path.exists() {\n-        eprintln!(\n-            \"error: unable to find the `{}` file for the project {}\",\n-            file_name, project\n-        );\n+        eprintln!(\"error: unable to find the file `{}`\", file_path);\n         return Err(());\n     }\n \n     match fs::read_to_string(path) {\n         Ok(content) => Ok(content),\n         Err(err) => {\n-            println!(\n-                \"error: the `{}` file for the project {} could not be read ({})\",\n-                file_name, project, err\n-            );\n+            eprintln!(\"error: the file `{}` could not be read ({})\", file_path, err);\n             Err(())\n         },\n     }\n@@ -142,8 +136,8 @@ fn inject_deps_into_manifest(\n         // only take dependencies starting with `rustc_`\n         .filter(|line| line.starts_with(\"extern crate rustc_\"))\n         // we have something like \"extern crate foo;\", we only care about the \"foo\"\n-        //              \u2193          \u2193\n         // extern crate rustc_middle;\n+        //              ^^^^^^^^^^^^\n         .map(|s| &s[13..(s.len() - 1)]);\n \n     let new_deps = extern_crates.map(|dep| {\n@@ -180,23 +174,24 @@ fn inject_deps_into_manifest(\n \n pub fn remove_rustc_src() {\n     for project in CLIPPY_PROJECTS {\n-        // We don't care about the result here as we want to go through all\n-        // dependencies either way. Any info and error message will be issued by\n-        // the removal code itself.\n-        let _ = remove_rustc_src_from_project(project);\n+        remove_rustc_src_from_project(project);\n     }\n }\n \n-fn remove_rustc_src_from_project(project: &ClippyProjectInfo) -> Result<(), ()> {\n-    let mut cargo_content = read_project_file(project.cargo_file, \"Cargo.toml\", project.name)?;\n+fn remove_rustc_src_from_project(project: &ClippyProjectInfo) -> bool {\n+    let mut cargo_content = if let Ok(content) = read_project_file(project.cargo_file) {\n+        content\n+    } else {\n+        return false;\n+    };\n     let section_start = if let Some(section_start) = cargo_content.find(RUSTC_PATH_SECTION) {\n         section_start\n     } else {\n         println!(\n             \"info: dependencies could not be found in `{}` for {}, skipping file\",\n             project.cargo_file, project.name\n         );\n-        return Ok(());\n+        return true;\n     };\n \n     let end_point = if let Some(end_point) = cargo_content.find(DEPENDENCIES_SECTION) {\n@@ -206,7 +201,7 @@ fn remove_rustc_src_from_project(project: &ClippyProjectInfo) -> Result<(), ()>\n             \"error: the end of the rustc dependencies section could not be found in `{}`\",\n             project.cargo_file\n         );\n-        return Err(());\n+        return false;\n     };\n \n     cargo_content.replace_range(section_start..end_point, \"\");\n@@ -215,14 +210,14 @@ fn remove_rustc_src_from_project(project: &ClippyProjectInfo) -> Result<(), ()>\n         Ok(mut file) => {\n             file.write_all(cargo_content.as_bytes()).unwrap();\n             println!(\"info: successfully removed dependencies inside {}\", project.cargo_file);\n-            Ok(())\n+            true\n         },\n         Err(err) => {\n             eprintln!(\n                 \"error: unable to open file `{}` to remove rustc dependencies for {} ({})\",\n                 project.cargo_file, project.name, err\n             );\n-            Err(())\n+            false\n         },\n     }\n }"}, {"sha": "3834f5a18421a091ffe4e1d70b566b5e3bdea79c", "filename": "clippy_dev/src/setup/mod.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8e969cdcefefe6792537dac11855bc5f91904f0b/clippy_dev%2Fsrc%2Fsetup%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e969cdcefefe6792537dac11855bc5f91904f0b/clippy_dev%2Fsrc%2Fsetup%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fmod.rs?ref=8e969cdcefefe6792537dac11855bc5f91904f0b", "patch": "@@ -1,30 +1,2 @@\n-use std::io::{self, Write};\n pub mod git_hook;\n pub mod intellij;\n-\n-/// This function will asked the user the given question and wait for user input\n-/// either `true` for yes and `false` for no.\n-fn ask_yes_no_question(question: &str) -> bool {\n-    // This code was proudly stolen from rusts bootstrapping tool.\n-\n-    fn ask_with_result(question: &str) -> io::Result<bool> {\n-        let mut input = String::new();\n-        Ok(loop {\n-            print!(\"{}: [y/N] \", question);\n-            io::stdout().flush()?;\n-            input.clear();\n-            io::stdin().read_line(&mut input)?;\n-            break match input.trim().to_lowercase().as_str() {\n-                \"y\" | \"yes\" => true,\n-                \"n\" | \"no\" | \"\" => false,\n-                _ => {\n-                    println!(\"error: unrecognized option '{}'\", input.trim());\n-                    println!(\"note: press Ctrl+C to exit\");\n-                    continue;\n-                },\n-            };\n-        })\n-    }\n-\n-    ask_with_result(question).unwrap_or_default()\n-}"}]}