{"sha": "e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NjFiODEzN2Y4ZjcyNzcxNDdlM2VjOGVjMGI3ZjBmMzFkMzJkMGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-19T07:23:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-19T07:23:41Z"}, "message": "Auto merge of #80180 - JohnTitor:rollup-a31s996, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #78083 (Stabilize or_insert_with_key)\n - #79211 (Add the \"async\" and \"promise\" doc aliases to `core::future::Future`)\n - #79612 (Switch some links in compiler/ to intra-doc links)\n - #80068 (Add `&mut` as an alias for 'reference' primitive)\n - #80129 (docs: Edit rustc_ast::token::Token)\n - #80133 (Suppress `CONST_ITEM_MUTATION` lint if a dereference occurs anywhere)\n - #80155 (Fix typo)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d929dd3bd4250c409cd6e5d06e5afef1d859fa5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d929dd3bd4250c409cd6e5d06e5afef1d859fa5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b", "html_url": "https://github.com/rust-lang/rust/commit/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d9ada686fb42bd036b3a4916526f413f1d5d1f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9ada686fb42bd036b3a4916526f413f1d5d1f8", "html_url": "https://github.com/rust-lang/rust/commit/3d9ada686fb42bd036b3a4916526f413f1d5d1f8"}, {"sha": "b27c78390c4c2cce26b3a48646895e09d0e9420d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b27c78390c4c2cce26b3a48646895e09d0e9420d", "html_url": "https://github.com/rust-lang/rust/commit/b27c78390c4c2cce26b3a48646895e09d0e9420d"}], "stats": {"total": 74, "additions": 42, "deletions": 32}, "files": [{"sha": "a74464937c8b4cb503cbf4e1ede8ef316f8ef4f2", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b", "patch": "@@ -434,7 +434,7 @@ impl Token {\n             || self == &OpenDelim(Paren)\n     }\n \n-    /// Returns `true` if the token is any literal\n+    /// Returns `true` if the token is any literal.\n     pub fn is_lit(&self) -> bool {\n         match self.kind {\n             Literal(..) => true,"}, {"sha": "09b91083a6347c61238198d399491ffec892891c", "filename": "compiler/rustc_data_structures/src/graph/iterate/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs?ref=e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b", "patch": "@@ -149,8 +149,6 @@ struct Event<N> {\n /// those successors), we will pop off that node's `Settled` event.\n ///\n /// [CLR]: https://en.wikipedia.org/wiki/Introduction_to_Algorithms\n-/// [`NodeStatus`]: ./enum.NodeStatus.html\n-/// [`TriColorVisitor::node_examined`]: ./trait.TriColorVisitor.html#method.node_examined\n pub struct TriColorDepthFirstSearch<'graph, G>\n where\n     G: ?Sized + DirectedGraph + WithNumNodes + WithSuccessors,"}, {"sha": "01cd1cec9245563d6d1ff44c5e973d98e96fcd77", "filename": "compiler/rustc_data_structures/src/sorted_map/index_map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs?ref=e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b", "patch": "@@ -24,8 +24,7 @@ use rustc_index::vec::{Idx, IndexVec};\n /// to insert into the middle of the sorted array. Users should avoid mutating this data structure\n /// in-place.\n ///\n-/// [`IndexVec`]: ../../rustc_index/vec/struct.IndexVec.html\n-/// [`SortedMap`]: ../sorted_map/struct.SortedMap.html\n+/// [`SortedMap`]: super::SortedMap\n #[derive(Clone, Debug)]\n pub struct SortedIndexMultiMap<I: Idx, K, V> {\n     /// The elements of the map in insertion order."}, {"sha": "06e8442d47539841fb20fc776be7c241e3e43a54", "filename": "compiler/rustc_data_structures/src/sso/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs?ref=e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b", "patch": "@@ -40,7 +40,7 @@ const SSO_ARRAY_SIZE: usize = 8;\n //   into_keys/into_values (unstable)\n //   all raw_entry-related\n //   PartialEq/Eq (requires sorting the array)\n-//   Entry::or_insert_with_key (unstable)\n+//   Entry::or_insert_with_key\n //   Vacant/Occupied entries and related\n //\n // FIXME: In HashMap most methods accepting key reference"}, {"sha": "e61476bf23e1e5f0d1046ec093d68808a8584878", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b", "patch": "@@ -138,8 +138,6 @@ impl Diagnostic {\n     ///\n     /// This span is *not* considered a [\"primary span\"][`MultiSpan`]; only\n     /// the `Span` supplied when creating the diagnostic is primary.\n-    ///\n-    /// [`MultiSpan`]: ../rustc_span/struct.MultiSpan.html\n     pub fn span_label<T: Into<String>>(&mut self, span: Span, label: T) -> &mut Self {\n         self.span.push_span_label(span, label.into());\n         self"}, {"sha": "0b501da7cd97515db84dfe93c6215e581f4cff07", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b", "patch": "@@ -27,7 +27,6 @@ pub const WORD_BITS: usize = WORD_BYTES * 8;\n /// to or greater than the domain size. All operations that involve two bitsets\n /// will panic if the bitsets have differing domain sizes.\n ///\n-/// [`GrowableBitSet`]: struct.GrowableBitSet.html\n #[derive(Eq, PartialEq, Decodable, Encodable)]\n pub struct BitSet<T> {\n     domain_size: usize,"}, {"sha": "b4dd0fc2449ecb7ffbe653bcb4b6a4f6403df5c2", "filename": "compiler/rustc_lexer/src/unescape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs?ref=e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b", "patch": "@@ -201,7 +201,7 @@ fn scan_escape(first_char: char, chars: &mut Chars<'_>, mode: Mode) -> Result<ch\n                 return Err(EscapeError::NoBraceInUnicodeEscape);\n             }\n \n-            // First characrer must be a hexadecimal digit.\n+            // First character must be a hexadecimal digit.\n             let mut n_digits = 1;\n             let mut value: u32 = match chars.next().ok_or(EscapeError::UnclosedUnicodeEscape)? {\n                 '_' => return Err(EscapeError::LeadingUnderscoreUnicodeEscape),"}, {"sha": "85aaff5ab7293ba0ab60e23110f5e68148c70aac", "filename": "compiler/rustc_mir/src/dataflow/impls/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fliveness.rs?ref=e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b", "patch": "@@ -11,7 +11,7 @@ use crate::dataflow::{AnalysisDomain, Backward, GenKill, GenKillAnalysis};\n /// exist. See [this `mir-dataflow` test][flow-test] for an example. You almost never want to use\n /// this analysis without also looking at the results of [`MaybeBorrowedLocals`].\n ///\n-/// [`MaybeBorrowedLocals`]: ../struct.MaybeBorrowedLocals.html\n+/// [`MaybeBorrowedLocals`]: super::MaybeBorrowedLocals\n /// [flow-test]: https://github.com/rust-lang/rust/blob/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src/test/ui/mir-dataflow/liveness-ptr.rs\n /// [liveness]: https://en.wikipedia.org/wiki/Live_variable_analysis\n pub struct MaybeLiveLocals;"}, {"sha": "e2d50ba034ad3f65f80633fed0e848a40c90a72f", "filename": "compiler/rustc_mir/src/transform/check_const_item_mutation.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs?ref=e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b", "patch": "@@ -66,12 +66,14 @@ impl<'a, 'tcx> ConstMutationChecker<'a, 'tcx> {\n         location: Location,\n         decorate: impl for<'b> FnOnce(LintDiagnosticBuilder<'b>) -> DiagnosticBuilder<'b>,\n     ) {\n-        // Don't lint on borrowing/assigning to a dereference\n-        // e.g:\n+        // Don't lint on borrowing/assigning when a dereference is involved.\n+        // If we 'leave' the temporary via a dereference, we must\n+        // be modifying something else\n         //\n         // `unsafe { *FOO = 0; *BAR.field = 1; }`\n         // `unsafe { &mut *FOO }`\n-        if !matches!(place.projection.last(), Some(PlaceElem::Deref)) {\n+        // `unsafe { (*ARRAY)[0] = val; }\n+        if !place.projection.iter().any(|p| matches!(p, PlaceElem::Deref)) {\n             let source_info = self.body.source_info(location);\n             let lint_root = self.body.source_scopes[source_info.scope]\n                 .local_data"}, {"sha": "6cc8813bc523988fb554c7be51c0487e0e83ad19", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b", "patch": "@@ -116,15 +116,16 @@ impl<'a, K: Ord, V> Entry<'a, K, V> {\n         }\n     }\n \n-    #[unstable(feature = \"or_insert_with_key\", issue = \"71024\")]\n-    /// Ensures a value is in the entry by inserting, if empty, the result of the default function,\n-    /// which takes the key as its argument, and returns a mutable reference to the value in the\n-    /// entry.\n+    /// Ensures a value is in the entry by inserting, if empty, the result of the default function.\n+    /// This method allows for generating key-derived values for insertion by providing the default\n+    /// function a reference to the key that was moved during the `.entry(key)` method call.\n+    ///\n+    /// The reference to the moved key is provided so that cloning or copying the key is\n+    /// unnecessary, unlike with `.or_insert_with(|| ... )`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(or_insert_with_key)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map: BTreeMap<&str, usize> = BTreeMap::new();\n@@ -134,6 +135,7 @@ impl<'a, K: Ord, V> Entry<'a, K, V> {\n     /// assert_eq!(map[\"poneyland\"], 9);\n     /// ```\n     #[inline]\n+    #[stable(feature = \"or_insert_with_key\", since = \"1.50.0\")]\n     pub fn or_insert_with_key<F: FnOnce(&K) -> V>(self, default: F) -> &'a mut V {\n         match self {\n             Occupied(entry) => entry.into_mut(),"}, {"sha": "ac72345dad425fcc604df457130eab703b242225", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b", "patch": "@@ -2219,14 +2219,16 @@ impl<'a, K, V> Entry<'a, K, V> {\n         }\n     }\n \n-    /// Ensures a value is in the entry by inserting, if empty, the result of the default function,\n-    /// which takes the key as its argument, and returns a mutable reference to the value in the\n-    /// entry.\n+    /// Ensures a value is in the entry by inserting, if empty, the result of the default function.\n+    /// This method allows for generating key-derived values for insertion by providing the default\n+    /// function a reference to the key that was moved during the `.entry(key)` method call.\n+    ///\n+    /// The reference to the moved key is provided so that cloning or copying the key is\n+    /// unnecessary, unlike with `.or_insert_with(|| ... )`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(or_insert_with_key)]\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map: HashMap<&str, usize> = HashMap::new();\n@@ -2236,7 +2238,7 @@ impl<'a, K, V> Entry<'a, K, V> {\n     /// assert_eq!(map[\"poneyland\"], 9);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"or_insert_with_key\", issue = \"71024\")]\n+    #[stable(feature = \"or_insert_with_key\", since = \"1.50.0\")]\n     pub fn or_insert_with_key<F: FnOnce(&K) -> V>(self, default: F) -> &'a mut V {\n         match self {\n             Occupied(entry) => entry.into_mut(),"}, {"sha": "417a54e9dffb0dc73ff44aac50143640be2db6a3", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b", "patch": "@@ -2196,6 +2196,7 @@ mod where_keyword {}\n \n // 2018 Edition keywords\n \n+#[doc(alias = \"promise\")]\n #[doc(keyword = \"async\")]\n //\n /// Return a [`Future`] instead of blocking the current thread."}, {"sha": "c077512f80a86fa70df3a5a8b0620141f0f0b610", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b", "patch": "@@ -924,6 +924,7 @@ mod prim_usize {}\n \n #[doc(primitive = \"reference\")]\n #[doc(alias = \"&\")]\n+#[doc(alias = \"&mut\")]\n //\n /// References, both shared and mutable.\n ///"}, {"sha": "4bf5e0a9e212a2e38f0627c6e4dc7ca71b001220", "filename": "src/test/ui/lint/lint-const-item-mutation.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.rs?ref=e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b", "patch": "@@ -30,6 +30,8 @@ const MUTABLE: Mutable = Mutable { msg: \"\" };\n const MUTABLE2: Mutable2 = Mutable2 { msg: \"\", other: String::new() };\n const VEC: Vec<i32> = Vec::new();\n const PTR: *mut () = 1 as *mut _;\n+const PTR_TO_ARRAY: *mut [u32; 4] = 0x12345678 as _;\n+const ARRAY_OF_PTR: [*mut u32; 1] = [1 as *mut _];\n \n fn main() {\n     ARRAY[0] = 5; //~ WARN attempting to modify\n@@ -55,4 +57,10 @@ fn main() {\n     // Test that we don't warn when converting a raw pointer\n     // into a mutable reference\n     unsafe { &mut *PTR };\n+\n+    // Test that we don't warn when there's a dereference involved.\n+    // If we ever 'leave' the const via a deference, we're going\n+    // to end up modifying something other than the temporary\n+    unsafe { (*PTR_TO_ARRAY)[0] = 1 };\n+    unsafe { *ARRAY_OF_PTR[0] = 25; }\n }"}, {"sha": "74505eeb987c6613ad82e514dedfcb5413ab50a2", "filename": "src/test/ui/lint/lint-const-item-mutation.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr?ref=e461b8137f8f7277147e3ec8ec0b7f0f31d32d0b", "patch": "@@ -1,5 +1,5 @@\n warning: attempting to modify a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:35:5\n+  --> $DIR/lint-const-item-mutation.rs:37:5\n    |\n LL |     ARRAY[0] = 5;\n    |     ^^^^^^^^^^^^\n@@ -13,7 +13,7 @@ LL | const ARRAY: [u8; 1] = [25];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: attempting to modify a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:36:5\n+  --> $DIR/lint-const-item-mutation.rs:38:5\n    |\n LL |     MY_STRUCT.field = false;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: attempting to modify a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:37:5\n+  --> $DIR/lint-const-item-mutation.rs:39:5\n    |\n LL |     MY_STRUCT.inner_array[0] = 'b';\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -39,7 +39,7 @@ LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:38:5\n+  --> $DIR/lint-const-item-mutation.rs:40:5\n    |\n LL |     MY_STRUCT.use_mut();\n    |     ^^^^^^^^^^^^^^^^^^^\n@@ -58,7 +58,7 @@ LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:39:5\n+  --> $DIR/lint-const-item-mutation.rs:41:5\n    |\n LL |     &mut MY_STRUCT;\n    |     ^^^^^^^^^^^^^^\n@@ -72,7 +72,7 @@ LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:40:5\n+  --> $DIR/lint-const-item-mutation.rs:42:5\n    |\n LL |     (&mut MY_STRUCT).use_mut();\n    |     ^^^^^^^^^^^^^^^^\n@@ -86,7 +86,7 @@ LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: attempting to modify a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:52:5\n+  --> $DIR/lint-const-item-mutation.rs:54:5\n    |\n LL |     MUTABLE2.msg = \"wow\";\n    |     ^^^^^^^^^^^^^^^^^^^^\n@@ -99,7 +99,7 @@ LL | const MUTABLE2: Mutable2 = Mutable2 { msg: \"\", other: String::new() };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:53:5\n+  --> $DIR/lint-const-item-mutation.rs:55:5\n    |\n LL |     VEC.push(0);\n    |     ^^^^^^^^^^^"}]}