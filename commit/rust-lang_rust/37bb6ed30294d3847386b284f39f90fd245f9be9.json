{"sha": "37bb6ed30294d3847386b284f39f90fd245f9be9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YmI2ZWQzMDI5NGQzODQ3Mzg2YjI4NGYzOWY5MGZkMjQ1ZjliZTk=", "commit": {"author": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-07-21T08:33:20Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-21T16:55:08Z"}, "message": "Clarify the std::vec::Vec docs regarding capacity", "tree": {"sha": "3a40ae7f0255e207c4fdfef2c8fcbf5c581b394d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a40ae7f0255e207c4fdfef2c8fcbf5c581b394d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37bb6ed30294d3847386b284f39f90fd245f9be9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37bb6ed30294d3847386b284f39f90fd245f9be9", "html_url": "https://github.com/rust-lang/rust/commit/37bb6ed30294d3847386b284f39f90fd245f9be9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37bb6ed30294d3847386b284f39f90fd245f9be9/comments", "author": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36e1f2db301d33fd0efaa093c5a190a3879ccc93", "url": "https://api.github.com/repos/rust-lang/rust/commits/36e1f2db301d33fd0efaa093c5a190a3879ccc93", "html_url": "https://github.com/rust-lang/rust/commit/36e1f2db301d33fd0efaa093c5a190a3879ccc93"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "d028be50ee1796c4cb825c29f07241b1492fe4fb", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/37bb6ed30294d3847386b284f39f90fd245f9be9/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37bb6ed30294d3847386b284f39f90fd245f9be9/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=37bb6ed30294d3847386b284f39f90fd245f9be9", "patch": "@@ -51,10 +51,27 @@ pub static PTR_MARKER: u8 = 0;\n /// The `vec!` macro is provided to make initialization more convenient:\n ///\n /// ```rust\n-/// let mut vec = vec!(1i, 2i, 3i);\n+/// let mut vec = vec![1i, 2i, 3i];\n /// vec.push(4);\n-/// assert_eq!(vec, vec!(1, 2, 3, 4));\n+/// assert_eq!(vec, vec![1, 2, 3, 4]);\n /// ```\n+///\n+/// # Capacity and reallocation\n+///\n+/// The capacity of a vector is the amount of space allocated for any future\n+/// elements that will be added onto the vector. This is not to be confused\n+/// with the *length* of a vector, which specifies the number of actual\n+/// elements within the vector. If a vector's length exceeds its capacity,\n+/// its capacity will automatically be increased, but its elements will\n+/// have to be reallocated.\n+///\n+/// For example, a vector with capacity 10 and length 0 would be an empty\n+/// vector with space for 10 more elements. Pushing 10 or fewer elements onto\n+/// the vector will not change its capacity or cause reallocation to occur.\n+/// However, if the vector's length is increased to 11, it will have to\n+/// reallocate, which can be slow. For this reason, it is recommended\n+/// to use `Vec::with_capacity` whenever possible to specify how big the vector\n+/// is expected to get.\n #[unsafe_no_drop_flag]\n pub struct Vec<T> {\n     len: uint,\n@@ -87,11 +104,28 @@ impl<T> Vec<T> {\n     /// The vector will be able to hold exactly `capacity` elements without\n     /// reallocating. If `capacity` is 0, the vector will not allocate.\n     ///\n+    /// It is important to note that this function does not specify the\n+    /// *length* of the returned vector, but only the *capacity*. (For an\n+    /// explanation of the difference between length and capacity, see\n+    /// the main `Vec` docs above, 'Capacity and reallocation'.) To create\n+    /// a vector of a given length, use `Vec::from_elem` or `Vec::from_fn`.\n+    ///\n     /// # Example\n     ///\n     /// ```rust\n     /// # use std::vec::Vec;\n-    /// let vec: Vec<int> = Vec::with_capacity(10);\n+    /// let mut vec: Vec<int> = Vec::with_capacity(10);\n+    ///\n+    /// // The vector contains no items, even though it has capacity for more\n+    /// assert_eq!(vec.len(), 0);\n+    ///\n+    /// // These are all done without reallocating...\n+    /// for i in range(0u, 10) {\n+    ///     vec.push(i);\n+    /// }\n+    ///\n+    /// // ...but this may make the vector reallocate\n+    /// vec.push(11);\n     /// ```\n     #[inline]\n     pub fn with_capacity(capacity: uint) -> Vec<T> {"}]}