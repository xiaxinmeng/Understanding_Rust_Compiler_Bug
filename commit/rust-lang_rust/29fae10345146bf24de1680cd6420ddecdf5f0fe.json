{"sha": "29fae10345146bf24de1680cd6420ddecdf5f0fe", "node_id": "C_kwDOAAsO6NoAKDI5ZmFlMTAzNDUxNDZiZjI0ZGUxNjgwY2Q2NDIwZGRlY2RmNWYwZmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-03T07:23:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-03T07:23:48Z"}, "message": "Auto merge of #12451 - TimNN:double-dollar, r=Veykril\n\nfeat: Support `$$` in macros.\n\nThe implementation mirrors what `rustc` currently does [1]. Part of #11952.\n\n\\[1]: https://github.com/rust-lang/rust/blob/0595ea1d12cf745e0a672d05341429ecb0917e66/compiler/rustc_expand/src/mbe/quoted.rs#L230-L241", "tree": {"sha": "e5de5e2511721edd7f66ca9cf3858777d35c8179", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5de5e2511721edd7f66ca9cf3858777d35c8179"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29fae10345146bf24de1680cd6420ddecdf5f0fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29fae10345146bf24de1680cd6420ddecdf5f0fe", "html_url": "https://github.com/rust-lang/rust/commit/29fae10345146bf24de1680cd6420ddecdf5f0fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29fae10345146bf24de1680cd6420ddecdf5f0fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1968a38b91cba4ae6f45b7cadfa53cffb614f4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1968a38b91cba4ae6f45b7cadfa53cffb614f4d", "html_url": "https://github.com/rust-lang/rust/commit/d1968a38b91cba4ae6f45b7cadfa53cffb614f4d"}, {"sha": "40bfb29e503e36602aceba512609dd797ed88ac4", "url": "https://api.github.com/repos/rust-lang/rust/commits/40bfb29e503e36602aceba512609dd797ed88ac4", "html_url": "https://github.com/rust-lang/rust/commit/40bfb29e503e36602aceba512609dd797ed88ac4"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "93d2f648ae29794467b922f779562280b28a5d33", "filename": "crates/hir-def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/29fae10345146bf24de1680cd6420ddecdf5f0fe/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29fae10345146bf24de1680cd6420ddecdf5f0fe/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=29fae10345146bf24de1680cd6420ddecdf5f0fe", "patch": "@@ -1544,3 +1544,71 @@ struct Foo;\n \"##]],\n     )\n }\n+\n+#[test]\n+fn test_dollar_dollar() {\n+    check(\n+        r#\"\n+macro_rules! register_struct { ($Struct:ident) => {\n+    macro_rules! register_methods { ($$($method:ident),*) => {\n+        macro_rules! implement_methods { ($$$$($$val:expr),*) => {\n+            struct $Struct;\n+            impl $Struct { $$(fn $method() -> &'static [u32] { &[$$$$($$$$val),*] })*}\n+        }}\n+    }}\n+}}\n+\n+register_struct!(Foo);\n+register_methods!(alpha, beta);\n+implement_methods!(1, 2, 3);\n+\"#,\n+        expect![[r#\"\n+macro_rules! register_struct { ($Struct:ident) => {\n+    macro_rules! register_methods { ($$($method:ident),*) => {\n+        macro_rules! implement_methods { ($$$$($$val:expr),*) => {\n+            struct $Struct;\n+            impl $Struct { $$(fn $method() -> &'static [u32] { &[$$$$($$$$val),*] })*}\n+        }}\n+    }}\n+}}\n+\n+macro_rules !register_methods {\n+    ($($method: ident), *) = > {\n+        macro_rules!implement_methods {\n+            ($$($val: expr), *) = > {\n+                struct Foo;\n+                impl Foo {\n+                    $(fn $method()-> & 'static[u32] {\n+                        &[$$($$val), *]\n+                    }\n+                    )*\n+                }\n+            }\n+        }\n+    }\n+}\n+macro_rules !implement_methods {\n+    ($($val: expr), *) = > {\n+        struct Foo;\n+        impl Foo {\n+            fn alpha()-> & 'static[u32] {\n+                &[$($val), *]\n+            }\n+            fn beta()-> & 'static[u32] {\n+                &[$($val), *]\n+            }\n+        }\n+    }\n+}\n+struct Foo;\n+impl Foo {\n+    fn alpha() -> & 'static[u32] {\n+        &[1, 2, 3]\n+    }\n+    fn beta() -> & 'static[u32] {\n+        &[1, 2, 3]\n+    }\n+}\n+\"#]],\n+    )\n+}"}, {"sha": "636a66ad53517464b471c8491b34d268016fee19", "filename": "crates/hir-def/src/macro_expansion_tests/mbe/meta_syntax.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29fae10345146bf24de1680cd6420ddecdf5f0fe/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmeta_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29fae10345146bf24de1680cd6420ddecdf5f0fe/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmeta_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmeta_syntax.rs?ref=29fae10345146bf24de1680cd6420ddecdf5f0fe", "patch": "@@ -56,6 +56,9 @@ macro_rules! f2 { ($i:) => ($i) }\n f2!();\n macro_rules! f3 { ($i:_) => () }\n f3!();\n+\n+macro_rules! m1 { ($$i) => () }\n+m1!();\n \"#,\n         expect![[r#\"\n macro_rules! i1 { invalid }\n@@ -74,6 +77,9 @@ macro_rules! f2 { ($i:) => ($i) }\n /* error: invalid macro definition: missing fragment specifier */\n macro_rules! f3 { ($i:_) => () }\n /* error: invalid macro definition: missing fragment specifier */\n+\n+macro_rules! m1 { ($$i) => () }\n+/* error: invalid macro definition: `$$` is not allowed on the pattern side */\n \"#]],\n     )\n }"}, {"sha": "6c7be59841888d36927d76b24f1162a8b256c992", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29fae10345146bf24de1680cd6420ddecdf5f0fe/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29fae10345146bf24de1680cd6420ddecdf5f0fe/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=29fae10345146bf24de1680cd6420ddecdf5f0fe", "patch": "@@ -135,6 +135,14 @@ fn next_op<'a>(first: &tt::TokenTree, src: &mut TtIter<'a>, mode: Mode) -> Resul\n                         let id = lit.id;\n                         Op::Var { name, kind, id }\n                     }\n+                    tt::Leaf::Punct(punct @ tt::Punct { char: '$', .. }) => match mode {\n+                        Mode::Pattern => {\n+                            return Err(ParseError::unexpected(\n+                                \"`$$` is not allowed on the pattern side\",\n+                            ))\n+                        }\n+                        Mode::Template => Op::Leaf(tt::Leaf::Punct(*punct)),\n+                    },\n                     tt::Leaf::Punct(_) | tt::Leaf::Literal(_) => {\n                         return Err(ParseError::expected(\"expected ident\"))\n                     }"}]}