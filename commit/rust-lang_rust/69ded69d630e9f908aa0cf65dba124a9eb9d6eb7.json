{"sha": "69ded69d630e9f908aa0cf65dba124a9eb9d6eb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZGVkNjlkNjMwZTlmOTA4YWEwY2Y2NWRiYTEyNGE5ZWI5ZDZlYjc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-17T21:49:49Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-21T18:37:34Z"}, "message": "std: Remove deprecated AsOsStr/Str/AsSlice traits\n\nCleaning out more deprecated items", "tree": {"sha": "f955152df5b416fa729208186a26b503f43417ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f955152df5b416fa729208186a26b503f43417ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7", "html_url": "https://github.com/rust-lang/rust/commit/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7397bdc9c516f3f714ad4974ecdd27f567d03d05", "url": "https://api.github.com/repos/rust-lang/rust/commits/7397bdc9c516f3f714ad4974ecdd27f567d03d05", "html_url": "https://github.com/rust-lang/rust/commit/7397bdc9c516f3f714ad4974ecdd27f567d03d05"}], "stats": {"total": 166, "additions": 2, "deletions": 164}, "files": [{"sha": "6622d8a9c40633a3b1a2bb374056d6cd0f69ec9c", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=69ded69d630e9f908aa0cf65dba124a9eb9d6eb7", "patch": "@@ -98,7 +98,7 @@ use self::Direction::*;\n use borrow::{Borrow, BorrowMut, ToOwned};\n use vec::Vec;\n \n-pub use core::slice::{Chunks, AsSlice, Windows};\n+pub use core::slice::{Chunks, Windows};\n pub use core::slice::{Iter, IterMut};\n pub use core::slice::{IntSliceExt, SplitMut, ChunksMut, Split};\n pub use core::slice::{SplitN, RSplitN, SplitNMut, RSplitNMut};"}, {"sha": "c62bde482b73c2eac44b83a0cefbff8464185fc2", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=69ded69d630e9f908aa0cf65dba124a9eb9d6eb7", "patch": "@@ -67,7 +67,7 @@ use rustc_unicode;\n use vec::Vec;\n use slice::SliceConcatExt;\n \n-pub use core::str::{FromStr, Utf8Error, Str};\n+pub use core::str::{FromStr, Utf8Error};\n pub use core::str::{Lines, LinesAny, CharRange};\n pub use core::str::{Split, RSplit};\n pub use core::str::{SplitN, RSplitN};"}, {"sha": "384c049d38608f508c62525737460679de7aa6fe", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=69ded69d630e9f908aa0cf65dba124a9eb9d6eb7", "patch": "@@ -837,15 +837,6 @@ impl<'a, 'b> PartialEq<Cow<'a, str>> for &'b str {\n     fn ne(&self, other: &Cow<'a, str>) -> bool { PartialEq::ne(&self[..], &other[..]) }\n }\n \n-#[unstable(feature = \"collections\", reason = \"waiting on Str stabilization\")]\n-#[allow(deprecated)]\n-impl Str for String {\n-    #[inline]\n-    fn as_slice(&self) -> &str {\n-        unsafe { mem::transmute(&*self.vec) }\n-    }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for String {\n     #[inline]"}, {"sha": "813f88c47286dbd4ac6880c0d9c65b7909a2368f", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=69ded69d630e9f908aa0cf65dba124a9eb9d6eb7", "patch": "@@ -1597,18 +1597,6 @@ impl<T: Ord> Ord for Vec<T> {\n     }\n }\n \n-#[unstable(feature = \"collections\",\n-           reason = \"will be replaced by slice syntax\")]\n-#[deprecated(since = \"1.0.0\", reason = \"use &mut s[..] instead\")]\n-#[allow(deprecated)]\n-impl<T> AsSlice<T> for Vec<T> {\n-    /// Deprecated: use `&mut s[..]` instead.\n-    #[inline]\n-    fn as_slice(&self) -> &[T] {\n-        self\n-    }\n-}\n-\n #[unstable(feature = \"collections\",\n            reason = \"recent addition, needs more experience\")]\n impl<'a, T: Clone> Add<&'a [T]> for Vec<T> {"}, {"sha": "12f01f2651c73793976345053afa39559cf03e41", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=69ded69d630e9f908aa0cf65dba124a9eb9d6eb7", "patch": "@@ -42,6 +42,3 @@ pub use option::Option::{self, Some, None};\n pub use result::Result::{self, Ok, Err};\n pub use slice::SliceExt;\n pub use str::StrExt;\n-\n-#[allow(deprecated)] pub use slice::AsSlice;\n-#[allow(deprecated)] pub use str::Str;"}, {"sha": "96f575cc548fe9638ddf22ba0f2cfb3de4813579", "filename": "src/libcore/result.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=69ded69d630e9f908aa0cf65dba124a9eb9d6eb7", "patch": "@@ -234,8 +234,6 @@ use fmt;\n use iter::{Iterator, DoubleEndedIterator, FromIterator, ExactSizeIterator, IntoIterator};\n use ops::{FnMut, FnOnce};\n use option::Option::{self, None, Some};\n-#[allow(deprecated)]\n-use slice::AsSlice;\n use slice;\n \n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n@@ -783,30 +781,6 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     }\n }\n \n-/////////////////////////////////////////////////////////////////////////////\n-// Trait implementations\n-/////////////////////////////////////////////////////////////////////////////\n-\n-#[unstable(feature = \"core\",\n-           reason = \"waiting on the stability of the trait itself\")]\n-#[deprecated(since = \"1.0.0\",\n-             reason = \"use inherent method instead\")]\n-#[allow(deprecated)]\n-impl<T, E> AsSlice<T> for Result<T, E> {\n-    /// Converts from `Result<T, E>` to `&[T]` (without copying)\n-    #[inline]\n-    fn as_slice<'a>(&'a self) -> &'a [T] {\n-        match *self {\n-            Ok(ref x) => slice::ref_slice(x),\n-            Err(_) => {\n-                // work around lack of implicit coercion from fixed-size array to slice\n-                let emp: &[_] = &[];\n-                emp\n-            }\n-        }\n-    }\n-}\n-\n /////////////////////////////////////////////////////////////////////////////\n // The Result Iterators\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "102a46a6bc87422f5dce068fdb839d55799c3f4f", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=69ded69d630e9f908aa0cf65dba124a9eb9d6eb7", "patch": "@@ -595,37 +595,6 @@ impl<T> ops::IndexMut<RangeFull> for [T] {\n // Common traits\n ////////////////////////////////////////////////////////////////////////////////\n \n-/// Data that is viewable as a slice.\n-#[unstable(feature = \"core\",\n-           reason = \"will be replaced by slice syntax\")]\n-#[deprecated(since = \"1.0.0\",\n-             reason = \"use std::convert::AsRef<[T]> instead\")]\n-pub trait AsSlice<T> {\n-    /// Work with `self` as a slice.\n-    fn as_slice<'a>(&'a self) -> &'a [T];\n-}\n-\n-#[unstable(feature = \"core\", reason = \"trait is experimental\")]\n-#[allow(deprecated)]\n-impl<T> AsSlice<T> for [T] {\n-    #[inline(always)]\n-    fn as_slice<'a>(&'a self) -> &'a [T] { self }\n-}\n-\n-#[unstable(feature = \"core\", reason = \"trait is experimental\")]\n-#[allow(deprecated)]\n-impl<'a, T, U: ?Sized + AsSlice<T>> AsSlice<T> for &'a U {\n-    #[inline(always)]\n-    fn as_slice(&self) -> &[T] { AsSlice::as_slice(*self) }\n-}\n-\n-#[unstable(feature = \"core\", reason = \"trait is experimental\")]\n-#[allow(deprecated)]\n-impl<'a, T, U: ?Sized + AsSlice<T>> AsSlice<T> for &'a mut U {\n-    #[inline(always)]\n-    fn as_slice(&self) -> &[T] { AsSlice::as_slice(*self) }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Default for &'a [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "06ea52fd9d67e5cb377900f984796418c26b74e1", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=69ded69d630e9f908aa0cf65dba124a9eb9d6eb7", "patch": "@@ -1463,30 +1463,6 @@ mod traits {\n     }\n }\n \n-/// Any string that can be represented as a slice\n-#[unstable(feature = \"core\",\n-           reason = \"Instead of taking this bound generically, this trait will be \\\n-                     replaced with one of slicing syntax (&foo[..]), deref coercions, or \\\n-                     a more generic conversion trait\")]\n-#[deprecated(since = \"1.0.0\",\n-             reason = \"use std::convert::AsRef<str> instead\")]\n-pub trait Str {\n-    /// Work with `self` as a slice.\n-    fn as_slice<'a>(&'a self) -> &'a str;\n-}\n-\n-#[allow(deprecated)]\n-impl Str for str {\n-    #[inline]\n-    fn as_slice<'a>(&'a self) -> &'a str { self }\n-}\n-\n-#[allow(deprecated)]\n-impl<'a, S: ?Sized> Str for &'a S where S: Str {\n-    #[inline]\n-    fn as_slice(&self) -> &str { Str::as_slice(*self) }\n-}\n-\n /// Methods for string slices\n #[allow(missing_docs)]\n #[doc(hidden)]"}, {"sha": "dfe706e077366c609f2fb43c9ae95d3a12fa2ca3", "filename": "src/libstd/ffi/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/src%2Flibstd%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/src%2Flibstd%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fmod.rs?ref=69ded69d630e9f908aa0cf65dba124a9eb9d6eb7", "patch": "@@ -20,11 +20,3 @@ pub use self::os_str::{OsString, OsStr};\n \n mod c_str;\n mod os_str;\n-\n-// FIXME (#21670): these should be defined in the os_str module\n-/// Freely convertible to an `&OsStr` slice.\n-#[unstable(feature = \"std_misc\")]\n-pub trait AsOsStr {\n-    /// Converts to an `&OsStr` slice.\n-    fn as_os_str(&self) -> &OsStr;\n-}"}, {"sha": "97bf33335b02a8091af837556176f015ad494508", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ded69d630e9f908aa0cf65dba124a9eb9d6eb7/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=69ded69d630e9f908aa0cf65dba124a9eb9d6eb7", "patch": "@@ -46,7 +46,6 @@ use vec::Vec;\n \n use sys::os_str::{Buf, Slice};\n use sys_common::{AsInner, IntoInner, FromInner};\n-use super::AsOsStr;\n \n /// Owned, mutable OS strings.\n #[derive(Clone)]\n@@ -226,14 +225,6 @@ impl OsStr {\n         s.as_ref()\n     }\n \n-    /// Coerces directly from a `&str` slice to a `&OsStr` slice.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[deprecated(since = \"1.0.0\",\n-                 reason = \"use `OsStr::new` instead\")]\n-    pub fn from_str(s: &str) -> &OsStr {\n-        unsafe { mem::transmute(Slice::from_str(s)) }\n-    }\n-\n     /// Yields a `&str` slice if the `OsStr` is valid unicode.\n     ///\n     /// This conversion may entail doing a check for UTF-8 validity.\n@@ -378,46 +369,6 @@ impl ToOwned for OsStr {\n     fn to_owned(&self) -> OsString { self.to_os_string() }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[deprecated(since = \"1.0.0\", reason = \"trait is deprecated\")]\n-impl<'a, T: AsOsStr + ?Sized> AsOsStr for &'a T {\n-    fn as_os_str(&self) -> &OsStr {\n-        (*self).as_os_str()\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[deprecated(since = \"1.0.0\", reason = \"trait is deprecated\")]\n-impl AsOsStr for OsStr {\n-    fn as_os_str(&self) -> &OsStr {\n-        self\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[deprecated(since = \"1.0.0\", reason = \"trait is deprecated\")]\n-impl AsOsStr for OsString {\n-    fn as_os_str(&self) -> &OsStr {\n-        &self[..]\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[deprecated(since = \"1.0.0\", reason = \"trait is deprecated\")]\n-impl AsOsStr for str {\n-    fn as_os_str(&self) -> &OsStr {\n-        unsafe { mem::transmute(Slice::from_str(self)) }\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[deprecated(since = \"1.0.0\", reason = \"trait is deprecated\")]\n-impl AsOsStr for String {\n-    fn as_os_str(&self) -> &OsStr {\n-        unsafe { mem::transmute(Slice::from_str(self)) }\n-    }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRef<OsStr> for OsStr {\n     fn as_ref(&self) -> &OsStr {"}]}