{"sha": "ca78653d61b7f045ca6245bb39c48fb057651aaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNzg2NTNkNjFiN2YwNDVjYTYyNDViYjM5YzQ4ZmIwNTc2NTFhYWY=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@users.noreply.github.com", "date": "2019-09-18T13:37:08Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-09-18T13:37:08Z"}, "message": "Use Cell instead of RefCell (#3798)", "tree": {"sha": "51aada37b1074fb344f6755271c89d58daaa0e1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51aada37b1074fb344f6755271c89d58daaa0e1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca78653d61b7f045ca6245bb39c48fb057651aaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca78653d61b7f045ca6245bb39c48fb057651aaf", "html_url": "https://github.com/rust-lang/rust/commit/ca78653d61b7f045ca6245bb39c48fb057651aaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca78653d61b7f045ca6245bb39c48fb057651aaf/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "789a097a7142e098069e9203f9c2da16267d8826", "url": "https://api.github.com/repos/rust-lang/rust/commits/789a097a7142e098069e9203f9c2da16267d8826", "html_url": "https://github.com/rust-lang/rust/commit/789a097a7142e098069e9203f9c2da16267d8826"}], "stats": {"total": 49, "additions": 22, "deletions": 27}, "files": [{"sha": "56775c4b5ef027494652aabb5d75a06438085cf4", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca78653d61b7f045ca6245bb39c48fb057651aaf/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca78653d61b7f045ca6245bb39c48fb057651aaf/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=ca78653d61b7f045ca6245bb39c48fb057651aaf", "patch": "@@ -647,7 +647,7 @@ impl<'a> ChainFormatterShared<'a> {\n             Cow::from(\"\")\n         } else {\n             // Use new lines.\n-            if *context.force_one_line_chain.borrow() {\n+            if context.force_one_line_chain.get() {\n                 return None;\n             }\n             child_shape.to_string_with_newline(context.config)"}, {"sha": "e92f02a1db1e0cdc1f775cda3f7241e7d6aa1483", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca78653d61b7f045ca6245bb39c48fb057651aaf/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca78653d61b7f045ca6245bb39c48fb057651aaf/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=ca78653d61b7f045ca6245bb39c48fb057651aaf", "patch": "@@ -528,7 +528,7 @@ pub(crate) fn rewrite_macro_def(\n             Some(v) => Some(v),\n             // if the rewrite returned None because a macro could not be rewritten, then return the\n             // original body\n-            None if *context.macro_rewrite_failure.borrow() => {\n+            None if context.macro_rewrite_failure.get() => {\n                 Some(context.snippet(branch.body).trim().to_string())\n             }\n             None => None,"}, {"sha": "7c3f9d1a5eb4761c69acd22cf42d73d79dbe5e35", "filename": "src/overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca78653d61b7f045ca6245bb39c48fb057651aaf/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca78653d61b7f045ca6245bb39c48fb057651aaf/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=ca78653d61b7f045ca6245bb39c48fb057651aaf", "patch": "@@ -465,7 +465,7 @@ impl<'a> Context<'a> {\n         // Replace the last item with its first line to see if it fits with\n         // first arguments.\n         let placeholder = if overflow_last {\n-            let old_value = *self.context.force_one_line_chain.borrow();\n+            let old_value = self.context.force_one_line_chain.get();\n             match self.last_item() {\n                 Some(OverflowableItem::Expr(expr))\n                     if !combine_arg_with_callee && is_method_call(expr) =>"}, {"sha": "602512e87ce92da2a003576cf4400b7dc7dece82", "filename": "src/rewrite.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ca78653d61b7f045ca6245bb39c48fb057651aaf/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca78653d61b7f045ca6245bb39c48fb057651aaf/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=ca78653d61b7f045ca6245bb39c48fb057651aaf", "patch": "@@ -1,6 +1,6 @@\n // A generic trait to abstract the rewriting of an element (of the AST).\n \n-use std::cell::RefCell;\n+use std::cell::{Cell, RefCell};\n use std::rc::Rc;\n \n use syntax::parse::ParseSess;\n@@ -29,25 +29,25 @@ pub(crate) struct RewriteContext<'a> {\n     pub(crate) parse_session: &'a ParseSess,\n     pub(crate) source_map: &'a SourceMap,\n     pub(crate) config: &'a Config,\n-    pub(crate) inside_macro: Rc<RefCell<bool>>,\n+    pub(crate) inside_macro: Rc<Cell<bool>>,\n     // Force block indent style even if we are using visual indent style.\n-    pub(crate) use_block: RefCell<bool>,\n+    pub(crate) use_block: Cell<bool>,\n     // When `is_if_else_block` is true, unindent the comment on top\n     // of the `else` or `else if`.\n-    pub(crate) is_if_else_block: RefCell<bool>,\n+    pub(crate) is_if_else_block: Cell<bool>,\n     // When rewriting chain, veto going multi line except the last element\n-    pub(crate) force_one_line_chain: RefCell<bool>,\n+    pub(crate) force_one_line_chain: Cell<bool>,\n     pub(crate) snippet_provider: &'a SnippetProvider<'a>,\n     // Used for `format_snippet`\n-    pub(crate) macro_rewrite_failure: RefCell<bool>,\n+    pub(crate) macro_rewrite_failure: Cell<bool>,\n     pub(crate) report: FormatReport,\n     pub(crate) skip_context: SkipContext,\n     pub(crate) skipped_range: Rc<RefCell<Vec<(usize, usize)>>>,\n }\n \n pub(crate) struct InsideMacroGuard {\n     is_nested_macro_context: bool,\n-    inside_macro_ref: Rc<RefCell<bool>>,\n+    inside_macro_ref: Rc<Cell<bool>>,\n }\n \n impl InsideMacroGuard {\n@@ -69,15 +69,15 @@ impl<'a> RewriteContext<'a> {\n \n     /// Returns `true` if we should use block indent style for rewriting function call.\n     pub(crate) fn use_block_indent(&self) -> bool {\n-        self.config.indent_style() == IndentStyle::Block || *self.use_block.borrow()\n+        self.config.indent_style() == IndentStyle::Block || self.use_block.get()\n     }\n \n     pub(crate) fn budget(&self, used_width: usize) -> usize {\n         self.config.max_width().saturating_sub(used_width)\n     }\n \n     pub(crate) fn inside_macro(&self) -> bool {\n-        *self.inside_macro.borrow()\n+        self.inside_macro.get()\n     }\n \n     pub(crate) fn enter_macro(&self) -> InsideMacroGuard {\n@@ -93,6 +93,6 @@ impl<'a> RewriteContext<'a> {\n     }\n \n     pub(crate) fn is_if_else_block(&self) -> bool {\n-        *self.is_if_else_block.borrow()\n+        self.is_if_else_block.get()\n     }\n }"}, {"sha": "49197682c146f48ba70f53bdec1bf61fc9ee1bdd", "filename": "src/visitor.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ca78653d61b7f045ca6245bb39c48fb057651aaf/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca78653d61b7f045ca6245bb39c48fb057651aaf/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=ca78653d61b7f045ca6245bb39c48fb057651aaf", "patch": "@@ -1,4 +1,4 @@\n-use std::cell::RefCell;\n+use std::cell::{Cell, RefCell};\n use std::rc::Rc;\n \n use syntax::parse::ParseSess;\n@@ -862,15 +862,10 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     where\n         F: Fn(&RewriteContext<'_>) -> Option<String>,\n     {\n-        // FIXME borrow checker fighting - can be simplified a lot with NLL.\n-        let (result, mrf) = {\n-            let context = self.get_context();\n-            let result = f(&context);\n-            let mrf = &context.macro_rewrite_failure.borrow();\n-            (result, *std::ops::Deref::deref(mrf))\n-        };\n+        let context = self.get_context();\n+        let result = f(&context);\n \n-        self.macro_rewrite_failure |= mrf;\n+        self.macro_rewrite_failure |= context.macro_rewrite_failure.get();\n         result\n     }\n \n@@ -879,12 +874,12 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             parse_session: self.parse_session,\n             source_map: self.source_map,\n             config: self.config,\n-            inside_macro: Rc::new(RefCell::new(false)),\n-            use_block: RefCell::new(false),\n-            is_if_else_block: RefCell::new(false),\n-            force_one_line_chain: RefCell::new(false),\n+            inside_macro: Rc::new(Cell::new(false)),\n+            use_block: Cell::new(false),\n+            is_if_else_block: Cell::new(false),\n+            force_one_line_chain: Cell::new(false),\n             snippet_provider: self.snippet_provider,\n-            macro_rewrite_failure: RefCell::new(false),\n+            macro_rewrite_failure: Cell::new(false),\n             report: self.report.clone(),\n             skip_context: self.skip_context.clone(),\n             skipped_range: self.skipped_range.clone(),"}]}