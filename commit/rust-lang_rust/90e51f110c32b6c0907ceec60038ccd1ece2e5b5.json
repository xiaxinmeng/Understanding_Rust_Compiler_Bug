{"sha": "90e51f110c32b6c0907ceec60038ccd1ece2e5b5", "node_id": "C_kwDOAAsO6NoAKDkwZTUxZjExMGMzMmI2YzA5MDdjZWVjNjAwMzhjY2QxZWNlMmU1YjU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-18T20:17:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-18T20:17:05Z"}, "message": "Rollup merge of #112537 - compiler-errors:dont-record-adjustments-twice, r=cjgillot\n\nDon't record adjustments twice in `note_source_of_type_mismatch_constraint`\n\nWe call `lookup_method` a few times in `note_source_of_type_mismatch_constraint`, but that function has side-effects to the typeck results. Replace it with a less side-effect-y variant of the function for use in diagnostics.\n\nSpecifically the ICE in #112532 happens because we're recording deref adjustments twice for a call receiver, which causes `ExprUseVisitor` to be angry.\n\nFixes #112532", "tree": {"sha": "5005d3586c4645bfac14890cacf097a6f55f0a09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5005d3586c4645bfac14890cacf097a6f55f0a09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90e51f110c32b6c0907ceec60038ccd1ece2e5b5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkj2ZBCRBK7hj4Ov3rIwAAI5oIAFyX5odromZoX/IA9nLcYqb6\n0JflbqDaBoDfOUwqqhnkS6GWeRYCX1v+o6yEs8nI0LluFHnrJNq2ul9IyD1lk5Rj\nsQVSN4ElNlDLDW6Bk14X3EPdYSWhvBfEWcLYey50NleuJR85rDAtSXZYTvvR52JU\nKEjSzm034dBBb0KUvSGib5j7MnwRImuqEJWMhr1K5wahfWTJKPOIR7oTFB6Xigxf\nlcO3vD0V0VL37TV27CNVrTNZ3rMw86Ro+jU/Q3qduwFH23s6nR1uCTP1nM0rFb26\nGkMKXFH6xlOKBiz2jPCzDYvO0FLAispdh+G3UFrMzibPqt2a4pkuDFpqkrx9pww=\n=ErcJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 5005d3586c4645bfac14890cacf097a6f55f0a09\nparent 939786223f2d36b1af62e27e9a7a54bae6e30f3f\nparent 696cd98e6b51d657247cd61ee1babcf0ee4b9a8a\nauthor Michael Goulet <michael@errs.io> 1687119425 -0700\ncommitter GitHub <noreply@github.com> 1687119425 -0700\n\nRollup merge of #112537 - compiler-errors:dont-record-adjustments-twice, r=cjgillot\n\nDon't record adjustments twice in `note_source_of_type_mismatch_constraint`\n\nWe call `lookup_method` a few times in `note_source_of_type_mismatch_constraint`, but that function has side-effects to the typeck results. Replace it with a less side-effect-y variant of the function for use in diagnostics.\n\nSpecifically the ICE in #112532 happens because we're recording deref adjustments twice for a call receiver, which causes `ExprUseVisitor` to be angry.\n\nFixes #112532\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90e51f110c32b6c0907ceec60038ccd1ece2e5b5", "html_url": "https://github.com/rust-lang/rust/commit/90e51f110c32b6c0907ceec60038ccd1ece2e5b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90e51f110c32b6c0907ceec60038ccd1ece2e5b5/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "939786223f2d36b1af62e27e9a7a54bae6e30f3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/939786223f2d36b1af62e27e9a7a54bae6e30f3f", "html_url": "https://github.com/rust-lang/rust/commit/939786223f2d36b1af62e27e9a7a54bae6e30f3f"}, {"sha": "696cd98e6b51d657247cd61ee1babcf0ee4b9a8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/696cd98e6b51d657247cd61ee1babcf0ee4b9a8a", "html_url": "https://github.com/rust-lang/rust/commit/696cd98e6b51d657247cd61ee1babcf0ee4b9a8a"}], "stats": {"total": 100, "additions": 93, "deletions": 7}, "files": [{"sha": "9ce03060e0fe901e5f302e7db06aae333e91f0e0", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90e51f110c32b6c0907ceec60038ccd1ece2e5b5/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e51f110c32b6c0907ceec60038ccd1ece2e5b5/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=90e51f110c32b6c0907ceec60038ccd1ece2e5b5", "patch": "@@ -370,13 +370,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // Fudge the receiver, so we can do new inference on it.\n                     let possible_rcvr_ty = possible_rcvr_ty.fold_with(&mut fudger);\n                     let method = self\n-                        .lookup_method(\n+                        .lookup_method_for_diagnostic(\n                             possible_rcvr_ty,\n                             segment,\n                             DUMMY_SP,\n                             call_expr,\n                             binding,\n-                            args,\n                         )\n                         .ok()?;\n                     // Unify the method signature with our incompatible arg, to\n@@ -435,14 +434,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let Some(rcvr_ty) = self.node_ty_opt(rcvr.hir_id) else { continue; };\n                 let rcvr_ty = rcvr_ty.fold_with(&mut fudger);\n                 let Ok(method) =\n-                    self.lookup_method(rcvr_ty, segment, DUMMY_SP, parent_expr, rcvr, args)\n+                    self.lookup_method_for_diagnostic(rcvr_ty, segment, DUMMY_SP, parent_expr, rcvr)\n                 else {\n                     continue;\n                 };\n \n                 let ideal_rcvr_ty = rcvr_ty.fold_with(&mut fudger);\n                 let ideal_method = self\n-                    .lookup_method(ideal_rcvr_ty, segment, DUMMY_SP, parent_expr, rcvr, args)\n+                    .lookup_method_for_diagnostic(ideal_rcvr_ty, segment, DUMMY_SP, parent_expr, rcvr)\n                     .ok()\n                     .and_then(|method| {\n                         let _ = self.at(&ObligationCause::dummy(), self.param_env)"}, {"sha": "6cd7bd5d196df92011cb134678bd31c0efb18b2b", "filename": "compiler/rustc_hir_typeck/src/method/confirm.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/90e51f110c32b6c0907ceec60038ccd1ece2e5b5/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e51f110c32b6c0907ceec60038ccd1ece2e5b5/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs?ref=90e51f110c32b6c0907ceec60038ccd1ece2e5b5", "patch": "@@ -26,6 +26,7 @@ struct ConfirmContext<'a, 'tcx> {\n     span: Span,\n     self_expr: &'tcx hir::Expr<'tcx>,\n     call_expr: &'tcx hir::Expr<'tcx>,\n+    skip_record_for_diagnostics: bool,\n }\n \n impl<'a, 'tcx> Deref for ConfirmContext<'a, 'tcx> {\n@@ -59,6 +60,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut confirm_cx = ConfirmContext::new(self, span, self_expr, call_expr);\n         confirm_cx.confirm(unadjusted_self_ty, pick, segment)\n     }\n+\n+    pub fn confirm_method_for_diagnostic(\n+        &self,\n+        span: Span,\n+        self_expr: &'tcx hir::Expr<'tcx>,\n+        call_expr: &'tcx hir::Expr<'tcx>,\n+        unadjusted_self_ty: Ty<'tcx>,\n+        pick: &probe::Pick<'tcx>,\n+        segment: &hir::PathSegment<'_>,\n+    ) -> ConfirmResult<'tcx> {\n+        let mut confirm_cx = ConfirmContext::new(self, span, self_expr, call_expr);\n+        confirm_cx.skip_record_for_diagnostics = true;\n+        confirm_cx.confirm(unadjusted_self_ty, pick, segment)\n+    }\n }\n \n impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n@@ -68,7 +83,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         self_expr: &'tcx hir::Expr<'tcx>,\n         call_expr: &'tcx hir::Expr<'tcx>,\n     ) -> ConfirmContext<'a, 'tcx> {\n-        ConfirmContext { fcx, span, self_expr, call_expr }\n+        ConfirmContext { fcx, span, self_expr, call_expr, skip_record_for_diagnostics: false }\n     }\n \n     fn confirm(\n@@ -219,7 +234,9 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         self.register_predicates(autoderef.into_obligations());\n \n         // Write out the final adjustments.\n-        self.apply_adjustments(self.self_expr, adjustments);\n+        if !self.skip_record_for_diagnostics {\n+            self.apply_adjustments(self.self_expr, adjustments);\n+        }\n \n         target\n     }\n@@ -453,7 +470,10 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n             });\n \n             debug!(\"instantiate_method_substs: user_type_annotation={:?}\", user_type_annotation);\n-            self.fcx.write_user_type_annotation(self.call_expr.hir_id, user_type_annotation);\n+\n+            if !self.skip_record_for_diagnostics {\n+                self.fcx.write_user_type_annotation(self.call_expr.hir_id, user_type_annotation);\n+            }\n         }\n \n         self.normalize(self.span, substs)"}, {"sha": "59736b42cf7a8bac5587aef8d3654806a27c8ccc", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/90e51f110c32b6c0907ceec60038ccd1ece2e5b5/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e51f110c32b6c0907ceec60038ccd1ece2e5b5/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=90e51f110c32b6c0907ceec60038ccd1ece2e5b5", "patch": "@@ -254,6 +254,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         Ok(result.callee)\n     }\n \n+    pub fn lookup_method_for_diagnostic(\n+        &self,\n+        self_ty: Ty<'tcx>,\n+        segment: &hir::PathSegment<'_>,\n+        span: Span,\n+        call_expr: &'tcx hir::Expr<'tcx>,\n+        self_expr: &'tcx hir::Expr<'tcx>,\n+    ) -> Result<MethodCallee<'tcx>, MethodError<'tcx>> {\n+        let pick = self.lookup_probe_for_diagnostic(\n+            segment.ident,\n+            self_ty,\n+            call_expr,\n+            ProbeScope::TraitsInScope,\n+            None,\n+        )?;\n+\n+        Ok(self\n+            .confirm_method_for_diagnostic(span, self_expr, call_expr, self_ty, &pick, segment)\n+            .callee)\n+    }\n+\n     #[instrument(level = \"debug\", skip(self, call_expr))]\n     pub fn lookup_probe(\n         &self,"}, {"sha": "0c2d71707c9f0c8ec4a0f4e45248e01c5420e80d", "filename": "tests/ui/typeck/dont-record-adjustments-when-pointing-at-arg.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/90e51f110c32b6c0907ceec60038ccd1ece2e5b5/tests%2Fui%2Ftypeck%2Fdont-record-adjustments-when-pointing-at-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e51f110c32b6c0907ceec60038ccd1ece2e5b5/tests%2Fui%2Ftypeck%2Fdont-record-adjustments-when-pointing-at-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fdont-record-adjustments-when-pointing-at-arg.rs?ref=90e51f110c32b6c0907ceec60038ccd1ece2e5b5", "patch": "@@ -0,0 +1,29 @@\n+pub trait NSWindow: Sized {\n+    fn frame(self) -> () {\n+        unimplemented!()\n+    }\n+    fn setFrame_display_(self, display: ()) {}\n+}\n+impl NSWindow for () {}\n+\n+pub struct NSRect {}\n+\n+use std::ops::Deref;\n+struct MainThreadSafe<T = ()>(T);\n+impl<T> Deref for MainThreadSafe<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        unimplemented!()\n+    }\n+}\n+\n+fn main() {\n+    || {\n+        let ns_window = MainThreadSafe(());\n+        // Don't record adjustments twice for `*ns_window`\n+        (*ns_window).frame();\n+        ns_window.setFrame_display_(0);\n+        //~^ ERROR mismatched types\n+    };\n+}"}, {"sha": "02e87d701b68710eda7e7f4b57ea25bb22f50078", "filename": "tests/ui/typeck/dont-record-adjustments-when-pointing-at-arg.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/90e51f110c32b6c0907ceec60038ccd1ece2e5b5/tests%2Fui%2Ftypeck%2Fdont-record-adjustments-when-pointing-at-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90e51f110c32b6c0907ceec60038ccd1ece2e5b5/tests%2Fui%2Ftypeck%2Fdont-record-adjustments-when-pointing-at-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fdont-record-adjustments-when-pointing-at-arg.stderr?ref=90e51f110c32b6c0907ceec60038ccd1ece2e5b5", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/dont-record-adjustments-when-pointing-at-arg.rs:26:37\n+   |\n+LL |         ns_window.setFrame_display_(0);\n+   |                   ----------------- ^ expected `()`, found integer\n+   |                   |\n+   |                   arguments to this method are incorrect\n+   |\n+note: method defined here\n+  --> $DIR/dont-record-adjustments-when-pointing-at-arg.rs:5:8\n+   |\n+LL |     fn setFrame_display_(self, display: ()) {}\n+   |        ^^^^^^^^^^^^^^^^^       -----------\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}