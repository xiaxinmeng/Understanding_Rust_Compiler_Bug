{"sha": "12b05d241698fb3ecb18eaebc75cdce85abb1013", "node_id": "C_kwDOAAsO6NoAKDEyYjA1ZDI0MTY5OGZiM2VjYjE4ZWFlYmM3NWNkY2U4NWFiYjEwMTM", "commit": {"author": {"name": "rami3l", "email": "rami3l@outlook.com", "date": "2022-12-13T04:25:44Z"}, "committer": {"name": "rami3l", "email": "rami3l@outlook.com", "date": "2022-12-14T11:18:05Z"}, "message": "fix: add generic `TypeBoundList` in generated derivable impl", "tree": {"sha": "79797530c832ef431a5930552046b22870978c17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79797530c832ef431a5930552046b22870978c17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12b05d241698fb3ecb18eaebc75cdce85abb1013", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12b05d241698fb3ecb18eaebc75cdce85abb1013", "html_url": "https://github.com/rust-lang/rust/commit/12b05d241698fb3ecb18eaebc75cdce85abb1013", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12b05d241698fb3ecb18eaebc75cdce85abb1013/comments", "author": {"login": "rami3l", "id": 33851577, "node_id": "MDQ6VXNlcjMzODUxNTc3", "avatar_url": "https://avatars.githubusercontent.com/u/33851577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rami3l", "html_url": "https://github.com/rami3l", "followers_url": "https://api.github.com/users/rami3l/followers", "following_url": "https://api.github.com/users/rami3l/following{/other_user}", "gists_url": "https://api.github.com/users/rami3l/gists{/gist_id}", "starred_url": "https://api.github.com/users/rami3l/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rami3l/subscriptions", "organizations_url": "https://api.github.com/users/rami3l/orgs", "repos_url": "https://api.github.com/users/rami3l/repos", "events_url": "https://api.github.com/users/rami3l/events{/privacy}", "received_events_url": "https://api.github.com/users/rami3l/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rami3l", "id": 33851577, "node_id": "MDQ6VXNlcjMzODUxNTc3", "avatar_url": "https://avatars.githubusercontent.com/u/33851577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rami3l", "html_url": "https://github.com/rami3l", "followers_url": "https://api.github.com/users/rami3l/followers", "following_url": "https://api.github.com/users/rami3l/following{/other_user}", "gists_url": "https://api.github.com/users/rami3l/gists{/gist_id}", "starred_url": "https://api.github.com/users/rami3l/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rami3l/subscriptions", "organizations_url": "https://api.github.com/users/rami3l/orgs", "repos_url": "https://api.github.com/users/rami3l/repos", "events_url": "https://api.github.com/users/rami3l/events{/privacy}", "received_events_url": "https://api.github.com/users/rami3l/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4596847a88abb0d5077c5111c3093e724673d7a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4596847a88abb0d5077c5111c3093e724673d7a0", "html_url": "https://github.com/rust-lang/rust/commit/4596847a88abb0d5077c5111c3093e724673d7a0"}], "stats": {"total": 105, "additions": 98, "deletions": 7}, "files": [{"sha": "a6693d7d790ccb3e6f65168e1a863be29addd5d3", "filename": "crates/ide-assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/12b05d241698fb3ecb18eaebc75cdce85abb1013/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b05d241698fb3ecb18eaebc75cdce85abb1013/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=12b05d241698fb3ecb18eaebc75cdce85abb1013", "patch": "@@ -994,6 +994,68 @@ impl PartialEq for Foo {\n         )\n     }\n \n+    #[test]\n+    fn add_custom_impl_partial_eq_tuple_enum_generic() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: eq, derive\n+#[derive(Partial$0Eq)]\n+enum Either<T, U> {\n+    Left(T),\n+    Right(U),\n+}\n+\"#,\n+            r#\"\n+enum Either<T, U> {\n+    Left(T),\n+    Right(U),\n+}\n+\n+impl<T: PartialEq, U: PartialEq> PartialEq for Either<T, U> {\n+    $0fn eq(&self, other: &Self) -> bool {\n+        match (self, other) {\n+            (Self::Left(l0), Self::Left(r0)) => l0 == r0,\n+            (Self::Right(l0), Self::Right(r0)) => l0 == r0,\n+            _ => false,\n+        }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_custom_impl_partial_eq_tuple_enum_generic_existing_bounds() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: eq, derive\n+#[derive(Partial$0Eq)]\n+enum Either<T: PartialEq + Error, U: Clone> {\n+    Left(T),\n+    Right(U),\n+}\n+\"#,\n+            r#\"\n+enum Either<T: PartialEq + Error, U: Clone> {\n+    Left(T),\n+    Right(U),\n+}\n+\n+impl<T: PartialEq + Error, U: Clone + PartialEq> PartialEq for Either<T, U> {\n+    $0fn eq(&self, other: &Self) -> bool {\n+        match (self, other) {\n+            (Self::Left(l0), Self::Left(r0)) => l0 == r0,\n+            (Self::Right(l0), Self::Right(r0)) => l0 == r0,\n+            _ => false,\n+        }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn add_custom_impl_partial_eq_record_enum() {\n         check_assist(\n@@ -1170,7 +1232,7 @@ struct Foo<T, U> {\n     bar: U,\n }\n \n-impl<T, U> Default for Foo<T, U> {\n+impl<T: Default, U: Default> Default for Foo<T, U> {\n     $0fn default() -> Self {\n         Self { foo: Default::default(), bar: Default::default() }\n     }"}, {"sha": "2dcf56501d6e933eae5777091572aab4156f87f2", "filename": "crates/ide-assists/src/utils.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12b05d241698fb3ecb18eaebc75cdce85abb1013/crates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b05d241698fb3ecb18eaebc75cdce85abb1013/crates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils.rs?ref=12b05d241698fb3ecb18eaebc75cdce85abb1013", "patch": "@@ -5,6 +5,7 @@ use std::ops;\n pub(crate) use gen_trait_fn_body::gen_trait_fn_body;\n use hir::{db::HirDatabase, HirDisplay, Semantics};\n use ide_db::{famous_defs::FamousDefs, path_transform::PathTransform, RootDatabase, SnippetCap};\n+use itertools::Itertools;\n use stdx::format_to;\n use syntax::{\n     ast::{\n@@ -452,15 +453,32 @@ fn generate_impl_text_inner(adt: &ast::Adt, trait_text: Option<&str>, code: &str\n         let lifetime_params =\n             generic_params.lifetime_params().map(ast::GenericParam::LifetimeParam);\n         let ty_or_const_params = generic_params.type_or_const_params().filter_map(|param| {\n-            // remove defaults since they can't be specified in impls\n             match param {\n                 ast::TypeOrConstParam::Type(param) => {\n                     let param = param.clone_for_update();\n+                    // remove defaults since they can't be specified in impls\n                     param.remove_default();\n+                    let mut bounds = param\n+                        .type_bound_list()\n+                        .map_or_else(Vec::new, |it| it.bounds().collect_vec());\n+                    // `{ty_param}: {trait_text}`\n+                    if let Some(trait_) = trait_text {\n+                        // Defense against the following cases:\n+                        // - The trait is undetermined, e.g. `$0`.\n+                        // - The trait is a `From`, e.g. `From<T>`.\n+                        if !trait_.starts_with('$')\n+                            && !matches!(trait_.split_once('<'), Some((left, _right)) if left.trim() == \"From\")\n+                        {\n+                            bounds.push(make::type_bound(trait_));\n+                        }\n+                    };\n+                    let param =\n+                        make::type_param(param.name().unwrap(), make::type_bound_list(bounds));\n                     Some(ast::GenericParam::TypeParam(param))\n                 }\n                 ast::TypeOrConstParam::Const(param) => {\n                     let param = param.clone_for_update();\n+                    // remove defaults since they can't be specified in impls\n                     param.remove_default();\n                     Some(ast::GenericParam::ConstParam(param))\n                 }"}, {"sha": "11822361f40f63cf3c1bd2bbf667e24791649d31", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/12b05d241698fb3ecb18eaebc75cdce85abb1013/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b05d241698fb3ecb18eaebc75cdce85abb1013/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=12b05d241698fb3ecb18eaebc75cdce85abb1013", "patch": "@@ -719,11 +719,22 @@ pub fn param_list(\n     ast_from_text(&list)\n }\n \n-pub fn type_param(name: ast::Name, ty: Option<ast::TypeBoundList>) -> ast::TypeParam {\n-    let bound = match ty {\n-        Some(it) => format!(\": {it}\"),\n-        None => String::new(),\n-    };\n+pub fn type_bound(bound: &str) -> ast::TypeBound {\n+    ast_from_text(&format!(\"fn f<T: {bound}>() {{ }}\"))\n+}\n+\n+pub fn type_bound_list(\n+    bounds: impl IntoIterator<Item = ast::TypeBound>,\n+) -> Option<ast::TypeBoundList> {\n+    let bounds = bounds.into_iter().map(|it| it.to_string()).unique().join(\" + \");\n+    if bounds.is_empty() {\n+        return None;\n+    }\n+    Some(ast_from_text(&format!(\"fn f<T: {bounds}>() {{ }}\")))\n+}\n+\n+pub fn type_param(name: ast::Name, bounds: Option<ast::TypeBoundList>) -> ast::TypeParam {\n+    let bound = bounds.map_or_else(String::new, |it| format!(\": {it}\"));\n     ast_from_text(&format!(\"fn f<{name}{bound}>() {{ }}\"))\n }\n "}]}