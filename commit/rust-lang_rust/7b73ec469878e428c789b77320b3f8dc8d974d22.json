{"sha": "7b73ec469878e428c789b77320b3f8dc8d974d22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNzNlYzQ2OTg3OGU0MjhjNzg5Yjc3MzIwYjNmOGRjOGQ5NzRkMjI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-14T23:20:14Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-22T00:16:21Z"}, "message": "Tie stability attributes to feature gates", "tree": {"sha": "297c1f66334f03df5b0da3f2ea37bfb00a63453e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/297c1f66334f03df5b0da3f2ea37bfb00a63453e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b73ec469878e428c789b77320b3f8dc8d974d22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b73ec469878e428c789b77320b3f8dc8d974d22", "html_url": "https://github.com/rust-lang/rust/commit/7b73ec469878e428c789b77320b3f8dc8d974d22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b73ec469878e428c789b77320b3f8dc8d974d22/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94ca8a361026d1a622a961e8dc8cacc331ed1ac3", "url": "https://api.github.com/repos/rust-lang/rust/commits/94ca8a361026d1a622a961e8dc8cacc331ed1ac3", "html_url": "https://github.com/rust-lang/rust/commit/94ca8a361026d1a622a961e8dc8cacc331ed1ac3"}], "stats": {"total": 511, "additions": 299, "deletions": 212}, "files": [{"sha": "b23c867d5c9bef0b09d212275e7a9d161531bbe2", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -13,7 +13,7 @@\n #![feature(slicing_syntax, unboxed_closures)]\n #![feature(box_syntax)]\n #![feature(int_uint)]\n-#![allow(unstable)]\n+#![feature(unnamed_feature)]\n \n #![deny(warnings)]\n "}, {"sha": "6e436ec41d53d00dcfa41ce75e4e94c08b00b81e", "filename": "src/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fdriver.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unstable)]\n+#![allow(unknown_features)]\n+#![feature(unnamed_feature)]\n \n #[cfg(rustdoc)]\n extern crate \"rustdoc\" as this;"}, {"sha": "9245d33047c3fbbcdece8d7357b0451e4976aeb9", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -608,7 +608,6 @@ impl<H: Hasher, T: Hash<H>> Hash<H> for Arc<T> {\n }\n \n #[cfg(test)]\n-#[allow(unstable)]\n mod tests {\n     use std::clone::Clone;\n     use std::sync::mpsc::channel;"}, {"sha": "b8c9c8403c33f4ef116d9a43cdbc749d382ca85f", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -66,10 +66,10 @@\n \n #![no_std]\n #![allow(unknown_features)]\n-#![allow(unstable)]\n #![feature(lang_items, unsafe_destructor)]\n #![feature(box_syntax)]\n #![feature(optin_builtin_traits)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n \n #[macro_use]"}, {"sha": "5e82810673999088548a6ce56e9bca518ce973fc", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -937,7 +937,6 @@ impl<T> RcBoxPtr<T> for Weak<T> {\n }\n \n #[cfg(test)]\n-#[allow(unstable)]\n mod tests {\n     use super::{Rc, Weak, weak_count, strong_count};\n     use std::cell::RefCell;"}, {"sha": "feb70e4856267cdfbda65882677e5a6f8f2b6f98", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -32,9 +32,9 @@\n #![feature(unsafe_destructor)]\n #![feature(unboxed_closures)]\n #![feature(box_syntax)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n #![allow(missing_docs)]\n-#![allow(unstable)]\n \n extern crate alloc;\n "}, {"sha": "b99019f921e5a9c221305b26ff53e7888aef1385", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -26,8 +26,8 @@\n #![feature(unsafe_destructor, slicing_syntax)]\n #![feature(box_syntax)]\n #![feature(unboxed_closures)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n #![no_std]\n \n #[macro_use]"}, {"sha": "8a229ac08ec0a2a63f89f04bcee90ef93ef4c3d0", "filename": "src/libcore/simd.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -19,7 +19,6 @@\n //! provided beyond this module.\n //!\n //! ```rust\n-//! #[allow(unstable)];\n //!\n //! fn main() {\n //!     use std::simd::f32x4;"}, {"sha": "1c7478ddb76120875fdb883768db67ea15cef4a6", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -1433,7 +1433,6 @@ pub mod bytes {\n \n     impl MutableByteVector for [u8] {\n         #[inline]\n-        #[allow(unstable)]\n         fn set_memory(&mut self, value: u8) {\n             unsafe { ptr::set_memory(self.as_mut_ptr(), value, self.len()) };\n         }"}, {"sha": "1aa302aa8ed2345ac980fc989be5a91b5bbce3ce", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -11,8 +11,8 @@\n #![feature(unsafe_destructor, slicing_syntax)]\n #![feature(unboxed_closures)]\n #![feature(box_syntax)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n \n extern crate core;\n extern crate test;"}, {"sha": "a5033a701bf35155f769c001b61e84138504479b", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -18,7 +18,7 @@\n #![unstable(feature = \"unnamed_feature\", since = \"1.0.0\")]\n #![staged_api]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n+#![feature(unnamed_feature)]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "282ff7c29acf7ef6f72e182f5c873cb58268f0b9", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -26,7 +26,7 @@\n \n #![feature(slicing_syntax)]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n+#![feature(unnamed_feature)]\n \n pub use self::Piece::*;\n pub use self::Position::*;"}, {"sha": "829c89a6c66e92ce776c6ae358aeb9b49cff98d0", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -88,8 +88,8 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(slicing_syntax)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n #![deny(missing_docs)]\n \n #[cfg(test)] #[macro_use] extern crate log;"}, {"sha": "300500df478dda5da7b5d10bcda09bd7a08df442", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -273,8 +273,8 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n #![feature(slicing_syntax)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n \n use self::LabelText::*;\n "}, {"sha": "ebdf9c9570525b4480a3d4bbc686dff6df6fbc16", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -13,8 +13,8 @@\n #![cfg_attr(not(feature = \"cargo-build\"),\n             unstable(feature = \"unnamed_feature\", since = \"1.0.0\"))]\n #![cfg_attr(not(feature = \"cargo-build\"), staged_api)]\n+#![cfg_attr(not(feature = \"cargo-build\"), feature(unnamed_feature))]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n #![no_std]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n@@ -74,7 +74,7 @@\n //! one from Berkeley after the lawsuits died down and the CSRG dissolved.\n \n #![allow(bad_style, raw_pointer_derive)]\n-\n+#![cfg_attr(not(feature = \"cargo-build\"), feature(unnamed_feature))]\n #[cfg(feature = \"cargo-build\")] extern crate \"std\" as core;\n #[cfg(not(feature = \"cargo-build\"))] extern crate core;\n "}, {"sha": "f1f106c73f6143e962a7ae42af8dbaf0bc41a70e", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -169,8 +169,8 @@\n #![allow(unknown_features)]\n #![feature(slicing_syntax)]\n #![feature(box_syntax)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n #![deny(missing_docs)]\n \n extern crate regex;"}, {"sha": "b39fb3e9fb83354d2ceb81c88bcfb1c036424bd9", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -22,8 +22,8 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n #![no_std]\n #![unstable(feature = \"unnamed_feature\", since = \"1.0.0\")]\n #![staged_api]"}, {"sha": "60ad6a04d4be49bc9fa1c905248d24fc85a869c0", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -26,8 +26,8 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![allow(unknown_features)]\n #![feature(slicing_syntax)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n \n extern crate serialize;\n #[macro_use] extern crate log;"}, {"sha": "c575f9a849e224f5e5a3a50c5c79b6fcb24eda49", "filename": "src/libregex/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibregex%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibregex%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -25,9 +25,9 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![allow(unknown_features)]\n-#![allow(unstable)]\n #![feature(slicing_syntax)]\n #![feature(box_syntax)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n #![deny(missing_docs)]\n "}, {"sha": "98d072bb9549459a1991502178c57c3a9ce08348", "filename": "src/libregex/re.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -410,7 +410,6 @@ pub struct Captures<'t> {\n }\n \n impl<'t> Captures<'t> {\n-    #[allow(unstable)]\n     fn new(re: &Regex, search: &'t str, locs: CaptureLocs)\n           -> Option<Captures<'t>> {\n         if !has_match(&locs) {"}, {"sha": "e37a2c91bca5796fc56f4d39d633ca81e0ed4085", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -27,9 +27,9 @@\n #![feature(quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(box_syntax)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n #![feature(rustc_diagnostic_macros)]\n-#![allow(unstable)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "2d3e5a4604e08206cf2342634bb087481daeb071", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 13, "deletions": 104, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -44,7 +44,7 @@ use std::{i8, i16, i32, i64, u8, u16, u32, u64, f32, f64};\n use syntax::{abi, ast, ast_map};\n use syntax::ast_util::is_shift_binop;\n use syntax::attr::{self, AttrMetaMethods};\n-use syntax::codemap::{Span, DUMMY_SP};\n+use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::ast::{TyIs, TyUs, TyI8, TyU8, TyI16, TyU16, TyI32, TyU32, TyI64, TyU64};\n use syntax::ast_util;\n@@ -1628,32 +1628,15 @@ declare_lint! {\n     \"detects use of #[deprecated] items\"\n }\n \n-declare_lint! {\n-    UNSTABLE,\n-    Warn,\n-    \"detects use of #[unstable] items (incl. items with no stability attribute)\"\n-}\n-\n-/// Checks for use of items with `#[deprecated]`, `#[unstable]` and\n-/// `#[unstable]` attributes, or no stability attribute.\n+/// Checks for use of items with `#[deprecated]` attributes\n #[derive(Copy)]\n pub struct Stability;\n \n impl Stability {\n-    fn lint(&self, cx: &Context, id: ast::DefId, span: Span) {\n-\n-        if !stability::is_staged_api(cx.tcx, id) { return  }\n+    fn lint(&self, cx: &Context, _id: ast::DefId, span: Span, stability: &Option<attr::Stability>) {\n \n-        let ref stability = stability::lookup(cx.tcx, id);\n-        let cross_crate = !ast_util::is_local(id);\n-\n-        // stability attributes are promises made across crates; only\n-        // check DEPRECATED for crate-local usage.\n+        // deprecated attributes apply in-crate and cross-crate\n         let (lint, label) = match *stability {\n-            // no stability attributes == Unstable\n-            None if cross_crate => (UNSTABLE, \"unmarked\"),\n-            Some(attr::Stability { level: attr::Unstable, .. }) if cross_crate =>\n-                (UNSTABLE, \"unstable\"),\n             Some(attr::Stability { level: attr::Deprecated, .. }) =>\n                 (DEPRECATED, \"deprecated\"),\n             _ => return\n@@ -1673,100 +1656,26 @@ impl Stability {\n             cx.span_lint(lint, span, &msg[]);\n         }\n     }\n-\n-\n-    fn is_internal(&self, cx: &Context, span: Span) -> bool {\n-        cx.tcx.sess.codemap().span_is_internal(span)\n-    }\n-\n }\n \n impl LintPass for Stability {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(DEPRECATED, UNSTABLE)\n+        lint_array!(DEPRECATED)\n     }\n \n     fn check_view_item(&mut self, cx: &Context, item: &ast::ViewItem) {\n-        // compiler-generated `extern crate` statements have a dummy span.\n-        if item.span == DUMMY_SP { return }\n-\n-        let id = match item.node {\n-            ast::ViewItemExternCrate(_, _, id) => id,\n-            ast::ViewItemUse(..) => return,\n-        };\n-        let cnum = match cx.tcx.sess.cstore.find_extern_mod_stmt_cnum(id) {\n-            Some(cnum) => cnum,\n-            None => return,\n-        };\n-        let id = ast::DefId { krate: cnum, node: ast::CRATE_NODE_ID };\n-        self.lint(cx, id, item.span);\n-    }\n-\n-    fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {\n-        if self.is_internal(cx, e.span) { return; }\n-\n-        let mut span = e.span;\n-\n-        let id = match e.node {\n-            ast::ExprPath(..) | ast::ExprQPath(..) | ast::ExprStruct(..) => {\n-                match cx.tcx.def_map.borrow().get(&e.id) {\n-                    Some(&def) => def.def_id(),\n-                    None => return\n-                }\n-            }\n-            ast::ExprMethodCall(i, _, _) => {\n-                span = i.span;\n-                let method_call = ty::MethodCall::expr(e.id);\n-                match cx.tcx.method_map.borrow().get(&method_call) {\n-                    Some(method) => {\n-                        match method.origin {\n-                            ty::MethodStatic(def_id) => {\n-                                def_id\n-                            }\n-                            ty::MethodStaticUnboxedClosure(def_id) => {\n-                                def_id\n-                            }\n-                            ty::MethodTypeParam(ty::MethodParam {\n-                                ref trait_ref,\n-                                method_num: index,\n-                                ..\n-                            }) |\n-                            ty::MethodTraitObject(ty::MethodObject {\n-                                ref trait_ref,\n-                                method_num: index,\n-                                ..\n-                            }) => {\n-                                ty::trait_item(cx.tcx, trait_ref.def_id, index).def_id()\n-                            }\n-                        }\n-                    }\n-                    None => return\n-                }\n-            }\n-            _ => return\n-        };\n-\n-        self.lint(cx, id, span);\n+        stability::check_view_item(cx.tcx, item,\n+                                   &mut |id, sp, stab| self.lint(cx, id, sp, stab));\n     }\n \n     fn check_item(&mut self, cx: &Context, item: &ast::Item) {\n-        if self.is_internal(cx, item.span) { return }\n+        stability::check_item(cx.tcx, item,\n+                              &mut |id, sp, stab| self.lint(cx, id, sp, stab));\n+    }\n \n-        match item.node {\n-            ast::ItemTrait(_, _, ref supertraits, _) => {\n-                for t in supertraits.iter() {\n-                    if let ast::TraitTyParamBound(ref t, _) = *t {\n-                        let id = ty::trait_ref_to_def_id(cx.tcx, &t.trait_ref);\n-                        self.lint(cx, id, t.trait_ref.path.span);\n-                    }\n-                }\n-            }\n-            ast::ItemImpl(_, _, _, Some(ref t), _, _) => {\n-                let id = ty::trait_ref_to_def_id(cx.tcx, t);\n-                self.lint(cx, id, t.path.span);\n-            }\n-            _ => (/* pass */)\n-        }\n+    fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {\n+        stability::check_expr(cx.tcx, e,\n+                              &mut |id, sp, stab| self.lint(cx, id, sp, stab));\n     }\n }\n "}, {"sha": "1d27352a6e3bfd56f386d57a3521b6527d65e68b", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -316,15 +316,6 @@ impl LintStore {\n             },\n             None => unreachable!()\n         }\n-        match self.by_name.get(\"unstable\") {\n-            Some(&Id(lint_id)) => if self.get_level_source(lint_id).0 != Forbid {\n-                self.set_level(lint_id, (lvl, ReleaseChannel))\n-            },\n-            Some(&Renamed(_, lint_id)) => if self.get_level_source(lint_id).0 != Forbid {\n-                self.set_level(lint_id, (lvl, ReleaseChannel))\n-            },\n-            None => unreachable!()\n-        }\n     }\n }\n "}, {"sha": "4d69be7cbc2bf700ec937285f99bbb81d5585171", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 217, "deletions": 15, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -14,7 +14,8 @@\n use session::Session;\n use middle::ty;\n use metadata::csearch;\n-use syntax::codemap::Span;\n+use syntax::parse::token::InternedString;\n+use syntax::codemap::{Span, DUMMY_SP};\n use syntax::{attr, visit};\n use syntax::ast;\n use syntax::ast::{Attribute, Block, Crate, DefId, FnDecl, NodeId, Variant};\n@@ -23,7 +24,8 @@ use syntax::ast::{TypeMethod, Method, Generics, StructField, TypeTraitItem};\n use syntax::ast_util::is_local;\n use syntax::attr::{Stability, AttrMetaMethods};\n use syntax::visit::{FnKind, FkMethod, Visitor};\n-use util::nodemap::{NodeMap, DefIdMap};\n+use syntax::feature_gate::emit_feature_err;\n+use util::nodemap::{NodeMap, DefIdMap, FnvHashSet};\n use util::ppaux::Repr;\n \n use std::mem::replace;\n@@ -174,6 +176,207 @@ impl Index {\n     }\n }\n \n+/// Cross-references the feature names of unstable APIs with enabled\n+/// features and possibly prints errors. Returns a list of all\n+/// features used.\n+pub fn check_unstable_api_usage(tcx: &ty::ctxt) -> FnvHashSet<InternedString> {\n+    let ref active_lib_features = tcx.sess.features.borrow().lib_features;\n+\n+    // Put the active features into a map for quick lookup\n+    let active_features = active_lib_features.iter().map(|&(ref s, _)| s.clone()).collect();\n+\n+    let mut checker = Checker {\n+        tcx: tcx,\n+        active_features: active_features,\n+        used_features: FnvHashSet()\n+    };\n+\n+    let krate = tcx.map.krate();\n+    visit::walk_crate(&mut checker, krate);\n+\n+    let used_features = checker.used_features;\n+    return used_features;\n+}\n+\n+struct Checker<'a, 'tcx: 'a> {\n+    tcx: &'a ty::ctxt<'tcx>,\n+    active_features: FnvHashSet<InternedString>,\n+    used_features: FnvHashSet<InternedString>\n+}\n+\n+impl<'a, 'tcx> Checker<'a, 'tcx> {\n+    fn check(&mut self, id: ast::DefId, span: Span, stab: &Option<Stability>) {\n+        // Only the cross-crate scenario matters when checking unstable APIs\n+        let cross_crate = !is_local(id);\n+        if !cross_crate { return }\n+\n+        match *stab {\n+            Some(Stability { level: attr::Unstable, ref feature, ref reason, .. }) => {\n+                self.used_features.insert(feature.clone());\n+\n+                if !self.active_features.contains(feature) {\n+                    let msg = match *reason {\n+                        Some(ref r) => format!(\"use of unstable library feature '{}': {}\",\n+                                               feature.get(), r.get()),\n+                        None => format!(\"use of unstable library feature '{}'\", feature.get())\n+                    };\n+\n+                    emit_feature_err(&self.tcx.sess.parse_sess.span_diagnostic,\n+                                     feature.get(), span, &msg[]);\n+                }\n+            }\n+            Some(..) => {\n+                // Stable APIs are always ok to call and deprecated APIs are\n+                // handled by a lint.\n+            }\n+            None => {\n+                // This is an 'unmarked' API, which should not exist\n+                // in the standard library.\n+                self.tcx.sess.span_err(span, \"use of unmarked staged library feature\");\n+                self.tcx.sess.span_note(span, \"this is either a bug in the library you are \\\n+                                               using or a bug in the compiler - there is \\\n+                                               no way to use this feature\");\n+            }\n+        }\n+    }\n+}\n+\n+impl<'a, 'v, 'tcx> Visitor<'v> for Checker<'a, 'tcx> {\n+    fn visit_view_item(&mut self, item: &ast::ViewItem) {\n+        check_view_item(self.tcx, item,\n+                        &mut |id, sp, stab| self.check(id, sp, stab));\n+        visit::walk_view_item(self, item)\n+    }\n+\n+    fn visit_item(&mut self, item: &ast::Item) {\n+        check_item(self.tcx, item,\n+                   &mut |id, sp, stab| self.check(id, sp, stab));\n+        visit::walk_item(self, item);\n+    }\n+\n+    fn visit_expr(&mut self, ex: &ast::Expr) {\n+        check_expr(self.tcx, ex,\n+                   &mut |id, sp, stab| self.check(id, sp, stab));\n+        visit::walk_expr(self, ex);\n+    }\n+}\n+\n+/// Helper for discovering nodes to check for stability\n+pub fn check_view_item(tcx: &ty::ctxt, item: &ast::ViewItem,\n+                       cb: &mut FnMut(ast::DefId, Span, &Option<Stability>)) {\n+    // compiler-generated `extern crate` statements have a dummy span.\n+    if item.span == DUMMY_SP { return }\n+\n+    let id = match item.node {\n+        ast::ViewItemExternCrate(_, _, id) => id,\n+        ast::ViewItemUse(..) => return,\n+    };\n+    let cnum = match tcx.sess.cstore.find_extern_mod_stmt_cnum(id) {\n+        Some(cnum) => cnum,\n+        None => return,\n+    };\n+    let id = ast::DefId { krate: cnum, node: ast::CRATE_NODE_ID };\n+\n+    maybe_do_stability_check(tcx, id, item.span, cb);\n+}\n+\n+/// Helper for discovering nodes to check for stability\n+pub fn check_expr(tcx: &ty::ctxt, e: &ast::Expr,\n+                  cb: &mut FnMut(ast::DefId, Span, &Option<Stability>)) {\n+    if is_internal(tcx, e.span) { return; }\n+\n+    let mut span = e.span;\n+\n+    let id = match e.node {\n+        ast::ExprPath(..) | ast::ExprQPath(..) | ast::ExprStruct(..) => {\n+            match tcx.def_map.borrow().get(&e.id) {\n+                Some(&def) => def.def_id(),\n+                None => return\n+            }\n+        }\n+        ast::ExprMethodCall(i, _, _) => {\n+            span = i.span;\n+            let method_call = ty::MethodCall::expr(e.id);\n+            match tcx.method_map.borrow().get(&method_call) {\n+                Some(method) => {\n+                    match method.origin {\n+                        ty::MethodStatic(def_id) => {\n+                            def_id\n+                        }\n+                        ty::MethodStaticUnboxedClosure(def_id) => {\n+                            def_id\n+                        }\n+                        ty::MethodTypeParam(ty::MethodParam {\n+                            ref trait_ref,\n+                            method_num: index,\n+                            ..\n+                        }) |\n+                        ty::MethodTraitObject(ty::MethodObject {\n+                            ref trait_ref,\n+                            method_num: index,\n+                            ..\n+                        }) => {\n+                            ty::trait_item(tcx, trait_ref.def_id, index).def_id()\n+                        }\n+                    }\n+                }\n+                None => return\n+            }\n+        }\n+        _ => return\n+    };\n+\n+    maybe_do_stability_check(tcx, id, span, cb);\n+}\n+\n+/// Helper for discovering nodes to check for stability\n+pub fn check_item(tcx: &ty::ctxt, item: &ast::Item,\n+                  cb: &mut FnMut(ast::DefId, Span, &Option<Stability>)) {\n+    if is_internal(tcx, item.span) { return }\n+\n+    match item.node {\n+        ast::ItemTrait(_, _, ref supertraits, _) => {\n+            for t in supertraits.iter() {\n+                if let ast::TraitTyParamBound(ref t, _) = *t {\n+                    let id = ty::trait_ref_to_def_id(tcx, &t.trait_ref);\n+                    maybe_do_stability_check(tcx, id, t.trait_ref.path.span, cb);\n+                }\n+            }\n+        }\n+        ast::ItemImpl(_, _, _, Some(ref t), _, _) => {\n+            let id = ty::trait_ref_to_def_id(tcx, t);\n+            maybe_do_stability_check(tcx, id, t.path.span, cb);\n+        }\n+        _ => (/* pass */)\n+    }\n+}\n+\n+fn maybe_do_stability_check(tcx: &ty::ctxt, id: ast::DefId, span: Span,\n+                            cb: &mut FnMut(ast::DefId, Span, &Option<Stability>)) {\n+    if !is_staged_api(tcx, id) { return  }\n+    let ref stability = lookup(tcx, id);\n+    cb(id, span, stability);\n+}\n+\n+fn is_internal(tcx: &ty::ctxt, span: Span) -> bool {\n+    tcx.sess.codemap().span_is_internal(span)\n+}\n+\n+fn is_staged_api(tcx: &ty::ctxt, id: DefId) -> bool {\n+    match ty::trait_item_of_item(tcx, id) {\n+        Some(ty::MethodTraitItemId(trait_method_id))\n+            if trait_method_id != id => {\n+                is_staged_api(tcx, trait_method_id)\n+            }\n+        _ if is_local(id) => {\n+            tcx.stability.borrow().staged_api\n+        }\n+        _ => {\n+            csearch::is_staged_api(&tcx.sess.cstore, id)\n+        }\n+    }\n+}\n+\n /// Lookup the stability for a node, loading external crate\n /// metadata as necessary.\n pub fn lookup(tcx: &ty::ctxt, id: DefId) -> Option<Stability> {\n@@ -212,17 +415,16 @@ pub fn lookup(tcx: &ty::ctxt, id: DefId) -> Option<Stability> {\n     })\n }\n \n-pub fn is_staged_api(tcx: &ty::ctxt, id: DefId) -> bool {\n-    match ty::trait_item_of_item(tcx, id) {\n-        Some(ty::MethodTraitItemId(trait_method_id))\n-            if trait_method_id != id => {\n-                is_staged_api(tcx, trait_method_id)\n-            }\n-        _ if is_local(id) => {\n-            tcx.stability.borrow().staged_api\n-        }\n-        _ => {\n-            csearch::is_staged_api(&tcx.sess.cstore, id)\n-        }\n-    }\n+/// Given the list of enabled features that were not language features (i.e. that\n+/// were expected to be library features), and the list of features used from\n+/// libraries, identify activated features that don't exist and error about them.\n+pub fn check_unknown_features(sess: &Session,\n+                              _used_lib_features: &FnvHashSet<InternedString>) {\n+    let ref _lib_features = sess.features.borrow().lib_features;\n+    // TODO\n+\n+    //sess.add_lint(lint::builtin::UNKNOWN_FEATURES,\n+    //              ast::CRATE_NODE_ID,\n+    //              *uf,\n+    //              \"unknown feature\".to_string());\n }"}, {"sha": "323aea893e4c34b31550f9b49b47f9f3b158da2e", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -31,8 +31,8 @@\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n #![allow(unknown_features)]\n #![feature(slicing_syntax, box_syntax)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n \n extern crate syntax;\n extern crate serialize;"}, {"sha": "585aaf8968fa4960e03d84e46dcda209e7bdede9", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -21,9 +21,9 @@\n #![feature(quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n #![allow(non_camel_case_types)]\n-#![allow(unstable)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "384f5af6819bd565d0bdbbaafbbc5b7a66ad3136", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -390,16 +390,10 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     // baz! should not use this definition unless foo is enabled.\n \n     time(time_passes, \"gated macro checking\", (), |_| {\n-        let (features, unknown_features) =\n+        let features =\n             syntax::feature_gate::check_crate_macros(sess.codemap(),\n                                                      &sess.parse_sess.span_diagnostic,\n                                                      &krate);\n-        for uf in unknown_features.iter() {\n-            sess.add_lint(lint::builtin::UNKNOWN_FEATURES,\n-                          ast::CRATE_NODE_ID,\n-                          *uf,\n-                          \"unknown feature\".to_string());\n-        }\n \n         // these need to be set \"early\" so that expansion sees `quote` if enabled.\n         *sess.features.borrow_mut() = features;\n@@ -492,9 +486,11 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n \n     // Needs to go *after* expansion to be able to check the results of macro expansion.\n     time(time_passes, \"complete gated feature checking\", (), |_| {\n-        syntax::feature_gate::check_crate(sess.codemap(),\n+        let features = \n+            syntax::feature_gate::check_crate(sess.codemap(),\n                                           &sess.parse_sess.span_diagnostic,\n                                           &krate);\n+        *sess.features.borrow_mut() = features;\n         sess.abort_if_errors();\n     });\n \n@@ -668,9 +664,20 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n                                   &reachable_map)\n     });\n \n+    let ref lib_features_used =\n+        time(time_passes, \"stability checking\", (), |_|\n+             stability::check_unstable_api_usage(&ty_cx));\n+\n+    time(time_passes, \"unknown feature checking\", (), |_|\n+         stability::check_unknown_features(\n+             &ty_cx.sess, lib_features_used));\n+\n     time(time_passes, \"lint checking\", (), |_|\n          lint::check_crate(&ty_cx, &exported_items));\n \n+    // Some of the above passes generate errors\n+    ty_cx.sess.abort_if_errors();\n+\n     ty::CrateAnalysis {\n         export_map: export_map,\n         ty_cx: ty_cx,"}, {"sha": "a5fff5484f70a414b24d0e41cd04ea65a16421ed", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -28,8 +28,8 @@\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(box_syntax)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "3a74e2d255e7ec9b49b22fef7780f36e913ccb48", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -25,8 +25,8 @@\n #![allow(unknown_features)]\n #![feature(link_args)]\n #![feature(box_syntax)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n \n extern crate libc;\n #[macro_use] #[no_link] extern crate rustc_bitflags;"}, {"sha": "bc2f69f62fbb52b5a83b89df0ee568a2bc88a77e", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -18,8 +18,8 @@\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n #![feature(rustc_diagnostic_macros)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "6f9907853b743f344354a9dad5a6fd61821a036c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -19,8 +19,8 @@\n \n #![feature(slicing_syntax)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "a92d85673d96c3676187c67664f131d46ae0fe17", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -28,8 +28,8 @@\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(box_syntax)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "fa90ad88c197d0d225a82862bd300232d427cfc7", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -77,9 +77,9 @@ This API is completely unstable and subject to change.\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(box_syntax)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n #![allow(non_camel_case_types)]\n-#![allow(unstable)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "fa5110454a11e36fc6df0abacc63b847d413e762", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -19,8 +19,8 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(slicing_syntax)]\n #![feature(box_syntax)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n \n extern crate arena;\n extern crate getopts;"}, {"sha": "b662ba638a77f5c74233f2380ceeb5af5f79c08c", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -28,8 +28,8 @@ Core encoding and decoding interfaces.\n #![feature(box_syntax)]\n #![feature(old_impl_check)]\n #![feature(slicing_syntax)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n \n // test harness access\n #[cfg(test)] extern crate test;"}, {"sha": "9e6a45d8bf0b5877fa3ae8159d83d61e8b120cb8", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -629,7 +629,6 @@ impl<K, V> RawTable<K, V> {\n \n     /// Creates a new raw table from a given capacity. All buckets are\n     /// initially empty.\n-    #[allow(unstable)]\n     pub fn new(capacity: uint) -> RawTable<K, V> {\n         unsafe {\n             let ret = RawTable::new_uninitialized(capacity);"}, {"sha": "012728be56a5a2865f87fd63e99c69535de9b487", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -1703,7 +1703,6 @@ pub enum FileType {\n /// # Examples\n ///\n /// ```no_run\n-/// # #![allow(unstable)]\n ///\n /// use std::io::fs::PathExtensions;\n ///"}, {"sha": "88d74c5c2883f10a777605f5fab8b0cf04591550", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -376,7 +376,6 @@ impl TcpAcceptor {\n     /// # Example\n     ///\n     /// ```no_run\n-    /// # #![allow(unstable)]\n     /// use std::io::TcpListener;\n     /// use std::io::{Listener, Acceptor, TimedOut};\n     ///\n@@ -421,7 +420,6 @@ impl TcpAcceptor {\n     /// # Example\n     ///\n     /// ```\n-    /// # #![allow(unstable)]\n     /// use std::io::{TcpListener, Listener, Acceptor, EndOfFile};\n     /// use std::thread::Thread;\n     ///\n@@ -485,7 +483,6 @@ impl sys_common::AsInner<TcpAcceptorImp> for TcpAcceptor {\n }\n \n #[cfg(test)]\n-#[allow(unstable)]\n mod test {\n     use prelude::v1::*;\n "}, {"sha": "9920e0027953d77c94d86f247ee7dbb295d0a56a", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -179,7 +179,6 @@ impl sys_common::AsInner<UdpSocketImp> for UdpSocket {\n }\n \n #[cfg(test)]\n-#[allow(unstable)]\n mod test {\n     use prelude::v1::*;\n "}, {"sha": "dc15eb1302fc3d33a02fd535e13678f52408472e", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -10,7 +10,6 @@\n \n //! Bindings for executing child processes\n \n-#![allow(unstable)]\n #![allow(non_upper_case_globals)]\n \n pub use self::StdioContainer::*;\n@@ -663,7 +662,6 @@ impl Process {\n     /// # Example\n     ///\n     /// ```no_run\n-    /// # #![allow(unstable)]\n     /// use std::io::{Command, IoResult};\n     /// use std::io::process::ProcessExit;\n     ///"}, {"sha": "6760640d33a0b322fb5d16b6fb234d5f330792bc", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -113,7 +113,7 @@\n #![feature(optin_builtin_traits)]\n #![feature(int_uint)]\n #![feature(int_uint)]\n-#![allow(unstable)]\n+#![feature(unnamed_feature)]\n \n // Don't link to std. We are std.\n #![no_std]"}, {"sha": "94c86fcf1c88240a185c7153218534165d744980", "filename": "src/libstd/thunk.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibstd%2Fthunk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibstd%2Fthunk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthunk.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -10,6 +10,7 @@\n \n // Because this module is temporary...\n #![allow(missing_docs)]\n+#![unstable(feature = \"unnamed_feature\", since = \"1.0.0\")]\n \n use alloc::boxed::Box;\n use core::marker::Send;"}, {"sha": "a5a2935d808cdf31101084368507104d74a6810f", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -28,7 +28,7 @@ use codemap::{CodeMap, Span};\n use diagnostic::SpanHandler;\n use visit;\n use visit::Visitor;\n-use parse::token;\n+use parse::token::{self, InternedString};\n \n use std::slice;\n use std::ascii::AsciiExt;\n@@ -123,7 +123,6 @@ enum Status {\n }\n \n /// A set of features to be used by later passes.\n-#[derive(Copy)]\n pub struct Features {\n     pub unboxed_closures: bool,\n     pub rustc_diagnostic_macros: bool,\n@@ -132,6 +131,7 @@ pub struct Features {\n     pub quote: bool,\n     pub old_orphan_check: bool,\n     pub simd_ffi: bool,\n+    pub lib_features: Vec<(InternedString, Span)>\n }\n \n impl Features {\n@@ -144,6 +144,7 @@ impl Features {\n             quote: false,\n             old_orphan_check: false,\n             simd_ffi: false,\n+            lib_features: Vec::new()\n         }\n     }\n }\n@@ -157,10 +158,7 @@ struct Context<'a> {\n impl<'a> Context<'a> {\n     fn gate_feature(&self, feature: &str, span: Span, explain: &str) {\n         if !self.has_feature(feature) {\n-            self.span_handler.span_err(span, explain);\n-            self.span_handler.span_help(span, &format!(\"add #![feature({})] to the \\\n-                                                       crate attributes to enable\",\n-                                                      feature)[]);\n+            emit_feature_err(self.span_handler, feature, span, explain);\n         }\n     }\n \n@@ -177,6 +175,13 @@ impl<'a> Context<'a> {\n     }\n }\n \n+pub fn emit_feature_err(diag: &SpanHandler, feature: &str, span: Span, explain: &str) {\n+    diag.span_err(span, explain);\n+    diag.span_help(span, &format!(\"add #![feature({})] to the \\\n+                                   crate attributes to enable\",\n+                                  feature)[]);\n+}\n+\n struct MacroVisitor<'a> {\n     context: &'a Context<'a>\n }\n@@ -472,7 +477,7 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n \n fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::Crate,\n                         check: F)\n-                       -> (Features, Vec<Span>)\n+                       -> Features\n     where F: FnOnce(&mut Context, &ast::Crate)\n {\n     let mut cx = Context {\n@@ -524,7 +529,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n                                                              directive not necessary\");\n                         }\n                         None => {\n-                            unknown_features.push(mi.span);\n+                            unknown_features.push((name, mi.span));\n                         }\n                     }\n                 }\n@@ -534,27 +539,28 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n \n     check(&mut cx, krate);\n \n-    (Features {\n+    Features {\n         unboxed_closures: cx.has_feature(\"unboxed_closures\"),\n         rustc_diagnostic_macros: cx.has_feature(\"rustc_diagnostic_macros\"),\n         import_shadowing: cx.has_feature(\"import_shadowing\"),\n         visible_private_types: cx.has_feature(\"visible_private_types\"),\n         quote: cx.has_feature(\"quote\"),\n         old_orphan_check: cx.has_feature(\"old_orphan_check\"),\n         simd_ffi: cx.has_feature(\"simd_ffi\"),\n-    },\n-    unknown_features)\n+        lib_features: unknown_features\n+    }\n }\n \n pub fn check_crate_macros(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::Crate)\n--> (Features, Vec<Span>) {\n+-> Features {\n     check_crate_inner(cm, span_handler, krate,\n                       |ctx, krate| visit::walk_crate(&mut MacroVisitor { context: ctx }, krate))\n }\n \n pub fn check_crate(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::Crate)\n--> (Features, Vec<Span>) {\n+-> Features {\n     check_crate_inner(cm, span_handler, krate,\n                       |ctx, krate| visit::walk_crate(&mut PostExpansionVisitor { context: ctx },\n                                                      krate))\n }\n+"}, {"sha": "4d533590dd6838751b69184279c3813e244484c5", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -27,8 +27,8 @@\n #![feature(slicing_syntax)]\n #![feature(box_syntax)]\n #![feature(quote, unsafe_destructor)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n \n extern crate arena;\n extern crate fmt_macros;"}, {"sha": "d14aad40bf0fefced3952c28f3b50cc6d73b7a08", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -52,8 +52,8 @@\n #![allow(unknown_features)]\n #![feature(slicing_syntax)]\n #![feature(box_syntax)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n #![deny(missing_docs)]\n \n #[macro_use] extern crate log;"}, {"sha": "fbdfce0eddf1f1558a0f6eebcbd746716f6c34fb", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -34,8 +34,8 @@\n #![allow(unknown_features)]\n #![feature(asm, slicing_syntax)]\n #![feature(box_syntax)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n \n extern crate getopts;\n extern crate regex;"}, {"sha": "f47530a408f32acd3b13bbfc8e48b377b6395ce7", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -30,8 +30,8 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![no_std]\n #![feature(slicing_syntax)]\n+#![feature(unnamed_feature)]\n #![allow(unknown_features)] #![feature(int_uint)]\n-#![allow(unstable)]\n \n extern crate core;\n "}, {"sha": "1e5c571888eb9943995dd3c733334ad089ce324e", "filename": "src/rustbook/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Frustbook%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Frustbook%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fmain.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![feature(slicing_syntax, box_syntax)]\n-#![allow(unstable)]\n+#![feature(unnamed_feature)]\n \n extern crate regex;\n "}, {"sha": "0e80cdca9f8f3317ef100d3f48ce38d833101046", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -39,7 +39,6 @@\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n #![feature(simd)]\n-#![allow(unstable)]\n \n // ignore-pretty very bad with line comments\n "}, {"sha": "34c79be7118ba9e00430a9b07f566108305e6eca", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -13,7 +13,6 @@\n #![allow(non_camel_case_types)]\n #![allow(non_upper_case_globals)]\n #![allow(missing_copy_implementations)]\n-#![allow(unstable)]\n #![deny(dead_code)]\n \n #![crate_type=\"lib\"]"}, {"sha": "03b89c522ce8da91a8bb39f81982c9565469da20", "filename": "src/test/compile-fail/lint-dead-code-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -10,7 +10,6 @@\n \n #![allow(unused_variables)]\n #![allow(non_camel_case_types)]\n-#![allow(unstable)]\n #![deny(dead_code)]\n \n #![crate_type=\"lib\"]"}, {"sha": "ac8f158f8fb28e9fdd89201ecde4fa4b98c84cd5", "filename": "src/test/compile-fail/lint-dead-code-4.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -10,7 +10,6 @@\n \n #![allow(unused_variables)]\n #![allow(non_camel_case_types)]\n-#![allow(unstable)]\n #![deny(dead_code)]\n \n extern crate libc;"}, {"sha": "91a4d0fea0af464f6a73337a7ce8ffd99f6eb4f5", "filename": "src/test/compile-fail/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -10,7 +10,6 @@\n \n #![deny(exceeding_bitshifts)]\n #![allow(unused_variables)]\n-#![allow(unstable)]\n #![allow(dead_code)]\n \n fn main() {"}, {"sha": "9317e465a7a07933c3d0f70c7f0a8e612ede5227", "filename": "src/test/compile-fail/lint-uppercase-variables.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -11,7 +11,6 @@\n // ignore-tidy-linelength\n \n #![allow(dead_code)]\n-#![allow(unstable)]\n #![deny(non_snake_case)]\n \n use std::io::File;"}, {"sha": "c9f8230b6c5aec9a02c2cdff6a5c09c84eef0088", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -10,7 +10,6 @@\n \n #![deny(unused_variables)]\n #![deny(unused_assignments)]\n-#![allow(unstable)]\n #![allow(dead_code, non_camel_case_types)]\n \n fn f1(x: isize) {"}, {"sha": "f028c9af46235647a0fbe65c47fdbf8dd169fe63", "filename": "src/test/compile-fail/simd-binop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Fcompile-fail%2Fsimd-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Fcompile-fail%2Fsimd-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-binop.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-tidy-linelength\n \n-#![allow(unstable)]\n \n use std::simd::f32x4;\n "}, {"sha": "578ea4479ecab5b3fb3e6751b46e6a707a3bf07d", "filename": "src/test/debuginfo/simd.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimd.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -41,7 +41,6 @@\n \n // gdb-command:continue\n \n-#![allow(unstable)]\n #![allow(unused_variables)]\n #![omit_gdb_pretty_printer_section]\n "}, {"sha": "5aafe93067c138a058072ee94f3947e8c793826c", "filename": "src/test/run-pass/associated-types-normalize-unifield-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -11,7 +11,6 @@\n // Regression test for issue #21010: Normalize associated types in\n // various special paths in the `type_is_immediate` function.\n \n-#![allow(unstable)]\n \n pub trait OffsetState: Sized {}\n pub trait Offset { type State: OffsetState; }"}, {"sha": "dbc23a63bbadf36aa8f49e96765682a4c71ca36a", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -14,7 +14,6 @@\n #![deny(warnings)]\n #![allow(unused_must_use)]\n #![allow(unknown_features)]\n-#![allow(unstable)]\n #![feature(box_syntax)]\n \n use std::fmt;"}, {"sha": "13177880c5ab7da2d6c18498406ae2025351d2d1", "filename": "src/test/run-pass/issue-11958.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Frun-pass%2Fissue-11958.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Frun-pass%2Fissue-11958.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11958.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -12,7 +12,6 @@\n \n // Pretty printing tests complain about `use std::predule::*`\n #![allow(unused_imports)]\n-#![allow(unstable)]\n \n // We shouldn't need to rebind a moved upvar as mut if it's already\n // marked as mut"}, {"sha": "e25b3e8e89c6c16175ce85e79f0d1807f1d3c6fb", "filename": "src/test/run-pass/issue-16671.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Frun-pass%2Fissue-16671.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Frun-pass%2Fissue-16671.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16671.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -14,7 +14,6 @@\n \n // Pretty printing tests complain about `use std::predule::*`\n #![allow(unused_imports)]\n-#![allow(unstable)]\n \n // A var moved into a proc, that has a mutable loan path should\n // not trigger a misleading unused_mut warning."}, {"sha": "044d43a57fabad14eea27687b54fa27998dc6981", "filename": "src/test/run-pass/issue-21058.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21058.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unstable)]\n \n struct NT(str);\n struct DST { a: u32, b: str }"}, {"sha": "482eea19823f17a4603309de91c3e243c4fedd01", "filename": "src/test/run-pass/simd-binop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-binop.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unstable)]\n \n use std::simd::{i32x4, f32x4, u32x4};\n "}, {"sha": "7f1be4b7d7060f0b8ac5ca485ffddc11ded05a64", "filename": "src/test/run-pass/simd-issue-10604.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Frun-pass%2Fsimd-issue-10604.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Frun-pass%2Fsimd-issue-10604.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-issue-10604.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-#![allow(unstable)]\n #![feature(simd)]\n \n pub fn main() {"}, {"sha": "17a4b91467c68f7bcf5c166cb44b0e9bc813ca7d", "filename": "src/test/run-pass/tcp-connect-timeouts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b73ec469878e428c789b77320b3f8dc8d974d22/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs?ref=7b73ec469878e428c789b77320b3f8dc8d974d22", "patch": "@@ -16,7 +16,6 @@\n // one test task to ensure that errors are timeouts, not file descriptor\n // exhaustion.\n \n-#![allow(unstable)]\n #![reexport_test_harness_main = \"test_main\"]\n \n #![allow(unused_imports)]"}]}