{"sha": "d259d1d98a31b299d8c64abf5be429468329dec8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNTlkMWQ5OGEzMWIyOTlkOGM2NGFiZjViZTQyOTQ2ODMyOWRlYzg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-03-01T23:50:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-01T23:50:09Z"}, "message": "Rollup merge of #82655 - SkiFire13:fix-issue-81314, r=estebank\n\nHighlight identifier span instead of whole pattern span in `unused` lint\n\nFixes #81314\n\nThis pretty much just changes the span highlighted in the lint from `pat_sp` to `ident.span`. There's however an exception, which is in patterns with shorthands like `Point { y, ref mut x }`, where a suggestion to change just `x` would be invalid; in those cases I had to keep the pattern span. Another option would be suggesting something like `Point { y, x: ref mut _x }`.\n\nI also added a new test since there weren't any test that checked the `unused` lint with optional patterns.", "tree": {"sha": "a32fbe047b2e95200daf2c97260bf131cab69309", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a32fbe047b2e95200daf2c97260bf131cab69309"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d259d1d98a31b299d8c64abf5be429468329dec8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPX2xCRBK7hj4Ov3rIwAAdHIIAG1wHfn/jHNZ5H4E37D3SxQD\nCGf/9BmJUd4bw+IuhFkDgJ/boQuGZGLA7igltKLkjH2oU2sZAuEKIN3QAcuR3uBQ\nsm7gyeYmBs0GPqn1we4ED7ef6YzesMBmZZd0c373exSBn3hUxMmD1HInJ4/+beJ5\nprS0Cgm+aSfS1L+lngWrut8GXykZ9OF4gy8GigAsFncB/jkodCeEMeEK1cTWJ4Kd\nEFDaV222/5HfXp+lDPxxcA87GKJbloI/xOmxegZ8Bx/E452hvfNTkNZ6bToSnrgW\nN4S/+4hsqg506aGR/LO+460vVwOPKctSei24sxia1mwrlKHSGkCLqs7vO1NKntE=\n=Z0UG\n-----END PGP SIGNATURE-----\n", "payload": "tree a32fbe047b2e95200daf2c97260bf131cab69309\nparent 5a82251e9207e9dbec619e92a5072b688b83aa45\nparent 3c63f67802c728bd84953c19735fabd8f071c326\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1614642609 +0100\ncommitter GitHub <noreply@github.com> 1614642609 +0100\n\nRollup merge of #82655 - SkiFire13:fix-issue-81314, r=estebank\n\nHighlight identifier span instead of whole pattern span in `unused` lint\n\nFixes #81314\n\nThis pretty much just changes the span highlighted in the lint from `pat_sp` to `ident.span`. There's however an exception, which is in patterns with shorthands like `Point { y, ref mut x }`, where a suggestion to change just `x` would be invalid; in those cases I had to keep the pattern span. Another option would be suggesting something like `Point { y, x: ref mut _x }`.\n\nI also added a new test since there weren't any test that checked the `unused` lint with optional patterns.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d259d1d98a31b299d8c64abf5be429468329dec8", "html_url": "https://github.com/rust-lang/rust/commit/d259d1d98a31b299d8c64abf5be429468329dec8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d259d1d98a31b299d8c64abf5be429468329dec8/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a82251e9207e9dbec619e92a5072b688b83aa45", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a82251e9207e9dbec619e92a5072b688b83aa45", "html_url": "https://github.com/rust-lang/rust/commit/5a82251e9207e9dbec619e92a5072b688b83aa45"}, {"sha": "3c63f67802c728bd84953c19735fabd8f071c326", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c63f67802c728bd84953c19735fabd8f071c326", "html_url": "https://github.com/rust-lang/rust/commit/3c63f67802c728bd84953c19735fabd8f071c326"}], "stats": {"total": 186, "additions": 127, "deletions": 59}, "files": [{"sha": "a96f3323744304c572eeed9dc4d13060d47f47d4", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 66, "deletions": 43, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/d259d1d98a31b299d8c64abf5be429468329dec8/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d259d1d98a31b299d8c64abf5be429468329dec8/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=d259d1d98a31b299d8c64abf5be429468329dec8", "patch": "@@ -1494,12 +1494,13 @@ impl<'tcx> Liveness<'_, 'tcx> {\n         // bindings, and we also consider the first pattern to be the \"authoritative\" set of ids.\n         // However, we should take the ids and spans of variables with the same name from the later\n         // patterns so the suggestions to prefix with underscores will apply to those too.\n-        let mut vars: FxIndexMap<Symbol, (LiveNode, Variable, Vec<(HirId, Span)>)> = <_>::default();\n+        let mut vars: FxIndexMap<Symbol, (LiveNode, Variable, Vec<(HirId, Span, Span)>)> =\n+            <_>::default();\n \n         pat.each_binding(|_, hir_id, pat_sp, ident| {\n             let ln = entry_ln.unwrap_or_else(|| self.live_node(hir_id, pat_sp));\n             let var = self.variable(hir_id, ident.span);\n-            let id_and_sp = (hir_id, pat_sp);\n+            let id_and_sp = (hir_id, pat_sp, ident.span);\n             vars.entry(self.ir.variable_name(var))\n                 .and_modify(|(.., hir_ids_and_spans)| hir_ids_and_spans.push(id_and_sp))\n                 .or_insert_with(|| (ln, var, vec![id_and_sp]));\n@@ -1508,15 +1509,21 @@ impl<'tcx> Liveness<'_, 'tcx> {\n         for (_, (ln, var, hir_ids_and_spans)) in vars {\n             if self.used_on_entry(ln, var) {\n                 let id = hir_ids_and_spans[0].0;\n-                let spans = hir_ids_and_spans.into_iter().map(|(_, sp)| sp).collect();\n+                let spans =\n+                    hir_ids_and_spans.into_iter().map(|(_, _, ident_span)| ident_span).collect();\n                 on_used_on_entry(spans, id, ln, var);\n             } else {\n                 self.report_unused(hir_ids_and_spans, ln, var);\n             }\n         }\n     }\n \n-    fn report_unused(&self, hir_ids_and_spans: Vec<(HirId, Span)>, ln: LiveNode, var: Variable) {\n+    fn report_unused(\n+        &self,\n+        hir_ids_and_spans: Vec<(HirId, Span, Span)>,\n+        ln: LiveNode,\n+        var: Variable,\n+    ) {\n         let first_hir_id = hir_ids_and_spans[0].0;\n \n         if let Some(name) = self.should_warn(var).filter(|name| name != \"self\") {\n@@ -1530,62 +1537,78 @@ impl<'tcx> Liveness<'_, 'tcx> {\n                 self.ir.tcx.struct_span_lint_hir(\n                     lint::builtin::UNUSED_VARIABLES,\n                     first_hir_id,\n-                    hir_ids_and_spans.into_iter().map(|(_, sp)| sp).collect::<Vec<_>>(),\n+                    hir_ids_and_spans\n+                        .into_iter()\n+                        .map(|(_, _, ident_span)| ident_span)\n+                        .collect::<Vec<_>>(),\n                     |lint| {\n                         lint.build(&format!(\"variable `{}` is assigned to, but never used\", name))\n                             .note(&format!(\"consider using `_{}` instead\", name))\n                             .emit();\n                     },\n                 )\n             } else {\n-                self.ir.tcx.struct_span_lint_hir(\n-                    lint::builtin::UNUSED_VARIABLES,\n-                    first_hir_id,\n-                    hir_ids_and_spans.iter().map(|(_, sp)| *sp).collect::<Vec<_>>(),\n-                    |lint| {\n-                        let mut err = lint.build(&format!(\"unused variable: `{}`\", name));\n-\n-                        let (shorthands, non_shorthands): (Vec<_>, Vec<_>) =\n-                            hir_ids_and_spans.into_iter().partition(|(hir_id, span)| {\n-                                let var = self.variable(*hir_id, *span);\n-                                self.ir.variable_is_shorthand(var)\n-                            });\n-\n-                        let mut shorthands = shorthands\n-                            .into_iter()\n-                            .map(|(_, span)| (span, format!(\"{}: _\", name)))\n-                            .collect::<Vec<_>>();\n-\n-                        // If we have both shorthand and non-shorthand, prefer the \"try ignoring\n-                        // the field\" message, and suggest `_` for the non-shorthands. If we only\n-                        // have non-shorthand, then prefix with an underscore instead.\n-                        if !shorthands.is_empty() {\n-                            shorthands.extend(\n-                                non_shorthands\n-                                    .into_iter()\n-                                    .map(|(_, span)| (span, \"_\".to_string()))\n-                                    .collect::<Vec<_>>(),\n-                            );\n+                let (shorthands, non_shorthands): (Vec<_>, Vec<_>) =\n+                    hir_ids_and_spans.iter().copied().partition(|(hir_id, _, ident_span)| {\n+                        let var = self.variable(*hir_id, *ident_span);\n+                        self.ir.variable_is_shorthand(var)\n+                    });\n \n+                // If we have both shorthand and non-shorthand, prefer the \"try ignoring\n+                // the field\" message, and suggest `_` for the non-shorthands. If we only\n+                // have non-shorthand, then prefix with an underscore instead.\n+                if !shorthands.is_empty() {\n+                    let shorthands = shorthands\n+                        .into_iter()\n+                        .map(|(_, pat_span, _)| (pat_span, format!(\"{}: _\", name)))\n+                        .chain(\n+                            non_shorthands\n+                                .into_iter()\n+                                .map(|(_, pat_span, _)| (pat_span, \"_\".to_string())),\n+                        )\n+                        .collect::<Vec<_>>();\n+\n+                    self.ir.tcx.struct_span_lint_hir(\n+                        lint::builtin::UNUSED_VARIABLES,\n+                        first_hir_id,\n+                        hir_ids_and_spans\n+                            .iter()\n+                            .map(|(_, pat_span, _)| *pat_span)\n+                            .collect::<Vec<_>>(),\n+                        |lint| {\n+                            let mut err = lint.build(&format!(\"unused variable: `{}`\", name));\n                             err.multipart_suggestion(\n                                 \"try ignoring the field\",\n                                 shorthands,\n                                 Applicability::MachineApplicable,\n                             );\n-                        } else {\n+                            err.emit()\n+                        },\n+                    );\n+                } else {\n+                    let non_shorthands = non_shorthands\n+                        .into_iter()\n+                        .map(|(_, _, ident_span)| (ident_span, format!(\"_{}\", name)))\n+                        .collect::<Vec<_>>();\n+\n+                    self.ir.tcx.struct_span_lint_hir(\n+                        lint::builtin::UNUSED_VARIABLES,\n+                        first_hir_id,\n+                        hir_ids_and_spans\n+                            .iter()\n+                            .map(|(_, _, ident_span)| *ident_span)\n+                            .collect::<Vec<_>>(),\n+                        |lint| {\n+                            let mut err = lint.build(&format!(\"unused variable: `{}`\", name));\n                             err.multipart_suggestion(\n                                 \"if this is intentional, prefix it with an underscore\",\n-                                non_shorthands\n-                                    .into_iter()\n-                                    .map(|(_, span)| (span, format!(\"_{}\", name)))\n-                                    .collect::<Vec<_>>(),\n+                                non_shorthands,\n                                 Applicability::MachineApplicable,\n                             );\n-                        }\n-\n-                        err.emit()\n-                    },\n-                );\n+                            err.emit()\n+                        },\n+                    );\n+                }\n             }\n         }\n     }"}, {"sha": "2ef655efdbdf045d8e19bc22c190ca060c562af5", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d259d1d98a31b299d8c64abf5be429468329dec8/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d259d1d98a31b299d8c64abf5be429468329dec8/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr?ref=d259d1d98a31b299d8c64abf5be429468329dec8", "patch": "@@ -12,16 +12,16 @@ LL | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n    = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n \n warning: unused variable: `mut_unused_var`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:33:9\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:33:13\n    |\n LL |     let mut mut_unused_var = 1;\n-   |         ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mut_unused_var`\n+   |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mut_unused_var`\n \n warning: unused variable: `var`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:37:10\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:37:14\n    |\n LL |     let (mut var, unused_var) = (1, 2);\n-   |          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_var`\n+   |              ^^^ help: if this is intentional, prefix it with an underscore: `_var`\n \n warning: unused variable: `unused_var`\n   --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:37:19\n@@ -36,10 +36,10 @@ LL |     if let SoulHistory { corridors_of_light,\n    |                          ^^^^^^^^^^^^^^^^^^ help: try ignoring the field: `corridors_of_light: _`\n \n warning: variable `hours_are_suns` is assigned to, but never used\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:46:26\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:46:30\n    |\n LL |                          mut hours_are_suns,\n-   |                          ^^^^^^^^^^^^^^^^^^\n+   |                              ^^^^^^^^^^^^^^\n    |\n    = note: consider using `_hours_are_suns` instead\n "}, {"sha": "aac918f2bc8179d66e535c6c76470a030ebe3b86", "filename": "src/test/ui/lint/issue-81314-unused-span-ident.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d259d1d98a31b299d8c64abf5be429468329dec8/src%2Ftest%2Fui%2Flint%2Fissue-81314-unused-span-ident.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d259d1d98a31b299d8c64abf5be429468329dec8/src%2Ftest%2Fui%2Flint%2Fissue-81314-unused-span-ident.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-81314-unused-span-ident.fixed?ref=d259d1d98a31b299d8c64abf5be429468329dec8", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+// Regression test for #81314: Unused variable lint should\n+// span only the identifier and not the rest of the pattern\n+\n+#![deny(unused)]\n+\n+fn main() {\n+    let [_rest @ ..] = [1, 2, 3]; //~ ERROR unused variable\n+}\n+\n+pub fn foo([_rest @ ..]: &[i32]) { //~ ERROR unused variable\n+}"}, {"sha": "78296f4258d73c6f9756f2cb4496c1056fcefffc", "filename": "src/test/ui/lint/issue-81314-unused-span-ident.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d259d1d98a31b299d8c64abf5be429468329dec8/src%2Ftest%2Fui%2Flint%2Fissue-81314-unused-span-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d259d1d98a31b299d8c64abf5be429468329dec8/src%2Ftest%2Fui%2Flint%2Fissue-81314-unused-span-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-81314-unused-span-ident.rs?ref=d259d1d98a31b299d8c64abf5be429468329dec8", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+// Regression test for #81314: Unused variable lint should\n+// span only the identifier and not the rest of the pattern\n+\n+#![deny(unused)]\n+\n+fn main() {\n+    let [rest @ ..] = [1, 2, 3]; //~ ERROR unused variable\n+}\n+\n+pub fn foo([rest @ ..]: &[i32]) { //~ ERROR unused variable\n+}"}, {"sha": "519c71e941311a7e23c30aa31acf1f9561806779", "filename": "src/test/ui/lint/issue-81314-unused-span-ident.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d259d1d98a31b299d8c64abf5be429468329dec8/src%2Ftest%2Fui%2Flint%2Fissue-81314-unused-span-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d259d1d98a31b299d8c64abf5be429468329dec8/src%2Ftest%2Fui%2Flint%2Fissue-81314-unused-span-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-81314-unused-span-ident.stderr?ref=d259d1d98a31b299d8c64abf5be429468329dec8", "patch": "@@ -0,0 +1,21 @@\n+error: unused variable: `rest`\n+  --> $DIR/issue-81314-unused-span-ident.rs:8:10\n+   |\n+LL |     let [rest @ ..] = [1, 2, 3];\n+   |          ^^^^ help: if this is intentional, prefix it with an underscore: `_rest`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-81314-unused-span-ident.rs:5:9\n+   |\n+LL | #![deny(unused)]\n+   |         ^^^^^^\n+   = note: `#[deny(unused_variables)]` implied by `#[deny(unused)]`\n+\n+error: unused variable: `rest`\n+  --> $DIR/issue-81314-unused-span-ident.rs:11:13\n+   |\n+LL | pub fn foo([rest @ ..]: &[i32]) {\n+   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_rest`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "b1beec97df568ae97d18dabe421d20d174f0fa7d", "filename": "src/test/ui/liveness/liveness-consts.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d259d1d98a31b299d8c64abf5be429468329dec8/src%2Ftest%2Fui%2Fliveness%2Fliveness-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d259d1d98a31b299d8c64abf5be429468329dec8/src%2Ftest%2Fui%2Fliveness%2Fliveness-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-consts.stderr?ref=d259d1d98a31b299d8c64abf5be429468329dec8", "patch": "@@ -1,8 +1,8 @@\n warning: variable `a` is assigned to, but never used\n-  --> $DIR/liveness-consts.rs:7:9\n+  --> $DIR/liveness-consts.rs:7:13\n    |\n LL |     let mut a = 0;\n-   |         ^^^^^\n+   |             ^\n    |\n note: the lint level is defined here\n   --> $DIR/liveness-consts.rs:2:9"}, {"sha": "12680ab11568fb05a6f0d54a86a578249b9868ac", "filename": "src/test/ui/liveness/liveness-dead.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d259d1d98a31b299d8c64abf5be429468329dec8/src%2Ftest%2Fui%2Fliveness%2Fliveness-dead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d259d1d98a31b299d8c64abf5be429468329dec8/src%2Ftest%2Fui%2Fliveness%2Fliveness-dead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-dead.stderr?ref=d259d1d98a31b299d8c64abf5be429468329dec8", "patch": "@@ -1,8 +1,8 @@\n error: value assigned to `x` is never read\n-  --> $DIR/liveness-dead.rs:9:9\n+  --> $DIR/liveness-dead.rs:9:13\n    |\n LL |     let mut x: isize = 3;\n-   |         ^^^^^\n+   |             ^\n    |\n note: the lint level is defined here\n   --> $DIR/liveness-dead.rs:2:9\n@@ -20,10 +20,10 @@ LL |     x = 4;\n    = help: maybe it is overwritten before being read?\n \n error: value passed to `x` is never read\n-  --> $DIR/liveness-dead.rs:20:7\n+  --> $DIR/liveness-dead.rs:20:11\n    |\n LL | fn f4(mut x: i32) {\n-   |       ^^^^^\n+   |           ^\n    |\n    = help: maybe it is overwritten before being read?\n "}, {"sha": "4a6122681a946d584c8af9a05fa3311a3d882459", "filename": "src/test/ui/liveness/liveness-unused.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d259d1d98a31b299d8c64abf5be429468329dec8/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d259d1d98a31b299d8c64abf5be429468329dec8/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr?ref=d259d1d98a31b299d8c64abf5be429468329dec8", "patch": "@@ -44,10 +44,10 @@ LL |     let x = 3;\n    |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n \n error: variable `x` is assigned to, but never used\n-  --> $DIR/liveness-unused.rs:30:9\n+  --> $DIR/liveness-unused.rs:30:13\n    |\n LL |     let mut x = 3;\n-   |         ^^^^^\n+   |             ^\n    |\n    = note: consider using `_x` instead\n \n@@ -65,10 +65,10 @@ LL | #![deny(unused_assignments)]\n    = help: maybe it is overwritten before being read?\n \n error: variable `z` is assigned to, but never used\n-  --> $DIR/liveness-unused.rs:37:9\n+  --> $DIR/liveness-unused.rs:37:13\n    |\n LL |     let mut z = 3;\n-   |         ^^^^^\n+   |             ^\n    |\n    = note: consider using `_z` instead\n "}]}