{"sha": "87d5ef8c4a367d112d085827e8ad4f84b8ff809f", "node_id": "C_kwDOAAsO6NoAKDg3ZDVlZjhjNGEzNjdkMTEyZDA4NTgyN2U4YWQ0Zjg0YjhmZjgwOWY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-18T12:56:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-18T12:56:33Z"}, "message": "Merge #10578\n\n10578: Fix partialord codegen take 2 r=lnicola a=yoshuawuyts\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10576. This reverts \"generate `PartialOrd` to our previous match-based design, and in turn uses that to correctly take references for multi-value comparisons. This is a bit more verbose, but it should be more readable and easier to edit by end-users than multiple nested layers of borrows. I also manually verified every example in the Rust playground to ensure it works. Thanks!\r\n\r\ncc/ `@WaffleLapkin` \n\nCo-authored-by: Yoshua Wuyts <yoshuawuyts@gmail.com>", "tree": {"sha": "5d0504c542930adb026879a781b0b698c012ee4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d0504c542930adb026879a781b0b698c012ee4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87d5ef8c4a367d112d085827e8ad4f84b8ff809f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhbW8BCRBK7hj4Ov3rIwAA5vgIAGfMqEydjoXf6pVUZM8hoRFD\nGoQF/Yi3HJ8mmKt+E4i5HwUZI4bF62QKpj7bJywmHq1+faJ9a6xojYYQyrv5H5xp\nlSbiyQXta6TFKk635r0ZdVPkciMo8jFvSEy3QnMu65pdsKevC1UYvE4p9coJzQAz\nsPCsgCGb/cz8KqzaGzfYyqKaFXvs2IiRMKO4P1L+MqqUQ4MS5/YcJ7DJePyPZnT6\niD5tblKV+XRWOP3t0APoSyMB85Olym1ue1R3ZZbxRa+0gUeeMpsjaW6jL477XKQi\nKLvimR9q1TUeDOezp7hNpe+HnCTKdqf+QhR8x1Pzyrh3RAhXFl4ltL0F+O4iVtU=\n=6hjn\n-----END PGP SIGNATURE-----\n", "payload": "tree 5d0504c542930adb026879a781b0b698c012ee4d\nparent 48c3be922e9ecc49bcdc77e21dbf6149f792a380\nparent e346d32e690a24ad9de69e94b9f302d7a74e4ec5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634561793 +0000\ncommitter GitHub <noreply@github.com> 1634561793 +0000\n\nMerge #10578\n\n10578: Fix partialord codegen take 2 r=lnicola a=yoshuawuyts\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10576. This reverts \"generate `PartialOrd` to our previous match-based design, and in turn uses that to correctly take references for multi-value comparisons. This is a bit more verbose, but it should be more readable and easier to edit by end-users than multiple nested layers of borrows. I also manually verified every example in the Rust playground to ensure it works. Thanks!\r\n\r\ncc/ `@WaffleLapkin` \n\nCo-authored-by: Yoshua Wuyts <yoshuawuyts@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87d5ef8c4a367d112d085827e8ad4f84b8ff809f", "html_url": "https://github.com/rust-lang/rust/commit/87d5ef8c4a367d112d085827e8ad4f84b8ff809f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87d5ef8c4a367d112d085827e8ad4f84b8ff809f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48c3be922e9ecc49bcdc77e21dbf6149f792a380", "url": "https://api.github.com/repos/rust-lang/rust/commits/48c3be922e9ecc49bcdc77e21dbf6149f792a380", "html_url": "https://github.com/rust-lang/rust/commit/48c3be922e9ecc49bcdc77e21dbf6149f792a380"}, {"sha": "e346d32e690a24ad9de69e94b9f302d7a74e4ec5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e346d32e690a24ad9de69e94b9f302d7a74e4ec5", "html_url": "https://github.com/rust-lang/rust/commit/e346d32e690a24ad9de69e94b9f302d7a74e4ec5"}], "stats": {"total": 73, "additions": 54, "deletions": 19}, "files": [{"sha": "042f31e5c4dd0730b5806cb079ad4e88acc005c1", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/87d5ef8c4a367d112d085827e8ad4f84b8ff809f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87d5ef8c4a367d112d085827e8ad4f84b8ff809f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=87d5ef8c4a367d112d085827e8ad4f84b8ff809f", "patch": "@@ -722,7 +722,15 @@ struct Foo {\n \n impl PartialOrd for Foo {\n     $0fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n-        (self.bin, self.bar, self.baz).partial_cmp(&(other.bin, other.bar, other.baz))\n+        match self.bin.partial_cmp(&other.bin) {\n+            Some(core::cmp::Ordering::Equal) => {}\n+            ord => return ord,\n+        }\n+        match self.bar.partial_cmp(&other.bar) {\n+            Some(core::cmp::Ordering::Equal) => {}\n+            ord => return ord,\n+        }\n+        self.baz.partial_cmp(&other.baz)\n     }\n }\n \"#,\n@@ -743,7 +751,15 @@ struct Foo(usize, usize, usize);\n \n impl PartialOrd for Foo {\n     $0fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n-        (self.0, self.1, self.2).partial_cmp(&(other.0, other.1, other.2))\n+        match self.0.partial_cmp(&other.0) {\n+            Some(core::cmp::Ordering::Equal) => {}\n+            ord => return ord,\n+        }\n+        match self.1.partial_cmp(&other.1) {\n+            Some(core::cmp::Ordering::Equal) => {}\n+            ord => return ord,\n+        }\n+        self.2.partial_cmp(&other.2)\n     }\n }\n \"#,"}, {"sha": "908bb136beb9e1e505fb0ca472d16cf3266a9e95", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/87d5ef8c4a367d112d085827e8ad4f84b8ff809f/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87d5ef8c4a367d112d085827e8ad4f84b8ff809f/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=87d5ef8c4a367d112d085827e8ad4f84b8ff809f", "patch": "@@ -574,11 +574,24 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n }\n \n fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n-    fn gen_partial_cmp_call(mut lhs: Vec<ast::Expr>, mut rhs: Vec<ast::Expr>) -> ast::Expr {\n-        let (lhs, rhs) = match (lhs.len(), rhs.len()) {\n-            (1, 1) => (lhs.pop().unwrap(), rhs.pop().unwrap()),\n-            _ => (make::expr_tuple(lhs.into_iter()), make::expr_tuple(rhs.into_iter())),\n-        };\n+    fn gen_partial_eq_match(match_target: ast::Expr) -> Option<ast::Stmt> {\n+        let mut arms = vec![];\n+\n+        let variant_name =\n+            make::path_pat(make::ext::path_from_idents([\"core\", \"cmp\", \"Ordering\", \"Equal\"])?);\n+        let lhs = make::tuple_struct_pat(make::ext::path_from_idents([\"Some\"])?, [variant_name]);\n+        arms.push(make::match_arm(Some(lhs.into()), None, make::expr_empty_block()));\n+\n+        arms.push(make::match_arm(\n+            [make::ident_pat(false, false, make::name(\"ord\")).into()],\n+            None,\n+            make::expr_return(Some(make::expr_path(make::ext::ident_path(\"ord\")))),\n+        ));\n+        let list = make::match_arm_list(arms).indent(ast::edit::IndentLevel(1));\n+        Some(make::expr_stmt(make::expr_match(match_target, list)).into())\n+    }\n+\n+    fn gen_partial_cmp_call(lhs: ast::Expr, rhs: ast::Expr) -> ast::Expr {\n         let rhs = make::expr_ref(rhs, false);\n         let method = make::name_ref(\"partial_cmp\");\n         make::expr_method_call(lhs, method, make::arg_list(Some(rhs)))\n@@ -594,35 +607,41 @@ fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n         ast::Adt::Enum(_) => return None,\n         ast::Adt::Struct(strukt) => match strukt.field_list() {\n             Some(ast::FieldList::RecordFieldList(field_list)) => {\n-                let mut l_fields = vec![];\n-                let mut r_fields = vec![];\n+                let mut exprs = vec![];\n                 for field in field_list.fields() {\n                     let lhs = make::expr_path(make::ext::ident_path(\"self\"));\n                     let lhs = make::expr_field(lhs, &field.name()?.to_string());\n                     let rhs = make::expr_path(make::ext::ident_path(\"other\"));\n                     let rhs = make::expr_field(rhs, &field.name()?.to_string());\n-                    l_fields.push(lhs);\n-                    r_fields.push(rhs);\n+                    let ord = gen_partial_cmp_call(lhs, rhs);\n+                    exprs.push(ord);\n                 }\n \n-                let expr = gen_partial_cmp_call(l_fields, r_fields);\n-                make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1))\n+                let tail = exprs.pop();\n+                let stmts = exprs\n+                    .into_iter()\n+                    .map(gen_partial_eq_match)\n+                    .collect::<Option<Vec<ast::Stmt>>>()?;\n+                make::block_expr(stmts.into_iter(), tail).indent(ast::edit::IndentLevel(1))\n             }\n \n             Some(ast::FieldList::TupleFieldList(field_list)) => {\n-                let mut l_fields = vec![];\n-                let mut r_fields = vec![];\n+                let mut exprs = vec![];\n                 for (i, _) in field_list.fields().enumerate() {\n                     let idx = format!(\"{}\", i);\n                     let lhs = make::expr_path(make::ext::ident_path(\"self\"));\n                     let lhs = make::expr_field(lhs, &idx);\n                     let rhs = make::expr_path(make::ext::ident_path(\"other\"));\n                     let rhs = make::expr_field(rhs, &idx);\n-                    l_fields.push(lhs);\n-                    r_fields.push(rhs);\n+                    let ord = gen_partial_cmp_call(lhs, rhs);\n+                    exprs.push(ord);\n                 }\n-                let expr = gen_partial_cmp_call(l_fields, r_fields);\n-                make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1))\n+                let tail = exprs.pop();\n+                let stmts = exprs\n+                    .into_iter()\n+                    .map(gen_partial_eq_match)\n+                    .collect::<Option<Vec<ast::Stmt>>>()?;\n+                make::block_expr(stmts.into_iter(), tail).indent(ast::edit::IndentLevel(1))\n             }\n \n             // No fields in the body means there's nothing to hash."}]}