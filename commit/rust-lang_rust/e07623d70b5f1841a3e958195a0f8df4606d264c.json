{"sha": "e07623d70b5f1841a3e958195a0f8df4606d264c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNzYyM2Q3MGI1ZjE4NDFhM2U5NTgxOTVhMGY4ZGY0NjA2ZDI2NGM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-12T00:28:39Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-13T17:47:20Z"}, "message": "librustc: Make monomorphic newtype structs work cross-crate", "tree": {"sha": "c51b22dddf3c61f327e91b774d86a0f816f93b2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c51b22dddf3c61f327e91b774d86a0f816f93b2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e07623d70b5f1841a3e958195a0f8df4606d264c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e07623d70b5f1841a3e958195a0f8df4606d264c", "html_url": "https://github.com/rust-lang/rust/commit/e07623d70b5f1841a3e958195a0f8df4606d264c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e07623d70b5f1841a3e958195a0f8df4606d264c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6016214101d40c627f2c52412fb77d56254c901e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6016214101d40c627f2c52412fb77d56254c901e", "html_url": "https://github.com/rust-lang/rust/commit/6016214101d40c627f2c52412fb77d56254c901e"}], "stats": {"total": 174, "additions": 138, "deletions": 36}, "files": [{"sha": "27c9435bcbcca97fcb7285a957907dbb5c11915d", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=e07623d70b5f1841a3e958195a0f8df4606d264c", "patch": "@@ -153,5 +153,8 @@ pub const tag_lang_items_item: uint = 0x73;\n pub const tag_lang_items_item_id: uint = 0x74;\n pub const tag_lang_items_item_node_id: uint = 0x75;\n \n+pub const tag_item_unnamed_field: uint = 0x76;\n+pub const tag_items_data_item_struct_ctor: uint = 0x77;\n+\n pub type link_meta = {name: @str, vers: @str, extras_hash: @str};\n "}, {"sha": "fa82e6c92c098ffdd78b47dff59fa5517c30e203", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=e07623d70b5f1841a3e958195a0f8df4606d264c", "patch": "@@ -166,8 +166,9 @@ pub fn get_item_attrs(cstore: @mut cstore::CStore,\n     decoder::get_item_attrs(cdata, def_id.node, f)\n }\n \n-pub fn get_struct_fields(tcx: ty::ctxt, def: ast::def_id) -> ~[ty::field_ty] {\n-    let cstore = tcx.cstore;\n+pub fn get_struct_fields(cstore: @mut cstore::CStore,\n+                         def: ast::def_id)\n+                      -> ~[ty::field_ty] {\n     let cdata = cstore::get_crate_data(cstore, def.crate);\n     decoder::get_struct_fields(cstore.intr, cdata, def.node)\n }"}, {"sha": "14dda96228206e7a21e9841fbbf822a72813a1be", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=e07623d70b5f1841a3e958195a0f8df4606d264c", "patch": "@@ -42,7 +42,7 @@ use std::serialize::Decodable;\n use syntax::ast_map;\n use syntax::attr;\n use syntax::diagnostic::span_handler;\n-use syntax::parse::token::ident_interner;\n+use syntax::parse::token::{ident_interner, special_idents};\n use syntax::print::pprust;\n use syntax::{ast, ast_util};\n use syntax::codemap;\n@@ -231,7 +231,9 @@ pub fn item_type(item_id: ast::def_id, item: ebml::Doc,\n     let t = doc_type(item, tcx, cdata);\n     if family_names_type(item_family(item)) {\n         ty::mk_with_id(tcx, t, item_id)\n-    } else { t }\n+    } else {\n+        t\n+    }\n }\n \n fn item_impl_traits(item: ebml::Doc, tcx: ty::ctxt, cdata: cmd) -> ~[ty::t] {\n@@ -661,11 +663,12 @@ fn item_impl_methods(intr: @ident_interner, cdata: cmd, item: ebml::Doc,\n     rslt\n }\n \n-pub fn get_impls_for_mod(intr: @ident_interner, cdata: cmd,\n-                         m_id: ast::node_id, name: Option<ast::ident>,\n-                         get_cdata: fn(ast::crate_num) -> cmd)\n+pub fn get_impls_for_mod(intr: @ident_interner,\n+                         cdata: cmd,\n+                         m_id: ast::node_id,\n+                         name: Option<ast::ident>,\n+                         get_cdata: &fn(ast::crate_num) -> cmd)\n                       -> @~[@_impl] {\n-\n     let data = cdata.data;\n     let mod_item = lookup_item(m_id, data);\n     let mut result = ~[];\n@@ -887,6 +890,15 @@ pub fn get_struct_fields(intr: @ident_interner, cdata: cmd, id: ast::node_id)\n             });\n         }\n     }\n+    for reader::tagged_docs(item, tag_item_unnamed_field) |an_item| {\n+        let did = item_def_id(an_item, cdata);\n+        result.push(ty::field_ty {\n+            ident: special_idents::unnamed_field,\n+            id: did,\n+            vis: ast::inherited,\n+            mutability: ast::struct_immutable,\n+        });\n+    }\n     result\n }\n "}, {"sha": "3c39a4032f539ac4cfd0ac15d370ccb992bc335c", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 69, "deletions": 21, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=e07623d70b5f1841a3e958195a0f8df4606d264c", "patch": "@@ -46,6 +46,7 @@ use syntax::ast_map;\n use syntax::ast_util::*;\n use syntax::attr;\n use syntax::diagnostic::span_handler;\n+use syntax::parse::token::special_idents;\n use syntax::print::pprust;\n use syntax::{ast_util, visit};\n use syntax;\n@@ -328,7 +329,7 @@ fn encode_info_for_mod(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n     // Encode info about all the module children.\n     for md.items.each |item| {\n         match item.node {\n-            item_impl(*) | item_struct(*) => {\n+            item_impl(*) => {\n                 let (ident, did) = (item.ident, item.id);\n                 debug!(\"(encoding info for module) ... encoding impl %s \\\n                         (%?/%?)\",\n@@ -432,25 +433,28 @@ fn encode_info_for_struct(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n      /* We encode both private and public fields -- need to include\n         private fields to get the offsets right */\n     for fields.each |field| {\n-        match field.node.kind {\n-            named_field(nm, mt, vis) => {\n-                let id = field.node.id;\n-                index.push({val: id, pos: ebml_w.writer.tell()});\n-                global_index.push({val: id,\n-                                    pos: ebml_w.writer.tell()});\n-                ebml_w.start_tag(tag_items_data_item);\n-                debug!(\"encode_info_for_struct: doing %s %d\",\n-                       tcx.sess.str_of(nm), id);\n-                encode_visibility(ebml_w, vis);\n-                encode_name(ecx, ebml_w, nm);\n-                encode_path(ecx, ebml_w, path, ast_map::path_name(nm));\n-                encode_type(ecx, ebml_w, node_id_to_type(tcx, id));\n-                encode_mutability(ebml_w, mt);\n-                encode_def_id(ebml_w, local_def(id));\n-                ebml_w.end_tag();\n-            }\n-            unnamed_field => {}\n-        }\n+        let (nm, mt, vis) = match field.node.kind {\n+            named_field(nm, mt, vis) => (nm, mt, vis),\n+            unnamed_field => (\n+                special_idents::unnamed_field,\n+                struct_immutable,\n+                inherited\n+            )\n+        };\n+\n+        let id = field.node.id;\n+        index.push({val: id, pos: ebml_w.writer.tell()});\n+        global_index.push({val: id, pos: ebml_w.writer.tell()});\n+        ebml_w.start_tag(tag_items_data_item);\n+        debug!(\"encode_info_for_struct: doing %s %d\",\n+               tcx.sess.str_of(nm), id);\n+        encode_visibility(ebml_w, vis);\n+        encode_name(ecx, ebml_w, nm);\n+        encode_path(ecx, ebml_w, path, ast_map::path_name(nm));\n+        encode_type(ecx, ebml_w, node_id_to_type(tcx, id));\n+        encode_mutability(ebml_w, mt);\n+        encode_def_id(ebml_w, local_def(id));\n+        ebml_w.end_tag();\n     }\n     /*bad*/copy *index\n }\n@@ -481,6 +485,28 @@ fn encode_info_for_ctor(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n         ebml_w.end_tag();\n }\n \n+fn encode_info_for_struct_ctor(ecx: @encode_ctxt,\n+                               ebml_w: writer::Encoder,\n+                               path: &[ast_map::path_elt],\n+                               name: ast::ident,\n+                               ctor_id: node_id,\n+                               index: @mut ~[entry<int>]) {\n+    index.push({ val: ctor_id, pos: ebml_w.writer.tell() });\n+\n+    ebml_w.start_tag(tag_items_data_item);\n+    encode_def_id(ebml_w, local_def(ctor_id));\n+    encode_family(ebml_w, 'f');\n+    encode_name(ecx, ebml_w, name);\n+    encode_type(ecx, ebml_w, node_id_to_type(ecx.tcx, ctor_id));\n+    encode_path(ecx, ebml_w, path, ast_map::path_name(name));\n+\n+    if ecx.item_symbols.contains_key(&ctor_id) {\n+        encode_symbol(ecx, ebml_w, ctor_id);\n+    }\n+\n+    ebml_w.end_tag();\n+}\n+\n fn encode_info_for_method(ecx: @encode_ctxt,\n                           ebml_w: writer::Encoder,\n                           impl_path: &[ast_map::path_elt],\n@@ -674,6 +700,24 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n         encode_family(ebml_w, 'S');\n         encode_type_param_bounds(ebml_w, ecx, tps);\n         encode_type(ecx, ebml_w, node_id_to_type(tcx, item.id));\n+\n+        // If this is a tuple- or enum-like struct, encode the type of the\n+        // constructor.\n+        if struct_def.fields.len() > 0 &&\n+                struct_def.fields[0].node.kind == ast::unnamed_field {\n+            let ctor_id = match struct_def.ctor_id {\n+                Some(ctor_id) => ctor_id,\n+                None => ecx.tcx.sess.bug(~\"struct def didn't have ctor id\"),\n+            };\n+\n+            encode_info_for_struct_ctor(ecx,\n+                                        ebml_w,\n+                                        path,\n+                                        item.ident,\n+                                        ctor_id,\n+                                        index);\n+        }\n+\n         encode_name(ecx, ebml_w, item.ident);\n         encode_path(ecx, ebml_w, path, ast_map::path_name(item.ident));\n         encode_region_param(ecx, ebml_w, item);\n@@ -697,7 +741,11 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n                    encode_def_id(ebml_w, local_def(f.node.id));\n                    ebml_w.end_tag();\n                 }\n-                unnamed_field => {}\n+                unnamed_field => {\n+                    ebml_w.start_tag(tag_item_unnamed_field);\n+                    encode_def_id(ebml_w, local_def(f.node.id));\n+                    ebml_w.end_tag();\n+                }\n             }\n         }\n "}, {"sha": "ea840da73cd98e20a19154eea1e6efb8ce32f637", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=e07623d70b5f1841a3e958195a0f8df4606d264c", "patch": "@@ -13,7 +13,8 @@ use core::prelude::*;\n use driver::session;\n use driver::session::Session;\n use metadata::csearch::{each_path, get_method_names_if_trait};\n-use metadata::csearch::{get_static_methods_if_impl, get_type_name_if_impl};\n+use metadata::csearch::{get_static_methods_if_impl, get_struct_fields};\n+use metadata::csearch::{get_type_name_if_impl};\n use metadata::cstore::find_use_stmt_cnum;\n use metadata::decoder::{def_like, dl_def, dl_field, dl_impl};\n use middle::lang_items::LanguageItems;\n@@ -1745,10 +1746,12 @@ pub impl Resolver {\n                                        OverwriteDuplicates,\n                                        dummy_sp());\n \n-                    self.handle_external_def(def, modules,\n+                    self.handle_external_def(def,\n+                                             modules,\n                                              child_name_bindings,\n                                              self.session.str_of(final_ident),\n-                                             final_ident, new_parent);\n+                                             final_ident,\n+                                             new_parent);\n                 }\n                 dl_impl(def) => {\n                     // We only process static methods of impls here."}, {"sha": "c61ff7d5e0267d3b7f96eb719e87f4470ab794a9", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=e07623d70b5f1841a3e958195a0f8df4606d264c", "patch": "@@ -1905,8 +1905,13 @@ pub fn trans_tuple_struct(ccx: @crate_ctxt,\n         }\n     };\n \n-    let fcx = new_fn_ctxt_w_id(ccx, ~[], llfndecl, ctor_id, None,\n-                               param_substs, None);\n+    let fcx = new_fn_ctxt_w_id(ccx,\n+                               ~[],\n+                               llfndecl,\n+                               ctor_id,\n+                               None,\n+                               param_substs,\n+                               None);\n \n     // XXX: Bad copy.\n     let raw_llargs = create_llargs_for_fn_args(fcx, no_self, copy fn_args);"}, {"sha": "bf417e9a5f4f9744d5944266ba93a2b94e98e4bd", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=e07623d70b5f1841a3e958195a0f8df4606d264c", "patch": "@@ -122,6 +122,9 @@ fn traverse_public_item(cx: ctx, item: @item) {\n         }\n       }\n       item_struct(struct_def, tps) => {\n+        for struct_def.ctor_id.each |&ctor_id| {\n+            cx.rmap.insert(ctor_id, ());\n+        }\n         do option::iter(&struct_def.dtor) |dtor| {\n             cx.rmap.insert(dtor.node.id, ());\n             if tps.len() > 0u || attr::find_inline_attr(dtor.node.attrs)"}, {"sha": "d38eef0fcf9f6c70c7a5ba9b37e2528969acb916", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=e07623d70b5f1841a3e958195a0f8df4606d264c", "patch": "@@ -4012,7 +4012,7 @@ pub fn lookup_struct_fields(cx: ctxt, did: ast::def_id) -> ~[field_ty] {\n     }\n         }\n   else {\n-        return csearch::get_struct_fields(cx, did);\n+        return csearch::get_struct_fields(cx.sess.cstore, did);\n     }\n }\n "}, {"sha": "fdf936f7aec622b49779edec29153ab4f103d9e7", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=e07623d70b5f1841a3e958195a0f8df4606d264c", "patch": "@@ -828,7 +828,7 @@ pub impl CoherenceChecker {\n         let implementations = get_impls_for_mod(crate_store,\n                                                 module_def_id,\n                                                 None);\n-        for (*implementations).each |implementation| {\n+        for implementations.each |implementation| {\n             debug!(\"coherence: adding impl from external crate: %s\",\n                    ty::item_path_str(self.crate_context.tcx,\n                                      implementation.did));"}, {"sha": "90036e0f96cd8610c1dd42daea17006110aaae83", "filename": "src/test/auxiliary/newtype_struct_xc.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Ftest%2Fauxiliary%2Fnewtype_struct_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Ftest%2Fauxiliary%2Fnewtype_struct_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fnewtype_struct_xc.rs?ref=e07623d70b5f1841a3e958195a0f8df4606d264c", "patch": "@@ -0,0 +1,4 @@\n+#[crate_type=\"lib\"];\n+\n+pub struct Au(int);\n+"}, {"sha": "a7c686daa7f352b5800c370f744a8e7d64590239", "filename": "src/test/run-pass/newtype-struct-xc-2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Ftest%2Frun-pass%2Fnewtype-struct-xc-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Ftest%2Frun-pass%2Fnewtype-struct-xc-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-struct-xc-2.rs?ref=e07623d70b5f1841a3e958195a0f8df4606d264c", "patch": "@@ -0,0 +1,14 @@\n+// xfail-fast\n+// aux-build:newtype_struct_xc.rs\n+\n+extern mod newtype_struct_xc;\n+use newtype_struct_xc::Au;\n+\n+fn f() -> Au {\n+    Au(2)\n+}\n+\n+fn main() {\n+    let _ = f();\n+}\n+"}, {"sha": "8b15d73dc933d28d27b163c616bb94afa8e43dba", "filename": "src/test/run-pass/newtype-struct-xc.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Ftest%2Frun-pass%2Fnewtype-struct-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07623d70b5f1841a3e958195a0f8df4606d264c/src%2Ftest%2Frun-pass%2Fnewtype-struct-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-struct-xc.rs?ref=e07623d70b5f1841a3e958195a0f8df4606d264c", "patch": "@@ -0,0 +1,9 @@\n+// xfail-fast\n+// aux-build:newtype_struct_xc.rs\n+\n+extern mod newtype_struct_xc;\n+\n+fn main() {\n+    let _ = newtype_struct_xc::Au(2);\n+}\n+"}]}