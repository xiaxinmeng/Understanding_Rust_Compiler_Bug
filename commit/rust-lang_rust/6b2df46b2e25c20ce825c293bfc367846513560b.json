{"sha": "6b2df46b2e25c20ce825c293bfc367846513560b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMmRmNDZiMmUyNWMyMGNlODI1YzI5M2JmYzM2Nzg0NjUxMzU2MGI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-10T16:15:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-10T16:15:18Z"}, "message": "Rollup merge of #70938 - tmiasko:thread-test-case, r=hanna-kruppe\n\nAdd ThreadSanitizer test case", "tree": {"sha": "07aa2f38467fd1ae7eeda6e903281c308a538566", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07aa2f38467fd1ae7eeda6e903281c308a538566"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b2df46b2e25c20ce825c293bfc367846513560b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJekJuWCRBK7hj4Ov3rIwAAdHIIAABY4a6J03z8pQQ7jYLRIEpG\nCGB9rlQYp4iXim5Bk+kL0YwNorOKQZbVBLygCMp3Dag42UiDceuOUtEOd3UeaU+a\nIQbDRLYP43NGaeEJqPDhGtkLXxOL95+6eA6rHlVJwoW+9grtDOmsXE8yxSGNROE0\n32HJVGW2IAhPFUPD1u2m0io+zbD6aMpX8ysrn48I/Gh868e+IsS9v+oNBwiznmRG\nhALJmLEI3jXBmn1RIgs52O+1MHQ8Po5aDDCMydvrOMfDF7PXzZGng1EvJMDvKXqn\nADu5aSUGCxBT+U9mW7EnhFD3r+jZ0P6iI2ODutuVpE9SwQu2WdSqD+z9AKQ3Jw4=\n=FVql\n-----END PGP SIGNATURE-----\n", "payload": "tree 07aa2f38467fd1ae7eeda6e903281c308a538566\nparent 1fe86f47d82263404d088e4fd2f406d056f8babc\nparent 688697d607ae8f174ba0a00c6cc5013eff241e68\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1586535318 +0200\ncommitter GitHub <noreply@github.com> 1586535318 +0200\n\nRollup merge of #70938 - tmiasko:thread-test-case, r=hanna-kruppe\n\nAdd ThreadSanitizer test case\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b2df46b2e25c20ce825c293bfc367846513560b", "html_url": "https://github.com/rust-lang/rust/commit/6b2df46b2e25c20ce825c293bfc367846513560b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b2df46b2e25c20ce825c293bfc367846513560b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fe86f47d82263404d088e4fd2f406d056f8babc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe86f47d82263404d088e4fd2f406d056f8babc", "html_url": "https://github.com/rust-lang/rust/commit/1fe86f47d82263404d088e4fd2f406d056f8babc"}, {"sha": "688697d607ae8f174ba0a00c6cc5013eff241e68", "url": "https://api.github.com/repos/rust-lang/rust/commits/688697d607ae8f174ba0a00c6cc5013eff241e68", "html_url": "https://github.com/rust-lang/rust/commit/688697d607ae8f174ba0a00c6cc5013eff241e68"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "26590be8b1870f5155534a920ddc318721b172b3", "filename": "src/test/ui/sanitize/thread.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6b2df46b2e25c20ce825c293bfc367846513560b/src%2Ftest%2Fui%2Fsanitize%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2df46b2e25c20ce825c293bfc367846513560b/src%2Ftest%2Fui%2Fsanitize%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fthread.rs?ref=6b2df46b2e25c20ce825c293bfc367846513560b", "patch": "@@ -0,0 +1,57 @@\n+// Verifies that ThreadSanitizer is able to detect a data race in heap allocated\n+// memory block.\n+//\n+// Test case minimizes the use of the standard library to avoid its ambiguous\n+// status with respect to instrumentation (it could vary depending on whatever\n+// a function call is inlined or not).\n+//\n+// The conflicting data access is de-facto synchronized with a special TSAN\n+// barrier, which does not introduce synchronization from TSAN perspective, but\n+// is necessary to make the test robust. Without the barrier data race detection\n+// would occasionally fail, making test flaky.\n+//\n+// needs-sanitizer-support\n+// only-x86_64\n+//\n+// compile-flags: -Z sanitizer=thread -O\n+//\n+// run-fail\n+// error-pattern: WARNING: ThreadSanitizer: data race\n+// error-pattern: Location is heap block of size 4\n+// error-pattern: allocated by main thread\n+\n+#![feature(raw_ref_op)]\n+#![feature(rustc_private)]\n+extern crate libc;\n+\n+use std::mem;\n+use std::ptr;\n+\n+static mut BARRIER: u64 = 0;\n+\n+extern \"C\" {\n+    fn __tsan_testonly_barrier_init(barrier: *mut u64, count: u32);\n+    fn __tsan_testonly_barrier_wait(barrier: *mut u64);\n+}\n+\n+extern \"C\" fn start(c: *mut libc::c_void) -> *mut libc::c_void {\n+    unsafe {\n+        let c: *mut u32 = c.cast();\n+        *c += 1;\n+        __tsan_testonly_barrier_wait(&raw mut BARRIER);\n+        ptr::null_mut()\n+    }\n+}\n+\n+fn main() {\n+    unsafe {\n+        __tsan_testonly_barrier_init(&raw mut BARRIER, 2);\n+        let c: *mut u32 = Box::into_raw(Box::new(1));\n+        let mut t: libc::pthread_t = mem::zeroed();\n+        libc::pthread_create(&mut t, ptr::null(), start, c.cast());\n+        __tsan_testonly_barrier_wait(&raw mut BARRIER);\n+        *c += 1;\n+        libc::pthread_join(t, ptr::null_mut());\n+        Box::from_raw(c);\n+    }\n+}"}]}