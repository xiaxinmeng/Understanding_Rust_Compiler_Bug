{"sha": "291ced5e9a9cfb423793cf065f873d2171c19c6a", "node_id": "C_kwDOAAsO6NoAKDI5MWNlZDVlOWE5Y2ZiNDIzNzkzY2YwNjVmODczZDIxNzFjMTljNmE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-17T13:41:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-17T13:41:55Z"}, "message": "Rollup merge of #111588 - MU001999:diag/improve-e0782, r=fee1-dead\n\nEmits E0599 when meeting `MyTrait::missing_method`\n\nFixes #111312", "tree": {"sha": "d0eccf41d4ebd63b5fdb950e47bd7d67e8f0e95d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0eccf41d4ebd63b5fdb950e47bd7d67e8f0e95d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/291ced5e9a9cfb423793cf065f873d2171c19c6a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkZNmjCRBK7hj4Ov3rIwAAmRIIAJ3EVBz6wtXaR5R4SlXm5J6C\n6pSP6VH9zqZsQY14GBo+LBFF5Z2MIu6u6I7/yBzQsqkChGN+8ZsN3ceLMpNnc7/I\nyhd7Nvhgbpf9sfjkTP14ZWaqo3zphFd3EGOVcXz9eDO6LGSaI1hNtIpBRJuKRrEd\nBRBo7ruBvNEgmKJI9J1vezpjyP5TN17H6mF8Fq9r3N2WAD7y2e8ITWsZGbSuXK/D\nOyhAdQgSa+2jM8Nts222knB60n/QddTKEzhErXuVBRJgBkQT4sLR+lyJ4pczI3+u\nF9uBxIqvSa4buidnBUpJc8nJd6PuW331kWu26tebitenY/w5ht8B8+W1B4kLs+o=\n=IHOa\n-----END PGP SIGNATURE-----\n", "payload": "tree d0eccf41d4ebd63b5fdb950e47bd7d67e8f0e95d\nparent 703323e490a6260ab2dd3fdfb6d5db0dde0dc383\nparent db645124221a1e2d3e70b14fbedef019e036c066\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1684330915 +0530\ncommitter GitHub <noreply@github.com> 1684330915 +0530\n\nRollup merge of #111588 - MU001999:diag/improve-e0782, r=fee1-dead\n\nEmits E0599 when meeting `MyTrait::missing_method`\n\nFixes #111312\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/291ced5e9a9cfb423793cf065f873d2171c19c6a", "html_url": "https://github.com/rust-lang/rust/commit/291ced5e9a9cfb423793cf065f873d2171c19c6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/291ced5e9a9cfb423793cf065f873d2171c19c6a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "703323e490a6260ab2dd3fdfb6d5db0dde0dc383", "url": "https://api.github.com/repos/rust-lang/rust/commits/703323e490a6260ab2dd3fdfb6d5db0dde0dc383", "html_url": "https://github.com/rust-lang/rust/commit/703323e490a6260ab2dd3fdfb6d5db0dde0dc383"}, {"sha": "db645124221a1e2d3e70b14fbedef019e036c066", "url": "https://api.github.com/repos/rust-lang/rust/commits/db645124221a1e2d3e70b14fbedef019e036c066", "html_url": "https://github.com/rust-lang/rust/commit/db645124221a1e2d3e70b14fbedef019e036c066"}], "stats": {"total": 194, "additions": 147, "deletions": 47}, "files": [{"sha": "0f3604736199830b99e05585cc186b322ba416e1", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/291ced5e9a9cfb423793cf065f873d2171c19c6a/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291ced5e9a9cfb423793cf065f873d2171c19c6a/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=291ced5e9a9cfb423793cf065f873d2171c19c6a", "patch": "@@ -478,6 +478,7 @@ pub enum StashKey {\n     /// FRU syntax\n     MaybeFruTypo,\n     CallAssocMethod,\n+    TraitMissingMethod,\n }\n \n fn default_track_diagnostic(d: &mut Diagnostic, f: &mut dyn FnMut(&mut Diagnostic)) {"}, {"sha": "cf082f1ffaa5f806ce66bae074ee245b3e0da688", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/291ced5e9a9cfb423793cf065f873d2171c19c6a/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291ced5e9a9cfb423793cf065f873d2171c19c6a/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=291ced5e9a9cfb423793cf065f873d2171c19c6a", "patch": "@@ -19,7 +19,7 @@ use rustc_ast::TraitObjectSyntax;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{\n     struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, FatalError,\n-    MultiSpan,\n+    MultiSpan, StashKey,\n };\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n@@ -38,7 +38,6 @@ use rustc_middle::ty::{self, Const, IsSuggestable, Ty, TyCtxt, TypeVisitableExt}\n use rustc_middle::ty::{DynKind, ToPredicate};\n use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, BARE_TRAIT_OBJECTS};\n use rustc_span::edit_distance::find_best_match_for_name;\n-use rustc_span::edition::Edition;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::{sym, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n@@ -3718,7 +3717,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 ));\n             }\n \n-            if self_ty.span.edition() >= Edition::Edition2021 {\n+            if self_ty.span.edition().rust_2021() {\n                 let msg = \"trait objects must include the `dyn` keyword\";\n                 let label = \"add `dyn` keyword before this trait\";\n                 let mut diag =\n@@ -3732,7 +3731,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 }\n                 // check if the impl trait that we are considering is a impl of a local trait\n                 self.maybe_lint_blanket_trait_impl(&self_ty, &mut diag);\n-                diag.emit();\n+                diag.stash(self_ty.span, StashKey::TraitMissingMethod);\n             } else {\n                 let msg = \"trait objects without an explicit `dyn` are deprecated\";\n                 tcx.struct_span_lint_hir("}, {"sha": "4a669e3f8b8a44f725e151e61659e27535b1547d", "filename": "compiler/rustc_hir_typeck/messages.ftl", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/291ced5e9a9cfb423793cf065f873d2171c19c6a/compiler%2Frustc_hir_typeck%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/291ced5e9a9cfb423793cf065f873d2171c19c6a/compiler%2Frustc_hir_typeck%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fmessages.ftl?ref=291ced5e9a9cfb423793cf065f873d2171c19c6a", "patch": "@@ -79,3 +79,14 @@ hir_typeck_arg_mismatch_indeterminate = argument type mismatch was detected, but\n hir_typeck_suggest_boxing_note = for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n \n hir_typeck_suggest_boxing_when_appropriate = store this in the heap by calling `Box::new`\n+\n+hir_typeck_no_associated_item = no {$item_kind} named `{$item_name}` found for {$ty_prefix} `{$ty_str}`{$trait_missing_method ->\n+    [true] {\"\"}\n+    *[other] {\" \"}in the current scope\n+}\n+\n+hir_typeck_candidate_trait_note = `{$trait_name}` defines an item `{$item_name}`{$action_or_ty ->\n+    [NONE] {\"\"}\n+    [implement] , perhaps you need to implement it\n+    *[other] , perhaps you need to restrict type parameter `{$action_or_ty}` with it\n+}"}, {"sha": "102a313067fd24f9a3acd46cd66feb1857cd5aa5", "filename": "compiler/rustc_hir_typeck/src/errors.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/291ced5e9a9cfb423793cf065f873d2171c19c6a/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291ced5e9a9cfb423793cf065f873d2171c19c6a/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs?ref=291ced5e9a9cfb423793cf065f873d2171c19c6a", "patch": "@@ -1,4 +1,6 @@\n //! Errors emitted by `rustc_hir_typeck`.\n+use std::borrow::Cow;\n+\n use crate::fluent_generated as fluent;\n use rustc_errors::{AddToDiagnostic, Applicability, Diagnostic, MultiSpan, SubdiagnosticMessage};\n use rustc_macros::{Diagnostic, Subdiagnostic};\n@@ -295,3 +297,25 @@ pub enum SuggestBoxing {\n         end: Span,\n     },\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_typeck_no_associated_item, code = \"E0599\")]\n+pub struct NoAssociatedItem {\n+    #[primary_span]\n+    pub span: Span,\n+    pub item_kind: &'static str,\n+    pub item_name: Ident,\n+    pub ty_prefix: Cow<'static, str>,\n+    pub ty_str: String,\n+    pub trait_missing_method: bool,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[note(hir_typeck_candidate_trait_note)]\n+pub struct CandidateTraitNote {\n+    #[primary_span]\n+    pub span: Span,\n+    pub trait_name: String,\n+    pub item_name: Ident,\n+    pub action_or_ty: String,\n+}"}, {"sha": "8ea159bba746ef84b00cc423f6f9b3cfcfdfda5f", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/291ced5e9a9cfb423793cf065f873d2171c19c6a/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291ced5e9a9cfb423793cf065f873d2171c19c6a/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=291ced5e9a9cfb423793cf065f873d2171c19c6a", "patch": "@@ -1245,6 +1245,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         error,\n                         Some((rcvr, args)),\n                         expected,\n+                        false,\n                     ) {\n                         err.emit();\n                     }"}, {"sha": "039316c74dd4caf45d0f047817e0f64c627b0866", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/291ced5e9a9cfb423793cf065f873d2171c19c6a/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291ced5e9a9cfb423793cf065f873d2171c19c6a/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=291ced5e9a9cfb423793cf065f873d2171c19c6a", "patch": "@@ -4,7 +4,7 @@ use crate::rvalue_scopes;\n use crate::{BreakableCtxt, Diverges, Expectation, FnCtxt, LocalTy, RawTy};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, Diagnostic, ErrorGuaranteed, MultiSpan};\n+use rustc_errors::{Applicability, Diagnostic, ErrorGuaranteed, MultiSpan, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -853,6 +853,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let item_name = item_segment.ident;\n         let result = self\n             .resolve_fully_qualified_call(span, item_name, ty.normalized, qself.span, hir_id)\n+            .and_then(|r| {\n+                // lint bare trait if the method is found in the trait\n+                if span.edition().rust_2021() && let Some(mut diag) = self.tcx.sess.diagnostic().steal_diagnostic(qself.span, StashKey::TraitMissingMethod) {\n+                    diag.emit();\n+                }\n+                Ok(r)\n+            })\n             .or_else(|error| {\n                 let guar = self\n                     .tcx\n@@ -863,17 +870,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     _ => Err(guar),\n                 };\n \n+                let trait_missing_method =\n+                    matches!(error, method::MethodError::NoMatch(_)) && ty.normalized.is_trait();\n                 // If we have a path like `MyTrait::missing_method`, then don't register\n                 // a WF obligation for `dyn MyTrait` when method lookup fails. Otherwise,\n                 // register a WF obligation so that we can detect any additional\n                 // errors in the self type.\n-                if !(matches!(error, method::MethodError::NoMatch(_)) && ty.normalized.is_trait()) {\n+                if !trait_missing_method {\n                     self.register_wf_obligation(\n                         ty.raw.into(),\n                         qself.span,\n                         traits::WellFormed(None),\n                     );\n                 }\n+\n+                // emit or cancel the diagnostic for bare traits\n+                if span.edition().rust_2021() && let Some(mut diag) = self.tcx.sess.diagnostic().steal_diagnostic(qself.span, StashKey::TraitMissingMethod) {\n+                    if trait_missing_method {\n+                        // cancel the diag for bare traits when meeting `MyTrait::missing_method`\n+                        diag.cancel();\n+                    } else {\n+                        diag.emit();\n+                    }\n+                }\n+\n                 if item_name.name != kw::Empty {\n                     if let Some(mut e) = self.report_method_error(\n                         span,\n@@ -883,10 +903,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         error,\n                         None,\n                         Expectation::NoExpectation,\n+                        trait_missing_method && span.edition().rust_2021(), // emits missing method for trait only after edition 2021\n                     ) {\n                         e.emit();\n                     }\n                 }\n+\n                 result\n             });\n "}, {"sha": "12bc17ca97c7b5eea4260bd05f92038534cb59fd", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 55, "deletions": 30, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/291ced5e9a9cfb423793cf065f873d2171c19c6a/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291ced5e9a9cfb423793cf065f873d2171c19c6a/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=291ced5e9a9cfb423793cf065f873d2171c19c6a", "patch": "@@ -2,6 +2,8 @@\n //! found or is otherwise invalid.\n \n use crate::errors;\n+use crate::errors::CandidateTraitNote;\n+use crate::errors::NoAssociatedItem;\n use crate::Expectation;\n use crate::FnCtxt;\n use rustc_ast::ast::Mutability;\n@@ -38,6 +40,7 @@ use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _\n use rustc_trait_selection::traits::{\n     FulfillmentError, Obligation, ObligationCause, ObligationCauseCode,\n };\n+use std::borrow::Cow;\n \n use super::probe::{AutorefOrPtrAdjustment, IsSuggestion, Mode, ProbeScope};\n use super::{CandidateSource, MethodError, NoMatchData};\n@@ -112,6 +115,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         error: MethodError<'tcx>,\n         args: Option<(&'tcx hir::Expr<'tcx>, &'tcx [hir::Expr<'tcx>])>,\n         expected: Expectation<'tcx>,\n+        trait_missing_method: bool,\n     ) -> Option<DiagnosticBuilder<'_, ErrorGuaranteed>> {\n         // Avoid suggestions when we don't know what's going on.\n         if rcvr_ty.references_error() {\n@@ -136,6 +140,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     sugg_span,\n                     &mut no_match_data,\n                     expected,\n+                    trait_missing_method,\n                 );\n             }\n \n@@ -278,6 +283,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         sugg_span: Span,\n         no_match_data: &mut NoMatchData<'tcx>,\n         expected: Expectation<'tcx>,\n+        trait_missing_method: bool,\n     ) -> Option<DiagnosticBuilder<'_, ErrorGuaranteed>> {\n         let mode = no_match_data.mode;\n         let tcx = self.tcx;\n@@ -323,7 +329,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         span = item_name.span;\n \n         // Don't show generic arguments when the method can't be found in any implementation (#81576).\n-        let mut ty_str_reported = ty_str.clone();\n+        let mut ty_str_reported = if trait_missing_method {\n+            ty_str.strip_prefix(\"dyn \").expect(\"Failed to remove the prefix dyn\").to_owned()\n+        } else {\n+            ty_str.clone()\n+        };\n+\n         if let ty::Adt(_, generics) = rcvr_ty.kind() {\n             if generics.len() > 0 {\n                 let mut autoderef = self.autoderef(span, rcvr_ty);\n@@ -355,25 +366,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         {\n             self.suggest_missing_writer(rcvr_ty, args)\n         } else {\n-            struct_span_err!(\n-                tcx.sess,\n+            tcx.sess.create_err(NoAssociatedItem {\n                 span,\n-                E0599,\n-                \"no {} named `{}` found for {} `{}` in the current scope\",\n                 item_kind,\n                 item_name,\n-                rcvr_ty.prefix_string(self.tcx),\n-                ty_str_reported,\n-            )\n+                ty_prefix: if trait_missing_method {\n+                    // FIXME(mu001999) E0599 maybe not suitable here because it is for types\n+                    Cow::from(\"trait\")\n+                } else {\n+                    rcvr_ty.prefix_string(self.tcx)\n+                },\n+                ty_str: ty_str_reported,\n+                trait_missing_method,\n+            })\n         };\n         if tcx.sess.source_map().is_multiline(sugg_span) {\n             err.span_label(sugg_span.with_hi(span.lo()), \"\");\n         }\n-        let ty_str = if short_ty_str.len() < ty_str.len() && ty_str.len() > 10 {\n+        let mut ty_str = if short_ty_str.len() < ty_str.len() && ty_str.len() > 10 {\n             short_ty_str\n         } else {\n             ty_str\n         };\n+        if trait_missing_method {\n+            ty_str =\n+                ty_str.strip_prefix(\"dyn \").expect(\"Failed to remove the prefix dyn\").to_owned();\n+        }\n+\n         if let Some(file) = ty_file {\n             err.note(format!(\"the full type name has been written to '{}'\", file.display(),));\n         }\n@@ -1067,6 +1086,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 &static_candidates,\n                 unsatisfied_bounds,\n                 expected.only_has_type(self),\n+                trait_missing_method,\n             );\n         }\n \n@@ -2375,6 +2395,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         static_candidates: &[CandidateSource],\n         unsatisfied_bounds: bool,\n         return_type: Option<Ty<'tcx>>,\n+        trait_missing_method: bool,\n     ) {\n         let mut alt_rcvr_sugg = false;\n         if let (SelfSource::MethodCall(rcvr), false) = (source, unsatisfied_bounds) {\n@@ -2598,11 +2619,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 },\n                 _ => None,\n             };\n-            err.help(if param_type.is_some() {\n-                \"items from traits can only be used if the type parameter is bounded by the trait\"\n-            } else {\n-                \"items from traits can only be used if the trait is implemented and in scope\"\n-            });\n+            if !trait_missing_method {\n+                err.help(if param_type.is_some() {\n+                    \"items from traits can only be used if the type parameter is bounded by the trait\"\n+                } else {\n+                    \"items from traits can only be used if the trait is implemented and in scope\"\n+                });\n+            }\n+\n             let candidates_len = candidates.len();\n             let message = |action| {\n                 format!(\n@@ -2751,27 +2775,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (candidates, Vec::new())\n             };\n \n-            let action = if let Some(param) = param_type {\n-                format!(\"restrict type parameter `{}` with\", param)\n-            } else {\n-                // FIXME: it might only need to be imported into scope, not implemented.\n-                \"implement\".to_string()\n-            };\n             match &potential_candidates[..] {\n                 [] => {}\n                 [trait_info] if trait_info.def_id.is_local() => {\n-                    err.span_note(\n-                        self.tcx.def_span(trait_info.def_id),\n-                        format!(\n-                            \"`{}` defines an item `{}`, perhaps you need to {} it\",\n-                            self.tcx.def_path_str(trait_info.def_id),\n-                            item_name,\n-                            action\n-                        ),\n-                    );\n+                    err.subdiagnostic(CandidateTraitNote {\n+                        span: self.tcx.def_span(trait_info.def_id),\n+                        trait_name: self.tcx.def_path_str(trait_info.def_id),\n+                        item_name,\n+                        action_or_ty: if trait_missing_method {\n+                            \"NONE\".to_string()\n+                        } else {\n+                            param_type.map_or_else(\n+                                || \"implement\".to_string(), // FIXME: it might only need to be imported into scope, not implemented.\n+                                ToString::to_string,\n+                            )\n+                        },\n+                    });\n                 }\n                 trait_infos => {\n-                    let mut msg = message(action);\n+                    let mut msg = message(param_type.map_or_else(\n+                        || \"implement\".to_string(), // FIXME: it might only need to be imported into scope, not implemented.\n+                        |param| format!(\"restrict type parameter `{}` with\", param),\n+                    ));\n                     for (i, trait_info) in trait_infos.iter().enumerate() {\n                         msg.push_str(&format!(\n                             \"\\ncandidate #{}: `{}`\","}, {"sha": "acea37b358b2ed3406638e53103d91bac22cded3", "filename": "tests/ui/resolve/issue-111312.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/291ced5e9a9cfb423793cf065f873d2171c19c6a/tests%2Fui%2Fresolve%2Fissue-111312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291ced5e9a9cfb423793cf065f873d2171c19c6a/tests%2Fui%2Fresolve%2Fissue-111312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-111312.rs?ref=291ced5e9a9cfb423793cf065f873d2171c19c6a", "patch": "@@ -0,0 +1,11 @@\n+// edition: 2021\n+\n+trait Has {\n+    fn has() {}\n+}\n+\n+trait HasNot {}\n+\n+fn main() {\n+    HasNot::has(); //~ ERROR\n+}"}, {"sha": "4c864029c98702000484b63fff22ec927a085577", "filename": "tests/ui/resolve/issue-111312.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/291ced5e9a9cfb423793cf065f873d2171c19c6a/tests%2Fui%2Fresolve%2Fissue-111312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/291ced5e9a9cfb423793cf065f873d2171c19c6a/tests%2Fui%2Fresolve%2Fissue-111312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-111312.stderr?ref=291ced5e9a9cfb423793cf065f873d2171c19c6a", "patch": "@@ -0,0 +1,15 @@\n+error[E0599]: no function or associated item named `has` found for trait `HasNot`\n+  --> $DIR/issue-111312.rs:10:13\n+   |\n+LL |     HasNot::has();\n+   |             ^^^ function or associated item not found in `HasNot`\n+   |\n+note: `Has` defines an item `has`\n+  --> $DIR/issue-111312.rs:3:1\n+   |\n+LL | trait Has {\n+   | ^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "b174669545a2b95637f40679dba36513e3a1fd67", "filename": "tests/ui/traits/issue-106072.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/291ced5e9a9cfb423793cf065f873d2171c19c6a/tests%2Fui%2Ftraits%2Fissue-106072.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291ced5e9a9cfb423793cf065f873d2171c19c6a/tests%2Fui%2Ftraits%2Fissue-106072.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-106072.rs?ref=291ced5e9a9cfb423793cf065f873d2171c19c6a", "patch": "@@ -1,5 +1,4 @@\n #[derive(Clone)] //~  trait objects must include the `dyn` keyword\n-                 //~| trait objects must include the `dyn` keyword\n struct Foo;\n trait Foo {} //~ the name `Foo` is defined multiple times\n fn main() {}"}, {"sha": "1037603ceb777dd3da24989f33137931e4862b81", "filename": "tests/ui/traits/issue-106072.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/291ced5e9a9cfb423793cf065f873d2171c19c6a/tests%2Fui%2Ftraits%2Fissue-106072.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/291ced5e9a9cfb423793cf065f873d2171c19c6a/tests%2Fui%2Ftraits%2Fissue-106072.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-106072.stderr?ref=291ced5e9a9cfb423793cf065f873d2171c19c6a", "patch": "@@ -1,5 +1,5 @@\n error[E0428]: the name `Foo` is defined multiple times\n-  --> $DIR/issue-106072.rs:4:1\n+  --> $DIR/issue-106072.rs:3:1\n    |\n LL | struct Foo;\n    | ----------- previous definition of the type `Foo` here\n@@ -16,15 +16,7 @@ LL | #[derive(Clone)]\n    |\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0782]: trait objects must include the `dyn` keyword\n-  --> $DIR/issue-106072.rs:1:10\n-   |\n-LL | #[derive(Clone)]\n-   |          ^^^^^\n-   |\n-   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0428, E0782.\n For more information about an error, try `rustc --explain E0428`."}]}