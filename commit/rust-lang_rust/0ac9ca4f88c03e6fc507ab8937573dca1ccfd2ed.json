{"sha": "0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYzljYTRmODhjMDNlNmZjNTA3YWI4OTM3NTczZGNhMWNjZmQyZWQ=", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-05-01T11:28:45Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-05-05T14:31:32Z"}, "message": "Add -Z simulate-remapped-rust-src-base option to simulate path virutalisation during bootstrapping", "tree": {"sha": "3ea40c134bb503668dc11c20c687dc76a7b81316", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ea40c134bb503668dc11c20c687dc76a7b81316"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmCSrEQACgkQGBtJ+fOP\nM3To4AwAlYPzvN9bG9tmHGrejOjiQU09V8UQ1zO15V7lb89Q2Xp5Nqj9WPrg15i8\nKEQTMw0PGPLbWo86y8vLyHztkB1TIQEIYb4jWEC/JZhQFsz4UANnwjEyVv+zx7sQ\nVovchH0I/sGwoBd78P9iQeDr78/rj3bXr9+9ne+6unYR/KZXflP4VP4AXNoMfftT\nBPweYETE4NmbePqSkx7T9OXR95jlKDqkT4o/od1jBByhwt7c8DO9t1DYvlKzZFlv\nzIJffNGuVNIu2VykXvp7eY5Pl8QvbhUZmxeCT7Va6bvbmrQQ+SIp0w+TDS95Sbu6\nNqqNyR5gK5ra58eSLwoGX3gRHUdXNlG+ICQrzEmwiwkxv9S5jDgZNgm/Tp5EDQg9\n2Ae3fUiPKgxT0fdCGIxoV+l6XfS092UQ4kROeVSBX9iFt13qApTFoMyfnSPD8MpN\nCnYO99syNbnxGHKkl705mciBaFiWDWOBectVzXIcsQm/5F44icDUjvj7pqsdotxl\nlUvlzF12\n=qSWV\n-----END PGP SIGNATURE-----", "payload": "tree 3ea40c134bb503668dc11c20c687dc76a7b81316\nparent 5417b45c2676dcd396f007bd89ed0cd55d085768\nauthor Andy Wang <cbeuw.andy@gmail.com> 1619868525 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1620225092 +0100\n\nAdd -Z simulate-remapped-rust-src-base option to simulate path virutalisation during bootstrapping\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed", "html_url": "https://github.com/rust-lang/rust/commit/0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5417b45c2676dcd396f007bd89ed0cd55d085768", "url": "https://api.github.com/repos/rust-lang/rust/commits/5417b45c2676dcd396f007bd89ed0cd55d085768", "html_url": "https://github.com/rust-lang/rust/commit/5417b45c2676dcd396f007bd89ed0cd55d085768"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "33723e0b51e9319cedb8fd70583efcce8352675d", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed", "patch": "@@ -595,6 +595,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(profile_emit, Some(PathBuf::from(\"abc\")));\n     tracked!(relax_elf_relocations, Some(true));\n     tracked!(relro_level, Some(RelroLevel::Full));\n+    tracked!(simulate_remapped_rust_src_base, Some(PathBuf::from(\"/rustc/abc\")));\n     tracked!(report_delayed_bugs, true);\n     tracked!(sanitizer, SanitizerSet::ADDRESS);\n     tracked!(sanitizer_memory_track_origins, 2);"}, {"sha": "493c9dc9563d081aaf34b945c2d9ea5ece954466", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed", "patch": "@@ -1707,6 +1707,31 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                         ..\n                     } = source_file_to_import;\n \n+                    // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped\n+                    // during rust bootstrapping by `remap-debuginfo = true`, and the user\n+                    // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,\n+                    // then we change `name` to a similar state as if the rust was bootstrapped\n+                    // with `remap-debuginfo = true`.\n+                    // This is useful for testing so that tests about the effects of\n+                    // `try_to_translate_virtual_to_real` don't have to worry about how the\n+                    // compiler is bootstrapped.\n+                    if let Some(virtual_dir) =\n+                        &sess.opts.debugging_opts.simulate_remapped_rust_src_base\n+                    {\n+                        if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {\n+                            if let rustc_span::FileName::Real(ref mut old_name) = name {\n+                                if let rustc_span::RealFileName::LocalPath(local) = old_name {\n+                                    if let Ok(rest) = local.strip_prefix(real_dir) {\n+                                        *old_name = rustc_span::RealFileName::Remapped {\n+                                            local_path: None,\n+                                            virtual_name: virtual_dir.join(rest),\n+                                        };\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+\n                     // If this file's path has been remapped to `/rustc/$hash`,\n                     // we might be able to reverse that (also see comments above,\n                     // on `try_to_translate_virtual_to_real`)."}, {"sha": "3d069aa92e7570bdfdd13efb3ff8eed361ed456b", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed", "patch": "@@ -1161,6 +1161,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"whether ELF relocations can be relaxed\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n         \"choose which RELRO level to use\"),\n+    simulate_remapped_rust_src_base: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n+        \"simulate the effect of remap-debuginfo = true at bootstrapping by remapping path \\\n+        to rust's source base directory. only meant for testing purposes\"),\n     report_delayed_bugs: bool = (false, parse_bool, [TRACKED],\n         \"immediately print bugs registered with `delay_span_bug` (default: no)\"),\n     sanitizer: SanitizerSet = (SanitizerSet::empty(), parse_sanitizers, [TRACKED],"}, {"sha": "b66abc6bedf0f33437a98f6d7b2cc87ca83c57e5", "filename": "src/test/codegen/remap_path_prefix/issue-73167-remap-std.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fissue-73167-remap-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fissue-73167-remap-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fissue-73167-remap-std.rs?ref=0ac9ca4f88c03e6fc507ab8937573dca1ccfd2ed", "patch": "@@ -1,10 +1,13 @@\n // ignore-windows\n \n-// compile-flags: -g  -C no-prepopulate-passes --remap-path-prefix=/=/the/root/\n+// compile-flags: -g  -C no-prepopulate-passes -Z simulate-remapped-rust-src-base=/rustc/xyz\n \n-// Here we check that imported code from std has their path remapped\n+// Here we check that importing std will not cause real path to std source files\n+// to leak. If rustc was compiled with remap-debuginfo = true, this should be\n+// true automatically. If paths to std library hasn't been remapped, we use the\n+// above simulate-remapped-rust-src-base option to do it temporarily\n \n-// CHECK: !DIFile(filename: \"{{/the/root/.*/library/std/src/panic.rs}}\"\n+// CHECK: !DIFile(filename: \"{{/rustc/.*/library/std/src/panic.rs}}\"\n fn main() {\n     std::thread::spawn(|| {\n         println!(\"hello\");"}]}