{"sha": "7571ee85c42d9dd587549c4794b0eea22dd38a66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NzFlZTg1YzQyZDlkZDU4NzU0OWM0Nzk0YjBlZWEyMmRkMzhhNjY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-08T01:50:42Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-08T01:50:42Z"}, "message": "Merge branch 'incoming'", "tree": {"sha": "48cc6cd12551c6646257a6a686f99f32fa9975d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48cc6cd12551c6646257a6a686f99f32fa9975d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7571ee85c42d9dd587549c4794b0eea22dd38a66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7571ee85c42d9dd587549c4794b0eea22dd38a66", "html_url": "https://github.com/rust-lang/rust/commit/7571ee85c42d9dd587549c4794b0eea22dd38a66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7571ee85c42d9dd587549c4794b0eea22dd38a66/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45cc95fa222a1e3cb241ad92f60529c8552b8ea6", "url": "https://api.github.com/repos/rust-lang/rust/commits/45cc95fa222a1e3cb241ad92f60529c8552b8ea6", "html_url": "https://github.com/rust-lang/rust/commit/45cc95fa222a1e3cb241ad92f60529c8552b8ea6"}, {"sha": "e158ce8a9d49767cddf58c3e656d382e16aa232e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e158ce8a9d49767cddf58c3e656d382e16aa232e", "html_url": "https://github.com/rust-lang/rust/commit/e158ce8a9d49767cddf58c3e656d382e16aa232e"}], "stats": {"total": 163, "additions": 161, "deletions": 2}, "files": [{"sha": "f1ceeff9ea809a7d9a217506ccf3f94cac914bfd", "filename": "src/libcore/core.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7571ee85c42d9dd587549c4794b0eea22dd38a66/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/7571ee85c42d9dd587549c4794b0eea22dd38a66/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=7571ee85c42d9dd587549c4794b0eea22dd38a66", "patch": "@@ -45,6 +45,7 @@ export tuple;\n export to_str;\n export dvec, dvec_iter;\n export cmp;\n+export num;\n \n // NDM seems to be necessary for resolve to work\n export option_iter;\n@@ -154,6 +155,7 @@ mod tuple;\n // Ubiquitous-utility-type modules\n \n mod cmp;\n+mod num;\n mod either;\n mod iter;\n mod logging;"}, {"sha": "e1d300819667497aa6c266d96533de5a4eff42b7", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7571ee85c42d9dd587549c4794b0eea22dd38a66/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7571ee85c42d9dd587549c4794b0eea22dd38a66/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=7571ee85c42d9dd587549c4794b0eea22dd38a66", "patch": "@@ -4,6 +4,7 @@\n \n import cmath::c_float::*;\n import cmath::c_float_targ_consts::*;\n+import num::num;\n \n // FIXME find out why these have to be exported explicitly\n \n@@ -19,6 +20,7 @@ export mul_add, fmax, fmin, nextafter, frexp, hypot, ldexp;\n export lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix;\n export modf, pow, round, sin, sinh, sqrt, tan, tanh, tgamma, trunc;\n export signbit;\n+export num;\n \n // These are not defined inside consts:: for consistency with\n // the integer types\n@@ -176,6 +178,18 @@ pure fn log2(n: f32) -> f32 {\n     ret ln(n) / consts::ln_2;\n }\n \n+impl num of num for f32 {\n+    fn add(&&other: f32)    -> f32 { ret self + other; }\n+    fn sub(&&other: f32)    -> f32 { ret self - other; }\n+    fn mul(&&other: f32)    -> f32 { ret self * other; }\n+    fn div(&&other: f32)    -> f32 { ret self / other; }\n+    fn modulo(&&other: f32) -> f32 { ret self % other; }\n+    fn neg()                -> f32 { ret -self;        }\n+\n+    fn to_int()         -> int { ret self as int; }\n+    fn from_int(n: int) -> f32 { ret n as f32;    }\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "af83a0829e138c1333aa6c858a9493a947d44c90", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7571ee85c42d9dd587549c4794b0eea22dd38a66/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7571ee85c42d9dd587549c4794b0eea22dd38a66/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=7571ee85c42d9dd587549c4794b0eea22dd38a66", "patch": "@@ -4,6 +4,7 @@\n \n import cmath::c_double::*;\n import cmath::c_double_targ_consts::*;\n+import num::num;\n \n // Even though this module exports everything defined in it,\n // because it contains re-exports, we also have to explicitly\n@@ -21,6 +22,7 @@ export lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix;\n export modf, pow, round, sin, sinh, sqrt, tan, tanh, tgamma, trunc;\n export signbit;\n export epsilon;\n+export num;\n \n // These are not defined inside consts:: for consistency with\n // the integer types\n@@ -197,6 +199,18 @@ pure fn log2(n: f64) -> f64 {\n     ret ln(n) / consts::ln_2;\n }\n \n+impl num of num for f64 {\n+    fn add(&&other: f64)    -> f64 { ret self + other; }\n+    fn sub(&&other: f64)    -> f64 { ret self - other; }\n+    fn mul(&&other: f64)    -> f64 { ret self * other; }\n+    fn div(&&other: f64)    -> f64 { ret self / other; }\n+    fn modulo(&&other: f64) -> f64 { ret self % other; }\n+    fn neg()                -> f64 { ret -self;        }\n+\n+    fn to_int()         -> int { ret self as int; }\n+    fn from_int(n: int) -> f64 { ret n as f64;    }\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "d55c0e0c37111cc5b50c2b1c786492c8898a4146", "filename": "src/libcore/float.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7571ee85c42d9dd587549c4794b0eea22dd38a66/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7571ee85c42d9dd587549c4794b0eea22dd38a66/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=7571ee85c42d9dd587549c4794b0eea22dd38a66", "patch": "@@ -17,6 +17,7 @@ export lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix;\n export modf, pow, round, sin, sinh, sqrt, tan, tanh, tgamma, trunc;\n export signbit;\n export pow_with_uint;\n+export num;\n \n // export when m_float == c_double\n \n@@ -26,6 +27,7 @@ export j0, j1, jn, y0, y1, yn;\n \n import m_float = f64;\n import f64::*;\n+import num::num;\n \n const NaN: float = 0.0/0.0;\n \n@@ -408,6 +410,18 @@ fn sin(x: float) -> float { f64::sin(x as f64) as float }\n fn cos(x: float) -> float { f64::cos(x as f64) as float }\n fn tan(x: float) -> float { f64::tan(x as f64) as float }\n \n+impl num of num for float {\n+    fn add(&&other: float)    -> float { ret self + other; }\n+    fn sub(&&other: float)    -> float { ret self - other; }\n+    fn mul(&&other: float)    -> float { ret self * other; }\n+    fn div(&&other: float)    -> float { ret self / other; }\n+    fn modulo(&&other: float) -> float { ret self % other; }\n+    fn neg()                  -> float { ret -self;        }\n+\n+    fn to_int()         -> int   { ret self as int; }\n+    fn from_int(n: int) -> float { ret n as float;  }\n+}\n+\n #[test]\n fn test_from_str() {\n    assert from_str(\"3\") == some(3.);\n@@ -501,6 +515,25 @@ fn test_to_str_inf() {\n     assert to_str(-infinity, 10u) == \"-inf\";\n }\n \n+#[test]\n+fn test_ifaces() {\n+    fn test<U:num>(ten: U) {\n+        assert (ten.to_int() == 10);\n+\n+        let two = ten.from_int(2);\n+        assert (two.to_int() == 2);\n+\n+        assert (ten.add(two) == ten.from_int(12));\n+        assert (ten.sub(two) == ten.from_int(8));\n+        assert (ten.mul(two) == ten.from_int(20));\n+        assert (ten.div(two) == ten.from_int(5));\n+        assert (ten.modulo(two) == ten.from_int(0));\n+    }\n+\n+    test(10.0);\n+}\n+\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "556b9944dde4d8ecca2bcd051b02d772dc32dc4e", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7571ee85c42d9dd587549c4794b0eea22dd38a66/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7571ee85c42d9dd587549c4794b0eea22dd38a66/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=7571ee85c42d9dd587549c4794b0eea22dd38a66", "patch": "@@ -1,5 +1,6 @@\n import T = inst::T;\n import cmp::{eq, ord};\n+import num::num;\n \n export min_value, max_value;\n export min, max;\n@@ -11,7 +12,7 @@ export range;\n export compl;\n export abs;\n export parse_buf, from_str, to_str, to_str_bytes, str;\n-export ord, eq;\n+export ord, eq, num;\n \n const min_value: T = -1 as T << (inst::bits - 1 as T);\n const max_value: T = min_value - 1 as T;\n@@ -122,6 +123,18 @@ impl eq of eq for T {\n     }\n }\n \n+impl num of num for T {\n+    fn add(&&other: T)    -> T { ret self + other; }\n+    fn sub(&&other: T)    -> T { ret self - other; }\n+    fn mul(&&other: T)    -> T { ret self * other; }\n+    fn div(&&other: T)    -> T { ret self / other; }\n+    fn modulo(&&other: T) -> T { ret self % other; }\n+    fn neg()              -> T { ret -self;        }\n+\n+    fn to_int()         -> int { ret self as int; }\n+    fn from_int(n: int) -> T   { ret n as T;      }\n+}\n+\n \n // FIXME: Has alignment issues on windows and 32-bit linux\n #[test]\n@@ -179,3 +192,22 @@ fn test_to_str() {\n     assert (eq(to_str(127 as T, 16u), \"7f\"));\n     assert (eq(to_str(100 as T, 10u), \"100\"));\n }\n+\n+#[test]\n+fn test_ifaces() {\n+    fn test<U:num>(ten: U) {\n+        assert (ten.to_int() == 10);\n+\n+        let two = ten.from_int(2);\n+        assert (two.to_int() == 2);\n+\n+        assert (ten.add(two) == ten.from_int(12));\n+        assert (ten.sub(two) == ten.from_int(8));\n+        assert (ten.mul(two) == ten.from_int(20));\n+        assert (ten.div(two) == ten.from_int(5));\n+        assert (ten.modulo(two) == ten.from_int(0));\n+    }\n+\n+    test(10 as T);\n+}\n+"}, {"sha": "eb5073c14b891d7a5acb72e3aa393b9502915f78", "filename": "src/libcore/num.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7571ee85c42d9dd587549c4794b0eea22dd38a66/src%2Flibcore%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7571ee85c42d9dd587549c4794b0eea22dd38a66/src%2Flibcore%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum.rs?ref=7571ee85c42d9dd587549c4794b0eea22dd38a66", "patch": "@@ -0,0 +1,16 @@\n+#[doc=\"An interface for numbers.\"]\n+\n+iface num {\n+    // FIXME: Cross-crate overloading doesn't work yet.\n+    // FIXME: Interface inheritance.\n+    fn add(&&other: self) -> self;\n+    fn sub(&&other: self) -> self;\n+    fn mul(&&other: self) -> self;\n+    fn div(&&other: self) -> self;\n+    fn modulo(&&other: self) -> self;\n+    fn neg() -> self;\n+\n+    fn to_int() -> int;\n+    fn from_int(n: int) -> self;    // TODO: Static functions.\n+}\n+"}, {"sha": "d1d238d298ca832c3e2a5dbc711257525c587203", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7571ee85c42d9dd587549c4794b0eea22dd38a66/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7571ee85c42d9dd587549c4794b0eea22dd38a66/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=7571ee85c42d9dd587549c4794b0eea22dd38a66", "patch": "@@ -1,5 +1,6 @@\n import T = inst::T;\n import cmp::{eq, ord};\n+import num::num;\n \n export min_value, max_value;\n export min, max;\n@@ -11,7 +12,7 @@ export range;\n export compl;\n export to_str, to_str_bytes;\n export from_str, from_str_radix, str, parse_buf;\n-export ord, eq;\n+export ord, eq, num;\n \n const min_value: T = 0 as T;\n const max_value: T = 0 as T - 1 as T;\n@@ -63,6 +64,18 @@ impl eq of eq for T {\n     }\n }\n \n+impl num of num for T {\n+    fn add(&&other: T)    -> T { ret self + other; }\n+    fn sub(&&other: T)    -> T { ret self - other; }\n+    fn mul(&&other: T)    -> T { ret self * other; }\n+    fn div(&&other: T)    -> T { ret self / other; }\n+    fn modulo(&&other: T) -> T { ret self % other; }\n+    fn neg()              -> T { ret -self;        }\n+\n+    fn to_int()         -> int { ret self as int; }\n+    fn from_int(n: int) -> T   { ret n as T;      }\n+}\n+\n #[doc = \"\n Parse a buffer of bytes\n "}, {"sha": "f94c0a7c6afe03939245970e98af60163d72e1a9", "filename": "src/libstd/cmp.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7571ee85c42d9dd587549c4794b0eea22dd38a66/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7571ee85c42d9dd587549c4794b0eea22dd38a66/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=7571ee85c42d9dd587549c4794b0eea22dd38a66", "patch": "@@ -0,0 +1,33 @@\n+#[doc=\"Additional general-purpose comparison functionality.\"]\n+\n+const fuzzy_epsilon: float = 1.0e-6;\n+\n+iface fuzzy_eq {\n+    fn fuzzy_eq(&&other: self) -> bool;\n+}\n+\n+impl fuzzy_eq of fuzzy_eq for float {\n+    fn fuzzy_eq(&&other: float) -> bool {\n+        ret float::abs(self - other) < fuzzy_epsilon;\n+    }\n+}\n+\n+impl fuzzy_eq of fuzzy_eq for f32 {\n+    fn fuzzy_eq(&&other: f32) -> bool {\n+        ret f32::abs(self - other) < (fuzzy_epsilon as f32);\n+    }\n+}\n+\n+impl fuzzy_eq of fuzzy_eq for f64 {\n+    fn fuzzy_eq(&&other: f64) -> bool {\n+        ret f64::abs(self - other) < (fuzzy_epsilon as f64);\n+    }\n+}\n+\n+#[test]\n+fn test_fuzzy_equals() {\n+    assert ((1.0).fuzzy_eq(1.0));\n+    assert ((1.0f32).fuzzy_eq(1.0f32));\n+    assert ((1.0f64).fuzzy_eq(1.0f64));\n+}\n+"}, {"sha": "10b008d07c872299d9680680c8973b000fefdad8", "filename": "src/libstd/std.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7571ee85c42d9dd587549c4794b0eea22dd38a66/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/7571ee85c42d9dd587549c4794b0eea22dd38a66/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=7571ee85c42d9dd587549c4794b0eea22dd38a66", "patch": "@@ -22,6 +22,7 @@ export bitv, deque, fun_treemap, list, map, smallintmap, sort, treemap;\n export rope, arena, arc, par;\n export ebml, dbg, getopts, json, rand, sha1, term, time, prettyprint;\n export test, tempfile, serialization;\n+export cmp;\n \n // General io and system-services modules\n \n@@ -70,6 +71,7 @@ mod prettyprint;\n mod arena;\n mod arc;\n mod par;\n+mod cmp;\n \n #[cfg(unicode)]\n mod unicode;"}]}