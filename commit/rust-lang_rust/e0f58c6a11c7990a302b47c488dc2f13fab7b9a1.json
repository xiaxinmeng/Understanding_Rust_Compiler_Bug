{"sha": "e0f58c6a11c7990a302b47c488dc2f13fab7b9a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZjU4YzZhMTFjNzk5MGEzMDJiNDdjNDg4ZGMyZjEzZmFiN2I5YTE=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-10-10T18:35:41Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2017-11-19T08:33:56Z"}, "message": "Remove `T: Sized` on `ptr::is_null()`\n\nThis reverts commit 604f049cd5060129cf14f7bd340d442811345ea8.\n\nThis is purely a revert of cuviper's revert \"Restore `T: Sized` on\n`ptr::is_null`\". So double revert means this is code written by cuviper!", "tree": {"sha": "cb754efcf1f018c2443b398e8b22ce64679ce293", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb754efcf1f018c2443b398e8b22ce64679ce293"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0f58c6a11c7990a302b47c488dc2f13fab7b9a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJaEUIsAAoJEPm6FDuV/22C+aYP/1pcPN3X99S0x3zOM3U8p3Dm\no3+UskZsQmK83LrMrmcNxby/f1wO+UrtIMRFh7W28qKNjlCW2WaYiGYTfF+ikpBA\n4AIM0aW2qw3rw70Pjgai+HauXPZnyfKdVsV7hqWuGU907ZNam3hSKENYyyW42H40\ng/zxNV0K544XiYihvJeuEXnKAoMnh4fZNcI+ejxKbdR7hcnwDiCTqj5VA5cfUoBU\nV/WHIDosYzcdNNmXHpCj2WUllE9C9z/HDXFfmBPqxk/XfnnWCP0X+1iCqV+HvSsa\ndgRlkOkfN2SNkbjjtgJLDUkugsGr3Uk+2zYcMgOqdr07guO03ygOGLHcbBg6qKJw\n7dBMbdV13+aSTvn5JrHHII+OUTWDiVdjmlcZFhmb/GNmxWqB2wMw/yeANqDhuMqH\nXDLJ0Y0IJhSXUjiwK2bdzAwK/UZ2etEjdM6td7QQcHaP0X5gdue7bGa95SLQJ1jk\npZiizbsPl3+d2UASNQCefuX1XvX2BRNx+/m+H2iSsQNLDoRWJuFs1vNmGVvemJFd\nhaYqzwNIlrI6V9Rav5isQHYciCAGW1OOGxe8Uj+FW99g4Fgkv+hPd9WkqCSLbjc4\n698TdDaghkq0IJegeXkz4sklCoIpIJR/ixCdXYbjAnl20wNDjmWLAzdHlxeHoEGs\nWD7tPZUhQhIX6xCl2EVr\n=+Op7\n-----END PGP SIGNATURE-----", "payload": "tree cb754efcf1f018c2443b398e8b22ce64679ce293\nparent c5c70ef72369b00870d9fc67b99853b0681e17e2\nauthor Josh Stone <jistone@redhat.com> 1507660541 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1511080436 -0800\n\nRemove `T: Sized` on `ptr::is_null()`\n\nThis reverts commit 604f049cd5060129cf14f7bd340d442811345ea8.\n\nThis is purely a revert of cuviper's revert \"Restore `T: Sized` on\n`ptr::is_null`\". So double revert means this is code written by cuviper!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f58c6a11c7990a302b47c488dc2f13fab7b9a1", "html_url": "https://github.com/rust-lang/rust/commit/e0f58c6a11c7990a302b47c488dc2f13fab7b9a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0f58c6a11c7990a302b47c488dc2f13fab7b9a1/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5c70ef72369b00870d9fc67b99853b0681e17e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5c70ef72369b00870d9fc67b99853b0681e17e2", "html_url": "https://github.com/rust-lang/rust/commit/c5c70ef72369b00870d9fc67b99853b0681e17e2"}], "stats": {"total": 70, "additions": 55, "deletions": 15}, "files": [{"sha": "ec277b4ae99c7241792911251bee22bf846b237b", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0f58c6a11c7990a302b47c488dc2f13fab7b9a1/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f58c6a11c7990a302b47c488dc2f13fab7b9a1/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=e0f58c6a11c7990a302b47c488dc2f13fab7b9a1", "patch": "@@ -28,8 +28,7 @@ macro_rules! impl_zeroable_for_pointer_types {\n             unsafe impl<T: ?Sized> Zeroable for $Ptr {\n                 #[inline]\n                 fn is_zero(&self) -> bool {\n-                    // Cast because `is_null` is only available on thin pointers\n-                    (*self as *mut u8).is_null()\n+                    (*self).is_null()\n                 }\n             }\n         )+"}, {"sha": "19553d0c37b83d1d9ac93005fc03fb82558ef94d", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e0f58c6a11c7990a302b47c488dc2f13fab7b9a1/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f58c6a11c7990a302b47c488dc2f13fab7b9a1/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=e0f58c6a11c7990a302b47c488dc2f13fab7b9a1", "patch": "@@ -474,6 +474,11 @@ pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {\n impl<T: ?Sized> *const T {\n     /// Returns `true` if the pointer is null.\n     ///\n+    /// Note that unsized types have many possible null pointers, as only the\n+    /// raw data pointer is considered, not their length, vtable, etc.\n+    /// Therefore, two pointers that are null may still not compare equal to\n+    /// each other.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -485,8 +490,10 @@ impl<T: ?Sized> *const T {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn is_null(self) -> bool where T: Sized {\n-        self == null()\n+    pub fn is_null(self) -> bool {\n+        // Compare via a cast to a thin pointer, so fat pointers are only\n+        // considering their \"data\" part for null-ness.\n+        (self as *const u8) == null()\n     }\n \n     /// Returns `None` if the pointer is null, or else returns a reference to\n@@ -518,9 +525,7 @@ impl<T: ?Sized> *const T {\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n     #[inline]\n     pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {\n-        // Check for null via a cast to a thin pointer, so fat pointers are only\n-        // considering their \"data\" part for null-ness.\n-        if (self as *const u8).is_null() {\n+        if self.is_null() {\n             None\n         } else {\n             Some(&*self)\n@@ -1107,6 +1112,11 @@ impl<T: ?Sized> *const T {\n impl<T: ?Sized> *mut T {\n     /// Returns `true` if the pointer is null.\n     ///\n+    /// Note that unsized types have many possible null pointers, as only the\n+    /// raw data pointer is considered, not their length, vtable, etc.\n+    /// Therefore, two pointers that are null may still not compare equal to\n+    /// each other.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1118,8 +1128,10 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn is_null(self) -> bool where T: Sized {\n-        self == null_mut()\n+    pub fn is_null(self) -> bool {\n+        // Compare via a cast to a thin pointer, so fat pointers are only\n+        // considering their \"data\" part for null-ness.\n+        (self as *mut u8) == null_mut()\n     }\n \n     /// Returns `None` if the pointer is null, or else returns a reference to\n@@ -1151,9 +1163,7 @@ impl<T: ?Sized> *mut T {\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n     #[inline]\n     pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {\n-        // Check for null via a cast to a thin pointer, so fat pointers are only\n-        // considering their \"data\" part for null-ness.\n-        if (self as *const u8).is_null() {\n+        if self.is_null() {\n             None\n         } else {\n             Some(&*self)\n@@ -1277,9 +1287,7 @@ impl<T: ?Sized> *mut T {\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n     #[inline]\n     pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {\n-        // Check for null via a cast to a thin pointer, so fat pointers are only\n-        // considering their \"data\" part for null-ness.\n-        if (self as *mut u8).is_null() {\n+        if self.is_null() {\n             None\n         } else {\n             Some(&mut *self)"}, {"sha": "98436f0e1d1cd968d613e70acfe8995c8b8a5257", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e0f58c6a11c7990a302b47c488dc2f13fab7b9a1/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f58c6a11c7990a302b47c488dc2f13fab7b9a1/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=e0f58c6a11c7990a302b47c488dc2f13fab7b9a1", "patch": "@@ -62,6 +62,39 @@ fn test_is_null() {\n \n     let mq = unsafe { mp.offset(1) };\n     assert!(!mq.is_null());\n+\n+    // Pointers to unsized types -- slices\n+    let s: &mut [u8] = &mut [1, 2, 3];\n+    let cs: *const [u8] = s;\n+    assert!(!cs.is_null());\n+\n+    let ms: *mut [u8] = s;\n+    assert!(!ms.is_null());\n+\n+    let cz: *const [u8] = &[];\n+    assert!(!cz.is_null());\n+\n+    let mz: *mut [u8] = &mut [];\n+    assert!(!mz.is_null());\n+\n+    let ncs: *const [u8] = null::<[u8; 3]>();\n+    assert!(ncs.is_null());\n+\n+    let nms: *mut [u8] = null_mut::<[u8; 3]>();\n+    assert!(nms.is_null());\n+\n+    // Pointers to unsized types -- trait objects\n+    let ci: *const ToString = &3;\n+    assert!(!ci.is_null());\n+\n+    let mi: *mut ToString = &mut 3;\n+    assert!(!mi.is_null());\n+\n+    let nci: *const ToString = null::<isize>();\n+    assert!(nci.is_null());\n+\n+    let nmi: *mut ToString = null_mut::<isize>();\n+    assert!(nmi.is_null());\n }\n \n #[test]"}]}