{"sha": "6a5a086fd61a87d36cfa3652b279c543601860da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNWEwODZmZDYxYTg3ZDM2Y2ZhMzY1MmIyNzljNTQzNjAxODYwZGE=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-11-20T08:04:54Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-11-20T08:04:54Z"}, "message": "Add type checking for the lang item\n\nAs part of doing so, add more lang items instead of passing u128 to the i128 ones where it doesn't matter in twos-complement.", "tree": {"sha": "a4459b0d60de2a9c6a3a3b12e649e6467f70c4de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4459b0d60de2a9c6a3a3b12e649e6467f70c4de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a5a086fd61a87d36cfa3652b279c543601860da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a5a086fd61a87d36cfa3652b279c543601860da", "html_url": "https://github.com/rust-lang/rust/commit/6a5a086fd61a87d36cfa3652b279c543601860da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a5a086fd61a87d36cfa3652b279c543601860da/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee4cd865df06b02e88408fa003cf4987d764c246", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee4cd865df06b02e88408fa003cf4987d764c246", "html_url": "https://github.com/rust-lang/rust/commit/ee4cd865df06b02e88408fa003cf4987d764c246"}], "stats": {"total": 117, "additions": 78, "deletions": 39}, "files": [{"sha": "a858a8d7449f499daa6c13e80e55fa1dbf4a7d60", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6a5a086fd61a87d36cfa3652b279c543601860da/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5a086fd61a87d36cfa3652b279c543601860da/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=6a5a086fd61a87d36cfa3652b279c543601860da", "patch": "@@ -313,13 +313,17 @@ language_item_table! {\n \n     // A lang item for each of the 128-bit operators we can optionally lower.\n     I128AddFnLangItem,               \"i128_add\",                i128_add_fn;\n+    U128AddFnLangItem,               \"u128_add\",                u128_add_fn;\n     I128SubFnLangItem,               \"i128_sub\",                i128_sub_fn;\n+    U128SubFnLangItem,               \"u128_sub\",                u128_sub_fn;\n     I128MulFnLangItem,               \"i128_mul\",                i128_mul_fn;\n+    U128MulFnLangItem,               \"u128_mul\",                u128_mul_fn;\n     I128DivFnLangItem,               \"i128_div\",                i128_div_fn;\n     U128DivFnLangItem,               \"u128_div\",                u128_div_fn;\n     I128RemFnLangItem,               \"i128_rem\",                i128_rem_fn;\n     U128RemFnLangItem,               \"u128_rem\",                u128_rem_fn;\n     I128ShlFnLangItem,               \"i128_shl\",                i128_shl_fn;\n+    U128ShlFnLangItem,               \"u128_shl\",                u128_shl_fn;\n     I128ShrFnLangItem,               \"i128_shr\",                i128_shr_fn;\n     U128ShrFnLangItem,               \"u128_shr\",                u128_shr_fn;\n     // And overflow versions for the operators that are checkable.\n@@ -331,6 +335,7 @@ language_item_table! {\n     I128MuloFnLangItem,              \"i128_mulo\",               i128_mulo_fn;\n     U128MuloFnLangItem,              \"u128_mulo\",               u128_mulo_fn;\n     I128ShloFnLangItem,              \"i128_shlo\",               i128_shlo_fn;\n+    U128ShloFnLangItem,              \"u128_shlo\",               u128_shlo_fn;\n     I128ShroFnLangItem,              \"i128_shro\",               i128_shro_fn;\n     U128ShroFnLangItem,              \"u128_shro\",               u128_shro_fn;\n }"}, {"sha": "2075792fb817c88bb3ad71d96715f20d13803e5b", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "modified", "additions": 45, "deletions": 19, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/6a5a086fd61a87d36cfa3652b279c543601860da/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5a086fd61a87d36cfa3652b279c543601860da/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=6a5a086fd61a87d36cfa3652b279c543601860da", "patch": "@@ -41,9 +41,9 @@ impl Lower128Bit {\n         let (basic_blocks, local_decls) = mir.basic_blocks_and_local_decls_mut();\n         for block in basic_blocks.iter_mut() {\n             for i in (0..block.statements.len()).rev() {\n-                let call_did =\n-                    if let Some(call_did) = lower_to(&block.statements[i], local_decls, tcx) {\n-                        call_did\n+                let lang_item =\n+                    if let Some(lang_item) = lower_to(&block.statements[i], local_decls, tcx) {\n+                        lang_item\n                     } else {\n                         continue;\n                     };\n@@ -71,6 +71,9 @@ impl Lower128Bit {\n                     _ => bug!(\"Statement doesn't match pattern any more?\"),\n                 };\n \n+                let call_did = check_lang_item_type(\n+                    lang_item, &lvalue, &lhs, &rhs, local_decls, tcx);\n+\n                 let bb = BasicBlock::new(cur_len + new_blocks.len());\n                 new_blocks.push(after_call);\n \n@@ -92,33 +95,51 @@ impl Lower128Bit {\n     }\n }\n \n+fn check_lang_item_type<'a, 'tcx, D>(\n+    lang_item: LangItem,\n+    lvalue: &Lvalue<'tcx>,\n+    lhs: &Operand<'tcx>,\n+    rhs: &Operand<'tcx>,\n+    local_decls: &D,\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>)\n+-> DefId\n+    where D: HasLocalDecls<'tcx>\n+{\n+    let did = tcx.require_lang_item(lang_item);\n+    let poly_sig = tcx.fn_sig(did);\n+    let sig = tcx.no_late_bound_regions(&poly_sig).unwrap();\n+    let lhs_ty = lhs.ty(local_decls, tcx);\n+    let rhs_ty = rhs.ty(local_decls, tcx);\n+    let lvalue_ty = lvalue.ty(local_decls, tcx).to_ty(tcx);\n+    let expected = [lhs_ty, rhs_ty, lvalue_ty];\n+    assert_eq!(sig.inputs_and_output[..], expected,\n+        \"lang item {}\", tcx.def_symbol_name(did));\n+    did\n+}\n+\n fn lower_to<'a, 'tcx, D>(statement: &Statement<'tcx>, local_decls: &D, tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-    -> Option<DefId>\n+    -> Option<LangItem>\n     where D: HasLocalDecls<'tcx>\n {\n     match statement.kind {\n         StatementKind::Assign(_, Rvalue::BinaryOp(bin_op, ref lhs, _)) => {\n             let ty = lhs.ty(local_decls, tcx);\n-            if let Some(is_signed) = sign_of_128bit(&ty) {\n-                if let Some(item) = item_for_op(bin_op, is_signed) {\n-                    return Some(tcx.require_lang_item(item))\n-                }\n+            if let Some(is_signed) = sign_of_128bit(ty) {\n+                return item_for_op(bin_op, is_signed);\n             }\n         },\n         StatementKind::Assign(_, Rvalue::CheckedBinaryOp(bin_op, ref lhs, _)) => {\n             let ty = lhs.ty(local_decls, tcx);\n-            if let Some(is_signed) = sign_of_128bit(&ty) {\n-                if let Some(item) = item_for_checked_op(bin_op, is_signed) {\n-                    return Some(tcx.require_lang_item(item))\n-                }\n+            if let Some(is_signed) = sign_of_128bit(ty) {\n+                return item_for_checked_op(bin_op, is_signed);\n             }\n         },\n         _ => {},\n     }\n     None\n }\n \n-fn sign_of_128bit(ty: &Ty) -> Option<bool> {\n+fn sign_of_128bit(ty: Ty) -> Option<bool> {\n     match ty.sty {\n         TypeVariants::TyInt(syntax::ast::IntTy::I128) => Some(true),\n         TypeVariants::TyUint(syntax::ast::UintTy::U128) => Some(false),\n@@ -128,14 +149,18 @@ fn sign_of_128bit(ty: &Ty) -> Option<bool> {\n \n fn item_for_op(bin_op: BinOp, is_signed: bool) -> Option<LangItem> {\n     let i = match (bin_op, is_signed) {\n-        (BinOp::Add, _) => LangItem::I128AddFnLangItem,\n-        (BinOp::Sub, _) => LangItem::I128SubFnLangItem,\n-        (BinOp::Mul, _) => LangItem::I128MulFnLangItem,\n+        (BinOp::Add, true) => LangItem::I128AddFnLangItem,\n+        (BinOp::Add, false) => LangItem::U128AddFnLangItem,\n+        (BinOp::Sub, true) => LangItem::I128SubFnLangItem,\n+        (BinOp::Sub, false) => LangItem::U128SubFnLangItem,\n+        (BinOp::Mul, true) => LangItem::I128MulFnLangItem,\n+        (BinOp::Mul, false) => LangItem::U128MulFnLangItem,\n         (BinOp::Div, true) => LangItem::I128DivFnLangItem,\n         (BinOp::Div, false) => LangItem::U128DivFnLangItem,\n         (BinOp::Rem, true) => LangItem::I128RemFnLangItem,\n         (BinOp::Rem, false) => LangItem::U128RemFnLangItem,\n-        (BinOp::Shl, _) => LangItem::I128ShlFnLangItem,\n+        (BinOp::Shl, true) => LangItem::I128ShlFnLangItem,\n+        (BinOp::Shl, false) => LangItem::U128ShlFnLangItem,\n         (BinOp::Shr, true) => LangItem::I128ShrFnLangItem,\n         (BinOp::Shr, false) => LangItem::U128ShrFnLangItem,\n         _ => return None,\n@@ -151,10 +176,11 @@ fn item_for_checked_op(bin_op: BinOp, is_signed: bool) -> Option<LangItem> {\n         (BinOp::Sub, false) => LangItem::U128SuboFnLangItem,\n         (BinOp::Mul, true) => LangItem::I128MuloFnLangItem,\n         (BinOp::Mul, false) => LangItem::U128MuloFnLangItem,\n-        (BinOp::Shl, _) => LangItem::I128ShloFnLangItem,\n+        (BinOp::Shl, true) => LangItem::I128ShloFnLangItem,\n+        (BinOp::Shl, false) => LangItem::U128ShloFnLangItem,\n         (BinOp::Shr, true) => LangItem::I128ShroFnLangItem,\n         (BinOp::Shr, false) => LangItem::U128ShroFnLangItem,\n-        _ => return None,\n+        _ => bug!(\"That should be all the checked ones?\"),\n     };\n     Some(i)\n }\n\\ No newline at end of file"}, {"sha": "8d1ef82c187f9fa4a36da44c41ded524938ca72c", "filename": "src/test/mir-opt/lower_128bit_debug_test.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6a5a086fd61a87d36cfa3652b279c543601860da/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5a086fd61a87d36cfa3652b279c543601860da/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs?ref=6a5a086fd61a87d36cfa3652b279c543601860da", "patch": "@@ -16,31 +16,32 @@\n #[lang=\"i128_div\"]\n fn i128_div(_x: i128, _y: i128) -> i128 { 3 }\n #[lang=\"u128_div\"]\n-fn u128_div(_x: i128, _y: i128) -> i128 { 4 }\n+fn u128_div(_x: u128, _y: u128) -> u128 { 4 }\n #[lang=\"i128_rem\"]\n fn i128_rem(_x: i128, _y: i128) -> i128 { 5 }\n #[lang=\"u128_rem\"]\n-fn u128_rem(_x: i128, _y: i128) -> i128 { 6 }\n+fn u128_rem(_x: u128, _y: u128) -> u128 { 6 }\n \n #[lang=\"i128_addo\"]\n fn i128_addo(_x: i128, _y: i128) -> (i128, bool) { (0, false) }\n #[lang=\"u128_addo\"]\n-fn u128_addo(_x: i128, _y: i128) -> (i128, bool) { (1, false) }\n+fn u128_addo(_x: u128, _y: u128) -> (u128, bool) { (1, false) }\n #[lang=\"i128_subo\"]\n fn i128_subo(_x: i128, _y: i128) -> (i128, bool) { (2, false) }\n #[lang=\"u128_subo\"]\n-fn u128_subo(_x: i128, _y: i128) -> (i128, bool) { (3, false) }\n+fn u128_subo(_x: u128, _y: u128) -> (u128, bool) { (3, false) }\n #[lang=\"i128_mulo\"]\n fn i128_mulo(_x: i128, _y: i128) -> (i128, bool) { (4, false) }\n #[lang=\"u128_mulo\"]\n-fn u128_mulo(_x: i128, _y: i128) -> (i128, bool) { (5, false) }\n+fn u128_mulo(_x: u128, _y: u128) -> (u128, bool) { (5, false) }\n #[lang=\"i128_shlo\"]\n-fn i128_shlo(_x: i128, _y: u32) -> (i128, bool) { (6, false) }\n+fn i128_shlo(_x: i128, _y: i32) -> (i128, bool) { (6, false) }\n+#[lang=\"u128_shlo\"]\n+fn u128_shlo(_x: u128, _y: i32) -> (u128, bool) { (6, false) }\n #[lang=\"i128_shro\"]\n-fn i128_shro(_x: i128, _y: u32) -> (i128, bool) { (7, false) }\n+fn i128_shro(_x: i128, _y: i32) -> (i128, bool) { (7, false) }\n #[lang=\"u128_shro\"]\n-fn u128_shro(_x: i128, _y: u32) -> (i128, bool) { (8, false) }\n-\n+fn u128_shro(_x: u128, _y: i32) -> (u128, bool) { (8, false) }\n \n fn test_signed(mut x: i128) -> i128 {\n     x += 1;\n@@ -132,7 +133,7 @@ fn main() {\n //     ...\n //     assert(!(_7.1: bool), \"attempt to shift left with overflow\") -> bb6;\n //     ...\n-//     _7 = const i128_shlo(_1, const 6i32) -> bb12;\n+//     _7 = const u128_shlo(_1, const 6i32) -> bb12;\n //     ...\n //     assert(!(_8.1: bool), \"attempt to shift right with overflow\") -> bb7;\n // END rustc.test_unsigned.Lower128Bit.after.mir"}, {"sha": "ba05280e20b72d85a20653ee726c915a802dcdb1", "filename": "src/test/mir-opt/lower_128bit_test.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6a5a086fd61a87d36cfa3652b279c543601860da/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5a086fd61a87d36cfa3652b279c543601860da/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs?ref=6a5a086fd61a87d36cfa3652b279c543601860da", "patch": "@@ -15,25 +15,32 @@\n \n #[lang=\"i128_add\"]\n fn i128_add(_x: i128, _y: i128) -> i128 { 0 }\n+#[lang=\"u128_add\"]\n+fn u128_add(_x: u128, _y: u128) -> u128 { 0 }\n #[lang=\"i128_sub\"]\n fn i128_sub(_x: i128, _y: i128) -> i128 { 1 }\n+#[lang=\"u128_sub\"]\n+fn u128_sub(_x: u128, _y: u128) -> u128 { 1 }\n #[lang=\"i128_mul\"]\n fn i128_mul(_x: i128, _y: i128) -> i128 { 2 }\n+#[lang=\"u128_mul\"]\n+fn u128_mul(_x: u128, _y: u128) -> u128 { 2 }\n #[lang=\"i128_div\"]\n fn i128_div(_x: i128, _y: i128) -> i128 { 3 }\n #[lang=\"u128_div\"]\n-fn u128_div(_x: i128, _y: i128) -> i128 { 4 }\n+fn u128_div(_x: u128, _y: u128) -> u128 { 4 }\n #[lang=\"i128_rem\"]\n fn i128_rem(_x: i128, _y: i128) -> i128 { 5 }\n #[lang=\"u128_rem\"]\n-fn u128_rem(_x: i128, _y: i128) -> i128 { 6 }\n+fn u128_rem(_x: u128, _y: u128) -> u128 { 6 }\n #[lang=\"i128_shl\"]\n-fn i128_shl(_x: i128, _y: u32) -> i128 { 7 }\n+fn i128_shl(_x: i128, _y: i32) -> i128 { 7 }\n+#[lang=\"u128_shl\"]\n+fn u128_shl(_x: u128, _y: i32) -> u128 { 7 }\n #[lang=\"i128_shr\"]\n-fn i128_shr(_x: i128, _y: u32) -> i128 { 8 }\n+fn i128_shr(_x: i128, _y: i32) -> i128 { 8 }\n #[lang=\"u128_shr\"]\n-fn u128_shr(_x: i128, _y: u32) -> i128 { 9 }\n-\n+fn u128_shr(_x: u128, _y: i32) -> u128 { 9 }\n \n fn test_signed(mut x: i128) -> i128 {\n     x += 1;\n@@ -81,17 +88,17 @@ fn main() {\n // END rustc.test_signed.Lower128Bit.after.mir\n \n // START rustc.test_unsigned.Lower128Bit.after.mir\n-//     _1 = const i128_add(_1, const 1u128) -> bb5;\n+//     _1 = const u128_add(_1, const 1u128) -> bb5;\n //     ...\n //     _1 = const u128_div(_1, const 4u128) -> bb6;\n //     ...\n //     _1 = const u128_rem(_1, const 5u128) -> bb9;\n //     ...\n-//     _1 = const i128_mul(_1, const 3u128) -> bb3;\n+//     _1 = const u128_mul(_1, const 3u128) -> bb3;\n //     ...\n-//     _1 = const i128_sub(_1, const 2u128) -> bb4;\n+//     _1 = const u128_sub(_1, const 2u128) -> bb4;\n //     ...\n //     _1 = const u128_shr(_1, const 7i32) -> bb7;\n //     ...\n-//     _1 = const i128_shl(_1, const 6i32) -> bb8;\n+//     _1 = const u128_shl(_1, const 6i32) -> bb8;\n // END rustc.test_unsigned.Lower128Bit.after.mir"}]}