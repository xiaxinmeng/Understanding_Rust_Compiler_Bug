{"sha": "90b428e88d3fd5d392ece183347cbfbc8accbd5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYjQyOGU4OGQzZmQ1ZDM5MmVjZTE4MzM0N2NiZmJjOGFjY2JkNWM=", "commit": {"author": {"name": "Cameron Steffen", "email": "CSteffen@trustwave.com", "date": "2017-10-10T05:03:39Z"}, "committer": {"name": "Cameron Steffen", "email": "CSteffen@trustwave.com", "date": "2017-10-10T05:03:39Z"}, "message": "move ok_expect tests", "tree": {"sha": "2d42f2002352cd58a830c809541fa88824dfd8b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d42f2002352cd58a830c809541fa88824dfd8b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90b428e88d3fd5d392ece183347cbfbc8accbd5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90b428e88d3fd5d392ece183347cbfbc8accbd5c", "html_url": "https://github.com/rust-lang/rust/commit/90b428e88d3fd5d392ece183347cbfbc8accbd5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90b428e88d3fd5d392ece183347cbfbc8accbd5c/comments", "author": null, "committer": null, "parents": [{"sha": "3356d121df25bc5decc8ebe52f53d9e6952a1cac", "url": "https://api.github.com/repos/rust-lang/rust/commits/3356d121df25bc5decc8ebe52f53d9e6952a1cac", "html_url": "https://github.com/rust-lang/rust/commit/3356d121df25bc5decc8ebe52f53d9e6952a1cac"}], "stats": {"total": 129, "additions": 61, "deletions": 68}, "files": [{"sha": "e3a75521f3076e2d99cadfcc4b111f0e7cdae9e8", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/90b428e88d3fd5d392ece183347cbfbc8accbd5c/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b428e88d3fd5d392ece183347cbfbc8accbd5c/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=90b428e88d3fd5d392ece183347cbfbc8accbd5c", "patch": "@@ -393,32 +393,6 @@ fn get_unwrap() {\n \n #[allow(similar_names)]\n fn main() {\n-    use std::io;\n-\n     let opt = Some(0);\n     let _ = opt.unwrap();\n-\n-    let res: Result<i32, ()> = Ok(0);\n-    let _ = res.unwrap();\n-\n-    res.ok().expect(\"disaster!\");\n-    // the following should not warn, since `expect` isn't implemented unless\n-    // the error type implements `Debug`\n-    let res2: Result<i32, MyError> = Ok(0);\n-    res2.ok().expect(\"oh noes!\");\n-    let res3: Result<u32, MyErrorWithParam<u8>>= Ok(0);\n-    res3.ok().expect(\"whoof\");\n-    let res4: Result<u32, io::Error> = Ok(0);\n-    res4.ok().expect(\"argh\");\n-    let res5: io::Result<u32> = Ok(0);\n-    res5.ok().expect(\"oops\");\n-    let res6: Result<u32, &str> = Ok(0);\n-    res6.ok().expect(\"meh\");\n-}\n-\n-struct MyError(()); // doesn't implement Debug\n-\n-#[derive(Debug)]\n-struct MyErrorWithParam<T> {\n-    x: T\n }"}, {"sha": "18b04371d1b6493421e58d7ab3eae5e225979370", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 2, "deletions": 42, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/90b428e88d3fd5d392ece183347cbfbc8accbd5c/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90b428e88d3fd5d392ece183347cbfbc8accbd5c/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=90b428e88d3fd5d392ece183347cbfbc8accbd5c", "patch": "@@ -500,50 +500,10 @@ error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and\n     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vecdeque[0]`\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:399:13\n+   --> $DIR/methods.rs:397:13\n     |\n-399 |     let _ = opt.unwrap();\n+397 |     let _ = opt.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D option-unwrap-used` implied by `-D warnings`\n \n-error: used unwrap() on a Result value. If you don't want to handle the Err case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:402:13\n-    |\n-402 |     let _ = res.unwrap();\n-    |             ^^^^^^^^^^^^\n-    |\n-    = note: `-D result-unwrap-used` implied by `-D warnings`\n-\n-error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:404:5\n-    |\n-404 |     res.ok().expect(\"disaster!\");\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: `-D ok-expect` implied by `-D warnings`\n-\n-error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:410:5\n-    |\n-410 |     res3.ok().expect(\"whoof\");\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:412:5\n-    |\n-412 |     res4.ok().expect(\"argh\");\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:414:5\n-    |\n-414 |     res5.ok().expect(\"oops\");\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:416:5\n-    |\n-416 |     res6.ok().expect(\"meh\");\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^\n-"}, {"sha": "4341e8ea70b883455301d3680eebd2690929da01", "filename": "tests/ui/ok_expect.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/90b428e88d3fd5d392ece183347cbfbc8accbd5c/tests%2Fui%2Fok_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b428e88d3fd5d392ece183347cbfbc8accbd5c/tests%2Fui%2Fok_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_expect.rs?ref=90b428e88d3fd5d392ece183347cbfbc8accbd5c", "patch": "@@ -0,0 +1,27 @@\n+use std::io;\n+\n+struct MyError(()); // doesn't implement Debug\n+\n+#[derive(Debug)]\n+struct MyErrorWithParam<T> {\n+    x: T\n+}\n+\n+fn main() {\n+    let res: Result<i32, ()> = Ok(0);\n+    let _ = res.unwrap();\n+\n+    res.ok().expect(\"disaster!\");\n+    // the following should not warn, since `expect` isn't implemented unless\n+    // the error type implements `Debug`\n+    let res2: Result<i32, MyError> = Ok(0);\n+    res2.ok().expect(\"oh noes!\");\n+    let res3: Result<u32, MyErrorWithParam<u8>>= Ok(0);\n+    res3.ok().expect(\"whoof\");\n+    let res4: Result<u32, io::Error> = Ok(0);\n+    res4.ok().expect(\"argh\");\n+    let res5: io::Result<u32> = Ok(0);\n+    res5.ok().expect(\"oops\");\n+    let res6: Result<u32, &str> = Ok(0);\n+    res6.ok().expect(\"meh\");\n+}"}, {"sha": "79b09b3fa8afc44b897fcc298574e6c032973a48", "filename": "tests/ui/ok_expect.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/90b428e88d3fd5d392ece183347cbfbc8accbd5c/tests%2Fui%2Fok_expect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90b428e88d3fd5d392ece183347cbfbc8accbd5c/tests%2Fui%2Fok_expect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_expect.stderr?ref=90b428e88d3fd5d392ece183347cbfbc8accbd5c", "patch": "@@ -0,0 +1,32 @@\n+error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+  --> $DIR/ok_expect.rs:14:5\n+   |\n+14 |     res.ok().expect(\"disaster!\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D ok-expect` implied by `-D warnings`\n+\n+error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+  --> $DIR/ok_expect.rs:20:5\n+   |\n+20 |     res3.ok().expect(\"whoof\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+  --> $DIR/ok_expect.rs:22:5\n+   |\n+22 |     res4.ok().expect(\"argh\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+  --> $DIR/ok_expect.rs:24:5\n+   |\n+24 |     res5.ok().expect(\"oops\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+  --> $DIR/ok_expect.rs:26:5\n+   |\n+26 |     res6.ok().expect(\"meh\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+"}]}