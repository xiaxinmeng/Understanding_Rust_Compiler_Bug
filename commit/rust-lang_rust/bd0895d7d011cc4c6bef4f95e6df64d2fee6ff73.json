{"sha": "bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMDg5NWQ3ZDAxMWNjNGM2YmVmNGY5NWU2ZGY2NGQyZmVlNmZmNzM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-15T17:30:29Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-19T19:50:09Z"}, "message": "Update ui tests", "tree": {"sha": "146b8e71049cc840d5a99f42d9f96da9882f53da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/146b8e71049cc840d5a99f42d9f96da9882f53da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "html_url": "https://github.com/rust-lang/rust/commit/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "994dc4bd1ef01b45408750679d9ec46bc1c2ff33", "url": "https://api.github.com/repos/rust-lang/rust/commits/994dc4bd1ef01b45408750679d9ec46bc1c2ff33", "html_url": "https://github.com/rust-lang/rust/commit/994dc4bd1ef01b45408750679d9ec46bc1c2ff33"}], "stats": {"total": 379, "additions": 205, "deletions": 174}, "files": [{"sha": "044a3f70b4a636261b9051bcb77d39edde4ed13d", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.krisskross.nll.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -1,23 +1,24 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/project-fn-ret-contravariant.rs:53:12\n+  --> $DIR/project-fn-ret-contravariant.rs:55:4\n    |\n LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n    |              -- -- lifetime `'b` defined here\n    |              |\n    |              lifetime `'a` defined here\n-LL |    let a = bar(foo, y);\n-   |            ^^^^^^^^^^^ assignment requires that `'b` must outlive `'a`\n+...\n+LL |    (a, b) //[krisskross]~ ERROR 55:5: 55:6: lifetime mismatch [E0623]\n+   |    ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/project-fn-ret-contravariant.rs:54:12\n+  --> $DIR/project-fn-ret-contravariant.rs:55:4\n    |\n LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n    |              -- -- lifetime `'b` defined here\n    |              |\n    |              lifetime `'a` defined here\n-LL |    let a = bar(foo, y);\n-LL |    let b = bar(foo, x);\n-   |            ^^^^^^^^^^^ assignment requires that `'a` must outlive `'b`\n+...\n+LL |    (a, b) //[krisskross]~ ERROR 55:5: 55:6: lifetime mismatch [E0623]\n+   |    ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "10f70b525e055c1bba36da3b0370760f862594fd", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -14,7 +14,7 @@ LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n    |        |\n    |        lifetime `'a` defined here\n LL |    bar(foo, x) //[transmute]~ ERROR E0495\n-   |    ^^^^^^^^^^^ requires that `'a` must outlive `'b`\n+   |    ^^^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1cb687856942d4b20a349b3ed927e28f504003b9", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.krisskross.nll.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -1,23 +1,24 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/project-fn-ret-invariant.rs:63:12\n+  --> $DIR/project-fn-ret-invariant.rs:65:4\n    |\n LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |              -- -- lifetime `'b` defined here\n    |              |\n    |              lifetime `'a` defined here\n-LL |    let a = bar(foo, y); //[krisskross]~ ERROR E0623\n-   |            ^^^^^^^^^^^ assignment requires that `'b` must outlive `'a`\n+...\n+LL |    (a, b) //[krisskross]~ ERROR E0623\n+   |    ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/project-fn-ret-invariant.rs:64:12\n+  --> $DIR/project-fn-ret-invariant.rs:65:4\n    |\n LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |              -- -- lifetime `'b` defined here\n    |              |\n    |              lifetime `'a` defined here\n-LL |    let a = bar(foo, y); //[krisskross]~ ERROR E0623\n-LL |    let b = bar(foo, x);\n-   |            ^^^^^^^^^^^ assignment requires that `'a` must outlive `'b`\n+...\n+LL |    (a, b) //[krisskross]~ ERROR E0623\n+   |    ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2329adb5deab1de1a8834b4440a129e59361653d", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -8,15 +8,15 @@ LL |    bar(foo, x) //[transmute]~ ERROR E0495\n    |    ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/project-fn-ret-invariant.rs:58:13\n+  --> $DIR/project-fn-ret-invariant.rs:58:4\n    |\n LL | fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n    |        -- -- lifetime `'b` defined here\n    |        |\n    |        lifetime `'a` defined here\n ...\n LL |    bar(foo, x) //[transmute]~ ERROR E0495\n-   |             ^ requires that `'a` must outlive `'b`\n+   |    ^^^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "485d35662445d27600b8ecfabc3bc7399e056e17", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -36,10 +36,10 @@ LL |     move |_| println!(\"{}\", y)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:34:5\n+  --> $DIR/must_outlive_least_region_or_bound.rs:32:51\n    |\n-LL |     x\n-   |     ^\n+LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n+   |                                                   ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `T: 'static`...\n "}, {"sha": "7e9aa90c6c50c495ce265d71bed5e6aeeb0e5813", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -4,7 +4,7 @@ error: unsatisfied lifetime constraints\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n    |                         - let's call the lifetime of this reference `'1`\n LL |         self.x.iter().map(|a| a.0)\n-   |         ^^^^^^ cast requires that `'1` must outlive `'static`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n help: to allow this impl Trait to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n@@ -16,7 +16,7 @@ error: unsatisfied lifetime constraints\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    -- lifetime `'a` defined here\n LL |         self.x.iter().map(|a| a.0)\n-   |         ^^^^^^ cast requires that `'a` must outlive `'static`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n help: to allow this impl Trait to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {"}, {"sha": "18258ef1f9dc991e0aebd87bfce29ad55cc4ed12", "filename": "src/test/ui/impl-trait/type_parameters_captured.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -1,8 +1,8 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/type_parameters_captured.rs:19:5\n+  --> $DIR/type_parameters_captured.rs:17:20\n    |\n-LL |     x\n-   |     ^\n+LL | fn foo<T>(x: T) -> impl Any + 'static {\n+   |                    ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `T: 'static`...\n "}, {"sha": "201a3b3d54a3fcb79b6d347a7086304af1a49e88", "filename": "src/test/ui/issues/issue-10291.nll.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -1,10 +1,13 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/issue-10291.rs:12:5\n+  --> $DIR/issue-10291.rs:12:65\n    |\n-LL | fn test<'x>(x: &'x isize) {\n-   |         -- lifetime `'x` defined here\n-LL |     drop::<Box<for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'x` must outlive `'static`\n+LL |   fn test<'x>(x: &'x isize) {\n+   |           -- lifetime `'x` defined here\n+LL |       drop::<Box<for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n+   |  _________________________________________________________________^\n+LL | |         x //~ ERROR E0312\n+LL | |     }));\n+   | |_____^ closure body requires that `'x` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "e4aafd7b66e405e8d82ffb4da14b4649c60ed9e3", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -6,7 +6,7 @@ LL | fn foo(&mut (ref mut v, w): &mut (&u8, &u8), x: &u8) {\n    |                                   |\n    |                                   let's call the lifetime of this reference `'2`\n LL |     *v = x; //~ ERROR lifetime mismatch\n-   |     ^^^^^^ requires that `'1` must outlive `'2`\n+   |     ^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error: aborting due to previous error\n "}, {"sha": "934cdcd2ef28cecbf51712f18156aed99a00eb8e", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -6,7 +6,7 @@ LL | fn foo(mut x: Ref, y: Ref) {\n    |        |\n    |        has type `Ref<'_, '2>`\n LL |     x.b = y.b; //~ ERROR lifetime mismatch\n-   |     ^^^^^^^^^ requires that `'1` must outlive `'2`\n+   |     ^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error: aborting due to previous error\n "}, {"sha": "cbfd9d478091e994aabd92569b7d8c4d221f8be5", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -7,7 +7,7 @@ LL | fn foo(mut x: Ref) {\n    |        has type `Ref<'_, '1>`\n    |        has type `Ref<'2, '_>`\n LL |     x.a = x.b; //~ ERROR lifetime mismatch\n-   |     ^^^^^^^^^ requires that `'1` must outlive `'2`\n+   |     ^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error: aborting due to previous error\n "}, {"sha": "4f0efe24cf70a3b558ffce4ee1754c9cbbc959e2", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-4.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -7,7 +7,7 @@ LL | fn foo(mut x: Ref) {\n    |        has type `Ref<'_, '1>`\n    |        has type `Ref<'2, '_>`\n LL |     x.a = x.b; //~ ERROR lifetime mismatch\n-   |     ^^^^^^^^^ requires that `'1` must outlive `'2`\n+   |     ^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error: aborting due to previous error\n "}, {"sha": "fc1fab7aab5bb208132aed2824bf5a31d1db5950", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -6,7 +6,7 @@ LL | fn foo(mut x: Ref, y: &u32) {\n    |        |\n    |        has type `Ref<'_, '1>`\n LL |     y = x.b; //~ ERROR lifetime mismatch\n-   |     ^^^^^^^ requires that `'1` must outlive `'2`\n+   |     ^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error[E0384]: cannot assign to immutable argument `y`\n   --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:14:5"}, {"sha": "8100fa89c2d0ac453a04cf2eec4c4f4413bff7a1", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -6,7 +6,7 @@ LL | fn foo(mut y: Ref, x: &u32) {\n    |        |\n    |        has type `Ref<'_, '2>`\n LL |     y.b = x; //~ ERROR lifetime mismatch\n-   |     ^^^^^^^ requires that `'1` must outlive `'2`\n+   |     ^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error: aborting due to previous error\n "}, {"sha": "1c4a8b665893210bf0a402cc9b542352bfbed927", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-4.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -6,7 +6,7 @@ LL | fn foo(mut y: Ref, x: &u32) {\n    |        |\n    |        has type `Ref<'_, '2>`\n LL |     y.b = x; //~ ERROR lifetime mismatch\n-   |     ^^^^^^^ requires that `'1` must outlive `'2`\n+   |     ^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error: aborting due to previous error\n "}, {"sha": "2a4c5a685f16a524dcad341a4072bacfae7fd145", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -6,7 +6,7 @@ LL | fn foo(mut x: Ref, y: &u32) {\n    |        |\n    |        has type `Ref<'_, '2>`\n LL |     x.b = y; //~ ERROR lifetime mismatch\n-   |     ^^^^^^^ requires that `'1` must outlive `'2`\n+   |     ^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error: aborting due to previous error\n "}, {"sha": "1f9cb6d050fb0cd3c427e07e9818ac75038ee667", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -13,7 +13,7 @@ error: unsatisfied lifetime constraints\n   --> $DIR/escape-argument-callee.rs:36:45\n    |\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n-   |                                       -  -  ^^^^^^ requires that `'1` must outlive `'2`\n+   |                                       -  -  ^^^^^^ assignment requires that `'1` must outlive `'2`\n    |                                       |  |\n    |                                       |  has type `&'1 i32`\n    |                                       has type `&mut &'2 i32`"}, {"sha": "2e1249a5e81264e07e6859ce9b8c333f95d1362c", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -34,19 +34,20 @@ LL | | }\n    = note: defining type: DefId(0/0:6 ~ propagate_approximated_ref[317d]::supply[0]) with substs []\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/propagate-approximated-ref.rs:53:5\n+  --> $DIR/propagate-approximated-ref.rs:53:47\n    |\n LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n    |             --  -- lifetime `'b` defined here\n    |             |\n    |             lifetime `'a` defined here\n-LL | /     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+   |  _______________________________________________^\n LL | |         //~^ ERROR unsatisfied lifetime constraints\n LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |     });\n-   | |______^ argument requires that `'a` must outlive `'b`\n+   | |_____^ closure body requires that `'a` must outlive `'b`\n \n error: aborting due to previous error\n "}, {"sha": "9f1d9d21d11c00a8cb006838fdeea0a6544c42e7", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -49,14 +49,21 @@ LL | |     });\n    | |______^ `cell_a` escapes the function body here\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:45:29\n+  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:45:47\n    |\n-LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-   |           --  -- lifetime `'b` defined here\n-   |           |\n-   |           lifetime `'a` defined here\n-LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-   |                             ^^^^^^^ requires that `'a` must outlive `'b`\n+LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   |             --  -- lifetime `'b` defined here\n+   |             |\n+   |             lifetime `'a` defined here\n+LL |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+   |  _______________________________________________^\n+LL | |         //~^ ERROR borrowed data escapes outside of function\n+LL | |         //~| ERROR unsatisfied lifetime constraints\n+LL | |\n+LL | |         // Only works if 'x: 'y:\n+LL | |         demand_y(x, y, x.get())\n+LL | |     });\n+   | |_____^ closure body requires that `'a` must outlive `'b`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4e72fe4bb28aa9caf70face2b5626deac2481496", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -47,14 +47,20 @@ LL | |     });\n    | |______^ `cell_a` escapes the function body here\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:48:29\n+  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:48:47\n    |\n-LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-   |           --  -- lifetime `'b` defined here\n-   |           |\n-   |           lifetime `'a` defined here\n-LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-   |                             ^^^^^^^ requires that `'a` must outlive `'b`\n+LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   |             --  -- lifetime `'b` defined here\n+   |             |\n+   |             lifetime `'a` defined here\n+LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+   |  _______________________________________________^\n+LL | |         //~^ ERROR borrowed data escapes outside of function\n+LL | |         //~| ERROR unsatisfied lifetime constraints\n+LL | |         // Only works if 'x: 'y:\n+LL | |         demand_y(x, y, x.get())\n+LL | |     });\n+   | |_____^ closure body requires that `'a` must outlive `'b`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "de60b23ef6b974eb3f1931fc78e66ea0606e1f2b", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -34,19 +34,20 @@ LL | | }\n    = note: defining type: DefId(0/0:6 ~ propagate_approximated_val[317d]::test[0]) with substs []\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/propagate-approximated-val.rs:46:5\n+  --> $DIR/propagate-approximated-val.rs:46:45\n    |\n LL |   fn test<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n    |           --  -- lifetime `'b` defined here\n    |           |\n    |           lifetime `'a` defined here\n-LL | /     establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n+LL |       establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n+   |  _____________________________________________^\n LL | |         //~^ ERROR unsatisfied lifetime constraints\n LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(outlives1, outlives2, x.get())\n LL | |     });\n-   | |______^ argument requires that `'a` must outlive `'b`\n+   | |_____^ closure body requires that `'a` must outlive `'b`\n \n error: aborting due to previous error\n "}, {"sha": "eddad056995a7162a3939c6d4755f2c2362b67a6", "filename": "src/test/ui/nll/issue-50716.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -1,11 +1,11 @@\n-error: borrowed data escapes outside of function\n+error: unsatisfied lifetime constraints\n   --> $DIR/issue-50716.rs:25:14\n    |\n LL | fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)\n-   |                        - `s` is a reference that is only valid in the function body\n+   |        -- lifetime `'a` defined here\n ...\n LL |     let _x = *s; //~ ERROR\n-   |              ^^ `s` escapes the function body here\n+   |              ^^ proving this value is `Sized` requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "af577e8499b095f43c6cbe861474c591fff8de73", "filename": "src/test/ui/nll/issue-52113.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fissue-52113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fissue-52113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52113.rs?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -40,11 +40,11 @@ fn produce3<'a, 'b: 'a>(data: &'a mut Vec<&'a u32>, value: &'b u32) -> impl Bazi\n }\n \n fn produce_err<'a, 'b: 'a>(data: &'b mut Vec<&'b u32>, value: &'a u32) -> impl Bazinga + 'b {\n-    let x = move || { //~ ERROR unsatisfied lifetime constraints\n+    let x = move || {\n         let value: &'a u32 = value;\n         data.push(value);\n     };\n-    x\n+    x   //~ ERROR unsatisfied lifetime constraints\n }\n \n fn main() { }"}, {"sha": "45a192de454ef6e7e57de378db4393ad998ebd91", "filename": "src/test/ui/nll/issue-52113.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -1,12 +1,13 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/issue-52113.rs:43:9\n+  --> $DIR/issue-52113.rs:47:5\n    |\n LL | fn produce_err<'a, 'b: 'a>(data: &'b mut Vec<&'b u32>, value: &'a u32) -> impl Bazinga + 'b {\n    |                --  -- lifetime `'b` defined here\n    |                |\n    |                lifetime `'a` defined here\n-LL |     let x = move || { //~ ERROR unsatisfied lifetime constraints\n-   |         ^ requires that `'a` must outlive `'b`\n+...\n+LL |     x   //~ ERROR unsatisfied lifetime constraints\n+   |     ^ returning this value requires that `'a` must outlive `'b`\n \n error: aborting due to previous error\n "}, {"sha": "83a594941c0a5a08a2b6512f06f0407ae62a10b5", "filename": "src/test/ui/nll/issue-52742.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -6,7 +6,7 @@ LL |     fn take_bar(&mut self, b: Bar<'_>) {\n    |                 |\n    |                 has type `&mut Foo<'_, '2>`\n LL |         self.y = b.z\n-   |         ^^^^^^^^^^^^ requires that `'1` must outlive `'2`\n+   |         ^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error: aborting due to previous error\n "}, {"sha": "c878be9e2a2dcd58834a98271db43c1e2f821dd9", "filename": "src/test/ui/nll/mir_check_cast_reify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.rs?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -44,8 +44,8 @@ fn bar<'a>(x: &'a u32) -> &'static u32 {\n     // The MIR type checker must therefore relate `'?0` to `'?1` and `'?2`\n     // as part of checking the `ReifyFnPointer`.\n     let f: fn(_) -> _ = foo;\n-    //~^ ERROR unsatisfied lifetime constraints\n     f(x)\n+    //~^ ERROR unsatisfied lifetime constraints\n }\n \n fn main() {}"}, {"sha": "fdb71b17287d9a8b57f243dd93310c4cf448cdbc", "filename": "src/test/ui/nll/mir_check_cast_reify.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -1,11 +1,11 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/mir_check_cast_reify.rs:46:25\n+  --> $DIR/mir_check_cast_reify.rs:47:5\n    |\n LL | fn bar<'a>(x: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here\n ...\n-LL |     let f: fn(_) -> _ = foo;\n-   |                         ^^^ cast requires that `'a` must outlive `'static`\n+LL |     f(x)\n+   |     ^^^^ returning this value requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "be91a946857e3b916778cc0bd59d4b4ffd95eeb6", "filename": "src/test/ui/nll/mir_check_cast_unsafe_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.rs?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -16,8 +16,8 @@ fn bar<'a>(input: &'a u32, f: fn(&'a u32) -> &'a u32) -> &'static u32 {\n     // Here the NLL checker must relate the types in `f` to the types\n     // in `g`. These are related via the `UnsafeFnPointer` cast.\n     let g: unsafe fn(_) -> _ = f;\n-    //~^ ERROR unsatisfied lifetime constraints\n     unsafe { g(input) }\n+    //~^ ERROR unsatisfied lifetime constraints\n }\n \n fn main() {}"}, {"sha": "c14fb93a525e5bd4ef7de01384362c218561fbbb", "filename": "src/test/ui/nll/mir_check_cast_unsafe_fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -1,11 +1,11 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/mir_check_cast_unsafe_fn.rs:18:32\n+  --> $DIR/mir_check_cast_unsafe_fn.rs:19:14\n    |\n LL | fn bar<'a>(input: &'a u32, f: fn(&'a u32) -> &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here\n ...\n-LL |     let g: unsafe fn(_) -> _ = f;\n-   |                                ^ cast requires that `'a` must outlive `'static`\n+LL |     unsafe { g(input) }\n+   |              ^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "526dfb6013386b222d020be4eb648aafe7100a97", "filename": "src/test/ui/nll/mir_check_cast_unsize.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -4,7 +4,7 @@ error: unsatisfied lifetime constraints\n LL | fn bar<'a>(x: &'a u32) -> &'static dyn Debug {\n    |        -- lifetime `'a` defined here\n LL |     x\n-   |     ^ cast requires that `'a` must outlive `'static`\n+   |     ^ returning this value requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "9a83872b965c9f74db93476f64b543feed6d764a", "filename": "src/test/ui/nll/relate_tys/hr-fn-aaa-as-aba.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -5,10 +5,10 @@ LL |     let a: for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 = make_it();\n    |                                                          ^^^^^^^^^\n \n error: higher-ranked subtype error\n-  --> $DIR/hr-fn-aaa-as-aba.rs:32:58\n+  --> $DIR/hr-fn-aaa-as-aba.rs:32:9\n    |\n LL |     let _: for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 = make_it();\n-   |                                                          ^^^^^^^^^\n+   |         ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "64eb7353638676d2e453ddf9f32a102f3d744dc9", "filename": "src/test/ui/nll/ty-outlives/impl-trait-outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.rs?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -15,11 +15,11 @@\n use std::fmt::Debug;\n \n fn no_region<'a, T>(x: Box<T>) -> impl Debug + 'a\n+    //~^ ERROR the parameter type `T` may not live long enough [E0309]\n where\n     T: Debug,\n {\n     x\n-    //~^ ERROR the parameter type `T` may not live long enough [E0309]\n }\n \n fn correct_region<'a, T>(x: Box<T>) -> impl Debug + 'a\n@@ -30,11 +30,11 @@ where\n }\n \n fn wrong_region<'a, 'b, T>(x: Box<T>) -> impl Debug + 'a\n+    //~^ ERROR the parameter type `T` may not live long enough [E0309]\n where\n     T: 'b + Debug,\n {\n     x\n-    //~^ ERROR the parameter type `T` may not live long enough [E0309]\n }\n \n fn outlives_region<'a, 'b, T>(x: Box<T>) -> impl Debug + 'a"}, {"sha": "61d2d2d6d82d83c3ced2f877bec8b9831d0f3353", "filename": "src/test/ui/nll/ty-outlives/impl-trait-outlives.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -1,16 +1,16 @@\n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/impl-trait-outlives.rs:21:5\n+  --> $DIR/impl-trait-outlives.rs:17:35\n    |\n-LL |     x\n-   |     ^\n+LL | fn no_region<'a, T>(x: Box<T>) -> impl Debug + 'a\n+   |                                   ^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/impl-trait-outlives.rs:36:5\n+  --> $DIR/impl-trait-outlives.rs:32:42\n    |\n-LL |     x\n-   |     ^\n+LL | fn wrong_region<'a, 'b, T>(x: Box<T>) -> impl Debug + 'a\n+   |                                          ^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n "}, {"sha": "4bd96ab4e713d6a5a4aa8032f06a3d85b5576847", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -32,24 +32,24 @@ LL | | }\n                T\n            ]\n \n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/projection-one-region-closure.rs:55:29\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:8 ~ projection_one_region_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:16), 'a))`...\n+\n error: unsatisfied lifetime constraints\n-  --> $DIR/projection-one-region-closure.rs:55:5\n+  --> $DIR/projection-one-region-closure.rs:55:29\n    |\n LL | fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n    |                          --  -- lifetime `'b` defined here\n    |                          |\n    |                          lifetime `'a` defined here\n ...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-\n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/projection-one-region-closure.rs:55:29\n-   |\n-LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:8 ~ projection_one_region_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:16), 'a))`...\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ closure body requires that `'b` must outlive `'a`\n \n note: External requirements\n   --> $DIR/projection-one-region-closure.rs:66:29\n@@ -86,24 +86,24 @@ LL | | }\n                T\n            ]\n \n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/projection-one-region-closure.rs:66:29\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n+\n error: unsatisfied lifetime constraints\n-  --> $DIR/projection-one-region-closure.rs:66:5\n+  --> $DIR/projection-one-region-closure.rs:66:29\n    |\n LL | fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n    |                           --  -- lifetime `'b` defined here\n    |                           |\n    |                           lifetime `'a` defined here\n ...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-\n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/projection-one-region-closure.rs:66:29\n-   |\n-LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ closure body requires that `'b` must outlive `'a`\n \n note: External requirements\n   --> $DIR/projection-one-region-closure.rs:87:29\n@@ -140,24 +140,24 @@ LL | | }\n                T\n            ]\n \n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/projection-one-region-closure.rs:87:29\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n+\n error: unsatisfied lifetime constraints\n-  --> $DIR/projection-one-region-closure.rs:87:5\n+  --> $DIR/projection-one-region-closure.rs:87:29\n    |\n LL | fn projection_outlives<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n    |                        --  -- lifetime `'b` defined here\n    |                        |\n    |                        lifetime `'a` defined here\n ...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-\n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/projection-one-region-closure.rs:87:29\n-   |\n-LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ closure body requires that `'b` must outlive `'a`\n \n note: External requirements\n   --> $DIR/projection-one-region-closure.rs:99:29"}, {"sha": "ccf70a77bffc1fbd24d65060ef4a443abe4f1ddd", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -32,15 +32,15 @@ LL | | }\n            ]\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:47:5\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:47:29\n    |\n LL | fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n    |                          --  -- lifetime `'b` defined here\n    |                          |\n    |                          lifetime `'a` defined here\n ...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ closure body requires that `'b` must outlive `'a`\n \n note: External requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:57:29\n@@ -77,15 +77,15 @@ LL | | }\n            ]\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:57:5\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:57:29\n    |\n LL | fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n    |                           --  -- lifetime `'b` defined here\n    |                           |\n    |                           lifetime `'a` defined here\n ...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ closure body requires that `'b` must outlive `'a`\n \n note: External requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:77:29\n@@ -122,15 +122,15 @@ LL | | }\n            ]\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:77:5\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:77:29\n    |\n LL | fn projection_outlives<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n    |                        --  -- lifetime `'b` defined here\n    |                        |\n    |                        lifetime `'a` defined here\n ...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ closure body requires that `'b` must outlive `'a`\n \n note: External requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:87:29"}, {"sha": "372b803082f1134c5e699076bd4888d3bfd965da", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -235,15 +235,15 @@ LL | | }\n            ]\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:105:5\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:105:29\n    |\n LL | fn two_regions<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n    |                --  -- lifetime `'b` defined here\n    |                |\n    |                lifetime `'a` defined here\n ...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ closure body requires that `'b` must outlive `'a`\n \n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:115:29"}, {"sha": "f359608462d1d4c49ca7a7ba7c3b0b4d1bdd7160", "filename": "src/test/ui/nll/user-annotations/patterns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -131,12 +131,12 @@ LL |     y //~ ERROR\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/patterns.rs:117:40\n+  --> $DIR/patterns.rs:117:9\n    |\n LL | fn a_to_static_then_static<'a>(x: &'a u32) -> &'static u32 {\n    |                            -- lifetime `'a` defined here\n LL |     let (y, _z): (&'static u32, u32) = (x, 44); //~ ERROR\n-   |                                        ^^^^^^^ requires that `'a` must outlive `'static`\n+   |         ^^^^^^^ type annotation requires that `'a` must outlive `'static`\n \n error: aborting due to 14 previous errors\n "}, {"sha": "a6bfcf1d3699a417c26d4487a5b6ad491b14b5f4", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-rptr-box-error.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -1,10 +1,10 @@\n-error: borrowed data escapes outside of function\n+error: unsatisfied lifetime constraints\n   --> $DIR/object-lifetime-default-from-rptr-box-error.rs:25:5\n    |\n LL | fn c<'a>(t: &'a Box<Test+'a>, mut ss: SomeStruct<'a>) {\n-   |          - `t` is a reference that is only valid in the function body\n+   |      -- lifetime `'a` defined here\n LL |     ss.t = t; //~ ERROR mismatched types\n-   |     ^^^^^^^^ `t` escapes the function body here\n+   |     ^^^^^^^^ assignment requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "396ff1302b1513a7bd72016b0c01b24fd52a2b4a", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-rptr-struct-error.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -1,10 +1,10 @@\n-error: borrowed data escapes outside of function\n+error: unsatisfied lifetime constraints\n   --> $DIR/object-lifetime-default-from-rptr-struct-error.rs:31:5\n    |\n LL | fn c<'a>(t: &'a MyBox<Test+'a>, mut ss: SomeStruct<'a>) {\n-   |          - `t` is a reference that is only valid in the function body\n+   |      -- lifetime `'a` defined here\n LL |     ss.t = t; //~ ERROR mismatched types\n-   |     ^^^^^^^^ `t` escapes the function body here\n+   |     ^^^^^^^^ assignment requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "53d3b2d5323c2488315ef11a505409741f24c7c9", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -1,10 +1,10 @@\n error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/region-object-lifetime-in-coercion.rs:18:33\n+  --> $DIR/region-object-lifetime-in-coercion.rs:18:9\n    |\n LL | fn a(v: &[u8]) -> Box<Foo + 'static> {\n    |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n LL |     let x: Box<Foo + 'static> = Box::new(v);\n-   |                                 ^^^^^^^^^^^ lifetime `'static` required\n+   |         ^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `v`\n   --> $DIR/region-object-lifetime-in-coercion.rs:24:5"}, {"sha": "0e38abef668cae88084a9039b99cf30deef879ad", "filename": "src/test/ui/regions/regions-addr-of-self.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -4,7 +4,7 @@ error: unsatisfied lifetime constraints\n LL |     pub fn chase_cat(&mut self) {\n    |                      - let's call the lifetime of this reference `'1`\n LL |         let p: &'static mut usize = &mut self.cats_chased; //~ ERROR cannot infer\n-   |             ^ requires that `'1` must outlive `'static`\n+   |             ^ type annotation requires that `'1` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "6e4bf26047e4679348f1136cd8b7cbdde748bb95", "filename": "src/test/ui/regions/regions-addr-of-upvar-self.nll.stderr", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -4,7 +4,7 @@ error: unsatisfied lifetime constraints\n LL |         let _f = || {\n    |                  -- lifetime `'1` represents this closure's body\n LL |             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n-   |                 ^ requires that `'1` must outlive `'static`\n+   |                 ^ type annotation requires that `'1` must outlive `'static`\n    |\n    = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n \n@@ -16,17 +16,21 @@ LL |     pub fn chase_cat(&mut self) {\n LL |         let _f = || {\n    |                  -- lifetime `'1` represents this closure's body\n LL |             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n-   |                 ^ requires that `'1` must outlive `'2`\n+   |                 ^ type annotation requires that `'1` must outlive `'2`\n    |\n    = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-addr-of-upvar-self.rs:19:13\n+  --> $DIR/regions-addr-of-upvar-self.rs:19:18\n    |\n-LL |     pub fn chase_cat(&mut self) {\n-   |                      - let's call the lifetime of this reference `'1`\n-LL |         let _f = || {\n-   |             ^^ requires that `'1` must outlive `'static`\n+LL |       pub fn chase_cat(&mut self) {\n+   |                        - let's call the lifetime of this reference `'1`\n+LL |           let _f = || {\n+   |  __________________^\n+LL | |             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n+LL | |             *p = 3;\n+LL | |         };\n+   | |_________^ closure body requires that `'1` must outlive `'static`\n \n error[E0597]: `self` does not live long enough\n   --> $DIR/regions-addr-of-upvar-self.rs:20:46"}, {"sha": "c073e3728e70571c7febf98ccfdf2e5160a6a311", "filename": "src/test/ui/regions/regions-close-object-into-object-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -1,10 +1,10 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-close-object-into-object-2.rs:20:11\n+  --> $DIR/regions-close-object-into-object-2.rs:20:5\n    |\n LL | fn g<'a, T: 'static>(v: Box<A<T>+'a>) -> Box<X+'static> {\n    |      -- lifetime `'a` defined here\n LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n-   |           ^^^ cast requires that `'a` must outlive `'static`\n+   |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error[E0597]: `*v` does not live long enough\n   --> $DIR/regions-close-object-into-object-2.rs:20:11"}, {"sha": "4b47b951d77173fcaba3511fd4e900fb0a38fb40", "filename": "src/test/ui/regions/regions-close-object-into-object-4.nll.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -6,6 +6,14 @@ LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n    |\n    = help: consider adding an explicit lifetime bound `U: 'static`...\n \n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-close-object-into-object-4.rs:20:5\n+   |\n+LL | fn i<'a, T, U>(v: Box<A<U>+'a>) -> Box<X+'static> {\n+   |      -- lifetime `'a` defined here\n+LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n+   |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:20:9\n    |\n@@ -14,14 +22,6 @@ LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n    |\n    = help: consider adding an explicit lifetime bound `U: 'static`...\n \n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-close-object-into-object-4.rs:20:11\n-   |\n-LL | fn i<'a, T, U>(v: Box<A<U>+'a>) -> Box<X+'static> {\n-   |      -- lifetime `'a` defined here\n-LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n-   |           ^^^ cast requires that `'a` must outlive `'static`\n-\n error[E0597]: `*v` does not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:20:11\n    |"}, {"sha": "d0606295713193816dd2a684968e5bafb4fb554a", "filename": "src/test/ui/regions/regions-free-region-ordering-callee.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -18,7 +18,7 @@ LL | fn ordering3<'a, 'b>(x: &'a usize, y: &'b usize) -> &'a &'b usize {\n    |              lifetime `'a` defined here\n LL |     // Do not infer an ordering from the return value.\n LL |     let z: &'b usize = &*x;\n-   |                        ^^^ requires that `'a` must outlive `'b`\n+   |                        ^^^ assignment requires that `'a` must outlive `'b`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4bb602d572fa3e5a650bc335913f0901cfa50e29", "filename": "src/test/ui/regions/regions-nested-fns.nll.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -1,22 +1,14 @@\n-error: unsatisfied lifetime constraints\n+error: borrowed data escapes outside of closure\n   --> $DIR/regions-nested-fns.rs:20:9\n    |\n LL |     let mut ay = &y; //~ ERROR E0495\n-   |         ------ lifetime `'2` appears in the type of `ay`\n+   |         ------ `ay` is declared here, outside of the closure body\n LL | \n LL |     ignore::<Box<for<'z> FnMut(&'z isize)>>(Box::new(|z| {\n-   |                                                       - has type `&'1 isize`\n+   |                                                       - `z` is a reference that is only valid in the closure body\n ...\n LL |         ay = z;\n-   |         ^^^^^^ requires that `'1` must outlive `'2`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-nested-fns.rs:14:9\n-   |\n-LL | fn nested<'x>(x: &'x isize) {\n-   |           -- lifetime `'x` defined here\n-LL |     let y = 3;\n-   |         ^ requires that `'x` must outlive `'static`\n+   |         ^^^^^^ `z` escapes the closure body here\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/regions-nested-fns.rs:15:18\n@@ -43,6 +35,20 @@ LL | }\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-nested-fns.rs:23:68\n+   |\n+LL |   fn nested<'x>(x: &'x isize) {\n+   |             -- lifetime `'x` defined here\n+...\n+LL |       ignore::< Box<for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n+   |  ____________________________________________________________________^\n+LL | |         if false { return x; } //~ ERROR E0312\n+LL | |         if false { return ay; }\n+LL | |         return z;\n+LL | |     }));\n+   | |_____^ closure body requires that `'x` must outlive `'static`\n+\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0597`."}, {"sha": "0a9bcee1ce29d34f53a8a09e2fd9e189edec2782", "filename": "src/test/ui/regions/regions-trait-object-subtyping.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -7,7 +7,7 @@ LL | fn foo3<'a,'b>(x: &'a mut Dummy) -> &'b mut Dummy {\n    |         lifetime `'a` defined here\n LL |     // Without knowing 'a:'b, we can't coerce\n LL |     x //~ ERROR lifetime bound not satisfied\n-   |     ^ returning this value requires that `'a` must outlive `'b`\n+   |     ^ cast requires that `'a` must outlive `'b`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/regions-trait-object-subtyping.rs:32:5"}, {"sha": "7adb195b7d0225d68304b023191927b6d3b760e6", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -5,7 +5,7 @@ LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n    |                - let's call the lifetime of this reference `'1`\n LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ cast requires that `'1` must outlive `'static`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "a30720dc6ba8a8bef7ba1ad2989fa31e8b3135c3", "filename": "src/test/ui/variance/variance-contravariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -7,7 +7,7 @@ LL | fn get_min_from_max<'min, 'max>(v: Box<Get<&'max i32>>)\n    |                     lifetime `'min` defined here\n ...\n LL |     v //~ ERROR mismatched types\n-   |     ^ cast requires that `'min` must outlive `'max`\n+   |     ^ returning this value requires that `'min` must outlive `'max`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/variance-contravariant-arg-object.rs:32:5\n@@ -18,7 +18,7 @@ LL | fn get_max_from_min<'min, 'max, G>(v: Box<Get<&'min i32>>)\n    |                     lifetime `'min` defined here\n ...\n LL |     v //~ ERROR mismatched types\n-   |     ^ cast requires that `'min` must outlive `'max`\n+   |     ^ returning this value requires that `'min` must outlive `'max`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "26699a537e81032fc7c5751882b727356f1afb5b", "filename": "src/test/ui/variance/variance-covariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -7,7 +7,7 @@ LL | fn get_min_from_max<'min, 'max>(v: Box<Get<&'max i32>>)\n    |                     lifetime `'min` defined here\n ...\n LL |     v //~ ERROR mismatched types\n-   |     ^ cast requires that `'min` must outlive `'max`\n+   |     ^ returning this value requires that `'min` must outlive `'max`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/variance-covariant-arg-object.rs:32:5\n@@ -18,7 +18,7 @@ LL | fn get_max_from_min<'min, 'max, G>(v: Box<Get<&'min i32>>)\n    |                     lifetime `'min` defined here\n ...\n LL |     v //~ ERROR mismatched types\n-   |     ^ cast requires that `'min` must outlive `'max`\n+   |     ^ returning this value requires that `'min` must outlive `'max`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "20ab6485986185fae8484f7ae9368f384b1a93f2", "filename": "src/test/ui/variance/variance-invariant-arg-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr?ref=bd0895d7d011cc4c6bef4f95e6df64d2fee6ff73", "patch": "@@ -7,7 +7,7 @@ LL | fn get_min_from_max<'min, 'max>(v: Box<Get<&'max i32>>)\n    |                     lifetime `'min` defined here\n ...\n LL |     v //~ ERROR mismatched types\n-   |     ^ cast requires that `'min` must outlive `'max`\n+   |     ^ returning this value requires that `'min` must outlive `'max`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/variance-invariant-arg-object.rs:28:5\n@@ -18,7 +18,7 @@ LL | fn get_max_from_min<'min, 'max, G>(v: Box<Get<&'min i32>>)\n    |                     lifetime `'min` defined here\n ...\n LL |     v //~ ERROR mismatched types\n-   |     ^ cast requires that `'min` must outlive `'max`\n+   |     ^ returning this value requires that `'min` must outlive `'max`\n \n error: aborting due to 2 previous errors\n "}]}