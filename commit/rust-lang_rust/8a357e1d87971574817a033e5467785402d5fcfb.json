{"sha": "8a357e1d87971574817a033e5467785402d5fcfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMzU3ZTFkODc5NzE1NzQ4MTdhMDMzZTU0Njc3ODU0MDJkNWZjZmI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-13T05:41:02Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-23T20:12:45Z"}, "message": "Add syntax for ranges", "tree": {"sha": "7572e05c56f1a6f49964a24610c1c6c949b57c17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7572e05c56f1a6f49964a24610c1c6c949b57c17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a357e1d87971574817a033e5467785402d5fcfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a357e1d87971574817a033e5467785402d5fcfb", "html_url": "https://github.com/rust-lang/rust/commit/8a357e1d87971574817a033e5467785402d5fcfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a357e1d87971574817a033e5467785402d5fcfb/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53c5fcb99fc8c62b8723032280fab3dc06fef973", "url": "https://api.github.com/repos/rust-lang/rust/commits/53c5fcb99fc8c62b8723032280fab3dc06fef973", "html_url": "https://github.com/rust-lang/rust/commit/53c5fcb99fc8c62b8723032280fab3dc06fef973"}], "stats": {"total": 91, "additions": 83, "deletions": 8}, "files": [{"sha": "fe8e90bc32cfa6f2c3f4a7ef017dcb9639d2f216", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=8a357e1d87971574817a033e5467785402d5fcfb", "patch": "@@ -439,6 +439,10 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                           start.iter().chain(end.iter()).map(|x| &**x))\n             }\n \n+            ast::ExprRange(..) => {\n+                self.tcx.sess.span_bug(expr.span, \"non-desugared range\");\n+            }\n+\n             ast::ExprUnary(_, ref e) if self.is_method_call(expr) => {\n                 self.call(expr, pred, &**e, None::<ast::Expr>.iter())\n             }"}, {"sha": "6a2bb2fc5a3823182eea2e56599d5c2f6bc5e9f3", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=8a357e1d87971574817a033e5467785402d5fcfb", "patch": "@@ -465,6 +465,10 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n                 assert!(overloaded);\n             }\n \n+            ast::ExprRange(..) => {\n+                self.tcx().sess.span_bug(expr.span, \"non-desugared range\");\n+            }\n+\n             ast::ExprCall(ref callee, ref args) => {    // callee(args)\n                 self.walk_callee(expr, &**callee);\n                 self.consume_exprs(args);"}, {"sha": "fe2d7d47cb99d53ecab0ece45bd1dc1fe9e0ea37", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=8a357e1d87971574817a033e5467785402d5fcfb", "patch": "@@ -486,6 +486,9 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n       ast::ExprWhileLet(..) => {\n           ir.tcx.sess.span_bug(expr.span, \"non-desugared ExprWhileLet\");\n       }\n+      ast::ExprRange(..) => {\n+          ir.tcx.sess.span_bug(expr.span, \"non-desugared range\");\n+      }\n       ast::ExprForLoop(ref pat, _, _, _) => {\n         pat_util::pat_bindings(&ir.tcx.def_map, &**pat, |bm, p_id, sp, path1| {\n             debug!(\"adding local variable {} from for loop with bm {}\",\n@@ -1197,6 +1200,10 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             self.propagate_through_expr(&**e1, succ)\n           }\n \n+          ast::ExprRange(..) => {\n+              self.ir.tcx.sess.span_bug(expr.span, \"non-desugared range\");\n+          }\n+\n           ast::ExprBox(None, ref e) |\n           ast::ExprAddrOf(_, ref e) |\n           ast::ExprCast(ref e, _) |\n@@ -1498,6 +1505,9 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n       ast::ExprWhileLet(..) => {\n         this.ir.tcx.sess.span_bug(expr.span, \"non-desugared ExprWhileLet\");\n       }\n+      ast::ExprRange(..) => {\n+        this.ir.tcx.sess.span_bug(expr.span, \"non-desugared range\");\n+      }\n     }\n }\n "}, {"sha": "e605471fc069bc766f8691d092fda056f0fe3e33", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=8a357e1d87971574817a033e5467785402d5fcfb", "patch": "@@ -559,6 +559,9 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n           ast::ExprWhileLet(..) => {\n             self.tcx().sess.span_bug(expr.span, \"non-desugared ExprWhileLet\");\n           }\n+          ast::ExprRange(..) => {\n+            self.tcx().sess.span_bug(expr.span, \"non-desugared range\");\n+          }\n         }\n     }\n "}, {"sha": "4c5d3cb5c748a741f3b5382394fb3a68c61dc1de", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=8a357e1d87971574817a033e5467785402d5fcfb", "patch": "@@ -4273,6 +4273,9 @@ pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n         ast::ExprWhileLet(..) => {\n             tcx.sess.span_bug(expr.span, \"non-desugared ExprWhileLet\");\n         }\n+        ast::ExprRange(..) => {\n+            tcx.sess.span_bug(expr.span, \"non-desugared range\");\n+        }\n \n         ast::ExprLit(ref lit) if lit_is_str(&**lit) => {\n             RvalueDpsExpr"}, {"sha": "c68e9055269c0fca8e3278c39f5f94079c992eee", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=8a357e1d87971574817a033e5467785402d5fcfb", "patch": "@@ -247,6 +247,7 @@ mod svh_visitor {\n         SawExprAssignOp(ast::BinOp),\n         SawExprIndex,\n         SawExprSlice,\n+        SawExprRange,\n         SawExprPath,\n         SawExprAddrOf(ast::Mutability),\n         SawExprRet,\n@@ -280,6 +281,7 @@ mod svh_visitor {\n             ExprTupField(_, id)      => SawExprTupField(id.node),\n             ExprIndex(..)            => SawExprIndex,\n             ExprSlice(..)            => SawExprSlice,\n+            ExprRange(..)            => SawExprRange,\n             ExprPath(..)             => SawExprPath,\n             ExprAddrOf(m, _)         => SawExprAddrOf(m),\n             ExprBreak(id)            => SawExprBreak(id.map(content)),"}, {"sha": "f402f1d7c310de829955eef96b73bb51805eb65b", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=8a357e1d87971574817a033e5467785402d5fcfb", "patch": "@@ -3494,6 +3494,11 @@ fn populate_scope_map(cx: &CrateContext,\n                 end.as_ref().map(|x| walk_expr(cx, &**x, scope_stack, scope_map));\n             }\n \n+            ast::ExprRange(..) => {\n+                cx.sess().span_bug(exp.span, \"debuginfo::populate_scope_map() - \\\n+                                              Found unexpanded range.\");\n+            }\n+\n             ast::ExprVec(ref init_expressions) |\n             ast::ExprTup(ref init_expressions) => {\n                 for ie in init_expressions.iter() {"}, {"sha": "0281186155115e9dd51046227a8ab740c84fb8f1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8a357e1d87971574817a033e5467785402d5fcfb", "patch": "@@ -4278,6 +4278,10 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n               }\n           }\n        }\n+       ast::ExprRange(..) => {\n+         tcx.sess.span_bug(expr.span, \"non-desugared range\");\n+       }\n+\n     }\n \n     debug!(\"type of expr({}) {} is...\", expr.id,"}, {"sha": "0c8c17b080bf33f9a0914d40b2d8e3832506daaa", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8a357e1d87971574817a033e5467785402d5fcfb", "patch": "@@ -724,6 +724,7 @@ pub enum Expr_ {\n     ExprTupField(P<Expr>, Spanned<uint>),\n     ExprIndex(P<Expr>, P<Expr>),\n     ExprSlice(P<Expr>, Option<P<Expr>>, Option<P<Expr>>, Mutability),\n+    ExprRange(P<Expr>, Option<P<Expr>>),\n \n     /// Variable reference, possibly containing `::` and/or\n     /// type parameters, e.g. foo::bar::<baz>"}, {"sha": "0803de1bb53e215bc76ef6420f07e47a221f7130", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=8a357e1d87971574817a033e5467785402d5fcfb", "patch": "@@ -1390,6 +1390,10 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n                           e2.map(|x| folder.fold_expr(x)),\n                           m)\n             }\n+            ExprRange(e1, e2) => {\n+                ExprRange(folder.fold_expr(e1),\n+                          e2.map(|x| folder.fold_expr(x)))\n+            }\n             ExprPath(pth) => ExprPath(folder.fold_path(pth)),\n             ExprBreak(opt_ident) => ExprBreak(opt_ident.map(|x| folder.fold_ident(x))),\n             ExprAgain(opt_ident) => ExprAgain(opt_ident.map(|x| folder.fold_ident(x))),"}, {"sha": "94b61ba56d2e5b938d3012f8f6991ae2a8c4dbf6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8a357e1d87971574817a033e5467785402d5fcfb", "patch": "@@ -26,7 +26,7 @@ use ast::{Expr, Expr_, ExprAddrOf, ExprMatch, ExprAgain};\n use ast::{ExprAssign, ExprAssignOp, ExprBinary, ExprBlock, ExprBox};\n use ast::{ExprBreak, ExprCall, ExprCast};\n use ast::{ExprField, ExprTupField, ExprClosure, ExprIf, ExprIfLet, ExprIndex, ExprSlice};\n-use ast::{ExprLit, ExprLoop, ExprMac};\n+use ast::{ExprLit, ExprLoop, ExprMac, ExprRange};\n use ast::{ExprMethodCall, ExprParen, ExprPath};\n use ast::{ExprRepeat, ExprRet, ExprStruct, ExprTup, ExprUnary};\n use ast::{ExprVec, ExprWhile, ExprWhileLet, ExprForLoop, Field, FnDecl};\n@@ -95,7 +95,8 @@ bitflags! {\n         const UNRESTRICTED                  = 0b0000,\n         const RESTRICTION_STMT_EXPR         = 0b0001,\n         const RESTRICTION_NO_BAR_OP         = 0b0010,\n-        const RESTRICTION_NO_STRUCT_LITERAL = 0b0100\n+        const RESTRICTION_NO_STRUCT_LITERAL = 0b0100,\n+        const RESTRICTION_NO_DOTS           = 0b1000,\n     }\n }\n \n@@ -1547,7 +1548,7 @@ impl<'a> Parser<'a> {\n \n             // Parse the `; e` in `[ int; e ]`\n             // where `e` is a const expression\n-            let t = match self.maybe_parse_fixed_vstore() {\n+            let t = match self.maybe_parse_fixed_length_of_vec() {\n                 None => TyVec(t),\n                 Some(suffix) => TyFixedLengthVec(t, suffix)\n             };\n@@ -1707,12 +1708,12 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub fn maybe_parse_fixed_vstore(&mut self) -> Option<P<ast::Expr>> {\n+    pub fn maybe_parse_fixed_length_of_vec(&mut self) -> Option<P<ast::Expr>> {\n         if self.check(&token::Comma) &&\n                 self.look_ahead(1, |t| *t == token::DotDot) {\n             self.bump();\n             self.bump();\n-            Some(self.parse_expr())\n+            Some(self.parse_expr_res(RESTRICTION_NO_DOTS))\n         } else if self.check(&token::Semi) {\n             self.bump();\n             Some(self.parse_expr())\n@@ -2130,14 +2131,22 @@ impl<'a> Parser<'a> {\n         ExprIndex(expr, idx)\n     }\n \n-    pub fn mk_slice(&mut self, expr: P<Expr>,\n+    pub fn mk_slice(&mut self,\n+                    expr: P<Expr>,\n                     start: Option<P<Expr>>,\n                     end: Option<P<Expr>>,\n                     mutbl: Mutability)\n                     -> ast::Expr_ {\n         ExprSlice(expr, start, end, mutbl)\n     }\n \n+    pub fn mk_range(&mut self,\n+                    start: P<Expr>,\n+                    end: Option<P<Expr>>)\n+                    -> ast::Expr_ {\n+        ExprRange(start, end)\n+    }\n+\n     pub fn mk_field(&mut self, expr: P<Expr>, ident: ast::SpannedIdent) -> ast::Expr_ {\n         ExprField(expr, ident)\n     }\n@@ -2615,7 +2624,7 @@ impl<'a> Parser<'a> {\n                     }\n                     // e[e] | e[e..] | e[e..e]\n                     _ => {\n-                        let ix = self.parse_expr();\n+                        let ix = self.parse_expr_res(RESTRICTION_NO_DOTS);\n                         match self.token {\n                             // e[e..] | e[e..e]\n                             token::DotDot => {\n@@ -2628,7 +2637,7 @@ impl<'a> Parser<'a> {\n                                     }\n                                     // e[e..e]\n                                     _ => {\n-                                        let e2 = self.parse_expr();\n+                                        let e2 = self.parse_expr_res(RESTRICTION_NO_DOTS);\n                                         self.commit_expr_expecting(&*e2,\n                                             token::CloseDelim(token::Bracket));\n                                         Some(e2)\n@@ -2654,6 +2663,21 @@ impl<'a> Parser<'a> {\n                 }\n               }\n \n+              // A range expression, either `expr..expr` or `expr..`.\n+              token::DotDot if !self.restrictions.contains(RESTRICTION_NO_DOTS) => {\n+                self.bump();\n+\n+                let opt_end = if self.token.can_begin_expr() {\n+                    let end = self.parse_expr_res(RESTRICTION_NO_DOTS);\n+                    Some(end)\n+                } else {\n+                    None\n+                };\n+\n+                let hi = self.span.hi;\n+                let range = self.mk_range(e, opt_end);\n+                return self.mk_expr(lo, hi, range);\n+              }\n               _ => return e\n             }\n         }"}, {"sha": "3d53bd8aadf70a0270cf4057b54e3cfaa492d69a", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=8a357e1d87971574817a033e5467785402d5fcfb", "patch": "@@ -1759,6 +1759,13 @@ impl<'a> State<'a> {\n                 }\n                 try!(word(&mut self.s, \"]\"));\n             }\n+            ast::ExprRange(ref start, ref end) => {\n+                try!(self.print_expr(&**start));\n+                try!(word(&mut self.s, \"..\"));\n+                if let &Some(ref e) = end {\n+                    try!(self.print_expr(&**e));\n+                }\n+            }\n             ast::ExprPath(ref path) => try!(self.print_path(path, true)),\n             ast::ExprBreak(opt_ident) => {\n                 try!(word(&mut self.s, \"break\"));"}, {"sha": "4cc93467a7cc21f6044c7c83017874f7e05f570a", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a357e1d87971574817a033e5467785402d5fcfb/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=8a357e1d87971574817a033e5467785402d5fcfb", "patch": "@@ -871,6 +871,10 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             walk_expr_opt(visitor, start);\n             walk_expr_opt(visitor, end)\n         }\n+        ExprRange(ref start, ref end) => {\n+            visitor.visit_expr(&**start);\n+            walk_expr_opt(visitor, end)\n+        }\n         ExprPath(ref path) => {\n             visitor.visit_path(path, expression.id)\n         }"}]}