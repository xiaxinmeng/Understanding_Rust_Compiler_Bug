{"sha": "35b18b2725737d21a7fa97cf37d3db91cdf7aeff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YjE4YjI3MjU3MzdkMjFhN2ZhOTdjZjM3ZDNkYjkxY2RmN2FlZmY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-06-10T12:58:52Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-06-10T12:58:52Z"}, "message": "Add support for mallinfo2 on glibc Linux", "tree": {"sha": "26c01b0f5bb28810d99d81bc9dd3cfaf62d9e786", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26c01b0f5bb28810d99d81bc9dd3cfaf62d9e786"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35b18b2725737d21a7fa97cf37d3db91cdf7aeff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35b18b2725737d21a7fa97cf37d3db91cdf7aeff", "html_url": "https://github.com/rust-lang/rust/commit/35b18b2725737d21a7fa97cf37d3db91cdf7aeff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35b18b2725737d21a7fa97cf37d3db91cdf7aeff/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4da4de7cdd4a7dfe40a417b0100b83ec50d1e1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4da4de7cdd4a7dfe40a417b0100b83ec50d1e1d", "html_url": "https://github.com/rust-lang/rust/commit/f4da4de7cdd4a7dfe40a417b0100b83ec50d1e1d"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "0b0a196aeb7265a7c7d44b56dadd1a532dcb8850", "filename": "crates/profile/src/memory_usage.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/35b18b2725737d21a7fa97cf37d3db91cdf7aeff/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b18b2725737d21a7fa97cf37d3db91cdf7aeff/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs?ref=35b18b2725737d21a7fa97cf37d3db91cdf7aeff", "patch": "@@ -32,9 +32,7 @@ impl MemoryUsage {\n                     allocated: Bytes(jemalloc_ctl::stats::allocated::read().unwrap() as isize),\n                 }\n             } else if #[cfg(all(target_os = \"linux\", target_env = \"gnu\"))] {\n-                // Note: This is incredibly slow.\n-                let alloc = unsafe { libc::mallinfo() }.uordblks as isize;\n-                MemoryUsage { allocated: Bytes(alloc) }\n+                memusage_linux()\n             } else if #[cfg(windows)] {\n                 // There doesn't seem to be an API for determining heap usage, so we try to\n                 // approximate that by using the Commit Charge value.\n@@ -58,6 +56,37 @@ impl MemoryUsage {\n     }\n }\n \n+#[cfg(all(target_os = \"linux\", target_env = \"gnu\"))]\n+fn memusage_linux() -> MemoryUsage {\n+    // Linux/glibc has 2 APIs for allocator introspection that we can use: mallinfo and mallinfo2.\n+    // mallinfo uses `int` fields and cannot handle memory usage exceeding 2 GB.\n+    // mallinfo2 is very recent, so its presence needs to be detected at runtime.\n+    // Both are abysmally slow.\n+\n+    use std::ffi::CStr;\n+    use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+    static MALLINFO2: AtomicUsize = AtomicUsize::new(1);\n+\n+    let mut mallinfo2 = MALLINFO2.load(Ordering::Relaxed);\n+    if mallinfo2 == 1 {\n+        let cstr = CStr::from_bytes_with_nul(b\"mallinfo2\\0\").unwrap();\n+        mallinfo2 = unsafe { libc::dlsym(libc::RTLD_DEFAULT, cstr.as_ptr()) } as usize;\n+        // NB: races don't matter here, since they'll always store the same value\n+        MALLINFO2.store(mallinfo2, Ordering::Relaxed);\n+    }\n+\n+    if mallinfo2 == 0 {\n+        // mallinfo2 does not exist, use mallinfo.\n+        let alloc = unsafe { libc::mallinfo() }.uordblks as isize;\n+        MemoryUsage { allocated: Bytes(alloc) }\n+    } else {\n+        let mallinfo2: fn() -> libc::mallinfo2 = unsafe { std::mem::transmute(mallinfo2) };\n+        let alloc = mallinfo2().uordblks as isize;\n+        MemoryUsage { allocated: Bytes(alloc) }\n+    }\n+}\n+\n #[derive(Default, PartialEq, Eq, PartialOrd, Ord, Hash, Clone, Copy)]\n pub struct Bytes(isize);\n "}]}