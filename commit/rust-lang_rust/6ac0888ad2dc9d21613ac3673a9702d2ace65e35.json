{"sha": "6ac0888ad2dc9d21613ac3673a9702d2ace65e35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhYzA4ODhhZDJkYzlkMjE2MTNhYzM2NzNhOTcwMmQyYWNlNjVlMzU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-12T18:26:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-12T18:26:25Z"}, "message": "Rollup merge of #47185 - ritiek:ui-test-failed-output, r=nikomatsakis\n\nShow only stderr diff when a ui test fails\n\nAddresses #46826.\n\nThis PR will print the normalized output if expected text is empty otherwise it will just print the diff.\n\nShould we also show a few (actual == expected) lines above & below when displaying the diff? What about indicating line numbers as well so one can quickly check mismatch lines in .stderr file?", "tree": {"sha": "9176fd5cd446dcc021a07a2b942571278fc5f8c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9176fd5cd446dcc021a07a2b942571278fc5f8c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ac0888ad2dc9d21613ac3673a9702d2ace65e35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ac0888ad2dc9d21613ac3673a9702d2ace65e35", "html_url": "https://github.com/rust-lang/rust/commit/6ac0888ad2dc9d21613ac3673a9702d2ace65e35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ac0888ad2dc9d21613ac3673a9702d2ace65e35/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b35cb1ee93d50313abd14baab5de055f372507cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b35cb1ee93d50313abd14baab5de055f372507cd", "html_url": "https://github.com/rust-lang/rust/commit/b35cb1ee93d50313abd14baab5de055f372507cd"}, {"sha": "4054030542bf06671ba478cefbfb2aa33131e839", "url": "https://api.github.com/repos/rust-lang/rust/commits/4054030542bf06671ba478cefbfb2aa33131e839", "html_url": "https://github.com/rust-lang/rust/commit/4054030542bf06671ba478cefbfb2aa33131e839"}], "stats": {"total": 115, "additions": 106, "deletions": 9}, "files": [{"sha": "efbe5e32fcd277d93fca84de8e8fbaacf93c6c88", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 106, "deletions": 9, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/6ac0888ad2dc9d21613ac3673a9702d2ace65e35/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac0888ad2dc9d21613ac3673a9702d2ace65e35/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=6ac0888ad2dc9d21613ac3673a9702d2ace65e35", "patch": "@@ -21,6 +21,7 @@ use header::TestProps;\n use util::logv;\n use regex::Regex;\n \n+use std::collections::VecDeque;\n use std::collections::HashMap;\n use std::collections::HashSet;\n use std::env;\n@@ -48,6 +49,88 @@ pub fn dylib_env_var() -> &'static str {\n     }\n }\n \n+#[derive(Debug, PartialEq)]\n+pub enum DiffLine {\n+    Context(String),\n+    Expected(String),\n+    Resulting(String),\n+}\n+\n+#[derive(Debug, PartialEq)]\n+pub struct Mismatch {\n+    pub line_number: u32,\n+    pub lines: Vec<DiffLine>,\n+}\n+\n+impl Mismatch {\n+    fn new(line_number: u32) -> Mismatch {\n+        Mismatch {\n+            line_number: line_number,\n+            lines: Vec::new(),\n+        }\n+    }\n+}\n+\n+// Produces a diff between the expected output and actual output.\n+pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Mismatch> {\n+    let mut line_number = 1;\n+    let mut context_queue: VecDeque<&str> = VecDeque::with_capacity(context_size);\n+    let mut lines_since_mismatch = context_size + 1;\n+    let mut results = Vec::new();\n+    let mut mismatch = Mismatch::new(0);\n+\n+    for result in diff::lines(actual, expected) {\n+        match result {\n+            diff::Result::Left(str) => {\n+                if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n+                    results.push(mismatch);\n+                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n+                }\n+\n+                while let Some(line) = context_queue.pop_front() {\n+                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n+                }\n+\n+                mismatch.lines.push(DiffLine::Resulting(str.to_owned()));\n+                lines_since_mismatch = 0;\n+            }\n+            diff::Result::Right(str) => {\n+                if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n+                    results.push(mismatch);\n+                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n+                }\n+\n+                while let Some(line) = context_queue.pop_front() {\n+                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n+                }\n+\n+                mismatch.lines.push(DiffLine::Expected(str.to_owned()));\n+                line_number += 1;\n+                lines_since_mismatch = 0;\n+            }\n+            diff::Result::Both(str, _) => {\n+                if context_queue.len() >= context_size {\n+                    let _ = context_queue.pop_front();\n+                }\n+\n+                if lines_since_mismatch < context_size {\n+                    mismatch.lines.push(DiffLine::Context(str.to_owned()));\n+                } else if context_size > 0 {\n+                    context_queue.push_back(str);\n+                }\n+\n+                line_number += 1;\n+                lines_since_mismatch += 1;\n+            }\n+        }\n+    }\n+\n+    results.push(mismatch);\n+    results.remove(0);\n+\n+    results\n+}\n+\n pub fn run(config: Config, testpaths: &TestPaths) {\n     match &*config.target {\n         \"arm-linux-androideabi\" | \"armv7-linux-androideabi\" | \"aarch64-linux-android\" => {\n@@ -2720,15 +2803,29 @@ impl<'test> TestCx<'test> {\n             return 0;\n         }\n \n-        println!(\"normalized {}:\\n{}\\n\", kind, actual);\n-        println!(\"expected {}:\\n{}\\n\", kind, expected);\n-        println!(\"diff of {}:\\n\", kind);\n-\n-        for diff in diff::lines(expected, actual) {\n-            match diff {\n-                diff::Result::Left(l) => println!(\"-{}\", l),\n-                diff::Result::Both(l, _) => println!(\" {}\", l),\n-                diff::Result::Right(r) => println!(\"+{}\", r),\n+        if expected.is_empty() {\n+            println!(\"normalized {}:\\n{}\\n\", kind, actual);\n+        } else {\n+            println!(\"diff of {}:\\n\", kind);\n+            let diff_results = make_diff(expected, actual, 3);\n+            for result in diff_results {\n+                let mut line_number = result.line_number;\n+                for line in result.lines {\n+                    match line {\n+                        DiffLine::Expected(e) => {\n+                            println!(\"-\\t{}\", e);\n+                            line_number += 1;\n+                        },\n+                        DiffLine::Context(c) => {\n+                            println!(\"{}\\t{}\", line_number, c);\n+                            line_number += 1;\n+                        },\n+                        DiffLine::Resulting(r) => {\n+                            println!(\"+\\t{}\", r);\n+                        },\n+                    }\n+                }\n+                println!(\"\");\n             }\n         }\n "}]}