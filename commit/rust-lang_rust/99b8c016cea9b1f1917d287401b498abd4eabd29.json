{"sha": "99b8c016cea9b1f1917d287401b498abd4eabd29", "node_id": "C_kwDOAAsO6NoAKDk5YjhjMDE2Y2VhOWIxZjE5MTdkMjg3NDAxYjQ5OGFiZDRlYWJkMjk", "commit": {"author": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2021-10-19T21:18:13Z"}, "committer": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2021-10-19T21:18:13Z"}, "message": "Address lcnr review", "tree": {"sha": "b1e86914996552b7203494c759bd5c77b71018df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1e86914996552b7203494c759bd5c77b71018df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99b8c016cea9b1f1917d287401b498abd4eabd29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99b8c016cea9b1f1917d287401b498abd4eabd29", "html_url": "https://github.com/rust-lang/rust/commit/99b8c016cea9b1f1917d287401b498abd4eabd29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99b8c016cea9b1f1917d287401b498abd4eabd29/comments", "author": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7d99983f879696522a5c770241a2fb171071eab", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7d99983f879696522a5c770241a2fb171071eab", "html_url": "https://github.com/rust-lang/rust/commit/b7d99983f879696522a5c770241a2fb171071eab"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "2cf7b6b1d93937cf09886f70120699bedaad66b0", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99b8c016cea9b1f1917d287401b498abd4eabd29/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b8c016cea9b1f1917d287401b498abd4eabd29/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=99b8c016cea9b1f1917d287401b498abd4eabd29", "patch": "@@ -219,10 +219,12 @@ impl<'tcx> AbstractConst<'tcx> {\n     #[inline]\n     pub fn root(self, tcx: TyCtxt<'tcx>) -> Node<'tcx> {\n         let node = self.inner.last().copied().unwrap();\n-        if let Node::Leaf(leaf) = node {\n-            return Node::Leaf(leaf.subst(tcx, self.substs));\n+        match node {\n+            Node::Leaf(leaf) => Node::Leaf(leaf.subst(tcx, self.substs)),\n+            Node::Cast(kind, operand, ty) => Node::Cast(kind, operand, ty.subst(tcx, self.substs)),\n+            // Don't perform substitution on the following as they can't directly contain generic params\n+            Node::Binop(_, _, _) | Node::UnaryOp(_, _) | Node::FunctionCall(_, _) => node,\n         }\n-        node\n     }\n }\n "}]}