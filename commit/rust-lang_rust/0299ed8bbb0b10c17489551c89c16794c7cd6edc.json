{"sha": "0299ed8bbb0b10c17489551c89c16794c7cd6edc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyOTllZDhiYmIwYjEwYzE3NDg5NTUxYzg5YzE2Nzk0YzdjZDZlZGM=", "commit": {"author": {"name": "inquisitivecrystal", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2021-07-31T06:10:32Z"}, "committer": {"name": "inquisitivecrystal", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2021-08-28T07:24:30Z"}, "message": "Remove obsolete `MacroDef` variant of `OwnerNode`", "tree": {"sha": "5cd27e7aa1b6010a360a8aea5349786a2d5fae7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cd27e7aa1b6010a360a8aea5349786a2d5fae7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0299ed8bbb0b10c17489551c89c16794c7cd6edc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0299ed8bbb0b10c17489551c89c16794c7cd6edc", "html_url": "https://github.com/rust-lang/rust/commit/0299ed8bbb0b10c17489551c89c16794c7cd6edc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0299ed8bbb0b10c17489551c89c16794c7cd6edc/comments", "author": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c62fa057527fc07afabb201bb31428409ef4d8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c62fa057527fc07afabb201bb31428409ef4d8a", "html_url": "https://github.com/rust-lang/rust/commit/8c62fa057527fc07afabb201bb31428409ef4d8a"}], "stats": {"total": 49, "additions": 6, "deletions": 43}, "files": [{"sha": "a9bd83a67c9dcff2c73efbaa95ee70f1c1294195", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0299ed8bbb0b10c17489551c89c16794c7cd6edc/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0299ed8bbb0b10c17489551c89c16794c7cd6edc/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=0299ed8bbb0b10c17489551c89c16794c7cd6edc", "patch": "@@ -740,7 +740,7 @@ impl Crate<'_> {\n                 OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),\n                 OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),\n                 OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),\n-                OwnerNode::MacroDef(_) | OwnerNode::Crate(_) => {}\n+                OwnerNode::Crate(_) => {}\n             }\n         }\n     }\n@@ -755,7 +755,7 @@ impl Crate<'_> {\n             Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),\n             Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),\n             Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),\n-            Some(OwnerNode::MacroDef(_)) | Some(OwnerNode::Crate(_)) | None => {}\n+            Some(OwnerNode::Crate(_)) | None => {}\n         })\n     }\n \n@@ -2970,7 +2970,6 @@ pub enum OwnerNode<'hir> {\n     ForeignItem(&'hir ForeignItem<'hir>),\n     TraitItem(&'hir TraitItem<'hir>),\n     ImplItem(&'hir ImplItem<'hir>),\n-    MacroDef(&'hir MacroDef<'hir>),\n     Crate(&'hir Mod<'hir>),\n }\n \n@@ -2980,8 +2979,7 @@ impl<'hir> OwnerNode<'hir> {\n             OwnerNode::Item(Item { ident, .. })\n             | OwnerNode::ForeignItem(ForeignItem { ident, .. })\n             | OwnerNode::ImplItem(ImplItem { ident, .. })\n-            | OwnerNode::TraitItem(TraitItem { ident, .. })\n-            | OwnerNode::MacroDef(MacroDef { ident, .. }) => Some(*ident),\n+            | OwnerNode::TraitItem(TraitItem { ident, .. }) => Some(*ident),\n             OwnerNode::Crate(..) => None,\n         }\n     }\n@@ -2992,7 +2990,6 @@ impl<'hir> OwnerNode<'hir> {\n             | OwnerNode::ForeignItem(ForeignItem { span, .. })\n             | OwnerNode::ImplItem(ImplItem { span, .. })\n             | OwnerNode::TraitItem(TraitItem { span, .. })\n-            | OwnerNode::MacroDef(MacroDef { span, .. })\n             | OwnerNode::Crate(Mod { inner: span, .. }) => *span,\n         }\n     }\n@@ -3036,8 +3033,7 @@ impl<'hir> OwnerNode<'hir> {\n             OwnerNode::Item(Item { def_id, .. })\n             | OwnerNode::TraitItem(TraitItem { def_id, .. })\n             | OwnerNode::ImplItem(ImplItem { def_id, .. })\n-            | OwnerNode::ForeignItem(ForeignItem { def_id, .. })\n-            | OwnerNode::MacroDef(MacroDef { def_id, .. }) => *def_id,\n+            | OwnerNode::ForeignItem(ForeignItem { def_id, .. }) => *def_id,\n             OwnerNode::Crate(..) => crate::CRATE_HIR_ID.owner,\n         }\n     }\n@@ -3069,13 +3065,6 @@ impl<'hir> OwnerNode<'hir> {\n             _ => panic!(),\n         }\n     }\n-\n-    pub fn expect_macro_def(self) -> &'hir MacroDef<'hir> {\n-        match self {\n-            OwnerNode::MacroDef(n) => n,\n-            _ => panic!(),\n-        }\n-    }\n }\n \n impl<'hir> Into<OwnerNode<'hir>> for &'hir Item<'hir> {\n@@ -3102,20 +3091,13 @@ impl<'hir> Into<OwnerNode<'hir>> for &'hir TraitItem<'hir> {\n     }\n }\n \n-impl<'hir> Into<OwnerNode<'hir>> for &'hir MacroDef<'hir> {\n-    fn into(self) -> OwnerNode<'hir> {\n-        OwnerNode::MacroDef(self)\n-    }\n-}\n-\n impl<'hir> Into<Node<'hir>> for OwnerNode<'hir> {\n     fn into(self) -> Node<'hir> {\n         match self {\n             OwnerNode::Item(n) => Node::Item(n),\n             OwnerNode::ForeignItem(n) => Node::ForeignItem(n),\n             OwnerNode::ImplItem(n) => Node::ImplItem(n),\n             OwnerNode::TraitItem(n) => Node::TraitItem(n),\n-            OwnerNode::MacroDef(n) => Node::MacroDef(n),\n             OwnerNode::Crate(n) => Node::Crate(n),\n         }\n     }\n@@ -3141,7 +3123,6 @@ pub enum Node<'hir> {\n     Arm(&'hir Arm<'hir>),\n     Block(&'hir Block<'hir>),\n     Local(&'hir Local<'hir>),\n-    MacroDef(&'hir MacroDef<'hir>),\n \n     /// `Ctor` refers to the constructor of an enum variant or struct. Only tuple or unit variants\n     /// with synthesized constructors.\n@@ -3178,7 +3159,6 @@ impl<'hir> Node<'hir> {\n             | Node::ForeignItem(ForeignItem { ident, .. })\n             | Node::Field(FieldDef { ident, .. })\n             | Node::Variant(Variant { ident, .. })\n-            | Node::MacroDef(MacroDef { ident, .. })\n             | Node::Item(Item { ident, .. })\n             | Node::PathSegment(PathSegment { ident, .. }) => Some(*ident),\n             Node::Lifetime(lt) => Some(lt.name.ident()),\n@@ -3239,8 +3219,7 @@ impl<'hir> Node<'hir> {\n             Node::Item(Item { def_id, .. })\n             | Node::TraitItem(TraitItem { def_id, .. })\n             | Node::ImplItem(ImplItem { def_id, .. })\n-            | Node::ForeignItem(ForeignItem { def_id, .. })\n-            | Node::MacroDef(MacroDef { def_id, .. }) => Some(HirId::make_owner(*def_id)),\n+            | Node::ForeignItem(ForeignItem { def_id, .. }) => Some(HirId::make_owner(*def_id)),\n             Node::Field(FieldDef { hir_id, .. })\n             | Node::AnonConst(AnonConst { hir_id, .. })\n             | Node::Expr(Expr { hir_id, .. })\n@@ -3300,7 +3279,6 @@ impl<'hir> Node<'hir> {\n             Node::ForeignItem(i) => Some(OwnerNode::ForeignItem(i)),\n             Node::TraitItem(i) => Some(OwnerNode::TraitItem(i)),\n             Node::ImplItem(i) => Some(OwnerNode::ImplItem(i)),\n-            Node::MacroDef(i) => Some(OwnerNode::MacroDef(i)),\n             Node::Crate(i) => Some(OwnerNode::Crate(i)),\n             _ => None,\n         }"}, {"sha": "42e51f4bb48c74e76de9980647dd249290e57ec2", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0299ed8bbb0b10c17489551c89c16794c7cd6edc/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0299ed8bbb0b10c17489551c89c16794c7cd6edc/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=0299ed8bbb0b10c17489551c89c16794c7cd6edc", "patch": "@@ -120,7 +120,6 @@ impl<'a> State<'a> {\n             // printing.\n             Node::Ctor(..) => panic!(\"cannot print isolated Ctor\"),\n             Node::Local(a) => self.print_local_decl(&a),\n-            Node::MacroDef(_) => panic!(\"cannot print MacroDef\"),\n             Node::Crate(..) => panic!(\"cannot print Crate\"),\n         }\n     }"}, {"sha": "62d0374fb52e1a135a50e124c8810a1964da6bb0", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0299ed8bbb0b10c17489551c89c16794c7cd6edc/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0299ed8bbb0b10c17489551c89c16794c7cd6edc/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=0299ed8bbb0b10c17489551c89c16794c7cd6edc", "patch": "@@ -266,7 +266,6 @@ impl<'hir> Map<'hir> {\n                 ExprKind::Closure(.., Some(_)) => DefKind::Generator,\n                 _ => bug!(\"def_kind: unsupported node: {}\", self.node_to_string(hir_id)),\n             },\n-            Node::MacroDef(_) => DefKind::Macro(MacroKind::Bang),\n             Node::GenericParam(param) => match param.kind {\n                 GenericParamKind::Lifetime { .. } => DefKind::LifetimeParam,\n                 GenericParamKind::Type { .. } => DefKind::TyParam,\n@@ -636,8 +635,6 @@ impl<'hir> Map<'hir> {\n     /// in a module, trait, or impl.\n     pub fn get_parent_item(&self, hir_id: HirId) -> HirId {\n         if let Some((hir_id, _node)) = self.parent_owner_iter(hir_id).next() {\n-            // A MacroDef does not have children.\n-            debug_assert!(!matches!(_node, OwnerNode::MacroDef(_)));\n             hir_id\n         } else {\n             CRATE_HIR_ID\n@@ -765,13 +762,6 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn expect_macro_def(&self, id: HirId) -> &'hir MacroDef<'hir> {\n-        match self.tcx.hir_owner(id.expect_owner()) {\n-            Some(Owner { node: OwnerNode::MacroDef(macro_def) }) => macro_def,\n-            _ => bug!(\"expected macro def, found {}\", self.node_to_string(id)),\n-        }\n-    }\n-\n     pub fn expect_expr(&self, id: HirId) -> &'hir Expr<'hir> {\n         match self.find(id) {\n             Some(Node::Expr(expr)) => expr,\n@@ -791,7 +781,6 @@ impl<'hir> Map<'hir> {\n             Node::GenericParam(param) => param.name.ident().name,\n             Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,\n             Node::Ctor(..) => self.name(self.get_parent_item(id)),\n-            Node::MacroDef(md) => md.ident.name,\n             _ => return None,\n         })\n     }\n@@ -858,7 +847,6 @@ impl<'hir> Map<'hir> {\n             Node::Infer(i) => i.span,\n             Node::Visibility(v) => bug!(\"unexpected Visibility {:?}\", v),\n             Node::Local(local) => local.span,\n-            Node::MacroDef(macro_def) => macro_def.span,\n             Node::Crate(item) => item.inner,\n         };\n         Some(span)\n@@ -1109,7 +1097,6 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {\n         Some(Node::Lifetime(_)) => node_str(\"lifetime\"),\n         Some(Node::GenericParam(ref param)) => format!(\"generic_param {:?}{}\", param, id_str),\n         Some(Node::Visibility(ref vis)) => format!(\"visibility {:?}{}\", vis, id_str),\n-        Some(Node::MacroDef(_)) => format!(\"macro {}{}\", path_str(), id_str),\n         Some(Node::Crate(..)) => String::from(\"root_crate\"),\n         None => format!(\"unknown node{}\", id_str),\n     }"}, {"sha": "23f43233b79ca5906d9628acacc25c46faea16ce", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0299ed8bbb0b10c17489551c89c16794c7cd6edc/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0299ed8bbb0b10c17489551c89c16794c7cd6edc/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=0299ed8bbb0b10c17489551c89c16794c7cd6edc", "patch": "@@ -310,8 +310,7 @@ impl<'tcx> ReachableContext<'tcx> {\n             | Node::Ctor(..)\n             | Node::Field(_)\n             | Node::Ty(_)\n-            | Node::Crate(_)\n-            | Node::MacroDef(_) => {}\n+            | Node::Crate(_) => {}\n             _ => {\n                 bug!(\n                     \"found unexpected node kind in worklist: {} ({:?})\","}]}