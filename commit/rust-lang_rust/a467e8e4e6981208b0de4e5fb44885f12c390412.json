{"sha": "a467e8e4e6981208b0de4e5fb44885f12c390412", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NjdlOGU0ZTY5ODEyMDhiMGRlNGU1ZmI0NDg4NWYxMmMzOTA0MTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-20T06:33:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-20T17:22:18Z"}, "message": "Add a huge hack to allow the test runner to continue if a single task leaks\n\nThis is just until unwinding works. Adds a flag to the runtime to turn\nthe memory leak checks on task destruction into warnings instead of fatal\nerrors. I am so sorry.\n\nIssue #428", "tree": {"sha": "70b5bf413a38f3c79d1528e5aba9f38c82b4c339", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70b5bf413a38f3c79d1528e5aba9f38c82b4c339"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a467e8e4e6981208b0de4e5fb44885f12c390412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a467e8e4e6981208b0de4e5fb44885f12c390412", "html_url": "https://github.com/rust-lang/rust/commit/a467e8e4e6981208b0de4e5fb44885f12c390412", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a467e8e4e6981208b0de4e5fb44885f12c390412/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fb33008ce5bdd1e369b471bc20b6fe28c0f550e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fb33008ce5bdd1e369b471bc20b6fe28c0f550e", "html_url": "https://github.com/rust-lang/rust/commit/3fb33008ce5bdd1e369b471bc20b6fe28c0f550e"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "d39385cbb5c33b7f34f8a0734f7bc99008b8b157", "filename": "src/lib/test.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a467e8e4e6981208b0de4e5fb44885f12c390412/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a467e8e4e6981208b0de4e5fb44885f12c390412/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=a467e8e4e6981208b0de4e5fb44885f12c390412", "patch": "@@ -227,12 +227,26 @@ fn run_test(&test_desc test) -> test_result {\n     }\n }\n \n+native \"rust\" mod rustrt {\n+    fn hack_allow_leaks();\n+}\n+\n // We need to run our tests in another task in order to trap test failures.\n // But, at least currently, functions can't be used as spawn arguments so\n // we've got to treat our test functions as unsafe pointers.\n fn run_test_fn_in_task(&fn() f) -> bool {\n     fn run_task(*mutable fn() fptr) {\n+        // If this task fails we don't want that failure to propagate to the\n+        // test runner or else we couldn't keep running tests\n         task::unsupervise();\n+\n+        // FIXME (236): Hack supreme - unwinding doesn't work yet so if this\n+        // task fails memory will not be freed correctly. This turns off the\n+        // sanity checks in the runtime's memory region for the task, so that\n+        // the test runner can continue.\n+        rustrt::hack_allow_leaks();\n+\n+        // Run the test\n         (*fptr)()\n     }\n     auto fptr = ptr::addr_of(f);"}, {"sha": "0d10146a52bc8076293a6b2a6ddaf6f6bf88fe3f", "filename": "src/rt/memory_region.cpp", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a467e8e4e6981208b0de4e5fb44885f12c390412/src%2Frt%2Fmemory_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a467e8e4e6981208b0de4e5fb44885f12c390412/src%2Frt%2Fmemory_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.cpp?ref=a467e8e4e6981208b0de4e5fb44885f12c390412", "patch": "@@ -152,10 +152,21 @@ memory_region::~memory_region() {\n         }\n     }\n #endif\n-    _srv->fatal(msg, __FILE__, __LINE__, \"%d objects\", _live_allocations);\n+    if (!_hack_allow_leaks) {\n+        _srv->fatal(msg, __FILE__, __LINE__,\n+                    \"%d objects\", _live_allocations);\n+    } else {\n+        _srv->warning(msg, __FILE__, __LINE__,\n+                      \"%d objects\", _live_allocations);\n+    }\n     if (_synchronized) { _lock.unlock(); }\n }\n \n+void\n+memory_region::hack_allow_leaks() {\n+    _hack_allow_leaks = true;\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "7f19893b73ae54202143b40defda97f263875eea", "filename": "src/rt/memory_region.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a467e8e4e6981208b0de4e5fb44885f12c390412/src%2Frt%2Fmemory_region.h", "raw_url": "https://github.com/rust-lang/rust/raw/a467e8e4e6981208b0de4e5fb44885f12c390412/src%2Frt%2Fmemory_region.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.h?ref=a467e8e4e6981208b0de4e5fb44885f12c390412", "patch": "@@ -22,6 +22,7 @@ class memory_region {\n     const bool _detailed_leaks;\n     const bool _synchronized;\n     lock_and_signal _lock;\n+    bool _hack_allow_leaks;\n \n     void add_alloc();\n     void dec_alloc();\n@@ -33,6 +34,10 @@ class memory_region {\n     void *realloc(void *mem, size_t size);\n     void free(void *mem);\n     virtual ~memory_region();\n+    // FIXME (236: This is a temporary hack to allow failing tasks that leak\n+    // to not kill the entire process, which the test runner needs. Please\n+    // kill with prejudice once unwinding works.\n+    void hack_allow_leaks();\n };\n \n inline void *operator new(size_t size, memory_region &region) {"}, {"sha": "f35a7a2e2cf450ca80704a7154631b1fbcee8b4d", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a467e8e4e6981208b0de4e5fb44885f12c390412/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a467e8e4e6981208b0de4e5fb44885f12c390412/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=a467e8e4e6981208b0de4e5fb44885f12c390412", "patch": "@@ -459,6 +459,13 @@ debug_opaque(rust_task *task, type_desc *t, uint8_t *front)\n     }\n }\n \n+extern \"C\" CDECL void\n+hack_allow_leaks(rust_task *task)\n+{\n+    LOG(task, stdlib, \"hack_allow_leaks\");\n+    task->local_region.hack_allow_leaks();\n+}\n+\n struct rust_box {\n     RUST_REFCOUNTED(rust_box)\n "}, {"sha": "f5b6e8c01effa065b18c4efab746cf16726acac8", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a467e8e4e6981208b0de4e5fb44885f12c390412/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/a467e8e4e6981208b0de4e5fb44885f12c390412/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=a467e8e4e6981208b0de4e5fb44885f12c390412", "patch": "@@ -10,6 +10,7 @@ debug_trap\n debug_tydesc\n do_gc\n get_time\n+hack_allow_leaks\n ivec_copy_from_buf\n ivec_copy_from_buf_shared\n ivec_on_heap"}]}