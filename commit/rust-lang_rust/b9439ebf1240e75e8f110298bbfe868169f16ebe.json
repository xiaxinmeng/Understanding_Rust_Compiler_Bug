{"sha": "b9439ebf1240e75e8f110298bbfe868169f16ebe", "node_id": "C_kwDOAAsO6NoAKGI5NDM5ZWJmMTI0MGU3NWU4ZjExMDI5OGJiZmU4NjgxNjlmMTZlYmU", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-29T05:52:57Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-29T06:06:25Z"}, "message": "Use verbose suggestions for mutability errors", "tree": {"sha": "5cbfb892d5ad9a10ed9598bd75e779f4c45b4e1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cbfb892d5ad9a10ed9598bd75e779f4c45b4e1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9439ebf1240e75e8f110298bbfe868169f16ebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9439ebf1240e75e8f110298bbfe868169f16ebe", "html_url": "https://github.com/rust-lang/rust/commit/b9439ebf1240e75e8f110298bbfe868169f16ebe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9439ebf1240e75e8f110298bbfe868169f16ebe/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92c1937a90e5b6f20fa6e87016d6869da363972e", "url": "https://api.github.com/repos/rust-lang/rust/commits/92c1937a90e5b6f20fa6e87016d6869da363972e", "html_url": "https://github.com/rust-lang/rust/commit/92c1937a90e5b6f20fa6e87016d6869da363972e"}], "stats": {"total": 519, "additions": 338, "deletions": 181}, "files": [{"sha": "05c718d5802051df69b0441426a1db5a74e46d1b", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -333,7 +333,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 let local_decl = &self.body.local_decls[local];\n                 assert_eq!(local_decl.mutability, Mutability::Not);\n \n-                err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n+                err.span_label(span, format!(\"cannot {act}\"));\n                 err.span_suggestion(\n                     local_decl.source_info.span,\n                     \"consider changing this to be mutable\",\n@@ -357,7 +357,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                 let captured_place = &self.upvars[upvar_index.index()].place;\n \n-                err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n+                err.span_label(span, format!(\"cannot {act}\"));\n \n                 let upvar_hir_id = captured_place.get_root_variable();\n \n@@ -397,7 +397,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     .span_to_snippet(span)\n                     .map_or(false, |snippet| snippet.starts_with(\"&mut \")) =>\n             {\n-                err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n+                err.span_label(span, format!(\"cannot {act}\"));\n                 err.span_suggestion(\n                     span,\n                     \"try removing `&mut` here\",\n@@ -409,7 +409,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             PlaceRef { local, projection: [ProjectionElem::Deref] }\n                 if self.body.local_decls[local].is_ref_for_guard() =>\n             {\n-                err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n+                err.span_label(span, format!(\"cannot {act}\"));\n                 err.note(\n                     \"variables bound in patterns are immutable until the end of the pattern guard\",\n                 );\n@@ -537,7 +537,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                             Some((true, err_help_span, suggested_code)) => {\n                                 let (is_trait_sig, local_trait) = self.is_error_in_trait(local);\n                                 if !is_trait_sig {\n-                                    err.span_suggestion(\n+                                    err.span_suggestion_verbose(\n                                         err_help_span,\n                                         &format!(\n                                             \"consider changing this to be a mutable {pointer_desc}\"\n@@ -546,7 +546,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                         Applicability::MachineApplicable,\n                                     );\n                                 } else if let Some(x) = local_trait {\n-                                    err.span_suggestion(\n+                                    err.span_suggestion_verbose(\n                                         x,\n                                         &format!(\n                                             \"consider changing that to be a mutable {pointer_desc}\"\n@@ -569,24 +569,15 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         err.span_label(\n                             span,\n                             format!(\n-                                \"`{NAME}` is a `{SIGIL}` {DESC}, \\\n-                                so the data it refers to cannot be {ACTED_ON}\",\n-                                NAME = name,\n-                                SIGIL = pointer_sigil,\n-                                DESC = pointer_desc,\n-                                ACTED_ON = acted_on\n+                                \"`{name}` is a `{pointer_sigil}` {pointer_desc}, \\\n+                                 so the data it refers to cannot be {acted_on}\",\n                             ),\n                         );\n                     }\n                     _ => {\n                         err.span_label(\n                             span,\n-                            format!(\n-                                \"cannot {ACT} through `{SIGIL}` {DESC}\",\n-                                ACT = act,\n-                                SIGIL = pointer_sigil,\n-                                DESC = pointer_desc\n-                            ),\n+                            format!(\"cannot {act} through `{pointer_sigil}` {pointer_desc}\"),\n                         );\n                     }\n                 }\n@@ -605,13 +596,13 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     Some(BorrowedContentSource::OverloadedDeref(ty)) => {\n                         err.help(&format!(\n                             \"trait `DerefMut` is required to modify through a dereference, \\\n-                                but it is not implemented for `{ty}`\",\n+                             but it is not implemented for `{ty}`\",\n                         ));\n                     }\n                     Some(BorrowedContentSource::OverloadedIndex(ty)) => {\n                         err.help(&format!(\n                             \"trait `IndexMut` is required to modify indexed content, \\\n-                                but it is not implemented for `{ty}`\",\n+                             but it is not implemented for `{ty}`\",\n                         ));\n                         self.suggest_map_index_mut_alternatives(ty, &mut err, span);\n                     }\n@@ -620,7 +611,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             }\n \n             _ => {\n-                err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n+                err.span_label(span, format!(\"cannot {act}\"));\n             }\n         }\n "}, {"sha": "5b040d3e4d31db2839ff0ec87580506e2e73e30c", "filename": "src/test/ui/array-slice-vec/slice-mut-2.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-mut-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-mut-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fslice-mut-2.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,11 +1,13 @@\n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/slice-mut-2.rs:7:18\n    |\n-LL |     let x: &[isize] = &[1, 2, 3, 4, 5];\n-   |                       ---------------- help: consider changing this to be a mutable reference: `&mut [1, 2, 3, 4, 5]`\n-...\n LL |     let _ = &mut x[2..4];\n    |                  ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     let x: &[isize] = &mut [1, 2, 3, 4, 5];\n+   |                       ~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "4cc1d821d0a06e6e245041ddbc8f49ae80f9d950", "filename": "src/test/ui/borrowck/borrow-raw-address-of-deref-mutability.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,20 +1,24 @@\n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrow-raw-address-of-deref-mutability.rs:8:13\n    |\n-LL |     let x = &0;\n-   |             -- help: consider changing this to be a mutable reference: `&mut 0`\n-LL |\n LL |     let q = &raw mut *x;\n    |             ^^^^^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     let x = &mut 0;\n+   |             ~~~~~~\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `*const` pointer\n   --> $DIR/borrow-raw-address-of-deref-mutability.rs:14:13\n    |\n-LL |     let x = &0 as *const i32;\n-   |             -- help: consider changing this to be a mutable pointer: `&mut 0`\n-LL |\n LL |     let q = &raw mut *x;\n    |             ^^^^^^^^^^^ `x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable pointer\n+   |\n+LL |     let x = &mut 0 as *const i32;\n+   |             ~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "312720898473a9717d84ce3e1eedfe39ad786a38", "filename": "src/test/ui/borrowck/borrowck-access-permissions.stderr", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -25,28 +25,35 @@ LL |         let _y1 = &mut *box_x;\n error[E0596]: cannot borrow `*ref_x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-access-permissions.rs:30:19\n    |\n-LL |         let ref_x = &x;\n-   |                     -- help: consider changing this to be a mutable reference: `&mut x`\n-...\n LL |         let _y1 = &mut *ref_x;\n    |                   ^^^^^^^^^^^ `ref_x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |         let ref_x = &mut x;\n+   |                     ~~~~~~\n \n error[E0596]: cannot borrow `*ptr_x` as mutable, as it is behind a `*const` pointer\n   --> $DIR/borrowck-access-permissions.rs:39:23\n    |\n-LL |         let ptr_x : *const _ = &x;\n-   |                                -- help: consider changing this to be a mutable pointer: `&mut x`\n-...\n LL |             let _y1 = &mut *ptr_x;\n    |                       ^^^^^^^^^^^ `ptr_x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable pointer\n+   |\n+LL |         let ptr_x : *const _ = &mut x;\n+   |                                ~~~~~~\n \n error[E0596]: cannot borrow `*foo_ref.f` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-access-permissions.rs:48:18\n    |\n-LL |         let foo_ref = &foo;\n-   |                       ---- help: consider changing this to be a mutable reference: `&mut foo`\n LL |         let _y = &mut *foo_ref.f;\n    |                  ^^^^^^^^^^^^^^^ `foo_ref` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |         let foo_ref = &mut foo;\n+   |                       ~~~~~~~~\n \n error: aborting due to 6 previous errors\n "}, {"sha": "cbacc87a0e85845e7cbce3efccbe71c093dd02dd", "filename": "src/test/ui/borrowck/borrowck-assign-to-andmut-in-aliasable-loc.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,18 +1,24 @@\n error[E0594]: cannot assign to `*s.pointer`, which is behind a `&` reference\n   --> $DIR/borrowck-assign-to-andmut-in-aliasable-loc.rs:9:5\n    |\n-LL | fn a(s: &S) {\n-   |         -- help: consider changing this to be a mutable reference: `&mut S<'_>`\n LL |     *s.pointer += 1;\n    |     ^^^^^^^^^^^^^^^ `s` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn a(s: &mut S<'_>) {\n+   |         ~~~~~~~~~~\n \n error[E0594]: cannot assign to `*s.pointer`, which is behind a `&` reference\n   --> $DIR/borrowck-assign-to-andmut-in-aliasable-loc.rs:17:5\n    |\n-LL | fn c(s: & &mut S) {\n-   |         -------- help: consider changing this to be a mutable reference: `&mut &mut S<'_>`\n LL |     *s.pointer += 1;\n    |     ^^^^^^^^^^^^^^^ `s` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn c(s: &mut &mut S<'_>) {\n+   |         ~~~~~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ce9f7aa050a0aca647a80a16cfc7471afa4784f4", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -20,10 +20,13 @@ LL |     **t1 = 22;\n error[E0596]: cannot borrow `**t0` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs:19:26\n    |\n-LL | fn foo4(t0: & &mut isize) {\n-   |             ------------ help: consider changing this to be a mutable reference: `&mut &mut isize`\n LL |     let x:  &mut isize = &mut **t0;\n    |                          ^^^^^^^^^ `t0` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn foo4(t0: &mut &mut isize) {\n+   |             ~~~~~~~~~~~~~~~\n \n error: aborting due to 3 previous errors\n "}, {"sha": "42a55b7a854ba407b8670ea37dde36b86c61302f", "filename": "src/test/ui/borrowck/borrowck-issue-14498.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,10 +1,13 @@\n error[E0594]: cannot assign to `***p`, which is behind a `&` reference\n   --> $DIR/borrowck-issue-14498.rs:16:5\n    |\n-LL |     let p = &y;\n-   |             -- help: consider changing this to be a mutable reference: `&mut y`\n LL |     ***p = 2;\n    |     ^^^^^^^^ `p` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     let p = &mut y;\n+   |             ~~~~~~\n \n error[E0506]: cannot assign to `**y` because it is borrowed\n   --> $DIR/borrowck-issue-14498.rs:25:5"}, {"sha": "d9590e446c756b73ca4042777f310563728bc9b2", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-mut.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -105,10 +105,13 @@ LL |     use_imm(_bar1);\n error[E0596]: cannot borrow `foo.bar1` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-reborrow-from-mut.rs:88:17\n    |\n-LL | fn borrow_mut_from_imm(foo: &Foo) {\n-   |                             ---- help: consider changing this to be a mutable reference: `&mut Foo`\n LL |     let _bar1 = &mut foo.bar1;\n    |                 ^^^^^^^^^^^^^ `foo` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn borrow_mut_from_imm(foo: &mut Foo) {\n+   |                             ~~~~~~~~\n \n error: aborting due to 11 previous errors\n "}, {"sha": "7da7dba68ab7aaf537a8a24ff100797e264f3f5c", "filename": "src/test/ui/borrowck/issue-85765.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -10,11 +10,13 @@ LL |     rofl.push(Vec::new());\n error[E0594]: cannot assign to `*r`, which is behind a `&` reference\n   --> $DIR/issue-85765.rs:12:5\n    |\n-LL |     let r = &mutvar;\n-   |             ------- help: consider changing this to be a mutable reference: `&mut mutvar`\n-LL |\n LL |     *r = 0;\n    |     ^^^^^^ `r` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     let r = &mut mutvar;\n+   |             ~~~~~~~~~~~\n \n error[E0594]: cannot assign to `*x`, which is behind a `&` reference\n   --> $DIR/issue-85765.rs:19:5"}, {"sha": "afa76594f0b5e71de8641ee857acda79a6dcd633", "filename": "src/test/ui/borrowck/issue-93093.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fborrowck%2Fissue-93093.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fborrowck%2Fissue-93093.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-93093.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,11 +1,13 @@\n error[E0594]: cannot assign to `self.foo`, which is behind a `&` reference\n   --> $DIR/issue-93093.rs:8:9\n    |\n-LL |     async fn bar(&self) {\n-   |                  ----- help: consider changing this to be a mutable reference: `&mut self`\n-LL |\n LL |         self.foo += 1;\n    |         ^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     async fn bar(&mut self) {\n+   |                  ~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "7a00ace3bb220331d78982298c826e2fc3f4e100", "filename": "src/test/ui/borrowck/mutability-errors.stderr", "status": "modified", "additions": 40, "deletions": 22, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,37 +1,46 @@\n error[E0594]: cannot assign to `*x`, which is behind a `&` reference\n   --> $DIR/mutability-errors.rs:9:5\n    |\n-LL | fn named_ref(x: &(i32,)) {\n-   |                 ------- help: consider changing this to be a mutable reference: `&mut (i32,)`\n LL |     *x = (1,);\n    |     ^^^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn named_ref(x: &mut (i32,)) {\n+   |                 ~~~~~~~~~~~\n \n error[E0594]: cannot assign to `x.0`, which is behind a `&` reference\n   --> $DIR/mutability-errors.rs:10:5\n    |\n-LL | fn named_ref(x: &(i32,)) {\n-   |                 ------- help: consider changing this to be a mutable reference: `&mut (i32,)`\n-LL |     *x = (1,);\n LL |     x.0 = 1;\n    |     ^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn named_ref(x: &mut (i32,)) {\n+   |                 ~~~~~~~~~~~\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/mutability-errors.rs:11:5\n    |\n-LL | fn named_ref(x: &(i32,)) {\n-   |                 ------- help: consider changing this to be a mutable reference: `&mut (i32,)`\n-...\n LL |     &mut *x;\n    |     ^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn named_ref(x: &mut (i32,)) {\n+   |                 ~~~~~~~~~~~\n \n error[E0596]: cannot borrow `x.0` as mutable, as it is behind a `&` reference\n   --> $DIR/mutability-errors.rs:12:5\n    |\n-LL | fn named_ref(x: &(i32,)) {\n-   |                 ------- help: consider changing this to be a mutable reference: `&mut (i32,)`\n-...\n LL |     &mut x.0;\n    |     ^^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn named_ref(x: &mut (i32,)) {\n+   |                 ~~~~~~~~~~~\n \n error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/mutability-errors.rs:16:5\n@@ -60,37 +69,46 @@ LL |     &mut f().0;\n error[E0594]: cannot assign to `*x`, which is behind a `*const` pointer\n   --> $DIR/mutability-errors.rs:23:5\n    |\n-LL | unsafe fn named_ptr(x: *const (i32,)) {\n-   |                        ------------- help: consider changing this to be a mutable pointer: `*mut (i32,)`\n LL |     *x = (1,);\n    |     ^^^^^^^^^ `x` is a `*const` pointer, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable pointer\n+   |\n+LL | unsafe fn named_ptr(x: *mut (i32,)) {\n+   |                        ~~~~~~~~~~~\n \n error[E0594]: cannot assign to `x.0`, which is behind a `*const` pointer\n   --> $DIR/mutability-errors.rs:24:5\n    |\n-LL | unsafe fn named_ptr(x: *const (i32,)) {\n-   |                        ------------- help: consider changing this to be a mutable pointer: `*mut (i32,)`\n-LL |     *x = (1,);\n LL |     (*x).0 = 1;\n    |     ^^^^^^^^^^ `x` is a `*const` pointer, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable pointer\n+   |\n+LL | unsafe fn named_ptr(x: *mut (i32,)) {\n+   |                        ~~~~~~~~~~~\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `*const` pointer\n   --> $DIR/mutability-errors.rs:25:5\n    |\n-LL | unsafe fn named_ptr(x: *const (i32,)) {\n-   |                        ------------- help: consider changing this to be a mutable pointer: `*mut (i32,)`\n-...\n LL |     &mut *x;\n    |     ^^^^^^^ `x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable pointer\n+   |\n+LL | unsafe fn named_ptr(x: *mut (i32,)) {\n+   |                        ~~~~~~~~~~~\n \n error[E0596]: cannot borrow `x.0` as mutable, as it is behind a `*const` pointer\n   --> $DIR/mutability-errors.rs:26:5\n    |\n-LL | unsafe fn named_ptr(x: *const (i32,)) {\n-   |                        ------------- help: consider changing this to be a mutable pointer: `*mut (i32,)`\n-...\n LL |     &mut (*x).0;\n    |     ^^^^^^^^^^^ `x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable pointer\n+   |\n+LL | unsafe fn named_ptr(x: *mut (i32,)) {\n+   |                        ~~~~~~~~~~~\n \n error[E0594]: cannot assign to data in a `*const` pointer\n   --> $DIR/mutability-errors.rs:30:5"}, {"sha": "95f36fc042c4fd8668725c98a2cc28a1560f4efb", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/mut_ref.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,14 +1,16 @@\n error[E0596]: cannot borrow `**ref_mref_x` as mutable, as it is behind a `&` reference\n   --> $DIR/mut_ref.rs:12:13\n    |\n-LL |     let ref_mref_x = &mref_x;\n-   |                      ------- help: consider changing this to be a mutable reference: `&mut mref_x`\n-LL |\n LL |     let c = || {\n    |             ^^ `ref_mref_x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n LL |\n LL |         **ref_mref_x = y;\n    |         ------------ mutable borrow occurs due to use of `**ref_mref_x` in closure\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     let ref_mref_x = &mut mref_x;\n+   |                      ~~~~~~~~~~~\n \n error[E0596]: cannot borrow `**mref_ref_x` as mutable, as it is behind a `&` reference\n   --> $DIR/mut_ref.rs:26:13"}, {"sha": "74fb1c2eca30771bce01691c7cd03514baa9b7d9", "filename": "src/test/ui/did_you_mean/issue-38147-1.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,10 +1,13 @@\n error[E0596]: cannot borrow `*self.s` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-38147-1.rs:17:9\n    |\n-LL |     fn f(&self) {\n-   |          ----- help: consider changing this to be a mutable reference: `&mut self`\n LL |         self.s.push('x');\n    |         ^^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     fn f(&mut self) {\n+   |          ~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "d3339989361694c840542ea437695f992cc189bb", "filename": "src/test/ui/did_you_mean/issue-38147-4.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,10 +1,13 @@\n error[E0596]: cannot borrow `*f.s` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-38147-4.rs:6:5\n    |\n-LL | fn f(x: usize, f: &Foo) {\n-   |                   ---- help: consider changing this to be a mutable reference: `&mut Foo<'_>`\n LL |     f.s.push('x');\n    |     ^^^^^^^^^^^^^ `f` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn f(x: usize, f: &mut Foo<'_>) {\n+   |                   ~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "b16309af0418d8a48e4853183a1146944924b9f9", "filename": "src/test/ui/did_you_mean/issue-39544.stderr", "status": "modified", "additions": 45, "deletions": 22, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -9,69 +9,90 @@ LL |     let _ = &mut z.x;\n error[E0596]: cannot borrow `self.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:16:17\n    |\n-LL |     fn foo<'z>(&'z self) {\n-   |                -------- help: consider changing this to be a mutable reference: `&'z mut self`\n LL |         let _ = &mut self.x;\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     fn foo<'z>(&'z mut self) {\n+   |                ~~~~~~~~~~~~\n \n error[E0596]: cannot borrow `self.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:20:17\n    |\n-LL |     fn foo1(&self, other: &Z) {\n-   |             ----- help: consider changing this to be a mutable reference: `&mut self`\n LL |         let _ = &mut self.x;\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     fn foo1(&mut self, other: &Z) {\n+   |             ~~~~~~~~~\n \n error[E0596]: cannot borrow `other.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:21:17\n    |\n-LL |     fn foo1(&self, other: &Z) {\n-   |                           -- help: consider changing this to be a mutable reference: `&mut Z`\n-LL |         let _ = &mut self.x;\n LL |         let _ = &mut other.x;\n    |                 ^^^^^^^^^^^^ `other` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     fn foo1(&self, other: &mut Z) {\n+   |                           ~~~~~~\n \n error[E0596]: cannot borrow `self.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:25:17\n    |\n-LL |     fn foo2<'a>(&'a self, other: &Z) {\n-   |                 -------- help: consider changing this to be a mutable reference: `&'a mut self`\n LL |         let _ = &mut self.x;\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     fn foo2<'a>(&'a mut self, other: &Z) {\n+   |                 ~~~~~~~~~~~~\n \n error[E0596]: cannot borrow `other.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:26:17\n    |\n-LL |     fn foo2<'a>(&'a self, other: &Z) {\n-   |                                  -- help: consider changing this to be a mutable reference: `&mut Z`\n-LL |         let _ = &mut self.x;\n LL |         let _ = &mut other.x;\n    |                 ^^^^^^^^^^^^ `other` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     fn foo2<'a>(&'a self, other: &mut Z) {\n+   |                                  ~~~~~~\n \n error[E0596]: cannot borrow `self.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:30:17\n    |\n-LL |     fn foo3<'a>(self: &'a Self, other: &Z) {\n-   |                       -------- help: consider changing this to be a mutable reference: `&'a mut Self`\n LL |         let _ = &mut self.x;\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     fn foo3<'a>(self: &'a mut Self, other: &Z) {\n+   |                       ~~~~~~~~~~~~\n \n error[E0596]: cannot borrow `other.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:31:17\n    |\n-LL |     fn foo3<'a>(self: &'a Self, other: &Z) {\n-   |                                        -- help: consider changing this to be a mutable reference: `&mut Z`\n-LL |         let _ = &mut self.x;\n LL |         let _ = &mut other.x;\n    |                 ^^^^^^^^^^^^ `other` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     fn foo3<'a>(self: &'a Self, other: &mut Z) {\n+   |                                        ~~~~~~\n \n error[E0596]: cannot borrow `other.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:35:17\n    |\n-LL |     fn foo4(other: &Z) {\n-   |                    -- help: consider changing this to be a mutable reference: `&mut Z`\n LL |         let _ = &mut other.x;\n    |                 ^^^^^^^^^^^^ `other` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     fn foo4(other: &mut Z) {\n+   |                    ~~~~~~\n \n error[E0596]: cannot borrow `z.x` as mutable, as `z` is not declared as mutable\n   --> $DIR/issue-39544.rs:41:13\n@@ -84,11 +105,13 @@ LL |     let _ = &mut z.x;\n error[E0596]: cannot borrow `w.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:42:13\n    |\n-LL | pub fn with_arg(z: Z, w: &Z) {\n-   |                          -- help: consider changing this to be a mutable reference: `&mut Z`\n-LL |     let _ = &mut z.x;\n LL |     let _ = &mut w.x;\n    |             ^^^^^^^^ `w` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | pub fn with_arg(z: Z, w: &mut Z) {\n+   |                          ~~~~~~\n \n error[E0594]: cannot assign to `*x.0`, which is behind a `&` reference\n   --> $DIR/issue-39544.rs:48:5"}, {"sha": "aadd698891edc7a5f9218c3491bdab65ac4cb407", "filename": "src/test/ui/did_you_mean/issue-40823.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,10 +1,13 @@\n error[E0596]: cannot borrow `*buf` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-40823.rs:3:5\n    |\n-LL |     let mut buf = &[1, 2, 3, 4];\n-   |                   ------------- help: consider changing this to be a mutable reference: `&mut [1, 2, 3, 4]`\n LL |     buf.iter_mut();\n    |     ^^^^^^^^^^^^^^ `buf` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     let mut buf = &mut [1, 2, 3, 4];\n+   |                   ~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "51c4c92addf2856b413d36a2a10864f2b3756abb", "filename": "src/test/ui/error-codes/E0389.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Ferror-codes%2FE0389.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Ferror-codes%2FE0389.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0389.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,10 +1,13 @@\n error[E0594]: cannot assign to `fancy_ref.num`, which is behind a `&` reference\n   --> $DIR/E0389.rs:8:5\n    |\n-LL |     let fancy_ref = &(&mut fancy);\n-   |                     ------------- help: consider changing this to be a mutable reference: `&mut (&mut fancy)`\n LL |     fancy_ref.num = 6;\n    |     ^^^^^^^^^^^^^^^^^ `fancy_ref` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     let fancy_ref = &mut (&mut fancy);\n+   |                     ~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "c4e61e719539280b1bc96b9e87fae6ae4c180ffd", "filename": "src/test/ui/issues/issue-51515.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fissues%2Fissue-51515.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fissues%2Fissue-51515.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51515.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,11 +1,13 @@\n error[E0594]: cannot assign to `*foo`, which is behind a `&` reference\n   --> $DIR/issue-51515.rs:5:5\n    |\n-LL |     let foo = &16;\n-   |               --- help: consider changing this to be a mutable reference: `&mut 16`\n-...\n LL |     *foo = 32;\n    |     ^^^^^^^^^ `foo` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     let foo = &mut 16;\n+   |               ~~~~~~~\n \n error[E0594]: cannot assign to `*bar`, which is behind a `&` reference\n   --> $DIR/issue-51515.rs:8:5"}, {"sha": "5fcc338557c58c9e9c01a25b1f0ad5184d2d4ef6", "filename": "src/test/ui/issues/issue-61623.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fissues%2Fissue-61623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fissues%2Fissue-61623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61623.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,10 +1,13 @@\n error[E0596]: cannot borrow `*x.1` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-61623.rs:6:19\n    |\n-LL | fn f3<'a>(x: &'a ((), &'a mut ())) {\n-   |              -------------------- help: consider changing this to be a mutable reference: `&'a mut ((), &'a mut ())`\n LL |     f2(|| x.0, f1(x.1))\n    |                   ^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn f3<'a>(x: &'a mut ((), &'a mut ())) {\n+   |              ~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "c53c6ea302c6716feb0f9ad40a3f62df4a29e5c4", "filename": "src/test/ui/mut/mutable-class-fields-2.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields-2.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,10 +1,13 @@\n error[E0594]: cannot assign to `self.how_hungry`, which is behind a `&` reference\n   --> $DIR/mutable-class-fields-2.rs:9:5\n    |\n-LL |   pub fn eat(&self) {\n-   |              ----- help: consider changing this to be a mutable reference: `&mut self`\n LL |     self.how_hungry -= 5;\n    |     ^^^^^^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |   pub fn eat(&mut self) {\n+   |              ~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "c780451dfa9355d9a74f2ce326c1b5474fcbcfc6", "filename": "src/test/ui/nll/issue-47388.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-47388.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,10 +1,13 @@\n error[E0594]: cannot assign to `fancy_ref.num`, which is behind a `&` reference\n   --> $DIR/issue-47388.rs:8:5\n    |\n-LL |     let fancy_ref = &(&mut fancy);\n-   |                     ------------- help: consider changing this to be a mutable reference: `&mut (&mut fancy)`\n LL |     fancy_ref.num = 6;\n    |     ^^^^^^^^^^^^^^^^^ `fancy_ref` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     let fancy_ref = &mut (&mut fancy);\n+   |                     ~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "03d8acc81886a3f1cc4ce3735554946adbd2ffcf", "filename": "src/test/ui/nll/issue-51244.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fnll%2Fissue-51244.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fnll%2Fissue-51244.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51244.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,10 +1,13 @@\n error[E0594]: cannot assign to `*my_ref`, which is behind a `&` reference\n   --> $DIR/issue-51244.rs:3:5\n    |\n-LL |     let ref my_ref @ _ = 0;\n-   |         ---------- help: consider changing this to be a mutable reference: `ref mut my_ref`\n LL |     *my_ref = 0;\n    |     ^^^^^^^^^^^ `my_ref` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     let ref mut my_ref @ _ = 0;\n+   |         ~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "31f40d8252ed6a40745dc26e2606729a84cf5a8b", "filename": "src/test/ui/nll/issue-57989.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fnll%2Fissue-57989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fnll%2Fissue-57989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57989.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,11 +1,13 @@\n error[E0594]: cannot assign to `*x`, which is behind a `&` reference\n   --> $DIR/issue-57989.rs:5:5\n    |\n-LL | fn f(x: &i32) {\n-   |         ---- help: consider changing this to be a mutable reference: `&mut i32`\n-LL |     let g = &x;\n LL |     *x = 0;\n    |     ^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn f(x: &mut i32) {\n+   |         ~~~~~~~~\n \n error[E0506]: cannot assign to `*x` because it is borrowed\n   --> $DIR/issue-57989.rs:5:5"}, {"sha": "1b93267b397714cf694a084d0b7a3da0100c90dd", "filename": "src/test/ui/pattern/move-ref-patterns/borrowck-move-ref-pattern.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -104,20 +104,24 @@ LL |     *_x0 = U;\n error[E0594]: cannot assign to `*_x0`, which is behind a `&` reference\n   --> $DIR/borrowck-move-ref-pattern.rs:26:5\n    |\n-LL |     let (ref _x0, _x1, ref _x2, ..) = tup;\n-   |          ------- help: consider changing this to be a mutable reference: `ref mut _x0`\n-...\n LL |     *_x0 = U;\n    |     ^^^^^^^^ `_x0` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     let (ref mut _x0, _x1, ref _x2, ..) = tup;\n+   |          ~~~~~~~~~~~\n \n error[E0594]: cannot assign to `*_x2`, which is behind a `&` reference\n   --> $DIR/borrowck-move-ref-pattern.rs:27:5\n    |\n-LL |     let (ref _x0, _x1, ref _x2, ..) = tup;\n-   |                        ------- help: consider changing this to be a mutable reference: `ref mut _x2`\n-...\n LL |     *_x2 = U;\n    |     ^^^^^^^^ `_x2` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     let (ref _x0, _x1, ref mut _x2, ..) = tup;\n+   |                        ~~~~~~~~~~~\n \n error[E0382]: use of moved value: `tup.1`\n   --> $DIR/borrowck-move-ref-pattern.rs:28:10"}, {"sha": "20330c92325e4f15516311658ebf2cee121005d9", "filename": "src/test/ui/span/borrowck-borrow-overloaded-auto-deref-mut.stderr", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -9,10 +9,13 @@ LL |     let __isize = &mut x.y;\n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:65:10\n    |\n-LL | fn deref_extend_mut_field1(x: &Own<Point>) -> &mut isize {\n-   |                               ----------- help: consider changing this to be a mutable reference: `&mut Own<Point>`\n LL |     &mut x.y\n    |          ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn deref_extend_mut_field1(x: &mut Own<Point>) -> &mut isize {\n+   |                               ~~~~~~~~~~~~~~~\n \n error[E0499]: cannot borrow `*x` as mutable more than once at a time\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:78:19\n@@ -35,10 +38,13 @@ LL |     x.y = 3;\n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:92:5\n    |\n-LL | fn assign_field2<'a>(x: &'a Own<Point>) {\n-   |                         -------------- help: consider changing this to be a mutable reference: `&'a mut Own<Point>`\n LL |     x.y = 3;\n    |     ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn assign_field2<'a>(x: &'a mut Own<Point>) {\n+   |                         ~~~~~~~~~~~~~~~~~~\n \n error[E0499]: cannot borrow `*x` as mutable more than once at a time\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:101:5\n@@ -61,10 +67,13 @@ LL |     x.set(0, 0);\n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:121:5\n    |\n-LL | fn deref_extend_mut_method1(x: &Own<Point>) -> &mut isize {\n-   |                                ----------- help: consider changing this to be a mutable reference: `&mut Own<Point>`\n LL |     x.y_mut()\n    |     ^^^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn deref_extend_mut_method1(x: &mut Own<Point>) -> &mut isize {\n+   |                                ~~~~~~~~~~~~~~~\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:129:6\n@@ -77,10 +86,13 @@ LL |     *x.y_mut() = 3;\n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:133:6\n    |\n-LL | fn assign_method2<'a>(x: &'a Own<Point>) {\n-   |                          -------------- help: consider changing this to be a mutable reference: `&'a mut Own<Point>`\n LL |     *x.y_mut() = 3;\n    |      ^^^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn assign_method2<'a>(x: &'a mut Own<Point>) {\n+   |                          ~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 10 previous errors\n "}, {"sha": "6d34909e43b965d84d37b7cb6c7aaedf1d63c548", "filename": "src/test/ui/span/borrowck-borrow-overloaded-deref-mut.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -9,10 +9,13 @@ LL |     let __isize = &mut *x;\n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:41:11\n    |\n-LL | fn deref_extend_mut1<'a>(x: &'a Own<isize>) -> &'a mut isize {\n-   |                             -------------- help: consider changing this to be a mutable reference: `&'a mut Own<isize>`\n LL |     &mut **x\n    |           ^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn deref_extend_mut1<'a>(x: &'a mut Own<isize>) -> &'a mut isize {\n+   |                             ~~~~~~~~~~~~~~~~~~\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:49:6\n@@ -25,10 +28,13 @@ LL |     *x = 3;\n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:53:6\n    |\n-LL | fn assign2<'a>(x: &'a Own<isize>) {\n-   |                   -------------- help: consider changing this to be a mutable reference: `&'a mut Own<isize>`\n LL |     **x = 3;\n    |      ^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn assign2<'a>(x: &'a mut Own<isize>) {\n+   |                   ~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 4 previous errors\n "}, {"sha": "48b42bc78253f59842a5fe00a4416b3bea2e24b4", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -13,18 +13,24 @@ LL |         f((Box::new(|| {})))\n error[E0596]: cannot borrow `*f` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:25:5\n    |\n-LL | fn test2<F>(f: &F) where F: FnMut() {\n-   |                -- help: consider changing this to be a mutable reference: `&mut F`\n LL |     (*f)();\n    |     ^^^^ `f` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn test2<F>(f: &mut F) where F: FnMut() {\n+   |                ~~~~~~\n \n error[E0596]: cannot borrow `f.f` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:34:5\n    |\n-LL | fn test4(f: &Test) {\n-   |             ----- help: consider changing this to be a mutable reference: `&mut Test<'_>`\n LL |     f.f.call_mut(())\n    |     ^^^^^^^^^^^^^^^^ `f` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn test4(f: &mut Test<'_>) {\n+   |             ~~~~~~~~~~~~~\n \n error[E0507]: cannot move out of `f`, a captured variable in an `FnMut` closure\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:57:13"}, {"sha": "2a842f5a2a9f8f6ab6688a7572e38a4a791d6585", "filename": "src/test/ui/span/borrowck-call-method-from-mut-aliasable.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,11 +1,13 @@\n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-call-method-from-mut-aliasable.rs:17:5\n    |\n-LL | fn b(x: &Foo) {\n-   |         ---- help: consider changing this to be a mutable reference: `&mut Foo`\n-LL |     x.f();\n LL |     x.h();\n    |     ^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn b(x: &mut Foo) {\n+   |         ~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "1df19deb12f6b59955b0d862f5a258a3960b64c5", "filename": "src/test/ui/span/borrowck-fn-in-const-b.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,10 +1,13 @@\n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-fn-in-const-b.rs:7:9\n    |\n-LL |     fn broken(x: &Vec<String>) {\n-   |                  ------------ help: consider changing this to be a mutable reference: `&mut Vec<String>`\n LL |         x.push(format!(\"this is broken\"));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     fn broken(x: &mut Vec<String>) {\n+   |                  ~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "e63ca95eff01d6160c78d12ee8cbdfd37ca270a6", "filename": "src/test/ui/span/borrowck-object-mutability.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,11 +1,13 @@\n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-object-mutability.rs:8:5\n    |\n-LL | fn borrowed_receiver(x: &dyn Foo) {\n-   |                         -------- help: consider changing this to be a mutable reference: `&mut dyn Foo`\n-LL |     x.borrowed();\n LL |     x.borrowed_mut();\n    |     ^^^^^^^^^^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn borrowed_receiver(x: &mut dyn Foo) {\n+   |                         ~~~~~~~~~~~~\n \n error[E0596]: cannot borrow `*x` as mutable, as `x` is not declared as mutable\n   --> $DIR/borrowck-object-mutability.rs:18:5"}, {"sha": "96ce4d5bc6c338f83ee658b0f77f3c32279618c9", "filename": "src/test/ui/span/mut-arg-hint.stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,26 +1,35 @@\n error[E0596]: cannot borrow `*a` as mutable, as it is behind a `&` reference\n   --> $DIR/mut-arg-hint.rs:3:9\n    |\n-LL |     fn foo(mut a: &String) {\n-   |                   ------- help: consider changing this to be a mutable reference: `&mut String`\n LL |         a.push_str(\"bar\");\n    |         ^^^^^^^^^^^^^^^^^ `a` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     fn foo(mut a: &mut String) {\n+   |                   ~~~~~~~~~~~\n \n error[E0596]: cannot borrow `*a` as mutable, as it is behind a `&` reference\n   --> $DIR/mut-arg-hint.rs:8:5\n    |\n-LL | pub fn foo<'a>(mut a: &'a String) {\n-   |                       ---------- help: consider changing this to be a mutable reference: `&'a mut String`\n LL |     a.push_str(\"foo\");\n    |     ^^^^^^^^^^^^^^^^^ `a` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | pub fn foo<'a>(mut a: &'a mut String) {\n+   |                       ~~~~~~~~~~~~~~\n \n error[E0596]: cannot borrow `*a` as mutable, as it is behind a `&` reference\n   --> $DIR/mut-arg-hint.rs:15:9\n    |\n-LL |     pub fn foo(mut a: &String) {\n-   |                       ------- help: consider changing this to be a mutable reference: `&mut String`\n LL |         a.push_str(\"foo\");\n    |         ^^^^^^^^^^^^^^^^^ `a` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     pub fn foo(mut a: &mut String) {\n+   |                       ~~~~~~~~~~~\n \n error: aborting due to 3 previous errors\n "}, {"sha": "de35aa5b186b5af82a94790bdb4f6876b814c367", "filename": "src/test/ui/suggestions/issue-68049-2.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-2.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,20 +1,24 @@\n error[E0594]: cannot assign to `*input`, which is behind a `&` reference\n   --> $DIR/issue-68049-2.rs:9:7\n    |\n-LL |   fn example(&self, input: &i32); // should suggest here\n-   |                            ---- help: consider changing that to be a mutable reference: `&mut i32`\n-...\n LL |       *input = self.0;\n    |       ^^^^^^^^^^^^^^^ `input` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing that to be a mutable reference\n+   |\n+LL |   fn example(&self, input: &mut i32); // should suggest here\n+   |                            ~~~~~~~~\n \n error[E0594]: cannot assign to `self.0`, which is behind a `&` reference\n   --> $DIR/issue-68049-2.rs:17:5\n    |\n-LL |   fn example(&self, input: &i32); // should suggest here\n-   |              ----- help: consider changing that to be a mutable reference: `&mut self`\n-...\n LL |     self.0 += *input;\n    |     ^^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing that to be a mutable reference\n+   |\n+LL |   fn example(&mut self, input: &i32); // should suggest here\n+   |              ~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7973759bf5ec7f188259867284dd4c673cadef1a", "filename": "src/test/ui/suggestions/suggest-ref-mut.stderr", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-mut.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,37 +1,46 @@\n error[E0594]: cannot assign to `self.0`, which is behind a `&` reference\n   --> $DIR/suggest-ref-mut.rs:7:9\n    |\n-LL |     fn zap(&self) {\n-   |            ----- help: consider changing this to be a mutable reference: `&mut self`\n-...\n LL |         self.0 = 32;\n    |         ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     fn zap(&mut self) {\n+   |            ~~~~~~~~~\n \n error[E0594]: cannot assign to `*foo`, which is behind a `&` reference\n   --> $DIR/suggest-ref-mut.rs:16:5\n    |\n-LL |     let ref foo = 16;\n-   |         ------- help: consider changing this to be a mutable reference: `ref mut foo`\n-...\n LL |     *foo = 32;\n    |     ^^^^^^^^^ `foo` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     let ref mut foo = 16;\n+   |         ~~~~~~~~~~~\n \n error[E0594]: cannot assign to `*bar`, which is behind a `&` reference\n   --> $DIR/suggest-ref-mut.rs:21:9\n    |\n-LL |     if let Some(ref bar) = Some(16) {\n-   |                 ------- help: consider changing this to be a mutable reference: `ref mut bar`\n-...\n LL |         *bar = 32;\n    |         ^^^^^^^^^ `bar` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |     if let Some(ref mut bar) = Some(16) {\n+   |                 ~~~~~~~~~~~\n \n error[E0594]: cannot assign to `*quo`, which is behind a `&` reference\n   --> $DIR/suggest-ref-mut.rs:25:22\n    |\n LL |         ref quo => { *quo = 32; },\n-   |         -------      ^^^^^^^^^ `quo` is a `&` reference, so the data it refers to cannot be written\n-   |         |\n-   |         help: consider changing this to be a mutable reference: `ref mut quo`\n+   |                      ^^^^^^^^^ `quo` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL |         ref mut quo => { *quo = 32; },\n+   |         ~~~~~~~~~~~\n \n error: aborting due to 4 previous errors\n "}, {"sha": "39b60c3119727116463b0e356b6bc2f0b8e78414", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-copy-reborrow.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy-reborrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9439ebf1240e75e8f110298bbfe868169f16ebe/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy-reborrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy-reborrow.stderr?ref=b9439ebf1240e75e8f110298bbfe868169f16ebe", "patch": "@@ -1,18 +1,24 @@\n error[E0596]: cannot borrow `**t` as mutable, as it is behind a `&` reference\n   --> $DIR/trivial-bounds-inconsistent-copy-reborrow.rs:6:5\n    |\n-LL | fn reborrow_mut<'a>(t: &'a &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n-   |                        --------------- help: consider changing this to be a mutable reference: `&'a mut &'a mut i32`\n LL |     *t\n    |     ^^ `t` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn reborrow_mut<'a>(t: &'a mut &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n+   |                        ~~~~~~~~~~~~~~~~~~~\n \n error[E0596]: cannot borrow `**t` as mutable, as it is behind a `&` reference\n   --> $DIR/trivial-bounds-inconsistent-copy-reborrow.rs:10:6\n    |\n-LL | fn copy_reborrow_mut<'a>(t: &'a &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n-   |                             --------------- help: consider changing this to be a mutable reference: `&'a mut &'a mut i32`\n LL |     {*t}\n    |      ^^ `t` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this to be a mutable reference\n+   |\n+LL | fn copy_reborrow_mut<'a>(t: &'a mut &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n+   |                             ~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}]}