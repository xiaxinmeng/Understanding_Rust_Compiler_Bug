{"sha": "13cd022060316146474915664a9e019906a2c79a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzY2QwMjIwNjAzMTYxNDY0NzQ5MTU2NjRhOWUwMTk5MDZhMmM3OWE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-06-26T12:57:26Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-06-28T11:59:12Z"}, "message": "Shift mir-dataflow from `rustc_borrowck` to `rustc_mir` crate.\n\nTurn `elaborate_drops` and `rustc_peek` implementations into MIR\npasses that also live in `rustc_mir` crate.\n\nRewire things so `rustc_driver` uses the `ElaborateDrops` from\n`rustc_mir` crate.", "tree": {"sha": "d91b80ce9390364456000a26f2e9109104983583", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d91b80ce9390364456000a26f2e9109104983583"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13cd022060316146474915664a9e019906a2c79a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13cd022060316146474915664a9e019906a2c79a", "html_url": "https://github.com/rust-lang/rust/commit/13cd022060316146474915664a9e019906a2c79a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13cd022060316146474915664a9e019906a2c79a/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b52a1162eff2469c0da88300577863e5cc0c78f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b52a1162eff2469c0da88300577863e5cc0c78f", "html_url": "https://github.com/rust-lang/rust/commit/6b52a1162eff2469c0da88300577863e5cc0c78f"}], "stats": {"total": 384, "additions": 178, "deletions": 206}, "files": [{"sha": "3be7c43cab9388c654b1355134a105b1002793e9", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=13cd022060316146474915664a9e019906a2c79a", "patch": "@@ -18,8 +18,6 @@ pub use self::bckerr_code::*;\n pub use self::AliasableViolationKind::*;\n pub use self::MovedValueUseKind::*;\n \n-pub use self::mir::elaborate_drops::ElaborateDrops;\n-\n use self::InteriorKind::*;\n \n use rustc::hir::map as hir_map;\n@@ -55,8 +53,6 @@ pub mod gather_loans;\n \n pub mod move_data;\n \n-mod mir;\n-\n #[derive(Clone, Copy)]\n pub struct LoanDataFlowOperator;\n \n@@ -100,26 +96,21 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId) {\n     }\n \n     let body_id = tcx.hir.body_owned_by(owner_id);\n-    let attributes = tcx.get_attrs(owner_def_id);\n     let tables = tcx.typeck_tables_of(owner_def_id);\n     let region_maps = tcx.region_maps(owner_def_id);\n     let mut bccx = &mut BorrowckCtxt { tcx, tables, region_maps, owner_def_id };\n \n     let body = bccx.tcx.hir.body(body_id);\n \n-    if bccx.tcx.has_attr(owner_def_id, \"rustc_mir_borrowck\") {\n-        mir::borrowck_mir(bccx, owner_id, &attributes);\n-    } else {\n-        // Eventually, borrowck will always read the MIR, but at the\n-        // moment we do not. So, for now, we always force MIR to be\n-        // constructed for a given fn, since this may result in errors\n-        // being reported and we want that to happen.\n-        //\n-        // Note that `mir_validated` is a \"stealable\" result; the\n-        // thief, `optimized_mir()`, forces borrowck, so we know that\n-        // is not yet stolen.\n-        tcx.mir_validated(owner_def_id).borrow();\n-    }\n+    // Eventually, borrowck will always read the MIR, but at the\n+    // moment we do not. So, for now, we always force MIR to be\n+    // constructed for a given fn, since this may result in errors\n+    // being reported and we want that to happen.\n+    //\n+    // Note that `mir_validated` is a \"stealable\" result; the\n+    // thief, `optimized_mir()`, forces borrowck, so we know that\n+    // is not yet stolen.\n+    tcx.mir_validated(owner_def_id).borrow();\n \n     let cfg = cfg::CFG::new(bccx.tcx, &body);\n     let AnalysisData { all_loans,"}, {"sha": "a2b1e3c26637dbd3876a7eccbb6bd3ce96ae9671", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=13cd022060316146474915664a9e019906a2c79a", "patch": "@@ -21,7 +21,6 @@\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(associated_consts)]\n-#![feature(nonzero)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n@@ -39,7 +38,7 @@ extern crate core; // for NonZero\n \n pub use borrowck::check_crate;\n pub use borrowck::build_borrowck_dataflow_data_for_fn;\n-pub use borrowck::{AnalysisData, BorrowckCtxt, ElaborateDrops};\n+pub use borrowck::{AnalysisData, BorrowckCtxt};\n \n // NB: This module needs to be declared first so diagnostics are\n // registered before they are used."}, {"sha": "98278949d51fd43ebe6ed8dec2d0bd4ce4d7200a", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=13cd022060316146474915664a9e019906a2c79a", "patch": "@@ -920,6 +920,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     // What we need to do constant evaluation.\n     passes.push_pass(MIR_CONST, mir::transform::simplify::SimplifyCfg::new(\"initial\"));\n     passes.push_pass(MIR_CONST, mir::transform::type_check::TypeckMir);\n+    passes.push_pass(MIR_CONST, mir::transform::rustc_peek::SanityCheck);\n \n     // What we need to run borrowck etc.\n     passes.push_pass(MIR_VALIDATED, mir::transform::qualify_consts::QualifyAndPromoteConstants);\n@@ -934,7 +935,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     // From here on out, regions are gone.\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::erase_regions::EraseRegions);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::add_call_guards::AddCallGuards);\n-    passes.push_pass(MIR_OPTIMIZED, borrowck::ElaborateDrops);\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::elaborate_drops::ElaborateDrops);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::no_landing_pads::NoLandingPads);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::simplify::SimplifyCfg::new(\"elaborate-drops\"));\n "}, {"sha": "daafbecc5dfa3ba0d96642d125ac6ba5bd081b1f", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "renamed", "additions": 21, "deletions": 127, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=13cd022060316146474915664a9e019906a2c79a", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,33 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use borrowck::BorrowckCtxt;\n-\n use syntax::ast::{self, MetaItem};\n use syntax_pos::DUMMY_SP;\n \n-use rustc::mir::{self, BasicBlock, BasicBlockData, Mir, Statement, Terminator, Location};\n+\n+use rustc::mir::{self, Mir, BasicBlock, Location};\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n-use rustc_mir::util::elaborate_drops::DropFlagState;\n-use rustc_data_structures::indexed_set::{IdxSet, IdxSetBuf};\n-\n-mod abs_domain;\n-pub mod elaborate_drops;\n-mod dataflow;\n-mod gather_moves;\n-// mod graphviz;\n-\n-use self::dataflow::{BitDenotation};\n-use self::dataflow::{DataflowOperator};\n-use self::dataflow::{Dataflow, DataflowAnalysis, DataflowResults};\n-use self::dataflow::{MaybeInitializedLvals, MaybeUninitializedLvals};\n-use self::dataflow::{DefinitelyInitializedLvals};\n-use self::gather_moves::{HasMoveData, MoveData, MovePathIndex, LookupResult};\n+use util::elaborate_drops::DropFlagState;\n+use rustc_data_structures::indexed_set::{IdxSet};\n \n use std::fmt;\n \n-fn has_rustc_mir_with(attrs: &[ast::Attribute], name: &str) -> Option<MetaItem> {\n+use super::{Dataflow, DataflowBuilder, DataflowAnalysis};\n+use super::{BitDenotation, DataflowOperator, DataflowResults};\n+use super::indexes::MovePathIndex;\n+use super::move_paths::{MoveData, LookupResult};\n+\n+pub(crate) fn has_rustc_mir_with(attrs: &[ast::Attribute], name: &str) -> Option<MetaItem> {\n     for attr in attrs {\n         if attr.check_name(\"rustc_mir\") {\n             let items = attr.meta_item_list();\n@@ -50,69 +41,11 @@ fn has_rustc_mir_with(attrs: &[ast::Attribute], name: &str) -> Option<MetaItem>\n }\n \n pub struct MoveDataParamEnv<'tcx> {\n-    move_data: MoveData<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n+    pub(crate) move_data: MoveData<'tcx>,\n+    pub(crate) param_env: ty::ParamEnv<'tcx>,\n }\n \n-pub fn borrowck_mir(bcx: &mut BorrowckCtxt,\n-                    id: ast::NodeId,\n-                    attributes: &[ast::Attribute]) {\n-    let tcx = bcx.tcx;\n-    let def_id = tcx.hir.local_def_id(id);\n-    debug!(\"borrowck_mir({:?}) UNIMPLEMENTED\", def_id);\n-\n-    // It is safe for us to borrow `mir_validated()`: `optimized_mir`\n-    // steals it, but it forces the `borrowck` query.\n-    let mir = &tcx.mir_validated(def_id).borrow();\n-\n-    let param_env = tcx.param_env(def_id);\n-    let move_data = MoveData::gather_moves(mir, tcx, param_env);\n-    let mdpe = MoveDataParamEnv { move_data: move_data, param_env: param_env };\n-    let dead_unwinds = IdxSetBuf::new_empty(mir.basic_blocks().len());\n-    let flow_inits =\n-        do_dataflow(tcx, mir, id, attributes, &dead_unwinds,\n-                    MaybeInitializedLvals::new(tcx, mir, &mdpe),\n-                    |bd, i| &bd.move_data().move_paths[i]);\n-    let flow_uninits =\n-        do_dataflow(tcx, mir, id, attributes, &dead_unwinds,\n-                    MaybeUninitializedLvals::new(tcx, mir, &mdpe),\n-                    |bd, i| &bd.move_data().move_paths[i]);\n-    let flow_def_inits =\n-        do_dataflow(tcx, mir, id, attributes, &dead_unwinds,\n-                    DefinitelyInitializedLvals::new(tcx, mir, &mdpe),\n-                    |bd, i| &bd.move_data().move_paths[i]);\n-\n-    if has_rustc_mir_with(attributes, \"rustc_peek_maybe_init\").is_some() {\n-        dataflow::sanity_check_via_rustc_peek(bcx.tcx, mir, id, attributes, &flow_inits);\n-    }\n-    if has_rustc_mir_with(attributes, \"rustc_peek_maybe_uninit\").is_some() {\n-        dataflow::sanity_check_via_rustc_peek(bcx.tcx, mir, id, attributes, &flow_uninits);\n-    }\n-    if has_rustc_mir_with(attributes, \"rustc_peek_definite_init\").is_some() {\n-        dataflow::sanity_check_via_rustc_peek(bcx.tcx, mir, id, attributes, &flow_def_inits);\n-    }\n-\n-    if has_rustc_mir_with(attributes, \"stop_after_dataflow\").is_some() {\n-        bcx.tcx.sess.fatal(\"stop_after_dataflow ended compilation\");\n-    }\n-\n-    let mut mbcx = MirBorrowckCtxt {\n-        bcx: bcx,\n-        mir: mir,\n-        node_id: id,\n-        move_data: &mdpe.move_data,\n-        flow_inits: flow_inits,\n-        flow_uninits: flow_uninits,\n-    };\n-\n-    for bb in mir.basic_blocks().indices() {\n-        mbcx.process_basic_block(bb);\n-    }\n-\n-    debug!(\"borrowck_mir done\");\n-}\n-\n-fn do_dataflow<'a, 'tcx, BD, P>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+pub(crate) fn do_dataflow<'a, 'tcx, BD, P>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 mir: &Mir<'tcx>,\n                                 node_id: ast::NodeId,\n                                 attributes: &[ast::Attribute],\n@@ -142,7 +75,7 @@ fn do_dataflow<'a, 'tcx, BD, P>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let print_postflow_to =\n         name_found(tcx.sess, attributes, \"borrowck_graphviz_postflow\");\n \n-    let mut mbcx = MirBorrowckCtxtPreDataflow {\n+    let mut mbcx = DataflowBuilder {\n         node_id: node_id,\n         print_preflow_to: print_preflow_to,\n         print_postflow_to: print_postflow_to,\n@@ -153,46 +86,7 @@ fn do_dataflow<'a, 'tcx, BD, P>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mbcx.flow_state.results()\n }\n \n-\n-pub struct MirBorrowckCtxtPreDataflow<'a, 'tcx: 'a, BD> where BD: BitDenotation\n-{\n-    node_id: ast::NodeId,\n-    flow_state: DataflowAnalysis<'a, 'tcx, BD>,\n-    print_preflow_to: Option<String>,\n-    print_postflow_to: Option<String>,\n-}\n-\n-#[allow(dead_code)]\n-pub struct MirBorrowckCtxt<'b, 'a: 'b, 'tcx: 'a> {\n-    bcx: &'b mut BorrowckCtxt<'a, 'tcx>,\n-    mir: &'b Mir<'tcx>,\n-    node_id: ast::NodeId,\n-    move_data: &'b MoveData<'tcx>,\n-    flow_inits: DataflowResults<MaybeInitializedLvals<'b, 'tcx>>,\n-    flow_uninits: DataflowResults<MaybeUninitializedLvals<'b, 'tcx>>\n-}\n-\n-impl<'b, 'a: 'b, 'tcx: 'a> MirBorrowckCtxt<'b, 'a, 'tcx> {\n-    fn process_basic_block(&mut self, bb: BasicBlock) {\n-        let BasicBlockData { ref statements, ref terminator, is_cleanup: _ } =\n-            self.mir[bb];\n-        for stmt in statements {\n-            self.process_statement(bb, stmt);\n-        }\n-\n-        self.process_terminator(bb, terminator);\n-    }\n-\n-    fn process_statement(&mut self, bb: BasicBlock, stmt: &Statement<'tcx>) {\n-        debug!(\"MirBorrowckCtxt::process_statement({:?}, {:?}\", bb, stmt);\n-    }\n-\n-    fn process_terminator(&mut self, bb: BasicBlock, term: &Option<Terminator<'tcx>>) {\n-        debug!(\"MirBorrowckCtxt::process_terminator({:?}, {:?})\", bb, term);\n-    }\n-}\n-\n-fn move_path_children_matching<'tcx, F>(move_data: &MoveData<'tcx>,\n+pub fn move_path_children_matching<'tcx, F>(move_data: &MoveData<'tcx>,\n                                         path: MovePathIndex,\n                                         mut cond: F)\n                                         -> Option<MovePathIndex>\n@@ -253,7 +147,7 @@ fn lvalue_contents_drop_state_cannot_differ<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx\n     }\n }\n \n-fn on_lookup_result_bits<'a, 'tcx, F>(\n+pub(crate) fn on_lookup_result_bits<'a, 'tcx, F>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir: &Mir<'tcx>,\n     move_data: &MoveData<'tcx>,\n@@ -271,7 +165,7 @@ fn on_lookup_result_bits<'a, 'tcx, F>(\n     }\n }\n \n-fn on_all_children_bits<'a, 'tcx, F>(\n+pub(crate) fn on_all_children_bits<'a, 'tcx, F>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir: &Mir<'tcx>,\n     move_data: &MoveData<'tcx>,\n@@ -312,7 +206,7 @@ fn on_all_children_bits<'a, 'tcx, F>(\n     on_all_children_bits(tcx, mir, move_data, move_path_index, &mut each_child);\n }\n \n-fn on_all_drop_children_bits<'a, 'tcx, F>(\n+pub(crate) fn on_all_drop_children_bits<'a, 'tcx, F>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir: &Mir<'tcx>,\n     ctxt: &MoveDataParamEnv<'tcx>,\n@@ -333,7 +227,7 @@ fn on_all_drop_children_bits<'a, 'tcx, F>(\n     })\n }\n \n-fn drop_flag_effects_for_function_entry<'a, 'tcx, F>(\n+pub(crate) fn drop_flag_effects_for_function_entry<'a, 'tcx, F>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir: &Mir<'tcx>,\n     ctxt: &MoveDataParamEnv<'tcx>,\n@@ -350,7 +244,7 @@ fn drop_flag_effects_for_function_entry<'a, 'tcx, F>(\n     }\n }\n \n-fn drop_flag_effects_for_location<'a, 'tcx, F>(\n+pub(crate) fn drop_flag_effects_for_location<'a, 'tcx, F>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir: &Mir<'tcx>,\n     ctxt: &MoveDataParamEnv<'tcx>,", "previous_filename": "src/librustc_borrowck/borrowck/mir/mod.rs"}, {"sha": "e6d77aa2686af345839169226078bdc7e9f3d0f5", "filename": "src/librustc_mir/dataflow/graphviz.rs", "status": "renamed", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs?ref=13cd022060316146474915664a9e019906a2c79a", "patch": "@@ -15,7 +15,6 @@ use rustc::mir::{BasicBlock, Mir};\n use rustc_data_structures::bitslice::bits_to_string;\n use rustc_data_structures::indexed_set::{IdxSet};\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc_mir::util as mir_util;\n \n use dot;\n use dot::IntoCow;\n@@ -28,8 +27,10 @@ use std::marker::PhantomData;\n use std::mem;\n use std::path::Path;\n \n-use super::super::MirBorrowckCtxtPreDataflow;\n+use util;\n+\n use super::{BitDenotation, DataflowState};\n+use super::DataflowBuilder;\n \n impl<O: BitDenotation> DataflowState<O> {\n     fn each_bit<F>(&self, words: &IdxSet<O::Idx>, mut f: F)\n@@ -86,7 +87,7 @@ pub trait MirWithFlowState<'tcx> {\n     fn flow_state(&self) -> &DataflowState<Self::BD>;\n }\n \n-impl<'a, 'tcx: 'a, BD> MirWithFlowState<'tcx> for MirBorrowckCtxtPreDataflow<'a, 'tcx, BD>\n+impl<'a, 'tcx: 'a, BD> MirWithFlowState<'tcx> for DataflowBuilder<'a, 'tcx, BD>\n     where 'tcx: 'a, BD: BitDenotation\n {\n     type BD = BD;\n@@ -103,8 +104,8 @@ struct Graph<'a, 'tcx, MWF:'a, P> where\n     render_idx: P,\n }\n \n-pub fn print_borrowck_graph_to<'a, 'tcx, BD, P>(\n-    mbcx: &MirBorrowckCtxtPreDataflow<'a, 'tcx, BD>,\n+pub(crate) fn print_borrowck_graph_to<'a, 'tcx, BD, P>(\n+    mbcx: &DataflowBuilder<'a, 'tcx, BD>,\n     path: &Path,\n     render_idx: P)\n     -> io::Result<()>\n@@ -220,7 +221,7 @@ impl<'a, 'tcx, MWF, P> dot::Labeller<'a> for Graph<'a, 'tcx, MWF, P>\n             }\n             Ok(())\n         }\n-        mir_util::write_graphviz_node_label(\n+        util::write_graphviz_node_label(\n             *n, self.mbcx.mir(), &mut v, 4,\n             |w| {\n                 let flow = self.mbcx.flow_state();", "previous_filename": "src/librustc_borrowck/borrowck/mir/dataflow/graphviz.rs"}, {"sha": "97c996dea68f6c07cc6078cd1711111fe0557b71", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "renamed", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=13cd022060316146474915664a9e019906a2c79a", "patch": "@@ -8,25 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//! Dataflow analyses are built upon some interpretation of the\n+//! bitvectors attached to each basic block, represented via a\n+//! zero-sized structure.\n+\n use rustc::ty::TyCtxt;\n use rustc::mir::{self, Mir, Location};\n use rustc_data_structures::bitslice::BitSlice; // adds set_bit/get_bit to &[usize] bitvector rep.\n use rustc_data_structures::bitslice::{BitwiseOperator};\n use rustc_data_structures::indexed_set::{IdxSet};\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc_mir::util::elaborate_drops::DropFlagState;\n \n-use super::super::gather_moves::{HasMoveData, MoveData, MoveOutIndex, MovePathIndex};\n-use super::super::MoveDataParamEnv;\n-use super::super::drop_flag_effects_for_function_entry;\n-use super::super::drop_flag_effects_for_location;\n-use super::super::on_lookup_result_bits;\n+use super::MoveDataParamEnv;\n+use util::elaborate_drops::DropFlagState;\n \n+use super::move_paths::{HasMoveData, MoveData, MoveOutIndex, MovePathIndex};\n use super::{BitDenotation, BlockSets, DataflowOperator};\n \n-// Dataflow analyses are built upon some interpretation of the\n-// bitvectors attached to each basic block, represented via a\n-// zero-sized structure.\n+use super::drop_flag_effects_for_function_entry;\n+use super::drop_flag_effects_for_location;\n+use super::on_lookup_result_bits;\n \n /// `MaybeInitializedLvals` tracks all l-values that might be\n /// initialized upon reaching a particular point in the control flow\n@@ -219,6 +220,16 @@ pub struct MovingOutStatements<'a, 'tcx: 'a> {\n     mdpe: &'a MoveDataParamEnv<'tcx>,\n }\n \n+impl<'a, 'tcx: 'a> MovingOutStatements<'a, 'tcx> {\n+    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+               mir: &'a Mir<'tcx>,\n+               mdpe: &'a MoveDataParamEnv<'tcx>)\n+               -> Self\n+    {\n+        MovingOutStatements { tcx: tcx, mir: mir, mdpe: mdpe }\n+    }\n+}\n+\n impl<'a, 'tcx> HasMoveData<'tcx> for MovingOutStatements<'a, 'tcx> {\n     fn move_data(&self) -> &MoveData<'tcx> { &self.mdpe.move_data }\n }", "previous_filename": "src/librustc_borrowck/borrowck/mir/dataflow/impls.rs"}, {"sha": "d7ad9f9c09aef820ea7b5a0dcb48c1353bda1ac4", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "renamed", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=13cd022060316146474915664a9e019906a2c79a", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use syntax::ast;\n+\n use rustc_data_structures::indexed_set::{IdxSet, IdxSetBuf};\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::bitslice::{bitwise, BitwiseOperator};\n \n-use rustc::ty::TyCtxt;\n+use rustc::ty::{TyCtxt};\n use rustc::mir::{self, Mir};\n \n use std::fmt::Debug;\n@@ -21,21 +23,31 @@ use std::mem;\n use std::path::PathBuf;\n use std::usize;\n \n-use super::MirBorrowckCtxtPreDataflow;\n-\n-pub use self::sanity_check::sanity_check_via_rustc_peek;\n pub use self::impls::{MaybeInitializedLvals, MaybeUninitializedLvals};\n pub use self::impls::{DefinitelyInitializedLvals, MovingOutStatements};\n \n+pub(crate) use self::drop_flag_effects::*;\n+\n+mod drop_flag_effects;\n mod graphviz;\n-mod sanity_check;\n mod impls;\n+pub mod move_paths;\n+\n+pub(crate) use self::move_paths::indexes;\n+\n+pub(crate) struct DataflowBuilder<'a, 'tcx: 'a, BD> where BD: BitDenotation\n+{\n+    node_id: ast::NodeId,\n+    flow_state: DataflowAnalysis<'a, 'tcx, BD>,\n+    print_preflow_to: Option<String>,\n+    print_postflow_to: Option<String>,\n+}\n \n pub trait Dataflow<BD: BitDenotation> {\n     fn dataflow<P>(&mut self, p: P) where P: Fn(&BD, BD::Idx) -> &Debug;\n }\n \n-impl<'a, 'tcx: 'a, BD> Dataflow<BD> for MirBorrowckCtxtPreDataflow<'a, 'tcx, BD>\n+impl<'a, 'tcx: 'a, BD> Dataflow<BD> for DataflowBuilder<'a, 'tcx, BD>\n     where BD: BitDenotation + DataflowOperator\n {\n     fn dataflow<P>(&mut self, p: P) where P: Fn(&BD, BD::Idx) -> &Debug {\n@@ -135,7 +147,7 @@ fn dataflow_path(context: &str, prepost: &str, path: &str) -> PathBuf {\n     path\n }\n \n-impl<'a, 'tcx: 'a, BD> MirBorrowckCtxtPreDataflow<'a, 'tcx, BD>\n+impl<'a, 'tcx: 'a, BD> DataflowBuilder<'a, 'tcx, BD>\n     where BD: BitDenotation\n {\n     fn pre_dataflow_instrumentation<P>(&self, p: P) -> io::Result<()>\n@@ -195,7 +207,7 @@ impl<'a, 'tcx: 'a, O> DataflowAnalysis<'a, 'tcx, O>\n     pub fn mir(&self) -> &'a Mir<'tcx> { self.mir }\n }\n \n-pub struct DataflowResults<O>(DataflowState<O>) where O: BitDenotation;\n+pub struct DataflowResults<O>(pub(crate) DataflowState<O>) where O: BitDenotation;\n \n impl<O: BitDenotation> DataflowResults<O> {\n     pub fn sets(&self) -> &AllSets<O::Idx> {\n@@ -213,7 +225,7 @@ pub struct DataflowState<O: BitDenotation>\n     pub sets: AllSets<O::Idx>,\n \n     /// operator used to initialize, combine, and interpret bits.\n-    operator: O,\n+    pub(crate) operator: O,\n }\n \n #[derive(Debug)]\n@@ -240,9 +252,9 @@ pub struct AllSets<E: Idx> {\n }\n \n pub struct BlockSets<'a, E: Idx> {\n-    on_entry: &'a mut IdxSet<E>,\n-    gen_set: &'a mut IdxSet<E>,\n-    kill_set: &'a mut IdxSet<E>,\n+    pub(crate) on_entry: &'a mut IdxSet<E>,\n+    pub(crate) gen_set: &'a mut IdxSet<E>,\n+    pub(crate) kill_set: &'a mut IdxSet<E>,\n }\n \n impl<'a, E:Idx> BlockSets<'a, E> {", "previous_filename": "src/librustc_borrowck/borrowck/mir/dataflow/mod.rs"}, {"sha": "5e61c2ec7a292b588a727f33d05c560b74339dcd", "filename": "src/librustc_mir/dataflow/move_paths/abs_domain.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs?ref=13cd022060316146474915664a9e019906a2c79a", "previous_filename": "src/librustc_borrowck/borrowck/mir/abs_domain.rs"}, {"sha": "d7ed0938e886a00e0ed71dd3c4f46cb1c89e87d5", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "renamed", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=13cd022060316146474915664a9e019906a2c79a", "patch": "@@ -21,14 +21,16 @@ use std::fmt;\n use std::mem;\n use std::ops::{Index, IndexMut};\n \n-use super::abs_domain::{AbstractElem, Lift};\n+use self::abs_domain::{AbstractElem, Lift};\n+\n+mod abs_domain;\n \n // This submodule holds some newtype'd Index wrappers that are using\n // NonZero to ensure that Option<Index> occupies only a single word.\n // They are in a submodule to impose privacy restrictions; namely, to\n // ensure that other code does not accidentally access `index.0`\n // (which is likely to yield a subtle off-by-one error).\n-mod indexes {\n+pub(crate) mod indexes {\n     use std::fmt;\n     use core::nonzero::NonZero;\n     use rustc_data_structures::indexed_vec::Idx;\n@@ -65,7 +67,7 @@ mod indexes {\n pub use self::indexes::MovePathIndex;\n pub use self::indexes::MoveOutIndex;\n \n-impl self::indexes::MoveOutIndex {\n+impl MoveOutIndex {\n     pub fn move_path_index(&self, move_data: &MoveData) -> MovePathIndex {\n         move_data.moves[*self].path\n     }\n@@ -128,7 +130,7 @@ pub trait HasMoveData<'tcx> {\n pub struct LocationMap<T> {\n     /// Location-indexed (BasicBlock for outer index, index within BB\n     /// for inner index) map.\n-    map: IndexVec<BasicBlock, Vec<T>>,\n+    pub(crate) map: IndexVec<BasicBlock, Vec<T>>,\n }\n \n impl<T> Index<Location> for LocationMap<T> {\n@@ -188,7 +190,7 @@ pub struct MovePathLookup<'tcx> {\n     projections: FxHashMap<(MovePathIndex, AbstractElem<'tcx>), MovePathIndex>\n }\n \n-struct MoveDataBuilder<'a, 'tcx: 'a> {\n+pub(super) struct MoveDataBuilder<'a, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,", "previous_filename": "src/librustc_borrowck/borrowck/mir/gather_moves.rs"}, {"sha": "71855d3805e139c2c8e3008e85273c83fe378a46", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=13cd022060316146474915664a9e019906a2c79a", "patch": "@@ -26,6 +26,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(rustc_diagnostic_macros)]\n #![feature(placement_in_syntax)]\n #![feature(collection_placement)]\n+#![feature(nonzero)]\n \n #[macro_use] extern crate log;\n extern crate graphviz as dot;\n@@ -40,10 +41,12 @@ extern crate syntax;\n extern crate syntax_pos;\n extern crate rustc_const_math;\n extern crate rustc_const_eval;\n+extern crate core; // for NonZero\n \n pub mod diagnostics;\n \n mod build;\n+pub mod dataflow;\n mod hair;\n mod shim;\n pub mod transform;"}, {"sha": "b158cb43ce7a922c4192bcad6ea79ae43367c733", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "renamed", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=13cd022060316146474915664a9e019906a2c79a", "patch": "@@ -8,22 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::gather_moves::{HasMoveData, MoveData, MovePathIndex, LookupResult};\n-use super::dataflow::{MaybeInitializedLvals, MaybeUninitializedLvals};\n-use super::dataflow::{DataflowResults};\n-use super::{on_all_children_bits, on_all_drop_children_bits};\n-use super::{drop_flag_effects_for_location, on_lookup_result_bits};\n-use super::MoveDataParamEnv;\n+use dataflow::move_paths::{HasMoveData, MoveData, MovePathIndex, LookupResult};\n+use dataflow::{MaybeInitializedLvals, MaybeUninitializedLvals};\n+use dataflow::{DataflowResults};\n+use dataflow::{on_all_children_bits, on_all_drop_children_bits};\n+use dataflow::{drop_flag_effects_for_location, on_lookup_result_bits};\n+use dataflow::MoveDataParamEnv;\n+use dataflow;\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::*;\n use rustc::mir::transform::{MirPass, MirSource};\n use rustc::middle::const_val::ConstVal;\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_set::IdxSetBuf;\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc_mir::util::patch::MirPatch;\n-use rustc_mir::util::elaborate_drops::{DropFlagState, Unwind, elaborate_drop};\n-use rustc_mir::util::elaborate_drops::{DropElaborator, DropStyle, DropFlagMode};\n+use util::patch::MirPatch;\n+use util::elaborate_drops::{DropFlagState, Unwind, elaborate_drop};\n+use util::elaborate_drops::{DropElaborator, DropStyle, DropFlagMode};\n use syntax::ast;\n use syntax_pos::Span;\n \n@@ -54,13 +55,13 @@ impl MirPass for ElaborateDrops {\n             };\n             let dead_unwinds = find_dead_unwinds(tcx, mir, id, &env);\n             let flow_inits =\n-                super::do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n-                                   MaybeInitializedLvals::new(tcx, mir, &env),\n-                                   |bd, p| &bd.move_data().move_paths[p]);\n+                dataflow::do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n+                                      MaybeInitializedLvals::new(tcx, mir, &env),\n+                                      |bd, p| &bd.move_data().move_paths[p]);\n             let flow_uninits =\n-                super::do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n-                                   MaybeUninitializedLvals::new(tcx, mir, &env),\n-                                   |bd, p| &bd.move_data().move_paths[p]);\n+                dataflow::do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n+                                      MaybeUninitializedLvals::new(tcx, mir, &env),\n+                                      |bd, p| &bd.move_data().move_paths[p]);\n \n             ElaborateDropsCtxt {\n                 tcx: tcx,\n@@ -91,7 +92,7 @@ fn find_dead_unwinds<'a, 'tcx>(\n     // reach cleanup blocks, which can't have unwind edges themselves.\n     let mut dead_unwinds = IdxSetBuf::new_empty(mir.basic_blocks().len());\n     let flow_inits =\n-        super::do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n+        dataflow::do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n                            MaybeInitializedLvals::new(tcx, mir, &env),\n                            |bd, p| &bd.move_data().move_paths[p]);\n     for (bb, bb_data) in mir.basic_blocks().iter_enumerated() {\n@@ -242,7 +243,7 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n     }\n \n     fn field_subpath(&self, path: Self::Path, field: Field) -> Option<Self::Path> {\n-        super::move_path_children_matching(self.ctxt.move_data(), path, |p| {\n+        dataflow::move_path_children_matching(self.ctxt.move_data(), path, |p| {\n             match p {\n                 &Projection {\n                     elem: ProjectionElem::Field(idx, _), ..\n@@ -253,7 +254,7 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n     }\n \n     fn deref_subpath(&self, path: Self::Path) -> Option<Self::Path> {\n-        super::move_path_children_matching(self.ctxt.move_data(), path, |p| {\n+        dataflow::move_path_children_matching(self.ctxt.move_data(), path, |p| {\n             match p {\n                 &Projection { elem: ProjectionElem::Deref, .. } => true,\n                 _ => false\n@@ -262,7 +263,7 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n     }\n \n     fn downcast_subpath(&self, path: Self::Path, variant: usize) -> Option<Self::Path> {\n-        super::move_path_children_matching(self.ctxt.move_data(), path, |p| {\n+        dataflow::move_path_children_matching(self.ctxt.move_data(), path, |p| {\n             match p {\n                 &Projection {\n                     elem: ProjectionElem::Downcast(_, idx), ..\n@@ -560,7 +561,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n \n     fn drop_flags_for_args(&mut self) {\n         let loc = Location { block: START_BLOCK, statement_index: 0 };\n-        super::drop_flag_effects_for_function_entry(\n+        dataflow::drop_flag_effects_for_function_entry(\n             self.tcx, self.mir, self.env, |path, ds| {\n                 self.set_drop_flag(loc, path, ds);\n             }\n@@ -605,7 +606,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                     }\n                 }\n                 let loc = Location { block: bb, statement_index: i };\n-                super::drop_flag_effects_for_location(\n+                dataflow::drop_flag_effects_for_location(\n                     self.tcx, self.mir, self.env, loc, |path, ds| {\n                         if ds == DropFlagState::Absent || allow_initializations {\n                             self.set_drop_flag(loc, path, ds)", "previous_filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs"}, {"sha": "1530ea8e0df0fad09cd0f61fd39f8e9a5ba26bb2", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=13cd022060316146474915664a9e019906a2c79a", "patch": "@@ -30,6 +30,8 @@ pub mod simplify;\n pub mod erase_regions;\n pub mod no_landing_pads;\n pub mod type_check;\n+pub mod rustc_peek;\n+pub mod elaborate_drops;\n pub mod add_call_guards;\n pub mod promote_consts;\n pub mod qualify_consts;"}, {"sha": "5918de0c6881104a906c857f250c2f0853d40670", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "renamed", "additions": 60, "deletions": 5, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cd022060316146474915664a9e019906a2c79a/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=13cd022060316146474915664a9e019906a2c79a", "patch": "@@ -14,12 +14,67 @@ use syntax_pos::Span;\n \n use rustc::ty::{self, TyCtxt};\n use rustc::mir::{self, Mir};\n+use rustc::mir::transform::{MirPass, MirSource};\n+use rustc_data_structures::indexed_set::IdxSetBuf;\n use rustc_data_structures::indexed_vec::Idx;\n \n-use super::super::gather_moves::{MovePathIndex, LookupResult};\n-use super::BitDenotation;\n-use super::DataflowResults;\n-use super::super::gather_moves::HasMoveData;\n+use dataflow::do_dataflow;\n+use dataflow::MoveDataParamEnv;\n+use dataflow::BitDenotation;\n+use dataflow::DataflowResults;\n+use dataflow::{DefinitelyInitializedLvals, MaybeInitializedLvals, MaybeUninitializedLvals};\n+use dataflow::move_paths::{MovePathIndex, LookupResult};\n+use dataflow::move_paths::{HasMoveData, MoveData};\n+use dataflow;\n+\n+use dataflow::has_rustc_mir_with;\n+\n+pub struct SanityCheck;\n+\n+impl MirPass for SanityCheck {\n+    fn run_pass<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          src: MirSource, mir: &mut Mir<'tcx>) {\n+        let id = src.item_id();\n+        let def_id = tcx.hir.local_def_id(id);\n+        if !tcx.has_attr(def_id, \"rustc_mir_borrowck\") {\n+            debug!(\"skipping rustc_peek::SanityCheck on {}\", tcx.item_path_str(def_id));\n+            return;\n+        } else {\n+            debug!(\"running rustc_peek::SanityCheck on {}\", tcx.item_path_str(def_id));\n+        }\n+\n+        let attributes = tcx.get_attrs(def_id);\n+        let param_env = tcx.param_env(def_id);\n+        let move_data = MoveData::gather_moves(mir, tcx, param_env);\n+        let mdpe = MoveDataParamEnv { move_data: move_data, param_env: param_env };\n+        let dead_unwinds = IdxSetBuf::new_empty(mir.basic_blocks().len());\n+        let flow_inits =\n+            do_dataflow(tcx, mir, id, &attributes, &dead_unwinds,\n+                        MaybeInitializedLvals::new(tcx, mir, &mdpe),\n+                        |bd, i| &bd.move_data().move_paths[i]);\n+        let flow_uninits =\n+            do_dataflow(tcx, mir, id, &attributes, &dead_unwinds,\n+                        MaybeUninitializedLvals::new(tcx, mir, &mdpe),\n+                        |bd, i| &bd.move_data().move_paths[i]);\n+        let flow_def_inits =\n+            do_dataflow(tcx, mir, id, &attributes, &dead_unwinds,\n+                        DefinitelyInitializedLvals::new(tcx, mir, &mdpe),\n+                        |bd, i| &bd.move_data().move_paths[i]);\n+\n+        if has_rustc_mir_with(&attributes, \"rustc_peek_maybe_init\").is_some() {\n+            sanity_check_via_rustc_peek(tcx, mir, id, &attributes, &flow_inits);\n+        }\n+        if has_rustc_mir_with(&attributes, \"rustc_peek_maybe_uninit\").is_some() {\n+            sanity_check_via_rustc_peek(tcx, mir, id, &attributes, &flow_uninits);\n+        }\n+        if has_rustc_mir_with(&attributes, \"rustc_peek_definite_init\").is_some() {\n+            sanity_check_via_rustc_peek(tcx, mir, id, &attributes, &flow_def_inits);\n+        }\n+        if has_rustc_mir_with(&attributes, \"stop_after_dataflow\").is_some() {\n+            tcx.sess.fatal(\"stop_after_dataflow ended compilation\");\n+        }\n+    }\n+}\n \n /// This function scans `mir` for all calls to the intrinsic\n /// `rustc_peek` that have the expression form `rustc_peek(&expr)`.\n@@ -92,7 +147,7 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // of the argument at time immediate preceding Call to\n     // `rustc_peek`).\n \n-    let mut sets = super::BlockSets { on_entry: &mut entry,\n+    let mut sets = dataflow::BlockSets { on_entry: &mut entry,\n                                       gen_set: &mut gen,\n                                       kill_set: &mut kill };\n ", "previous_filename": "src/librustc_borrowck/borrowck/mir/dataflow/sanity_check.rs"}]}