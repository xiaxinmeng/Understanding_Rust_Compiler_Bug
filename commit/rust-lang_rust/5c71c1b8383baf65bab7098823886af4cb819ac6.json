{"sha": "5c71c1b8383baf65bab7098823886af4cb819ac6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNzFjMWI4MzgzYmFmNjViYWI3MDk4ODIzODg2YWY0Y2I4MTlhYzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-19T08:04:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-19T08:04:12Z"}, "message": "Auto merge of #4411 - mikerite:fix-4384, r=flip1995\n\nFix `clone_on_copy` false positives\n\nCloses #4384\n\nchangelog: Fix `clone_on_copy` false positives", "tree": {"sha": "641cfcea3857310db991defee9154208d2f8a3cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/641cfcea3857310db991defee9154208d2f8a3cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c71c1b8383baf65bab7098823886af4cb819ac6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c71c1b8383baf65bab7098823886af4cb819ac6", "html_url": "https://github.com/rust-lang/rust/commit/5c71c1b8383baf65bab7098823886af4cb819ac6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c71c1b8383baf65bab7098823886af4cb819ac6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1f1844f468708848ae1dd1110a161d849a2fb9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1f1844f468708848ae1dd1110a161d849a2fb9c", "html_url": "https://github.com/rust-lang/rust/commit/d1f1844f468708848ae1dd1110a161d849a2fb9c"}, {"sha": "68a1af540cc65c7ebc8804f615ade76359b7d2dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/68a1af540cc65c7ebc8804f615ade76359b7d2dc", "html_url": "https://github.com/rust-lang/rust/commit/68a1af540cc65c7ebc8804f615ade76359b7d2dc"}], "stats": {"total": 69, "additions": 37, "deletions": 32}, "files": [{"sha": "8c0fb2a6c2f243d586d50a5857c999f5994c60ab", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5c71c1b8383baf65bab7098823886af4cb819ac6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71c1b8383baf65bab7098823886af4cb819ac6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5c71c1b8383baf65bab7098823886af4cb819ac6", "patch": "@@ -1549,30 +1549,30 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr, arg: &hir::Exp\n     if is_copy(cx, ty) {\n         let snip;\n         if let Some(snippet) = sugg::Sugg::hir_opt(cx, arg) {\n+            let parent = cx.tcx.hir().get_parent_node(expr.hir_id);\n+            match &cx.tcx.hir().get(parent) {\n+                hir::Node::Expr(parent) => match parent.node {\n+                    // &*x is a nop, &x.clone() is not\n+                    hir::ExprKind::AddrOf(..) |\n+                    // (*x).func() is useless, x.clone().func() can work in case func borrows mutably\n+                    hir::ExprKind::MethodCall(..) => return,\n+                    _ => {},\n+                },\n+                hir::Node::Stmt(stmt) => {\n+                    if let hir::StmtKind::Local(ref loc) = stmt.node {\n+                        if let hir::PatKind::Ref(..) = loc.pat.node {\n+                            // let ref y = *x borrows x, let ref y = x.clone() does not\n+                            return;\n+                        }\n+                    }\n+                },\n+                _ => {},\n+            }\n+\n             // x.clone() might have dereferenced x, possibly through Deref impls\n             if cx.tables.expr_ty(arg) == ty {\n                 snip = Some((\"try removing the `clone` call\", format!(\"{}\", snippet)));\n             } else {\n-                let parent = cx.tcx.hir().get_parent_node(expr.hir_id);\n-                match cx.tcx.hir().get(parent) {\n-                    hir::Node::Expr(parent) => match parent.node {\n-                        // &*x is a nop, &x.clone() is not\n-                        hir::ExprKind::AddrOf(..) |\n-                        // (*x).func() is useless, x.clone().func() can work in case func borrows mutably\n-                        hir::ExprKind::MethodCall(..) => return,\n-                        _ => {},\n-                    },\n-                    hir::Node::Stmt(stmt) => {\n-                        if let hir::StmtKind::Local(ref loc) = stmt.node {\n-                            if let hir::PatKind::Ref(..) = loc.pat.node {\n-                                // let ref y = *x borrows x, let ref y = x.clone() does not\n-                                return;\n-                            }\n-                        }\n-                    },\n-                    _ => {},\n-                }\n-\n                 let deref_count = cx\n                     .tables\n                     .expr_adjustments(arg)"}, {"sha": "4ff835115909ab51d39ef74f13550cdcf76175f5", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c71c1b8383baf65bab7098823886af4cb819ac6/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71c1b8383baf65bab7098823886af4cb819ac6/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=5c71c1b8383baf65bab7098823886af4cb819ac6", "patch": "@@ -22,6 +22,11 @@ fn clone_on_copy() {\n \n     let rc = RefCell::new(0);\n     rc.borrow().clone();\n+\n+    // Issue #4348\n+    let mut x = 43;\n+    let _ = &x.clone(); // ok, getting a ref\n+    'a'.clone().make_ascii_uppercase(); // ok, clone and then mutate\n }\n \n fn clone_on_ref_ptr() {"}, {"sha": "b1388044c42cdfb230201d9f31aeb4a39088765f", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5c71c1b8383baf65bab7098823886af4cb819ac6/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c71c1b8383baf65bab7098823886af4cb819ac6/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=5c71c1b8383baf65bab7098823886af4cb819ac6", "patch": "@@ -19,51 +19,51 @@ LL |     rc.borrow().clone();\n    |     ^^^^^^^^^^^^^^^^^^^ help: try dereferencing it: `*rc.borrow()`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:34:5\n+  --> $DIR/unnecessary_clone.rs:39:5\n    |\n LL |     rc.clone();\n    |     ^^^^^^^^^^ help: try this: `Rc::<bool>::clone(&rc)`\n    |\n    = note: `-D clippy::clone-on-ref-ptr` implied by `-D warnings`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:37:5\n+  --> $DIR/unnecessary_clone.rs:42:5\n    |\n LL |     arc.clone();\n    |     ^^^^^^^^^^^ help: try this: `Arc::<bool>::clone(&arc)`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:40:5\n+  --> $DIR/unnecessary_clone.rs:45:5\n    |\n LL |     rcweak.clone();\n    |     ^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&rcweak)`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:43:5\n+  --> $DIR/unnecessary_clone.rs:48:5\n    |\n LL |     arc_weak.clone();\n    |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&arc_weak)`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:47:33\n+  --> $DIR/unnecessary_clone.rs:52:33\n    |\n LL |     let _: Arc<dyn SomeTrait> = x.clone();\n    |                                 ^^^^^^^^^ help: try this: `Arc::<SomeImpl>::clone(&x)`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:51:5\n+  --> $DIR/unnecessary_clone.rs:56:5\n    |\n LL |     t.clone();\n    |     ^^^^^^^^^ help: try removing the `clone` call: `t`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:53:5\n+  --> $DIR/unnecessary_clone.rs:58:5\n    |\n LL |     Some(t).clone();\n    |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n \n error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:59:22\n+  --> $DIR/unnecessary_clone.rs:64:22\n    |\n LL |     let z: &Vec<_> = y.clone();\n    |                      ^^^^^^^^^\n@@ -79,21 +79,21 @@ LL |     let z: &Vec<_> = &std::vec::Vec<i32>::clone(y);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n-  --> $DIR/unnecessary_clone.rs:66:27\n+  --> $DIR/unnecessary_clone.rs:71:27\n    |\n LL |     let v2: Vec<isize> = v.iter().cloned().collect();\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.to_vec()`\n    |\n    = note: `-D clippy::iter-cloned-collect` implied by `-D warnings`\n \n error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n-  --> $DIR/unnecessary_clone.rs:71:38\n+  --> $DIR/unnecessary_clone.rs:76:38\n    |\n LL |     let _: Vec<isize> = vec![1, 2, 3].iter().cloned().collect();\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.to_vec()`\n \n error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n-  --> $DIR/unnecessary_clone.rs:76:24\n+  --> $DIR/unnecessary_clone.rs:81:24\n    |\n LL |               .to_bytes()\n    |  ________________________^\n@@ -103,7 +103,7 @@ LL | |             .collect();\n    | |______________________^ help: try: `.to_vec()`\n \n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:114:20\n+  --> $DIR/unnecessary_clone.rs:119:20\n    |\n LL |         let _: E = a.clone();\n    |                    ^^^^^^^^^ help: try dereferencing it: `*****a`"}]}