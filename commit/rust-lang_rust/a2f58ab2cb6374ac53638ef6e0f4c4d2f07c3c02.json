{"sha": "a2f58ab2cb6374ac53638ef6e0f4c4d2f07c3c02", "node_id": "C_kwDOAAsO6NoAKGEyZjU4YWIyY2I2Mzc0YWM1MzYzOGVmNmUwZjRjNGQyZjA3YzNjMDI", "commit": {"author": {"name": "Ibraheem Ahmed", "email": "ibraheem@ibraheem.ca", "date": "2022-11-13T04:44:52Z"}, "committer": {"name": "Ibraheem Ahmed", "email": "ibraheem@ibraheem.ca", "date": "2022-11-13T04:44:52Z"}, "message": "avoid using channels in thread-local tests", "tree": {"sha": "8fba438fc00fc2a5957ddd65171b1c6a46b77a85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fba438fc00fc2a5957ddd65171b1c6a46b77a85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2f58ab2cb6374ac53638ef6e0f4c4d2f07c3c02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f58ab2cb6374ac53638ef6e0f4c4d2f07c3c02", "html_url": "https://github.com/rust-lang/rust/commit/a2f58ab2cb6374ac53638ef6e0f4c4d2f07c3c02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2f58ab2cb6374ac53638ef6e0f4c4d2f07c3c02/comments", "author": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a22426916ddf2f0b7927f31b7b7a8358f3e4827d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a22426916ddf2f0b7927f31b7b7a8358f3e4827d", "html_url": "https://github.com/rust-lang/rust/commit/a22426916ddf2f0b7927f31b7b7a8358f3e4827d"}], "stats": {"total": 66, "additions": 44, "deletions": 22}, "files": [{"sha": "80dc4c038d615388bab3e00b9217af129ca58c5b", "filename": "library/std/src/thread/local/tests.rs", "status": "modified", "additions": 44, "deletions": 22, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a2f58ab2cb6374ac53638ef6e0f4c4d2f07c3c02/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f58ab2cb6374ac53638ef6e0f4c4d2f07c3c02/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs?ref=a2f58ab2cb6374ac53638ef6e0f4c4d2f07c3c02", "patch": "@@ -1,15 +1,34 @@\n use crate::cell::{Cell, UnsafeCell};\n use crate::sync::atomic::{AtomicU8, Ordering};\n-use crate::sync::mpsc::{channel, Sender};\n+use crate::sync::{Arc, Condvar, Mutex};\n use crate::thread::{self, LocalKey};\n use crate::thread_local;\n \n-struct Foo(Sender<()>);\n+#[derive(Clone, Default)]\n+struct Signal(Arc<(Mutex<bool>, Condvar)>);\n+\n+impl Signal {\n+    fn notify(&self) {\n+        let (set, cvar) = &*self.0;\n+        *set.lock().unwrap() = true;\n+        cvar.notify_one();\n+    }\n+\n+    fn wait(&self) {\n+        let (set, cvar) = &*self.0;\n+        let mut set = set.lock().unwrap();\n+        while !*set {\n+            set = cvar.wait(set).unwrap();\n+        }\n+    }\n+}\n+\n+struct Foo(Signal);\n \n impl Drop for Foo {\n     fn drop(&mut self) {\n-        let Foo(ref s) = *self;\n-        s.send(()).unwrap();\n+        let Foo(ref f) = *self;\n+        f.notify();\n     }\n }\n \n@@ -69,14 +88,15 @@ fn smoke_dtor() {\n     run(&FOO2);\n \n     fn run(key: &'static LocalKey<UnsafeCell<Option<Foo>>>) {\n-        let (tx, rx) = channel();\n+        let signal = Signal::default();\n+        let signal2 = signal.clone();\n         let t = thread::spawn(move || unsafe {\n-            let mut tx = Some(tx);\n+            let mut signal = Some(signal2);\n             key.with(|f| {\n-                *f.get() = Some(Foo(tx.take().unwrap()));\n+                *f.get() = Some(Foo(signal.take().unwrap()));\n             });\n         });\n-        rx.recv().unwrap();\n+        signal.wait();\n         t.join().unwrap();\n     }\n }\n@@ -165,48 +185,50 @@ fn self_referential() {\n // requires the destructor to be run to pass the test).\n #[test]\n fn dtors_in_dtors_in_dtors() {\n-    struct S1(Sender<()>);\n+    struct S1(Signal);\n     thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));\n     thread_local!(static K2: UnsafeCell<Option<Foo>> = UnsafeCell::new(None));\n \n     impl Drop for S1 {\n         fn drop(&mut self) {\n-            let S1(ref tx) = *self;\n+            let S1(ref signal) = *self;\n             unsafe {\n-                let _ = K2.try_with(|s| *s.get() = Some(Foo(tx.clone())));\n+                let _ = K2.try_with(|s| *s.get() = Some(Foo(signal.clone())));\n             }\n         }\n     }\n \n-    let (tx, rx) = channel();\n+    let signal = Signal::default();\n+    let signal2 = signal.clone();\n     let _t = thread::spawn(move || unsafe {\n-        let mut tx = Some(tx);\n-        K1.with(|s| *s.get() = Some(S1(tx.take().unwrap())));\n+        let mut signal = Some(signal2);\n+        K1.with(|s| *s.get() = Some(S1(signal.take().unwrap())));\n     });\n-    rx.recv().unwrap();\n+    signal.wait();\n }\n \n #[test]\n fn dtors_in_dtors_in_dtors_const_init() {\n-    struct S1(Sender<()>);\n+    struct S1(Signal);\n     thread_local!(static K1: UnsafeCell<Option<S1>> = const { UnsafeCell::new(None) });\n     thread_local!(static K2: UnsafeCell<Option<Foo>> = const { UnsafeCell::new(None) });\n \n     impl Drop for S1 {\n         fn drop(&mut self) {\n-            let S1(ref tx) = *self;\n+            let S1(ref signal) = *self;\n             unsafe {\n-                let _ = K2.try_with(|s| *s.get() = Some(Foo(tx.clone())));\n+                let _ = K2.try_with(|s| *s.get() = Some(Foo(signal.clone())));\n             }\n         }\n     }\n \n-    let (tx, rx) = channel();\n+    let signal = Signal::default();\n+    let signal2 = signal.clone();\n     let _t = thread::spawn(move || unsafe {\n-        let mut tx = Some(tx);\n-        K1.with(|s| *s.get() = Some(S1(tx.take().unwrap())));\n+        let mut signal = Some(signal2);\n+        K1.with(|s| *s.get() = Some(S1(signal.take().unwrap())));\n     });\n-    rx.recv().unwrap();\n+    signal.wait();\n }\n \n // This test tests that TLS destructors have run before the thread joins. The"}]}