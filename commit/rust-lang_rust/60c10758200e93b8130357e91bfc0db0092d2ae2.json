{"sha": "60c10758200e93b8130357e91bfc0db0092d2ae2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYzEwNzU4MjAwZTkzYjgxMzAzNTdlOTFiZmMwZGIwMDkyZDJhZTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-04T21:07:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-04T21:07:55Z"}, "message": "Auto merge of #1564 - Aaron1011:readlink, r=RalfJung\n\nImplement `readlink`\n\nDue to the truncating behavior of `readlink`, I was not able to\ndirectly use any of the existing C-cstring helper functions.", "tree": {"sha": "0819220feb7685f8ca2f15dffde4fc928a15c749", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0819220feb7685f8ca2f15dffde4fc928a15c749"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60c10758200e93b8130357e91bfc0db0092d2ae2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60c10758200e93b8130357e91bfc0db0092d2ae2", "html_url": "https://github.com/rust-lang/rust/commit/60c10758200e93b8130357e91bfc0db0092d2ae2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60c10758200e93b8130357e91bfc0db0092d2ae2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9202f7ddc658d9a6902d5a65455b7503054d470b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9202f7ddc658d9a6902d5a65455b7503054d470b", "html_url": "https://github.com/rust-lang/rust/commit/9202f7ddc658d9a6902d5a65455b7503054d470b"}, {"sha": "3aaab3dd9809aa8f9576b77122ba2601fb3ddd52", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aaab3dd9809aa8f9576b77122ba2601fb3ddd52", "html_url": "https://github.com/rust-lang/rust/commit/3aaab3dd9809aa8f9576b77122ba2601fb3ddd52"}], "stats": {"total": 274, "additions": 183, "deletions": 91}, "files": [{"sha": "7635047064f12132bb244b02d7e0c55270c858ac", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 74, "deletions": 69, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/60c10758200e93b8130357e91bfc0db0092d2ae2/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c10758200e93b8130357e91bfc0db0092d2ae2/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=60c10758200e93b8130357e91bfc0db0092d2ae2", "patch": "@@ -14,72 +14,48 @@ use rustc_target::abi::LayoutOf;\n use crate::*;\n \n /// Represent how path separator conversion should be done.\n-enum Pathconversion {\n+pub enum PathConversion {\n     HostToTarget,\n     TargetToHost,\n }\n \n-/// Perform path separator conversion if needed.\n-fn convert_path_separator<'a>(\n-    os_str: Cow<'a, OsStr>,\n-    target_os: &str,\n-    direction: Pathconversion,\n-) -> Cow<'a, OsStr> {\n-    #[cfg(windows)]\n-    return if target_os == \"windows\" {\n-        // Windows-on-Windows, all fine.\n-        os_str\n-    } else {\n-        // Unix target, Windows host.\n-        let (from, to) = match direction {\n-            Pathconversion::HostToTarget => ('\\\\', '/'),\n-            Pathconversion::TargetToHost => ('/', '\\\\'),\n-        };\n-        let converted = os_str\n-            .encode_wide()\n-            .map(|wchar| if wchar == from as u16 { to as u16 } else { wchar })\n-            .collect::<Vec<_>>();\n-        Cow::Owned(OsString::from_wide(&converted))\n-    };\n-    #[cfg(unix)]\n-    return if target_os == \"windows\" {\n-        // Windows target, Unix host.\n-        let (from, to) = match direction {\n-            Pathconversion::HostToTarget => ('/', '\\\\'),\n-            Pathconversion::TargetToHost => ('\\\\', '/'),\n-        };\n-        let converted = os_str\n-            .as_bytes()\n-            .iter()\n-            .map(|&wchar| if wchar == from as u8 { to as u8 } else { wchar })\n-            .collect::<Vec<_>>();\n-        Cow::Owned(OsString::from_vec(converted))\n-    } else {\n-        // Unix-on-Unix, all is fine.\n-        os_str\n-    };\n+#[cfg(unix)]\n+pub fn os_str_to_bytes<'a, 'tcx>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n+    Ok(os_str.as_bytes())\n+}\n+\n+#[cfg(not(unix))]\n+pub fn os_str_to_bytes<'a, 'tcx>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n+    // On non-unix platforms the best we can do to transform bytes from/to OS strings is to do the\n+    // intermediate transformation into strings. Which invalidates non-utf8 paths that are actually\n+    // valid.\n+    os_str\n+        .to_str()\n+        .map(|s| s.as_bytes())\n+        .ok_or_else(|| err_unsup_format!(\"{:?} is not a valid utf-8 string\", os_str).into())\n+}\n+\n+#[cfg(unix)]\n+pub fn bytes_to_os_str<'a, 'tcx>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n+    Ok(OsStr::from_bytes(bytes))\n+}\n+#[cfg(not(unix))]\n+pub fn bytes_to_os_str<'a, 'tcx>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n+    let s = std::str::from_utf8(bytes)\n+        .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", bytes))?;\n+    Ok(OsStr::new(s))\n }\n \n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+\n     /// Helper function to read an OsString from a null-terminated sequence of bytes, which is what\n     /// the Unix APIs usually handle.\n     fn read_os_str_from_c_str<'a>(&'a self, scalar: Scalar<Tag>) -> InterpResult<'tcx, &'a OsStr>\n     where\n         'tcx: 'a,\n         'mir: 'a,\n     {\n-        #[cfg(unix)]\n-        fn bytes_to_os_str<'tcx, 'a>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n-            Ok(OsStr::from_bytes(bytes))\n-        }\n-        #[cfg(not(unix))]\n-        fn bytes_to_os_str<'tcx, 'a>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n-            let s = std::str::from_utf8(bytes)\n-                .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", bytes))?;\n-            Ok(OsStr::new(s))\n-        }\n-\n         let this = self.eval_context_ref();\n         let bytes = this.memory.read_c_str(scalar)?;\n         bytes_to_os_str(bytes)\n@@ -118,20 +94,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         scalar: Scalar<Tag>,\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n-        #[cfg(unix)]\n-        fn os_str_to_bytes<'tcx, 'a>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n-            Ok(os_str.as_bytes())\n-        }\n-        #[cfg(not(unix))]\n-        fn os_str_to_bytes<'tcx, 'a>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n-            // On non-unix platforms the best we can do to transform bytes from/to OS strings is to do the\n-            // intermediate transformation into strings. Which invalidates non-utf8 paths that are actually\n-            // valid.\n-            os_str\n-                .to_str()\n-                .map(|s| s.as_bytes())\n-                .ok_or_else(|| err_unsup_format!(\"{:?} is not a valid utf-8 string\", os_str).into())\n-        }\n \n         let bytes = os_str_to_bytes(os_str)?;\n         // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required null\n@@ -226,7 +188,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_ref();\n         let os_str = this.read_os_str_from_c_str(scalar)?;\n \n-        Ok(match convert_path_separator(Cow::Borrowed(os_str), &this.tcx.sess.target.target.target_os, Pathconversion::TargetToHost) {\n+        Ok(match this.convert_path_separator(Cow::Borrowed(os_str), PathConversion::TargetToHost) {\n             Cow::Borrowed(x) => Cow::Borrowed(Path::new(x)),\n             Cow::Owned(y) => Cow::Owned(PathBuf::from(y)),\n         })\n@@ -237,7 +199,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_ref();\n         let os_str = this.read_os_str_from_wide_str(scalar)?;\n \n-        Ok(convert_path_separator(Cow::Owned(os_str), &this.tcx.sess.target.target.target_os, Pathconversion::TargetToHost).into_owned().into())\n+        Ok(this.convert_path_separator(Cow::Owned(os_str), PathConversion::TargetToHost).into_owned().into())\n     }\n \n     /// Write a Path to the machine memory (as a null-terminated sequence of bytes),\n@@ -249,7 +211,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n-        let os_str = convert_path_separator(Cow::Borrowed(path.as_os_str()), &this.tcx.sess.target.target.target_os, Pathconversion::HostToTarget);\n+        let os_str = this.convert_path_separator(Cow::Borrowed(path.as_os_str()), PathConversion::HostToTarget);\n         this.write_os_str_to_c_str(&os_str, scalar, size)\n     }\n \n@@ -262,7 +224,50 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n-        let os_str = convert_path_separator(Cow::Borrowed(path.as_os_str()), &this.tcx.sess.target.target.target_os, Pathconversion::HostToTarget);\n+        let os_str = this.convert_path_separator(Cow::Borrowed(path.as_os_str()), PathConversion::HostToTarget);\n         this.write_os_str_to_wide_str(&os_str, scalar, size)\n     }\n+\n+    fn convert_path_separator<'a>(\n+        &self,\n+        os_str: Cow<'a, OsStr>,\n+        direction: PathConversion,\n+    ) -> Cow<'a, OsStr> {\n+        let this = self.eval_context_ref();\n+        let target_os = &this.tcx.sess.target.target.target_os;\n+        #[cfg(windows)]\n+        return if target_os == \"windows\" {\n+            // Windows-on-Windows, all fine.\n+            os_str\n+        } else {\n+            // Unix target, Windows host.\n+            let (from, to) = match direction {\n+                PathConversion::HostToTarget => ('\\\\', '/'),\n+                PathConversion::TargetToHost => ('/', '\\\\'),\n+            };\n+            let converted = os_str\n+                .encode_wide()\n+                .map(|wchar| if wchar == from as u16 { to as u16 } else { wchar })\n+                .collect::<Vec<_>>();\n+            Cow::Owned(OsString::from_wide(&converted))\n+        };\n+        #[cfg(unix)]\n+        return if target_os == \"windows\" {\n+            // Windows target, Unix host.\n+            let (from, to) = match direction {\n+                PathConversion::HostToTarget => ('/', '\\\\'),\n+                PathConversion::TargetToHost => ('\\\\', '/'),\n+            };\n+            let converted = os_str\n+                .as_bytes()\n+                .iter()\n+                .map(|&wchar| if wchar == from as u8 { to as u8 } else { wchar })\n+                .collect::<Vec<_>>();\n+            Cow::Owned(OsString::from_vec(converted))\n+        } else {\n+            // Unix-on-Unix, all is fine.\n+            os_str\n+        };\n+    }\n }\n+"}, {"sha": "177678f03d74cd482ca0ebc2b9e389cc6e9abf34", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/60c10758200e93b8130357e91bfc0db0092d2ae2/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c10758200e93b8130357e91bfc0db0092d2ae2/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=60c10758200e93b8130357e91bfc0db0092d2ae2", "patch": "@@ -123,6 +123,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.fdatasync(fd)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n+            \"readlink\" => {\n+                let &[pathname, buf, bufsize] = check_arg_count(args)?;\n+                let result = this.readlink(pathname, buf, bufsize)?;\n+                this.write_scalar(Scalar::from_machine_isize(result, this), dest)?;\n+            }\n \n             // Allocation\n             \"posix_memalign\" => {"}, {"sha": "ebf7e16a153400226e35d99e13a92287b0691f63", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/60c10758200e93b8130357e91bfc0db0092d2ae2/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c10758200e93b8130357e91bfc0db0092d2ae2/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=60c10758200e93b8130357e91bfc0db0092d2ae2", "patch": "@@ -4,6 +4,7 @@ use std::fs::{read_dir, remove_dir, remove_file, rename, DirBuilder, File, FileT\n use std::io::{self, Read, Seek, SeekFrom, Write};\n use std::path::Path;\n use std::time::SystemTime;\n+use std::borrow::Cow;\n \n use log::trace;\n \n@@ -1353,6 +1354,41 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             this.handle_not_found()\n         }\n     }\n+\n+    fn readlink(\n+        &mut self,\n+        pathname_op: OpTy<'tcx, Tag>,\n+        buf_op: OpTy<'tcx, Tag>,\n+        bufsize_op: OpTy<'tcx, Tag>\n+    ) -> InterpResult<'tcx, i64> {\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"readlink\")?;\n+\n+        let pathname = this.read_path_from_c_str(this.read_scalar(pathname_op)?.check_init()?)?;\n+        let buf = this.read_scalar(buf_op)?.check_init()?;\n+        let bufsize = this.read_scalar(bufsize_op)?.to_machine_usize(this)?;\n+\n+        let result = std::fs::read_link(pathname);\n+        match result {\n+            Ok(resolved) => {\n+                let resolved = this.convert_path_separator(Cow::Borrowed(resolved.as_ref()), crate::shims::os_str::PathConversion::HostToTarget);\n+                let mut path_bytes = crate::shims::os_str::os_str_to_bytes(resolved.as_ref())?;\n+                let bufsize: usize = bufsize.try_into().unwrap();\n+                if path_bytes.len() > bufsize {\n+                    path_bytes = &path_bytes[..bufsize]\n+                }\n+                // 'readlink' truncates the resolved path if\n+                // the provided buffer is not large enough.\n+                this.memory.write_bytes(buf, path_bytes.iter().copied())?;\n+                Ok(path_bytes.len().try_into().unwrap())\n+            }\n+            Err(e) => {\n+                this.set_last_error_from_io_error(e)?;\n+                Ok(-1)\n+            }\n+        }\n+    }\n }\n \n /// Extracts the number of seconds and nanoseconds elapsed between `time` and the unix epoch when"}, {"sha": "f74d1c9a36b1be7d57475352e1dcd2998e89800b", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 68, "deletions": 2, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/60c10758200e93b8130357e91bfc0db0092d2ae2/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c10758200e93b8130357e91bfc0db0092d2ae2/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=60c10758200e93b8130357e91bfc0db0092d2ae2", "patch": "@@ -1,12 +1,18 @@\n // ignore-windows: File handling is not implemented yet\n // compile-flags: -Zmiri-disable-isolation\n \n+#![feature(rustc_private)]\n+\n use std::fs::{\n     File, create_dir, OpenOptions, read_dir, remove_dir, remove_dir_all, remove_file, rename,\n };\n-use std::io::{Read, Write, ErrorKind, Result, Seek, SeekFrom};\n+use std::ffi::CString;\n+use std::io::{Read, Write, Error, ErrorKind, Result, Seek, SeekFrom};\n use std::path::{PathBuf, Path};\n \n+extern crate libc;\n+\n+\n fn main() {\n     test_file();\n     test_file_clone();\n@@ -19,10 +25,23 @@ fn main() {\n     test_errors();\n     test_rename();\n     test_directory();\n+    test_dup_stdout_stderr();\n }\n \n fn tmp() -> PathBuf {\n-    std::env::var(\"MIRI_TEMP\").map(PathBuf::from).unwrap_or_else(|_| std::env::temp_dir())\n+    std::env::var(\"MIRI_TEMP\")\n+        .map(|tmp| {\n+            // MIRI_TEMP is set outside of our emulated\n+            // program, so it may have path separators that don't\n+            // correspond to our target platform. We normalize them here\n+            // before constructing a `PathBuf`\n+\n+            #[cfg(windows)]\n+            return PathBuf::from(tmp.replace(\"/\", \"\\\\\"));\n+\n+            #[cfg(not(windows))]\n+            return PathBuf::from(tmp.replace(\"\\\\\", \"/\"));\n+        }).unwrap_or_else(|_| std::env::temp_dir())\n }\n \n /// Prepare: compute filename and make sure the file does not exist.\n@@ -215,6 +234,43 @@ fn test_symlink() {\n     let mut contents = Vec::new();\n     symlink_file.read_to_end(&mut contents).unwrap();\n     assert_eq!(bytes, contents.as_slice());\n+\n+\n+    #[cfg(unix)]\n+    {\n+        use std::os::unix::ffi::OsStrExt;\n+\n+        let expected_path = path.as_os_str().as_bytes();\n+\n+        // Test that the expected string gets written to a buffer of proper\n+        // length, and that a trailing null byte is not written.\n+        let symlink_c_str = CString::new(symlink_path.as_os_str().as_bytes()).unwrap();\n+        let symlink_c_ptr = symlink_c_str.as_ptr();\n+\n+        // Make the buf one byte larger than it needs to be,\n+        // and check that the last byte is not overwritten.\n+        let mut large_buf = vec![0xFF; expected_path.len() + 1];\n+        let res = unsafe { libc::readlink(symlink_c_ptr, large_buf.as_mut_ptr().cast(), large_buf.len()) };\n+        // Check that the resovled path was properly written into the buf.\n+        assert_eq!(&large_buf[..(large_buf.len() - 1)], expected_path);\n+        assert_eq!(large_buf.last(), Some(&0xFF));\n+        assert_eq!(res, large_buf.len() as isize - 1);\n+\n+        // Test that the resolved path is truncated if the provided buffer\n+        // is too small.\n+        let mut small_buf = [0u8; 2];\n+        let res = unsafe { libc::readlink(symlink_c_ptr, small_buf.as_mut_ptr().cast(), small_buf.len()) };\n+        assert_eq!(small_buf, &expected_path[..small_buf.len()]);\n+        assert_eq!(res, small_buf.len() as isize);\n+\n+        // Test that we report a proper error for a missing path.\n+        let bad_path = CString::new(\"MIRI_MISSING_FILE_NAME\").unwrap();\n+        let res = unsafe { libc::readlink(bad_path.as_ptr(), small_buf.as_mut_ptr().cast(), small_buf.len()) };\n+        assert_eq!(res, -1);\n+        assert_eq!(Error::last_os_error().kind(), ErrorKind::NotFound);\n+    }\n+\n+\n     // Test that metadata of a symbolic link is correct.\n     check_metadata(bytes, &symlink_path).unwrap();\n     // Test that the metadata of a symbolic link is correct when not following it.\n@@ -292,3 +348,13 @@ fn test_directory() {\n     // Reading the metadata of a non-existent directory should fail with a \"not found\" error.\n     assert_eq!(ErrorKind::NotFound, check_metadata(&[], &dir_path).unwrap_err().kind());\n }\n+\n+fn test_dup_stdout_stderr() {\n+    let bytes = b\"hello dup fd\\n\";\n+    unsafe {\n+        let new_stdout = libc::fcntl(1, libc::F_DUPFD, 0);\n+        let new_stderr = libc::fcntl(2, libc::F_DUPFD, 0);\n+        libc::write(new_stdout, bytes.as_ptr() as *const libc::c_void, bytes.len());\n+        libc::write(new_stderr, bytes.as_ptr() as *const libc::c_void, bytes.len());\n+    }\n+}"}, {"sha": "b6fa69e3d5d2e8c4626550dcb2c413f91dfcd156", "filename": "tests/run-pass/fs.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/60c10758200e93b8130357e91bfc0db0092d2ae2/tests%2Frun-pass%2Ffs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60c10758200e93b8130357e91bfc0db0092d2ae2/tests%2Frun-pass%2Ffs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.stderr?ref=60c10758200e93b8130357e91bfc0db0092d2ae2", "previous_filename": "tests/run-pass/fs_libc.stderr"}, {"sha": "b6fa69e3d5d2e8c4626550dcb2c413f91dfcd156", "filename": "tests/run-pass/fs.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/60c10758200e93b8130357e91bfc0db0092d2ae2/tests%2Frun-pass%2Ffs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/60c10758200e93b8130357e91bfc0db0092d2ae2/tests%2Frun-pass%2Ffs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.stdout?ref=60c10758200e93b8130357e91bfc0db0092d2ae2", "previous_filename": "tests/run-pass/fs_libc.stdout"}, {"sha": "e3deb7a5bcd8a60509b02d072c9e6513c96fe8b2", "filename": "tests/run-pass/fs_libc.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9202f7ddc658d9a6902d5a65455b7503054d470b/tests%2Frun-pass%2Ffs_libc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9202f7ddc658d9a6902d5a65455b7503054d470b/tests%2Frun-pass%2Ffs_libc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs_libc.rs?ref=9202f7ddc658d9a6902d5a65455b7503054d470b", "patch": "@@ -1,20 +0,0 @@\n-// ignore-windows\n-// compile-flags: -Zmiri-disable-isolation\n-\n-#![feature(rustc_private)]\n-\n-extern crate libc;\n-\n-fn main() {\n-    dup_stdout_stderr_test();\n-}\n-\n-fn dup_stdout_stderr_test() {\n-    let bytes = b\"hello dup fd\\n\";\n-    unsafe {\n-        let new_stdout = libc::fcntl(1, libc::F_DUPFD, 0);\n-        let new_stderr = libc::fcntl(2, libc::F_DUPFD, 0);\n-        libc::write(new_stdout, bytes.as_ptr() as *const libc::c_void, bytes.len());\n-        libc::write(new_stderr, bytes.as_ptr() as *const libc::c_void, bytes.len());\n-    }\n-}"}]}