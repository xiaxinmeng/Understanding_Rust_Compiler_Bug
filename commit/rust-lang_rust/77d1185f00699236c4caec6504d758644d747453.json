{"sha": "77d1185f00699236c4caec6504d758644d747453", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZDExODVmMDA2OTkyMzZjNGNhZWM2NTA0ZDc1ODY0NGQ3NDc0NTM=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-02-20T21:45:30Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-03-01T18:47:41Z"}, "message": "parallelize tidy checks", "tree": {"sha": "3adb9e320f28084c8674915a03d0db7be54c21ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3adb9e320f28084c8674915a03d0db7be54c21ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77d1185f00699236c4caec6504d758644d747453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77d1185f00699236c4caec6504d758644d747453", "html_url": "https://github.com/rust-lang/rust/commit/77d1185f00699236c4caec6504d758644d747453", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77d1185f00699236c4caec6504d758644d747453/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "html_url": "https://github.com/rust-lang/rust/commit/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d"}], "stats": {"total": 115, "additions": 76, "deletions": 39}, "files": [{"sha": "2f2d90655115a8af1e5f543e5434324232eb7dab", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77d1185f00699236c4caec6504d758644d747453/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/77d1185f00699236c4caec6504d758644d747453/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=77d1185f00699236c4caec6504d758644d747453", "patch": "@@ -5239,6 +5239,7 @@ name = \"tidy\"\n version = \"0.1.0\"\n dependencies = [\n  \"cargo_metadata 0.11.1\",\n+ \"crossbeam-utils 0.8.0\",\n  \"lazy_static\",\n  \"regex\",\n  \"walkdir\","}, {"sha": "58c32993cb6ef24b1a08ac25c9a28acb32d925ba", "filename": "src/tools/tidy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77d1185f00699236c4caec6504d758644d747453/src%2Ftools%2Ftidy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/77d1185f00699236c4caec6504d758644d747453/src%2Ftools%2Ftidy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2FCargo.toml?ref=77d1185f00699236c4caec6504d758644d747453", "patch": "@@ -10,6 +10,7 @@ cargo_metadata = \"0.11\"\n regex = \"1\"\n lazy_static = \"1\"\n walkdir = \"2\"\n+crossbeam-utils = \"0.8.0\"\n \n [[bin]]\n name = \"rust-tidy\""}, {"sha": "f4e203cac408de76aa818bc9826abf69b8019b1a", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77d1185f00699236c4caec6504d758644d747453/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d1185f00699236c4caec6504d758644d747453/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=77d1185f00699236c4caec6504d758644d747453", "patch": "@@ -32,9 +32,12 @@ pub fn check(path: &Path, output: &Path, bad: &mut bool) {\n     // readily create a file there to test.\n     //\n     // See #36706 and #74753 for context.\n-    let mut temp_path = path.join(\"tidy-test-file\");\n+    //\n+    // We also add the thread ID to avoid threads trampling on each others files.\n+    let file_name = format!(\"t{}.tidy-test-file\", std::thread::current().id().as_u64());\n+    let mut temp_path = path.join(&file_name);\n     match fs::File::create(&temp_path).or_else(|_| {\n-        temp_path = output.join(\"tidy-test-file\");\n+        temp_path = output.join(&file_name);\n         fs::File::create(&temp_path)\n     }) {\n         Ok(file) => {"}, {"sha": "45cc169470b96166760f3f8bdff36007e14812af", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77d1185f00699236c4caec6504d758644d747453/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d1185f00699236c4caec6504d758644d747453/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=77d1185f00699236c4caec6504d758644d747453", "patch": "@@ -4,6 +4,7 @@\n //! to be used by tools.\n \n #![cfg_attr(bootstrap, feature(str_split_once))]\n+#![feature(thread_id_value)]\n \n use std::fs::File;\n use std::io::Read;\n@@ -54,6 +55,12 @@ pub mod unit_tests;\n pub mod unstable_book;\n \n fn filter_dirs(path: &Path) -> bool {\n+    // Filter out temporary files used by the bins module to probe the filesystem\n+    match path.extension() {\n+        Some(ext) if ext == \"tidy-test-file\" => return true,\n+        _ => {}\n+    }\n+\n     let skip = [\n         \"compiler/rustc_codegen_cranelift\",\n         \"src/llvm-project\","}, {"sha": "9151d2bb4062a6bb810cbc088f4f63371f77e85a", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 62, "deletions": 37, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/77d1185f00699236c4caec6504d758644d747453/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77d1185f00699236c4caec6504d758644d747453/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=77d1185f00699236c4caec6504d758644d747453", "patch": "@@ -6,9 +6,11 @@\n \n use tidy::*;\n \n+use crossbeam_utils::thread::scope;\n use std::env;\n use std::path::PathBuf;\n use std::process;\n+use std::sync::atomic::{AtomicBool, Ordering};\n \n fn main() {\n     let root_path: PathBuf = env::args_os().nth(1).expect(\"need path to root of repo\").into();\n@@ -22,45 +24,68 @@ fn main() {\n \n     let args: Vec<String> = env::args().skip(1).collect();\n \n-    let mut bad = false;\n     let verbose = args.iter().any(|s| *s == \"--verbose\");\n \n-    // Checks over tests.\n-    debug_artifacts::check(&src_path, &mut bad);\n-    ui_tests::check(&src_path, &mut bad);\n-\n-    // Checks that only make sense for the compiler.\n-    errors::check(&compiler_path, &mut bad);\n-    error_codes_check::check(&src_path, &mut bad);\n-\n-    // Checks that only make sense for the std libs.\n-    pal::check(&library_path, &mut bad);\n-\n-    // Checks that need to be done for both the compiler and std libraries.\n-    unit_tests::check(&src_path, &mut bad);\n-    unit_tests::check(&compiler_path, &mut bad);\n-    unit_tests::check(&library_path, &mut bad);\n-\n-    bins::check(&src_path, &output_directory, &mut bad);\n-    bins::check(&compiler_path, &output_directory, &mut bad);\n-    bins::check(&library_path, &output_directory, &mut bad);\n-\n-    style::check(&src_path, &mut bad);\n-    style::check(&compiler_path, &mut bad);\n-    style::check(&library_path, &mut bad);\n-\n-    edition::check(&src_path, &mut bad);\n-    edition::check(&compiler_path, &mut bad);\n-    edition::check(&library_path, &mut bad);\n-\n-    let collected = features::check(&src_path, &compiler_path, &library_path, &mut bad, verbose);\n-    unstable_book::check(&src_path, collected, &mut bad);\n-\n-    // Checks that are done on the cargo workspace.\n-    deps::check(&root_path, &cargo, &mut bad);\n-    extdeps::check(&root_path, &mut bad);\n-\n-    if bad {\n+    let bad = std::sync::Arc::new(AtomicBool::new(false));\n+\n+    scope(|s| {\n+        macro_rules! check {\n+            ($p:ident $(, $args:expr)* ) => {\n+                s.spawn(|_| {\n+                    let mut flag = false;\n+                    $p::check($($args),* , &mut flag);\n+                    if (flag) {\n+                        bad.store(true, Ordering::Relaxed);\n+                    }\n+                });\n+            }\n+        }\n+\n+        // Checks that are done on the cargo workspace.\n+        check!(deps, &root_path, &cargo);\n+        check!(extdeps, &root_path);\n+\n+        // Checks over tests.\n+        check!(debug_artifacts, &src_path);\n+        check!(ui_tests, &src_path);\n+\n+        // Checks that only make sense for the compiler.\n+        check!(errors, &compiler_path);\n+        check!(error_codes_check, &src_path);\n+\n+        // Checks that only make sense for the std libs.\n+        check!(pal, &library_path);\n+\n+        // Checks that need to be done for both the compiler and std libraries.\n+        check!(unit_tests, &src_path);\n+        check!(unit_tests, &compiler_path);\n+        check!(unit_tests, &library_path);\n+\n+        check!(bins, &src_path, &output_directory);\n+        check!(bins, &compiler_path, &output_directory);\n+        check!(bins, &library_path, &output_directory);\n+\n+        check!(style, &src_path);\n+        check!(style, &compiler_path);\n+        check!(style, &library_path);\n+\n+        check!(edition, &src_path);\n+        check!(edition, &compiler_path);\n+        check!(edition, &library_path);\n+\n+        let collected = {\n+            let mut flag = false;\n+            let r = features::check(&src_path, &compiler_path, &library_path, &mut flag, verbose);\n+            if flag {\n+                bad.store(true, Ordering::Relaxed);\n+            }\n+            r\n+        };\n+        check!(unstable_book, &src_path, collected);\n+    })\n+    .unwrap();\n+\n+    if bad.load(Ordering::Relaxed) {\n         eprintln!(\"some tidy checks failed\");\n         process::exit(1);\n     }"}]}