{"sha": "faf6b84304dbc96f7bf142973f394f820e390a4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZjZiODQzMDRkYmM5NmY3YmYxNDI5NzNmMzk0ZjgyMGUzOTBhNGM=", "commit": {"author": {"name": "Alexey Tarasov", "email": "tarasov@dodologics.com", "date": "2017-08-13T09:28:04Z"}, "committer": {"name": "Alexey Tarasov", "email": "tarasov@dodologics.com", "date": "2017-08-13T09:28:04Z"}, "message": "Addresses comments in PR #43836\n\n- removes warnings introduced in changeset 0cd3587\n- makes documentation more neat and grammatically correct", "tree": {"sha": "edc2dc3ae69cddded0bdba8349631cf3cd1d7326", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edc2dc3ae69cddded0bdba8349631cf3cd1d7326"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faf6b84304dbc96f7bf142973f394f820e390a4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faf6b84304dbc96f7bf142973f394f820e390a4c", "html_url": "https://github.com/rust-lang/rust/commit/faf6b84304dbc96f7bf142973f394f820e390a4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faf6b84304dbc96f7bf142973f394f820e390a4c/comments", "author": {"login": "taleks", "id": 93178, "node_id": "MDQ6VXNlcjkzMTc4", "avatar_url": "https://avatars.githubusercontent.com/u/93178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taleks", "html_url": "https://github.com/taleks", "followers_url": "https://api.github.com/users/taleks/followers", "following_url": "https://api.github.com/users/taleks/following{/other_user}", "gists_url": "https://api.github.com/users/taleks/gists{/gist_id}", "starred_url": "https://api.github.com/users/taleks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taleks/subscriptions", "organizations_url": "https://api.github.com/users/taleks/orgs", "repos_url": "https://api.github.com/users/taleks/repos", "events_url": "https://api.github.com/users/taleks/events{/privacy}", "received_events_url": "https://api.github.com/users/taleks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taleks", "id": 93178, "node_id": "MDQ6VXNlcjkzMTc4", "avatar_url": "https://avatars.githubusercontent.com/u/93178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taleks", "html_url": "https://github.com/taleks", "followers_url": "https://api.github.com/users/taleks/followers", "following_url": "https://api.github.com/users/taleks/following{/other_user}", "gists_url": "https://api.github.com/users/taleks/gists{/gist_id}", "starred_url": "https://api.github.com/users/taleks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taleks/subscriptions", "organizations_url": "https://api.github.com/users/taleks/orgs", "repos_url": "https://api.github.com/users/taleks/repos", "events_url": "https://api.github.com/users/taleks/events{/privacy}", "received_events_url": "https://api.github.com/users/taleks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a607faba43a818e2a9d63f87316256a963277bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a607faba43a818e2a9d63f87316256a963277bb", "html_url": "https://github.com/rust-lang/rust/commit/6a607faba43a818e2a9d63f87316256a963277bb"}], "stats": {"total": 142, "additions": 16, "deletions": 126}, "files": [{"sha": "e35777d222c0657475fb1f490a7c7093359c3245", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/faf6b84304dbc96f7bf142973f394f820e390a4c/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6b84304dbc96f7bf142973f394f820e390a4c/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=faf6b84304dbc96f7bf142973f394f820e390a4c", "patch": "@@ -384,11 +384,10 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n /// over time. That being said, the semantics will almost always end up pretty\n /// similar to [C11's definition of volatile][c11].\n ///\n-/// Compiler shouldn't change relative order or number of volatile memory\n-/// operations, however this implies that memory operation actually takes place.\n-/// If a zero-sized type is used in a specialisation of `read_volatile`, value\n-/// is known at any time and can not be modified outside of program control.\n-/// In this case such operation may be omitted by compiler backend.\n+/// The compiler shouldn't change the relative order or number of volatile\n+/// memory operations. However, volatile memory operations on zero-sized types\n+/// (e.g. if a zero-sized type is passed to `read_volatile`) are no-ops\n+/// and may be ignored.\n ///\n /// [c11]: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\n ///\n@@ -433,11 +432,10 @@ pub unsafe fn read_volatile<T>(src: *const T) -> T {\n /// over time. That being said, the semantics will almost always end up pretty\n /// similar to [C11's definition of volatile][c11].\n ///\n-/// Compiler shouldn't change relative order or number of volatile memory\n-/// operations, however this implies that memory operation actually takes place.\n-/// If a zero-sized type is used in a specialisation of `write_volatile`, value\n-/// is known at any time and can not be modified outside of program control.\n-/// In this case such operation may be omitted by compiler backend.\n+/// The compiler shouldn't change the relative order or number of volatile\n+/// memory operations. However, volatile memory operations on zero-sized types\n+/// (e.g. if a zero-sized type is passed to `write_volatile`) are no-ops\n+/// and may be ignored.\n ///\n /// [c11]: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\n ///"}, {"sha": "033ef988571dd263a5ad4c82161a3a522b89b2a3", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 43, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/faf6b84304dbc96f7bf142973f394f820e390a4c/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6b84304dbc96f7bf142973f394f820e390a4c/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=faf6b84304dbc96f7bf142973f394f820e390a4c", "patch": "@@ -83,38 +83,6 @@ fn get_simple_intrinsic(ccx: &CrateContext, name: &str) -> Option<ValueRef> {\n     Some(ccx.get_intrinsic(&llvm_name))\n }\n \n-fn warn_if_size_is_weird<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n-                                   tp_ty: Ty<'tcx>,\n-                                   count: ValueRef,\n-                                   span: Span,\n-                                   name: &str) {\n-    let ccx = bcx.ccx;\n-    let lltp_ty = type_of::type_of(ccx, tp_ty);\n-    let ty_size = machine::llsize_of(ccx, lltp_ty);\n-    let total = const_to_uint( bcx.mul(ty_size, count) );\n-\n-    if total > 0 {\n-        return;\n-    }\n-\n-    let text = format!(\"suspicious monomorphization of `{}` intrinsic\", name);\n-    let note = match name\n-    {\n-        \"volatile_load\" | \"volatile_store\" =>\n-             format!(\"'{}' was specialized with zero-sized type '{}'\",\n-                    name, tp_ty),\n-        _ => format!(\"'{}' was specialized with type '{}', number of \\\n-                     elements is {}\",\n-                     name, tp_ty,\n-                     const_to_uint(count))\n-    };\n-\n-    let sess = bcx.sess();\n-    sess.struct_span_warn(span, &text)\n-        .note(&note)\n-        .emit();\n-}\n-\n /// Remember to add all intrinsics here, in librustc_typeck/check/mod.rs,\n /// and in libcore/intrinsics.rs; if you need access to any llvm intrinsics,\n /// add them to librustc_trans/trans/context.rs\n@@ -249,24 +217,17 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n         }\n \n         \"volatile_copy_nonoverlapping_memory\" => {\n-            let tp_ty = substs.type_at(0);\n-            warn_if_size_is_weird(bcx, tp_ty, llargs[2], span, name);\n-            copy_intrinsic(bcx, false, true, tp_ty, llargs[0], llargs[1], llargs[2])\n+            copy_intrinsic(bcx, false, true, substs.type_at(0), llargs[0], llargs[1], llargs[2])\n         }\n         \"volatile_copy_memory\" => {\n-            let tp_ty = substs.type_at(0);\n-            warn_if_size_is_weird(bcx, tp_ty, llargs[2], span, name);\n-            copy_intrinsic(bcx, true, true, tp_ty, llargs[0], llargs[1], llargs[2])\n+            copy_intrinsic(bcx, true, true, substs.type_at(0), llargs[0], llargs[1], llargs[2])\n         }\n         \"volatile_set_memory\" => {\n-            let tp_ty = substs.type_at(0);\n-            warn_if_size_is_weird(bcx, tp_ty, llargs[2], span, name);\n-            memset_intrinsic(bcx, true, tp_ty, llargs[0], llargs[1], llargs[2])\n+            memset_intrinsic(bcx, true, substs.type_at(0), llargs[0], llargs[1], llargs[2])\n         }\n         \"volatile_load\" => {\n             let tp_ty = substs.type_at(0);\n             let mut ptr = llargs[0];\n-            warn_if_size_is_weird(bcx, tp_ty, C_uint(ccx,1usize), span, name);\n             if let Some(ty) = fn_ty.ret.cast {\n                 ptr = bcx.pointercast(ptr, ty.ptr_to());\n             }\n@@ -278,7 +239,6 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n         },\n         \"volatile_store\" => {\n             let tp_ty = substs.type_at(0);\n-            warn_if_size_is_weird(bcx, tp_ty, C_uint(ccx,1usize), span, name);\n             if type_is_fat_ptr(bcx.ccx, tp_ty) {\n                 bcx.volatile_store(llargs[1], get_dataptr(bcx, llargs[0]));\n                 bcx.volatile_store(llargs[2], get_meta(bcx, llargs[0]));"}, {"sha": "b753cf5844fa9185d34d88eed9e81d1b10968ecb", "filename": "src/test/run-pass/issue-39827.rs", "status": "renamed", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/faf6b84304dbc96f7bf142973f394f820e390a4c/src%2Ftest%2Frun-pass%2Fissue-39827.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf6b84304dbc96f7bf142973f394f820e390a4c/src%2Ftest%2Frun-pass%2Fissue-39827.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-39827.rs?ref=faf6b84304dbc96f7bf142973f394f820e390a4c", "patch": "@@ -13,6 +13,11 @@ use std::intrinsics::{ volatile_copy_memory, volatile_store, volatile_load,\n                        volatile_copy_nonoverlapping_memory,\n                        volatile_set_memory };\n \n+//\n+// This test ensures that volatile intrinsics can be specialised with\n+// zero-sized types and, in case of copy/set functions, can accept\n+// number of elements equal to zero.\n+//\n fn main () {\n     let mut dst_pair = (1, 2);\n     let src_pair = (3, 4);", "previous_filename": "src/test/ui/issue-39827.rs"}, {"sha": "228309872f939317e4cf0fa55b48675a7aab0d68", "filename": "src/test/ui/issue-39827.stderr", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/6a607faba43a818e2a9d63f87316256a963277bb/src%2Ftest%2Fui%2Fissue-39827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a607faba43a818e2a9d63f87316256a963277bb/src%2Ftest%2Fui%2Fissue-39827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-39827.stderr?ref=6a607faba43a818e2a9d63f87316256a963277bb", "patch": "@@ -1,73 +0,0 @@\n-warning: suspicious monomorphization of `volatile_copy_memory` intrinsic\n-  --> $DIR/issue-39827.rs:26:9\n-   |\n-26 |         volatile_copy_memory(&mut dst_pair, &dst_pair, COUNT_0);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: 'volatile_copy_memory' was specialized with type '(i32, i32)', number of elements is 0\n-\n-warning: suspicious monomorphization of `volatile_copy_nonoverlapping_memory` intrinsic\n-  --> $DIR/issue-39827.rs:27:9\n-   |\n-27 |         volatile_copy_nonoverlapping_memory(&mut dst_pair, &src_pair, 0);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: 'volatile_copy_nonoverlapping_memory' was specialized with type '(i32, i32)', number of elements is 0\n-\n-warning: suspicious monomorphization of `volatile_copy_memory` intrinsic\n-  --> $DIR/issue-39827.rs:28:9\n-   |\n-28 |         volatile_copy_memory(&mut dst_empty, &dst_empty, 100);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: 'volatile_copy_memory' was specialized with type '()', number of elements is 100\n-\n-warning: suspicious monomorphization of `volatile_copy_nonoverlapping_memory` intrinsic\n-  --> $DIR/issue-39827.rs:29:9\n-   |\n-29 | /         volatile_copy_nonoverlapping_memory(&mut dst_empty, &src_empty,\n-30 | |                                             COUNT_100);\n-   | |______________________________________________________^\n-   |\n-   = note: 'volatile_copy_nonoverlapping_memory' was specialized with type '()', number of elements is 100\n-\n-warning: suspicious monomorphization of `volatile_set_memory` intrinsic\n-  --> $DIR/issue-39827.rs:31:9\n-   |\n-31 |         volatile_set_memory(&mut dst_empty, 0, COUNT_100);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: 'volatile_set_memory' was specialized with type '()', number of elements is 100\n-\n-warning: suspicious monomorphization of `volatile_set_memory` intrinsic\n-  --> $DIR/issue-39827.rs:32:9\n-   |\n-32 |         volatile_set_memory(&mut dst_pair, 0, COUNT_0);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: 'volatile_set_memory' was specialized with type '(i32, i32)', number of elements is 0\n-\n-warning: suspicious monomorphization of `volatile_store` intrinsic\n-  --> $DIR/issue-39827.rs:33:9\n-   |\n-33 |         volatile_store(&mut dst_empty, ());\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: 'volatile_store' was specialized with zero-sized type '()'\n-\n-warning: suspicious monomorphization of `volatile_store` intrinsic\n-  --> $DIR/issue-39827.rs:34:9\n-   |\n-34 |         volatile_store(&mut dst_empty, src_empty);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: 'volatile_store' was specialized with zero-sized type '()'\n-\n-warning: suspicious monomorphization of `volatile_load` intrinsic\n-  --> $DIR/issue-39827.rs:35:9\n-   |\n-35 |         volatile_load(&src_empty);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: 'volatile_load' was specialized with zero-sized type '()'\n-"}]}