{"sha": "5b682354f2c8bf2c825b6229a6a125435f2053dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNjgyMzU0ZjJjOGJmMmM4MjViNjIyOWE2YTEyNTQzNWYyMDUzZGQ=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2019-12-26T18:37:14Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-03-02T11:43:07Z"}, "message": "Fix some minor issues", "tree": {"sha": "30e016d4e826f4ef46c532751ae6a695d1a364e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30e016d4e826f4ef46c532751ae6a695d1a364e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b682354f2c8bf2c825b6229a6a125435f2053dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b682354f2c8bf2c825b6229a6a125435f2053dd", "html_url": "https://github.com/rust-lang/rust/commit/5b682354f2c8bf2c825b6229a6a125435f2053dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b682354f2c8bf2c825b6229a6a125435f2053dd/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdcc02360f34fe773c38f8ae86111fb831f8ec9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdcc02360f34fe773c38f8ae86111fb831f8ec9e", "html_url": "https://github.com/rust-lang/rust/commit/bdcc02360f34fe773c38f8ae86111fb831f8ec9e"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "fe9196ef2314b09d06f2a358a8e32a7770d277b7", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b682354f2c8bf2c825b6229a6a125435f2053dd/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b682354f2c8bf2c825b6229a6a125435f2053dd/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=5b682354f2c8bf2c825b6229a6a125435f2053dd", "patch": "@@ -17,10 +17,11 @@\n #![feature(panic_runtime)]\n #![feature(staged_api)]\n #![feature(rustc_attrs)]\n-#![feature(raw)]\n+\n+use core::any::Any;\n \n #[rustc_std_internal_symbol]\n-pub unsafe extern \"C\" fn __rust_cleanup(_: *mut u8) -> core::raw::TraitObject {\n+pub unsafe extern \"C\" fn __rust_panic_cleanup(_: *mut u8) -> *mut (dyn Any + Send + 'static) {\n     unreachable!()\n }\n "}, {"sha": "ad82f22510c41d80bae791587d0de1351bbd3d84", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b682354f2c8bf2c825b6229a6a125435f2053dd/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b682354f2c8bf2c825b6229a6a125435f2053dd/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=5b682354f2c8bf2c825b6229a6a125435f2053dd", "patch": "@@ -32,6 +32,7 @@\n #![feature(panic_runtime)]\n \n use alloc::boxed::Box;\n+use core::any::Any;\n use core::panic::BoxMeUp;\n \n // If adding to this list, you should also look at libstd::panicking's identical\n@@ -70,10 +71,10 @@ extern \"C\" {\n mod dwarf;\n \n #[no_mangle]\n-pub unsafe extern \"C\" fn __rust_panic_cleanup(payload: *mut u8) -> core::raw::TraitObject {\n+pub unsafe extern \"C\" fn __rust_panic_cleanup(payload: *mut u8) -> *mut (dyn Any + Send + 'static) {\n     let payload = payload as *mut imp::Payload;\n     let payload = *(payload);\n-    core::mem::transmute(imp::cleanup(payload))\n+    Box::into_raw(imp::cleanup(payload))\n }\n \n // Entry point for raising an exception, just delegates to the platform-specific"}, {"sha": "b02cedd5da5bf321d088329658fcd53afc695a53", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b682354f2c8bf2c825b6229a6a125435f2053dd/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b682354f2c8bf2c825b6229a6a125435f2053dd/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=5b682354f2c8bf2c825b6229a6a125435f2053dd", "patch": "@@ -67,7 +67,7 @@ cfg_if::cfg_if! {\n extern \"C\" {\n     /// The payload ptr here is actually the same as the payload ptr for the try\n     /// intrinsic (i.e., is really `*mut [u64; 2]` or `*mut *mut u8`).\n-    fn __rust_panic_cleanup(payload: *mut u8) -> core::raw::TraitObject;\n+    fn __rust_panic_cleanup(payload: *mut u8) -> *mut (dyn Any + Send + 'static);\n \n     /// `payload` is actually a `*mut &mut dyn BoxMeUp` but that would cause FFI warnings.\n     /// It cannot be `Box<dyn BoxMeUp>` because the other end of this call does not depend\n@@ -313,7 +313,7 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n     // non-cold function, though, as of the writing of this comment).\n     #[cold]\n     unsafe fn cleanup(mut payload: Payload) -> Box<dyn Any + Send + 'static> {\n-        let obj = crate::mem::transmute(__rust_panic_cleanup(&mut payload as *mut _ as *mut u8));\n+        let obj = Box::from_raw(__rust_panic_cleanup(&mut payload as *mut _ as *mut u8));\n         update_panic_count(-1);\n         obj\n     }"}]}