{"sha": "7fc91f41d8bd948cef3085d7c0d0ec92d1b2bc53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYzkxZjQxZDhiZDk0OGNlZjMwODVkN2MwZDBlYzkyZDFiMmJjNTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-13T13:07:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-13T13:07:05Z"}, "message": "Generalize query", "tree": {"sha": "d671181833c0af18fdfd167998cae1afbe759926", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d671181833c0af18fdfd167998cae1afbe759926"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fc91f41d8bd948cef3085d7c0d0ec92d1b2bc53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fc91f41d8bd948cef3085d7c0d0ec92d1b2bc53", "html_url": "https://github.com/rust-lang/rust/commit/7fc91f41d8bd948cef3085d7c0d0ec92d1b2bc53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fc91f41d8bd948cef3085d7c0d0ec92d1b2bc53/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0568e76406fc4869152671a255c5e1efca6611a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0568e76406fc4869152671a255c5e1efca6611a6", "html_url": "https://github.com/rust-lang/rust/commit/0568e76406fc4869152671a255c5e1efca6611a6"}], "stats": {"total": 189, "additions": 79, "deletions": 110}, "files": [{"sha": "69a635aefe6db4a27c871e8c0e7e9c0dad87c6b2", "filename": "crates/libanalysis/idx.rs", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/0568e76406fc4869152671a255c5e1efca6611a6/crates%2Flibanalysis%2Fidx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0568e76406fc4869152671a255c5e1efca6611a6/crates%2Flibanalysis%2Fidx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fidx.rs?ref=0568e76406fc4869152671a255c5e1efca6611a6", "patch": "@@ -1,84 +0,0 @@\n-use std::path::PathBuf;\n-\n-use fst;\n-use fst::IntoStreamer;\n-use file;\n-\n-use fall_tree::{TextRange, NodeType};\n-use indxr::{FileIndex, IndexableFileSet};\n-\n-use editor::line_index::{LineCol, LineIndex};\n-use editor::fst_subseq::FstSubSeq;\n-use editor::file_symbols::process_symbols;\n-\n-use syntax::{STRUCT_DEF, ENUM_DEF, TRAIT_DEF, TYPE_DEF};\n-\n-\n-pub struct SymbolIndex {\n-    index: FileIndex<FileSymbols>,\n-}\n-\n-impl SymbolIndex {\n-    pub fn new(roots: Vec<PathBuf>) -> SymbolIndex {\n-        let file_set = IndexableFileSet::new(roots, \"rs\");\n-        let index = FileIndex::new(file_set, Box::new(|path| {\n-            let text = file::get_text(path).ok()?;\n-            Some(FileSymbols::new(text))\n-        }));\n-        SymbolIndex { index }\n-    }\n-\n-    pub fn query(&self, query: &str) -> Vec<(PathBuf, Symbol)> {\n-        let mut query = Query::new(query);\n-        let mut result = Vec::new();\n-        self.process_query(&query, &mut result);\n-        if result.is_empty() && !query.all_symbols {\n-            query.all_symbols = true;\n-            self.process_query(&query, &mut result);\n-        }\n-        result\n-    }\n-\n-    fn process_query(&self, query: &Query, acc: &mut Vec<(PathBuf, Symbol)>) {\n-        self.index.process_files(&mut |file| {\n-            query.process(&file.value, &mut |symbol| {\n-                acc.push((file.path.clone(), symbol))\n-            });\n-            acc.len() > 512\n-        });\n-    }\n-}\n-\n-struct Query {\n-    query: String,\n-    all_symbols: bool,\n-}\n-\n-impl Query {\n-    fn new(query: &str) -> Query {\n-        let all_symbols = query.contains(\"#\");\n-        let query: String = query.chars()\n-            .filter(|&c| c != '#')\n-            .flat_map(char::to_lowercase)\n-            .collect();\n-        Query { query, all_symbols }\n-    }\n-\n-    fn process(&self, file: &FileSymbols, acc: &mut FnMut(Symbol)) {\n-        fn is_type(ty: NodeType) -> bool {\n-            match ty {\n-                STRUCT_DEF | ENUM_DEF | TRAIT_DEF| TYPE_DEF => true,\n-                _ => false,\n-            }\n-        }\n-\n-        let a = FstSubSeq::new(&self.query);\n-        for idx in file.map.search(a).into_stream().into_values() {\n-            let idx = idx as usize;\n-            let symbol = file.symbols[idx].clone();\n-            if self.all_symbols || is_type(symbol.ty) {\n-                acc(symbol)\n-            }\n-        }\n-    }\n-}"}, {"sha": "b2f4bdbb3a9ddaaa8e1d1109c783763125d141c5", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7fc91f41d8bd948cef3085d7c0d0ec92d1b2bc53/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc91f41d8bd948cef3085d7c0d0ec92d1b2bc53/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=7fc91f41d8bd948cef3085d7c0d0ec92d1b2bc53", "patch": "@@ -21,7 +21,8 @@ use std::{\n use libsyntax2::ast;\n use libeditor::{LineIndex, FileSymbol};\n \n-use self::symbol_index::{FileSymbols, Query};\n+use self::symbol_index::{FileSymbols};\n+pub use self::symbol_index::Query;\n \n pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n \n@@ -89,14 +90,13 @@ impl World {\n         Ok(index.clone())\n     }\n \n-    pub fn world_symbols<'a>(&'a self, query: &str) -> impl Iterator<Item=(&'a Path, &'a FileSymbol)> + 'a\n+    pub fn world_symbols<'a>(&'a self, query: Query) -> impl Iterator<Item=(&'a Path, &'a FileSymbol)> + 'a\n     {\n-        let q = Query::new(query);\n         self.data.file_map.iter()\n             .flat_map(move |(path, data)| {\n                 let path: &'a Path = path.as_path();\n                 let symbols = data.symbols(path);\n-                q.process(symbols).map(move |s| (path, s))\n+                query.process(symbols).map(move |s| (path, s))\n             })\n     }\n "}, {"sha": "88d5c499520f420ff23e391f9dfbec4acf64b6e8", "filename": "crates/libanalysis/src/symbol_index.rs", "status": "modified", "additions": 36, "deletions": 20, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7fc91f41d8bd948cef3085d7c0d0ec92d1b2bc53/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc91f41d8bd948cef3085d7c0d0ec92d1b2bc53/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs?ref=7fc91f41d8bd948cef3085d7c0d0ec92d1b2bc53", "patch": "@@ -3,7 +3,7 @@ use libsyntax2::{\n     ast,\n     SyntaxKind::{self, *},\n };\n-use fst::{self, IntoStreamer};\n+use fst::{self, IntoStreamer, Streamer};\n \n #[derive(Debug)]\n pub(crate) struct FileSymbols {\n@@ -30,19 +30,30 @@ impl FileSymbols {\n     }\n }\n \n-pub(crate) struct Query {\n+pub struct Query {\n     query: String,\n-    all_symbols: bool,\n+    lowercased: String,\n+    only_types: bool,\n+    exact: bool,\n }\n \n impl Query {\n-    pub(crate) fn new(query: &str) -> Query {\n-        let all_symbols = query.contains(\"#\");\n-        let query: String = query.chars()\n-            .filter(|&c| c != '#')\n-            .flat_map(char::to_lowercase)\n-            .collect();\n-        Query { query, all_symbols }\n+    pub fn new(query: String) -> Query {\n+        let lowercased = query.to_lowercase();\n+        Query {\n+            query,\n+            lowercased,\n+            only_types: false,\n+            exact: false,\n+        }\n+    }\n+\n+    pub fn only_types(&mut self) {\n+        self.only_types = true;\n+    }\n+\n+    pub fn exact(&mut self) {\n+        self.exact = true;\n     }\n \n     pub(crate) fn process<'a>(\n@@ -55,16 +66,21 @@ impl Query {\n                 _ => false,\n             }\n         }\n-        let automaton = fst::automaton::Subsequence::new(&self.query);\n-        let all_symbols = self.all_symbols;\n-        file.map.search(automaton).into_stream()\n-            .into_values()\n-            .into_iter()\n-            .map(move |idx| {\n-                let idx = idx as usize;\n-                &file.symbols[idx]\n-            })\n-            .filter(move |s| all_symbols || is_type(s.kind))\n+        let automaton = fst::automaton::Subsequence::new(&self.lowercased);\n+        let mut stream = file.map.search(automaton).into_stream();\n+        let mut res = Vec::new();\n+        while let Some((_, idx)) = stream.next() {\n+            let idx = idx as usize;\n+            let symbol = &file.symbols[idx];\n+            if self.only_types && !is_type(symbol.kind) {\n+                continue;\n+            }\n+            if self.exact && symbol.name != self.query {\n+                continue;\n+            }\n+            res.push(symbol)\n+        }\n+        res.into_iter()\n     }\n }\n "}, {"sha": "f51909280ae2e14e68a690518ae75253f562c2d7", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7fc91f41d8bd948cef3085d7c0d0ec92d1b2bc53/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc91f41d8bd948cef3085d7c0d0ec92d1b2bc53/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=7fc91f41d8bd948cef3085d7c0d0ec92d1b2bc53", "patch": "@@ -5,7 +5,7 @@ use languageserver_types::{\n     Command, TextDocumentIdentifier, WorkspaceEdit,\n     SymbolInformation, Location,\n };\n-use libanalysis::{World};\n+use libanalysis::{World, Query};\n use libeditor;\n use libsyntax2::TextUnit;\n use serde_json::{to_value, from_value};\n@@ -100,7 +100,20 @@ pub fn handle_workspace_symbol(\n     params: req::WorkspaceSymbolParams,\n ) -> Result<Option<Vec<SymbolInformation>>> {\n     let mut acc = Vec::new();\n-    for (path, symbol) in world.world_symbols(&params.query).take(128) {\n+\n+    let query = {\n+        let all_symbols = params.query.contains(\"#\");\n+        let query: String = params.query.chars()\n+            .filter(|&c| c != '#')\n+            .collect();\n+        let mut q = Query::new(query);\n+        if !all_symbols {\n+            q.only_types();\n+        }\n+        q\n+    };\n+\n+    for (path, symbol) in world.world_symbols(query).take(128) {\n         let line_index = world.file_line_index(path)?;\n \n         let info = SymbolInformation {"}, {"sha": "79b179ef46fd0b67abdbef87173c8d945dcbcb23", "filename": "crates/smol_str/src/lib.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7fc91f41d8bd948cef3085d7c0d0ec92d1b2bc53/crates%2Fsmol_str%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc91f41d8bd948cef3085d7c0d0ec92d1b2bc53/crates%2Fsmol_str%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsmol_str%2Fsrc%2Flib.rs?ref=7fc91f41d8bd948cef3085d7c0d0ec92d1b2bc53", "patch": "@@ -49,6 +49,30 @@ impl<'a> PartialEq<SmolStr> for &'a str {\n     }\n }\n \n+impl PartialEq<String> for SmolStr {\n+    fn eq(&self, other: &String) -> bool {\n+        self.as_str() == other\n+    }\n+}\n+\n+impl PartialEq<SmolStr> for String {\n+    fn eq(&self, other: &SmolStr) -> bool {\n+        other == self\n+    }\n+}\n+\n+impl<'a> PartialEq<&'a String> for SmolStr {\n+    fn eq(&self, other: &&'a String) -> bool {\n+        self == *other\n+    }\n+}\n+\n+impl<'a> PartialEq<SmolStr> for &'a String {\n+    fn eq(&self, other: &SmolStr) -> bool {\n+        *self == other\n+    }\n+}\n+\n impl fmt::Debug for SmolStr {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(self.as_str(), f)"}]}