{"sha": "562afef2169482dd00b93fc1d5b4e736ab5b120e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MmFmZWYyMTY5NDgyZGQwMGI5M2ZjMWQ1YjRlNzM2YWI1YjEyMGU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-23T11:03:16Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-23T11:21:56Z"}, "message": "Rename builtin back to intrinsic\n\nAs per Graydon's request\n\nIssue #1981", "tree": {"sha": "2f20127ce0fdc8c9d94bec8f9b194d23743aaf8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f20127ce0fdc8c9d94bec8f9b194d23743aaf8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/562afef2169482dd00b93fc1d5b4e736ab5b120e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/562afef2169482dd00b93fc1d5b4e736ab5b120e", "html_url": "https://github.com/rust-lang/rust/commit/562afef2169482dd00b93fc1d5b4e736ab5b120e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/562afef2169482dd00b93fc1d5b4e736ab5b120e/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5024692d49be49b2efff452059f83efaebfd0ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5024692d49be49b2efff452059f83efaebfd0ee", "html_url": "https://github.com/rust-lang/rust/commit/f5024692d49be49b2efff452059f83efaebfd0ee"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "39b42ba2d7816904972606895373ed7c1b320361", "filename": "src/rustc/front/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/562afef2169482dd00b93fc1d5b4e736ab5b120e/src%2Frustc%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/562afef2169482dd00b93fc1d5b4e736ab5b120e/src%2Frustc%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fattr.rs?ref=562afef2169482dd00b93fc1d5b4e736ab5b120e", "patch": "@@ -237,8 +237,8 @@ fn native_abi(attrs: [ast::attribute]) -> either<str, ast::native_abi> {\n       option::none {\n         either::right(ast::native_abi_cdecl)\n       }\n-      option::some(\"rust-builtin\") {\n-        either::right(ast::native_abi_rust_builtin)\n+      option::some(\"rust-builtin\") | option::some(\"rust-intrinsic\") {\n+        either::right(ast::native_abi_rust_intrinsic)\n       }\n       option::some(\"cdecl\") {\n         either::right(ast::native_abi_cdecl)"}, {"sha": "3e9e5d842abe92703e209c1211e54a4903e9b58b", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/562afef2169482dd00b93fc1d5b4e736ab5b120e/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/562afef2169482dd00b93fc1d5b4e736ab5b120e/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=562afef2169482dd00b93fc1d5b4e736ab5b120e", "patch": "@@ -677,7 +677,7 @@ fn encode_info_for_native_item(ecx: @encode_ctxt, ebml_w: ebml::writer,\n         encode_family(ebml_w, purity_fn_family(fn_decl.purity));\n         encode_type_param_bounds(ebml_w, ecx, tps);\n         encode_type(ecx, ebml_w, node_id_to_type(ecx.ccx.tcx, nitem.id));\n-        if abi == native_abi_rust_builtin {\n+        if abi == native_abi_rust_intrinsic {\n             astencode::encode_inlined_item(ecx, ebml_w, path,\n                                            ii_native(nitem));\n         } else {"}, {"sha": "d2186a27ee837b51c27f6bfd3eee3c1f65f09624", "filename": "src/rustc/middle/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/562afef2169482dd00b93fc1d5b4e736ab5b120e/src%2Frustc%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/562afef2169482dd00b93fc1d5b4e736ab5b120e/src%2Frustc%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fast_map.rs?ref=562afef2169482dd00b93fc1d5b4e736ab5b120e", "patch": "@@ -92,7 +92,7 @@ fn map_decoded_item(sess: session, map: map, path: path, ii: inlined_item) {\n     alt ii {\n       ii_item(i) { /* fallthrough */ }\n       ii_native(i) {\n-        cx.map.insert(i.id, node_native_item(i, native_abi_rust_builtin,\n+        cx.map.insert(i.id, node_native_item(i, native_abi_rust_intrinsic,\n                                              @path));\n       }\n       ii_method(impl_did, m) {"}, {"sha": "3ccbaed873c0f4c7ddaaf4698df9b2719c52f755", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/562afef2169482dd00b93fc1d5b4e736ab5b120e/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/562afef2169482dd00b93fc1d5b4e736ab5b120e/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=562afef2169482dd00b93fc1d5b4e736ab5b120e", "patch": "@@ -124,7 +124,7 @@ fn check_ctypes(tcx: ty::ctxt, crate: @ast::crate) {\n     fn check_item(tcx: ty::ctxt, it: @ast::item) {\n         alt it.node {\n           ast::item_native_mod(nmod) if attr::native_abi(it.attrs) !=\n-              either::right(ast::native_abi_rust_builtin) {\n+              either::right(ast::native_abi_rust_intrinsic) {\n             for ni in nmod.items {\n                 alt ni.node {\n                   ast::native_item_fn(decl, tps) {"}, {"sha": "1ddeff6a04b9bafe52606f8407c02b858c56c70d", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/562afef2169482dd00b93fc1d5b4e736ab5b120e/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/562afef2169482dd00b93fc1d5b4e736ab5b120e/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=562afef2169482dd00b93fc1d5b4e736ab5b120e", "patch": "@@ -1947,7 +1947,7 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id, real_substs: [ty::t],\n       }\n       ast_map::node_variant(v, _, pt) { (pt, v.node.name) }\n       ast_map::node_method(m, _, pt) { (pt, m.ident) }\n-      ast_map::node_native_item(i, ast::native_abi_rust_builtin, pt)\n+      ast_map::node_native_item(i, ast::native_abi_rust_intrinsic, pt)\n       { (pt, i.ident) }\n       ast_map::node_native_item(_, abi, _) {\n         // Natives don't have to be monomorphized.\n@@ -1981,8 +1981,8 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id, real_substs: [ty::t],\n         trans_fn(ccx, pt, d, body, lldecl, no_self, psubsts, d_id, none);\n       }\n       ast_map::node_native_item(i, _, _) {\n-        native::trans_builtin(ccx, lldecl, i, pt, option::get(psubsts),\n-                              ref_id);\n+        native::trans_intrinsic(ccx, lldecl, i, pt, option::get(psubsts),\n+                                ref_id);\n       }\n       ast_map::node_variant(v, enum_item, _) {\n         let tvs = ty::enum_variants(ccx.tcx, local_def(enum_item.id));"}, {"sha": "97d5a361c96d30f4abda451e5654df8aebaadb36", "filename": "src/rustc/middle/trans/native.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/562afef2169482dd00b93fc1d5b4e736ab5b120e/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/562afef2169482dd00b93fc1d5b4e736ab5b120e/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs?ref=562afef2169482dd00b93fc1d5b4e736ab5b120e", "patch": "@@ -16,7 +16,7 @@ import std::map::hashmap;\n import util::ppaux::ty_to_str;\n \n export link_name, trans_native_mod, register_crust_fn, trans_crust_fn,\n-       decl_native_fn, trans_builtin;\n+       decl_native_fn, trans_intrinsic;\n \n enum x86_64_reg_class {\n     no_class,\n@@ -730,7 +730,7 @@ fn trans_native_mod(ccx: @crate_ctxt,\n     }\n \n     let mut cc = alt abi {\n-      ast::native_abi_rust_builtin { ret; }\n+      ast::native_abi_rust_intrinsic { ret; }\n       ast::native_abi_cdecl { lib::llvm::CCallConv }\n       ast::native_abi_stdcall { lib::llvm::X86StdcallCallConv }\n     };\n@@ -752,9 +752,9 @@ fn trans_native_mod(ccx: @crate_ctxt,\n     }\n }\n \n-fn trans_builtin(ccx: @crate_ctxt, decl: ValueRef, item: @ast::native_item,\n-                 path: ast_map::path, substs: param_substs,\n-                 ref_id: option<ast::node_id>) {\n+fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::native_item,\n+                   path: ast_map::path, substs: param_substs,\n+                   ref_id: option<ast::node_id>) {\n     let fcx = new_fn_ctxt_w_id(ccx, path, decl, item.id, none,\n                                some(substs), some(item.span));\n     let bcx = top_scope_block(fcx, none), lltop = bcx.llbb;"}, {"sha": "8120056b13a3d2f131a4a81a15e7d4953b1c5cd7", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/562afef2169482dd00b93fc1d5b4e736ab5b120e/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/562afef2169482dd00b93fc1d5b4e736ab5b120e/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=562afef2169482dd00b93fc1d5b4e736ab5b120e", "patch": "@@ -68,7 +68,7 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n         uint::range(0u, n_tps) {|n| cx.uses[n] |= use_repr;}\n       }\n       ast_map::node_native_item(i@@{node: native_item_fn(_, _), _}, abi, _) {\n-        if abi == native_abi_rust_builtin {\n+        if abi == native_abi_rust_intrinsic {\n             let flags = alt check i.ident {\n               \"size_of\" | \"align_of\" | \"init\" |\n               \"reinterpret_cast\" { use_repr }"}, {"sha": "6e0b39373a1d92c74f2ffa2ab915aa494b220719", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/562afef2169482dd00b93fc1d5b4e736ab5b120e/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/562afef2169482dd00b93fc1d5b4e736ab5b120e/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=562afef2169482dd00b93fc1d5b4e736ab5b120e", "patch": "@@ -948,8 +948,8 @@ mod collect {\n           ast::item_mod(_) {}\n           ast::item_native_mod(m) {\n             if front::attr::native_abi(it.attrs) ==\n-               either::right(ast::native_abi_rust_builtin) {\n-                for item in m.items { check_builtin_type(tcx, item); }\n+               either::right(ast::native_abi_rust_intrinsic) {\n+                for item in m.items { check_intrinsic_type(tcx, item); }\n             }\n           }\n           ast::item_enum(variants, ty_params) {\n@@ -1414,7 +1414,7 @@ mod writeback {\n     }\n }\n \n-fn check_builtin_type(tcx: ty::ctxt, it: @ast::native_item) {\n+fn check_intrinsic_type(tcx: ty::ctxt, it: @ast::native_item) {\n     fn param(tcx: ty::ctxt, n: uint) -> ty::t {\n         ty::mk_param(tcx, n, local_def(0))\n     }\n@@ -1432,7 +1432,7 @@ fn check_builtin_type(tcx: ty::ctxt, it: @ast::native_item) {\n       \"addr_of\" { (1u, [arg(ast::by_ref, param(tcx, 0u))],\n                    ty::mk_imm_ptr(tcx, param(tcx, 0u))) }\n       other {\n-        tcx.sess.span_err(it.span, \"unrecognized builtin function: `\" +\n+        tcx.sess.span_err(it.span, \"unrecognized intrinsic function: `\" +\n                           other + \"`\");\n         ret;\n       }\n@@ -1444,11 +1444,11 @@ fn check_builtin_type(tcx: ty::ctxt, it: @ast::native_item) {\n     let i_ty = ty_of_native_item(tcx, m_collect, it);\n     let i_n_tps = (*i_ty.bounds).len();\n     if i_n_tps != n_tps {\n-        tcx.sess.span_err(it.span, #fmt(\"builtin function has wrong number \\\n+        tcx.sess.span_err(it.span, #fmt(\"intrinsic has wrong number \\\n                                          of type parameters. found %u, \\\n                                          expected %u\", i_n_tps, n_tps));\n     } else if !ty::same_type(tcx, i_ty.ty, fty) {\n-        tcx.sess.span_err(it.span, #fmt(\"builtin function has wrong type. \\\n+        tcx.sess.span_err(it.span, #fmt(\"intrinsic has wrong type. \\\n                                          expected %s\", ty_to_str(tcx, fty)));\n     }\n }"}, {"sha": "1f0b40925bcd0b9c4dd23ef2643546854d42d00d", "filename": "src/rustc/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/562afef2169482dd00b93fc1d5b4e736ab5b120e/src%2Frustc%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/562afef2169482dd00b93fc1d5b4e736ab5b120e/src%2Frustc%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fast.rs?ref=562afef2169482dd00b93fc1d5b4e736ab5b120e", "patch": "@@ -556,7 +556,7 @@ type _mod = {view_items: [@view_item], items: [@item]};\n \n #[auto_serialize]\n enum native_abi {\n-    native_abi_rust_builtin,\n+    native_abi_rust_intrinsic,\n     native_abi_cdecl,\n     native_abi_stdcall,\n }"}]}