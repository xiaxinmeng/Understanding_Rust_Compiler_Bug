{"sha": "8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMzM1MjFmMTllODRhODYxOWU1YjRiM2JmOWJiMmJmNTA4Y2NiZDI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-06-13T20:32:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-13T20:32:21Z"}, "message": "Merge pull request #1669 from topecongiro/issue-1668\n\nUse correct spans when rewrting attributes", "tree": {"sha": "8fcf8329c5866425cb1e920163f1ef44b0c64060", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fcf8329c5866425cb1e920163f1ef44b0c64060"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2", "html_url": "https://github.com/rust-lang/rust/commit/8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "142bec131198d06c6c0a6255bcd2f174111d1573", "url": "https://api.github.com/repos/rust-lang/rust/commits/142bec131198d06c6c0a6255bcd2f174111d1573", "html_url": "https://github.com/rust-lang/rust/commit/142bec131198d06c6c0a6255bcd2f174111d1573"}, {"sha": "6047179ab08eb5a8e11f85d804806651196f31ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/6047179ab08eb5a8e11f85d804806651196f31ad", "html_url": "https://github.com/rust-lang/rust/commit/6047179ab08eb5a8e11f85d804806651196f31ad"}], "stats": {"total": 111, "additions": 99, "deletions": 12}, "files": [{"sha": "1e92b5b9368e5b26956635e26b90b1fd2d9fca1b", "filename": "src/expr.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2", "patch": "@@ -47,16 +47,45 @@ enum ExprType {\n     SubExpression,\n }\n \n+fn combine_attr_and_expr(\n+    context: &RewriteContext,\n+    shape: Shape,\n+    attr_str: &str,\n+    expr_str: &str,\n+) -> String {\n+    let separator = if attr_str.is_empty() {\n+        String::new()\n+    } else {\n+        if expr_str.contains('\\n') || attr_str.contains('\\n') ||\n+            attr_str.len() + expr_str.len() > shape.width\n+        {\n+            format!(\"\\n{}\", shape.indent.to_string(context.config))\n+        } else {\n+            String::from(\" \")\n+        }\n+    };\n+    format!(\"{}{}{}\", attr_str, separator, expr_str)\n+}\n+\n fn format_expr(\n     expr: &ast::Expr,\n     expr_type: ExprType,\n     context: &RewriteContext,\n     shape: Shape,\n ) -> Option<String> {\n+    let attr_rw = (&*expr.attrs).rewrite(context, shape);\n     if contains_skip(&*expr.attrs) {\n-        return Some(context.snippet(expr.span));\n+        if let Some(attr_str) = attr_rw {\n+            return Some(combine_attr_and_expr(\n+                context,\n+                shape,\n+                &attr_str,\n+                &context.snippet(expr.span),\n+            ));\n+        } else {\n+            return Some(context.snippet(expr.span));\n+        }\n     }\n-    let attr_rw = (&*expr.attrs).rewrite(context, shape);\n     let expr_rw = match expr.node {\n         ast::ExprKind::Array(ref expr_vec) => {\n             rewrite_array(\n@@ -289,9 +318,8 @@ fn format_expr(\n     };\n     match (attr_rw, expr_rw) {\n         (Some(attr_str), Some(expr_str)) => {\n-            let space = if attr_str.is_empty() { \"\" } else { \" \" };\n             recover_comment_removed(\n-                format!(\"{}{}{}\", attr_str, space, expr_str),\n+                combine_attr_and_expr(context, shape, &attr_str, &expr_str),\n                 expr.span,\n                 context,\n                 shape,"}, {"sha": "5144feed4742b47ff04f58e70a454656ba43dee3", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2", "patch": "@@ -1684,7 +1684,7 @@ fn rewrite_explicit_self(\n                 Some(ref l) => {\n                     let lifetime_str = try_opt!(l.rewrite(\n                         context,\n-                        Shape::legacy(usize::max_value(), Indent::empty()),\n+                        Shape::legacy(context.config.max_width(), Indent::empty()),\n                     ));\n                     Some(format!(\"&{} {}self\", lifetime_str, mut_str))\n                 }"}, {"sha": "1775752efce409e5151b7179ee82870a1fb2965b", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2", "patch": "@@ -148,8 +148,12 @@ impl Indent {\n     }\n \n     pub fn block_unindent(mut self, config: &Config) -> Indent {\n-        self.block_indent -= config.tab_spaces();\n-        self\n+        if self.block_indent < config.tab_spaces() {\n+            Indent::new(self.block_indent, 0)\n+        } else {\n+            self.block_indent -= config.tab_spaces();\n+            self\n+        }\n     }\n \n     pub fn width(&self) -> usize {"}, {"sha": "7e3fed3faff88e8a263cfedb2a1438fda861947e", "filename": "src/visitor.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2", "patch": "@@ -82,15 +82,26 @@ impl<'a> FmtVisitor<'a> {\n             ast::StmtKind::Item(ref item) => {\n                 self.visit_item(item);\n             }\n-            ast::StmtKind::Local(..) |\n-            ast::StmtKind::Expr(..) |\n-            ast::StmtKind::Semi(..) => {\n+            ast::StmtKind::Local(..) => {\n                 let rewrite = stmt.rewrite(\n                     &self.get_context(),\n                     Shape::indented(self.block_indent, self.config),\n                 );\n                 self.push_rewrite(stmt.span, rewrite);\n             }\n+            ast::StmtKind::Expr(ref expr) |\n+            ast::StmtKind::Semi(ref expr) => {\n+                let rewrite = stmt.rewrite(\n+                    &self.get_context(),\n+                    Shape::indented(self.block_indent, self.config),\n+                );\n+                let span = if expr.attrs.is_empty() {\n+                    stmt.span\n+                } else {\n+                    mk_sp(expr.attrs[0].span.lo, stmt.span.hi)\n+                };\n+                self.push_rewrite(span, rewrite)\n+            }\n             ast::StmtKind::Mac(ref mac) => {\n                 let (ref mac, _macro_style, _) = **mac;\n                 self.visit_mac(mac, None, MacroPosition::Statement);\n@@ -702,6 +713,12 @@ impl Rewrite for ast::NestedMetaItem {\n     }\n }\n \n+fn count_missing_closing_parens(s: &str) -> u32 {\n+    let op_parens = s.chars().filter(|c| *c == '(').count();\n+    let cl_parens = s.chars().filter(|c| *c == ')').count();\n+    op_parens.checked_sub(cl_parens).unwrap_or(0) as u32\n+}\n+\n impl Rewrite for ast::MetaItem {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         Some(match self.node {\n@@ -712,15 +729,21 @@ impl Rewrite for ast::MetaItem {\n                 let item_shape = try_opt!(shape.shrink_left(name.len() + 3).and_then(\n                     |s| s.sub_width(2),\n                 ));\n+                let hi = self.span.hi +\n+                    BytePos(count_missing_closing_parens(&context.snippet(self.span)));\n                 let items = itemize_list(\n                     context.codemap,\n                     list.iter(),\n                     \")\",\n                     |nested_meta_item| nested_meta_item.span.lo,\n-                    |nested_meta_item| nested_meta_item.span.hi,\n+                    // FIXME: Span from MetaItem is missing closing parens.\n+                    |nested_meta_item| {\n+                        let snippet = context.snippet(nested_meta_item.span);\n+                        nested_meta_item.span.hi + BytePos(count_missing_closing_parens(&snippet))\n+                    },\n                     |nested_meta_item| nested_meta_item.rewrite(context, item_shape),\n                     self.span.lo,\n-                    self.span.hi,\n+                    hi,\n                 );\n                 let item_vec = items.collect::<Vec<_>>();\n                 let fmt = ListFormatting {"}, {"sha": "313dbbb1276352a85e642677a6053a69c51b0777", "filename": "tests/source/attrib.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2/tests%2Fsource%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2/tests%2Fsource%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fattrib.rs?ref=8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2", "patch": "@@ -52,3 +52,19 @@ struct Foo {\n     # [ derive ( Clone , PartialEq , Debug , Deserialize , Serialize ) ]\n     foo: usize,\n }\n+\n+// #1668\n+\n+/// Default path (*nix)\n+#[cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))]\n+fn foo() {\n+    #[cfg(target_os = \"freertos\")]\n+    match port_id {\n+        'a' | 'A' => GpioPort { port_address: GPIO_A },\n+        'b' | 'B' => GpioPort { port_address: GPIO_B },\n+        _ => panic!(),\n+    }\n+\n+    #[cfg_attr(not(target_os = \"freertos\"), allow(unused_variables))]\n+    let x = 3;\n+}"}, {"sha": "ed152a8124eacdcb0860e60e04a40f6ffee870d5", "filename": "tests/target/attrib.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2/tests%2Ftarget%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2/tests%2Ftarget%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fattrib.rs?ref=8a33521f19e84a8619e5b4b3bf9bb2bf508ccbd2", "patch": "@@ -48,3 +48,19 @@ struct Foo {\n     #[derive(Clone, PartialEq, Debug, Deserialize, Serialize)]\n     foo: usize,\n }\n+\n+// #1668\n+\n+/// Default path (*nix)\n+#[cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))]\n+fn foo() {\n+    #[cfg(target_os = \"freertos\")]\n+    match port_id {\n+        'a' | 'A' => GpioPort { port_address: GPIO_A },\n+        'b' | 'B' => GpioPort { port_address: GPIO_B },\n+        _ => panic!(),\n+    }\n+\n+    #[cfg_attr(not(target_os = \"freertos\"), allow(unused_variables))]\n+    let x = 3;\n+}"}]}