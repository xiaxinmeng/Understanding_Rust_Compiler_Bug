{"sha": "a23af89447d467c38ed2e5c9358cc81b47dc346d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyM2FmODk0NDdkNDY3YzM4ZWQyZTVjOTM1OGNjODFiNDdkYzM0NmQ=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2021-09-03T06:34:34Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2021-09-03T06:34:34Z"}, "message": "Make `approx_const` MSRV aware\n\nFixes #7623.", "tree": {"sha": "084a189b59585bae335a02e0018b9bc3766c0b77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/084a189b59585bae335a02e0018b9bc3766c0b77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a23af89447d467c38ed2e5c9358cc81b47dc346d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a23af89447d467c38ed2e5c9358cc81b47dc346d", "html_url": "https://github.com/rust-lang/rust/commit/a23af89447d467c38ed2e5c9358cc81b47dc346d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a23af89447d467c38ed2e5c9358cc81b47dc346d/comments", "author": null, "committer": null, "parents": [{"sha": "265b8ec622e0ab9c65109ba6b98646ecf12868c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/265b8ec622e0ab9c65109ba6b98646ecf12868c7", "html_url": "https://github.com/rust-lang/rust/commit/265b8ec622e0ab9c65109ba6b98646ecf12868c7"}], "stats": {"total": 139, "additions": 81, "deletions": 58}, "files": [{"sha": "069a10e9b3aeb7f8f1499457cff00709b164253c", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 70, "deletions": 53, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/a23af89447d467c38ed2e5c9358cc81b47dc346d/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23af89447d467c38ed2e5c9358cc81b47dc346d/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=a23af89447d467c38ed2e5c9358cc81b47dc346d", "patch": "@@ -1,8 +1,10 @@\n use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::{meets_msrv, msrvs};\n use rustc_ast::ast::{FloatTy, LitFloatType, LitKind};\n use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol;\n use std::f64::consts as f64;\n \n@@ -36,68 +38,83 @@ declare_clippy_lint! {\n     \"the approximate of a known float constant (in `std::fXX::consts`)\"\n }\n \n-// Tuples are of the form (constant, name, min_digits)\n-const KNOWN_CONSTS: [(f64, &str, usize); 18] = [\n-    (f64::E, \"E\", 4),\n-    (f64::FRAC_1_PI, \"FRAC_1_PI\", 4),\n-    (f64::FRAC_1_SQRT_2, \"FRAC_1_SQRT_2\", 5),\n-    (f64::FRAC_2_PI, \"FRAC_2_PI\", 5),\n-    (f64::FRAC_2_SQRT_PI, \"FRAC_2_SQRT_PI\", 5),\n-    (f64::FRAC_PI_2, \"FRAC_PI_2\", 5),\n-    (f64::FRAC_PI_3, \"FRAC_PI_3\", 5),\n-    (f64::FRAC_PI_4, \"FRAC_PI_4\", 5),\n-    (f64::FRAC_PI_6, \"FRAC_PI_6\", 5),\n-    (f64::FRAC_PI_8, \"FRAC_PI_8\", 5),\n-    (f64::LN_2, \"LN_2\", 5),\n-    (f64::LN_10, \"LN_10\", 5),\n-    (f64::LOG2_10, \"LOG2_10\", 5),\n-    (f64::LOG2_E, \"LOG2_E\", 5),\n-    (f64::LOG10_2, \"LOG10_2\", 5),\n-    (f64::LOG10_E, \"LOG10_E\", 5),\n-    (f64::PI, \"PI\", 3),\n-    (f64::SQRT_2, \"SQRT_2\", 5),\n+// Tuples are of the form (constant, name, min_digits, msrv)\n+const KNOWN_CONSTS: [(f64, &str, usize, Option<RustcVersion>); 18] = [\n+    (f64::E, \"E\", 4, None),\n+    (f64::FRAC_1_PI, \"FRAC_1_PI\", 4, None),\n+    (f64::FRAC_1_SQRT_2, \"FRAC_1_SQRT_2\", 5, None),\n+    (f64::FRAC_2_PI, \"FRAC_2_PI\", 5, None),\n+    (f64::FRAC_2_SQRT_PI, \"FRAC_2_SQRT_PI\", 5, None),\n+    (f64::FRAC_PI_2, \"FRAC_PI_2\", 5, None),\n+    (f64::FRAC_PI_3, \"FRAC_PI_3\", 5, None),\n+    (f64::FRAC_PI_4, \"FRAC_PI_4\", 5, None),\n+    (f64::FRAC_PI_6, \"FRAC_PI_6\", 5, None),\n+    (f64::FRAC_PI_8, \"FRAC_PI_8\", 5, None),\n+    (f64::LN_2, \"LN_2\", 5, None),\n+    (f64::LN_10, \"LN_10\", 5, None),\n+    (f64::LOG2_10, \"LOG2_10\", 5, Some(msrvs::LOG2_10)),\n+    (f64::LOG2_E, \"LOG2_E\", 5, None),\n+    (f64::LOG10_2, \"LOG10_2\", 5, Some(msrvs::LOG10_2)),\n+    (f64::LOG10_E, \"LOG10_E\", 5, None),\n+    (f64::PI, \"PI\", 3, None),\n+    (f64::SQRT_2, \"SQRT_2\", 5, None),\n ];\n \n-declare_lint_pass!(ApproxConstant => [APPROX_CONSTANT]);\n+pub struct ApproxConstant {\n+    msrv: Option<RustcVersion>,\n+}\n \n-impl<'tcx> LateLintPass<'tcx> for ApproxConstant {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n-        if let ExprKind::Lit(lit) = &e.kind {\n-            check_lit(cx, &lit.node, e);\n+impl ApproxConstant {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+\n+    fn check_lit(&self, cx: &LateContext<'_>, lit: &LitKind, e: &Expr<'_>) {\n+        match *lit {\n+            LitKind::Float(s, LitFloatType::Suffixed(fty)) => match fty {\n+                FloatTy::F32 => self.check_known_consts(cx, e, s, \"f32\"),\n+                FloatTy::F64 => self.check_known_consts(cx, e, s, \"f64\"),\n+            },\n+            LitKind::Float(s, LitFloatType::Unsuffixed) => self.check_known_consts(cx, e, s, \"f{32, 64}\"),\n+            _ => (),\n         }\n     }\n-}\n \n-fn check_lit(cx: &LateContext<'_>, lit: &LitKind, e: &Expr<'_>) {\n-    match *lit {\n-        LitKind::Float(s, LitFloatType::Suffixed(fty)) => match fty {\n-            FloatTy::F32 => check_known_consts(cx, e, s, \"f32\"),\n-            FloatTy::F64 => check_known_consts(cx, e, s, \"f64\"),\n-        },\n-        LitKind::Float(s, LitFloatType::Unsuffixed) => check_known_consts(cx, e, s, \"f{32, 64}\"),\n-        _ => (),\n+    fn check_known_consts(&self, cx: &LateContext<'_>, e: &Expr<'_>, s: symbol::Symbol, module: &str) {\n+        let s = s.as_str();\n+        if s.parse::<f64>().is_ok() {\n+            for &(constant, name, min_digits, msrv) in &KNOWN_CONSTS {\n+                if is_approx_const(constant, &s, min_digits)\n+                    && msrv.as_ref().map_or(true, |msrv| meets_msrv(self.msrv.as_ref(), msrv))\n+                {\n+                    span_lint(\n+                        cx,\n+                        APPROX_CONSTANT,\n+                        e.span,\n+                        &format!(\n+                            \"approximate value of `{}::consts::{}` found. \\\n+                             Consider using it directly\",\n+                            module, &name\n+                        ),\n+                    );\n+                    return;\n+                }\n+            }\n+        }\n     }\n }\n \n-fn check_known_consts(cx: &LateContext<'_>, e: &Expr<'_>, s: symbol::Symbol, module: &str) {\n-    let s = s.as_str();\n-    if s.parse::<f64>().is_ok() {\n-        for &(constant, name, min_digits) in &KNOWN_CONSTS {\n-            if is_approx_const(constant, &s, min_digits) {\n-                span_lint(\n-                    cx,\n-                    APPROX_CONSTANT,\n-                    e.span,\n-                    &format!(\n-                        \"approximate value of `{}::consts::{}` found. \\\n-                         Consider using it directly\",\n-                        module, &name\n-                    ),\n-                );\n-                return;\n-            }\n+impl_lint_pass!(ApproxConstant => [APPROX_CONSTANT]);\n+\n+impl<'tcx> LateLintPass<'tcx> for ApproxConstant {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n+        if let ExprKind::Lit(lit) = &e.kind {\n+            self.check_lit(cx, &lit.node, e);\n         }\n     }\n+\n+    extract_msrv_attr!(LateContext);\n }\n \n /// Returns `false` if the number of significant figures in `value` are"}, {"sha": "0d9b81e3d75ee5381b0d8fad4b60475d36114b6e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a23af89447d467c38ed2e5c9358cc81b47dc346d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23af89447d467c38ed2e5c9358cc81b47dc346d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a23af89447d467c38ed2e5c9358cc81b47dc346d", "patch": "@@ -1865,7 +1865,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(needless_bool::NeedlessBool));\n     store.register_late_pass(|| Box::new(needless_bool::BoolComparison));\n     store.register_late_pass(|| Box::new(needless_for_each::NeedlessForEach));\n-    store.register_late_pass(|| Box::new(approx_const::ApproxConstant));\n     store.register_late_pass(|| Box::new(misc::MiscLints));\n     store.register_late_pass(|| Box::new(eta_reduction::EtaReduction));\n     store.register_late_pass(|| Box::new(identity_op::IdentityOp));\n@@ -1894,6 +1893,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     });\n \n     let avoid_breaking_exported_api = conf.avoid_breaking_exported_api;\n+    store.register_late_pass(move || Box::new(approx_const::ApproxConstant::new(msrv)));\n     store.register_late_pass(move || Box::new(methods::Methods::new(avoid_breaking_exported_api, msrv)));\n     store.register_late_pass(move || Box::new(matches::Matches::new(msrv)));\n     store.register_early_pass(move || Box::new(manual_non_exhaustive::ManualNonExhaustive::new(msrv)));"}, {"sha": "6fab17f07fe0b4d5060b91290bbaa6f4993a81dc", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a23af89447d467c38ed2e5c9358cc81b47dc346d/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23af89447d467c38ed2e5c9358cc81b47dc346d/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=a23af89447d467c38ed2e5c9358cc81b47dc346d", "patch": "@@ -17,6 +17,7 @@ msrv_aliases! {\n     1,50,0 { BOOL_THEN }\n     1,46,0 { CONST_IF_MATCH }\n     1,45,0 { STR_STRIP_PREFIX }\n+    1,43,0 { LOG2_10, LOG10_2 }\n     1,42,0 { MATCHES_MACRO }\n     1,41,0 { RE_REBALANCING_COHERENCE, RESULT_MAP_OR_ELSE }\n     1,40,0 { MEM_TAKE, NON_EXHAUSTIVE, OPTION_AS_DEREF }"}, {"sha": "8d9fc5a864d751bf30b27da1990348ab0eb5c205", "filename": "tests/ui/min_rust_version_attr.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a23af89447d467c38ed2e5c9358cc81b47dc346d/tests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23af89447d467c38ed2e5c9358cc81b47dc346d/tests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.rs?ref=a23af89447d467c38ed2e5c9358cc81b47dc346d", "patch": "@@ -4,6 +4,11 @@\n \n use std::ops::{Deref, RangeFrom};\n \n+fn approx_const() {\n+    let log2_10 = 3.321928094887362;\n+    let log10_2 = 0.301029995663981;\n+}\n+\n fn cloned_instead_of_copied() {\n     let _ = [1].iter().cloned();\n }"}, {"sha": "360dcfb230c6563a6c5de5d5b6e322f70473dac5", "filename": "tests/ui/min_rust_version_attr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a23af89447d467c38ed2e5c9358cc81b47dc346d/tests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a23af89447d467c38ed2e5c9358cc81b47dc346d/tests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.stderr?ref=a23af89447d467c38ed2e5c9358cc81b47dc346d", "patch": "@@ -1,12 +1,12 @@\n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:160:24\n+  --> $DIR/min_rust_version_attr.rs:165:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::manual-strip` implied by `-D warnings`\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:159:9\n+  --> $DIR/min_rust_version_attr.rs:164:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,13 +17,13 @@ LL ~             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:172:24\n+  --> $DIR/min_rust_version_attr.rs:177:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:171:9\n+  --> $DIR/min_rust_version_attr.rs:176:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}