{"sha": "07112ca62d378c90d107448b9040faddeea9a445", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MTEyY2E2MmQzNzhjOTBkMTA3NDQ4YjkwNDBmYWRkZWVhOWE0NDU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-26T03:28:25Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-30T22:01:06Z"}, "message": "Suggest `if let x = y` when encountering `if x = y`\n\nDetect potential cases where `if let` was meant but `let` was left out.\n\nFix #44990.", "tree": {"sha": "a34fa27b1d4054c09e2a99be5efa25f4a5c8e0e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a34fa27b1d4054c09e2a99be5efa25f4a5c8e0e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07112ca62d378c90d107448b9040faddeea9a445", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07112ca62d378c90d107448b9040faddeea9a445", "html_url": "https://github.com/rust-lang/rust/commit/07112ca62d378c90d107448b9040faddeea9a445", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07112ca62d378c90d107448b9040faddeea9a445/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85fbf49ce0e2274d0acf798f6e703747674feec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/85fbf49ce0e2274d0acf798f6e703747674feec3", "html_url": "https://github.com/rust-lang/rust/commit/85fbf49ce0e2274d0acf798f6e703747674feec3"}], "stats": {"total": 370, "additions": 268, "deletions": 102}, "files": [{"sha": "2b2123e295d097439131b07b45e872875a405052", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07112ca62d378c90d107448b9040faddeea9a445/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07112ca62d378c90d107448b9040faddeea9a445/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=07112ca62d378c90d107448b9040faddeea9a445", "patch": "@@ -378,6 +378,9 @@ struct DiagnosticMetadata<'ast> {\n \n     /// Only used for better errors on `let <pat>: <expr, not type>;`.\n     current_let_binding: Option<(Span, Option<Span>, Option<Span>)>,\n+\n+    /// Used to detect possible `if let` written without `let` and to provide structured suggestion.\n+    in_if_condition: Option<&'ast Expr>,\n }\n \n struct LateResolutionVisitor<'a, 'b, 'ast> {\n@@ -403,7 +406,7 @@ struct LateResolutionVisitor<'a, 'b, 'ast> {\n     ///\n     /// In particular, rustdoc uses this to avoid giving errors for `cfg()` items.\n     /// In most cases this will be `None`, in which case errors will always be reported.\n-    /// If it is `Some(_)`, then it will be updated when entering a nested function or trait body.\n+    /// If it is `true`, then it will be updated when entering a nested function or trait body.\n     in_func_body: bool,\n }\n \n@@ -2199,7 +2202,9 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n             ExprKind::If(ref cond, ref then, ref opt_else) => {\n                 self.with_rib(ValueNS, NormalRibKind, |this| {\n+                    let old = this.diagnostic_metadata.in_if_condition.replace(cond);\n                     this.visit_expr(cond);\n+                    this.diagnostic_metadata.in_if_condition = old;\n                     this.visit_block(then);\n                 });\n                 if let Some(expr) = opt_else {"}, {"sha": "8cb6b6553ffe0aa1295596c5eb05953ba5341c22", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/07112ca62d378c90d107448b9040faddeea9a445/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07112ca62d378c90d107448b9040faddeea9a445/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=07112ca62d378c90d107448b9040faddeea9a445", "patch": "@@ -176,6 +176,19 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n         let code = source.error_code(res.is_some());\n         let mut err = self.r.session.struct_span_err_with_code(base_span, &base_msg, code);\n \n+        match (source, self.diagnostic_metadata.in_if_condition) {\n+            (PathSource::Expr(_), Some(Expr { span, kind: ExprKind::Assign(..), .. })) => {\n+                err.span_suggestion_verbose(\n+                    span.shrink_to_lo(),\n+                    \"you might have meant to use pattern matching\",\n+                    \"let \".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+                self.r.session.if_let_suggestions.borrow_mut().insert(*span);\n+            }\n+            _ => {}\n+        }\n+\n         let is_assoc_fn = self.self_type_is_available(span);\n         // Emit help message for fake-self from other languages (e.g., `this` in Javascript).\n         if [\"this\", \"my\"].contains(&&*item_str.as_str()) && is_assoc_fn {"}, {"sha": "53c3e4df9761ecd30416d8cb75256fc20391df96", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07112ca62d378c90d107448b9040faddeea9a445/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07112ca62d378c90d107448b9040faddeea9a445/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=07112ca62d378c90d107448b9040faddeea9a445", "patch": "@@ -213,6 +213,9 @@ pub struct Session {\n \n     known_attrs: Lock<MarkedAttrs>,\n     used_attrs: Lock<MarkedAttrs>,\n+\n+    /// `Span`s for `if` conditions that we have suggested turning into `if let`.\n+    pub if_let_suggestions: Lock<FxHashSet<Span>>,\n }\n \n pub struct PerfStats {\n@@ -1354,6 +1357,7 @@ pub fn build_session(\n         target_features: FxHashSet::default(),\n         known_attrs: Lock::new(MarkedAttrs::new()),\n         used_attrs: Lock::new(MarkedAttrs::new()),\n+        if_let_suggestions: Default::default(),\n     };\n \n     validate_commandline_args_with_session_available(&sess);"}, {"sha": "cc8a6953f13977ee67aabd27cc5404427087a1fa", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 42, "deletions": 13, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/07112ca62d378c90d107448b9040faddeea9a445/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07112ca62d378c90d107448b9040faddeea9a445/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=07112ca62d378c90d107448b9040faddeea9a445", "patch": "@@ -764,30 +764,59 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         rhs: &'tcx hir::Expr<'tcx>,\n         span: &Span,\n     ) -> Ty<'tcx> {\n-        let lhs_ty = self.check_expr_with_needs(&lhs, Needs::MutPlace);\n-        let rhs_ty = self.check_expr_coercable_to_type(&rhs, lhs_ty, Some(lhs));\n-\n         let expected_ty = expected.coercion_target_type(self, expr.span);\n         if expected_ty == self.tcx.types.bool {\n             // The expected type is `bool` but this will result in `()` so we can reasonably\n             // say that the user intended to write `lhs == rhs` instead of `lhs = rhs`.\n             // The likely cause of this is `if foo = bar { .. }`.\n             let actual_ty = self.tcx.mk_unit();\n             let mut err = self.demand_suptype_diag(expr.span, expected_ty, actual_ty).unwrap();\n-            let msg = \"try comparing for equality\";\n-            let left = self.tcx.sess.source_map().span_to_snippet(lhs.span);\n-            let right = self.tcx.sess.source_map().span_to_snippet(rhs.span);\n-            if let (Ok(left), Ok(right)) = (left, right) {\n-                let help = format!(\"{} == {}\", left, right);\n-                err.span_suggestion(expr.span, msg, help, Applicability::MaybeIncorrect);\n+            let lhs_ty = self.check_expr(&lhs);\n+            let rhs_ty = self.check_expr(&rhs);\n+            if self.can_coerce(lhs_ty, rhs_ty) {\n+                if !lhs.is_syntactic_place_expr() {\n+                    // Do not suggest `if let x = y` as `==` is way more likely to be the intention.\n+                    if let hir::Node::Expr(hir::Expr {\n+                        kind: ExprKind::Match(_, _, hir::MatchSource::IfDesugar { .. }),\n+                        ..\n+                    }) = self.tcx.hir().get(\n+                        self.tcx.hir().get_parent_node(self.tcx.hir().get_parent_node(expr.hir_id)),\n+                    ) {\n+                        // Likely `if let` intended.\n+                        err.span_suggestion_verbose(\n+                            expr.span.shrink_to_lo(),\n+                            \"you might have meant to use pattern matching\",\n+                            \"let \".to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                }\n+                err.span_suggestion_verbose(\n+                    *span,\n+                    \"you might have meant to compare for equality\",\n+                    \"==\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n             } else {\n-                err.help(msg);\n+                // Do this to cause extra errors about the assignment.\n+                let lhs_ty = self.check_expr_with_needs(&lhs, Needs::MutPlace);\n+                let _ = self.check_expr_coercable_to_type(&rhs, lhs_ty, Some(lhs));\n             }\n-            err.emit();\n-        } else {\n-            self.check_lhs_assignable(lhs, \"E0070\", span);\n+\n+            if self.sess().if_let_suggestions.borrow().get(&expr.span).is_some() {\n+                // We already emitted an `if let` suggestion due to an identifier not found.\n+                err.delay_as_bug();\n+            } else {\n+                err.emit();\n+            }\n+            return self.tcx.ty_error();\n         }\n \n+        self.check_lhs_assignable(lhs, \"E0070\", span);\n+\n+        let lhs_ty = self.check_expr_with_needs(&lhs, Needs::MutPlace);\n+        let rhs_ty = self.check_expr_coercable_to_type(&rhs, lhs_ty, Some(lhs));\n+\n         self.require_type_is_sized(lhs_ty, lhs.span, traits::AssignmentLhsSized);\n \n         if lhs_ty.references_error() || rhs_ty.references_error() {"}, {"sha": "e24d498e3520c878bccfdcc179b1ce4bcb6d44aa", "filename": "src/test/ui/error-codes/E0070.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07112ca62d378c90d107448b9040faddeea9a445/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07112ca62d378c90d107448b9040faddeea9a445/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr?ref=07112ca62d378c90d107448b9040faddeea9a445", "patch": "@@ -14,12 +14,6 @@ LL |     1 = 3;\n    |     |\n    |     cannot assign to this expression\n \n-error[E0308]: mismatched types\n-  --> $DIR/E0070.rs:8:25\n-   |\n-LL |     some_other_func() = 4;\n-   |                         ^ expected `()`, found integer\n-\n error[E0070]: invalid left-hand side of assignment\n   --> $DIR/E0070.rs:8:23\n    |\n@@ -28,6 +22,12 @@ LL |     some_other_func() = 4;\n    |     |\n    |     cannot assign to this expression\n \n+error[E0308]: mismatched types\n+  --> $DIR/E0070.rs:8:25\n+   |\n+LL |     some_other_func() = 4;\n+   |                         ^ expected `()`, found integer\n+\n error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0070, E0308."}, {"sha": "5352066bf771eb94f9d1d91953d72d1f590490bd", "filename": "src/test/ui/issues/issue-13407.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07112ca62d378c90d107448b9040faddeea9a445/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07112ca62d378c90d107448b9040faddeea9a445/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr?ref=07112ca62d378c90d107448b9040faddeea9a445", "patch": "@@ -10,12 +10,6 @@ note: the unit struct `C` is defined here\n LL |     struct C;\n    |     ^^^^^^^^^\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-13407.rs:6:12\n-   |\n-LL |     A::C = 1;\n-   |            ^ expected struct `A::C`, found integer\n-\n error[E0070]: invalid left-hand side of assignment\n   --> $DIR/issue-13407.rs:6:10\n    |\n@@ -24,6 +18,12 @@ LL |     A::C = 1;\n    |     |\n    |     cannot assign to this expression\n \n+error[E0308]: mismatched types\n+  --> $DIR/issue-13407.rs:6:12\n+   |\n+LL |     A::C = 1;\n+   |            ^ expected struct `A::C`, found integer\n+\n error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0070, E0308, E0603."}, {"sha": "3372495d0feebc8e0bddae1e09451cf06eb15400", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/07112ca62d378c90d107448b9040faddeea9a445/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07112ca62d378c90d107448b9040faddeea9a445/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=07112ca62d378c90d107448b9040faddeea9a445", "patch": "@@ -568,10 +568,12 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:56:8\n    |\n LL |     if x = let 0 = 0 {}\n-   |        ^^^^^^^^^^^^^\n-   |        |\n-   |        expected `bool`, found `()`\n-   |        help: try comparing for equality: `x == let 0 = 0`\n+   |        ^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |     if x == let 0 = 0 {}\n+   |          ^^\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:59:8\n@@ -754,10 +756,12 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:120:11\n    |\n LL |     while x = let 0 = 0 {}\n-   |           ^^^^^^^^^^^^^\n-   |           |\n-   |           expected `bool`, found `()`\n-   |           help: try comparing for equality: `x == let 0 = 0`\n+   |           ^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |     while x == let 0 = 0 {}\n+   |             ^^\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:123:11"}, {"sha": "c1e417b97f619cf42be198842ff999fd63745e44", "filename": "src/test/ui/suggestions/if-let-typo.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07112ca62d378c90d107448b9040faddeea9a445/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07112ca62d378c90d107448b9040faddeea9a445/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.rs?ref=07112ca62d378c90d107448b9040faddeea9a445", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    let foo = Some(0);\n+    let bar = None;\n+    if Some(x) = foo {} //~ ERROR cannot find value `x` in this scope\n+    if Some(foo) = bar {} //~ ERROR mismatched types\n+    if 3 = foo {} //~ ERROR mismatched types\n+    //~^ ERROR mismatched types\n+    if Some(3) = foo {} //~ ERROR mismatched types\n+}"}, {"sha": "09db8e0146970352d048d1b16998bfa4d2ed4442", "filename": "src/test/ui/suggestions/if-let-typo.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/07112ca62d378c90d107448b9040faddeea9a445/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07112ca62d378c90d107448b9040faddeea9a445/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.stderr?ref=07112ca62d378c90d107448b9040faddeea9a445", "patch": "@@ -0,0 +1,60 @@\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/if-let-typo.rs:4:13\n+   |\n+LL |     if Some(x) = foo {}\n+   |             ^ not found in this scope\n+   |\n+help: you might have meant to use pattern matching\n+   |\n+LL |     if let Some(x) = foo {}\n+   |        ^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/if-let-typo.rs:5:8\n+   |\n+LL |     if Some(foo) = bar {}\n+   |        ^^^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to use pattern matching\n+   |\n+LL |     if let Some(foo) = bar {}\n+   |        ^^^\n+help: you might have meant to compare for equality\n+   |\n+LL |     if Some(foo) == bar {}\n+   |                  ^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/if-let-typo.rs:6:12\n+   |\n+LL |     if 3 = foo {}\n+   |            ^^^ expected integer, found enum `std::option::Option`\n+   |\n+   = note: expected type `{integer}`\n+              found enum `std::option::Option<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/if-let-typo.rs:6:8\n+   |\n+LL |     if 3 = foo {}\n+   |        ^^^^^^^ expected `bool`, found `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/if-let-typo.rs:8:8\n+   |\n+LL |     if Some(3) = foo {}\n+   |        ^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to use pattern matching\n+   |\n+LL |     if let Some(3) = foo {}\n+   |        ^^^\n+help: you might have meant to compare for equality\n+   |\n+LL |     if Some(3) == foo {}\n+   |                ^^\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0308, E0425.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "d1c13a33f7f4b55ce9c5850274edbc403aad874c", "filename": "src/test/ui/type/type-check/assignment-expected-bool.stderr", "status": "modified", "additions": 70, "deletions": 44, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/07112ca62d378c90d107448b9040faddeea9a445/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07112ca62d378c90d107448b9040faddeea9a445/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr?ref=07112ca62d378c90d107448b9040faddeea9a445", "patch": "@@ -2,100 +2,126 @@ error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:6:19\n    |\n LL |     let _: bool = 0 = 0;\n-   |                   ^^^^^\n-   |                   |\n-   |                   expected `bool`, found `()`\n-   |                   help: try comparing for equality: `0 == 0`\n+   |                   ^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |     let _: bool = 0 == 0;\n+   |                     ^^\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:9:14\n    |\n LL |         0 => 0 = 0,\n-   |              ^^^^^\n-   |              |\n-   |              expected `bool`, found `()`\n-   |              help: try comparing for equality: `0 == 0`\n+   |              ^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |         0 => 0 == 0,\n+   |                ^^\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:10:14\n    |\n LL |         _ => 0 = 0,\n-   |              ^^^^^\n-   |              |\n-   |              expected `bool`, found `()`\n-   |              help: try comparing for equality: `0 == 0`\n+   |              ^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |         _ => 0 == 0,\n+   |                ^^\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:14:17\n    |\n LL |         true => 0 = 0,\n-   |                 ^^^^^\n-   |                 |\n-   |                 expected `bool`, found `()`\n-   |                 help: try comparing for equality: `0 == 0`\n+   |                 ^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |         true => 0 == 0,\n+   |                   ^^\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:18:8\n    |\n LL |     if 0 = 0 {}\n-   |        ^^^^^\n-   |        |\n-   |        expected `bool`, found `()`\n-   |        help: try comparing for equality: `0 == 0`\n+   |        ^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to use pattern matching\n+   |\n+LL |     if let 0 = 0 {}\n+   |        ^^^\n+help: you might have meant to compare for equality\n+   |\n+LL |     if 0 == 0 {}\n+   |          ^^\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:20:24\n    |\n LL |     let _: bool = if { 0 = 0 } {\n-   |                        ^^^^^\n-   |                        |\n-   |                        expected `bool`, found `()`\n-   |                        help: try comparing for equality: `0 == 0`\n+   |                        ^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |     let _: bool = if { 0 == 0 } {\n+   |                          ^^\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:21:9\n    |\n LL |         0 = 0\n-   |         ^^^^^\n-   |         |\n-   |         expected `bool`, found `()`\n-   |         help: try comparing for equality: `0 == 0`\n+   |         ^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |         0 == 0\n+   |           ^^\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:23:9\n    |\n LL |         0 = 0\n-   |         ^^^^^\n-   |         |\n-   |         expected `bool`, found `()`\n-   |         help: try comparing for equality: `0 == 0`\n+   |         ^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |         0 == 0\n+   |           ^^\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:26:13\n    |\n LL |     let _ = (0 = 0)\n-   |             ^^^^^^^\n-   |             |\n-   |             expected `bool`, found `()`\n-   |             help: try comparing for equality: `0 == 0`\n+   |             ^^^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |     let _ = (0 == 0)\n+   |                ^^\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:27:14\n    |\n LL |         && { 0 = 0 }\n-   |              ^^^^^\n-   |              |\n-   |              expected `bool`, found `()`\n-   |              help: try comparing for equality: `0 == 0`\n+   |              ^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |         && { 0 == 0 }\n+   |                ^^\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:28:12\n    |\n LL |         || (0 = 0);\n-   |            ^^^^^^^\n-   |            |\n-   |            expected `bool`, found `()`\n-   |            help: try comparing for equality: `0 == 0`\n+   |            ^^^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |         || (0 == 0);\n+   |               ^^\n \n error[E0070]: invalid left-hand side of assignment\n   --> $DIR/assignment-expected-bool.rs:31:22"}, {"sha": "f5306a122641649927a341250e957b1fc2a401e3", "filename": "src/test/ui/type/type-check/assignment-in-if.stderr", "status": "modified", "additions": 40, "deletions": 24, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/07112ca62d378c90d107448b9040faddeea9a445/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07112ca62d378c90d107448b9040faddeea9a445/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr?ref=07112ca62d378c90d107448b9040faddeea9a445", "patch": "@@ -2,55 +2,71 @@ error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:15:8\n    |\n LL |     if x = x {\n-   |        ^^^^^\n-   |        |\n-   |        expected `bool`, found `()`\n-   |        help: try comparing for equality: `x == x`\n+   |        ^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |     if x == x {\n+   |          ^^\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:20:8\n    |\n LL |     if (x = x) {\n-   |        ^^^^^^^\n-   |        |\n-   |        expected `bool`, found `()`\n-   |        help: try comparing for equality: `x == x`\n+   |        ^^^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |     if (x == x) {\n+   |           ^^\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:25:8\n    |\n LL |     if y = (Foo { foo: x }) {\n-   |        ^^^^^^^^^^^^^^^^^^^^\n-   |        |\n-   |        expected `bool`, found `()`\n-   |        help: try comparing for equality: `y == (Foo { foo: x })`\n+   |        ^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |     if y == (Foo { foo: x }) {\n+   |          ^^\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:30:8\n    |\n LL |     if 3 = x {\n-   |        ^^^^^\n-   |        |\n-   |        expected `bool`, found `()`\n-   |        help: try comparing for equality: `3 == x`\n+   |        ^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to use pattern matching\n+   |\n+LL |     if let 3 = x {\n+   |        ^^^\n+help: you might have meant to compare for equality\n+   |\n+LL |     if 3 == x {\n+   |          ^^\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:36:13\n    |\n LL |             x = 4\n-   |             ^^^^^\n-   |             |\n-   |             expected `bool`, found `()`\n-   |             help: try comparing for equality: `x == 4`\n+   |             ^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |             x == 4\n+   |               ^^\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:38:13\n    |\n LL |             x = 5\n-   |             ^^^^^\n-   |             |\n-   |             expected `bool`, found `()`\n-   |             help: try comparing for equality: `x == 5`\n+   |             ^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |             x == 5\n+   |               ^^\n \n error: aborting due to 6 previous errors\n "}]}