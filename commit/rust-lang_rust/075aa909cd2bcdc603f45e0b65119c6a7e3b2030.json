{"sha": "075aa909cd2bcdc603f45e0b65119c6a7e3b2030", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NWFhOTA5Y2QyYmNkYzYwM2Y0NWUwYjY1MTE5YzZhN2UzYjIwMzA=", "commit": {"author": {"name": "Daniele D'Orazio", "email": "d.dorazio96@gmail.com", "date": "2018-10-15T02:18:37Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-10-15T02:18:37Z"}, "message": "try to fix comment bad wrapping (#3099)", "tree": {"sha": "e8ef72dcced2f990a4f9493a06f1c69ccda5b4ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8ef72dcced2f990a4f9493a06f1c69ccda5b4ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/075aa909cd2bcdc603f45e0b65119c6a7e3b2030", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/075aa909cd2bcdc603f45e0b65119c6a7e3b2030", "html_url": "https://github.com/rust-lang/rust/commit/075aa909cd2bcdc603f45e0b65119c6a7e3b2030", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/075aa909cd2bcdc603f45e0b65119c6a7e3b2030/comments", "author": {"login": "d-dorazio", "id": 6960399, "node_id": "MDQ6VXNlcjY5NjAzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/6960399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d-dorazio", "html_url": "https://github.com/d-dorazio", "followers_url": "https://api.github.com/users/d-dorazio/followers", "following_url": "https://api.github.com/users/d-dorazio/following{/other_user}", "gists_url": "https://api.github.com/users/d-dorazio/gists{/gist_id}", "starred_url": "https://api.github.com/users/d-dorazio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d-dorazio/subscriptions", "organizations_url": "https://api.github.com/users/d-dorazio/orgs", "repos_url": "https://api.github.com/users/d-dorazio/repos", "events_url": "https://api.github.com/users/d-dorazio/events{/privacy}", "received_events_url": "https://api.github.com/users/d-dorazio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51ddac33c59081bcd4f067633bd37443b69c60d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/51ddac33c59081bcd4f067633bd37443b69c60d0", "html_url": "https://github.com/rust-lang/rust/commit/51ddac33c59081bcd4f067633bd37443b69c60d0"}], "stats": {"total": 79, "additions": 52, "deletions": 27}, "files": [{"sha": "0f2409be1c6b0331387a6536cc05c998d1a96717", "filename": "src/comment.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/075aa909cd2bcdc603f45e0b65119c6a7e3b2030/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075aa909cd2bcdc603f45e0b65119c6a7e3b2030/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=075aa909cd2bcdc603f45e0b65119c6a7e3b2030", "patch": "@@ -579,7 +579,11 @@ fn rewrite_comment_inner(\n             let item_fmt = ib.create_string_format(&fmt);\n             result.push_str(&comment_line_separator);\n             result.push_str(&ib.opener);\n-            match rewrite_string(&item_block_buffer.replace(\"\\n\", \" \"), &item_fmt) {\n+            match rewrite_string(\n+                &item_block_buffer.replace(\"\\n\", \" \"),\n+                &item_fmt,\n+                max_chars.saturating_sub(ib.indent),\n+            ) {\n                 Some(s) => result.push_str(&join_block(\n                     &s,\n                     &format!(\"{}{}\", &comment_line_separator, ib.line_start),\n@@ -654,7 +658,7 @@ fn rewrite_comment_inner(\n         }\n \n         if config.wrap_comments() && line.len() > fmt.shape.width && !has_url(line) {\n-            match rewrite_string(line, &fmt) {\n+            match rewrite_string(line, &fmt, max_chars) {\n                 Some(ref s) => {\n                     is_prev_line_multi_line = s.contains('\\n');\n                     result.push_str(s);\n@@ -665,7 +669,7 @@ fn rewrite_comment_inner(\n                     result.pop();\n                     result.push_str(&comment_line_separator);\n                     fmt.shape = Shape::legacy(max_chars, fmt_indent);\n-                    match rewrite_string(line, &fmt) {\n+                    match rewrite_string(line, &fmt, max_chars) {\n                         Some(ref s) => {\n                             is_prev_line_multi_line = s.contains('\\n');\n                             result.push_str(s);\n@@ -719,7 +723,11 @@ fn rewrite_comment_inner(\n         let item_fmt = ib.create_string_format(&fmt);\n         result.push_str(&comment_line_separator);\n         result.push_str(&ib.opener);\n-        match rewrite_string(&item_block_buffer.replace(\"\\n\", \" \"), &item_fmt) {\n+        match rewrite_string(\n+            &item_block_buffer.replace(\"\\n\", \" \"),\n+            &item_fmt,\n+            max_chars.saturating_sub(ib.indent),\n+        ) {\n             Some(s) => result.push_str(&join_block(\n                 &s,\n                 &format!(\"{}{}\", &comment_line_separator, ib.line_start),"}, {"sha": "752fb792899fab300deaa4f9f651c47c17fa51c8", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/075aa909cd2bcdc603f45e0b65119c6a7e3b2030/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075aa909cd2bcdc603f45e0b65119c6a7e3b2030/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=075aa909cd2bcdc603f45e0b65119c6a7e3b2030", "patch": "@@ -1254,6 +1254,7 @@ fn rewrite_string_lit(context: &RewriteContext, span: Span, shape: Shape) -> Opt\n     rewrite_string(\n         str_lit,\n         &StringFormat::new(shape.visual_indent(0), context.config),\n+        shape.width.saturating_sub(2),\n     )\n }\n "}, {"sha": "ca063123e39a7f6152d0a945cc1ba462f5ad33c3", "filename": "src/string.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/075aa909cd2bcdc603f45e0b65119c6a7e3b2030/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075aa909cd2bcdc603f45e0b65119c6a7e3b2030/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=075aa909cd2bcdc603f45e0b65119c6a7e3b2030", "patch": "@@ -70,7 +70,11 @@ impl<'a> StringFormat<'a> {\n     }\n }\n \n-pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String> {\n+pub fn rewrite_string<'a>(\n+    orig: &str,\n+    fmt: &StringFormat<'a>,\n+    newline_max_chars: usize,\n+) -> Option<String> {\n     let max_chars_with_indent = fmt.max_chars_with_indent()?;\n     let max_chars_without_indent = fmt.max_chars_without_indent()?;\n     let indent_with_newline = fmt.shape.indent.to_string_with_newline(fmt.config);\n@@ -129,7 +133,7 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n                 result.push_str(fmt.line_end);\n                 result.push_str(&indent_with_newline);\n                 result.push_str(fmt.line_start);\n-                cur_max_chars = max_chars_with_indent;\n+                cur_max_chars = newline_max_chars;\n                 cur_start += len;\n             }\n             SnippetState::EndWithLineFeed(line, len) => {\n@@ -358,7 +362,7 @@ mod test {\n     fn issue343() {\n         let config = Default::default();\n         let fmt = StringFormat::new(Shape::legacy(2, Indent::empty()), &config);\n-        rewrite_string(\"eq_\", &fmt);\n+        rewrite_string(\"eq_\", &fmt, 2);\n     }\n \n     #[test]\n@@ -463,7 +467,7 @@ mod test {\n         let mut config: Config = Default::default();\n         config.set().max_width(27);\n         let fmt = StringFormat::new(Shape::legacy(25, Indent::empty()), &config);\n-        let rewritten_string = rewrite_string(string, &fmt);\n+        let rewritten_string = rewrite_string(string, &fmt, 27);\n         assert_eq!(\n             rewritten_string,\n             Some(\"\\\"Nulla\\nconsequat erat at massa. \\\\\\n Vivamus id mi.\\\"\".to_string())\n@@ -477,11 +481,11 @@ mod test {\n         let mut fmt = StringFormat::new(Shape::legacy(25, Indent::empty()), &config);\n \n         fmt.trim_end = true;\n-        let rewritten_string = rewrite_string(string, &fmt);\n+        let rewritten_string = rewrite_string(string, &fmt, 25);\n         assert_eq!(rewritten_string, Some(\"\\\"Vivamus id mi.\\\"\".to_string()));\n \n         fmt.trim_end = false; // default value of trim_end\n-        let rewritten_string = rewrite_string(string, &fmt);\n+        let rewritten_string = rewrite_string(string, &fmt, 25);\n         assert_eq!(rewritten_string, Some(\"\\\"Vivamus id mi.  \\\"\".to_string()));\n     }\n \n@@ -499,7 +503,7 @@ mod test {\n             config: &config,\n         };\n \n-        let rewritten_string = rewrite_string(string, &fmt);\n+        let rewritten_string = rewrite_string(string, &fmt, 100);\n         assert_eq!(\n             rewritten_string,\n             Some(\"Vivamus id mi.\\n    // Vivamus id mi.\".to_string())\n@@ -521,7 +525,7 @@ mod test {\n         };\n \n         assert_eq!(\n-            rewrite_string(comment, &fmt),\n+            rewrite_string(comment, &fmt, 30),\n             Some(\n                 \"Aenean metus.\\n        // Vestibulum ac lacus. Vivamus\\n        // porttitor\"\n                     .to_string()\n@@ -544,7 +548,7 @@ mod test {\n         };\n \n         assert_eq!(\n-            rewrite_string(comment, &fmt),\n+            rewrite_string(comment, &fmt, 30),\n             Some(\n                 \"Aenean metus.\\n        // Vestibulum ac lacus. Vivamus@\\n        // porttitor\"\n                     .to_string()\n@@ -567,7 +571,7 @@ mod test {\n \n         let comment = \"Aenean metus. Vestibulum\\n\\nac lacus. Vivamus porttitor\";\n         assert_eq!(\n-            rewrite_string(comment, &fmt),\n+            rewrite_string(comment, &fmt, 30),\n             Some(\n                 \"Aenean metus. Vestibulum\\n    //\\n    // ac lacus. Vivamus porttitor\".to_string()\n             )\n@@ -576,7 +580,7 @@ mod test {\n         fmt.shape = Shape::legacy(15, Indent::from_width(&config, 4));\n         let comment = \"Aenean\\n\\nmetus. Vestibulum ac lacus. Vivamus porttitor\";\n         assert_eq!(\n-            rewrite_string(comment, &fmt),\n+            rewrite_string(comment, &fmt, 15),\n             Some(\n                 r#\"Aenean\n     //\n@@ -603,21 +607,21 @@ mod test {\n \n         let comment = \"Aenean\\n\\nmetus. Vestibulum ac lacus.\\n\\n\";\n         assert_eq!(\n-            rewrite_string(comment, &fmt),\n+            rewrite_string(comment, &fmt, 20),\n             Some(\n                 \"Aenean\\n    //\\n    // metus. Vestibulum ac\\n    // lacus.\\n    //\\n\".to_string()\n             )\n         );\n \n         let comment = \"Aenean\\n\\nmetus. Vestibulum ac lacus.\\n\";\n         assert_eq!(\n-            rewrite_string(comment, &fmt),\n+            rewrite_string(comment, &fmt, 20),\n             Some(\"Aenean\\n    //\\n    // metus. Vestibulum ac\\n    // lacus.\\n\".to_string())\n         );\n \n         let comment = \"Aenean\\n        \\nmetus. Vestibulum ac lacus.\";\n         assert_eq!(\n-            rewrite_string(comment, &fmt),\n+            rewrite_string(comment, &fmt, 20),\n             Some(\"Aenean\\n    //\\n    // metus. Vestibulum ac\\n    // lacus.\".to_string())\n         );\n     }\n@@ -637,22 +641,22 @@ mod test {\n \n         let comment = \"Aenean metus. Vestibulum ac lacus.\";\n         assert_eq!(\n-            rewrite_string(comment, &fmt),\n+            rewrite_string(comment, &fmt, 13),\n             Some(\"Aenean metus.\\n    // Vestibulum ac\\n    // lacus.\".to_string())\n         );\n \n         fmt.trim_end = false;\n         let comment = \"Vestibulum ac lacus.\";\n         assert_eq!(\n-            rewrite_string(comment, &fmt),\n+            rewrite_string(comment, &fmt, 13),\n             Some(\"Vestibulum \\n    // ac lacus.\".to_string())\n         );\n \n         fmt.trim_end = true;\n         fmt.line_end = \"\\\\\";\n         let comment = \"Vestibulum ac lacus.\";\n         assert_eq!(\n-            rewrite_string(comment, &fmt),\n+            rewrite_string(comment, &fmt, 13),\n             Some(\"Vestibulum\\\\\\n    // ac lacus.\".to_string())\n         );\n     }"}, {"sha": "49a75cd67abba4a8829e64d7505100060e2125fd", "filename": "tests/source/issue-3059.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/075aa909cd2bcdc603f45e0b65119c6a7e3b2030/tests%2Fsource%2Fissue-3059.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075aa909cd2bcdc603f45e0b65119c6a7e3b2030/tests%2Fsource%2Fissue-3059.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3059.rs?ref=075aa909cd2bcdc603f45e0b65119c6a7e3b2030", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-wrap_comments: true\n+// rustfmt-max_width: 80\n+\n+/// Vestibulum elit nibh, rhoncus non, euismod sit amet, pretium eu, enim. Nunc commodo ultricies dui.\n+/// Cras gravida rutrum massa. Donec accumsan mattis turpis. Quisque sem. Quisque elementum sapien\n+/// iaculis augue. In dui sem, congue sit amet, feugiat quis, lobortis at, eros.\n+fn func4() {}"}, {"sha": "f750c1287595274fd0341dc571841ef745e2c248", "filename": "tests/target/issue-3059.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/075aa909cd2bcdc603f45e0b65119c6a7e3b2030/tests%2Ftarget%2Fissue-3059.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075aa909cd2bcdc603f45e0b65119c6a7e3b2030/tests%2Ftarget%2Fissue-3059.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3059.rs?ref=075aa909cd2bcdc603f45e0b65119c6a7e3b2030", "patch": "@@ -0,0 +1,8 @@\n+// rustfmt-wrap_comments: true\n+// rustfmt-max_width: 80\n+\n+/// Vestibulum elit nibh, rhoncus non, euismod sit amet, pretium eu, enim. Nunc\n+/// commodo ultricies dui. Cras gravida rutrum massa. Donec accumsan mattis\n+/// turpis. Quisque sem. Quisque elementum sapien iaculis augue. In dui sem,\n+/// congue sit amet, feugiat quis, lobortis at, eros.\n+fn func4() {}"}, {"sha": "c4d687dd3dbd8dddcd18c65296e4fb95cdfe31df", "filename": "tests/target/itemized-blocks/wrap.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/075aa909cd2bcdc603f45e0b65119c6a7e3b2030/tests%2Ftarget%2Fitemized-blocks%2Fwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/075aa909cd2bcdc603f45e0b65119c6a7e3b2030/tests%2Ftarget%2Fitemized-blocks%2Fwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fitemized-blocks%2Fwrap.rs?ref=075aa909cd2bcdc603f45e0b65119c6a7e3b2030", "patch": "@@ -40,8 +40,7 @@\n /// All the parameters ***except for\n /// `from_theater`*** should be inserted as sent\n /// by the remote theater, ie. as passed to\n-/// [`Theater::send`] on the remote\n-/// actor:\n+/// [`Theater::send`] on the remote actor:\n ///  * `from` is the sending (remote) [`ActorId`],\n ///    as reported by the remote theater by\n ///    theater-specific means\n@@ -53,15 +52,13 @@\n /// All the parameters ***except for\n /// `from_theater`*** should be inserted as sent\n /// by the remote theater, ie. as passed to\n-/// [`Theater::send`] on the remote\n-/// actor\n+/// [`Theater::send`] on the remote actor\n fn func1() {}\n \n /// All the parameters ***except for\n /// `from_theater`*** should be inserted as sent\n /// by the remote theater, ie. as passed to\n-/// [`Theater::send`] on the remote\n-/// actor:\n+/// [`Theater::send`] on the remote actor:\n ///  * `from` is the sending (remote) [`ActorId`],\n ///    as reported by the remote theater by\n ///    theater-specific means"}]}