{"sha": "bbea63f627433eb00ef9ac235bcced35e4cfbd4c", "node_id": "C_kwDOAAsO6NoAKGJiZWE2M2Y2Mjc0MzNlYjAwZWY5YWMyMzViY2NlZDM1ZTRjZmJkNGM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-08T16:30:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-08T16:30:23Z"}, "message": "Rollup merge of #111354 - jonas-schievink:enable-future-combinators, r=compiler-errors\n\nFix miscompilation when calling default methods on `Future`\n\nIn https://github.com/rust-lang/rust/issues/111264 I discovered a lingering miscompilation when calling a default method on `Future` (none currently exist). https://github.com/rust-lang/rust/pull/111279 added a debug assertion, which sadly doesn't help much since to my knowledge stage0 is not built with them enabled, and it still doesn't make default methods work like they should.\n\nThis PR fixes `resolve_instance` to resolve default methods on `Future` correctly, allowing library contributors to add `Future` combinators without running into ICEs or miscompilations. I've tested this as part of https://github.com/rust-lang/rust/pull/111347, but no test is included here (assuming that future methods include their own tests that would cover this sufficiently).\n\nr? `@compiler-errors`", "tree": {"sha": "5089dc897e494907635f7377f6ce905434a06d2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5089dc897e494907635f7377f6ce905434a06d2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbea63f627433eb00ef9ac235bcced35e4cfbd4c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkWSOfCRBK7hj4Ov3rIwAAqrcIAA10vtO9fwechgm+HvRfX3Fx\nrOp0AjnA5GEhFlYj44fSQQtSgL5zGEo8slDWbB5RlXRVV1cQ20wITDaUWxko/t8c\n4RFw3r5t/JQ++lKNU1GoTRNEzYGaxftqXAsJpqmMBSFHJfNlrhcmCEh30JLtYwDS\nhg4NuYAkvTI8BEPmN3iFYGw9FeLGVzv9xiDs5ugv5y2t8yt1Fw9GlBe7J+xAw5Uk\nUEQOWz5MXC9UJgCkTWBSuH78Pn253nDAoKJVzMIwqUUxI/51HsT1MbkNanQ2fDP6\nNPDWB+Y6zzodt+HhKroYx3bCkZoVn92TsoXeVU24ElYOWsEcfYGtfxubk946LQM=\n=Ue+/\n-----END PGP SIGNATURE-----\n", "payload": "tree 5089dc897e494907635f7377f6ce905434a06d2a\nparent 24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba\nparent 3bbb69eaa02f5dfa6bcf23e667ec0614c64d3502\nauthor Michael Goulet <michael@errs.io> 1683563423 -0700\ncommitter GitHub <noreply@github.com> 1683563423 -0700\n\nRollup merge of #111354 - jonas-schievink:enable-future-combinators, r=compiler-errors\n\nFix miscompilation when calling default methods on `Future`\n\nIn https://github.com/rust-lang/rust/issues/111264 I discovered a lingering miscompilation when calling a default method on `Future` (none currently exist). https://github.com/rust-lang/rust/pull/111279 added a debug assertion, which sadly doesn't help much since to my knowledge stage0 is not built with them enabled, and it still doesn't make default methods work like they should.\n\nThis PR fixes `resolve_instance` to resolve default methods on `Future` correctly, allowing library contributors to add `Future` combinators without running into ICEs or miscompilations. I've tested this as part of https://github.com/rust-lang/rust/pull/111347, but no test is included here (assuming that future methods include their own tests that would cover this sufficiently).\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbea63f627433eb00ef9ac235bcced35e4cfbd4c", "html_url": "https://github.com/rust-lang/rust/commit/bbea63f627433eb00ef9ac235bcced35e4cfbd4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbea63f627433eb00ef9ac235bcced35e4cfbd4c/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba", "html_url": "https://github.com/rust-lang/rust/commit/24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba"}, {"sha": "3bbb69eaa02f5dfa6bcf23e667ec0614c64d3502", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bbb69eaa02f5dfa6bcf23e667ec0614c64d3502", "html_url": "https://github.com/rust-lang/rust/commit/3bbb69eaa02f5dfa6bcf23e667ec0614c64d3502"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "eb3c21163ab2aef6ac4434429ee8c8b80ad34f6c", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bbea63f627433eb00ef9ac235bcced35e4cfbd4c/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbea63f627433eb00ef9ac235bcced35e4cfbd4c/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=bbea63f627433eb00ef9ac235bcced35e4cfbd4c", "patch": "@@ -194,21 +194,18 @@ fn resolve_associated_item<'tcx>(\n             })\n         }\n         traits::ImplSource::Future(future_data) => {\n-            if cfg!(debug_assertions) && tcx.item_name(trait_item_id) != sym::poll {\n-                // For compiler developers who'd like to add new items to `Future`,\n-                // you either need to generate a shim body, or perhaps return\n-                // `InstanceDef::Item` pointing to a trait default method body if\n-                // it is given a default implementation by the trait.\n-                span_bug!(\n-                    tcx.def_span(future_data.generator_def_id),\n-                    \"no definition for `{trait_ref}::{}` for built-in async generator type\",\n-                    tcx.item_name(trait_item_id)\n-                )\n+            if Some(trait_item_id) == tcx.lang_items().future_poll_fn() {\n+                // `Future::poll` is generated by the compiler.\n+                Some(Instance {\n+                    def: ty::InstanceDef::Item(future_data.generator_def_id),\n+                    substs: future_data.substs,\n+                })\n+            } else {\n+                // All other methods are default methods of the `Future` trait.\n+                // (this assumes that `ImplSource::Future` is only used for methods on `Future`)\n+                debug_assert!(tcx.impl_defaultness(trait_item_id).has_value());\n+                Some(Instance::new(trait_item_id, rcvr_substs))\n             }\n-            Some(Instance {\n-                def: ty::InstanceDef::Item(future_data.generator_def_id),\n-                substs: future_data.substs,\n-            })\n         }\n         traits::ImplSource::Closure(closure_data) => {\n             if cfg!(debug_assertions)"}]}