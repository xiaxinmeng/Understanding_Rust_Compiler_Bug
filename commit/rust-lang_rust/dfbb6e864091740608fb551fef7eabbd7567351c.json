{"sha": "dfbb6e864091740608fb551fef7eabbd7567351c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYmI2ZTg2NDA5MTc0MDYwOGZiNTUxZmVmN2VhYmJkNzU2NzM1MWM=", "commit": {"author": {"name": "Maik Klein", "email": "maikklein@googlemail.com", "date": "2017-10-27T09:27:05Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-18T15:08:49Z"}, "message": "Move instance related methods from TyCtxt to Instance", "tree": {"sha": "263b7f102f557979603ce9690303382f0805e823", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/263b7f102f557979603ce9690303382f0805e823"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfbb6e864091740608fb551fef7eabbd7567351c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfbb6e864091740608fb551fef7eabbd7567351c", "html_url": "https://github.com/rust-lang/rust/commit/dfbb6e864091740608fb551fef7eabbd7567351c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfbb6e864091740608fb551fef7eabbd7567351c/comments", "author": {"login": "MaikKlein", "id": 1994306, "node_id": "MDQ6VXNlcjE5OTQzMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1994306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaikKlein", "html_url": "https://github.com/MaikKlein", "followers_url": "https://api.github.com/users/MaikKlein/followers", "following_url": "https://api.github.com/users/MaikKlein/following{/other_user}", "gists_url": "https://api.github.com/users/MaikKlein/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaikKlein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaikKlein/subscriptions", "organizations_url": "https://api.github.com/users/MaikKlein/orgs", "repos_url": "https://api.github.com/users/MaikKlein/repos", "events_url": "https://api.github.com/users/MaikKlein/events{/privacy}", "received_events_url": "https://api.github.com/users/MaikKlein/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3c4142880e525e7e222edf4f2707e1a72087f9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c4142880e525e7e222edf4f2707e1a72087f9b", "html_url": "https://github.com/rust-lang/rust/commit/d3c4142880e525e7e222edf4f2707e1a72087f9b"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "5259e790e925422000f995626b06bc459c25efaa", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/dfbb6e864091740608fb551fef7eabbd7567351c/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbb6e864091740608fb551fef7eabbd7567351c/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=dfbb6e864091740608fb551fef7eabbd7567351c", "patch": "@@ -77,6 +77,42 @@ impl<'tcx> InstanceDef<'tcx> {\n     pub fn attrs<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> ty::Attributes<'tcx> {\n         tcx.get_attrs(self.def_id())\n     }\n+\n+    pub fn is_inline<'a>(\n+        &self,\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>\n+    ) -> bool {\n+        use hir::map::DefPathData;\n+        let def_id = match *self {\n+            ty::InstanceDef::Item(def_id) => def_id,\n+            ty::InstanceDef::DropGlue(_, Some(_)) => return false,\n+            _ => return true\n+        };\n+        match tcx.def_key(def_id).disambiguated_data.data {\n+            DefPathData::StructCtor |\n+            DefPathData::EnumVariant(..) |\n+            DefPathData::ClosureExpr => true,\n+            _ => false\n+        }\n+    }\n+\n+    pub fn requires_local<'a>(\n+        &self,\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>\n+    ) -> bool {\n+        use syntax::attr::requests_inline;\n+        if self.is_inline(tcx) {\n+            return true\n+        }\n+        if let ty::InstanceDef::DropGlue(..) = *self {\n+            // Drop glue wants to be instantiated at every translation\n+            // unit, but without an #[inline] hint. We should make this\n+            // available to normal end-users.\n+            return true\n+        }\n+        requests_inline(&self.attrs(tcx)[..]) ||\n+            tcx.is_const_fn(self.def_id())\n+    }\n }\n \n impl<'tcx> fmt::Display for Instance<'tcx> {"}, {"sha": "72efe23f77bc97eacc120e77eb75464b4690a5f3", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbb6e864091740608fb551fef7eabbd7567351c/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbb6e864091740608fb551fef7eabbd7567351c/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=dfbb6e864091740608fb551fef7eabbd7567351c", "patch": "@@ -96,7 +96,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n                 // If this function isn't inlined or otherwise has explicit\n                 // linkage, then we'll be creating a globally shared version.\n                 if self.explicit_linkage(tcx).is_some() ||\n-                    !tcx.requires_local_instance(instance)\n+                    !instance.def.requires_local(tcx)\n                 {\n                     return InstantiationMode::GloballyShared  { may_conflict: false }\n                 }"}]}