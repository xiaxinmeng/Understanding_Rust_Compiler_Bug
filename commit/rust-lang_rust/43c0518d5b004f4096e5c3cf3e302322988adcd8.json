{"sha": "43c0518d5b004f4096e5c3cf3e302322988adcd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYzA1MThkNWIwMDRmNDA5NmU1YzNjZjNlMzAyMzIyOTg4YWRjZDg=", "commit": {"author": {"name": "Re\u0301my Rakic", "email": "remy.rakic@gmail.com", "date": "2019-01-26T20:32:09Z"}, "committer": {"name": "Re\u0301my Rakic", "email": "remy.rakic@gmail.com", "date": "2019-01-27T09:52:45Z"}, "message": "Extract the notes explaining the placeholder region errors to a helper fn", "tree": {"sha": "13d114b515545556b8ed72459239411f85831285", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13d114b515545556b8ed72459239411f85831285"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43c0518d5b004f4096e5c3cf3e302322988adcd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43c0518d5b004f4096e5c3cf3e302322988adcd8", "html_url": "https://github.com/rust-lang/rust/commit/43c0518d5b004f4096e5c3cf3e302322988adcd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43c0518d5b004f4096e5c3cf3e302322988adcd8/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "489bc4a2c6ec47eb35dc066247e11f335b278333", "url": "https://api.github.com/repos/rust-lang/rust/commits/489bc4a2c6ec47eb35dc066247e11f335b278333", "html_url": "https://github.com/rust-lang/rust/commit/489bc4a2c6ec47eb35dc066247e11f335b278333"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "21d6c562e4dc9f614cc65502fc2a34402861b7e9", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 43, "deletions": 8, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/43c0518d5b004f4096e5c3cf3e302322988adcd8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43c0518d5b004f4096e5c3cf3e302322988adcd8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=43c0518d5b004f4096e5c3cf3e302322988adcd8", "patch": "@@ -1,3 +1,4 @@\n+use errors::DiagnosticBuilder;\n use hir::def_id::DefId;\n use infer::error_reporting::nice_region_error::NiceRegionError;\n use infer::lexical_region_resolve::RegionResolutionError;\n@@ -259,7 +260,7 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n             .tcx()\n             .any_free_region_meets(&expected_trait_ref.self_ty(), |r| Some(r) == vid);\n \n-        let self_ty_has_vid = actual_self_ty_has_vid || expected_self_ty_has_vid;\n+        let any_self_ty_has_vid = actual_self_ty_has_vid || expected_self_ty_has_vid;\n \n         debug!(\n             \"try_report_placeholders_trait: actual_has_vid={:?}\",\n@@ -280,6 +281,43 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n             expected_self_ty_has_vid\n         );\n \n+        self.explain_actual_impl_that_was_found(\n+            &mut err,\n+            sub_placeholder,\n+            sup_placeholder,\n+            has_sub,\n+            has_sup,\n+            expected_trait_ref,\n+            actual_trait_ref,\n+            vid,\n+            expected_has_vid,\n+            actual_has_vid,\n+            any_self_ty_has_vid,\n+        );\n+\n+        err.emit();\n+        ErrorReported\n+    }\n+\n+    /// Add notes with details about the expected and actual trait refs, with attention to cases\n+    /// when placeholder regions are involved: either the trait or the self type containing\n+    /// them needs to be mentioned the closest to the placeholders.\n+    /// This makes the error messages read better, however at the cost of some complexity\n+    /// due to the number of combinations we have to deal with.\n+    fn explain_actual_impl_that_was_found(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        sub_placeholder: Option<ty::Region<'tcx>>,\n+        sup_placeholder: Option<ty::Region<'tcx>>,\n+        has_sub: Option<usize>,\n+        has_sup: Option<usize>,\n+        expected_trait_ref: ty::TraitRef<'_>,\n+        actual_trait_ref: ty::TraitRef<'_>,\n+        vid: Option<ty::Region<'tcx>>,\n+        expected_has_vid: Option<usize>,\n+        actual_has_vid: Option<usize>,\n+        any_self_ty_has_vid: bool,\n+    ) {\n         // The weird thing here with the `maybe_highlighting_region` calls and the\n         // the match inside is meant to be like this:\n         //\n@@ -299,7 +337,7 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n             RegionHighlightMode::maybe_highlighting_region(sup_placeholder, has_sup, || {\n                 match (has_sub, has_sup) {\n                     (Some(n1), Some(n2)) => {\n-                        if self_ty_has_vid {\n+                        if any_self_ty_has_vid {\n                             err.note(&format!(\n                                 \"`{}` would have to be implemented for the type `{}`, \\\n                                  for any two lifetimes `'{}` and `'{}`\",\n@@ -320,7 +358,7 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                         }\n                     }\n                     (Some(n), _) | (_, Some(n)) => {\n-                        if self_ty_has_vid {\n+                        if any_self_ty_has_vid {\n                             err.note(&format!(\n                                 \"`{}` would have to be implemented for the type `{}`, \\\n                                  for any lifetime `'{}`\",\n@@ -350,7 +388,7 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                                     n,\n                                 ));\n                             } else {\n-                                if self_ty_has_vid {\n+                                if any_self_ty_has_vid {\n                                     err.note(&format!(\n                                         \"`{}` would have to be implemented for the type `{}`\",\n                                         expected_trait_ref,\n@@ -375,7 +413,7 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n             actual_has_vid,\n             || match actual_has_vid {\n                 Some(n) => {\n-                    if self_ty_has_vid {\n+                    if any_self_ty_has_vid {\n                         err.note(&format!(\n                             \"but `{}` is actually implemented for the type `{}`, \\\n                              for the specific lifetime `'{}`\",\n@@ -402,8 +440,5 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                 }\n             },\n         );\n-\n-        err.emit();\n-        ErrorReported\n     }\n }"}]}