{"sha": "5b2c5e181ac321f04621ef0b7dc78354bf3397d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMmM1ZTE4MWFjMzIxZjA0NjIxZWYwYjdkYzc4MzU0YmYzMzk3ZDM=", "commit": {"author": {"name": "Joel Galenson", "email": "jgalenson@google.com", "date": "2019-08-08T14:54:27Z"}, "committer": {"name": "Joel Galenson", "email": "jgalenson@google.com", "date": "2019-08-08T15:58:09Z"}, "message": "Sort fat LTO modules later and add a test.", "tree": {"sha": "6ec25ca92b51eeb93d7e82a8ee5410e1dddd8b01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ec25ca92b51eeb93d7e82a8ee5410e1dddd8b01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b2c5e181ac321f04621ef0b7dc78354bf3397d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b2c5e181ac321f04621ef0b7dc78354bf3397d3", "html_url": "https://github.com/rust-lang/rust/commit/5b2c5e181ac321f04621ef0b7dc78354bf3397d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b2c5e181ac321f04621ef0b7dc78354bf3397d3/comments", "author": {"login": "jgalenson", "id": 505819, "node_id": "MDQ6VXNlcjUwNTgxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/505819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgalenson", "html_url": "https://github.com/jgalenson", "followers_url": "https://api.github.com/users/jgalenson/followers", "following_url": "https://api.github.com/users/jgalenson/following{/other_user}", "gists_url": "https://api.github.com/users/jgalenson/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgalenson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgalenson/subscriptions", "organizations_url": "https://api.github.com/users/jgalenson/orgs", "repos_url": "https://api.github.com/users/jgalenson/repos", "events_url": "https://api.github.com/users/jgalenson/events{/privacy}", "received_events_url": "https://api.github.com/users/jgalenson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jgalenson", "id": 505819, "node_id": "MDQ6VXNlcjUwNTgxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/505819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgalenson", "html_url": "https://github.com/jgalenson", "followers_url": "https://api.github.com/users/jgalenson/followers", "following_url": "https://api.github.com/users/jgalenson/following{/other_user}", "gists_url": "https://api.github.com/users/jgalenson/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgalenson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgalenson/subscriptions", "organizations_url": "https://api.github.com/users/jgalenson/orgs", "repos_url": "https://api.github.com/users/jgalenson/repos", "events_url": "https://api.github.com/users/jgalenson/events{/privacy}", "received_events_url": "https://api.github.com/users/jgalenson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffa4d7e87f7565177693eefb4650bb32c3498968", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa4d7e87f7565177693eefb4650bb32c3498968", "html_url": "https://github.com/rust-lang/rust/commit/ffa4d7e87f7565177693eefb4650bb32c3498968"}], "stats": {"total": 33, "additions": 15, "deletions": 18}, "files": [{"sha": "33b4c8eec54cefff53de2433d3df1603e0a6e242", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b2c5e181ac321f04621ef0b7dc78354bf3397d3/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b2c5e181ac321f04621ef0b7dc78354bf3397d3/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=5b2c5e181ac321f04621ef0b7dc78354bf3397d3", "patch": "@@ -265,7 +265,7 @@ fn fat_lto(cgcx: &CodegenContext<LlvmCodegenBackend>,\n         // and we want to move everything to the same LLVM context. Currently the\n         // way we know of to do that is to serialize them to a string and them parse\n         // them later. Not great but hey, that's why it's \"fat\" LTO, right?\n-        serialized_modules.extend(modules.into_iter().map(|module| {\n+        let mut new_modules = modules.into_iter().map(|module| {\n             match module {\n                 FatLTOInput::InMemory(module) => {\n                     let buffer = ModuleBuffer::new(module.module_llvm.llmod());\n@@ -277,7 +277,9 @@ fn fat_lto(cgcx: &CodegenContext<LlvmCodegenBackend>,\n                     (SerializedModule::Local(buffer), llmod_id)\n                 }\n             }\n-        }));\n+        }).collect::<Vec<_>>();\n+        new_modules.sort_by(|module1, module2| module1.1.partial_cmp(&module2.1).unwrap());\n+        serialized_modules.extend(new_modules);\n         serialized_modules.extend(cached_modules.into_iter().map(|(buffer, wp)| {\n             (buffer, CString::new(wp.cgu_name).unwrap())\n         }));"}, {"sha": "c9e4663fdbddfa2eb688e3b4c330a33d47db732d", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5b2c5e181ac321f04621ef0b7dc78354bf3397d3/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b2c5e181ac321f04621ef0b7dc78354bf3397d3/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=5b2c5e181ac321f04621ef0b7dc78354bf3397d3", "patch": "@@ -755,15 +755,6 @@ pub enum FatLTOInput<B: WriteBackendMethods> {\n     InMemory(ModuleCodegen<B::Module>),\n }\n \n-impl<B: WriteBackendMethods> FatLTOInput<B> {\n-    fn name(&'a self) -> &'a String {\n-        match self {\n-            FatLTOInput::Serialized { name, buffer: _ } => &name,\n-            FatLTOInput::InMemory(module) => &module.name,\n-        }\n-    }\n-}\n-\n fn execute_work_item<B: ExtraBackendMethods>(\n     cgcx: &CodegenContext<B>,\n     work_item: WorkItem<B>,\n@@ -1354,15 +1345,10 @@ fn start_executing_work<B: ExtraBackendMethods>(\n                     assert!(!started_lto);\n                     started_lto = true;\n \n-                    let mut needs_fat_lto: Vec<FatLTOInput<B>> = mem::take(&mut needs_fat_lto);\n+                    let needs_fat_lto = mem::take(&mut needs_fat_lto);\n                     let needs_thin_lto = mem::take(&mut needs_thin_lto);\n                     let import_only_modules = mem::take(&mut lto_import_only_modules);\n \n-                    // Regardless of what order these modules completed in, report them to\n-                    // the backend in the same order every time to ensure that we're handing\n-                    // out deterministic results.\n-                    needs_fat_lto.sort_by(|m1, m2| m1.name().cmp(m2.name()));\n-\n                     for (work, cost) in generate_lto_work(&cgcx, needs_fat_lto,\n                                                           needs_thin_lto, import_only_modules) {\n                         let insertion_index = work_items"}, {"sha": "5b9c9d3d03521ff6255a6e45396d6860055b49cc", "filename": "src/test/run-make-fulldeps/reproducible-build/Makefile", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b2c5e181ac321f04621ef0b7dc78354bf3397d3/src%2Ftest%2Frun-make-fulldeps%2Freproducible-build%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5b2c5e181ac321f04621ef0b7dc78354bf3397d3/src%2Ftest%2Frun-make-fulldeps%2Freproducible-build%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Freproducible-build%2FMakefile?ref=5b2c5e181ac321f04621ef0b7dc78354bf3397d3", "patch": "@@ -10,7 +10,8 @@ all:  \\\n \tlink_paths \\\n \tremap_paths \\\n \tdifferent_source_dirs \\\n-\textern_flags\n+\textern_flags \\\n+\tfat_lto\n \n smoke:\n \trm -rf $(TMPDIR) && mkdir $(TMPDIR)\n@@ -76,3 +77,11 @@ extern_flags:\n \t\t--extern reproducible_build_aux=$(TMPDIR)/libbar.rlib \\\n \t\t--crate-type rlib\n \tcmp \"$(TMPDIR)/libreproducible_build.rlib\" \"$(TMPDIR)/libfoo.rlib\" || exit 1\n+\n+fat_lto:\n+\trm -rf $(TMPDIR) && mkdir $(TMPDIR)\n+\t$(RUSTC) reproducible-build-aux.rs\n+\t$(RUSTC) reproducible-build.rs -C lto=fat\n+\tcp $(TMPDIR)/reproducible-build $(TMPDIR)/reproducible-build-a\n+\t$(RUSTC) reproducible-build.rs -C lto=fat\n+\tcmp \"$(TMPDIR)/reproducible-build-a\" \"$(TMPDIR)/reproducible-build\" || exit 1"}]}