{"sha": "c4ba60a191bccd2f2568572efb76e0e37e88dd21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YmE2MGExOTFiY2NkMmYyNTY4NTcyZWZiNzZlMGUzN2U4OGRkMjE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-17T10:44:21Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-12-26T17:24:10Z"}, "message": "update tests", "tree": {"sha": "78fd9e211d1d9143b0d306ad2339a0c30d5e7c63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78fd9e211d1d9143b0d306ad2339a0c30d5e7c63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4ba60a191bccd2f2568572efb76e0e37e88dd21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4ba60a191bccd2f2568572efb76e0e37e88dd21", "html_url": "https://github.com/rust-lang/rust/commit/c4ba60a191bccd2f2568572efb76e0e37e88dd21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4ba60a191bccd2f2568572efb76e0e37e88dd21/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18fa7789cdeced758cb4e4db22061c31b4dbad80", "url": "https://api.github.com/repos/rust-lang/rust/commits/18fa7789cdeced758cb4e4db22061c31b4dbad80", "html_url": "https://github.com/rust-lang/rust/commit/18fa7789cdeced758cb4e4db22061c31b4dbad80"}], "stats": {"total": 1608, "additions": 658, "deletions": 950}, "files": [{"sha": "ed62f0208aa54cbe4d848934d346b54c208c9003", "filename": "src/test/rustdoc-ui/error-in-impl-trait/const-generics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fconst-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fconst-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Fconst-generics.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n // edition:2018\n-#![feature(min_const_generics)]\n trait ValidTrait {}\n \n /// This has docs"}, {"sha": "aa4ad261c80ff54d657c0336aa14e83ab6689d98", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,5 @@\n // ignore-tidy-linelength\n // edition:2018\n-#![feature(min_const_generics)]\n-\n // @has async_fn/fn.foo.html '//pre[@class=\"rust fn\"]' 'pub async fn foo() -> Option<Foo>'\n pub async fn foo() -> Option<Foo> {\n     None"}, {"sha": "55b632a48f2e5e4687196ef13bdd6cbb71700bc4", "filename": "src/test/rustdoc/const-generics/auxiliary/extern_crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Frustdoc%2Fconst-generics%2Fauxiliary%2Fextern_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Frustdoc%2Fconst-generics%2Fauxiliary%2Fextern_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fauxiliary%2Fextern_crate.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,6 +1,4 @@\n // edition:2018\n-#![feature(min_const_generics)]\n-\n pub fn extern_fn<const N: usize>() -> impl Iterator<Item = [u8; N]> {\n     [[0; N]; N].iter().copied()\n }"}, {"sha": "21bf216c304416816ac9ae790d0c200e2ba3c3ab", "filename": "src/test/rustdoc/const-generics/const-generics-docs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,6 +1,5 @@\n // edition:2018\n // aux-build: extern_crate.rs\n-#![feature(min_const_generics)]\n #![crate_name = \"foo\"]\n \n extern crate extern_crate;"}, {"sha": "85160dc07a7aa15e9c9222c0c0756c73220d0418", "filename": "src/test/rustdoc/const-generics/type-alias.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Frustdoc%2Fconst-generics%2Ftype-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Frustdoc%2Fconst-generics%2Ftype-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Ftype-alias.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,4 @@\n // ignore-tidy-linelength\n-#![feature(min_const_generics)]\n #![crate_name = \"foo\"]\n \n // @has foo/type.CellIndex.html '//pre[@class=\"rust typedef\"]' 'type CellIndex<const D: usize> = [i64; D];'"}, {"sha": "0ad05b3adeb88faf45c31ec42b49a4770c0c5ce0", "filename": "src/test/ui/array-slice-vec/match_arr_unknown_len.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fmatch_arr_unknown_len.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -6,7 +6,6 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error[E0308]: mismatched types\n   --> $DIR/match_arr_unknown_len.rs:6:9"}, {"sha": "5152d784047a52658e4568be40cbd32c801cdffb", "filename": "src/test/ui/associated-consts/associated-const-type-parameter-arrays.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -14,8 +14,7 @@ impl Foo for Def {\n \n pub fn test<A: Foo, B: Foo>() {\n     let _array: [u32; <A as Foo>::Y];\n-    //~^ ERROR the trait bound `A: Foo` is not satisfied [E0277]\n+    //~^ ERROR generic parameters may not be used\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "d3a1cd30e2be60512ea5dd8a78efa8bfa8573216", "filename": "src/test/ui/associated-consts/associated-const-type-parameter-arrays.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,17 +1,11 @@\n-error[E0277]: the trait bound `A: Foo` is not satisfied\n-  --> $DIR/associated-const-type-parameter-arrays.rs:16:23\n+error: generic parameters may not be used in const operations\n+  --> $DIR/associated-const-type-parameter-arrays.rs:16:24\n    |\n-LL |     const Y: usize;\n-   |     --------------- required by `Foo::Y`\n-...\n LL |     let _array: [u32; <A as Foo>::Y];\n-   |                       ^^^^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n+   |                        ^ cannot perform const operation using `A`\n    |\n-help: consider further restricting this bound\n-   |\n-LL | pub fn test<A: Foo + Foo, B: Foo>() {\n-   |                    ^^^^^\n+   = note: type parameters may not be used in const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "242a02353a101325aaa7a0c83771aff97b7dccfb", "filename": "src/test/ui/associated-item/associated-item-duplicate-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -5,7 +5,7 @@ trait Adapter {\n struct Foo<A: Adapter> {\n     adapter: A,\n     links: [u32; A::LINKS], // Shouldn't suggest bounds already there.\n-    //~^ ERROR: no associated item named `LINKS` found\n+    //~^ ERROR generic parameters may not be used in const operations\n }\n \n fn main() {}"}, {"sha": "0d84dca5b8099dd28252c8fc0444d06a614a32f0", "filename": "src/test/ui/associated-item/associated-item-duplicate-bounds.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,11 +1,11 @@\n-error[E0599]: no associated item named `LINKS` found for type parameter `A` in the current scope\n-  --> $DIR/associated-item-duplicate-bounds.rs:7:21\n+error: generic parameters may not be used in const operations\n+  --> $DIR/associated-item-duplicate-bounds.rs:7:18\n    |\n LL |     links: [u32; A::LINKS], // Shouldn't suggest bounds already there.\n-   |                     ^^^^^ associated item not found in `A`\n+   |                  ^^^^^^^^ cannot perform const operation using `A`\n    |\n-   = help: items from traits can only be used if the type parameter is bounded by the trait\n+   = note: type parameters may not be used in const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0599`."}, {"sha": "a9208ade74068f3789206a5bc947a3f5aaf1f246", "filename": "src/test/ui/async-await/issues/issue-78654.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,11 +1,11 @@\n error[E0573]: expected type, found built-in attribute `feature`\n-  --> $DIR/issue-78654.rs:10:15\n+  --> $DIR/issue-78654.rs:9:15\n    |\n LL | impl<const H: feature> Foo {\n    |               ^^^^^^^ not a type\n \n error[E0207]: the const parameter `H` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-78654.rs:10:12\n+  --> $DIR/issue-78654.rs:9:12\n    |\n LL | impl<const H: feature> Foo {\n    |            ^ unconstrained const parameter"}, {"sha": "a9208ade74068f3789206a5bc947a3f5aaf1f246", "filename": "src/test/ui/async-await/issues/issue-78654.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,11 +1,11 @@\n error[E0573]: expected type, found built-in attribute `feature`\n-  --> $DIR/issue-78654.rs:10:15\n+  --> $DIR/issue-78654.rs:9:15\n    |\n LL | impl<const H: feature> Foo {\n    |               ^^^^^^^ not a type\n \n error[E0207]: the const parameter `H` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-78654.rs:10:12\n+  --> $DIR/issue-78654.rs:9:12\n    |\n LL | impl<const H: feature> Foo {\n    |            ^ unconstrained const parameter"}, {"sha": "37ebb4ecac8b8db31211c58411b9fd5febe1129b", "filename": "src/test/ui/async-await/issues/issue-78654.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct Foo;\n "}, {"sha": "0200c6def246699b61605cfa37f18c1d7a6aef00", "filename": "src/test/ui/binding/const-param.full.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fbinding%2Fconst-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fbinding%2Fconst-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fconst-param.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -0,0 +1,9 @@\n+error[E0158]: const parameters cannot be referenced in patterns\n+  --> $DIR/const-param.rs:8:9\n+   |\n+LL |         N => {}\n+   |         ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0158`."}, {"sha": "0200c6def246699b61605cfa37f18c1d7a6aef00", "filename": "src/test/ui/binding/const-param.min.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fbinding%2Fconst-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fbinding%2Fconst-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fconst-param.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -0,0 +1,9 @@\n+error[E0158]: const parameters cannot be referenced in patterns\n+  --> $DIR/const-param.rs:8:9\n+   |\n+LL |         N => {}\n+   |         ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0158`."}, {"sha": "4aec801cb1552df3eec4b18eae7ba7954bca843d", "filename": "src/test/ui/binding/const-param.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fbinding%2Fconst-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fbinding%2Fconst-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fconst-param.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,6 +1,7 @@\n // Identifier pattern referring to a const generic parameter is an error (issue #68853).\n-\n-#![feature(const_generics)] //~ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n \n fn check<const N: usize>() {\n     match 1 {"}, {"sha": "d3d06a2d834fc9951b3e81998c4414e7dc4fd762", "filename": "src/test/ui/binding/const-param.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/18fa7789cdeced758cb4e4db22061c31b4dbad80/src%2Ftest%2Fui%2Fbinding%2Fconst-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18fa7789cdeced758cb4e4db22061c31b4dbad80/src%2Ftest%2Fui%2Fbinding%2Fconst-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fconst-param.stderr?ref=18fa7789cdeced758cb4e4db22061c31b4dbad80", "patch": "@@ -1,19 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/const-param.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: consider using `min_const_generics` instead, which is more stable and complete\n-\n-error[E0158]: const parameters cannot be referenced in patterns\n-  --> $DIR/const-param.rs:7:9\n-   |\n-LL |         N => {}\n-   |         ^\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0158`."}, {"sha": "3bc62141927ae14358312ae03de46b01851b6202", "filename": "src/test/ui/const-generics/apit-with-const-param.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n trait Trait {}\n "}, {"sha": "e533d4f7fb834e322d9f96c93ae7dde5e2e7549a", "filename": "src/test/ui/const-generics/argument_order.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,11 +1,11 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/argument_order.rs:12:32\n+  --> $DIR/argument_order.rs:11:32\n    |\n LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n    |               -----------------^^-----^^-------------------- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, const N: usize, T, const M: usize, U>`\n \n error[E0747]: lifetime provided when a type was expected\n-  --> $DIR/argument_order.rs:20:23\n+  --> $DIR/argument_order.rs:19:23\n    |\n LL |     let _: AlsoBad<7, 'static, u32, 'static, 17, u16>;\n    |                       ^^^^^^^"}, {"sha": "f23bc6d6a2bfac79e242c405838ad92d55bfb26e", "filename": "src/test/ui/const-generics/argument_order.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,23 +1,23 @@\n error: type parameters must be declared prior to const parameters\n-  --> $DIR/argument_order.rs:6:28\n+  --> $DIR/argument_order.rs:5:28\n    |\n LL | struct Bad<const N: usize, T> {\n    |           -----------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const N: usize>`\n \n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/argument_order.rs:12:32\n+  --> $DIR/argument_order.rs:11:32\n    |\n LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n    |               -----------------^^-----^^-------------------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T, U, const N: usize, const M: usize>`\n \n error: type parameters must be declared prior to const parameters\n-  --> $DIR/argument_order.rs:12:36\n+  --> $DIR/argument_order.rs:11:36\n    |\n LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n    |               ---------------------^----------------------^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T, U, const N: usize, const M: usize>`\n \n error[E0747]: lifetime provided when a type was expected\n-  --> $DIR/argument_order.rs:20:23\n+  --> $DIR/argument_order.rs:19:23\n    |\n LL |     let _: AlsoBad<7, 'static, u32, 'static, 17, u16>;\n    |                       ^^^^^^^"}, {"sha": "95eaeea58184017b32002169817e37d6847c3d13", "filename": "src/test/ui/const-generics/argument_order.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct Bad<const N: usize, T> {\n     //[min]~^ ERROR type parameters must be declared prior to const parameters"}, {"sha": "0fb23e41b013fa076ed25d15909eaf5890e55bc0", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,13 +1,13 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/array-size-in-generic-struct-param.rs:9:38\n+  --> $DIR/array-size-in-generic-struct-param.rs:8:38\n    |\n LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n    |                                      ^^^^^^^^^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/array-size-in-generic-struct-param.rs:20:10\n+  --> $DIR/array-size-in-generic-struct-param.rs:19:10\n    |\n LL |     arr: [u8; CFG.arr_size],\n    |          ^^^^^^^^^^^^^^^^^^"}, {"sha": "7af23103ce70f5dd62cf568d35e3c66d9d68c3e4", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/array-size-in-generic-struct-param.rs:9:48\n+  --> $DIR/array-size-in-generic-struct-param.rs:8:48\n    |\n LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n    |                                                ^ cannot perform const operation using `N`\n@@ -8,7 +8,7 @@ LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/array-size-in-generic-struct-param.rs:20:15\n+  --> $DIR/array-size-in-generic-struct-param.rs:19:15\n    |\n LL |     arr: [u8; CFG.arr_size],\n    |               ^^^ cannot perform const operation using `CFG`\n@@ -17,7 +17,7 @@ LL |     arr: [u8; CFG.arr_size],\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: `Config` is forbidden as the type of a const generic parameter\n-  --> $DIR/array-size-in-generic-struct-param.rs:18:21\n+  --> $DIR/array-size-in-generic-struct-param.rs:17:21\n    |\n LL | struct B<const CFG: Config> {\n    |                     ^^^^^^"}, {"sha": "cd0a9742cd1ab20b4605ee9e936e90d677a60c52", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n #[allow(dead_code)]\n struct ArithArrayLen<const N: usize>([u32; 0 + N]);"}, {"sha": "732a18714566ca68b450a9d86dce80059f0a3f4c", "filename": "src/test/ui/const-generics/array-wrapper-struct-ctor.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n #![allow(dead_code)]\n "}, {"sha": "6644e74f97a0b544dd83a6dd54b82345e79485da", "filename": "src/test/ui/const-generics/associated-type-bound-fail.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `u16: Bar<N>` is not satisfied\n-  --> $DIR/associated-type-bound-fail.rs:14:5\n+  --> $DIR/associated-type-bound-fail.rs:13:5\n    |\n LL |     type Assoc: Bar<N>;\n    |                 ------ required by this bound in `Foo::Assoc`"}, {"sha": "6644e74f97a0b544dd83a6dd54b82345e79485da", "filename": "src/test/ui/const-generics/associated-type-bound-fail.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `u16: Bar<N>` is not satisfied\n-  --> $DIR/associated-type-bound-fail.rs:14:5\n+  --> $DIR/associated-type-bound-fail.rs:13:5\n    |\n LL |     type Assoc: Bar<N>;\n    |                 ------ required by this bound in `Foo::Assoc`"}, {"sha": "83b267008057024a1ccb68024177a6cecffae933", "filename": "src/test/ui/const-generics/associated-type-bound-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, allow(incomplete_features))]\n #![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n trait Bar<const N: usize> {}\n "}, {"sha": "02f77396c0b6053797072977dff24ab5208c1782", "filename": "src/test/ui/const-generics/associated-type-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // revisions: full min\n #![cfg_attr(full, allow(incomplete_features))]\n #![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n trait Bar<const N: usize> {}\n "}, {"sha": "8d4cd9c0d6b7c9f40e5c6caa729fee5659590226", "filename": "src/test/ui/const-generics/auxiliary/const_generic_lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fconst_generic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fconst_generic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fconst_generic_lib.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,6 +1,5 @@\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct Struct<const N: usize>(pub [u8; N]);\n "}, {"sha": "d9baab956c9f3365222f34d11860a544b5c88f0a", "filename": "src/test/ui/const-generics/auxiliary/crayte.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fcrayte.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fcrayte.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fcrayte.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // edition:2018\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n pub trait Foo<const N: usize> {}\n struct Local;"}, {"sha": "4a6b57842217ee9ecbc1179a4dc9cfe172748d0b", "filename": "src/test/ui/const-generics/auxiliary/impl-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fimpl-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fimpl-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fimpl-const.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,6 +1,5 @@\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct Num<const N: usize>;\n "}, {"sha": "34255fa9f58814cbd29c09d44b57232d816adfcb", "filename": "src/test/ui/const-generics/broken-mir-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n pub trait Foo {\n     fn foo(&self);"}, {"sha": "ac358b01672bf807f24dcd2d354f4c043b93ac3a", "filename": "src/test/ui/const-generics/broken-mir-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n use std::fmt::Debug;\n "}, {"sha": "44aef859f2de64a8880a362e149d717ceea6f68a", "filename": "src/test/ui/const-generics/cannot-infer-type-for-const-param.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n // This test confirms that the types can be inferred correctly for this example with const\n // generics. Previously this would ICE, and more recently error."}, {"sha": "7737705440eb8ae46897dcd9a7efb0c861fc9009", "filename": "src/test/ui/const-generics/closing-args-token.full.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fclosing-args-token.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fclosing-args-token.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fclosing-args-token.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/closing-args-token.rs:11:9\n+  --> $DIR/closing-args-token.rs:10:9\n    |\n LL |     S::<5 + 2 >> 7>;\n    |         ^^^^^\n@@ -10,7 +10,7 @@ LL |     S::<{ 5 + 2 } >> 7>;\n    |         ^       ^\n \n error: comparison operators cannot be chained\n-  --> $DIR/closing-args-token.rs:11:16\n+  --> $DIR/closing-args-token.rs:10:16\n    |\n LL |     S::<5 + 2 >> 7>;\n    |                ^  ^\n@@ -21,7 +21,7 @@ LL |     S::<5 + 2 >> 7 && 7>;\n    |                    ^^^^\n \n error: comparison operators cannot be chained\n-  --> $DIR/closing-args-token.rs:17:20\n+  --> $DIR/closing-args-token.rs:16:20\n    |\n LL |     S::<{ 5 + 2 } >> 7>;\n    |                    ^  ^\n@@ -32,13 +32,13 @@ LL |     S::<{ 5 + 2 } >> 7 && 7>;\n    |                        ^^^^\n \n error: expected expression, found `;`\n-  --> $DIR/closing-args-token.rs:22:16\n+  --> $DIR/closing-args-token.rs:21:16\n    |\n LL |     T::<0 >= 3>;\n    |                ^ expected expression\n \n error: comparison operators cannot be chained\n-  --> $DIR/closing-args-token.rs:28:12\n+  --> $DIR/closing-args-token.rs:27:12\n    |\n LL |     T::<x >>= 2 > 0>;\n    |            ^^   ^"}, {"sha": "7737705440eb8ae46897dcd9a7efb0c861fc9009", "filename": "src/test/ui/const-generics/closing-args-token.min.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fclosing-args-token.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fclosing-args-token.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fclosing-args-token.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/closing-args-token.rs:11:9\n+  --> $DIR/closing-args-token.rs:10:9\n    |\n LL |     S::<5 + 2 >> 7>;\n    |         ^^^^^\n@@ -10,7 +10,7 @@ LL |     S::<{ 5 + 2 } >> 7>;\n    |         ^       ^\n \n error: comparison operators cannot be chained\n-  --> $DIR/closing-args-token.rs:11:16\n+  --> $DIR/closing-args-token.rs:10:16\n    |\n LL |     S::<5 + 2 >> 7>;\n    |                ^  ^\n@@ -21,7 +21,7 @@ LL |     S::<5 + 2 >> 7 && 7>;\n    |                    ^^^^\n \n error: comparison operators cannot be chained\n-  --> $DIR/closing-args-token.rs:17:20\n+  --> $DIR/closing-args-token.rs:16:20\n    |\n LL |     S::<{ 5 + 2 } >> 7>;\n    |                    ^  ^\n@@ -32,13 +32,13 @@ LL |     S::<{ 5 + 2 } >> 7 && 7>;\n    |                        ^^^^\n \n error: expected expression, found `;`\n-  --> $DIR/closing-args-token.rs:22:16\n+  --> $DIR/closing-args-token.rs:21:16\n    |\n LL |     T::<0 >= 3>;\n    |                ^ expected expression\n \n error: comparison operators cannot be chained\n-  --> $DIR/closing-args-token.rs:28:12\n+  --> $DIR/closing-args-token.rs:27:12\n    |\n LL |     T::<x >>= 2 > 0>;\n    |            ^^   ^"}, {"sha": "a9b552ebed7a7f1df749a26dfd65c8d436b3f342", "filename": "src/test/ui/const-generics/closing-args-token.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fclosing-args-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fclosing-args-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fclosing-args-token.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct S<const X: u32>;\n struct T<const X: bool>;"}, {"sha": "8e20df2810399dabeeb0511abf333f99d79e01a9", "filename": "src/test/ui/const-generics/coerce_unsized_array.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fcoerce_unsized_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fcoerce_unsized_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcoerce_unsized_array.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const N: usize>(v: &[u8; N]) -> &[u8] {\n     v"}, {"sha": "8c31c8651a2b61e87c39c39716161da381b75656", "filename": "src/test/ui/const-generics/concrete-const-as-fn-arg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -4,7 +4,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct A<const N: usize>; // ok\n "}, {"sha": "3d3bd2664c8b23c83e2f7c8254b9f89f9ec1cb4a", "filename": "src/test/ui/const-generics/concrete-const-impl-method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -5,7 +5,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct A<const N: u32>;\n "}, {"sha": "ad40b48afe5edef4721b23e524dbc1db1c2e1926", "filename": "src/test/ui/const-generics/condition-in-trait-const-arg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -4,7 +4,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n trait IsZeroTrait<const IS_ZERO: bool>{}\n "}, {"sha": "bfa4ba3068628eecbd95771c88da9f7424e66c57", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.min.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:14:23\n+  --> $DIR/const-arg-in-const-arg.rs:13:23\n    |\n LL |     let _: [u8; foo::<T>()];\n    |                       ^ cannot perform const operation using `T`\n@@ -8,7 +8,7 @@ LL |     let _: [u8; foo::<T>()];\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:15:23\n+  --> $DIR/const-arg-in-const-arg.rs:14:23\n    |\n LL |     let _: [u8; bar::<N>()];\n    |                       ^ cannot perform const operation using `N`\n@@ -17,7 +17,7 @@ LL |     let _: [u8; bar::<N>()];\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:25:23\n+  --> $DIR/const-arg-in-const-arg.rs:24:23\n    |\n LL |     let _ = [0; bar::<N>()];\n    |                       ^ cannot perform const operation using `N`\n@@ -26,7 +26,7 @@ LL |     let _ = [0; bar::<N>()];\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:30:24\n+  --> $DIR/const-arg-in-const-arg.rs:29:24\n    |\n LL |     let _: Foo<{ foo::<T>() }>;\n    |                        ^ cannot perform const operation using `T`\n@@ -35,7 +35,7 @@ LL |     let _: Foo<{ foo::<T>() }>;\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:31:24\n+  --> $DIR/const-arg-in-const-arg.rs:30:24\n    |\n LL |     let _: Foo<{ bar::<N>() }>;\n    |                        ^ cannot perform const operation using `N`\n@@ -44,7 +44,7 @@ LL |     let _: Foo<{ bar::<N>() }>;\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:36:27\n+  --> $DIR/const-arg-in-const-arg.rs:35:27\n    |\n LL |     let _ = Foo::<{ foo::<T>() }>;\n    |                           ^ cannot perform const operation using `T`\n@@ -53,7 +53,7 @@ LL |     let _ = Foo::<{ foo::<T>() }>;\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:37:27\n+  --> $DIR/const-arg-in-const-arg.rs:36:27\n    |\n LL |     let _ = Foo::<{ bar::<N>() }>;\n    |                           ^ cannot perform const operation using `N`\n@@ -62,7 +62,7 @@ LL |     let _ = Foo::<{ bar::<N>() }>;\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:16:23\n+  --> $DIR/const-arg-in-const-arg.rs:15:23\n    |\n LL |     let _: [u8; faz::<'a>(&())];\n    |                       ^^\n@@ -71,7 +71,7 @@ LL |     let _: [u8; faz::<'a>(&())];\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:17:23\n+  --> $DIR/const-arg-in-const-arg.rs:16:23\n    |\n LL |     let _: [u8; baz::<'a>(&())];\n    |                       ^^\n@@ -80,7 +80,7 @@ LL |     let _: [u8; baz::<'a>(&())];\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:18:23\n+  --> $DIR/const-arg-in-const-arg.rs:17:23\n    |\n LL |     let _: [u8; faz::<'b>(&())];\n    |                       ^^\n@@ -89,7 +89,7 @@ LL |     let _: [u8; faz::<'b>(&())];\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:19:23\n+  --> $DIR/const-arg-in-const-arg.rs:18:23\n    |\n LL |     let _: [u8; baz::<'b>(&())];\n    |                       ^^\n@@ -98,7 +98,7 @@ LL |     let _: [u8; baz::<'b>(&())];\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:26:23\n+  --> $DIR/const-arg-in-const-arg.rs:25:23\n    |\n LL |     let _ = [0; faz::<'a>(&())];\n    |                       ^^\n@@ -107,7 +107,7 @@ LL |     let _ = [0; faz::<'a>(&())];\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:27:23\n+  --> $DIR/const-arg-in-const-arg.rs:26:23\n    |\n LL |     let _ = [0; baz::<'a>(&())];\n    |                       ^^\n@@ -116,7 +116,7 @@ LL |     let _ = [0; baz::<'a>(&())];\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:28:23\n+  --> $DIR/const-arg-in-const-arg.rs:27:23\n    |\n LL |     let _ = [0; faz::<'b>(&())];\n    |                       ^^\n@@ -125,7 +125,7 @@ LL |     let _ = [0; faz::<'b>(&())];\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:29:23\n+  --> $DIR/const-arg-in-const-arg.rs:28:23\n    |\n LL |     let _ = [0; baz::<'b>(&())];\n    |                       ^^\n@@ -134,7 +134,7 @@ LL |     let _ = [0; baz::<'b>(&())];\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:32:24\n+  --> $DIR/const-arg-in-const-arg.rs:31:24\n    |\n LL |     let _: Foo<{ faz::<'a>(&()) }>;\n    |                        ^^\n@@ -143,7 +143,7 @@ LL |     let _: Foo<{ faz::<'a>(&()) }>;\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:33:24\n+  --> $DIR/const-arg-in-const-arg.rs:32:24\n    |\n LL |     let _: Foo<{ baz::<'a>(&()) }>;\n    |                        ^^\n@@ -152,7 +152,7 @@ LL |     let _: Foo<{ baz::<'a>(&()) }>;\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:34:24\n+  --> $DIR/const-arg-in-const-arg.rs:33:24\n    |\n LL |     let _: Foo<{ faz::<'b>(&()) }>;\n    |                        ^^\n@@ -161,7 +161,7 @@ LL |     let _: Foo<{ faz::<'b>(&()) }>;\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:35:24\n+  --> $DIR/const-arg-in-const-arg.rs:34:24\n    |\n LL |     let _: Foo<{ baz::<'b>(&()) }>;\n    |                        ^^\n@@ -170,7 +170,7 @@ LL |     let _: Foo<{ baz::<'b>(&()) }>;\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:38:27\n+  --> $DIR/const-arg-in-const-arg.rs:37:27\n    |\n LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n    |                           ^^\n@@ -179,7 +179,7 @@ LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:39:27\n+  --> $DIR/const-arg-in-const-arg.rs:38:27\n    |\n LL |     let _ = Foo::<{ baz::<'a>(&()) }>;\n    |                           ^^\n@@ -188,7 +188,7 @@ LL |     let _ = Foo::<{ baz::<'a>(&()) }>;\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:40:27\n+  --> $DIR/const-arg-in-const-arg.rs:39:27\n    |\n LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n    |                           ^^\n@@ -197,7 +197,7 @@ LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:41:27\n+  --> $DIR/const-arg-in-const-arg.rs:40:27\n    |\n LL |     let _ = Foo::<{ baz::<'b>(&()) }>;\n    |                           ^^"}, {"sha": "8279f4a3f61ea85743fb19ffa0c3fa1f483555c0", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // FIXME(const_generics): This test currently causes an ICE because\n // we don't yet correctly deal with lifetimes, reenable this test once\n // this is fixed.\n-#![cfg_attr(min, feature(min_const_generics))]\n \n const fn foo<T>() -> usize { std::mem::size_of::<T>() }\n const fn bar<const N: usize>() -> usize { N }"}, {"sha": "43ed12efb895a101f56b0337a0a18449ebeb1d86", "filename": "src/test/ui/const-generics/const-arg-in-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn const_u32_identity<const X: u32>() -> u32 {\n     X"}, {"sha": "d0ea51ea4173a501df00bf8b51de2183bc7d2b2f", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0747]: constant provided when a type was expected\n-  --> $DIR/const-arg-type-arg-misordered.rs:8:35\n+  --> $DIR/const-arg-type-arg-misordered.rs:7:35\n    |\n LL | fn foo<const N: usize>() -> Array<N, ()> {\n    |                                   ^"}, {"sha": "d7b7df0eb55bceed0d029dba5cae9ab0001616b3", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0747]: constant provided when a type was expected\n-  --> $DIR/const-arg-type-arg-misordered.rs:8:35\n+  --> $DIR/const-arg-type-arg-misordered.rs:7:35\n    |\n LL | fn foo<const N: usize>() -> Array<N, ()> {\n    |                                   ^"}, {"sha": "5415791d21bb3b87b735a0604e8226bdea77211c", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n type Array<T, const N: usize> = [T; N];\n "}, {"sha": "5dca01f0dc078e4fcde903dd70282fb844fff17d", "filename": "src/test/ui/const-generics/const-argument-if-length.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/const-argument-if-length.rs:8:28\n+  --> $DIR/const-argument-if-length.rs:7:28\n    |\n LL | pub const fn is_zst<T: ?Sized>() -> usize {\n    |                     - this type parameter needs to be `Sized`\n@@ -12,7 +12,7 @@ LL | pub const fn size_of<T>() -> usize {\n    |                      - required by this bound in `std::mem::size_of`\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/const-argument-if-length.rs:17:12\n+  --> $DIR/const-argument-if-length.rs:16:12\n    |\n LL | pub struct AtLeastByte<T: ?Sized> {\n    |                        - this type parameter needs to be `Sized`"}, {"sha": "ea177c1974619c09025fd188e407d171c08cde4d", "filename": "src/test/ui/const-generics/const-argument-if-length.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/const-argument-if-length.rs:19:24\n+  --> $DIR/const-argument-if-length.rs:18:24\n    |\n LL |     pad: [u8; is_zst::<T>()],\n    |                        ^ cannot perform const operation using `T`\n@@ -8,7 +8,7 @@ LL |     pad: [u8; is_zst::<T>()],\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/const-argument-if-length.rs:17:12\n+  --> $DIR/const-argument-if-length.rs:16:12\n    |\n LL | pub struct AtLeastByte<T: ?Sized> {\n    |                        - this type parameter needs to be `Sized`"}, {"sha": "67ed85f96afd7f2ddf55e6fece652fdcb60526d6", "filename": "src/test/ui/const-generics/const-argument-if-length.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, allow(incomplete_features))]\n #![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n pub const fn is_zst<T: ?Sized>() -> usize {\n     if std::mem::size_of::<T>() == 0 {"}, {"sha": "93c5173554f3c4a9065af26b997787c458c4e80f", "filename": "src/test/ui/const-generics/const-expression-parameter.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/const-expression-parameter.rs:16:20\n+  --> $DIR/const-expression-parameter.rs:15:20\n    |\n LL |     i32_identity::<1 + 2>();\n    |                    ^^^^^"}, {"sha": "93c5173554f3c4a9065af26b997787c458c4e80f", "filename": "src/test/ui/const-generics/const-expression-parameter.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/const-expression-parameter.rs:16:20\n+  --> $DIR/const-expression-parameter.rs:15:20\n    |\n LL |     i32_identity::<1 + 2>();\n    |                    ^^^^^"}, {"sha": "cb609a5641613e30d5bc9fad9095c3a254ce4595", "filename": "src/test/ui/const-generics/const-expression-parameter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn i32_identity<const X: i32>() -> i32 {\n     5"}, {"sha": "5c1ee4e0d5a9eebbfe60df610111e630d2b41b29", "filename": "src/test/ui/const-generics/const-fn-with-const-param.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -4,7 +4,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n const fn const_u32_identity<const X: u32>() -> u32 {\n     X"}, {"sha": "224fc794e327f5d4006a6373471a041606d70d5f", "filename": "src/test/ui/const-generics/const-generic-array-wrapper.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct Foo<T, const N: usize>([T; N]);\n "}, {"sha": "95632f798969f96827fee0ffe756c3172352a9c8", "filename": "src/test/ui/const-generics/const-generic-type_name.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n #[derive(Debug)]\n struct S<const N: usize>;"}, {"sha": "6c2b14f2770da147c56c556222b70e88a9dc8eaa", "filename": "src/test/ui/const-generics/const-param-after-const-literal-arg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-after-const-literal-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-after-const-literal-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-after-const-literal-arg.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct Foo<const A: usize, const B: usize>;\n "}, {"sha": "09a4f66de39c52348c32cdae49cf01f58d7deccd", "filename": "src/test/ui/const-generics/const-param-before-other-params.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/const-param-before-other-params.rs:6:21\n+  --> $DIR/const-param-before-other-params.rs:5:21\n    |\n LL | fn bar<const X: (), 'a>(_: &'a ()) {\n    |       --------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const X: ()>`"}, {"sha": "1e49588f1b4e926a2cee586060cecdd4847e067c", "filename": "src/test/ui/const-generics/const-param-before-other-params.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,17 +1,17 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/const-param-before-other-params.rs:6:21\n+  --> $DIR/const-param-before-other-params.rs:5:21\n    |\n LL | fn bar<const X: (), 'a>(_: &'a ()) {\n    |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const X: ()>`\n \n error: type parameters must be declared prior to const parameters\n-  --> $DIR/const-param-before-other-params.rs:11:21\n+  --> $DIR/const-param-before-other-params.rs:10:21\n    |\n LL | fn foo<const X: (), T>(_: &T) {}\n    |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const X: ()>`\n \n error: `()` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-param-before-other-params.rs:6:17\n+  --> $DIR/const-param-before-other-params.rs:5:17\n    |\n LL | fn bar<const X: (), 'a>(_: &'a ()) {\n    |                 ^^\n@@ -20,7 +20,7 @@ LL | fn bar<const X: (), 'a>(_: &'a ()) {\n    = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `()` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-param-before-other-params.rs:11:17\n+  --> $DIR/const-param-before-other-params.rs:10:17\n    |\n LL | fn foo<const X: (), T>(_: &T) {}\n    |                 ^^"}, {"sha": "508bb3e6a689ecc28ab5ecb8cce3eec34e13a695", "filename": "src/test/ui/const-generics/const-param-before-other-params.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn bar<const X: (), 'a>(_: &'a ()) {\n     //~^ ERROR lifetime parameters must be declared prior to const parameters"}, {"sha": "119f932745b3f05670e4c2da7d6d9f9794b8e0ee", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.full.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,29 +1,29 @@\n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:11:19\n+  --> $DIR/const-param-elided-lifetime.rs:10:19\n    |\n LL | struct A<const N: &u8>;\n    |                   ^ explicit lifetime name needed here\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:16:15\n+  --> $DIR/const-param-elided-lifetime.rs:15:15\n    |\n LL | impl<const N: &u8> A<N> {\n    |               ^ explicit lifetime name needed here\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:19:21\n+  --> $DIR/const-param-elided-lifetime.rs:18:21\n    |\n LL |     fn foo<const M: &u8>(&self) {}\n    |                     ^ explicit lifetime name needed here\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:24:15\n+  --> $DIR/const-param-elided-lifetime.rs:23:15\n    |\n LL | impl<const N: &u8> B for A<N> {}\n    |               ^ explicit lifetime name needed here\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:28:17\n+  --> $DIR/const-param-elided-lifetime.rs:27:17\n    |\n LL | fn bar<const N: &u8>() {}\n    |                 ^ explicit lifetime name needed here"}, {"sha": "5d3c8f7b2e613ebf65b1b90a0763a04d3a5501e5", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.min.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,35 +1,35 @@\n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:11:19\n+  --> $DIR/const-param-elided-lifetime.rs:10:19\n    |\n LL | struct A<const N: &u8>;\n    |                   ^ explicit lifetime name needed here\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:16:15\n+  --> $DIR/const-param-elided-lifetime.rs:15:15\n    |\n LL | impl<const N: &u8> A<N> {\n    |               ^ explicit lifetime name needed here\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:19:21\n+  --> $DIR/const-param-elided-lifetime.rs:18:21\n    |\n LL |     fn foo<const M: &u8>(&self) {}\n    |                     ^ explicit lifetime name needed here\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:24:15\n+  --> $DIR/const-param-elided-lifetime.rs:23:15\n    |\n LL | impl<const N: &u8> B for A<N> {}\n    |               ^ explicit lifetime name needed here\n \n error[E0637]: `&` without an explicit lifetime name cannot be used here\n-  --> $DIR/const-param-elided-lifetime.rs:28:17\n+  --> $DIR/const-param-elided-lifetime.rs:27:17\n    |\n LL | fn bar<const N: &u8>() {}\n    |                 ^ explicit lifetime name needed here\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-param-elided-lifetime.rs:11:19\n+  --> $DIR/const-param-elided-lifetime.rs:10:19\n    |\n LL | struct A<const N: &u8>;\n    |                   ^^^\n@@ -38,7 +38,7 @@ LL | struct A<const N: &u8>;\n    = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-param-elided-lifetime.rs:16:15\n+  --> $DIR/const-param-elided-lifetime.rs:15:15\n    |\n LL | impl<const N: &u8> A<N> {\n    |               ^^^\n@@ -47,7 +47,7 @@ LL | impl<const N: &u8> A<N> {\n    = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-param-elided-lifetime.rs:24:15\n+  --> $DIR/const-param-elided-lifetime.rs:23:15\n    |\n LL | impl<const N: &u8> B for A<N> {}\n    |               ^^^\n@@ -56,7 +56,7 @@ LL | impl<const N: &u8> B for A<N> {}\n    = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-param-elided-lifetime.rs:28:17\n+  --> $DIR/const-param-elided-lifetime.rs:27:17\n    |\n LL | fn bar<const N: &u8>() {}\n    |                 ^^^\n@@ -65,7 +65,7 @@ LL | fn bar<const N: &u8>() {}\n    = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-param-elided-lifetime.rs:19:21\n+  --> $DIR/const-param-elided-lifetime.rs:18:21\n    |\n LL |     fn foo<const M: &u8>(&self) {}\n    |                     ^^^"}, {"sha": "89715a7b8e9d4557066577979d8b9fd10f95a876", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -6,7 +6,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct A<const N: &u8>;\n //~^ ERROR `&` without an explicit lifetime name cannot be used here"}, {"sha": "c2ec7359c9f7be224196ef678fc5d1006c2e8fae", "filename": "src/test/ui/const-generics/const-param-from-outer-fn.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0401]: can't use generic parameters from outer function\n-  --> $DIR/const-param-from-outer-fn.rs:9:9\n+  --> $DIR/const-param-from-outer-fn.rs:8:9\n    |\n LL | fn foo<const X: u32>() {\n    |              - const parameter from outer function"}, {"sha": "c2ec7359c9f7be224196ef678fc5d1006c2e8fae", "filename": "src/test/ui/const-generics/const-param-from-outer-fn.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0401]: can't use generic parameters from outer function\n-  --> $DIR/const-param-from-outer-fn.rs:9:9\n+  --> $DIR/const-param-from-outer-fn.rs:8:9\n    |\n LL | fn foo<const X: u32>() {\n    |              - const parameter from outer function"}, {"sha": "27b9ca9c291ec4e6baa0060cbfa4a585b82724a9", "filename": "src/test/ui/const-generics/const-param-from-outer-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const X: u32>() {\n     fn bar() -> u32 {"}, {"sha": "9cafb05fbcb6b8bcc86f1e220b51bce884c74915", "filename": "src/test/ui/const-generics/const-param-hygiene.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-hygiene.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n macro_rules! bar {\n     ($($t:tt)*) => { impl<const N: usize> $($t)* };"}, {"sha": "9dc9c80241d5922a023287011f58953518563d1f", "filename": "src/test/ui/const-generics/const-param-in-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-async.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n async fn foo<const N: usize>(arg: [u8; N]) -> usize { arg.len() }\n "}, {"sha": "79b3ae2037edabf1087dba5794db339d4758b262", "filename": "src/test/ui/const-generics/const-param-in-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -4,7 +4,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n \n trait Trait<const T: u8> {}"}, {"sha": "ddd15dbc41bc36c85f19647c8c87fb8206daee00", "filename": "src/test/ui/const-generics/const-param-shadowing.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,3 @@\n-#![feature(min_const_generics)]\n-\n type N = u32;\n struct Foo<const M: usize>;\n fn test<const N: usize>() -> Foo<N> { //~ ERROR type provided when"}, {"sha": "7447ca3ff36315992568a524d80ed0344f585196", "filename": "src/test/ui/const-generics/const-param-shadowing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0747]: type provided when a constant was expected\n-  --> $DIR/const-param-shadowing.rs:5:34\n+  --> $DIR/const-param-shadowing.rs:3:34\n    |\n LL | fn test<const N: usize>() -> Foo<N> {\n    |                                  ^"}, {"sha": "f639e276f46683346b33b1d7420e3e70381d46e9", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,11 +1,11 @@\n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/const-param-type-depends-on-const-param.rs:12:52\n+  --> $DIR/const-param-type-depends-on-const-param.rs:11:52\n    |\n LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n    |                                                    ^ the type must not depend on the parameter `N`\n \n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/const-param-type-depends-on-const-param.rs:16:40\n+  --> $DIR/const-param-type-depends-on-const-param.rs:15:40\n    |\n LL | pub struct SelfDependent<const N: [u8; N]>;\n    |                                        ^ the type must not depend on the parameter `N`"}, {"sha": "d63bc23632096e5ff2145cfed4319848b220b194", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,17 +1,17 @@\n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/const-param-type-depends-on-const-param.rs:12:52\n+  --> $DIR/const-param-type-depends-on-const-param.rs:11:52\n    |\n LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n    |                                                    ^ the type must not depend on the parameter `N`\n \n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/const-param-type-depends-on-const-param.rs:16:40\n+  --> $DIR/const-param-type-depends-on-const-param.rs:15:40\n    |\n LL | pub struct SelfDependent<const N: [u8; N]>;\n    |                                        ^ the type must not depend on the parameter `N`\n \n error: `[u8; _]` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-param-type-depends-on-const-param.rs:12:47\n+  --> $DIR/const-param-type-depends-on-const-param.rs:11:47\n    |\n LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n    |                                               ^^^^^^^\n@@ -20,7 +20,7 @@ LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n    = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `[u8; _]` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-param-type-depends-on-const-param.rs:16:35\n+  --> $DIR/const-param-type-depends-on-const-param.rs:15:35\n    |\n LL | pub struct SelfDependent<const N: [u8; N]>;\n    |                                   ^^^^^^^"}, {"sha": "62b146e016a13c7bc8e9dba21d6bce867d50bbbf", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n // Currently, const parameters cannot depend on other generic parameters,\n // as our current implementation can't really support this."}, {"sha": "781f50e61734d21e91ff9bff44f3ab9ed7117440", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,7 @@\n \n use std::marker::PhantomData;\n \n-struct B<T, const N: T>(PhantomData<[T; N]>); //~ ERROR const generics are unstable\n+struct B<T, const N: T>(PhantomData<[T; N]>);\n //~^ ERROR the type of const parameters must not depend on other generic parameters\n \n fn main() {}"}, {"sha": "8e14defd65d99c87ef7c604082b3c816b6ee7ee3", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -4,16 +4,6 @@ error[E0770]: the type of const parameters must not depend on other generic para\n LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n    |                      ^ the type must not depend on the parameter `T`\n \n-error[E0658]: const generics are unstable\n-  --> $DIR/const-param-type-depends-on-type-param-ungated.rs:6:19\n-   |\n-LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n-   |                   ^\n-   |\n-   = note: see issue #74878 <https://github.com/rust-lang/rust/issues/74878> for more information\n-   = help: add `#![feature(min_const_generics)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0658, E0770.\n-For more information about an error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "a83ee627187b52e5577ee95e0e21f0ede4d84747", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,11 +1,11 @@\n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/const-param-type-depends-on-type-param.rs:12:34\n+  --> $DIR/const-param-type-depends-on-type-param.rs:11:34\n    |\n LL | pub struct Dependent<T, const X: T>([(); X]);\n    |                                  ^ the type must not depend on the parameter `T`\n \n error[E0392]: parameter `T` is never used\n-  --> $DIR/const-param-type-depends-on-type-param.rs:12:22\n+  --> $DIR/const-param-type-depends-on-type-param.rs:11:22\n    |\n LL | pub struct Dependent<T, const X: T>([(); X]);\n    |                      ^ unused parameter"}, {"sha": "a83ee627187b52e5577ee95e0e21f0ede4d84747", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,11 +1,11 @@\n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/const-param-type-depends-on-type-param.rs:12:34\n+  --> $DIR/const-param-type-depends-on-type-param.rs:11:34\n    |\n LL | pub struct Dependent<T, const X: T>([(); X]);\n    |                                  ^ the type must not depend on the parameter `T`\n \n error[E0392]: parameter `T` is never used\n-  --> $DIR/const-param-type-depends-on-type-param.rs:12:22\n+  --> $DIR/const-param-type-depends-on-type-param.rs:11:22\n    |\n LL | pub struct Dependent<T, const X: T>([(); X]);\n    |                      ^ unused parameter"}, {"sha": "910a964350226555065b2202e5dc04f7786ba293", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n // Currently, const parameters cannot depend on other generic parameters,\n // as our current implementation can't really support this."}, {"sha": "923964a4070a1d3abb819d3d6a730506a396cf05", "filename": "src/test/ui/const-generics/const-parameter-uppercase-lint.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,11 +1,11 @@\n error: const parameter `x` should have an upper case name\n-  --> $DIR/const-parameter-uppercase-lint.rs:9:15\n+  --> $DIR/const-parameter-uppercase-lint.rs:8:15\n    |\n LL | fn noop<const x: u32>() {\n    |               ^ help: convert the identifier to upper case (notice the capitalization): `X`\n    |\n note: the lint level is defined here\n-  --> $DIR/const-parameter-uppercase-lint.rs:7:9\n+  --> $DIR/const-parameter-uppercase-lint.rs:6:9\n    |\n LL | #![deny(non_upper_case_globals)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "923964a4070a1d3abb819d3d6a730506a396cf05", "filename": "src/test/ui/const-generics/const-parameter-uppercase-lint.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,11 +1,11 @@\n error: const parameter `x` should have an upper case name\n-  --> $DIR/const-parameter-uppercase-lint.rs:9:15\n+  --> $DIR/const-parameter-uppercase-lint.rs:8:15\n    |\n LL | fn noop<const x: u32>() {\n    |               ^ help: convert the identifier to upper case (notice the capitalization): `X`\n    |\n note: the lint level is defined here\n-  --> $DIR/const-parameter-uppercase-lint.rs:7:9\n+  --> $DIR/const-parameter-uppercase-lint.rs:6:9\n    |\n LL | #![deny(non_upper_case_globals)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "5d97907c2e7fa430fcc7852e82dabc769d1cc1e7", "filename": "src/test/ui/const-generics/const-parameter-uppercase-lint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n #![deny(non_upper_case_globals)]\n "}, {"sha": "fb150f892edc4ab511878de2db29ff4e9cebf432", "filename": "src/test/ui/const-generics/const-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -4,7 +4,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n #![allow(dead_code, unused_variables)]\n "}, {"sha": "d6a54ead13163c2f2cd2850258d326613dcd25aa", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/feature-gate-const_evaluatable_checked.rs:9:30\n+  --> $DIR/feature-gate-const_evaluatable_checked.rs:8:30\n    |\n LL | fn test<const N: usize>() -> Arr<N> where Arr<N>: Default {\n    |                              ^^^^^^"}, {"sha": "7de4bfcdd0587ed2c591da87c63c70a6c018f96d", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/feature-gate-const_evaluatable_checked.rs:6:33\n+  --> $DIR/feature-gate-const_evaluatable_checked.rs:5:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];\n    |                                 ^ cannot perform const operation using `N`"}, {"sha": "f49ca0251aa93820e0cb0201dabf2aedd65b2bdc", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n type Arr<const N: usize> = [u8; N - 1];\n //[min]~^ ERROR generic parameters may not be used in const operations"}, {"sha": "9f3d94bbd8abef87c9b89734c5f809b6c095b3ab", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/simple.rs:8:53\n+  --> $DIR/simple.rs:7:53\n    |\n LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n    |                                                     ^ cannot perform const operation using `N`\n@@ -8,7 +8,7 @@ LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/simple.rs:8:35\n+  --> $DIR/simple.rs:7:35\n    |\n LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n    |                                   ^ cannot perform const operation using `N`"}, {"sha": "94ad71b6c1ac9cfa2d31cba6550c71a2dd6f39e2", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // [full] run-pass\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(min, feature(min_const_generics))]\n #![feature(const_evaluatable_checked)]\n #![allow(incomplete_features)]\n "}, {"sha": "c8549f101daf683b2daa451aeba18330b6d3f937", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/simple_fail.rs:7:33\n+  --> $DIR/simple_fail.rs:6:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];\n    |                                 ^^^^^ attempt to compute `0_usize - 1_usize`, which would overflow"}, {"sha": "df54b4cbca5bd8674786fb97f7fc19936aa7e885", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/simple_fail.rs:7:33\n+  --> $DIR/simple_fail.rs:6:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];\n    |                                 ^ cannot perform const operation using `N`"}, {"sha": "3cbc077f4f146b2f60c32a454f701f479c1dd0e9", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,6 +1,5 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(min, feature(min_const_generics))]\n #![feature(const_evaluatable_checked)]\n #![allow(incomplete_features)]\n "}, {"sha": "b6fa478f48df4414aa661e795714823227fd9dbb", "filename": "src/test/ui/const-generics/core-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fcore-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fcore-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcore-types.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -4,7 +4,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct A<const N: u8>;\n struct B<const N: u16>;"}, {"sha": "1d495c9562ded51c1e75d72eab8ad79d3dd107f3", "filename": "src/test/ui/const-generics/cross_crate_complex.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fcross_crate_complex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fcross_crate_complex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcross_crate_complex.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -5,7 +5,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n extern crate crayte;\n \n use crayte::*;"}, {"sha": "cec56d7038a48a193e31615682ce555f4a1ec7d9", "filename": "src/test/ui/const-generics/defaults/complex-unord-param.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: type parameters must be declared prior to const parameters\n-  --> $DIR/complex-unord-param.rs:9:41\n+  --> $DIR/complex-unord-param.rs:8:41\n    |\n LL | struct NestedArrays<'a, const N: usize, A: 'a, const M: usize, T:'a =u32> {\n    |                    ---------------------^----------------------^--------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, A: 'a, T: 'a, const N: usize, const M: usize>`"}, {"sha": "82b3627d22ff877d1d42b84c1808029c498e56f8", "filename": "src/test/ui/const-generics/defaults/complex-unord-param.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n // Checks a complicated usage of unordered params\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n #![allow(dead_code)]\n \n struct NestedArrays<'a, const N: usize, A: 'a, const M: usize, T:'a =u32> {"}, {"sha": "98352addaef15618d1a3346829d1365a5e71380a", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,11 +1,11 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:7:28\n+  --> $DIR/intermixed-lifetime.rs:6:28\n    |\n LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n    |           -----------------^^---------- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T>`\n \n error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/intermixed-lifetime.rs:11:37\n+  --> $DIR/intermixed-lifetime.rs:10:37\n    |\n LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n    |           --------------------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T>`"}, {"sha": "532f6d700b28f7e7fb98ea4540b2fc46be789831", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,23 +1,23 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:7:28\n+  --> $DIR/intermixed-lifetime.rs:6:28\n    |\n LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n    |           -----------------^^---------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, const N: usize>`\n \n error: type parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:7:32\n+  --> $DIR/intermixed-lifetime.rs:6:32\n    |\n LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n    |           ---------------------^------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, const N: usize>`\n \n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:11:37\n+  --> $DIR/intermixed-lifetime.rs:10:37\n    |\n LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n    |           --------------------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, const N: usize>`\n \n error: type parameters must be declared prior to const parameters\n-  --> $DIR/intermixed-lifetime.rs:11:28\n+  --> $DIR/intermixed-lifetime.rs:10:28\n    |\n LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n    |           -----------------^----------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, const N: usize>`"}, {"sha": "9e83bf92a59b93b68e66b170e11965eddd7ebd37", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // Checks that lifetimes cannot be interspersed between consts and types.\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n //~^ Error lifetime parameters must be declared prior to const parameters"}, {"sha": "86d6173fa0273cb5fcfda9d9a3a27f05bddf3799", "filename": "src/test/ui/const-generics/defaults/needs-feature.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: type parameters must be declared prior to const parameters\n-  --> $DIR/needs-feature.rs:10:26\n+  --> $DIR/needs-feature.rs:9:26\n    |\n LL | struct A<const N: usize, T=u32>(T);\n    |         -----------------^----- help: reorder the parameters: lifetimes, then types, then consts: `<T, const N: usize>`"}, {"sha": "86d6173fa0273cb5fcfda9d9a3a27f05bddf3799", "filename": "src/test/ui/const-generics/defaults/needs-feature.none.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.none.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,18 +1,8 @@\n error: type parameters must be declared prior to const parameters\n-  --> $DIR/needs-feature.rs:10:26\n+  --> $DIR/needs-feature.rs:9:26\n    |\n LL | struct A<const N: usize, T=u32>(T);\n-   |         -----------------^----- help: reorder the parameters: lifetimes, then types: `<T, const N: usize>`\n+   |         -----------------^----- help: reorder the parameters: lifetimes, then types, then consts: `<T, const N: usize>`\n \n-error[E0658]: const generics are unstable\n-  --> $DIR/needs-feature.rs:10:16\n-   |\n-LL | struct A<const N: usize, T=u32>(T);\n-   |                ^\n-   |\n-   = note: see issue #74878 <https://github.com/rust-lang/rust/issues/74878> for more information\n-   = help: add `#![feature(min_const_generics)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "7eb7764a64449d0dc2636f2f779be460d6b3b2d5", "filename": "src/test/ui/const-generics/defaults/needs-feature.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fneeds-feature.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,16 +1,13 @@\n //[full] run-pass\n // Verifies that having generic parameters after constants is not permitted without the\n // `const_generics` feature.\n-// revisions: none min full\n+// revisions: min full\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct A<const N: usize, T=u32>(T);\n-//[none]~^ ERROR type parameters must be declared prior\n-//[none]~| ERROR const generics are unstable\n-//[min]~^^^ ERROR type parameters must be declared prior\n+//[min]~^ ERROR type parameters must be declared prior\n \n fn main() {\n   let _: A<3> = A(0);"}, {"sha": "01fb4210dd63f5351bf230bb4c70b8dc5f37578d", "filename": "src/test/ui/const-generics/defaults/simple-defaults.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: type parameters must be declared prior to const parameters\n-  --> $DIR/simple-defaults.rs:9:40\n+  --> $DIR/simple-defaults.rs:8:40\n    |\n LL | struct FixedOutput<'a, const N: usize, T=u32> {\n    |                   ---------------------^----- help: reorder the parameters: lifetimes, then types, then consts: `<'a, T, const N: usize>`"}, {"sha": "1f1b6c2260db618b2ff0f0433d6f24c9be0df1b3", "filename": "src/test/ui/const-generics/defaults/simple-defaults.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fsimple-defaults.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n // Checks some basic test cases for defaults.\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n #![allow(dead_code)]\n \n struct FixedOutput<'a, const N: usize, T=u32> {"}, {"sha": "96deb4a8b5abb968bfdd951aa2037ea55f6ec271", "filename": "src/test/ui/const-generics/defaults/wrong-order.full.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: type parameters with a default must be trailing\n-  --> $DIR/wrong-order.rs:5:10\n+  --> $DIR/wrong-order.rs:4:10\n    |\n LL | struct A<T = u32, const N: usize> {\n    |          ^\n@@ -14,7 +14,6 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "b19da76f415d72be5502c1c69ea42a2387114fa2", "filename": "src/test/ui/const-generics/defaults/wrong-order.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: type parameters with a default must be trailing\n-  --> $DIR/wrong-order.rs:5:10\n+  --> $DIR/wrong-order.rs:4:10\n    |\n LL | struct A<T = u32, const N: usize> {\n    |          ^"}, {"sha": "4f1c05011b0bfc2d02f08fbc969a51254d651616", "filename": "src/test/ui/const-generics/defaults/wrong-order.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,6 +1,5 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct A<T = u32, const N: usize> {\n     //~^ ERROR type parameters with a default must be trailing"}, {"sha": "ce1481d97e9b485765aa7c78c57fc00975e3e8e5", "filename": "src/test/ui/const-generics/derive-debug-array-wrapper.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -4,7 +4,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n #[derive(Debug)]\n struct X<const N: usize> {"}, {"sha": "d6b32323e2d012240e4d6e1258ef0844ff4170ee", "filename": "src/test/ui/const-generics/different_byref.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/different_byref.rs:13:9\n+  --> $DIR/different_byref.rs:12:9\n    |\n LL |     x = Const::<{ [4] }> {};\n    |         ^^^^^^^^^^^^^^^^^^^ expected `3_usize`, found `4_usize`"}, {"sha": "05720d15404ff45f33f89e743fd454d0c3769278", "filename": "src/test/ui/const-generics/different_byref.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: `[usize; 1]` is forbidden as the type of a const generic parameter\n-  --> $DIR/different_byref.rs:8:23\n+  --> $DIR/different_byref.rs:7:23\n    |\n LL | struct Const<const V: [usize; 1]> {}\n    |                       ^^^^^^^^^^"}, {"sha": "7977560ecbcf1edc4827c1b28d6faf72a22f7ccf", "filename": "src/test/ui/const-generics/different_byref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct Const<const V: [usize; 1]> {}\n //[min]~^ ERROR `[usize; 1]` is forbidden"}, {"sha": "027e282c398decac53d5ce3202350573a989d576", "filename": "src/test/ui/const-generics/different_byref_simple.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/different_byref_simple.rs:12:9\n+  --> $DIR/different_byref_simple.rs:11:9\n    |\n LL |     u = ConstUsize::<4> {};\n    |         ^^^^^^^^^^^^^^^^^^ expected `3_usize`, found `4_usize`"}, {"sha": "027e282c398decac53d5ce3202350573a989d576", "filename": "src/test/ui/const-generics/different_byref_simple.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/different_byref_simple.rs:12:9\n+  --> $DIR/different_byref_simple.rs:11:9\n    |\n LL |     u = ConstUsize::<4> {};\n    |         ^^^^^^^^^^^^^^^^^^ expected `3_usize`, found `4_usize`"}, {"sha": "b48189fc2cba9210690ec0274ac89c4264c978e9", "filename": "src/test/ui/const-generics/different_byref_simple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref_simple.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct ConstUsize<const V: usize> {}\n "}, {"sha": "73ed23521c30c57f16306d98e450b249664fd7e8", "filename": "src/test/ui/const-generics/dyn-supertraits.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdyn-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fdyn-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdyn-supertraits.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n trait Foo<const N: usize> {\n     fn myfun(&self) -> usize;"}, {"sha": "e0e1423ba0107083d9b9583e57cb6eef12a0810e", "filename": "src/test/ui/const-generics/exhaustive-value.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `(): Foo<N>` is not satisfied\n-  --> $DIR/exhaustive-value.rs:267:5\n+  --> $DIR/exhaustive-value.rs:266:5\n    |\n LL |     fn test() {}\n    |     --------- required by `Foo::test`"}, {"sha": "e0e1423ba0107083d9b9583e57cb6eef12a0810e", "filename": "src/test/ui/const-generics/exhaustive-value.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `(): Foo<N>` is not satisfied\n-  --> $DIR/exhaustive-value.rs:267:5\n+  --> $DIR/exhaustive-value.rs:266:5\n    |\n LL |     fn test() {}\n    |     --------- required by `Foo::test`"}, {"sha": "921f9a467078b31d76fa5030da9401d12a958edd", "filename": "src/test/ui/const-generics/exhaustive-value.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fexhaustive-value.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n trait Foo<const N: u8> {\n     fn test() {}"}, {"sha": "d984449e6ca6e25da8e5830164d7aef324d79a4a", "filename": "src/test/ui/const-generics/fn-const-param-call.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,11 +1,11 @@\n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/fn-const-param-call.rs:12:25\n+  --> $DIR/fn-const-param-call.rs:11:25\n    |\n LL | struct Wrapper<const F: fn() -> u32>;\n    |                         ^^^^^^^^^^^\n \n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/fn-const-param-call.rs:14:15\n+  --> $DIR/fn-const-param-call.rs:13:15\n    |\n LL | impl<const F: fn() -> u32> Wrapper<F> {\n    |               ^^^^^^^^^^^"}, {"sha": "d984449e6ca6e25da8e5830164d7aef324d79a4a", "filename": "src/test/ui/const-generics/fn-const-param-call.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,11 +1,11 @@\n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/fn-const-param-call.rs:12:25\n+  --> $DIR/fn-const-param-call.rs:11:25\n    |\n LL | struct Wrapper<const F: fn() -> u32>;\n    |                         ^^^^^^^^^^^\n \n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/fn-const-param-call.rs:14:15\n+  --> $DIR/fn-const-param-call.rs:13:15\n    |\n LL | impl<const F: fn() -> u32> Wrapper<F> {\n    |               ^^^^^^^^^^^"}, {"sha": "70a104e22227d44142e432eff03792e39979330d", "filename": "src/test/ui/const-generics/fn-const-param-call.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn function() -> u32 {\n     17"}, {"sha": "f0767a10994a547bccfefb8904e15464e1bb2ba2", "filename": "src/test/ui/const-generics/fn-const-param-infer.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/fn-const-param-infer.rs:7:25\n+  --> $DIR/fn-const-param-infer.rs:6:25\n    |\n LL | struct Checked<const F: fn(usize) -> bool>;\n    |                         ^^^^^^^^^^^^^^^^^"}, {"sha": "f0767a10994a547bccfefb8904e15464e1bb2ba2", "filename": "src/test/ui/const-generics/fn-const-param-infer.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/fn-const-param-infer.rs:7:25\n+  --> $DIR/fn-const-param-infer.rs:6:25\n    |\n LL | struct Checked<const F: fn(usize) -> bool>;\n    |                         ^^^^^^^^^^^^^^^^^"}, {"sha": "d090479d4c30b3eb2f50d210120229712afc5f9e", "filename": "src/test/ui/const-generics/fn-const-param-infer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct Checked<const F: fn(usize) -> bool>;\n //~^ ERROR: using function pointers as const generic parameters"}, {"sha": "58c1b95893e74ea6c9c48693eb0333d070651863", "filename": "src/test/ui/const-generics/fn-taking-const-generic-array.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n use std::fmt::Display;\n "}, {"sha": "5c0f17537fa506c071048506c9c1b92bfca6b0a6", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0741]: `C` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n-  --> $DIR/forbid-non-structural_match-types.rs:15:19\n+  --> $DIR/forbid-non-structural_match-types.rs:14:19\n    |\n LL | struct D<const X: C>;\n    |                   ^ `C` doesn't derive both `PartialEq` and `Eq`"}, {"sha": "3912cf577512c97caa088232bbde7542db91b09f", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: `A` is forbidden as the type of a const generic parameter\n-  --> $DIR/forbid-non-structural_match-types.rs:10:19\n+  --> $DIR/forbid-non-structural_match-types.rs:9:19\n    |\n LL | struct B<const X: A>; // ok\n    |                   ^\n@@ -8,7 +8,7 @@ LL | struct B<const X: A>; // ok\n    = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `C` is forbidden as the type of a const generic parameter\n-  --> $DIR/forbid-non-structural_match-types.rs:15:19\n+  --> $DIR/forbid-non-structural_match-types.rs:14:19\n    |\n LL | struct D<const X: C>;\n    |                   ^\n@@ -17,7 +17,7 @@ LL | struct D<const X: C>;\n    = help: more complex types are supported with `#[feature(const_generics)]`\n \n error[E0741]: `C` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n-  --> $DIR/forbid-non-structural_match-types.rs:15:19\n+  --> $DIR/forbid-non-structural_match-types.rs:14:19\n    |\n LL | struct D<const X: C>;\n    |                   ^ `C` doesn't derive both `PartialEq` and `Eq`"}, {"sha": "0fdb3ed4a5a7989c4db5247403c94be31936f7dd", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n #[derive(PartialEq, Eq)]\n struct A;"}, {"sha": "b827e482977b4b7f233bb0b73482c7eb5e1e680f", "filename": "src/test/ui/const-generics/foreign-item-const-parameter.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,13 +1,13 @@\n error[E0044]: foreign items may not have const parameters\n-  --> $DIR/foreign-item-const-parameter.rs:8:5\n+  --> $DIR/foreign-item-const-parameter.rs:7:5\n    |\n LL |     fn foo<const X: usize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ can't have const parameters\n    |\n    = help: replace the const parameters with concrete consts\n \n error[E0044]: foreign items may not have type or const parameters\n-  --> $DIR/foreign-item-const-parameter.rs:10:5\n+  --> $DIR/foreign-item-const-parameter.rs:9:5\n    |\n LL |     fn bar<T, const X: usize>(_: T);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't have type or const parameters"}, {"sha": "b827e482977b4b7f233bb0b73482c7eb5e1e680f", "filename": "src/test/ui/const-generics/foreign-item-const-parameter.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,13 +1,13 @@\n error[E0044]: foreign items may not have const parameters\n-  --> $DIR/foreign-item-const-parameter.rs:8:5\n+  --> $DIR/foreign-item-const-parameter.rs:7:5\n    |\n LL |     fn foo<const X: usize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ can't have const parameters\n    |\n    = help: replace the const parameters with concrete consts\n \n error[E0044]: foreign items may not have type or const parameters\n-  --> $DIR/foreign-item-const-parameter.rs:10:5\n+  --> $DIR/foreign-item-const-parameter.rs:9:5\n    |\n LL |     fn bar<T, const X: usize>(_: T);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't have type or const parameters"}, {"sha": "83caa89f033009eefd4b2f922809f6bba888ccfd", "filename": "src/test/ui/const-generics/foreign-item-const-parameter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforeign-item-const-parameter.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n extern \"C\" {\n     fn foo<const X: usize>(); //~ ERROR foreign items may not have const parameters"}, {"sha": "2d19a58a1457b6862d1de6860de86361c2298cc3", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/generic-function-call-in-array-length.rs:9:29\n+  --> $DIR/generic-function-call-in-array-length.rs:8:29\n    |\n LL | fn bar<const N: usize>() -> [u32; foo(N)] {\n    |                             ^^^^^^^^^^^^^"}, {"sha": "d7a3f04a8da854845449a848038830d0a5c3d07c", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/generic-function-call-in-array-length.rs:9:39\n+  --> $DIR/generic-function-call-in-array-length.rs:8:39\n    |\n LL | fn bar<const N: usize>() -> [u32; foo(N)] {\n    |                                       ^ cannot perform const operation using `N`\n@@ -8,7 +8,7 @@ LL | fn bar<const N: usize>() -> [u32; foo(N)] {\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/generic-function-call-in-array-length.rs:12:13\n+  --> $DIR/generic-function-call-in-array-length.rs:11:13\n    |\n LL |     [0; foo(N)]\n    |             ^ cannot perform const operation using `N`"}, {"sha": "a6d2bbd17eaabcf8c72aa617c83ac6a89e0f80ed", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, allow(incomplete_features))]\n #![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n const fn foo(n: usize) -> usize { n * 2 }\n "}, {"sha": "aff8780fb0d1cdcaea9737ebf63e78b19901aea8", "filename": "src/test/ui/const-generics/generic-param-mismatch.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/generic-param-mismatch.rs:7:5\n+  --> $DIR/generic-param-mismatch.rs:6:5\n    |\n LL | fn test<const N: usize, const M: usize>() -> [u8; M] {\n    |                                              ------- expected `[u8; M]` because of return type"}, {"sha": "aff8780fb0d1cdcaea9737ebf63e78b19901aea8", "filename": "src/test/ui/const-generics/generic-param-mismatch.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/generic-param-mismatch.rs:7:5\n+  --> $DIR/generic-param-mismatch.rs:6:5\n    |\n LL | fn test<const N: usize, const M: usize>() -> [u8; M] {\n    |                                              ------- expected `[u8; M]` because of return type"}, {"sha": "22fffe47dcc2f5c91941de8bc901b874a21cafa2", "filename": "src/test/ui/const-generics/generic-param-mismatch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-param-mismatch.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, allow(incomplete_features))]\n #![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn test<const N: usize, const M: usize>() -> [u8; M] {\n     [0; N] //~ ERROR mismatched types"}, {"sha": "c13882e7fe11619e1d978a97679dde13fdbedf6a", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/generic-sum-in-array-length.rs:7:45\n+  --> $DIR/generic-sum-in-array-length.rs:6:45\n    |\n LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n    |                                             ^^^^^^^^^^^^^^"}, {"sha": "cff5a62193c379fef3751941e0858cd7c1e75ab5", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/generic-sum-in-array-length.rs:7:53\n+  --> $DIR/generic-sum-in-array-length.rs:6:53\n    |\n LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n    |                                                     ^ cannot perform const operation using `A`\n@@ -8,7 +8,7 @@ LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/generic-sum-in-array-length.rs:7:57\n+  --> $DIR/generic-sum-in-array-length.rs:6:57\n    |\n LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n    |                                                         ^ cannot perform const operation using `B`"}, {"sha": "7ee0394ba14ce956ed28b58c277c16ab79605df4", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, allow(incomplete_features))]\n #![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n //[min]~^ ERROR generic parameters may not be used in const operations"}, {"sha": "1aa22698b640502743cf6468da577e0164bbc2d8", "filename": "src/test/ui/const-generics/impl-const-generic-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct S<const X: u32>;\n "}, {"sha": "26b965901a4c4d061f6d526f4918bbf20e480ace", "filename": "src/test/ui/const-generics/impl-trait-with-const-arguments.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-  --> $DIR/impl-trait-with-const-arguments.rs:24:20\n+  --> $DIR/impl-trait-with-const-arguments.rs:23:20\n    |\n LL |     assert_eq!(f::<4usize>(Usizable), 20usize);\n    |                    ^^^^^^ explicit generic argument not allowed"}, {"sha": "26b965901a4c4d061f6d526f4918bbf20e480ace", "filename": "src/test/ui/const-generics/impl-trait-with-const-arguments.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-  --> $DIR/impl-trait-with-const-arguments.rs:24:20\n+  --> $DIR/impl-trait-with-const-arguments.rs:23:20\n    |\n LL |     assert_eq!(f::<4usize>(Usizable), 20usize);\n    |                    ^^^^^^ explicit generic argument not allowed"}, {"sha": "2e6e49b9c0aa4fd99fcb19c4d9256f8a29a8b07b", "filename": "src/test/ui/const-generics/impl-trait-with-const-arguments.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, allow(incomplete_features))]\n #![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n trait Usizer {\n     fn m(self) -> usize;"}, {"sha": "9c8359b08a5c1f1ee5b271e0d52a789e37545387", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: wrong number of const arguments: expected 2, found 1\n-  --> $DIR/incorrect-number-of-const-args.rs:12:5\n+  --> $DIR/incorrect-number-of-const-args.rs:11:5\n    |\n LL |     foo::<0>();\n    |     ^^^^^^^^ expected 2 const arguments\n \n error[E0107]: wrong number of const arguments: expected 2, found 3\n-  --> $DIR/incorrect-number-of-const-args.rs:13:17\n+  --> $DIR/incorrect-number-of-const-args.rs:12:17\n    |\n LL |     foo::<0, 0, 0>();\n    |                 ^ unexpected const argument"}, {"sha": "9c8359b08a5c1f1ee5b271e0d52a789e37545387", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: wrong number of const arguments: expected 2, found 1\n-  --> $DIR/incorrect-number-of-const-args.rs:12:5\n+  --> $DIR/incorrect-number-of-const-args.rs:11:5\n    |\n LL |     foo::<0>();\n    |     ^^^^^^^^ expected 2 const arguments\n \n error[E0107]: wrong number of const arguments: expected 2, found 3\n-  --> $DIR/incorrect-number-of-const-args.rs:13:17\n+  --> $DIR/incorrect-number-of-const-args.rs:12:17\n    |\n LL |     foo::<0, 0, 0>();\n    |                 ^ unexpected const argument"}, {"sha": "3c4290df0564fd10390fccc723a09f5ec76db3ef", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const X: usize, const Y: usize>() -> usize {\n     0"}, {"sha": "e85bf8829aee715f2d2a39627c9161d8fb0888bf", "filename": "src/test/ui/const-generics/infer/cannot-infer-const-args.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed\n-  --> $DIR/cannot-infer-const-args.rs:12:5\n+  --> $DIR/cannot-infer-const-args.rs:11:5\n    |\n LL |     foo();\n    |     ^^^ cannot infer the value of const parameter `X` declared on the function `foo`"}, {"sha": "e85bf8829aee715f2d2a39627c9161d8fb0888bf", "filename": "src/test/ui/const-generics/infer/cannot-infer-const-args.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed\n-  --> $DIR/cannot-infer-const-args.rs:12:5\n+  --> $DIR/cannot-infer-const-args.rs:11:5\n    |\n LL |     foo();\n    |     ^^^ cannot infer the value of const parameter `X` declared on the function `foo`"}, {"sha": "cc52892bd04b77be911dcecbb19fc4236136f419", "filename": "src/test/ui/const-generics/infer/cannot-infer-const-args.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fcannot-infer-const-args.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const X: usize>() -> usize {\n     0"}, {"sha": "fcf7d3282b4398207839265755065337ffdf9e59", "filename": "src/test/ui/const-generics/infer/issue-77092.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,3 @@\n-#![feature(min_const_generics)]\n-\n use std::convert::TryInto;\n \n fn take_array_from_mut<T, const N: usize>(data: &mut [T], start: usize) -> &mut [T; N] {"}, {"sha": "5857a4211985a0ad44389fc59edbd15ff7ba71e5", "filename": "src/test/ui/const-generics/infer/issue-77092.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fissue-77092.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed\n-  --> $DIR/issue-77092.rs:13:26\n+  --> $DIR/issue-77092.rs:11:26\n    |\n LL |         println!(\"{:?}\", take_array_from_mut(&mut arr, i));\n    |                          ^^^^^^^^^^^^^^^^^^^ cannot infer the value of const parameter `N` declared on the function `take_array_from_mut`"}, {"sha": "f6d9c4a26453c3a5ba159e412e3315deb8ab8025", "filename": "src/test/ui/const-generics/infer/method-chain.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed\n-  --> $DIR/method-chain.rs:21:33\n+  --> $DIR/method-chain.rs:20:33\n    |\n LL |     Foo.bar().bar().bar().bar().baz();\n    |                                 ^^^ cannot infer the value of const parameter `N` declared on the associated function `baz`"}, {"sha": "f6d9c4a26453c3a5ba159e412e3315deb8ab8025", "filename": "src/test/ui/const-generics/infer/method-chain.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed\n-  --> $DIR/method-chain.rs:21:33\n+  --> $DIR/method-chain.rs:20:33\n    |\n LL |     Foo.bar().bar().bar().bar().baz();\n    |                                 ^^^ cannot infer the value of const parameter `N` declared on the associated function `baz`"}, {"sha": "8ac6a7d6267b7bc8f9920567fec682eaece488ba", "filename": "src/test/ui/const-generics/infer/method-chain.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Fmethod-chain.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct Foo;\n "}, {"sha": "254a28f70e213cb398183e230584954a99c677d2", "filename": "src/test/ui/const-generics/infer/uninferred-consts.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed\n-  --> $DIR/uninferred-consts.rs:14:9\n+  --> $DIR/uninferred-consts.rs:13:9\n    |\n LL |     Foo.foo();\n    |         ^^^ cannot infer the value of const parameter `A` declared on the associated function `foo`"}, {"sha": "254a28f70e213cb398183e230584954a99c677d2", "filename": "src/test/ui/const-generics/infer/uninferred-consts.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed\n-  --> $DIR/uninferred-consts.rs:14:9\n+  --> $DIR/uninferred-consts.rs:13:9\n    |\n LL |     Foo.foo();\n    |         ^^^ cannot infer the value of const parameter `A` declared on the associated function `foo`"}, {"sha": "bcd9aadb78af9f0692c1e9702ff0b976289570ee", "filename": "src/test/ui/const-generics/infer/uninferred-consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer%2Funinferred-consts.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n // taken from https://github.com/rust-lang/rust/issues/70507#issuecomment-615268893\n struct Foo;"}, {"sha": "5e2a3eaff5438ec8c51d7e4dda912679f54d4682", "filename": "src/test/ui/const-generics/infer_arg_from_pat.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arg_from_pat.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -5,7 +5,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct A<const N: usize> {\n     arr: [u8; N],"}, {"sha": "0273383856fd97dedaba45817d7f0e9e89f657a2", "filename": "src/test/ui/const-generics/infer_arr_len_from_pat.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finfer_arr_len_from_pat.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -5,7 +5,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn as_chunks<const N: usize>() -> [u8; N] {\n     loop {}"}, {"sha": "96e5976e44b336b3954e1a84dc19872822cc1ea5", "filename": "src/test/ui/const-generics/integer-literal-generic-arg-in-where-clause.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finteger-literal-generic-arg-in-where-clause.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn takes_closure_of_array_3<F>(f: F) where F: Fn([i32; 3]) {\n     f([1, 2, 3]);"}, {"sha": "3e90dbeece958e61e916ef22f94a1534fd580ed5", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/intrinsics-type_name-as-const-argument.rs:15:8\n+  --> $DIR/intrinsics-type_name-as-const-argument.rs:14:8\n    |\n LL |     T: Trait<{std::intrinsics::type_name::<T>()}>\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "4c2aaef349390e12e7ffcaf06c117f7d1aacc44b", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/intrinsics-type_name-as-const-argument.rs:15:44\n+  --> $DIR/intrinsics-type_name-as-const-argument.rs:14:44\n    |\n LL |     T: Trait<{std::intrinsics::type_name::<T>()}>\n    |                                            ^ cannot perform const operation using `T`\n@@ -8,7 +8,7 @@ LL |     T: Trait<{std::intrinsics::type_name::<T>()}>\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: `&'static str` is forbidden as the type of a const generic parameter\n-  --> $DIR/intrinsics-type_name-as-const-argument.rs:10:22\n+  --> $DIR/intrinsics-type_name-as-const-argument.rs:9:22\n    |\n LL | trait Trait<const S: &'static str> {}\n    |                      ^^^^^^^^^^^^"}, {"sha": "f24dd42eb2da7bc5690956b1b57670ba05082899", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, allow(incomplete_features))]\n #![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n #![feature(core_intrinsics)]\n #![feature(const_type_name)]"}, {"sha": "56deec16548f5c562998c16e15c6d9834c5b7645", "filename": "src/test/ui/const-generics/issue-61522-array-len-succ.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,13 +1,13 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-61522-array-len-succ.rs:7:40\n+  --> $DIR/issue-61522-array-len-succ.rs:6:40\n    |\n LL | pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n    |                                        ^^^^^^^^^^^^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-61522-array-len-succ.rs:12:24\n+  --> $DIR/issue-61522-array-len-succ.rs:11:24\n    |\n LL |     fn inner(&self) -> &[u8; COUNT + 1] {\n    |                        ^^^^^^^^^^^^^^^^"}, {"sha": "36a0a37ae9c3f69b2a16bf1bc34a6bd2b2ec7eaf", "filename": "src/test/ui/const-generics/issue-61522-array-len-succ.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-61522-array-len-succ.rs:7:45\n+  --> $DIR/issue-61522-array-len-succ.rs:6:45\n    |\n LL | pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n    |                                             ^^^^^ cannot perform const operation using `COUNT`\n@@ -8,7 +8,7 @@ LL | pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-61522-array-len-succ.rs:12:30\n+  --> $DIR/issue-61522-array-len-succ.rs:11:30\n    |\n LL |     fn inner(&self) -> &[u8; COUNT + 1] {\n    |                              ^^^^^ cannot perform const operation using `COUNT`"}, {"sha": "d4a948b92597d5727d01fec5128c578244d81692", "filename": "src/test/ui/const-generics/issue-61522-array-len-succ.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n //[full]~^ ERROR constant expression depends on a generic parameter"}, {"sha": "b6c6e6fe374040b30a542e7c119b93267c4cc661", "filename": "src/test/ui/const-generics/issue-66596-impl-trait-for-str-const-arg.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: `&'static str` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-66596-impl-trait-for-str-const-arg.rs:9:25\n+  --> $DIR/issue-66596-impl-trait-for-str-const-arg.rs:8:25\n    |\n LL | trait Trait<const NAME: &'static str> {\n    |                         ^^^^^^^^^^^^"}, {"sha": "2a741ba87a980957e337143885379e9b47eed37a", "filename": "src/test/ui/const-generics/issue-66596-impl-trait-for-str-const-arg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n \n trait Trait<const NAME: &'static str> {"}, {"sha": "2f004f75de56c67974c5096cf6c0af559a3c4433", "filename": "src/test/ui/const-generics/issue-67375.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n warning: cannot use constants which depend on generic parameters in types\n-  --> $DIR/issue-67375.rs:9:12\n+  --> $DIR/issue-67375.rs:8:12\n    |\n LL |     inner: [(); { [|_: &T| {}; 0].len() }],\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL |     inner: [(); { [|_: &T| {}; 0].len() }],\n    = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n \n error[E0392]: parameter `T` is never used\n-  --> $DIR/issue-67375.rs:7:12\n+  --> $DIR/issue-67375.rs:6:12\n    |\n LL | struct Bug<T> {\n    |            ^ unused parameter"}, {"sha": "337e7bc14099d5bcaf4c912168da65da9e0cd9e6", "filename": "src/test/ui/const-generics/issue-67375.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-67375.rs:9:25\n+  --> $DIR/issue-67375.rs:8:25\n    |\n LL |     inner: [(); { [|_: &T| {}; 0].len() }],\n    |                         ^ cannot perform const operation using `T`\n@@ -8,7 +8,7 @@ LL |     inner: [(); { [|_: &T| {}; 0].len() }],\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error[E0392]: parameter `T` is never used\n-  --> $DIR/issue-67375.rs:7:12\n+  --> $DIR/issue-67375.rs:6:12\n    |\n LL | struct Bug<T> {\n    |            ^ unused parameter"}, {"sha": "a8875b8b6bfcabf59e148ac2b3917686c2fe627b", "filename": "src/test/ui/const-generics/issue-67375.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, allow(incomplete_features))]\n #![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct Bug<T> {\n     //~^ ERROR parameter `T` is never used"}, {"sha": "5cdcefe35015f542d169231d05be2bda5501490b", "filename": "src/test/ui/const-generics/issue-67945-1.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-67945-1.rs:14:20\n+  --> $DIR/issue-67945-1.rs:13:20\n    |\n LL | struct Bug<S> {\n    |            - this type parameter\n@@ -13,7 +13,7 @@ LL |         let x: S = MaybeUninit::uninit();\n                        found union `MaybeUninit<_>`\n \n error[E0392]: parameter `S` is never used\n-  --> $DIR/issue-67945-1.rs:11:12\n+  --> $DIR/issue-67945-1.rs:10:12\n    |\n LL | struct Bug<S> {\n    |            ^ unused parameter"}, {"sha": "a3e086ea95486709445809cce14c07949227285e", "filename": "src/test/ui/const-generics/issue-67945-1.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-67945-1.rs:14:16\n+  --> $DIR/issue-67945-1.rs:13:16\n    |\n LL |         let x: S = MaybeUninit::uninit();\n    |                ^ cannot perform const operation using `S`\n@@ -8,7 +8,7 @@ LL |         let x: S = MaybeUninit::uninit();\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-67945-1.rs:17:45\n+  --> $DIR/issue-67945-1.rs:16:45\n    |\n LL |         let b = &*(&x as *const _ as *const S);\n    |                                             ^ cannot perform const operation using `S`\n@@ -17,7 +17,7 @@ LL |         let b = &*(&x as *const _ as *const S);\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error[E0392]: parameter `S` is never used\n-  --> $DIR/issue-67945-1.rs:11:12\n+  --> $DIR/issue-67945-1.rs:10:12\n    |\n LL | struct Bug<S> {\n    |            ^ unused parameter"}, {"sha": "84737e4e9857839380f0b6569e9ca132027e0860", "filename": "src/test/ui/const-generics/issue-67945-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, allow(incomplete_features))]\n #![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n use std::marker::PhantomData;\n "}, {"sha": "4d96058b395b2188317ca1594320b3fa9187b485", "filename": "src/test/ui/const-generics/issue-67945-2.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-67945-2.rs:12:20\n+  --> $DIR/issue-67945-2.rs:11:20\n    |\n LL | struct Bug<S> {\n    |            - this type parameter\n@@ -13,7 +13,7 @@ LL |         let x: S = MaybeUninit::uninit();\n                        found union `MaybeUninit<_>`\n \n error[E0392]: parameter `S` is never used\n-  --> $DIR/issue-67945-2.rs:9:12\n+  --> $DIR/issue-67945-2.rs:8:12\n    |\n LL | struct Bug<S> {\n    |            ^ unused parameter"}, {"sha": "860be4a9b6ac91efe8aa07b4b053b51763789945", "filename": "src/test/ui/const-generics/issue-67945-2.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-67945-2.rs:12:16\n+  --> $DIR/issue-67945-2.rs:11:16\n    |\n LL |         let x: S = MaybeUninit::uninit();\n    |                ^ cannot perform const operation using `S`\n@@ -8,7 +8,7 @@ LL |         let x: S = MaybeUninit::uninit();\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-67945-2.rs:15:45\n+  --> $DIR/issue-67945-2.rs:14:45\n    |\n LL |         let b = &*(&x as *const _ as *const S);\n    |                                             ^ cannot perform const operation using `S`\n@@ -17,7 +17,7 @@ LL |         let b = &*(&x as *const _ as *const S);\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error[E0392]: parameter `S` is never used\n-  --> $DIR/issue-67945-2.rs:9:12\n+  --> $DIR/issue-67945-2.rs:8:12\n    |\n LL | struct Bug<S> {\n    |            ^ unused parameter"}, {"sha": "4a46786e9a9bf3c3751f1a1df06d07fb5584a390", "filename": "src/test/ui/const-generics/issue-67945-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, allow(incomplete_features))]\n #![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n use std::mem::MaybeUninit;\n "}, {"sha": "fa66252bd6946f60b49dd710bde84e70db8908ca", "filename": "src/test/ui/const-generics/issue-67945-3.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-67945-3.rs:8:8\n+  --> $DIR/issue-67945-3.rs:7:8\n    |\n LL |       A: [(); {\n    |  ________^"}, {"sha": "5c30429c89581ecbe92ed24a15e64d4b446a3cd7", "filename": "src/test/ui/const-generics/issue-67945-3.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic `Self` types are currently not permitted in anonymous constants\n-  --> $DIR/issue-67945-3.rs:10:27\n+  --> $DIR/issue-67945-3.rs:9:27\n    |\n LL |         let x: Option<Box<Self>> = None;\n    |                           ^^^^"}, {"sha": "5bad61cfc763870a7b562b01260d9eb89b2328ca", "filename": "src/test/ui/const-generics/issue-67945-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-3.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n \n #![cfg_attr(full, allow(incomplete_features))]\n #![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct Bug<S: ?Sized> {\n     A: [(); {"}, {"sha": "43c3999133c650b934f34ff5b965565a4b151fc3", "filename": "src/test/ui/const-generics/issue-68104-print-stack-overflow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-68104-print-stack-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-68104-print-stack-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-68104-print-stack-overflow.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -4,7 +4,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n extern crate impl_const;\n "}, {"sha": "f0554823273a8f478e85fa64b790374d4fca7b08", "filename": "src/test/ui/const-generics/issue-70180-1-stalled_on.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-1-stalled_on.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-1-stalled_on.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-1-stalled_on.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n pub fn works() {\n     let array/*: [_; _]*/ = default_array();"}, {"sha": "21cefc09c253a8b27ede78c0d55d42e5690b4d47", "filename": "src/test/ui/const-generics/issue-70180-2-stalled_on.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-2-stalled_on.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-2-stalled_on.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-70180-2-stalled_on.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn works() {\n     let array/*: [u8; _]*/ = default_byte_array();"}, {"sha": "6bfdba5711ef652a62af4e79c680d8ff36dee1d5", "filename": "src/test/ui/const-generics/issue-71986.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-71986.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-71986.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-71986.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n \n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n pub trait Foo<const B: bool> {}\n pub fn bar<T: Foo<{ true }>>() {}"}, {"sha": "dc3c33736dabfc81b90fa07e856ea461dad89fdf", "filename": "src/test/ui/const-generics/issue-74906.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-74906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissue-74906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-74906.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n const SIZE: usize = 16;\n "}, {"sha": "f59eb60cb38f0ed488f5308082b8f29b7cc05e0f", "filename": "src/test/ui/const-generics/issues/auxiliary/const_generic_issues_lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fconst_generic_issues_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fconst_generic_issues_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fauxiliary%2Fconst_generic_issues_lib.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,6 +1,5 @@\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n // All of these three items must be in `lib2` to reproduce the error\n "}, {"sha": "61fba92c1962e481ff7700d17202bc994e2c901d", "filename": "src/test/ui/const-generics/issues/issue-56445.full.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -6,10 +6,9 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error[E0771]: use of non-static lifetime `'a` in const generic\n-  --> $DIR/issue-56445.rs:9:26\n+  --> $DIR/issue-56445.rs:8:26\n    |\n LL | struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n    |                          ^^"}, {"sha": "80702dd4bc33c844d51347659098957a07968c21", "filename": "src/test/ui/const-generics/issues/issue-56445.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0771]: use of non-static lifetime `'a` in const generic\n-  --> $DIR/issue-56445.rs:9:26\n+  --> $DIR/issue-56445.rs:8:26\n    |\n LL | struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n    |                          ^^"}, {"sha": "bc9e1dee853e482c592da4e5c6741e26d54c3ebd", "filename": "src/test/ui/const-generics/issues/issue-56445.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // Regression test for https://github.com/rust-lang/rust/issues/56445#issuecomment-518402995.\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n-#![cfg_attr(min, feature(min_const_generics))]\n #![crate_type = \"lib\"]\n \n use std::marker::PhantomData;"}, {"sha": "c03b7252a3c8530895ac946e0fb03026dab57ada", "filename": "src/test/ui/const-generics/issues/issue-60818-struct-constructors.full.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -6,7 +6,6 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "6e64c78cd8c96979fa135386b1bea79b1cc96b4c", "filename": "src/test/ui/const-generics/issues/issue-60818-struct-constructors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60818-struct-constructors.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct Generic<const V: usize>;\n "}, {"sha": "f18728eabbb437b7dca909166d01f1197f109da8", "filename": "src/test/ui/const-generics/issues/issue-61336-1.full.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -6,7 +6,6 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "c93b296dbb557c8a3ce974278573351beeed0a7e", "filename": "src/test/ui/const-generics/issues/issue-61336-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // build-pass\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn f<T: Copy, const N: usize>(x: T) -> [T; N] {\n     [x; N]"}, {"sha": "9f8e68d211dec6200313869d850770cd487a3d2a", "filename": "src/test/ui/const-generics/issues/issue-61336-2.full.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -6,10 +6,9 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/issue-61336-2.rs:10:5\n+  --> $DIR/issue-61336-2.rs:9:5\n    |\n LL |     [x; { N }]\n    |     ^^^^^^^^^^ the trait `Copy` is not implemented for `T`"}, {"sha": "82d17a87e0af874aeb5e276445eb01596b23f96d", "filename": "src/test/ui/const-generics/issues/issue-61336-2.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/issue-61336-2.rs:10:5\n+  --> $DIR/issue-61336-2.rs:9:5\n    |\n LL |     [x; { N }]\n    |     ^^^^^^^^^^ the trait `Copy` is not implemented for `T`"}, {"sha": "a1cf641ff749f66182fa75f0e34204ce3ab5ed8e", "filename": "src/test/ui/const-generics/issues/issue-61336-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,6 +1,5 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn f<T: Copy, const N: usize>(x: T) -> [T; N] {\n     [x; { N }]"}, {"sha": "974e2af6fd2cf95fadca4e6c8a7db195ba60cfb8", "filename": "src/test/ui/const-generics/issues/issue-61336.full.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -6,10 +6,9 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/issue-61336.rs:10:5\n+  --> $DIR/issue-61336.rs:9:5\n    |\n LL |     [x; N]\n    |     ^^^^^^ the trait `Copy` is not implemented for `T`"}, {"sha": "19c7153582cb9650ff107afae290cf5cbc6a6f97", "filename": "src/test/ui/const-generics/issues/issue-61336.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/issue-61336.rs:10:5\n+  --> $DIR/issue-61336.rs:9:5\n    |\n LL |     [x; N]\n    |     ^^^^^^ the trait `Copy` is not implemented for `T`"}, {"sha": "c0106ee38c206d9849f29dee9e5a480493ff9be5", "filename": "src/test/ui/const-generics/issues/issue-61336.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,6 +1,5 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn f<T: Copy, const N: usize>(x: T) -> [T; N] {\n     [x; N]"}, {"sha": "ac6c378295d3144ed85071ddbfe38412be0ce3a1", "filename": "src/test/ui/const-generics/issues/issue-61422.full.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -6,7 +6,6 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "421f696f3fd8d92eeaf191fd116cd87ba5c8d513", "filename": "src/test/ui/const-generics/issues/issue-61422.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n-#![cfg_attr(min, feature(min_const_generics))]\n \n use std::mem;\n "}, {"sha": "82b36de45a2aac033883f54ee5e33b87b3dbc3bd", "filename": "src/test/ui/const-generics/issues/issue-61432.full.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -6,7 +6,6 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n warning: 1 warning emitted\n "}, {"sha": "0e228126d77896c9f2359c05383c2019557184a9", "filename": "src/test/ui/const-generics/issues/issue-61432.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61432.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn promote<const N: i32>() {\n     // works:"}, {"sha": "b7f66345c4aa3fbb786d9657457ec20eca61d203", "filename": "src/test/ui/const-generics/issues/issue-61747.full.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -6,10 +6,9 @@ LL | #![cfg_attr(full, feature(const_generics))]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: consider using `min_const_generics` instead, which is more stable and complete\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-61747.rs:8:23\n+  --> $DIR/issue-61747.rs:7:23\n    |\n LL |     fn successor() -> Const<{C + 1}> {\n    |                       ^^^^^^^^^^^^^^"}, {"sha": "b85533ccb46fbdc573079c133ec47faa825ad855", "filename": "src/test/ui/const-generics/issues/issue-61747.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-61747.rs:8:30\n+  --> $DIR/issue-61747.rs:7:30\n    |\n LL |     fn successor() -> Const<{C + 1}> {\n    |                              ^ cannot perform const operation using `C`"}, {"sha": "3aa2e6a5c31dc8d996858861816f827e146a4128", "filename": "src/test/ui/const-generics/issues/issue-61747.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,6 +1,5 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct Const<const N: usize>;\n "}, {"sha": "b970f4e4c8e310d9ee43b1ddeec496c43877a0f7", "filename": "src/test/ui/const-generics/issues/issue-61935.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-61935.rs:10:14\n+  --> $DIR/issue-61935.rs:9:14\n    |\n LL |         Self:FooImpl<{N==0}>\n    |              ^^^^^^^^^^^^^^^"}, {"sha": "9382dca31530e152210d422d5ce5b56de609b78c", "filename": "src/test/ui/const-generics/issues/issue-61935.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-61935.rs:10:23\n+  --> $DIR/issue-61935.rs:9:23\n    |\n LL |         Self:FooImpl<{N==0}>\n    |                       ^ cannot perform const operation using `N`"}, {"sha": "ed861c63bf1e3b7668ed4c48a22a1e7bf252b59a", "filename": "src/test/ui/const-generics/issues/issue-61935.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n trait Foo {}\n "}, {"sha": "1a0e46e599d95c0f0f4e32056d9b2f0e1f6cb3a1", "filename": "src/test/ui/const-generics/issues/issue-62187-encountered-polymorphic-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n pub trait BitLen: Sized {\n     const BIT_LEN: usize;"}, {"sha": "373360c7ced6cf7b8307d12752e618997fafa1cb", "filename": "src/test/ui/const-generics/issues/issue-62220.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-62220.rs:13:27\n+  --> $DIR/issue-62220.rs:12:27\n    |\n LL |     pub fn trunc(self) -> (TruncatedVector<T, { N }>, T) {\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "72311d030cf0bcefc8f30034ff22bc9d56c1c12d", "filename": "src/test/ui/const-generics/issues/issue-62220.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-62220.rs:8:59\n+  --> $DIR/issue-62220.rs:7:59\n    |\n LL | pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;\n    |                                                           ^ cannot perform const operation using `N`"}, {"sha": "c26784c9813c56b3f21d049af128b87c45ca14d7", "filename": "src/test/ui/const-generics/issues/issue-62220.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct Vector<T, const N: usize>([T; N]);\n "}, {"sha": "833e70ca6d386860bb7d6d3a7de48e10f457d9ef", "filename": "src/test/ui/const-generics/issues/issue-62456.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-62456.rs:7:20\n+  --> $DIR/issue-62456.rs:6:20\n    |\n LL |     let _ = [0u64; N + 1];\n    |                    ^^^^^"}, {"sha": "920318fa0ac344929d6241d3bdffee71b32d7400", "filename": "src/test/ui/const-generics/issues/issue-62456.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-62456.rs:7:20\n+  --> $DIR/issue-62456.rs:6:20\n    |\n LL |     let _ = [0u64; N + 1];\n    |                    ^ cannot perform const operation using `N`"}, {"sha": "e24cf36c8ce4e8b3f44e6a21fd7e8d6b6ff134d1", "filename": "src/test/ui/const-generics/issues/issue-62456.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const N: usize>() {\n     let _ = [0u64; N + 1];"}, {"sha": "f09af76325e96c9f98906e2acc435667099a00b3", "filename": "src/test/ui/const-generics/issues/issue-62504.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-62504.rs:19:25\n+  --> $DIR/issue-62504.rs:18:25\n    |\n LL |         ArrayHolder([0; Self::SIZE])\n    |                         ^^^^^^^^^^"}, {"sha": "5d45e302888d424895cb88f12ac906c75de013ea", "filename": "src/test/ui/const-generics/issues/issue-62504.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-62504.rs:19:21\n+  --> $DIR/issue-62504.rs:18:21\n    |\n LL |         ArrayHolder([0; Self::SIZE])\n    |                     ^^^^^^^^^^^^^^^ expected `X`, found `Self::SIZE`\n@@ -8,7 +8,7 @@ LL |         ArrayHolder([0; Self::SIZE])\n               found array `[u32; _]`\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-62504.rs:19:25\n+  --> $DIR/issue-62504.rs:18:25\n    |\n LL |         ArrayHolder([0; Self::SIZE])\n    |                         ^^^^^^^^^^"}, {"sha": "0b95754cab45d48f4db62d05985cd2e0ef04c9ce", "filename": "src/test/ui/const-generics/issues/issue-62504.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n #![allow(incomplete_features)]\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n trait HasSize {\n     const SIZE: usize;"}, {"sha": "a0aee4821c69ebbb19e99fce9ac1c3294f27401d", "filename": "src/test/ui/const-generics/issues/issue-62579-no-match.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: `NoMatch` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-62579-no-match.rs:10:17\n+  --> $DIR/issue-62579-no-match.rs:9:17\n    |\n LL | fn foo<const T: NoMatch>() -> bool {\n    |                 ^^^^^^^"}, {"sha": "46813f5256e587947c39ffd2da4fad2d5d80cf38", "filename": "src/test/ui/const-generics/issues/issue-62579-no-match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n #[derive(PartialEq, Eq)]\n struct NoMatch;"}, {"sha": "6e6aa196633021b9532d1c8abc3bb94f935a3d7c", "filename": "src/test/ui/const-generics/issues/issue-62878.full.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,19 +1,19 @@\n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/issue-62878.rs:6:38\n+  --> $DIR/issue-62878.rs:5:38\n    |\n LL | fn foo<const N: usize, const A: [u8; N]>() {}\n    |                                      ^ the type must not depend on the parameter `N`\n \n error[E0747]: type provided when a constant was expected\n-  --> $DIR/issue-62878.rs:11:11\n+  --> $DIR/issue-62878.rs:10:11\n    |\n LL |     foo::<_, {[1]}>();\n    |           ^\n    |\n    = help: const arguments cannot yet be inferred with `_`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-62878.rs:11:15\n+  --> $DIR/issue-62878.rs:10:15\n    |\n LL |     foo::<_, {[1]}>();\n    |               ^^^ expected `usize`, found array `[{integer}; 1]`"}, {"sha": "920d7e43b9b7e6241f75d8bf484879fea36087c5", "filename": "src/test/ui/const-generics/issues/issue-62878.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,11 +1,11 @@\n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/issue-62878.rs:6:38\n+  --> $DIR/issue-62878.rs:5:38\n    |\n LL | fn foo<const N: usize, const A: [u8; N]>() {}\n    |                                      ^ the type must not depend on the parameter `N`\n \n error: `[u8; _]` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-62878.rs:6:33\n+  --> $DIR/issue-62878.rs:5:33\n    |\n LL | fn foo<const N: usize, const A: [u8; N]>() {}\n    |                                 ^^^^^^^"}, {"sha": "a70606c4a7d3254a2c49b363f5288aade69f0cd4", "filename": "src/test/ui/const-generics/issues/issue-62878.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const N: usize, const A: [u8; N]>() {}\n //~^ ERROR the type of const parameters must not"}, {"sha": "e1c20e6ae781a1769b71397e27c5838e42af7880", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0741]: `&'static (dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n-  --> $DIR/issue-63322-forbid-dyn.rs:10:18\n+  --> $DIR/issue-63322-forbid-dyn.rs:9:18\n    |\n LL | fn test<const T: &'static dyn A>() {\n    |                  ^^^^^^^^^^^^^^ `&'static (dyn A + 'static)` doesn't derive both `PartialEq` and `Eq`"}, {"sha": "543e4b29a16200d054182fc0abf96e1d62e5ad71", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: `&'static (dyn A + 'static)` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-63322-forbid-dyn.rs:10:18\n+  --> $DIR/issue-63322-forbid-dyn.rs:9:18\n    |\n LL | fn test<const T: &'static dyn A>() {\n    |                  ^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | fn test<const T: &'static dyn A>() {\n    = help: more complex types are supported with `#[feature(const_generics)]`\n \n error[E0741]: `&'static (dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n-  --> $DIR/issue-63322-forbid-dyn.rs:10:18\n+  --> $DIR/issue-63322-forbid-dyn.rs:9:18\n    |\n LL | fn test<const T: &'static dyn A>() {\n    |                  ^^^^^^^^^^^^^^ `&'static (dyn A + 'static)` doesn't derive both `PartialEq` and `Eq`"}, {"sha": "334e2aac02a4814cd2ea692e86a79ae74097fc19", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n trait A {}\n struct B;"}, {"sha": "abb26d6cf1753d6c311a43b12058cc8ca055fa30", "filename": "src/test/ui/const-generics/issues/issue-64494.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,13 +1,13 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-64494.rs:16:53\n+  --> $DIR/issue-64494.rs:15:53\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n    |                                                     ^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-64494.rs:19:53\n+  --> $DIR/issue-64494.rs:18:53\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n    |                                                     ^^^^"}, {"sha": "936ab7f6e7e338ab2dc1ccbd62a2692570149a5b", "filename": "src/test/ui/const-generics/issues/issue-64494.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-64494.rs:16:38\n+  --> $DIR/issue-64494.rs:15:38\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n    |                                      ^^^^^^ cannot perform const operation using `T`\n@@ -8,7 +8,7 @@ LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-64494.rs:19:38\n+  --> $DIR/issue-64494.rs:18:38\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n    |                                      ^^^^^^ cannot perform const operation using `T`\n@@ -17,7 +17,7 @@ LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error[E0119]: conflicting implementations of trait `MyTrait`:\n-  --> $DIR/issue-64494.rs:19:1\n+  --> $DIR/issue-64494.rs:18:1\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n    | ------------------------------------ first implementation here"}, {"sha": "96d19203109a5761b2cb11717a2c0f44f3b324b0", "filename": "src/test/ui/const-generics/issues/issue-64494.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n trait Foo {\n     const VAL: usize;"}, {"sha": "8c603b74b90710d8f877e642f050e9b17e23bd0e", "filename": "src/test/ui/const-generics/issues/issue-64519.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct Foo<const D: usize> {\n     state: Option<[u8; D]>,"}, {"sha": "7e150f5f6db5ac9d1aa1dec9788e23a4c77e2d95", "filename": "src/test/ui/const-generics/issues/issue-66205.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-66205.rs:8:12\n+  --> $DIR/issue-66205.rs:7:12\n    |\n LL |     fact::<{ N - 1 }>();\n    |            ^^^^^^^^^"}, {"sha": "b41793b62d2dc0f5da7d59b24b1abea32f962108", "filename": "src/test/ui/const-generics/issues/issue-66205.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-66205.rs:8:14\n+  --> $DIR/issue-66205.rs:7:14\n    |\n LL |     fact::<{ N - 1 }>();\n    |              ^ cannot perform const operation using `N`"}, {"sha": "14249b62ceed835e6cd768f62cfbfad9259d8bf4", "filename": "src/test/ui/const-generics/issues/issue-66205.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n #![allow(dead_code, unconditional_recursion)]\n \n fn fact<const N: usize>() {"}, {"sha": "a871b118dcc5265d3df78752affde7908eefacaf", "filename": "src/test/ui/const-generics/issues/issue-66906.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct Tuple;\n "}, {"sha": "ed35a5f7c0a879409011988d169205f7d59ea994", "filename": "src/test/ui/const-generics/issues/issue-67185-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n trait Baz {\n     type Quaks;"}, {"sha": "fa9c680d4b8dd8b67b9528e75bda17cc8f054080", "filename": "src/test/ui/const-generics/issues/issue-67185-2.full.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:17:1\n+  --> $DIR/issue-67185-2.rs:16:1\n    |\n LL | / trait Foo\n LL | |\n@@ -17,7 +17,7 @@ LL | | }\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:17:1\n+  --> $DIR/issue-67185-2.rs:16:1\n    |\n LL | / trait Foo\n LL | |\n@@ -35,7 +35,7 @@ LL | | }\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:27:6\n+  --> $DIR/issue-67185-2.rs:26:6\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n@@ -51,7 +51,7 @@ LL | impl Foo for FooImpl {}\n              <[u16; 4] as Bar>\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:27:6\n+  --> $DIR/issue-67185-2.rs:26:6\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n@@ -67,7 +67,7 @@ LL | impl Foo for FooImpl {}\n              <[u16; 4] as Bar>\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:31:14\n+  --> $DIR/issue-67185-2.rs:30:14\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n@@ -83,7 +83,7 @@ LL | fn f(_: impl Foo) {}\n              <[u16; 4] as Bar>\n \n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:31:14\n+  --> $DIR/issue-67185-2.rs:30:14\n    |\n LL | trait Foo\n    |       --- required by a bound in this"}, {"sha": "fa9c680d4b8dd8b67b9528e75bda17cc8f054080", "filename": "src/test/ui/const-generics/issues/issue-67185-2.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:17:1\n+  --> $DIR/issue-67185-2.rs:16:1\n    |\n LL | / trait Foo\n LL | |\n@@ -17,7 +17,7 @@ LL | | }\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:17:1\n+  --> $DIR/issue-67185-2.rs:16:1\n    |\n LL | / trait Foo\n LL | |\n@@ -35,7 +35,7 @@ LL | | }\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:27:6\n+  --> $DIR/issue-67185-2.rs:26:6\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n@@ -51,7 +51,7 @@ LL | impl Foo for FooImpl {}\n              <[u16; 4] as Bar>\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:27:6\n+  --> $DIR/issue-67185-2.rs:26:6\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n@@ -67,7 +67,7 @@ LL | impl Foo for FooImpl {}\n              <[u16; 4] as Bar>\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:31:14\n+  --> $DIR/issue-67185-2.rs:30:14\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n@@ -83,7 +83,7 @@ LL | fn f(_: impl Foo) {}\n              <[u16; 4] as Bar>\n \n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:31:14\n+  --> $DIR/issue-67185-2.rs:30:14\n    |\n LL | trait Foo\n    |       --- required by a bound in this"}, {"sha": "94a713d7cf95e58baa6cdbe8f315a4558e821734", "filename": "src/test/ui/const-generics/issues/issue-67185-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n trait Baz {\n     type Quaks;"}, {"sha": "dcbe5b94a6281dfc3d70c297b8bb235e45fb0b00", "filename": "src/test/ui/const-generics/issues/issue-67739.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-67739.rs:12:15\n+  --> $DIR/issue-67739.rs:11:15\n    |\n LL |         [0u8; mem::size_of::<Self::Associated>()];\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "dcbe5b94a6281dfc3d70c297b8bb235e45fb0b00", "filename": "src/test/ui/const-generics/issues/issue-67739.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-67739.rs:12:15\n+  --> $DIR/issue-67739.rs:11:15\n    |\n LL |         [0u8; mem::size_of::<Self::Associated>()];\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e4960e56c9e4ea7ce9e875860b19a5b6c23ab78f", "filename": "src/test/ui/const-generics/issues/issue-67739.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n use std::mem;\n "}, {"sha": "4015fb090b934dc345a6f4ab4754138bf0ed0cf8", "filename": "src/test/ui/const-generics/issues/issue-68366.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-68366.rs:12:13\n+  --> $DIR/issue-68366.rs:11:13\n    |\n LL | impl <const N: usize> Collatz<{Some(N)}> {}\n    |             ^ unconstrained const parameter\n@@ -8,7 +8,7 @@ LL | impl <const N: usize> Collatz<{Some(N)}> {}\n    = note: proving the result of expressions other than the parameter are unique is not supported\n \n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-68366.rs:18:12\n+  --> $DIR/issue-68366.rs:17:12\n    |\n LL | impl<const N: usize> Foo {}\n    |            ^ unconstrained const parameter"}, {"sha": "da4cbd3081f894928bfc27222575eb181fa060d5", "filename": "src/test/ui/const-generics/issues/issue-68366.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-68366.rs:12:37\n+  --> $DIR/issue-68366.rs:11:37\n    |\n LL | impl <const N: usize> Collatz<{Some(N)}> {}\n    |                                     ^ cannot perform const operation using `N`\n@@ -8,7 +8,7 @@ LL | impl <const N: usize> Collatz<{Some(N)}> {}\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-68366.rs:12:13\n+  --> $DIR/issue-68366.rs:11:13\n    |\n LL | impl <const N: usize> Collatz<{Some(N)}> {}\n    |             ^ unconstrained const parameter\n@@ -17,7 +17,7 @@ LL | impl <const N: usize> Collatz<{Some(N)}> {}\n    = note: proving the result of expressions other than the parameter are unique is not supported\n \n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-68366.rs:18:12\n+  --> $DIR/issue-68366.rs:17:12\n    |\n LL | impl<const N: usize> Foo {}\n    |            ^ unconstrained const parameter"}, {"sha": "37afed62327d612b4881e4af24ee05479e698b12", "filename": "src/test/ui/const-generics/issues/issue-68366.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -5,7 +5,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct Collatz<const N: Option<usize>>;\n "}, {"sha": "0bb23be1eb4ea3bea13dc7fe5cf876d78a95ea47", "filename": "src/test/ui/const-generics/issues/issue-68596.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68596.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct S(u8);\n "}, {"sha": "2de8ada276610f3eaae8539df0473362ba62e68e", "filename": "src/test/ui/const-generics/issues/issue-68615-adt.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: `[usize; 0]` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-68615-adt.rs:7:23\n+  --> $DIR/issue-68615-adt.rs:6:23\n    |\n LL | struct Const<const V: [usize; 0]> {}\n    |                       ^^^^^^^^^^"}, {"sha": "ddea3e8ab6587d9993eeada78b59cf40ad8e8ed3", "filename": "src/test/ui/const-generics/issues/issue-68615-adt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct Const<const V: [usize; 0]> {}\n //[min]~^ ERROR `[usize; 0]` is forbidden as the type of a const generic parameter"}, {"sha": "0d17b04a5cdd97780eaf06012086e59ec97054f0", "filename": "src/test/ui/const-generics/issues/issue-68615-array.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: `[usize; 0]` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-68615-array.rs:7:21\n+  --> $DIR/issue-68615-array.rs:6:21\n    |\n LL | struct Foo<const V: [usize; 0] > {}\n    |                     ^^^^^^^^^^"}, {"sha": "56afd9b2a154a75539e115026dc3e9163ec0c312", "filename": "src/test/ui/const-generics/issues/issue-68615-array.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct Foo<const V: [usize; 0] > {}\n //[min]~^ ERROR `[usize; 0]` is forbidden as the type of a const generic parameter"}, {"sha": "25dcd88a4afcde81a8a898db52d97fb7797471ec", "filename": "src/test/ui/const-generics/issues/issue-68977.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-68977.rs:35:44\n+  --> $DIR/issue-68977.rs:34:44\n    |\n LL |     FxpStorageHelper<INT_BITS, FRAC_BITS>: FxpStorage,\n    |                                            ^^^^^^^^^^"}, {"sha": "0b3d5b9a760f704ab2af18f68bd4bb5df53060be", "filename": "src/test/ui/const-generics/issues/issue-68977.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-68977.rs:29:17\n+  --> $DIR/issue-68977.rs:28:17\n    |\n LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n    |                 ^^^^^^^^ cannot perform const operation using `INT_BITS`\n@@ -8,7 +8,7 @@ LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-68977.rs:29:28\n+  --> $DIR/issue-68977.rs:28:28\n    |\n LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n    |                            ^^^^^^^^^ cannot perform const operation using `FRAC_BITS`"}, {"sha": "a0ffcc84c7a37c53c6f5fcb48900d9746d9d3438", "filename": "src/test/ui/const-generics/issues/issue-68977.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct PhantomU8<const X: u8>;\n "}, {"sha": "5c118d245a1ec326106db55922ac9b93af357798", "filename": "src/test/ui/const-generics/issues/issue-70125-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n const L: usize = 4;\n "}, {"sha": "f82131262d6e31017e7b694f78940bf536b5ebea", "filename": "src/test/ui/const-generics/issues/issue-70125-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn main() {\n     <()>::foo();"}, {"sha": "9e912b691773bcbcac6bddb8ab0bc8a136cbf701", "filename": "src/test/ui/const-generics/issues/issue-70167.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n pub trait Trait<const N: usize>: From<<Self as Trait<N>>::Item> {\n   type Item;"}, {"sha": "7b1a2f98dfeba2b4a1a147ce0de97255a2414116", "filename": "src/test/ui/const-generics/issues/issue-71169.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,11 +1,11 @@\n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/issue-71169.rs:6:43\n+  --> $DIR/issue-71169.rs:5:43\n    |\n LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n    |                                           ^^^ the type must not depend on the parameter `LEN`\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-71169.rs:11:14\n+  --> $DIR/issue-71169.rs:10:14\n    |\n LL |     foo::<4, DATA>();\n    |              ^^^^"}, {"sha": "68ac47460b3590c4794d458863369a5049915daa", "filename": "src/test/ui/const-generics/issues/issue-71169.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,11 +1,11 @@\n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/issue-71169.rs:6:43\n+  --> $DIR/issue-71169.rs:5:43\n    |\n LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n    |                                           ^^^ the type must not depend on the parameter `LEN`\n \n error: `[u8; _]` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-71169.rs:6:38\n+  --> $DIR/issue-71169.rs:5:38\n    |\n LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n    |                                      ^^^^^^^^^"}, {"sha": "a574da4b6b31dc7411f6ff2d6ae4914ba64572ba", "filename": "src/test/ui/const-generics/issues/issue-71169.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n //~^ ERROR the type of const parameters must not"}, {"sha": "3950317b3705330e58498bacddfd7c1f5092af43", "filename": "src/test/ui/const-generics/issues/issue-71381.full.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,23 +1,23 @@\n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/issue-71381.rs:15:82\n+  --> $DIR/issue-71381.rs:14:82\n    |\n LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n    |                                                                                  ^^^^ the type must not depend on the parameter `Args`\n \n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/issue-71381.rs:24:40\n+  --> $DIR/issue-71381.rs:23:40\n    |\n LL |         const FN: unsafe extern \"C\" fn(Args),\n    |                                        ^^^^ the type must not depend on the parameter `Args`\n \n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71381.rs:15:61\n+  --> $DIR/issue-71381.rs:14:61\n    |\n LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71381.rs:24:19\n+  --> $DIR/issue-71381.rs:23:19\n    |\n LL |         const FN: unsafe extern \"C\" fn(Args),\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "3950317b3705330e58498bacddfd7c1f5092af43", "filename": "src/test/ui/const-generics/issues/issue-71381.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,23 +1,23 @@\n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/issue-71381.rs:15:82\n+  --> $DIR/issue-71381.rs:14:82\n    |\n LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n    |                                                                                  ^^^^ the type must not depend on the parameter `Args`\n \n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/issue-71381.rs:24:40\n+  --> $DIR/issue-71381.rs:23:40\n    |\n LL |         const FN: unsafe extern \"C\" fn(Args),\n    |                                        ^^^^ the type must not depend on the parameter `Args`\n \n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71381.rs:15:61\n+  --> $DIR/issue-71381.rs:14:61\n    |\n LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71381.rs:24:19\n+  --> $DIR/issue-71381.rs:23:19\n    |\n LL |         const FN: unsafe extern \"C\" fn(Args),\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f015d6946954f57dc3506401d608d3fb1e8bee21", "filename": "src/test/ui/const-generics/issues/issue-71381.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct Test(*const usize);\n "}, {"sha": "715037bd5f1e86e94f44ea67c3b79a72869e8686", "filename": "src/test/ui/const-generics/issues/issue-71382.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71382.rs:17:23\n+  --> $DIR/issue-71382.rs:16:23\n    |\n LL |     fn test<const FN: fn()>(&self) {\n    |                       ^^^^"}, {"sha": "715037bd5f1e86e94f44ea67c3b79a72869e8686", "filename": "src/test/ui/const-generics/issues/issue-71382.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71382.rs:17:23\n+  --> $DIR/issue-71382.rs:16:23\n    |\n LL |     fn test<const FN: fn()>(&self) {\n    |                       ^^^^"}, {"sha": "3a56db937de093befcad095900225a8d1a5fd97d", "filename": "src/test/ui/const-generics/issues/issue-71382.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct Test();\n "}, {"sha": "01a85b745ce395d61e226b92a6dc28db8068efd2", "filename": "src/test/ui/const-generics/issues/issue-71611.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,11 +1,11 @@\n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/issue-71611.rs:6:31\n+  --> $DIR/issue-71611.rs:5:31\n    |\n LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n    |                               ^ the type must not depend on the parameter `A`\n \n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71611.rs:6:21\n+  --> $DIR/issue-71611.rs:5:21\n    |\n LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n    |                     ^^^^^^^^^^^^"}, {"sha": "01a85b745ce395d61e226b92a6dc28db8068efd2", "filename": "src/test/ui/const-generics/issues/issue-71611.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,11 +1,11 @@\n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/issue-71611.rs:6:31\n+  --> $DIR/issue-71611.rs:5:31\n    |\n LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n    |                               ^ the type must not depend on the parameter `A`\n \n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71611.rs:6:21\n+  --> $DIR/issue-71611.rs:5:21\n    |\n LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n    |                     ^^^^^^^^^^^^"}, {"sha": "6468d0b6bdae3fa163ebdc8336c1596a43315dd9", "filename": "src/test/ui/const-generics/issues/issue-71611.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn func<A, const F: fn(inner: A)>(outer: A) {\n     //~^ ERROR: using function pointers as const generic parameters is forbidden"}, {"sha": "eedd73c4dcc0afd6542f456ace309328876c1381", "filename": "src/test/ui/const-generics/issues/issue-72352.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-72352.rs:8:42\n+  --> $DIR/issue-72352.rs:7:42\n    |\n LL | unsafe fn unsafely_do_the_thing<const F: fn(&CStr) -> usize>(ptr: *const i8) -> usize {\n    |                                          ^^^^^^^^^^^^^^^^^^"}, {"sha": "eedd73c4dcc0afd6542f456ace309328876c1381", "filename": "src/test/ui/const-generics/issues/issue-72352.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-72352.rs:8:42\n+  --> $DIR/issue-72352.rs:7:42\n    |\n LL | unsafe fn unsafely_do_the_thing<const F: fn(&CStr) -> usize>(ptr: *const i8) -> usize {\n    |                                          ^^^^^^^^^^^^^^^^^^"}, {"sha": "9cd95c11026d743e1f6d8d703bbee572cad678b7", "filename": "src/test/ui/const-generics/issues/issue-72352.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n use std::ffi::{CStr, CString};\n "}, {"sha": "fbb7ae59bef71b7917e0cab7bb90c2411024f390", "filename": "src/test/ui/const-generics/issues/issue-72787.full.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,37 +1,37 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-72787.rs:11:32\n+  --> $DIR/issue-72787.rs:10:32\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n    |                                ^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-72787.rs:26:42\n+  --> $DIR/issue-72787.rs:25:42\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                          ^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-72787.rs:26:42\n+  --> $DIR/issue-72787.rs:25:42\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                          ^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-72787.rs:26:42\n+  --> $DIR/issue-72787.rs:25:42\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                          ^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-72787.rs:26:42\n+  --> $DIR/issue-72787.rs:25:42\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                          ^^^^"}, {"sha": "aadf19ba6b6f23eecb9186a7fed66b733ed04176", "filename": "src/test/ui/const-generics/issues/issue-72787.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-72787.rs:11:17\n+  --> $DIR/issue-72787.rs:10:17\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n    |                 ^^^ cannot perform const operation using `LHS`\n@@ -8,7 +8,7 @@ LL |     Condition<{ LHS <= RHS }>: True\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-72787.rs:11:24\n+  --> $DIR/issue-72787.rs:10:24\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n    |                        ^^^ cannot perform const operation using `RHS`\n@@ -17,7 +17,7 @@ LL |     Condition<{ LHS <= RHS }>: True\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-72787.rs:26:25\n+  --> $DIR/issue-72787.rs:25:25\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                         ^ cannot perform const operation using `I`\n@@ -26,7 +26,7 @@ LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-72787.rs:26:36\n+  --> $DIR/issue-72787.rs:25:36\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                    ^ cannot perform const operation using `J`\n@@ -35,7 +35,7 @@ LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error[E0283]: type annotations needed\n-  --> $DIR/issue-72787.rs:22:26\n+  --> $DIR/issue-72787.rs:21:26\n    |\n LL | pub trait True {}\n    | -------------- required by this bound in `True`\n@@ -46,7 +46,7 @@ LL |     IsLessOrEqual<I, 8>: True,\n    = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n \n error[E0283]: type annotations needed\n-  --> $DIR/issue-72787.rs:22:26\n+  --> $DIR/issue-72787.rs:21:26\n    |\n LL | pub trait True {}\n    | -------------- required by this bound in `True`"}, {"sha": "16bc9470470f632cdbd15f4e19f1d62bc7ddba9d", "filename": "src/test/ui/const-generics/issues/issue-72787.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct IsLessOrEqual<const LHS: u32, const RHS: u32>;\n pub struct Condition<const CONDITION: bool>;"}, {"sha": "82f9b9d346dd899865c80b6be7a5c225f50e3c95", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-72819-generic-in-const-eval.rs:9:39\n+  --> $DIR/issue-72819-generic-in-const-eval.rs:8:39\n    |\n LL | where Assert::<{N < usize::MAX / 2}>: IsTrue,\n    |                                       ^^^^^^"}, {"sha": "6646be47b31e6d12ca3bd27f55e3c6d7f6e8a18e", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-72819-generic-in-const-eval.rs:9:17\n+  --> $DIR/issue-72819-generic-in-const-eval.rs:8:17\n    |\n LL | where Assert::<{N < usize::MAX / 2}>: IsTrue,\n    |                 ^ cannot perform const operation using `N`"}, {"sha": "f612d8bd3f6b197cdb743585d2b6e35092918ca2", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -3,7 +3,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct Arr<const N: usize>\n where Assert::<{N < usize::MAX / 2}>: IsTrue,"}, {"sha": "aeab9e267728f69c99873a5c4d3004f756fc726c", "filename": "src/test/ui/const-generics/issues/issue-73491.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: `[u32; _]` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-73491.rs:9:19\n+  --> $DIR/issue-73491.rs:8:19\n    |\n LL | fn hoge<const IN: [u32; LEN]>() {}\n    |                   ^^^^^^^^^^"}, {"sha": "c7cb92baf30aa47a2c74d60b95408c771b23d44e", "filename": "src/test/ui/const-generics/issues/issue-73491.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n const LEN: usize = 1024;\n "}, {"sha": "81691a14ef67e52545ba9060588e204f79191a76", "filename": "src/test/ui/const-generics/issues/issue-73508.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: using raw pointers as const generic parameters is forbidden\n-  --> $DIR/issue-73508.rs:6:33\n+  --> $DIR/issue-73508.rs:5:33\n    |\n LL | pub const fn func_name<const X: *const u32>() {}\n    |                                 ^^^^^^^^^^"}, {"sha": "81691a14ef67e52545ba9060588e204f79191a76", "filename": "src/test/ui/const-generics/issues/issue-73508.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: using raw pointers as const generic parameters is forbidden\n-  --> $DIR/issue-73508.rs:6:33\n+  --> $DIR/issue-73508.rs:5:33\n    |\n LL | pub const fn func_name<const X: *const u32>() {}\n    |                                 ^^^^^^^^^^"}, {"sha": "f02c4161dc109026c154b9adfd45f03c34907ef1", "filename": "src/test/ui/const-generics/issues/issue-73508.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n pub const fn func_name<const X: *const u32>() {}\n //~^ ERROR using raw pointers"}, {"sha": "6561183f7cad42740a8605e395fbc46f4eae3525", "filename": "src/test/ui/const-generics/issues/issue-74101.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: `[u8; _]` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-74101.rs:7:18\n+  --> $DIR/issue-74101.rs:6:18\n    |\n LL | fn test<const N: [u8; 1 + 2]>() {}\n    |                  ^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | fn test<const N: [u8; 1 + 2]>() {}\n    = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `[u8; _]` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-74101.rs:10:21\n+  --> $DIR/issue-74101.rs:9:21\n    |\n LL | struct Foo<const N: [u8; 1 + 2]>;\n    |                     ^^^^^^^^^^^"}, {"sha": "d4fd72eb6daa3b787d1c5bfe32df9cba16a58892", "filename": "src/test/ui/const-generics/issues/issue-74101.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn test<const N: [u8; 1 + 2]>() {}\n //[min]~^ ERROR `[u8; _]` is forbidden as the type of a const generic parameter"}, {"sha": "2b6aa7dad97eec1ab9b732cd7b6b29bb7bded653", "filename": "src/test/ui/const-generics/issues/issue-74255.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: `IceEnum` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-74255.rs:15:31\n+  --> $DIR/issue-74255.rs:14:31\n    |\n LL |     fn ice_struct_fn<const I: IceEnum>() {}\n    |                               ^^^^^^^"}, {"sha": "75a876c27e59de24f943fdf0978aafe187666af0", "filename": "src/test/ui/const-generics/issues/issue-74255.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n #[derive(PartialEq, Eq)]\n enum IceEnum {"}, {"sha": "27393d38c6b1c95f9a67fe493b930f8fcdf35d49", "filename": "src/test/ui/const-generics/issues/issue-74950.min.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: `Inner` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-74950.rs:18:23\n+  --> $DIR/issue-74950.rs:17:23\n    |\n LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n@@ -8,7 +8,7 @@ LL | struct Outer<const I: Inner>;\n    = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `Inner` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-74950.rs:18:23\n+  --> $DIR/issue-74950.rs:17:23\n    |\n LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n@@ -17,7 +17,7 @@ LL | struct Outer<const I: Inner>;\n    = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `Inner` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-74950.rs:18:23\n+  --> $DIR/issue-74950.rs:17:23\n    |\n LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n@@ -26,7 +26,7 @@ LL | struct Outer<const I: Inner>;\n    = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `Inner` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-74950.rs:18:23\n+  --> $DIR/issue-74950.rs:17:23\n    |\n LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n@@ -35,7 +35,7 @@ LL | struct Outer<const I: Inner>;\n    = help: more complex types are supported with `#[feature(const_generics)]`\n \n error: `Inner` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-74950.rs:18:23\n+  --> $DIR/issue-74950.rs:17:23\n    |\n LL | struct Outer<const I: Inner>;\n    |                       ^^^^^"}, {"sha": "91e5cc776facf0c50122356dbcbee1f58b7b4990", "filename": "src/test/ui/const-generics/issues/issue-74950.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n \n #[derive(PartialEq, Eq)]"}, {"sha": "4ab90dd1ec6691ec4c0a752e7e8df90c02482206", "filename": "src/test/ui/const-generics/issues/issue-75047.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: `[u8; _]` is forbidden as the type of a const generic parameter\n-  --> $DIR/issue-75047.rs:15:21\n+  --> $DIR/issue-75047.rs:14:21\n    |\n LL | struct Foo<const N: [u8; Bar::<u32>::value()]>;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "97437748177e45eb6326235d01beddcec5f4065e", "filename": "src/test/ui/const-generics/issues/issue-75047.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n struct Bar<T>(T);\n "}, {"sha": "88b8ff89ffe109eab5a73dccf16f8d0f58627475", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,13 +1,13 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-76701-ty-param-in-const.rs:6:21\n+  --> $DIR/issue-76701-ty-param-in-const.rs:5:21\n    |\n LL | fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-76701-ty-param-in-const.rs:12:37\n+  --> $DIR/issue-76701-ty-param-in-const.rs:11:37\n    |\n LL | fn const_param<const N: usize>() -> [u8; N + 1] {\n    |                                     ^^^^^^^^^^^"}, {"sha": "32f70fa30072764b142be2729d85e2e88ce6ed6a", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-76701-ty-param-in-const.rs:6:46\n+  --> $DIR/issue-76701-ty-param-in-const.rs:5:46\n    |\n LL | fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n    |                                              ^ cannot perform const operation using `T`\n@@ -8,7 +8,7 @@ LL | fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-76701-ty-param-in-const.rs:12:42\n+  --> $DIR/issue-76701-ty-param-in-const.rs:11:42\n    |\n LL | fn const_param<const N: usize>() -> [u8; N + 1] {\n    |                                          ^ cannot perform const operation using `N`"}, {"sha": "9948982656357ace8b115c758f8f876e5ca9dfb0", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n     //[full]~^ ERROR constant expression depends on a generic parameter"}, {"sha": "189a32570f76b6245c319e44a0500bc9ab924296", "filename": "src/test/ui/const-generics/issues/issue70273-assoc-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -2,7 +2,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n trait T<const A: usize> {\n     fn f();"}, {"sha": "1883f454e602164bf7390bfad32e992356cbfd88", "filename": "src/test/ui/const-generics/macro_rules-braces.full.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/macro_rules-braces.rs:49:17\n+  --> $DIR/macro_rules-braces.rs:48:17\n    |\n LL |     let _: baz!(m::P);\n    |                 ^^^^\n@@ -10,7 +10,7 @@ LL |     let _: baz!({ m::P });\n    |                 ^      ^\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/macro_rules-braces.rs:69:17\n+  --> $DIR/macro_rules-braces.rs:68:17\n    |\n LL |     let _: baz!(10 + 7);\n    |                 ^^^^^^\n@@ -21,7 +21,7 @@ LL |     let _: baz!({ 10 + 7 });\n    |                 ^        ^\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/macro_rules-braces.rs:16:13\n+  --> $DIR/macro_rules-braces.rs:15:13\n    |\n LL |             [u8; $x]\n    |             ^^^^^^^^\n@@ -33,7 +33,7 @@ LL |     let _: foo!({{ N }});\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/macro_rules-braces.rs:21:13\n+  --> $DIR/macro_rules-braces.rs:20:13\n    |\n LL |             [u8; { $x }]\n    |             ^^^^^^^^^^^^\n@@ -45,7 +45,7 @@ LL |     let _: bar!({ N });\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/macro_rules-braces.rs:26:13\n+  --> $DIR/macro_rules-braces.rs:25:13\n    |\n LL |             Foo<$x>\n    |             ^^^^^^^\n@@ -57,7 +57,7 @@ LL |     let _: baz!({{ N }});\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/macro_rules-braces.rs:31:13\n+  --> $DIR/macro_rules-braces.rs:30:13\n    |\n LL |             Foo<{ $x }>\n    |             ^^^^^^^^^^^"}, {"sha": "60583d43c0162d18a163f0c2df0d3db4c4e53055", "filename": "src/test/ui/const-generics/macro_rules-braces.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,5 @@\n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/macro_rules-braces.rs:49:17\n+  --> $DIR/macro_rules-braces.rs:48:17\n    |\n LL |     let _: baz!(m::P);\n    |                 ^^^^\n@@ -10,7 +10,7 @@ LL |     let _: baz!({ m::P });\n    |                 ^      ^\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/macro_rules-braces.rs:69:17\n+  --> $DIR/macro_rules-braces.rs:68:17\n    |\n LL |     let _: baz!(10 + 7);\n    |                 ^^^^^^\n@@ -21,7 +21,7 @@ LL |     let _: baz!({ 10 + 7 });\n    |                 ^        ^\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/macro_rules-braces.rs:37:20\n+  --> $DIR/macro_rules-braces.rs:36:20\n    |\n LL |     let _: foo!({{ N }});\n    |                    ^ cannot perform const operation using `N`\n@@ -30,7 +30,7 @@ LL |     let _: foo!({{ N }});\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/macro_rules-braces.rs:41:19\n+  --> $DIR/macro_rules-braces.rs:40:19\n    |\n LL |     let _: bar!({ N });\n    |                   ^ cannot perform const operation using `N`\n@@ -39,7 +39,7 @@ LL |     let _: bar!({ N });\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/macro_rules-braces.rs:46:20\n+  --> $DIR/macro_rules-braces.rs:45:20\n    |\n LL |     let _: baz!({{ N }});\n    |                    ^ cannot perform const operation using `N`\n@@ -48,7 +48,7 @@ LL |     let _: baz!({{ N }});\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/macro_rules-braces.rs:51:19\n+  --> $DIR/macro_rules-braces.rs:50:19\n    |\n LL |     let _: biz!({ N });\n    |                   ^ cannot perform const operation using `N`"}, {"sha": "605a10880bbb178e25a9865bca720fc618fecf09", "filename": "src/test/ui/const-generics/macro_rules-braces.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,7 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, allow(incomplete_features))]\n #![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(min, feature(min_const_generics))]\n \n mod m {\n     pub const P: usize = 0;"}, {"sha": "27e971b5b6f9b03eb7eca16f257dcf4a6ebc592a", "filename": "src/test/ui/const-generics/min_const_generics/assoc_const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fassoc_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fassoc_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fassoc_const.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,6 +1,4 @@\n // check-pass\n-#![feature(min_const_generics)]\n-\n struct Foo<const N: usize>;\n \n impl<const N: usize> Foo<N> {"}, {"sha": "7840989cb0814c156799f76b4a1f7bc919ecc313", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ba60a191bccd2f2568572efb76e0e37e88dd21/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs?ref=c4ba60a191bccd2f2568572efb76e0e37e88dd21", "patch": "@@ -1,5 +1,3 @@\n-#![feature(min_const_generics)]\n-\n use std::mem::size_of;\n \n fn test<const N: usize>() {}"}]}