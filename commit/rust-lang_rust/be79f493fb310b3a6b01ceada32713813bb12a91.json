{"sha": "be79f493fb310b3a6b01ceada32713813bb12a91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNzlmNDkzZmIzMTBiM2E2YjAxY2VhZGEzMjcxMzgxM2JiMTJhOTE=", "commit": {"author": {"name": "Tyson Nottingham", "email": "tgnottingham@gmail.com", "date": "2020-12-17T05:03:45Z"}, "committer": {"name": "Tyson Nottingham", "email": "tgnottingham@gmail.com", "date": "2021-01-02T06:49:16Z"}, "message": "rustc_serialize: specialize opaque decoding of some u8 sequences", "tree": {"sha": "d13729e7f7c857bc1821b87d849fd37ac22e88ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d13729e7f7c857bc1821b87d849fd37ac22e88ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be79f493fb310b3a6b01ceada32713813bb12a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be79f493fb310b3a6b01ceada32713813bb12a91", "html_url": "https://github.com/rust-lang/rust/commit/be79f493fb310b3a6b01ceada32713813bb12a91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be79f493fb310b3a6b01ceada32713813bb12a91/comments", "author": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c6274d464d729faa9bab45086df847d5374431b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c6274d464d729faa9bab45086df847d5374431b", "html_url": "https://github.com/rust-lang/rust/commit/7c6274d464d729faa9bab45086df847d5374431b"}], "stats": {"total": 68, "additions": 42, "deletions": 26}, "files": [{"sha": "9b40c9a7ed88ad42a7f2cf9942787af37e61e5b5", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be79f493fb310b3a6b01ceada32713813bb12a91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be79f493fb310b3a6b01ceada32713813bb12a91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=be79f493fb310b3a6b01ceada32713813bb12a91", "patch": "@@ -807,6 +807,15 @@ impl<'a, 'tcx> TyDecoder<'tcx> for CacheDecoder<'a, 'tcx> {\n \n crate::implement_ty_decoder!(CacheDecoder<'a, 'tcx>);\n \n+// This ensures that the `Decodable<opaque::Decoder>::decode` specialization for `Vec<u8>` is used\n+// when a `CacheDecoder` is passed to `Decodable::decode`. Unfortunately, we have to manually opt\n+// into specializations this way, given how `CacheDecoder` and the decoding traits currently work.\n+impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for Vec<u8> {\n+    fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Result<Self, String> {\n+        Decodable::decode(&mut d.opaque)\n+    }\n+}\n+\n impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for SyntaxContext {\n     fn decode(decoder: &mut CacheDecoder<'a, 'tcx>) -> Result<Self, String> {\n         let syntax_contexts = decoder.syntax_contexts;"}, {"sha": "ae6d27e037b2dbda7a1f66ffa7712a4c0de77381", "filename": "compiler/rustc_serialize/src/collection_impls.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/be79f493fb310b3a6b01ceada32713813bb12a91/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be79f493fb310b3a6b01ceada32713813bb12a91/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs?ref=be79f493fb310b3a6b01ceada32713813bb12a91", "patch": "@@ -295,13 +295,8 @@ impl<E: Encoder, T: Encodable<E>> Encodable<E> for Rc<[T]> {\n \n impl<D: Decoder, T: Decodable<D>> Decodable<D> for Rc<[T]> {\n     fn decode(d: &mut D) -> Result<Rc<[T]>, D::Error> {\n-        d.read_seq(|d, len| {\n-            let mut vec = Vec::with_capacity(len);\n-            for index in 0..len {\n-                vec.push(d.read_seq_elt(index, |d| Decodable::decode(d))?);\n-            }\n-            Ok(vec.into())\n-        })\n+        let vec: Vec<T> = Decodable::decode(d)?;\n+        Ok(vec.into())\n     }\n }\n \n@@ -314,12 +309,7 @@ impl<E: Encoder, T: Encodable<E>> Encodable<E> for Arc<[T]> {\n \n impl<D: Decoder, T: Decodable<D>> Decodable<D> for Arc<[T]> {\n     fn decode(d: &mut D) -> Result<Arc<[T]>, D::Error> {\n-        d.read_seq(|d, len| {\n-            let mut vec = Vec::with_capacity(len);\n-            for index in 0..len {\n-                vec.push(d.read_seq_elt(index, |d| Decodable::decode(d))?);\n-            }\n-            Ok(vec.into())\n-        })\n+        let vec: Vec<T> = Decodable::decode(d)?;\n+        Ok(vec.into())\n     }\n }"}, {"sha": "f58ed14d9971e09103241349f806c83484c8f162", "filename": "compiler/rustc_serialize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be79f493fb310b3a6b01ceada32713813bb12a91/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be79f493fb310b3a6b01ceada32713813bb12a91/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Flib.rs?ref=be79f493fb310b3a6b01ceada32713813bb12a91", "patch": "@@ -15,6 +15,7 @@ Core encoding and decoding interfaces.\n #![feature(associated_type_bounds)]\n #![cfg_attr(bootstrap, feature(min_const_generics))]\n #![feature(min_specialization)]\n+#![feature(vec_spare_capacity)]\n #![cfg_attr(test, feature(test))]\n #![allow(rustc::internal)]\n "}, {"sha": "673742df7f0dce75c3e99508075c1813e448becd", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/be79f493fb310b3a6b01ceada32713813bb12a91/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be79f493fb310b3a6b01ceada32713813bb12a91/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=be79f493fb310b3a6b01ceada32713813bb12a91", "patch": "@@ -327,14 +327,35 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n     }\n }\n \n-// Specialize encoding byte slices. The default implementation for slices encodes and emits each\n-// element individually. This isn't necessary for `u8` slices encoded with an `opaque::Encoder`,\n-// because each `u8` is emitted as-is. Therefore, we can use a more efficient implementation. This\n-// specialization applies to encoding `Vec<u8>`s, etc., since they call `encode` on their slices.\n+// Specializations for contiguous byte sequences follow. The default implementations for slices\n+// encode and decode each element individually. This isn't necessary for `u8` slices when using\n+// opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.\n+// Therefore, we can use more efficient implementations that process the entire sequence at once.\n+\n+// Specialize encoding byte slices. This specialization also applies to encoding `Vec<u8>`s, etc.,\n+// since the default implementations call `encode` on their slices internally.\n impl serialize::Encodable<Encoder> for [u8] {\n     fn encode(&self, e: &mut Encoder) -> EncodeResult {\n         serialize::Encoder::emit_usize(e, self.len())?;\n         e.emit_raw_bytes(self);\n         Ok(())\n     }\n }\n+\n+// Specialize decoding `Vec<u8>`. This specialization also applies to decoding `Box<[u8]>`s, etc.,\n+// since the default implementations call `decode` to produce a `Vec<u8>` internally.\n+impl<'a> serialize::Decodable<Decoder<'a>> for Vec<u8> {\n+    fn decode(d: &mut Decoder<'a>) -> Result<Self, String> {\n+        let len = serialize::Decoder::read_usize(d)?;\n+\n+        let mut v = Vec::with_capacity(len);\n+        let buf = &mut v.spare_capacity_mut()[..len];\n+        d.read_raw_bytes(buf)?;\n+\n+        unsafe {\n+            v.set_len(len);\n+        }\n+\n+        Ok(v)\n+    }\n+}"}, {"sha": "47aad5b88c6229dc5532f820c575007354af80b1", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/be79f493fb310b3a6b01ceada32713813bb12a91/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be79f493fb310b3a6b01ceada32713813bb12a91/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=be79f493fb310b3a6b01ceada32713813bb12a91", "patch": "@@ -545,7 +545,7 @@ impl<S: Encoder, T: Encodable<S>> Encodable<S> for Vec<T> {\n }\n \n impl<D: Decoder, T: Decodable<D>> Decodable<D> for Vec<T> {\n-    fn decode(d: &mut D) -> Result<Vec<T>, D::Error> {\n+    default fn decode(d: &mut D) -> Result<Vec<T>, D::Error> {\n         d.read_seq(|d, len| {\n             let mut v = Vec::with_capacity(len);\n             for i in 0..len {\n@@ -591,13 +591,8 @@ where\n     [T]: ToOwned<Owned = Vec<T>>,\n {\n     fn decode(d: &mut D) -> Result<Cow<'static, [T]>, D::Error> {\n-        d.read_seq(|d, len| {\n-            let mut v = Vec::with_capacity(len);\n-            for i in 0..len {\n-                v.push(d.read_seq_elt(i, |d| Decodable::decode(d))?);\n-            }\n-            Ok(Cow::Owned(v))\n-        })\n+        let v: Vec<T> = Decodable::decode(d)?;\n+        Ok(Cow::Owned(v))\n     }\n }\n "}]}