{"sha": "1043549185cb99678de96250f61f433e45ca02ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNDM1NDkxODVjYjk5Njc4ZGU5NjI1MGY2MWY0MzNlNDVjYTAyZWQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-09-10T15:23:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-10T15:23:19Z"}, "message": "Rollup merge of #88632 - camelid:md-opts, r=CraftSpider\n\nFix issues with Markdown summary options\n\n- Use `summary_opts()` for Markdown summaries\n- Enable all main body Markdown options for summaries", "tree": {"sha": "b7db89768865e38407a081b8e3bc83a2b46ab48e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7db89768865e38407a081b8e3bc83a2b46ab48e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1043549185cb99678de96250f61f433e45ca02ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhO3hnCRBK7hj4Ov3rIwAA45AIAJirS2wEKlmqme6QNVVFuQ+v\nqmY6z9fVF94wsYkBTRzzeAr4oFmYnygLBxINYyL0NIcDYBmQnGkv531qTipURLJS\nspejn+NfNzRQn/6uJun0rNled87D7I22l3UaMxL26y3z9SKIKcqf576pgZRFEjgY\nOFvWbV1rL97SeI0GIaD2rLBYwhVkzNExq/Mb9TSoaFPUclAQt7NYPB6XXRoqpZ20\nEk3F0B90Kww1T91BzdVpnyttoKXheLK+Zw66GkgNXCtdvC2yoRFDJZYb4PQMmlz0\nUzcd/2aVp8EmUbqoG8/YZreqeexLc8/xuyW38Ayu8B0e6iHstFOa1B+VluDvRAE=\n=GAHT\n-----END PGP SIGNATURE-----\n", "payload": "tree b7db89768865e38407a081b8e3bc83a2b46ab48e\nparent 257f5adf0ee5708ddc433b6068ba6aa856a7ddd4\nparent 2cc7b7c5f243713c72114168890ba46dd0c6e4ce\nauthor Manish Goregaokar <manishsmail@gmail.com> 1631287399 -0700\ncommitter GitHub <noreply@github.com> 1631287399 -0700\n\nRollup merge of #88632 - camelid:md-opts, r=CraftSpider\n\nFix issues with Markdown summary options\n\n- Use `summary_opts()` for Markdown summaries\n- Enable all main body Markdown options for summaries\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1043549185cb99678de96250f61f433e45ca02ed", "html_url": "https://github.com/rust-lang/rust/commit/1043549185cb99678de96250f61f433e45ca02ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1043549185cb99678de96250f61f433e45ca02ed/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "257f5adf0ee5708ddc433b6068ba6aa856a7ddd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/257f5adf0ee5708ddc433b6068ba6aa856a7ddd4", "html_url": "https://github.com/rust-lang/rust/commit/257f5adf0ee5708ddc433b6068ba6aa856a7ddd4"}, {"sha": "2cc7b7c5f243713c72114168890ba46dd0c6e4ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cc7b7c5f243713c72114168890ba46dd0c6e4ce", "html_url": "https://github.com/rust-lang/rust/commit/2cc7b7c5f243713c72114168890ba46dd0c6e4ce"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "026d37b6d45ffaa235a64b8d8caec77b94361b5d", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1043549185cb99678de96250f61f433e45ca02ed/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1043549185cb99678de96250f61f433e45ca02ed/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=1043549185cb99678de96250f61f433e45ca02ed", "patch": "@@ -48,17 +48,21 @@ use pulldown_cmark::{\n mod tests;\n \n /// Options for rendering Markdown in the main body of documentation.\n-pub(crate) fn opts() -> Options {\n+pub(crate) fn main_body_opts() -> Options {\n     Options::ENABLE_TABLES\n         | Options::ENABLE_FOOTNOTES\n         | Options::ENABLE_STRIKETHROUGH\n         | Options::ENABLE_TASKLISTS\n         | Options::ENABLE_SMART_PUNCTUATION\n }\n \n-/// A subset of [`opts()`] used for rendering summaries.\n+/// Options for rendering Markdown in summaries (e.g., in search results).\n pub(crate) fn summary_opts() -> Options {\n-    Options::ENABLE_STRIKETHROUGH | Options::ENABLE_SMART_PUNCTUATION | Options::ENABLE_TABLES\n+    Options::ENABLE_TABLES\n+        | Options::ENABLE_FOOTNOTES\n+        | Options::ENABLE_STRIKETHROUGH\n+        | Options::ENABLE_TASKLISTS\n+        | Options::ENABLE_SMART_PUNCTUATION\n }\n \n /// When `to_string` is called, this struct will emit the HTML corresponding to\n@@ -981,7 +985,7 @@ impl Markdown<'_> {\n             }\n         };\n \n-        let p = Parser::new_with_broken_link_callback(md, opts(), Some(&mut replacer));\n+        let p = Parser::new_with_broken_link_callback(md, main_body_opts(), Some(&mut replacer));\n         let p = p.into_offset_iter();\n \n         let mut s = String::with_capacity(md.len() * 3 / 2);\n@@ -1000,7 +1004,7 @@ impl MarkdownWithToc<'_> {\n     crate fn into_string(self) -> String {\n         let MarkdownWithToc(md, mut ids, codes, edition, playground) = self;\n \n-        let p = Parser::new_ext(md, opts()).into_offset_iter();\n+        let p = Parser::new_ext(md, main_body_opts()).into_offset_iter();\n \n         let mut s = String::with_capacity(md.len() * 3 / 2);\n \n@@ -1025,7 +1029,7 @@ impl MarkdownHtml<'_> {\n         if md.is_empty() {\n             return String::new();\n         }\n-        let p = Parser::new_ext(md, opts()).into_offset_iter();\n+        let p = Parser::new_ext(md, main_body_opts()).into_offset_iter();\n \n         // Treat inline HTML as plain text.\n         let p = p.map(|event| match event.0 {\n@@ -1099,7 +1103,7 @@ fn markdown_summary_with_limit(\n         }\n     };\n \n-    let p = Parser::new_with_broken_link_callback(md, opts(), Some(&mut replacer));\n+    let p = Parser::new_with_broken_link_callback(md, summary_opts(), Some(&mut replacer));\n     let mut p = LinkReplacer::new(p, link_names);\n \n     let mut buf = HtmlWithLimit::new(length_limit);\n@@ -1246,7 +1250,8 @@ crate fn markdown_links(md: &str) -> Vec<MarkdownLink> {\n         });\n         None\n     };\n-    let p = Parser::new_with_broken_link_callback(md, opts(), Some(&mut push)).into_offset_iter();\n+    let p = Parser::new_with_broken_link_callback(md, main_body_opts(), Some(&mut push))\n+        .into_offset_iter();\n \n     // There's no need to thread an IdMap through to here because\n     // the IDs generated aren't going to be emitted anywhere.\n@@ -1285,7 +1290,7 @@ crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_>) -> Vec<RustCodeB\n         return code_blocks;\n     }\n \n-    let mut p = Parser::new_ext(md, opts()).into_offset_iter();\n+    let mut p = Parser::new_ext(md, main_body_opts()).into_offset_iter();\n \n     while let Some((event, offset)) = p.next() {\n         if let Event::Start(Tag::CodeBlock(syntax)) = event {"}, {"sha": "37faa6742927a2860a543ab97f36f5a42dd92ce7", "filename": "src/librustdoc/passes/bare_urls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1043549185cb99678de96250f61f433e45ca02ed/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1043549185cb99678de96250f61f433e45ca02ed/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs?ref=1043549185cb99678de96250f61f433e45ca02ed", "patch": "@@ -2,7 +2,7 @@ use super::Pass;\n use crate::clean::*;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n-use crate::html::markdown::opts;\n+use crate::html::markdown::main_body_opts;\n use core::ops::Range;\n use pulldown_cmark::{Event, Parser, Tag};\n use regex::Regex;\n@@ -83,7 +83,7 @@ impl<'a, 'tcx> DocFolder for BareUrlsLinter<'a, 'tcx> {\n                 });\n             };\n \n-            let mut p = Parser::new_ext(&dox, opts()).into_offset_iter();\n+            let mut p = Parser::new_ext(&dox, main_body_opts()).into_offset_iter();\n \n             while let Some((event, range)) = p.next() {\n                 match event {"}, {"sha": "a0144a5298eba24b3d2cc94f0e6d562473c00d08", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1043549185cb99678de96250f61f433e45ca02ed/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1043549185cb99678de96250f61f433e45ca02ed/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=1043549185cb99678de96250f61f433e45ca02ed", "patch": "@@ -2,7 +2,7 @@ use super::Pass;\n use crate::clean::*;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n-use crate::html::markdown::opts;\n+use crate::html::markdown::main_body_opts;\n use core::ops::Range;\n use pulldown_cmark::{Event, Parser, Tag};\n use std::iter::Peekable;\n@@ -192,7 +192,7 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n             let mut is_in_comment = None;\n             let mut in_code_block = false;\n \n-            let p = Parser::new_ext(&dox, opts()).into_offset_iter();\n+            let p = Parser::new_ext(&dox, main_body_opts()).into_offset_iter();\n \n             for (event, range) in p {\n                 match event {"}]}