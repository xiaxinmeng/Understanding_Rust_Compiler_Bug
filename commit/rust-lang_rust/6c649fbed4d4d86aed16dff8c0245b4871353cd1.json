{"sha": "6c649fbed4d4d86aed16dff8c0245b4871353cd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNjQ5ZmJlZDRkNGQ4NmFlZDE2ZGZmOGMwMjQ1YjQ4NzEzNTNjZDE=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2018-03-14T18:21:54Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2018-04-05T16:18:06Z"}, "message": "address code review comments", "tree": {"sha": "f56e188720378e3ed5d9f4c3adfd011f0afdb037", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f56e188720378e3ed5d9f4c3adfd011f0afdb037"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c649fbed4d4d86aed16dff8c0245b4871353cd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c649fbed4d4d86aed16dff8c0245b4871353cd1", "html_url": "https://github.com/rust-lang/rust/commit/6c649fbed4d4d86aed16dff8c0245b4871353cd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c649fbed4d4d86aed16dff8c0245b4871353cd1/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "311a8bef6e879bd0f393154e7a01a41bce385ad9", "url": "https://api.github.com/repos/rust-lang/rust/commits/311a8bef6e879bd0f393154e7a01a41bce385ad9", "html_url": "https://github.com/rust-lang/rust/commit/311a8bef6e879bd0f393154e7a01a41bce385ad9"}], "stats": {"total": 80, "additions": 43, "deletions": 37}, "files": [{"sha": "dec32f5b2e53c3a4bcdd9394e41e82eb7ec7958f", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6c649fbed4d4d86aed16dff8c0245b4871353cd1/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c649fbed4d4d86aed16dff8c0245b4871353cd1/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=6c649fbed4d4d86aed16dff8c0245b4871353cd1", "patch": "@@ -1422,13 +1422,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn get_main_error_message(&self, place:&Place<'tcx>) -> String{\n-        match self.describe_place(place) {\n-            Some(name) => format!(\"immutable item `{}`\", name),\n-            None => \"immutable item\".to_owned(),\n-        }\n-    }\n-\n     /// Currently MoveData does not store entries for all places in\n     /// the input MIR. For example it will currently filter out\n     /// places that are Copy; thus we do not track places of shared\n@@ -1533,6 +1526,21 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn specialized_description(&self, place:&Place<'tcx>) -> Option<String>{\n+        if let Some(name) = self.describe_place(place) {\n+            Some(format!(\"`&`-reference `{}`\", name))\n+        } else {\n+            None\n+        }\n+    }\n+\n+    fn get_main_error_message(&self, place:&Place<'tcx>) -> String{\n+        match self.describe_place(place) {\n+            Some(name) => format!(\"immutable item `{}`\", name),\n+            None => \"immutable item\".to_owned(),\n+        }\n+    }\n+\n     /// Check the permissions for the given place and read or write kind\n     ///\n     /// Returns true if an error is reported, false otherwise.\n@@ -1566,7 +1574,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n                 if place != place_err {\n                     if let Some(name) = self.describe_place(place_err) {\n-                        err.note(&format!(\"value not mutable causing this error: `{}`\", name));\n+                        err.note(&format!(\"the value which is causing this path not to be mutable is...: `{}`\", name));\n                     }\n                 }\n \n@@ -1576,7 +1584,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 if let Err(place_err) = self.is_mutable(place, is_local_mutation_allowed) {\n                     error_reported = true;\n \n-                    let err_info = match *place_err {\n+                    let mut err_info = None;\n+                    match *place_err {\n                         Place::Projection(ref proj) => {\n                             match proj.elem {\n                                 ProjectionElem::Deref => {\n@@ -1585,32 +1594,27 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                                             let locations = self.mir.find_assignments(local);\n                                             if locations.len() > 0 {\n                                                 let item_msg = if error_reported {\n-                                                    if let Some(name) =\n-                                                            self.describe_place(place_err) {\n-                                                        let var = str::replace(&name, \"*\", \"\");\n-                                                        format!(\"`&`-reference `{}`\", var)\n-                                                    } else {\n-                                                        self.get_main_error_message(place)\n+                                                    match self.specialized_description(&proj.base){\n+                                                        Some(msg) => msg,\n+                                                        None => self.get_main_error_message(place)\n                                                     }\n                                                 } else {\n                                                     self.get_main_error_message(place)\n                                                 };\n-                                                Some((self.mir.source_info(locations[0]).span,\n+                                                err_info = Some((self.mir.source_info(locations[0]).span,\n                                                       \"consider changing this to be a \\\n                                                        mutable reference: `&mut`\", item_msg,\n-                                                       \"cannot assign through `&`-reference\"))\n-                                            } else {\n-                                                None\n+                                                       \"cannot assign through `&`-reference\"));\n                                             }\n                                         }\n-                                        _ => None,\n+                                        _ => {},\n                                     }\n                                 }\n-                                _ => None,\n+                                _ => {}\n                             }\n                         }\n-                        _ => None,\n-                    };\n+                        _ => {}\n+                    }\n \n                     if let Some((err_help_span, err_help_stmt, item_msg, sec_span)) = err_info {\n                         let mut err = self.tcx.cannot_assign(span, &item_msg, Origin::Mir, true);\n@@ -1625,7 +1629,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         err.span_label(span, \"cannot mutate\");\n                         if place != place_err {\n                             if let Some(name) = self.describe_place(place_err) {\n-                                err.note(&format!(\"value not mutable causing this error: `{}`\",\n+                                err.note(&format!(\"the value which is causing this path not to be mutable is...: `{}`\",\n                                                   name));\n                             }\n                         }"}, {"sha": "f04f9233447c3d83761a34836fa913182de3aa0c", "filename": "src/librustc_mir/util/collect_writes.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6c649fbed4d4d86aed16dff8c0245b4871353cd1/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c649fbed4d4d86aed16dff8c0245b4871353cd1/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs?ref=6c649fbed4d4d86aed16dff8c0245b4871353cd1", "patch": "@@ -13,9 +13,23 @@ use rustc::mir::Mir;\n use rustc::mir::visit::PlaceContext;\n use rustc::mir::visit::Visitor;\n \n+crate trait FindAssignments {\n+    // Finds all statements that assign directly to local (i.e., X = ...)\n+    // and returns their locations.\n+    fn find_assignments(&self, local: Local) -> Vec<Location>;\n+}\n+\n+impl<'tcx> FindAssignments for Mir<'tcx>{\n+    fn find_assignments(&self, local: Local) -> Vec<Location>{\n+            let mut visitor = FindLocalAssignmentVisitor{ needle: local, locations: vec![]};\n+            visitor.visit_mir(self);\n+            visitor.locations\n+    }\n+}\n+\n // The Visitor walks the MIR to return the assignment statements corresponding\n // to a Local.\n-pub struct FindLocalAssignmentVisitor {\n+struct FindLocalAssignmentVisitor {\n     needle: Local,\n     locations: Vec<Location>,\n }\n@@ -51,15 +65,3 @@ impl<'tcx> Visitor<'tcx> for FindLocalAssignmentVisitor {\n     // TO-DO\n     // fn super_local()\n }\n-\n-crate trait FindAssignments {\n-    fn find_assignments(&self, local: Local) -> Vec<Location>;\n-    }\n-\n-impl<'tcx> FindAssignments for Mir<'tcx>{\n-    fn find_assignments(&self, local: Local) -> Vec<Location>{\n-            let mut visitor = FindLocalAssignmentVisitor{ needle: local, locations: vec![]};\n-            visitor.visit_mir(self);\n-            visitor.locations\n-    }\n-}"}]}