{"sha": "47f61c542947a126964a1d1911636539a4275b22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZjYxYzU0Mjk0N2ExMjY5NjRhMWQxOTExNjM2NTM5YTQyNzViMjI=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-07-05T22:01:12Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-07-05T23:18:58Z"}, "message": "Clean up error message punctuation/capitalization", "tree": {"sha": "775f3767a4178ef516fcc85cf57e2403c6fa0196", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/775f3767a4178ef516fcc85cf57e2403c6fa0196"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47f61c542947a126964a1d1911636539a4275b22", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47f61c542947a126964a1d1911636539a4275b22", "html_url": "https://github.com/rust-lang/rust/commit/47f61c542947a126964a1d1911636539a4275b22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47f61c542947a126964a1d1911636539a4275b22/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0dbf5824533af72a710bf7a72f2e92b402a4223", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0dbf5824533af72a710bf7a72f2e92b402a4223", "html_url": "https://github.com/rust-lang/rust/commit/a0dbf5824533af72a710bf7a72f2e92b402a4223"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "b171f9fc04148e264ab2e6d2c840236326c407fb", "filename": "src/rustc/middle/typeck/astconv.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/47f61c542947a126964a1d1911636539a4275b22/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f61c542947a126964a1d1911636539a4275b22/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=47f61c542947a126964a1d1911636539a4275b22", "patch": "@@ -97,7 +97,7 @@ fn ast_path_to_substs_and_ty<AC: ast_conv, RS: region_scope copy>(\n       (ast::rp_none, some(_)) {\n         tcx.sess.span_err(\n             path.span,\n-            #fmt[\"No region bound is permitted on %s, \\\n+            #fmt[\"no region bound is permitted on %s, \\\n                   which is not declared as containing region pointers\",\n                  ty::item_path_str(tcx, did)]);\n         none\n@@ -116,7 +116,7 @@ fn ast_path_to_substs_and_ty<AC: ast_conv, RS: region_scope copy>(\n     if !vec::same_length(*decl_bounds, path.types) {\n         self.tcx().sess.span_fatal(\n             path.span,\n-            #fmt[\"wrong number of type arguments, expected %u but found %u\",\n+            #fmt[\"wrong number of type arguments: expected %u but found %u\",\n                  (*decl_bounds).len(), path.types.len()]);\n     }\n     let tps = path.types.map(|a_t| ast_ty_to_ty(self, rscope, a_t));\n@@ -181,7 +181,7 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope copy>(\n           _ {\n             tcx.sess.span_err(\n                 a_seq_ty.span,\n-                #fmt[\"Bound not allowed on a %s.\",\n+                #fmt[\"bound not allowed on a %s\",\n                      ty::ty_sort_str(tcx, seq_ty)]);\n             ret seq_ty;\n           }\n@@ -195,15 +195,15 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope copy>(\n             if path.types.len() > 0u {\n                 tcx.sess.span_err(\n                     path.span,\n-                    \"Type parameters are not allowed on this type.\");\n+                    \"type parameters are not allowed on this type\");\n             }\n         }\n \n         if (flags & NO_REGIONS) != 0u {\n             if path.rp.is_some() {\n                 tcx.sess.span_err(\n                     path.span,\n-                    \"Region parameters are not allowed on this type.\");\n+                    \"region parameters are not allowed on this type\");\n             }\n         }\n     }\n@@ -213,9 +213,9 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope copy>(\n     alt tcx.ast_ty_to_ty_cache.find(ast_ty) {\n       some(ty::atttce_resolved(ty)) { ret ty; }\n       some(ty::atttce_unresolved) {\n-        tcx.sess.span_fatal(ast_ty.span, \"illegal recursive type. \\\n+        tcx.sess.span_fatal(ast_ty.span, \"illegal recursive type; \\\n                                           insert an enum in the cycle, \\\n-                                          if this is desired)\");\n+                                          if this is desired\");\n       }\n       none { /* go on */ }\n     }"}, {"sha": "bb97c7b4bef45ec70b44745d3b9cdc7d5d22021e", "filename": "src/test/compile-fail/prim-with-args.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/47f61c542947a126964a1d1911636539a4275b22/src%2Ftest%2Fcompile-fail%2Fprim-with-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f61c542947a126964a1d1911636539a4275b22/src%2Ftest%2Fcompile-fail%2Fprim-with-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprim-with-args.rs?ref=47f61c542947a126964a1d1911636539a4275b22", "patch": "@@ -1,29 +1,29 @@\n fn main() {\n \n-let x: int<int>; //~ ERROR Type parameters are not allowed on this type.\n-let x: i8<int>; //~ ERROR Type parameters are not allowed on this type.\n-let x: i16<int>; //~ ERROR Type parameters are not allowed on this type.\n-let x: i32<int>; //~ ERROR Type parameters are not allowed on this type.\n-let x: i64<int>; //~ ERROR Type parameters are not allowed on this type.\n-let x: uint<int>; //~ ERROR Type parameters are not allowed on this type.\n-let x: u8<int>; //~ ERROR Type parameters are not allowed on this type.\n-let x: u16<int>; //~ ERROR Type parameters are not allowed on this type.\n-let x: u32<int>; //~ ERROR Type parameters are not allowed on this type.\n-let x: u64<int>; //~ ERROR Type parameters are not allowed on this type.\n-let x: float<int>; //~ ERROR Type parameters are not allowed on this type.\n-let x: char<int>; //~ ERROR Type parameters are not allowed on this type.\n+let x: int<int>; //~ ERROR type parameters are not allowed on this type\n+let x: i8<int>; //~ ERROR type parameters are not allowed on this type\n+let x: i16<int>; //~ ERROR type parameters are not allowed on this type\n+let x: i32<int>; //~ ERROR type parameters are not allowed on this type\n+let x: i64<int>; //~ ERROR type parameters are not allowed on this type\n+let x: uint<int>; //~ ERROR type parameters are not allowed on this type\n+let x: u8<int>; //~ ERROR type parameters are not allowed on this type\n+let x: u16<int>; //~ ERROR type parameters are not allowed on this type\n+let x: u32<int>; //~ ERROR type parameters are not allowed on this type\n+let x: u64<int>; //~ ERROR type parameters are not allowed on this type\n+let x: float<int>; //~ ERROR type parameters are not allowed on this type\n+let x: char<int>; //~ ERROR type parameters are not allowed on this type\n \n-let x: int/&; //~ ERROR Region parameters are not allowed on this type.\n-let x: i8/&; //~ ERROR Region parameters are not allowed on this type.\n-let x: i16/&; //~ ERROR Region parameters are not allowed on this type.\n-let x: i32/&; //~ ERROR Region parameters are not allowed on this type.\n-let x: i64/&; //~ ERROR Region parameters are not allowed on this type.\n-let x: uint/&; //~ ERROR Region parameters are not allowed on this type.\n-let x: u8/&; //~ ERROR Region parameters are not allowed on this type.\n-let x: u16/&; //~ ERROR Region parameters are not allowed on this type.\n-let x: u32/&; //~ ERROR Region parameters are not allowed on this type.\n-let x: u64/&; //~ ERROR Region parameters are not allowed on this type.\n-let x: float/&; //~ ERROR Region parameters are not allowed on this type.\n-let x: char/&; //~ ERROR Region parameters are not allowed on this type.\n+let x: int/&; //~ ERROR region parameters are not allowed on this type\n+let x: i8/&; //~ ERROR region parameters are not allowed on this type\n+let x: i16/&; //~ ERROR region parameters are not allowed on this type\n+let x: i32/&; //~ ERROR region parameters are not allowed on this type\n+let x: i64/&; //~ ERROR region parameters are not allowed on this type\n+let x: uint/&; //~ ERROR region parameters are not allowed on this type\n+let x: u8/&; //~ ERROR region parameters are not allowed on this type\n+let x: u16/&; //~ ERROR region parameters are not allowed on this type\n+let x: u32/&; //~ ERROR region parameters are not allowed on this type\n+let x: u64/&; //~ ERROR region parameters are not allowed on this type\n+let x: float/&; //~ ERROR region parameters are not allowed on this type\n+let x: char/&; //~ ERROR region parameters are not allowed on this type\n \n }"}, {"sha": "ae9f16ae714aea3153405f7e4b144d675e2e7ac8", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47f61c542947a126964a1d1911636539a4275b22/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47f61c542947a126964a1d1911636539a4275b22/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=47f61c542947a126964a1d1911636539a4275b22", "patch": "@@ -19,8 +19,8 @@ fn a_fn3(e: a_class/&a) -> a_class/&b {\n }\n \n fn a_fn4(e: int/&a) -> int/&b {\n-    //~^ ERROR Region parameters are not allowed on this type.\n-    //~^^ ERROR Region parameters are not allowed on this type.\n+    //~^ ERROR region parameters are not allowed on this type\n+    //~^^ ERROR region parameters are not allowed on this type\n     ret e;\n }\n "}]}