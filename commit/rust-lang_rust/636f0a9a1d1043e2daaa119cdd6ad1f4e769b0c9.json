{"sha": "636f0a9a1d1043e2daaa119cdd6ad1f4e769b0c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNmYwYTlhMWQxMDQzZTJkYWFhMTE5Y2RkNmFkMWY0ZTc2OWIwYzk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-11-22T09:37:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-22T09:37:49Z"}, "message": "Rollup merge of #55980 - csmoe:issue-55891, r=estebank\n\nSuggest on closure args count mismatching with pipe span\n\nCloses #55891\nr? @estebank", "tree": {"sha": "7275ee485bccee4095331f8b9defbc15786635d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7275ee485bccee4095331f8b9defbc15786635d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/636f0a9a1d1043e2daaa119cdd6ad1f4e769b0c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb9njtCRBK7hj4Ov3rIwAAdHIIAEvmRgqdcwaVgYlco4Lh0NkY\nuG4gC0d24tnDfYmvp3i6TzQfksgPIAnITPndVFSNNC6R6gJy4NXTNIj2HOyLEAW4\nvi2066CNZDYYeoC1m/wukZIu7+NrHtoBM1KOHst+2yiJwjKPLkw+sLEH+Yo8VppP\ngtYfzzaJdwCNQg+6dj2xHgnfEpYF80yt4FR3Kg0u26zuadW3DL93EtjHojrG/cLG\nwgAsDVgxeH30KYEJrIqVfNGz6dNGQ3qZMw6NeGpwALuI6/8r4jpA1RxatnJmpIZa\nr65O0kqZhp05fXPY9nx5Vh0W2eB7f/H+LyIOYCDXFtddYgUNGAT5U1u+/zMcFmA=\n=DM0U\n-----END PGP SIGNATURE-----\n", "payload": "tree 7275ee485bccee4095331f8b9defbc15786635d8\nparent fa3941cb9917c022ff3bde5192ba7bc4341b5d3e\nparent d93e5b04f4817718480d17eafa0ee5e7bbe1f019\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1542879469 +0100\ncommitter GitHub <noreply@github.com> 1542879469 +0100\n\nRollup merge of #55980 - csmoe:issue-55891, r=estebank\n\nSuggest on closure args count mismatching with pipe span\n\nCloses #55891\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/636f0a9a1d1043e2daaa119cdd6ad1f4e769b0c9", "html_url": "https://github.com/rust-lang/rust/commit/636f0a9a1d1043e2daaa119cdd6ad1f4e769b0c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/636f0a9a1d1043e2daaa119cdd6ad1f4e769b0c9/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa3941cb9917c022ff3bde5192ba7bc4341b5d3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa3941cb9917c022ff3bde5192ba7bc4341b5d3e", "html_url": "https://github.com/rust-lang/rust/commit/fa3941cb9917c022ff3bde5192ba7bc4341b5d3e"}, {"sha": "d93e5b04f4817718480d17eafa0ee5e7bbe1f019", "url": "https://api.github.com/repos/rust-lang/rust/commits/d93e5b04f4817718480d17eafa0ee5e7bbe1f019", "html_url": "https://github.com/rust-lang/rust/commit/d93e5b04f4817718480d17eafa0ee5e7bbe1f019"}], "stats": {"total": 56, "additions": 45, "deletions": 11}, "files": [{"sha": "48b2b25d6adf917d54a244cf70c24dfbb1dcd254", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/636f0a9a1d1043e2daaa119cdd6ad1f4e769b0c9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f0a9a1d1043e2daaa119cdd6ad1f4e769b0c9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=636f0a9a1d1043e2daaa119cdd6ad1f4e769b0c9", "patch": "@@ -1092,13 +1092,27 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         if let Some(found_span) = found_span {\n             err.span_label(found_span, format!(\"takes {}\", found_str));\n \n+            // move |_| { ... }\n+            // ^^^^^^^^-- def_span\n+            //\n+            // move |_| { ... }\n+            // ^^^^^-- prefix\n+            let prefix_span = self.tcx.sess.source_map().span_until_non_whitespace(found_span);\n+            // move |_| { ... }\n+            //      ^^^-- pipe_span\n+            let pipe_span = if let Some(span) = found_span.trim_start(prefix_span) {\n+                span\n+            } else {\n+                found_span\n+            };\n+\n             // Suggest to take and ignore the arguments with expected_args_length `_`s if\n             // found arguments is empty (assume the user just wants to ignore args in this case).\n             // For example, if `expected_args_length` is 2, suggest `|_, _|`.\n             if found_args.is_empty() && is_closure {\n                 let underscores = vec![\"_\"; expected_args.len()].join(\", \");\n                 err.span_suggestion_with_applicability(\n-                    found_span,\n+                    pipe_span,\n                     &format!(\n                         \"consider changing the closure to take and ignore the expected argument{}\",\n                         if expected_args.len() < 2 {"}, {"sha": "2dcc7a25c84014f35b0e4757b5adac09b60712d2", "filename": "src/test/ui/mismatched_types/closure-arg-count.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/636f0a9a1d1043e2daaa119cdd6ad1f4e769b0c9/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636f0a9a1d1043e2daaa119cdd6ad1f4e769b0c9/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs?ref=636f0a9a1d1043e2daaa119cdd6ad1f4e769b0c9", "patch": "@@ -22,6 +22,8 @@ fn main() {\n     //~^ ERROR closure is expected to take\n     f(|| panic!());\n     //~^ ERROR closure is expected to take\n+    f(  move    || panic!());\n+    //~^ ERROR closure is expected to take\n \n     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x| i);\n     //~^ ERROR closure is expected to take"}, {"sha": "eeadf07262c3ee6f6f816d0e9e2ed561220d068d", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/636f0a9a1d1043e2daaa119cdd6ad1f4e769b0c9/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/636f0a9a1d1043e2daaa119cdd6ad1f4e769b0c9/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=636f0a9a1d1043e2daaa119cdd6ad1f4e769b0c9", "patch": "@@ -60,8 +60,26 @@ help: consider changing the closure to take and ignore the expected argument\n LL |     f(|_| panic!());\n    |       ^^^\n \n+error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n+  --> $DIR/closure-arg-count.rs:25:5\n+   |\n+LL |     f(  move    || panic!());\n+   |     ^   ---------- takes 0 arguments\n+   |     |\n+   |     expected closure that takes 1 argument\n+   |\n+note: required by `f`\n+  --> $DIR/closure-arg-count.rs:13:1\n+   |\n+LL | fn f<F: Fn<usize>>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider changing the closure to take and ignore the expected argument\n+   |\n+LL |     f(  move    |_| panic!());\n+   |                 ^^^\n+\n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n-  --> $DIR/closure-arg-count.rs:26:53\n+  --> $DIR/closure-arg-count.rs:28:53\n    |\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x| i);\n    |                                                     ^^^ ------ takes 2 distinct arguments\n@@ -73,7 +91,7 @@ LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|(i, x)| i);\n    |                                                         ^^^^^^^^\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n-  --> $DIR/closure-arg-count.rs:28:53\n+  --> $DIR/closure-arg-count.rs:30:53\n    |\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i: usize, x| i);\n    |                                                     ^^^ ------------- takes 2 distinct arguments\n@@ -85,15 +103,15 @@ LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|(i, x)| i);\n    |                                                         ^^^^^^^^\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 3 distinct arguments\n-  --> $DIR/closure-arg-count.rs:30:53\n+  --> $DIR/closure-arg-count.rs:32:53\n    |\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x, y| i);\n    |                                                     ^^^ --------- takes 3 distinct arguments\n    |                                                     |\n    |                                                     expected closure that takes a single 2-tuple as argument\n \n error[E0593]: function is expected to take a single 2-tuple as argument, but it takes 0 arguments\n-  --> $DIR/closure-arg-count.rs:32:53\n+  --> $DIR/closure-arg-count.rs:34:53\n    |\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(foo);\n    |                                                     ^^^ expected function that takes a single 2-tuple as argument\n@@ -102,15 +120,15 @@ LL | fn foo() {}\n    | -------- takes 0 arguments\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 3 distinct arguments\n-  --> $DIR/closure-arg-count.rs:35:53\n+  --> $DIR/closure-arg-count.rs:37:53\n    |\n LL |     let bar = |i, x, y| i;\n    |               --------- takes 3 distinct arguments\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(bar);\n    |                                                     ^^^ expected closure that takes a single 2-tuple as argument\n \n error[E0593]: function is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n-  --> $DIR/closure-arg-count.rs:37:53\n+  --> $DIR/closure-arg-count.rs:39:53\n    |\n LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(qux);\n    |                                                     ^^^ expected function that takes a single 2-tuple as argument\n@@ -119,13 +137,13 @@ LL | fn qux(x: usize, y: usize) {}\n    | -------------------------- takes 2 distinct arguments\n \n error[E0593]: function is expected to take 1 argument, but it takes 2 arguments\n-  --> $DIR/closure-arg-count.rs:40:41\n+  --> $DIR/closure-arg-count.rs:42:41\n    |\n LL |     let _it = vec![1, 2, 3].into_iter().map(usize::checked_add);\n    |                                         ^^^ expected function that takes 1 argument\n \n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n-  --> $DIR/closure-arg-count.rs:43:5\n+  --> $DIR/closure-arg-count.rs:45:5\n    |\n LL |     call(Foo);\n    |     ^^^^ expected function that takes 0 arguments\n@@ -134,11 +152,11 @@ LL | struct Foo(u8);\n    | --------------- takes 1 argument\n    |\n note: required by `call`\n-  --> $DIR/closure-arg-count.rs:50:1\n+  --> $DIR/closure-arg-count.rs:52:1\n    |\n LL | fn call<F, R>(_: F) where F: FnOnce() -> R {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 14 previous errors\n \n For more information about this error, try `rustc --explain E0593`."}]}