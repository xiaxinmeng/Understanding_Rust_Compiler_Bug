{"sha": "4fe94e0be65865bef1d0283873158baa523afddc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZTk0ZTBiZTY1ODY1YmVmMWQwMjgzODczMTU4YmFhNTIzYWZkZGM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-29T05:04:31Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-29T05:20:40Z"}, "message": "Future proof the AST for `union`.", "tree": {"sha": "53c10dc8ad7beee5595e0f2d26b5dadc7d0f334f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53c10dc8ad7beee5595e0f2d26b5dadc7d0f334f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fe94e0be65865bef1d0283873158baa523afddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fe94e0be65865bef1d0283873158baa523afddc", "html_url": "https://github.com/rust-lang/rust/commit/4fe94e0be65865bef1d0283873158baa523afddc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fe94e0be65865bef1d0283873158baa523afddc/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "html_url": "https://github.com/rust-lang/rust/commit/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "6739d3f662ac6f69dbe664be258138cde9a7f8e0", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fe94e0be65865bef1d0283873158baa523afddc/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe94e0be65865bef1d0283873158baa523afddc/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=4fe94e0be65865bef1d0283873158baa523afddc", "patch": "@@ -638,6 +638,7 @@ impl<'a> LoweringContext<'a> {\n                 let struct_def = self.lower_variant_data(struct_def);\n                 hir::ItemStruct(struct_def, self.lower_generics(generics))\n             }\n+            ItemKind::Union(..) => panic!(\"`union` is not yet implemented\"),\n             ItemKind::DefaultImpl(unsafety, ref trait_ref) => {\n                 hir::ItemDefaultImpl(self.lower_unsafety(unsafety),\n                                      self.lower_trait_ref(trait_ref))"}, {"sha": "77567fc7a46031ff29d07e3dfd978715d9d06cf8", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fe94e0be65865bef1d0283873158baa523afddc/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe94e0be65865bef1d0283873158baa523afddc/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=4fe94e0be65865bef1d0283873158baa523afddc", "patch": "@@ -133,7 +133,7 @@ impl<'ast> visit::Visitor for DefCollector<'ast> {\n         let def_data = match i.node {\n             ItemKind::DefaultImpl(..) | ItemKind::Impl(..) =>\n                 DefPathData::Impl,\n-            ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Trait(..) |\n+            ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) | ItemKind::Trait(..) |\n             ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) | ItemKind::Ty(..) =>\n                 DefPathData::TypeNs(i.ident.name.as_str()),\n             ItemKind::Mod(..) => DefPathData::Module(i.ident.name.as_str()),\n@@ -164,7 +164,7 @@ impl<'ast> visit::Visitor for DefCollector<'ast> {\n                         });\n                     }\n                 }\n-                ItemKind::Struct(ref struct_def, _) => {\n+                ItemKind::Struct(ref struct_def, _) | ItemKind::Union(ref struct_def, _) => {\n                     // If this is a tuple-like struct, register the constructor.\n                     if !struct_def.is_struct() {\n                         this.create_def(struct_def.id(),"}, {"sha": "71b00218e7cc17a8f907fa974b9a22e26e7c9323", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe94e0be65865bef1d0283873158baa523afddc/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe94e0be65865bef1d0283873158baa523afddc/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=4fe94e0be65865bef1d0283873158baa523afddc", "patch": "@@ -275,6 +275,8 @@ impl<'b> Resolver<'b> {\n                 self.structs.insert(item_def_id, field_names);\n             }\n \n+            ItemKind::Union(..) => panic!(\"`union` is not yet implemented\"),\n+\n             ItemKind::DefaultImpl(_, _) | ItemKind::Impl(..) => {}\n \n             ItemKind::Trait(_, _, _, ref items) => {"}, {"sha": "b5cf680cc129c03561bead07fade58e04a4c922a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fe94e0be65865bef1d0283873158baa523afddc/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe94e0be65865bef1d0283873158baa523afddc/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4fe94e0be65865bef1d0283873158baa523afddc", "patch": "@@ -1619,6 +1619,7 @@ impl<'a> Resolver<'a> {\n             ItemKind::Enum(_, ref generics) |\n             ItemKind::Ty(_, ref generics) |\n             ItemKind::Struct(_, ref generics) |\n+            ItemKind::Union(_, ref generics) |\n             ItemKind::Fn(_, _, _, _, ref generics, _) => {\n                 self.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind),\n                                              |this| visit::walk_item(this, item));"}, {"sha": "fcb99444957c4aaddf75cbd5fb930b1c641e7b97", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4fe94e0be65865bef1d0283873158baa523afddc/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe94e0be65865bef1d0283873158baa523afddc/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=4fe94e0be65865bef1d0283873158baa523afddc", "patch": "@@ -1883,6 +1883,10 @@ pub enum ItemKind {\n     ///\n     /// E.g. `struct Foo<A> { x: A }`\n     Struct(VariantData, Generics),\n+    /// A union definition (`union` or `pub union`).\n+    ///\n+    /// E.g. `union Foo<A, B> { x: A, y: B }`\n+    Union(VariantData, Generics), // FIXME: not yet implemented\n     /// A Trait declaration (`trait` or `pub trait`).\n     ///\n     /// E.g. `trait Foo { .. }` or `trait Foo<T> { .. }`\n@@ -1919,6 +1923,7 @@ impl ItemKind {\n             ItemKind::Ty(..) => \"type alias\",\n             ItemKind::Enum(..) => \"enum\",\n             ItemKind::Struct(..) => \"struct\",\n+            ItemKind::Union(..) => \"union\",\n             ItemKind::Trait(..) => \"trait\",\n             ItemKind::Mac(..) |\n             ItemKind::Impl(..) |"}, {"sha": "69a979176521b47d8f38b3e1841b34da99880aa5", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fe94e0be65865bef1d0283873158baa523afddc/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe94e0be65865bef1d0283873158baa523afddc/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=4fe94e0be65865bef1d0283873158baa523afddc", "patch": "@@ -180,6 +180,9 @@ impl<'a> fold::Folder for StripUnconfigured<'a> {\n             ast::ItemKind::Struct(def, generics) => {\n                 ast::ItemKind::Struct(fold_struct(self, def), generics)\n             }\n+            ast::ItemKind::Union(def, generics) => {\n+                ast::ItemKind::Union(fold_struct(self, def), generics)\n+            }\n             ast::ItemKind::Enum(def, generics) => {\n                 let variants = def.variants.into_iter().filter_map(|v| {\n                     self.configure(v).map(|v| {"}, {"sha": "7500bfe9caa8035af34db43799ce035458d9ead7", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fe94e0be65865bef1d0283873158baa523afddc/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe94e0be65865bef1d0283873158baa523afddc/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=4fe94e0be65865bef1d0283873158baa523afddc", "patch": "@@ -885,6 +885,10 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n             let struct_def = folder.fold_variant_data(struct_def);\n             ItemKind::Struct(struct_def, folder.fold_generics(generics))\n         }\n+        ItemKind::Union(struct_def, generics) => {\n+            let struct_def = folder.fold_variant_data(struct_def);\n+            ItemKind::Union(struct_def, folder.fold_generics(generics))\n+        }\n         ItemKind::DefaultImpl(unsafety, ref trait_ref) => {\n             ItemKind::DefaultImpl(unsafety, folder.fold_trait_ref((*trait_ref).clone()))\n         }"}, {"sha": "8563d27908db61428405892616fa437fc5948e77", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4fe94e0be65865bef1d0283873158baa523afddc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe94e0be65865bef1d0283873158baa523afddc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=4fe94e0be65865bef1d0283873158baa523afddc", "patch": "@@ -1251,7 +1251,10 @@ impl<'a> State<'a> {\n                 try!(self.head(&visibility_qualified(&item.vis, \"struct\")));\n                 try!(self.print_struct(&struct_def, generics, item.ident, item.span, true));\n             }\n-\n+            ast::ItemKind::Union(ref struct_def, ref generics) => {\n+                try!(self.head(&visibility_qualified(&item.vis, \"union\")));\n+                try!(self.print_struct(&struct_def, generics, item.ident, item.span, true));\n+            }\n             ast::ItemKind::DefaultImpl(unsafety, ref trait_ref) => {\n                 try!(self.head(\"\"));\n                 try!(self.print_visibility(&item.vis));"}, {"sha": "efd9b027504f0a5fa0acf8ae4079f31c210b4e60", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fe94e0be65865bef1d0283873158baa523afddc/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe94e0be65865bef1d0283873158baa523afddc/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=4fe94e0be65865bef1d0283873158baa523afddc", "patch": "@@ -278,7 +278,8 @@ pub fn walk_item<V: Visitor>(visitor: &mut V, item: &Item) {\n             visitor.visit_ty(typ);\n             walk_list!(visitor, visit_impl_item, impl_items);\n         }\n-        ItemKind::Struct(ref struct_definition, ref generics) => {\n+        ItemKind::Struct(ref struct_definition, ref generics) |\n+        ItemKind::Union(ref struct_definition, ref generics) => {\n             visitor.visit_generics(generics);\n             visitor.visit_variant_data(struct_definition, item.ident,\n                                      generics, item.id, item.span);"}]}