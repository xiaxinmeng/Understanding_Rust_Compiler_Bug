{"sha": "cd1cb3449e3c92f6fbcd907d58b3009b1067d7f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMWNiMzQ0OWUzYzkyZjZmYmNkOTA3ZDU4YjMwMDliMTA2N2Q3ZjA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-12T06:50:03Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-08-22T18:23:20Z"}, "message": "Simplify control flow.", "tree": {"sha": "cc3840d264a1f735b04c6a72bd7fa5277d603435", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc3840d264a1f735b04c6a72bd7fa5277d603435"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd1cb3449e3c92f6fbcd907d58b3009b1067d7f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd1cb3449e3c92f6fbcd907d58b3009b1067d7f0", "html_url": "https://github.com/rust-lang/rust/commit/cd1cb3449e3c92f6fbcd907d58b3009b1067d7f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd1cb3449e3c92f6fbcd907d58b3009b1067d7f0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0edc775b90a6892a37ec4d41f72417fc379e67db", "url": "https://api.github.com/repos/rust-lang/rust/commits/0edc775b90a6892a37ec4d41f72417fc379e67db", "html_url": "https://github.com/rust-lang/rust/commit/0edc775b90a6892a37ec4d41f72417fc379e67db"}], "stats": {"total": 61, "additions": 28, "deletions": 33}, "files": [{"sha": "55739cbf1d8ac07be21e1290657c411a3f32b6c1", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/cd1cb3449e3c92f6fbcd907d58b3009b1067d7f0/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd1cb3449e3c92f6fbcd907d58b3009b1067d7f0/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=cd1cb3449e3c92f6fbcd907d58b3009b1067d7f0", "patch": "@@ -528,7 +528,8 @@ where\n     debug_assert!(tcx.dep_context().dep_graph().is_green(dep_node));\n \n     // First we try to load the result from the on-disk cache.\n-    let result = if query.cache_on_disk(tcx, key, None) {\n+    // Some things are never cached on disk.\n+    if query.cache_on_disk(tcx, key, None) {\n         let prof_timer = tcx.dep_context().profiler().incr_cache_loading();\n         let result = query.try_load_from_disk(tcx, prev_dep_node_index);\n         prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n@@ -540,44 +541,38 @@ where\n             \"missing on-disk cache entry for {:?}\",\n             dep_node\n         );\n-        result\n-    } else {\n-        // Some things are never cached on disk.\n-        None\n-    };\n \n-    let result = if let Some(result) = result {\n-        // If `-Zincremental-verify-ich` is specified, re-hash results from\n-        // the cache and make sure that they have the expected fingerprint.\n-        if unlikely!(tcx.dep_context().sess().opts.debugging_opts.incremental_verify_ich) {\n-            incremental_verify_ich(*tcx.dep_context(), &result, dep_node, query);\n-        }\n+        if let Some(result) = result {\n+            // If `-Zincremental-verify-ich` is specified, re-hash results from\n+            // the cache and make sure that they have the expected fingerprint.\n+            if unlikely!(tcx.dep_context().sess().opts.debugging_opts.incremental_verify_ich) {\n+                incremental_verify_ich(*tcx.dep_context(), &result, dep_node, query);\n+            }\n \n-        result\n-    } else {\n-        // We could not load a result from the on-disk cache, so\n-        // recompute.\n-        let prof_timer = tcx.dep_context().profiler().query_provider();\n+            return Some((result, dep_node_index));\n+        }\n+    }\n \n-        // The dep-graph for this computation is already in-place.\n-        let result =\n-            tcx.dep_context().dep_graph().with_ignore(|| compute(*tcx.dep_context(), key.clone()));\n+    // We could not load a result from the on-disk cache, so\n+    // recompute.\n+    let prof_timer = tcx.dep_context().profiler().query_provider();\n \n-        prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n+    // The dep-graph for this computation is already in-place.\n+    let result =\n+        tcx.dep_context().dep_graph().with_ignore(|| compute(*tcx.dep_context(), key.clone()));\n \n-        // Verify that re-running the query produced a result with the expected hash\n-        // This catches bugs in query implementations, turning them into ICEs.\n-        // For example, a query might sort its result by `DefId` - since `DefId`s are\n-        // not stable across compilation sessions, the result could get up getting sorted\n-        // in a different order when the query is re-run, even though all of the inputs\n-        // (e.g. `DefPathHash` values) were green.\n-        //\n-        // See issue #82920 for an example of a miscompilation that would get turned into\n-        // an ICE by this check\n-        incremental_verify_ich(*tcx.dep_context(), &result, dep_node, query);\n+    prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n \n-        result\n-    };\n+    // Verify that re-running the query produced a result with the expected hash\n+    // This catches bugs in query implementations, turning them into ICEs.\n+    // For example, a query might sort its result by `DefId` - since `DefId`s are\n+    // not stable across compilation sessions, the result could get up getting sorted\n+    // in a different order when the query is re-run, even though all of the inputs\n+    // (e.g. `DefPathHash` values) were green.\n+    //\n+    // See issue #82920 for an example of a miscompilation that would get turned into\n+    // an ICE by this check\n+    incremental_verify_ich(*tcx.dep_context(), &result, dep_node, query);\n \n     Some((result, dep_node_index))\n }"}]}