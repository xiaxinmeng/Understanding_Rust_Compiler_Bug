{"sha": "6c8b8091fc73f5cec88d838d32fa165f54ac4ead", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjOGI4MDkxZmM3M2Y1Y2VjODhkODM4ZDMyZmExNjVmNTRhYzRlYWQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-04T09:07:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-04T09:07:16Z"}, "message": "Rollup merge of #49533 - scottmcm:more-must-use, r=nikomatsakis\n\nAdd #[must_use] to a few standard library methods\n\nChosen to start a precedent of using it on ones that are potentially-expensive and where using it for side effects is particularly discouraged.\n\nDiscuss :)\n\n```rust\nwarning: unused return value of `std::iter::Iterator::collect` which must be used: if you really need to exhaust the iterator, consider `.for_each(drop)` instead\n  --> $DIR/fn_must_use_stdlib.rs:19:5\n   |\nLL |     \"1 2 3\".split_whitespace().collect::<Vec<_>>();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: unused return value of `std::borrow::ToOwned::to_owned` which must be used: cloning is often expensive and is not expected to have side effects\n  --> $DIR/fn_must_use_stdlib.rs:21:5\n   |\nLL |     \"hello\".to_owned();\n   |     ^^^^^^^^^^^^^^^^^^^\n\nwarning: unused return value of `std::clone::Clone::clone` which must be used: cloning is often expensive and is not expected to have side effects\n  --> $DIR/fn_must_use_stdlib.rs:23:5\n   |\nLL |     String::from(\"world\").clone();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\ncc https://github.com/rust-lang/rust/issues/48926", "tree": {"sha": "b31e0adf063c09a9ebe9a17ecf25c41c8689d7c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b31e0adf063c09a9ebe9a17ecf25c41c8689d7c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c8b8091fc73f5cec88d838d32fa165f54ac4ead", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaxJXECRBK7hj4Ov3rIwAAdHIIAC6GyXIW5itAl6s6WBMSX0qM\no+JtwaNifI9qz7FSRzUbN5m5CsUsFlJmAO7pSNi0tHee72MlMMqijKJvu1tZSqL3\npJ7SeZwPGT64ffqbm3xipfVUWvDqmMlPszLAW57cAAVdaLa5UavBV2QHSiPpdTkz\noiRL+BOMUCxDHSQP2vRcLJ2vgj5xAfWQrGI2CQ3jRmRg5ieKR0r9GAcPTeciKHmz\nXE3bEMsnSVhgYGiYLDCUMSTudlMd2knjxHSkn8NEUJP8tn0r7Ak7qZehog+Gvlw3\n1UCf0ddlaPRq7G8QbteIIS5EchPq5DepcHLDF/sS9d0vkoPF+PJMxm3wazNfxLs=\n=VQ4q\n-----END PGP SIGNATURE-----\n", "payload": "tree b31e0adf063c09a9ebe9a17ecf25c41c8689d7c6\nparent f4f13883e5f888d36681b4390bc07fdb1e4eb7e0\nparent fb7deda27419eae61da3cbf5a5b1b4f51ae16d04\nauthor kennytm <kennytm@gmail.com> 1522832836 +0200\ncommitter GitHub <noreply@github.com> 1522832836 +0200\n\nRollup merge of #49533 - scottmcm:more-must-use, r=nikomatsakis\n\nAdd #[must_use] to a few standard library methods\n\nChosen to start a precedent of using it on ones that are potentially-expensive and where using it for side effects is particularly discouraged.\n\nDiscuss :)\n\n```rust\nwarning: unused return value of `std::iter::Iterator::collect` which must be used: if you really need to exhaust the iterator, consider `.for_each(drop)` instead\n  --> $DIR/fn_must_use_stdlib.rs:19:5\n   |\nLL |     \"1 2 3\".split_whitespace().collect::<Vec<_>>();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: unused return value of `std::borrow::ToOwned::to_owned` which must be used: cloning is often expensive and is not expected to have side effects\n  --> $DIR/fn_must_use_stdlib.rs:21:5\n   |\nLL |     \"hello\".to_owned();\n   |     ^^^^^^^^^^^^^^^^^^^\n\nwarning: unused return value of `std::clone::Clone::clone` which must be used: cloning is often expensive and is not expected to have side effects\n  --> $DIR/fn_must_use_stdlib.rs:23:5\n   |\nLL |     String::from(\"world\").clone();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\ncc https://github.com/rust-lang/rust/issues/48926\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c8b8091fc73f5cec88d838d32fa165f54ac4ead", "html_url": "https://github.com/rust-lang/rust/commit/6c8b8091fc73f5cec88d838d32fa165f54ac4ead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c8b8091fc73f5cec88d838d32fa165f54ac4ead/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4f13883e5f888d36681b4390bc07fdb1e4eb7e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f13883e5f888d36681b4390bc07fdb1e4eb7e0", "html_url": "https://github.com/rust-lang/rust/commit/f4f13883e5f888d36681b4390bc07fdb1e4eb7e0"}, {"sha": "fb7deda27419eae61da3cbf5a5b1b4f51ae16d04", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb7deda27419eae61da3cbf5a5b1b4f51ae16d04", "html_url": "https://github.com/rust-lang/rust/commit/fb7deda27419eae61da3cbf5a5b1b4f51ae16d04"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "c6741ddb822d5bb9114889bc71fdd2203f72e559", "filename": "src/liballoc/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c8b8091fc73f5cec88d838d32fa165f54ac4ead/src%2Fliballoc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8b8091fc73f5cec88d838d32fa165f54ac4ead/src%2Fliballoc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fborrow.rs?ref=6c8b8091fc73f5cec88d838d32fa165f54ac4ead", "patch": "@@ -59,6 +59,7 @@ pub trait ToOwned {\n     /// let vv: Vec<i32> = v.to_owned();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"cloning is often expensive and is not expected to have side effects\"]\n     fn to_owned(&self) -> Self::Owned;\n \n     /// Uses borrowed data to replace owned data, usually by cloning."}, {"sha": "c175ae15d28fe03636778725b23dbd370c24b684", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c8b8091fc73f5cec88d838d32fa165f54ac4ead/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8b8091fc73f5cec88d838d32fa165f54ac4ead/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=6c8b8091fc73f5cec88d838d32fa165f54ac4ead", "patch": "@@ -105,6 +105,7 @@ pub trait Clone : Sized {\n     /// assert_eq!(\"Hello\", hello.clone());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"cloning is often expensive and is not expected to have side effects\"]\n     fn clone(&self) -> Self;\n \n     /// Performs copy-assignment from `source`."}, {"sha": "75138f31a9dfbb8ba92b327d5a13e9e13c1c4440", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c8b8091fc73f5cec88d838d32fa165f54ac4ead/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8b8091fc73f5cec88d838d32fa165f54ac4ead/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=6c8b8091fc73f5cec88d838d32fa165f54ac4ead", "patch": "@@ -1368,6 +1368,7 @@ pub trait Iterator {\n     /// [`Result`]: ../../std/result/enum.Result.html\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"if you really need to exhaust the iterator, consider `.for_each(drop)` instead\"]\n     fn collect<B: FromIterator<Self::Item>>(self) -> B where Self: Sized {\n         FromIterator::from_iter(self)\n     }"}, {"sha": "6f5fcc9e421cc115d780356092c1563455c30201", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c8b8091fc73f5cec88d838d32fa165f54ac4ead/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c8b8091fc73f5cec88d838d32fa165f54ac4ead/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=6c8b8091fc73f5cec88d838d32fa165f54ac4ead", "patch": "@@ -317,7 +317,7 @@ newtype_index!(ScopeId);\n /// macro (and methods below) makes working with `BlockAnd` much more\n /// convenient.\n \n-#[must_use] // if you don't use one of these results, you're leaving a dangling edge\n+#[must_use = \"if you don't use one of these results, you're leaving a dangling edge\"]\n struct BlockAnd<T>(BasicBlock, T);\n \n trait BlockAndExtension {"}]}