{"sha": "3c44265d8791d54fa64550c60dc820eef87f9cf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNDQyNjVkODc5MWQ1NGZhNjQ1NTBjNjBkYzgyMGVlZjg3ZjljZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-07T16:35:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-07T16:35:04Z"}, "message": "auto merge of #7602 : blake2-ppc/rust/vec-pop-opt, r=cmr\n\nImplement methods `.pop_opt() -> Option<T>` and `.shift_opt() -> Option<T>` to allow retrieval of front/back of a vec in one operation without fail. .pop() and .shift() are changed to reuse the former two methods.\r\n\r\nFollows the naming of the previous method .head_opt()", "tree": {"sha": "1f2b07f84c59d076c625860f1922b99ce2c5b403", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f2b07f84c59d076c625860f1922b99ce2c5b403"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c44265d8791d54fa64550c60dc820eef87f9cf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c44265d8791d54fa64550c60dc820eef87f9cf5", "html_url": "https://github.com/rust-lang/rust/commit/3c44265d8791d54fa64550c60dc820eef87f9cf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c44265d8791d54fa64550c60dc820eef87f9cf5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "005c9bde45ba53b9039765a9ed549707973c15c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/005c9bde45ba53b9039765a9ed549707973c15c4", "html_url": "https://github.com/rust-lang/rust/commit/005c9bde45ba53b9039765a9ed549707973c15c4"}, {"sha": "fc17d4371f1d3e0c40ebcb6de0b9e7cbb89fa0c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc17d4371f1d3e0c40ebcb6de0b9e7cbb89fa0c9", "html_url": "https://github.com/rust-lang/rust/commit/fc17d4371f1d3e0c40ebcb6de0b9e7cbb89fa0c9"}], "stats": {"total": 114, "additions": 78, "deletions": 36}, "files": [{"sha": "effbc008b6ac84931dc29c091ad10db679ab8d7b", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 78, "deletions": 36, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/3c44265d8791d54fa64550c60dc820eef87f9cf5/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c44265d8791d54fa64550c60dc820eef87f9cf5/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=3c44265d8791d54fa64550c60dc820eef87f9cf5", "patch": "@@ -1091,7 +1091,9 @@ pub trait OwnedVector<T> {\n \n     fn push_all_move(&mut self, rhs: ~[T]);\n     fn pop(&mut self) -> T;\n+    fn pop_opt(&mut self) -> Option<T>;\n     fn shift(&mut self) -> T;\n+    fn shift_opt(&mut self) -> Option<T>;\n     fn unshift(&mut self, x: T);\n     fn insert(&mut self, i: uint, x:T);\n     fn remove(&mut self, i: uint) -> T;\n@@ -1281,35 +1283,49 @@ impl<T> OwnedVector<T> for ~[T] {\n         }\n     }\n \n-    /// Remove the last element from a vector and return it\n-    fn pop(&mut self) -> T {\n-        let ln = self.len();\n-        if ln == 0 {\n-            fail!(\"sorry, cannot pop an empty vector\")\n-        }\n-        let valptr = ptr::to_mut_unsafe_ptr(&mut self[ln - 1u]);\n-        unsafe {\n-            let val = ptr::replace_ptr(valptr, intrinsics::init());\n-            raw::set_len(self, ln - 1u);\n-            val\n+    /// Remove the last element from a vector and return it, or `None` if it is empty\n+    fn pop_opt(&mut self) -> Option<T> {\n+        match self.len() {\n+            0  => None,\n+            ln => {\n+                let valptr = ptr::to_mut_unsafe_ptr(&mut self[ln - 1u]);\n+                unsafe {\n+                    let val = ptr::replace_ptr(valptr, intrinsics::init());\n+                    raw::set_len(self, ln - 1u);\n+                    Some(val)\n+                }\n+            }\n         }\n     }\n \n+\n+    /// Remove the last element from a vector and return it, failing if it is empty\n+    #[inline]\n+    fn pop(&mut self) -> T {\n+        self.pop_opt().expect(\"pop: empty vector\")\n+    }\n+\n     /// Removes the first element from a vector and return it\n+    #[inline]\n     fn shift(&mut self) -> T {\n-        unsafe {\n-            assert!(!self.is_empty());\n-\n-            if self.len() == 1 { return self.pop() }\n+        self.shift_opt().expect(\"shift: empty vector\")\n+    }\n \n-            if self.len() == 2 {\n-                let last = self.pop();\n-                let first = self.pop();\n-                self.push(last);\n-                return first;\n-            }\n+    /// Removes the first element from a vector and return it, or `None` if it is empty\n+    fn shift_opt(&mut self) -> Option<T> {\n+        unsafe {\n+            let ln = match self.len() {\n+                0 => return None,\n+                1 => return self.pop_opt(),\n+                2 =>  {\n+                    let last = self.pop();\n+                    let first = self.pop_opt();\n+                    self.push(last);\n+                    return first;\n+                }\n+                x => x\n+            };\n \n-            let ln = self.len();\n             let next_ln = self.len() - 1;\n \n             // Save the last element. We're going to overwrite its position\n@@ -1345,7 +1361,7 @@ impl<T> OwnedVector<T> for ~[T] {\n             let vp = raw::to_mut_ptr(*self);\n             let vp = ptr::mut_offset(vp, next_ln - 1);\n \n-            ptr::replace_ptr(vp, work_elt)\n+            Some(ptr::replace_ptr(vp, work_elt))\n         }\n     }\n \n@@ -2089,18 +2105,13 @@ impl<T> Iterator<T> for VecConsumeIterator<T> {\n         //\n         // [1,2,3,4,5] => 1, [5,2,3,4] => 2, [5,4,3] => 3, [5,4] => 4,\n         // [5] -> 5, []\n-\n-        if self.v.is_empty() {\n-            None\n-        } else {\n-            let l = self.v.len();\n-            if self.idx < l {\n-                self.v.swap(self.idx, l - 1);\n-                self.idx += 1;\n-            }\n-\n-            Some(self.v.pop())\n+        let l = self.v.len();\n+        if self.idx < l {\n+            self.v.swap(self.idx, l - 1);\n+            self.idx += 1;\n         }\n+\n+        self.v.pop_opt()\n     }\n }\n \n@@ -2111,8 +2122,7 @@ pub struct VecConsumeRevIterator<T> {\n \n impl<T> Iterator<T> for VecConsumeRevIterator<T> {\n     fn next(&mut self) -> Option<T> {\n-        if self.v.is_empty() { None }\n-        else { Some(self.v.pop()) }\n+        self.v.pop_opt()\n     }\n }\n \n@@ -2415,6 +2425,17 @@ mod tests {\n     }\n \n     #[test]\n+    fn test_pop_opt() {\n+        let mut v = ~[5];\n+        let e = v.pop_opt();\n+        assert_eq!(v.len(), 0);\n+        assert_eq!(e, Some(5));\n+        let f = v.pop_opt();\n+        assert_eq!(f, None);\n+        let g = v.pop_opt();\n+        assert_eq!(g, None);\n+    }\n+\n     fn test_swap_remove() {\n         let mut v = ~[1, 2, 3, 4, 5];\n         let mut e = v.swap_remove(0);\n@@ -2749,6 +2770,27 @@ mod tests {\n         assert_eq!([&[1], &[2], &[3]].connect_vec(&0), ~[1, 0, 2, 0, 3]);\n     }\n \n+    #[test]\n+    fn test_shift() {\n+        let mut x = ~[1, 2, 3];\n+        assert_eq!(x.shift(), 1);\n+        assert_eq!(&x, &~[2, 3]);\n+        assert_eq!(x.shift(), 2);\n+        assert_eq!(x.shift(), 3);\n+        assert_eq!(x.len(), 0);\n+    }\n+\n+    #[test]\n+    fn test_shift_opt() {\n+        let mut x = ~[1, 2, 3];\n+        assert_eq!(x.shift_opt(), Some(1));\n+        assert_eq!(&x, &~[2, 3]);\n+        assert_eq!(x.shift_opt(), Some(2));\n+        assert_eq!(x.shift_opt(), Some(3));\n+        assert_eq!(x.shift_opt(), None);\n+        assert_eq!(x.len(), 0);\n+    }\n+\n     #[test]\n     fn test_unshift() {\n         let mut x = ~[1, 2, 3];"}]}