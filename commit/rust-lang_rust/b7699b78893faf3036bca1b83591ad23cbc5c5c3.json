{"sha": "b7699b78893faf3036bca1b83591ad23cbc5c5c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3Njk5Yjc4ODkzZmFmMzAzNmJjYTFiODM1OTFhZDIzY2JjNWM1YzM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-17T04:46:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-17T21:57:28Z"}, "message": "Remove Object.h from rustllvm\n\nThis file appears to be upstream now", "tree": {"sha": "abcf5f2968d846e378fa75cd8478d73f5d74ddd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abcf5f2968d846e378fa75cd8478d73f5d74ddd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7699b78893faf3036bca1b83591ad23cbc5c5c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7699b78893faf3036bca1b83591ad23cbc5c5c3", "html_url": "https://github.com/rust-lang/rust/commit/b7699b78893faf3036bca1b83591ad23cbc5c5c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7699b78893faf3036bca1b83591ad23cbc5c5c3/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22db8b1d53f866af3d949d6682f0cc3e2b00893f", "url": "https://api.github.com/repos/rust-lang/rust/commits/22db8b1d53f866af3d949d6682f0cc3e2b00893f", "html_url": "https://github.com/rust-lang/rust/commit/22db8b1d53f866af3d949d6682f0cc3e2b00893f"}], "stats": {"total": 80, "additions": 1, "deletions": 79}, "files": [{"sha": "046cdb289bd0284ed2b7051e5cec06c7bbff7788", "filename": "mk/rustllvm.mk", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7699b78893faf3036bca1b83591ad23cbc5c5c3/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b7699b78893faf3036bca1b83591ad23cbc5c5c3/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=b7699b78893faf3036bca1b83591ad23cbc5c5c3", "patch": "@@ -7,7 +7,6 @@ RUSTLLVM_LIB_CS := $(addprefix rustllvm/, \\\n \n RUSTLLVM_OBJS_CS := $(addprefix rustllvm/, RustWrapper.cpp)\n \n-RUSTLLVM_HDR := rustllvm/include/llvm-c/Object.h\n RUSTLLVM_DEF := rustllvm/rustllvm$(CFG_DEF_SUFFIX)\n \n RUSTLLVM_INCS := -iquote $(CFG_LLVM_INCDIR) \\\n@@ -28,7 +27,7 @@ rustllvm/rustllvmbits.a: $(RUSTLLVM_LIB_OBJS)\n # Note: We pass $(CFG_LLVM_LIBS) twice to fix the windows link since\n # it has no -whole-archive.\n rustllvm/$(CFG_RUSTLLVM): rustllvm/rustllvmbits.a $(RUSTLLVM_OBJS_OBJS) \\\n-                          $(MKFILES) $(RUSTLLVM_HDR) $(RUSTLLVM_DEF)\n+                          $(MKFILES) $(RUSTLLVM_DEF)\n \t@$(call E, link: $@)\n \t$(Q)$(call CFG_LINK_C,$@,$(RUSTLLVM_OBJS_OBJS) \\\n \t  $(CFG_GCCISH_PRE_LIB_FLAGS) $(CFG_LLVM_LIBS) \\"}, {"sha": "6e72b594664430e963819d4b071452d9ff83a9e6", "filename": "src/rustllvm/include/llvm-c/Object.h", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/22db8b1d53f866af3d949d6682f0cc3e2b00893f/src%2Frustllvm%2Finclude%2Fllvm-c%2FObject.h", "raw_url": "https://github.com/rust-lang/rust/raw/22db8b1d53f866af3d949d6682f0cc3e2b00893f/src%2Frustllvm%2Finclude%2Fllvm-c%2FObject.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Finclude%2Fllvm-c%2FObject.h?ref=22db8b1d53f866af3d949d6682f0cc3e2b00893f", "patch": "@@ -1,77 +0,0 @@\n-/*===-- llvm-c/Object.h - Object Lib C Iface --------------------*- C++ -*-===*/\n-/*                                                                            */\n-/*                     The LLVM Compiler Infrastructure                       */\n-/*                                                                            */\n-/* This file is distributed under the University of Illinois Open Source      */\n-/* License. See LICENSE.TXT for details.                                      */\n-/*                                                                            */\n-/*===----------------------------------------------------------------------===*/\n-/*                                                                            */\n-/* This header declares the C interface to libLLVMObject.a, which             */\n-/* implements object file reading and writing.                                */\n-/*                                                                            */\n-/* Many exotic languages can interoperate with C code but have a harder time  */\n-/* with C++ due to name mangling. So in addition to C, this interface enables */\n-/* tools written in such languages.                                           */\n-/*                                                                            */\n-/*===----------------------------------------------------------------------===*/\n-\n-#ifndef LLVM_C_OBJECT_H\n-#define LLVM_C_OBJECT_H\n-\n-#include \"llvm-c/Core.h\"\n-#include \"llvm/Config/llvm-config.h\"\n-\n-#ifdef __cplusplus\n-#include \"llvm/Object/ObjectFile.h\"\n-\n-extern \"C\" {\n-#endif\n-\n-\n-typedef struct LLVMOpaqueObjectFile *LLVMObjectFileRef;\n-\n-typedef struct LLVMOpaqueSectionIterator *LLVMSectionIteratorRef;\n-\n-LLVMObjectFileRef LLVMCreateObjectFile(LLVMMemoryBufferRef MemBuf);\n-void LLVMDisposeObjectFile(LLVMObjectFileRef ObjectFile);\n-\n-LLVMSectionIteratorRef LLVMGetSections(LLVMObjectFileRef ObjectFile);\n-void LLVMDisposeSectionIterator(LLVMSectionIteratorRef SI);\n-LLVMBool LLVMIsSectionIteratorAtEnd(LLVMObjectFileRef ObjectFile,\n-                                LLVMSectionIteratorRef SI);\n-void LLVMMoveToNextSection(LLVMSectionIteratorRef SI);\n-const char *LLVMGetSectionName(LLVMSectionIteratorRef SI);\n-uint64_t LLVMGetSectionSize(LLVMSectionIteratorRef SI);\n-const char *LLVMGetSectionContents(LLVMSectionIteratorRef SI);\n-\n-\n-#ifdef __cplusplus\n-}\n-\n-namespace llvm {\n-  namespace object {\n-    inline ObjectFile *unwrap(LLVMObjectFileRef OF) {\n-      return reinterpret_cast<ObjectFile*>(OF);\n-    }\n-\n-    inline LLVMObjectFileRef wrap(const ObjectFile *OF) {\n-      return reinterpret_cast<LLVMObjectFileRef>(const_cast<ObjectFile*>(OF));\n-    }\n-\n-    inline ObjectFile::section_iterator *unwrap(LLVMSectionIteratorRef SI) {\n-      return reinterpret_cast<ObjectFile::section_iterator*>(SI);\n-    }\n-\n-    inline LLVMSectionIteratorRef\n-    wrap(const ObjectFile::section_iterator *SI) {\n-      return reinterpret_cast<LLVMSectionIteratorRef>\n-        (const_cast<ObjectFile::section_iterator*>(SI));\n-    }\n-  }\n-}\n-\n-#endif /* defined(__cplusplus) */\n-\n-#endif\n-"}]}