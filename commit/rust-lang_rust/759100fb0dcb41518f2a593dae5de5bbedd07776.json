{"sha": "759100fb0dcb41518f2a593dae5de5bbedd07776", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1OTEwMGZiMGRjYjQxNTE4ZjJhNTkzZGFlNWRlNWJiZWRkMDc3NzY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-11T21:46:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-11T21:46:36Z"}, "message": "Merge #3062\n\n3062: Implement slice pattern AST > HIR lowering r=jplatte a=jplatte\n\nWIP. The necessary changes for parsing are implemented, but actual inference is not yet. Just wanted to upload what I've got so far so it doesn't get duplicated :)\r\n\r\nWill fix #3043\n\nCo-authored-by: Jonas Platte <jplatte+git@posteo.de>", "tree": {"sha": "1889a546fdec52286157c2a1d8e11eca2c4883dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1889a546fdec52286157c2a1d8e11eca2c4883dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/759100fb0dcb41518f2a593dae5de5bbedd07776", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeQyC9CRBK7hj4Ov3rIwAAdHIIABtSepDZg8Ihj+sr0EQ3f7Ee\nqTUFHAOEmLSoy3wZ+genpTUyJBA/ylZcqRR1VzQt40Jm4XJhMo9jZ152w/booGeS\n1ADw771UQFB9HUOgHnWKwERawaP0N1QP6/HMuMjk9SsGyJwePdM2tcnHhcFFE5+o\nsBUOTWnT5YVr1xMm5qlEsdydzWJXjWsATgmwrIES4HNHOzFxKhVY1mqTh/awHYl/\ncUVVB+8LdDYVYhXXTePotzp6Fyl7TaeqbLBCHkg6wwSOq+v3rjH5STCn6RyzmGWY\nHBSGnpQafWoTxRd/3qEYEfQxj2EQUexdF0evIuevpMT1pwSsWW5+E2ZcJfoq5I0=\n=nOlu\n-----END PGP SIGNATURE-----\n", "payload": "tree 1889a546fdec52286157c2a1d8e11eca2c4883dc\nparent af5042bd61877383398c17d941cf4f93f1c2d6be\nparent a3b104aa6df205e74c116d8c9e41900807924e70\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581457596 +0000\ncommitter GitHub <noreply@github.com> 1581457596 +0000\n\nMerge #3062\n\n3062: Implement slice pattern AST > HIR lowering r=jplatte a=jplatte\n\nWIP. The necessary changes for parsing are implemented, but actual inference is not yet. Just wanted to upload what I've got so far so it doesn't get duplicated :)\r\n\r\nWill fix #3043\n\nCo-authored-by: Jonas Platte <jplatte+git@posteo.de>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/759100fb0dcb41518f2a593dae5de5bbedd07776", "html_url": "https://github.com/rust-lang/rust/commit/759100fb0dcb41518f2a593dae5de5bbedd07776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/759100fb0dcb41518f2a593dae5de5bbedd07776/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af5042bd61877383398c17d941cf4f93f1c2d6be", "url": "https://api.github.com/repos/rust-lang/rust/commits/af5042bd61877383398c17d941cf4f93f1c2d6be", "html_url": "https://github.com/rust-lang/rust/commit/af5042bd61877383398c17d941cf4f93f1c2d6be"}, {"sha": "a3b104aa6df205e74c116d8c9e41900807924e70", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b104aa6df205e74c116d8c9e41900807924e70", "html_url": "https://github.com/rust-lang/rust/commit/a3b104aa6df205e74c116d8c9e41900807924e70"}], "stats": {"total": 77, "additions": 64, "deletions": 13}, "files": [{"sha": "45804c087e80908be0841d8735fdbce3b08dd04a", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/759100fb0dcb41518f2a593dae5de5bbedd07776/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/759100fb0dcb41518f2a593dae5de5bbedd07776/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=759100fb0dcb41518f2a593dae5de5bbedd07776", "patch": "@@ -1070,6 +1070,7 @@ dependencies = [\n  \"drop_bomb\",\n  \"either\",\n  \"insta\",\n+ \"itertools\",\n  \"log\",\n  \"once_cell\",\n  \"ra_arena\","}, {"sha": "6b9be9948c602a24b0903eeffe026735adff8b57", "filename": "crates/ra_hir_def/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/759100fb0dcb41518f2a593dae5de5bbedd07776/crates%2Fra_hir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/759100fb0dcb41518f2a593dae5de5bbedd07776/crates%2Fra_hir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2FCargo.toml?ref=759100fb0dcb41518f2a593dae5de5bbedd07776", "patch": "@@ -14,6 +14,7 @@ rustc-hash = \"1.0\"\n either = \"1.5\"\n anymap = \"0.12\"\n drop_bomb = \"0.1.4\"\n+itertools = \"0.8.2\"\n \n ra_arena = { path = \"../ra_arena\" }\n ra_db = { path = \"../ra_db\" }"}, {"sha": "1fc8923620ae7bd2724c5fe2112a33a7e4f5428c", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/759100fb0dcb41518f2a593dae5de5bbedd07776/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759100fb0dcb41518f2a593dae5de5bbedd07776/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=759100fb0dcb41518f2a593dae5de5bbedd07776", "patch": "@@ -8,7 +8,7 @@ use ra_arena::Arena;\n use ra_syntax::{\n     ast::{\n         self, ArgListOwner, ArrayExprKind, LiteralKind, LoopBodyOwner, ModuleItemOwner, NameOwner,\n-        TypeAscriptionOwner,\n+        SlicePatComponents, TypeAscriptionOwner,\n     },\n     AstNode, AstPtr,\n };\n@@ -596,7 +596,7 @@ where\n                 let args = p.args().map(|p| self.collect_pat(p)).collect();\n                 Pat::Tuple(args)\n             }\n-            ast::Pat::PlaceholderPat(_) => Pat::Wild,\n+            ast::Pat::PlaceholderPat(_) | ast::Pat::DotDotPat(_) => Pat::Wild,\n             ast::Pat::RecordPat(p) => {\n                 let path = p.path().and_then(|path| self.expander.parse_path(path));\n                 let record_field_pat_list =\n@@ -621,12 +621,20 @@ where\n \n                 Pat::Record { path, args: fields }\n             }\n+            ast::Pat::SlicePat(p) => {\n+                let SlicePatComponents { prefix, slice, suffix } = p.components();\n+\n+                Pat::Slice {\n+                    prefix: prefix.into_iter().map(|p| self.collect_pat(p)).collect(),\n+                    slice: slice.map(|p| self.collect_pat(p)),\n+                    suffix: suffix.into_iter().map(|p| self.collect_pat(p)).collect(),\n+                }\n+            }\n \n             // FIXME: implement\n-            ast::Pat::DotDotPat(_) => Pat::Missing,\n             ast::Pat::BoxPat(_) => Pat::Missing,\n             ast::Pat::LiteralPat(_) => Pat::Missing,\n-            ast::Pat::SlicePat(_) | ast::Pat::RangePat(_) => Pat::Missing,\n+            ast::Pat::RangePat(_) => Pat::Missing,\n         };\n         let ptr = AstPtr::new(&pat);\n         self.alloc_pat(pattern, Either::Left(ptr))"}, {"sha": "9707c55276af77b3bc0bb83451e6af8f73173313", "filename": "crates/ra_hir_def/src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/759100fb0dcb41518f2a593dae5de5bbedd07776/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759100fb0dcb41518f2a593dae5de5bbedd07776/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs?ref=759100fb0dcb41518f2a593dae5de5bbedd07776", "patch": "@@ -394,7 +394,7 @@ pub enum Pat {\n     },\n     Slice {\n         prefix: Vec<PatId>,\n-        rest: Option<PatId>,\n+        slice: Option<PatId>,\n         suffix: Vec<PatId>,\n     },\n     Path(Path),\n@@ -425,8 +425,8 @@ impl Pat {\n                 args.iter().copied().for_each(f);\n             }\n             Pat::Ref { pat, .. } => f(*pat),\n-            Pat::Slice { prefix, rest, suffix } => {\n-                let total_iter = prefix.iter().chain(rest.iter()).chain(suffix.iter());\n+            Pat::Slice { prefix, slice, suffix } => {\n+                let total_iter = prefix.iter().chain(slice.iter()).chain(suffix.iter());\n                 total_iter.copied().for_each(f);\n             }\n             Pat::Record { args, .. } => {"}, {"sha": "d3e8888bd5e2ff32cb0097b2d82477bbe36a376a", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/759100fb0dcb41518f2a593dae5de5bbedd07776/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759100fb0dcb41518f2a593dae5de5bbedd07776/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=759100fb0dcb41518f2a593dae5de5bbedd07776", "patch": "@@ -18,7 +18,8 @@ use crate::{\n pub use self::{\n     expr_extensions::{ArrayExprKind, BinOp, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n     extensions::{\n-        FieldKind, PathSegmentKind, SelfParamKind, StructKind, TypeBoundKind, VisibilityKind,\n+        FieldKind, PathSegmentKind, SelfParamKind, SlicePatComponents, StructKind, TypeBoundKind,\n+        VisibilityKind,\n     },\n     generated::*,\n     tokens::*,"}, {"sha": "7dcf084de90a09f2966cbab843234e50684c0244", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/759100fb0dcb41518f2a593dae5de5bbedd07776/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759100fb0dcb41518f2a593dae5de5bbedd07776/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=759100fb0dcb41518f2a593dae5de5bbedd07776", "patch": "@@ -1,6 +1,8 @@\n //! Various extension methods to ast Nodes, which are hard to code-generate.\n //! Extensions for various expressions live in a sibling `expr_extensions` module.\n \n+use itertools::Itertools;\n+\n use crate::{\n     ast::{self, child_opt, children, AstNode, AttrInput, SyntaxNode},\n     SmolStr, SyntaxElement,\n@@ -293,6 +295,40 @@ impl ast::BindPat {\n     }\n }\n \n+pub struct SlicePatComponents {\n+    pub prefix: Vec<ast::Pat>,\n+    pub slice: Option<ast::Pat>,\n+    pub suffix: Vec<ast::Pat>,\n+}\n+\n+impl ast::SlicePat {\n+    pub fn components(&self) -> SlicePatComponents {\n+        let mut args = self.args().peekable();\n+        let prefix = args\n+            .peeking_take_while(|p| match p {\n+                ast::Pat::DotDotPat(_) => false,\n+                ast::Pat::BindPat(bp) => match bp.pat() {\n+                    Some(ast::Pat::DotDotPat(_)) => false,\n+                    _ => true,\n+                },\n+                ast::Pat::RefPat(rp) => match rp.pat() {\n+                    Some(ast::Pat::DotDotPat(_)) => false,\n+                    Some(ast::Pat::BindPat(bp)) => match bp.pat() {\n+                        Some(ast::Pat::DotDotPat(_)) => false,\n+                        _ => true,\n+                    },\n+                    _ => true,\n+                },\n+                _ => true,\n+            })\n+            .collect();\n+        let slice = args.next();\n+        let suffix = args.collect();\n+\n+        SlicePatComponents { prefix, slice, suffix }\n+    }\n+}\n+\n impl ast::PointerType {\n     pub fn is_mut(&self) -> bool {\n         self.syntax().children_with_tokens().any(|n| n.kind() == T![mut])"}, {"sha": "8eb240801d507d8ed6ec3befe4a07cbf4e7de10d", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/759100fb0dcb41518f2a593dae5de5bbedd07776/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759100fb0dcb41518f2a593dae5de5bbedd07776/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=759100fb0dcb41518f2a593dae5de5bbedd07776", "patch": "@@ -2117,7 +2117,11 @@ impl AstNode for SlicePat {\n         &self.syntax\n     }\n }\n-impl SlicePat {}\n+impl SlicePat {\n+    pub fn args(&self) -> AstChildren<Pat> {\n+        AstChildren::new(&self.syntax)\n+    }\n+}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RangePat {\n     pub(crate) syntax: SyntaxNode,"}, {"sha": "2d9ae904b129a4c7df9a6053beae56d74edfcb41", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/759100fb0dcb41518f2a593dae5de5bbedd07776/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759100fb0dcb41518f2a593dae5de5bbedd07776/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=759100fb0dcb41518f2a593dae5de5bbedd07776", "patch": "@@ -417,14 +417,14 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             pat: Pat,\n             guard: MatchGuard,\n             Expr,\n-         }\n+        }\n         struct MatchGuard { Expr }\n \n         struct RecordLit { Path, RecordFieldList }\n         struct RecordFieldList {\n             fields: [RecordField],\n             spread: Expr,\n-         }\n+        }\n         struct RecordField { NameRef, Expr }\n \n         struct OrPat { pats: [Pat] }\n@@ -434,8 +434,8 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct BindPat: NameOwner { Pat }\n         struct PlaceholderPat { }\n         struct DotDotPat { }\n-        struct PathPat {  Path }\n-        struct SlicePat {}\n+        struct PathPat { Path }\n+        struct SlicePat { args: [Pat] }\n         struct RangePat {}\n         struct LiteralPat { Literal }\n "}]}