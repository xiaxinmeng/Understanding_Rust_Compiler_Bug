{"sha": "83ca4b7e600241850e61be48dee859f1604de50d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzY2E0YjdlNjAwMjQxODUwZTYxYmU0OGRlZTg1OWYxNjA0ZGU1MGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-17T23:31:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-17T23:31:10Z"}, "message": "Auto merge of #84061 - AngelicosPhosphoros:issue-75598-add-inline-always-arithmetic, r=nagisa\n\nAdd some #[inline(always)] to arithmetic methods of integers\n\nI tried to add it only to methods which return results of intrinsics and don't have any branching.\nBranching could made performance of debug builds (`-Copt-level=0`) worse.\nMain goal of changes is allowing wider optimizations in `-Copt-level=1`.\n\nCloses: https://github.com/rust-lang/rust/issues/75598\n\nr? `@nagisa`", "tree": {"sha": "40b276a27dc6e72a8cbb119994b5e496cc5c4d9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40b276a27dc6e72a8cbb119994b5e496cc5c4d9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83ca4b7e600241850e61be48dee859f1604de50d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83ca4b7e600241850e61be48dee859f1604de50d", "html_url": "https://github.com/rust-lang/rust/commit/83ca4b7e600241850e61be48dee859f1604de50d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83ca4b7e600241850e61be48dee859f1604de50d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "392ba2ba1a7d6c542d2459fb8133bebf62a4a423", "url": "https://api.github.com/repos/rust-lang/rust/commits/392ba2ba1a7d6c542d2459fb8133bebf62a4a423", "html_url": "https://github.com/rust-lang/rust/commit/392ba2ba1a7d6c542d2459fb8133bebf62a4a423"}, {"sha": "f8a12c6311429ea9734873dc70ab1e2349ba717e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8a12c6311429ea9734873dc70ab1e2349ba717e", "html_url": "https://github.com/rust-lang/rust/commit/f8a12c6311429ea9734873dc70ab1e2349ba717e"}], "stats": {"total": 152, "additions": 76, "deletions": 76}, "files": [{"sha": "608deb49a9dbf078d669350d2683d65f0770323e", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/83ca4b7e600241850e61be48dee859f1604de50d/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ca4b7e600241850e61be48dee859f1604de50d/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=83ca4b7e600241850e61be48dee859f1604de50d", "patch": "@@ -79,7 +79,7 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[doc(alias = \"popcount\")]\n         #[doc(alias = \"popcnt\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn count_ones(self) -> u32 { (self as $UnsignedT).count_ones() }\n \n         /// Returns the number of zeros in the binary representation of `self`.\n@@ -93,7 +93,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn count_zeros(self) -> u32 {\n             (!self).count_ones()\n         }\n@@ -111,7 +111,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn leading_zeros(self) -> u32 {\n             (self as $UnsignedT).leading_zeros()\n         }\n@@ -129,7 +129,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn trailing_zeros(self) -> u32 {\n             (self as $UnsignedT).trailing_zeros()\n         }\n@@ -147,7 +147,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n         #[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn leading_ones(self) -> u32 {\n             (self as $UnsignedT).leading_ones()\n         }\n@@ -165,7 +165,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n         #[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn trailing_ones(self) -> u32 {\n             (self as $UnsignedT).trailing_ones()\n         }\n@@ -189,7 +189,7 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn rotate_left(self, n: u32) -> Self {\n             (self as $UnsignedT).rotate_left(n) as Self\n         }\n@@ -214,7 +214,7 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn rotate_right(self, n: u32) -> Self {\n             (self as $UnsignedT).rotate_right(n) as Self\n         }\n@@ -234,7 +234,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn swap_bytes(self) -> Self {\n             (self as $UnsignedT).swap_bytes() as Self\n         }\n@@ -255,7 +255,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n-        #[inline]\n+        #[inline(always)]\n         #[must_use]\n         pub const fn reverse_bits(self) -> Self {\n             (self as $UnsignedT).reverse_bits() as Self\n@@ -416,7 +416,7 @@ macro_rules! int_impl {\n         )]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub unsafe fn unchecked_add(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_add`.\n@@ -454,7 +454,7 @@ macro_rules! int_impl {\n         )]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub unsafe fn unchecked_sub(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_sub`.\n@@ -492,7 +492,7 @@ macro_rules! int_impl {\n         )]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub unsafe fn unchecked_mul(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_mul`.\n@@ -741,7 +741,7 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn saturating_add(self, rhs: Self) -> Self {\n             intrinsics::saturating_add(self, rhs)\n         }\n@@ -762,7 +762,7 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn saturating_sub(self, rhs: Self) -> Self {\n             intrinsics::saturating_sub(self, rhs)\n         }\n@@ -783,7 +783,7 @@ macro_rules! int_impl {\n \n         #[stable(feature = \"saturating_neg\", since = \"1.45.0\")]\n         #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn saturating_neg(self) -> Self {\n             intrinsics::saturating_sub(0, self)\n         }\n@@ -883,7 +883,7 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn wrapping_add(self, rhs: Self) -> Self {\n             intrinsics::wrapping_add(self, rhs)\n         }\n@@ -903,7 +903,7 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn wrapping_sub(self, rhs: Self) -> Self {\n             intrinsics::wrapping_sub(self, rhs)\n         }\n@@ -923,7 +923,7 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn wrapping_mul(self, rhs: Self) -> Self {\n             intrinsics::wrapping_mul(self, rhs)\n         }\n@@ -1081,7 +1081,7 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn wrapping_shl(self, rhs: u32) -> Self {\n             // SAFETY: the masking by the bitsize of the type ensures that we do not shift\n             // out of bounds\n@@ -1110,7 +1110,7 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn wrapping_shr(self, rhs: u32) -> Self {\n             // SAFETY: the masking by the bitsize of the type ensures that we do not shift\n             // out of bounds\n@@ -1225,7 +1225,7 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {\n             let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);\n             (a as Self, b)\n@@ -1249,7 +1249,7 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {\n             let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);\n             (a as Self, b)\n@@ -1272,7 +1272,7 @@ macro_rules! int_impl {\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {\n             let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);\n             (a as Self, b)\n@@ -1725,7 +1725,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_sign\", since = \"1.47.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn signum(self) -> Self {\n             match self {\n                 n if n > 0 =>  1,\n@@ -1747,7 +1747,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn is_positive(self) -> bool { self > 0 }\n \n         /// Returns `true` if `self` is negative and `false` if the number is zero or\n@@ -1763,7 +1763,7 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn is_negative(self) -> bool { self < 0 }\n \n         /// Return the memory representation of this integer as a byte array in"}, {"sha": "46638ea4463169ff19d7307fa381469b32fcf3bf", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/83ca4b7e600241850e61be48dee859f1604de50d/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ca4b7e600241850e61be48dee859f1604de50d/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=83ca4b7e600241850e61be48dee859f1604de50d", "patch": "@@ -79,7 +79,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n         #[doc(alias = \"popcount\")]\n         #[doc(alias = \"popcnt\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn count_ones(self) -> u32 {\n             intrinsics::ctpop(self as $ActualT) as u32\n         }\n@@ -95,7 +95,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn count_zeros(self) -> u32 {\n             (!self).count_ones()\n         }\n@@ -113,7 +113,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn leading_zeros(self) -> u32 {\n             intrinsics::ctlz(self as $ActualT) as u32\n         }\n@@ -132,7 +132,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn trailing_zeros(self) -> u32 {\n             intrinsics::cttz(self) as u32\n         }\n@@ -150,7 +150,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n         #[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn leading_ones(self) -> u32 {\n             (!self).leading_zeros()\n         }\n@@ -169,7 +169,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n         #[rustc_const_stable(feature = \"leading_trailing_ones\", since = \"1.46.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn trailing_ones(self) -> u32 {\n             (!self).trailing_zeros()\n         }\n@@ -193,7 +193,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn rotate_left(self, n: u32) -> Self {\n             intrinsics::rotate_left(self, n as $SelfT)\n         }\n@@ -218,7 +218,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn rotate_right(self, n: u32) -> Self {\n             intrinsics::rotate_right(self, n as $SelfT)\n         }\n@@ -237,7 +237,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn swap_bytes(self) -> Self {\n             intrinsics::bswap(self as $ActualT) as Self\n         }\n@@ -258,7 +258,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n-        #[inline]\n+        #[inline(always)]\n         #[must_use]\n         pub const fn reverse_bits(self) -> Self {\n             intrinsics::bitreverse(self as $ActualT) as Self\n@@ -284,7 +284,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn from_be(x: Self) -> Self {\n             #[cfg(target_endian = \"big\")]\n             {\n@@ -316,7 +316,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn from_le(x: Self) -> Self {\n             #[cfg(target_endian = \"little\")]\n             {\n@@ -348,7 +348,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn to_be(self) -> Self { // or not to be?\n             #[cfg(target_endian = \"big\")]\n             {\n@@ -380,7 +380,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn to_le(self) -> Self {\n             #[cfg(target_endian = \"little\")]\n             {\n@@ -426,7 +426,7 @@ macro_rules! uint_impl {\n         )]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub unsafe fn unchecked_add(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_add`.\n@@ -464,7 +464,7 @@ macro_rules! uint_impl {\n         )]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub unsafe fn unchecked_sub(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_sub`.\n@@ -502,7 +502,7 @@ macro_rules! uint_impl {\n         )]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub unsafe fn unchecked_mul(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_mul`.\n@@ -727,7 +727,7 @@ macro_rules! uint_impl {\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn saturating_add(self, rhs: Self) -> Self {\n             intrinsics::saturating_add(self, rhs)\n         }\n@@ -747,7 +747,7 @@ macro_rules! uint_impl {\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn saturating_sub(self, rhs: Self) -> Self {\n             intrinsics::saturating_sub(self, rhs)\n         }\n@@ -813,7 +813,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn wrapping_add(self, rhs: Self) -> Self {\n             intrinsics::wrapping_add(self, rhs)\n         }\n@@ -833,7 +833,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn wrapping_sub(self, rhs: Self) -> Self {\n             intrinsics::wrapping_sub(self, rhs)\n         }\n@@ -856,7 +856,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn wrapping_mul(self, rhs: Self) -> Self {\n             intrinsics::wrapping_mul(self, rhs)\n         }\n@@ -878,7 +878,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_wrapping_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn wrapping_div(self, rhs: Self) -> Self {\n             self / rhs\n         }\n@@ -903,7 +903,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn wrapping_div_euclid(self, rhs: Self) -> Self {\n             self / rhs\n         }\n@@ -926,7 +926,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_wrapping_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn wrapping_rem(self, rhs: Self) -> Self {\n             self % rhs\n         }\n@@ -952,7 +952,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn wrapping_rem_euclid(self, rhs: Self) -> Self {\n             self % rhs\n         }\n@@ -1008,7 +1008,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn wrapping_shl(self, rhs: u32) -> Self {\n             // SAFETY: the masking by the bitsize of the type ensures that we do not shift\n             // out of bounds\n@@ -1040,7 +1040,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn wrapping_shr(self, rhs: u32) -> Self {\n             // SAFETY: the masking by the bitsize of the type ensures that we do not shift\n             // out of bounds\n@@ -1106,7 +1106,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {\n             let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);\n             (a as Self, b)\n@@ -1131,7 +1131,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {\n             let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);\n             (a as Self, b)\n@@ -1158,7 +1158,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {\n             let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);\n             (a as Self, b)\n@@ -1182,7 +1182,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".overflowing_div(2), (2, false));\")]\n         /// ```\n-        #[inline]\n+        #[inline(always)]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[rustc_const_stable(feature = \"const_overflowing_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n@@ -1212,7 +1212,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".overflowing_div_euclid(2), (2, false));\")]\n         /// ```\n-        #[inline]\n+        #[inline(always)]\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n         #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n@@ -1239,7 +1239,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".overflowing_rem(2), (1, false));\")]\n         /// ```\n-        #[inline]\n+        #[inline(always)]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[rustc_const_stable(feature = \"const_overflowing_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n@@ -1269,7 +1269,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".overflowing_rem_euclid(2), (1, false));\")]\n         /// ```\n-        #[inline]\n+        #[inline(always)]\n         #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n         #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n@@ -1293,7 +1293,7 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".overflowing_neg(), (0, false));\")]\n         #[doc = concat!(\"assert_eq!(2\", stringify!($SelfT), \".overflowing_neg(), (-2i32 as \", stringify!($SelfT), \", true));\")]\n         /// ```\n-        #[inline]\n+        #[inline(always)]\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n         pub const fn overflowing_neg(self) -> (Self, bool) {\n@@ -1320,7 +1320,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn overflowing_shl(self, rhs: u32) -> (Self, bool) {\n             (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))\n         }\n@@ -1345,7 +1345,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn overflowing_shr(self, rhs: u32) -> (Self, bool) {\n             (self.wrapping_shr(rhs), (rhs > ($BITS - 1)))\n         }\n@@ -1458,7 +1458,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         #[rustc_inherit_overflow_checks]\n         pub const fn div_euclid(self, rhs: Self) -> Self {\n             self / rhs\n@@ -1486,7 +1486,7 @@ macro_rules! uint_impl {\n         #[rustc_const_stable(feature = \"const_euclidean_int_methods\", since = \"1.52.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n-        #[inline]\n+        #[inline(always)]\n         #[rustc_inherit_overflow_checks]\n         pub const fn rem_euclid(self, rhs: Self) -> Self {\n             self % rhs\n@@ -1504,7 +1504,7 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_stable(feature = \"const_is_power_of_two\", since = \"1.32.0\")]\n-        #[inline]\n+        #[inline(always)]\n         pub const fn is_power_of_two(self) -> bool {\n             self.count_ones() == 1\n         }"}, {"sha": "b9b2ba9ae61e97f2bd2761790e896ddda1215a05", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ca4b7e600241850e61be48dee859f1604de50d/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ca4b7e600241850e61be48dee859f1604de50d/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=83ca4b7e600241850e61be48dee859f1604de50d", "patch": "@@ -226,7 +226,7 @@ impl<T: ?Sized> *const T {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const unsafe fn offset(self, count: isize) -> *const T\n     where\n         T: Sized,\n@@ -288,7 +288,7 @@ impl<T: ?Sized> *const T {\n     #[stable(feature = \"ptr_wrapping_offset\", since = \"1.16.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const fn wrapping_offset(self, count: isize) -> *const T\n     where\n         T: Sized,\n@@ -507,7 +507,7 @@ impl<T: ?Sized> *const T {\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const unsafe fn add(self, count: usize) -> Self\n     where\n         T: Sized,\n@@ -634,7 +634,7 @@ impl<T: ?Sized> *const T {\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const fn wrapping_add(self, count: usize) -> Self\n     where\n         T: Sized,"}, {"sha": "55c019c51d51b5763c86aaaa6fc6e99ee557bcbc", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ca4b7e600241850e61be48dee859f1604de50d/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ca4b7e600241850e61be48dee859f1604de50d/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=83ca4b7e600241850e61be48dee859f1604de50d", "patch": "@@ -231,7 +231,7 @@ impl<T: ?Sized> *mut T {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const unsafe fn offset(self, count: isize) -> *mut T\n     where\n         T: Sized,\n@@ -294,7 +294,7 @@ impl<T: ?Sized> *mut T {\n     #[stable(feature = \"ptr_wrapping_offset\", since = \"1.16.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const fn wrapping_offset(self, count: isize) -> *mut T\n     where\n         T: Sized,\n@@ -613,7 +613,7 @@ impl<T: ?Sized> *mut T {\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const unsafe fn add(self, count: usize) -> Self\n     where\n         T: Sized,\n@@ -740,7 +740,7 @@ impl<T: ?Sized> *mut T {\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const fn wrapping_add(self, count: usize) -> Self\n     where\n         T: Sized,"}]}