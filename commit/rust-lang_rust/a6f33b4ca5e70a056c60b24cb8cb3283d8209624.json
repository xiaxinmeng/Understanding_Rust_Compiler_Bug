{"sha": "a6f33b4ca5e70a056c60b24cb8cb3283d8209624", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZjMzYjRjYTVlNzBhMDU2YzYwYjI0Y2I4Y2IzMjgzZDgyMDk2MjQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-05T12:42:47Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-05T21:41:12Z"}, "message": "Add test for invalidation of inferred types when typing inside function\n\nThis currently fails, but should work once we have hir::Expr.", "tree": {"sha": "f92f6f5b9431c4047163cbec6db23c57447d8aa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f92f6f5b9431c4047163cbec6db23c57447d8aa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6f33b4ca5e70a056c60b24cb8cb3283d8209624", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6f33b4ca5e70a056c60b24cb8cb3283d8209624", "html_url": "https://github.com/rust-lang/rust/commit/a6f33b4ca5e70a056c60b24cb8cb3283d8209624", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6f33b4ca5e70a056c60b24cb8cb3283d8209624/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e42a158787955ff9f2e81be43479dbe8f2b1bb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e42a158787955ff9f2e81be43479dbe8f2b1bb6", "html_url": "https://github.com/rust-lang/rust/commit/3e42a158787955ff9f2e81be43479dbe8f2b1bb6"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "551f44d4e2c60e221e52ec841cf25ffcd84496dc", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a6f33b4ca5e70a056c60b24cb8cb3283d8209624/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6f33b4ca5e70a056c60b24cb8cb3283d8209624/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=a6f33b4ca5e70a056c60b24cb8cb3283d8209624", "patch": "@@ -87,6 +87,20 @@ fn module_from_source(\n     Ok(Some(Module::new(db, source_root_id, module_id)?))\n }\n \n+pub fn function_from_position(\n+    db: &impl HirDatabase,\n+    position: FilePosition,\n+) -> Cancelable<Option<Function>> {\n+    let file = db.source_file(position.file_id);\n+    let fn_def = if let Some(f) = find_node_at_offset::<ast::FnDef>(file.syntax(), position.offset)\n+    {\n+        f\n+    } else {\n+        return Ok(None);\n+    };\n+    function_from_source(db, position.file_id, fn_def)\n+}\n+\n pub fn function_from_source(\n     db: &impl HirDatabase,\n     file_id: FileId,"}, {"sha": "515c66e851905d2e8a299cb3d0566e4569c2757e", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a6f33b4ca5e70a056c60b24cb8cb3283d8209624/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6f33b4ca5e70a056c60b24cb8cb3283d8209624/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=a6f33b4ca5e70a056c60b24cb8cb3283d8209624", "patch": "@@ -1,7 +1,10 @@\n+use std::sync::Arc;\n use std::fmt::Write;\n use std::path::{PathBuf, Path};\n use std::fs;\n \n+use salsa::Database;\n+\n use ra_db::{SyntaxDatabase};\n use ra_syntax::ast::{self, AstNode};\n use test_utils::{project_dir, assert_eq_text, read_text};\n@@ -217,3 +220,44 @@ fn ellipsize(mut text: String, max_len: usize) -> String {\n fn test_data_dir() -> PathBuf {\n     project_dir().join(\"crates/ra_hir/src/ty/tests/data\")\n }\n+\n+#[test]\n+#[should_panic] // TODO this should work once hir::Expr is used\n+fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n+    let (mut db, pos) = MockDatabase::with_position(\n+        \"\n+        //- /lib.rs\n+        fn foo() -> i32 {\n+            <|>1 + 1\n+        }\n+    \",\n+    );\n+    let func = source_binder::function_from_position(&db, pos)\n+        .unwrap()\n+        .unwrap();\n+    {\n+        let events = db.log_executed(|| {\n+            func.infer(&db).unwrap();\n+        });\n+        assert!(format!(\"{:?}\", events).contains(\"infer\"))\n+    }\n+\n+    let new_text = \"\n+        fn foo() -> i32 {\n+            1\n+            +\n+            1\n+        }\n+    \"\n+    .to_string();\n+\n+    db.query_mut(ra_db::FileTextQuery)\n+        .set(pos.file_id, Arc::new(new_text));\n+\n+    {\n+        let events = db.log_executed(|| {\n+            func.infer(&db).unwrap();\n+        });\n+        assert!(!format!(\"{:?}\", events).contains(\"infer\"), \"{:#?}\", events)\n+    }\n+}"}]}