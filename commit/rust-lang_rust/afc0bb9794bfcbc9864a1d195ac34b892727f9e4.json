{"sha": "afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYzBiYjk3OTRiZmNiYzk4NjRhMWQxOTVhYzM0Yjg5MjcyN2Y5ZTQ=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-10-03T13:51:30Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-10-04T12:47:43Z"}, "message": "clean up GeneratorSubsts", "tree": {"sha": "eb2a0063f2061c617b0a2080e2c8a84d001fcdc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb2a0063f2061c617b0a2080e2c8a84d001fcdc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "html_url": "https://github.com/rust-lang/rust/commit/afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef9fe102800406ff5132344b43fcf6472cab7d2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef9fe102800406ff5132344b43fcf6472cab7d2d", "html_url": "https://github.com/rust-lang/rust/commit/ef9fe102800406ff5132344b43fcf6472cab7d2d"}], "stats": {"total": 129, "additions": 58, "deletions": 71}, "files": [{"sha": "e27236b47e07f8501557f344457077532ea503c5", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "patch": "@@ -512,7 +512,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n     /// variant indices.\n     #[inline]\n     pub fn discriminants(\n-        &'tcx self,\n+        self,\n         def_id: DefId,\n         tcx: TyCtxt<'tcx>,\n     ) -> impl Iterator<Item = (VariantIdx, Discr<'tcx>)> + Captures<'tcx> {\n@@ -524,7 +524,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n     /// Calls `f` with a reference to the name of the enumerator for the given\n     /// variant `v`.\n     #[inline]\n-    pub fn variant_name(&self, v: VariantIdx) -> Cow<'static, str> {\n+    pub fn variant_name(self, v: VariantIdx) -> Cow<'static, str> {\n         match v.as_usize() {\n             Self::UNRESUMED => Cow::from(Self::UNRESUMED_NAME),\n             Self::RETURNED => Cow::from(Self::RETURNED_NAME),\n@@ -570,7 +570,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n #[derive(Debug, Copy, Clone)]\n pub enum UpvarSubsts<'tcx> {\n     Closure(SubstsRef<'tcx>),\n-    Generator(GeneratorSubsts<'tcx>),\n+    Generator(SubstsRef<'tcx>),\n }\n \n impl<'tcx> UpvarSubsts<'tcx> {\n@@ -582,7 +582,7 @@ impl<'tcx> UpvarSubsts<'tcx> {\n     ) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n         let upvar_kinds = match self {\n             UpvarSubsts::Closure(substs) => substs.as_closure().split(def_id, tcx).upvar_kinds,\n-            UpvarSubsts::Generator(substs) => substs.split(def_id, tcx).upvar_kinds,\n+            UpvarSubsts::Generator(substs) => substs.as_generator().split(def_id, tcx).upvar_kinds,\n         };\n         upvar_kinds.iter().map(|t| {\n             if let GenericArgKind::Type(ty) = t.unpack() {"}, {"sha": "7c5daaf14d784588df3dd6bf78ae0ed63aa615be", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "patch": "@@ -198,7 +198,7 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n     /// Closure substitutions have a particular structure controlled by the\n     /// compiler that encodes information like the signature and generator kind;\n     /// see `ty::GeneratorSubsts` struct for more comments.\n-    pub fn as_generator(&'a self) -> GeneratorSubsts<'a> {\n+    pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {\n         GeneratorSubsts { substs: self }\n     }\n "}, {"sha": "14e4c4adfaa97e159904100fb92168a0c63a4092", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "patch": "@@ -30,7 +30,7 @@ use rustc::ty::Instance;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n use rustc::ty::layout::{self, Align, Integer, IntegerExt, LayoutOf,\n                         PrimitiveExt, Size, TyLayout, VariantIdx};\n-use rustc::ty::subst::GenericArgKind;\n+use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc::session::config::{self, DebugInfo};\n use rustc::util::nodemap::FxHashMap;\n use rustc_fs_util::path_to_c_string;\n@@ -692,9 +692,10 @@ pub fn type_metadata(\n                                    Some(containing_scope)).finalize(cx)\n         }\n         ty::Generator(def_id, substs,  _) => {\n-            let upvar_tys : Vec<_> = substs.prefix_tys(def_id, cx.tcx).map(|t| {\n-                cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), t)\n-            }).collect();\n+            let upvar_tys : Vec<_> = substs\n+                .as_generator().prefix_tys(def_id, cx.tcx).map(|t| {\n+                    cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), t)\n+                }).collect();\n             prepare_enum_metadata(cx,\n                                   t,\n                                   def_id,\n@@ -1338,7 +1339,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                 ty::Adt(adt, _) => VariantInfo::Adt(&adt.variants[index]),\n                 ty::Generator(def_id, substs, _) => {\n                     let generator_layout = cx.tcx.generator_layout(*def_id);\n-                    VariantInfo::Generator(*substs, generator_layout, index)\n+                    VariantInfo::Generator(substs, generator_layout, index)\n                 }\n                 _ => bug!(),\n             }\n@@ -1611,15 +1612,15 @@ enum EnumDiscriminantInfo<'ll> {\n #[derive(Copy, Clone)]\n enum VariantInfo<'tcx> {\n     Adt(&'tcx ty::VariantDef),\n-    Generator(ty::GeneratorSubsts<'tcx>, &'tcx GeneratorLayout<'tcx>, VariantIdx),\n+    Generator(SubstsRef<'tcx>, &'tcx GeneratorLayout<'tcx>, VariantIdx),\n }\n \n impl<'tcx> VariantInfo<'tcx> {\n     fn map_struct_name<R>(&self, f: impl FnOnce(&str) -> R) -> R {\n         match self {\n             VariantInfo::Adt(variant) => f(&variant.ident.as_str()),\n             VariantInfo::Generator(substs, _, variant_index) =>\n-                f(&substs.variant_name(*variant_index)),\n+                f(&substs.as_generator().variant_name(*variant_index)),\n         }\n     }\n \n@@ -1763,9 +1764,10 @@ fn prepare_enum_metadata(\n                 })\n                 .collect(),\n             ty::Generator(_, substs, _) => substs\n+                .as_generator()\n                 .variant_range(enum_def_id, cx.tcx)\n                 .map(|variant_index| {\n-                    let name = SmallCStr::new(&substs.variant_name(variant_index));\n+                    let name = SmallCStr::new(&substs.as_generator().variant_name(variant_index));\n                     unsafe {\n                         Some(llvm::LLVMRustDIBuilderCreateEnumerator(\n                             DIB(cx),"}, {"sha": "d921bbc96adeebeedcab5dfbeab0530ede3ee620", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "patch": "@@ -65,7 +65,7 @@ fn uncached_llvm_type<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             if let (&ty::Generator(_, substs, _), &layout::Variants::Single { index })\n                  = (&layout.ty.kind, &layout.variants)\n             {\n-                write!(&mut name, \"::{}\", substs.variant_name(index)).unwrap();\n+                write!(&mut name, \"::{}\", substs.as_generator().variant_name(index)).unwrap();\n             }\n             Some(name)\n         }"}, {"sha": "9d2f8b42c704f0d193d82e6e23c788498ac24056", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "patch": "@@ -636,7 +636,7 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n                         ty::Generator(def_id, substs, _) => (def_id, substs),\n                         _ => bug!(\"generator layout without generator substs\"),\n                     };\n-                    let state_tys = gen_substs.state_tys(def_id, tcx);\n+                    let state_tys = gen_substs.as_generator().state_tys(def_id, tcx);\n \n                     generator_layout.variant_fields.iter()\n                         .zip(state_tys)"}, {"sha": "cf575c54293c76ab690f86c98783088b5c42e189", "filename": "src/librustc_codegen_utils/symbol_names/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs?ref=afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "patch": "@@ -225,7 +225,7 @@ impl Printer<'tcx> for SymbolPrinter<'tcx> {\n             ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs }) |\n             ty::UnnormalizedProjection(ty::ProjectionTy { item_def_id: def_id, substs }) |\n             ty::Closure(def_id, substs) |\n-            ty::Generator(def_id, ty::GeneratorSubsts { substs }, _) => {\n+            ty::Generator(def_id, substs, _) => {\n                 self.print_def_path(def_id, substs)\n             }\n             _ => self.pretty_print_type(ty),"}, {"sha": "55b148fceb2177393101b9524258e9d8da68b64c", "filename": "src/librustc_codegen_utils/symbol_names/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs?ref=afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "patch": "@@ -415,7 +415,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs }) |\n             ty::UnnormalizedProjection(ty::ProjectionTy { item_def_id: def_id, substs }) |\n             ty::Closure(def_id, substs) |\n-            ty::Generator(def_id, ty::GeneratorSubsts { substs }, _) => {\n+            ty::Generator(def_id, substs, _) => {\n                 self = self.print_def_path(def_id, substs)?;\n             }\n             ty::Foreign(def_id) => {"}, {"sha": "b105664399a5cbb6bd1ef6ea36adc1048f73388e", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "patch": "@@ -12,7 +12,7 @@ use rustc::mir::{\n     SourceInfo, Statement, StatementKind, Terminator, TerminatorKind, UserTypeProjection,\n };\n use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::{self, GeneratorSubsts, RegionVid, Ty};\n+use rustc::ty::{self, RegionVid, Ty};\n use rustc::ty::subst::SubstsRef;\n \n pub(super) fn generate_constraints<'cx, 'tcx>(\n@@ -91,13 +91,6 @@ impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n         self.super_ty(ty);\n     }\n \n-    /// We sometimes have `generator_substs` within an rvalue, or within a\n-    /// call. Make them live at the location where they appear.\n-    fn visit_generator_substs(&mut self, substs: &GeneratorSubsts<'tcx>, location: Location) {\n-        self.add_regular_live_constraint(*substs, location);\n-        self.super_generator_substs(substs);\n-    }\n-\n     fn visit_statement(\n         &mut self,\n         statement: &Statement<'tcx>,"}, {"sha": "88ad1fb1295094a97f35d6f6d97bf4066f0930ef", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "patch": "@@ -1,5 +1,5 @@\n use rustc::ty::subst::SubstsRef;\n-use rustc::ty::{self, GeneratorSubsts, Ty, TypeFoldable};\n+use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::mir::{Location, Body, Promoted};\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n@@ -82,18 +82,4 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'tcx> {\n     fn visit_const(&mut self, constant: &mut &'tcx ty::Const<'tcx>, _location: Location) {\n         *constant = self.renumber_regions(&*constant);\n     }\n-\n-    fn visit_generator_substs(&mut self,\n-                              substs: &mut GeneratorSubsts<'tcx>,\n-                              location: Location) {\n-        debug!(\n-            \"visit_generator_substs(substs={:?}, location={:?})\",\n-            substs,\n-            location,\n-        );\n-\n-        *substs = self.renumber_regions(substs);\n-\n-        debug!(\"visit_generator_substs: substs={:?}\", substs);\n-    }\n }"}, {"sha": "1563a27250eb9e391d148d4a50646eeb2b5ecf8a", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "patch": "@@ -759,13 +759,13 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n             PlaceTy { ty, variant_index: Some(variant_index) } => match ty.kind {\n                 ty::Adt(adt_def, substs) => (&adt_def.variants[variant_index], substs),\n                 ty::Generator(def_id, substs, _) => {\n-                    let mut variants = substs.state_tys(def_id, tcx);\n+                    let mut variants = substs.as_generator().state_tys(def_id, tcx);\n                     let mut variant = match variants.nth(variant_index.into()) {\n                         Some(v) => v,\n                         None => {\n                             bug!(\"variant_index of generator out of range: {:?}/{:?}\",\n                                  variant_index,\n-                                 substs.state_tys(def_id, tcx).count())\n+                                 substs.as_generator().state_tys(def_id, tcx).count())\n                         }\n                     };\n                     return match variant.nth(field.index()) {\n@@ -791,10 +791,10 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                 ty::Generator(def_id, substs, _) => {\n                     // Only prefix fields (upvars and current state) are\n                     // accessible without a variant index.\n-                    return match substs.prefix_tys(def_id, tcx).nth(field.index()) {\n+                    return match substs.as_generator().prefix_tys(def_id, tcx).nth(field.index()) {\n                         Some(ty) => Ok(ty),\n                         None => Err(FieldAccessError::OutOfRange {\n-                            field_count: substs.prefix_tys(def_id, tcx).count(),\n+                            field_count: substs.as_generator().prefix_tys(def_id, tcx).count(),\n                         }),\n                     }\n                 }\n@@ -1963,10 +1963,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // It doesn't make sense to look at a field beyond the prefix;\n                 // these require a variant index, and are not initialized in\n                 // aggregate rvalues.\n-                match substs.prefix_tys(def_id, tcx).nth(field_index) {\n+                match substs.as_generator().prefix_tys(def_id, tcx).nth(field_index) {\n                     Some(ty) => Ok(ty),\n                     None => Err(FieldAccessError::OutOfRange {\n-                        field_count: substs.prefix_tys(def_id, tcx).count(),\n+                        field_count: substs.as_generator().prefix_tys(def_id, tcx).count(),\n                     }),\n                 }\n             }\n@@ -2541,7 +2541,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             // these extra requirements are basically like where\n             // clauses on the struct.\n             AggregateKind::Closure(def_id, substs)\n-            | AggregateKind::Generator(def_id, ty::GeneratorSubsts { substs }, _) => {\n+            | AggregateKind::Generator(def_id, substs, _) => {\n                 self.prove_closure_bounds(tcx, *def_id, substs, location)\n             }\n "}, {"sha": "5f6951856434e8021bbf7866ec51356fb452ea73", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "patch": "@@ -19,7 +19,7 @@ use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc::middle::lang_items;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::{InternalSubsts, SubstsRef, Subst};\n-use rustc::ty::{self, GeneratorSubsts, RegionVid, Ty, TyCtxt};\n+use rustc::ty::{self, RegionVid, Ty, TyCtxt};\n use rustc::util::nodemap::FxHashMap;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_errors::DiagnosticBuilder;\n@@ -90,7 +90,7 @@ pub enum DefiningTy<'tcx> {\n     /// The MIR is a generator. The signature is that generators take\n     /// no parameters and return the result of\n     /// `ClosureSubsts::generator_return_ty`.\n-    Generator(DefId, ty::GeneratorSubsts<'tcx>, hir::GeneratorMovability),\n+    Generator(DefId, SubstsRef<'tcx>, hir::GeneratorMovability),\n \n     /// The MIR is a fn item with the given `DefId` and substs. The signature\n     /// of the function can be bound then with the `fn_sig` query.\n@@ -113,7 +113,7 @@ impl<'tcx> DefiningTy<'tcx> {\n                 substs.as_closure().upvar_tys(def_id, tcx)\n             ),\n             DefiningTy::Generator(def_id, substs, _) => {\n-                Either::Right(Either::Left(substs.upvar_tys(def_id, tcx)))\n+                Either::Right(Either::Left(substs.as_generator().upvar_tys(def_id, tcx)))\n             }\n             DefiningTy::FnDef(..) | DefiningTy::Const(..) => {\n                 Either::Right(Either::Right(iter::empty()))\n@@ -334,7 +334,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n                 err.note(&format!(\n                     \"defining type: {:?} with generator substs {:#?}\",\n                     def_id,\n-                    &substs.substs[..]\n+                    &substs[..]\n                 ));\n \n                 // FIXME: As above, we'd like to print out the region\n@@ -470,7 +470,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n \n         let yield_ty = match defining_ty {\n             DefiningTy::Generator(def_id, substs, _) => {\n-                Some(substs.yield_ty(def_id, self.infcx.tcx))\n+                Some(substs.as_generator().yield_ty(def_id, self.infcx.tcx))\n             }\n             _ => None,\n         };\n@@ -549,7 +549,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         let identity_substs = InternalSubsts::identity_for_item(tcx, closure_base_def_id);\n         let fr_substs = match defining_ty {\n             DefiningTy::Closure(_, ref substs)\n-            | DefiningTy::Generator(_, GeneratorSubsts { ref substs }, _) => {\n+            | DefiningTy::Generator(_, ref substs, _) => {\n                 // In the case of closures, we rely on the fact that\n                 // the first N elements in the ClosureSubsts are\n                 // inherited from the `closure_base_def_id`.\n@@ -612,7 +612,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n \n             DefiningTy::Generator(def_id, substs, movability) => {\n                 assert_eq!(self.mir_def_id, def_id);\n-                let output = substs.return_ty(def_id, tcx);\n+                let output = substs.as_generator().return_ty(def_id, tcx);\n                 let generator_ty = tcx.mk_generator(def_id, substs, movability);\n                 let inputs_and_output = self.infcx.tcx.intern_type_list(&[generator_ty, output]);\n                 ty::Binder::dummy(inputs_and_output)"}, {"sha": "6b6eac5add2fa04f3bcae1368e24853a2891c00c", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "patch": "@@ -146,7 +146,7 @@ pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n             let (yield_ty, return_ty) = if body.generator_kind.is_some() {\n                 let gen_sig = match ty.kind {\n                     ty::Generator(gen_def_id, gen_substs, ..) =>\n-                        gen_substs.sig(gen_def_id, tcx),\n+                        gen_substs.as_generator().sig(gen_def_id, tcx),\n                     _ =>\n                         span_bug!(tcx.hir().span(id),\n                                   \"generator w/o generator type: {:?}\", ty),"}, {"sha": "f9200f8c1c04239c87ba03610dee0027ff50f31f", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "patch": "@@ -68,8 +68,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             | ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs })\n             | ty::UnnormalizedProjection(ty::ProjectionTy { item_def_id: def_id, substs })\n             | ty::Closure(def_id, substs)\n-            | ty::Generator(def_id, ty::GeneratorSubsts { substs }, _)\n-            => self.print_def_path(def_id, substs),\n+            | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n             ty::Foreign(def_id) => self.print_def_path(def_id, &[]),\n \n             ty::GeneratorWitness(_) => {"}, {"sha": "4bdd71f9602ac2b25c336960eda4c49568ed049f", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "patch": "@@ -664,14 +664,18 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     bits_discr\n                 };\n                 // Make sure we catch invalid discriminants\n-                let index = match &rval.layout.ty.kind {\n+                let index = match rval.layout.ty.kind {\n                     ty::Adt(adt, _) => adt\n                         .discriminants(self.tcx.tcx)\n                         .find(|(_, var)| var.val == real_discr),\n-                    ty::Generator(def_id, substs, _) => substs\n-                        .discriminants(*def_id, self.tcx.tcx)\n-                        .find(|(_, var)| var.val == real_discr),\n+                    ty::Generator(def_id, substs, _) => {\n+                        let substs = substs.as_generator();\n+                        substs\n+                            .discriminants(def_id, self.tcx.tcx)\n+                            .find(|(_, var)| var.val == real_discr)\n+                    }\n                     _ => bug!(\"tagged layout for non-adt non-generator\"),\n+\n                 }.ok_or_else(\n                     || err_unsup!(InvalidDiscriminant(raw_discr.erase_tag()))\n                 )?;"}, {"sha": "78008e2fcd361c69004d9c619b425a30ff999f14", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "patch": "@@ -169,7 +169,7 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n     // Check if this is a generator, if so, return the drop glue for it\n     if let Some(&ty::TyS { kind: ty::Generator(gen_def_id, substs, _), .. }) = ty {\n         let body = &**tcx.optimized_mir(gen_def_id).generator_drop.as_ref().unwrap();\n-        return body.subst(tcx, substs.substs);\n+        return body.subst(tcx, substs);\n     }\n \n     let substs = if let Some(ty) = ty {"}, {"sha": "a648fadde43bec5c43ebd83746a715cf83bcd513", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "patch": "@@ -1126,6 +1126,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         // Get the interior types and substs which typeck computed\n         let (upvars, interior, discr_ty, movable) = match gen_ty.kind {\n             ty::Generator(_, substs, movability) => {\n+                let substs = substs.as_generator();\n                 (substs.upvar_tys(def_id, tcx).collect(),\n                  substs.witness(def_id, tcx),\n                  substs.discr_ty(tcx),"}, {"sha": "f7ba6f1ec6993994d8595ab43d4d44721db210f8", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "patch": "@@ -798,7 +798,7 @@ where\n             // It effetively only contains upvars until the generator transformation runs.\n             // See librustc_body/transform/generator.rs for more details.\n             ty::Generator(def_id, substs, _) => {\n-                let tys : Vec<_> = substs.upvar_tys(def_id, self.tcx()).collect();\n+                let tys : Vec<_> = substs.as_generator().upvar_tys(def_id, self.tcx()).collect();\n                 self.open_drop_for_tuple(&tys)\n             }\n             ty::Tuple(..) => {"}, {"sha": "88e62db9a10d8aacbda75a3a4f60af3c1ab0a41f", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "patch": "@@ -223,7 +223,7 @@ fn dtorck_constraint_for_ty<'tcx>(\n             // *do* incorporate the upvars here.\n \n             let constraint = DtorckConstraint {\n-                outlives: substs.upvar_tys(def_id, tcx).map(|t| t.into()).collect(),\n+                outlives: substs.as_generator().upvar_tys(def_id, tcx).map(|t| t.into()).collect(),\n                 dtorck_types: vec![],\n                 overflows: vec![],\n             };"}, {"sha": "cc5348623fabda0dfdf0eda61c36b30fafc7e935", "filename": "src/librustc_traits/generic_types.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_traits%2Fgeneric_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_traits%2Fgeneric_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fgeneric_types.rs?ref=afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "patch": "@@ -73,7 +73,9 @@ crate fn closure(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'tcx> {\n }\n \n crate fn generator(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'tcx> {\n-    tcx.mk_generator(def_id, ty::GeneratorSubsts {\n-        substs: InternalSubsts::bound_vars_for_item(tcx, def_id),\n-    }, hir::GeneratorMovability::Movable)\n+    tcx.mk_generator(\n+        def_id,\n+        InternalSubsts::bound_vars_for_item(tcx, def_id),\n+        hir::GeneratorMovability::Movable\n+    )\n }"}, {"sha": "8b97bf643e9bb9a2ab9f4da7f87dafa5b37572af", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc0bb9794bfcbc9864a1d195ac34b892727f9e4/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=afc0bb9794bfcbc9864a1d195ac34b892727f9e4", "patch": "@@ -113,21 +113,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         });\n         if let Some(GeneratorTypes { yield_ty, interior, movability }) = generator_types {\n-            let substs = ty::GeneratorSubsts { substs };\n+            let generator_substs = substs.as_generator();\n             self.demand_eqtype(\n                 expr.span,\n                 yield_ty,\n-                substs.yield_ty(expr_def_id, self.tcx),\n+                generator_substs.yield_ty(expr_def_id, self.tcx),\n             );\n             self.demand_eqtype(\n                 expr.span,\n                 liberated_sig.output(),\n-                substs.return_ty(expr_def_id, self.tcx),\n+                generator_substs.return_ty(expr_def_id, self.tcx),\n             );\n             self.demand_eqtype(\n                 expr.span,\n                 interior,\n-                substs.witness(expr_def_id, self.tcx),\n+                generator_substs.witness(expr_def_id, self.tcx),\n             );\n             return self.tcx.mk_generator(expr_def_id, substs, movability);\n         }"}]}