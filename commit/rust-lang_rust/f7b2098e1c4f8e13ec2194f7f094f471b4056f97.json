{"sha": "f7b2098e1c4f8e13ec2194f7f094f471b4056f97", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YjIwOThlMWM0ZjhlMTNlYzIxOTRmN2YwOTRmNDcxYjQwNTZmOTc=", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2020-11-28T16:55:15Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2020-11-28T16:55:15Z"}, "message": "Fix a false positive in `unnecessary_wraps`", "tree": {"sha": "4869ecc95278cfb6a88dad961be3b29efda8129b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4869ecc95278cfb6a88dad961be3b29efda8129b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7b2098e1c4f8e13ec2194f7f094f471b4056f97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7b2098e1c4f8e13ec2194f7f094f471b4056f97", "html_url": "https://github.com/rust-lang/rust/commit/f7b2098e1c4f8e13ec2194f7f094f471b4056f97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7b2098e1c4f8e13ec2194f7f094f471b4056f97/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a73a256223600926f1053fa63762b7d6375c9bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a73a256223600926f1053fa63762b7d6375c9bc", "html_url": "https://github.com/rust-lang/rust/commit/7a73a256223600926f1053fa63762b7d6375c9bc"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "004b8416fc1b85c78c97e9656141b8272655e107", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7b2098e1c4f8e13ec2194f7f094f471b4056f97/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b2098e1c4f8e13ec2194f7f094f471b4056f97/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=f7b2098e1c4f8e13ec2194f7f094f471b4056f97", "patch": "@@ -3878,7 +3878,7 @@ fn is_bool(ty: &hir::Ty<'_>) -> bool {\n }\n \n // Returns `true` if `expr` contains a return expression\n-fn contains_return(expr: &hir::Expr<'_>) -> bool {\n+pub(crate) fn contains_return(expr: &hir::Expr<'_>) -> bool {\n     struct RetCallFinder {\n         found: bool,\n     }"}, {"sha": "7b550c702cd7f6f558884e07eeb5237a260dff0c", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7b2098e1c4f8e13ec2194f7f094f471b4056f97/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b2098e1c4f8e13ec2194f7f094f471b4056f97/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=f7b2098e1c4f8e13ec2194f7f094f471b4056f97", "patch": "@@ -1,3 +1,4 @@\n+use crate::methods::contains_return;\n use crate::utils::{\n     in_macro, is_type_diagnostic_item, match_qpath, paths, return_ty, snippet, span_lint_and_then,\n     visitors::find_all_ret_expressions,\n@@ -95,6 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n                 if let ExprKind::Path(ref qpath) = func.kind;\n                 if match_qpath(qpath, path);\n                 if args.len() == 1;\n+                if !contains_return(&args[0]);\n                 then {\n                     suggs.push((ret_expr.span, snippet(cx, args[0].span.source_callsite(), \"..\").to_string()));\n                     true"}, {"sha": "a4570098d7167da8393f6c4933d20cf277be8962", "filename": "tests/ui/unnecessary_wraps.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f7b2098e1c4f8e13ec2194f7f094f471b4056f97/tests%2Fui%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b2098e1c4f8e13ec2194f7f094f471b4056f97/tests%2Fui%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wraps.rs?ref=f7b2098e1c4f8e13ec2194f7f094f471b4056f97", "patch": "@@ -109,6 +109,13 @@ impl B for A {\n     }\n }\n \n+fn issue_6384(s: &str) -> Option<&str> {\n+    Some(match s {\n+        \"a\" => \"A\",\n+        _ => return None,\n+    })\n+}\n+\n fn main() {\n     // method calls are not linted\n     func1(true, true);"}]}