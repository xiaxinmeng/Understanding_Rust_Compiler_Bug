{"sha": "11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZTljNDgzNTNhNmZjYmZkMDM2ZTVlZTU4YjFkNGI1ZjU3MmQ3ZWI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-06T03:50:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-11T07:13:41Z"}, "message": "Flag unsafe blocks from format! as compiler-generated", "tree": {"sha": "0fe567f92d372b3d756a9e935ca35a82fee514bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fe567f92d372b3d756a9e935ca35a82fee514bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb", "html_url": "https://github.com/rust-lang/rust/commit/11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19a6fabad8e43a81617182eba24fb80e33da8e52", "url": "https://api.github.com/repos/rust-lang/rust/commits/19a6fabad8e43a81617182eba24fb80e33da8e52", "html_url": "https://github.com/rust-lang/rust/commit/19a6fabad8e43a81617182eba24fb80e33da8e52"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "da181ff2eb6b60a1e1718e65e9bfe8887129dd42", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb", "patch": "@@ -1133,8 +1133,9 @@ impl Visitor<@mut Context> for UnusedUnsafeLintVisitor {\n             match e.node {\n                 // Don't warn about generated blocks, that'll just pollute the\n                 // output.\n-                ast::ExprBlock(ref blk) if blk.rules == ast::UnsafeBlock(false) => {\n-                    if !cx.tcx.used_unsafe.contains(&blk.id) {\n+                ast::ExprBlock(ref blk) => {\n+                    if blk.rules == ast::UnsafeBlock(ast::UserProvided) &&\n+                       !cx.tcx.used_unsafe.contains(&blk.id) {\n                         cx.span_lint(unused_unsafe, blk.span,\n                                      \"unnecessary `unsafe` block\");\n                     }"}, {"sha": "ef2e557b6ea6dcd28b336f9435d72fedcd26a9e7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb", "patch": "@@ -479,7 +479,13 @@ pub struct Field {\n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub enum BlockCheckMode {\n     DefaultBlock,\n-    UnsafeBlock(/* generated internally */ bool),\n+    UnsafeBlock(UnsafeSource),\n+}\n+\n+#[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n+pub enum UnsafeSource {\n+    CompilerGenerated,\n+    UserProvided,\n }\n \n #[deriving(Clone, Eq, Encodable, Decodable,IterBytes)]"}, {"sha": "486069db4f0c4f4f85809b379c0b2c57b969b537", "filename": "src/libsyntax/ext/ifmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb/src%2Flibsyntax%2Fext%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb/src%2Flibsyntax%2Fext%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fifmt.rs?ref=11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb", "patch": "@@ -632,7 +632,7 @@ impl Context {\n            stmts: ~[],\n            expr: Some(result),\n            id: ast::DUMMY_NODE_ID,\n-           rules: ast::UnsafeBlock,\n+           rules: ast::UnsafeBlock(ast::CompilerGenerated),\n            span: self.fmtsp,\n         });\n "}, {"sha": "b5772a9eede2de0952644ac42a37da3be7bb491c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb", "patch": "@@ -1792,7 +1792,7 @@ impl Parser {\n         } else if self.eat_keyword(keywords::Match) {\n             return self.parse_match_expr();\n         } else if self.eat_keyword(keywords::Unsafe) {\n-            return self.parse_block_expr(lo, UnsafeBlock(false));\n+            return self.parse_block_expr(lo, UnsafeBlock(ast::UserProvided));\n         } else if *self.token == token::LBRACKET {\n             self.bump();\n             let mutbl = self.parse_mutability();"}, {"sha": "ab66bfc101110346f444d9eaa58578943ccb8262", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=11e9c48353a6fcbfd036e5ee58b1d4b5f572d7eb", "patch": "@@ -10,6 +10,8 @@\n \n // xfail-fast: check-fast screws up repr paths\n \n+#[deny(warnings)];\n+\n use std::fmt;\n \n struct A;\n@@ -226,6 +228,13 @@ pub fn main() {\n     let a = ~3;\n     format!(\"{:?}\", a);\n     format!(\"{:?}\", a);\n+\n+    // make sure that format! doesn't cause spurious unused-unsafe warnings when\n+    // it's inside of an outer unsafe block\n+    unsafe {\n+        let a: int = ::std::cast::transmute(3u);\n+        format!(\"{}\", a);\n+    }\n }\n \n // Basic test to make sure that we can invoke the `write!` macro with an"}]}