{"sha": "fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYTMyZjFiNzc1YjNmMzdmYzRhYmZhNjM5MWMxYmViZTQ4YWY5ZDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-01T11:26:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-01T11:26:24Z"}, "message": "Auto merge of #53604 - oli-obk:min_const_fn, r=Centril,varkor\n\nImplement the `min_const_fn` feature gate\n\ncc @RalfJung @eddyb\n\nr? @Centril\n\nimplements the feature gate for #53555\n\nI added a hack so the `const_fn` feature gate also enables the `min_const_fn` feature gate. This ensures that nightly users of `const_fn` don't have to touch their code at all.\n\nThe `min_const_fn` checks are run first, and if they succeeded, the `const_fn` checks are run additionally to ensure we didn't miss anything.", "tree": {"sha": "ab51afef12f740e9b7e2ffd7595ce0869c7e45a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab51afef12f740e9b7e2ffd7595ce0869c7e45a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "html_url": "https://github.com/rust-lang/rust/commit/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6381a7f37402dd5f346256b3773ae2e72853fc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6381a7f37402dd5f346256b3773ae2e72853fc3", "html_url": "https://github.com/rust-lang/rust/commit/e6381a7f37402dd5f346256b3773ae2e72853fc3"}, {"sha": "2839f4f0e8d58c295e146999961b78e2cc47354f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2839f4f0e8d58c295e146999961b78e2cc47354f", "html_url": "https://github.com/rust-lang/rust/commit/2839f4f0e8d58c295e146999961b78e2cc47354f"}], "stats": {"total": 1992, "additions": 1713, "deletions": 279}, "files": [{"sha": "452d2b1472ff4a2fb8d9b29e7097ae6da75700fb", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -88,7 +88,8 @@\n #![feature(box_syntax)]\n #![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n-#![feature(const_fn)]\n+#![cfg_attr(stage0, feature(const_fn))]\n+#![cfg_attr(not(stage0), feature(min_const_fn))]\n #![feature(core_intrinsics)]\n #![feature(custom_attribute)]\n #![feature(dropck_eyepatch)]"}, {"sha": "710c659ac53962b18c1b6bb4bf75900171ac9fca", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -11,7 +11,8 @@\n #![feature(allocator_api)]\n #![feature(alloc_system)]\n #![feature(box_syntax)]\n-#![feature(const_fn)]\n+#![cfg_attr(stage0, feature(const_fn))]\n+#![cfg_attr(not(stage0), feature(min_const_fn))]\n #![feature(drain_filter)]\n #![feature(exact_size_is_empty)]\n #![feature(pattern)]"}, {"sha": "e00a22bf8b6c360674bcd3ec5da5573e49cb0cf6", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -285,6 +285,15 @@ pub fn forget<T>(t: T) {\n /// [alignment]: ./fn.align_of.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(not(stage0))]\n+pub const fn size_of<T>() -> usize {\n+    intrinsics::size_of::<T>()\n+}\n+\n+#[inline]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(stage0)]\n+/// Ceci n'est pas la documentation\n pub const fn size_of<T>() -> usize {\n     unsafe { intrinsics::size_of::<T>() }\n }\n@@ -334,6 +343,16 @@ pub fn size_of_val<T: ?Sized>(val: &T) -> usize {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(reason = \"use `align_of` instead\", since = \"1.2.0\")]\n+#[cfg(not(stage0))]\n+pub fn min_align_of<T>() -> usize {\n+    intrinsics::min_align_of::<T>()\n+}\n+\n+#[inline]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(reason = \"use `align_of` instead\", since = \"1.2.0\")]\n+#[cfg(stage0)]\n+/// Ceci n'est pas la documentation\n pub fn min_align_of<T>() -> usize {\n     unsafe { intrinsics::min_align_of::<T>() }\n }\n@@ -376,6 +395,15 @@ pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(not(stage0))]\n+pub const fn align_of<T>() -> usize {\n+    intrinsics::min_align_of::<T>()\n+}\n+\n+#[inline]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(stage0)]\n+/// Ceci n'est pas la documentation\n pub const fn align_of<T>() -> usize {\n     unsafe { intrinsics::min_align_of::<T>() }\n }"}, {"sha": "f11e4487964624d74ce17abd7aa57a3d0b0846e9", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -65,6 +65,7 @@ for mir::UnsafetyViolationKind {\n \n         match *self {\n             mir::UnsafetyViolationKind::General => {}\n+            mir::UnsafetyViolationKind::MinConstFn => {}\n             mir::UnsafetyViolationKind::ExternStatic(lint_node_id) |\n             mir::UnsafetyViolationKind::BorrowPacked(lint_node_id) => {\n                 lint_node_id.hash_stable(hcx, hasher);"}, {"sha": "a15411c7d83698c115b8bb5dc8f8a5531e22a0ae", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -130,7 +130,7 @@ impl_stable_hash_for!(struct ::syntax::attr::Stability {\n     level,\n     feature,\n     rustc_depr,\n-    rustc_const_unstable\n+    const_stability\n });\n \n impl<'a> HashStable<StableHashingContext<'a>>\n@@ -161,7 +161,6 @@ for ::syntax::attr::StabilityLevel {\n }\n \n impl_stable_hash_for!(struct ::syntax::attr::RustcDeprecation { since, reason });\n-impl_stable_hash_for!(struct ::syntax::attr::RustcConstUnstable { feature });\n \n \n impl_stable_hash_for!(enum ::syntax::attr::IntType {"}, {"sha": "d79281666d63914e7f137927c04100b96ec02368", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -42,7 +42,8 @@\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(const_fn)]\n+#![cfg_attr(stage0, feature(const_fn))]\n+#![cfg_attr(not(stage0), feature(min_const_fn))]\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n #![cfg_attr(windows, feature(libc))]"}, {"sha": "f237c5b397bd5263722c7ab089f0760ac12a605f", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -440,7 +440,7 @@ impl<'a, 'tcx> Index<'tcx> {\n                     },\n                     feature: Symbol::intern(\"rustc_private\"),\n                     rustc_depr: None,\n-                    rustc_const_unstable: None,\n+                    const_stability: None,\n                 });\n                 annotator.parent_stab = Some(stability);\n             }"}, {"sha": "44730c19dd3e8a52a5e5bd0002ce6d934f15c7fb", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -2430,6 +2430,8 @@ impl Location {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum UnsafetyViolationKind {\n     General,\n+    /// unsafety is not allowed at all in min const fn\n+    MinConstFn,\n     ExternStatic(ast::NodeId),\n     BorrowPacked(ast::NodeId),\n }"}, {"sha": "6981d92f05f00cf9ec4c96acf9e99d4adccf19e9", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -1099,6 +1099,37 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         local as usize == global as usize\n     }\n \n+    /// Returns true if this function must conform to `min_const_fn`\n+    pub fn is_min_const_fn(self, def_id: DefId) -> bool {\n+        if self.features().staged_api {\n+            // some intrinsics are waved through if called inside the\n+            // standard library. Users never need to call them directly\n+            if let abi::Abi::RustIntrinsic = self.fn_sig(def_id).abi() {\n+                assert!(!self.is_const_fn(def_id));\n+                match &self.item_name(def_id).as_str()[..] {\n+                    | \"size_of\"\n+                    | \"min_align_of\"\n+                    => return true,\n+                    _ => {},\n+                }\n+            }\n+            // in order for a libstd function to be considered min_const_fn\n+            // it needs to be stable and have no `rustc_const_unstable` attribute\n+            match self.lookup_stability(def_id) {\n+                // stable functions with unstable const fn aren't `min_const_fn`\n+                Some(&attr::Stability { const_stability: Some(_), .. }) => false,\n+                // unstable functions don't need to conform\n+                Some(&attr::Stability { ref level, .. }) if level.is_unstable() => false,\n+                // everything else needs to conform, because it would be callable from\n+                // other `min_const_fn` functions\n+                _ => true,\n+            }\n+        } else {\n+            // users enabling the `const_fn` can do what they want\n+            !self.sess.features_untracked().const_fn\n+        }\n+    }\n+\n     /// Create a type context and call the closure with a `TyCtxt` reference\n     /// to the context. The closure enforces that the type context and any interned\n     /// value (types, substs, etc.) can only be used while `ty::tls` has a valid"}, {"sha": "b4257a40e38af0dd0ea3ff3de467b5d4cd080ca6", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -18,7 +18,6 @@ use hair::*;\n \n use rustc_data_structures::indexed_vec::Idx;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc::hir::map::blocks::FnLikeNode;\n use rustc::hir::Node;\n use rustc::middle::region;\n use rustc::infer::InferCtxt;\n@@ -67,10 +66,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         let constness = match body_owner_kind {\n             hir::BodyOwnerKind::Const |\n             hir::BodyOwnerKind::Static(_) => hir::Constness::Const,\n-            hir::BodyOwnerKind::Fn => {\n-                let fn_like = FnLikeNode::from_node(infcx.tcx.hir.get(src_id));\n-                fn_like.map_or(hir::Constness::NotConst, |f| f.constness())\n-            }\n+            hir::BodyOwnerKind::Fn => hir::Constness::NotConst,\n         };\n \n         let attrs = tcx.hir.attrs(src_id);\n@@ -83,7 +79,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         // Respect -C overflow-checks.\n         check_overflow |= tcx.sess.overflow_checks();\n \n-        // Constants and const fn's always need overflow checks.\n+        // Constants always need overflow checks.\n         check_overflow |= constness == hir::Constness::Const;\n \n         let lint_level = lint_level_for_hir_id(tcx, src_id);"}, {"sha": "6f087221b80242629502d381742701024708549c", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -23,7 +23,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n-#![feature(const_fn)]\n #![feature(core_intrinsics)]\n #![feature(decl_macro)]\n #![cfg_attr(stage0, feature(macro_vis_matcher))]"}, {"sha": "ec7fd371a442bb8ca406751b2953587379eb3173", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -28,6 +28,7 @@ use util;\n \n pub struct UnsafetyChecker<'a, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n+    min_const_fn: bool,\n     source_scope_local_data: &'a IndexVec<SourceScope, SourceScopeLocalData>,\n     violations: Vec<UnsafetyViolation>,\n     source_info: SourceInfo,\n@@ -38,12 +39,16 @@ pub struct UnsafetyChecker<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> UnsafetyChecker<'a, 'tcx> {\n-    fn new(mir: &'a Mir<'tcx>,\n-           source_scope_local_data: &'a IndexVec<SourceScope, SourceScopeLocalData>,\n-           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-           param_env: ty::ParamEnv<'tcx>) -> Self {\n+    fn new(\n+        min_const_fn: bool,\n+        mir: &'a Mir<'tcx>,\n+        source_scope_local_data: &'a IndexVec<SourceScope, SourceScopeLocalData>,\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> Self {\n         Self {\n             mir,\n+            min_const_fn,\n             source_scope_local_data,\n             violations: vec![],\n             source_info: SourceInfo {\n@@ -269,14 +274,22 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn register_violations(&mut self,\n                            violations: &[UnsafetyViolation],\n                            unsafe_blocks: &[(ast::NodeId, bool)]) {\n+        if self.min_const_fn {\n+            for violation in violations {\n+                let mut violation = violation.clone();\n+                violation.kind = UnsafetyViolationKind::MinConstFn;\n+                if !self.violations.contains(&violation) {\n+                    self.violations.push(violation)\n+                }\n+            }\n+        }\n         let within_unsafe = match self.source_scope_local_data[self.source_info.scope].safety {\n             Safety::Safe => {\n                 for violation in violations {\n                     if !self.violations.contains(violation) {\n                         self.violations.push(violation.clone())\n                     }\n                 }\n-\n                 false\n             }\n             Safety::BuiltinUnsafe | Safety::FnUnsafe => true,\n@@ -369,6 +382,7 @@ fn unsafety_check_result<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n \n     let param_env = tcx.param_env(def_id);\n     let mut checker = UnsafetyChecker::new(\n+        tcx.is_const_fn(def_id) && tcx.is_min_const_fn(def_id),\n         mir, source_scope_local_data, tcx, param_env);\n     checker.visit_mir(mir);\n \n@@ -478,6 +492,15 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n                     .note(&details.as_str()[..])\n                     .emit();\n             }\n+            UnsafetyViolationKind::MinConstFn => {\n+                tcx.sess.struct_span_err(\n+                    source_info.span,\n+                    &format!(\"{} is unsafe and unsafe operations \\\n+                            are not allowed in const fn\", description))\n+                    .span_label(source_info.span, &description.as_str()[..])\n+                    .note(&details.as_str()[..])\n+                    .emit();\n+            }\n             UnsafetyViolationKind::ExternStatic(lint_node_id) => {\n                 tcx.lint_node_note(SAFE_EXTERN_STATICS,\n                               lint_node_id,"}, {"sha": "1e05b07030ef898436f6740b9ebce4076a11d749", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -36,6 +36,7 @@ pub mod elaborate_drops;\n pub mod add_call_guards;\n pub mod promote_consts;\n pub mod qualify_consts;\n+mod qualify_min_const_fn;\n pub mod remove_noop_landing_pads;\n pub mod dump_mir;\n pub mod deaggregator;"}, {"sha": "0d24286869e6fb3b274b85ca968cc561312a14c1", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -917,9 +917,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                         );\n                     }\n                 } else if let Some(&attr::Stability {\n-                    rustc_const_unstable: Some(attr::RustcConstUnstable {\n-                        feature: ref feature_name\n-                    }),\n+                    const_stability: Some(ref feature_name),\n                 .. }) = self.tcx.lookup_stability(def_id) {\n                     if\n                         // feature-gate is not enabled,\n@@ -1173,8 +1171,20 @@ impl MirPass for QualifyAndPromoteConstants {\n             let (temps, candidates) = {\n                 let mut qualifier = Qualifier::new(tcx, def_id, mir, mode);\n                 if mode == Mode::ConstFn {\n-                    // Enforce a constant-like CFG for `const fn`.\n-                    qualifier.qualify_const();\n+                    if tcx.is_min_const_fn(def_id) {\n+                        // enforce `min_const_fn` for stable const fns\n+                        use super::qualify_min_const_fn::is_min_const_fn;\n+                        if let Err((span, err)) = is_min_const_fn(tcx, def_id, mir) {\n+                            tcx.sess.span_err(span, &err);\n+                        } else {\n+                            // this should not produce any errors, but better safe than sorry\n+                            // FIXME(#53819)\n+                            qualifier.qualify_const();\n+                        }\n+                    } else {\n+                        // Enforce a constant-like CFG for `const fn`.\n+                        qualifier.qualify_const();\n+                    }\n                 } else {\n                     while let Some((bb, data)) = qualifier.rpo.next() {\n                         qualifier.visit_basic_block_data(bb, data);"}, {"sha": "56e32ea5d1a23b3eb71ab6c147e182fb1370b856", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "added", "additions": 358, "deletions": 0, "changes": 358, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -0,0 +1,358 @@\n+use rustc::hir::def_id::DefId;\n+use rustc::hir;\n+use rustc::mir::*;\n+use rustc::ty::{self, Predicate, TyCtxt};\n+use std::borrow::Cow;\n+use syntax_pos::Span;\n+\n+type McfResult = Result<(), (Span, Cow<'static, str>)>;\n+\n+pub fn is_min_const_fn(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    def_id: DefId,\n+    mir: &'a Mir<'tcx>,\n+) -> McfResult {\n+    let mut current = def_id;\n+    loop {\n+        let predicates = tcx.predicates_of(current);\n+        for predicate in &predicates.predicates {\n+            match predicate {\n+                | Predicate::RegionOutlives(_)\n+                | Predicate::TypeOutlives(_)\n+                | Predicate::WellFormed(_)\n+                | Predicate::ConstEvaluatable(..) => continue,\n+                | Predicate::ObjectSafe(_) => {\n+                    bug!(\"object safe predicate on function: {:#?}\", predicate)\n+                }\n+                Predicate::ClosureKind(..) => {\n+                    bug!(\"closure kind predicate on function: {:#?}\", predicate)\n+                }\n+                Predicate::Subtype(_) => bug!(\"subtype predicate on function: {:#?}\", predicate),\n+                Predicate::Projection(_) => {\n+                    let span = tcx.def_span(current);\n+                    // we'll hit a `Predicate::Trait` later which will report an error\n+                    tcx.sess\n+                        .delay_span_bug(span, \"projection without trait bound\");\n+                    continue;\n+                }\n+                Predicate::Trait(pred) => {\n+                    if Some(pred.def_id()) == tcx.lang_items().sized_trait() {\n+                        continue;\n+                    }\n+                    match pred.skip_binder().self_ty().sty {\n+                        ty::Param(ref p) => {\n+                            let generics = tcx.generics_of(current);\n+                            let def = generics.type_param(p, tcx);\n+                            let span = tcx.def_span(def.def_id);\n+                            return Err((\n+                                span,\n+                                \"trait bounds other than `Sized` \\\n+                                 on const fn parameters are unstable\"\n+                                    .into(),\n+                            ));\n+                        }\n+                        // other kinds of bounds are either tautologies\n+                        // or cause errors in other passes\n+                        _ => continue,\n+                    }\n+                }\n+            }\n+        }\n+        match predicates.parent {\n+            Some(parent) => current = parent,\n+            None => break,\n+        }\n+    }\n+\n+    for local in mir.vars_iter() {\n+        return Err((\n+            mir.local_decls[local].source_info.span,\n+            \"local variables in const fn are unstable\".into(),\n+        ));\n+    }\n+    for local in &mir.local_decls {\n+        check_ty(tcx, local.ty, local.source_info.span)?;\n+    }\n+    // impl trait is gone in MIR, so check the return type manually\n+    check_ty(\n+        tcx,\n+        tcx.fn_sig(def_id).output().skip_binder(),\n+        mir.local_decls.iter().next().unwrap().source_info.span,\n+    )?;\n+\n+    for bb in mir.basic_blocks() {\n+        check_terminator(tcx, mir, bb.terminator())?;\n+        for stmt in &bb.statements {\n+            check_statement(tcx, mir, stmt)?;\n+        }\n+    }\n+    Ok(())\n+}\n+\n+fn check_ty(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    ty: ty::Ty<'tcx>,\n+    span: Span,\n+) -> McfResult {\n+    for ty in ty.walk() {\n+        match ty.sty {\n+            ty::Ref(_, _, hir::Mutability::MutMutable) => return Err((\n+                span,\n+                \"mutable references in const fn are unstable\".into(),\n+            )),\n+            ty::Anon(..) => return Err((span, \"`impl Trait` in const fn is unstable\".into())),\n+            ty::FnPtr(..) => {\n+                return Err((span, \"function pointers in const fn are unstable\".into()))\n+            }\n+            ty::Dynamic(preds, _) => {\n+                for pred in preds.iter() {\n+                    match pred.skip_binder() {\n+                        | ty::ExistentialPredicate::AutoTrait(_)\n+                        | ty::ExistentialPredicate::Projection(_) => {\n+                            return Err((\n+                                span,\n+                                \"trait bounds other than `Sized` \\\n+                                 on const fn parameters are unstable\"\n+                                    .into(),\n+                            ))\n+                        }\n+                        ty::ExistentialPredicate::Trait(trait_ref) => {\n+                            if Some(trait_ref.def_id) != tcx.lang_items().sized_trait() {\n+                                return Err((\n+                                    span,\n+                                    \"trait bounds other than `Sized` \\\n+                                     on const fn parameters are unstable\"\n+                                        .into(),\n+                                ));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+    Ok(())\n+}\n+\n+fn check_rvalue(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    mir: &'a Mir<'tcx>,\n+    rvalue: &Rvalue<'tcx>,\n+    span: Span,\n+) -> McfResult {\n+    match rvalue {\n+        Rvalue::Repeat(operand, _) | Rvalue::Use(operand) => {\n+            check_operand(tcx, mir, operand, span)\n+        }\n+        Rvalue::Len(place) | Rvalue::Discriminant(place) | Rvalue::Ref(_, _, place) => {\n+            check_place(tcx, mir, place, span, PlaceMode::Read)\n+        }\n+        Rvalue::Cast(_, operand, cast_ty) => {\n+            use rustc::ty::cast::CastTy;\n+            let cast_in = CastTy::from_ty(operand.ty(mir, tcx)).expect(\"bad input type for cast\");\n+            let cast_out = CastTy::from_ty(cast_ty).expect(\"bad output type for cast\");\n+            match (cast_in, cast_out) {\n+                (CastTy::Ptr(_), CastTy::Int(_)) | (CastTy::FnPtr, CastTy::Int(_)) => Err((\n+                    span,\n+                    \"casting pointers to ints is unstable in const fn\".into(),\n+                )),\n+                (CastTy::RPtr(_), CastTy::Float) => bug!(),\n+                (CastTy::RPtr(_), CastTy::Int(_)) => bug!(),\n+                (CastTy::Ptr(_), CastTy::RPtr(_)) => bug!(),\n+                _ => check_operand(tcx, mir, operand, span),\n+            }\n+        }\n+        // binops are fine on integers\n+        Rvalue::BinaryOp(_, lhs, rhs) | Rvalue::CheckedBinaryOp(_, lhs, rhs) => {\n+            check_operand(tcx, mir, lhs, span)?;\n+            check_operand(tcx, mir, rhs, span)?;\n+            let ty = lhs.ty(mir, tcx);\n+            if ty.is_integral() || ty.is_bool() || ty.is_char() {\n+                Ok(())\n+            } else {\n+                Err((\n+                    span,\n+                    \"only int, `bool` and `char` operations are stable in const fn\".into(),\n+                ))\n+            }\n+        }\n+        // checked by regular const fn checks\n+        Rvalue::NullaryOp(..) => Ok(()),\n+        Rvalue::UnaryOp(_, operand) => {\n+            let ty = operand.ty(mir, tcx);\n+            if ty.is_integral() || ty.is_bool() {\n+                check_operand(tcx, mir, operand, span)\n+            } else {\n+                Err((\n+                    span,\n+                    \"only int and `bool` operations are stable in const fn\".into(),\n+                ))\n+            }\n+        }\n+        Rvalue::Aggregate(_, operands) => {\n+            for operand in operands {\n+                check_operand(tcx, mir, operand, span)?;\n+            }\n+            Ok(())\n+        }\n+    }\n+}\n+\n+enum PlaceMode {\n+    Assign,\n+    Read,\n+}\n+\n+fn check_statement(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    mir: &'a Mir<'tcx>,\n+    statement: &Statement<'tcx>,\n+) -> McfResult {\n+    let span = statement.source_info.span;\n+    match &statement.kind {\n+        StatementKind::Assign(place, rval) => {\n+            check_place(tcx, mir, place, span, PlaceMode::Assign)?;\n+            check_rvalue(tcx, mir, rval, span)\n+        }\n+\n+        StatementKind::ReadForMatch(_) => Err((span, \"match in const fn is unstable\".into())),\n+\n+        // just an assignment\n+        StatementKind::SetDiscriminant { .. } => Ok(()),\n+\n+        | StatementKind::InlineAsm { .. } => {\n+            Err((span, \"cannot use inline assembly in const fn\".into()))\n+        }\n+\n+        // These are all NOPs\n+        | StatementKind::StorageLive(_)\n+        | StatementKind::StorageDead(_)\n+        | StatementKind::Validate(..)\n+        | StatementKind::EndRegion(_)\n+        | StatementKind::UserAssertTy(..)\n+        | StatementKind::Nop => Ok(()),\n+    }\n+}\n+\n+fn check_operand(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    mir: &'a Mir<'tcx>,\n+    operand: &Operand<'tcx>,\n+    span: Span,\n+) -> McfResult {\n+    match operand {\n+        Operand::Move(place) | Operand::Copy(place) => {\n+            check_place(tcx, mir, place, span, PlaceMode::Read)\n+        }\n+        Operand::Constant(_) => Ok(()),\n+    }\n+}\n+\n+fn check_place(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    mir: &'a Mir<'tcx>,\n+    place: &Place<'tcx>,\n+    span: Span,\n+    mode: PlaceMode,\n+) -> McfResult {\n+    match place {\n+        Place::Local(l) => match mode {\n+            PlaceMode::Assign => match mir.local_kind(*l) {\n+                LocalKind::Temp | LocalKind::ReturnPointer => Ok(()),\n+                LocalKind::Arg | LocalKind::Var => {\n+                    Err((span, \"assignments in const fn are unstable\".into()))\n+                }\n+            },\n+            PlaceMode::Read => Ok(()),\n+        },\n+        // promoteds are always fine, they are essentially constants\n+        Place::Promoted(_) => Ok(()),\n+        Place::Static(_) => Err((span, \"cannot access `static` items in const fn\".into())),\n+        Place::Projection(proj) => {\n+            match proj.elem {\n+                | ProjectionElem::Deref | ProjectionElem::Field(..) | ProjectionElem::Index(_) => {\n+                    check_place(tcx, mir, &proj.base, span, mode)\n+                }\n+                // slice patterns are unstable\n+                | ProjectionElem::ConstantIndex { .. } | ProjectionElem::Subslice { .. } => {\n+                    return Err((span, \"slice patterns in const fn are unstable\".into()))\n+                }\n+                | ProjectionElem::Downcast(..) => {\n+                    Err((span, \"`match` or `if let` in `const fn` is unstable\".into()))\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn check_terminator(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    mir: &'a Mir<'tcx>,\n+    terminator: &Terminator<'tcx>,\n+) -> McfResult {\n+    let span = terminator.source_info.span;\n+    match &terminator.kind {\n+        | TerminatorKind::Goto { .. }\n+        | TerminatorKind::Return\n+        | TerminatorKind::Resume => Ok(()),\n+\n+        TerminatorKind::Drop { location, .. } => {\n+            check_place(tcx, mir, location, span, PlaceMode::Read)\n+        }\n+        TerminatorKind::DropAndReplace { location, value, .. } => {\n+            check_place(tcx, mir, location, span, PlaceMode::Read)?;\n+            check_operand(tcx, mir, value, span)\n+        },\n+        TerminatorKind::SwitchInt { .. } => Err((\n+            span,\n+            \"`if`, `match`, `&&` and `||` are not stable in const fn\".into(),\n+        )),\n+        | TerminatorKind::Abort | TerminatorKind::Unreachable => {\n+            Err((span, \"const fn with unreachable code is not stable\".into()))\n+        }\n+        | TerminatorKind::GeneratorDrop | TerminatorKind::Yield { .. } => {\n+            Err((span, \"const fn generators are unstable\".into()))\n+        }\n+\n+        TerminatorKind::Call {\n+            func,\n+            args,\n+            destination: _,\n+            cleanup: _,\n+        } => {\n+            let fn_ty = func.ty(mir, tcx);\n+            if let ty::FnDef(def_id, _) = fn_ty.sty {\n+                if tcx.is_min_const_fn(def_id) {\n+                    check_operand(tcx, mir, func, span)?;\n+\n+                    for arg in args {\n+                        check_operand(tcx, mir, arg, span)?;\n+                    }\n+                    Ok(())\n+                } else {\n+                    Err((\n+                        span,\n+                        \"can only call other `min_const_fn` within a `min_const_fn`\".into(),\n+                    ))\n+                }\n+            } else {\n+                Err((span, \"can only call other const fns within const fn\".into()))\n+            }\n+        }\n+\n+        TerminatorKind::Assert {\n+            cond,\n+            expected: _,\n+            msg: _,\n+            target: _,\n+            cleanup: _,\n+        } => check_operand(tcx, mir, cond, span),\n+\n+        | TerminatorKind::FalseEdges { .. } | TerminatorKind::FalseUnwind { .. } => span_bug!(\n+            terminator.source_info.span,\n+            \"min_const_fn encountered `{:#?}`\",\n+            terminator\n+        ),\n+    }\n+}"}, {"sha": "4a091a96ce465b9cb6e092710ea034b625a8438e", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -178,9 +178,7 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n         }\n \n         if let Some(&attr::Stability {\n-            rustc_const_unstable: Some(attr::RustcConstUnstable {\n-                                           feature: ref feature_name\n-                                       }),\n+            const_stability: Some(ref feature_name),\n             .. }) = self.tcx.lookup_stability(def_id) {\n             let stable_check =\n                 // feature-gate is enabled,"}, {"sha": "e4d958e3b6f3520e84ae3a76b6f6fa098a65fc25", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -22,7 +22,8 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(box_syntax)]\n-#![feature(const_fn)]\n+#![cfg_attr(stage0, feature(const_fn))]\n+#![cfg_attr(not(stage0), feature(min_const_fn))]\n #![cfg_attr(not(stage0), feature(nll))]\n #![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(slice_patterns)]"}, {"sha": "c7db3debf5a0d6dfacd6b276249715e1202d0a95", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -26,12 +26,15 @@ use rustc::hir;\n \n use std::iter;\n \n-fn equate_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                   it: &hir::ForeignItem,\n-                                   n_tps: usize,\n-                                   abi: Abi,\n-                                   inputs: Vec<Ty<'tcx>>,\n-                                   output: Ty<'tcx>) {\n+fn equate_intrinsic_type<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    it: &hir::ForeignItem,\n+    n_tps: usize,\n+    abi: Abi,\n+    safety: hir::Unsafety,\n+    inputs: Vec<Ty<'tcx>>,\n+    output: Ty<'tcx>,\n+) {\n     let def_id = tcx.hir.local_def_id(it.id);\n \n     match it.node {\n@@ -65,7 +68,7 @@ fn equate_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         inputs.into_iter(),\n         output,\n         false,\n-        hir::Unsafety::Unsafe,\n+        safety,\n         abi\n     )));\n     let cause = ObligationCause::new(it.span, it.id, ObligationCauseCode::IntrinsicType);\n@@ -78,7 +81,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                       it: &hir::ForeignItem) {\n     let param = |n| tcx.mk_ty_param(n, Symbol::intern(&format!(\"P{}\", n)).as_interned_str());\n     let name = it.name.as_str();\n-    let (n_tps, inputs, output) = if name.starts_with(\"atomic_\") {\n+    let (n_tps, inputs, output, unsafety) = if name.starts_with(\"atomic_\") {\n         let split : Vec<&str> = name.split('_').collect();\n         assert!(split.len() >= 2, \"Atomic intrinsic not correct format\");\n \n@@ -109,10 +112,14 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 return;\n             }\n         };\n-        (n_tps, inputs, output)\n+        (n_tps, inputs, output, hir::Unsafety::Unsafe)\n     } else if &name[..] == \"abort\" || &name[..] == \"unreachable\" {\n-        (0, Vec::new(), tcx.types.never)\n+        (0, Vec::new(), tcx.types.never, hir::Unsafety::Unsafe)\n     } else {\n+        let unsafety = match &name[..] {\n+            \"size_of\" | \"min_align_of\" => hir::Unsafety::Normal,\n+            _ => hir::Unsafety::Unsafe,\n+        };\n         let (n_tps, inputs, output) = match &name[..] {\n             \"breakpoint\" => (0, Vec::new(), tcx.mk_nil()),\n             \"size_of\" |\n@@ -327,9 +334,9 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 return;\n             }\n         };\n-        (n_tps, inputs, output)\n+        (n_tps, inputs, output, unsafety)\n     };\n-    equate_intrinsic_type(tcx, it, n_tps, Abi::RustIntrinsic, inputs, output)\n+    equate_intrinsic_type(tcx, it, n_tps, Abi::RustIntrinsic, unsafety, inputs, output)\n }\n \n /// Type-check `extern \"platform-intrinsic\" { ... }` functions.\n@@ -439,7 +446,7 @@ pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     };\n \n-    equate_intrinsic_type(tcx, it, n_tps, Abi::PlatformIntrinsic,\n+    equate_intrinsic_type(tcx, it, n_tps, Abi::PlatformIntrinsic, hir::Unsafety::Unsafe,\n                           inputs, output)\n }\n "}, {"sha": "b956c72b3a2da53c0d8fde1b847165a1a108b7ac", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -1981,12 +1981,15 @@ fn compute_sig_of_foreign_fn_decl<'a, 'tcx>(\n     decl: &hir::FnDecl,\n     abi: abi::Abi,\n ) -> ty::PolyFnSig<'tcx> {\n-    let fty = AstConv::ty_of_fn(\n-        &ItemCtxt::new(tcx, def_id),\n-        hir::Unsafety::Unsafe,\n-        abi,\n-        decl,\n-    );\n+    let unsafety = if abi == abi::Abi::RustIntrinsic {\n+        match &*tcx.item_name(def_id).as_str() {\n+            \"size_of\" | \"min_align_of\" => hir::Unsafety::Normal,\n+            _ => hir::Unsafety::Unsafe,\n+        }\n+    } else {\n+        hir::Unsafety::Unsafe\n+    };\n+    let fty = AstConv::ty_of_fn(&ItemCtxt::new(tcx, def_id), unsafety, abi, decl);\n \n     // feature gate SIMD types in FFI, since I (huonw) am not sure the\n     // ABIs are handled at all correctly."}, {"sha": "24965ff69318435e874eaad52f9dc8a1b58edcc3", "filename": "src/libstd/io/lazy.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibstd%2Fio%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibstd%2Fio%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Flazy.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -18,41 +18,39 @@ pub struct Lazy<T> {\n     // We never call `lock.init()`, so it is UB to attempt to acquire this mutex reentrantly!\n     lock: Mutex,\n     ptr: Cell<*mut Arc<T>>,\n-    init: fn() -> Arc<T>,\n }\n \n #[inline]\n const fn done<T>() -> *mut Arc<T> { 1_usize as *mut _ }\n \n unsafe impl<T> Sync for Lazy<T> {}\n \n-impl<T: Send + Sync + 'static> Lazy<T> {\n-    /// Safety: `init` must not call `get` on the variable that is being\n-    /// initialized.\n-    pub const unsafe fn new(init: fn() -> Arc<T>) -> Lazy<T> {\n+impl<T> Lazy<T> {\n+    pub const fn new() -> Lazy<T> {\n         Lazy {\n             lock: Mutex::new(),\n             ptr: Cell::new(ptr::null_mut()),\n-            init,\n         }\n     }\n+}\n \n-    pub fn get(&'static self) -> Option<Arc<T>> {\n-        unsafe {\n-            let _guard = self.lock.lock();\n-            let ptr = self.ptr.get();\n-            if ptr.is_null() {\n-                Some(self.init())\n-            } else if ptr == done() {\n-                None\n-            } else {\n-                Some((*ptr).clone())\n-            }\n+impl<T: Send + Sync + 'static> Lazy<T> {\n+    /// Safety: `init` must not call `get` on the variable that is being\n+    /// initialized.\n+    pub unsafe fn get(&'static self, init: fn() -> Arc<T>) -> Option<Arc<T>> {\n+        let _guard = self.lock.lock();\n+        let ptr = self.ptr.get();\n+        if ptr.is_null() {\n+            Some(self.init(init))\n+        } else if ptr == done() {\n+            None\n+        } else {\n+            Some((*ptr).clone())\n         }\n     }\n \n     // Must only be called with `lock` held\n-    unsafe fn init(&'static self) -> Arc<T> {\n+    unsafe fn init(&'static self, init: fn() -> Arc<T>) -> Arc<T> {\n         // If we successfully register an at exit handler, then we cache the\n         // `Arc` allocation in our own internal box (it will get deallocated by\n         // the at exit handler). Otherwise we just return the freshly allocated\n@@ -66,8 +64,8 @@ impl<T: Send + Sync + 'static> Lazy<T> {\n         });\n         // This could reentrantly call `init` again, which is a problem\n         // because our `lock` allows reentrancy!\n-        // That's why `new` is unsafe and requires the caller to ensure no reentrancy happens.\n-        let ret = (self.init)();\n+        // That's why `get` is unsafe and requires the caller to ensure no reentrancy happens.\n+        let ret = init();\n         if registered.is_ok() {\n             self.ptr.set(Box::into_raw(Box::new(ret.clone())));\n         }"}, {"sha": "a413432cdaabc6ba2b0075a2e10e161379ec7578", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -197,9 +197,11 @@ pub struct StdinLock<'a> {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stdin() -> Stdin {\n-    static INSTANCE: Lazy<Mutex<BufReader<Maybe<StdinRaw>>>> = unsafe { Lazy::new(stdin_init) };\n+    static INSTANCE: Lazy<Mutex<BufReader<Maybe<StdinRaw>>>> = Lazy::new();\n     return Stdin {\n-        inner: INSTANCE.get().expect(\"cannot access stdin during shutdown\"),\n+        inner: unsafe {\n+            INSTANCE.get(stdin_init).expect(\"cannot access stdin during shutdown\")\n+        },\n     };\n \n     fn stdin_init() -> Arc<Mutex<BufReader<Maybe<StdinRaw>>>> {\n@@ -396,10 +398,11 @@ pub struct StdoutLock<'a> {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stdout() -> Stdout {\n-    static INSTANCE: Lazy<ReentrantMutex<RefCell<LineWriter<Maybe<StdoutRaw>>>>>\n-        = unsafe { Lazy::new(stdout_init) };\n+    static INSTANCE: Lazy<ReentrantMutex<RefCell<LineWriter<Maybe<StdoutRaw>>>>> = Lazy::new();\n     return Stdout {\n-        inner: INSTANCE.get().expect(\"cannot access stdout during shutdown\"),\n+        inner: unsafe {\n+            INSTANCE.get(stdout_init).expect(\"cannot access stdout during shutdown\")\n+        },\n     };\n \n     fn stdout_init() -> Arc<ReentrantMutex<RefCell<LineWriter<Maybe<StdoutRaw>>>>> {\n@@ -533,10 +536,11 @@ pub struct StderrLock<'a> {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stderr() -> Stderr {\n-    static INSTANCE: Lazy<ReentrantMutex<RefCell<Maybe<StderrRaw>>>> =\n-        unsafe { Lazy::new(stderr_init) };\n+    static INSTANCE: Lazy<ReentrantMutex<RefCell<Maybe<StderrRaw>>>> = Lazy::new();\n     return Stderr {\n-        inner: INSTANCE.get().expect(\"cannot access stderr during shutdown\"),\n+        inner: unsafe {\n+            INSTANCE.get(stderr_init).expect(\"cannot access stderr during shutdown\")\n+        },\n     };\n \n     fn stderr_init() -> Arc<ReentrantMutex<RefCell<Maybe<StderrRaw>>>> {"}, {"sha": "e7195b3e21ee37c4ca3c60db1574bbd9be82ff57", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -250,7 +250,8 @@\n #![feature(cfg_target_vendor)]\n #![feature(char_error_internals)]\n #![feature(compiler_builtins_lib)]\n-#![feature(const_fn)]\n+#![cfg_attr(stage0, feature(const_fn))]\n+#![cfg_attr(not(stage0), feature(min_const_fn))]\n #![feature(const_int_ops)]\n #![feature(const_ip)]\n #![feature(core_intrinsics)]"}, {"sha": "ccf848a9be42057bff8cc695a62fb61bd565c04d", "filename": "src/libstd/sys/cloudabi/condvar.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibstd%2Fsys%2Fcloudabi%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibstd%2Fsys%2Fcloudabi%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fcondvar.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -28,11 +28,13 @@ pub struct Condvar {\n unsafe impl Send for Condvar {}\n unsafe impl Sync for Condvar {}\n \n+const NEW: Condvar = Condvar {\n+    condvar: UnsafeCell::new(AtomicU32::new(abi::CONDVAR_HAS_NO_WAITERS.0)),\n+};\n+\n impl Condvar {\n     pub const fn new() -> Condvar {\n-        Condvar {\n-            condvar: UnsafeCell::new(AtomicU32::new(abi::CONDVAR_HAS_NO_WAITERS.0)),\n-        }\n+        NEW\n     }\n \n     pub unsafe fn init(&mut self) {}"}, {"sha": "dc8624ec8a1b82800e2eb0dfa754007bec729635", "filename": "src/libstd/sys/cloudabi/rwlock.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibstd%2Fsys%2Fcloudabi%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibstd%2Fsys%2Fcloudabi%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Frwlock.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -32,11 +32,13 @@ pub unsafe fn raw(r: &RWLock) -> *mut AtomicU32 {\n unsafe impl Send for RWLock {}\n unsafe impl Sync for RWLock {}\n \n+const NEW: RWLock = RWLock {\n+    lock: UnsafeCell::new(AtomicU32::new(abi::LOCK_UNLOCKED.0)),\n+};\n+\n impl RWLock {\n     pub const fn new() -> RWLock {\n-        RWLock {\n-            lock: UnsafeCell::new(AtomicU32::new(abi::LOCK_UNLOCKED.0)),\n-        }\n+        NEW\n     }\n \n     pub unsafe fn try_read(&self) -> bool {"}, {"sha": "3eecdf14a4e50029eb62d7a161e310bcbd71f905", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -107,7 +107,11 @@ pub struct Stability {\n     pub level: StabilityLevel,\n     pub feature: Symbol,\n     pub rustc_depr: Option<RustcDeprecation>,\n-    pub rustc_const_unstable: Option<RustcConstUnstable>,\n+    /// `None` means the function is stable but needs to be allowed by the\n+    /// `min_const_fn` feature\n+    /// `Some` contains the feature gate required to be able to use the function\n+    /// as const fn\n+    pub const_stability: Option<Symbol>,\n }\n \n /// The available stability levels.\n@@ -141,11 +145,6 @@ pub struct RustcDeprecation {\n     pub reason: Symbol,\n }\n \n-#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Clone, Debug, Eq, Hash)]\n-pub struct RustcConstUnstable {\n-    pub feature: Symbol,\n-}\n-\n /// Check if `attrs` contains an attribute like `#![feature(feature_name)]`.\n /// This will not perform any \"sanity checks\" on the form of the attributes.\n pub fn contains_feature_attr(attrs: &[Attribute], feature_name: &str) -> bool {\n@@ -176,7 +175,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n \n     let mut stab: Option<Stability> = None;\n     let mut rustc_depr: Option<RustcDeprecation> = None;\n-    let mut rustc_const_unstable: Option<RustcConstUnstable> = None;\n+    let mut rustc_const_unstable: Option<Symbol> = None;\n \n     'outer: for attr in attrs_iter {\n         if ![\n@@ -191,6 +190,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n         mark_used(attr);\n \n         let meta = attr.meta();\n+        // attributes with data\n         if let Some(MetaItem { node: MetaItemKind::List(ref metas), .. }) = meta {\n             let meta = meta.as_ref().unwrap();\n             let get = |meta: &MetaItem, item: &mut Option<Symbol>| {\n@@ -272,9 +272,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n \n                     get_meta!(feature);\n                     if let Some(feature) = feature {\n-                        rustc_const_unstable = Some(RustcConstUnstable {\n-                            feature\n-                        });\n+                        rustc_const_unstable = Some(feature);\n                     } else {\n                         span_err!(diagnostic, attr.span(), E0629, \"missing 'feature'\");\n                         continue\n@@ -330,7 +328,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                                 },\n                                 feature,\n                                 rustc_depr: None,\n-                                rustc_const_unstable: None,\n+                                const_stability: None,\n                             })\n                         }\n                         (None, _, _) => {\n@@ -379,7 +377,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                                 },\n                                 feature,\n                                 rustc_depr: None,\n-                                rustc_const_unstable: None,\n+                                const_stability: None,\n                             })\n                         }\n                         (None, _) => {\n@@ -412,9 +410,9 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n     }\n \n     // Merge the const-unstable info into the stability info\n-    if let Some(rustc_const_unstable) = rustc_const_unstable {\n+    if let Some(feature) = rustc_const_unstable {\n         if let Some(ref mut stab) = stab {\n-            stab.rustc_const_unstable = Some(rustc_const_unstable);\n+            stab.const_stability = Some(feature);\n         } else {\n             span_err!(diagnostic, item_sp, E0630,\n                       \"rustc_const_unstable attribute must be paired with \\"}, {"sha": "19bbbceff5fc02f3d6ef9d8e5f7d8421efc3b0f5", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -15,7 +15,7 @@ mod builtin;\n pub use self::builtin::{\n     cfg_matches, contains_feature_attr, eval_condition, find_crate_name, find_deprecation,\n     find_repr_attrs, find_stability, find_unwind_attr, Deprecation, InlineAttr, IntType, ReprAttr,\n-    RustcConstUnstable, RustcDeprecation, Stability, StabilityLevel, UnwindAttr,\n+    RustcDeprecation, Stability, StabilityLevel, UnwindAttr,\n };\n pub use self::IntType::*;\n pub use self::ReprAttr::*;"}, {"sha": "f226c9dd979d44d0fcbcdfa505aac85b698cabe5", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -40,6 +40,16 @@ use symbol::{keywords, Symbol};\n use std::{env, path};\n \n macro_rules! set {\n+    // The const_fn feature also enables the min_const_fn feature, because `min_const_fn` allows\n+    // the declaration `const fn`, but the `const_fn` feature gate enables things inside those\n+    // functions that we do not want to expose to the user for now.\n+    (const_fn) => {{\n+        fn f(features: &mut Features, _: Span) {\n+            features.const_fn = true;\n+            features.min_const_fn = true;\n+        }\n+        f as fn(&mut Features, Span)\n+    }};\n     ($field: ident) => {{\n         fn f(features: &mut Features, _: Span) {\n             features.$field = true;\n@@ -206,25 +216,28 @@ declare_features! (\n     // #23121. Array patterns have some hazards yet.\n     (active, slice_patterns, \"1.0.0\", Some(23121), None),\n \n-    // Allows the definition of `const fn` functions.\n+    // Allows the definition of `const fn` functions with some advanced features.\n     (active, const_fn, \"1.2.0\", Some(24111), None),\n \n+    // Allows the definition of `const fn` functions.\n+    (active, min_const_fn, \"1.30.0\", Some(53555), None),\n+\n     // Allows let bindings and destructuring in `const fn` functions and constants.\n     (active, const_let, \"1.22.1\", Some(48821), None),\n \n-    // Allows accessing fields of unions inside const fn\n+    // Allows accessing fields of unions inside const fn.\n     (active, const_fn_union, \"1.27.0\", Some(51909), None),\n \n-    // Allows casting raw pointers to `usize` during const eval\n+    // Allows casting raw pointers to `usize` during const eval.\n     (active, const_raw_ptr_to_usize_cast, \"1.27.0\", Some(51910), None),\n \n-    // Allows dereferencing raw pointers during const eval\n+    // Allows dereferencing raw pointers during const eval.\n     (active, const_raw_ptr_deref, \"1.27.0\", Some(51911), None),\n \n-    // Allows reinterpretation of the bits of a value of one type as another type during const eval\n+    // Allows reinterpretation of the bits of a value of one type as another type during const eval.\n     (active, const_transmute, \"1.29.0\", Some(53605), None),\n \n-    // Allows comparing raw pointers during const eval\n+    // Allows comparing raw pointers during const eval.\n     (active, const_compare_raw_pointers, \"1.27.0\", Some(53020), None),\n \n     // Allows panicking during const eval (produces compile-time errors)\n@@ -1786,7 +1799,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     gate_feature_post!(&self, async_await, span, \"async fn is unstable\");\n                 }\n                 if header.constness.node == ast::Constness::Const {\n-                    gate_feature_post!(&self, const_fn, span, \"const fn is unstable\");\n+                    gate_feature_post!(&self, min_const_fn, span, \"const fn is unstable\");\n                 }\n                 // stability of const fn methods are covered in\n                 // visit_trait_item and visit_impl_item below; this is\n@@ -1844,7 +1857,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         match ii.node {\n             ast::ImplItemKind::Method(ref sig, _) => {\n                 if sig.header.constness.node == ast::Constness::Const {\n-                    gate_feature_post!(&self, const_fn, ii.span, \"const fn is unstable\");\n+                    gate_feature_post!(&self, min_const_fn, ii.span, \"const fn is unstable\");\n                 }\n             }\n             ast::ImplItemKind::Existential(..) => {"}, {"sha": "14624176436000dbd682ee8d1b1aa564a70a92d9", "filename": "src/test/codegen-units/item-collection/unreferenced-const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -13,7 +13,7 @@\n \n // NB: We do not expect *any* monomorphization to be generated here.\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n #![deny(dead_code)]\n #![crate_type = \"rlib\"]\n "}, {"sha": "3ea20aa921e1bf6f6646bf9aa3a7dceae2432da3", "filename": "src/test/codegen/link-dead-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fcodegen%2Flink-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fcodegen%2Flink-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Flink-dead-code.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags:-Clink-dead-code\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n #![crate_type = \"rlib\"]\n \n // This test makes sure that, when -Clink-dead-code is specified, we generate"}, {"sha": "fea81f0cc8fa4c6a48f2600646aa58d7caadd19b", "filename": "src/test/compile-fail/issue-43733-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n #![feature(cfg_target_thread_local, thread_local_internals)]\n \n // On platforms *without* `#[thread_local]`, use"}, {"sha": "1bf740fdec6192beaf4cc5e25ed26d849193f876", "filename": "src/test/mir-opt/lower_128bit_debug_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -15,7 +15,7 @@\n \n // compile-flags: -Z lower_128bit_ops=yes -C debug_assertions=yes\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n static TEST_SIGNED: i128 = const_signed(-222);\n static TEST_UNSIGNED: u128 = const_unsigned(200);"}, {"sha": "235df8a6785d4d4d100d1d2d3afccaf165e8a845", "filename": "src/test/mir-opt/lower_128bit_test.rs", "status": "modified", "additions": 58, "deletions": 96, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -10,9 +10,9 @@\n \n // ignore-emscripten\n \n-// compile-flags: -Z lower_128bit_ops=yes -C debug_assertions=no\n+// compile-flags: -Z lower_128bit_ops=yes -C debug_assertions=no -O\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n static TEST_SIGNED: i128 = const_signed(-222);\n static TEST_UNSIGNED: u128 = const_unsigned(200);\n@@ -63,103 +63,65 @@ fn main() {\n // END RUST SOURCE\n \n // START rustc.const_signed.Lower128Bit.after.mir\n-//     _8 = _1;\n-//     _9 = const compiler_builtins::int::addsub::rust_i128_addo(move _8, const 1i128) -> bb10;\n-//     ...\n-//     _7 = move (_9.0: i128);\n-//     ...\n-//     _10 = const compiler_builtins::int::addsub::rust_i128_subo(move _7, const 2i128) -> bb11;\n-//     ...\n-//     _6 = move (_10.0: i128);\n-//     ...\n-//     _11 = const compiler_builtins::int::mul::rust_i128_mulo(move _6, const 3i128) -> bb12;\n-//     ...\n-//     _5 = move (_11.0: i128);\n-//     ...\n-//     _12 = Eq(const 4i128, const 0i128);\n-//     assert(!move _12, \"attempt to divide by zero\") -> bb4;\n-//     ...\n-//     _13 = Eq(const 4i128, const -1i128);\n-//     _14 = Eq(_5, const -170141183460469231731687303715884105728i128);\n-//     _15 = BitAnd(move _13, move _14);\n-//     assert(!move _15, \"attempt to divide with overflow\") -> bb5;\n-//     ...\n-//     _4 = const compiler_builtins::int::sdiv::rust_i128_div(move _5, const 4i128) -> bb13;\n-//     ...\n-//     _17 = Eq(const 5i128, const -1i128);\n-//     _18 = Eq(_4, const -170141183460469231731687303715884105728i128);\n-//     _19 = BitAnd(move _17, move _18);\n-//     assert(!move _19, \"attempt to calculate the remainder with overflow\") -> bb7;\n-//     ...\n-//     _3 = const compiler_builtins::int::sdiv::rust_i128_rem(move _4, const 5i128) -> bb15;\n-//     ...\n-//     _2 = move (_20.0: i128);\n-//     ...\n-//     _23 = const 7i32 as u128 (Misc);\n-//     _21 = const compiler_builtins::int::shift::rust_i128_shro(move _2, move _23) -> bb16;\n-//     ...\n-//     _0 = move (_21.0: i128);\n-//     ...\n-//     assert(!move (_9.1: bool), \"attempt to add with overflow\") -> bb1;\n-//     ...\n-//     assert(!move (_10.1: bool), \"attempt to subtract with overflow\") -> bb2;\n-//     ...\n-//     assert(!move (_11.1: bool), \"attempt to multiply with overflow\") -> bb3;\n-//     ...\n-//     _16 = Eq(const 5i128, const 0i128);\n-//     assert(!move _16, \"attempt to calculate the remainder with a divisor of zero\") -> bb6;\n-//     ...\n-//     assert(!move (_20.1: bool), \"attempt to shift left with overflow\") -> bb8;\n-//     ...\n-//     _22 = const 6i32 as u128 (Misc);\n-//     _20 = const compiler_builtins::int::shift::rust_i128_shlo(move _3, move _22) -> bb14;\n-//     ...\n-//     assert(!move (_21.1: bool), \"attempt to shift right with overflow\") -> bb9;\n+// _7 = const compiler_builtins::int::addsub::rust_i128_add(move _8, const 1i128) -> bb7;\n+// ...\n+// _10 = Eq(const 4i128, const -1i128);\n+// _11 = Eq(_5, const -170141183460469231731687303715884105728i128);\n+// _12 = BitAnd(move _10, move _11);\n+// assert(!move _12, \"attempt to divide with overflow\") -> bb2;\n+// ...\n+// _4 = const compiler_builtins::int::sdiv::rust_i128_div(move _5, const 4i128) -> bb8;\n+// ...\n+// _14 = Eq(const 5i128, const -1i128);\n+// _15 = Eq(_4, const -170141183460469231731687303715884105728i128);\n+// _16 = BitAnd(move _14, move _15);\n+// assert(!move _16, \"attempt to calculate the remainder with overflow\") -> bb4;\n+// ...\n+// _3 = const compiler_builtins::int::sdiv::rust_i128_rem(move _4, const 5i128) -> bb11;\n+// ...\n+// _9 = Eq(const 4i128, const 0i128);\n+// assert(!move _9, \"attempt to divide by zero\") -> bb1;\n+// ...\n+// _5 = const compiler_builtins::int::mul::rust_i128_mul(move _6, const 3i128) -> bb5;\n+// ...\n+// _6 = const compiler_builtins::int::addsub::rust_i128_sub(move _7, const 2i128) -> bb6;\n+// ...\n+// _13 = Eq(const 5i128, const 0i128);\n+// assert(!move _13, \"attempt to calculate the remainder with a divisor of zero\") -> bb3;\n+// ...\n+// _17 = const 7i32 as u32 (Misc);\n+// _0 = const compiler_builtins::int::shift::rust_i128_shr(move _2, move _17) -> bb9;\n+// ...\n+// _18 = const 6i32 as u32 (Misc);\n+// _2 = const compiler_builtins::int::shift::rust_i128_shl(move _3, move _18) -> bb10;\n // END rustc.const_signed.Lower128Bit.after.mir\n \n // START rustc.const_unsigned.Lower128Bit.after.mir\n-//     _8 = _1;\n-//     _9 = const compiler_builtins::int::addsub::rust_u128_addo(move _8, const 1u128) -> bb8;\n-//     ...\n-//     _7 = move (_9.0: u128);\n-//     ...\n-//     _10 = const compiler_builtins::int::addsub::rust_u128_subo(move _7, const 2u128) -> bb9;\n-//     ...\n-//     _6 = move (_10.0: u128);\n-//     ...\n-//     _11 = const compiler_builtins::int::mul::rust_u128_mulo(move _6, const 3u128) -> bb10;\n-//     ...\n-//     _5 = move (_11.0: u128);\n-//     ...\n-//     _12 = Eq(const 4u128, const 0u128);\n-//     assert(!move _12, \"attempt to divide by zero\") -> bb4;\n-//     ...\n-//     _4 = const compiler_builtins::int::udiv::rust_u128_div(move _5, const 4u128) -> bb11;\n-//     ...\n-//     _3 = const compiler_builtins::int::udiv::rust_u128_rem(move _4, const 5u128) -> bb13;\n-//     ...\n-//     _2 = move (_14.0: u128);\n-//     ...\n-//     _17 = const 7i32 as u128 (Misc);\n-//     _15 = const compiler_builtins::int::shift::rust_u128_shro(move _2, move _17) -> bb14;\n-//     ...\n-//     _0 = move (_15.0: u128);\n-//     ...\n-//     assert(!move (_9.1: bool), \"attempt to add with overflow\") -> bb1;\n-//     ...\n-//     assert(!move (_10.1: bool), \"attempt to subtract with overflow\") -> bb2;\n-//     ...\n-//     assert(!move (_11.1: bool), \"attempt to multiply with overflow\") -> bb3;\n-//     ...\n-//     _13 = Eq(const 5u128, const 0u128);\n-//     assert(!move _13, \"attempt to calculate the remainder with a divisor of zero\") -> bb5;\n-//     ...\n-//     assert(!move (_14.1: bool), \"attempt to shift left with overflow\") -> bb6;\n-//     ...\n-//     _16 = const 6i32 as u128 (Misc);\n-//     _14 = const compiler_builtins::int::shift::rust_u128_shlo(move _3, move _16) -> bb12;\n-//     ...\n-//     assert(!move (_15.1: bool), \"attempt to shift right with overflow\") -> bb7;\n+// _8 = _1;\n+// _7 = const compiler_builtins::int::addsub::rust_u128_add(move _8, const 1u128) -> bb5;\n+// ...\n+// _4 = const compiler_builtins::int::udiv::rust_u128_div(move _5, const 4u128) -> bb6;\n+// ...\n+// _3 = const compiler_builtins::int::udiv::rust_u128_rem(move _4, const 5u128) -> bb9;\n+// ...\n+// _9 = Eq(const 4u128, const 0u128);\n+// assert(!move _9, \"attempt to divide by zero\") -> bb1;\n+// ...\n+// _5 = const compiler_builtins::int::mul::rust_u128_mul(move _6, const 3u128) -> bb3;\n+// ...\n+// _6 = const compiler_builtins::int::addsub::rust_u128_sub(move _7, const 2u128) -> bb4;\n+// ...\n+// _10 = Eq(const 5u128, const 0u128);\n+// assert(!move _10, \"attempt to calculate the remainder with a divisor of zero\") -> bb2;\n+// ...\n+// return;\n+// ...\n+// _11 = const 7i32 as u32 (Misc);\n+// _0 = const compiler_builtins::int::shift::rust_u128_shr(move _2, move _11) -> bb7;\n+// ...\n+// _12 = const 6i32 as u32 (Misc);\n+// _2 = const compiler_builtins::int::shift::rust_u128_shl(move _3, move _12) -> bb8;\n+\n // END rustc.const_unsigned.Lower128Bit.after.mir\n \n // START rustc.test_signed.Lower128Bit.after.mir"}, {"sha": "30efe3b9ab2c48cd0fceaf3007e3a83b072f5b31", "filename": "src/test/run-fail/issue-29798.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-fail%2Fissue-29798.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-fail%2Fissue-29798.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-29798.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:index out of bounds: the len is 5 but the index is 5\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n const fn test(x: usize) -> i32 {\n     [42;5][x]\n }"}, {"sha": "6985a6527c874eb51562d2a2da695af198692421", "filename": "src/test/run-pass/auxiliary/const_fn_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fauxiliary%2Fconst_fn_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fauxiliary%2Fconst_fn_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fconst_fn_lib.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -11,6 +11,6 @@\n // Crate that exports a const fn. Used for testing cross-crate.\n \n #![crate_type=\"rlib\"]\n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n pub const fn foo() -> usize { 22 }"}, {"sha": "5351a40916b7d44df25f6e7c8bec63a0460fd13a", "filename": "src/test/run-pass/auxiliary/issue-36954.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-36954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-36954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-36954.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n #![crate_type = \"lib\"]\n \n const fn foo(i: i32) -> i32 {"}, {"sha": "3fe27ca200cb00d4b300f932d7b959ced146b0f4", "filename": "src/test/run-pass/const-fn-const-eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fconst-fn-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fconst-fn-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-const-eval.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n const fn add(x: usize, y: usize) -> usize {\n     x + y"}, {"sha": "bed78f1e8978f6dc3c9304c1853432609cce0bd8", "filename": "src/test/run-pass/const-fn-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fconst-fn-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fconst-fn-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-method.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n struct Foo { value: u32 }\n "}, {"sha": "d5959a89e51a5bf597dc7a7d248783e409be3859", "filename": "src/test/run-pass/const-fn-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fconst-fn-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fconst-fn-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-nested.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -10,7 +10,7 @@\n \n // Test a call whose argument is the result of another call.\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n const fn sub(x: u32, y: u32) -> u32 {\n     x - y"}, {"sha": "836716051d2132e1bd9b7f197fde1bb96cb21c80", "filename": "src/test/run-pass/const-meth-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fconst-meth-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fconst-meth-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-meth-pattern.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n struct A;\n "}, {"sha": "689ae19e7d4f4cfa4f09f039ca0bff8052ca5def", "filename": "src/test/run-pass/const-pattern-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fconst-pattern-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fconst-pattern-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-pattern-variant.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n #[derive(PartialEq, Eq)]\n enum Cake {"}, {"sha": "245dd673b512cff1f465cef0b92f514ecf92de51", "filename": "src/test/run-pass/const-size_of-align_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fconst-size_of-align_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fconst-size_of-align_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-size_of-align_of.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n use std::mem;\n "}, {"sha": "b267245b789694770615ba1aa8166c33c047f7ee", "filename": "src/test/run-pass/const-unsafe-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fconst-unsafe-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fconst-unsafe-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-unsafe-fn.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -10,7 +10,7 @@\n \n // A quick test of 'unsafe const fn' functionality\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n const unsafe fn dummy(v: u32) -> u32 {\n     !v"}, {"sha": "574fb29e82c7df08be4371a0019a0ea2e1e64dd1", "filename": "src/test/run-pass/consts-in-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n const FOO: isize = 10;\n const BAR: isize = 3;"}, {"sha": "f59a6810e3a78f76bea3112c1dc0ba2e883df9ec", "filename": "src/test/run-pass/ctfe/ice-48279.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fctfe%2Fice-48279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fctfe%2Fice-48279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fice-48279.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -10,7 +10,7 @@\n \n // https://github.com/rust-lang/rust/issues/48279\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n #[derive(PartialEq, Eq)]\n pub struct NonZeroU32 {"}, {"sha": "352958f4c6a454f82f0d5219432658e6e377f4da", "filename": "src/test/run-pass/ctfe/match-const-fn-structs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fctfe%2Fmatch-const-fn-structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fctfe%2Fmatch-const-fn-structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fmatch-const-fn-structs.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -10,7 +10,7 @@\n \n // https://github.com/rust-lang/rust/issues/46114\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n #[derive(Eq, PartialEq)]\n struct A { value: u32 }"}, {"sha": "87fdac4bfb4fe296daa58fd4bc08aa29ededfb79", "filename": "src/test/run-pass/ctfe/return-in-const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fctfe%2Freturn-in-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fctfe%2Freturn-in-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Freturn-in-const-fn.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -10,7 +10,7 @@\n \n // https://github.com/rust-lang/rust/issues/43754\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n const fn foo(x: usize) -> usize {\n     return x;\n }"}, {"sha": "a18d82fb7a4e7e22c334fe85204ff5b500795ae7", "filename": "src/test/run-pass/invalid_const_promotion.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Finvalid_const_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Finvalid_const_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finvalid_const_promotion.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -11,6 +11,8 @@\n // ignore-wasm32\n // ignore-emscripten\n \n+// compile-flags: -C debug_assertions=yes\n+\n #![feature(const_fn, libc)]\n #![allow(const_err)]\n \n@@ -19,7 +21,7 @@ extern crate libc;\n use std::env;\n use std::process::{Command, Stdio};\n \n-// this will panic in debug mode\n+// this will panic in debug mode and overflow in release mode\n const fn bar() -> usize { 0 - 1 }\n \n fn foo() {"}, {"sha": "10482139a978c49297794d919ada6ddc2eb95666", "filename": "src/test/run-pass/issue-28822.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fissue-28822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fissue-28822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-28822.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n fn main() {}\n "}, {"sha": "3079d9de3c23861af323b2e8e3cb40a1635f4441", "filename": "src/test/run-pass/issue-29927.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fissue-29927.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fissue-29927.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-29927.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n struct A {\n     field: usize,\n }"}, {"sha": "7be79f3a450974bb6c76b6b93e29c8ff1f5813cc", "filename": "src/test/run-pass/issue-33537.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fissue-33537.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fissue-33537.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-33537.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n const fn foo() -> *const i8 {\n     b\"foo\" as *const _ as *const i8"}, {"sha": "9b3289e67859a8da0cb2d9c292ba3393b2341227", "filename": "src/test/run-pass/issue-37991.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fissue-37991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fissue-37991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-37991.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n const fn foo() -> i64 {\n     3"}, {"sha": "488bc6e6927a077561ae9153365407aa07f4c8c1", "filename": "src/test/run-pass/issue29927-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fissue29927-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frun-pass%2Fissue29927-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue29927-1.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n const fn f() -> usize {\n     5\n }"}, {"sha": "0c1eedc86ccfd83cdcd60d6155fc670566cfa77a", "filename": "src/test/rustdoc/auxiliary/issue-27362.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-27362.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-27362.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-27362.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags: -Cmetadata=aux\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n pub const fn foo() {}\n pub const unsafe fn bar() {}"}, {"sha": "dc7a2799b46a911a0c3e92583613ff021e9c0371", "filename": "src/test/rustdoc/const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frustdoc%2Fconst-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frustdoc%2Fconst-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-fn.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n #![crate_name = \"foo\"]\n \n // @has foo/fn.bar.html"}, {"sha": "49694e3ae08d1830599ce2d7946d8a8da2e15081", "filename": "src/test/rustdoc/const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frustdoc%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Frustdoc%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -10,7 +10,7 @@\n \n #![crate_type=\"lib\"]\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n pub struct Foo;\n "}, {"sha": "d71c8462587d06e8e1411930b0791d66255ea65d", "filename": "src/test/ui/borrowck/move-in-static-initializer-issue-38520.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -15,7 +15,7 @@\n // permitted as `Foo` is not copy (even in a static/const\n // initializer).\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n struct Foo(usize);\n "}, {"sha": "499227e71a74cc42bf5314b1de9a1ddd2a85b241", "filename": "src/test/ui/consts/auxiliary/const_fn_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -11,6 +11,6 @@\n // Crate that exports a const fn. Used for testing cross-crate.\n \n #![crate_type=\"rlib\"]\n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n pub const fn foo() -> usize { 22 } //~ ERROR const fn is unstable"}, {"sha": "200f423f6e39b5de9d5718650fcd299fc3577cbd", "filename": "src/test/ui/consts/const-eval/issue-43197.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -10,7 +10,7 @@\n \n #![warn(const_err)]\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n const fn foo(x: u32) -> u32 {\n     x"}, {"sha": "2bc860e3ef94fb2890dc870a709674a050893032", "filename": "src/test/ui/consts/const-eval/issue-47971.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-47971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-47971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-47971.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -10,7 +10,7 @@\n \n // compile-pass\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n struct S(pub &'static u32, pub u32);\n "}, {"sha": "4f02b1eef3a0fef1a81922bc43a6c3aca273615c", "filename": "src/test/ui/consts/const-pattern-not-const-evaluable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-not-const-evaluable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-not-const-evaluable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-not-const-evaluable.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -10,7 +10,7 @@\n \n // compile-pass\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n #[derive(PartialEq, Eq)]\n enum Cake {"}, {"sha": "04c054f8b6db25dfa5ade5642953eb02ed8f73e2", "filename": "src/test/ui/consts/const-size_of-cycle.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -10,8 +10,6 @@\n \n // error-pattern: cycle detected\n \n-#![feature(const_fn)]\n-\n struct Foo {\n     bytes: [u8; std::mem::size_of::<Foo>()]\n }"}, {"sha": "ab8b5792e681d58bb7e6c9af3193f77664c00252", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -4,14 +4,14 @@ note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_\n note: ...which requires const-evaluating `Foo::bytes::{{constant}}`...\n   --> $SRC_DIR/libcore/mem.rs:LL:COL\n    |\n-LL |     unsafe { intrinsics::size_of::<T>() }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     intrinsics::size_of::<T>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires computing layout of `Foo`, completing the cycle\n note: cycle used when const-evaluating `Foo::bytes::{{constant}}`\n   --> $SRC_DIR/libcore/mem.rs:LL:COL\n    |\n-LL |     unsafe { intrinsics::size_of::<T>() }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     intrinsics::size_of::<T>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b156e5a9731dad18faf8fb99da5da2b49d887f49", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "added", "additions": 224, "deletions": 0, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -0,0 +1,224 @@\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/min_const_fn.rs:49:25\n+   |\n+LL |     const fn into_inner(self) -> T { self.0 } //~ destructors cannot be evaluated\n+   |                         ^^^^ constant functions cannot evaluate destructors\n+\n+error: mutable references in const fn are unstable\n+  --> $DIR/min_const_fn.rs:51:5\n+   |\n+LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/min_const_fn.rs:56:28\n+   |\n+LL |     const fn into_inner_lt(self) -> T { self.0 } //~ destructors cannot be evaluated\n+   |                            ^^^^ constant functions cannot evaluate destructors\n+\n+error: mutable references in const fn are unstable\n+  --> $DIR/min_const_fn.rs:58:5\n+   |\n+LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/min_const_fn.rs:63:27\n+   |\n+LL |     const fn into_inner_s(self) -> T { self.0 } //~ ERROR destructors\n+   |                           ^^^^ constant functions cannot evaluate destructors\n+\n+error: mutable references in const fn are unstable\n+  --> $DIR/min_const_fn.rs:65:5\n+   |\n+LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: mutable references in const fn are unstable\n+  --> $DIR/min_const_fn.rs:70:5\n+   |\n+LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:88:16\n+   |\n+LL | const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n+   |                ^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:90:18\n+   |\n+LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n+   |                  ^\n+\n+error: only int, `bool` and `char` operations are stable in const fn\n+  --> $DIR/min_const_fn.rs:92:33\n+   |\n+LL | const fn foo19(f: f32) -> f32 { f * 2.0 }\n+   |                                 ^^^^^^^\n+\n+error: only int, `bool` and `char` operations are stable in const fn\n+  --> $DIR/min_const_fn.rs:94:35\n+   |\n+LL | const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n+   |                                   ^^^^^^^\n+\n+error: only int and `bool` operations are stable in const fn\n+  --> $DIR/min_const_fn.rs:96:35\n+   |\n+LL | const fn foo19_3(f: f32) -> f32 { -f }\n+   |                                   ^^\n+\n+error: only int, `bool` and `char` operations are stable in const fn\n+  --> $DIR/min_const_fn.rs:98:43\n+   |\n+LL | const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n+   |                                           ^^^^^\n+\n+error: cannot access `static` items in const fn\n+  --> $DIR/min_const_fn.rs:102:27\n+   |\n+LL | const fn foo25() -> u32 { BAR } //~ ERROR cannot access `static` items in const fn\n+   |                           ^^^\n+\n+error: cannot access `static` items in const fn\n+  --> $DIR/min_const_fn.rs:103:36\n+   |\n+LL | const fn foo26() -> &'static u32 { &BAR } //~ ERROR cannot access `static` items\n+   |                                    ^^^^\n+\n+error: casting pointers to ints is unstable in const fn\n+  --> $DIR/min_const_fn.rs:104:42\n+   |\n+LL | const fn foo30(x: *const u32) -> usize { x as usize }\n+   |                                          ^^^^^^^^^^\n+\n+error: casting pointers to ints is unstable in const fn\n+  --> $DIR/min_const_fn.rs:106:42\n+   |\n+LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n+   |                                          ^^^^^^^^^^\n+\n+error: `if`, `match`, `&&` and `||` are not stable in const fn\n+  --> $DIR/min_const_fn.rs:108:38\n+   |\n+LL | const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `if`, `match`, `&&` and `||` are not stable in const fn\n+  --> $DIR/min_const_fn.rs:110:29\n+   |\n+LL | const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n+   |                             ^^^^^^^^^^^\n+\n+error: local variables in const fn are unstable\n+  --> $DIR/min_const_fn.rs:111:34\n+   |\n+LL | const fn foo30_6() -> bool { let x = true; x } //~ ERROR local variables in const fn are unstable\n+   |                                  ^\n+\n+error: `if`, `match`, `&&` and `||` are not stable in const fn\n+  --> $DIR/min_const_fn.rs:112:44\n+   |\n+LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n+   |                                            ^^^^^^\n+\n+error: `if`, `match`, `&&` and `||` are not stable in const fn\n+  --> $DIR/min_const_fn.rs:114:44\n+   |\n+LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n+   |                                            ^^^^^^\n+\n+error: mutable references in const fn are unstable\n+  --> $DIR/min_const_fn.rs:116:14\n+   |\n+LL | const fn inc(x: &mut i32) { *x += 1 }\n+   |              ^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:121:6\n+   |\n+LL | impl<T: std::fmt::Debug> Foo<T> {\n+   |      ^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:126:6\n+   |\n+LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n+   |      ^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:131:6\n+   |\n+LL | impl<T: Sync + Sized> Foo<T> {\n+   |      ^\n+\n+error: `impl Trait` in const fn is unstable\n+  --> $DIR/min_const_fn.rs:137:1\n+   |\n+LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:139:34\n+   |\n+LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n+   |                                  ^^^^^^^^^^^^^^^^^^^^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:141:22\n+   |\n+LL | const fn no_apit(_x: impl std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n+   |                      ^^^^^^^^^^^^^^^^^^^^\n+\n+error: `impl Trait` in const fn is unstable\n+  --> $DIR/min_const_fn.rs:142:1\n+   |\n+LL | const fn no_rpit() -> impl std::fmt::Debug {} //~ ERROR `impl Trait` in const fn is unstable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:143:23\n+   |\n+LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n+   |                       ^^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:144:1\n+   |\n+LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/min_const_fn.rs:144:64\n+   |\n+LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n+   |                                                                ^^ - temporary value only lives until here\n+   |                                                                |\n+   |                                                                temporary value does not live long enough\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:149:41\n+   |\n+LL | const fn really_no_traits_i_mean_it() { (&() as &std::fmt::Debug, ()).1 }\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: function pointers in const fn are unstable\n+  --> $DIR/min_const_fn.rs:152:21\n+   |\n+LL | const fn no_fn_ptrs(_x: fn()) {}\n+   |                     ^^\n+\n+error: function pointers in const fn are unstable\n+  --> $DIR/min_const_fn.rs:154:1\n+   |\n+LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 36 previous errors\n+\n+Some errors occurred: E0493, E0597.\n+For more information about an error, try `rustc --explain E0493`."}, {"sha": "b861e312d4245e4664ea6d12c1956927e3ee0269", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -0,0 +1,156 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(min_const_fn)]\n+\n+// ok\n+const fn foo1() {}\n+const fn foo2(x: i32) -> i32 { x }\n+const fn foo3<T>(x: T) -> T { x }\n+const fn foo7() {\n+    (\n+        foo1(),\n+        foo2(420),\n+        foo3(69),\n+    ).0\n+}\n+const fn foo12<T: Sized>(t: T) -> T { t }\n+const fn foo13<T: ?Sized>(t: &T) -> &T { t }\n+const fn foo14<'a, T: 'a>(t: &'a T) -> &'a T { t }\n+const fn foo15<T>(t: T) -> T where T: Sized { t }\n+const fn foo15_2<T>(t: &T) -> &T where T: ?Sized { t }\n+const fn foo16(f: f32) -> f32 { f }\n+const fn foo17(f: f32) -> u32 { f as u32 }\n+const fn foo18(i: i32) -> i32 { i * 3 }\n+const fn foo20(b: bool) -> bool { !b }\n+const fn foo21<T, U>(t: T, u: U) -> (T, U) { (t, u) }\n+const fn foo22(s: &[u8], i: usize) -> u8 { s[i] }\n+const FOO: u32 = 42;\n+const fn foo23() -> u32 { FOO }\n+const fn foo24() -> &'static u32 { &FOO }\n+const fn foo27(x: &u32) -> u32 { *x }\n+const fn foo28(x: u32) -> u32 { *&x }\n+const fn foo29(x: u32) -> i32 { x as i32 }\n+const fn foo31(a: bool, b: bool) -> bool { a & b }\n+const fn foo32(a: bool, b: bool) -> bool { a | b }\n+const fn foo33(a: bool, b: bool) -> bool { a & b }\n+const fn foo34(a: bool, b: bool) -> bool { a | b }\n+const fn foo35(a: bool, b: bool) -> bool { a ^ b }\n+struct Foo<T: ?Sized>(T);\n+impl<T> Foo<T> {\n+    const fn new(t: T) -> Self { Foo(t) }\n+    const fn into_inner(self) -> T { self.0 } //~ destructors cannot be evaluated\n+    const fn get(&self) -> &T { &self.0 }\n+    const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n+    //~^ mutable references in const fn are unstable\n+}\n+impl<'a, T> Foo<T> {\n+    const fn new_lt(t: T) -> Self { Foo(t) }\n+    const fn into_inner_lt(self) -> T { self.0 } //~ destructors cannot be evaluated\n+    const fn get_lt(&'a self) -> &T { &self.0 }\n+    const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n+    //~^ mutable references in const fn are unstable\n+}\n+impl<T: Sized> Foo<T> {\n+    const fn new_s(t: T) -> Self { Foo(t) }\n+    const fn into_inner_s(self) -> T { self.0 } //~ ERROR destructors\n+    const fn get_s(&self) -> &T { &self.0 }\n+    const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n+    //~^ mutable references in const fn are unstable\n+}\n+impl<T: ?Sized> Foo<T> {\n+    const fn get_sq(&self) -> &T { &self.0 }\n+    const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n+    //~^ mutable references in const fn are unstable\n+}\n+\n+\n+const fn char_ops(c: char, d: char) -> bool { c == d }\n+const fn char_ops2(c: char, d: char) -> bool { c < d }\n+const fn char_ops3(c: char, d: char) -> bool { c != d }\n+const fn i32_ops(c: i32, d: i32) -> bool { c == d }\n+const fn i32_ops2(c: i32, d: i32) -> bool { c < d }\n+const fn i32_ops3(c: i32, d: i32) -> bool { c != d }\n+const fn i32_ops4(c: i32, d: i32) -> i32 { c + d }\n+const fn char_cast(u: u8) -> char { u as char }\n+const unsafe fn foo4() -> i32 { 42 }\n+const unsafe fn foo5<T>() -> *const T { 0 as *const T }\n+const unsafe fn foo6<T>() -> *mut T { 0 as *mut T }\n+\n+// not ok\n+const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n+//~^ ERROR trait bounds other than `Sized` on const fn parameters are unstable\n+const fn foo11_2<T: Send>(t: T) -> T { t }\n+//~^ ERROR trait bounds other than `Sized` on const fn parameters are unstable\n+const fn foo19(f: f32) -> f32 { f * 2.0 }\n+//~^ ERROR only int, `bool` and `char` operations are stable in const fn\n+const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n+//~^ ERROR only int, `bool` and `char` operations are stable in const fn\n+const fn foo19_3(f: f32) -> f32 { -f }\n+//~^ ERROR only int and `bool` operations are stable in const fn\n+const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n+//~^ ERROR only int, `bool` and `char` operations are stable in const fn\n+\n+static BAR: u32 = 42;\n+const fn foo25() -> u32 { BAR } //~ ERROR cannot access `static` items in const fn\n+const fn foo26() -> &'static u32 { &BAR } //~ ERROR cannot access `static` items\n+const fn foo30(x: *const u32) -> usize { x as usize }\n+//~^ ERROR casting pointers to int\n+const fn foo30_2(x: *mut u32) -> usize { x as usize }\n+//~^ ERROR casting pointers to int\n+const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n+//~^ ERROR `if`, `match`, `&&` and `||` are not stable in const fn\n+const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n+const fn foo30_6() -> bool { let x = true; x } //~ ERROR local variables in const fn are unstable\n+const fn foo36(a: bool, b: bool) -> bool { a && b }\n+//~^ ERROR `if`, `match`, `&&` and `||` are not stable in const fn\n+const fn foo37(a: bool, b: bool) -> bool { a || b }\n+//~^ ERROR `if`, `match`, `&&` and `||` are not stable in const fn\n+const fn inc(x: &mut i32) { *x += 1 }\n+//~^ ERROR mutable references in const fn are unstable\n+\n+fn main() {}\n+\n+impl<T: std::fmt::Debug> Foo<T> {\n+//~^ ERROR trait bounds other than `Sized` on const fn parameters are unstable\n+    const fn foo(&self) {}\n+}\n+\n+impl<T: std::fmt::Debug + Sized> Foo<T> {\n+//~^ ERROR trait bounds other than `Sized` on const fn parameters are unstable\n+    const fn foo2(&self) {}\n+}\n+\n+impl<T: Sync + Sized> Foo<T> {\n+//~^ ERROR trait bounds other than `Sized` on const fn parameters are unstable\n+    const fn foo3(&self) {}\n+}\n+\n+struct AlanTuring<T>(T);\n+const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n+//~^ ERROR `impl Trait` in const fn is unstable\n+const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n+//~^ ERROR trait bounds other than `Sized`\n+const fn no_apit(_x: impl std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n+const fn no_rpit() -> impl std::fmt::Debug {} //~ ERROR `impl Trait` in const fn is unstable\n+const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n+const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n+//~^ ERROR trait bounds other than `Sized`\n+\n+const fn no_unsafe() { unsafe {} }\n+\n+const fn really_no_traits_i_mean_it() { (&() as &std::fmt::Debug, ()).1 }\n+//~^ ERROR trait bounds other than `Sized`\n+\n+const fn no_fn_ptrs(_x: fn()) {}\n+//~^ ERROR function pointers in const fn are unstable\n+const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n+//~^ ERROR function pointers in const fn are unstable\n+"}, {"sha": "019948c31b15ca4b40d42470a2a70b44c5062b2e", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "added", "additions": 213, "deletions": 0, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -0,0 +1,213 @@\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/min_const_fn.rs:49:25\n+   |\n+LL |     const fn into_inner(self) -> T { self.0 } //~ destructors cannot be evaluated\n+   |                         ^^^^ constant functions cannot evaluate destructors\n+\n+error: mutable references in const fn are unstable\n+  --> $DIR/min_const_fn.rs:51:5\n+   |\n+LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/min_const_fn.rs:56:28\n+   |\n+LL |     const fn into_inner_lt(self) -> T { self.0 } //~ destructors cannot be evaluated\n+   |                            ^^^^ constant functions cannot evaluate destructors\n+\n+error: mutable references in const fn are unstable\n+  --> $DIR/min_const_fn.rs:58:5\n+   |\n+LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/min_const_fn.rs:63:27\n+   |\n+LL |     const fn into_inner_s(self) -> T { self.0 } //~ ERROR destructors\n+   |                           ^^^^ constant functions cannot evaluate destructors\n+\n+error: mutable references in const fn are unstable\n+  --> $DIR/min_const_fn.rs:65:5\n+   |\n+LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: mutable references in const fn are unstable\n+  --> $DIR/min_const_fn.rs:70:5\n+   |\n+LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:88:16\n+   |\n+LL | const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n+   |                ^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:90:18\n+   |\n+LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n+   |                  ^\n+\n+error: only int, `bool` and `char` operations are stable in const fn\n+  --> $DIR/min_const_fn.rs:92:33\n+   |\n+LL | const fn foo19(f: f32) -> f32 { f * 2.0 }\n+   |                                 ^^^^^^^\n+\n+error: only int, `bool` and `char` operations are stable in const fn\n+  --> $DIR/min_const_fn.rs:94:35\n+   |\n+LL | const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n+   |                                   ^^^^^^^\n+\n+error: only int and `bool` operations are stable in const fn\n+  --> $DIR/min_const_fn.rs:96:35\n+   |\n+LL | const fn foo19_3(f: f32) -> f32 { -f }\n+   |                                   ^^\n+\n+error: only int, `bool` and `char` operations are stable in const fn\n+  --> $DIR/min_const_fn.rs:98:43\n+   |\n+LL | const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n+   |                                           ^^^^^\n+\n+error: cannot access `static` items in const fn\n+  --> $DIR/min_const_fn.rs:102:27\n+   |\n+LL | const fn foo25() -> u32 { BAR } //~ ERROR cannot access `static` items in const fn\n+   |                           ^^^\n+\n+error: cannot access `static` items in const fn\n+  --> $DIR/min_const_fn.rs:103:36\n+   |\n+LL | const fn foo26() -> &'static u32 { &BAR } //~ ERROR cannot access `static` items\n+   |                                    ^^^^\n+\n+error: casting pointers to ints is unstable in const fn\n+  --> $DIR/min_const_fn.rs:104:42\n+   |\n+LL | const fn foo30(x: *const u32) -> usize { x as usize }\n+   |                                          ^^^^^^^^^^\n+\n+error: casting pointers to ints is unstable in const fn\n+  --> $DIR/min_const_fn.rs:106:42\n+   |\n+LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n+   |                                          ^^^^^^^^^^\n+\n+error: `if`, `match`, `&&` and `||` are not stable in const fn\n+  --> $DIR/min_const_fn.rs:108:38\n+   |\n+LL | const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `if`, `match`, `&&` and `||` are not stable in const fn\n+  --> $DIR/min_const_fn.rs:110:29\n+   |\n+LL | const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n+   |                             ^^^^^^^^^^^\n+\n+error: local variables in const fn are unstable\n+  --> $DIR/min_const_fn.rs:111:34\n+   |\n+LL | const fn foo30_6() -> bool { let x = true; x } //~ ERROR local variables in const fn are unstable\n+   |                                  ^\n+\n+error: `if`, `match`, `&&` and `||` are not stable in const fn\n+  --> $DIR/min_const_fn.rs:112:44\n+   |\n+LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n+   |                                            ^^^^^^\n+\n+error: `if`, `match`, `&&` and `||` are not stable in const fn\n+  --> $DIR/min_const_fn.rs:114:44\n+   |\n+LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n+   |                                            ^^^^^^\n+\n+error: mutable references in const fn are unstable\n+  --> $DIR/min_const_fn.rs:116:14\n+   |\n+LL | const fn inc(x: &mut i32) { *x += 1 }\n+   |              ^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:121:6\n+   |\n+LL | impl<T: std::fmt::Debug> Foo<T> {\n+   |      ^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:126:6\n+   |\n+LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n+   |      ^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:131:6\n+   |\n+LL | impl<T: Sync + Sized> Foo<T> {\n+   |      ^\n+\n+error: `impl Trait` in const fn is unstable\n+  --> $DIR/min_const_fn.rs:137:1\n+   |\n+LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:139:34\n+   |\n+LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n+   |                                  ^^^^^^^^^^^^^^^^^^^^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:141:22\n+   |\n+LL | const fn no_apit(_x: impl std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n+   |                      ^^^^^^^^^^^^^^^^^^^^\n+\n+error: `impl Trait` in const fn is unstable\n+  --> $DIR/min_const_fn.rs:142:1\n+   |\n+LL | const fn no_rpit() -> impl std::fmt::Debug {} //~ ERROR `impl Trait` in const fn is unstable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:143:23\n+   |\n+LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n+   |                       ^^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:144:1\n+   |\n+LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:149:41\n+   |\n+LL | const fn really_no_traits_i_mean_it() { (&() as &std::fmt::Debug, ()).1 }\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: function pointers in const fn are unstable\n+  --> $DIR/min_const_fn.rs:152:21\n+   |\n+LL | const fn no_fn_ptrs(_x: fn()) {}\n+   |                     ^^\n+\n+error: function pointers in const fn are unstable\n+  --> $DIR/min_const_fn.rs:154:1\n+   |\n+LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 35 previous errors\n+\n+For more information about this error, try `rustc --explain E0493`."}, {"sha": "cfcc7990fb30db722c5242b0e13145421b6221ad", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.nll.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -0,0 +1,25 @@\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn_dyn.rs:21:5\n+   |\n+LL |     x.0.field;\n+   |     ^^^^^^^^^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn_dyn.rs:24:66\n+   |\n+LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n+   |                                                                  ^^\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/min_const_fn_dyn.rs:24:67\n+   |\n+LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n+   |                                                                   ^    - temporary value only lives until here\n+   |                                                                   |\n+   |                                                                   temporary value does not live long enough\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "38e2825643009aba926884ab2e0333624b6b53da", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(min_const_fn)]\n+\n+struct HasDyn {\n+    field: &'static dyn std::fmt::Debug,\n+}\n+\n+struct Hide(HasDyn);\n+\n+const fn no_inner_dyn_trait(_x: Hide) {}\n+const fn no_inner_dyn_trait2(x: Hide) {\n+    x.0.field;\n+//~^ ERROR trait bounds other than `Sized`\n+}\n+const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n+//~^ ERROR trait bounds other than `Sized`\n+\n+fn main() {}"}, {"sha": "3a1055f2ede1504ccd802e7ebfa2e91c461322c8", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -0,0 +1,14 @@\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn_dyn.rs:21:5\n+   |\n+LL |     x.0.field;\n+   |     ^^^^^^^^^\n+\n+error: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn_dyn.rs:24:66\n+   |\n+LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n+   |                                                                  ^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "100d275f97e732970f8c884338bf8cad8faa54d8", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_fn_ptr.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(min_const_fn)]\n+\n+struct HasPtr {\n+    field: fn(),\n+}\n+\n+struct Hide(HasPtr);\n+\n+fn field() {}\n+\n+const fn no_inner_dyn_trait(_x: Hide) {}\n+const fn no_inner_dyn_trait2(x: Hide) {\n+    x.0.field;\n+//~^ ERROR function pointers in const fn\n+}\n+const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasPtr { field }) }\n+//~^ ERROR function pointers in const fn\n+\n+fn main() {}"}, {"sha": "c10af3d2c8e71d4aa3755f500456e1ae56a2f749", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_fn_ptr.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -0,0 +1,14 @@\n+error: function pointers in const fn are unstable\n+  --> $DIR/min_const_fn_fn_ptr.rs:23:5\n+   |\n+LL |     x.0.field;\n+   |     ^^^^^^^^^\n+\n+error: function pointers in const fn are unstable\n+  --> $DIR/min_const_fn_fn_ptr.rs:26:59\n+   |\n+LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasPtr { field }) }\n+   |                                                           ^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "fcc9545d97f1548957266b9e8b0a1efe72d6f038", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(integer_atomics, min_const_fn)]\n+\n+// compile-pass\n+\n+use std::cell::UnsafeCell;\n+use std::sync::atomic::AtomicU32;\n+pub struct Condvar {\n+    condvar: UnsafeCell<AtomicU32>,\n+}\n+\n+unsafe impl Send for Condvar {}\n+unsafe impl Sync for Condvar {}\n+\n+#[repr(C)]\n+#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]\n+struct NoWait(u32);\n+\n+const CONDVAR_HAS_NO_WAITERS: NoWait = NoWait(42);\n+\n+impl Condvar {\n+    pub const fn new() -> Condvar {\n+        Condvar {\n+            condvar: UnsafeCell::new(AtomicU32::new(CONDVAR_HAS_NO_WAITERS.0)),\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9f5d0ad5df3e1ddafd975256ddb5afb1b31fc9bc", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![unstable(feature = \"humans\",\n+            reason = \"who ever let humans program computers,\n+            we're apparently really bad at it\",\n+            issue = \"0\")]\n+\n+#![feature(rustc_const_unstable, const_fn, foo, foo2)]\n+#![feature(staged_api)]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature=\"foo\")]\n+const fn foo() -> u32 { 42 }\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+// can't call non-min_const_fn\n+const fn bar() -> u32 { foo() } //~ ERROR can only call other `min_const_fn`\n+\n+#[unstable(feature = \"rust1\", issue=\"0\")]\n+const fn foo2() -> u32 { 42 }\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+// can't call non-min_const_fn\n+const fn bar2() -> u32 { foo2() } //~ ERROR can only call other `min_const_fn`\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+// conformity is required, even with `const_fn` feature gate\n+const fn bar3() -> u32 { (5f32 + 6f32) as u32 } //~ ERROR only int, `bool` and `char` operations\n+\n+// check whether this function cannot be called even with the feature gate active\n+#[unstable(feature = \"foo2\", issue=\"0\")]\n+const fn foo2_gated() -> u32 { 42 }\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+// can't call non-min_const_fn\n+const fn bar2_gated() -> u32 { foo2_gated() } //~ ERROR can only call other `min_const_fn`\n+\n+fn main() {}"}, {"sha": "1ef7ffd3a916e5991bde922e51f9c1df3f303c09", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -0,0 +1,26 @@\n+error: can only call other `min_const_fn` within a `min_const_fn`\n+  --> $DIR/min_const_fn_libstd_stability.rs:25:25\n+   |\n+LL | const fn bar() -> u32 { foo() } //~ ERROR can only call other `min_const_fn`\n+   |                         ^^^^^\n+\n+error: can only call other `min_const_fn` within a `min_const_fn`\n+  --> $DIR/min_const_fn_libstd_stability.rs:32:26\n+   |\n+LL | const fn bar2() -> u32 { foo2() } //~ ERROR can only call other `min_const_fn`\n+   |                          ^^^^^^\n+\n+error: only int, `bool` and `char` operations are stable in const fn\n+  --> $DIR/min_const_fn_libstd_stability.rs:36:26\n+   |\n+LL | const fn bar3() -> u32 { (5f32 + 6f32) as u32 } //~ ERROR only int, `bool` and `char` operations\n+   |                          ^^^^^^^^^^^^^\n+\n+error: can only call other `min_const_fn` within a `min_const_fn`\n+  --> $DIR/min_const_fn_libstd_stability.rs:44:32\n+   |\n+LL | const fn bar2_gated() -> u32 { foo2_gated() } //~ ERROR can only call other `min_const_fn`\n+   |                                ^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "e7caa4c6cb4263d801f6fd0868f9434e55cb8302", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(min_const_fn)]\n+\n+// ok\n+const unsafe fn foo4() -> i32 { 42 }\n+const unsafe fn foo5<T>() -> *const T { 0 as *const T }\n+const unsafe fn foo6<T>() -> *mut T { 0 as *mut T }\n+const fn no_unsafe() { unsafe {} }\n+\n+// not ok\n+const fn foo8() -> i32 {\n+    unsafe { foo4() } //~ ERROR unsafe operations are not allowed in const fn\n+}\n+const fn foo9() -> *const String {\n+    unsafe { foo5::<String>() } //~ ERROR unsafe operations are not allowed in const fn\n+}\n+const fn foo10() -> *const Vec<std::cell::Cell<u32>> {\n+    unsafe { foo6::<Vec<std::cell::Cell<u32>>>() } //~ ERROR not allowed in const fn\n+}\n+const unsafe fn foo30_3(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n+//~^ dereferencing raw pointers in constant functions\n+\n+fn main() {}\n+\n+const unsafe fn no_union() {\n+    union Foo { x: (), y: () }\n+    Foo { x: () }.y //~ ERROR not allowed in const fn\n+    //~^ unions in const fn\n+}"}, {"sha": "17cba8569c148f8d7cd9bfeedd288c951924fa42", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -0,0 +1,59 @@\n+error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)\n+  --> $DIR/min_const_fn_unsafe.rs:29:51\n+   |\n+LL | const unsafe fn foo30_3(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n+   |                                                   ^^\n+   |\n+   = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n+\n+error[E0658]: unions in const fn are unstable (see issue #51909)\n+  --> $DIR/min_const_fn_unsafe.rs:36:5\n+   |\n+LL |     Foo { x: () }.y //~ ERROR not allowed in const fn\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn_union)] to the crate attributes to enable\n+\n+error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n+  --> $DIR/min_const_fn_unsafe.rs:21:14\n+   |\n+LL |     unsafe { foo4() } //~ ERROR unsafe operations are not allowed in const fn\n+   |              ^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n+  --> $DIR/min_const_fn_unsafe.rs:24:14\n+   |\n+LL |     unsafe { foo5::<String>() } //~ ERROR unsafe operations are not allowed in const fn\n+   |              ^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n+  --> $DIR/min_const_fn_unsafe.rs:27:14\n+   |\n+LL |     unsafe { foo6::<Vec<std::cell::Cell<u32>>>() } //~ ERROR not allowed in const fn\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: dereference of raw pointer is unsafe and unsafe operations are not allowed in const fn\n+  --> $DIR/min_const_fn_unsafe.rs:29:51\n+   |\n+LL | const unsafe fn foo30_3(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n+   |                                                   ^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error: access to union field is unsafe and unsafe operations are not allowed in const fn\n+  --> $DIR/min_const_fn_unsafe.rs:36:5\n+   |\n+LL |     Foo { x: () }.y //~ ERROR not allowed in const fn\n+   |     ^^^^^^^^^^^^^^^ access to union field\n+   |\n+   = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "438dd50f2bfa80aaca4ed97b47cf152bed233132", "filename": "src/test/ui/error-codes/E0308.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -4,8 +4,8 @@ error[E0308]: intrinsic has wrong type\n LL |     fn size_of<T>(); //~ ERROR E0308\n    |     ^^^^^^^^^^^^^^^^ expected (), found usize\n    |\n-   = note: expected type `unsafe extern \"rust-intrinsic\" fn()`\n-              found type `unsafe extern \"rust-intrinsic\" fn() -> usize`\n+   = note: expected type `extern \"rust-intrinsic\" fn()`\n+              found type `extern \"rust-intrinsic\" fn() -> usize`\n \n error: aborting due to previous error\n "}, {"sha": "f774658975b79d983021d8ee80f4c430704a83a2", "filename": "src/test/ui/feature-gates/feature-gate-const_fn.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test use of const fn without feature gate.\n+// Test use of const fn without the `const_fn` feature gate.\n+// `min_const_fn` is checked in its own file\n+#![feature(min_const_fn)]\n \n-const fn foo() -> usize { 0 } //~ ERROR const fn is unstable\n+const fn foo() -> usize { 0 } // ok\n \n trait Foo {\n     const fn foo() -> u32; //~ ERROR const fn is unstable\n@@ -20,12 +22,11 @@ trait Foo {\n }\n \n impl Foo {\n-    const fn baz() -> u32 { 0 } //~ ERROR const fn is unstable\n+    const fn baz() -> u32 { 0 } // ok\n }\n \n impl Foo for u32 {\n-    const fn foo() -> u32 { 0 } //~ ERROR const fn is unstable\n-                                //~| ERROR trait fns cannot be declared const\n+    const fn foo() -> u32 { 0 } //~ ERROR trait fns cannot be declared const\n }\n \n static FOO: usize = foo();"}, {"sha": "26c0c7877b4ecc6f51b03b1531e65a720dced564", "filename": "src/test/ui/feature-gates/feature-gate-const_fn.stderr", "status": "modified", "additions": 7, "deletions": 31, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -1,62 +1,38 @@\n error[E0379]: trait fns cannot be declared const\n-  --> $DIR/feature-gate-const_fn.rs:16:5\n+  --> $DIR/feature-gate-const_fn.rs:18:5\n    |\n LL |     const fn foo() -> u32; //~ ERROR const fn is unstable\n    |     ^^^^^ trait fns cannot be const\n \n error[E0379]: trait fns cannot be declared const\n-  --> $DIR/feature-gate-const_fn.rs:18:5\n+  --> $DIR/feature-gate-const_fn.rs:20:5\n    |\n LL |     const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable\n    |     ^^^^^ trait fns cannot be const\n \n error[E0379]: trait fns cannot be declared const\n-  --> $DIR/feature-gate-const_fn.rs:27:5\n+  --> $DIR/feature-gate-const_fn.rs:29:5\n    |\n-LL |     const fn foo() -> u32 { 0 } //~ ERROR const fn is unstable\n+LL |     const fn foo() -> u32 { 0 } //~ ERROR trait fns cannot be declared const\n    |     ^^^^^ trait fns cannot be const\n \n error[E0658]: const fn is unstable (see issue #24111)\n-  --> $DIR/feature-gate-const_fn.rs:13:1\n-   |\n-LL | const fn foo() -> usize { 0 } //~ ERROR const fn is unstable\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n-\n-error[E0658]: const fn is unstable (see issue #24111)\n-  --> $DIR/feature-gate-const_fn.rs:16:5\n+  --> $DIR/feature-gate-const_fn.rs:18:5\n    |\n LL |     const fn foo() -> u32; //~ ERROR const fn is unstable\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error[E0658]: const fn is unstable (see issue #24111)\n-  --> $DIR/feature-gate-const_fn.rs:18:5\n+  --> $DIR/feature-gate-const_fn.rs:20:5\n    |\n LL |     const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0658]: const fn is unstable (see issue #24111)\n-  --> $DIR/feature-gate-const_fn.rs:23:5\n-   |\n-LL |     const fn baz() -> u32 { 0 } //~ ERROR const fn is unstable\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n-\n-error[E0658]: const fn is unstable (see issue #24111)\n-  --> $DIR/feature-gate-const_fn.rs:27:5\n-   |\n-LL |     const fn foo() -> u32 { 0 } //~ ERROR const fn is unstable\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors occurred: E0379, E0658.\n For more information about an error, try `rustc --explain E0379`."}, {"sha": "e052ba9c8b43a6846c13d8d172b17ed358dfc3ed", "filename": "src/test/ui/feature-gates/feature-gate-min_const_fn.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test use of min_const_fn without feature gate.\n+\n+const fn foo() -> usize { 0 } //~ ERROR const fn is unstable\n+\n+trait Foo {\n+    const fn foo() -> u32; //~ ERROR const fn is unstable\n+                           //~| ERROR trait fns cannot be declared const\n+    const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable\n+                                //~| ERROR trait fns cannot be declared const\n+}\n+\n+impl Foo {\n+    const fn baz() -> u32 { 0 } //~ ERROR const fn is unstable\n+}\n+\n+impl Foo for u32 {\n+    const fn foo() -> u32 { 0 } //~ ERROR const fn is unstable\n+                                //~| ERROR trait fns cannot be declared const\n+}\n+\n+static FOO: usize = foo();\n+const BAR: usize = foo();\n+\n+macro_rules! constant {\n+    ($n:ident: $t:ty = $v:expr) => {\n+        const $n: $t = $v;\n+    }\n+}\n+\n+constant! {\n+    BAZ: usize = foo()\n+}\n+\n+fn main() {\n+    let x: [usize; foo()] = [];\n+}"}, {"sha": "aa7750362b2fd363d89c113eff5575d66a7a5058", "filename": "src/test/ui/feature-gates/feature-gate-min_const_fn.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -0,0 +1,62 @@\n+error[E0379]: trait fns cannot be declared const\n+  --> $DIR/feature-gate-min_const_fn.rs:16:5\n+   |\n+LL |     const fn foo() -> u32; //~ ERROR const fn is unstable\n+   |     ^^^^^ trait fns cannot be const\n+\n+error[E0379]: trait fns cannot be declared const\n+  --> $DIR/feature-gate-min_const_fn.rs:18:5\n+   |\n+LL |     const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable\n+   |     ^^^^^ trait fns cannot be const\n+\n+error[E0379]: trait fns cannot be declared const\n+  --> $DIR/feature-gate-min_const_fn.rs:27:5\n+   |\n+LL |     const fn foo() -> u32 { 0 } //~ ERROR const fn is unstable\n+   |     ^^^^^ trait fns cannot be const\n+\n+error[E0658]: const fn is unstable (see issue #53555)\n+  --> $DIR/feature-gate-min_const_fn.rs:13:1\n+   |\n+LL | const fn foo() -> usize { 0 } //~ ERROR const fn is unstable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(min_const_fn)] to the crate attributes to enable\n+\n+error[E0658]: const fn is unstable (see issue #24111)\n+  --> $DIR/feature-gate-min_const_fn.rs:16:5\n+   |\n+LL |     const fn foo() -> u32; //~ ERROR const fn is unstable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0658]: const fn is unstable (see issue #24111)\n+  --> $DIR/feature-gate-min_const_fn.rs:18:5\n+   |\n+LL |     const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn)] to the crate attributes to enable\n+\n+error[E0658]: const fn is unstable (see issue #53555)\n+  --> $DIR/feature-gate-min_const_fn.rs:23:5\n+   |\n+LL |     const fn baz() -> u32 { 0 } //~ ERROR const fn is unstable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(min_const_fn)] to the crate attributes to enable\n+\n+error[E0658]: const fn is unstable (see issue #53555)\n+  --> $DIR/feature-gate-min_const_fn.rs:27:5\n+   |\n+LL |     const fn foo() -> u32 { 0 } //~ ERROR const fn is unstable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(min_const_fn)] to the crate attributes to enable\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors occurred: E0379, E0658.\n+For more information about an error, try `rustc --explain E0379`."}, {"sha": "63ae18cf9c2fa1d3c0cf735e778afb8aae26c965", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -10,7 +10,7 @@\n \n //https://github.com/rust-lang/rust/issues/31364\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n const fn a() -> usize { b() }\n const fn b() -> usize { a() }\n const ARR: [i32; a()] = [5; 6]; //~ ERROR could not evaluate constant expression"}, {"sha": "bd50f93945c51f00b0dfb18b93c75851bab993c2", "filename": "src/test/ui/issues/issue-44415.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fissues%2Fissue-44415.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Fissues%2Fissue-44415.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44415.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -10,7 +10,7 @@\n \n //~^^^^^^^^^^ ERROR cycle detected when computing layout of\n \n-#![feature(const_fn)]\n+\n #![feature(core_intrinsics)]\n \n use std::intrinsics;"}, {"sha": "fe0bb7533a86f316f53ed19a548d763ea4a136bc", "filename": "src/test/ui/unsafe/unsafe-const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea32f1b775b3f37fc4abfa6391c1bebe48af9d1/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.rs?ref=fea32f1b775b3f37fc4abfa6391c1bebe48af9d1", "patch": "@@ -10,7 +10,7 @@\n \n // A quick test of 'unsafe const fn' functionality\n \n-#![feature(const_fn)]\n+#![feature(min_const_fn)]\n \n const unsafe fn dummy(v: u32) -> u32 {\n     !v"}]}