{"sha": "37fe2b60d5a31c6dda957d5ee42c1f1e6f408d2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZmUyYjYwZDVhMzFjNmRkYTk1N2Q1ZWU0MmMxZjFlNmY0MDhkMmU=", "commit": {"author": {"name": "Junyoung Cho", "email": "june0.cho@samsung.com", "date": "2013-05-15T04:49:30Z"}, "committer": {"name": "Junyoung Cho", "email": "june0.cho@samsung.com", "date": "2013-05-15T12:33:33Z"}, "message": "Merge type_span and type_def, and ditto with value_span and value_def", "tree": {"sha": "85e44f5b199f97f1290ace29ba176c2fd621e51f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85e44f5b199f97f1290ace29ba176c2fd621e51f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37fe2b60d5a31c6dda957d5ee42c1f1e6f408d2e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37fe2b60d5a31c6dda957d5ee42c1f1e6f408d2e", "html_url": "https://github.com/rust-lang/rust/commit/37fe2b60d5a31c6dda957d5ee42c1f1e6f408d2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37fe2b60d5a31c6dda957d5ee42c1f1e6f408d2e/comments", "author": {"login": "june0cho", "id": 3859124, "node_id": "MDQ6VXNlcjM4NTkxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3859124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/june0cho", "html_url": "https://github.com/june0cho", "followers_url": "https://api.github.com/users/june0cho/followers", "following_url": "https://api.github.com/users/june0cho/following{/other_user}", "gists_url": "https://api.github.com/users/june0cho/gists{/gist_id}", "starred_url": "https://api.github.com/users/june0cho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/june0cho/subscriptions", "organizations_url": "https://api.github.com/users/june0cho/orgs", "repos_url": "https://api.github.com/users/june0cho/repos", "events_url": "https://api.github.com/users/june0cho/events{/privacy}", "received_events_url": "https://api.github.com/users/june0cho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "june0cho", "id": 3859124, "node_id": "MDQ6VXNlcjM4NTkxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3859124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/june0cho", "html_url": "https://github.com/june0cho", "followers_url": "https://api.github.com/users/june0cho/followers", "following_url": "https://api.github.com/users/june0cho/following{/other_user}", "gists_url": "https://api.github.com/users/june0cho/gists{/gist_id}", "starred_url": "https://api.github.com/users/june0cho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/june0cho/subscriptions", "organizations_url": "https://api.github.com/users/june0cho/orgs", "repos_url": "https://api.github.com/users/june0cho/repos", "events_url": "https://api.github.com/users/june0cho/events{/privacy}", "received_events_url": "https://api.github.com/users/june0cho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fc6b0998b3bd8c7ef796a9f4c795814b4ad30ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc6b0998b3bd8c7ef796a9f4c795814b4ad30ea", "html_url": "https://github.com/rust-lang/rust/commit/2fc6b0998b3bd8c7ef796a9f4c795814b4ad30ea"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "ba24ea63a10112b184fa911a70d291fd0c9ee099", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/37fe2b60d5a31c6dda957d5ee42c1f1e6f408d2e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37fe2b60d5a31c6dda957d5ee42c1f1e6f408d2e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=37fe2b60d5a31c6dda957d5ee42c1f1e6f408d2e", "patch": "@@ -512,25 +512,22 @@ pub impl Module {\n pub struct TypeNsDef {\n     privacy: Privacy,\n     module_def: Option<@mut Module>,\n-    type_def: Option<def>\n+    type_def: Option<def>,\n+    type_span: Option<span>\n }\n \n // Records a possibly-private value definition.\n pub struct ValueNsDef {\n     privacy: Privacy,\n     def: def,\n+    value_span: Option<span>,\n }\n \n // Records the definitions (at most one for each namespace) that a name is\n // bound to.\n pub struct NameBindings {\n     type_def: Option<TypeNsDef>,    //< Meaning in type namespace.\n     value_def: Option<ValueNsDef>,  //< Meaning in value namespace.\n-\n-    // For error reporting\n-    // FIXME (#3783): Merge me into TypeNsDef and ValueNsDef.\n-    type_span: Option<span>,\n-    value_span: Option<span>,\n }\n \n pub impl NameBindings {\n@@ -548,18 +545,19 @@ pub impl NameBindings {\n                 self.type_def = Some(TypeNsDef {\n                     privacy: privacy,\n                     module_def: Some(module_),\n-                    type_def: None\n+                    type_def: None,\n+                    type_span: Some(sp)\n                 });\n             }\n             Some(copy type_def) => {\n                 self.type_def = Some(TypeNsDef {\n                     privacy: privacy,\n                     module_def: Some(module_),\n+                    type_span: Some(sp),\n                     .. type_def\n                 });\n             }\n         }\n-        self.type_span = Some(sp);\n     }\n \n     /// Records a type definition.\n@@ -570,24 +568,24 @@ pub impl NameBindings {\n                 self.type_def = Some(TypeNsDef {\n                     privacy: privacy,\n                     module_def: None,\n-                    type_def: Some(def)\n+                    type_def: Some(def),\n+                    type_span: Some(sp)\n                 });\n             }\n             Some(copy type_def) => {\n                 self.type_def = Some(TypeNsDef {\n                     privacy: privacy,\n                     type_def: Some(def),\n+                    type_span: Some(sp),\n                     .. type_def\n                 });\n             }\n         }\n-        self.type_span = Some(sp);\n     }\n \n     /// Records a value definition.\n     fn define_value(@mut self, privacy: Privacy, def: def, sp: span) {\n-        self.value_def = Some(ValueNsDef { privacy: privacy, def: def });\n-        self.value_span = Some(sp);\n+        self.value_def = Some(ValueNsDef { privacy: privacy, def: def, value_span: Some(sp) });\n     }\n \n     /// Returns the module node if applicable.\n@@ -686,8 +684,18 @@ pub impl NameBindings {\n     fn span_for_namespace(&self, namespace: Namespace) -> Option<span> {\n         if self.defined_in_namespace(namespace) {\n             match namespace {\n-                TypeNS  => self.type_span,\n-                ValueNS => self.value_span,\n+                TypeNS  => {\n+                    match self.type_def {\n+                        None => None,\n+                        Some(type_def) => type_def.type_span\n+                    }\n+                }\n+                ValueNS => {\n+                    match self.value_def {\n+                        None => None,\n+                        Some(value_def) => value_def.value_span\n+                    }\n+                }\n             }\n         } else {\n             None\n@@ -698,9 +706,7 @@ pub impl NameBindings {\n pub fn NameBindings() -> NameBindings {\n     NameBindings {\n         type_def: None,\n-        value_def: None,\n-        type_span: None,\n-        value_span: None\n+        value_def: None\n     }\n }\n \n@@ -2110,10 +2116,9 @@ pub impl Resolver {\n                 privacy: Public,\n                 module_def: Some(module),\n                 type_def: None,\n+                type_span: None\n             }),\n             value_def: None,\n-            type_span: None,\n-            value_span: None,\n         }\n     }\n "}]}