{"sha": "cc33ce6fd07467bca1006823ae7336e84054726c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMzNjZTZmZDA3NDY3YmNhMTAwNjgyM2FlNzMzNmU4NDA1NDcyNmM=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-12-20T17:17:58Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-12-20T17:35:59Z"}, "message": "Add String::push_with_ascii_fast_path, bench it against String::push\n\n`String::push(&mut self, ch: char)` currently has a single code path\nthat calls `Char::encode_utf8`.\nPerhaps it could be faster for ASCII `char`s, which are represented as\na single byte in UTF-8.\n\nThis commit leaves the method unchanged,\nadds a copy of it with the fast path,\nand adds benchmarks to compare them.\n\nResults show that the fast path very significantly improves the performance\nof repeatedly pushing an ASCII `char`,\nbut does not significantly affect the performance for a non-ASCII `char`\n(where the fast path is not taken).\n\nOutput of `make check-stage1-collections NO_REBUILD=1 PLEASE_BENCH=1 TESTNAME=string::tests::bench_push`\n\n```\ntest string::tests::bench_push_char_one_byte                 ... bench:     59552 ns/iter (+/- 2132) = 167 MB/s\ntest string::tests::bench_push_char_one_byte_with_fast_path  ... bench:      6563 ns/iter (+/- 658) = 1523 MB/s\ntest string::tests::bench_push_char_two_bytes                ... bench:     71520 ns/iter (+/- 3541) = 279 MB/s\ntest string::tests::bench_push_char_two_bytes_with_slow_path ... bench:     71452 ns/iter (+/- 4202) = 279 MB/s\ntest string::tests::bench_push_str                           ... bench:        24 ns/iter (+/- 2)\ntest string::tests::bench_push_str_one_byte                  ... bench:     38910 ns/iter (+/- 2477) = 257 MB/s\n```\n\nA benchmark of pushing a one-byte-long `&str` is added for comparison,\nbut its performance [has varied a lot lately](\nhttps://github.com/rust-lang/rust/pull/19640#issuecomment-67741561).\n(When the input is fixed, `s.push_str(\"x\")` could be used\ninstead of `s.push('x')`.)", "tree": {"sha": "1913ca5f937f77499546fb11cda5a03e48816743", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1913ca5f937f77499546fb11cda5a03e48816743"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc33ce6fd07467bca1006823ae7336e84054726c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc33ce6fd07467bca1006823ae7336e84054726c", "html_url": "https://github.com/rust-lang/rust/commit/cc33ce6fd07467bca1006823ae7336e84054726c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc33ce6fd07467bca1006823ae7336e84054726c/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f51ad2420776925c12be67a7bf38ac28343fd1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f51ad2420776925c12be67a7bf38ac28343fd1f", "html_url": "https://github.com/rust-lang/rust/commit/8f51ad2420776925c12be67a7bf38ac28343fd1f"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "d894f0b58d9bd7a3dd578f924c65fff29d6c711a", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/cc33ce6fd07467bca1006823ae7336e84054726c/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc33ce6fd07467bca1006823ae7336e84054726c/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=cc33ce6fd07467bca1006823ae7336e84054726c", "patch": "@@ -528,6 +528,29 @@ impl String {\n         }\n     }\n \n+    #[inline]\n+    fn push_with_ascii_fast_path(&mut self, ch: char) {\n+        if (ch as u32) < 0x80 {\n+            self.vec.push(ch as u8);\n+            return;\n+        }\n+\n+        let cur_len = self.len();\n+        // This may use up to 4 bytes.\n+        self.vec.reserve(4);\n+\n+        unsafe {\n+            // Attempt to not use an intermediate buffer by just pushing bytes\n+            // directly onto this string.\n+            let slice = RawSlice {\n+                data: self.vec.as_ptr().offset(cur_len as int),\n+                len: 4,\n+            };\n+            let used = ch.encode_utf8(mem::transmute(slice)).unwrap_or(0);\n+            self.vec.set_len(cur_len + used);\n+        }\n+    }\n+\n     /// Works with the underlying buffer as a byte slice.\n     ///\n     /// # Examples\n@@ -1408,6 +1431,63 @@ mod tests {\n         });\n     }\n \n+    const REPETITIONS: u64 = 10_000;\n+\n+    #[bench]\n+    fn bench_push_str_one_byte(b: &mut Bencher) {\n+        b.bytes = REPETITIONS;\n+        b.iter(|| {\n+            let mut r = String::new();\n+            for _ in range(0, REPETITIONS) {\n+                r.push_str(\"a\")\n+            }\n+        });\n+    }\n+\n+    #[bench]\n+    fn bench_push_char_one_byte(b: &mut Bencher) {\n+        b.bytes = REPETITIONS;\n+        b.iter(|| {\n+            let mut r = String::new();\n+            for _ in range(0, REPETITIONS) {\n+                r.push('a')\n+            }\n+        });\n+    }\n+\n+    #[bench]\n+    fn bench_push_char_one_byte_with_fast_path(b: &mut Bencher) {\n+        b.bytes = REPETITIONS;\n+        b.iter(|| {\n+            let mut r = String::new();\n+            for _ in range(0, REPETITIONS) {\n+                r.push_with_ascii_fast_path('a')\n+            }\n+        });\n+    }\n+\n+    #[bench]\n+    fn bench_push_char_two_bytes(b: &mut Bencher) {\n+        b.bytes = REPETITIONS * 2;\n+        b.iter(|| {\n+            let mut r = String::new();\n+            for _ in range(0, REPETITIONS) {\n+                r.push('\u00e2')\n+            }\n+        });\n+    }\n+\n+    #[bench]\n+    fn bench_push_char_two_bytes_with_slow_path(b: &mut Bencher) {\n+        b.bytes = REPETITIONS * 2;\n+        b.iter(|| {\n+            let mut r = String::new();\n+            for _ in range(0, REPETITIONS) {\n+                r.push_with_ascii_fast_path('\u00e2')\n+            }\n+        });\n+    }\n+\n     #[bench]\n     fn from_utf8_lossy_100_ascii(b: &mut Bencher) {\n         let s = b\"Hello there, the quick brown fox jumped over the lazy dog! \\"}]}