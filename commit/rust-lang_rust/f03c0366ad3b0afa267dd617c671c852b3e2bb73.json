{"sha": "f03c0366ad3b0afa267dd617c671c852b3e2bb73", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwM2MwMzY2YWQzYjBhZmEyNjdkZDYxN2M2NzFjODUyYjNlMmJiNzM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-03T10:24:45Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-03T22:10:08Z"}, "message": "add \"free region helpers\"", "tree": {"sha": "ee5541e28d6d1de52c9c1ef1bcbad86f753a3291", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee5541e28d6d1de52c9c1ef1bcbad86f753a3291"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f03c0366ad3b0afa267dd617c671c852b3e2bb73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f03c0366ad3b0afa267dd617c671c852b3e2bb73", "html_url": "https://github.com/rust-lang/rust/commit/f03c0366ad3b0afa267dd617c671c852b3e2bb73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f03c0366ad3b0afa267dd617c671c852b3e2bb73/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dddd4075b1cdab90a3bf10f1687f3d0ed2ee5bec", "url": "https://api.github.com/repos/rust-lang/rust/commits/dddd4075b1cdab90a3bf10f1687f3d0ed2ee5bec", "html_url": "https://github.com/rust-lang/rust/commit/dddd4075b1cdab90a3bf10f1687f3d0ed2ee5bec"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "076a19fb4ed7216ddd9e9a385348a29eb48fa7ea", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f03c0366ad3b0afa267dd617c671c852b3e2bb73/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03c0366ad3b0afa267dd617c671c852b3e2bb73/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=f03c0366ad3b0afa267dd617c671c852b3e2bb73", "patch": "@@ -253,13 +253,34 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         value.fold_with(&mut RegionFolder::new(self, skipped_regions, &mut f))\n     }\n \n-    pub fn for_each_free_region<T,F>(self,\n-                                     value: &T,\n-                                     callback: F)\n-        where F: FnMut(ty::Region<'tcx>),\n-              T: TypeFoldable<'tcx>,\n-    {\n-        value.visit_with(&mut RegionVisitor {\n+    /// Invoke `callback` on every region appearing free in `value`.\n+    pub fn for_each_free_region(\n+        self,\n+        value: &impl TypeFoldable<'tcx>,\n+        mut callback: impl FnMut(ty::Region<'tcx>),\n+    ) {\n+        self.any_free_region_meets(value, |r| {\n+            callback(r);\n+            false\n+        });\n+    }\n+\n+    /// True if `callback` returns true for every region appearing free in `value`.\n+    pub fn all_free_regions_meet(\n+        self,\n+        value: &impl TypeFoldable<'tcx>,\n+        mut callback: impl FnMut(ty::Region<'tcx>) -> bool,\n+    ) -> bool {\n+        !self.any_free_region_meets(value, |r| !callback(r))\n+    }\n+\n+    /// True if `callback` returns true for some region appearing free in `value`.\n+    pub fn any_free_region_meets(\n+        self,\n+        value: &impl TypeFoldable<'tcx>,\n+        callback: impl FnMut(ty::Region<'tcx>) -> bool,\n+    ) -> bool {\n+        return value.visit_with(&mut RegionVisitor {\n             outer_index: ty::INNERMOST,\n             callback\n         });\n@@ -287,25 +308,22 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         impl<'tcx, F> TypeVisitor<'tcx> for RegionVisitor<F>\n-            where F : FnMut(ty::Region<'tcx>)\n+            where F: FnMut(ty::Region<'tcx>) -> bool\n         {\n             fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> bool {\n                 self.outer_index.shift_in(1);\n-                t.skip_binder().visit_with(self);\n+                let result = t.skip_binder().visit_with(self);\n                 self.outer_index.shift_out(1);\n-\n-                false // keep visiting\n+                result\n             }\n \n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n                 match *r {\n                     ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {\n-                        /* ignore bound regions */\n+                        false // ignore bound regions, keep visiting\n                     }\n                     _ => (self.callback)(r),\n                 }\n-\n-                false // keep visiting\n             }\n         }\n     }"}]}