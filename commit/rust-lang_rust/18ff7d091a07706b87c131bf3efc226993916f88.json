{"sha": "18ff7d091a07706b87c131bf3efc226993916f88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZmY3ZDA5MWEwNzcwNmI4N2MxMzFiZjNlZmMyMjY5OTM5MTZmODg=", "commit": {"author": {"name": "Without Boats", "email": "boats@mozilla.com", "date": "2018-05-17T05:55:18Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-06-22T05:29:47Z"}, "message": "Parse async fn header.\n\nThis is gated on edition 2018 & the `async_await` feature gate.\n\nThe parser will accept `async fn` and `async unsafe fn` as fn\nitems. Along the same lines as `const fn`, only `async unsafe fn`\nis permitted, not `unsafe async fn`.The parser will not accept\n`async` functions as trait methods.\n\nTo do a little code clean up, four fields of the function type\nstruct have been merged into the new `FnHeader` struct: constness,\nasyncness, unsafety, and ABI.\n\nAlso, a small bug in HIR printing is fixed: it previously printed\n`const unsafe fn` as `unsafe const fn`, which is grammatically\nincorrect.", "tree": {"sha": "733af2f6f405efc1f1c3f79471a61c9c1d128cd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/733af2f6f405efc1f1c3f79471a61c9c1d128cd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18ff7d091a07706b87c131bf3efc226993916f88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18ff7d091a07706b87c131bf3efc226993916f88", "html_url": "https://github.com/rust-lang/rust/commit/18ff7d091a07706b87c131bf3efc226993916f88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18ff7d091a07706b87c131bf3efc226993916f88/comments", "author": null, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b17d31f1147f840231c43b1ac1478a497af20df", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b17d31f1147f840231c43b1ac1478a497af20df", "html_url": "https://github.com/rust-lang/rust/commit/4b17d31f1147f840231c43b1ac1478a497af20df"}], "stats": {"total": 655, "additions": 367, "deletions": 288}, "files": [{"sha": "766909f5723b65ff64b4a4e439b6a9f213473f10", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -41,7 +41,6 @@\n //! This order consistency is required in a few places in rustc, for\n //! example generator inference, and possibly also HIR borrowck.\n \n-use rustc_target::spec::abi::Abi;\n use syntax::ast::{NodeId, CRATE_NODE_ID, Ident, Name, Attribute};\n use syntax_pos::Span;\n use hir::*;\n@@ -54,8 +53,8 @@ use std::u32;\n \n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum FnKind<'a> {\n-    /// fn foo() or extern \"Abi\" fn foo()\n-    ItemFn(Name, &'a Generics, Unsafety, Constness, Abi, &'a Visibility, &'a [Attribute]),\n+    /// #[xxx] pub async/const/extern \"Abi\" fn foo()\n+    ItemFn(Name, &'a Generics, FnHeader, &'a Visibility, &'a [Attribute]),\n \n     /// fn foo(&self)\n     Method(Name, &'a MethodSig, Option<&'a Visibility>, &'a [Attribute]),\n@@ -479,12 +478,10 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_ty(typ);\n             visitor.visit_nested_body(body);\n         }\n-        ItemFn(ref declaration, unsafety, constness, abi, ref generics, body_id) => {\n+        ItemFn(ref declaration, header, ref generics, body_id) => {\n             visitor.visit_fn(FnKind::ItemFn(item.name,\n                                             generics,\n-                                            unsafety,\n-                                            constness,\n-                                            abi,\n+                                            header,\n                                             &item.vis,\n                                             &item.attrs),\n                              declaration,"}, {"sha": "16405b602bea21ece8d33dffbcace7ba2627e967", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -2284,7 +2284,7 @@ impl<'a> LoweringContext<'a> {\n                 let value = self.lower_body(None, |this| this.lower_expr(e));\n                 hir::ItemConst(self.lower_ty(t, ImplTraitContext::Disallowed), value)\n             }\n-            ItemKind::Fn(ref decl, unsafety, constness, abi, ref generics, ref body) => {\n+            ItemKind::Fn(ref decl, header, ref generics, ref body) => {\n                 let fn_def_id = self.resolver.definitions().local_def_id(id);\n                 self.with_new_scopes(|this| {\n                     let body_id = this.lower_body(Some(decl), |this| {\n@@ -2300,9 +2300,7 @@ impl<'a> LoweringContext<'a> {\n \n                     hir::ItemFn(\n                         fn_decl,\n-                        this.lower_unsafety(unsafety),\n-                        this.lower_constness(constness),\n-                        abi,\n+                        this.lower_fn_header(header),\n                         generics,\n                         body_id,\n                     )\n@@ -2891,9 +2889,7 @@ impl<'a> LoweringContext<'a> {\n         impl_trait_return_allow: bool,\n     ) -> hir::MethodSig {\n         hir::MethodSig {\n-            abi: sig.abi,\n-            unsafety: self.lower_unsafety(sig.unsafety),\n-            constness: self.lower_constness(sig.constness),\n+            header: self.lower_fn_header(sig.header),\n             decl: self.lower_fn_decl(&sig.decl, Some(fn_def_id), impl_trait_return_allow),\n         }\n     }\n@@ -2905,6 +2901,15 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n+    fn lower_fn_header(&mut self, h: FnHeader) -> hir::FnHeader {\n+        hir::FnHeader {\n+            unsafety: self.lower_unsafety(h.unsafety),\n+            asyncness: self.lower_asyncness(h.asyncness),\n+            constness: self.lower_constness(h.constness),\n+            abi: h.abi,\n+        }\n+    }\n+\n     fn lower_unsafety(&mut self, u: Unsafety) -> hir::Unsafety {\n         match u {\n             Unsafety::Unsafe => hir::Unsafety::Unsafe,\n@@ -2919,6 +2924,13 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n+    fn lower_asyncness(&mut self, a: IsAsync) -> hir::IsAsync {\n+        match a {\n+            IsAsync::Async => hir::IsAsync::Async,\n+            IsAsync::NotAsync => hir::IsAsync::NotAsync,\n+        }\n+    }\n+\n     fn lower_unop(&mut self, u: UnOp) -> hir::UnOp {\n         match u {\n             UnOp::Deref => hir::UnDeref,"}, {"sha": "f665ced3dbcf12de404a66590c2bab7e9b33d70c", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -25,7 +25,6 @@ use hir as ast;\n use hir::map::{self, Node};\n use hir::{Expr, FnDecl};\n use hir::intravisit::FnKind;\n-use rustc_target::spec::abi;\n use syntax::ast::{Attribute, Name, NodeId};\n use syntax_pos::Span;\n \n@@ -105,9 +104,7 @@ impl<'a> Code<'a> {\n struct ItemFnParts<'a> {\n     name:     Name,\n     decl:     &'a ast::FnDecl,\n-    unsafety: ast::Unsafety,\n-    constness: ast::Constness,\n-    abi:      abi::Abi,\n+    header:   ast::FnHeader,\n     vis:      &'a ast::Visibility,\n     generics: &'a ast::Generics,\n     body:     ast::BodyId,\n@@ -183,31 +180,31 @@ impl<'a> FnLikeNode<'a> {\n \n     pub fn constness(self) -> ast::Constness {\n         match self.kind() {\n-            FnKind::ItemFn(_, _, _, constness, ..) => {\n-                constness\n-            }\n-            FnKind::Method(_, m, ..) => {\n-                m.constness\n-            }\n+            FnKind::ItemFn(_, _, header, ..) => header.constness,\n+            FnKind::Method(_, m, ..) => m.header.constness,\n             _ => ast::Constness::NotConst\n         }\n     }\n \n+    pub fn asyncness(self) -> ast::IsAsync {\n+        match self.kind() {\n+            FnKind::ItemFn(_, _, header, ..) => header.asyncness,\n+            FnKind::Method(_, m, ..) => m.header.asyncness,\n+            _ => ast::IsAsync::NotAsync\n+        }\n+    }\n+\n     pub fn unsafety(self) -> ast::Unsafety {\n         match self.kind() {\n-            FnKind::ItemFn(_, _, unsafety, ..) => {\n-                unsafety\n-            }\n-            FnKind::Method(_, m, ..) => {\n-                m.unsafety\n-            }\n+            FnKind::ItemFn(_, _, header, ..) => header.unsafety,\n+            FnKind::Method(_, m, ..) => m.header.unsafety,\n             _ => ast::Unsafety::Normal\n         }\n     }\n \n     pub fn kind(self) -> FnKind<'a> {\n         let item = |p: ItemFnParts<'a>| -> FnKind<'a> {\n-            FnKind::ItemFn(p.name, p.generics, p.unsafety, p.constness, p.abi, p.vis, p.attrs)\n+            FnKind::ItemFn(p.name, p.generics, p.header, p.vis, p.attrs)\n         };\n         let closure = |c: ClosureParts<'a>| {\n             FnKind::Closure(c.attrs)\n@@ -232,19 +229,17 @@ impl<'a> FnLikeNode<'a> {\n     {\n         match self.node {\n             map::NodeItem(i) => match i.node {\n-                ast::ItemFn(ref decl, unsafety, constness, abi, ref generics, block) =>\n+                ast::ItemFn(ref decl, header, ref generics, block) =>\n                     item_fn(ItemFnParts {\n                         id: i.id,\n                         name: i.name,\n                         decl: &decl,\n-                        unsafety,\n                         body: block,\n-                        generics,\n-                        abi,\n                         vis: &i.vis,\n-                        constness,\n                         span: i.span,\n                         attrs: &i.attrs,\n+                        header,\n+                        generics,\n                     }),\n                 _ => bug!(\"item FnLikeNode that is not fn-like\"),\n             },"}, {"sha": "4ffe4f262ae1887e801abe30f92d981bed59e674", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -210,7 +210,7 @@ impl<'hir> MapEntry<'hir> {\n                 match item.node {\n                     ItemConst(_, body) |\n                     ItemStatic(.., body) |\n-                    ItemFn(_, _, _, _, _, body) => Some(body),\n+                    ItemFn(_, _, _, body) => Some(body),\n                     _ => None,\n                 }\n             }"}, {"sha": "9479234cf11d19ef7975148ffc28f74b3f26e356", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -1506,9 +1506,7 @@ pub struct MutTy {\n /// Represents a method's signature in a trait declaration or implementation.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct MethodSig {\n-    pub unsafety: Unsafety,\n-    pub constness: Constness,\n-    pub abi: Abi,\n+    pub header: FnHeader,\n     pub decl: P<FnDecl>,\n }\n \n@@ -1736,7 +1734,13 @@ pub enum IsAuto {\n     No\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq,PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum IsAsync {\n+    Async,\n+    NotAsync,\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Unsafety {\n     Unsafe,\n     Normal,\n@@ -2012,6 +2016,25 @@ pub struct Item {\n     pub span: Span,\n }\n \n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub struct FnHeader {\n+    pub unsafety: Unsafety,\n+    pub constness: Constness,\n+    pub asyncness: IsAsync,\n+    pub abi: Abi,\n+}\n+\n+impl Default for FnHeader {\n+    fn default() -> FnHeader {\n+        FnHeader {\n+            unsafety: Unsafety::Normal,\n+            constness: Constness::NotConst,\n+            asyncness: IsAsync::NotAsync,\n+            abi: Abi::Rust,\n+        }\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Item_ {\n     /// An `extern crate` item, with optional *original* crate name if the crate was renamed.\n@@ -2031,7 +2054,7 @@ pub enum Item_ {\n     /// A `const` item\n     ItemConst(P<Ty>, BodyId),\n     /// A function declaration\n-    ItemFn(P<FnDecl>, Unsafety, Constness, Abi, Generics, BodyId),\n+    ItemFn(P<FnDecl>, FnHeader, Generics, BodyId),\n     /// A module\n     ItemMod(Mod),\n     /// An external module\n@@ -2096,7 +2119,7 @@ impl Item_ {\n \n     pub fn generics(&self) -> Option<&Generics> {\n         Some(match *self {\n-            ItemFn(_, _, _, _, ref generics, _) |\n+            ItemFn(_, _, ref generics, _) |\n             ItemTy(_, ref generics) |\n             ItemEnum(_, ref generics) |\n             ItemStruct(_, ref generics) |"}, {"sha": "4db2247103e6c6da465f2b241f81a2fad55eb800", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -459,9 +459,7 @@ impl<'a> State<'a> {\n             hir::ForeignItemFn(ref decl, ref arg_names, ref generics) => {\n                 self.head(\"\")?;\n                 self.print_fn(decl,\n-                              hir::Unsafety::Normal,\n-                              hir::Constness::NotConst,\n-                              Abi::Rust,\n+                              hir::FnHeader::default(),\n                               Some(item.name),\n                               generics,\n                               &item.vis,\n@@ -598,12 +596,10 @@ impl<'a> State<'a> {\n                 self.s.word(\";\")?;\n                 self.end()?; // end the outer cbox\n             }\n-            hir::ItemFn(ref decl, unsafety, constness, abi, ref typarams, body) => {\n+            hir::ItemFn(ref decl, header, ref typarams, body) => {\n                 self.head(\"\")?;\n                 self.print_fn(decl,\n-                              unsafety,\n-                              constness,\n-                              abi,\n+                              header,\n                               Some(item.name),\n                               typarams,\n                               &item.vis,\n@@ -935,9 +931,7 @@ impl<'a> State<'a> {\n                             body_id: Option<hir::BodyId>)\n                             -> io::Result<()> {\n         self.print_fn(&m.decl,\n-                      m.unsafety,\n-                      m.constness,\n-                      m.abi,\n+                      m.header,\n                       Some(name),\n                       generics,\n                       vis,\n@@ -1986,16 +1980,14 @@ impl<'a> State<'a> {\n \n     pub fn print_fn(&mut self,\n                     decl: &hir::FnDecl,\n-                    unsafety: hir::Unsafety,\n-                    constness: hir::Constness,\n-                    abi: Abi,\n+                    header: hir::FnHeader,\n                     name: Option<ast::Name>,\n                     generics: &hir::Generics,\n                     vis: &hir::Visibility,\n                     arg_names: &[Spanned<ast::Name>],\n                     body_id: Option<hir::BodyId>)\n                     -> io::Result<()> {\n-        self.print_fn_header_info(unsafety, constness, abi, vis)?;\n+        self.print_fn_header_info(header, vis)?;\n \n         if let Some(name) = name {\n             self.nbsp()?;\n@@ -2260,9 +2252,10 @@ impl<'a> State<'a> {\n             span: syntax_pos::DUMMY_SP,\n         };\n         self.print_fn(decl,\n-                      unsafety,\n-                      hir::Constness::NotConst,\n-                      abi,\n+                      hir::FnHeader {\n+                          unsafety, abi,\n+                          ..hir::FnHeader::default()\n+                      },\n                       name,\n                       &generics,\n                       &hir::Inherited,\n@@ -2333,22 +2326,26 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_fn_header_info(&mut self,\n-                                unsafety: hir::Unsafety,\n-                                constness: hir::Constness,\n-                                abi: Abi,\n+                                header: hir::FnHeader,\n                                 vis: &hir::Visibility)\n                                 -> io::Result<()> {\n         self.s.word(&visibility_qualified(vis, \"\"))?;\n-        self.print_unsafety(unsafety)?;\n \n-        match constness {\n+        match header.constness {\n             hir::Constness::NotConst => {}\n             hir::Constness::Const => self.word_nbsp(\"const\")?,\n         }\n \n-        if abi != Abi::Rust {\n+        match header.asyncness {\n+            hir::IsAsync::NotAsync => {}\n+            hir::IsAsync::Async => self.word_nbsp(\"async\")?,\n+        }\n+\n+        self.print_unsafety(header.unsafety)?;\n+\n+        if header.abi != Abi::Rust {\n             self.word_nbsp(\"extern\")?;\n-            self.word_nbsp(&abi.to_string())?;\n+            self.word_nbsp(&header.abi.to_string())?;\n         }\n \n         self.s.word(\"fn\")"}, {"sha": "b1429247ab0718b6ca624e41143cb3e0fe534363", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -272,9 +272,7 @@ impl_stable_hash_for!(struct hir::MutTy {\n });\n \n impl_stable_hash_for!(struct hir::MethodSig {\n-    unsafety,\n-    constness,\n-    abi,\n+    header,\n     decl\n });\n \n@@ -285,6 +283,13 @@ impl_stable_hash_for!(struct hir::TypeBinding {\n     span\n });\n \n+impl_stable_hash_for!(struct hir::FnHeader {\n+    unsafety,\n+    constness,\n+    asyncness,\n+    abi\n+});\n+\n impl<'a> HashStable<StableHashingContext<'a>> for hir::Ty {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n@@ -897,7 +902,7 @@ impl_stable_hash_for!(enum hir::Item_ {\n     ItemUse(path, use_kind),\n     ItemStatic(ty, mutability, body_id),\n     ItemConst(ty, body_id),\n-    ItemFn(fn_decl, unsafety, constness, abi, generics, body_id),\n+    ItemFn(fn_decl, header, generics, body_id),\n     ItemMod(module),\n     ItemForeignMod(foreign_mod),\n     ItemGlobalAsm(global_asm),\n@@ -1100,6 +1105,10 @@ impl_stable_hash_for!(enum hir::Unsafety {\n     Normal\n });\n \n+impl_stable_hash_for!(enum hir::IsAsync {\n+    Async,\n+    NotAsync\n+});\n \n impl_stable_hash_for!(enum hir::Constness {\n     Const,"}, {"sha": "95829346ede8ff07d009ec34c5c3c41530a7c688", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -238,8 +238,8 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             // If we are building an executable, only explicitly extern\n             // types need to be exported.\n             if let hir_map::NodeItem(item) = *node {\n-                let reachable = if let hir::ItemFn(.., abi, _, _) = item.node {\n-                    abi != Abi::Rust\n+                let reachable = if let hir::ItemFn(_, header, ..) = item.node {\n+                    header.abi != Abi::Rust\n                 } else {\n                     false\n                 };"}, {"sha": "c2623f403567e8ee3b0a5645069fc23a6443901f", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -476,7 +476,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         match item.node {\n-            hir::ItemFn(ref decl, _, _, _, ref generics, _) => {\n+            hir::ItemFn(ref decl, _, ref generics, _) => {\n                 self.visit_early_late(None, decl, generics, |this| {\n                     intravisit::walk_item(this, item);\n                 });"}, {"sha": "78406e88c75720756e3c19e7c1eae99c155e6d43", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -10,12 +10,11 @@\n \n use rustc::middle::allocator::AllocatorKind;\n use rustc_errors;\n-use rustc_target::spec::abi::Abi;\n use syntax::ast::{Attribute, Crate, LitKind, StrStyle};\n-use syntax::ast::{Arg, Constness, Generics, Mac, Mutability, Ty, Unsafety};\n+use syntax::ast::{Arg, FnHeader, Generics, Mac, Mutability, Ty, Unsafety};\n use syntax::ast::{self, Expr, Ident, Item, ItemKind, TyKind, VisibilityKind};\n use syntax::attr;\n-use syntax::codemap::{dummy_spanned, respan};\n+use syntax::codemap::respan;\n use syntax::codemap::{ExpnInfo, MacroAttribute, NameAndSpan};\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::base::Resolver;\n@@ -152,9 +151,10 @@ impl<'a> AllocFnFactory<'a> {\n         let (output_ty, output_expr) = self.ret_ty(&method.output, result);\n         let kind = ItemKind::Fn(\n             self.cx.fn_decl(abi_args, ast::FunctionRetTy::Ty(output_ty)),\n-            Unsafety::Unsafe,\n-            dummy_spanned(Constness::NotConst),\n-            Abi::Rust,\n+            FnHeader {\n+                unsafety: Unsafety::Unsafe,\n+                ..FnHeader::default()\n+            },\n             Generics::default(),\n             self.cx.block_expr(output_expr),\n         );"}, {"sha": "38ecbf5ca8ada5000191815c96870f7980a02c5a", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -712,8 +712,8 @@ impl<'a> fold::Folder for ReplaceBodyWithLoop<'a> {\n     fn fold_item_kind(&mut self, i: ast::ItemKind) -> ast::ItemKind {\n         let is_const = match i {\n             ast::ItemKind::Static(..) | ast::ItemKind::Const(..) => true,\n-            ast::ItemKind::Fn(ref decl, _, ref constness, _, _, _) =>\n-                constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n+            ast::ItemKind::Fn(ref decl, ref header, _, _) =>\n+                header.constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n             _ => false,\n         };\n         self.run(is_const, |s| fold::noop_fold_item_kind(i, s))\n@@ -722,8 +722,8 @@ impl<'a> fold::Folder for ReplaceBodyWithLoop<'a> {\n     fn fold_trait_item(&mut self, i: ast::TraitItem) -> SmallVector<ast::TraitItem> {\n         let is_const = match i.node {\n             ast::TraitItemKind::Const(..) => true,\n-            ast::TraitItemKind::Method(ast::MethodSig { ref decl, ref constness, .. }, _) =>\n-                constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n+            ast::TraitItemKind::Method(ast::MethodSig { ref decl, ref header, .. }, _) =>\n+                header.constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n             _ => false,\n         };\n         self.run(is_const, |s| fold::noop_fold_trait_item(i, s))\n@@ -732,8 +732,8 @@ impl<'a> fold::Folder for ReplaceBodyWithLoop<'a> {\n     fn fold_impl_item(&mut self, i: ast::ImplItem) -> SmallVector<ast::ImplItem> {\n         let is_const = match i.node {\n             ast::ImplItemKind::Const(..) => true,\n-            ast::ImplItemKind::Method(ast::MethodSig { ref decl, ref constness, .. }, _) =>\n-                constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n+            ast::ImplItemKind::Method(ast::MethodSig { ref decl, ref header, .. }, _) =>\n+                header.constness.node == ast::Constness::Const || Self::should_ignore_fn(decl),\n             _ => false,\n         };\n         self.run(is_const, |s| fold::noop_fold_impl_item(i, s))"}, {"sha": "1b5361187f36a4b016903512588ebb0a0f7f3152", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -284,9 +284,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n                     _ => (),\n                 }\n             }\n-            FnKind::ItemFn(name, _, _, _, abi, _, attrs) => {\n+            FnKind::ItemFn(name, _, header, _, attrs) => {\n                 // Skip foreign-ABI #[no_mangle] functions (Issue #31924)\n-                if abi != Abi::Rust && attr::find_by_name(attrs, \"no_mangle\").is_some() {\n+                if header.abi != Abi::Rust && attr::find_by_name(attrs, \"no_mangle\").is_some() {\n                     return;\n                 }\n                 self.check_snake_case(cx, \"function\", &name.as_str(), Some(span))"}, {"sha": "d6120ab207924b2206a05eab6d4f45e29c716bd9", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -259,12 +259,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnsafeCode {\n                 span: Span,\n                 _: ast::NodeId) {\n         match fk {\n-            FnKind::ItemFn(_, _, hir::Unsafety::Unsafe, ..) => {\n+            FnKind::ItemFn(_, _, hir::FnHeader { unsafety: hir::Unsafety::Unsafe, .. }, ..) => {\n                 self.report_unsafe(cx, span, \"declaration of an `unsafe` function\")\n             }\n \n             FnKind::Method(_, sig, ..) => {\n-                if sig.unsafety == hir::Unsafety::Unsafe {\n+                if sig.header.unsafety == hir::Unsafety::Unsafe {\n                     self.report_unsafe(cx, span, \"implementation of an `unsafe` method\")\n                 }\n             }\n@@ -275,7 +275,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnsafeCode {\n \n     fn check_trait_item(&mut self, cx: &LateContext, item: &hir::TraitItem) {\n         if let hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Required(_)) = item.node {\n-            if sig.unsafety == hir::Unsafety::Unsafe {\n+            if sig.header.unsafety == hir::Unsafety::Unsafe {\n                 self.report_unsafe(cx, item.span, \"declaration of an `unsafe` method\")\n             }\n         }"}, {"sha": "7ed3abe66c221bd43f7e0decff7a23da1a94596d", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -917,7 +917,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             ty::AssociatedKind::Method => {\n                 let fn_data = if let hir::ImplItemKind::Method(ref sig, body) = ast_item.node {\n                     FnData {\n-                        constness: sig.constness,\n+                        constness: sig.header.constness,\n                         arg_names: self.encode_fn_arg_names_for_body(body),\n                         sig: self.lazy(&tcx.fn_sig(def_id)),\n                     }\n@@ -941,7 +941,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                     let needs_inline = (generics.requires_monomorphization(self.tcx) ||\n                                         tcx.codegen_fn_attrs(def_id).requests_inline()) &&\n                                         !self.metadata_output_only();\n-                    let is_const_fn = sig.constness == hir::Constness::Const;\n+                    let is_const_fn = sig.header.constness == hir::Constness::Const;\n                     let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n                     needs_inline || is_const_fn || always_encode_mir\n                 },\n@@ -1045,9 +1045,9 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                     self.encode_rendered_const_for_body(body_id)\n                 )\n             }\n-            hir::ItemFn(_, _, constness, .., body) => {\n+            hir::ItemFn(_, header, .., body) => {\n                 let data = FnData {\n-                    constness,\n+                    constness: header.constness,\n                     arg_names: self.encode_fn_arg_names_for_body(body),\n                     sig: self.lazy(&tcx.fn_sig(def_id)),\n                 };\n@@ -1235,7 +1235,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                     self.encode_optimized_mir(def_id)\n                 }\n                 hir::ItemConst(..) => self.encode_optimized_mir(def_id),\n-                hir::ItemFn(_, _, constness, ..) => {\n+                hir::ItemFn(_, header, ..) => {\n                     let generics = tcx.generics_of(def_id);\n                     let has_types = generics.params.iter().any(|param| match param.kind {\n                         ty::GenericParamDefKind::Type { .. } => true,\n@@ -1245,7 +1245,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                         (has_types || tcx.codegen_fn_attrs(def_id).requests_inline()) &&\n                             !self.metadata_output_only();\n                     let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n-                    if needs_inline || constness == hir::Constness::Const || always_encode_mir {\n+                    if needs_inline || header.constness == hir::Constness::Const || always_encode_mir {\n                         self.encode_optimized_mir(def_id)\n                     } else {\n                         None"}, {"sha": "00e064fbb4717ce541a61a629ab05e021bfd8367", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -380,10 +380,10 @@ fn is_enclosed(tcx: TyCtxt,\n         if used_unsafe.contains(&parent_id) {\n             Some((\"block\".to_string(), parent_id))\n         } else if let Some(hir::map::NodeItem(&hir::Item {\n-            node: hir::ItemFn(_, fn_unsafety, _, _, _, _),\n+            node: hir::ItemFn(_, header, _, _),\n             ..\n         })) = tcx.hir.find(parent_id) {\n-            match fn_unsafety {\n+            match header.unsafety {\n                 hir::Unsafety::Unsafe => Some((\"fn\".to_string(), parent_id)),\n                 hir::Unsafety::Normal => None,\n             }"}, {"sha": "8111caed5c59aaf9f5bab450bdcbf73721141c58", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -257,7 +257,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 for impl_item in impl_items {\n                     self.invalid_visibility(&impl_item.vis, None);\n                     if let ImplItemKind::Method(ref sig, _) = impl_item.node {\n-                        self.check_trait_fn_not_const(sig.constness);\n+                        self.check_trait_fn_not_const(sig.header.constness);\n                     }\n                 }\n             }\n@@ -309,7 +309,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.no_questions_in_bounds(bounds, \"supertraits\", true);\n                 for trait_item in trait_items {\n                     if let TraitItemKind::Method(ref sig, ref block) = trait_item.node {\n-                        self.check_trait_fn_not_const(sig.constness);\n+                        self.check_trait_fn_not_const(sig.header.constness);\n                         if block.is_none() {\n                             self.check_decl_no_pat(&sig.decl, |span, mut_ident| {\n                                 if mut_ident {"}, {"sha": "b532aaf90dfdda19f957318748fa5c4f1b7afee8", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -380,17 +380,20 @@ impl Sig for ast::Item {\n \n                 Ok(extend_sig(ty, text, defs, vec![]))\n             }\n-            ast::ItemKind::Fn(ref decl, unsafety, constness, abi, ref generics, _) => {\n+            ast::ItemKind::Fn(ref decl, header, ref generics, _) => {\n                 let mut text = String::new();\n-                if constness.node == ast::Constness::Const {\n+                if header.constness.node == ast::Constness::Const {\n                     text.push_str(\"const \");\n                 }\n-                if unsafety == ast::Unsafety::Unsafe {\n+                if header.asyncness == ast::IsAsync::Async {\n+                    text.push_str(\"async \");\n+                }\n+                if header.unsafety == ast::Unsafety::Unsafe {\n                     text.push_str(\"unsafe \");\n                 }\n-                if abi != ::rustc_target::spec::abi::Abi::Rust {\n+                if header.abi != ::rustc_target::spec::abi::Abi::Rust {\n                     text.push_str(\"extern\");\n-                    text.push_str(&abi.to_string());\n+                    text.push_str(&header.abi.to_string());\n                     text.push(' ');\n                 }\n                 text.push_str(\"fn \");\n@@ -914,15 +917,18 @@ fn make_method_signature(\n ) -> Result {\n     // FIXME code dup with function signature\n     let mut text = String::new();\n-    if m.constness.node == ast::Constness::Const {\n+    if m.header.constness.node == ast::Constness::Const {\n         text.push_str(\"const \");\n     }\n-    if m.unsafety == ast::Unsafety::Unsafe {\n+    if m.header.asyncness == ast::IsAsync::Async {\n+        text.push_str(\"async \");\n+    }\n+    if m.header.unsafety == ast::Unsafety::Unsafe {\n         text.push_str(\"unsafe \");\n     }\n-    if m.abi != ::rustc_target::spec::abi::Abi::Rust {\n+    if m.header.abi != ::rustc_target::spec::abi::Abi::Rust {\n         text.push_str(\"extern\");\n-        text.push_str(&m.abi.to_string());\n+        text.push_str(&m.header.abi.to_string());\n         text.push(' ');\n     }\n     text.push_str(\"fn \");"}, {"sha": "824346dab94fc326e49763054fe50bd764abbe7a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -1181,13 +1181,13 @@ fn fn_sig<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let icx = ItemCtxt::new(tcx, def_id);\n \n     match tcx.hir.get(node_id) {\n-        NodeTraitItem(&hir::TraitItem { node: TraitItemKind::Method(ref sig, _), .. }) |\n-        NodeImplItem(&hir::ImplItem { node: ImplItemKind::Method(ref sig, _), .. }) => {\n-            AstConv::ty_of_fn(&icx, sig.unsafety, sig.abi, &sig.decl)\n+        NodeTraitItem(hir::TraitItem { node: TraitItemKind::Method(sig, _), .. }) |\n+        NodeImplItem(hir::ImplItem { node: ImplItemKind::Method(sig, _), .. }) => {\n+            AstConv::ty_of_fn(&icx, sig.header.unsafety, sig.header.abi, &sig.decl)\n         }\n \n-        NodeItem(&hir::Item { node: ItemFn(ref decl, unsafety, _, abi, _, _), .. }) => {\n-            AstConv::ty_of_fn(&icx, unsafety, abi, decl)\n+        NodeItem(hir::Item { node: ItemFn(decl, header, _, _), .. }) => {\n+            AstConv::ty_of_fn(&icx, header.unsafety, header.abi, decl)\n         }\n \n         NodeForeignItem(&hir::ForeignItem { node: ForeignItemFn(ref fn_decl, _, _), .. }) => {"}, {"sha": "0021ceac31520011115232a4b56e939858db2258", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -198,9 +198,12 @@ fn build_external_function(cx: &DocContext, did: DefId) -> clean::Function {\n     clean::Function {\n         decl: (did, sig).clean(cx),\n         generics: (cx.tcx.generics_of(did), &predicates).clean(cx),\n-        unsafety: sig.unsafety(),\n-        constness,\n-        abi: sig.abi(),\n+        header: hir::FnHeader {\n+            unsafety: sig.unsafety(),\n+            abi: sig.abi(),\n+            constness,\n+            ..hir::FnHeader::default()\n+        }\n     }\n }\n "}, {"sha": "7bebefc41f940b3d38e723a0ddb0a4eb502b940a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -18,8 +18,8 @@ pub use self::SelfTy::*;\n pub use self::FunctionRetTy::*;\n pub use self::Visibility::{Public, Inherited};\n \n-use syntax;\n use rustc_target::spec::abi::Abi;\n+use syntax;\n use syntax::ast::{self, AttrStyle, NodeId, Ident};\n use syntax::attr;\n use syntax::codemap::{dummy_spanned, Spanned};\n@@ -2074,10 +2074,8 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Method {\n     pub generics: Generics,\n-    pub unsafety: hir::Unsafety,\n-    pub constness: hir::Constness,\n     pub decl: FnDecl,\n-    pub abi: Abi,\n+    pub header: hir::FnHeader,\n }\n \n impl<'a> Clean<Method> for (&'a hir::MethodSig, &'a hir::Generics, hir::BodyId) {\n@@ -2088,28 +2086,23 @@ impl<'a> Clean<Method> for (&'a hir::MethodSig, &'a hir::Generics, hir::BodyId)\n         Method {\n             decl,\n             generics,\n-            unsafety: self.0.unsafety,\n-            constness: self.0.constness,\n-            abi: self.0.abi\n+            header: self.0.header,\n         }\n     }\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct TyMethod {\n-    pub unsafety: hir::Unsafety,\n+    pub header: hir::FnHeader,\n     pub decl: FnDecl,\n     pub generics: Generics,\n-    pub abi: Abi,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Function {\n     pub decl: FnDecl,\n     pub generics: Generics,\n-    pub unsafety: hir::Unsafety,\n-    pub constness: hir::Constness,\n-    pub abi: Abi,\n+    pub header: hir::FnHeader,\n }\n \n impl Clean<Item> for doctree::Function {\n@@ -2128,9 +2121,7 @@ impl Clean<Item> for doctree::Function {\n             inner: FunctionItem(Function {\n                 decl,\n                 generics,\n-                unsafety: self.unsafety,\n-                constness: self.constness,\n-                abi: self.abi,\n+                header: self.header,\n             }),\n         }\n     }\n@@ -2359,10 +2350,9 @@ impl Clean<Item> for hir::TraitItem {\n                     (self.generics.clean(cx), (&*sig.decl, &names[..]).clean(cx))\n                 });\n                 TyMethodItem(TyMethod {\n-                    unsafety: sig.unsafety.clone(),\n+                    header: sig.header,\n                     decl,\n                     generics,\n-                    abi: sig.abi\n                 })\n             }\n             hir::TraitItemKind::Type(ref bounds, ref default) => {\n@@ -2461,18 +2451,24 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                         hir::Constness::NotConst\n                     };\n                     MethodItem(Method {\n-                        unsafety: sig.unsafety(),\n                         generics,\n                         decl,\n-                        abi: sig.abi(),\n-                        constness,\n+                        header: hir::FnHeader {\n+                            unsafety: sig.unsafety(),\n+                            abi: sig.abi(),\n+                            constness,\n+                            ..hir::FnHeader::default()\n+                        }\n                     })\n                 } else {\n                     TyMethodItem(TyMethod {\n-                        unsafety: sig.unsafety(),\n                         generics,\n                         decl,\n-                        abi: sig.abi(),\n+                        header: hir::FnHeader {\n+                            unsafety: sig.unsafety(),\n+                            abi: sig.abi(),\n+                            ..hir::FnHeader::default()\n+                        }\n                     })\n                 }\n             }\n@@ -3697,9 +3693,9 @@ impl Clean<BareFunctionDecl> for hir::BareFnTy {\n         });\n         BareFunctionDecl {\n             unsafety: self.unsafety,\n+            abi: self.abi,\n             decl,\n             generic_params,\n-            abi: self.abi,\n         }\n     }\n }\n@@ -3994,7 +3990,7 @@ impl Clean<Vec<Item>> for hir::ForeignMod {\n         let mut items = self.items.clean(cx);\n         for item in &mut items {\n             if let ForeignFunctionItem(ref mut f) = item.inner {\n-                f.abi = self.abi;\n+                f.header.abi = self.abi;\n             }\n         }\n         items\n@@ -4011,9 +4007,7 @@ impl Clean<Item> for hir::ForeignItem {\n                 ForeignFunctionItem(Function {\n                     decl,\n                     generics,\n-                    unsafety: hir::Unsafety::Unsafe,\n-                    abi: Abi::Rust,\n-                    constness: hir::Constness::NotConst,\n+                    header: hir::FnHeader::default(),\n                 })\n             }\n             hir::ForeignItemStatic(ref ty, mutbl) => {"}, {"sha": "0807db2997626fadc34b8a4de1432792a06cf4e6", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -13,7 +13,6 @@\n pub use self::StructType::*;\n pub use self::TypeBound::*;\n \n-use rustc_target::spec::abi;\n use syntax::ast;\n use syntax::ast::{Name, NodeId};\n use syntax::attr;\n@@ -149,11 +148,9 @@ pub struct Function {\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n-    pub unsafety: hir::Unsafety,\n-    pub constness: hir::Constness,\n+    pub header: hir::FnHeader,\n     pub whence: Span,\n     pub generics: hir::Generics,\n-    pub abi: abi::Abi,\n     pub body: hir::BodyId,\n }\n "}, {"sha": "cfcaf23c4ff03bf74bdf759f4617ac0096fb57d0", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -62,7 +62,6 @@ use rustc::middle::stability;\n use rustc::hir;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::flock;\n-use rustc_target::spec::abi;\n \n use clean::{self, AttributesExt, GetDefId, SelfTy, Mutability};\n use doctree;\n@@ -2405,7 +2404,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n \n                 let unsafety_flag = match myitem.inner {\n                     clean::FunctionItem(ref func) | clean::ForeignFunctionItem(ref func)\n-                    if func.unsafety == hir::Unsafety::Unsafe => {\n+                    if func.header.unsafety == hir::Unsafety::Unsafe => {\n                         \"<a title='unsafe function' href='#'><sup>\u26a0</sup></a>\"\n                     }\n                     _ => \"\",\n@@ -2577,19 +2576,19 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                  f: &clean::Function) -> fmt::Result {\n     let name_len = format!(\"{}{}{}{:#}fn {}{:#}\",\n                            VisSpace(&it.visibility),\n-                           ConstnessSpace(f.constness),\n-                           UnsafetySpace(f.unsafety),\n-                           AbiSpace(f.abi),\n+                           ConstnessSpace(f.header.constness),\n+                           UnsafetySpace(f.header.unsafety),\n+                           AbiSpace(f.header.abi),\n                            it.name.as_ref().unwrap(),\n                            f.generics).len();\n     write!(w, \"{}<pre class='rust fn'>\", render_spotlight_traits(it)?)?;\n     render_attributes(w, it)?;\n     write!(w,\n            \"{vis}{constness}{unsafety}{abi}fn {name}{generics}{decl}{where_clause}</pre>\",\n            vis = VisSpace(&it.visibility),\n-           constness = ConstnessSpace(f.constness),\n-           unsafety = UnsafetySpace(f.unsafety),\n-           abi = AbiSpace(f.abi),\n+           constness = ConstnessSpace(f.header.constness),\n+           unsafety = UnsafetySpace(f.header.unsafety),\n+           abi = AbiSpace(f.header.abi),\n            name = it.name.as_ref().unwrap(),\n            generics = f.generics,\n            where_clause = WhereClause { gens: &f.generics, indent: 0, end_newline: true },\n@@ -2999,9 +2998,7 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n                      parent: ItemType) -> fmt::Result {\n     fn method(w: &mut fmt::Formatter,\n               meth: &clean::Item,\n-              unsafety: hir::Unsafety,\n-              constness: hir::Constness,\n-              abi: abi::Abi,\n+              header: hir::FnHeader,\n               g: &clean::Generics,\n               d: &clean::FnDecl,\n               link: AssocItemLink,\n@@ -3026,9 +3023,9 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n         };\n         let mut head_len = format!(\"{}{}{}{:#}fn {}{:#}\",\n                                    VisSpace(&meth.visibility),\n-                                   ConstnessSpace(constness),\n-                                   UnsafetySpace(unsafety),\n-                                   AbiSpace(abi),\n+                                   ConstnessSpace(header.constness),\n+                                   UnsafetySpace(header.unsafety),\n+                                   AbiSpace(header.abi),\n                                    name,\n                                    *g).len();\n         let (indent, end_newline) = if parent == ItemType::Trait {\n@@ -3041,9 +3038,9 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n         write!(w, \"{}{}{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n                    {generics}{decl}{where_clause}\",\n                VisSpace(&meth.visibility),\n-               ConstnessSpace(constness),\n-               UnsafetySpace(unsafety),\n-               AbiSpace(abi),\n+               ConstnessSpace(header.constness),\n+               UnsafetySpace(header.unsafety),\n+               AbiSpace(header.abi),\n                href = href,\n                name = name,\n                generics = *g,\n@@ -3061,12 +3058,10 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n     match item.inner {\n         clean::StrippedItem(..) => Ok(()),\n         clean::TyMethodItem(ref m) => {\n-            method(w, item, m.unsafety, hir::Constness::NotConst,\n-                   m.abi, &m.generics, &m.decl, link, parent)\n+            method(w, item, m.header, &m.generics, &m.decl, link, parent)\n         }\n         clean::MethodItem(ref m) => {\n-            method(w, item, m.unsafety, m.constness,\n-                   m.abi, &m.generics, &m.decl, link, parent)\n+            method(w, item, m.header, &m.generics, &m.decl, link, parent)\n         }\n         clean::AssociatedConstItem(ref ty, ref default) => {\n             assoc_const(w, item, ty, default.as_ref(), link)"}, {"sha": "6bf1931e468dece633fd29456b204a28fe24cf35", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -13,7 +13,6 @@\n \n use std::mem;\n \n-use rustc_target::spec::abi;\n use syntax::ast;\n use syntax::attr;\n use syntax_pos::Span;\n@@ -172,9 +171,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n \n     pub fn visit_fn(&mut self, item: &hir::Item,\n                     name: ast::Name, fd: &hir::FnDecl,\n-                    unsafety: &hir::Unsafety,\n-                    constness: hir::Constness,\n-                    abi: &abi::Abi,\n+                    header: hir::FnHeader,\n                     gen: &hir::Generics,\n                     body: hir::BodyId) -> Function {\n         debug!(\"Visiting fn\");\n@@ -188,9 +185,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n             name,\n             whence: item.span,\n             generics: gen.clone(),\n-            unsafety: *unsafety,\n-            constness,\n-            abi: *abi,\n+            header,\n             body,\n         }\n     }\n@@ -463,9 +458,8 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                 om.structs.push(self.visit_variant_data(item, name, sd, gen)),\n             hir::ItemUnion(ref sd, ref gen) =>\n                 om.unions.push(self.visit_union_data(item, name, sd, gen)),\n-            hir::ItemFn(ref fd, ref unsafety, constness, ref abi, ref gen, body) =>\n-                om.fns.push(self.visit_fn(item, name, &**fd, unsafety,\n-                                          constness, abi, gen, body)),\n+            hir::ItemFn(ref fd, header, ref gen, body) =>\n+                om.fns.push(self.visit_fn(item, name, &**fd, header, gen, body)),\n             hir::ItemTy(ref ty, ref gen) => {\n                 let t = Typedef {\n                     ty: ty.clone(),"}, {"sha": "55c21c64c83ce8d91c85cf9d3fb743d5d168875b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -17,7 +17,7 @@ pub use util::ThinVec;\n pub use util::parser::ExprPrecedence;\n \n use syntax_pos::{Span, DUMMY_SP};\n-use codemap::{respan, Spanned};\n+use codemap::{dummy_spanned, respan, Spanned};\n use rustc_target::spec::abi::Abi;\n use ext::hygiene::{Mark, SyntaxContext};\n use print::pprust;\n@@ -1325,9 +1325,7 @@ pub struct MutTy {\n /// or in an implementation.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct MethodSig {\n-    pub unsafety: Unsafety,\n-    pub constness: Spanned<Constness>,\n-    pub abi: Abi,\n+    pub header: FnHeader,\n     pub decl: P<FnDecl>,\n }\n \n@@ -1708,6 +1706,12 @@ pub enum Unsafety {\n     Normal,\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum IsAsync {\n+    Async,\n+    NotAsync,\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Constness {\n     Const,\n@@ -2009,6 +2013,29 @@ pub struct Item {\n     pub tokens: Option<TokenStream>,\n }\n \n+/// A function header\n+///\n+/// All the information between the visibility & the name of the function is\n+/// included in this struct (e.g. `async unsafe fn` or `const extern \"C\" fn`)\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub struct FnHeader {\n+    pub unsafety: Unsafety,\n+    pub asyncness: IsAsync,\n+    pub constness: Spanned<Constness>,\n+    pub abi: Abi,\n+}\n+\n+impl Default for FnHeader {\n+    fn default() -> FnHeader {\n+        FnHeader {\n+            unsafety: Unsafety::Normal,\n+            asyncness: IsAsync::NotAsync,\n+            constness: dummy_spanned(Constness::NotConst),\n+            abi: Abi::Rust,\n+        }\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum ItemKind {\n     /// An `extern crate` item, with optional *original* crate name if the crate was renamed.\n@@ -2030,7 +2057,7 @@ pub enum ItemKind {\n     /// A function declaration (`fn` or `pub fn`).\n     ///\n     /// E.g. `fn foo(bar: usize) -> usize { .. }`\n-    Fn(P<FnDecl>, Unsafety, Spanned<Constness>, Abi, Generics, P<Block>),\n+    Fn(P<FnDecl>, FnHeader, Generics, P<Block>),\n     /// A module declaration (`mod` or `pub mod`).\n     ///\n     /// E.g. `mod foo;` or `mod foo { .. }`"}, {"sha": "6bb7535544b745841cd6afeb4eecabbb30e4a38c", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -1008,9 +1008,12 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                   name,\n                   Vec::new(),\n                   ast::ItemKind::Fn(self.fn_decl(inputs, ast::FunctionRetTy::Ty(output)),\n-                              ast::Unsafety::Normal,\n-                              dummy_spanned(ast::Constness::NotConst),\n-                              Abi::Rust,\n+                              ast::FnHeader {\n+                                  unsafety: ast::Unsafety::Normal,\n+                                  asyncness: ast::IsAsync::NotAsync,\n+                                  constness: dummy_spanned(ast::Constness::NotConst),\n+                                  abi: Abi::Rust,\n+                              },\n                               generics,\n                               body))\n     }"}, {"sha": "a9679f86ddb3fdcd9f665f9ca269b7a7c616f295", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -29,7 +29,6 @@ use rustc_target::spec::abi::Abi;\n use ast::{self, NodeId, PatKind, RangeEnd};\n use attr;\n use edition::{ALL_EDITIONS, Edition};\n-use codemap::Spanned;\n use syntax_pos::{Span, DUMMY_SP};\n use errors::{DiagnosticBuilder, Handler, FatalError};\n use visit::{self, FnKind, Visitor};\n@@ -468,12 +467,14 @@ declare_features! (\n     // 'a: { break 'a; }\n     (active, label_break_value, \"1.28.0\", Some(48594), None),\n \n-\n     // #[panic_implementation]\n     (active, panic_implementation, \"1.28.0\", Some(44489), None),\n \n     // #[doc(keyword = \"...\")]\n     (active, doc_keyword, \"1.28.0\", Some(51315), None),\n+\n+    // Allows async and await syntax\n+    (active, async_await, \"1.28.0\", Some(0), Some(Edition::Edition2018)),\n );\n \n declare_features! (\n@@ -1760,20 +1761,24 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 fn_decl: &'a ast::FnDecl,\n                 span: Span,\n                 _node_id: NodeId) {\n-        // check for const fn declarations\n-        if let FnKind::ItemFn(_, _, Spanned { node: ast::Constness::Const, .. }, _, _, _) =\n-            fn_kind {\n-            gate_feature_post!(&self, const_fn, span, \"const fn is unstable\");\n-        }\n-        // stability of const fn methods are covered in\n-        // visit_trait_item and visit_impl_item below; this is\n-        // because default methods don't pass through this\n-        // point.\n-\n         match fn_kind {\n-            FnKind::ItemFn(_, _, _, abi, _, _) |\n-            FnKind::Method(_, &ast::MethodSig { abi, .. }, _, _) => {\n-                self.check_abi(abi, span);\n+            FnKind::ItemFn(_, header, _, _) => {\n+                // check for const fn and async fn declarations\n+                if header.asyncness == ast::IsAsync::Async {\n+                    gate_feature_post!(&self, async_await, span, \"async fn is unstable\");\n+                }\n+                if header.constness.node == ast::Constness::Const {\n+                    gate_feature_post!(&self, const_fn, span, \"const fn is unstable\");\n+                }\n+                // stability of const fn methods are covered in\n+                // visit_trait_item and visit_impl_item below; this is\n+                // because default methods don't pass through this\n+                // point.\n+\n+                self.check_abi(header.abi, span);\n+            }\n+            FnKind::Method(_, sig, _, _) => {\n+                self.check_abi(sig.header.abi, span);\n             }\n             _ => {}\n         }\n@@ -1784,9 +1789,9 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         match ti.node {\n             ast::TraitItemKind::Method(ref sig, ref block) => {\n                 if block.is_none() {\n-                    self.check_abi(sig.abi, ti.span);\n+                    self.check_abi(sig.header.abi, ti.span);\n                 }\n-                if sig.constness.node == ast::Constness::Const {\n+                if sig.header.constness.node == ast::Constness::Const {\n                     gate_feature_post!(&self, const_fn, ti.span, \"const fn is unstable\");\n                 }\n             }\n@@ -1820,7 +1825,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n         match ii.node {\n             ast::ImplItemKind::Method(ref sig, _) => {\n-                if sig.constness.node == ast::Constness::Const {\n+                if sig.header.constness.node == ast::Constness::Const {\n                     gate_feature_post!(&self, const_fn, ii.span, \"const fn is unstable\");\n                 }\n             }"}, {"sha": "941d2180fd188ab4c70cf7e95013003a6601e06d", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -881,11 +881,11 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n         ItemKind::Const(t, e) => {\n             ItemKind::Const(folder.fold_ty(t), folder.fold_expr(e))\n         }\n-        ItemKind::Fn(decl, unsafety, constness, abi, generics, body) => {\n+        ItemKind::Fn(decl, header, generics, body) => {\n             let generics = folder.fold_generics(generics);\n             let decl = folder.fold_fn_decl(decl);\n             let body = folder.fold_block(body);\n-            ItemKind::Fn(decl, unsafety, constness, abi, generics, body)\n+            ItemKind::Fn(decl, header, generics, body)\n         }\n         ItemKind::Mod(m) => ItemKind::Mod(folder.fold_mod(m)),\n         ItemKind::ForeignMod(nm) => ItemKind::ForeignMod(folder.fold_foreign_mod(nm)),\n@@ -1082,9 +1082,7 @@ pub fn noop_fold_foreign_item_simple<T: Folder>(ni: ForeignItem, folder: &mut T)\n \n pub fn noop_fold_method_sig<T: Folder>(sig: MethodSig, folder: &mut T) -> MethodSig {\n     MethodSig {\n-        abi: sig.abi,\n-        unsafety: sig.unsafety,\n-        constness: sig.constness,\n+        header: sig.header,\n         decl: folder.fold_fn_decl(sig.decl)\n     }\n }"}, {"sha": "61f88f3a250d3ce567f3c0390a9d9beb0899f520", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -928,12 +928,15 @@ mod tests {\n                                     output: ast::FunctionRetTy::Default(sp(15, 15)),\n                                     variadic: false\n                                 }),\n-                                        ast::Unsafety::Normal,\n-                                        Spanned {\n-                                            span: sp(0,2),\n-                                            node: ast::Constness::NotConst,\n+                                        ast::FnHeader {\n+                                            unsafety: ast::Unsafety::Normal,\n+                                            asyncness: ast::IsAsync::NotAsync,\n+                                            constness: Spanned {\n+                                                span: sp(0,2),\n+                                                node: ast::Constness::NotConst,\n+                                            },\n+                                            abi: Abi::Rust,\n                                         },\n-                                        Abi::Rust,\n                                         ast::Generics{\n                                             params: Vec::new(),\n                                             where_clause: ast::WhereClause {"}, {"sha": "d897aaadf43e0da241160c61724c7a336c39ceda", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -19,11 +19,11 @@ use ast::{Constness, Crate};\n use ast::Defaultness;\n use ast::EnumDef;\n use ast::{Expr, ExprKind, RangeLimits};\n-use ast::{Field, FnDecl};\n+use ast::{Field, FnDecl, FnHeader};\n use ast::{ForeignItem, ForeignItemKind, FunctionRetTy};\n use ast::{GenericParam, GenericParamKind};\n use ast::GenericArg;\n-use ast::{Ident, ImplItem, IsAuto, Item, ItemKind};\n+use ast::{Ident, ImplItem, IsAsync, IsAuto, Item, ItemKind};\n use ast::{Label, Lifetime, Lit, LitKind};\n use ast::Local;\n use ast::MacStmtStyle;\n@@ -1356,10 +1356,13 @@ impl<'a> Parser<'a> {\n             generics.where_clause = self.parse_where_clause()?;\n \n             let sig = ast::MethodSig {\n-                unsafety,\n-                constness,\n+                header: FnHeader {\n+                    unsafety,\n+                    constness,\n+                    abi,\n+                    asyncness: IsAsync::NotAsync,\n+                },\n                 decl: d,\n-                abi,\n             };\n \n             let body = match self.token {\n@@ -5349,14 +5352,16 @@ impl<'a> Parser<'a> {\n     /// Parse an item-position function declaration.\n     fn parse_item_fn(&mut self,\n                      unsafety: Unsafety,\n+                     asyncness: IsAsync,\n                      constness: Spanned<Constness>,\n                      abi: Abi)\n                      -> PResult<'a, ItemInfo> {\n         let (ident, mut generics) = self.parse_fn_header()?;\n         let decl = self.parse_fn_decl(false)?;\n         generics.where_clause = self.parse_where_clause()?;\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n-        Ok((ident, ItemKind::Fn(decl, unsafety, constness, abi, generics, body), Some(inner_attrs)))\n+        let header = FnHeader { unsafety, asyncness, constness, abi };\n+        Ok((ident, ItemKind::Fn(decl, header, generics, body), Some(inner_attrs)))\n     }\n \n     /// true if we are looking at `const ID`, false for things like `const fn` etc\n@@ -5531,12 +5536,11 @@ impl<'a> Parser<'a> {\n             generics.where_clause = self.parse_where_clause()?;\n             *at_end = true;\n             let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n-            Ok((ident, inner_attrs, generics, ast::ImplItemKind::Method(ast::MethodSig {\n-                abi,\n-                unsafety,\n-                constness,\n-                decl,\n-             }, body)))\n+            let header = ast::FnHeader { abi, unsafety, constness, asyncness: IsAsync::NotAsync };\n+            Ok((ident, inner_attrs, generics, ast::ImplItemKind::Method(\n+                ast::MethodSig { header, decl },\n+                body\n+            )))\n         }\n     }\n \n@@ -6622,6 +6626,7 @@ impl<'a> Parser<'a> {\n                 let abi = opt_abi.unwrap_or(Abi::C);\n                 let (ident, item_, extra_attrs) =\n                     self.parse_item_fn(Unsafety::Normal,\n+                                       IsAsync::NotAsync,\n                                        respan(fn_span, Constness::NotConst),\n                                        abi)?;\n                 let prev_span = self.prev_span;\n@@ -6665,6 +6670,7 @@ impl<'a> Parser<'a> {\n                 self.bump();\n                 let (ident, item_, extra_attrs) =\n                     self.parse_item_fn(unsafety,\n+                                       IsAsync::NotAsync,\n                                        respan(const_span, Constness::Const),\n                                        Abi::Rust)?;\n                 let prev_span = self.prev_span;\n@@ -6692,6 +6698,24 @@ impl<'a> Parser<'a> {\n                                     maybe_append(attrs, extra_attrs));\n             return Ok(Some(item));\n         }\n+        if self.eat_keyword(keywords::Async) {\n+            // ASYNC FUNCTION ITEM\n+            let unsafety = self.parse_unsafety();\n+            self.expect_keyword(keywords::Fn)?;\n+            let fn_span = self.prev_span;\n+            let (ident, item_, extra_attrs) =\n+                self.parse_item_fn(unsafety,\n+                                   IsAsync::Async,\n+                                   respan(fn_span, Constness::NotConst),\n+                                   Abi::Rust)?;\n+            let prev_span = self.prev_span;\n+            let item = self.mk_item(lo.to(prev_span),\n+                                    ident,\n+                                    item_,\n+                                    visibility,\n+                                    maybe_append(attrs, extra_attrs));\n+            return Ok(Some(item));\n+        }\n         if self.check_keyword(keywords::Unsafe) &&\n             (self.look_ahead(1, |t| t.is_keyword(keywords::Trait)) ||\n             self.look_ahead(1, |t| t.is_keyword(keywords::Auto)))\n@@ -6737,6 +6761,7 @@ impl<'a> Parser<'a> {\n             let fn_span = self.prev_span;\n             let (ident, item_, extra_attrs) =\n                 self.parse_item_fn(Unsafety::Normal,\n+                                   IsAsync::NotAsync,\n                                    respan(fn_span, Constness::NotConst),\n                                    Abi::Rust)?;\n             let prev_span = self.prev_span;\n@@ -6762,6 +6787,7 @@ impl<'a> Parser<'a> {\n             let fn_span = self.prev_span;\n             let (ident, item_, extra_attrs) =\n                 self.parse_item_fn(Unsafety::Unsafe,\n+                                   IsAsync::NotAsync,\n                                    respan(fn_span, Constness::NotConst),\n                                    abi)?;\n             let prev_span = self.prev_span;"}, {"sha": "210742c55a5b74cefcc96abd361b52f47dd1fb3e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -373,14 +373,13 @@ pub fn vis_to_string(v: &ast::Visibility) -> String {\n }\n \n pub fn fun_to_string(decl: &ast::FnDecl,\n-                     unsafety: ast::Unsafety,\n-                     constness: ast::Constness,\n+                     header: ast::FnHeader,\n                      name: ast::Ident,\n                      generics: &ast::Generics)\n                      -> String {\n     to_string(|s| {\n         s.head(\"\")?;\n-        s.print_fn(decl, unsafety, constness, Abi::Rust, Some(name),\n+        s.print_fn(decl, header, Some(name),\n                    generics, &codemap::dummy_spanned(ast::VisibilityKind::Inherited))?;\n         s.end()?; // Close the head box\n         s.end() // Close the outer box\n@@ -1118,9 +1117,8 @@ impl<'a> State<'a> {\n         match item.node {\n             ast::ForeignItemKind::Fn(ref decl, ref generics) => {\n                 self.head(\"\")?;\n-                self.print_fn(decl, ast::Unsafety::Normal,\n-                              ast::Constness::NotConst,\n-                              Abi::Rust, Some(item.ident),\n+                self.print_fn(decl, ast::FnHeader::default(),\n+                              Some(item.ident),\n                               generics, &item.vis)?;\n                 self.end()?; // end head-ibox\n                 self.s.word(\";\")?;\n@@ -1249,13 +1247,11 @@ impl<'a> State<'a> {\n                 self.s.word(\";\")?;\n                 self.end()?; // end the outer cbox\n             }\n-            ast::ItemKind::Fn(ref decl, unsafety, constness, abi, ref typarams, ref body) => {\n+            ast::ItemKind::Fn(ref decl, header, ref typarams, ref body) => {\n                 self.head(\"\")?;\n                 self.print_fn(\n                     decl,\n-                    unsafety,\n-                    constness.node,\n-                    abi,\n+                    header,\n                     Some(item.ident),\n                     typarams,\n                     &item.vis\n@@ -1582,9 +1578,7 @@ impl<'a> State<'a> {\n                             vis: &ast::Visibility)\n                             -> io::Result<()> {\n         self.print_fn(&m.decl,\n-                      m.unsafety,\n-                      m.constness.node,\n-                      m.abi,\n+                      m.header,\n                       Some(ident),\n                       &generics,\n                       vis)\n@@ -2740,13 +2734,11 @@ impl<'a> State<'a> {\n \n     pub fn print_fn(&mut self,\n                     decl: &ast::FnDecl,\n-                    unsafety: ast::Unsafety,\n-                    constness: ast::Constness,\n-                    abi: abi::Abi,\n+                    header: ast::FnHeader,\n                     name: Option<ast::Ident>,\n                     generics: &ast::Generics,\n                     vis: &ast::Visibility) -> io::Result<()> {\n-        self.print_fn_header_info(unsafety, constness, abi, vis)?;\n+        self.print_fn_header_info(header, vis)?;\n \n         if let Some(name) = name {\n             self.nbsp()?;\n@@ -3058,9 +3050,7 @@ impl<'a> State<'a> {\n             span: syntax_pos::DUMMY_SP,\n         };\n         self.print_fn(decl,\n-                      unsafety,\n-                      ast::Constness::NotConst,\n-                      abi,\n+                      ast::FnHeader { unsafety, abi, ..ast::FnHeader::default() },\n                       name,\n                       &generics,\n                       &codemap::dummy_spanned(ast::VisibilityKind::Inherited))?;\n@@ -3123,22 +3113,25 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_fn_header_info(&mut self,\n-                                unsafety: ast::Unsafety,\n-                                constness: ast::Constness,\n-                                abi: Abi,\n+                                header: ast::FnHeader,\n                                 vis: &ast::Visibility) -> io::Result<()> {\n         self.s.word(&visibility_qualified(vis, \"\"))?;\n \n-        match constness {\n+        match header.constness.node {\n             ast::Constness::NotConst => {}\n             ast::Constness::Const => self.word_nbsp(\"const\")?\n         }\n \n-        self.print_unsafety(unsafety)?;\n+        match header.asyncness {\n+            ast::IsAsync::NotAsync => {}\n+            ast::IsAsync::Async => self.word_nbsp(\"async\")?\n+        }\n+\n+        self.print_unsafety(header.unsafety)?;\n \n-        if abi != Abi::Rust {\n+        if header.abi != Abi::Rust {\n             self.word_nbsp(\"extern\")?;\n-            self.word_nbsp(&abi.to_string())?;\n+            self.word_nbsp(&header.abi.to_string())?;\n         }\n \n         self.s.word(\"fn\")"}, {"sha": "cfb29f562d74669a7d569a8ccd8c2ca8264bc84c", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -124,24 +124,30 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n \n         if is_test_fn(&self.cx, &i) || is_bench_fn(&self.cx, &i) {\n             match i.node {\n-                ast::ItemKind::Fn(_, ast::Unsafety::Unsafe, _, _, _, _) => {\n-                    let diag = self.cx.span_diagnostic;\n-                    diag.span_fatal(i.span, \"unsafe functions cannot be used for tests\").raise();\n-                }\n-                _ => {\n-                    debug!(\"this is a test function\");\n-                    let test = Test {\n-                        span: i.span,\n-                        path: self.cx.path.clone(),\n-                        bench: is_bench_fn(&self.cx, &i),\n-                        ignore: is_ignored(&i),\n-                        should_panic: should_panic(&i, &self.cx),\n-                        allow_fail: is_allowed_fail(&i),\n-                    };\n-                    self.cx.testfns.push(test);\n-                    self.tests.push(i.ident);\n+                ast::ItemKind::Fn(_, header, _, _) => {\n+                    if header.unsafety == ast::Unsafety::Unsafe {\n+                        let diag = self.cx.span_diagnostic;\n+                        diag.span_fatal(i.span, \"unsafe functions cannot be used for tests\").raise();\n+                    }\n+                    if header.asyncness == ast::IsAsync::Async {\n+                        let diag = self.cx.span_diagnostic;\n+                        diag.span_fatal(i.span, \"async functions cannot be used for tests\").raise();\n+                    }\n                 }\n+                _ => {},\n             }\n+\n+            debug!(\"this is a test function\");\n+            let test = Test {\n+                span: i.span,\n+                path: self.cx.path.clone(),\n+                bench: is_bench_fn(&self.cx, &i),\n+                ignore: is_ignored(&i),\n+                should_panic: should_panic(&i, &self.cx),\n+                allow_fail: is_allowed_fail(&i),\n+            };\n+            self.cx.testfns.push(test);\n+            self.tests.push(i.ident);\n         }\n \n         let mut item = i.into_inner();\n@@ -338,7 +344,7 @@ fn is_test_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n     fn has_test_signature(_cx: &TestCtxt, i: &ast::Item) -> HasTestSignature {\n         let has_should_panic_attr = attr::contains_name(&i.attrs, \"should_panic\");\n         match i.node {\n-            ast::ItemKind::Fn(ref decl, _, _, _, ref generics, _) => {\n+            ast::ItemKind::Fn(ref decl, _, ref generics, _) => {\n                 // If the termination trait is active, the compiler will check that the output\n                 // type implements the `Termination` trait as `libtest` enforces that.\n                 let has_output = match decl.output {\n@@ -396,7 +402,7 @@ fn is_bench_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n \n     fn has_bench_signature(_cx: &TestCtxt, i: &ast::Item) -> bool {\n         match i.node {\n-            ast::ItemKind::Fn(ref decl, _, _, _, _, _) => {\n+            ast::ItemKind::Fn(ref decl, _, _, _) => {\n                 // NB: inadequate check, but we're running\n                 // well before resolve, can't get too deep.\n                 decl.inputs.len() == 1\n@@ -537,9 +543,7 @@ fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> {\n     let main_ret_ty = ecx.ty(sp, ast::TyKind::Tup(vec![]));\n     let main_body = ecx.block(sp, vec![call_test_main]);\n     let main = ast::ItemKind::Fn(ecx.fn_decl(vec![], ast::FunctionRetTy::Ty(main_ret_ty)),\n-                           ast::Unsafety::Normal,\n-                           dummy_spanned(ast::Constness::NotConst),\n-                           ::rustc_target::spec::abi::Abi::Rust,\n+                           ast::FnHeader::default(),\n                            ast::Generics::default(),\n                            main_body);\n     P(ast::Item {"}, {"sha": "3df96ff07c53b4eedcb925abd8e8fa495b5c0d19", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -23,17 +23,15 @@\n //! instance, a walker looking for item names in a module will miss all of\n //! those that are created by the expansion of a macro.\n \n-use rustc_target::spec::abi::Abi;\n use ast::*;\n use syntax_pos::Span;\n-use codemap::Spanned;\n use parse::token::Token;\n use tokenstream::{TokenTree, TokenStream};\n \n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n-    ItemFn(Ident, Unsafety, Spanned<Constness>, Abi, &'a Visibility, &'a Block),\n+    ItemFn(Ident, FnHeader, &'a Visibility, &'a Block),\n \n     /// fn foo(&self)\n     Method(Ident, &'a MethodSig, Option<&'a Visibility>, &'a Block),\n@@ -235,10 +233,10 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_ty(typ);\n             visitor.visit_expr(expr);\n         }\n-        ItemKind::Fn(ref declaration, unsafety, constness, abi, ref generics, ref body) => {\n+        ItemKind::Fn(ref declaration, header, ref generics, ref body) => {\n             visitor.visit_generics(generics);\n-            visitor.visit_fn(FnKind::ItemFn(item.ident, unsafety,\n-                                            constness, abi, &item.vis, body),\n+            visitor.visit_fn(FnKind::ItemFn(item.ident, header, \n+                                            &item.vis, body),\n                              declaration,\n                              item.span,\n                              item.id)\n@@ -544,7 +542,7 @@ pub fn walk_fn<'a, V>(visitor: &mut V, kind: FnKind<'a>, declaration: &'a FnDecl\n     where V: Visitor<'a>,\n {\n     match kind {\n-        FnKind::ItemFn(_, _, _, _, _, body) => {\n+        FnKind::ItemFn(_, _, _, body) => {\n             walk_fn_decl(visitor, declaration);\n             visitor.visit_block(body);\n         }"}, {"sha": "3ea0eb8bbd842e63155a3c1369b9116a540892fa", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ff7d091a07706b87c131bf3efc226993916f88/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=18ff7d091a07706b87c131bf3efc226993916f88", "patch": "@@ -197,7 +197,7 @@ use syntax::ast::{VariantData, GenericParamKind, GenericArg};\n use syntax::attr;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n-use syntax::codemap::{self, dummy_spanned, respan};\n+use syntax::codemap::{self, respan};\n use syntax::util::move_map::MoveMap;\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, keywords};\n@@ -971,10 +971,10 @@ impl<'a> MethodDef<'a> {\n             defaultness: ast::Defaultness::Final,\n             ident: method_ident,\n             node: ast::ImplItemKind::Method(ast::MethodSig {\n-                                                abi,\n-                                                unsafety,\n-                                                constness:\n-                                                    dummy_spanned(ast::Constness::NotConst),\n+                                                header: ast::FnHeader {\n+                                                    unsafety, abi,\n+                                                    ..ast::FnHeader::default()\n+                                                },\n                                                 decl: fn_decl,\n                                             },\n                                             body_block),"}]}