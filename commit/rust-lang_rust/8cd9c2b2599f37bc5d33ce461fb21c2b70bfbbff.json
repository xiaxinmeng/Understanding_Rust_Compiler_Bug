{"sha": "8cd9c2b2599f37bc5d33ce461fb21c2b70bfbbff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZDljMmIyNTk5ZjM3YmM1ZDMzY2U0NjFmYjIxYzJiNzBiZmJiZmY=", "commit": {"author": {"name": "Ms2ger", "email": "Ms2ger@gmail.com", "date": "2016-03-31T12:54:09Z"}, "committer": {"name": "Ms2ger", "email": "Ms2ger@gmail.com", "date": "2016-03-31T12:54:09Z"}, "message": "Stop re-exporting check_match::Constructor.", "tree": {"sha": "7c3385d6649a19c80569bc4d36e18fdbcf4919eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c3385d6649a19c80569bc4d36e18fdbcf4919eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cd9c2b2599f37bc5d33ce461fb21c2b70bfbbff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cd9c2b2599f37bc5d33ce461fb21c2b70bfbbff", "html_url": "https://github.com/rust-lang/rust/commit/8cd9c2b2599f37bc5d33ce461fb21c2b70bfbbff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cd9c2b2599f37bc5d33ce461fb21c2b70bfbbff/comments", "author": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30a3849f228833f9dc280120126d16aef3a292ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/30a3849f228833f9dc280120126d16aef3a292ba", "html_url": "https://github.com/rust-lang/rust/commit/30a3849f228833f9dc280120126d16aef3a292ba"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "8420f9f4e77a5996766e1c928c63854b58fbe70e", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cd9c2b2599f37bc5d33ce461fb21c2b70bfbbff/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cd9c2b2599f37bc5d33ce461fb21c2b70bfbbff/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=8cd9c2b2599f37bc5d33ce461fb21c2b70bfbbff", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use self::Constructor::*;\n+use self::Constructor::*;\n use self::Usefulness::*;\n use self::WitnessPreference::*;\n "}, {"sha": "f947235337d0b12843bf67710035ac6d4eb1d4da", "filename": "src/librustc_trans/_match.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8cd9c2b2599f37bc5d33ce461fb21c2b70bfbbff/src%2Flibrustc_trans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cd9c2b2599f37bc5d33ce461fb21c2b70bfbbff/src%2Flibrustc_trans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2F_match.rs?ref=8cd9c2b2599f37bc5d33ce461fb21c2b70bfbbff", "patch": "@@ -189,7 +189,7 @@ use self::Opt::*;\n use self::FailureHandler::*;\n \n use llvm::{ValueRef, BasicBlockRef};\n-use rustc_const_eval::check_match::{self, StaticInliner};\n+use rustc_const_eval::check_match::{self, Constructor, StaticInliner};\n use rustc_const_eval::{compare_lit_exprs, eval_const_expr};\n use middle::def::{Def, DefMap};\n use middle::def_id::DefId;\n@@ -609,19 +609,19 @@ fn enter_opt<'a, 'p, 'blk, 'tcx>(\n     let _indenter = indenter();\n \n     let ctor = match opt {\n-        &ConstantValue(ConstantExpr(expr), _) => check_match::ConstantValue(\n+        &ConstantValue(ConstantExpr(expr), _) => Constructor::ConstantValue(\n             eval_const_expr(bcx.tcx(), &expr)\n         ),\n-        &ConstantRange(ConstantExpr(lo), ConstantExpr(hi), _) => check_match::ConstantRange(\n+        &ConstantRange(ConstantExpr(lo), ConstantExpr(hi), _) => Constructor::ConstantRange(\n             eval_const_expr(bcx.tcx(), &lo),\n             eval_const_expr(bcx.tcx(), &hi)\n         ),\n         &SliceLengthEqual(n, _) =>\n-            check_match::Slice(n),\n+            Constructor::Slice(n),\n         &SliceLengthGreaterOrEqual(before, after, _) =>\n-            check_match::SliceWithSubslice(before, after),\n+            Constructor::SliceWithSubslice(before, after),\n         &Variant(_, _, def_id, _) =>\n-            check_match::Constructor::Variant(def_id)\n+            Constructor::Variant(def_id)\n     };\n \n     let param_env = bcx.tcx().empty_parameter_environment();\n@@ -1229,7 +1229,7 @@ fn compile_submatch_continue<'a, 'p, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         Some(field_vals) => {\n             let pats = enter_match(bcx, dm, m, col, val, |pats|\n                 check_match::specialize(&mcx, pats,\n-                                        &check_match::Single, col,\n+                                        &Constructor::Single, col,\n                                         field_vals.len())\n             );\n             let mut vals: Vec<_> = field_vals.into_iter()"}]}