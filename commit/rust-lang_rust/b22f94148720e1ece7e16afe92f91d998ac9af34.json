{"sha": "b22f94148720e1ece7e16afe92f91d998ac9af34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMmY5NDE0ODcyMGUxZWNlN2UxNmFmZTkyZjkxZDk5OGFjOWFmMzQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-13T02:35:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-13T02:35:17Z"}, "message": "Make it clearer which codemap functions use chars vs. bytes", "tree": {"sha": "67711d0a1e7acaf4acffa0d2a51857c91eff0bc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67711d0a1e7acaf4acffa0d2a51857c91eff0bc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b22f94148720e1ece7e16afe92f91d998ac9af34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b22f94148720e1ece7e16afe92f91d998ac9af34", "html_url": "https://github.com/rust-lang/rust/commit/b22f94148720e1ece7e16afe92f91d998ac9af34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b22f94148720e1ece7e16afe92f91d998ac9af34/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ec09c4eb91b94bd68c95eaa8966d4801c3347bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ec09c4eb91b94bd68c95eaa8966d4801c3347bf", "html_url": "https://github.com/rust-lang/rust/commit/2ec09c4eb91b94bd68c95eaa8966d4801c3347bf"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "bac1c5fcf6f9e144f45d06977680139d2c02741e", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b22f94148720e1ece7e16afe92f91d998ac9af34/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22f94148720e1ece7e16afe92f91d998ac9af34/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=b22f94148720e1ece7e16afe92f91d998ac9af34", "patch": "@@ -10,9 +10,12 @@ use std::serialization::{Serializable,\n                          Serializer,\n                          Deserializer};\n \n+pub type byte_pos = uint;\n+pub type char_pos = uint;\n+\n pub struct span {\n-    lo: uint,\n-    hi: uint,\n+    lo: char_pos,\n+    hi: char_pos,\n     expn_info: Option<@expn_info>\n }\n \n@@ -34,30 +37,30 @@ impl<D: Deserializer> span: Deserializable<D> {\n     }\n }\n \n-pub enum expn_info {\n-    expanded_from({call_site: span,\n-                   callie: {name: ~str, span: Option<span>}})\n+pub struct file_pos {\n+    ch: char_pos, byte: byte_pos\n }\n \n-pub type filename = ~str;\n-\n-pub type lookup_fn = pure fn(file_pos) -> uint;\n-\n pub struct loc {\n     file: @filemap, line: uint, col: uint\n }\n \n-pub struct file_pos {\n-    ch: uint, byte: uint\n-}\n-\n impl file_pos : cmp::Eq {\n     pure fn eq(other: &file_pos) -> bool {\n         self.ch == (*other).ch && self.byte == (*other).byte\n     }\n     pure fn ne(other: &file_pos) -> bool { !self.eq(other) }\n }\n \n+pub enum expn_info {\n+    expanded_from({call_site: span,\n+                   callie: {name: ~str, span: Option<span>}})\n+}\n+\n+pub type filename = ~str;\n+\n+pub type lookup_fn = pure fn(file_pos) -> uint;\n+\n pub struct file_lines {\n     file: @filemap,\n     lines: ~[uint]\n@@ -90,13 +93,13 @@ pub impl filemap {\n     }\n \n     static fn new(+filename: filename, src: @~str,\n-                  start_pos_ch: uint, start_pos_byte: uint)\n+                  start_pos_ch: char_pos, start_pos_byte: byte_pos)\n         -> filemap {\n         return filemap::new_w_substr(filename, fss_none, src,\n                                      start_pos_ch, start_pos_byte);\n     }\n \n-    fn next_line(@self, chpos: uint, byte_pos: uint) {\n+    fn next_line(@self, chpos: char_pos, byte_pos: byte_pos) {\n         self.lines.push(file_pos {ch: chpos, byte: byte_pos + self.start_pos.byte});\n     }\n \n@@ -127,17 +130,17 @@ pub impl CodeMap {\n         return fmt!(\"<%s:%u:%u>\", pos.file.name, pos.line, pos.col);\n     }\n \n-    pub fn lookup_char_pos(@self, pos: uint) -> loc {\n+    pub fn lookup_char_pos(@self, pos: char_pos) -> loc {\n         pure fn lookup(pos: file_pos) -> uint { return pos.ch; }\n         return self.lookup_pos(pos, lookup);\n     }\n \n-    pub fn lookup_byte_pos(@self, pos: uint) -> loc {\n+    pub fn lookup_byte_pos(@self, pos: byte_pos) -> loc {\n         pure fn lookup(pos: file_pos) -> uint { return pos.byte; }\n         return self.lookup_pos(pos, lookup);\n     }\n \n-    pub fn lookup_char_pos_adj(@self, pos: uint)\n+    pub fn lookup_char_pos_adj(@self, pos: char_pos)\n         -> {filename: ~str, line: uint, col: uint, file: Option<@filemap>}\n     {\n         let loc = self.lookup_char_pos(pos);\n@@ -195,8 +198,8 @@ pub impl CodeMap {\n         return @file_lines {file: lo.file, lines: lines};\n     }\n \n-    fn lookup_byte_offset(@self, chpos: uint)\n-        -> {fm: @filemap, pos: uint} {\n+    fn lookup_byte_offset(@self, chpos: char_pos)\n+        -> {fm: @filemap, pos: byte_pos} {\n         pure fn lookup(pos: file_pos) -> uint { return pos.ch; }\n         let {fm, line} = self.lookup_line(chpos, lookup);\n         let line_offset = fm.lines[line].byte - fm.start_pos.byte;"}]}