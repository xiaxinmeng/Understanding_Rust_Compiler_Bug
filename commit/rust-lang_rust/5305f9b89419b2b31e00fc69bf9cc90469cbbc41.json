{"sha": "5305f9b89419b2b31e00fc69bf9cc90469cbbc41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMDVmOWI4OTQxOWIyYjMxZTAwZmM2OWJmOWNjOTA0NjljYmJjNDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-21T07:50:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-21T07:50:55Z"}, "message": "auto merge of #16362 : nham/rust/std_rand_pi_example, r=huonw\n\nPros:\r\nI like this example because it's concise without being trivial. The Monty Hall example code is somewhat lengthy and possibly inaccessible to those unfamiliar with probability.\r\n\r\nCons:\r\nThe Monty Hall example already exists. Do we need another example? Also, this is probably inaccessible to people who don't know basic geometry.", "tree": {"sha": "cc8062243ba65a4c3a6dd6baa54a76cc752c1f37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc8062243ba65a4c3a6dd6baa54a76cc752c1f37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5305f9b89419b2b31e00fc69bf9cc90469cbbc41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5305f9b89419b2b31e00fc69bf9cc90469cbbc41", "html_url": "https://github.com/rust-lang/rust/commit/5305f9b89419b2b31e00fc69bf9cc90469cbbc41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5305f9b89419b2b31e00fc69bf9cc90469cbbc41/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20b3313c8c14a8f7ee29215734b26f79b4f2b2a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/20b3313c8c14a8f7ee29215734b26f79b4f2b2a4", "html_url": "https://github.com/rust-lang/rust/commit/20b3313c8c14a8f7ee29215734b26f79b4f2b2a4"}, {"sha": "86587224d0b99c69da01ebfaf98052694036302b", "url": "https://api.github.com/repos/rust-lang/rust/commits/86587224d0b99c69da01ebfaf98052694036302b", "html_url": "https://github.com/rust-lang/rust/commit/86587224d0b99c69da01ebfaf98052694036302b"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "b7bf75e39a558b8d87c863c64f184e4f338cbac8", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5305f9b89419b2b31e00fc69bf9cc90469cbbc41/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305f9b89419b2b31e00fc69bf9cc90469cbbc41/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=5305f9b89419b2b31e00fc69bf9cc90469cbbc41", "patch": "@@ -70,6 +70,49 @@\n //! println!(\"{}\", tuple)\n //! ```\n //!\n+//! ## Monte Carlo estimation of \u03c0\n+//!\n+//! For this example, imagine we have a square with sides of length 2 and a unit\n+//! circle, both centered at the origin. Since the area of a unit circle is \u03c0,\n+//! we have:\n+//!\n+//! ```notrust\n+//!     (area of unit circle) / (area of square) = \u03c0 / 4\n+//! ```\n+//!\n+//! So if we sample many points randomly from the square, roughly \u03c0 / 4 of them\n+//! should be inside the circle.\n+//!\n+//! We can use the above fact to estimate the value of \u03c0: pick many points in the\n+//! square at random, calculate the fraction that fall within the circle, and\n+//! multiply this fraction by 4.\n+//!\n+//! ```\n+//! use std::rand;\n+//! use std::rand::distributions::{IndependentSample, Range};\n+//!\n+//! fn main() {\n+//!    let between = Range::new(-1f64, 1.);\n+//!    let mut rng = rand::task_rng();\n+//!\n+//!    let total = 1_000_000u;\n+//!    let mut in_circle = 0u;\n+//!\n+//!    for _ in range(0u, total) {\n+//!        let a = between.ind_sample(&mut rng);\n+//!        let b = between.ind_sample(&mut rng);\n+//!        if a*a + b*b <= 1. {\n+//!            in_circle += 1;\n+//!        }\n+//!    }\n+//!\n+//!    // prints something close to 3.14159...\n+//!    println!(\"{}\", 4. * (in_circle as f64) / (total as f64));\n+//! }\n+//! ```\n+//!\n+//! ## Monty Hall Problem\n+//!\n //! This is a simulation of the [Monty Hall Problem][]:\n //!\n //! > Suppose you're on a game show, and you're given the choice of three doors:"}]}