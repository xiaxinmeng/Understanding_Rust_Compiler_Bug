{"sha": "4a850159cd56805aa0a79ab9cb0ab1f831a97144", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhODUwMTU5Y2Q1NjgwNWFhMGE3OWFiOWNiMGFiMWY4MzFhOTcxNDQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-16T19:49:47Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-16T19:49:47Z"}, "message": "Remove `TyParen` from HIR", "tree": {"sha": "0983c46995d8f9ea323ca33d6e4be83cf3032dbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0983c46995d8f9ea323ca33d6e4be83cf3032dbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a850159cd56805aa0a79ab9cb0ab1f831a97144", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a850159cd56805aa0a79ab9cb0ab1f831a97144", "html_url": "https://github.com/rust-lang/rust/commit/4a850159cd56805aa0a79ab9cb0ab1f831a97144", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a850159cd56805aa0a79ab9cb0ab1f831a97144/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57c8a3e8b6a3200bb01d0ea60e4686a1ecfcb907", "url": "https://api.github.com/repos/rust-lang/rust/commits/57c8a3e8b6a3200bb01d0ea60e4686a1ecfcb907", "html_url": "https://github.com/rust-lang/rust/commit/57c8a3e8b6a3200bb01d0ea60e4686a1ecfcb907"}], "stats": {"total": 17, "additions": 4, "deletions": 13}, "files": [{"sha": "835a96c64085423cfc9d3cd572e899b4a091dc62", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a850159cd56805aa0a79ab9cb0ab1f831a97144/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a850159cd56805aa0a79ab9cb0ab1f831a97144/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=4a850159cd56805aa0a79ab9cb0ab1f831a97144", "patch": "@@ -1444,7 +1444,6 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                     hir::TyTup(tys) => {\n                         hir::TyTup(tys.into_iter().map(|ty| build_to(ty, to)).collect())\n                     }\n-                    hir::TyParen(typ) => hir::TyParen(build_to(typ, to)),\n                     other => other\n                 };\n                 hir::Ty { id: id, node: new_node, span: span }"}, {"sha": "b38aae240f53b136d82a70ad86c1eb1191c2a562", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a850159cd56805aa0a79ab9cb0ab1f831a97144/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a850159cd56805aa0a79ab9cb0ab1f831a97144/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=4a850159cd56805aa0a79ab9cb0ab1f831a97144", "patch": "@@ -382,7 +382,6 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n                     }))\n                 }\n                 TyTup(tys) => TyTup(tys.move_map(|ty| fld.fold_ty(ty))),\n-                TyParen(ty) => TyParen(fld.fold_ty(ty)),\n                 TyPath(qself, path) => {\n                     let qself = qself.map(|QSelf { ty, position }| {\n                         QSelf {"}, {"sha": "aa21c3ea0423e9865a27bb14a25ae6ef9634bc1e", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a850159cd56805aa0a79ab9cb0ab1f831a97144/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a850159cd56805aa0a79ab9cb0ab1f831a97144/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=4a850159cd56805aa0a79ab9cb0ab1f831a97144", "patch": "@@ -848,8 +848,6 @@ pub enum Ty_ {\n     TyObjectSum(P<Ty>, TyParamBounds),\n     /// A type like `for<'a> Foo<&'a Bar>`\n     TyPolyTraitRef(TyParamBounds),\n-    /// No-op; kept solely so that we can pretty-print faithfully\n-    TyParen(P<Ty>),\n     /// Unused for now\n     TyTypeof(P<Expr>),\n     /// TyInfer means the type should be inferred instead of it having been"}, {"sha": "0a5919198225836ba3e151cfd92f19d8ea11c350", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a850159cd56805aa0a79ab9cb0ab1f831a97144/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a850159cd56805aa0a79ab9cb0ab1f831a97144/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=4a850159cd56805aa0a79ab9cb0ab1f831a97144", "patch": "@@ -225,7 +225,9 @@ pub fn lower_ty(_lctx: &LoweringContext, t: &Ty) -> P<hir::Ty> {\n                 }))\n             }\n             TyTup(ref tys) => hir::TyTup(tys.iter().map(|ty| lower_ty(_lctx, ty)).collect()),\n-            TyParen(ref ty) => hir::TyParen(lower_ty(_lctx, ty)),\n+            TyParen(ref ty) => {\n+                return lower_ty(_lctx, ty);\n+            }\n             TyPath(ref qself, ref path) => {\n                 let qself = qself.as_ref().map(|&QSelf { ref ty, position }| {\n                     hir::QSelf {"}, {"sha": "002181c357b334cc408967d4db0fe77922c4a65a", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a850159cd56805aa0a79ab9cb0ab1f831a97144/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a850159cd56805aa0a79ab9cb0ab1f831a97144/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=4a850159cd56805aa0a79ab9cb0ab1f831a97144", "patch": "@@ -506,11 +506,6 @@ impl<'a> State<'a> {\n                 }\n                 try!(self.pclose());\n             }\n-            hir::TyParen(ref typ) => {\n-                try!(self.popen());\n-                try!(self.print_type(&**typ));\n-                try!(self.pclose());\n-            }\n             hir::TyBareFn(ref f) => {\n                 let generics = hir::Generics {\n                     lifetimes: f.lifetimes.clone(),"}, {"sha": "8307543958f9145c966e3176c1b4615046bdc064", "filename": "src/librustc_front/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a850159cd56805aa0a79ab9cb0ab1f831a97144/src%2Flibrustc_front%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a850159cd56805aa0a79ab9cb0ab1f831a97144/src%2Flibrustc_front%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fvisit.rs?ref=4a850159cd56805aa0a79ab9cb0ab1f831a97144", "patch": "@@ -349,7 +349,7 @@ pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n \n pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n     match typ.node {\n-        TyVec(ref ty) | TyParen(ref ty) => {\n+        TyVec(ref ty) => {\n             visitor.visit_ty(ty)\n         }\n         TyPtr(ref mutable_type) => {"}, {"sha": "7de262dfa5b95adfcee85f47e2becf5847df1208", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a850159cd56805aa0a79ab9cb0ab1f831a97144/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a850159cd56805aa0a79ab9cb0ab1f831a97144/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4a850159cd56805aa0a79ab9cb0ab1f831a97144", "patch": "@@ -1624,7 +1624,6 @@ pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx>,\n                              .collect();\n             tcx.mk_tup(flds)\n         }\n-        hir::TyParen(ref typ) => ast_ty_to_ty(this, rscope, &**typ),\n         hir::TyBareFn(ref bf) => {\n             require_c_abi_if_variadic(tcx, &bf.decl, bf.abi, ast_ty.span);\n             let bare_fn = ty_of_bare_fn(this, bf.unsafety, bf.abi, &*bf.decl);"}, {"sha": "dbf71e431d4d1d5dde4916c484fcdbb8c2821c5a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a850159cd56805aa0a79ab9cb0ab1f831a97144/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a850159cd56805aa0a79ab9cb0ab1f831a97144/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4a850159cd56805aa0a79ab9cb0ab1f831a97144", "patch": "@@ -1606,7 +1606,6 @@ impl Clean<Type> for hir::Ty {\n                 }\n             }\n             TyBareFn(ref barefn) => BareFunction(box barefn.clean(cx)),\n-            TyParen(ref ty) => ty.clean(cx),\n             TyPolyTraitRef(ref bounds) => {\n                 PolyTraitRef(bounds.clean(cx))\n             },"}]}