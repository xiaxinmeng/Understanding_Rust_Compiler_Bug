{"sha": "66de34b0352146994b76e6399dd5cd5abc3ae3ce", "node_id": "C_kwDOAAsO6NoAKDY2ZGUzNGIwMzUyMTQ2OTk0Yjc2ZTYzOTlkZDVjZDVhYmMzYWUzY2U", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-17T15:15:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-17T15:15:49Z"}, "message": "Rollup merge of #102454 - chenyukang:fix-102396-missing-parentheses, r=lcnr\n\nSuggest parentheses for possible range method calling\n\nFixes #102396", "tree": {"sha": "b7862b99d771ff63dd7b0a9d56152e1c1462dc96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7862b99d771ff63dd7b0a9d56152e1c1462dc96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66de34b0352146994b76e6399dd5cd5abc3ae3ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjTXGlCRBK7hj4Ov3rIwAAFIMIAIK4XYdg1v4VrOdXjsJU0u8W\nH6led/BkDCi234WCThGNkt0A1spwDDiT1O6x5KCWj0fH4hv3p9UxXtEURpM2L1rL\n33AyzMeDzmj/FZzOybpJOlvTvcvxpR4Gjj4PDxl3iOYCiksTKlb7CD9qEvevR4Wp\nRMCT1iS6Z3dyOfPuPEXsGWvoNFsIHxYKB8OD/F0I343BPP3KFmppM85J5A9fA1uL\n+HsbIcFDtImkFB/TH+2Sh513qA1nMJUW+KZkySPho0/hcgtflBMDYMskWyR6HDuW\ntsitfv1g4ijuly9rXN3DsGisGNZyii+zh609VWYdVtjhwyoGPuVQ4lzBXHWI3hM=\n=+XCe\n-----END PGP SIGNATURE-----\n", "payload": "tree b7862b99d771ff63dd7b0a9d56152e1c1462dc96\nparent abd77441010d74430be5c34a2e62002e578fa165\nparent 151001c1cb1c054d7f259e90ed44b31c25ba2db7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666019749 +0200\ncommitter GitHub <noreply@github.com> 1666019749 +0200\n\nRollup merge of #102454 - chenyukang:fix-102396-missing-parentheses, r=lcnr\n\nSuggest parentheses for possible range method calling\n\nFixes #102396\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66de34b0352146994b76e6399dd5cd5abc3ae3ce", "html_url": "https://github.com/rust-lang/rust/commit/66de34b0352146994b76e6399dd5cd5abc3ae3ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66de34b0352146994b76e6399dd5cd5abc3ae3ce/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abd77441010d74430be5c34a2e62002e578fa165", "url": "https://api.github.com/repos/rust-lang/rust/commits/abd77441010d74430be5c34a2e62002e578fa165", "html_url": "https://github.com/rust-lang/rust/commit/abd77441010d74430be5c34a2e62002e578fa165"}, {"sha": "151001c1cb1c054d7f259e90ed44b31c25ba2db7", "url": "https://api.github.com/repos/rust-lang/rust/commits/151001c1cb1c054d7f259e90ed44b31c25ba2db7", "html_url": "https://github.com/rust-lang/rust/commit/151001c1cb1c054d7f259e90ed44b31c25ba2db7"}], "stats": {"total": 396, "additions": 384, "deletions": 12}, "files": [{"sha": "357c6900a70e547c8256518532a688217cf31801", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66de34b0352146994b76e6399dd5cd5abc3ae3ce/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/66de34b0352146994b76e6399dd5cd5abc3ae3ce/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=66de34b0352146994b76e6399dd5cd5abc3ae3ce", "patch": "@@ -133,3 +133,7 @@ hir_analysis_extern_crate_not_idiomatic =\n     .suggestion = convert it to a `{$msg_code}`\n \n hir_analysis_expected_used_symbol = expected `used`, `used(compiler)` or `used(linker)`\n+\n+hir_analysis_missing_parentheses_in_range = can't call method `{$method_name}` on type `{$ty_str}`\n+\n+hir_analysis_add_missing_parentheses_in_range = you must surround the range in parentheses to call its `{$func_name}` function"}, {"sha": "bfa5b68168fdb37582d15529c5bb3d0caf9456ba", "filename": "compiler/rustc_hir_analysis/src/check/method/suggest.rs", "status": "modified", "additions": 87, "deletions": 2, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/66de34b0352146994b76e6399dd5cd5abc3ae3ce/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66de34b0352146994b76e6399dd5cd5abc3ae3ce/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=66de34b0352146994b76e6399dd5cd5abc3ae3ce", "patch": "@@ -2,6 +2,7 @@\n //! found or is otherwise invalid.\n \n use crate::check::FnCtxt;\n+use crate::errors;\n use rustc_ast::ast::Mutability;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{\n@@ -271,7 +272,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 };\n \n-                if self.suggest_constraining_numerical_ty(\n+                if self.suggest_wrapping_range_with_parens(\n+                    tcx, actual, source, span, item_name, &ty_str,\n+                ) || self.suggest_constraining_numerical_ty(\n                     tcx, actual, source, span, item_kind, item_name, &ty_str,\n                 ) {\n                     return None;\n@@ -1202,6 +1205,89 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         false\n     }\n \n+    /// Suggest possible range with adding parentheses, for example:\n+    /// when encountering `0..1.map(|i| i + 1)` suggest `(0..1).map(|i| i + 1)`.\n+    fn suggest_wrapping_range_with_parens(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        actual: Ty<'tcx>,\n+        source: SelfSource<'tcx>,\n+        span: Span,\n+        item_name: Ident,\n+        ty_str: &str,\n+    ) -> bool {\n+        if let SelfSource::MethodCall(expr) = source {\n+            for (_, parent) in tcx.hir().parent_iter(expr.hir_id).take(5) {\n+                if let Node::Expr(parent_expr) = parent {\n+                    let lang_item = match parent_expr.kind {\n+                        ExprKind::Struct(ref qpath, _, _) => match **qpath {\n+                            QPath::LangItem(LangItem::Range, ..) => Some(LangItem::Range),\n+                            QPath::LangItem(LangItem::RangeTo, ..) => Some(LangItem::RangeTo),\n+                            QPath::LangItem(LangItem::RangeToInclusive, ..) => {\n+                                Some(LangItem::RangeToInclusive)\n+                            }\n+                            _ => None,\n+                        },\n+                        ExprKind::Call(ref func, _) => match func.kind {\n+                            // `..=` desugars into `::std::ops::RangeInclusive::new(...)`.\n+                            ExprKind::Path(QPath::LangItem(LangItem::RangeInclusiveNew, ..)) => {\n+                                Some(LangItem::RangeInclusiveStruct)\n+                            }\n+                            _ => None,\n+                        },\n+                        _ => None,\n+                    };\n+\n+                    if lang_item.is_none() {\n+                        continue;\n+                    }\n+\n+                    let span_included = match parent_expr.kind {\n+                        hir::ExprKind::Struct(_, eps, _) => {\n+                            eps.len() > 0 && eps.last().map_or(false, |ep| ep.span.contains(span))\n+                        }\n+                        // `..=` desugars into `::std::ops::RangeInclusive::new(...)`.\n+                        hir::ExprKind::Call(ref func, ..) => func.span.contains(span),\n+                        _ => false,\n+                    };\n+\n+                    if !span_included {\n+                        continue;\n+                    }\n+\n+                    let range_def_id = self.tcx.require_lang_item(lang_item.unwrap(), None);\n+                    let range_ty =\n+                        self.tcx.bound_type_of(range_def_id).subst(self.tcx, &[actual.into()]);\n+\n+                    let pick = self.probe_for_name(\n+                        span,\n+                        Mode::MethodCall,\n+                        item_name,\n+                        IsSuggestion(true),\n+                        range_ty,\n+                        expr.hir_id,\n+                        ProbeScope::AllTraits,\n+                    );\n+                    if pick.is_ok() {\n+                        let range_span = parent_expr.span.with_hi(expr.span.hi());\n+                        tcx.sess.emit_err(errors::MissingParentheseInRange {\n+                            span,\n+                            ty_str: ty_str.to_string(),\n+                            method_name: item_name.as_str().to_string(),\n+                            add_missing_parentheses: Some(errors::AddMissingParenthesesInRange {\n+                                func_name: item_name.name.as_str().to_string(),\n+                                left: range_span.shrink_to_lo(),\n+                                right: range_span.shrink_to_hi(),\n+                            }),\n+                        });\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        false\n+    }\n+\n     fn suggest_constraining_numerical_ty(\n         &self,\n         tcx: TyCtxt<'tcx>,\n@@ -1264,7 +1350,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // If this is a floating point literal that ends with '.',\n                     // get rid of it to stop this from becoming a member access.\n                     let snippet = snippet.strip_suffix('.').unwrap_or(&snippet);\n-\n                     err.span_suggestion(\n                         lit.span,\n                         &format!("}, {"sha": "41f73323d9a9aee6f22f8a073659a61d286d2a6a", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/66de34b0352146994b76e6399dd5cd5abc3ae3ce/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66de34b0352146994b76e6399dd5cd5abc3ae3ce/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=66de34b0352146994b76e6399dd5cd5abc3ae3ce", "patch": "@@ -346,3 +346,29 @@ pub struct ExpectedUsedSymbol {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis::missing_parentheses_in_range, code = \"E0689\")]\n+pub struct MissingParentheseInRange {\n+    #[primary_span]\n+    #[label(hir_analysis::missing_parentheses_in_range)]\n+    pub span: Span,\n+    pub ty_str: String,\n+    pub method_name: String,\n+\n+    #[subdiagnostic]\n+    pub add_missing_parentheses: Option<AddMissingParenthesesInRange>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[multipart_suggestion_verbose(\n+    hir_analysis::add_missing_parentheses_in_range,\n+    applicability = \"maybe-incorrect\"\n+)]\n+pub struct AddMissingParenthesesInRange {\n+    pub func_name: String,\n+    #[suggestion_part(code = \"(\")]\n+    pub left: Span,\n+    #[suggestion_part(code = \")\")]\n+    pub right: Span,\n+}"}, {"sha": "79cdc41959a74375248dbeb794c46084e2d5ecbc", "filename": "src/test/ui/methods/issues/issue-90315.rs", "status": "modified", "additions": 74, "deletions": 5, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/66de34b0352146994b76e6399dd5cd5abc3ae3ce/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66de34b0352146994b76e6399dd5cd5abc3ae3ce/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.rs?ref=66de34b0352146994b76e6399dd5cd5abc3ae3ce", "patch": "@@ -1,7 +1,76 @@\n+#![allow(unused)]\n fn main() {\n-  let arr = &[0,1,2,3];\n-  for _i in 0..arr.len().rev() { //~ERROR not an iterator\n-     // The above error used to say \u201cthe method `rev` exists for type `usize`\u201d.\n-     // This regression test ensures it doesn't say that any more.\n-  }\n+    let arr = &[0, 1, 2, 3];\n+    for _i in 0..arr.len().rev() {\n+        //~^ ERROR can't call method\n+        //~| surround the range in parentheses\n+        // The above error used to say \u201cthe method `rev` exists for type `usize`\u201d.\n+        // This regression test ensures it doesn't say that any more.\n+    }\n+\n+    // Test for #102396\n+    for i in 1..11.rev() {\n+        //~^ ERROR can't call method\n+        //~| HELP surround the range in parentheses\n+    }\n+\n+    let end: usize = 10;\n+    for i in 1..end.rev() {\n+        //~^ ERROR can't call method\n+        //~| HELP surround the range in parentheses\n+    }\n+\n+    for i in 1..(end + 1).rev() {\n+        //~^ ERROR can't call method\n+        //~| HELP surround the range in parentheses\n+    }\n+\n+    if 1..(end + 1).is_empty() {\n+        //~^ ERROR can't call method\n+        //~| ERROR mismatched types [E0308]\n+        //~| HELP surround the range in parentheses\n+    }\n+\n+    if 1..(end + 1).is_sorted() {\n+        //~^ ERROR mismatched types [E0308]\n+        //~| ERROR can't call method\n+        //~| HELP surround the range in parentheses\n+    }\n+\n+    let _res: i32 = 3..6.take(2).sum();\n+    //~^ ERROR can't call method\n+    //~| ERROR mismatched types [E0308]\n+    //~| HELP surround the range in parentheses\n+\n+    let _sum: i32 = 3..6.sum();\n+    //~^ ERROR can't call method\n+    //~| ERROR mismatched types [E0308]\n+    //~| HELP surround the range in parentheses\n+\n+    let a = 1 as usize;\n+    let b = 10 as usize;\n+\n+    for _a in a..=b.rev() {\n+        //~^ ERROR can't call method\n+        //~| HELP surround the range in parentheses\n+    }\n+\n+    let _res = ..10.contains(3);\n+    //~^ ERROR can't call method\n+    //~| HELP surround the range in parentheses\n+\n+    if 1..end.error_method() {\n+        //~^ ERROR no method named `error_method`\n+        //~| ERROR mismatched types [E0308]\n+        // Won't suggest\n+    }\n+\n+    let _res = b.take(1)..a;\n+    //~^ ERROR `usize` is not an iterator\n+\n+    let _res: i32 = ..6.take(2).sum();\n+    //~^ can't call method `take` on ambiguous numeric type\n+    //~| ERROR mismatched types [E0308]\n+    //~| HELP you must specify a concrete type for this numeric value\n+    // Won't suggest because `RangeTo` dest not implemented `take`\n }"}, {"sha": "070cd3054369b686b5f2e5cdb12ccfe78d8cd5e9", "filename": "src/test/ui/methods/issues/issue-90315.stderr", "status": "modified", "additions": 193, "deletions": 5, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/66de34b0352146994b76e6399dd5cd5abc3ae3ce/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66de34b0352146994b76e6399dd5cd5abc3ae3ce/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr?ref=66de34b0352146994b76e6399dd5cd5abc3ae3ce", "patch": "@@ -1,13 +1,201 @@\n+error[E0689]: can't call method `rev` on type `usize`\n+  --> $DIR/issue-90315.rs:4:28\n+   |\n+LL |     for _i in 0..arr.len().rev() {\n+   |                            ^^^ can't call method `rev` on type `usize`\n+   |\n+help: you must surround the range in parentheses to call its `rev` function\n+   |\n+LL |     for _i in (0..arr.len()).rev() {\n+   |               +            +\n+\n+error[E0689]: can't call method `rev` on type `{integer}`\n+  --> $DIR/issue-90315.rs:12:20\n+   |\n+LL |     for i in 1..11.rev() {\n+   |                    ^^^ can't call method `rev` on type `{integer}`\n+   |\n+help: you must surround the range in parentheses to call its `rev` function\n+   |\n+LL |     for i in (1..11).rev() {\n+   |              +     +\n+\n+error[E0689]: can't call method `rev` on type `usize`\n+  --> $DIR/issue-90315.rs:18:21\n+   |\n+LL |     for i in 1..end.rev() {\n+   |                     ^^^ can't call method `rev` on type `usize`\n+   |\n+help: you must surround the range in parentheses to call its `rev` function\n+   |\n+LL |     for i in (1..end).rev() {\n+   |              +      +\n+\n+error[E0689]: can't call method `rev` on type `usize`\n+  --> $DIR/issue-90315.rs:23:27\n+   |\n+LL |     for i in 1..(end + 1).rev() {\n+   |                           ^^^ can't call method `rev` on type `usize`\n+   |\n+help: you must surround the range in parentheses to call its `rev` function\n+   |\n+LL |     for i in (1..(end + 1)).rev() {\n+   |              +            +\n+\n+error[E0689]: can't call method `is_empty` on type `usize`\n+  --> $DIR/issue-90315.rs:28:21\n+   |\n+LL |     if 1..(end + 1).is_empty() {\n+   |                     ^^^^^^^^ can't call method `is_empty` on type `usize`\n+   |\n+help: you must surround the range in parentheses to call its `is_empty` function\n+   |\n+LL |     if (1..(end + 1)).is_empty() {\n+   |        +            +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90315.rs:28:8\n+   |\n+LL |     if 1..(end + 1).is_empty() {\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+            found struct `std::ops::Range<{integer}>`\n+\n+error[E0689]: can't call method `is_sorted` on type `usize`\n+  --> $DIR/issue-90315.rs:34:21\n+   |\n+LL |     if 1..(end + 1).is_sorted() {\n+   |                     ^^^^^^^^^ can't call method `is_sorted` on type `usize`\n+   |\n+help: you must surround the range in parentheses to call its `is_sorted` function\n+   |\n+LL |     if (1..(end + 1)).is_sorted() {\n+   |        +            +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90315.rs:34:8\n+   |\n+LL |     if 1..(end + 1).is_sorted() {\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+            found struct `std::ops::Range<{integer}>`\n+\n+error[E0689]: can't call method `take` on type `{integer}`\n+  --> $DIR/issue-90315.rs:40:26\n+   |\n+LL |     let _res: i32 = 3..6.take(2).sum();\n+   |                          ^^^^ can't call method `take` on type `{integer}`\n+   |\n+help: you must surround the range in parentheses to call its `take` function\n+   |\n+LL |     let _res: i32 = (3..6).take(2).sum();\n+   |                     +    +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90315.rs:40:21\n+   |\n+LL |     let _res: i32 = 3..6.take(2).sum();\n+   |               ---   ^^^^^^^^^^^^^^^^^^ expected `i32`, found struct `std::ops::Range`\n+   |               |\n+   |               expected due to this\n+   |\n+   = note: expected type `i32`\n+            found struct `std::ops::Range<{integer}>`\n+\n+error[E0689]: can't call method `sum` on type `{integer}`\n+  --> $DIR/issue-90315.rs:45:26\n+   |\n+LL |     let _sum: i32 = 3..6.sum();\n+   |                          ^^^ can't call method `sum` on type `{integer}`\n+   |\n+help: you must surround the range in parentheses to call its `sum` function\n+   |\n+LL |     let _sum: i32 = (3..6).sum();\n+   |                     +    +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90315.rs:45:21\n+   |\n+LL |     let _sum: i32 = 3..6.sum();\n+   |               ---   ^^^^^^^^^^ expected `i32`, found struct `std::ops::Range`\n+   |               |\n+   |               expected due to this\n+   |\n+   = note: expected type `i32`\n+            found struct `std::ops::Range<{integer}>`\n+\n+error[E0689]: can't call method `rev` on type `usize`\n+  --> $DIR/issue-90315.rs:53:21\n+   |\n+LL |     for _a in a..=b.rev() {\n+   |                     ^^^ can't call method `rev` on type `usize`\n+   |\n+help: you must surround the range in parentheses to call its `rev` function\n+   |\n+LL |     for _a in (a..=b).rev() {\n+   |               +     +\n+\n+error[E0689]: can't call method `contains` on type `{integer}`\n+  --> $DIR/issue-90315.rs:58:21\n+   |\n+LL |     let _res = ..10.contains(3);\n+   |                     ^^^^^^^^ can't call method `contains` on type `{integer}`\n+   |\n+help: you must surround the range in parentheses to call its `contains` function\n+   |\n+LL |     let _res = (..10).contains(3);\n+   |                +    +\n+\n+error[E0599]: no method named `error_method` found for type `usize` in the current scope\n+  --> $DIR/issue-90315.rs:62:15\n+   |\n+LL |     if 1..end.error_method() {\n+   |               ^^^^^^^^^^^^ method not found in `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90315.rs:62:8\n+   |\n+LL |     if 1..end.error_method() {\n+   |        ^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n+   |\n+   = note: expected type `bool`\n+            found struct `std::ops::Range<{integer}>`\n+\n error[E0599]: `usize` is not an iterator\n-  --> $DIR/issue-90315.rs:3:26\n+  --> $DIR/issue-90315.rs:68:18\n    |\n-LL |   for _i in 0..arr.len().rev() {\n-   |                          ^^^ `usize` is not an iterator\n+LL |     let _res = b.take(1)..a;\n+   |                  ^^^^ `usize` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `usize: Iterator`\n            which is required by `&mut usize: Iterator`\n \n-error: aborting due to previous error\n+error[E0689]: can't call method `take` on ambiguous numeric type `{integer}`\n+  --> $DIR/issue-90315.rs:71:25\n+   |\n+LL |     let _res: i32 = ..6.take(2).sum();\n+   |                         ^^^^\n+   |\n+help: you must specify a concrete type for this numeric value, like `i32`\n+   |\n+LL |     let _res: i32 = ..6_i32.take(2).sum();\n+   |                       ~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90315.rs:71:21\n+   |\n+LL |     let _res: i32 = ..6.take(2).sum();\n+   |               ---   ^^^^^^^^^^^^^^^^^ expected `i32`, found struct `RangeTo`\n+   |               |\n+   |               expected due to this\n+   |\n+   = note: expected type `i32`\n+            found struct `RangeTo<_>`\n+\n+error: aborting due to 19 previous errors\n \n-For more information about this error, try `rustc --explain E0599`.\n+Some errors have detailed explanations: E0308, E0599, E0689.\n+For more information about an error, try `rustc --explain E0308`."}]}