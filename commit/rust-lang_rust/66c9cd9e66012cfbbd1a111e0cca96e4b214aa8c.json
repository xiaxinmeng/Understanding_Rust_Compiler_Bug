{"sha": "66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YzljZDllNjYwMTJjZmJiZDFhMTExZTBjY2E5NmU0YjIxNGFhOGM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-07-14T15:31:58Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-07-18T02:14:22Z"}, "message": "Remove OpaqueTyOrigin::Binding", "tree": {"sha": "e492ddf4fdfa8086056f6b38dc9e177956e554e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e492ddf4fdfa8086056f6b38dc9e177956e554e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmDzjn4ACgkQgTGiTgx5\n76+mXg/9ELSzijNFLMCWgbrMKTQPUpkDyD/vy5Vgss164R0Ouq2Hxgf6EfM5pl0r\nymrmnGlO9ePTXEn0vTARXVkirKTwv9JO/MTlIzW0zZOLqu0gGlTpJp1RRAQ3xJ4I\nx5fHbj3wMQBkgiKmLiCf5Tra/ilsz2unXSuHyF5GfgW/JFvm74YKzt5ub29i8qX0\nKUXrgDpELF9ojYt2cMrVEBrsKGaBOYo8SGPzPW5LbWla4ZfZ8cQsa7dkRO/+JFtV\nri+Fxs6Y37zecAcyGVvoX77OH4vcfVXUrFIPoO9w/mqmHuvW7IDakDaNBrEysgrO\nEtgmXOgsy3AVdCgUdPf5IEfn7GookG27MYoHqbxO/npVM6hMExrJBFevnkk1EsL0\nW7SDd/iav86D+WS+s0G0/6z8xCX7SldzMU80fEVeHSOyRnQUVkj08NNItd3LsYG7\nuVIJCEUNVGu+iOqbz20zPYcoPihbGWkizTgn1pzz5mf1470Zbo31UIZEb4UDcOCo\nePO4BtHmDFmUb/i4REBMH1NnX3ENAez1uvduBB+qg0wUJfg1UGzQyyPAeQSuhh4U\nUhjHjU2rbgYnEYyZt+oHTDsO29Ef/6hhKi4y2IFjLI1XiWBriDfPwKk2Uj5HTSe5\nSG6t1ve5ruDyQoxaF7baD0Ex4OR+3OBLAeF9jEW4VLqz7Clbgeo=\n=73NA\n-----END PGP SIGNATURE-----", "payload": "tree e492ddf4fdfa8086056f6b38dc9e177956e554e4\nparent eb0b95b55a0b38d91e834dd30902b67627ed2eb0\nauthor Santiago Pastorino <spastorino@gmail.com> 1626276718 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1626574462 -0300\n\nRemove OpaqueTyOrigin::Binding\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c", "html_url": "https://github.com/rust-lang/rust/commit/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "html_url": "https://github.com/rust-lang/rust/commit/eb0b95b55a0b38d91e834dd30902b67627ed2eb0"}], "stats": {"total": 818, "additions": 84, "deletions": 734}, "files": [{"sha": "0306196f65a0e092dd06cc47060d35a2737a1239", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c", "patch": "@@ -264,7 +264,7 @@ enum ImplTraitContext<'b, 'a> {\n         /// Origin: Either OpaqueTyOrigin::FnReturn or OpaqueTyOrigin::AsyncFn,\n         origin: hir::OpaqueTyOrigin,\n     },\n-    /// Impl trait in type aliases, consts and statics.\n+    /// Impl trait in type aliases.\n     OtherOpaqueTy {\n         /// Set of lifetimes that this opaque type can capture, if it uses\n         /// them. This includes lifetimes bound since we entered this context.\n@@ -1767,21 +1767,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     fn lower_local(&mut self, l: &Local) -> hir::Local<'hir> {\n-        let ty = l.ty.as_ref().map(|t| {\n-            let mut capturable_lifetimes;\n-            self.lower_ty(\n-                t,\n-                if self.sess.features_untracked().impl_trait_in_bindings {\n-                    capturable_lifetimes = FxHashSet::default();\n-                    ImplTraitContext::OtherOpaqueTy {\n-                        capturable_lifetimes: &mut capturable_lifetimes,\n-                        origin: hir::OpaqueTyOrigin::Binding,\n-                    }\n-                } else {\n-                    ImplTraitContext::Disallowed(ImplTraitPosition::Binding)\n-                },\n-            )\n-        });\n+        let ty = l\n+            .ty\n+            .as_ref()\n+            .map(|t| self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Binding)));\n         let init = l.init.as_ref().map(|e| self.lower_expr(e));\n         let hir_id = self.lower_node_id(l.id);\n         self.lower_attrs(hir_id, &l.attrs);"}, {"sha": "141788e7df47a4659884fb20f9fddbbf84c26b44", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c", "patch": "@@ -2270,8 +2270,6 @@ pub enum OpaqueTyOrigin {\n     FnReturn,\n     /// `async fn`\n     AsyncFn,\n-    /// `let _: impl Trait = ...`\n-    Binding,\n     /// type aliases: `type Foo = impl Trait;`\n     TyAlias,\n     /// Impl trait consts, statics, bounds."}, {"sha": "f380ad54d7f77b0b17af51f30975a9c06112aaa4", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c", "patch": "@@ -402,9 +402,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n             // These opaque type inherit all lifetime parameters from their\n             // parent, so we have to check them all.\n-            hir::OpaqueTyOrigin::Binding\n-            | hir::OpaqueTyOrigin::TyAlias\n-            | hir::OpaqueTyOrigin::Misc => 0,\n+            hir::OpaqueTyOrigin::TyAlias | hir::OpaqueTyOrigin::Misc => 0,\n         };\n \n         let span = tcx.def_span(def_id);"}, {"sha": "98ac604b09f8e1fb16f4d9f8610165cd87b10975", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c", "patch": "@@ -665,13 +665,9 @@ pub(super) fn check_opaque_for_cycles<'tcx>(\n     span: Span,\n     origin: &hir::OpaqueTyOrigin,\n ) -> Result<(), ErrorReported> {\n-    if let Err(partially_expanded_type) = tcx.try_expand_impl_trait_type(def_id.to_def_id(), substs)\n-    {\n+    if tcx.try_expand_impl_trait_type(def_id.to_def_id(), substs).is_err() {\n         match origin {\n             hir::OpaqueTyOrigin::AsyncFn => async_opaque_type_cycle_error(tcx, span),\n-            hir::OpaqueTyOrigin::Binding => {\n-                binding_opaque_type_cycle_error(tcx, def_id, span, partially_expanded_type)\n-            }\n             _ => opaque_type_cycle_error(tcx, def_id, span),\n         }\n         Err(ErrorReported)\n@@ -704,8 +700,7 @@ fn check_opaque_meets_bounds<'tcx>(\n         // Checked when type checking the function containing them.\n         hir::OpaqueTyOrigin::FnReturn | hir::OpaqueTyOrigin::AsyncFn => return,\n         // Can have different predicates to their defining use\n-        hir::OpaqueTyOrigin::Binding | hir::OpaqueTyOrigin::Misc | hir::OpaqueTyOrigin::TyAlias => {\n-        }\n+        hir::OpaqueTyOrigin::Misc | hir::OpaqueTyOrigin::TyAlias => {}\n     }\n \n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);"}, {"sha": "11f0b47a457cec0e0b6cb11a82f5f19c8d89472f", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c", "patch": "@@ -573,66 +573,6 @@ fn get_owner_return_paths(\n         })\n }\n \n-/// Emit an error for recursive opaque types in a `let` binding.\n-fn binding_opaque_type_cycle_error(\n-    tcx: TyCtxt<'tcx>,\n-    def_id: LocalDefId,\n-    span: Span,\n-    partially_expanded_type: Ty<'tcx>,\n-) {\n-    let mut err = struct_span_err!(tcx.sess, span, E0720, \"cannot resolve opaque type\");\n-    err.span_label(span, \"cannot resolve opaque type\");\n-    // Find the owner that declared this `impl Trait` type.\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    let mut prev_hir_id = hir_id;\n-    let mut hir_id = tcx.hir().get_parent_node(hir_id);\n-    while let Some(node) = tcx.hir().find(hir_id) {\n-        match node {\n-            hir::Node::Local(hir::Local {\n-                pat,\n-                init: None,\n-                ty: Some(ty),\n-                source: hir::LocalSource::Normal,\n-                ..\n-            }) => {\n-                err.span_label(pat.span, \"this binding might not have a concrete type\");\n-                err.span_suggestion_verbose(\n-                    ty.span.shrink_to_hi(),\n-                    \"set the binding to a value for a concrete type to be resolved\",\n-                    \" = /* value */\".to_string(),\n-                    Applicability::HasPlaceholders,\n-                );\n-            }\n-            hir::Node::Local(hir::Local {\n-                init: Some(expr),\n-                source: hir::LocalSource::Normal,\n-                ..\n-            }) => {\n-                let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-                let typeck_results =\n-                    tcx.typeck(tcx.hir().local_def_id(tcx.hir().get_parent_item(hir_id)));\n-                if let Some(ty) = typeck_results.node_type_opt(expr.hir_id) {\n-                    err.span_label(\n-                        expr.span,\n-                        &format!(\n-                            \"this is of type `{}`, which doesn't constrain \\\n-                             `{}` enough to arrive to a concrete type\",\n-                            ty, partially_expanded_type\n-                        ),\n-                    );\n-                }\n-            }\n-            _ => {}\n-        }\n-        if prev_hir_id == hir_id {\n-            break;\n-        }\n-        prev_hir_id = hir_id;\n-        hir_id = tcx.hir().get_parent_node(hir_id);\n-    }\n-    err.emit();\n-}\n-\n // Forbid defining intrinsics in Rust code,\n // as they must always be defined by the compiler.\n fn fn_maybe_err(tcx: TyCtxt<'_>, sp: Span, abi: Abi) {"}, {"sha": "15469cb0066c50ec60112fb493d8e0a32653d224", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c", "patch": "@@ -356,9 +356,6 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n                     tcx.mk_adt(def, substs)\n                 }\n-                ItemKind::OpaqueTy(OpaqueTy { origin: hir::OpaqueTyOrigin::Binding, .. }) => {\n-                    let_position_impl_trait_type(tcx, def_id)\n-                }\n                 ItemKind::OpaqueTy(OpaqueTy { impl_trait_fn: None, .. }) => {\n                     find_opaque_ty_constraints(tcx, def_id)\n                 }\n@@ -696,60 +693,6 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     }\n }\n \n-/// Retrieve the inferred concrete type for let position impl trait.\n-///\n-/// This is different to other kinds of impl trait because:\n-///\n-/// 1. We know which function contains the defining use (the function that\n-///    contains the let statement)\n-/// 2. We do not currently allow (free) lifetimes in the return type. `let`\n-///    statements in some statically unreachable code are removed from the MIR\n-///    by the time we borrow check, and it's not clear how we should handle\n-///    those.\n-fn let_position_impl_trait_type(tcx: TyCtxt<'_>, opaque_ty_id: LocalDefId) -> Ty<'_> {\n-    let scope = tcx.hir().get_defining_scope(tcx.hir().local_def_id_to_hir_id(opaque_ty_id));\n-    let scope_def_id = tcx.hir().local_def_id(scope);\n-\n-    let opaque_ty_def_id = opaque_ty_id.to_def_id();\n-\n-    let owner_typeck_results = tcx.typeck(scope_def_id);\n-    let concrete_ty = owner_typeck_results\n-        .concrete_opaque_types\n-        .get_by(|(key, _)| key.def_id == opaque_ty_def_id)\n-        .map(|concrete_ty| *concrete_ty)\n-        .unwrap_or_else(|| {\n-            tcx.sess.delay_span_bug(\n-                DUMMY_SP,\n-                &format!(\n-                    \"owner {:?} has no opaque type for {:?} in its typeck results\",\n-                    scope_def_id, opaque_ty_id\n-                ),\n-            );\n-            if let Some(ErrorReported) = owner_typeck_results.tainted_by_errors {\n-                // Some error in the owner fn prevented us from populating the\n-                // `concrete_opaque_types` table.\n-                tcx.ty_error()\n-            } else {\n-                // We failed to resolve the opaque type or it resolves to\n-                // itself. Return the non-revealed type, which should result in\n-                // E0720.\n-                tcx.mk_opaque(\n-                    opaque_ty_def_id,\n-                    InternalSubsts::identity_for_item(tcx, opaque_ty_def_id),\n-                )\n-            }\n-        });\n-    debug!(\"concrete_ty = {:?}\", concrete_ty);\n-    if concrete_ty.has_erased_regions() {\n-        // FIXME(impl_trait_in_bindings) Handle this case.\n-        tcx.sess.span_fatal(\n-            tcx.hir().span(tcx.hir().local_def_id_to_hir_id(opaque_ty_id)),\n-            \"lifetimes in impl Trait types in bindings are not currently supported\",\n-        );\n-    }\n-    concrete_ty\n-}\n-\n fn infer_placeholder_type<'a>(\n     tcx: TyCtxt<'a>,\n     def_id: LocalDefId,"}, {"sha": "1d230b43c9f10368d9911619c86d11386a84f808", "filename": "src/test/ui/associated-type-bounds/duplicate.full_tait.stderr", "status": "modified", "additions": 34, "deletions": 58, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr?ref=66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c", "patch": "@@ -280,293 +280,269 @@ LL | static SIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:86:46\n-   |\n-LL | fn lit1() { let _: impl Iterator<Item: Copy, Item: Send> = iter::empty(); }\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:88:46\n-   |\n-LL | fn lit2() { let _: impl Iterator<Item: Copy, Item: Copy> = iter::empty(); }\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:90:49\n-   |\n-LL | fn lit3() { let _: impl Iterator<Item: 'static, Item: 'static> = iter::empty(); }\n-   |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:93:35\n+  --> $DIR/duplicate.rs:86:35\n    |\n LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:95:35\n+  --> $DIR/duplicate.rs:88:35\n    |\n LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:97:38\n+  --> $DIR/duplicate.rs:90:38\n    |\n LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:99:44\n+  --> $DIR/duplicate.rs:92:44\n    |\n LL | type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:101:44\n+  --> $DIR/duplicate.rs:94:44\n    |\n LL | type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:103:47\n+  --> $DIR/duplicate.rs:96:47\n    |\n LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:106:36\n+  --> $DIR/duplicate.rs:99:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:108:36\n+  --> $DIR/duplicate.rs:101:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:110:39\n+  --> $DIR/duplicate.rs:103:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:112:40\n+  --> $DIR/duplicate.rs:105:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:114:40\n+  --> $DIR/duplicate.rs:107:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:116:43\n+  --> $DIR/duplicate.rs:109:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:119:36\n+  --> $DIR/duplicate.rs:112:36\n    |\n LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:121:36\n+  --> $DIR/duplicate.rs:114:36\n    |\n LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:123:39\n+  --> $DIR/duplicate.rs:116:39\n    |\n LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:125:34\n+  --> $DIR/duplicate.rs:118:34\n    |\n LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:127:34\n+  --> $DIR/duplicate.rs:120:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:129:37\n+  --> $DIR/duplicate.rs:122:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:131:45\n+  --> $DIR/duplicate.rs:124:45\n    |\n LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:133:45\n+  --> $DIR/duplicate.rs:126:45\n    |\n LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:135:48\n+  --> $DIR/duplicate.rs:128:48\n    |\n LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:137:46\n+  --> $DIR/duplicate.rs:130:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:137:46\n+  --> $DIR/duplicate.rs:130:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:140:46\n+  --> $DIR/duplicate.rs:133:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:140:46\n+  --> $DIR/duplicate.rs:133:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:143:49\n+  --> $DIR/duplicate.rs:136:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:143:49\n+  --> $DIR/duplicate.rs:136:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:153:40\n+  --> $DIR/duplicate.rs:146:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:155:44\n+  --> $DIR/duplicate.rs:148:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:157:43\n+  --> $DIR/duplicate.rs:150:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:146:43\n+  --> $DIR/duplicate.rs:139:43\n    |\n LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:148:43\n+  --> $DIR/duplicate.rs:141:43\n    |\n LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:150:46\n+  --> $DIR/duplicate.rs:143:46\n    |\n LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error: aborting due to 69 previous errors; 2 warnings emitted\n+error: aborting due to 66 previous errors; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0719`."}, {"sha": "d978a0c85fedacd1b809f43055c9a68be744eebe", "filename": "src/test/ui/associated-type-bounds/duplicate.min_tait.stderr", "status": "modified", "additions": 34, "deletions": 58, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr?ref=66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c", "patch": "@@ -272,293 +272,269 @@ LL | static SIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:86:46\n-   |\n-LL | fn lit1() { let _: impl Iterator<Item: Copy, Item: Send> = iter::empty(); }\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:88:46\n-   |\n-LL | fn lit2() { let _: impl Iterator<Item: Copy, Item: Copy> = iter::empty(); }\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:90:49\n-   |\n-LL | fn lit3() { let _: impl Iterator<Item: 'static, Item: 'static> = iter::empty(); }\n-   |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:93:35\n+  --> $DIR/duplicate.rs:86:35\n    |\n LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:95:35\n+  --> $DIR/duplicate.rs:88:35\n    |\n LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:97:38\n+  --> $DIR/duplicate.rs:90:38\n    |\n LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:99:44\n+  --> $DIR/duplicate.rs:92:44\n    |\n LL | type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:101:44\n+  --> $DIR/duplicate.rs:94:44\n    |\n LL | type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:103:47\n+  --> $DIR/duplicate.rs:96:47\n    |\n LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:106:36\n+  --> $DIR/duplicate.rs:99:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:108:36\n+  --> $DIR/duplicate.rs:101:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:110:39\n+  --> $DIR/duplicate.rs:103:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:112:40\n+  --> $DIR/duplicate.rs:105:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:114:40\n+  --> $DIR/duplicate.rs:107:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:116:43\n+  --> $DIR/duplicate.rs:109:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:119:36\n+  --> $DIR/duplicate.rs:112:36\n    |\n LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:121:36\n+  --> $DIR/duplicate.rs:114:36\n    |\n LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:123:39\n+  --> $DIR/duplicate.rs:116:39\n    |\n LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:125:34\n+  --> $DIR/duplicate.rs:118:34\n    |\n LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:127:34\n+  --> $DIR/duplicate.rs:120:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:129:37\n+  --> $DIR/duplicate.rs:122:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:131:45\n+  --> $DIR/duplicate.rs:124:45\n    |\n LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:133:45\n+  --> $DIR/duplicate.rs:126:45\n    |\n LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:135:48\n+  --> $DIR/duplicate.rs:128:48\n    |\n LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:137:46\n+  --> $DIR/duplicate.rs:130:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:137:46\n+  --> $DIR/duplicate.rs:130:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:140:46\n+  --> $DIR/duplicate.rs:133:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:140:46\n+  --> $DIR/duplicate.rs:133:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:143:49\n+  --> $DIR/duplicate.rs:136:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:143:49\n+  --> $DIR/duplicate.rs:136:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:153:40\n+  --> $DIR/duplicate.rs:146:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:155:44\n+  --> $DIR/duplicate.rs:148:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:157:43\n+  --> $DIR/duplicate.rs:150:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:146:43\n+  --> $DIR/duplicate.rs:139:43\n    |\n LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:148:43\n+  --> $DIR/duplicate.rs:141:43\n    |\n LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:150:46\n+  --> $DIR/duplicate.rs:143:46\n    |\n LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error: aborting due to 69 previous errors; 1 warning emitted\n+error: aborting due to 66 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0719`."}, {"sha": "bb535e0add70c77bdd569f73cfa41dde70239fca", "filename": "src/test/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c", "patch": "@@ -83,13 +83,6 @@ static SIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n static SIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n \n-fn lit1() { let _: impl Iterator<Item: Copy, Item: Send> = iter::empty(); }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-fn lit2() { let _: impl Iterator<Item: Copy, Item: Copy> = iter::empty(); }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-fn lit3() { let _: impl Iterator<Item: 'static, Item: 'static> = iter::empty(); }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-\n type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;"}, {"sha": "5364f25f89a1154061fc7b9b51183e3b03dfeada", "filename": "src/test/ui/associated-type-bounds/lcsit.rs", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.rs?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,78 +0,0 @@\n-// run-pass\n-\n-#![feature(associated_type_bounds)]\n-#![feature(impl_trait_in_bindings)]\n-//~^ WARNING `impl_trait_in_bindings` is incomplete\n-#![allow(non_upper_case_globals)]\n-\n-use std::ops::Add;\n-\n-trait Tr1 { type As1; fn mk(&self) -> Self::As1; }\n-trait Tr2<'a> { fn tr2(self) -> &'a Self; }\n-\n-fn assert_copy<T: Copy>(x: T) { let _x = x; let _x = x; }\n-fn assert_static<T: 'static>(_: T) {}\n-fn assert_forall_tr2<T: for<'a> Tr2<'a>>(_: T) {}\n-\n-#[derive(Copy, Clone)]\n-struct S1;\n-#[derive(Copy, Clone)]\n-struct S2;\n-impl Tr1 for S1 { type As1 = S2; fn mk(&self) -> Self::As1 { S2 } }\n-\n-const cdef_et1: impl Copy + Tr1<As1: Copy> = {\n-    let x: impl Copy + Tr1<As1: Copy> = S1;\n-    x\n-};\n-static sdef_et1: impl Copy + Tr1<As1: Copy> = cdef_et1;\n-pub fn use_et1() { assert_copy(cdef_et1.mk()); assert_copy(sdef_et1.mk()); }\n-\n-const cdef_et2: impl Tr1<As1: 'static> = {\n-    let x: impl Tr1<As1: 'static> = S1;\n-    x\n-};\n-static sdef_et2: impl Tr1<As1: 'static> = cdef_et2;\n-pub fn use_et2() { assert_static(cdef_et2.mk()); assert_static(sdef_et2.mk()); }\n-\n-const cdef_et3: impl Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>>>> = {\n-    struct A;\n-    impl Tr1 for A {\n-        type As1 = core::ops::Range<u8>;\n-        fn mk(&self) -> Self::As1 { 0..10 }\n-    }\n-    let x: impl Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>>>> = A;\n-    x\n-};\n-pub fn use_et3() {\n-    let _0 = cdef_et3.mk().clone();\n-    let mut s = 0u8;\n-    for _1 in _0 {\n-        let _2 = _1 + 1u8;\n-        s += _2.into();\n-    }\n-    assert_eq!(s, (0..10).map(|x| x + 1).sum());\n-}\n-\n-const cdef_et4: impl Copy + Tr1<As1: for<'a> Tr2<'a>> = {\n-    #[derive(Copy, Clone)]\n-    struct A;\n-    impl Tr1 for A {\n-        type As1 = A;\n-        fn mk(&self) -> A { A }\n-    }\n-    impl<'a> Tr2<'a> for A {\n-        fn tr2(self) -> &'a Self { &A }\n-    }\n-    let x: impl Copy + Tr1<As1: for<'a> Tr2<'a>> = A;\n-    x\n-};\n-\n-static sdef_et4: impl Copy + Tr1<As1: for<'a> Tr2<'a>> = cdef_et4;\n-pub fn use_et4() { assert_forall_tr2(cdef_et4.mk()); assert_forall_tr2(sdef_et4.mk()); }\n-\n-fn main() {\n-    let _ = use_et1();\n-    let _ = use_et2();\n-    let _ = use_et3();\n-    let _ = use_et4();\n-}"}, {"sha": "11ff03db361470de371cb4713209bc7eb70f8dce", "filename": "src/test/ui/associated-type-bounds/lcsit.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.stderr?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lcsit.rs:4:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "39cc64f11a7e38817b3b9851239a5c08a7ef1799", "filename": "src/test/ui/feature-gates/feature-gate-impl_trait_in_bindings.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.rs?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,11 +0,0 @@\n-const FOO: impl Copy = 42;\n-//~^ ERROR `impl Trait` not allowed\n-\n-static BAR: impl Copy = 42;\n-//~^ ERROR `impl Trait` not allowed\n-\n-fn main() {\n-    let foo = impl Copy = 42;\n-//~^ ERROR expected expression, found keyword `impl`\n-    let foo: impl Copy = 42;\n-}"}, {"sha": "bd648b40590ef7549cd191c0b2f47675b64fd64c", "filename": "src/test/ui/feature-gates/feature-gate-impl_trait_in_bindings.stderr", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.stderr?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,25 +0,0 @@\n-error: expected expression, found keyword `impl`\n-  --> $DIR/feature-gate-impl_trait_in_bindings.rs:8:15\n-   |\n-LL |     let foo = impl Copy = 42;\n-   |               ^^^^ expected expression\n-\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-impl_trait_in_bindings.rs:1:12\n-   |\n-LL | const FOO: impl Copy = 42;\n-   |            ^^^^^^^^^\n-   |\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n-\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-impl_trait_in_bindings.rs:4:13\n-   |\n-LL | static BAR: impl Copy = 42;\n-   |             ^^^^^^^^^\n-   |\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0562`."}, {"sha": "6a97f28ff552b3a76c5f4743b8d980dcddaf97b1", "filename": "src/test/ui/impl-trait/binding-without-value.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fbinding-without-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fbinding-without-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbinding-without-value.rs?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,9 +0,0 @@\n-#![allow(incomplete_features)]\n-#![feature(impl_trait_in_bindings)]\n-\n-fn foo() {\n-    let _ : impl Copy;\n-    //~^ ERROR cannot resolve opaque type\n-}\n-\n-fn main() {}"}, {"sha": "0d2faeaf85d10be60785746009a2de1eed8ac1ce", "filename": "src/test/ui/impl-trait/binding-without-value.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fbinding-without-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fbinding-without-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbinding-without-value.stderr?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,16 +0,0 @@\n-error[E0720]: cannot resolve opaque type\n-  --> $DIR/binding-without-value.rs:5:13\n-   |\n-LL |     let _ : impl Copy;\n-   |         -   ^^^^^^^^^ cannot resolve opaque type\n-   |         |\n-   |         this binding might not have a concrete type\n-   |\n-help: set the binding to a value for a concrete type to be resolved\n-   |\n-LL |     let _ : impl Copy = /* value */;\n-   |                       ^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0720`."}, {"sha": "d1f42be077dc82a78b0a3e734b829c981acab5ca", "filename": "src/test/ui/impl-trait/bindings-opaque.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.rs?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,17 +0,0 @@\n-#![feature(impl_trait_in_bindings)]\n-//~^ WARN the feature `impl_trait_in_bindings` is incomplete\n-\n-const FOO: impl Copy = 42;\n-\n-static BAR: impl Copy = 42;\n-\n-fn main() {\n-    let foo: impl Copy = 42;\n-\n-    let _ = FOO.count_ones();\n-//~^ ERROR no method\n-    let _ = BAR.count_ones();\n-//~^ ERROR no method\n-    let _ = foo.count_ones();\n-//~^ ERROR no method\n-}"}, {"sha": "170bd4612349a0f2968f8177998c7308ec02fee5", "filename": "src/test/ui/impl-trait/bindings-opaque.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,30 +0,0 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bindings-opaque.rs:1:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-error[E0599]: no method named `count_ones` found for opaque type `impl Copy` in the current scope\n-  --> $DIR/bindings-opaque.rs:11:17\n-   |\n-LL |     let _ = FOO.count_ones();\n-   |                 ^^^^^^^^^^ method not found in `impl Copy`\n-\n-error[E0599]: no method named `count_ones` found for opaque type `impl Copy` in the current scope\n-  --> $DIR/bindings-opaque.rs:13:17\n-   |\n-LL |     let _ = BAR.count_ones();\n-   |                 ^^^^^^^^^^ method not found in `impl Copy`\n-\n-error[E0599]: no method named `count_ones` found for opaque type `impl Copy` in the current scope\n-  --> $DIR/bindings-opaque.rs:15:17\n-   |\n-LL |     let _ = foo.count_ones();\n-   |                 ^^^^^^^^^^ method not found in `impl Copy`\n-\n-error: aborting due to 3 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0599`."}, {"sha": "5144f05681b4634c66dfc7d1ca67010ac08c5300", "filename": "src/test/ui/impl-trait/bound-normalization-pass.rs", "status": "modified", "additions": 8, "deletions": 26, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs?ref=66c9cd9e66012cfbbd1a111e0cca96e4b214aa8c", "patch": "@@ -14,7 +14,9 @@\n \n struct Foo<T>(T);\n \n-trait FooLike { type Output; }\n+trait FooLike {\n+    type Output;\n+}\n \n impl<T> FooLike for Foo<T> {\n     type Output = T;\n@@ -28,7 +30,7 @@ mod impl_trait {\n     }\n \n     /// `T::Assoc` should be normalized to `()` here.\n-    fn foo_pass<T: Trait<Assoc=()>>() -> impl FooLike<Output=T::Assoc> {\n+    fn foo_pass<T: Trait<Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {\n         Foo(())\n     }\n }\n@@ -45,40 +47,20 @@ mod lifetimes {\n     /// Like above.\n     ///\n     /// FIXME(#51525) -- the shorter notation `T::Assoc` winds up referencing `'static` here\n-    fn foo2_pass<'a, T: Trait<'a, Assoc=()> + 'a>(\n-    ) -> impl FooLike<Output=<T as Trait<'a>>::Assoc> + 'a {\n+    fn foo2_pass<'a, T: Trait<'a, Assoc = ()> + 'a>()\n+    -> impl FooLike<Output = <T as Trait<'a>>::Assoc> + 'a {\n         Foo(())\n     }\n \n     /// Normalization to type containing bound region.\n     ///\n     /// FIXME(#51525) -- the shorter notation `T::Assoc` winds up referencing `'static` here\n-    fn foo2_pass2<'a, T: Trait<'a, Assoc=&'a ()> + 'a>(\n-    ) -> impl FooLike<Output=<T as Trait<'a>>::Assoc> + 'a {\n+    fn foo2_pass2<'a, T: Trait<'a, Assoc = &'a ()> + 'a>()\n+    -> impl FooLike<Output = <T as Trait<'a>>::Assoc> + 'a {\n         Foo(&())\n     }\n }\n \n-// Reduction using `impl Trait` in bindings\n-\n-mod impl_trait_in_bindings {\n-    struct Foo;\n-\n-    trait FooLike { type Output; }\n-\n-    impl FooLike for Foo {\n-        type Output = u32;\n-    }\n-\n-    trait Trait {\n-        type Assoc;\n-    }\n-\n-    fn foo<T: Trait<Assoc=u32>>() {\n-        let _: impl FooLike<Output=T::Assoc> = Foo;\n-    }\n-}\n-\n // The same applied to `type Foo = impl Bar`s\n \n mod opaque_types {"}, {"sha": "fd8fe5f48dfa23aa1a2a1a050e6b84e43f53b896", "filename": "src/test/ui/impl-trait/impl-trait-in-bindings-issue-73003.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings-issue-73003.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings-issue-73003.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings-issue-73003.rs?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,8 +0,0 @@\n-// check-pass\n-\n-#![feature(impl_trait_in_bindings)]\n-//~^ WARN the feature `impl_trait_in_bindings` is incomplete\n-\n-const _: impl Fn() = ||();\n-\n-fn main() {}"}, {"sha": "715671c8add834eee7f379d64fb6d6317ee70320", "filename": "src/test/ui/impl-trait/impl-trait-in-bindings-issue-73003.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings-issue-73003.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings-issue-73003.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings-issue-73003.stderr?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/impl-trait-in-bindings-issue-73003.rs:3:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "c7fae45d5ca2cf70d1b527ec13e63ebfe7164ddb", "filename": "src/test/ui/impl-trait/impl-trait-in-bindings.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings.rs?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,49 +0,0 @@\n-// run-pass\n-\n-#![feature(impl_trait_in_bindings)]\n-//~^ WARN the feature `impl_trait_in_bindings` is incomplete\n-\n-use std::fmt::Debug;\n-\n-const FOO: impl Debug + Clone + PartialEq<i32> = 42;\n-\n-static BAR: impl Debug + Clone + PartialEq<i32> = 42;\n-\n-fn a<T: Clone>(x: T) {\n-    let y: impl Clone = x;\n-    let _ = y.clone();\n-}\n-\n-fn b<T: Clone>(x: T) {\n-    let f = move || {\n-        let y: impl Clone = x;\n-        let _ = y.clone();\n-    };\n-    f();\n-}\n-\n-trait Foo<T: Clone> {\n-    fn a(x: T) {\n-        let y: impl Clone = x;\n-        let _ = y.clone();\n-    }\n-}\n-\n-impl<T: Clone> Foo<T> for i32 {\n-    fn a(x: T) {\n-        let y: impl Clone = x;\n-        let _ = y.clone();\n-    }\n-}\n-\n-fn main() {\n-    let foo: impl Debug + Clone + PartialEq<i32> = 42;\n-\n-    assert_eq!(FOO.clone(), 42);\n-    assert_eq!(BAR.clone(), 42);\n-    assert_eq!(foo.clone(), 42);\n-\n-    a(42);\n-    b(42);\n-    i32::a(42);\n-}"}, {"sha": "bf739d4722f6823e4e7fcf6754b57a4586480b50", "filename": "src/test/ui/impl-trait/impl-trait-in-bindings.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-bindings.stderr?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/impl-trait-in-bindings.rs:3:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "e0c71d1ac9a61cb59081935d61c13f4d6a02a858", "filename": "src/test/ui/impl-trait/issue-57200.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57200.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57200.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57200.rs?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,15 +0,0 @@\n-// Regression test for #57200\n-// FIXME: The error is temporary hack, we'll revisit here at some point.\n-\n-#![feature(impl_trait_in_bindings)]\n-#![allow(incomplete_features)]\n-\n-fn bug<'a, 'b, T>()\n-where\n-    'a: 'b,\n-{\n-    let f: impl Fn(&'a T) -> &'b T = |x| x;\n-    //~^ ERROR: lifetimes in impl Trait types in bindings are not currently supported\n-}\n-\n-fn main() {}"}, {"sha": "b44f332d58ccdc9f9cde8ec280a8cfac0e49f4c2", "filename": "src/test/ui/impl-trait/issue-57200.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57200.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57200.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57200.stderr?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,8 +0,0 @@\n-error: lifetimes in impl Trait types in bindings are not currently supported\n-  --> $DIR/issue-57200.rs:11:12\n-   |\n-LL |     let f: impl Fn(&'a T) -> &'b T = |x| x;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "c1a98d8897bfbd075373d1ddfad1ae2fa86a95a6", "filename": "src/test/ui/impl-trait/issue-57201.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57201.rs?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,15 +0,0 @@\n-// Regression test for #57201\n-// FIXME: The error is temporary hack, we'll revisit here at some point.\n-\n-#![feature(impl_trait_in_bindings)]\n-#![allow(incomplete_features)]\n-\n-fn bug<'a, 'b, T>()\n-where\n-    'a: 'b,\n-{\n-    let f: &impl Fn(&'a T) -> &'b T = &|x| x;\n-    //~^ ERROR: lifetimes in impl Trait types in bindings are not currently supported\n-}\n-\n-fn main() {}"}, {"sha": "462b17bf45e2f71e63789debb4ccd800950daac4", "filename": "src/test/ui/impl-trait/issue-57201.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-57201.stderr?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,8 +0,0 @@\n-error: lifetimes in impl Trait types in bindings are not currently supported\n-  --> $DIR/issue-57201.rs:11:13\n-   |\n-LL |     let f: &impl Fn(&'a T) -> &'b T = &|x| x;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2ef86f03d340c60892feeee1d5099ed85f4a0dfa", "filename": "src/test/ui/impl-trait/issue-60473.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-60473.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-60473.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-60473.rs?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,15 +0,0 @@\n-// Regression test for #60473\n-\n-#![feature(impl_trait_in_bindings)]\n-#![allow(incomplete_features)]\n-\n-struct A<'a>(&'a ());\n-\n-trait Trait<T> {}\n-\n-impl<T> Trait<T> for () {}\n-\n-fn main() {\n-    let x: impl Trait<A> = ();\n-    //~^ ERROR: missing lifetime specifier\n-}"}, {"sha": "367b5db5d2dceefe43b8a7ca83b44eb497cba621", "filename": "src/test/ui/impl-trait/issue-60473.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-60473.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-60473.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-60473.stderr?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,15 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-60473.rs:13:23\n-   |\n-LL |     let x: impl Trait<A> = ();\n-   |                       ^ expected named lifetime parameter\n-   |\n-help: consider introducing a named lifetime parameter\n-   |\n-LL | fn main<'a>() {\n-LL |     let x: impl Trait<A<'a>> = ();\n-   |\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "efa67558bd7c17446cb3054042e076e05523aecb", "filename": "src/test/ui/impl-trait/issue-67166.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-67166.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-67166.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-67166.rs?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,11 +0,0 @@\n-// Regression test for #67166\n-\n-#![feature(impl_trait_in_bindings)]\n-#![allow(incomplete_features)]\n-\n-pub fn run() {\n-    let _foo: Box<impl Copy + '_> = Box::new(());\n-    //~^ ERROR: missing lifetime specifier\n-}\n-\n-fn main() {}"}, {"sha": "14c78684e3e2fb48898b30e551dfaad751b20287", "filename": "src/test/ui/impl-trait/issue-67166.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-67166.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-67166.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-67166.stderr?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,15 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-67166.rs:7:31\n-   |\n-LL |     let _foo: Box<impl Copy + '_> = Box::new(());\n-   |                               ^^ expected named lifetime parameter\n-   |\n-help: consider introducing a named lifetime parameter\n-   |\n-LL | pub fn run<'a>() {\n-LL |     let _foo: Box<impl Copy + 'a> = Box::new(());\n-   |\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "b270f88b6886e3282f927c13de8e2704b071fe8c", "filename": "src/test/ui/impl-trait/issue-69840.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-69840.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-69840.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-69840.rs?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,16 +0,0 @@\n-// check-pass\n-\n-#![feature(impl_trait_in_bindings)]\n-#![allow(incomplete_features)]\n-\n-struct A<'a>(&'a ());\n-\n-trait Trait<T> {}\n-\n-impl<T> Trait<T> for () {}\n-\n-pub fn foo<'a>() {\n-    let _x: impl Trait<A<'a>> = ();\n-}\n-\n-fn main() {}"}, {"sha": "f7dbef9e3ff02ad797b0f86e7d64281c01622ffb", "filename": "src/test/ui/impl-trait/issues/issue-78721.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78721.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78721.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78721.rs?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,15 +0,0 @@\n-// edition:2018\n-\n-#![feature(impl_trait_in_bindings)]\n-//~^ WARN the feature `impl_trait_in_bindings` is incomplete\n-\n-struct Bug {\n-    V1: [(); {\n-        let f: impl core::future::Future<Output = u8> = async { 1 };\n-        //~^ ERROR `async` blocks are not allowed in constants\n-        //~| ERROR destructors cannot be evaluated at compile-time\n-        1\n-    }],\n-}\n-\n-fn main() {}"}, {"sha": "d5712dd92002c0f1b584726134194ea706a48387", "filename": "src/test/ui/impl-trait/issues/issue-78721.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78721.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb0b95b55a0b38d91e834dd30902b67627ed2eb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78721.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78721.stderr?ref=eb0b95b55a0b38d91e834dd30902b67627ed2eb0", "patch": "@@ -1,31 +0,0 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-78721.rs:3:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-error[E0658]: `async` blocks are not allowed in constants\n-  --> $DIR/issue-78721.rs:8:57\n-   |\n-LL |         let f: impl core::future::Future<Output = u8> = async { 1 };\n-   |                                                         ^^^^^^^^^^^\n-   |\n-   = note: see issue #85368 <https://github.com/rust-lang/rust/issues/85368> for more information\n-   = help: add `#![feature(const_async_blocks)]` to the crate attributes to enable\n-\n-error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/issue-78721.rs:8:13\n-   |\n-LL |         let f: impl core::future::Future<Output = u8> = async { 1 };\n-   |             ^ constants cannot evaluate destructors\n-...\n-LL |     }],\n-   |     - value is dropped here\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-\n-Some errors have detailed explanations: E0493, E0658.\n-For more information about an error, try `rustc --explain E0493`."}]}