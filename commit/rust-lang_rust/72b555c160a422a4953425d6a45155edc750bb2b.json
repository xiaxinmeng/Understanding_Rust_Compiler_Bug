{"sha": "72b555c160a422a4953425d6a45155edc750bb2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYjU1NWMxNjBhNDIyYTQ5NTM0MjVkNmE0NTE1NWVkYzc1MGJiMmI=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-04T20:00:41Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-11T20:14:36Z"}, "message": "Some code cleanup", "tree": {"sha": "e11c58e9fd79c43965a6f9279f75c4279f65c15b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e11c58e9fd79c43965a6f9279f75c4279f65c15b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72b555c160a422a4953425d6a45155edc750bb2b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl3JwSwACgkQtAh+UQ6Y\nsWRyIBAAjnoyONESAzhCMclYaCeQZ9RCRU0DxCXcHfqXrxxJtUpBf2f1x6tD+/4R\nZxWwYTjnihSUqef4+YneyrHVOqZBbHdt253hi7yPBmApp06P0li9jc0nZeHbjRCD\npL+LQdZCmpa5LvwoDGwUeJXekLeWbZ+5Z/gz9l58tx+SBMP2d/UK9D5gDjAcXxlu\nOfuWlZIDrgd+zld1xspdCNSzjYVIEacWrmqx8k4ODzZRLAT5Sit9JQYBOI8mXHsw\nVufD2MvWpdsCrJVoSo1UyiNaDAgkkWr1OvXfFSW63roFJFCcvQl5I/Lcrrx6jFov\nOXe4rQ5cer7ORv/+5SX6I17zDC7lzQC2j1DxeuBX90G2w7qa/EHXHcBFhh4Ew5Xd\n8AJDBnMgNczEZvmhSh0bzzO5Xwc9xLbJ2kHKP6LsGBSelVJ3Q5YMJ1DzFbRyoD0C\nipDGTWaMZUyRgRoM0CaMJEZIbypiyBTs0Bk37EA+aGm6N5dVuS3LSx/BIMXabKvh\ntN4Gn3TORw893mHBdvKJ09PBzOhFaxCiMaUSt4QOtlud5k0/3h+66hshbstDDLWI\nXEpGMG7i1xSfAA6BdHDjzU/KakIlvudOYwTC58XhfDv4TARVOsXi8/KTXVeanYpH\nj+JkshsRadb/wQZ9QK7gKgCZFbH+lYq6gj2TVfRBrNjJRcOozJQ=\n=YG+r\n-----END PGP SIGNATURE-----", "payload": "tree e11c58e9fd79c43965a6f9279f75c4279f65c15b\nparent c062afe73ddb8aaab4c475530330404b62e2d58d\nauthor Aaron Hill <aa1ronham@gmail.com> 1572897641 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1573503276 -0500\n\nSome code cleanup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72b555c160a422a4953425d6a45155edc750bb2b", "html_url": "https://github.com/rust-lang/rust/commit/72b555c160a422a4953425d6a45155edc750bb2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72b555c160a422a4953425d6a45155edc750bb2b/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c062afe73ddb8aaab4c475530330404b62e2d58d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c062afe73ddb8aaab4c475530330404b62e2d58d", "html_url": "https://github.com/rust-lang/rust/commit/c062afe73ddb8aaab4c475530330404b62e2d58d"}], "stats": {"total": 51, "additions": 23, "deletions": 28}, "files": [{"sha": "fa7b537b4df8d166a36a57ffd02099b14028bf24", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 23, "deletions": 28, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/72b555c160a422a4953425d6a45155edc750bb2b/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72b555c160a422a4953425d6a45155edc750bb2b/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=72b555c160a422a4953425d6a45155edc750bb2b", "patch": "@@ -593,17 +593,28 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             _ => {}\n         }\n \n+        // Now where do we jump next?\n+\n+        // Determine if we leave this function normally or via unwinding.\n+        let cur_unwinding = match stack_pop_info {\n+            StackPopInfo::StartUnwinding => true,\n+            StackPopInfo::StopUnwinding => false,\n+            _ => unwinding\n+        };\n+\n         // Usually we want to clean up (deallocate locals), but in a few rare cases we don't.\n         // In that case, we return early. We also avoid validation in that case,\n         // because this is CTFE and the final value will be thoroughly validated anyway.\n-        let cleanup = unwinding || match frame.return_to_block {\n-            StackPopCleanup::Goto{ .. } => true,\n-            StackPopCleanup::None { cleanup, .. } => {\n-                cleanup\n-            }\n+        let (cleanup, next_block) = match frame.return_to_block {\n+            StackPopCleanup::Goto { ret, unwind } => {\n+                (true, Some(if cur_unwinding { unwind } else { ret }))\n+            },\n+            StackPopCleanup::None { cleanup, .. } => (cleanup, None)\n         };\n+\n         if !cleanup {\n             assert!(self.stack.is_empty(), \"only the topmost frame should ever be leaked\");\n+            assert!(next_block.is_none(), \"tried to skip cleanup when we have a next block!\");\n             // Leak the locals, skip validation.\n             return Ok(());\n         }\n@@ -613,29 +624,16 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             self.deallocate_local(local.value)?;\n         }\n \n-        // Now where do we jump next?\n-\n-        // Determine if we leave this function normally or via unwinding.\n-        let cur_unwinding = match stack_pop_info {\n-            StackPopInfo::StartUnwinding => true,\n-            StackPopInfo::StopUnwinding => false,\n-            _ => unwinding\n-        };\n \n         trace!(\"StackPopCleanup: {:?} StackPopInfo: {:?} cur_unwinding = {:?}\",\n                frame.return_to_block, stack_pop_info, cur_unwinding);\n         if cur_unwinding {\n             // Follow the unwind edge.\n-            match frame.return_to_block {\n-                StackPopCleanup::Goto { unwind, .. } => {\n-                    let next_frame = self.frame_mut();\n-                    // If `unwind` is `None`, we'll leave that function immediately again.\n-                    next_frame.block = unwind;\n-                    next_frame.stmt = 0;\n-                },\n-                StackPopCleanup::None { .. } =>\n-                    bug!(\"Encountered StackPopCleanup::None while unwinding\"),\n-            }\n+            let unwind = next_block.expect(\"Encounted StackPopCleanup::None when unwinding!\");\n+            let next_frame = self.frame_mut();\n+            // If `unwind` is `None`, we'll leave that function immediately again.\n+            next_frame.block = unwind;\n+            next_frame.stmt = 0;\n         } else {\n             // Follow the normal return edge.\n             // Validate the return value. Do this after deallocating so that we catch dangling\n@@ -661,11 +659,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             // Jump to new block -- *after* validation so that the spans make more sense.\n-            match frame.return_to_block {\n-                StackPopCleanup::Goto { ret, ..  } => {\n-                    self.goto_block(ret)?;\n-                }\n-                StackPopCleanup::None { .. } => {}\n+            if let Some(ret) = next_block {\n+                self.goto_block(ret)?;\n             }\n         }\n "}]}