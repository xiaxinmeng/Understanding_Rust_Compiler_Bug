{"sha": "e91d810b9b36d6bb163970cd0e8bbf4692f704bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MWQ4MTBiOWIzNmQ2YmIxNjM5NzBjZDBlOGJiZjQ2OTJmNzA0YmI=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-03T04:27:46Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-12-30T20:02:22Z"}, "message": "Libs: Unify concat and concat_vec\n\nWe've long had traits `StrVector` and `VectorVector` providing\n`concat`/`connect` and `concat_vec`/`connect_vec` respectively. The\nreason for the distinction is that coherence rules did not used to be\nrobust enough to allow impls on e.g. `Vec<String>` versus `Vec<&[T]>`.\n\nThis commit consolidates the traits into a single `SliceConcatExt` trait\nprovided by `slice` and the preldue (where it replaces `StrVector`,\nwhich is removed.)\n\n[breaking-change]", "tree": {"sha": "5f8fb0a352ad9b0c23c36e25c789ec4c46f6bd41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f8fb0a352ad9b0c23c36e25c789ec4c46f6bd41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e91d810b9b36d6bb163970cd0e8bbf4692f704bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e91d810b9b36d6bb163970cd0e8bbf4692f704bb", "html_url": "https://github.com/rust-lang/rust/commit/e91d810b9b36d6bb163970cd0e8bbf4692f704bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e91d810b9b36d6bb163970cd0e8bbf4692f704bb/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f863a338e0a7c33f81a8ac138103f1a0e8b33c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f863a338e0a7c33f81a8ac138103f1a0e8b33c5", "html_url": "https://github.com/rust-lang/rust/commit/4f863a338e0a7c33f81a8ac138103f1a0e8b33c5"}], "stats": {"total": 94, "additions": 35, "deletions": 59}, "files": [{"sha": "5bc99889f2ffe4a88fb49c0c431555d227d11daa", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e91d810b9b36d6bb163970cd0e8bbf4692f704bb/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91d810b9b36d6bb163970cd0e8bbf4692f704bb/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=e91d810b9b36d6bb163970cd0e8bbf4692f704bb", "patch": "@@ -993,19 +993,31 @@ impl<T: Ord> OrdSliceExt<T> for [T] {\n     }\n }\n \n-#[allow(missing_docs)]\n-pub trait VectorVector<T> for Sized? {\n-    // FIXME #5898: calling these .concat and .connect conflicts with\n-    // StrVector::con{cat,nect}, since they have generic contents.\n-    /// Flattens a vector of vectors of `T` into a single `Vec<T>`.\n-    fn concat_vec(&self) -> Vec<T>;\n-\n-    /// Concatenate a vector of vectors, placing a given separator between each.\n-    fn connect_vec(&self, sep: &T) -> Vec<T>;\n+#[unstable = \"U should be an associated type\"]\n+/// An extension trait for concatenating slices\n+pub trait SliceConcatExt<Sized? T, U> for Sized? {\n+    /// Flattens a slice of `T` into a single value `U`.\n+    #[stable]\n+    fn concat(&self) -> U;\n+\n+    #[deprecated = \"renamed to concat\"]\n+    fn concat_vec(&self) -> U {\n+        self.concat()\n+    }\n+\n+    /// Flattens a slice of `T` into a single value `U`, placing a\n+    /// given seperator between each.\n+    #[stable]\n+    fn connect(&self, sep: &T) -> U;\n+\n+    #[deprecated = \"renamed to connect\"]\n+    fn connect_vec(&self, sep: &T) -> U {\n+        self.connect(sep)\n+    }\n }\n \n-impl<'a, T: Clone, V: AsSlice<T>> VectorVector<T> for [V] {\n-    fn concat_vec(&self) -> Vec<T> {\n+impl<T: Clone, V: AsSlice<T>> SliceConcatExt<T, Vec<T>> for [V] {\n+    fn concat(&self) -> Vec<T> {\n         let size = self.iter().fold(0u, |acc, v| acc + v.as_slice().len());\n         let mut result = Vec::with_capacity(size);\n         for v in self.iter() {\n@@ -1014,7 +1026,7 @@ impl<'a, T: Clone, V: AsSlice<T>> VectorVector<T> for [V] {\n         result\n     }\n \n-    fn connect_vec(&self, sep: &T) -> Vec<T> {\n+    fn connect(&self, sep: &T) -> Vec<T> {\n         let size = self.iter().fold(0u, |acc, v| acc + v.as_slice().len());\n         let mut result = Vec::with_capacity(size + self.len());\n         let mut first = true;"}, {"sha": "60449c817cbd388ad901841201c2c99a593aad6f", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 5, "deletions": 40, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e91d810b9b36d6bb163970cd0e8bbf4692f704bb/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91d810b9b36d6bb163970cd0e8bbf4692f704bb/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=e91d810b9b36d6bb163970cd0e8bbf4692f704bb", "patch": "@@ -77,6 +77,7 @@ use slice::SliceExt;\n use string::String;\n use unicode;\n use vec::Vec;\n+use slice::SliceConcatExt;\n \n pub use core::str::{from_utf8, CharEq, Chars, CharIndices};\n pub use core::str::{Bytes, CharSplits, is_utf8};\n@@ -93,36 +94,7 @@ pub use core::str::{SplitN, RSplitN};\n Section: Creating a string\n */\n \n-/// Methods for vectors of strings.\n-#[unstable = \"functionality may be replaced with iterators\"]\n-pub trait StrVector for Sized? {\n-    /// Concatenates a vector of strings.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```rust\n-    /// let first = \"Restaurant at the End of the\".to_string();\n-    /// let second = \" Universe\".to_string();\n-    /// let string_vec = vec![first, second];\n-    /// assert_eq!(string_vec.concat(), \"Restaurant at the End of the Universe\".to_string());\n-    /// ```\n-    fn concat(&self) -> String;\n-\n-    /// Concatenates a vector of strings, placing a given separator between each.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```rust\n-    /// let first = \"Roast\".to_string();\n-    /// let second = \"Sirloin Steak\".to_string();\n-    /// let string_vec = vec![first, second];\n-    /// assert_eq!(string_vec.connect(\", \"), \"Roast, Sirloin Steak\".to_string());\n-    /// ```\n-    fn connect(&self, sep: &str) -> String;\n-}\n-\n-#[allow(deprecated)]\n-impl<S: Str> StrVector for [S] {\n+impl<S: Str> SliceConcatExt<str, String> for [S] {\n     fn concat(&self) -> String {\n         if self.is_empty() {\n             return String::new();\n@@ -169,16 +141,9 @@ impl<S: Str> StrVector for [S] {\n     }\n }\n \n-impl<S: Str, T: AsSlice<S>> StrVector for T {\n-    #[inline]\n-    fn concat(&self) -> String {\n-        self.as_slice().concat()\n-    }\n-\n-    #[inline]\n-    fn connect(&self, sep: &str) -> String {\n-        self.as_slice().connect(sep)\n-    }\n+impl<S: Str> SliceConcatExt<str, String> for Vec<S> {\n+    fn concat(&self) -> String { self[].concat() }\n+    fn connect(&self, sep: &str) -> String { self[].connect(sep) }\n }\n \n /*"}, {"sha": "41cbaa2b8076b893ed1e2d82022af44d66e361f7", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e91d810b9b36d6bb163970cd0e8bbf4692f704bb/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91d810b9b36d6bb163970cd0e8bbf4692f704bb/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=e91d810b9b36d6bb163970cd0e8bbf4692f704bb", "patch": "@@ -22,7 +22,7 @@ use option::Option::{None, Some};\n use kinds::Sized;\n use str::{FromStr, Str};\n use str;\n-use slice::{CloneSliceExt, Splits, AsSlice, VectorVector,\n+use slice::{CloneSliceExt, Split, AsSlice, SliceConcatExt,\n             PartialEqSliceExt, SliceExt};\n use vec::Vec;\n \n@@ -306,7 +306,7 @@ impl GenericPath for Path {\n                     }\n                 }\n             }\n-            Some(Path::new(comps.connect_vec(&SEP_BYTE)))\n+            Some(Path::new(comps.as_slice().connect(&SEP_BYTE)))\n         }\n     }\n "}, {"sha": "165d2c32416b0ae317f750227ada2b281f539cb3", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e91d810b9b36d6bb163970cd0e8bbf4692f704bb/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91d810b9b36d6bb163970cd0e8bbf4692f704bb/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=e91d810b9b36d6bb163970cd0e8bbf4692f704bb", "patch": "@@ -25,8 +25,8 @@ use iter::{Iterator, IteratorExt, Map, repeat};\n use mem;\n use option::Option;\n use option::Option::{Some, None};\n-use slice::SliceExt;\n-use str::{SplitTerminator, FromStr, StrVector, StrExt};\n+use slice::{AsSlice, SliceExt, SliceConcatExt};\n+use str::{CharSplits, FromStr, Str, StrAllocating, StrPrelude};\n use string::{String, ToString};\n use unicode::char::UnicodeChar;\n use vec::Vec;"}, {"sha": "f016683e3d0a99991cf5f07db5befa71e6edb27e", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e91d810b9b36d6bb163970cd0e8bbf4692f704bb/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e91d810b9b36d6bb163970cd0e8bbf4692f704bb/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=e91d810b9b36d6bb163970cd0e8bbf4692f704bb", "patch": "@@ -80,10 +80,9 @@\n #[doc(no_inline)] pub use core::prelude::{Tuple1, Tuple2, Tuple3, Tuple4};\n #[doc(no_inline)] pub use core::prelude::{Tuple5, Tuple6, Tuple7, Tuple8};\n #[doc(no_inline)] pub use core::prelude::{Tuple9, Tuple10, Tuple11, Tuple12};\n-#[doc(no_inline)] pub use str::{Str, StrVector};\n-#[doc(no_inline)] pub use str::StrExt;\n+#[doc(no_inline)] pub use str::{Str, StrExt};\n #[doc(no_inline)] pub use slice::AsSlice;\n-#[doc(no_inline)] pub use slice::{VectorVector, PartialEqSliceExt};\n+#[doc(no_inline)] pub use slice::{SliceConcatExt, PartialEqSliceExt};\n #[doc(no_inline)] pub use slice::{CloneSliceExt, OrdSliceExt, SliceExt};\n #[doc(no_inline)] pub use slice::{BoxedSliceExt};\n #[doc(no_inline)] pub use string::{IntoString, String, ToString};"}]}