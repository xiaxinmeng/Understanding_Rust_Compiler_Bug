{"sha": "3ffa4b52404d9a6aff7390d44336f85166235ff5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZmE0YjUyNDA0ZDlhNmFmZjczOTBkNDQzMzZmODUxNjYyMzVmZjU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-03-05T23:19:05Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-03-06T03:20:26Z"}, "message": "Use `BTreeSet` instead of `FxHashSet`", "tree": {"sha": "4db0d4857d89041ec257534be6ada5429f459969", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4db0d4857d89041ec257534be6ada5429f459969"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ffa4b52404d9a6aff7390d44336f85166235ff5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ffa4b52404d9a6aff7390d44336f85166235ff5", "html_url": "https://github.com/rust-lang/rust/commit/3ffa4b52404d9a6aff7390d44336f85166235ff5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ffa4b52404d9a6aff7390d44336f85166235ff5/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75eface16d55984c402ef6e6f131801a70939660", "url": "https://api.github.com/repos/rust-lang/rust/commits/75eface16d55984c402ef6e6f131801a70939660", "html_url": "https://github.com/rust-lang/rust/commit/75eface16d55984c402ef6e6f131801a70939660"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "d51ec268ec21788a19d972452343b4449af0c13d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3ffa4b52404d9a6aff7390d44336f85166235ff5/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffa4b52404d9a6aff7390d44336f85166235ff5/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3ffa4b52404d9a6aff7390d44336f85166235ff5", "patch": "@@ -69,6 +69,7 @@ use errors::DiagnosticBuilder;\n \n use std::cell::{Cell, RefCell};\n use std::cmp;\n+use std::collections::BTreeSet;\n use std::fmt;\n use std::mem::replace;\n use std::rc::Rc;\n@@ -100,8 +101,8 @@ enum AssocSuggestion {\n #[derive(Eq)]\n struct BindingError {\n     name: Name,\n-    origin: FxHashSet<Span>,\n-    target: FxHashSet<Span>,\n+    origin: BTreeSet<Span>,\n+    target: BTreeSet<Span>,\n }\n \n impl PartialOrd for BindingError {\n@@ -233,16 +234,14 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             err\n         }\n         ResolutionError::VariableNotBoundInPattern(binding_error) => {\n-            let mut target_sp = binding_error.target.iter().map(|x| *x).collect::<Vec<_>>();\n-            target_sp.sort();\n+            let target_sp = binding_error.target.iter().map(|x| *x).collect::<Vec<_>>();\n             let msp = MultiSpan::from_spans(target_sp.clone());\n             let msg = format!(\"variable `{}` is not bound in all patterns\", binding_error.name);\n             let mut err = resolver.session.struct_span_err_with_code(msp, &msg, \"E0408\");\n             for sp in target_sp {\n                 err.span_label(sp, &format!(\"pattern doesn't bind `{}`\", binding_error.name));\n             }\n-            let mut origin_sp = binding_error.origin.iter().map(|x| *x).collect::<Vec<_>>();\n-            origin_sp.sort();\n+            let origin_sp = binding_error.origin.iter().map(|x| *x).collect::<Vec<_>>();\n             for sp in origin_sp {\n                 err.span_label(sp, &\"variable not in all patterns\");\n             }\n@@ -1950,8 +1949,8 @@ impl<'a> Resolver<'a> {\n                             .entry(key.name)\n                             .or_insert(BindingError {\n                                 name: key.name,\n-                                origin: FxHashSet(),\n-                                target: FxHashSet(),\n+                                origin: BTreeSet::new(),\n+                                target: BTreeSet::new(),\n                             });\n                         binding_error.origin.insert(binding_i.span);\n                         binding_error.target.insert(q.span);\n@@ -1963,8 +1962,8 @@ impl<'a> Resolver<'a> {\n                                     .entry(key_j.name)\n                                     .or_insert(BindingError {\n                                         name: key_j.name,\n-                                        origin: FxHashSet(),\n-                                        target: FxHashSet(),\n+                                        origin: BTreeSet::new(),\n+                                        target: BTreeSet::new(),\n                                     });\n                                 binding_error.origin.insert(binding_j.span);\n                                 binding_error.target.insert(p.span);"}]}