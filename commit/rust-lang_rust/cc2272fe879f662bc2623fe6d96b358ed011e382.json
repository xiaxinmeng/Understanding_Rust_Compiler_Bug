{"sha": "cc2272fe879f662bc2623fe6d96b358ed011e382", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMjI3MmZlODc5ZjY2MmJjMjYyM2ZlNmQ5NmIzNThlZDAxMWUzODI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-21T19:00:36Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-21T19:00:36Z"}, "message": "Formatting", "tree": {"sha": "012fc45322c9505cda6dd2025fff626dcfb1d680", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/012fc45322c9505cda6dd2025fff626dcfb1d680"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc2272fe879f662bc2623fe6d96b358ed011e382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2272fe879f662bc2623fe6d96b358ed011e382", "html_url": "https://github.com/rust-lang/rust/commit/cc2272fe879f662bc2623fe6d96b358ed011e382", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc2272fe879f662bc2623fe6d96b358ed011e382/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21f2e9334567b64436f4e6525c5c98adafd16ca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/21f2e9334567b64436f4e6525c5c98adafd16ca2", "html_url": "https://github.com/rust-lang/rust/commit/21f2e9334567b64436f4e6525c5c98adafd16ca2"}], "stats": {"total": 69, "additions": 45, "deletions": 24}, "files": [{"sha": "6faaa01321db55ce6529d79a920d70f19633feb9", "filename": "src/libsyntax/parse/lexer/tests.rs", "status": "modified", "additions": 45, "deletions": 24, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/cc2272fe879f662bc2623fe6d96b358ed011e382/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2272fe879f662bc2623fe6d96b358ed011e382/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs?ref=cc2272fe879f662bc2623fe6d96b358ed011e382", "patch": "@@ -35,10 +35,11 @@ fn t1() {\n     with_default_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n-        let mut string_reader = setup(&sm,\n-                                    &sh,\n-                                    \"/* my source file */ fn main() { println!(\\\"zebra\\\"); }\\n\"\n-                                        .to_string());\n+        let mut string_reader = setup(\n+            &sm,\n+            &sh,\n+            \"/* my source file */ fn main() { println!(\\\"zebra\\\"); }\\n\".to_string(),\n+        );\n         assert_eq!(string_reader.next_token(), token::Comment);\n         assert_eq!(string_reader.next_token(), token::Whitespace);\n         let tok1 = string_reader.next_token();\n@@ -134,8 +135,10 @@ fn character_a() {\n     with_default_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n-        assert_eq!(setup(&sm, &sh, \"'a'\".to_string()).next_token(),\n-                    mk_lit(token::Char, \"a\", None));\n+        assert_eq!(\n+            setup(&sm, &sh, \"'a'\".to_string()).next_token(),\n+            mk_lit(token::Char, \"a\", None),\n+        );\n     })\n }\n \n@@ -144,8 +147,10 @@ fn character_space() {\n     with_default_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n-        assert_eq!(setup(&sm, &sh, \"' '\".to_string()).next_token(),\n-                    mk_lit(token::Char, \" \", None));\n+        assert_eq!(\n+            setup(&sm, &sh, \"' '\".to_string()).next_token(),\n+            mk_lit(token::Char, \" \", None),\n+        );\n     })\n }\n \n@@ -154,8 +159,10 @@ fn character_escaped() {\n     with_default_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n-        assert_eq!(setup(&sm, &sh, \"'\\\\n'\".to_string()).next_token(),\n-                    mk_lit(token::Char, \"\\\\n\", None));\n+        assert_eq!(\n+            setup(&sm, &sh, \"'\\\\n'\".to_string()).next_token(),\n+            mk_lit(token::Char, \"\\\\n\", None),\n+        );\n     })\n }\n \n@@ -164,8 +171,10 @@ fn lifetime_name() {\n     with_default_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n-        assert_eq!(setup(&sm, &sh, \"'abc\".to_string()).next_token(),\n-                    token::Lifetime(Symbol::intern(\"'abc\")));\n+        assert_eq!(\n+            setup(&sm, &sh, \"'abc\".to_string()).next_token(),\n+            token::Lifetime(Symbol::intern(\"'abc\")),\n+        );\n     })\n }\n \n@@ -174,8 +183,10 @@ fn raw_string() {\n     with_default_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n-        assert_eq!(setup(&sm, &sh, \"r###\\\"\\\"#a\\\\b\\x00c\\\"\\\"###\".to_string()).next_token(),\n-                    mk_lit(token::StrRaw(3), \"\\\"#a\\\\b\\x00c\\\"\", None));\n+        assert_eq!(\n+            setup(&sm, &sh, \"r###\\\"\\\"#a\\\\b\\x00c\\\"\\\"###\".to_string()).next_token(),\n+            mk_lit(token::StrRaw(3), \"\\\"#a\\\\b\\x00c\\\"\", None),\n+        );\n     })\n }\n \n@@ -186,11 +197,15 @@ fn literal_suffixes() {\n         let sh = mk_sess(sm.clone());\n         macro_rules! test {\n             ($input: expr, $tok_type: ident, $tok_contents: expr) => {{\n-                assert_eq!(setup(&sm, &sh, format!(\"{}suffix\", $input)).next_token(),\n-                            mk_lit(token::$tok_type, $tok_contents, Some(\"suffix\")));\n+                assert_eq!(\n+                    setup(&sm, &sh, format!(\"{}suffix\", $input)).next_token(),\n+                    mk_lit(token::$tok_type, $tok_contents, Some(\"suffix\")),\n+                );\n                 // with a whitespace separator:\n-                assert_eq!(setup(&sm, &sh, format!(\"{} suffix\", $input)).next_token(),\n-                            mk_lit(token::$tok_type, $tok_contents, None));\n+                assert_eq!(\n+                    setup(&sm, &sh, format!(\"{} suffix\", $input)).next_token(),\n+                    mk_lit(token::$tok_type, $tok_contents, None),\n+                );\n             }}\n         }\n \n@@ -204,12 +219,18 @@ fn literal_suffixes() {\n         test!(\"1.0\", Float, \"1.0\");\n         test!(\"1.0e10\", Float, \"1.0e10\");\n \n-        assert_eq!(setup(&sm, &sh, \"2us\".to_string()).next_token(),\n-                    mk_lit(token::Integer, \"2\", Some(\"us\")));\n-        assert_eq!(setup(&sm, &sh, \"r###\\\"raw\\\"###suffix\".to_string()).next_token(),\n-                    mk_lit(token::StrRaw(3), \"raw\", Some(\"suffix\")));\n-        assert_eq!(setup(&sm, &sh, \"br###\\\"raw\\\"###suffix\".to_string()).next_token(),\n-                    mk_lit(token::ByteStrRaw(3), \"raw\", Some(\"suffix\")));\n+        assert_eq!(\n+            setup(&sm, &sh, \"2us\".to_string()).next_token(),\n+            mk_lit(token::Integer, \"2\", Some(\"us\")),\n+        );\n+        assert_eq!(\n+            setup(&sm, &sh, \"r###\\\"raw\\\"###suffix\".to_string()).next_token(),\n+            mk_lit(token::StrRaw(3), \"raw\", Some(\"suffix\")),\n+        );\n+        assert_eq!(\n+            setup(&sm, &sh, \"br###\\\"raw\\\"###suffix\".to_string()).next_token(),\n+            mk_lit(token::ByteStrRaw(3), \"raw\", Some(\"suffix\")),\n+        );\n     })\n }\n "}]}