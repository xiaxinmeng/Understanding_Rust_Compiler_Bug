{"sha": "a3c0f0a3dfccf75bd7df55b2806788489f7831cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYzBmMGEzZGZjY2Y3NWJkN2RmNTViMjgwNjc4ODQ4OWY3ODMxY2Q=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2021-02-13T20:00:07Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2021-04-02T21:37:49Z"}, "message": "(De-)serialize the supported_sanitizers", "tree": {"sha": "3931a0ebda75826a65eaef77fb0d07a4dc0a56fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3931a0ebda75826a65eaef77fb0d07a4dc0a56fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3c0f0a3dfccf75bd7df55b2806788489f7831cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3c0f0a3dfccf75bd7df55b2806788489f7831cd", "html_url": "https://github.com/rust-lang/rust/commit/a3c0f0a3dfccf75bd7df55b2806788489f7831cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3c0f0a3dfccf75bd7df55b2806788489f7831cd/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded", "url": "https://api.github.com/repos/rust-lang/rust/commits/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded", "html_url": "https://github.com/rust-lang/rust/commit/16c1d0ae0656a5aa929fb0a9ab5c0c740c950ded"}], "stats": {"total": 73, "additions": 59, "deletions": 14}, "files": [{"sha": "89052ef390b8a023aafa06e87b819a8394c25049", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 59, "deletions": 14, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a3c0f0a3dfccf75bd7df55b2806788489f7831cd/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3c0f0a3dfccf75bd7df55b2806788489f7831cd/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=a3c0f0a3dfccf75bd7df55b2806788489f7831cd", "patch": "@@ -600,19 +600,28 @@ bitflags::bitflags! {\n     }\n }\n \n+impl SanitizerSet {\n+    /// Return sanitizer's name\n+    ///\n+    /// Returns none if the flags is a set of sanitizers numbering not exactly one.\n+    fn as_str(self) -> Option<&'static str> {\n+        Some(match self {\n+            SanitizerSet::ADDRESS => \"address\",\n+            SanitizerSet::LEAK => \"leak\",\n+            SanitizerSet::MEMORY => \"memory\",\n+            SanitizerSet::THREAD => \"thread\",\n+            SanitizerSet::HWADDRESS => \"hwaddress\",\n+            _ => return None,\n+        })\n+    }\n+}\n+\n /// Formats a sanitizer set as a comma separated list of sanitizers' names.\n impl fmt::Display for SanitizerSet {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut first = true;\n         for s in *self {\n-            let name = match s {\n-                SanitizerSet::ADDRESS => \"address\",\n-                SanitizerSet::LEAK => \"leak\",\n-                SanitizerSet::MEMORY => \"memory\",\n-                SanitizerSet::THREAD => \"thread\",\n-                SanitizerSet::HWADDRESS => \"hwaddress\",\n-                _ => panic!(\"unrecognized sanitizer {:?}\", s),\n-            };\n+            let name = s.as_str().unwrap_or_else(|| panic!(\"unrecognized sanitizer {:?}\", s));\n             if !first {\n                 f.write_str(\", \")?;\n             }\n@@ -628,12 +637,18 @@ impl IntoIterator for SanitizerSet {\n     type IntoIter = std::vec::IntoIter<SanitizerSet>;\n \n     fn into_iter(self) -> Self::IntoIter {\n-        [SanitizerSet::ADDRESS, SanitizerSet::LEAK, SanitizerSet::MEMORY, SanitizerSet::THREAD, SanitizerSet::HWADDRESS]\n-            .iter()\n-            .copied()\n-            .filter(|&s| self.contains(s))\n-            .collect::<Vec<_>>()\n-            .into_iter()\n+        [\n+            SanitizerSet::ADDRESS,\n+            SanitizerSet::LEAK,\n+            SanitizerSet::MEMORY,\n+            SanitizerSet::THREAD,\n+            SanitizerSet::HWADDRESS,\n+        ]\n+        .iter()\n+        .copied()\n+        .filter(|&s| self.contains(s))\n+        .collect::<Vec<_>>()\n+        .into_iter()\n     }\n }\n \n@@ -643,6 +658,16 @@ impl<CTX> HashStable<CTX> for SanitizerSet {\n     }\n }\n \n+impl ToJson for SanitizerSet {\n+    fn to_json(&self) -> Json {\n+        self.into_iter()\n+            .map(|v| Some(v.as_str()?.to_json()))\n+            .collect::<Option<Vec<_>>>()\n+            .unwrap_or(Vec::new())\n+            .to_json()\n+    }\n+}\n+\n macro_rules! supported_targets {\n     ( $(($( $triple:literal, )+ $module:ident ),)+ ) => {\n         $(mod $module;)+\n@@ -1614,6 +1639,24 @@ impl Target {\n                     )),\n                 }).unwrap_or(Ok(()))\n             } );\n+            ($key_name:ident, SanitizerSet) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.find(&name[..]).and_then(|o| o.as_array()).and_then(|a| {\n+                    for s in a {\n+                        base.$key_name |= match s.as_string() {\n+                            Some(\"address\") => SanitizerSet::ADDRESS,\n+                            Some(\"leak\") => SanitizerSet::LEAK,\n+                            Some(\"memory\") => SanitizerSet::MEMORY,\n+                            Some(\"thread\") => SanitizerSet::THREAD,\n+                            Some(\"hwaddress\") => SanitizerSet::HWADDRESS,\n+                            Some(s) => return Some(Err(format!(\"unknown sanitizer {}\", s))),\n+                            _ => return Some(Err(format!(\"not a string: {:?}\", s))),\n+                        };\n+                    }\n+                    Some(Ok(()))\n+                }).unwrap_or(Ok(()))\n+            } );\n+\n             ($key_name:ident, crt_objects_fallback) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n@@ -1792,6 +1835,7 @@ impl Target {\n         key!(eh_frame_header, bool);\n         key!(has_thumb_interworking, bool);\n         key!(split_debuginfo, SplitDebuginfo)?;\n+        key!(supported_sanitizers, SanitizerSet)?;\n \n         // NB: The old name is deprecated, but support for it is retained for\n         // compatibility.\n@@ -2029,6 +2073,7 @@ impl ToJson for Target {\n         target_option_val!(eh_frame_header);\n         target_option_val!(has_thumb_interworking);\n         target_option_val!(split_debuginfo);\n+        target_option_val!(supported_sanitizers);\n \n         if default.unsupported_abis != self.unsupported_abis {\n             d.insert("}]}