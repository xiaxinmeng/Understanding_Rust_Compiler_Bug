{"sha": "66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZjViZjFiOGIxZTI5YWZjMTUyMjBkNDc1M2ZmYmNmMGM1YjVkOTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-24T04:30:02Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-04T17:43:06Z"}, "message": "extract rustc::middle::codegen_fn_attrs", "tree": {"sha": "a2dd5e946e81b963c242fa56b6e4d970eaf481a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2dd5e946e81b963c242fa56b6e4d970eaf481a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "html_url": "https://github.com/rust-lang/rust/commit/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c19ed3bc5b281fa5e74e70e008a154204fbfd814", "url": "https://api.github.com/repos/rust-lang/rust/commits/c19ed3bc5b281fa5e74e70e008a154204fbfd814", "html_url": "https://github.com/rust-lang/rust/commit/c19ed3bc5b281fa5e74e70e008a154204fbfd814"}], "stats": {"total": 300, "additions": 151, "deletions": 149}, "files": [{"sha": "959a4a0a304f0ae8003fe24aa939a63ffd3469b8", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "patch": "@@ -10,7 +10,6 @@ pub use self::UnsafeSource::*;\n \n use crate::hir::def::{DefKind, Res};\n use crate::hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n-use crate::mir::mono::Linkage;\n use crate::ty::query::Providers;\n use crate::util::nodemap::{FxHashSet, NodeMap};\n \n@@ -29,7 +28,6 @@ use syntax::ast::{self, AsmDialect, CrateSugar, Ident, Name, NodeId};\n use syntax::ast::{AttrVec, Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, UintTy};\n pub use syntax::ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use syntax::ast::{CaptureBy, Constness, Movability, Mutability, Unsafety};\n-use syntax::attr::{InlineAttr, OptimizeAttr};\n use syntax::tokenstream::TokenStream;\n use syntax::util::parser::ExprPrecedence;\n \n@@ -2668,119 +2666,6 @@ pub fn provide(providers: &mut Providers<'_>) {\n     upvars::provide(providers);\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n-pub struct CodegenFnAttrs {\n-    pub flags: CodegenFnAttrFlags,\n-    /// Parsed representation of the `#[inline]` attribute\n-    pub inline: InlineAttr,\n-    /// Parsed representation of the `#[optimize]` attribute\n-    pub optimize: OptimizeAttr,\n-    /// The `#[export_name = \"...\"]` attribute, indicating a custom symbol a\n-    /// function should be exported under\n-    pub export_name: Option<Symbol>,\n-    /// The `#[link_name = \"...\"]` attribute, indicating a custom symbol an\n-    /// imported function should be imported as. Note that `export_name`\n-    /// probably isn't set when this is set, this is for foreign items while\n-    /// `#[export_name]` is for Rust-defined functions.\n-    pub link_name: Option<Symbol>,\n-    /// The `#[link_ordinal = \"...\"]` attribute, indicating an ordinal an\n-    /// imported function has in the dynamic library. Note that this must not\n-    /// be set when `link_name` is set. This is for foreign items with the\n-    /// \"raw-dylib\" kind.\n-    pub link_ordinal: Option<usize>,\n-    /// The `#[target_feature(enable = \"...\")]` attribute and the enabled\n-    /// features (only enabled features are supported right now).\n-    pub target_features: Vec<Symbol>,\n-    /// The `#[linkage = \"...\"]` attribute and the value we found.\n-    pub linkage: Option<Linkage>,\n-    /// The `#[link_section = \"...\"]` attribute, or what executable section this\n-    /// should be placed in.\n-    pub link_section: Option<Symbol>,\n-}\n-\n-bitflags! {\n-    #[derive(RustcEncodable, RustcDecodable, HashStable)]\n-    pub struct CodegenFnAttrFlags: u32 {\n-        /// `#[cold]`: a hint to LLVM that this function, when called, is never on\n-        /// the hot path.\n-        const COLD                      = 1 << 0;\n-        /// `#[rustc_allocator]`: a hint to LLVM that the pointer returned from this\n-        /// function is never null.\n-        const ALLOCATOR                 = 1 << 1;\n-        /// `#[unwind]`: an indicator that this function may unwind despite what\n-        /// its ABI signature may otherwise imply.\n-        const UNWIND                    = 1 << 2;\n-        /// `#[rust_allocator_nounwind]`, an indicator that an imported FFI\n-        /// function will never unwind. Probably obsolete by recent changes with\n-        /// #[unwind], but hasn't been removed/migrated yet\n-        const RUSTC_ALLOCATOR_NOUNWIND  = 1 << 3;\n-        /// `#[naked]`: an indicator to LLVM that no function prologue/epilogue\n-        /// should be generated.\n-        const NAKED                     = 1 << 4;\n-        /// `#[no_mangle]`: an indicator that the function's name should be the same\n-        /// as its symbol.\n-        const NO_MANGLE                 = 1 << 5;\n-        /// `#[rustc_std_internal_symbol]`: an indicator that this symbol is a\n-        /// \"weird symbol\" for the standard library in that it has slightly\n-        /// different linkage, visibility, and reachability rules.\n-        const RUSTC_STD_INTERNAL_SYMBOL = 1 << 6;\n-        /// `#[no_debug]`: an indicator that no debugging information should be\n-        /// generated for this function by LLVM.\n-        const NO_DEBUG                  = 1 << 7;\n-        /// `#[thread_local]`: indicates a static is actually a thread local\n-        /// piece of memory\n-        const THREAD_LOCAL              = 1 << 8;\n-        /// `#[used]`: indicates that LLVM can't eliminate this function (but the\n-        /// linker can!).\n-        const USED                      = 1 << 9;\n-        /// `#[ffi_returns_twice]`, indicates that an extern function can return\n-        /// multiple times\n-        const FFI_RETURNS_TWICE         = 1 << 10;\n-        /// `#[track_caller]`: allow access to the caller location\n-        const TRACK_CALLER              = 1 << 11;\n-    }\n-}\n-\n-impl CodegenFnAttrs {\n-    pub fn new() -> CodegenFnAttrs {\n-        CodegenFnAttrs {\n-            flags: CodegenFnAttrFlags::empty(),\n-            inline: InlineAttr::None,\n-            optimize: OptimizeAttr::None,\n-            export_name: None,\n-            link_name: None,\n-            link_ordinal: None,\n-            target_features: vec![],\n-            linkage: None,\n-            link_section: None,\n-        }\n-    }\n-\n-    /// Returns `true` if `#[inline]` or `#[inline(always)]` is present.\n-    pub fn requests_inline(&self) -> bool {\n-        match self.inline {\n-            InlineAttr::Hint | InlineAttr::Always => true,\n-            InlineAttr::None | InlineAttr::Never => false,\n-        }\n-    }\n-\n-    /// Returns `true` if it looks like this symbol needs to be exported, for example:\n-    ///\n-    /// * `#[no_mangle]` is present\n-    /// * `#[export_name(...)]` is present\n-    /// * `#[linkage]` is present\n-    pub fn contains_extern_indicator(&self) -> bool {\n-        self.flags.contains(CodegenFnAttrFlags::NO_MANGLE)\n-            || self.export_name.is_some()\n-            || match self.linkage {\n-                // These are private, so make sure we don't try to consider\n-                // them external.\n-                None | Some(Linkage::Internal) | Some(Linkage::Private) => false,\n-                Some(_) => true,\n-            }\n-    }\n-}\n-\n #[derive(Copy, Clone, Debug)]\n pub enum Node<'hir> {\n     Param(&'hir Param<'hir>),"}, {"sha": "3b109f2fea687442660cb4cf31d3bcbbbe635004", "filename": "src/librustc/middle/codegen_fn_attrs.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "patch": "@@ -0,0 +1,116 @@\n+use crate::mir::mono::Linkage;\n+use rustc_span::symbol::Symbol;\n+use syntax::attr::{InlineAttr, OptimizeAttr};\n+\n+#[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n+pub struct CodegenFnAttrs {\n+    pub flags: CodegenFnAttrFlags,\n+    /// Parsed representation of the `#[inline]` attribute\n+    pub inline: InlineAttr,\n+    /// Parsed representation of the `#[optimize]` attribute\n+    pub optimize: OptimizeAttr,\n+    /// The `#[export_name = \"...\"]` attribute, indicating a custom symbol a\n+    /// function should be exported under\n+    pub export_name: Option<Symbol>,\n+    /// The `#[link_name = \"...\"]` attribute, indicating a custom symbol an\n+    /// imported function should be imported as. Note that `export_name`\n+    /// probably isn't set when this is set, this is for foreign items while\n+    /// `#[export_name]` is for Rust-defined functions.\n+    pub link_name: Option<Symbol>,\n+    /// The `#[link_ordinal = \"...\"]` attribute, indicating an ordinal an\n+    /// imported function has in the dynamic library. Note that this must not\n+    /// be set when `link_name` is set. This is for foreign items with the\n+    /// \"raw-dylib\" kind.\n+    pub link_ordinal: Option<usize>,\n+    /// The `#[target_feature(enable = \"...\")]` attribute and the enabled\n+    /// features (only enabled features are supported right now).\n+    pub target_features: Vec<Symbol>,\n+    /// The `#[linkage = \"...\"]` attribute and the value we found.\n+    pub linkage: Option<Linkage>,\n+    /// The `#[link_section = \"...\"]` attribute, or what executable section this\n+    /// should be placed in.\n+    pub link_section: Option<Symbol>,\n+}\n+\n+bitflags! {\n+    #[derive(RustcEncodable, RustcDecodable, HashStable)]\n+    pub struct CodegenFnAttrFlags: u32 {\n+        /// `#[cold]`: a hint to LLVM that this function, when called, is never on\n+        /// the hot path.\n+        const COLD                      = 1 << 0;\n+        /// `#[rustc_allocator]`: a hint to LLVM that the pointer returned from this\n+        /// function is never null.\n+        const ALLOCATOR                 = 1 << 1;\n+        /// `#[unwind]`: an indicator that this function may unwind despite what\n+        /// its ABI signature may otherwise imply.\n+        const UNWIND                    = 1 << 2;\n+        /// `#[rust_allocator_nounwind]`, an indicator that an imported FFI\n+        /// function will never unwind. Probably obsolete by recent changes with\n+        /// #[unwind], but hasn't been removed/migrated yet\n+        const RUSTC_ALLOCATOR_NOUNWIND  = 1 << 3;\n+        /// `#[naked]`: an indicator to LLVM that no function prologue/epilogue\n+        /// should be generated.\n+        const NAKED                     = 1 << 4;\n+        /// `#[no_mangle]`: an indicator that the function's name should be the same\n+        /// as its symbol.\n+        const NO_MANGLE                 = 1 << 5;\n+        /// `#[rustc_std_internal_symbol]`: an indicator that this symbol is a\n+        /// \"weird symbol\" for the standard library in that it has slightly\n+        /// different linkage, visibility, and reachability rules.\n+        const RUSTC_STD_INTERNAL_SYMBOL = 1 << 6;\n+        /// `#[no_debug]`: an indicator that no debugging information should be\n+        /// generated for this function by LLVM.\n+        const NO_DEBUG                  = 1 << 7;\n+        /// `#[thread_local]`: indicates a static is actually a thread local\n+        /// piece of memory\n+        const THREAD_LOCAL              = 1 << 8;\n+        /// `#[used]`: indicates that LLVM can't eliminate this function (but the\n+        /// linker can!).\n+        const USED                      = 1 << 9;\n+        /// `#[ffi_returns_twice]`, indicates that an extern function can return\n+        /// multiple times\n+        const FFI_RETURNS_TWICE         = 1 << 10;\n+        /// `#[track_caller]`: allow access to the caller location\n+        const TRACK_CALLER              = 1 << 11;\n+    }\n+}\n+\n+impl CodegenFnAttrs {\n+    pub fn new() -> CodegenFnAttrs {\n+        CodegenFnAttrs {\n+            flags: CodegenFnAttrFlags::empty(),\n+            inline: InlineAttr::None,\n+            optimize: OptimizeAttr::None,\n+            export_name: None,\n+            link_name: None,\n+            link_ordinal: None,\n+            target_features: vec![],\n+            linkage: None,\n+            link_section: None,\n+        }\n+    }\n+\n+    /// Returns `true` if `#[inline]` or `#[inline(always)]` is present.\n+    pub fn requests_inline(&self) -> bool {\n+        match self.inline {\n+            InlineAttr::Hint | InlineAttr::Always => true,\n+            InlineAttr::None | InlineAttr::Never => false,\n+        }\n+    }\n+\n+    /// Returns `true` if it looks like this symbol needs to be exported, for example:\n+    ///\n+    /// * `#[no_mangle]` is present\n+    /// * `#[export_name(...)]` is present\n+    /// * `#[linkage]` is present\n+    pub fn contains_extern_indicator(&self) -> bool {\n+        self.flags.contains(CodegenFnAttrFlags::NO_MANGLE)\n+            || self.export_name.is_some()\n+            || match self.linkage {\n+                // These are private, so make sure we don't try to consider\n+                // them external.\n+                None | Some(Linkage::Internal) | Some(Linkage::Private) => false,\n+                Some(_) => true,\n+            }\n+    }\n+}"}, {"sha": "c2959766c570a5de3da4cdac0ca7a181b93773c3", "filename": "src/librustc/middle/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc%2Fmiddle%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc%2Fmiddle%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmod.rs?ref=66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "patch": "@@ -1,3 +1,4 @@\n+pub mod codegen_fn_attrs;\n pub mod cstore;\n pub mod dependency_format;\n pub mod exported_symbols;"}, {"sha": "a7e716ad7b730a2d2092e5101eb2618ccd0bfc09", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "patch": "@@ -1,6 +1,6 @@\n use crate::hir::def::Namespace;\n use crate::hir::def_id::DefId;\n-use crate::hir::CodegenFnAttrFlags;\n+use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::middle::lang_items::DropInPlaceFnLangItem;\n use crate::traits;\n use crate::ty::print::{FmtPrinter, Printer};"}, {"sha": "5f739c4e6e625647e43d6a97eefe0af67e4333c3", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "patch": "@@ -1,9 +1,10 @@\n use crate::dep_graph::{self, DepNode};\n use crate::hir::def::{DefKind, Export};\n use crate::hir::def_id::{CrateNum, DefId, DefIndex};\n-use crate::hir::{self, CodegenFnAttrs, ItemLocalId, TraitCandidate};\n+use crate::hir::{self, ItemLocalId, TraitCandidate};\n use crate::infer::canonical::{self, Canonical};\n use crate::lint;\n+use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n use crate::middle::cstore::{CrateSource, DepKind, NativeLibraryKind};\n use crate::middle::cstore::{ExternCrate, ForeignModule, LinkagePreference, NativeLibrary};\n use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};"}, {"sha": "a7826282314eb553bcf30a2f2e8cdd9fcb779b90", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "patch": "@@ -3,7 +3,7 @@\n use std::ffi::CString;\n \n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc::hir::CodegenFnAttrFlags;\n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::session::config::{OptLevel, Sanitizer};\n use rustc::session::Session;\n use rustc::ty::layout::HasTyCtxt;"}, {"sha": "cb44a56d0751636b6535bc77ea1f0c26e56bb004", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "patch": "@@ -14,33 +14,32 @@\n //!   int)` and `rec(x=int, y=int, z=int)` will have the same `llvm::Type`.\n \n use super::{LlvmCodegenBackend, ModuleLlvm};\n-use rustc_codegen_ssa::base::maybe_create_entry_wrapper;\n-use rustc_codegen_ssa::{ModuleCodegen, ModuleKind};\n \n use crate::builder::Builder;\n use crate::common;\n use crate::context::CodegenCx;\n use crate::llvm;\n use crate::metadata;\n+use crate::value::Value;\n+\n use rustc::dep_graph;\n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::exported_symbols;\n use rustc::mir::mono::{Linkage, Visibility};\n use rustc::session::config::DebugInfo;\n use rustc::ty::TyCtxt;\n-use rustc_codegen_ssa::mono_item::MonoItemExt;\n-use rustc_data_structures::small_c_str::SmallCStr;\n-\n use rustc_codegen_ssa::back::write::submit_codegened_module_to_llvm;\n+use rustc_codegen_ssa::base::maybe_create_entry_wrapper;\n+use rustc_codegen_ssa::mono_item::MonoItemExt;\n use rustc_codegen_ssa::traits::*;\n-\n-use rustc::hir::CodegenFnAttrs;\n+use rustc_codegen_ssa::{ModuleCodegen, ModuleKind};\n+use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_span::symbol::Symbol;\n+\n use std::ffi::CString;\n use std::time::Instant;\n \n-use crate::value::Value;\n-\n pub fn write_compressed_metadata<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     metadata: &EncodedMetadata,"}, {"sha": "4b4fbd0e1ad53a8f2f2227f2e20d721d5c4826d7", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "patch": "@@ -8,20 +8,18 @@ use crate::value::Value;\n use libc::c_uint;\n use log::debug;\n use rustc::hir::def_id::DefId;\n-use rustc::hir::Node;\n+use rustc::hir::{self, Node};\n+use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::mir::interpret::{read_target_uint, Allocation, ConstValue, ErrorHandled, Pointer};\n use rustc::mir::mono::MonoItem;\n+use rustc::ty::layout::{self, Align, LayoutOf, Size};\n use rustc::ty::{self, Instance, Ty};\n use rustc::{bug, span_bug};\n use rustc_codegen_ssa::traits::*;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use rustc_target::abi::HasDataLayout;\n \n-use rustc::ty::layout::{self, Align, LayoutOf, Size};\n-\n-use rustc::hir::{self, CodegenFnAttrFlags, CodegenFnAttrs};\n-\n use std::ffi::CStr;\n \n pub fn const_alloc_to_llvm(cx: &CodegenCx<'ll, '_>, alloc: &Allocation) -> &'ll Value {"}, {"sha": "a03938082da5ab7881d4aa993f8f75bd47eaca54", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "patch": "@@ -22,8 +22,8 @@ use crate::value::Value;\n use log::debug;\n use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc::hir::CodegenFnAttrFlags;\n use rustc::ich::NodeIdHashingMode;\n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::mir::interpret::truncate;\n use rustc::mir::{self, Field, GeneratorLayout};\n use rustc::session::config::{self, DebugInfo};"}, {"sha": "143fa651a15162f1806915f625cdc498dee6bae0", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "patch": "@@ -14,7 +14,7 @@ use crate::llvm::debuginfo::{\n     DIArray, DIBuilder, DIFile, DIFlags, DILexicalBlock, DISPFlags, DIScope, DIType,\n };\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc::hir::CodegenFnAttrFlags;\n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::ty::subst::{GenericArgKind, SubstsRef};\n \n use crate::abi::FnAbi;"}, {"sha": "fba221a80f70917e7a75fef6bca7b5f5720d5c49", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "patch": "@@ -3,8 +3,8 @@ use std::sync::Arc;\n \n use rustc::hir;\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::Node;\n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::middle::exported_symbols::{metadata_symbol_name, ExportedSymbol, SymbolExportLevel};\n use rustc::session::config;\n use rustc::ty::query::Providers;"}, {"sha": "d340e0f25231b2dbf13045a4af70942ef0e73a2a", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "patch": "@@ -27,6 +27,7 @@ use crate::{CachedModuleCodegen, CrateInfo, MemFlags, ModuleCodegen, ModuleKind}\n \n use rustc::hir;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::cstore::{self, LinkagePreference};\n use rustc::middle::lang_items::StartFnLangItem;\n@@ -811,7 +812,7 @@ pub fn provide_both(providers: &mut Providers<'_>) {\n \n         let (defids, _) = tcx.collect_and_partition_mono_items(cratenum);\n         for id in &*defids {\n-            let hir::CodegenFnAttrs { optimize, .. } = tcx.codegen_fn_attrs(*id);\n+            let CodegenFnAttrs { optimize, .. } = tcx.codegen_fn_attrs(*id);\n             match optimize {\n                 attr::OptimizeAttr::None => continue,\n                 attr::OptimizeAttr::Size => continue,"}, {"sha": "e479573038b73cfaf10444f5f56dc751f87dd327", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "patch": "@@ -88,8 +88,8 @@\n //! DefPaths which are much more robust in the face of changes to the code base.\n \n use rustc::hir::def_id::LOCAL_CRATE;\n-use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::Node;\n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::mir::mono::{InstantiationMode, MonoItem};\n use rustc::session::config::SymbolManglingVersion;\n use rustc::ty::query::Providers;"}, {"sha": "16319d1ab370ddfea4326be63a1e5c1b2be18fe6", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "patch": "@@ -176,9 +176,10 @@\n \n use crate::monomorphize;\n \n+use rustc::hir;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc::hir::{self, CodegenFnAttrFlags};\n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n use rustc::mir::interpret::{AllocId, ConstValue};\n use rustc::mir::interpret::{ErrorHandled, GlobalAlloc, Scalar};"}, {"sha": "afbae7676fdc2fda6665bb8f4c7a8158232ebed0", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "patch": "@@ -98,7 +98,7 @@ use std::sync::Arc;\n \n use rustc::hir::def::DefKind;\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc::hir::CodegenFnAttrFlags;\n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::middle::exported_symbols::SymbolExportLevel;\n use rustc::mir::mono::{CodegenUnit, CodegenUnitNameBuilder, Linkage, Visibility};\n use rustc::mir::mono::{InstantiationMode, MonoItem};"}, {"sha": "52a105658bdcdc96d65ff840e7d3a2bb073e4690", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "patch": "@@ -1,11 +1,11 @@\n //! Inlining pass for MIR functions\n \n use rustc::hir::def_id::DefId;\n-use rustc::hir::CodegenFnAttrFlags;\n \n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n \n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::mir::visit::*;\n use rustc::mir::*;\n use rustc::ty::subst::{InternalSubsts, Subst, SubstsRef};"}, {"sha": "8e813ec692e7a015dc788ca450f7d14c15780bda", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "patch": "@@ -9,8 +9,8 @@ use rustc::hir::{self, PatKind, TyKind};\n \n use rustc::hir::def::{CtorOf, DefKind, Res};\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc::hir::CodegenFnAttrFlags;\n use rustc::lint;\n+use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::middle::privacy;\n use rustc::ty::{self, DefIdTree, TyCtxt};\n use rustc::util::nodemap::FxHashSet;"}, {"sha": "c3ab595ad682675a4a44aadf46c71d603fe8f445", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "patch": "@@ -5,22 +5,21 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n+use rustc::hir;\n use rustc::hir::def::{DefKind, Res};\n+use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::hir::def_id::{CrateNum, DefId};\n+use rustc::hir::intravisit;\n+use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::Node;\n-use rustc::hir::{CodegenFnAttrFlags, CodegenFnAttrs};\n+use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::middle::privacy;\n use rustc::session::config;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n use rustc::util::nodemap::{FxHashSet, HirIdSet};\n use rustc_data_structures::sync::Lrc;\n-\n-use rustc::hir;\n-use rustc::hir::def_id::LOCAL_CRATE;\n-use rustc::hir::intravisit;\n-use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc_target::spec::abi::Abi;\n \n // Returns true if the given item must be inlined because it may be"}, {"sha": "1d20ef2fe0735f2cabba7a45507b2ef70659645e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=66f5bf1b8b1e29afc15220d4753ffbcf0c5b5d91", "patch": "@@ -20,6 +20,7 @@ use crate::constrained_generic_params as cgp;\n use crate::lint;\n use crate::middle::resolve_lifetime as rl;\n use crate::middle::weak_lang_items;\n+use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::mir::mono::Linkage;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::GenericArgKind;\n@@ -44,7 +45,7 @@ use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::GenericParamKind;\n use rustc::hir::Node;\n-use rustc::hir::{self, CodegenFnAttrFlags, CodegenFnAttrs, Unsafety};\n+use rustc::hir::{self, Unsafety};\n \n use errors::{Applicability, StashKey};\n "}]}