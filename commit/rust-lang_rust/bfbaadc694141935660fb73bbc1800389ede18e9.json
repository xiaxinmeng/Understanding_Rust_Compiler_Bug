{"sha": "bfbaadc694141935660fb73bbc1800389ede18e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYmFhZGM2OTQxNDE5MzU2NjBmYjczYmJjMTgwMDM4OWVkZTE4ZTk=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-12-16T16:38:49Z"}, "committer": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-12-16T16:41:07Z"}, "message": "core: marked fns as pure where possible", "tree": {"sha": "c0a8b7bde82656d0f43893d83fbac6201a1ab706", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0a8b7bde82656d0f43893d83fbac6201a1ab706"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfbaadc694141935660fb73bbc1800389ede18e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfbaadc694141935660fb73bbc1800389ede18e9", "html_url": "https://github.com/rust-lang/rust/commit/bfbaadc694141935660fb73bbc1800389ede18e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfbaadc694141935660fb73bbc1800389ede18e9/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fe4bd0f433553eacf8d81cdbe16ac6fe6f16c54", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe4bd0f433553eacf8d81cdbe16ac6fe6f16c54", "html_url": "https://github.com/rust-lang/rust/commit/1fe4bd0f433553eacf8d81cdbe16ac6fe6f16c54"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "af4b752f4dd1a7e556168154eb94d1acf637ff30", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfbaadc694141935660fb73bbc1800389ede18e9/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbaadc694141935660fb73bbc1800389ede18e9/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=bfbaadc694141935660fb73bbc1800389ede18e9", "patch": "@@ -123,7 +123,7 @@ Returns:\n \n An u8 whose first bit is set if `if_true(v)` holds\n */\n-fn to_bit(v: t) -> u8 { if v { 1u8 } else { 0u8 } }\n+pure fn to_bit(v: t) -> u8 { if v { 1u8 } else { 0u8 } }\n \n // Local Variables:\n // mode: rust;"}, {"sha": "23b5889bc6a4e5f6ce31574dec81e5841e47f716", "filename": "src/libcore/box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfbaadc694141935660fb73bbc1800389ede18e9/src%2Flibcore%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbaadc694141935660fb73bbc1800389ede18e9/src%2Flibcore%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbox.rs?ref=bfbaadc694141935660fb73bbc1800389ede18e9", "patch": "@@ -10,7 +10,7 @@ Function: ptr_eq\n \n Determine if two shared boxes point to the same object\n */\n-fn ptr_eq<T>(a: @T, b: @T) -> bool {\n+pure fn ptr_eq<T>(a: @T, b: @T) -> bool {\n     // FIXME: ptr::addr_of\n     unsafe {\n         let a_ptr: uint = unsafe::reinterpret_cast(a);"}, {"sha": "2648c8481dfa17134100188232cbde7aa2e3a8fa", "filename": "src/libcore/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfbaadc694141935660fb73bbc1800389ede18e9/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbaadc694141935660fb73bbc1800389ede18e9/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=bfbaadc694141935660fb73bbc1800389ede18e9", "patch": "@@ -122,7 +122,7 @@ pure fn to_digit(c: char) -> u8 unsafe {\n  Convert a char to the corresponding digit. Returns none when the\n  character is not a valid hexadecimal digit.\n */\n-fn maybe_digit(c: char) -> option::t<u8> {\n+pure fn maybe_digit(c: char) -> option::t<u8> {\n     alt c {\n       '0' to '9' { option::some(c as u8 - ('0' as u8)) }\n       'a' to 'z' { option::some(c as u8 + 10u8 - ('a' as u8)) }\n@@ -143,7 +143,7 @@ fn maybe_digit(c: char) -> option::t<u8> {\n  Returns:\n   -1 if a<b, 0 if a==b, +1 if a>b\n */\n-fn cmp(a: char, b: char) -> int {\n+pure fn cmp(a: char, b: char) -> int {\n     ret  if b > a { -1 }\n     else if b < a { 1 }\n     else { 0 }"}, {"sha": "39e68a01519bff70c1c83cf9d5795a30a616e3dd", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfbaadc694141935660fb73bbc1800389ede18e9/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbaadc694141935660fb73bbc1800389ede18e9/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=bfbaadc694141935660fb73bbc1800389ede18e9", "patch": "@@ -30,7 +30,7 @@ Failure:\n \n Fails if the value equals `none`.\n */\n-fn get<copy T>(opt: t<T>) -> T {\n+pure fn get<copy T>(opt: t<T>) -> T {\n     alt opt { some(x) { ret x; } none. { fail \"option none\"; } }\n }\n \n@@ -61,7 +61,7 @@ Function: from_maybe\n \n Returns the contained value or a default\n */\n-fn from_maybe<T>(def: T, opt: t<T>) -> T {\n+pure fn from_maybe<T>(def: T, opt: t<T>) -> T {\n     alt opt { some(x) { x } none. { def } }\n }\n "}, {"sha": "802297223e9bce490dda0f670d91c9e45bff7119", "filename": "src/libcore/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfbaadc694141935660fb73bbc1800389ede18e9/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbaadc694141935660fb73bbc1800389ede18e9/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=bfbaadc694141935660fb73bbc1800389ede18e9", "patch": "@@ -26,14 +26,14 @@ Function: eq\n \n Bytewise string equality\n */\n-fn eq(&&a: str, &&b: str) -> bool { a == b }\n+pure fn eq(&&a: str, &&b: str) -> bool { a == b }\n \n /*\n Function: lteq\n \n Bytewise less than or equal\n */\n-fn lteq(&&a: str, &&b: str) -> bool { a <= b }\n+pure fn lteq(&&a: str, &&b: str) -> bool { a <= b }\n \n /*\n Function: hash\n@@ -131,7 +131,7 @@ Function: byte_len\n \n Returns the length in bytes of a string\n */\n-fn byte_len(s: str) -> uint unsafe {\n+pure fn byte_len(s: str) -> uint unsafe {\n     let v: [u8] = unsafe::reinterpret_cast(s);\n     let vlen = vec::len(v);\n     unsafe::leak(v);\n@@ -261,7 +261,7 @@ Function: utf8_char_width\n \n FIXME: What does this function do?\n */\n-fn utf8_char_width(b: u8) -> uint {\n+pure fn utf8_char_width(b: u8) -> uint {\n     let byte: uint = b as uint;\n     if byte < 128u { ret 1u; }\n     if byte < 192u {"}, {"sha": "9c8b097211173a63bb518885834d8e1117af8e9d", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfbaadc694141935660fb73bbc1800389ede18e9/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbaadc694141935660fb73bbc1800389ede18e9/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=bfbaadc694141935660fb73bbc1800389ede18e9", "patch": "@@ -42,7 +42,7 @@ Function: last_os_error\n Get a string representing the platform-dependent last error\n */\n fn last_os_error() -> str {\n-    ret rustrt::last_os_error();\n+    rustrt::last_os_error()\n }\n \n /*"}, {"sha": "d056eb8d04dcc048843de134b4a3e7aa33970741", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfbaadc694141935660fb73bbc1800389ede18e9/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbaadc694141935660fb73bbc1800389ede18e9/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=bfbaadc694141935660fb73bbc1800389ede18e9", "patch": "@@ -181,7 +181,7 @@ Returns the first element of a vector\n Predicates:\n <is_not_empty> (v)\n */\n-fn head<copy T>(v: [const T]) : is_not_empty(v) -> T { ret v[0]; }\n+pure fn head<copy T>(v: [const T]) : is_not_empty(v) -> T { ret v[0]; }\n \n /*\n Function: tail\n@@ -221,7 +221,7 @@ Returns:\n An option containing the last element of `v` if `v` is not empty, or\n none if `v` is empty.\n */\n-fn last<copy T>(v: [const T]) -> option::t<T> {\n+pure fn last<copy T>(v: [const T]) -> option::t<T> {\n     if len(v) == 0u { ret none; }\n     ret some(v[len(v) - 1u]);\n }\n@@ -234,7 +234,7 @@ Returns the last element of a non-empty vector `v`\n Predicates:\n <is_not_empty> (v)\n */\n-fn last_total<copy T>(v: [const T]) : is_not_empty(v) -> T {\n+pure fn last_total<copy T>(v: [const T]) : is_not_empty(v) -> T {\n     ret v[len(v) - 1u];\n }\n "}]}