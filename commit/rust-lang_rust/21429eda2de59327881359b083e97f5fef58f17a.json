{"sha": "21429eda2de59327881359b083e97f5fef58f17a", "node_id": "C_kwDOAAsO6NoAKDIxNDI5ZWRhMmRlNTkzMjc4ODEzNTliMDgzZTk3ZjVmZWY1OGYxN2E", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-08T15:17:50Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-13T15:57:05Z"}, "message": "Improve `std::thread::available_parallelism` docs", "tree": {"sha": "33f8a1108fe14eef1052bfe2fbf2f8274ca00e7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33f8a1108fe14eef1052bfe2fbf2f8274ca00e7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21429eda2de59327881359b083e97f5fef58f17a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21429eda2de59327881359b083e97f5fef58f17a", "html_url": "https://github.com/rust-lang/rust/commit/21429eda2de59327881359b083e97f5fef58f17a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21429eda2de59327881359b083e97f5fef58f17a/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44995f7afb18775913618ae50601be31b9f9dead", "url": "https://api.github.com/repos/rust-lang/rust/commits/44995f7afb18775913618ae50601be31b9f9dead", "html_url": "https://github.com/rust-lang/rust/commit/44995f7afb18775913618ae50601be31b9f9dead"}], "stats": {"total": 77, "additions": 57, "deletions": 20}, "files": [{"sha": "944defa0f817a05d9a8079ddfbd8f67ef60e0407", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 57, "deletions": 20, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/21429eda2de59327881359b083e97f5fef58f17a/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21429eda2de59327881359b083e97f5fef58f17a/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=21429eda2de59327881359b083e97f5fef58f17a", "patch": "@@ -1427,39 +1427,76 @@ fn _assert_sync_and_send() {\n     _assert_both::<Thread>();\n }\n \n-/// Returns the number of hardware threads available to the program.\n-///\n-/// This value should be considered only a hint.\n-///\n-/// # Platform-specific behavior\n-///\n-/// If interpreted as the number of actual hardware threads, it may undercount on\n-/// Windows systems with more than 64 hardware threads. If interpreted as the\n-/// available concurrency for that process, it may overcount on Windows systems\n-/// when limited by a process wide affinity mask or job object limitations, and\n-/// it may overcount on Linux systems when limited by a process wide affinity\n-/// mask or affected by cgroups limits.\n+/// Returns an estimate of the default amount of parallelism a program should use.\n+///\n+/// Parallelism is a resource. A given machine provides a certain capacity for\n+/// parallelism, i.e., a bound on the number of computations it can perform\n+/// simultaneously. This number often corresponds to the amount of CPUs or\n+/// computer has, but it may diverge in various cases.\n+///\n+/// Host environments such as VMs or container orchestrators may want to\n+/// restrict the amount of parallelism made available to programs in them. This\n+/// is often done to limit the potential impact of (unintentionally)\n+/// resource-intensive programs on other programs running on the same machine.\n+///\n+/// # Limitations\n+///\n+/// The purpose of this API is to provide an easy and portable way to query\n+/// the default amount of parallelism the program should use. Among other things it\n+/// does not expose information on NUMA regions, does not account for\n+/// differences in (co)processor capabilities, and will not modify the program's\n+/// global state in order to more accurately query the amount of available\n+/// parallelism.\n+///\n+/// The value returned by this function should be considered a simplified\n+/// approximation of the actual amount of parallelism available at any given\n+/// time. To get a more detailed or precise overview of the amount of\n+/// parallelism available to the program, you may wish to use\n+/// platform-specific APIs as well. The following platform limitations currently\n+/// apply to `available_parallelism`:\n+///\n+/// On Windows:\n+/// - It may undercount the amount of parallelism available on systems with more\n+///   than 64 logical CPUs. However, programs typically need specific support to\n+///   take advantage of more than 64 logical CPUs, and in the absence of such\n+///   support, the number returned by this function accurately reflects the\n+///   number of logical CPUs the program can use by default.\n+/// - It may overcount the amount of parallelism available on systems limited by\n+///   process-wide affinity masks, or job object limitations.\n+///\n+/// On Linux:\n+/// - It may overcount the amount of parallelism available when limited by a\n+///   process-wide affinity mask, or when affected by cgroup limits.\n+///\n+/// On all targets:\n+/// - It may overcount the amount of parallelism available when running in a VM\n+/// with CPU usage limits (e.g. an overcommitted host).\n ///\n /// # Errors\n ///\n-/// This function will return an error in the following situations, but is not\n-/// limited to just these cases:\n+/// This function will, but is not limited to, return errors in the following\n+/// cases:\n ///\n-/// - If the number of hardware threads is not known for the target platform.\n-/// - The process lacks permissions to view the number of hardware threads\n-///   available.\n+/// - If the amount of parallelism is not known for the target platform.\n+/// - If the program lacks permission to query the amount of parallelism made\n+///   available to it.\n ///\n /// # Examples\n ///\n /// ```\n /// # #![allow(dead_code)]\n /// #![feature(available_parallelism)]\n-/// use std::thread;\n+/// use std::{io, thread};\n ///\n-/// let count = thread::available_parallelism().map(|n| n.get()).unwrap_or(1);\n+/// fn main() -> io::Result<()> {\n+///     let count = thread::available_parallelism()?.get();\n+///     assert!(count >= 1_usize);\n+///     Ok(())\n+/// }\n /// ```\n+#[doc(alias = \"available_concurrency\")] // Alias for a previous name we gave this API on unstable.\n #[doc(alias = \"hardware_concurrency\")] // Alias for C++ `std::thread::hardware_concurrency`.\n-#[doc(alias = \"available_concurrency\")] // Alias for a name we gave this API on unstable.\n+#[doc(alias = \"num_cpus\")] // Alias for a popular ecosystem crate which provides similar functionality.\n #[unstable(feature = \"available_parallelism\", issue = \"74479\")]\n pub fn available_parallelism() -> io::Result<NonZeroUsize> {\n     imp::available_parallelism()"}]}