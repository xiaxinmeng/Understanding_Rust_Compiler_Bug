{"sha": "6f964f0a077c1eed1ee51f46cbb506341e4407b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmOTY0ZjBhMDc3YzFlZWQxZWU1MWY0NmNiYjUwNjM0MWU0NDA3YjQ=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-08-14T01:00:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-14T01:00:11Z"}, "message": "Rollup merge of #75452 - michaelwoerister:sp-cache-more-query-keys, r=lcnr\n\nself-profile: Cache more query key strings when doing self-profiling.\n\nThis PR adds optimized `SpecIntoSelfProfilingString` implementations for two common query key types (`LocalDefId` and `WithOptConstParam`). This makes raw self-profiling data on disk 8-9% smaller for my two test cases (`regex` and `cargo`).\n\nThe on-disk format is not affected, so no tooling updates need to happen.\n\nI also tried adding an impl for `Ty<'tcx>` (which should reduce size quite a bit) but the compiler did not allow me to add a specialized impl parameterized with `'tcx`. I don't know if there is an actual problem with that or if the implementation of specialization just doesn't support it yet.\n\ncc @wesleywiser @Mark-Simulacrum", "tree": {"sha": "5d781654cb9549e311101fa57b0ab8dc1668742c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d781654cb9549e311101fa57b0ab8dc1668742c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f964f0a077c1eed1ee51f46cbb506341e4407b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfNeIcCRBK7hj4Ov3rIwAAdHIIAGIQM0Tv52FXWgj0+5wkYs4h\ni5OXgtBEIprqfFBioL6c6WC3fW3KwfGYHRLiEAFfhWBIuvLzTdiJ1n+Rcn7mNLUw\nMT7mYF1aYCJbs8II1246qTCw0br+gw1BRnME0TsvrE8n/EYiLF6KJHz13/JW9/5/\nh97ruEEmKwlYP2bi5toCu/Bar4gJCTBe8VqwazVDj695c4WobOslJPz/czuKKn3t\nJgQmWfQgKVGB6yJn2/fmAPKAB9ZEGCAuX/+0eFlHf0VVRDxlsHIHjnCkX/O7cCWJ\nndYK1njsv8c3sGmW/XFt0XM0fOf1Ac6V2CKoyUGdzE+pvMwnTya1x0ab2UBcdRg=\n=3xa8\n-----END PGP SIGNATURE-----\n", "payload": "tree 5d781654cb9549e311101fa57b0ab8dc1668742c\nparent 1f73e898ee1da743bf9b27e529e070424ca25acf\nparent 08d951768f6f9b98ca5ffe3385adfb3f1935af22\nauthor Tyler Mandry <tmandry@gmail.com> 1597366811 -0700\ncommitter GitHub <noreply@github.com> 1597366811 -0700\n\nRollup merge of #75452 - michaelwoerister:sp-cache-more-query-keys, r=lcnr\n\nself-profile: Cache more query key strings when doing self-profiling.\n\nThis PR adds optimized `SpecIntoSelfProfilingString` implementations for two common query key types (`LocalDefId` and `WithOptConstParam`). This makes raw self-profiling data on disk 8-9% smaller for my two test cases (`regex` and `cargo`).\n\nThe on-disk format is not affected, so no tooling updates need to happen.\n\nI also tried adding an impl for `Ty<'tcx>` (which should reduce size quite a bit) but the compiler did not allow me to add a specialized impl parameterized with `'tcx`. I don't know if there is an actual problem with that or if the implementation of specialization just doesn't support it yet.\n\ncc @wesleywiser @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f964f0a077c1eed1ee51f46cbb506341e4407b4", "html_url": "https://github.com/rust-lang/rust/commit/6f964f0a077c1eed1ee51f46cbb506341e4407b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f964f0a077c1eed1ee51f46cbb506341e4407b4/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f73e898ee1da743bf9b27e529e070424ca25acf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f73e898ee1da743bf9b27e529e070424ca25acf", "html_url": "https://github.com/rust-lang/rust/commit/1f73e898ee1da743bf9b27e529e070424ca25acf"}, {"sha": "08d951768f6f9b98ca5ffe3385adfb3f1935af22", "url": "https://api.github.com/repos/rust-lang/rust/commits/08d951768f6f9b98ca5ffe3385adfb3f1935af22", "html_url": "https://github.com/rust-lang/rust/commit/08d951768f6f9b98ca5ffe3385adfb3f1935af22"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "9b1837356e3053df7778812c8de0e2b1864b1d49", "filename": "src/librustc_middle/ty/query/profiling_support.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6f964f0a077c1eed1ee51f46cbb506341e4407b4/src%2Flibrustc_middle%2Fty%2Fquery%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f964f0a077c1eed1ee51f46cbb506341e4407b4/src%2Flibrustc_middle%2Fty%2Fquery%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fprofiling_support.rs?ref=6f964f0a077c1eed1ee51f46cbb506341e4407b4", "patch": "@@ -1,8 +1,9 @@\n use crate::ty::context::TyCtxt;\n+use crate::ty::WithOptConstParam;\n use measureme::{StringComponent, StringId};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::SelfProfiler;\n-use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathData;\n use rustc_query_system::query::QueryCache;\n use rustc_query_system::query::QueryState;\n@@ -154,6 +155,49 @@ impl SpecIntoSelfProfilingString for DefIndex {\n     }\n }\n \n+impl SpecIntoSelfProfilingString for LocalDefId {\n+    fn spec_to_self_profile_string(\n+        &self,\n+        builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n+    ) -> StringId {\n+        builder.def_id_to_string_id(DefId { krate: LOCAL_CRATE, index: self.local_def_index })\n+    }\n+}\n+\n+impl<T: SpecIntoSelfProfilingString> SpecIntoSelfProfilingString for WithOptConstParam<T> {\n+    fn spec_to_self_profile_string(\n+        &self,\n+        builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n+    ) -> StringId {\n+        // We print `WithOptConstParam` values as tuples to make them shorter\n+        // and more readable, without losing information:\n+        //\n+        // \"WithOptConstParam { did: foo::bar, const_param_did: Some(foo::baz) }\"\n+        // becomes \"(foo::bar, foo::baz)\" and\n+        // \"WithOptConstParam { did: foo::bar, const_param_did: None }\"\n+        // becomes \"(foo::bar, _)\".\n+\n+        let did = StringComponent::Ref(self.did.to_self_profile_string(builder));\n+\n+        let const_param_did = if let Some(const_param_did) = self.const_param_did {\n+            let const_param_did = builder.def_id_to_string_id(const_param_did);\n+            StringComponent::Ref(const_param_did)\n+        } else {\n+            StringComponent::Value(\"_\")\n+        };\n+\n+        let components = [\n+            StringComponent::Value(\"(\"),\n+            did,\n+            StringComponent::Value(\", \"),\n+            const_param_did,\n+            StringComponent::Value(\")\"),\n+        ];\n+\n+        builder.profiler.alloc_string(&components[..])\n+    }\n+}\n+\n impl<T0, T1> SpecIntoSelfProfilingString for (T0, T1)\n where\n     T0: SpecIntoSelfProfilingString,"}]}