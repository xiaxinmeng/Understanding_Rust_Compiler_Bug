{"sha": "d0ee1908ed791d3e91d2ad74ba502eaa203cff6d", "node_id": "C_kwDOAAsO6NoAKGQwZWUxOTA4ZWQ3OTFkM2U5MWQyYWQ3NGJhNTAyZWFhMjAzY2ZmNmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-10T05:07:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-10T05:07:53Z"}, "message": "Auto merge of #112452 - MU001999:fix/issue-112439, r=petrochenkov\n\nMake \"consider importing\" consistent for macros\n\nFixes #112439", "tree": {"sha": "8715c876352c3cbb2564993a1b1ba51bddca1ee6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8715c876352c3cbb2564993a1b1ba51bddca1ee6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d", "html_url": "https://github.com/rust-lang/rust/commit/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29611778b708f95d153fa591a50ac8702dfc0fd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/29611778b708f95d153fa591a50ac8702dfc0fd5", "html_url": "https://github.com/rust-lang/rust/commit/29611778b708f95d153fa591a50ac8702dfc0fd5"}, {"sha": "5bd8ba84931628fc2fa3e1c75cc9b9762c449125", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd8ba84931628fc2fa3e1c75cc9b9762c449125", "html_url": "https://github.com/rust-lang/rust/commit/5bd8ba84931628fc2fa3e1c75cc9b9762c449125"}], "stats": {"total": 80, "additions": 53, "deletions": 27}, "files": [{"sha": "ca811c9ed7d985c26f2636c536b1cb8301a12025", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=d0ee1908ed791d3e91d2ad74ba502eaa203cff6d", "patch": "@@ -1352,6 +1352,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         macro_kind: MacroKind,\n         parent_scope: &ParentScope<'a>,\n         ident: Ident,\n+        krate: &Crate,\n     ) {\n         let is_expected = &|res: Res| res.macro_kind() == Some(macro_kind);\n         let suggestion = self.early_lookup_typo_candidate(\n@@ -1364,13 +1365,17 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         let import_suggestions =\n             self.lookup_import_candidates(ident, Namespace::MacroNS, parent_scope, is_expected);\n+        let (span, found_use) = match parent_scope.module.nearest_parent_mod().as_local() {\n+            Some(def_id) => UsePlacementFinder::check(krate, self.def_id_to_node_id[def_id]),\n+            None => (None, FoundUse::No),\n+        };\n         show_candidates(\n             self.tcx,\n             err,\n-            None,\n+            span,\n             &import_suggestions,\n             Instead::No,\n-            FoundUse::Yes,\n+            found_use,\n             DiagnosticMode::Normal,\n             vec![],\n             \"\","}, {"sha": "db97039b907c4095e91932248fb8a21b27f3e158", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=d0ee1908ed791d3e91d2ad74ba502eaa203cff6d", "patch": "@@ -1522,7 +1522,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             self.tcx.sess.time(\"check_hidden_glob_reexports\", || {\n                 self.check_hidden_glob_reexports(exported_ambiguities)\n             });\n-            self.tcx.sess.time(\"finalize_macro_resolutions\", || self.finalize_macro_resolutions());\n+            self.tcx\n+                .sess\n+                .time(\"finalize_macro_resolutions\", || self.finalize_macro_resolutions(krate));\n             self.tcx.sess.time(\"late_resolve_crate\", || self.late_resolve_crate(krate));\n             self.tcx.sess.time(\"resolve_main\", || self.resolve_main());\n             self.tcx.sess.time(\"resolve_check_unused\", || self.check_unused(krate));"}, {"sha": "ca4f3331b9a2d21f4b5001539c2527b1f961fbf6", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=d0ee1908ed791d3e91d2ad74ba502eaa203cff6d", "patch": "@@ -7,7 +7,7 @@ use crate::{BuiltinMacroState, Determinacy};\n use crate::{DeriveData, Finalize, ParentScope, ResolutionError, Resolver, ScopeSet};\n use crate::{ModuleKind, ModuleOrUniformRoot, NameBinding, PathResult, Segment};\n use rustc_ast::expand::StrippedCfgItem;\n-use rustc_ast::{self as ast, attr, Inline, ItemKind, ModKind, NodeId};\n+use rustc_ast::{self as ast, attr, Crate, Inline, ItemKind, ModKind, NodeId};\n use rustc_ast_pretty::pprust;\n use rustc_attr::StabilityLevel;\n use rustc_data_structures::intern::Interned;\n@@ -674,7 +674,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         res.map(|res| (self.get_macro(res).map(|macro_data| macro_data.ext), res))\n     }\n \n-    pub(crate) fn finalize_macro_resolutions(&mut self) {\n+    pub(crate) fn finalize_macro_resolutions(&mut self, krate: &Crate) {\n         let check_consistency = |this: &mut Self,\n                                  path: &[Segment],\n                                  span,\n@@ -795,7 +795,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     let expected = kind.descr_expected();\n                     let msg = format!(\"cannot find {} `{}` in this scope\", expected, ident);\n                     let mut err = self.tcx.sess.struct_span_err(ident.span, msg);\n-                    self.unresolved_macro_suggestions(&mut err, kind, &parent_scope, ident);\n+                    self.unresolved_macro_suggestions(&mut err, kind, &parent_scope, ident, krate);\n                     err.emit();\n                 }\n             }"}, {"sha": "5d552e4c408461402c916a6215df3c6cf4941072", "filename": "tests/ui/empty/empty-macro-use.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/tests%2Fui%2Fempty%2Fempty-macro-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/tests%2Fui%2Fempty%2Fempty-macro-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty%2Fempty-macro-use.stderr?ref=d0ee1908ed791d3e91d2ad74ba502eaa203cff6d", "patch": "@@ -4,8 +4,10 @@ error: cannot find macro `macro_two` in this scope\n LL |     macro_two!();\n    |     ^^^^^^^^^\n    |\n-   = help: consider importing this macro:\n-           two_macros::macro_two\n+help: consider importing this macro\n+   |\n+LL + use two_macros::macro_two;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "b22f3e75b6f4f27a65a8c28e94e770d3894b040a", "filename": "tests/ui/hygiene/no_implicit_prelude-2018.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/tests%2Fui%2Fhygiene%2Fno_implicit_prelude-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/tests%2Fui%2Fhygiene%2Fno_implicit_prelude-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fno_implicit_prelude-2018.stderr?ref=d0ee1908ed791d3e91d2ad74ba502eaa203cff6d", "patch": "@@ -4,8 +4,10 @@ error: cannot find macro `print` in this scope\n LL |         print!();\n    |         ^^^^^\n    |\n-   = help: consider importing this macro:\n-           std::print\n+help: consider importing this macro\n+   |\n+LL +     use std::print;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "ec55a262509aa6d36a304fd6838f33c79f8f0095", "filename": "tests/ui/macros/issue-88228.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/tests%2Fui%2Fmacros%2Fissue-88228.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/tests%2Fui%2Fmacros%2Fissue-88228.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fissue-88228.rs?ref=d0ee1908ed791d3e91d2ad74ba502eaa203cff6d", "patch": "@@ -1,14 +1,14 @@\n // compile-flags: -Z deduplicate-diagnostics=yes\n // edition:2018\n \n-mod hey {\n+mod hey { //~ HELP consider importing this derive macro\n+    //~^ HELP consider importing this macro\n     pub use Copy as Bla;\n     pub use std::println as bla;\n }\n \n #[derive(Bla)]\n //~^ ERROR cannot find derive macro `Bla`\n-//~| HELP consider importing this derive macro\n struct A;\n \n #[derive(println)]\n@@ -19,5 +19,4 @@ struct B;\n fn main() {\n     bla!();\n     //~^ ERROR cannot find macro `bla`\n-    //~| HELP consider importing this macro\n }"}, {"sha": "1dbe2b77be2d9449ba14951587b2b185175abb63", "filename": "tests/ui/macros/issue-88228.stderr", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/tests%2Fui%2Fmacros%2Fissue-88228.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/tests%2Fui%2Fmacros%2Fissue-88228.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fissue-88228.stderr?ref=d0ee1908ed791d3e91d2ad74ba502eaa203cff6d", "patch": "@@ -4,8 +4,10 @@ error: cannot find macro `bla` in this scope\n LL |     bla!();\n    |     ^^^\n    |\n-   = help: consider importing this macro:\n-           crate::hey::bla\n+help: consider importing this macro\n+   |\n+LL + use crate::hey::bla;\n+   |\n \n error: cannot find derive macro `println` in this scope\n   --> $DIR/issue-88228.rs:14:10\n@@ -16,13 +18,15 @@ LL | #[derive(println)]\n    = note: `println` is in scope, but it is a function-like macro\n \n error: cannot find derive macro `Bla` in this scope\n-  --> $DIR/issue-88228.rs:9:10\n+  --> $DIR/issue-88228.rs:10:10\n    |\n LL | #[derive(Bla)]\n    |          ^^^\n    |\n-   = help: consider importing this derive macro:\n-           crate::hey::Bla\n+help: consider importing this derive macro\n+   |\n+LL + use crate::hey::Bla;\n+   |\n \n error: aborting due to 3 previous errors\n "}, {"sha": "36339542ac61f167e08462abcf4c875f2e3a7674", "filename": "tests/ui/macros/macro-use-wrong-name.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/tests%2Fui%2Fmacros%2Fmacro-use-wrong-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/tests%2Fui%2Fmacros%2Fmacro-use-wrong-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmacro-use-wrong-name.stderr?ref=d0ee1908ed791d3e91d2ad74ba502eaa203cff6d", "patch": "@@ -2,15 +2,21 @@ error: cannot find macro `macro_two` in this scope\n   --> $DIR/macro-use-wrong-name.rs:7:5\n    |\n LL |     macro_two!();\n-   |     ^^^^^^^^^ help: a macro with a similar name exists: `macro_one`\n+   |     ^^^^^^^^^\n    |\n   ::: $DIR/auxiliary/two_macros.rs:2:1\n    |\n LL | macro_rules! macro_one { () => (\"one\") }\n    | ---------------------- similarly named macro `macro_one` defined here\n    |\n-   = help: consider importing this macro:\n-           two_macros::macro_two\n+help: a macro with a similar name exists\n+   |\n+LL |     macro_one!();\n+   |     ~~~~~~~~~\n+help: consider importing this macro\n+   |\n+LL + use two_macros::macro_two;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "e1d80f52daddc4548177346df8794c63ab09ec37", "filename": "tests/ui/missing/missing-macro-use.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/tests%2Fui%2Fmissing%2Fmissing-macro-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/tests%2Fui%2Fmissing%2Fmissing-macro-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing%2Fmissing-macro-use.stderr?ref=d0ee1908ed791d3e91d2ad74ba502eaa203cff6d", "patch": "@@ -4,8 +4,10 @@ error: cannot find macro `macro_two` in this scope\n LL |     macro_two!();\n    |     ^^^^^^^^^\n    |\n-   = help: consider importing this macro:\n-           two_macros::macro_two\n+help: consider importing this macro\n+   |\n+LL + use two_macros::macro_two;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "7e7870b295127ca973c44f353fc929e84897b952", "filename": "tests/ui/proc-macro/derive-helper-shadowing.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/tests%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0ee1908ed791d3e91d2ad74ba502eaa203cff6d/tests%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr?ref=d0ee1908ed791d3e91d2ad74ba502eaa203cff6d", "patch": "@@ -16,9 +16,11 @@ error: cannot find attribute `empty_helper` in this scope\n LL |             #[derive(GenHelperUse)]\n    |                      ^^^^^^^^^^^^\n    |\n-   = help: consider importing this attribute macro:\n-           empty_helper\n    = note: this error originates in the derive macro `GenHelperUse` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider importing this attribute macro\n+   |\n+LL +             use empty_helper;\n+   |\n \n error: cannot find attribute `empty_helper` in this scope\n   --> $DIR/derive-helper-shadowing.rs:14:11\n@@ -29,9 +31,11 @@ LL |         #[empty_helper]\n LL |             gen_helper_use!();\n    |             ----------------- in this macro invocation\n    |\n-   = help: consider importing this attribute macro:\n-           crate::empty_helper\n    = note: this error originates in the macro `gen_helper_use` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider importing this attribute macro\n+   |\n+LL +             use crate::empty_helper;\n+   |\n \n error[E0659]: `empty_helper` is ambiguous\n   --> $DIR/derive-helper-shadowing.rs:26:13"}]}