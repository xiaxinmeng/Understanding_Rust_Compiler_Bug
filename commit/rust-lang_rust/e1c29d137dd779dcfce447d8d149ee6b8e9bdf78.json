{"sha": "e1c29d137dd779dcfce447d8d149ee6b8e9bdf78", "node_id": "C_kwDOAAsO6NoAKGUxYzI5ZDEzN2RkNzc5ZGNmY2U0NDdkOGQxNDllZTZiOGU5YmRmNzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-17T13:19:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-17T13:19:29Z"}, "message": "Auto merge of #112739 - matthiaskrgr:rollup-8cfggml, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #112352 (Fix documentation build on FreeBSD)\n - #112644 (Correct types in method descriptions of `NonZero*` types)\n - #112683 (fix ICE on specific malformed asm clobber_abi)\n - #112707 ([rustdoc] Fix invalid handling of \"going back in history\" when \"go to only search result\" setting is enabled)\n - #112719 (Replace fvdl with ffx, allow test without install)\n - #112728 (Add `<meta charset=\"utf-8\">` to `-Zdump-mir-spanview` output)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4b52c6fafae8b2815f2503d0d57efa0355d9bbf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b52c6fafae8b2815f2503d0d57efa0355d9bbf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78", "html_url": "https://github.com/rust-lang/rust/commit/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7513407ac8e673f536d34743fe393bd8b7c45441", "url": "https://api.github.com/repos/rust-lang/rust/commits/7513407ac8e673f536d34743fe393bd8b7c45441", "html_url": "https://github.com/rust-lang/rust/commit/7513407ac8e673f536d34743fe393bd8b7c45441"}, {"sha": "981a2a2c00cd3a8eade46dc198c47ca5f06b0105", "url": "https://api.github.com/repos/rust-lang/rust/commits/981a2a2c00cd3a8eade46dc198c47ca5f06b0105", "html_url": "https://github.com/rust-lang/rust/commit/981a2a2c00cd3a8eade46dc198c47ca5f06b0105"}], "stats": {"total": 642, "additions": 355, "deletions": 287}, "files": [{"sha": "9734fc2b36d9435d5b1df48f440aa9a59c516cf0", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=e1c29d137dd779dcfce447d8d149ee6b8e9bdf78", "patch": "@@ -379,16 +379,12 @@ fn parse_clobber_abi<'a>(p: &mut Parser<'a>, args: &mut AsmArgs) -> PResult<'a,\n     }\n \n     let mut new_abis = Vec::new();\n-    loop {\n+    while !p.eat(&token::CloseDelim(Delimiter::Parenthesis)) {\n         match p.parse_str_lit() {\n             Ok(str_lit) => {\n                 new_abis.push((str_lit.symbol_unescaped, str_lit.span));\n             }\n             Err(opt_lit) => {\n-                // If the non-string literal is a closing paren then it's the end of the list and is fine\n-                if p.eat(&token::CloseDelim(Delimiter::Parenthesis)) {\n-                    break;\n-                }\n                 let span = opt_lit.map_or(p.token.span, |lit| lit.span);\n                 let mut err =\n                     p.sess.span_diagnostic.struct_span_err(span, \"expected string literal\");"}, {"sha": "730c551576acd2359a43a731e778ed1a8cb0f3e4", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=e1c29d137dd779dcfce447d8d149ee6b8e9bdf78", "patch": "@@ -15,8 +15,9 @@ const ANNOTATION_LEFT_BRACKET: char = '\\u{298a}'; // Unicode `Z NOTATION RIGHT B\n const ANNOTATION_RIGHT_BRACKET: char = '\\u{2989}'; // Unicode `Z NOTATION LEFT BINDING BRACKET`\n const NEW_LINE_SPAN: &str = \"</span>\\n<span class=\\\"line\\\">\";\n const HEADER: &str = r#\"<!DOCTYPE html>\n-<html>\n-<head>\"#;\n+<html lang=\"en\">\n+<head>\n+<meta charset=\"utf-8\">\"#;\n const START_BODY: &str = r#\"</head>\n <body>\"#;\n const FOOTER: &str = r#\"</body>"}, {"sha": "5939dedbd1db0db35a1b7e5aaace53903cae3dc1", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=e1c29d137dd779dcfce447d8d149ee6b8e9bdf78", "patch": "@@ -348,7 +348,7 @@ macro_rules! nonzero_unsigned_operations {\n                 }\n \n                 /// Adds an unsigned integer to a non-zero value.\n-                #[doc = concat!(\"Return [`\", stringify!($Int), \"::MAX`] on overflow.\")]\n+                #[doc = concat!(\"Return [`\", stringify!($Ty), \"::MAX`] on overflow.\")]\n                 ///\n                 /// # Examples\n                 ///\n@@ -579,7 +579,7 @@ macro_rules! nonzero_signed_operations {\n \n                 /// Checked absolute value.\n                 /// Checks for overflow and returns [`None`] if\n-                #[doc = concat!(\"`self == \", stringify!($Int), \"::MIN`.\")]\n+                #[doc = concat!(\"`self == \", stringify!($Ty), \"::MIN`.\")]\n                 /// The result cannot be zero.\n                 ///\n                 /// # Example\n@@ -800,7 +800,8 @@ macro_rules! nonzero_signed_operations {\n                     self.get().is_negative()\n                 }\n \n-                /// Checked negation. Computes `-self`, returning `None` if `self == i32::MIN`.\n+                /// Checked negation. Computes `-self`,\n+                #[doc = concat!(\"returning `None` if `self == \", stringify!($Ty), \"::MIN`.\")]\n                 ///\n                 /// # Example\n                 ///\n@@ -859,8 +860,10 @@ macro_rules! nonzero_signed_operations {\n                     ((unsafe { $Ty::new_unchecked(result) }), overflow)\n                 }\n \n-                /// Saturating negation. Computes `-self`, returning `MAX` if\n-                /// `self == i32::MIN` instead of overflowing.\n+                /// Saturating negation. Computes `-self`,\n+                #[doc = concat!(\"returning [`\", stringify!($Ty), \"::MAX`]\")]\n+                #[doc = concat!(\"if `self == \", stringify!($Ty), \"::MIN`\")]\n+                /// instead of overflowing.\n                 ///\n                 /// # Example\n                 ///\n@@ -993,7 +996,7 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 }\n \n                 /// Multiplies two non-zero integers together.\n-                #[doc = concat!(\"Return [`\", stringify!($Int), \"::MAX`] on overflow.\")]\n+                #[doc = concat!(\"Return [`\", stringify!($Ty), \"::MAX`] on overflow.\")]\n                 ///\n                 /// # Examples\n                 ///\n@@ -1102,11 +1105,11 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 #[doc = sign_dependent_expr!{\n                     $signedness ?\n                     if signed {\n-                        concat!(\"Return [`\", stringify!($Int), \"::MIN`] \",\n-                                    \"or [`\", stringify!($Int), \"::MAX`] on overflow.\")\n+                        concat!(\"Return [`\", stringify!($Ty), \"::MIN`] \",\n+                                    \"or [`\", stringify!($Ty), \"::MAX`] on overflow.\")\n                     }\n                     if unsigned {\n-                        concat!(\"Return [`\", stringify!($Int), \"::MAX`] on overflow.\")\n+                        concat!(\"Return [`\", stringify!($Ty), \"::MAX`] on overflow.\")\n                     }\n                 }]\n                 ///"}, {"sha": "218536689fdbee08b4e6d643dd6176dabf5535cd", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=e1c29d137dd779dcfce447d8d149ee6b8e9bdf78", "patch": "@@ -11,7 +11,13 @@ use crate::slice::from_raw_parts;\n use crate::sys::net::Socket;\n \n // FIXME(#43348): Make libc adapt #[doc(cfg(...))] so we don't need these fake definitions here?\n-#[cfg(all(doc, not(target_os = \"linux\"), not(target_os = \"android\"), not(target_os = \"netbsd\")))]\n+#[cfg(all(\n+    doc,\n+    not(target_os = \"linux\"),\n+    not(target_os = \"android\"),\n+    not(target_os = \"netbsd\"),\n+    not(target_os = \"freebsd\")\n+))]\n #[allow(non_camel_case_types)]\n mod libc {\n     pub use libc::c_int;"}, {"sha": "73cf3de6a46195f161be77871f450ddbbabc1102", "filename": "src/ci/docker/scripts/fuchsia-test-runner.py", "status": "modified", "additions": 92, "deletions": 145, "changes": 237, "blob_url": "https://github.com/rust-lang/rust/blob/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "raw_url": "https://github.com/rust-lang/rust/raw/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py?ref=e1c29d137dd779dcfce447d8d149ee6b8e9bdf78", "patch": "@@ -25,13 +25,9 @@\n \n @dataclass\n class TestEnvironment:\n-    rust_dir: str\n+    rust_build_dir: str\n     sdk_dir: str\n     target: str\n-    package_server_pid: Optional[int] = None\n-    emu_addr: Optional[str] = None\n-    libstd_name: Optional[str] = None\n-    libtest_name: Optional[str] = None\n     verbose: bool = False\n \n     @staticmethod\n@@ -57,7 +53,7 @@ def env_file_path(cls):\n     @classmethod\n     def from_args(cls, args):\n         return cls(\n-            os.path.abspath(args.rust),\n+            os.path.abspath(args.rust_build),\n             os.path.abspath(args.sdk),\n             args.target,\n             verbose=args.verbose,\n@@ -68,32 +64,16 @@ def read_from_file(cls):\n         with open(cls.env_file_path(), encoding=\"utf-8\") as f:\n             test_env = json.loads(f.read())\n             return cls(\n-                test_env[\"rust_dir\"],\n+                test_env[\"rust_build_dir\"],\n                 test_env[\"sdk_dir\"],\n                 test_env[\"target\"],\n-                libstd_name=test_env[\"libstd_name\"],\n-                libtest_name=test_env[\"libtest_name\"],\n-                emu_addr=test_env[\"emu_addr\"],\n-                package_server_pid=test_env[\"package_server_pid\"],\n                 verbose=test_env[\"verbose\"],\n             )\n \n     def write_to_file(self):\n         with open(self.env_file_path(), \"w\", encoding=\"utf-8\") as f:\n             f.write(json.dumps(self.__dict__))\n \n-    def ssh_dir(self):\n-        return os.path.join(self.tmp_dir(), \"ssh\")\n-\n-    def ssh_keyfile_path(self):\n-        return os.path.join(self.ssh_dir(), \"fuchsia_ed25519\")\n-\n-    def ssh_authfile_path(self):\n-        return os.path.join(self.ssh_dir(), \"fuchsia_authorized_keys\")\n-\n-    def vdl_output_path(self):\n-        return os.path.join(self.tmp_dir(), \"vdl_output\")\n-\n     def package_server_log_path(self):\n         return os.path.join(self.tmp_dir(), \"package_server_log\")\n \n@@ -113,7 +93,9 @@ def repo_dir(self):\n \n     def libs_dir(self):\n         return os.path.join(\n-            self.rust_dir,\n+            self.rust_build_dir,\n+            \"host\",\n+            \"stage2\",\n             \"lib\",\n         )\n \n@@ -212,21 +194,19 @@ def start_ffx_isolation(self):\n         # Set configs\n         configs = {\n             \"log.enabled\": \"true\",\n-            \"ssh.pub\": self.ssh_authfile_path(),\n-            \"ssh.priv\": self.ssh_keyfile_path(),\n             \"test.is_isolated\": \"true\",\n             \"test.experimental_structured_output\": \"true\",\n         }\n         for key, value in configs.items():\n             subprocess.check_call(\n                 [\n-                    self.tool_path(\"ffx\"),\n+                    ffx_path,\n                     \"config\",\n                     \"set\",\n                     key,\n                     value,\n                 ],\n-                env=self.ffx_cmd_env(),\n+                env=ffx_env,\n                 stdout=self.subprocess_output(),\n                 stderr=self.subprocess_output(),\n             )\n@@ -248,6 +228,7 @@ def stop_ffx_isolation(self):\n                 self.tool_path(\"ffx\"),\n                 \"daemon\",\n                 \"stop\",\n+                \"-w\",\n             ],\n             env=self.ffx_cmd_env(),\n             stdout=self.subprocess_output(),\n@@ -275,87 +256,62 @@ def start(self):\n         elif len(os.listdir(self.tmp_dir())) != 0:\n             raise Exception(f\"Temp directory is not clean (in {self.tmp_dir()})\")\n \n-        os.mkdir(self.ssh_dir())\n         os.mkdir(self.output_dir())\n \n-        # Find libstd and libtest\n-        libstd_paths = glob.glob(os.path.join(self.rustlibs_dir(), \"libstd-*.so\"))\n-        libtest_paths = glob.glob(os.path.join(self.rustlibs_dir(), \"libtest-*.so\"))\n-\n-        if not libstd_paths:\n-            raise Exception(f\"Failed to locate libstd (in {self.rustlibs_dir()})\")\n-\n-        if not libtest_paths:\n-            raise Exception(f\"Failed to locate libtest (in {self.rustlibs_dir()})\")\n+        ffx_path = self.tool_path(\"ffx\")\n+        ffx_env = self.ffx_cmd_env()\n \n-        self.libstd_name = os.path.basename(libstd_paths[0])\n-        self.libtest_name = os.path.basename(libtest_paths[0])\n+        # Start ffx isolation\n+        self.log_info(\"Starting ffx isolation...\")\n+        self.start_ffx_isolation()\n \n-        # Generate SSH keys for the emulator to use\n-        self.log_info(\"Generating SSH keys...\")\n+        # Stop any running emulators (there shouldn't be any)\n         subprocess.check_call(\n             [\n-                \"ssh-keygen\",\n-                \"-N\",\n-                \"\",\n-                \"-t\",\n-                \"ed25519\",\n-                \"-f\",\n-                self.ssh_keyfile_path(),\n-                \"-C\",\n-                \"Generated by fuchsia-test-runner.py\",\n+                ffx_path,\n+                \"emu\",\n+                \"stop\",\n+                \"--all\",\n             ],\n+            env=ffx_env,\n             stdout=self.subprocess_output(),\n             stderr=self.subprocess_output(),\n         )\n-        authfile_contents = subprocess.check_output(\n+\n+        # Start emulator\n+        self.log_info(\"Starting emulator...\")\n+        product_bundle = \"terminal.qemu-\" + self.triple_to_arch(self.target)\n+        subprocess.check_call(\n             [\n-                \"ssh-keygen\",\n-                \"-y\",\n-                \"-f\",\n-                self.ssh_keyfile_path(),\n+                ffx_path,\n+                \"product-bundle\",\n+                \"get\",\n+                product_bundle,\n             ],\n+            env=ffx_env,\n+            stdout=self.subprocess_output(),\n             stderr=self.subprocess_output(),\n         )\n-        with open(self.ssh_authfile_path(), \"wb\") as authfile:\n-            authfile.write(authfile_contents)\n-\n-        # Start ffx isolation\n-        self.log_info(\"Starting ffx isolation...\")\n-        self.start_ffx_isolation()\n-\n-        # Start emulator (this will generate the vdl output)\n-        self.log_info(\"Starting emulator...\")\n+        # FIXME: condition --accel hyper on target arch matching host arch\n         subprocess.check_call(\n             [\n-                self.tool_path(\"fvdl\"),\n-                \"--sdk\",\n+                ffx_path,\n+                \"emu\",\n                 \"start\",\n-                \"--tuntap\",\n+                product_bundle,\n                 \"--headless\",\n-                \"--nointeractive\",\n-                \"--ssh\",\n-                self.ssh_dir(),\n-                \"--vdl-output\",\n-                self.vdl_output_path(),\n-                \"--emulator-log\",\n+                \"--log\",\n                 self.emulator_log_path(),\n-                \"--image-name\",\n-                \"qemu-\" + self.triple_to_arch(self.target),\n+                \"--net\",\n+                \"tap\",\n+                \"--accel\",\n+                \"hyper\",\n             ],\n+            env=ffx_env,\n             stdout=self.subprocess_output(),\n             stderr=self.subprocess_output(),\n         )\n \n-        # Parse vdl output for relevant information\n-        with open(self.vdl_output_path(), encoding=\"utf-8\") as f:\n-            vdl_content = f.read()\n-            matches = re.search(\n-                r'network_address:\\s+\"\\[([0-9a-f]{1,4}:(:[0-9a-f]{1,4}){4}%qemu)\\]\"',\n-                vdl_content,\n-            )\n-            self.emu_addr = matches.group(1)\n-\n         # Create new package repo\n         self.log_info(\"Creating package repo...\")\n         subprocess.check_call(\n@@ -369,55 +325,40 @@ def start(self):\n             stderr=self.subprocess_output(),\n         )\n \n-        # Start package server\n-        self.log_info(\"Starting package server...\")\n-        with open(\n-            self.package_server_log_path(), \"w\", encoding=\"utf-8\"\n-        ) as package_server_log:\n-            # We want this to be a long-running process that persists after the script finishes\n-            # pylint: disable=consider-using-with\n-            self.package_server_pid = subprocess.Popen(\n-                [\n-                    self.tool_path(\"pm\"),\n-                    \"serve\",\n-                    \"-vt\",\n-                    \"-repo\",\n-                    self.repo_dir(),\n-                    \"-l\",\n-                    \":8084\",\n-                ],\n-                stdout=package_server_log,\n-                stderr=package_server_log,\n-            ).pid\n-\n-        # Register package server with emulator\n-        self.log_info(\"Registering package server...\")\n-        ssh_client = subprocess.check_output(\n+        # Add repo\n+        subprocess.check_call(\n             [\n-                \"ssh\",\n-                \"-i\",\n-                self.ssh_keyfile_path(),\n-                \"-o\",\n-                \"StrictHostKeyChecking=accept-new\",\n-                self.emu_addr,\n-                \"-f\",\n-                \"echo $SSH_CLIENT\",\n+                ffx_path,\n+                \"repository\",\n+                \"add-from-pm\",\n+                self.repo_dir(),\n+                \"--repository\",\n+                self.TEST_REPO_NAME,\n             ],\n-            text=True,\n+            env=ffx_env,\n+            stdout=self.subprocess_output(),\n+            stderr=self.subprocess_output(),\n         )\n-        repo_addr = ssh_client.split()[0].replace(\"%\", \"%25\")\n-        repo_url = f\"http://[{repo_addr}]:8084/config.json\"\n+\n+        # Start repository server\n+        subprocess.check_call(\n+            [ffx_path, \"repository\", \"server\", \"start\", \"--address\", \"[::]:0\"],\n+            env=ffx_env,\n+            stdout=self.subprocess_output(),\n+            stderr=self.subprocess_output(),\n+        )\n+\n+        # Register with newly-started emulator\n         subprocess.check_call(\n             [\n-                \"ssh\",\n-                \"-i\",\n-                self.ssh_keyfile_path(),\n-                \"-o\",\n-                \"StrictHostKeyChecking=accept-new\",\n-                self.emu_addr,\n-                \"-f\",\n-                f\"pkgctl repo add url -f 1 -n {self.TEST_REPO_NAME} {repo_url}\",\n+                ffx_path,\n+                \"target\",\n+                \"repository\",\n+                \"register\",\n+                \"--repository\",\n+                self.TEST_REPO_NAME,\n             ],\n+            env=ffx_env,\n             stdout=self.subprocess_output(),\n             stderr=self.subprocess_output(),\n         )\n@@ -471,8 +412,8 @@ def start(self):\n     meta/package={package_dir}/meta/package\n     meta/{package_name}.cm={package_dir}/meta/{package_name}.cm\n     bin/{exe_name}={bin_path}\n-    lib/{libstd_name}={rust_dir}/lib/rustlib/{rustlib_dir}/lib/{libstd_name}\n-    lib/{libtest_name}={rust_dir}/lib/rustlib/{rustlib_dir}/lib/{libtest_name}\n+    lib/{libstd_name}={libstd_path}\n+    lib/{libtest_name}={libtest_path}\n     lib/ld.so.1={sdk_dir}/arch/{target_arch}/sysroot/dist/lib/ld.so.1\n     lib/libfdio.so={sdk_dir}/arch/{target_arch}/dist/libfdio.so\n     \"\"\"\n@@ -502,6 +443,16 @@ def run(self, args):\n \n         bin_path = os.path.abspath(args.bin_path)\n \n+        # Find libstd and libtest\n+        libstd_paths = glob.glob(os.path.join(self.rustlibs_dir(), \"libstd-*.so\"))\n+        libtest_paths = glob.glob(os.path.join(self.rustlibs_dir(), \"libtest-*.so\"))\n+\n+        if not libstd_paths:\n+            raise Exception(f\"Failed to locate libstd (in {self.rustlibs_dir()})\")\n+\n+        if not libtest_paths:\n+            raise Exception(f\"Failed to locate libtest (in {self.rustlibs_dir()})\")\n+\n         # Build a unique, deterministic name for the test using the name of the\n         # binary and the last 6 hex digits of the hash of the full path\n         def path_checksum(path):\n@@ -604,11 +555,12 @@ def log(msg):\n                         exe_name=exe_name,\n                         package_dir=package_dir,\n                         package_name=package_name,\n-                        rust_dir=self.rust_dir,\n-                        rustlib_dir=self.target,\n+                        target=self.target,\n                         sdk_dir=self.sdk_dir,\n-                        libstd_name=self.libstd_name,\n-                        libtest_name=self.libtest_name,\n+                        libstd_name=os.path.basename(libstd_paths[0]),\n+                        libtest_name=os.path.basename(libtest_paths[0]),\n+                        libstd_path=libstd_paths[0],\n+                        libtest_path=libtest_paths[0],\n                         target_arch=self.triple_to_arch(self.target),\n                     )\n                 )\n@@ -779,20 +731,15 @@ def stop(self):\n         else:\n             self.log_debug(\"No ffx daemon log found\")\n \n-        # Stop package server\n-        self.log_info(\"Stopping package server...\")\n-        os.kill(self.package_server_pid, signal.SIGTERM)\n-\n         # Shut down the emulator\n         self.log_info(\"Stopping emulator...\")\n         subprocess.check_call(\n             [\n-                self.tool_path(\"fvdl\"),\n-                \"--sdk\",\n-                \"kill\",\n-                \"--launched-proto\",\n-                self.vdl_output_path(),\n+                self.tool_path(\"ffx\"),\n+                \"emu\",\n+                \"stop\",\n             ],\n+            env=self.ffx_cmd_env(),\n             stdout=self.subprocess_output(),\n             stderr=self.subprocess_output(),\n         )\n@@ -969,8 +916,8 @@ def print_help(args):\n         \"start\", help=\"initializes the testing environment\"\n     )\n     start_parser.add_argument(\n-        \"--rust\",\n-        help=\"the directory of the installed Rust compiler for Fuchsia\",\n+        \"--rust-build\",\n+        help=\"the current compiler build directory (`$RUST_SRC/build` by default)\",\n         required=True,\n     )\n     start_parser.add_argument("}, {"sha": "f7cce35b1232bc9939fab55fd23801190ac2ddcf", "filename": "src/doc/rustc/src/platform-support/fuchsia.md", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md?ref=e1c29d137dd779dcfce447d8d149ee6b8e9bdf78", "patch": "@@ -681,12 +681,9 @@ local Rust source checkout:\n cd ${RUST_SRC_PATH}\n ```\n \n-To run the Rust test suite on an emulated Fuchsia device, you must install the\n-Rust compiler locally. See \"[Targeting Fuchsia with a compiler built from source](#targeting-fuchsia-with-a-compiler-built-from-source)\"\n-for the steps to build locally.\n-\n-You'll also need to download a copy of the Fuchsia SDK. The current minimum\n-supported SDK version is [10.20221207.2.89][minimum_supported_sdk_version].\n+To run the Rust test suite on an emulated Fuchsia device, you'll also need to\n+download a copy of the Fuchsia SDK. The current minimum supported SDK version is\n+[10.20221207.2.89][minimum_supported_sdk_version].\n \n [minimum_supported_sdk_version]: https://chrome-infra-packages.appspot.com/p/fuchsia/sdk/core/linux-amd64/+/version:10.20221207.2.89\n \n@@ -695,13 +692,13 @@ Fuchsia's test runner interacts with the Fuchsia emulator and is located at\n test environment with:\n \n ```sh\n-src/ci/docker/scripts/fuchsia-test-runner.py start\n-    --rust ${RUST_SRC_PATH}/install\n-    --sdk ${SDK_PATH}\n-    --target {x86_64-unknown-fuchsia|aarch64-unknown-fuchsia}\n+src/ci/docker/scripts/fuchsia-test-runner.py start                            \\\n+    --rust-build ${RUST_SRC_PATH}/build                                       \\\n+    --sdk ${SDK_PATH}                                                         \\\n+    --target {x86_64-unknown-fuchsia|aarch64-unknown-fuchsia}                 \\\n ```\n \n-Where `${RUST_SRC_PATH}/install` is the `prefix` set in `config.toml` and\n+Where `${RUST_SRC_PATH}/build` is the `build-dir` set in `config.toml` and\n `${SDK_PATH}` is the path to the downloaded and unzipped SDK.\n \n Once our environment is started, we can run our tests using `x.py` as usual. The"}, {"sha": "f5296abaee661114ec2b0d27c5de00eb52cd8f28", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=e1c29d137dd779dcfce447d8d149ee6b8e9bdf78", "patch": "@@ -277,14 +277,18 @@ function preLoadCss(cssUrl) {\n             searchState.mouseMovedAfterSearch = false;\n             document.title = searchState.title;\n         },\n-        hideResults: () => {\n-            switchDisplayedElement(null);\n+        removeQueryParameters: () => {\n+            // We change the document title.\n             document.title = searchState.titleBeforeSearch;\n-            // We also remove the query parameter from the URL.\n             if (browserSupportsHistoryApi()) {\n                 history.replaceState(null, \"\", getNakedUrl() + window.location.hash);\n             }\n         },\n+        hideResults: () => {\n+            switchDisplayedElement(null);\n+            // We also remove the query parameter from the URL.\n+            searchState.removeQueryParameters();\n+        },\n         getQueryStringParams: () => {\n             const params = {};\n             window.location.search.substring(1).split(\"&\")."}, {"sha": "3059dac820723e9813c2e957f73f79c0a90fb7a7", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=e1c29d137dd779dcfce447d8d149ee6b8e9bdf78", "patch": "@@ -2071,6 +2071,20 @@ function initSearch(rawSearchIndex) {\n         if (go_to_first || (results.others.length === 1\n             && getSettingValue(\"go-to-only-result\") === \"true\")\n         ) {\n+            // Needed to force re-execution of JS when coming back to a page. Let's take this\n+            // scenario as example:\n+            //\n+            // 1. You have the \"Directly go to item in search if there is only one result\" option\n+            //    enabled.\n+            // 2. You make a search which results only one result, leading you automatically to\n+            //    this result.\n+            // 3. You go back to previous page.\n+            //\n+            // Now, without the call below, the JS will not be re-executed and the previous state\n+            // will be used, starting search again since the search input is not empty, leading you\n+            // back to the previous page again.\n+            window.onunload = () => {};\n+            searchState.removeQueryParameters();\n             const elem = document.createElement(\"a\");\n             elem.href = results.others[0].href;\n             removeClass(elem, \"active\");\n@@ -2185,6 +2199,18 @@ function initSearch(rawSearchIndex) {\n         printTab(currentTab);\n     }\n \n+    function updateSearchHistory(url) {\n+        if (!browserSupportsHistoryApi()) {\n+            return;\n+        }\n+        const params = searchState.getQueryStringParams();\n+        if (!history.state && !params.search) {\n+            history.pushState(null, \"\", url);\n+        } else {\n+            history.replaceState(null, \"\", url);\n+        }\n+    }\n+\n     /**\n      * Perform a search based on the current state of the search input element\n      * and display the results.\n@@ -2195,7 +2221,6 @@ function initSearch(rawSearchIndex) {\n         if (e) {\n             e.preventDefault();\n         }\n-\n         const query = parseQuery(searchState.input.value.trim());\n         let filterCrates = getFilterCrates();\n \n@@ -2221,15 +2246,7 @@ function initSearch(rawSearchIndex) {\n \n         // Because searching is incremental by character, only the most\n         // recent search query is added to the browser history.\n-        if (browserSupportsHistoryApi()) {\n-            const newURL = buildUrl(query.original, filterCrates);\n-\n-            if (!history.state && !params.search) {\n-                history.pushState(null, \"\", newURL);\n-            } else {\n-                history.replaceState(null, \"\", newURL);\n-            }\n-        }\n+        updateSearchHistory(buildUrl(query.original, filterCrates));\n \n         showResults(\n             execQuery(query, searchWords, filterCrates, window.currentCrate),\n@@ -2695,13 +2712,8 @@ function initSearch(rawSearchIndex) {\n     function updateCrate(ev) {\n         if (ev.target.value === \"all crates\") {\n             // If we don't remove it from the URL, it'll be picked up again by the search.\n-            const params = searchState.getQueryStringParams();\n             const query = searchState.input.value.trim();\n-            if (!history.state && !params.search) {\n-                history.pushState(null, \"\", buildUrl(query, null));\n-            } else {\n-                history.replaceState(null, \"\", buildUrl(query, null));\n-            }\n+            updateSearchHistory(buildUrl(query, null));\n         }\n         // In case you \"cut\" the entry from the search input, then change the crate filter\n         // before paste back the previous search, you get the old search results without"}, {"sha": "56f4e4f93706e1246db20321c7d720b200c7f733", "filename": "tests/mir-opt/spanview_block.main.built.after.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/tests%2Fmir-opt%2Fspanview_block.main.built.after.html", "raw_url": "https://github.com/rust-lang/rust/raw/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/tests%2Fmir-opt%2Fspanview_block.main.built.after.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fspanview_block.main.built.after.html?ref=e1c29d137dd779dcfce447d8d149ee6b8e9bdf78", "patch": "@@ -1,6 +1,7 @@\n <!DOCTYPE html>\n-<html>\n+<html lang=\"en\">\n <head>\n+<meta charset=\"utf-8\">\n <title>spanview_block.main.built.after</title>\n <style>\n     .line {"}, {"sha": "91af08d80a8114029cf6b4d4bbe0d059b0394291", "filename": "tests/mir-opt/spanview_statement.main.built.after.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/tests%2Fmir-opt%2Fspanview_statement.main.built.after.html", "raw_url": "https://github.com/rust-lang/rust/raw/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/tests%2Fmir-opt%2Fspanview_statement.main.built.after.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fspanview_statement.main.built.after.html?ref=e1c29d137dd779dcfce447d8d149ee6b8e9bdf78", "patch": "@@ -1,6 +1,7 @@\n <!DOCTYPE html>\n-<html>\n+<html lang=\"en\">\n <head>\n+<meta charset=\"utf-8\">\n <title>spanview_statement.main.built.after</title>\n <style>\n     .line {"}, {"sha": "1f42faedd1e6dc979a6c7057f1b059f4c82e80f4", "filename": "tests/mir-opt/spanview_terminator.main.built.after.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/tests%2Fmir-opt%2Fspanview_terminator.main.built.after.html", "raw_url": "https://github.com/rust-lang/rust/raw/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/tests%2Fmir-opt%2Fspanview_terminator.main.built.after.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fspanview_terminator.main.built.after.html?ref=e1c29d137dd779dcfce447d8d149ee6b8e9bdf78", "patch": "@@ -1,6 +1,7 @@\n <!DOCTYPE html>\n-<html>\n+<html lang=\"en\">\n <head>\n+<meta charset=\"utf-8\">\n <title>spanview_terminator.main.built.after</title>\n <style>\n     .line {"}, {"sha": "45e0b349051eea721963b00906d3b23814fe3e39", "filename": "tests/rustdoc-gui/setting-go-to-only-result.goml", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/tests%2Frustdoc-gui%2Fsetting-go-to-only-result.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/tests%2Frustdoc-gui%2Fsetting-go-to-only-result.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsetting-go-to-only-result.goml?ref=e1c29d137dd779dcfce447d8d149ee6b8e9bdf78", "patch": "@@ -34,7 +34,14 @@ go-to: \"file://\" + |DOC_PATH| + \"/lib2/index.html\"\n // We enter it into the search.\n write: (\".search-input\", \"HasALongTraitWithParams\")\n wait-for-document-property: {\"title\": \"HasALongTraitWithParams in lib2 - Rust\"}\n-assert-document-property: ({\"URL\": \"/lib2/struct.HasALongTraitWithParams.html\"}, ENDS_WITH)\n+assert-window-property: ({\"location\": \"/lib2/struct.HasALongTraitWithParams.html\"}, ENDS_WITH)\n+\n+// Regression test for <https://github.com/rust-lang/rust/issues/112676>.\n+// If \"go-to-only-result\" is enabled and you go back to history, it should not lead you back to the\n+// page result again automatically.\n+history-go-back:\n+wait-for-document-property: {\"title\": \"lib2 - Rust\"}\n+assert-window-property: ({\"location\": \"/lib2/index.html\"}, ENDS_WITH)\n \n // We try again to see if it goes to the only result\n go-to: \"file://\" + |DOC_PATH| + \"/lib2/index.html?search=HasALongTraitWithParams\""}, {"sha": "9e002b1550f3417dd2509802d561e2181b74872b", "filename": "tests/ui/asm/parse-error.rs", "status": "renamed", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/tests%2Fui%2Fasm%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/tests%2Fui%2Fasm%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm%2Fparse-error.rs?ref=e1c29d137dd779dcfce447d8d149ee6b8e9bdf78", "patch": "@@ -1,4 +1,4 @@\n-// only-x86_64\n+// needs-asm-support\n \n #![feature(asm_const)]\n \n@@ -38,6 +38,9 @@ fn main() {\n         //~^ ERROR expected one of\n         asm!(\"{}\", options(), const foo);\n         //~^ ERROR attempt to use a non-constant value in a constant\n+\n+        // test that asm!'s clobber_abi doesn't accept non-string literals\n+        // see also https://github.com/rust-lang/rust/issues/112635\n         asm!(\"\", clobber_abi());\n         //~^ ERROR at least one abi must be provided\n         asm!(\"\", clobber_abi(foo));\n@@ -46,6 +49,25 @@ fn main() {\n         //~^ ERROR expected one of `)` or `,`, found `foo`\n         asm!(\"\", clobber_abi(\"C\", foo));\n         //~^ ERROR expected string literal\n+        asm!(\"\", clobber_abi(1));\n+        //~^ ERROR expected string literal\n+        asm!(\"\", clobber_abi(()));\n+        //~^ ERROR expected string literal\n+        asm!(\"\", clobber_abi(uwu));\n+        //~^ ERROR expected string literal\n+        asm!(\"\", clobber_abi({}));\n+        //~^ ERROR expected string literal\n+        asm!(\"\", clobber_abi(loop {}));\n+        //~^ ERROR expected string literal\n+        asm!(\"\", clobber_abi(if));\n+        //~^ ERROR expected string literal\n+        asm!(\"\", clobber_abi(do));\n+        //~^ ERROR expected string literal\n+        asm!(\"\", clobber_abi(<));\n+        //~^ ERROR expected string literal\n+        asm!(\"\", clobber_abi(.));\n+        //~^ ERROR expected string literal\n+\n         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n         //~^ ERROR attempt to use a non-constant value in a constant\n         asm!(\"\", options(), clobber_abi(\"C\"));\n@@ -56,15 +78,7 @@ fn main() {\n         //~^^ ERROR argument never used\n         //~^^^ ERROR attempt to use a non-constant value in a constant\n         //~^^^^ ERROR attempt to use a non-constant value in a constant\n-        asm!(\"\", a = in(\"eax\") foo);\n-        //~^ ERROR explicit register arguments cannot have names\n-        asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n-        //~^ ERROR attempt to use a non-constant value in a constant\n-        asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n-        //~^ ERROR attempt to use a non-constant value in a constant\n-        asm!(\"{1}\", in(\"eax\") foo, const bar);\n-        //~^ ERROR positional arguments cannot follow named arguments or explicit register arguments\n-        //~^^ ERROR attempt to use a non-constant value in a constant\n+\n         asm!(\"\", options(), \"\");\n         //~^ ERROR expected one of\n         asm!(\"{}\", in(reg) foo, \"{}\", out(reg) foo);", "previous_filename": "tests/ui/asm/x86_64/parse-error.rs"}, {"sha": "075d28e176ad89c4e79765624a32cee4b7418821", "filename": "tests/ui/asm/parse-error.stderr", "status": "renamed", "additions": 94, "deletions": 81, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/tests%2Fui%2Fasm%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/tests%2Fui%2Fasm%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm%2Fparse-error.stderr?ref=e1c29d137dd779dcfce447d8d149ee6b8e9bdf78", "patch": "@@ -83,239 +83,279 @@ LL |         asm!(\"\", options(nomem, foo));\n    |                                 ^^^ expected one of 10 possible tokens\n \n error: at least one abi must be provided as an argument to `clobber_abi`\n-  --> $DIR/parse-error.rs:41:30\n+  --> $DIR/parse-error.rs:44:30\n    |\n LL |         asm!(\"\", clobber_abi());\n    |                              ^\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:43:30\n+  --> $DIR/parse-error.rs:46:30\n    |\n LL |         asm!(\"\", clobber_abi(foo));\n    |                              ^^^ not a string literal\n \n error: expected one of `)` or `,`, found `foo`\n-  --> $DIR/parse-error.rs:45:34\n+  --> $DIR/parse-error.rs:48:34\n    |\n LL |         asm!(\"\", clobber_abi(\"C\" foo));\n    |                                  ^^^ expected one of `)` or `,`\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:47:35\n+  --> $DIR/parse-error.rs:50:35\n    |\n LL |         asm!(\"\", clobber_abi(\"C\", foo));\n    |                                   ^^^ not a string literal\n \n+error: expected string literal\n+  --> $DIR/parse-error.rs:52:30\n+   |\n+LL |         asm!(\"\", clobber_abi(1));\n+   |                              ^ not a string literal\n+\n+error: expected string literal\n+  --> $DIR/parse-error.rs:54:30\n+   |\n+LL |         asm!(\"\", clobber_abi(()));\n+   |                              ^ not a string literal\n+\n+error: expected string literal\n+  --> $DIR/parse-error.rs:56:30\n+   |\n+LL |         asm!(\"\", clobber_abi(uwu));\n+   |                              ^^^ not a string literal\n+\n+error: expected string literal\n+  --> $DIR/parse-error.rs:58:30\n+   |\n+LL |         asm!(\"\", clobber_abi({}));\n+   |                              ^ not a string literal\n+\n+error: expected string literal\n+  --> $DIR/parse-error.rs:60:30\n+   |\n+LL |         asm!(\"\", clobber_abi(loop {}));\n+   |                              ^^^^ not a string literal\n+\n+error: expected string literal\n+  --> $DIR/parse-error.rs:62:30\n+   |\n+LL |         asm!(\"\", clobber_abi(if));\n+   |                              ^^ not a string literal\n+\n+error: expected string literal\n+  --> $DIR/parse-error.rs:64:30\n+   |\n+LL |         asm!(\"\", clobber_abi(do));\n+   |                              ^^ not a string literal\n+\n+error: expected string literal\n+  --> $DIR/parse-error.rs:66:30\n+   |\n+LL |         asm!(\"\", clobber_abi(<));\n+   |                              ^ not a string literal\n+\n+error: expected string literal\n+  --> $DIR/parse-error.rs:68:30\n+   |\n+LL |         asm!(\"\", clobber_abi(.));\n+   |                              ^ not a string literal\n+\n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:54:36\n+  --> $DIR/parse-error.rs:76:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                     -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                     |\n    |                     previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:54:36\n+  --> $DIR/parse-error.rs:76:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                    ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n-error: explicit register arguments cannot have names\n-  --> $DIR/parse-error.rs:59:18\n-   |\n-LL |         asm!(\"\", a = in(\"eax\") foo);\n-   |                  ^^^^^^^^^^^^^^^^^\n-\n-error: positional arguments cannot follow named arguments or explicit register arguments\n-  --> $DIR/parse-error.rs:65:36\n-   |\n-LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n-   |                     -------------  ^^^^^^^^^ positional argument\n-   |                     |\n-   |                     explicit register argument\n-\n error: expected one of `clobber_abi`, `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"\"`\n-  --> $DIR/parse-error.rs:68:29\n+  --> $DIR/parse-error.rs:82:29\n    |\n LL |         asm!(\"\", options(), \"\");\n    |                             ^^ expected one of 9 possible tokens\n \n error: expected one of `clobber_abi`, `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:70:33\n+  --> $DIR/parse-error.rs:84:33\n    |\n LL |         asm!(\"{}\", in(reg) foo, \"{}\", out(reg) foo);\n    |                                 ^^^^ expected one of 9 possible tokens\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:72:14\n+  --> $DIR/parse-error.rs:86:14\n    |\n LL |         asm!(format!(\"{{{}}}\", 0), in(reg) foo);\n    |              ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:74:21\n+  --> $DIR/parse-error.rs:88:21\n    |\n LL |         asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n    |                     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:76:28\n+  --> $DIR/parse-error.rs:90:28\n    |\n LL |         asm!(\"{}\", in(reg) _);\n    |                            ^\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:78:31\n+  --> $DIR/parse-error.rs:92:31\n    |\n LL |         asm!(\"{}\", inout(reg) _);\n    |                               ^\n \n error: _ cannot be used for input operands\n-  --> $DIR/parse-error.rs:80:35\n+  --> $DIR/parse-error.rs:94:35\n    |\n LL |         asm!(\"{}\", inlateout(reg) _);\n    |                                   ^\n \n error: requires at least a template string argument\n-  --> $DIR/parse-error.rs:87:1\n+  --> $DIR/parse-error.rs:101:1\n    |\n LL | global_asm!();\n    | ^^^^^^^^^^^^^\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:89:13\n+  --> $DIR/parse-error.rs:103:13\n    |\n LL | global_asm!(FOO);\n    |             ^^^\n \n error: expected token: `,`\n-  --> $DIR/parse-error.rs:91:18\n+  --> $DIR/parse-error.rs:105:18\n    |\n LL | global_asm!(\"{}\" FOO);\n    |                  ^^^ expected `,`\n \n error: expected operand, options, or additional template string\n-  --> $DIR/parse-error.rs:93:19\n+  --> $DIR/parse-error.rs:107:19\n    |\n LL | global_asm!(\"{}\", FOO);\n    |                   ^^^ expected operand, options, or additional template string\n \n error: expected expression, found end of macro arguments\n-  --> $DIR/parse-error.rs:95:24\n+  --> $DIR/parse-error.rs:109:24\n    |\n LL | global_asm!(\"{}\", const);\n    |                        ^ expected expression\n \n error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n-  --> $DIR/parse-error.rs:97:30\n+  --> $DIR/parse-error.rs:111:30\n    |\n LL | global_asm!(\"{}\", const(reg) FOO);\n    |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `FOO`\n-  --> $DIR/parse-error.rs:99:25\n+  --> $DIR/parse-error.rs:113:25\n    |\n LL | global_asm!(\"\", options(FOO));\n    |                         ^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n-  --> $DIR/parse-error.rs:101:25\n+  --> $DIR/parse-error.rs:115:25\n    |\n LL | global_asm!(\"\", options(nomem FOO));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n-  --> $DIR/parse-error.rs:103:25\n+  --> $DIR/parse-error.rs:117:25\n    |\n LL | global_asm!(\"\", options(nomem, FOO));\n    |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:106:29\n+  --> $DIR/parse-error.rs:120:29\n    |\n LL | global_asm!(\"\", clobber_abi(FOO));\n    |                             ^^^ not a string literal\n \n error: expected one of `)` or `,`, found `FOO`\n-  --> $DIR/parse-error.rs:108:33\n+  --> $DIR/parse-error.rs:122:33\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\" FOO));\n    |                                 ^^^ expected one of `)` or `,`\n \n error: expected string literal\n-  --> $DIR/parse-error.rs:110:34\n+  --> $DIR/parse-error.rs:124:34\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\", FOO));\n    |                                  ^^^ not a string literal\n \n error: `clobber_abi` cannot be used with `global_asm!`\n-  --> $DIR/parse-error.rs:112:19\n+  --> $DIR/parse-error.rs:126:19\n    |\n LL | global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n    |                   ^^^^^^^^^^^^^^^^\n \n error: `clobber_abi` cannot be used with `global_asm!`\n-  --> $DIR/parse-error.rs:114:28\n+  --> $DIR/parse-error.rs:128:28\n    |\n LL | global_asm!(\"\", options(), clobber_abi(\"C\"));\n    |                            ^^^^^^^^^^^^^^^^\n \n error: `clobber_abi` cannot be used with `global_asm!`\n-  --> $DIR/parse-error.rs:116:30\n+  --> $DIR/parse-error.rs:130:30\n    |\n LL | global_asm!(\"{}\", options(), clobber_abi(\"C\"), const FOO);\n    |                              ^^^^^^^^^^^^^^^^\n \n error: `clobber_abi` cannot be used with `global_asm!`\n-  --> $DIR/parse-error.rs:118:17\n+  --> $DIR/parse-error.rs:132:17\n    |\n LL | global_asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n    |                 ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^\n \n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:120:35\n+  --> $DIR/parse-error.rs:134:35\n    |\n LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |                    -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                    |\n    |                    previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:120:35\n+  --> $DIR/parse-error.rs:134:35\n    |\n LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |                                   ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: expected one of `clobber_abi`, `const`, `options`, or `sym`, found `\"\"`\n-  --> $DIR/parse-error.rs:123:28\n+  --> $DIR/parse-error.rs:137:28\n    |\n LL | global_asm!(\"\", options(), \"\");\n    |                            ^^ expected one of `clobber_abi`, `const`, `options`, or `sym`\n \n error: expected one of `clobber_abi`, `const`, `options`, or `sym`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:125:30\n+  --> $DIR/parse-error.rs:139:30\n    |\n LL | global_asm!(\"{}\", const FOO, \"{}\", const FOO);\n    |                              ^^^^ expected one of `clobber_abi`, `const`, `options`, or `sym`\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:127:13\n+  --> $DIR/parse-error.rs:141:13\n    |\n LL | global_asm!(format!(\"{{{}}}\", 0), const FOO);\n    |             ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:129:20\n+  --> $DIR/parse-error.rs:143:20\n    |\n LL | global_asm!(\"{1}\", format!(\"{{{}}}\", 0), const FOO, const BAR);\n    |                    ^^^^^^^^^^^^^^^^^^^^\n@@ -332,7 +372,7 @@ LL |         asm!(\"{}\", options(), const foo);\n    |                                     ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:49:44\n+  --> $DIR/parse-error.rs:71:44\n    |\n LL |     let mut foo = 0;\n    |     ----------- help: consider using `const` instead of `let`: `const foo`\n@@ -341,7 +381,7 @@ LL |         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n    |                                            ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:52:55\n+  --> $DIR/parse-error.rs:74:55\n    |\n LL |     let mut foo = 0;\n    |     ----------- help: consider using `const` instead of `let`: `const foo`\n@@ -350,7 +390,7 @@ LL |         asm!(\"{}\", options(), clobber_abi(\"C\"), const foo);\n    |                                                       ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:54:31\n+  --> $DIR/parse-error.rs:76:31\n    |\n LL |     let mut foo = 0;\n    |     ----------- help: consider using `const` instead of `let`: `const foo`\n@@ -359,41 +399,14 @@ LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                               ^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:54:46\n+  --> $DIR/parse-error.rs:76:46\n    |\n LL |     let mut bar = 0;\n    |     ----------- help: consider using `const` instead of `let`: `const bar`\n ...\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                              ^^^ non-constant value\n \n-error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:61:46\n-   |\n-LL |     let mut bar = 0;\n-   |     ----------- help: consider using `const` instead of `let`: `const bar`\n-...\n-LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n-   |                                              ^^^ non-constant value\n-\n-error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:63:46\n-   |\n-LL |     let mut bar = 0;\n-   |     ----------- help: consider using `const` instead of `let`: `const bar`\n-...\n-LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n-   |                                              ^^^ non-constant value\n-\n-error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/parse-error.rs:65:42\n-   |\n-LL |     let mut bar = 0;\n-   |     ----------- help: consider using `const` instead of `let`: `const bar`\n-...\n-LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n-   |                                          ^^^ non-constant value\n-\n-error: aborting due to 59 previous errors\n+error: aborting due to 63 previous errors\n \n For more information about this error, try `rustc --explain E0435`.", "previous_filename": "tests/ui/asm/x86_64/parse-error.stderr"}, {"sha": "715a67687d1247c3031bd59d387d27cb73e2ef9e", "filename": "tests/ui/asm/x86_64/x86_64_parse_error.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/tests%2Fui%2Fasm%2Fx86_64%2Fx86_64_parse_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/tests%2Fui%2Fasm%2Fx86_64%2Fx86_64_parse_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm%2Fx86_64%2Fx86_64_parse_error.rs?ref=e1c29d137dd779dcfce447d8d149ee6b8e9bdf78", "patch": "@@ -0,0 +1,21 @@\n+// only-x86_64\n+\n+#![feature(asm_const)]\n+\n+use std::arch::asm;\n+\n+fn main() {\n+    let mut foo = 0;\n+    let mut bar = 0;\n+    unsafe {\n+        asm!(\"\", a = in(\"eax\") foo);\n+        //~^ ERROR explicit register arguments cannot have names\n+        asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n+        //~^ ERROR attempt to use a non-constant value in a constant\n+        asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n+        //~^ ERROR attempt to use a non-constant value in a constant\n+        asm!(\"{1}\", in(\"eax\") foo, const bar);\n+        //~^ ERROR positional arguments cannot follow named arguments or explicit register arguments\n+        //~^^ ERROR attempt to use a non-constant value in a constant\n+    }\n+}"}, {"sha": "f2854ae51285163be1b011dba1b8bd2b0e0e4f03", "filename": "tests/ui/asm/x86_64/x86_64_parse_error.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/tests%2Fui%2Fasm%2Fx86_64%2Fx86_64_parse_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1c29d137dd779dcfce447d8d149ee6b8e9bdf78/tests%2Fui%2Fasm%2Fx86_64%2Fx86_64_parse_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm%2Fx86_64%2Fx86_64_parse_error.stderr?ref=e1c29d137dd779dcfce447d8d149ee6b8e9bdf78", "patch": "@@ -0,0 +1,44 @@\n+error: explicit register arguments cannot have names\n+  --> $DIR/x86_64_parse_error.rs:11:18\n+   |\n+LL |         asm!(\"\", a = in(\"eax\") foo);\n+   |                  ^^^^^^^^^^^^^^^^^\n+\n+error: positional arguments cannot follow named arguments or explicit register arguments\n+  --> $DIR/x86_64_parse_error.rs:17:36\n+   |\n+LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n+   |                     -------------  ^^^^^^^^^ positional argument\n+   |                     |\n+   |                     explicit register argument\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/x86_64_parse_error.rs:13:46\n+   |\n+LL |     let mut bar = 0;\n+   |     ----------- help: consider using `const` instead of `let`: `const bar`\n+...\n+LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n+   |                                              ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/x86_64_parse_error.rs:15:46\n+   |\n+LL |     let mut bar = 0;\n+   |     ----------- help: consider using `const` instead of `let`: `const bar`\n+...\n+LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n+   |                                              ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/x86_64_parse_error.rs:17:42\n+   |\n+LL |     let mut bar = 0;\n+   |     ----------- help: consider using `const` instead of `let`: `const bar`\n+...\n+LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n+   |                                          ^^^ non-constant value\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0435`."}]}