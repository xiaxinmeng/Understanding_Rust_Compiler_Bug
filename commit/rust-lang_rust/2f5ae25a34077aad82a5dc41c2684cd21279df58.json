{"sha": "2f5ae25a34077aad82a5dc41c2684cd21279df58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNWFlMjVhMzQwNzdhYWQ4MmE1ZGM0MWMyNjg0Y2QyMTI3OWRmNTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-25T15:34:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-25T15:34:03Z"}, "message": "Auto merge of #45513 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 5 pull requests\n\n- Successful merges: #45361, #45461, #45465, #45486, #45502\n- Failed merges:", "tree": {"sha": "f94b96d5b5ea4a9a40eac74bf968e26ec4fe4346", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f94b96d5b5ea4a9a40eac74bf968e26ec4fe4346"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f5ae25a34077aad82a5dc41c2684cd21279df58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f5ae25a34077aad82a5dc41c2684cd21279df58", "html_url": "https://github.com/rust-lang/rust/commit/2f5ae25a34077aad82a5dc41c2684cd21279df58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f5ae25a34077aad82a5dc41c2684cd21279df58/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f764eaf453162cd19ef484ece07cc21e14dfb2c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f764eaf453162cd19ef484ece07cc21e14dfb2c1", "html_url": "https://github.com/rust-lang/rust/commit/f764eaf453162cd19ef484ece07cc21e14dfb2c1"}, {"sha": "94c861865a922a7a94f3fc6a2948b9ddc7a36b44", "url": "https://api.github.com/repos/rust-lang/rust/commits/94c861865a922a7a94f3fc6a2948b9ddc7a36b44", "html_url": "https://github.com/rust-lang/rust/commit/94c861865a922a7a94f3fc6a2948b9ddc7a36b44"}], "stats": {"total": 260, "additions": 257, "deletions": 3}, "files": [{"sha": "fb15f767f9e346b499b2937622bf88ad9ecdc8ae", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f5ae25a34077aad82a5dc41c2684cd21279df58/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f5ae25a34077aad82a5dc41c2684cd21279df58/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=2f5ae25a34077aad82a5dc41c2684cd21279df58", "patch": "@@ -446,6 +446,7 @@ impl Step for Openssl {\n             \"powerpc64-unknown-linux-gnu\" => \"linux-ppc64\",\n             \"powerpc64le-unknown-linux-gnu\" => \"linux-ppc64le\",\n             \"s390x-unknown-linux-gnu\" => \"linux64-s390x\",\n+            \"sparc64-unknown-linux-gnu\" => \"linux64-sparcv9\",\n             \"sparc64-unknown-netbsd\" => \"BSD-sparc64\",\n             \"x86_64-apple-darwin\" => \"darwin64-x86_64-cc\",\n             \"x86_64-linux-android\" => \"linux-x86_64\","}, {"sha": "ddad67273dc77e8646bb9ac90d147834c9bda30b", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f5ae25a34077aad82a5dc41c2684cd21279df58/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f5ae25a34077aad82a5dc41c2684cd21279df58/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=2f5ae25a34077aad82a5dc41c2684cd21279df58", "patch": "@@ -676,6 +676,10 @@ extern \"rust-intrinsic\" {\n     pub fn min_align_of<T>() -> usize;\n     pub fn pref_align_of<T>() -> usize;\n \n+    /// The size of the referenced value in bytes.\n+    ///\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::mem::size_of_val`](../../std/mem/fn.size_of_val.html).\n     pub fn size_of_val<T: ?Sized>(_: &T) -> usize;\n     pub fn min_align_of_val<T: ?Sized>(_: &T) -> usize;\n \n@@ -921,6 +925,9 @@ extern \"rust-intrinsic\" {\n     ///\n     /// If the actual type neither requires drop glue nor implements\n     /// `Copy`, then may return `true` or `false`.\n+    ///\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::mem::needs_drop`](../../std/mem/fn.needs_drop.html).\n     pub fn needs_drop<T>() -> bool;\n \n     /// Calculates the offset from a pointer."}, {"sha": "f560622c2975d0c1e882f03942ae5a20a400a746", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f5ae25a34077aad82a5dc41c2684cd21279df58/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f5ae25a34077aad82a5dc41c2684cd21279df58/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=2f5ae25a34077aad82a5dc41c2684cd21279df58", "patch": "@@ -229,6 +229,7 @@ impl Diagnostic {\n     /// \"try adding parentheses: `(tup.0).1`\"\n     ///\n     /// The message\n+    ///\n     /// * should not end in any punctuation (a `:` is added automatically)\n     /// * should not be a question\n     /// * should not contain any parts like \"the following\", \"as shown\"\n@@ -248,6 +249,7 @@ impl Diagnostic {\n         self\n     }\n \n+    /// Prints out a message with multiple suggested edits of the code.\n     pub fn span_suggestions(&mut self, sp: Span, msg: &str, suggestions: Vec<String>) -> &mut Self {\n         self.suggestions.push(CodeSuggestion {\n             substitution_parts: vec![Substitution {"}, {"sha": "1b98cd322e7bca557053f554ce3e6c53f9f55126", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f5ae25a34077aad82a5dc41c2684cd21279df58/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/2f5ae25a34077aad82a5dc41c2684cd21279df58/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=2f5ae25a34077aad82a5dc41c2684cd21279df58", "patch": "@@ -820,8 +820,8 @@ span.since {\n \t\twidth: 100%;\n \t}\n \n-\t.content .out-of-band {\n-\t\tdisplay: none;\n+\t.content h4 > .out-of-band {\n+\t\tposition: inherit;\n \t}\n \n \t.toggle-wrapper > .collapse-toggle {\n@@ -835,6 +835,10 @@ span.since {\n \t#search {\n \t\tmargin-left: 0;\n \t}\n+\n+\t.content .impl-items .method, .content .impl-items > .type, .impl-items > .associatedconstant {\n+\t\tdisplay: flex;\n+\t}\n }\n \n @media print {"}, {"sha": "5d37d970e89b64494b737def563516eb305c1b4f", "filename": "src/libstd/os/linux/fs.rs", "status": "modified", "additions": 241, "deletions": 1, "changes": 242, "blob_url": "https://github.com/rust-lang/rust/blob/2f5ae25a34077aad82a5dc41c2684cd21279df58/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f5ae25a34077aad82a5dc41c2684cd21279df58/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Ffs.rs?ref=2f5ae25a34077aad82a5dc41c2684cd21279df58", "patch": "@@ -24,9 +24,25 @@ pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains\n     /// the raw information returned by the OS.\n     ///\n-    /// The contents of the returned `stat` are **not** consistent across\n+    /// The contents of the returned [`stat`] are **not** consistent across\n     /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n     /// cross-Unix abstractions contained within the raw stat.\n+    ///\n+    /// [`stat`]: ../../../../std/os/linux/raw/struct.stat.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let stat = meta.as_raw_stat();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     #[rustc_deprecated(since = \"1.8.0\",\n                        reason = \"deprecated in favor of the accessor \\\n@@ -35,54 +51,278 @@ pub trait MetadataExt {\n     fn as_raw_stat(&self) -> &raw::stat;\n \n     /// Returns the device ID on which this file resides.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_dev());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_dev(&self) -> u64;\n     /// Returns the inode number.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_ino());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_ino(&self) -> u64;\n     /// Returns the file type and mode.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_mode());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_mode(&self) -> u32;\n     /// Returns the number of hard links to file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_nlink());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_nlink(&self) -> u64;\n     /// Returns the user ID of the file owner.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_uid());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_uid(&self) -> u32;\n     /// Returns the group ID of the file owner.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_gid());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_gid(&self) -> u32;\n     /// Returns the device ID that this file represents. Only relevant for special file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_rdev());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_rdev(&self) -> u64;\n     /// Returns the size of the file (if it is a regular file or a symbolic link) in bytes.\n     ///\n     /// The size of a symbolic link is the length of the pathname it contains,\n     /// without a terminating null byte.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_size());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_size(&self) -> u64;\n     /// Returns the last access time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_atime());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_atime(&self) -> i64;\n     /// Returns the last access time, nano seconds part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_atime_nsec());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_atime_nsec(&self) -> i64;\n     /// Returns the last modification time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_mtime());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_mtime(&self) -> i64;\n     /// Returns the last modification time, nano seconds part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_mtime_nsec());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_mtime_nsec(&self) -> i64;\n     /// Returns the last status change time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_ctime());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_ctime(&self) -> i64;\n     /// Returns the last status change time, nano seconds part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_ctime_nsec());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_ctime_nsec(&self) -> i64;\n     /// Returns the \"preferred\" blocksize for efficient filesystem I/O.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_blksize());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_blksize(&self) -> u64;\n     /// Returns the number of blocks allocated to the file, 512-byte units.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// println!(\"{}\", meta.st_blocks());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n     fn st_blocks(&self) -> u64;\n }"}]}