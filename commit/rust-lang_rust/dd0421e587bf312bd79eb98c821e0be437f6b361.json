{"sha": "dd0421e587bf312bd79eb98c821e0be437f6b361", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMDQyMWU1ODdiZjMxMmJkNzllYjk4YzgyMWUwYmU0MzdmNmIzNjE=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-02-09T09:17:56Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-02-09T09:17:56Z"}, "message": "Handle macro token cases for rename", "tree": {"sha": "f6ea75230ca12ba8d18666b62f3f1bf451df5af2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6ea75230ca12ba8d18666b62f3f1bf451df5af2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd0421e587bf312bd79eb98c821e0be437f6b361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd0421e587bf312bd79eb98c821e0be437f6b361", "html_url": "https://github.com/rust-lang/rust/commit/dd0421e587bf312bd79eb98c821e0be437f6b361", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd0421e587bf312bd79eb98c821e0be437f6b361/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e1d97790be166f8735607c552a94a28ab9b09b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e1d97790be166f8735607c552a94a28ab9b09b8", "html_url": "https://github.com/rust-lang/rust/commit/3e1d97790be166f8735607c552a94a28ab9b09b8"}], "stats": {"total": 94, "additions": 69, "deletions": 25}, "files": [{"sha": "bc241fb5a5d856a879a7039c25fc5be47f418d35", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 50, "deletions": 25, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/dd0421e587bf312bd79eb98c821e0be437f6b361/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd0421e587bf312bd79eb98c821e0be437f6b361/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=dd0421e587bf312bd79eb98c821e0be437f6b361", "patch": "@@ -13,6 +13,7 @@ mod classify;\n mod rename;\n mod search_scope;\n \n+use crate::expand::descend_into_macros_with_analyzer;\n use hir::{InFile, SourceBinder};\n use once_cell::unsync::Lazy;\n use ra_db::{SourceDatabase, SourceDatabaseExt};\n@@ -192,39 +193,63 @@ fn process_definition(\n \n         let parse = Lazy::new(|| SourceFile::parse(&text));\n         let mut sb = Lazy::new(|| SourceBinder::new(db));\n+        let mut analyzer = None;\n \n         for (idx, _) in text.match_indices(pat) {\n             let offset = TextUnit::from_usize(idx);\n \n-            if let Some(name_ref) =\n+            let (name_ref, range) = if let Some(name_ref) =\n                 find_node_at_offset::<ast::NameRef>(parse.tree().syntax(), offset)\n             {\n                 let range = name_ref.syntax().text_range();\n-                if let Some(search_range) = search_range {\n-                    if !range.is_subrange(&search_range) {\n-                        continue;\n-                    }\n+                (InFile::new(file_id.into(), name_ref), range)\n+            } else {\n+                // Handle macro token cases\n+                let t = match parse.tree().syntax().token_at_offset(offset) {\n+                    TokenAtOffset::None => continue,\n+                    TokenAtOffset::Single(t) => t,\n+                    TokenAtOffset::Between(_, t) => t,\n+                };\n+                let range = t.text_range();\n+                let analyzer = analyzer.get_or_insert(\n+                    sb.analyze(InFile::new(file_id.into(), parse.tree().syntax()), None),\n+                );\n+\n+                let expanded = descend_into_macros_with_analyzer(\n+                    db,\n+                    &analyzer,\n+                    InFile::new(file_id.into(), t),\n+                );\n+                if let Some(token) = ast::NameRef::cast(expanded.value.parent()) {\n+                    (expanded.with_value(token), range)\n+                } else {\n+                    continue;\n                 }\n-                // FIXME: reuse sb\n-                // See https://github.com/rust-lang/rust/pull/68198#issuecomment-574269098\n-\n-                if let Some(d) = classify_name_ref(&mut sb, InFile::new(file_id.into(), &name_ref))\n-                {\n-                    if d == def {\n-                        let kind = if is_record_lit_name_ref(&name_ref)\n-                            || is_call_expr_name_ref(&name_ref)\n-                        {\n-                            ReferenceKind::StructLiteral\n-                        } else {\n-                            ReferenceKind::Other\n-                        };\n-\n-                        refs.push(Reference {\n-                            file_range: FileRange { file_id, range },\n-                            kind,\n-                            access: reference_access(&d.kind, &name_ref),\n-                        });\n-                    }\n+            };\n+\n+            if let Some(search_range) = search_range {\n+                if !range.is_subrange(&search_range) {\n+                    continue;\n+                }\n+            }\n+            // FIXME: reuse sb\n+            // See https://github.com/rust-lang/rust/pull/68198#issuecomment-574269098\n+\n+            if let Some(d) = classify_name_ref(&mut sb, name_ref.as_ref()) {\n+                if d == def {\n+                    let kind = if is_record_lit_name_ref(&name_ref.value)\n+                        || is_call_expr_name_ref(&name_ref.value)\n+                    {\n+                        ReferenceKind::StructLiteral\n+                    } else {\n+                        ReferenceKind::Other\n+                    };\n+\n+                    refs.push(Reference {\n+                        file_range: FileRange { file_id, range },\n+                        kind,\n+                        access: reference_access(&d.kind, &name_ref.value),\n+                    });\n                 }\n             }\n         }"}, {"sha": "c46b78cb6f686815a92239c8fc8b69600b1b36cb", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dd0421e587bf312bd79eb98c821e0be437f6b361/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd0421e587bf312bd79eb98c821e0be437f6b361/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=dd0421e587bf312bd79eb98c821e0be437f6b361", "patch": "@@ -210,6 +210,25 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn test_rename_for_macro_args() {\n+        test_rename(\n+            r#\"\n+    macro_rules! foo {($i:ident) => {$i} }\n+    fn main() {\n+        let a<|> = \"test\";\n+        foo!(a);\n+    }\"#,\n+            \"b\",\n+            r#\"\n+    macro_rules! foo {($i:ident) => {$i} }\n+    fn main() {\n+        let b = \"test\";\n+        foo!(b);\n+    }\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_rename_for_param_inside() {\n         test_rename("}]}