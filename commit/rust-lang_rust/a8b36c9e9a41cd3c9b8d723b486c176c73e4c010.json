{"sha": "a8b36c9e9a41cd3c9b8d723b486c176c73e4c010", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4YjM2YzllOWE0MWNkM2M5YjhkNzIzYjQ4NmMxNzZjNzNlNGMwMTA=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-05-28T16:47:20Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-05-29T13:19:47Z"}, "message": "Run rustfmt", "tree": {"sha": "811090f7355b7b46af4bfb7a7ce6c7a362d0af96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/811090f7355b7b46af4bfb7a7ce6c7a362d0af96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8b36c9e9a41cd3c9b8d723b486c176c73e4c010", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAlsNU3MACgkQiMlBzaHU\nZDKwbw/+KzfefTB75zJMEc9TmITaTE4SwO1B3U0Bmzb5xiD5NCLj+QVpmWcjoqSV\noBKHgf5mWT3F+GmMEJn4FOjNyIOv10cAYjJ199ssUp5pqRAIQYrpB9xa4DHpmSli\ngieq2fGrEI7TQ4fIFxjz/4R4gzPdGMemEtinMnM3rSoqAUOxpZmKeFx37gJ3bd5j\nR9ibjq8/Pe2acWqUVs+elx3I3LogMbUbnFUzZBDHXhTZfMH4uMu+suImJSgmcgbB\n9r36lBcH8dZqMXbG8gQVx6hTyHb/b4b2zzqtEaqG2PPLz+IEflkqelCqi0hKL84j\nzdAkeu1AC0w6cXdjs96j1SZHCWnI1zt7MLYiyPnR8a9Lgz0gsX3fEV8m346nELGf\nRAqu/eMgsTfPlL2e/EZOU33bru0X1qlIN7CNlrAZwzpLzf6LofMyZ6EkmBXMTpXS\ntK9c6fhYQtVNYnoW9+ZCbZblQCiAk5Ua8sAT1B3kRgQi4nOBsUPQR4Mg2ucs56SC\nE1d7DmrNRv95+NBohKvGHKkpinz+vgMUTyCEnmd2yuCl3EtUEqE7HNBHckU6hegU\nwta0mK8iMlfTMkhuMoyygwRyOAz06K5WCxxK4Vy6Zm/V1CAn8ekbjoEUDS8K9Grq\nTUC7E/7YbKmD4VwgRbNm04ff+OvTmhONNH7A/P0usr85otle6TQ=\n=Hd6e\n-----END PGP SIGNATURE-----", "payload": "tree 811090f7355b7b46af4bfb7a7ce6c7a362d0af96\nparent 9de4e342dfc84c66d4ab435adcafc930c35f5586\nauthor Santiago Pastorino <spastorino@gmail.com> 1527526040 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1527599987 -0300\n\nRun rustfmt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b36c9e9a41cd3c9b8d723b486c176c73e4c010", "html_url": "https://github.com/rust-lang/rust/commit/a8b36c9e9a41cd3c9b8d723b486c176c73e4c010", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8b36c9e9a41cd3c9b8d723b486c176c73e4c010/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9de4e342dfc84c66d4ab435adcafc930c35f5586", "url": "https://api.github.com/repos/rust-lang/rust/commits/9de4e342dfc84c66d4ab435adcafc930c35f5586", "html_url": "https://github.com/rust-lang/rust/commit/9de4e342dfc84c66d4ab435adcafc930c35f5586"}], "stats": {"total": 158, "additions": 87, "deletions": 71}, "files": [{"sha": "5631356dc1e903cca4493278d1c5390856a5f48e", "filename": "src/librustc_mir/borrow_check/flows.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a8b36c9e9a41cd3c9b8d723b486c176c73e4c010/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b36c9e9a41cd3c9b8d723b486c176c73e4c010/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs?ref=a8b36c9e9a41cd3c9b8d723b486c176c73e4c010", "patch": "@@ -21,12 +21,12 @@ use borrow_check::location::LocationIndex;\n \n use polonius_engine::Output;\n \n-use dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n+use dataflow::move_paths::indexes::BorrowIndex;\n+use dataflow::move_paths::HasMoveData;\n+use dataflow::Borrows;\n use dataflow::{EverInitializedPlaces, MovingOutStatements};\n-use dataflow::{Borrows};\n use dataflow::{FlowAtLocation, FlowsAtLocation};\n-use dataflow::move_paths::HasMoveData;\n-use dataflow::move_paths::indexes::BorrowIndex;\n+use dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n use either::Either;\n use std::fmt;\n use std::rc::Rc;\n@@ -62,7 +62,10 @@ impl<'b, 'gcx, 'tcx> Flows<'b, 'gcx, 'tcx> {\n         }\n     }\n \n-    crate fn borrows_in_scope(&self, location: LocationIndex) -> impl Iterator<Item = BorrowIndex> + '_ {\n+    crate fn borrows_in_scope(\n+        &self,\n+        location: LocationIndex,\n+    ) -> impl Iterator<Item = BorrowIndex> + '_ {\n         if let Some(ref polonius) = self.polonius_output {\n             Either::Left(polonius.errors_at(location).iter().cloned())\n         } else {\n@@ -82,7 +85,7 @@ macro_rules! each_flow {\n         FlowAtLocation::$meth(&mut $this.uninits, $arg);\n         FlowAtLocation::$meth(&mut $this.move_outs, $arg);\n         FlowAtLocation::$meth(&mut $this.ever_inits, $arg);\n-    }\n+    };\n }\n \n impl<'b, 'gcx, 'tcx> FlowsAtLocation for Flows<'b, 'gcx, 'tcx> {\n@@ -150,8 +153,7 @@ impl<'b, 'gcx, 'tcx> fmt::Display for Flows<'b, 'gcx, 'tcx> {\n                 s.push_str(\", \");\n             };\n             saw_one = true;\n-            let move_path =\n-                &self.uninits.operator().move_data().move_paths[mpi_uninit];\n+            let move_path = &self.uninits.operator().move_data().move_paths[mpi_uninit];\n             s.push_str(&format!(\"{}\", move_path));\n         });\n         s.push_str(\"] \");\n@@ -175,8 +177,7 @@ impl<'b, 'gcx, 'tcx> fmt::Display for Flows<'b, 'gcx, 'tcx> {\n                 s.push_str(\", \");\n             };\n             saw_one = true;\n-            let ever_init =\n-                &self.ever_inits.operator().move_data().inits[mpi_ever_init];\n+            let ever_init = &self.ever_inits.operator().move_data().inits[mpi_ever_init];\n             s.push_str(&format!(\"{:?}\", ever_init));\n         });\n         s.push_str(\"]\");"}, {"sha": "ec1f3dbaeebf5aa6b768257bc8e8974e2d8b52b9", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 76, "deletions": 61, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/a8b36c9e9a41cd3c9b8d723b486c176c73e4c010/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b36c9e9a41cd3c9b8d723b486c176c73e4c010/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=a8b36c9e9a41cd3c9b8d723b486c176c73e4c010", "patch": "@@ -11,10 +11,10 @@\n use borrow_check::borrow_set::BorrowSet;\n use borrow_check::location::{LocationIndex, LocationTable};\n use borrow_check::nll::facts::AllFactsExt;\n+use dataflow::indexes::BorrowIndex;\n use dataflow::move_paths::MoveData;\n use dataflow::FlowAtLocation;\n use dataflow::MaybeInitializedPlaces;\n-use dataflow::indexes::BorrowIndex;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements, Mir};\n@@ -23,25 +23,25 @@ use rustc::util::nodemap::FxHashMap;\n use std::collections::BTreeSet;\n use std::fmt::Debug;\n use std::io;\n-use std::rc::Rc;\n use std::path::PathBuf;\n+use std::rc::Rc;\n use transform::MirSource;\n use util::liveness::{LivenessResults, LocalSet};\n \n use self::mir_util::PassWhere;\n+use polonius_engine::{Algorithm, Output};\n use util as mir_util;\n use util::pretty::{self, ALIGN};\n-use polonius_engine::{Algorithm, Output};\n \n mod constraint_generation;\n pub mod explain_borrow;\n mod facts;\n+mod invalidation;\n crate mod region_infer;\n mod renumber;\n mod subtype_constraint_generation;\n crate mod type_check;\n mod universal_regions;\n-mod invalidation;\n \n use self::facts::AllFacts;\n use self::region_infer::RegionInferenceContext;\n@@ -119,8 +119,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     // Create the region inference context, taking ownership of the region inference\n     // data that was contained in `infcx`.\n     let var_origins = infcx.take_region_var_origins();\n-    let mut regioncx =\n-        RegionInferenceContext::new(var_origins, universal_regions, mir);\n+    let mut regioncx = RegionInferenceContext::new(var_origins, universal_regions, mir);\n \n     // Generate various constraints.\n     subtype_constraint_generation::generate(\n@@ -144,22 +143,27 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n         location_table,\n         &mir,\n         def_id,\n-        borrow_set\n+        borrow_set,\n     );\n \n     // Dump facts if requested.\n     let polonius_output = all_facts.and_then(|all_facts| {\n-         if infcx.tcx.sess.opts.debugging_opts.nll_facts {\n-             let def_path = infcx.tcx.hir.def_path(def_id);\n-             let dir_path = PathBuf::from(\"nll-facts\").join(def_path.to_filename_friendly_no_crate());\n-             all_facts.write_to_dir(dir_path, location_table).unwrap();\n-         }\n-\n-         if infcx.tcx.sess.opts.debugging_opts.polonius {\n-            Some(Rc::new(Output::compute(&all_facts, Algorithm::DatafrogOpt, false)))\n-         } else {\n-             None\n-         }\n+        if infcx.tcx.sess.opts.debugging_opts.nll_facts {\n+            let def_path = infcx.tcx.hir.def_path(def_id);\n+            let dir_path =\n+                PathBuf::from(\"nll-facts\").join(def_path.to_filename_friendly_no_crate());\n+            all_facts.write_to_dir(dir_path, location_table).unwrap();\n+        }\n+\n+        if infcx.tcx.sess.opts.debugging_opts.polonius {\n+            Some(Rc::new(Output::compute(\n+                &all_facts,\n+                Algorithm::DatafrogOpt,\n+                false,\n+            )))\n+        } else {\n+            None\n+        }\n     });\n \n     // Solve the region constraints.\n@@ -195,7 +199,8 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n         return;\n     }\n \n-    let regular_liveness_per_location: FxHashMap<_, _> = mir.basic_blocks()\n+    let regular_liveness_per_location: FxHashMap<_, _> = mir\n+        .basic_blocks()\n         .indices()\n         .flat_map(|bb| {\n             let mut results = vec![];\n@@ -208,7 +213,8 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n         })\n         .collect();\n \n-    let drop_liveness_per_location: FxHashMap<_, _> = mir.basic_blocks()\n+    let drop_liveness_per_location: FxHashMap<_, _> = mir\n+        .basic_blocks()\n         .indices()\n         .flat_map(|bb| {\n             let mut results = vec![];\n@@ -221,47 +227,55 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n         })\n         .collect();\n \n-    mir_util::dump_mir(infcx.tcx, None, \"nll\", &0, source, mir, |pass_where, out| {\n-        match pass_where {\n-            // Before the CFG, dump out the values for each region variable.\n-            PassWhere::BeforeCFG => {\n-                regioncx.dump_mir(out)?;\n-\n-                if let Some(closure_region_requirements) = closure_region_requirements {\n-                    writeln!(out, \"|\")?;\n-                    writeln!(out, \"| Free Region Constraints\")?;\n-                    for_each_region_constraint(closure_region_requirements, &mut |msg| {\n-                        writeln!(out, \"| {}\", msg)\n-                    })?;\n+    mir_util::dump_mir(\n+        infcx.tcx,\n+        None,\n+        \"nll\",\n+        &0,\n+        source,\n+        mir,\n+        |pass_where, out| {\n+            match pass_where {\n+                // Before the CFG, dump out the values for each region variable.\n+                PassWhere::BeforeCFG => {\n+                    regioncx.dump_mir(out)?;\n+\n+                    if let Some(closure_region_requirements) = closure_region_requirements {\n+                        writeln!(out, \"|\")?;\n+                        writeln!(out, \"| Free Region Constraints\")?;\n+                        for_each_region_constraint(closure_region_requirements, &mut |msg| {\n+                            writeln!(out, \"| {}\", msg)\n+                        })?;\n+                    }\n                 }\n-            }\n \n-            // Before each basic block, dump out the values\n-            // that are live on entry to the basic block.\n-            PassWhere::BeforeBlock(bb) => {\n-                let s = live_variable_set(&liveness.regular.ins[bb], &liveness.drop.ins[bb]);\n-                writeln!(out, \"    | Live variables on entry to {:?}: {}\", bb, s)?;\n-            }\n+                // Before each basic block, dump out the values\n+                // that are live on entry to the basic block.\n+                PassWhere::BeforeBlock(bb) => {\n+                    let s = live_variable_set(&liveness.regular.ins[bb], &liveness.drop.ins[bb]);\n+                    writeln!(out, \"    | Live variables on entry to {:?}: {}\", bb, s)?;\n+                }\n \n-            PassWhere::BeforeLocation(location) => {\n-                let s = live_variable_set(\n-                    &regular_liveness_per_location[&location],\n-                    &drop_liveness_per_location[&location],\n-                );\n-                writeln!(\n-                    out,\n-                    \"{:ALIGN$} | Live variables on entry to {:?}: {}\",\n-                    \"\",\n-                    location,\n-                    s,\n-                    ALIGN = ALIGN\n-                )?;\n-            }\n+                PassWhere::BeforeLocation(location) => {\n+                    let s = live_variable_set(\n+                        &regular_liveness_per_location[&location],\n+                        &drop_liveness_per_location[&location],\n+                    );\n+                    writeln!(\n+                        out,\n+                        \"{:ALIGN$} | Live variables on entry to {:?}: {}\",\n+                        \"\",\n+                        location,\n+                        s,\n+                        ALIGN = ALIGN\n+                    )?;\n+                }\n \n-            PassWhere::AfterLocation(_) | PassWhere::AfterCFG => {}\n-        }\n-        Ok(())\n-    });\n+                PassWhere::AfterLocation(_) | PassWhere::AfterCFG => {}\n+            }\n+            Ok(())\n+        },\n+    );\n \n     // Also dump the inference graph constraints as a graphviz file.\n     let _: io::Result<()> = do catch {\n@@ -292,7 +306,8 @@ fn dump_annotation<'a, 'gcx, 'tcx>(\n     // better.\n \n     if let Some(closure_region_requirements) = closure_region_requirements {\n-        let mut err = tcx.sess\n+        let mut err = tcx\n+            .sess\n             .diagnostic()\n             .span_note_diag(mir.span, \"External requirements\");\n \n@@ -312,7 +327,8 @@ fn dump_annotation<'a, 'gcx, 'tcx>(\n \n         err.emit();\n     } else {\n-        let mut err = tcx.sess\n+        let mut err = tcx\n+            .sess\n             .diagnostic()\n             .span_note_diag(mir.span, \"No external requirements\");\n         regioncx.annotate(&mut err);\n@@ -331,8 +347,7 @@ fn for_each_region_constraint(\n         };\n         with_msg(&format!(\n             \"where {:?}: {:?}\",\n-            subject,\n-            req.outlived_free_region,\n+            subject, req.outlived_free_region,\n         ))?;\n     }\n     Ok(())"}]}