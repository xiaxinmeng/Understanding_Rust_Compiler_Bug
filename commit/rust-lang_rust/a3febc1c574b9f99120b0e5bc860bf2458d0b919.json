{"sha": "a3febc1c574b9f99120b0e5bc860bf2458d0b919", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZmViYzFjNTc0YjlmOTkxMjBiMGU1YmM4NjBiZjI0NThkMGI5MTk=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-12T19:40:35Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-12T19:40:35Z"}, "message": "vscode: switched to stream.pipeline with .on(close) workaround", "tree": {"sha": "f267e8562ffb50b28b4eee698d02d136a6ee6cfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f267e8562ffb50b28b4eee698d02d136a6ee6cfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3febc1c574b9f99120b0e5bc860bf2458d0b919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3febc1c574b9f99120b0e5bc860bf2458d0b919", "html_url": "https://github.com/rust-lang/rust/commit/a3febc1c574b9f99120b0e5bc860bf2458d0b919", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3febc1c574b9f99120b0e5bc860bf2458d0b919/comments", "author": null, "committer": null, "parents": [{"sha": "36dc3edb7a73e0d60ba2a3e589d1ae76c27f9d9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/36dc3edb7a73e0d60ba2a3e589d1ae76c27f9d9d", "html_url": "https://github.com/rust-lang/rust/commit/36dc3edb7a73e0d60ba2a3e589d1ae76c27f9d9d"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "b31d2a736d25f7a7e6402d7f476bd2407c9219b7", "filename": "editors/code/src/installation/download_file.ts", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a3febc1c574b9f99120b0e5bc860bf2458d0b919/editors%2Fcode%2Fsrc%2Finstallation%2Fdownload_file.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a3febc1c574b9f99120b0e5bc860bf2458d0b919/editors%2Fcode%2Fsrc%2Finstallation%2Fdownload_file.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Fdownload_file.ts?ref=a3febc1c574b9f99120b0e5bc860bf2458d0b919", "patch": "@@ -1,8 +1,12 @@\n import fetch from \"node-fetch\";\n import * as fs from \"fs\";\n+import * as stream from \"stream\";\n+import * as util from \"util\";\n import { strict as assert } from \"assert\";\n import { NestedError } from \"ts-nested-error\";\n \n+const pipeline = util.promisify(stream.pipeline);\n+\n class DownloadFileError extends NestedError {}\n \n /**\n@@ -29,25 +33,19 @@ export async function downloadFile(\n     const totalBytes = Number(res.headers.get('content-length'));\n     assert(!Number.isNaN(totalBytes), \"Sanity check of content-length protocol\");\n \n-    let readBytes = 0;\n-\n     console.log(\"Downloading file of\", totalBytes, \"bytes size from\", url, \"to\", destFilePath);\n \n-    // Here reject() may be called 2 times. As per ECMAScript standard, 2-d call is ignored\n-    // https://tc39.es/ecma262/#sec-promise-reject-functions\n-\n-    return new Promise<void>((resolve, reject) => res.body\n-        .on(\"data\", (chunk: Buffer) => {\n-            readBytes += chunk.length;\n-            onProgress(readBytes, totalBytes);\n-        })\n-        .on(\"error\", err => reject(\n-            new DownloadFileError(`Read-stream error, read bytes: ${readBytes}`, err)\n-        ))\n-        .pipe(fs.createWriteStream(destFilePath, { mode: destFilePermissions }))\n-        .on(\"error\", err => reject(\n-            new DownloadFileError(`Write-stream error, read bytes: ${readBytes}`, err)\n-        ))\n-        .on(\"close\", resolve)\n-    );\n+    let readBytes = 0;\n+    res.body.on(\"data\", (chunk: Buffer) => {\n+        readBytes += chunk.length;\n+        onProgress(readBytes, totalBytes);\n+    });\n+\n+    const destFileStream = fs.createWriteStream(destFilePath, { mode: destFilePermissions });\n+\n+    await pipeline(res.body, destFileStream).catch(DownloadFileError.rethrow(\"Piping file error\"));\n+    return new Promise<void>(resolve => {\n+        destFileStream.on(\"close\", resolve); // details on workaround: https://github.com/rust-analyzer/rust-analyzer/pull/3092#discussion_r378191131\n+        destFileStream.destroy();\n+    });\n }"}]}