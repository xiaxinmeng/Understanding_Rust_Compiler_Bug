{"sha": "e280df556dbbe4d25c3a7f29f6e7fee44c543e0b", "node_id": "C_kwDOAAsO6NoAKGUyODBkZjU1NmRiYmU0ZDI1YzNhN2YyOWY2ZTdmZWU0NGM1NDNlMGI", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-04-14T20:20:27Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-10T17:36:02Z"}, "message": "Add note to suggest using `let _ = x` to ignore the value", "tree": {"sha": "5141b2752f1901100ebf50fdebae60c5dec7a2b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5141b2752f1901100ebf50fdebae60c5dec7a2b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e280df556dbbe4d25c3a7f29f6e7fee44c543e0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e280df556dbbe4d25c3a7f29f6e7fee44c543e0b", "html_url": "https://github.com/rust-lang/rust/commit/e280df556dbbe4d25c3a7f29f6e7fee44c543e0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e280df556dbbe4d25c3a7f29f6e7fee44c543e0b/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d23f8957ae9f6a2e3121529422e7883d8bdbcc14", "url": "https://api.github.com/repos/rust-lang/rust/commits/d23f8957ae9f6a2e3121529422e7883d8bdbcc14", "html_url": "https://github.com/rust-lang/rust/commit/d23f8957ae9f6a2e3121529422e7883d8bdbcc14"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "a5639404fafd463f1f8a85a26c050a7f938069c6", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e280df556dbbe4d25c3a7f29f6e7fee44c543e0b/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e280df556dbbe4d25c3a7f29f6e7fee44c543e0b/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=e280df556dbbe4d25c3a7f29f6e7fee44c543e0b", "patch": "@@ -523,12 +523,16 @@ lint_opaque_hidden_inferred_bound_sugg = add this bound\n \n lint_drop_ref = calls to `std::mem::drop` with a reference instead of an owned value does nothing\n     .label = argument has type `{$arg_ty}`\n+    .note = use `let _ = ...` to ignore the expression or result\n \n lint_drop_copy = calls to `std::mem::drop` with a value that implements `Copy` does nothing\n     .label = argument has type `{$arg_ty}`\n+    .note = use `let _ = ...` to ignore the expression or result\n \n lint_forget_ref = calls to `std::mem::forget` with a reference instead of an owned value does nothing\n     .label = argument has type `{$arg_ty}`\n+    .note = use `let _ = ...` to ignore the expression or result\n \n lint_forget_copy = calls to `std::mem::forget` with a value that implements `Copy` does nothing\n     .label = argument has type `{$arg_ty}`\n+    .note = use `let _ = ...` to ignore the expression or result"}, {"sha": "8e48806b50447dd50b10c9f60c0710c39eb08ea4", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e280df556dbbe4d25c3a7f29f6e7fee44c543e0b/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e280df556dbbe4d25c3a7f29f6e7fee44c543e0b/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=e280df556dbbe4d25c3a7f29f6e7fee44c543e0b", "patch": "@@ -665,6 +665,7 @@ pub struct ForLoopsOverFalliblesSuggestion<'a> {\n // drop_ref.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_drop_ref)]\n+#[note]\n pub struct DropRefDiag<'a> {\n     pub arg_ty: Ty<'a>,\n     #[label]\n@@ -673,6 +674,7 @@ pub struct DropRefDiag<'a> {\n \n #[derive(LintDiagnostic)]\n #[diag(lint_drop_copy)]\n+#[note]\n pub struct DropCopyDiag<'a> {\n     pub arg_ty: Ty<'a>,\n     #[label]\n@@ -681,6 +683,7 @@ pub struct DropCopyDiag<'a> {\n \n #[derive(LintDiagnostic)]\n #[diag(lint_forget_ref)]\n+#[note]\n pub struct ForgetRefDiag<'a> {\n     pub arg_ty: Ty<'a>,\n     #[label]\n@@ -689,6 +692,7 @@ pub struct ForgetRefDiag<'a> {\n \n #[derive(LintDiagnostic)]\n #[diag(lint_forget_copy)]\n+#[note]\n pub struct ForgetCopyDiag<'a> {\n     pub arg_ty: Ty<'a>,\n     #[label]"}, {"sha": "db8e89ad295b96f73ceaeb823b754931d19ae965", "filename": "tests/ui/lint/drop_copy.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e280df556dbbe4d25c3a7f29f6e7fee44c543e0b/tests%2Fui%2Flint%2Fdrop_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e280df556dbbe4d25c3a7f29f6e7fee44c543e0b/tests%2Fui%2Flint%2Fdrop_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdrop_copy.stderr?ref=e280df556dbbe4d25c3a7f29f6e7fee44c543e0b", "patch": "@@ -6,6 +6,7 @@ LL |     drop(s1);\n    |          |\n    |          argument has type `SomeStruct`\n    |\n+   = note: use `let _ = ...` to ignore the expression or result\n note: the lint level is defined here\n   --> $DIR/drop_copy.rs:3:9\n    |\n@@ -19,6 +20,8 @@ LL |     drop(s2);\n    |     ^^^^^--^\n    |          |\n    |          argument has type `SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_copy.rs:36:5\n@@ -28,6 +31,7 @@ LL |     drop(s3);\n    |          |\n    |          argument has type `&SomeStruct`\n    |\n+   = note: use `let _ = ...` to ignore the expression or result\n    = note: `#[warn(drop_ref)]` on by default\n \n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n@@ -37,6 +41,8 @@ LL |     drop(s4);\n    |     ^^^^^--^\n    |          |\n    |          argument has type `SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_copy.rs:38:5\n@@ -45,6 +51,8 @@ LL |     drop(s5);\n    |     ^^^^^--^\n    |          |\n    |          argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_copy.rs:50:5\n@@ -53,6 +61,8 @@ LL |     drop(a2);\n    |     ^^^^^--^\n    |          |\n    |          argument has type `&AnotherStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_copy.rs:52:5\n@@ -61,6 +71,8 @@ LL |     drop(a4);\n    |     ^^^^^--^\n    |          |\n    |          argument has type `&AnotherStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n   --> $DIR/drop_copy.rs:71:13\n@@ -69,6 +81,8 @@ LL |             drop(println_and(13));\n    |             ^^^^^---------------^\n    |                  |\n    |                  argument has type `i32`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n   --> $DIR/drop_copy.rs:74:14\n@@ -77,6 +91,8 @@ LL |         3 if drop(println_and(14)) == () => (),\n    |              ^^^^^---------------^\n    |                   |\n    |                   argument has type `i32`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a value that implements `Copy` does nothing\n   --> $DIR/drop_copy.rs:76:14\n@@ -85,6 +101,8 @@ LL |         4 => drop(2),\n    |              ^^^^^-^\n    |                   |\n    |                   argument has type `i32`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: 10 warnings emitted\n "}, {"sha": "04c988fe99da479a0d7fceb99a3d9baed06e2804", "filename": "tests/ui/lint/drop_ref.stderr", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e280df556dbbe4d25c3a7f29f6e7fee44c543e0b/tests%2Fui%2Flint%2Fdrop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e280df556dbbe4d25c3a7f29f6e7fee44c543e0b/tests%2Fui%2Flint%2Fdrop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fdrop_ref.stderr?ref=e280df556dbbe4d25c3a7f29f6e7fee44c543e0b", "patch": "@@ -6,6 +6,7 @@ LL |     drop(&SomeStruct);\n    |          |\n    |          argument has type `&SomeStruct`\n    |\n+   = note: use `let _ = ...` to ignore the expression or result\n note: the lint level is defined here\n   --> $DIR/drop_ref.rs:3:9\n    |\n@@ -19,6 +20,8 @@ LL |     drop(&owned1);\n    |     ^^^^^-------^\n    |          |\n    |          argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:12:5\n@@ -27,6 +30,8 @@ LL |     drop(&&owned1);\n    |     ^^^^^--------^\n    |          |\n    |          argument has type `&&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:13:5\n@@ -35,6 +40,8 @@ LL |     drop(&mut owned1);\n    |     ^^^^^-----------^\n    |          |\n    |          argument has type `&mut SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:17:5\n@@ -43,6 +50,8 @@ LL |     drop(reference1);\n    |     ^^^^^----------^\n    |          |\n    |          argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:20:5\n@@ -51,6 +60,8 @@ LL |     drop(reference2);\n    |     ^^^^^----------^\n    |          |\n    |          argument has type `&mut SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:23:5\n@@ -59,6 +70,8 @@ LL |     drop(reference3);\n    |     ^^^^^----------^\n    |          |\n    |          argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:28:5\n@@ -67,6 +80,8 @@ LL |     drop(&val);\n    |     ^^^^^----^\n    |          |\n    |          argument has type `&T`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:36:5\n@@ -75,6 +90,8 @@ LL |     std::mem::drop(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^-----------^\n    |                    |\n    |                    argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:91:13\n@@ -83,6 +100,8 @@ LL |             drop(println_and(&13));\n    |             ^^^^^----------------^\n    |                  |\n    |                  argument has type `&i32`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:94:14\n@@ -91,6 +110,8 @@ LL |         3 if drop(println_and(&14)) == () => (),\n    |              ^^^^^----------------^\n    |                   |\n    |                   argument has type `&i32`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::drop` with a reference instead of an owned value does nothing\n   --> $DIR/drop_ref.rs:96:14\n@@ -99,6 +120,8 @@ LL |         4 => drop(&2),\n    |              ^^^^^--^\n    |                   |\n    |                   argument has type `&i32`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: 12 warnings emitted\n "}, {"sha": "37bc8a8854ee7334a52e48fe53dda22b54058431", "filename": "tests/ui/lint/forget_copy.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e280df556dbbe4d25c3a7f29f6e7fee44c543e0b/tests%2Fui%2Flint%2Fforget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e280df556dbbe4d25c3a7f29f6e7fee44c543e0b/tests%2Fui%2Flint%2Fforget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforget_copy.stderr?ref=e280df556dbbe4d25c3a7f29f6e7fee44c543e0b", "patch": "@@ -6,6 +6,7 @@ LL |     forget(s1);\n    |            |\n    |            argument has type `SomeStruct`\n    |\n+   = note: use `let _ = ...` to ignore the expression or result\n note: the lint level is defined here\n   --> $DIR/forget_copy.rs:3:9\n    |\n@@ -19,6 +20,8 @@ LL |     forget(s2);\n    |     ^^^^^^^--^\n    |            |\n    |            argument has type `SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_copy.rs:36:5\n@@ -28,6 +31,7 @@ LL |     forget(s3);\n    |            |\n    |            argument has type `&SomeStruct`\n    |\n+   = note: use `let _ = ...` to ignore the expression or result\n    = note: `#[warn(forget_ref)]` on by default\n \n warning: calls to `std::mem::forget` with a value that implements `Copy` does nothing\n@@ -37,6 +41,8 @@ LL |     forget(s4);\n    |     ^^^^^^^--^\n    |            |\n    |            argument has type `SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_copy.rs:38:5\n@@ -45,6 +51,8 @@ LL |     forget(s5);\n    |     ^^^^^^^--^\n    |            |\n    |            argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_copy.rs:50:5\n@@ -53,6 +61,8 @@ LL |     forget(a2);\n    |     ^^^^^^^--^\n    |            |\n    |            argument has type `&AnotherStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_copy.rs:52:5\n@@ -61,6 +71,8 @@ LL |     forget(a3);\n    |     ^^^^^^^--^\n    |            |\n    |            argument has type `&AnotherStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_copy.rs:53:5\n@@ -69,6 +81,8 @@ LL |     forget(a4);\n    |     ^^^^^^^--^\n    |            |\n    |            argument has type `&AnotherStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: 8 warnings emitted\n "}, {"sha": "63fc779198007c0138baffa410d2083f41c98dd7", "filename": "tests/ui/lint/forget_ref.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e280df556dbbe4d25c3a7f29f6e7fee44c543e0b/tests%2Fui%2Flint%2Fforget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e280df556dbbe4d25c3a7f29f6e7fee44c543e0b/tests%2Fui%2Flint%2Fforget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforget_ref.stderr?ref=e280df556dbbe4d25c3a7f29f6e7fee44c543e0b", "patch": "@@ -6,6 +6,7 @@ LL |     forget(&SomeStruct);\n    |            |\n    |            argument has type `&SomeStruct`\n    |\n+   = note: use `let _ = ...` to ignore the expression or result\n note: the lint level is defined here\n   --> $DIR/forget_ref.rs:3:9\n    |\n@@ -19,6 +20,8 @@ LL |     forget(&owned);\n    |     ^^^^^^^------^\n    |            |\n    |            argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_ref.rs:14:5\n@@ -27,6 +30,8 @@ LL |     forget(&&owned);\n    |     ^^^^^^^-------^\n    |            |\n    |            argument has type `&&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_ref.rs:15:5\n@@ -35,6 +40,8 @@ LL |     forget(&mut owned);\n    |     ^^^^^^^----------^\n    |            |\n    |            argument has type `&mut SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_ref.rs:19:5\n@@ -43,6 +50,8 @@ LL |     forget(&*reference1);\n    |     ^^^^^^^------------^\n    |            |\n    |            argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_ref.rs:22:5\n@@ -51,6 +60,8 @@ LL |     forget(reference2);\n    |     ^^^^^^^----------^\n    |            |\n    |            argument has type `&mut SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_ref.rs:25:5\n@@ -59,6 +70,8 @@ LL |     forget(reference3);\n    |     ^^^^^^^----------^\n    |            |\n    |            argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_ref.rs:30:5\n@@ -67,6 +80,8 @@ LL |     forget(&val);\n    |     ^^^^^^^----^\n    |            |\n    |            argument has type `&T`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n   --> $DIR/forget_ref.rs:38:5\n@@ -75,6 +90,8 @@ LL |     std::mem::forget(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^-----------^\n    |                      |\n    |                      argument has type `&SomeStruct`\n+   |\n+   = note: use `let _ = ...` to ignore the expression or result\n \n warning: 9 warnings emitted\n "}]}