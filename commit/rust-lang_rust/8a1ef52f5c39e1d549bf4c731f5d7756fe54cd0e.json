{"sha": "8a1ef52f5c39e1d549bf4c731f5d7756fe54cd0e", "node_id": "C_kwDOAAsO6NoAKDhhMWVmNTJmNWMzOWUxZDU0OWJmNGM3MzFmNWQ3NzU2ZmU1NGNkMGU", "commit": {"author": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2022-05-23T03:22:27Z"}, "committer": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2022-05-31T04:21:42Z"}, "message": "fix(extract_module): Remove redundancy causing else, and also add import fix loop for names", "tree": {"sha": "4656696db05414232749afd9c3847557db063209", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4656696db05414232749afd9c3847557db063209"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a1ef52f5c39e1d549bf4c731f5d7756fe54cd0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a1ef52f5c39e1d549bf4c731f5d7756fe54cd0e", "html_url": "https://github.com/rust-lang/rust/commit/8a1ef52f5c39e1d549bf4c731f5d7756fe54cd0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a1ef52f5c39e1d549bf4c731f5d7756fe54cd0e/comments", "author": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89f449b75df5cf0f73c387c9d8ba507e7aaf060a", "url": "https://api.github.com/repos/rust-lang/rust/commits/89f449b75df5cf0f73c387c9d8ba507e7aaf060a", "html_url": "https://github.com/rust-lang/rust/commit/89f449b75df5cf0f73c387c9d8ba507e7aaf060a"}], "stats": {"total": 81, "additions": 48, "deletions": 33}, "files": [{"sha": "11349b45d3c3f61465f4bb60b0cc42dd32e60724", "filename": "crates/ide-assists/src/handlers/extract_module.rs", "status": "modified", "additions": 48, "deletions": 33, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/8a1ef52f5c39e1d549bf4c731f5d7756fe54cd0e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1ef52f5c39e1d549bf4c731f5d7756fe54cd0e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=8a1ef52f5c39e1d549bf4c731f5d7756fe54cd0e", "patch": "@@ -413,7 +413,10 @@ impl Module {\n                                         ctx,\n                                     )\n                                 {\n-                                    import_paths_to_be_removed.push(import_path);\n+                                    check_intersection_and_push(\n+                                        &mut import_paths_to_be_removed,\n+                                        import_path,\n+                                    );\n                                 }\n                             }\n                         }\n@@ -439,28 +442,10 @@ impl Module {\n                                         ctx,\n                                     )\n                                 {\n-                                    if import_paths_to_be_removed.len() > 0 {\n-                                        // Text ranges recieved here for imports are extended to the\n-                                        // next/previous comma which can cause intersections among them\n-                                        // and later deletion of these can cause panics similar\n-                                        // to reported in #11766. So to mitigate it, we\n-                                        // check for intersection between all current members\n-                                        // and if it exists we combine both text ranges into\n-                                        // one\n-                                        for i in 0..import_paths_to_be_removed.len() {\n-                                            if let Some(_) =\n-                                                import_paths_to_be_removed[i].intersect(import_path)\n-                                            {\n-                                                import_paths_to_be_removed[i] =\n-                                                    import_paths_to_be_removed[i]\n-                                                        .cover(import_path);\n-                                            } else {\n-                                                import_paths_to_be_removed.push(import_path);\n-                                            }\n-                                        }\n-                                    } else {\n-                                        import_paths_to_be_removed.push(import_path);\n-                                    }\n+                                    check_intersection_and_push(\n+                                        &mut import_paths_to_be_removed,\n+                                        import_path,\n+                                    );\n                                 }\n                             }\n                         }\n@@ -572,12 +557,14 @@ impl Module {\n                 }\n \n                 if source_exists_outside_sel_in_same_mod {\n-                    let first_path_in_use_tree = use_tree_str[use_tree_str.len() - 1].to_string();\n-                    if !first_path_in_use_tree.contains(\"super\")\n-                        && !first_path_in_use_tree.contains(\"crate\")\n-                    {\n-                        let super_path = make::ext::ident_path(\"super\");\n-                        use_tree_str.push(super_path);\n+                    if let Some(first_path_in_use_tree) = use_tree_str.last() {\n+                        let first_path_in_use_tree_str = first_path_in_use_tree.to_string();\n+                        if !first_path_in_use_tree_str.contains(\"super\")\n+                            && !first_path_in_use_tree_str.contains(\"crate\")\n+                        {\n+                            let super_path = make::ext::ident_path(\"super\");\n+                            use_tree_str.push(super_path);\n+                        }\n                     }\n                 }\n \n@@ -593,10 +580,12 @@ impl Module {\n \n             if !(!exists_outside_sel && exists_inside_sel && source_exists_outside_sel_in_same_mod)\n             {\n-                let first_path_in_use_tree = use_tree_str[0].to_string();\n-                if first_path_in_use_tree.contains(\"super\") {\n-                    let super_path = make::ext::ident_path(\"super\");\n-                    use_tree_str.insert(0, super_path)\n+                if let Some(first_path_in_use_tree) = use_tree_str.first() {\n+                    let first_path_in_use_tree_str = first_path_in_use_tree.to_string();\n+                    if first_path_in_use_tree_str.contains(\"super\") {\n+                        let super_path = make::ext::ident_path(\"super\");\n+                        use_tree_str.insert(0, super_path)\n+                    }\n                 }\n             }\n \n@@ -658,6 +647,32 @@ impl Module {\n     }\n }\n \n+fn check_intersection_and_push(\n+    import_paths_to_be_removed: &mut Vec<TextRange>,\n+    import_path: TextRange,\n+) {\n+    if import_paths_to_be_removed.len() > 0 {\n+        // Text ranges recieved here for imports are extended to the\n+        // next/previous comma which can cause intersections among them\n+        // and later deletion of these can cause panics similar\n+        // to reported in #11766. So to mitigate it, we\n+        // check for intersection between all current members\n+        // and if it exists we combine both text ranges into\n+        // one\n+        let r = import_paths_to_be_removed\n+            .into_iter()\n+            .position(|it| it.intersect(import_path).is_some());\n+        match r {\n+            Some(it) => {\n+                import_paths_to_be_removed[it] = import_paths_to_be_removed[it].cover(import_path)\n+            }\n+            None => import_paths_to_be_removed.push(import_path),\n+        }\n+    } else {\n+        import_paths_to_be_removed.push(import_path);\n+    }\n+}\n+\n fn does_source_exists_outside_sel_in_same_mod(\n     def: Definition,\n     ctx: &AssistContext,"}]}