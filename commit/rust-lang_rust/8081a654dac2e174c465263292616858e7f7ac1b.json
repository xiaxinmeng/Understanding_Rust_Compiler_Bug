{"sha": "8081a654dac2e174c465263292616858e7f7ac1b", "node_id": "C_kwDOAAsO6NoAKDgwODFhNjU0ZGFjMmUxNzRjNDY1MjYzMjkyNjE2ODU4ZTdmN2FjMWI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-05T11:34:55Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-05T11:38:22Z"}, "message": "feat: Closure capture inlay hints", "tree": {"sha": "b9ed67594d82016ac30cabf2648f39acfcad07ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9ed67594d82016ac30cabf2648f39acfcad07ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8081a654dac2e174c465263292616858e7f7ac1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8081a654dac2e174c465263292616858e7f7ac1b", "html_url": "https://github.com/rust-lang/rust/commit/8081a654dac2e174c465263292616858e7f7ac1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8081a654dac2e174c465263292616858e7f7ac1b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dd94d3b078fa524272f942f69239a9564532fe1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd94d3b078fa524272f942f69239a9564532fe1", "html_url": "https://github.com/rust-lang/rust/commit/0dd94d3b078fa524272f942f69239a9564532fe1"}], "stats": {"total": 278, "additions": 264, "deletions": 14}, "files": [{"sha": "a2c72e5751df4a4848de90ce211a5597fb114ee8", "filename": "crates/hir-ty/src/infer/closure.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8081a654dac2e174c465263292616858e7f7ac1b/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8081a654dac2e174c465263292616858e7f7ac1b/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs?ref=8081a654dac2e174c465263292616858e7f7ac1b", "patch": "@@ -148,7 +148,7 @@ impl HirPlace {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n-pub(crate) enum CaptureKind {\n+pub enum CaptureKind {\n     ByRef(BorrowKind),\n     ByValue,\n }\n@@ -166,6 +166,10 @@ impl CapturedItem {\n         self.place.local\n     }\n \n+    pub fn kind(&self) -> CaptureKind {\n+        self.kind\n+    }\n+\n     pub fn display_kind(&self) -> &'static str {\n         match self.kind {\n             CaptureKind::ByRef(k) => match k {"}, {"sha": "28a2bf2838db3f2d397437ef3f590153d9707158", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8081a654dac2e174c465263292616858e7f7ac1b/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8081a654dac2e174c465263292616858e7f7ac1b/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=8081a654dac2e174c465263292616858e7f7ac1b", "patch": "@@ -61,8 +61,9 @@ pub use autoderef::autoderef;\n pub use builder::{ParamKind, TyBuilder};\n pub use chalk_ext::*;\n pub use infer::{\n-    closure::CapturedItem, could_coerce, could_unify, Adjust, Adjustment, AutoBorrow, BindingMode,\n-    InferenceDiagnostic, InferenceResult, OverloadedDeref, PointerCast,\n+    closure::{CaptureKind, CapturedItem},\n+    could_coerce, could_unify, Adjust, Adjustment, AutoBorrow, BindingMode, InferenceDiagnostic,\n+    InferenceResult, OverloadedDeref, PointerCast,\n };\n pub use interner::Interner;\n pub use lower::{"}, {"sha": "84608777054f3cdc73142e15b622cc1876cce032", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8081a654dac2e174c465263292616858e7f7ac1b/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8081a654dac2e174c465263292616858e7f7ac1b/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=8081a654dac2e174c465263292616858e7f7ac1b", "patch": "@@ -2611,6 +2611,10 @@ impl LocalSource {\n         self.source.file_id.original_file(db.upcast())\n     }\n \n+    pub fn file(&self) -> HirFileId {\n+        self.source.file_id\n+    }\n+\n     pub fn name(&self) -> Option<ast::Name> {\n         self.source.value.name()\n     }\n@@ -3232,6 +3236,21 @@ impl ClosureCapture {\n         Local { parent: self.owner, binding_id: self.capture.local() }\n     }\n \n+    pub fn kind(&self) -> CaptureKind {\n+        match self.capture.kind() {\n+            hir_ty::CaptureKind::ByRef(\n+                hir_ty::mir::BorrowKind::Shallow | hir_ty::mir::BorrowKind::Shared,\n+            ) => CaptureKind::SharedRef,\n+            hir_ty::CaptureKind::ByRef(hir_ty::mir::BorrowKind::Unique) => {\n+                CaptureKind::UniqueSharedRef\n+            }\n+            hir_ty::CaptureKind::ByRef(hir_ty::mir::BorrowKind::Mut { .. }) => {\n+                CaptureKind::MutableRef\n+            }\n+            hir_ty::CaptureKind::ByValue => CaptureKind::Move,\n+        }\n+    }\n+\n     pub fn display_kind(&self) -> &'static str {\n         self.capture.display_kind()\n     }\n@@ -3241,6 +3260,13 @@ impl ClosureCapture {\n     }\n }\n \n+pub enum CaptureKind {\n+    SharedRef,\n+    UniqueSharedRef,\n+    MutableRef,\n+    Move,\n+}\n+\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct Type {\n     env: Arc<TraitEnvironment>,"}, {"sha": "c326688ae6a9ed3d371ac204523728967fe170ad", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8081a654dac2e174c465263292616858e7f7ac1b/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8081a654dac2e174c465263292616858e7f7ac1b/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=8081a654dac2e174c465263292616858e7f7ac1b", "patch": "@@ -20,16 +20,17 @@ use text_edit::TextEdit;\n \n use crate::{navigation_target::TryToNav, FileId};\n \n-mod closing_brace;\n-mod implicit_static;\n-mod fn_lifetime_fn;\n-mod closure_ret;\n mod adjustment;\n-mod chaining;\n-mod param_name;\n-mod binding_mode;\n mod bind_pat;\n+mod binding_mode;\n+mod chaining;\n+mod closing_brace;\n+mod closure_ret;\n+mod closure_captures;\n mod discriminant;\n+mod fn_lifetime_fn;\n+mod implicit_static;\n+mod param_name;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct InlayHintsConfig {\n@@ -42,6 +43,7 @@ pub struct InlayHintsConfig {\n     pub adjustment_hints_mode: AdjustmentHintsMode,\n     pub adjustment_hints_hide_outside_unsafe: bool,\n     pub closure_return_type_hints: ClosureReturnTypeHints,\n+    pub closure_capture_hints: bool,\n     pub binding_mode_hints: bool,\n     pub lifetime_elision_hints: LifetimeElisionHints,\n     pub param_names_for_lifetime_elision_hints: bool,\n@@ -88,6 +90,8 @@ pub enum AdjustmentHintsMode {\n     PreferPostfix,\n }\n \n+// FIXME: Clean up this mess, the kinds are mainly used for setting different rendering properties in the lsp layer\n+// We should probably turns this into such a property holding struct. Or clean this up in some other form.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum InlayKind {\n     BindingMode,\n@@ -98,6 +102,7 @@ pub enum InlayKind {\n     Adjustment,\n     AdjustmentPostfix,\n     Lifetime,\n+    ClosureCapture,\n     Parameter,\n     Type,\n     Discriminant,\n@@ -444,10 +449,10 @@ fn hints(\n                     ast::Expr::MethodCallExpr(it) => {\n                         param_name::hints(hints, sema, config, ast::Expr::from(it))\n                     }\n-                    ast::Expr::ClosureExpr(it) => closure_ret::hints(hints, famous_defs, config, file_id, it),\n-                    // We could show reborrows for all expressions, but usually that is just noise to the user\n-                    // and the main point here is to show why \"moving\" a mutable reference doesn't necessarily move it\n-                    // ast::Expr::PathExpr(_) => reborrow_hints(hints, sema, config, &expr),\n+                    ast::Expr::ClosureExpr(it) => {\n+                        closure_captures::hints(hints, famous_defs, config, file_id, it.clone());\n+                        closure_ret::hints(hints, famous_defs, config, file_id, it)\n+                    },\n                     _ => None,\n                 }\n             },\n@@ -535,6 +540,7 @@ mod tests {\n         chaining_hints: false,\n         lifetime_elision_hints: LifetimeElisionHints::Never,\n         closure_return_type_hints: ClosureReturnTypeHints::Never,\n+        closure_capture_hints: false,\n         adjustment_hints: AdjustmentHints::Never,\n         adjustment_hints_mode: AdjustmentHintsMode::Prefix,\n         adjustment_hints_hide_outside_unsafe: false,"}, {"sha": "ddede5239e525f52db4b42d5b4b53c2f72ccc522", "filename": "crates/ide/src/inlay_hints/closure_captures.rs", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/8081a654dac2e174c465263292616858e7f7ac1b/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8081a654dac2e174c465263292616858e7f7ac1b/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_captures.rs?ref=8081a654dac2e174c465263292616858e7f7ac1b", "patch": "@@ -0,0 +1,193 @@\n+//! Implementation of \"closure return type\" inlay hints.\n+//!\n+//! Tests live in [`bind_pat`][super::bind_pat] module.\n+use ide_db::{base_db::FileId, famous_defs::FamousDefs};\n+use syntax::ast::{self, AstNode};\n+use text_edit::{TextRange, TextSize};\n+\n+use crate::{InlayHint, InlayHintLabel, InlayHintsConfig, InlayKind};\n+\n+pub(super) fn hints(\n+    acc: &mut Vec<InlayHint>,\n+    FamousDefs(sema, _): &FamousDefs<'_, '_>,\n+    config: &InlayHintsConfig,\n+    _file_id: FileId,\n+    closure: ast::ClosureExpr,\n+) -> Option<()> {\n+    if !config.closure_capture_hints {\n+        return None;\n+    }\n+    let ty = &sema.type_of_expr(&closure.clone().into())?.original;\n+    let c = ty.as_closure()?;\n+    let captures = c.captured_items(sema.db);\n+\n+    if captures.is_empty() {\n+        return None;\n+    }\n+\n+    let move_kw_range = match closure.move_token() {\n+        Some(t) => t.text_range(),\n+        None => {\n+            let range = closure.syntax().first_token()?.prev_token()?.text_range();\n+            let range = TextRange::new(range.end() - TextSize::from(1), range.end());\n+            acc.push(InlayHint {\n+                range,\n+                kind: InlayKind::ClosureCapture,\n+                label: InlayHintLabel::simple(\"move\", None, None),\n+                text_edit: None,\n+            });\n+            range\n+        }\n+    };\n+    acc.push(InlayHint {\n+        range: move_kw_range,\n+        kind: InlayKind::ClosureCapture,\n+        label: InlayHintLabel::from(\"(\"),\n+        text_edit: None,\n+    });\n+    let last = captures.len() - 1;\n+    for (idx, capture) in captures.into_iter().enumerate() {\n+        let local = capture.local();\n+        let source = local.primary_source(sema.db);\n+\n+        // force cache the source file, otherwise sema lookup will potentially panic\n+        _ = sema.parse_or_expand(source.file());\n+\n+        acc.push(InlayHint {\n+            range: move_kw_range,\n+            kind: InlayKind::ClosureCapture,\n+            label: InlayHintLabel::simple(\n+                format!(\n+                    \"{}{}\",\n+                    match capture.kind() {\n+                        hir::CaptureKind::SharedRef => \"&\",\n+                        hir::CaptureKind::UniqueSharedRef => \"&unique \",\n+                        hir::CaptureKind::MutableRef => \"&mut \",\n+                        hir::CaptureKind::Move => \"\",\n+                    },\n+                    local.name(sema.db)\n+                ),\n+                None,\n+                source.name().and_then(|name| sema.original_range_opt(name.syntax())),\n+            ),\n+            text_edit: None,\n+        });\n+\n+        if idx != last {\n+            acc.push(InlayHint {\n+                range: move_kw_range,\n+                kind: InlayKind::ClosureCapture,\n+                label: InlayHintLabel::simple(\", \", None, None),\n+                text_edit: None,\n+            });\n+        }\n+    }\n+    acc.push(InlayHint {\n+        range: move_kw_range,\n+        kind: InlayKind::ClosureCapture,\n+        label: InlayHintLabel::from(\")\"),\n+        text_edit: None,\n+    });\n+\n+    Some(())\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::{\n+        inlay_hints::tests::{check_with_config, DISABLED_CONFIG},\n+        InlayHintsConfig,\n+    };\n+\n+    #[test]\n+    fn all_capture_kinds() {\n+        check_with_config(\n+            InlayHintsConfig { closure_capture_hints: true, ..DISABLED_CONFIG },\n+            r#\"\n+//- minicore: copy, derive\n+\n+\n+#[derive(Copy, Clone)]\n+struct Copy;\n+\n+struct NonCopy;\n+\n+fn main() {\n+    let foo = Copy;\n+    let bar = NonCopy;\n+    let mut baz = NonCopy;\n+    let qux = &mut NonCopy;\n+    || {\n+// ^ move\n+// ^ (\n+// ^ &foo\n+// ^ ,\n+// ^ bar\n+// ^ ,\n+// ^ baz\n+// ^ ,\n+// ^ qux\n+// ^ )\n+        foo;\n+        bar;\n+        baz;\n+        qux;\n+    };\n+    || {\n+// ^ move\n+// ^ (\n+// ^ &foo\n+// ^ ,\n+// ^ &bar\n+// ^ ,\n+// ^ &baz\n+// ^ ,\n+// ^ &qux\n+// ^ )\n+        &foo;\n+        &bar;\n+        &baz;\n+        &qux;\n+    };\n+    || {\n+// ^ move\n+// ^ (\n+// ^ &mut baz\n+// ^ )\n+        &mut baz;\n+    };\n+    // FIXME: &mut qux should be &unique qux\n+    || {\n+// ^ move\n+// ^ (\n+// ^ &mut baz\n+// ^ ,\n+// ^ &mut qux\n+// ^ )\n+        baz = NonCopy;\n+        *qux = NonCopy;\n+    };\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn move_token() {\n+        check_with_config(\n+            InlayHintsConfig { closure_capture_hints: true, ..DISABLED_CONFIG },\n+            r#\"\n+//- minicore: copy, derive\n+fn main() {\n+    let foo = u32;\n+    move || {\n+//  ^^^^ (\n+//  ^^^^ foo\n+//  ^^^^ )\n+        foo;\n+    };\n+}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "4b6e7da9a35e6adb69f7a6b6a471d0cde26cc02d", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8081a654dac2e174c465263292616858e7f7ac1b/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8081a654dac2e174c465263292616858e7f7ac1b/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=8081a654dac2e174c465263292616858e7f7ac1b", "patch": "@@ -122,6 +122,7 @@ impl StaticIndex<'_> {\n                     param_names_for_lifetime_elision_hints: false,\n                     binding_mode_hints: false,\n                     max_length: Some(25),\n+                    closure_capture_hints: false,\n                     closing_brace_hints_min_lines: Some(25),\n                 },\n                 file_id,"}, {"sha": "251d09d0f65873a6bcf98d6e54c90d5725604dd3", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8081a654dac2e174c465263292616858e7f7ac1b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8081a654dac2e174c465263292616858e7f7ac1b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=8081a654dac2e174c465263292616858e7f7ac1b", "patch": "@@ -338,6 +338,8 @@ config_data! {\n         /// Minimum number of lines required before the `}` until the hint is shown (set to 0 or 1\n         /// to always show them).\n         inlayHints_closingBraceHints_minLines: usize               = \"25\",\n+        /// Whether to show inlay hints for closure captures.\n+        inlayHints_closureCaptureHints_enable: bool                          = \"false\",\n         /// Whether to show inlay type hints for return types of closures.\n         inlayHints_closureReturnTypeHints_enable: ClosureReturnTypeHintsDef  = \"\\\"never\\\"\",\n         /// Closure notation in type and chaining inlay hints.\n@@ -1312,6 +1314,7 @@ impl Config {\n                 ClosureStyle::WithId => hir::ClosureStyle::ClosureWithId,\n                 ClosureStyle::Hide => hir::ClosureStyle::Hide,\n             },\n+            closure_capture_hints: self.data.inlayHints_closureCaptureHints_enable,\n             adjustment_hints: match self.data.inlayHints_expressionAdjustmentHints_enable {\n                 AdjustmentHintsDef::Always => ide::AdjustmentHints::Always,\n                 AdjustmentHintsDef::Never => match self.data.inlayHints_reborrowHints_enable {"}, {"sha": "1b7fd558906cd4ad0a0b7874879ea41cd0e8089b", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8081a654dac2e174c465263292616858e7f7ac1b/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8081a654dac2e174c465263292616858e7f7ac1b/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=8081a654dac2e174c465263292616858e7f7ac1b", "patch": "@@ -456,6 +456,7 @@ pub(crate) fn inlay_hint(\n             | InlayKind::BindingMode => position(line_index, inlay_hint.range.start()),\n             // after annotated thing\n             InlayKind::ClosureReturnType\n+            | InlayKind::ClosureCapture\n             | InlayKind::Type\n             | InlayKind::Discriminant\n             | InlayKind::Chaining\n@@ -469,6 +470,7 @@ pub(crate) fn inlay_hint(\n             InlayKind::Type => !render_colons,\n             InlayKind::Chaining | InlayKind::ClosingBrace => true,\n             InlayKind::ClosingParenthesis\n+            | InlayKind::ClosureCapture\n             | InlayKind::Discriminant\n             | InlayKind::OpeningParenthesis\n             | InlayKind::BindingMode\n@@ -490,6 +492,9 @@ pub(crate) fn inlay_hint(\n             | InlayKind::Type\n             | InlayKind::Discriminant\n             | InlayKind::ClosingBrace => false,\n+            InlayKind::ClosureCapture => {\n+                matches!(&label, lsp_types::InlayHintLabel::String(s) if s == \")\")\n+            }\n             InlayKind::BindingMode => {\n                 matches!(&label, lsp_types::InlayHintLabel::String(s) if s != \"&\")\n             }\n@@ -501,6 +506,7 @@ pub(crate) fn inlay_hint(\n                 Some(lsp_types::InlayHintKind::TYPE)\n             }\n             InlayKind::ClosingParenthesis\n+            | InlayKind::ClosureCapture\n             | InlayKind::Discriminant\n             | InlayKind::OpeningParenthesis\n             | InlayKind::BindingMode"}, {"sha": "187be26f175f7c0fb076b0826d611be345ef2c9c", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8081a654dac2e174c465263292616858e7f7ac1b/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/8081a654dac2e174c465263292616858e7f7ac1b/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=8081a654dac2e174c465263292616858e7f7ac1b", "patch": "@@ -474,6 +474,11 @@ Whether to show inlay hints after a closing `}` to indicate what item it belongs\n Minimum number of lines required before the `}` until the hint is shown (set to 0 or 1\n to always show them).\n --\n+[[rust-analyzer.inlayHints.closureCaptureHints.enable]]rust-analyzer.inlayHints.closureCaptureHints.enable (default: `false`)::\n++\n+--\n+Whether to show inlay hints for closure captures.\n+--\n [[rust-analyzer.inlayHints.closureReturnTypeHints.enable]]rust-analyzer.inlayHints.closureReturnTypeHints.enable (default: `\"never\"`)::\n +\n --"}, {"sha": "7330cf18b4d96a4b8f9bd588f6ccd69add5c60c6", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8081a654dac2e174c465263292616858e7f7ac1b/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/8081a654dac2e174c465263292616858e7f7ac1b/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=8081a654dac2e174c465263292616858e7f7ac1b", "patch": "@@ -1032,6 +1032,11 @@\n                     \"type\": \"integer\",\n                     \"minimum\": 0\n                 },\n+                \"rust-analyzer.inlayHints.closureCaptureHints.enable\": {\n+                    \"markdownDescription\": \"Whether to show inlay hints for closure captures.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.inlayHints.closureReturnTypeHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for return types of closures.\",\n                     \"default\": \"never\","}]}