{"sha": "20a41519fd92c50c44132870a95415159a1d09ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYTQxNTE5ZmQ5MmM1MGM0NDEzMjg3MGE5NTQxNTE1OWExZDA5ZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-26T01:41:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-26T01:41:22Z"}, "message": "auto merge of #14430 : kballard/rust/squelch_os_warning, r=alexcrichton\n\nClean up the re-exports of various modules in `std::std`, and remove the\r\n`realstd` stuff from `std::rt::args`.", "tree": {"sha": "5618138209ab893c756265bd812e571a266aecb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5618138209ab893c756265bd812e571a266aecb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20a41519fd92c50c44132870a95415159a1d09ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20a41519fd92c50c44132870a95415159a1d09ea", "html_url": "https://github.com/rust-lang/rust/commit/20a41519fd92c50c44132870a95415159a1d09ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20a41519fd92c50c44132870a95415159a1d09ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db2ddb1bba9a78b0791266805bdeca9f3fce89fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/db2ddb1bba9a78b0791266805bdeca9f3fce89fc", "html_url": "https://github.com/rust-lang/rust/commit/db2ddb1bba9a78b0791266805bdeca9f3fce89fc"}, {"sha": "009d898a9422ac04c1aa60c0e9aff3abc5fa4672", "url": "https://api.github.com/repos/rust-lang/rust/commits/009d898a9422ac04c1aa60c0e9aff3abc5fa4672", "html_url": "https://github.com/rust-lang/rust/commit/009d898a9422ac04c1aa60c0e9aff3abc5fa4672"}], "stats": {"total": 97, "additions": 27, "deletions": 70}, "files": [{"sha": "d3e250be9a3234e28014ec6e06f791e2891fc998", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20a41519fd92c50c44132870a95415159a1d09ea/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a41519fd92c50c44132870a95415159a1d09ea/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=20a41519fd92c50c44132870a95415159a1d09ea", "patch": "@@ -859,7 +859,7 @@ mod test {\n     })\n \n     iotest!(fn file_test_io_seek_shakedown() {\n-        use std::str;          // 01234567890123\n+        use str;          // 01234567890123\n         let initial_msg =   \"qwer-asdf-zxcv\";\n         let chunk_one: &str = \"qwer\";\n         let chunk_two: &str = \"asdf\";\n@@ -947,7 +947,7 @@ mod test {\n     })\n \n     iotest!(fn file_test_directoryinfo_readdir() {\n-        use std::str;\n+        use str;\n         let tmpdir = tmpdir();\n         let dir = &tmpdir.join(\"di_readdir\");\n         check!(mkdir(dir, io::UserRWX));"}, {"sha": "7eb495a6f68dc6f741a48dc03a2b5c7bf8e50da4", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20a41519fd92c50c44132870a95415159a1d09ea/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a41519fd92c50c44132870a95415159a1d09ea/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=20a41519fd92c50c44132870a95415159a1d09ea", "patch": "@@ -14,7 +14,7 @@\n \n use prelude::*;\n \n-use std::str;\n+use str;\n use fmt;\n use io::IoResult;\n use io;"}, {"sha": "cf1ebc687a72bbe1a0fc015521bc3ece00a04170", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/20a41519fd92c50c44132870a95415159a1d09ea/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a41519fd92c50c44132870a95415159a1d09ea/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=20a41519fd92c50c44132870a95415159a1d09ea", "patch": "@@ -266,24 +266,21 @@ pub mod rt;\n // can be resolved within libstd.\n #[doc(hidden)]\n mod std {\n+    // mods used for deriving\n     pub use clone;\n     pub use cmp;\n-    pub use comm;\n-    pub use fmt;\n     pub use hash;\n-    pub use io;\n-    pub use kinds;\n-    pub use local_data;\n-    pub use option;\n-    pub use os;\n-    pub use rt;\n-    pub use str;\n-    pub use to_str;\n-    pub use ty;\n-    pub use unstable;\n-    pub use vec;\n \n+    pub use comm; // used for select!()\n+    pub use fmt; // used for any formatting strings\n+    pub use io; // used for println!()\n+    pub use local_data; // used for local_data_key!()\n+    pub use option; // used for bitflags!()\n+    pub use rt; // used for fail!()\n+    pub use vec; // used for vec![]\n+\n+    // The test runner calls ::std::os::args() but really wants realstd\n+    #[cfg(test)] pub use os = realstd::os;\n     // The test runner requires std::slice::Vector, so re-export std::slice just for it.\n     #[cfg(test)] pub use slice;\n-    #[cfg(test)] pub use string;\n }"}, {"sha": "dbddee8fce28658291fd7a6cdd481ceecda286da", "filename": "src/libstd/os.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/20a41519fd92c50c44132870a95415159a1d09ea/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a41519fd92c50c44132870a95415159a1d09ea/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=20a41519fd92c50c44132870a95415159a1d09ea", "patch": "@@ -918,17 +918,10 @@ extern \"system\" {\n ///\n /// The arguments are interpreted as utf-8, with invalid bytes replaced with \\uFFFD.\n /// See `str::from_utf8_lossy` for details.\n-#[cfg(not(test))]\n pub fn args() -> Vec<String> {\n     real_args()\n }\n \n-#[cfg(test)]\n-#[allow(missing_doc)]\n-pub fn args() -> ::realstd::vec::Vec<::realstd::string::String> {\n-    ::realstd::os::args()\n-}\n-\n /// Returns the arguments which this program was started with (normally passed\n /// via the command line) as byte vectors.\n pub fn args_as_bytes() -> Vec<Vec<u8>> {\n@@ -1328,7 +1321,7 @@ impl Drop for MemoryMap {\n \n #[cfg(target_os = \"linux\")]\n pub mod consts {\n-    pub use std::os::arch_consts::ARCH;\n+    pub use os::arch_consts::ARCH;\n \n     pub static FAMILY: &'static str = \"unix\";\n \n@@ -1359,7 +1352,7 @@ pub mod consts {\n \n #[cfg(target_os = \"macos\")]\n pub mod consts {\n-    pub use std::os::arch_consts::ARCH;\n+    pub use os::arch_consts::ARCH;\n \n     pub static FAMILY: &'static str = \"unix\";\n \n@@ -1390,7 +1383,7 @@ pub mod consts {\n \n #[cfg(target_os = \"freebsd\")]\n pub mod consts {\n-    pub use std::os::arch_consts::ARCH;\n+    pub use os::arch_consts::ARCH;\n \n     pub static FAMILY: &'static str = \"unix\";\n \n@@ -1421,7 +1414,7 @@ pub mod consts {\n \n #[cfg(target_os = \"android\")]\n pub mod consts {\n-    pub use std::os::arch_consts::ARCH;\n+    pub use os::arch_consts::ARCH;\n \n     pub static FAMILY: &'static str = \"unix\";\n \n@@ -1452,7 +1445,7 @@ pub mod consts {\n \n #[cfg(target_os = \"win32\")]\n pub mod consts {\n-    pub use std::os::arch_consts::ARCH;\n+    pub use os::arch_consts::ARCH;\n \n     pub static FAMILY: &'static str = \"windows\";\n \n@@ -1507,7 +1500,7 @@ mod tests {\n     use prelude::*;\n     use c_str::ToCStr;\n     use option;\n-    use os::{env, getcwd, getenv, make_absolute, args};\n+    use os::{env, getcwd, getenv, make_absolute};\n     use os::{setenv, unsetenv};\n     use os;\n     use rand::Rng;\n@@ -1518,12 +1511,6 @@ mod tests {\n         debug!(\"{}\", os::last_os_error());\n     }\n \n-    #[test]\n-    pub fn test_args() {\n-        let a = args();\n-        assert!(a.len() >= 1);\n-    }\n-\n     fn make_rand_name() -> String {\n         let mut rng = rand::task_rng();\n         let n = format_strbuf!(\"TEST{}\", rng.gen_ascii_str(10u).as_slice());"}, {"sha": "e016c9da418e1ccab4c7b9ad80e8837b4b8cacd3", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 7, "deletions": 34, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/20a41519fd92c50c44132870a95415159a1d09ea/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a41519fd92c50c44132870a95415159a1d09ea/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=20a41519fd92c50c44132870a95415159a1d09ea", "patch": "@@ -22,47 +22,23 @@\n \n use option::Option;\n use vec::Vec;\n-#[cfg(test)] use option::{Some, None};\n-#[cfg(test)] use realstd;\n-#[cfg(test)] use realargs = realstd::rt::args;\n \n /// One-time global initialization.\n-#[cfg(not(test))]\n pub unsafe fn init(argc: int, argv: **u8) { imp::init(argc, argv) }\n-#[cfg(test)]\n-pub unsafe fn init(argc: int, argv: **u8) { realargs::init(argc, argv) }\n \n /// One-time global cleanup.\n-#[cfg(not(test))] pub unsafe fn cleanup() { imp::cleanup() }\n-#[cfg(test)]      pub unsafe fn cleanup() { realargs::cleanup() }\n+pub unsafe fn cleanup() { imp::cleanup() }\n \n /// Take the global arguments from global storage.\n-#[cfg(not(test))] pub fn take() -> Option<Vec<Vec<u8>>> { imp::take() }\n-#[cfg(test)]      pub fn take() -> Option<Vec<Vec<u8>>> {\n-    match realargs::take() {\n-        realstd::option::Some(v) => Some(unsafe{ ::mem::transmute(v) }),\n-        realstd::option::None => None,\n-    }\n-}\n+pub fn take() -> Option<Vec<Vec<u8>>> { imp::take() }\n \n /// Give the global arguments to global storage.\n ///\n /// It is an error if the arguments already exist.\n-#[cfg(not(test))] pub fn put(args: Vec<Vec<u8>>) { imp::put(args) }\n-#[cfg(test)]      pub fn put(args: Vec<Vec<u8>>) {\n-    realargs::put(unsafe {\n-        ::mem::transmute(args)\n-    })\n-}\n+pub fn put(args: Vec<Vec<u8>>) { imp::put(args) }\n \n /// Make a clone of the global arguments.\n-#[cfg(not(test))] pub fn clone() -> Option<Vec<Vec<u8>>> { imp::clone() }\n-#[cfg(test)]      pub fn clone() -> Option<Vec<Vec<u8>>> {\n-    match realargs::clone() {\n-        realstd::option::Some(v) => Some(unsafe { ::mem::transmute(v) }),\n-        realstd::option::None => None,\n-    }\n-}\n+pub fn clone() -> Option<Vec<Vec<u8>>> { imp::clone() }\n \n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"android\")]\n@@ -75,18 +51,16 @@ mod imp {\n     use unstable::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n     use mem;\n     use vec::Vec;\n-    #[cfg(not(test))] use ptr::RawPtr;\n+    use ptr::RawPtr;\n \n     static mut global_args_ptr: uint = 0;\n     static mut lock: StaticNativeMutex = NATIVE_MUTEX_INIT;\n \n-    #[cfg(not(test))]\n     pub unsafe fn init(argc: int, argv: **u8) {\n         let args = load_argc_and_argv(argc, argv);\n         put(args);\n     }\n \n-    #[cfg(not(test))]\n     pub unsafe fn cleanup() {\n         rtassert!(take().is_some());\n         lock.destroy();\n@@ -127,7 +101,6 @@ mod imp {\n     }\n \n     // Copied from `os`.\n-    #[cfg(not(test))]\n     unsafe fn load_argc_and_argv(argc: int, argv: **u8) -> Vec<Vec<u8>> {\n         use c_str::CString;\n         use ptr::RawPtr;\n@@ -173,8 +146,8 @@ mod imp {\n     }\n }\n \n-#[cfg(target_os = \"macos\", not(test))]\n-#[cfg(target_os = \"win32\", not(test))]\n+#[cfg(target_os = \"macos\")]\n+#[cfg(target_os = \"win32\")]\n mod imp {\n     use option::Option;\n     use vec::Vec;"}]}