{"sha": "b7294a4305e1687eed0c17e4a5d92e5619048746", "node_id": "C_kwDOAAsO6NoAKGI3Mjk0YTQzMDVlMTY4N2VlZDBjMTdlNGE1ZDkyZTU2MTkwNDg3NDY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-02-24T13:36:14Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-02-26T18:13:41Z"}, "message": "a bit of FileDescriptor trait cleanup", "tree": {"sha": "895d79d7d57096c4f6a4a944073997ccd26e5f29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/895d79d7d57096c4f6a4a944073997ccd26e5f29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7294a4305e1687eed0c17e4a5d92e5619048746", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7294a4305e1687eed0c17e4a5d92e5619048746", "html_url": "https://github.com/rust-lang/rust/commit/b7294a4305e1687eed0c17e4a5d92e5619048746", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7294a4305e1687eed0c17e4a5d92e5619048746/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f88f4ce9b8f38e3bfc5c07e14a4bb55999b6827", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f88f4ce9b8f38e3bfc5c07e14a4bb55999b6827", "html_url": "https://github.com/rust-lang/rust/commit/3f88f4ce9b8f38e3bfc5c07e14a4bb55999b6827"}], "stats": {"total": 66, "additions": 35, "deletions": 31}, "files": [{"sha": "21a413002d06ed75ca16753b724b39a38ce2bf9f", "filename": "src/tools/miri/src/helpers.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b7294a4305e1687eed0c17e4a5d92e5619048746/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7294a4305e1687eed0c17e4a5d92e5619048746/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs?ref=b7294a4305e1687eed0c17e4a5d92e5619048746", "patch": "@@ -1,5 +1,6 @@\n pub mod convert;\n \n+use std::any::Any;\n use std::cmp;\n use std::iter;\n use std::num::NonZeroUsize;\n@@ -23,7 +24,23 @@ use rand::RngCore;\n \n use crate::*;\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+/// A trait to work around not having trait object upcasting:\n+/// Add `AsAny` as supertrait and your trait objects can be turned into `&dyn Any` on which you can\n+/// then call `downcast`.\n+pub trait AsAny: Any {\n+    fn as_any(&self) -> &dyn Any;\n+    fn as_any_mut(&mut self) -> &mut dyn Any;\n+}\n+impl<T: Any> AsAny for T {\n+    #[inline(always)]\n+    fn as_any(&self) -> &dyn Any {\n+        self\n+    }\n+    #[inline(always)]\n+    fn as_any_mut(&mut self) -> &mut dyn Any {\n+        self\n+    }\n+}\n \n // This mapping should match `decode_error_kind` in\n // <https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/mod.rs>.\n@@ -119,6 +136,7 @@ fn try_resolve_did(tcx: TyCtxt<'_>, path: &[&str], namespace: Option<Namespace>)\n     }\n }\n \n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Checks if the given crate/module exists.\n     fn have_module(&self, path: &[&str]) -> bool {"}, {"sha": "b3bdda71aa7061cf5540eee8135fdbd44f87e9a7", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b7294a4305e1687eed0c17e4a5d92e5619048746/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7294a4305e1687eed0c17e4a5d92e5619048746/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=b7294a4305e1687eed0c17e4a5d92e5619048746", "patch": "@@ -17,25 +17,20 @@ use crate::shims::os_str::bytes_to_os_str;\n use crate::*;\n use shims::os_str::os_str_to_bytes;\n use shims::time::system_time_to_duration;\n-use shims::unix::linux::fd::epoll::Epoll;\n \n #[derive(Debug)]\n pub struct FileHandle {\n     file: File,\n     writable: bool,\n }\n \n-pub trait FileDescriptor: std::fmt::Debug {\n+pub trait FileDescriptor: std::fmt::Debug + helpers::AsAny {\n     fn name(&self) -> &'static str;\n \n     fn as_file_handle<'tcx>(&self) -> InterpResult<'tcx, &FileHandle> {\n         throw_unsup_format!(\"{} cannot be used as FileHandle\", self.name());\n     }\n \n-    fn as_epoll_handle<'tcx>(&mut self) -> InterpResult<'tcx, &mut Epoll> {\n-        throw_unsup_format!(\"not an epoll file descriptor\");\n-    }\n-\n     fn read<'tcx>(\n         &mut self,\n         _communicate_allowed: bool,\n@@ -69,7 +64,9 @@ pub trait FileDescriptor: std::fmt::Debug {\n \n     fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>>;\n \n-    fn is_tty(&self) -> bool;\n+    fn is_tty(&self) -> bool {\n+        false\n+    }\n \n     #[cfg(unix)]\n     fn as_unix_host_fd(&self) -> Option<i32> {\n@@ -271,10 +268,6 @@ impl FileDescriptor for NullOutput {\n     fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n         Ok(Box::new(NullOutput))\n     }\n-\n-    fn is_tty(&self) -> bool {\n-        false\n-    }\n }\n \n #[derive(Debug)]"}, {"sha": "3c4a678e598df714bb6dfa94016c695c33213436", "filename": "src/tools/miri/src/shims/unix/linux/fd.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b7294a4305e1687eed0c17e4a5d92e5619048746/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7294a4305e1687eed0c17e4a5d92e5619048746/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd.rs?ref=b7294a4305e1687eed0c17e4a5d92e5619048746", "patch": "@@ -80,7 +80,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             let event = EpollEvent { events, data };\n \n             if let Some(epfd) = this.machine.file_handler.handles.get_mut(&epfd) {\n-                let epfd = epfd.as_epoll_handle()?;\n+                let epfd = epfd\n+                    .as_any_mut()\n+                    .downcast_mut::<Epoll>()\n+                    .ok_or_else(|| err_unsup_format!(\"non-epoll FD passed to `epoll_ctl`\"))?;\n \n                 epfd.file_descriptors.insert(fd, event);\n                 Ok(Scalar::from_i32(0))\n@@ -89,7 +92,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             }\n         } else if op == epoll_ctl_del {\n             if let Some(epfd) = this.machine.file_handler.handles.get_mut(&epfd) {\n-                let epfd = epfd.as_epoll_handle()?;\n+                let epfd = epfd\n+                    .as_any_mut()\n+                    .downcast_mut::<Epoll>()\n+                    .ok_or_else(|| err_unsup_format!(\"non-epoll FD passed to `epoll_ctl`\"))?;\n \n                 epfd.file_descriptors.remove(&fd);\n                 Ok(Scalar::from_i32(0))\n@@ -148,7 +154,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         let numevents = 0;\n         if let Some(epfd) = this.machine.file_handler.handles.get_mut(&epfd) {\n-            let _epfd = epfd.as_epoll_handle()?;\n+            let _epfd = epfd\n+                .as_any_mut()\n+                .downcast_mut::<Epoll>()\n+                .ok_or_else(|| err_unsup_format!(\"non-epoll FD passed to `epoll_wait`\"))?;\n \n             // FIXME return number of events ready when scheme for marking events ready exists\n             Ok(Scalar::from_i32(numevents))"}, {"sha": "a429caaf8f4102ca7160f87a5374fe947b55b723", "filename": "src/tools/miri/src/shims/unix/linux/fd/epoll.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7294a4305e1687eed0c17e4a5d92e5619048746/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fepoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7294a4305e1687eed0c17e4a5d92e5619048746/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fepoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fepoll.rs?ref=b7294a4305e1687eed0c17e4a5d92e5619048746", "patch": "@@ -32,18 +32,10 @@ impl FileDescriptor for Epoll {\n         \"epoll\"\n     }\n \n-    fn as_epoll_handle<'tcx>(&mut self) -> InterpResult<'tcx, &mut Epoll> {\n-        Ok(self)\n-    }\n-\n     fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n         Ok(Box::new(self.clone()))\n     }\n \n-    fn is_tty(&self) -> bool {\n-        false\n-    }\n-\n     fn close<'tcx>(\n         self: Box<Self>,\n         _communicate_allowed: bool,"}, {"sha": "1db020bb7b6d9c0917fdc1c438480ad7c7e30003", "filename": "src/tools/miri/src/shims/unix/linux/fd/event.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7294a4305e1687eed0c17e4a5d92e5619048746/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7294a4305e1687eed0c17e4a5d92e5619048746/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fevent.rs?ref=b7294a4305e1687eed0c17e4a5d92e5619048746", "patch": "@@ -28,10 +28,6 @@ impl FileDescriptor for Event {\n         Ok(Box::new(Event { val: self.val.clone() }))\n     }\n \n-    fn is_tty(&self) -> bool {\n-        false\n-    }\n-\n     fn close<'tcx>(\n         self: Box<Self>,\n         _communicate_allowed: bool,"}, {"sha": "6adae88235f3d8c0d37fa69132d04a22670fe4f0", "filename": "src/tools/miri/src/shims/unix/linux/fd/socketpair.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7294a4305e1687eed0c17e4a5d92e5619048746/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fsocketpair.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7294a4305e1687eed0c17e4a5d92e5619048746/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fsocketpair.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Ffd%2Fsocketpair.rs?ref=b7294a4305e1687eed0c17e4a5d92e5619048746", "patch": "@@ -19,10 +19,6 @@ impl FileDescriptor for SocketPair {\n         Ok(Box::new(SocketPair))\n     }\n \n-    fn is_tty(&self) -> bool {\n-        false\n-    }\n-\n     fn close<'tcx>(\n         self: Box<Self>,\n         _communicate_allowed: bool,"}]}