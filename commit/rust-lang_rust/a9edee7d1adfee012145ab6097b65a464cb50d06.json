{"sha": "a9edee7d1adfee012145ab6097b65a464cb50d06", "node_id": "C_kwDOAAsO6NoAKGE5ZWRlZTdkMWFkZmVlMDEyMTQ1YWI2MDk3YjY1YTQ2NGNiNTBkMDY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-06T09:13:32Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-06T09:15:34Z"}, "message": "bootstrap: put Miri sysroot into local build dir", "tree": {"sha": "5397b905910361845aa40b177372dcb7ce8fb5b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5397b905910361845aa40b177372dcb7ce8fb5b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9edee7d1adfee012145ab6097b65a464cb50d06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9edee7d1adfee012145ab6097b65a464cb50d06", "html_url": "https://github.com/rust-lang/rust/commit/a9edee7d1adfee012145ab6097b65a464cb50d06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9edee7d1adfee012145ab6097b65a464cb50d06/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c199a3988476f50e203a6cce8e7bcd3b653055ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/c199a3988476f50e203a6cce8e7bcd3b653055ea", "html_url": "https://github.com/rust-lang/rust/commit/c199a3988476f50e203a6cce8e7bcd3b653055ea"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "a4016b31dc52bc7ec611598c168a45731276c94c", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9edee7d1adfee012145ab6097b65a464cb50d06/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9edee7d1adfee012145ab6097b65a464cb50d06/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=a9edee7d1adfee012145ab6097b65a464cb50d06", "patch": "@@ -466,7 +466,13 @@ pub struct Miri {\n \n impl Miri {\n     /// Run `cargo miri setup` for the given target, return where the Miri sysroot was put.\n-    pub fn build_miri_sysroot(builder: &Builder<'_>, compiler: Compiler, miri: &Path, target: TargetSelection) -> String {\n+    pub fn build_miri_sysroot(\n+        builder: &Builder<'_>,\n+        compiler: Compiler,\n+        miri: &Path,\n+        target: TargetSelection,\n+    ) -> String {\n+        let miri_sysroot = builder.out.join(compiler.host.triple).join(\"miri-sysrot\");\n         let mut cargo = tool::prepare_tool_cargo(\n             builder,\n             compiler,\n@@ -485,6 +491,8 @@ impl Miri {\n         cargo.env(\"MIRI_LIB_SRC\", builder.src.join(\"library\"));\n         // Tell it where to find Miri.\n         cargo.env(\"MIRI\", &miri);\n+        // Tell it where to put the sysroot.\n+        cargo.env(\"MIRI_SYSROOT\", &miri_sysroot);\n         // Debug things.\n         cargo.env(\"RUST_BACKTRACE\", \"1\");\n "}, {"sha": "f5a20d592d06d991db5eb23f66535fdcfd08bd95", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9edee7d1adfee012145ab6097b65a464cb50d06/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/a9edee7d1adfee012145ab6097b65a464cb50d06/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=a9edee7d1adfee012145ab6097b65a464cb50d06", "patch": "@@ -433,8 +433,10 @@ Moreover, Miri recognizes some environment variables:\n   trigger a re-build of the standard library; you have to clear the Miri build\n   cache manually (on Linux, `rm -rf ~/.cache/miri`).\n * `MIRI_SYSROOT` (recognized by `cargo miri` and the Miri driver) indicates the sysroot to use. When\n-  using `cargo miri`, only set this if you do not want to use the automatically created sysroot. For\n-  directly invoking the Miri driver, this variable (or a `--sysroot` flag) is mandatory.\n+  using `cargo miri`, this skips the automatic setup -- only set this if you do not want to use the\n+  automatically created sysroot. For directly invoking the Miri driver, this variable (or a\n+  `--sysroot` flag) is mandatory. When invoking `cargo miri setup`, this indicates where the sysroot\n+  will be put.\n * `MIRI_TEST_TARGET` (recognized by the test suite and the `./miri` script) indicates which target\n   architecture to test against.  `miri` and `cargo miri` accept the `--target` flag for the same\n   purpose."}, {"sha": "f3841a6140839cfaae10242bbbf3f0bf9259e40c", "filename": "src/tools/miri/cargo-miri/src/setup.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a9edee7d1adfee012145ab6097b65a464cb50d06/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9edee7d1adfee012145ab6097b65a464cb50d06/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fsetup.rs?ref=a9edee7d1adfee012145ab6097b65a464cb50d06", "patch": "@@ -17,10 +17,8 @@ pub fn setup(subcommand: &MiriCommand, target: &str, rustc_version: &VersionMeta\n     let only_setup = matches!(subcommand, MiriCommand::Setup);\n     let ask_user = !only_setup;\n     let print_sysroot = only_setup && has_arg_flag(\"--print-sysroot\"); // whether we just print the sysroot path\n-    if std::env::var_os(\"MIRI_SYSROOT\").is_some() {\n-        if only_setup {\n-            println!(\"WARNING: MIRI_SYSROOT already set, not doing anything.\")\n-        }\n+    if !only_setup && std::env::var_os(\"MIRI_SYSROOT\").is_some() {\n+        // Skip setup step if MIRI_SYSROOT is explicitly set, *unless* we are `cargo miri setup`.\n         return;\n     }\n \n@@ -61,8 +59,13 @@ pub fn setup(subcommand: &MiriCommand, target: &str, rustc_version: &VersionMeta\n     }\n \n     // Determine where to put the sysroot.\n-    let user_dirs = directories::ProjectDirs::from(\"org\", \"rust-lang\", \"miri\").unwrap();\n-    let sysroot_dir = user_dirs.cache_dir();\n+    let sysroot_dir = match std::env::var_os(\"MIRI_SYSROOT\") {\n+        Some(dir) => PathBuf::from(dir),\n+        None => {\n+            let user_dirs = directories::ProjectDirs::from(\"org\", \"rust-lang\", \"miri\").unwrap();\n+            user_dirs.cache_dir().to_owned()\n+        }\n+    };\n     // Sysroot configuration and build details.\n     let sysroot_config = if std::env::var_os(\"MIRI_NO_STD\").is_some() {\n         SysrootConfig::NoStd\n@@ -111,7 +114,7 @@ pub fn setup(subcommand: &MiriCommand, target: &str, rustc_version: &VersionMeta\n         (command, rustflags)\n     };\n     // Make sure all target-level Miri invocations know their sysroot.\n-    std::env::set_var(\"MIRI_SYSROOT\", sysroot_dir);\n+    std::env::set_var(\"MIRI_SYSROOT\", &sysroot_dir);\n \n     // Do the build.\n     if only_setup {\n@@ -121,7 +124,7 @@ pub fn setup(subcommand: &MiriCommand, target: &str, rustc_version: &VersionMeta\n         // We want to be quiet, but still let the user know that something is happening.\n         eprint!(\"Preparing a sysroot for Miri (target: {target})... \");\n     }\n-    Sysroot::new(sysroot_dir, target)\n+    Sysroot::new(&sysroot_dir, target)\n         .build_from_source(&rust_src, BuildMode::Check, sysroot_config, rustc_version, cargo_cmd)\n         .unwrap_or_else(|_| {\n             if only_setup {"}]}