{"sha": "75d6522b9a4992b33b69e8fe76ae9be999dd66d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZDY1MjJiOWE0OTkyYjMzYjY5ZThmZTc2YWU5YmU5OTlkZDY2ZDM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-14T21:51:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-10-04T19:22:36Z"}, "message": "Eliminate ty::VariantKind in favor of def::CtorKind", "tree": {"sha": "f5f4e00fbbc6bad277c4bf70fbcfae2e269ed488", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5f4e00fbbc6bad277c4bf70fbcfae2e269ed488"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75d6522b9a4992b33b69e8fe76ae9be999dd66d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75d6522b9a4992b33b69e8fe76ae9be999dd66d3", "html_url": "https://github.com/rust-lang/rust/commit/75d6522b9a4992b33b69e8fe76ae9be999dd66d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64bdf1b74b8b2df8b13f51201277e35d948b154a", "url": "https://api.github.com/repos/rust-lang/rust/commits/64bdf1b74b8b2df8b13f51201277e35d948b154a", "html_url": "https://github.com/rust-lang/rust/commit/64bdf1b74b8b2df8b13f51201277e35d948b154a"}], "stats": {"total": 177, "additions": 73, "deletions": 104}, "files": [{"sha": "5a69de90d2a24a38e58093165a97e7e92241cc83", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=75d6522b9a4992b33b69e8fe76ae9be999dd66d3", "patch": "@@ -105,13 +105,20 @@ pub struct Export {\n }\n \n impl CtorKind {\n-    pub fn from_vdata(vdata: &ast::VariantData) -> CtorKind {\n+    pub fn from_ast(vdata: &ast::VariantData) -> CtorKind {\n         match *vdata {\n             ast::VariantData::Tuple(..) => CtorKind::Fn,\n             ast::VariantData::Unit(..) => CtorKind::Const,\n             ast::VariantData::Struct(..) => CtorKind::Fictive,\n         }\n     }\n+    pub fn from_hir(vdata: &hir::VariantData) -> CtorKind {\n+        match *vdata {\n+            hir::VariantData::Tuple(..) => CtorKind::Fn,\n+            hir::VariantData::Unit(..) => CtorKind::Const,\n+            hir::VariantData::Struct(..) => CtorKind::Fictive,\n+        }\n+    }\n }\n \n impl Def {"}, {"sha": "f1e9cfc0dae47b1b9c8d49b58316f0dfcfb9f6a5", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=75d6522b9a4992b33b69e8fe76ae9be999dd66d3", "patch": "@@ -201,7 +201,6 @@ pub trait CrateStore<'tcx> {\n                              -> Option<DefIndex>;\n     fn def_key(&self, def: DefId) -> hir_map::DefKey;\n     fn relative_def_path(&self, def: DefId) -> Option<hir_map::DefPath>;\n-    fn variant_kind(&self, def_id: DefId) -> Option<ty::VariantKind>;\n     fn struct_ctor_def_id(&self, struct_def_id: DefId) -> Option<DefId>;\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>;\n     fn item_children(&self, did: DefId) -> Vec<def::Export>;\n@@ -378,7 +377,6 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn relative_def_path(&self, def: DefId) -> Option<hir_map::DefPath> {\n         bug!(\"relative_def_path\")\n     }\n-    fn variant_kind(&self, def_id: DefId) -> Option<ty::VariantKind> { bug!(\"variant_kind\") }\n     fn struct_ctor_def_id(&self, struct_def_id: DefId) -> Option<DefId>\n         { bug!(\"struct_ctor_def_id\") }\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name> { bug!(\"struct_field_names\") }"}, {"sha": "fa899c4026955b6b7af7212f6f09d03615873dcf", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=75d6522b9a4992b33b69e8fe76ae9be999dd66d3", "patch": "@@ -15,6 +15,7 @@ use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc_data_structures::control_flow_graph::dominators::{Dominators, dominators};\n use rustc_data_structures::control_flow_graph::{GraphPredecessors, GraphSuccessors};\n use rustc_data_structures::control_flow_graph::ControlFlowGraph;\n+use hir::def::CtorKind;\n use hir::def_id::DefId;\n use ty::subst::Substs;\n use ty::{self, AdtDef, ClosureSubsts, Region, Ty};\n@@ -1140,10 +1141,10 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                         ppaux::parameterized(fmt, substs, variant_def.did,\n                                              ppaux::Ns::Value, &[])?;\n \n-                        match variant_def.kind {\n-                            ty::VariantKind::Unit => Ok(()),\n-                            ty::VariantKind::Tuple => fmt_tuple(fmt, lvs),\n-                            ty::VariantKind::Struct => {\n+                        match variant_def.ctor_kind {\n+                            CtorKind::Const => Ok(()),\n+                            CtorKind::Fn => fmt_tuple(fmt, lvs),\n+                            CtorKind::Fictive => {\n                                 let mut struct_fmt = fmt.debug_struct(\"\");\n                                 for (field, lv) in variant_def.fields.iter().zip(lvs) {\n                                     struct_fmt.field(&field.name.as_str(), lv);"}, {"sha": "8e330ee8e824ce2cc6d89c4427b7eff7bddb6baf", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=75d6522b9a4992b33b69e8fe76ae9be999dd66d3", "patch": "@@ -1420,7 +1420,7 @@ pub struct VariantDefData<'tcx, 'container: 'tcx> {\n     pub name: Name, // struct's name if this is a struct\n     pub disr_val: Disr,\n     pub fields: Vec<FieldDefData<'tcx, 'container>>,\n-    pub kind: VariantKind,\n+    pub ctor_kind: CtorKind,\n }\n \n pub struct FieldDefData<'tcx, 'container: 'tcx> {\n@@ -1485,26 +1485,6 @@ impl<'tcx> serialize::UseSpecializedDecodable for AdtDef<'tcx> {}\n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum AdtKind { Struct, Union, Enum }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n-pub enum VariantKind { Struct, Tuple, Unit }\n-\n-impl VariantKind {\n-    pub fn from_variant_data(vdata: &hir::VariantData) -> Self {\n-        match *vdata {\n-            hir::VariantData::Struct(..) => VariantKind::Struct,\n-            hir::VariantData::Tuple(..) => VariantKind::Tuple,\n-            hir::VariantData::Unit(..) => VariantKind::Unit,\n-        }\n-    }\n-    pub fn ctor_kind(self) -> CtorKind {\n-        match self {\n-            VariantKind::Tuple => CtorKind::Fn,\n-            VariantKind::Unit => CtorKind::Const,\n-            VariantKind::Struct => CtorKind::Fictive,\n-        }\n-    }\n-}\n-\n impl<'a, 'gcx, 'tcx, 'container> AdtDefData<'gcx, 'container> {\n     fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n            did: DefId,"}, {"sha": "287203c2f65ef0ff258e842ce8af3c71f053ce28", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=75d6522b9a4992b33b69e8fe76ae9be999dd66d3", "patch": "@@ -247,7 +247,7 @@ fn check_for_bindings_named_the_same_as_variants(cx: &MatchCheckCtxt, pat: &Pat)\n                 if edef.is_enum() {\n                     if let Def::Local(..) = cx.tcx.expect_def(p.id) {\n                         if edef.variants.iter().any(|variant| {\n-                            variant.name == name.node && variant.kind == ty::VariantKind::Unit\n+                            variant.name == name.node && variant.ctor_kind == CtorKind::Const\n                         }) {\n                             let ty_path = cx.tcx.item_path_str(edef.did);\n                             let mut err = struct_span_warn!(cx.tcx.sess, p.span, E0170,\n@@ -577,8 +577,8 @@ fn construct_witness<'a,'tcx>(cx: &MatchCheckCtxt<'a,'tcx>, ctor: &Constructor,\n \n         ty::TyAdt(adt, _) => {\n             let v = ctor.variant_for_adt(adt);\n-            match v.kind {\n-                ty::VariantKind::Struct => {\n+            match v.ctor_kind {\n+                CtorKind::Fictive => {\n                     let field_pats: hir::HirVec<_> = v.fields.iter()\n                         .zip(pats)\n                         .filter(|&(_, ref pat)| pat.node != PatKind::Wild)\n@@ -593,10 +593,10 @@ fn construct_witness<'a,'tcx>(cx: &MatchCheckCtxt<'a,'tcx>, ctor: &Constructor,\n                     let has_more_fields = field_pats.len() < pats_len;\n                     PatKind::Struct(def_to_path(cx.tcx, v.did), field_pats, has_more_fields)\n                 }\n-                ty::VariantKind::Tuple => {\n+                CtorKind::Fn => {\n                     PatKind::TupleStruct(def_to_path(cx.tcx, v.did), pats.collect(), None)\n                 }\n-                ty::VariantKind::Unit => {\n+                CtorKind::Const => {\n                     PatKind::Path(None, def_to_path(cx.tcx, v.did))\n                 }\n             }"}, {"sha": "db2d033738651959be791ff24ab7e03571dfae6a", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=75d6522b9a4992b33b69e8fe76ae9be999dd66d3", "patch": "@@ -342,12 +342,6 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(def.krate).def_path(def.index)\n     }\n \n-    fn variant_kind(&self, def_id: DefId) -> Option<ty::VariantKind>\n-    {\n-        self.dep_graph.read(DepNode::MetaData(def_id));\n-        self.get_crate_data(def_id.krate).get_variant_kind(def_id.index)\n-    }\n-\n     fn struct_ctor_def_id(&self, struct_def_id: DefId) -> Option<DefId>\n     {\n         self.dep_graph.read(DepNode::MetaData(struct_def_id));"}, {"sha": "579a97138f250dc3c492b961f0c69038aaa66486", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=75d6522b9a4992b33b69e8fe76ae9be999dd66d3", "patch": "@@ -22,7 +22,7 @@ use rustc::hir;\n use rustc::hir::intravisit::IdRange;\n \n use rustc::middle::cstore::{InlinedItem, LinkagePreference};\n-use rustc::hir::def::{self, Def};\n+use rustc::hir::def::{self, Def, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n use rustc::middle::lang_items;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -534,7 +534,7 @@ impl<'a, 'tcx> CrateMetadata {\n             name: self.item_name(item),\n             fields: fields,\n             disr_val: ConstInt::Infer(data.disr),\n-            kind: data.kind,\n+            ctor_kind: data.ctor_kind,\n         }, data.struct_ctor)\n     }\n \n@@ -693,16 +693,16 @@ impl<'a, 'tcx> CrateMetadata {\n                     match def {\n                         Def::Struct(..) => {\n                             if let Some(ctor_def_id) = self.get_struct_ctor_def_id(child_index) {\n-                                let vkind = self.get_variant_kind(child_index).unwrap();\n-                                let ctor_def = Def::StructCtor(ctor_def_id, vkind.ctor_kind());\n+                                let ctor_kind = self.get_ctor_kind(child_index);\n+                                let ctor_def = Def::StructCtor(ctor_def_id, ctor_kind);\n                                 callback(def::Export { def: ctor_def, name: name });\n                             }\n                         }\n                         Def::Variant(def_id) => {\n                             // Braced variants, unlike structs, generate unusable names in\n                             // value namespace, they are reserved for possible future use.\n-                            let vkind = self.get_variant_kind(child_index).unwrap();\n-                            let ctor_def = Def::VariantCtor(def_id, vkind.ctor_kind());\n+                            let ctor_kind = self.get_ctor_kind(child_index);\n+                            let ctor_def = Def::VariantCtor(def_id, ctor_kind);\n                             callback(def::Export { def: ctor_def, name: name });\n                         }\n                         _ => {}\n@@ -806,12 +806,12 @@ impl<'a, 'tcx> CrateMetadata {\n         self.entry(id).variances.decode(self).collect()\n     }\n \n-    pub fn get_variant_kind(&self, node_id: DefIndex) -> Option<ty::VariantKind> {\n+    pub fn get_ctor_kind(&self, node_id: DefIndex) -> CtorKind {\n         match self.entry(node_id).kind {\n             EntryKind::Struct(data) |\n             EntryKind::Union(data) |\n-            EntryKind::Variant(data) => Some(data.decode(self).kind),\n-            _ => None\n+            EntryKind::Variant(data) => data.decode(self).ctor_kind,\n+            _ => CtorKind::Fictive,\n         }\n     }\n "}, {"sha": "3b6c20040d09c71e5940192dde78b0aec331ccd2", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=75d6522b9a4992b33b69e8fe76ae9be999dd66d3", "patch": "@@ -258,7 +258,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let def_id = variant.did;\n \n         let data = VariantData {\n-            kind: variant.kind,\n+            ctor_kind: variant.ctor_kind,\n             disr: variant.disr_val.to_u64_unchecked(),\n             struct_ctor: None\n         };\n@@ -410,7 +410,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let variant = tcx.lookup_adt_def(adt_def_id).struct_variant();\n \n         let data = VariantData {\n-            kind: variant.kind,\n+            ctor_kind: variant.ctor_kind,\n             disr: variant.disr_val.to_u64_unchecked(),\n             struct_ctor: Some(def_id.index)\n         };\n@@ -675,7 +675,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     None\n                 };\n                 EntryKind::Struct(self.lazy(&VariantData {\n-                    kind: variant.kind,\n+                    ctor_kind: variant.ctor_kind,\n                     disr: variant.disr_val.to_u64_unchecked(),\n                     struct_ctor: struct_ctor\n                 }))\n@@ -684,7 +684,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 let variant = tcx.lookup_adt_def(def_id).struct_variant();\n \n                 EntryKind::Union(self.lazy(&VariantData {\n-                    kind: variant.kind,\n+                    ctor_kind: variant.ctor_kind,\n                     disr: variant.disr_val.to_u64_unchecked(),\n                     struct_ctor: None\n                 }))\n@@ -889,19 +889,12 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n             hir::ItemStruct(ref struct_def, _) => {\n                 self.encode_fields(def_id);\n \n-                // If this is a tuple-like struct, encode the type of the constructor.\n-                match self.tcx.lookup_adt_def(def_id).struct_variant().kind {\n-                    ty::VariantKind::Struct => {\n-                        // no value for structs like struct Foo { ... }\n-                    }\n-                    ty::VariantKind::Tuple | ty::VariantKind::Unit => {\n-                        // there is a value for structs like `struct\n-                        // Foo()` and `struct Foo`\n-                        let ctor_def_id = self.tcx.map.local_def_id(struct_def.id());\n-                        self.record(ctor_def_id,\n-                                    EncodeContext::encode_struct_ctor,\n-                                    (def_id, ctor_def_id));\n-                    }\n+                // If the struct has a constructor, encode it.\n+                if !struct_def.is_struct() {\n+                    let ctor_def_id = self.tcx.map.local_def_id(struct_def.id());\n+                    self.record(ctor_def_id,\n+                                EncodeContext::encode_struct_ctor,\n+                                (def_id, ctor_def_id));\n                 }\n             }\n             hir::ItemUnion(..) => {"}, {"sha": "0bb126ee0ffb640a359f54ecb9b62fa787baeab6", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=75d6522b9a4992b33b69e8fe76ae9be999dd66d3", "patch": "@@ -12,7 +12,7 @@ use astencode;\n use index;\n \n use rustc::hir;\n-use rustc::hir::def;\n+use rustc::hir::def::{self, CtorKind};\n use rustc::hir::def_id::{DefIndex, DefId};\n use rustc::middle::cstore::{LinkagePreference, NativeLibraryKind};\n use rustc::middle::lang_items;\n@@ -261,7 +261,7 @@ pub struct FnData {\n \n #[derive(RustcEncodable, RustcDecodable)]\n pub struct VariantData {\n-    pub kind: ty::VariantKind,\n+    pub ctor_kind: CtorKind,\n     pub disr: u64,\n \n     /// If this is a struct's only variant, this"}, {"sha": "f4ef3edfa48ea6f894b00c7b5f427dbc25ac950e", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=75d6522b9a4992b33b69e8fe76ae9be999dd66d3", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n use rustc::ty::TyCtxt;\n+use rustc::hir::def::CtorKind;\n use rustc::mir::repr::*;\n use rustc::mir::transform::{MirPass, MirSource, Pass};\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc::ty::VariantKind;\n \n pub struct Deaggregator;\n \n@@ -130,7 +130,7 @@ fn get_aggregate_statement_index<'a, 'tcx, 'b>(start: usize,\n         debug!(\"getting variant {:?}\", variant);\n         debug!(\"for adt_def {:?}\", adt_def);\n         let variant_def = &adt_def.variants[variant];\n-        if variant_def.kind == VariantKind::Struct {\n+        if variant_def.ctor_kind == CtorKind::Fictive {\n             return Some(i);\n         }\n     };"}, {"sha": "ea894556b7fb5b6c8202d835d02d71b3486a8dc1", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=75d6522b9a4992b33b69e8fe76ae9be999dd66d3", "patch": "@@ -302,7 +302,7 @@ impl<'b> Resolver<'b> {\n                 // in the value namespace as well.\n                 if !struct_def.is_struct() {\n                     let ctor_def = Def::StructCtor(self.definitions.local_def_id(struct_def.id()),\n-                                                   CtorKind::from_vdata(struct_def));\n+                                                   CtorKind::from_ast(struct_def));\n                     self.define(parent, name, ValueNS, (ctor_def, sp, vis));\n                 }\n \n@@ -359,7 +359,7 @@ impl<'b> Resolver<'b> {\n         // Define a constructor name in the value namespace.\n         // Braced variants, unlike structs, generate unusable names in\n         // value namespace, they are reserved for possible future use.\n-        let ctor_kind = CtorKind::from_vdata(&variant.node.data);\n+        let ctor_kind = CtorKind::from_ast(&variant.node.data);\n         let ctor_def = Def::VariantCtor(def_id, ctor_kind);\n         self.define(parent, name, ValueNS, (ctor_def, variant.span, vis));\n     }"}, {"sha": "765c128c30b63d8cf0039f561cad06d6050ce2e2", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=75d6522b9a4992b33b69e8fe76ae9be999dd66d3", "patch": "@@ -24,6 +24,7 @@ use session::Session;\n use llvm::{self, ValueRef};\n use llvm::debuginfo::{DIType, DIFile, DIScope, DIDescriptor, DICompositeType, DILexicalBlock};\n \n+use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n use rustc::hir;\n@@ -1076,10 +1077,6 @@ struct StructMemberDescriptionFactory<'tcx> {\n impl<'tcx> StructMemberDescriptionFactory<'tcx> {\n     fn create_member_descriptions<'a>(&self, cx: &CrateContext<'a, 'tcx>)\n                                       -> Vec<MemberDescription> {\n-        if self.variant.kind == ty::VariantKind::Unit {\n-            return Vec::new();\n-        }\n-\n         let field_size = if self.is_simd {\n             let fty = monomorphize::field_ty(cx.tcx(),\n                                              self.substs,\n@@ -1093,7 +1090,7 @@ impl<'tcx> StructMemberDescriptionFactory<'tcx> {\n         };\n \n         self.variant.fields.iter().enumerate().map(|(i, f)| {\n-            let name = if self.variant.kind == ty::VariantKind::Tuple {\n+            let name = if self.variant.ctor_kind == CtorKind::Fn {\n                 format!(\"__{}\", i)\n             } else {\n                 f.name.to_string()\n@@ -1387,12 +1384,12 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n                 // For the metadata of the wrapper struct, we need to create a\n                 // MemberDescription of the struct's single field.\n                 let sole_struct_member_description = MemberDescription {\n-                    name: match non_null_variant.kind {\n-                        ty::VariantKind::Tuple => \"__0\".to_string(),\n-                        ty::VariantKind::Struct => {\n+                    name: match non_null_variant.ctor_kind {\n+                        CtorKind::Fn => \"__0\".to_string(),\n+                        CtorKind::Fictive => {\n                             non_null_variant.fields[0].name.to_string()\n                         }\n-                        ty::VariantKind::Unit => bug!()\n+                        CtorKind::Const => bug!()\n                     },\n                     llvm_type: non_null_llvm_type,\n                     type_metadata: non_null_type_metadata,\n@@ -1579,16 +1576,16 @@ fn describe_enum_variant<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                            containing_scope);\n \n     // Get the argument names from the enum variant info\n-    let mut arg_names: Vec<_> = match variant.kind {\n-        ty::VariantKind::Unit => vec![],\n-        ty::VariantKind::Tuple => {\n+    let mut arg_names: Vec<_> = match variant.ctor_kind {\n+        CtorKind::Const => vec![],\n+        CtorKind::Fn => {\n             variant.fields\n                    .iter()\n                    .enumerate()\n                    .map(|(i, _)| format!(\"__{}\", i))\n                    .collect()\n         }\n-        ty::VariantKind::Struct => {\n+        CtorKind::Fictive => {\n             variant.fields\n                    .iter()\n                    .map(|f| f.name.to_string())"}, {"sha": "4f348a7b32b13d55eec4bd9812e10641e2f72d98", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=75d6522b9a4992b33b69e8fe76ae9be999dd66d3", "patch": "@@ -83,7 +83,7 @@ use self::TupleArgumentsFlag::*;\n use astconv::{AstConv, ast_region_to_region, PathParamMode};\n use dep_graph::DepNode;\n use fmt_macros::{Parser, Piece, Position};\n-use hir::def::{Def, PathResolution};\n+use hir::def::{Def, CtorKind, PathResolution};\n use hir::def_id::{DefId, LOCAL_CRATE};\n use hir::pat_util;\n use rustc::infer::{self, InferCtxt, InferOk, TypeOrigin, TypeTrace, type_variable};\n@@ -3020,7 +3020,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         while let Some((base_t, autoderefs)) = autoderef.next() {\n             let field = match base_t.sty {\n                 ty::TyAdt(base_def, substs) if base_def.is_struct() => {\n-                    tuple_like = base_def.struct_variant().kind == ty::VariantKind::Tuple;\n+                    tuple_like = base_def.struct_variant().ctor_kind == CtorKind::Fn;\n                     if !tuple_like { continue }\n \n                     debug!(\"tuple struct named {:?}\",  base_t);\n@@ -3257,7 +3257,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         if let Some((def_id, variant)) = variant {\n-            if variant.kind == ty::VariantKind::Tuple &&\n+            if variant.ctor_kind == CtorKind::Fn &&\n                     !self.tcx.sess.features.borrow().relaxed_adts {\n                 emit_feature_err(&self.tcx.sess.parse_sess,\n                                  \"relaxed_adts\", span, GateIssue::Language,"}, {"sha": "128db6ef5848a8c525a680e83813cf3c4c417aca", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=75d6522b9a4992b33b69e8fe76ae9be999dd66d3", "patch": "@@ -68,7 +68,6 @@ use rustc_const_eval::{eval_const_expr_partial, report_const_eval_err};\n use rustc::ty::subst::Substs;\n use rustc::ty::{ToPredicate, ImplContainer, ImplOrTraitItemContainer, TraitContainer};\n use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt, TypeScheme};\n-use rustc::ty::{VariantKind};\n use rustc::ty::util::IntTypeExt;\n use rscope::*;\n use rustc::dep_graph::DepNode;\n@@ -87,7 +86,7 @@ use syntax::parse::token::keywords;\n use syntax_pos::Span;\n \n use rustc::hir::{self, intravisit, map as hir_map, print as pprust};\n-use rustc::hir::def::Def;\n+use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::DefId;\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -987,9 +986,9 @@ fn convert_variant_ctor<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     let tcx = ccx.tcx;\n     let def_id = tcx.map.local_def_id(ctor_id);\n     generics_of_def_id(ccx, def_id);\n-    let ctor_ty = match variant.kind {\n-        VariantKind::Unit | VariantKind::Struct => scheme.ty,\n-        VariantKind::Tuple => {\n+    let ctor_ty = match variant.ctor_kind {\n+        CtorKind::Fictive | CtorKind::Const => scheme.ty,\n+        CtorKind::Fn => {\n             let inputs: Vec<_> =\n                 variant.fields\n                 .iter()\n@@ -1066,7 +1065,7 @@ fn convert_struct_variant<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         name: name,\n         disr_val: disr_val,\n         fields: fields,\n-        kind: VariantKind::from_variant_data(def),\n+        ctor_kind: CtorKind::from_hir(def),\n     }\n }\n "}, {"sha": "68e5bc6c21e0188edf2e375d2911df062269605d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=75d6522b9a4992b33b69e8fe76ae9be999dd66d3", "patch": "@@ -15,11 +15,11 @@ use std::iter::once;\n use syntax::ast;\n use rustc::hir;\n \n-use rustc::hir::def::Def;\n+use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::DefPathData;\n use rustc::hir::print as pprust;\n-use rustc::ty::{self, TyCtxt, VariantKind};\n+use rustc::ty::{self, TyCtxt};\n use rustc::util::nodemap::FnvHashSet;\n \n use rustc_const_eval::lookup_const_by_id;\n@@ -219,10 +219,10 @@ fn build_struct<'a, 'tcx>(cx: &DocContext, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let variant = tcx.lookup_adt_def(did).struct_variant();\n \n     clean::Struct {\n-        struct_type: match variant.kind {\n-            VariantKind::Struct => doctree::Plain,\n-            VariantKind::Tuple => doctree::Tuple,\n-            VariantKind::Unit => doctree::Unit,\n+        struct_type: match variant.ctor_kind {\n+            CtorKind::Fictive => doctree::Plain,\n+            CtorKind::Fn => doctree::Tuple,\n+            CtorKind::Const => doctree::Unit,\n         },\n         generics: (t.generics, &predicates).clean(cx),\n         fields: variant.fields.clean(cx),"}, {"sha": "eb6115e9373150a2f07581912115174c44fa8947", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d6522b9a4992b33b69e8fe76ae9be999dd66d3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=75d6522b9a4992b33b69e8fe76ae9be999dd66d3", "patch": "@@ -32,7 +32,7 @@ use syntax_pos::{self, DUMMY_SP, Pos};\n use rustc_trans::back::link;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::resolve_lifetime::DefRegion::*;\n-use rustc::hir::def::Def;\n+use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::{self, DefId, DefIndex, CRATE_DEF_INDEX};\n use rustc::hir::print as pprust;\n use rustc::ty::subst::Substs;\n@@ -2032,14 +2032,14 @@ impl Clean<Item> for doctree::Variant {\n \n impl<'tcx> Clean<Item> for ty::VariantDefData<'tcx, 'static> {\n     fn clean(&self, cx: &DocContext) -> Item {\n-        let kind = match self.kind {\n-            ty::VariantKind::Unit => VariantKind::CLike,\n-            ty::VariantKind::Tuple => {\n+        let kind = match self.ctor_kind {\n+            CtorKind::Const => VariantKind::CLike,\n+            CtorKind::Fn => {\n                 VariantKind::Tuple(\n                     self.fields.iter().map(|f| f.unsubst_ty().clean(cx)).collect()\n                 )\n             }\n-            ty::VariantKind::Struct => {\n+            CtorKind::Fictive => {\n                 VariantKind::Struct(VariantStruct {\n                     struct_type: doctree::Plain,\n                     fields_stripped: false,"}]}