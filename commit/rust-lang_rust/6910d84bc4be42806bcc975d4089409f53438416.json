{"sha": "6910d84bc4be42806bcc975d4089409f53438416", "node_id": "C_kwDOAAsO6NoAKDY5MTBkODRiYzRiZTQyODA2YmNjOTc1ZDQwODk0MDlmNTM0Mzg0MTY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-07T12:36:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-07T12:36:55Z"}, "message": "Rollup merge of #98981 - pierwill:pierwill/dataflow-docs-edits, r=Dylan-DPC\n\n Edit `rustc_mir_dataflow::framework` documentation\n\nSome edits for clarity and consistency.", "tree": {"sha": "142c56ffa1168715a43ae2c714ed8de92324fcd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/142c56ffa1168715a43ae2c714ed8de92324fcd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6910d84bc4be42806bcc975d4089409f53438416", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJixtNnCRBK7hj4Ov3rIwAAGswIAEgIdzTrj1PynCZ6LEzAnchf\n7mveV27WdY1zLqw5qhGAGnlymeDLVALkXTLn+6XX3Vtv0FEj79BmoZZ7BKN5CzSw\nl8VqMDzs9UijCLWth1dLXQ1uyt0y8XKz6zt7Qp2UUbaxyr/THqK/ROZUg1STW6d+\nzonOm6WzXqFZmPkaseV8Q6m0SAw5d4QV+EtD7hb/ZcLKue1cXdGxicOzRS6pEFoa\nqoiuSTMSoPyODB9oyml2MpJN+QHzZdf6wWAexkRuqWoeDzHjuCDwfgvcZNGrVh4F\nZOCxqjEhYmgUhK+2uqU7zKEZzCDInghyez4zKgYEx8OZbnEi0U9EFeMfhGij/a8=\n=88mi\n-----END PGP SIGNATURE-----\n", "payload": "tree 142c56ffa1168715a43ae2c714ed8de92324fcd9\nparent f242e295e46b5b45e4e55e1d983dc3b8d11c746a\nparent 8c9a130056fc28a925a668ef49f31b588005c0ca\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657197415 +0530\ncommitter GitHub <noreply@github.com> 1657197415 +0530\n\nRollup merge of #98981 - pierwill:pierwill/dataflow-docs-edits, r=Dylan-DPC\n\n Edit `rustc_mir_dataflow::framework` documentation\n\nSome edits for clarity and consistency.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6910d84bc4be42806bcc975d4089409f53438416", "html_url": "https://github.com/rust-lang/rust/commit/6910d84bc4be42806bcc975d4089409f53438416", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6910d84bc4be42806bcc975d4089409f53438416/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f242e295e46b5b45e4e55e1d983dc3b8d11c746a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f242e295e46b5b45e4e55e1d983dc3b8d11c746a", "html_url": "https://github.com/rust-lang/rust/commit/f242e295e46b5b45e4e55e1d983dc3b8d11c746a"}, {"sha": "8c9a130056fc28a925a668ef49f31b588005c0ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c9a130056fc28a925a668ef49f31b588005c0ca", "html_url": "https://github.com/rust-lang/rust/commit/8c9a130056fc28a925a668ef49f31b588005c0ca"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "f9fd6c9c56b424333800c62248928d2637c94875", "filename": "compiler/rustc_mir_dataflow/src/framework/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6910d84bc4be42806bcc975d4089409f53438416/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6910d84bc4be42806bcc975d4089409f53438416/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs?ref=6910d84bc4be42806bcc975d4089409f53438416", "patch": "@@ -1,7 +1,7 @@\n //! A framework that can express both [gen-kill] and generic dataflow problems.\n //!\n-//! To actually use this framework, you must implement either the `Analysis` or the\n-//! `GenKillAnalysis` trait. If your transfer function can be expressed with only gen/kill\n+//! To use this framework, implement either the [`Analysis`] or the\n+//! [`GenKillAnalysis`] trait. If your transfer function can be expressed with only gen/kill\n //! operations, prefer `GenKillAnalysis` since it will run faster while iterating to fixpoint. The\n //! `impls` module contains several examples of gen/kill dataflow analyses.\n //!\n@@ -96,7 +96,7 @@ impl<T: Idx> BitSetExt<T> for ChunkedBitSet<T> {\n     }\n }\n \n-/// Define the domain of a dataflow problem.\n+/// Defines the domain of a dataflow problem.\n ///\n /// This trait specifies the lattice on which this analysis operates (the domain) as well as its\n /// initial value at the entry point of each basic block.\n@@ -113,12 +113,12 @@ pub trait AnalysisDomain<'tcx> {\n     /// suitable as part of a filename.\n     const NAME: &'static str;\n \n-    /// The initial value of the dataflow state upon entry to each basic block.\n+    /// Returns the initial value of the dataflow state upon entry to each basic block.\n     fn bottom_value(&self, body: &mir::Body<'tcx>) -> Self::Domain;\n \n     /// Mutates the initial value of the dataflow state upon entry to the `START_BLOCK`.\n     ///\n-    /// For backward analyses, initial state besides the bottom value is not yet supported. Trying\n+    /// For backward analyses, initial state (besides the bottom value) is not yet supported. Trying\n     /// to mutate the initial state will result in a panic.\n     //\n     // FIXME: For backward dataflow analyses, the initial state should be applied to every basic\n@@ -155,9 +155,9 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     /// Updates the current dataflow state with an effect that occurs immediately *before* the\n     /// given statement.\n     ///\n-    /// This method is useful if the consumer of the results of this analysis needs only to observe\n+    /// This method is useful if the consumer of the results of this analysis only needs to observe\n     /// *part* of the effect of a statement (e.g. for two-phase borrows). As a general rule,\n-    /// analyses should not implement this without implementing `apply_statement_effect`.\n+    /// analyses should not implement this without also implementing `apply_statement_effect`.\n     fn apply_before_statement_effect(\n         &self,\n         _state: &mut Self::Domain,\n@@ -184,7 +184,7 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     ///\n     /// This method is useful if the consumer of the results of this analysis needs only to observe\n     /// *part* of the effect of a terminator (e.g. for two-phase borrows). As a general rule,\n-    /// analyses should not implement this without implementing `apply_terminator_effect`.\n+    /// analyses should not implement this without also implementing `apply_terminator_effect`.\n     fn apply_before_terminator_effect(\n         &self,\n         _state: &mut Self::Domain,"}]}