{"sha": "d0f99ddefafb02d66ed7ff13a22e3b7526ba9743", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZjk5ZGRlZmFmYjAyZDY2ZWQ3ZmYxM2EyMmUzYjc1MjZiYTk3NDM=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2018-11-22T16:52:24Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2018-11-22T16:52:24Z"}, "message": "Fix the tracking issue for hash_raw_entry\n\nIt used to point to the implementation PR.", "tree": {"sha": "686c033a5a5e2635188d689875edebaf6d09ee2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/686c033a5a5e2635188d689875edebaf6d09ee2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0f99ddefafb02d66ed7ff13a22e3b7526ba9743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f99ddefafb02d66ed7ff13a22e3b7526ba9743", "html_url": "https://github.com/rust-lang/rust/commit/d0f99ddefafb02d66ed7ff13a22e3b7526ba9743", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0f99ddefafb02d66ed7ff13a22e3b7526ba9743/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dae6c9364108847393075b57a17fd7eaf3f37600", "url": "https://api.github.com/repos/rust-lang/rust/commits/dae6c9364108847393075b57a17fd7eaf3f37600", "html_url": "https://github.com/rust-lang/rust/commit/dae6c9364108847393075b57a17fd7eaf3f37600"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "7c717d832fa540145e3001c79dd6d1334908cdae", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/d0f99ddefafb02d66ed7ff13a22e3b7526ba9743/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0f99ddefafb02d66ed7ff13a22e3b7526ba9743/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=d0f99ddefafb02d66ed7ff13a22e3b7526ba9743", "patch": "@@ -1571,7 +1571,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// so that the map now contains keys which compare equal, search may start\n     /// acting erratically, with two keys randomly masking each other. Implementations\n     /// are free to assume this doesn't happen (within the limits of memory-safety).\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn raw_entry_mut(&mut self) -> RawEntryBuilderMut<K, V, S> {\n         self.reserve(1);\n         RawEntryBuilderMut { map: self }\n@@ -1592,7 +1592,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// `get` should be preferred.\n     ///\n     /// Immutable raw entries have very limited use; you might instead want `raw_entry_mut`.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn raw_entry(&self) -> RawEntryBuilder<K, V, S> {\n         RawEntryBuilder { map: self }\n     }\n@@ -1844,7 +1844,7 @@ impl<'a, K, V> InternalEntry<K, V, &'a mut RawTable<K, V>> {\n ///\n /// [`HashMap::raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut\n \n-#[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+#[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n pub struct RawEntryBuilderMut<'a, K: 'a, V: 'a, S: 'a> {\n     map: &'a mut HashMap<K, V, S>,\n }\n@@ -1858,7 +1858,7 @@ pub struct RawEntryBuilderMut<'a, K: 'a, V: 'a, S: 'a> {\n /// [`HashMap`]: struct.HashMap.html\n /// [`Entry`]: enum.Entry.html\n /// [`raw_entry`]: struct.HashMap.html#method.raw_entry\n-#[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+#[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n pub enum RawEntryMut<'a, K: 'a, V: 'a, S: 'a> {\n     /// An occupied entry.\n     Occupied(RawOccupiedEntryMut<'a, K, V>),\n@@ -1870,7 +1870,7 @@ pub enum RawEntryMut<'a, K: 'a, V: 'a, S: 'a> {\n /// It is part of the [`RawEntryMut`] enum.\n ///\n /// [`RawEntryMut`]: enum.RawEntryMut.html\n-#[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+#[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n pub struct RawOccupiedEntryMut<'a, K: 'a, V: 'a> {\n     elem: FullBucket<K, V, &'a mut RawTable<K, V>>,\n }\n@@ -1879,7 +1879,7 @@ pub struct RawOccupiedEntryMut<'a, K: 'a, V: 'a> {\n /// It is part of the [`RawEntryMut`] enum.\n ///\n /// [`RawEntryMut`]: enum.RawEntryMut.html\n-#[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+#[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n pub struct RawVacantEntryMut<'a, K: 'a, V: 'a, S: 'a> {\n     elem: VacantEntryState<K, V, &'a mut RawTable<K, V>>,\n     hash_builder: &'a S,\n@@ -1890,7 +1890,7 @@ pub struct RawVacantEntryMut<'a, K: 'a, V: 'a, S: 'a> {\n /// See the [`HashMap::raw_entry`] docs for usage examples.\n ///\n /// [`HashMap::raw_entry`]: struct.HashMap.html#method.raw_entry\n-#[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+#[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n pub struct RawEntryBuilder<'a, K: 'a, V: 'a, S: 'a> {\n     map: &'a HashMap<K, V, S>,\n }\n@@ -1900,7 +1900,7 @@ impl<'a, K, V, S> RawEntryBuilderMut<'a, K, V, S>\n           K: Eq + Hash,\n {\n     /// Create a `RawEntryMut` from the given key.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn from_key<Q: ?Sized>(self, k: &Q) -> RawEntryMut<'a, K, V, S>\n         where K: Borrow<Q>,\n               Q: Hash + Eq\n@@ -1911,7 +1911,7 @@ impl<'a, K, V, S> RawEntryBuilderMut<'a, K, V, S>\n     }\n \n     /// Create a `RawEntryMut` from the given key and its hash.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S>\n         where K: Borrow<Q>,\n               Q: Eq\n@@ -1941,7 +1941,7 @@ impl<'a, K, V, S> RawEntryBuilderMut<'a, K, V, S>\n         }\n     }\n     /// Create a `RawEntryMut` from the given hash.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S>\n         where for<'b> F: FnMut(&'b K) -> bool,\n     {\n@@ -1951,7 +1951,7 @@ impl<'a, K, V, S> RawEntryBuilderMut<'a, K, V, S>\n     /// Search possible locations for an element with hash `hash` until `is_match` returns true for\n     /// one of them. There is no guarantee that all keys passed to `is_match` will have the provided\n     /// hash.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn search_bucket<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S>\n         where for<'b> F: FnMut(&'b K) -> bool,\n     {\n@@ -1963,7 +1963,7 @@ impl<'a, K, V, S> RawEntryBuilder<'a, K, V, S>\n     where S: BuildHasher,\n {\n     /// Access an entry by key.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn from_key<Q: ?Sized>(self, k: &Q) -> Option<(&'a K, &'a V)>\n         where K: Borrow<Q>,\n               Q: Hash + Eq\n@@ -1974,7 +1974,7 @@ impl<'a, K, V, S> RawEntryBuilder<'a, K, V, S>\n     }\n \n     /// Access an entry by a key and its hash.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>\n         where K: Borrow<Q>,\n               Q: Hash + Eq\n@@ -1997,7 +1997,7 @@ impl<'a, K, V, S> RawEntryBuilder<'a, K, V, S>\n     }\n \n     /// Access an entry by hash.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn from_hash<F>(self, hash: u64, is_match: F) -> Option<(&'a K, &'a V)>\n         where F: FnMut(&K) -> bool\n     {\n@@ -2007,7 +2007,7 @@ impl<'a, K, V, S> RawEntryBuilder<'a, K, V, S>\n     /// Search possible locations for an element with hash `hash` until `is_match` returns true for\n     /// one of them. There is no guarantee that all keys passed to `is_match` will have the provided\n     /// hash.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn search_bucket<F>(self, hash: u64, is_match: F) -> Option<(&'a K, &'a V)>\n         where F: FnMut(&K) -> bool\n     {\n@@ -2033,7 +2033,7 @@ impl<'a, K, V, S> RawEntryMut<'a, K, V, S> {\n     /// *map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 10).1 *= 2;\n     /// assert_eq!(map[\"poneyland\"], 6);\n     /// ```\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn or_insert(self, default_key: K, default_val: V) -> (&'a mut K, &'a mut V)\n         where K: Hash,\n               S: BuildHasher,\n@@ -2061,7 +2061,7 @@ impl<'a, K, V, S> RawEntryMut<'a, K, V, S> {\n     ///\n     /// assert_eq!(map[\"poneyland\"], \"hoho\".to_string());\n     /// ```\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn or_insert_with<F>(self, default: F) -> (&'a mut K, &'a mut V)\n         where F: FnOnce() -> (K, V),\n               K: Hash,\n@@ -2099,7 +2099,7 @@ impl<'a, K, V, S> RawEntryMut<'a, K, V, S> {\n     ///    .or_insert(\"poneyland\", 0);\n     /// assert_eq!(map[\"poneyland\"], 43);\n     /// ```\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn and_modify<F>(self, f: F) -> Self\n         where F: FnOnce(&mut K, &mut V)\n     {\n@@ -2118,82 +2118,82 @@ impl<'a, K, V, S> RawEntryMut<'a, K, V, S> {\n \n impl<'a, K, V> RawOccupiedEntryMut<'a, K, V> {\n     /// Gets a reference to the key in the entry.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn key(&self) -> &K {\n         self.elem.read().0\n     }\n \n     /// Gets a mutable reference to the key in the entry.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn key_mut(&mut self) -> &mut K {\n         self.elem.read_mut().0\n     }\n \n     /// Converts the entry into a mutable reference to the key in the entry\n     /// with a lifetime bound to the map itself.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn into_key(self) -> &'a mut K {\n         self.elem.into_mut_refs().0\n     }\n \n     /// Gets a reference to the value in the entry.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn get(&self) -> &V {\n         self.elem.read().1\n     }\n \n     /// Converts the OccupiedEntry into a mutable reference to the value in the entry\n     /// with a lifetime bound to the map itself.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn into_mut(self) -> &'a mut V {\n         self.elem.into_mut_refs().1\n     }\n \n     /// Gets a mutable reference to the value in the entry.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn get_mut(&mut self) -> &mut V {\n         self.elem.read_mut().1\n     }\n \n     /// Gets a reference to the key and value in the entry.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn get_key_value(&mut self) -> (&K, &V) {\n         self.elem.read()\n     }\n \n     /// Gets a mutable reference to the key and value in the entry.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn get_key_value_mut(&mut self) -> (&mut K, &mut V) {\n         self.elem.read_mut()\n     }\n \n     /// Converts the OccupiedEntry into a mutable reference to the key and value in the entry\n     /// with a lifetime bound to the map itself.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn into_key_value(self) -> (&'a mut K, &'a mut V) {\n         self.elem.into_mut_refs()\n     }\n \n     /// Sets the value of the entry, and returns the entry's old value.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn insert(&mut self, value: V) -> V {\n         mem::replace(self.get_mut(), value)\n     }\n \n     /// Sets the value of the entry, and returns the entry's old value.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn insert_key(&mut self, key: K) -> K {\n         mem::replace(self.key_mut(), key)\n     }\n \n     /// Takes the value out of the entry, and returns it.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn remove(self) -> V {\n         pop_internal(self.elem).1\n     }\n \n     /// Take the ownership of the key and value from the map.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn remove_entry(self) -> (K, V) {\n         let (k, v, _) = pop_internal(self.elem);\n         (k, v)\n@@ -2203,7 +2203,7 @@ impl<'a, K, V> RawOccupiedEntryMut<'a, K, V> {\n impl<'a, K, V, S> RawVacantEntryMut<'a, K, V, S> {\n     /// Sets the value of the entry with the VacantEntry's key,\n     /// and returns a mutable reference to it.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn insert(self, key: K, value: V) -> (&'a mut K, &'a mut V)\n         where K: Hash,\n               S: BuildHasher,\n@@ -2215,7 +2215,7 @@ impl<'a, K, V, S> RawVacantEntryMut<'a, K, V, S> {\n \n     /// Sets the value of the entry with the VacantEntry's key,\n     /// and returns a mutable reference to it.\n-    #[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+    #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V) {\n         let hash = SafeHash::new(hash);\n         let b = match self.elem {\n@@ -2236,15 +2236,15 @@ impl<'a, K, V, S> RawVacantEntryMut<'a, K, V, S> {\n     }\n }\n \n-#[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+#[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n impl<'a, K, V, S> Debug for RawEntryBuilderMut<'a, K, V, S> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RawEntryBuilder\")\n          .finish()\n     }\n }\n \n-#[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+#[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n impl<'a, K: Debug, V: Debug, S> Debug for RawEntryMut<'a, K, V, S> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -2262,7 +2262,7 @@ impl<'a, K: Debug, V: Debug, S> Debug for RawEntryMut<'a, K, V, S> {\n     }\n }\n \n-#[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+#[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n impl<'a, K: Debug, V: Debug> Debug for RawOccupiedEntryMut<'a, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RawOccupiedEntryMut\")\n@@ -2272,15 +2272,15 @@ impl<'a, K: Debug, V: Debug> Debug for RawOccupiedEntryMut<'a, K, V> {\n     }\n }\n \n-#[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+#[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n impl<'a, K, V, S> Debug for RawVacantEntryMut<'a, K, V, S> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RawVacantEntryMut\")\n          .finish()\n     }\n }\n \n-#[unstable(feature = \"hash_raw_entry\", issue = \"54043\")]\n+#[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n impl<'a, K, V, S> Debug for RawEntryBuilder<'a, K, V, S> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RawEntryBuilder\")"}]}