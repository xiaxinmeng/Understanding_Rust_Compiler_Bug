{"sha": "70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a", "node_id": "C_kwDOAAsO6NoAKDcwOTE4ZWNmMDZmZjhiNWRhMTVlN2U0NzkzYTVhNGU4YTQzM2ViMWE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-03-22T18:30:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-22T18:30:32Z"}, "message": "Rollup merge of #109280 - compiler-errors:no-vec-map, r=Mark-Simulacrum\n\nRemove `VecMap`\n\nNot sure what the use of this data structure is over just using `FxIndexMap` or a `Vec`.\n\nr? ```@ghost```", "tree": {"sha": "5e09cfb5066db60b28510ba46a896dbeddcb9148", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e09cfb5066db60b28510ba46a896dbeddcb9148"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkG0lICRBK7hj4Ov3rIwAAU7AIACcGQh+PBwJC5E7KZPT2As3c\ncxktUes8AGRtW9GMrL7mSZWTUdQKwPHeSTHwNtpDVg1NM/zFtQCmZX3v4dw3iy9j\n56g5/q5XlRW5ZN4pGsnO1hZEDBd4xb1NUS+i0+SVM964xfn7fJ5mWQzuiZuJCvGK\nOZ439PcEsHLuSwlnQIaDasWsZN0e/ZzIhDeHht5nKiduembYKD7Dp0ut5K6ajAuc\ng32x7qwFs26g+UEIrw6dF0u92fb04n0LnaupsCAnB65jjqHUcPsb9Cco+xnHAw88\nLIxWQ4j7rjkLCfKyQXf/YDAjntnbyd3kf1YDlpRwJwgypNxbyjuc2MyxVGC6M4Q=\n=L1Yb\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e09cfb5066db60b28510ba46a896dbeddcb9148\nparent d8543abc550d8fe94ce2fe6048345c900a96a829\nparent 663953857556bfaa049a3492bb4ec531ec0127b9\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1679509832 +0530\ncommitter GitHub <noreply@github.com> 1679509832 +0530\n\nRollup merge of #109280 - compiler-errors:no-vec-map, r=Mark-Simulacrum\n\nRemove `VecMap`\n\nNot sure what the use of this data structure is over just using `FxIndexMap` or a `Vec`.\n\nr? ```@ghost```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a", "html_url": "https://github.com/rust-lang/rust/commit/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8543abc550d8fe94ce2fe6048345c900a96a829", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8543abc550d8fe94ce2fe6048345c900a96a829", "html_url": "https://github.com/rust-lang/rust/commit/d8543abc550d8fe94ce2fe6048345c900a96a829"}, {"sha": "663953857556bfaa049a3492bb4ec531ec0127b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/663953857556bfaa049a3492bb4ec531ec0127b9", "html_url": "https://github.com/rust-lang/rust/commit/663953857556bfaa049a3492bb4ec531ec0127b9"}], "stats": {"total": 279, "additions": 16, "deletions": 263}, "files": [{"sha": "2f2f7d0aaa4594bf16beefee8ea5a5e9ddb1680c", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a", "patch": "@@ -19,7 +19,6 @@ extern crate tracing;\n \n use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n use rustc_data_structures::graph::dominators::Dominators;\n-use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::{Diagnostic, DiagnosticBuilder, DiagnosticMessage, SubdiagnosticMessage};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n@@ -141,7 +140,7 @@ fn mir_borrowck(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> &Bor\n         debug!(\"Skipping borrowck because of injected body\");\n         // Let's make up a borrowck result! Fun times!\n         let result = BorrowCheckResult {\n-            concrete_opaque_types: VecMap::new(),\n+            concrete_opaque_types: FxIndexMap::default(),\n             closure_requirements: None,\n             used_mut_upvars: SmallVec::new(),\n             tainted_by_errors: None,"}, {"sha": "f0068fc9226be0282d84eeeb25c020145ba7e33a", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a", "patch": "@@ -2,7 +2,7 @@\n #![deny(rustc::diagnostic_outside_of_impl)]\n //! The entry point of the NLL borrow checker.\n \n-use rustc_data_structures::vec_map::VecMap;\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir::def_id::LocalDefId;\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::{create_dump_file, dump_enabled, dump_mir, PassWhere};\n@@ -44,7 +44,7 @@ pub type PoloniusOutput = Output<RustcFacts>;\n /// closure requirements to propagate, and any generated errors.\n pub(crate) struct NllOutput<'tcx> {\n     pub regioncx: RegionInferenceContext<'tcx>,\n-    pub opaque_type_values: VecMap<LocalDefId, OpaqueHiddenType<'tcx>>,\n+    pub opaque_type_values: FxIndexMap<LocalDefId, OpaqueHiddenType<'tcx>>,\n     pub polonius_input: Option<Box<AllFacts>>,\n     pub polonius_output: Option<Rc<PoloniusOutput>>,\n     pub opt_closure_req: Option<ClosureRegionRequirements<'tcx>>,\n@@ -377,7 +377,7 @@ pub(super) fn dump_annotation<'tcx>(\n     body: &Body<'tcx>,\n     regioncx: &RegionInferenceContext<'tcx>,\n     closure_region_requirements: &Option<ClosureRegionRequirements<'tcx>>,\n-    opaque_type_values: &VecMap<LocalDefId, OpaqueHiddenType<'tcx>>,\n+    opaque_type_values: &FxIndexMap<LocalDefId, OpaqueHiddenType<'tcx>>,\n     errors: &mut crate::error::BorrowckErrors<'tcx>,\n ) {\n     let tcx = infcx.tcx;"}, {"sha": "2b16655cf7d5a91a0ff85d14142654bc43e827af", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a", "patch": "@@ -1,5 +1,4 @@\n use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n-use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::OpaqueTyOrigin;\n@@ -61,9 +60,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     pub(crate) fn infer_opaque_types(\n         &self,\n         infcx: &InferCtxt<'tcx>,\n-        opaque_ty_decls: VecMap<OpaqueTypeKey<'tcx>, (OpaqueHiddenType<'tcx>, OpaqueTyOrigin)>,\n-    ) -> VecMap<LocalDefId, OpaqueHiddenType<'tcx>> {\n-        let mut result: VecMap<LocalDefId, OpaqueHiddenType<'tcx>> = VecMap::new();\n+        opaque_ty_decls: FxIndexMap<OpaqueTypeKey<'tcx>, (OpaqueHiddenType<'tcx>, OpaqueTyOrigin)>,\n+    ) -> FxIndexMap<LocalDefId, OpaqueHiddenType<'tcx>> {\n+        let mut result: FxIndexMap<LocalDefId, OpaqueHiddenType<'tcx>> = FxIndexMap::default();\n \n         let member_constraints: FxIndexMap<_, _> = self\n             .member_constraints"}, {"sha": "f67dae9beb92537b89420683ff72c8272bb84070", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a", "patch": "@@ -10,7 +10,6 @@ use either::Either;\n use hir::OpaqueTyOrigin;\n use rustc_data_structures::frozen::Frozen;\n use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n-use rustc_data_structures::vec_map::VecMap;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n@@ -894,7 +893,7 @@ pub(crate) struct MirTypeckResults<'tcx> {\n     pub(crate) constraints: MirTypeckRegionConstraints<'tcx>,\n     pub(crate) universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n     pub(crate) opaque_type_values:\n-        VecMap<OpaqueTypeKey<'tcx>, (OpaqueHiddenType<'tcx>, OpaqueTyOrigin)>,\n+        FxIndexMap<OpaqueTypeKey<'tcx>, (OpaqueHiddenType<'tcx>, OpaqueTyOrigin)>,\n }\n \n /// A collection of region constraints that must be satisfied for the"}, {"sha": "0339fb925d4587870037fb09cab5dcb091c63646", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a", "patch": "@@ -79,7 +79,6 @@ pub mod sync;\n pub mod tiny_list;\n pub mod transitive_relation;\n pub mod vec_linked_list;\n-pub mod vec_map;\n pub mod work_queue;\n pub use atomic_ref::AtomicRef;\n pub mod frozen;"}, {"sha": "d1a99bcaeb75452a28b497c99f1bddddea8ecd3e", "filename": "compiler/rustc_data_structures/src/vec_map.rs", "status": "removed", "additions": 0, "deletions": 192, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/d8543abc550d8fe94ce2fe6048345c900a96a829/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8543abc550d8fe94ce2fe6048345c900a96a829/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs?ref=d8543abc550d8fe94ce2fe6048345c900a96a829", "patch": "@@ -1,192 +0,0 @@\n-use std::borrow::Borrow;\n-use std::fmt::Debug;\n-use std::slice::Iter;\n-use std::vec::IntoIter;\n-\n-use crate::stable_hasher::{HashStable, StableHasher};\n-\n-/// A map type implemented as a vector of pairs `K` (key) and `V` (value).\n-/// It currently provides a subset of all the map operations, the rest could be added as needed.\n-#[derive(Clone, Encodable, Decodable, Debug)]\n-pub struct VecMap<K, V>(Vec<(K, V)>);\n-\n-impl<K, V> VecMap<K, V>\n-where\n-    K: Debug + PartialEq,\n-    V: Debug,\n-{\n-    pub fn new() -> Self {\n-        VecMap(Default::default())\n-    }\n-\n-    /// Sets the value of the entry, and returns the entry's old value.\n-    pub fn insert(&mut self, k: K, v: V) -> Option<V> {\n-        if let Some(elem) = self.0.iter_mut().find(|(key, _)| *key == k) {\n-            Some(std::mem::replace(&mut elem.1, v))\n-        } else {\n-            self.0.push((k, v));\n-            None\n-        }\n-    }\n-\n-    /// Removes the entry from the map and returns the removed value\n-    pub fn remove(&mut self, k: &K) -> Option<V> {\n-        self.0.iter().position(|(k2, _)| k2 == k).map(|pos| self.0.remove(pos).1)\n-    }\n-\n-    /// Gets a reference to the value in the entry.\n-    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>\n-    where\n-        K: Borrow<Q>,\n-        Q: Eq,\n-    {\n-        self.0.iter().find(|(key, _)| k == key.borrow()).map(|elem| &elem.1)\n-    }\n-\n-    /// Gets a mutable reference to the value in the entry.\n-    pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>\n-    where\n-        K: Borrow<Q>,\n-        Q: Eq,\n-    {\n-        self.0.iter_mut().find(|(key, _)| k == key.borrow()).map(|elem| &mut elem.1)\n-    }\n-\n-    /// Returns the any value corresponding to the supplied predicate filter.\n-    ///\n-    /// The supplied predicate will be applied to each (key, value) pair and it will return a\n-    /// reference to the values where the predicate returns `true`.\n-    pub fn any_value_matching(&self, mut predicate: impl FnMut(&(K, V)) -> bool) -> Option<&V> {\n-        self.0.iter().find(|kv| predicate(kv)).map(|elem| &elem.1)\n-    }\n-\n-    /// Returns the value corresponding to the supplied predicate filter. It crashes if there's\n-    /// more than one matching element.\n-    ///\n-    /// The supplied predicate will be applied to each (key, value) pair and it will return a\n-    /// reference to the value where the predicate returns `true`.\n-    pub fn get_value_matching(&self, mut predicate: impl FnMut(&(K, V)) -> bool) -> Option<&V> {\n-        let mut filter = self.0.iter().filter(|kv| predicate(kv));\n-        let (_, value) = filter.next()?;\n-        // This should return just one element, otherwise it's a bug\n-        assert!(\n-            filter.next().is_none(),\n-            \"Collection {self:#?} should have just one matching element\"\n-        );\n-        Some(value)\n-    }\n-\n-    /// Returns `true` if the map contains a value for the specified key.\n-    ///\n-    /// The key may be any borrowed form of the map's key type,\n-    /// [`Eq`] on the borrowed form *must* match those for\n-    /// the key type.\n-    pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool\n-    where\n-        K: Borrow<Q>,\n-        Q: Eq,\n-    {\n-        self.get(k).is_some()\n-    }\n-\n-    /// Returns `true` if the map contains no elements.\n-    pub fn is_empty(&self) -> bool {\n-        self.0.is_empty()\n-    }\n-\n-    pub fn iter(&self) -> Iter<'_, (K, V)> {\n-        self.into_iter()\n-    }\n-\n-    pub fn iter_mut(&mut self) -> impl Iterator<Item = (&K, &mut V)> {\n-        self.into_iter()\n-    }\n-\n-    pub fn retain(&mut self, f: impl Fn(&(K, V)) -> bool) {\n-        self.0.retain(f)\n-    }\n-}\n-\n-impl<K, V> Default for VecMap<K, V> {\n-    #[inline]\n-    fn default() -> Self {\n-        Self(Default::default())\n-    }\n-}\n-\n-impl<K, V> From<Vec<(K, V)>> for VecMap<K, V> {\n-    fn from(vec: Vec<(K, V)>) -> Self {\n-        Self(vec)\n-    }\n-}\n-\n-impl<K, V> Into<Vec<(K, V)>> for VecMap<K, V> {\n-    fn into(self) -> Vec<(K, V)> {\n-        self.0\n-    }\n-}\n-\n-impl<K, V> FromIterator<(K, V)> for VecMap<K, V> {\n-    fn from_iter<I: IntoIterator<Item = (K, V)>>(iter: I) -> Self {\n-        Self(iter.into_iter().collect())\n-    }\n-}\n-\n-impl<'a, K, V> IntoIterator for &'a VecMap<K, V> {\n-    type Item = &'a (K, V);\n-    type IntoIter = Iter<'a, (K, V)>;\n-\n-    #[inline]\n-    fn into_iter(self) -> Self::IntoIter {\n-        self.0.iter()\n-    }\n-}\n-\n-impl<'a, K: 'a, V: 'a> IntoIterator for &'a mut VecMap<K, V> {\n-    type Item = (&'a K, &'a mut V);\n-    type IntoIter = impl Iterator<Item = Self::Item>;\n-\n-    #[inline]\n-    fn into_iter(self) -> Self::IntoIter {\n-        self.0.iter_mut().map(|(k, v)| (&*k, v))\n-    }\n-}\n-\n-impl<K, V> IntoIterator for VecMap<K, V> {\n-    type Item = (K, V);\n-    type IntoIter = IntoIter<(K, V)>;\n-\n-    #[inline]\n-    fn into_iter(self) -> Self::IntoIter {\n-        self.0.into_iter()\n-    }\n-}\n-\n-impl<K: PartialEq + Debug, V: Debug> Extend<(K, V)> for VecMap<K, V> {\n-    fn extend<I: IntoIterator<Item = (K, V)>>(&mut self, iter: I) {\n-        for (k, v) in iter {\n-            self.insert(k, v);\n-        }\n-    }\n-\n-    fn extend_one(&mut self, (k, v): (K, V)) {\n-        self.insert(k, v);\n-    }\n-\n-    fn extend_reserve(&mut self, additional: usize) {\n-        self.0.extend_reserve(additional);\n-    }\n-}\n-\n-impl<K, V, CTX> HashStable<CTX> for VecMap<K, V>\n-where\n-    K: HashStable<CTX> + Eq,\n-    V: HashStable<CTX>,\n-{\n-    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n-        self.0.hash_stable(hcx, hasher)\n-    }\n-}\n-\n-#[cfg(test)]\n-mod tests;"}, {"sha": "458b60077dc75a76d5c3f63e31cf8bfbdb10012e", "filename": "compiler/rustc_data_structures/src/vec_map/tests.rs", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d8543abc550d8fe94ce2fe6048345c900a96a829/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8543abc550d8fe94ce2fe6048345c900a96a829/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map%2Ftests.rs?ref=d8543abc550d8fe94ce2fe6048345c900a96a829", "patch": "@@ -1,48 +0,0 @@\n-use super::*;\n-\n-impl<K, V> VecMap<K, V> {\n-    fn into_vec(self) -> Vec<(K, V)> {\n-        self.0.into()\n-    }\n-}\n-\n-#[test]\n-fn test_from_iterator() {\n-    assert_eq!(\n-        std::iter::empty().collect::<VecMap<i32, bool>>().into_vec(),\n-        Vec::<(i32, bool)>::new()\n-    );\n-    assert_eq!(std::iter::once((42, true)).collect::<VecMap<_, _>>().into_vec(), vec![(42, true)]);\n-    assert_eq!(\n-        [(1, true), (2, false)].into_iter().collect::<VecMap<_, _>>().into_vec(),\n-        vec![(1, true), (2, false)]\n-    );\n-}\n-\n-#[test]\n-fn test_into_iterator_owned() {\n-    assert_eq!(VecMap::new().into_iter().collect::<Vec<(i32, bool)>>(), Vec::<(i32, bool)>::new());\n-    assert_eq!(VecMap::from(vec![(1, true)]).into_iter().collect::<Vec<_>>(), vec![(1, true)]);\n-    assert_eq!(\n-        VecMap::from(vec![(1, true), (2, false)]).into_iter().collect::<Vec<_>>(),\n-        vec![(1, true), (2, false)]\n-    );\n-}\n-\n-#[test]\n-fn test_insert() {\n-    let mut v = VecMap::new();\n-    assert_eq!(v.insert(1, true), None);\n-    assert_eq!(v.insert(2, false), None);\n-    assert_eq!(v.clone().into_vec(), vec![(1, true), (2, false)]);\n-    assert_eq!(v.insert(1, false), Some(true));\n-    assert_eq!(v.into_vec(), vec![(1, false), (2, false)]);\n-}\n-\n-#[test]\n-fn test_get() {\n-    let v = [(1, true), (2, false)].into_iter().collect::<VecMap<_, _>>();\n-    assert_eq!(v.get(&1), Some(&true));\n-    assert_eq!(v.get(&2), Some(&false));\n-    assert_eq!(v.get(&3), None);\n-}"}, {"sha": "225b1550580761773ccf860456777cc3bb71557b", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a", "patch": "@@ -778,7 +778,7 @@ fn find_opaque_ty_constraints_for_rpit(\n             // Use borrowck to get the type with unerased regions.\n             let concrete_opaque_types = &self.tcx.mir_borrowck(def_id).concrete_opaque_types;\n             debug!(?concrete_opaque_types);\n-            for &(def_id, concrete_type) in concrete_opaque_types {\n+            for (&def_id, &concrete_type) in concrete_opaque_types {\n                 if def_id != self.def_id {\n                     // Ignore constraints for other opaque types.\n                     continue;"}, {"sha": "268896b671adf50a9ff5cc429ff30c2c120ff53e", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a", "patch": "@@ -159,9 +159,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             .opaque_type_storage\n             .opaque_types\n             .iter()\n-            .map(|&(k, ref v)| {\n-                (self.tcx.mk_opaque(k.def_id.to_def_id(), k.substs), v.hidden_type.ty)\n-            })\n+            .map(|(k, v)| (self.tcx.mk_opaque(k.def_id.to_def_id(), k.substs), v.hidden_type.ty))\n             .collect()\n     }\n "}, {"sha": "3a0a0494a7ed33dc1c90a59d142b50936fd22e41", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a", "patch": "@@ -5,8 +5,8 @@ use crate::infer::{DefiningAnchor, InferCtxt, InferOk};\n use crate::traits;\n use hir::def_id::{DefId, LocalDefId};\n use hir::OpaqueTyOrigin;\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::sync::Lrc;\n-use rustc_data_structures::vec_map::VecMap;\n use rustc_hir as hir;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n@@ -21,7 +21,7 @@ use std::ops::ControlFlow;\n \n mod table;\n \n-pub type OpaqueTypeMap<'tcx> = VecMap<OpaqueTypeKey<'tcx>, OpaqueTypeDecl<'tcx>>;\n+pub type OpaqueTypeMap<'tcx> = FxIndexMap<OpaqueTypeKey<'tcx>, OpaqueTypeDecl<'tcx>>;\n pub use table::{OpaqueTypeStorage, OpaqueTypeTable};\n \n /// Information about the opaque types whose values we"}, {"sha": "786c2e9cd943e426cbc1a9e789b4730360fb9f1a", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a", "patch": "@@ -2,8 +2,8 @@\n \n use crate::mir::{Body, ConstantKind, Promoted};\n use crate::ty::{self, OpaqueHiddenType, Ty, TyCtxt};\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::unord::UnordSet;\n-use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -227,7 +227,7 @@ pub struct BorrowCheckResult<'tcx> {\n     /// All the opaque types that are restricted to concrete types\n     /// by this function. Unlike the value in `TypeckResults`, this has\n     /// unerased regions.\n-    pub concrete_opaque_types: VecMap<LocalDefId, OpaqueHiddenType<'tcx>>,\n+    pub concrete_opaque_types: FxIndexMap<LocalDefId, OpaqueHiddenType<'tcx>>,\n     pub closure_requirements: Option<ClosureRegionRequirements<'tcx>>,\n     pub used_mut_upvars: SmallVec<[Field; 8]>,\n     pub tainted_by_errors: Option<ErrorGuaranteed>,"}, {"sha": "2b0fb4dc2b7d6ce90488f69486545bbc45642b3a", "filename": "compiler/rustc_middle/src/ty/typeck_results.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs?ref=70918ecf06ff8b5da15e7e4793a5a4e8a433eb1a", "patch": "@@ -8,10 +8,9 @@ use crate::{\n     },\n };\n use rustc_data_structures::{\n-    fx::FxHashMap,\n+    fx::{FxHashMap, FxIndexMap},\n     sync::Lrc,\n     unord::{UnordItems, UnordSet},\n-    vec_map::VecMap,\n };\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n@@ -155,7 +154,7 @@ pub struct TypeckResults<'tcx> {\n     /// by this function. We also store the\n     /// type here, so that mir-borrowck can use it as a hint for figuring out hidden types,\n     /// even if they are only set in dead code (which doesn't show up in MIR).\n-    pub concrete_opaque_types: VecMap<LocalDefId, ty::OpaqueHiddenType<'tcx>>,\n+    pub concrete_opaque_types: FxIndexMap<LocalDefId, ty::OpaqueHiddenType<'tcx>>,\n \n     /// Tracks the minimum captures required for a closure;\n     /// see `MinCaptureInformationMap` for more details."}]}