{"sha": "dad0036cb4af6e641dbb85e5b5522070cfe8233d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZDAwMzZjYjRhZjZlNjQxZGJiODVlNWI1NTIyMDcwY2ZlODIzM2Q=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-11-01T17:30:33Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-11-04T10:14:40Z"}, "message": "Do not raise interp errors from the scalar int module", "tree": {"sha": "2d9d8191a914f4eed110a3cd80440f24432ca470", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d9d8191a914f4eed110a3cd80440f24432ca470"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dad0036cb4af6e641dbb85e5b5522070cfe8233d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dad0036cb4af6e641dbb85e5b5522070cfe8233d", "html_url": "https://github.com/rust-lang/rust/commit/dad0036cb4af6e641dbb85e5b5522070cfe8233d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dad0036cb4af6e641dbb85e5b5522070cfe8233d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "500af76831e2babd8a1189eac2dffd82bc6db6ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/500af76831e2babd8a1189eac2dffd82bc6db6ac", "html_url": "https://github.com/rust-lang/rust/commit/500af76831e2babd8a1189eac2dffd82bc6db6ac"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "b5beb3babe2392625421d0129dab5dc43b7c2237", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dad0036cb4af6e641dbb85e5b5522070cfe8233d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad0036cb4af6e641dbb85e5b5522070cfe8233d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=dad0036cb4af6e641dbb85e5b5522070cfe8233d", "patch": "@@ -71,7 +71,7 @@ macro_rules! throw_inval {\n \n #[macro_export]\n macro_rules! throw_ub {\n-    ($($tt:tt)*) => { Err::<!, _>($crate::err_ub!($($tt)*))? };\n+    ($($tt:tt)*) => { Err::<!, _>(err_ub!($($tt)*))? };\n }\n \n #[macro_export]"}, {"sha": "2830b0e43f50170eb4e98082d5b6fcfecbd36be6", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dad0036cb4af6e641dbb85e5b5522070cfe8233d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad0036cb4af6e641dbb85e5b5522070cfe8233d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=dad0036cb4af6e641dbb85e5b5522070cfe8233d", "patch": "@@ -347,7 +347,13 @@ impl<'tcx, Tag> Scalar<Tag> {\n     fn to_bits(self, target_size: Size) -> InterpResult<'tcx, u128> {\n         assert_ne!(target_size.bytes(), 0, \"you should never look at the bits of a ZST\");\n         match self {\n-            Scalar::Int(int) => int.to_bits(target_size),\n+            Scalar::Int(int) => int.to_bits(target_size).map_err(|size| {\n+                err_ub!(ScalarSizeMismatch {\n+                    target_size: target_size.bytes(),\n+                    data_size: size.bytes(),\n+                })\n+                .into()\n+            }),\n             Scalar::Ptr(_) => throw_unsup!(ReadPointerAsBytes),\n         }\n     }"}, {"sha": "901b7571abb8ffe2c17fb962d9b2866947afd623", "filename": "compiler/rustc_middle/src/ty/consts/int.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/dad0036cb4af6e641dbb85e5b5522070cfe8233d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad0036cb4af6e641dbb85e5b5522070cfe8233d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs?ref=dad0036cb4af6e641dbb85e5b5522070cfe8233d", "patch": "@@ -1,5 +1,4 @@\n-use crate::mir::interpret::{sign_extend, truncate, InterpErrorInfo, InterpResult};\n-use crate::throw_ub;\n+use crate::mir::interpret::{sign_extend, truncate, InterpResult};\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n@@ -233,16 +232,14 @@ impl ScalarInt {\n     }\n \n     #[inline]\n-    pub fn to_bits(self, target_size: Size) -> InterpResult<'static, u128> {\n+    pub fn to_bits(self, target_size: Size) -> Result<u128, Size> {\n         assert_ne!(target_size.bytes(), 0, \"you should never look at the bits of a ZST\");\n-        if target_size.bytes() != u64::from(self.size) {\n-            throw_ub!(ScalarSizeMismatch {\n-                target_size: target_size.bytes(),\n-                data_size: u64::from(self.size),\n-            });\n+        if target_size.bytes() == u64::from(self.size) {\n+            self.check_data();\n+            Ok(self.data)\n+        } else {\n+            Err(self.size())\n         }\n-        self.check_data();\n-        Ok(self.data)\n     }\n }\n \n@@ -266,9 +263,9 @@ macro_rules! try_from {\n     ($($ty:ty),*) => {\n         $(\n             impl TryFrom<ScalarInt> for $ty {\n-                type Error = InterpErrorInfo<'static>;\n+                type Error = Size;\n                 #[inline]\n-                fn try_from(int: ScalarInt) -> InterpResult<'static, Self> {\n+                fn try_from(int: ScalarInt) -> Result<Self, Size> {\n                     int.to_bits(Size::from_bytes(std::mem::size_of::<$ty>())).map(|u| u.try_into().unwrap())\n                 }\n             }\n@@ -287,9 +284,9 @@ impl From<char> for ScalarInt {\n }\n \n impl TryFrom<ScalarInt> for char {\n-    type Error = InterpErrorInfo<'static>;\n+    type Error = Size;\n     #[inline]\n-    fn try_from(int: ScalarInt) -> InterpResult<'static, Self> {\n+    fn try_from(int: ScalarInt) -> Result<Self, Size> {\n         int.to_bits(Size::from_bytes(std::mem::size_of::<char>()))\n             .map(|u| char::from_u32(u.try_into().unwrap()).unwrap())\n     }\n@@ -304,9 +301,9 @@ impl From<Single> for ScalarInt {\n }\n \n impl TryFrom<ScalarInt> for Single {\n-    type Error = InterpErrorInfo<'static>;\n+    type Error = Size;\n     #[inline]\n-    fn try_from(int: ScalarInt) -> InterpResult<'static, Self> {\n+    fn try_from(int: ScalarInt) -> Result<Self, Size> {\n         int.to_bits(Size::from_bytes(4)).map(Self::from_bits)\n     }\n }\n@@ -320,9 +317,9 @@ impl From<Double> for ScalarInt {\n }\n \n impl TryFrom<ScalarInt> for Double {\n-    type Error = InterpErrorInfo<'static>;\n+    type Error = Size;\n     #[inline]\n-    fn try_from(int: ScalarInt) -> InterpResult<'static, Self> {\n+    fn try_from(int: ScalarInt) -> Result<Self, Size> {\n         int.to_bits(Size::from_bytes(8)).map(Self::from_bits)\n     }\n }"}]}