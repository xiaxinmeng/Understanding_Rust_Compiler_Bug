{"sha": "caa701e3c190c4d77634c9075548746e4917e56d", "node_id": "C_kwDOAAsO6NoAKGNhYTcwMWUzYzE5MGM0ZDc3NjM0YzkwNzU1NDg3NDZlNDkxN2U1NmQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-15T00:35:23Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-03T15:52:38Z"}, "message": "Elaborate supertrait obligations when deducing closure signature", "tree": {"sha": "5d51fa43a97f2c9a3788be4170b5abdcb2be957d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d51fa43a97f2c9a3788be4170b5abdcb2be957d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caa701e3c190c4d77634c9075548746e4917e56d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caa701e3c190c4d77634c9075548746e4917e56d", "html_url": "https://github.com/rust-lang/rust/commit/caa701e3c190c4d77634c9075548746e4917e56d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caa701e3c190c4d77634c9075548746e4917e56d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "060d4392b1679fa4f7323ee702a7669af281d5db", "url": "https://api.github.com/repos/rust-lang/rust/commits/060d4392b1679fa4f7323ee702a7669af281d5db", "html_url": "https://github.com/rust-lang/rust/commit/060d4392b1679fa4f7323ee702a7669af281d5db"}], "stats": {"total": 76, "additions": 41, "deletions": 35}, "files": [{"sha": "4f8ac45d5a6304124f222e407b19af21ce5807c1", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/caa701e3c190c4d77634c9075548746e4917e56d/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa701e3c190c4d77634c9075548746e4917e56d/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=caa701e3c190c4d77634c9075548746e4917e56d", "patch": "@@ -15,6 +15,7 @@ use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::source_map::Span;\n use rustc_target::spec::abi::Abi;\n+use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::error_reporting::ArgKind;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n use std::cmp;\n@@ -226,27 +227,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected_vid: ty::TyVid,\n     ) -> (Option<ExpectedSig<'tcx>>, Option<ty::ClosureKind>) {\n         let mut expected_sig = None;\n-        // Even if we can't infer the full signature, we may be able to\n-        // infer the kind. This can occur when we elaborate a predicate\n-        // like `F : Fn<A>`. Note that due to subtyping we could encounter\n-        // many viable options, so pick the most restrictive.\n         let mut expected_kind = None;\n \n-        for obligation in self.obligations_for_self_ty(expected_vid) {\n+        for obligation in traits::elaborate_obligations(\n+            self.tcx,\n+            self.obligations_for_self_ty(expected_vid).collect(),\n+        ) {\n             debug!(?obligation.predicate);\n             let bound_predicate = obligation.predicate.kind();\n \n+            // Given a Projection predicate, we can potentially infer\n+            // the complete signature.\n             if expected_sig.is_none()\n                 && let ty::PredicateKind::Projection(proj_predicate) = bound_predicate.skip_binder()\n             {\n-                // Given a Projection predicate, we can potentially infer\n-                // the complete signature.\n                 expected_sig = self.deduce_sig_from_projection(\n                     Some(obligation.cause.span),\n                     bound_predicate.rebind(proj_predicate),\n                 );\n             }\n \n+            // Even if we can't infer the full signature, we may be able to\n+            // infer the kind. This can occur when we elaborate a predicate\n+            // like `F : Fn<A>`. Note that due to subtyping we could encounter\n+            // many viable options, so pick the most restrictive.\n             let trait_def_id = match bound_predicate.skip_binder() {\n                 ty::PredicateKind::Projection(data) => {\n                     Some(data.projection_ty.trait_def_id(self.tcx))"}, {"sha": "5899b703e7c132bfa31dd7fe50d9ac591ce1e56c", "filename": "src/test/ui/closures/issue-23012-supertrait-signature-inference.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/caa701e3c190c4d77634c9075548746e4917e56d/src%2Ftest%2Fui%2Fclosures%2Fissue-23012-supertrait-signature-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa701e3c190c4d77634c9075548746e4917e56d/src%2Ftest%2Fui%2Fclosures%2Fissue-23012-supertrait-signature-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-23012-supertrait-signature-inference.rs?ref=caa701e3c190c4d77634c9075548746e4917e56d", "patch": "@@ -0,0 +1,29 @@\n+// check-pass\n+// Checks that we can infer a closure signature even if the `FnOnce` bound is\n+// a supertrait of the obligations we have currently registered for the Ty var.\n+\n+pub trait Receive<T, E>: FnOnce(Result<T, E>) {\n+    fn receive(self, res: Result<T, E>);\n+}\n+\n+impl<T, E, F: FnOnce(Result<T, E>)> Receive<T, E> for F {\n+    fn receive(self, res: Result<T, E>) {\n+        self(res)\n+    }\n+}\n+\n+pub trait Async<T, E> {\n+    fn receive<F: Receive<T, E>>(self, f: F);\n+}\n+\n+impl<T, E> Async<T, E> for Result<T, E> {\n+    fn receive<F: Receive<T, E>>(self, f: F) {\n+        f(self)\n+    }\n+}\n+\n+pub fn main() {\n+    Ok::<u32, ()>(123).receive(|res| {\n+        res.unwrap();\n+    });\n+}"}, {"sha": "cad3e0f66774d48e52d4015faf003a6fbee5b36c", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/caa701e3c190c4d77634c9075548746e4917e56d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa701e3c190c4d77634c9075548746e4917e56d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=caa701e3c190c4d77634c9075548746e4917e56d", "patch": "@@ -1,7 +1,6 @@\n+// check-pass\n // Regression test for issue #57611\n // Ensures that we don't ICE\n-// FIXME: This should compile, but it currently doesn't\n-// known-bug: unknown\n \n #![feature(trait_alias)]\n #![feature(type_alias_impl_trait)]"}, {"sha": "6344f114a9131fcfa73b669b48bca5b2b0549386", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/060d4392b1679fa4f7323ee702a7669af281d5db/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/060d4392b1679fa4f7323ee702a7669af281d5db/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr?ref=060d4392b1679fa4f7323ee702a7669af281d5db", "patch": "@@ -1,26 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-57611-trait-alias.rs:21:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^ one type is more general than the other\n-   |\n-   = note: expected trait `for<'a> Fn<(&'a X,)>`\n-              found trait `Fn<(&X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:21:9\n-   |\n-LL |         |x| x\n-   |         ^^^\n-\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:21:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'2 X) -> &X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}]}