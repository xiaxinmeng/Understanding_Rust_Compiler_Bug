{"sha": "4d65aa8f20ac80f7517af15f2dec8936325119c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNjVhYThmMjBhYzgwZjc1MTdhZjE1ZjJkZWM4OTM2MzI1MTE5YzY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-24T06:40:45Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-24T06:40:45Z"}, "message": "expand and better explain alignment check tests", "tree": {"sha": "aaf1ed772f7af583434ebef4c8b29d7486210f35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaf1ed772f7af583434ebef4c8b29d7486210f35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d65aa8f20ac80f7517af15f2dec8936325119c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d65aa8f20ac80f7517af15f2dec8936325119c6", "html_url": "https://github.com/rust-lang/rust/commit/4d65aa8f20ac80f7517af15f2dec8936325119c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d65aa8f20ac80f7517af15f2dec8936325119c6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69e8318b602d0b6bab2dee9bc3476e831b6ea5a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/69e8318b602d0b6bab2dee9bc3476e831b6ea5a6", "html_url": "https://github.com/rust-lang/rust/commit/69e8318b602d0b6bab2dee9bc3476e831b6ea5a6"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "bcc4192d7d2aeb38166ec038bd18329f902400b8", "filename": "tests/compile-fail/unaligned_ptr1.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d65aa8f20ac80f7517af15f2dec8936325119c6/tests%2Fcompile-fail%2Funaligned_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d65aa8f20ac80f7517af15f2dec8936325119c6/tests%2Fcompile-fail%2Funaligned_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr1.rs?ref=4d65aa8f20ac80f7517af15f2dec8936325119c6", "patch": "@@ -4,6 +4,6 @@\n fn main() {\n     let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n     let x = &x[0] as *const _ as *const u32;\n-    // This must fail because alignment is violated\n+    // This must fail because alignment is violated: the allocation's base is not sufficiently aligned.\n     let _x = unsafe { *x }; //~ ERROR tried to access memory with alignment 2, but alignment 4 is required\n }", "previous_filename": "tests/compile-fail/unaligned_ptr_cast1.rs"}, {"sha": "225bd14ade6194b936ac7cc5d4581525cb4a5a0d", "filename": "tests/compile-fail/unaligned_ptr2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d65aa8f20ac80f7517af15f2dec8936325119c6/tests%2Fcompile-fail%2Funaligned_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d65aa8f20ac80f7517af15f2dec8936325119c6/tests%2Fcompile-fail%2Funaligned_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr2.rs?ref=4d65aa8f20ac80f7517af15f2dec8936325119c6", "patch": "@@ -0,0 +1,10 @@\n+// This should fail even without validation.\n+// compile-flags: -Zmiri-disable-validation\n+\n+fn main() {\n+    let x = [2u32, 3]; // Make it big enough so we don't get an out-of-bounds error.\n+    let x = (x.as_ptr() as *const u8).wrapping_offset(3) as *const u32;\n+    // This must fail because alignment is violated: the offset is not sufficiently aligned.\n+    // Also make the offset not a power of 2, that used to ICE.\n+    let _x = unsafe { *x }; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n+}"}, {"sha": "f33a80d4588b58ca60852429fd6a4b07976f457b", "filename": "tests/compile-fail/unaligned_ptr3.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d65aa8f20ac80f7517af15f2dec8936325119c6/tests%2Fcompile-fail%2Funaligned_ptr3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d65aa8f20ac80f7517af15f2dec8936325119c6/tests%2Fcompile-fail%2Funaligned_ptr3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr3.rs?ref=4d65aa8f20ac80f7517af15f2dec8936325119c6", "patch": "@@ -3,7 +3,7 @@\n \n fn main() {\n     let x = [2u16, 3, 4, 5]; // Make it big enough so we don't get an out-of-bounds error.\n-    let x = &x[0] as *const _ as *const *const u8;\n+    let x = &x[0] as *const _ as *const *const u8; // cast to ptr-to-ptr, so that we load a ptr\n     // This must fail because alignment is violated. Test specifically for loading pointers,\n     // which have special code in miri's memory.\n     let _x = unsafe { *x };", "previous_filename": "tests/compile-fail/unaligned_ptr_cast2.rs"}, {"sha": "127ec04027d1a948794d983d0f3a1f468c98a0ee", "filename": "tests/compile-fail/unaligned_ptr_zst.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d65aa8f20ac80f7517af15f2dec8936325119c6/tests%2Fcompile-fail%2Funaligned_ptr_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d65aa8f20ac80f7517af15f2dec8936325119c6/tests%2Fcompile-fail%2Funaligned_ptr_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_zst.rs?ref=4d65aa8f20ac80f7517af15f2dec8936325119c6", "patch": "@@ -1,3 +1,6 @@\n+// This should fail even without validation\n+// compile-flags: -Zmiri-disable-validation\n+\n fn main() {\n     let x = &2u16;\n     let x = x as *const _ as *const [u32; 0];", "previous_filename": "tests/compile-fail/unaligned_ptr_cast_zst.rs"}]}