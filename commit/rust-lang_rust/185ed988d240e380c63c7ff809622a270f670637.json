{"sha": "185ed988d240e380c63c7ff809622a270f670637", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NWVkOTg4ZDI0MGUzODBjNjNjN2ZmODA5NjIyYTI3MGY2NzA2Mzc=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2019-02-07T11:08:37Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2019-04-23T22:54:14Z"}, "message": "Remove the Recover trait for HashSet", "tree": {"sha": "08f98fd0d5ad001c922fc66f4fc23afd41297345", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08f98fd0d5ad001c922fc66f4fc23afd41297345"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/185ed988d240e380c63c7ff809622a270f670637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/185ed988d240e380c63c7ff809622a270f670637", "html_url": "https://github.com/rust-lang/rust/commit/185ed988d240e380c63c7ff809622a270f670637", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/185ed988d240e380c63c7ff809622a270f670637/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0550766699a6602a51e361e8cb2825b540b7cce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0550766699a6602a51e361e8cb2825b540b7cce8", "html_url": "https://github.com/rust-lang/rust/commit/0550766699a6602a51e361e8cb2825b540b7cce8"}], "stats": {"total": 61, "additions": 9, "deletions": 52}, "files": [{"sha": "e24a824e38807186d09caa310a1a194d19d90d69", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/185ed988d240e380c63c7ff809622a270f670637/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185ed988d240e380c63c7ff809622a270f670637/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=185ed988d240e380c63c7ff809622a270f670637", "patch": "@@ -2937,13 +2937,6 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n         pop_internal(self.elem).1\n     }\n \n-    /// Returns a key that was used for search.\n-    ///\n-    /// The key was retained for further use.\n-    fn take_key(&mut self) -> Option<K> {\n-        self.key.take()\n-    }\n-\n     /// Replaces the entry, returning the old key and value. The new key in the hash map will be\n     /// the key used to create this entry.\n     ///\n@@ -3262,39 +3255,6 @@ impl fmt::Debug for RandomState {\n     }\n }\n \n-impl<K, S, Q: ?Sized> super::Recover<Q> for HashMap<K, (), S>\n-    where K: Eq + Hash + Borrow<Q>,\n-          S: BuildHasher,\n-          Q: Eq + Hash\n-{\n-    type Key = K;\n-\n-    #[inline]\n-    fn get(&self, key: &Q) -> Option<&K> {\n-        self.search(key).map(|bucket| bucket.into_refs().0)\n-    }\n-\n-    fn take(&mut self, key: &Q) -> Option<K> {\n-        self.search_mut(key).map(|bucket| pop_internal(bucket).0)\n-    }\n-\n-    #[inline]\n-    fn replace(&mut self, key: K) -> Option<K> {\n-        self.reserve(1);\n-\n-        match self.entry(key) {\n-            Occupied(mut occupied) => {\n-                let key = occupied.take_key().unwrap();\n-                Some(mem::replace(occupied.elem.read_mut().0, key))\n-            }\n-            Vacant(vacant) => {\n-                vacant.insert(());\n-                None\n-            }\n-        }\n-    }\n-}\n-\n #[allow(dead_code)]\n fn assert_covariance() {\n     fn map_key<'new>(v: HashMap<&'static str, u8>) -> HashMap<&'new str, u8> {"}, {"sha": "56585477f1c1735f677cd7760c84e962c3537626", "filename": "src/libstd/collections/hash/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/185ed988d240e380c63c7ff809622a270f670637/src%2Flibstd%2Fcollections%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185ed988d240e380c63c7ff809622a270f670637/src%2Flibstd%2Fcollections%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmod.rs?ref=185ed988d240e380c63c7ff809622a270f670637", "patch": "@@ -4,11 +4,3 @@ mod bench;\n mod table;\n pub mod map;\n pub mod set;\n-\n-trait Recover<Q: ?Sized> {\n-    type Key;\n-\n-    fn get(&self, key: &Q) -> Option<&Self::Key>;\n-    fn take(&mut self, key: &Q) -> Option<Self::Key>;\n-    fn replace(&mut self, key: Self::Key) -> Option<Self::Key>;\n-}"}, {"sha": "0fbf374fa496a6fc6dfa38d481207a262bcad812", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/185ed988d240e380c63c7ff809622a270f670637/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185ed988d240e380c63c7ff809622a270f670637/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=185ed988d240e380c63c7ff809622a270f670637", "patch": "@@ -4,7 +4,6 @@ use crate::hash::{Hash, BuildHasher};\n use crate::iter::{Chain, FromIterator, FusedIterator};\n use crate::ops::{BitOr, BitAnd, BitXor, Sub};\n \n-use super::Recover;\n use super::map::{self, HashMap, Keys, RandomState};\n \n // Future Optimization (FIXME!)\n@@ -579,7 +578,7 @@ impl<T, S> HashSet<T, S>\n         where T: Borrow<Q>,\n               Q: Hash + Eq\n     {\n-        Recover::get(&self.map, value)\n+        self.map.get_key_value(value).map(|(k, _)| k)\n     }\n \n     /// Returns `true` if `self` has no elements in common with `other`.\n@@ -699,7 +698,13 @@ impl<T, S> HashSet<T, S>\n     /// ```\n     #[stable(feature = \"set_recovery\", since = \"1.9.0\")]\n     pub fn replace(&mut self, value: T) -> Option<T> {\n-        Recover::replace(&mut self.map, value)\n+        match self.map.entry(value) {\n+            map::Entry::Occupied(occupied) => Some(occupied.replace_key()),\n+            map::Entry::Vacant(vacant) => {\n+                vacant.insert(());\n+                None\n+            }\n+        }\n     }\n \n     /// Removes a value from the set. Returns whether the value was\n@@ -754,7 +759,7 @@ impl<T, S> HashSet<T, S>\n         where T: Borrow<Q>,\n               Q: Hash + Eq\n     {\n-        Recover::take(&mut self.map, value)\n+        self.map.remove_entry(value).map(|(k, _)| k)\n     }\n \n     /// Retains only the elements specified by the predicate."}]}