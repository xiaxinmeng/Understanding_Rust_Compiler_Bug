{"sha": "0f99abae9ca7c463e7a5038b2249871fb3730aa5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmOTlhYmFlOWNhN2M0NjNlN2E1MDM4YjIyNDk4NzFmYjM3MzBhYTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-14T05:46:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-14T05:46:05Z"}, "message": "auto merge of #17130 : jakub-/rust/issue-17033, r=pcwalton\n\nFixes #17033.\r\nFixes #15965.\r\n\r\ncc @nikomatsakis", "tree": {"sha": "db95b79fef01fe56990c7978486127b98d6467ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db95b79fef01fe56990c7978486127b98d6467ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f99abae9ca7c463e7a5038b2249871fb3730aa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f99abae9ca7c463e7a5038b2249871fb3730aa5", "html_url": "https://github.com/rust-lang/rust/commit/0f99abae9ca7c463e7a5038b2249871fb3730aa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f99abae9ca7c463e7a5038b2249871fb3730aa5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19311b6103b49232709d301af4036dbc0021082c", "url": "https://api.github.com/repos/rust-lang/rust/commits/19311b6103b49232709d301af4036dbc0021082c", "html_url": "https://github.com/rust-lang/rust/commit/19311b6103b49232709d301af4036dbc0021082c"}, {"sha": "28bc56828f6dd1b6b4dfc0b26f635e0c4587667d", "url": "https://api.github.com/repos/rust-lang/rust/commits/28bc56828f6dd1b6b4dfc0b26f635e0c4587667d", "html_url": "https://github.com/rust-lang/rust/commit/28bc56828f6dd1b6b4dfc0b26f635e0c4587667d"}], "stats": {"total": 75, "additions": 69, "deletions": 6}, "files": [{"sha": "ecda5890fc5b43952b0a3d5dfbb3176a6111bc37", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0f99abae9ca7c463e7a5038b2249871fb3730aa5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f99abae9ca7c463e7a5038b2249871fb3730aa5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=0f99abae9ca7c463e7a5038b2249871fb3730aa5", "patch": "@@ -348,6 +348,7 @@ struct Candidate {\n pub enum RcvrMatchCondition {\n     RcvrMatchesIfObject(ast::DefId),\n     RcvrMatchesIfSubtype(ty::t),\n+    RcvrMatchesIfEqtype(ty::t)\n }\n \n impl<'a, 'tcx> LookupContext<'a, 'tcx> {\n@@ -675,6 +676,14 @@ impl<'a, 'tcx> LookupContext<'a, 'tcx> {\n                     }\n                     _ => {}\n                 }\n+\n+                let condition = match m.explicit_self {\n+                    ByReferenceExplicitSelfCategory(_, mt) if mt == MutMutable =>\n+                        RcvrMatchesIfEqtype(self_ty),\n+                    _ =>\n+                        RcvrMatchesIfSubtype(self_ty)\n+                };\n+\n                 debug!(\"found match: trait_ref={} substs={} m={}\",\n                        trait_ref.repr(this.tcx()),\n                        trait_ref.substs.repr(this.tcx()),\n@@ -688,7 +697,7 @@ impl<'a, 'tcx> LookupContext<'a, 'tcx> {\n                 assert_eq!(m.generics.regions.get_slice(subst::SelfSpace).len(),\n                            trait_ref.substs.regions().get_slice(subst::SelfSpace).len());\n                 Some(Candidate {\n-                    rcvr_match_condition: RcvrMatchesIfSubtype(self_ty),\n+                    rcvr_match_condition: condition,\n                     rcvr_substs: trait_ref.substs.clone(),\n                     method_ty: m,\n                     origin: MethodParam(MethodParam {\n@@ -822,14 +831,21 @@ impl<'a, 'tcx> LookupContext<'a, 'tcx> {\n             ty: impl_ty\n         } = impl_self_ty(&vcx, span, impl_did);\n \n+        let condition = match method.explicit_self {\n+            ByReferenceExplicitSelfCategory(_, mt) if mt == MutMutable =>\n+                RcvrMatchesIfEqtype(impl_ty),\n+            _ =>\n+                RcvrMatchesIfSubtype(impl_ty)\n+        };\n+\n         let candidates = if is_extension {\n             &mut self.extension_candidates\n         } else {\n             &mut self.inherent_candidates\n         };\n \n         candidates.push(Candidate {\n-            rcvr_match_condition: RcvrMatchesIfSubtype(impl_ty),\n+            rcvr_match_condition: condition,\n             rcvr_substs: impl_substs,\n             origin: MethodStatic(method.def_id),\n             method_ty: method,\n@@ -1525,7 +1541,7 @@ impl<'a, 'tcx> LookupContext<'a, 'tcx> {\n                 RcvrMatchesIfObject(desired_did) => {\n                     self_did == desired_did\n                 }\n-                RcvrMatchesIfSubtype(_) => {\n+                RcvrMatchesIfSubtype(_) | RcvrMatchesIfEqtype(_) => {\n                     false\n                 }\n             }\n@@ -1541,6 +1557,9 @@ impl<'a, 'tcx> LookupContext<'a, 'tcx> {\n                 RcvrMatchesIfSubtype(of_type) => {\n                     fcx.can_mk_subty(rcvr_ty, of_type).is_ok()\n                 }\n+                RcvrMatchesIfEqtype(of_type) => {\n+                    fcx.can_mk_eqty(rcvr_ty, of_type).is_ok()\n+                }\n             }\n         }\n \n@@ -1656,9 +1675,9 @@ impl Repr for RcvrMatchCondition {\n             RcvrMatchesIfSubtype(t) => {\n                 format!(\"RcvrMatchesIfSubtype({})\", t.repr(tcx))\n             }\n+            RcvrMatchesIfEqtype(t) => {\n+                format!(\"RcvrMatchesIfEqtype({})\", t.repr(tcx))\n+            }\n         }\n     }\n }\n-\n-\n-"}, {"sha": "375fc75bf62f5388cf2a6be9d68d5c1c5961b92c", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f99abae9ca7c463e7a5038b2249871fb3730aa5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f99abae9ca7c463e7a5038b2249871fb3730aa5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=0f99abae9ca7c463e7a5038b2249871fb3730aa5", "patch": "@@ -1743,6 +1743,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         infer::can_mk_subty(self.infcx(), sub, sup)\n     }\n \n+    pub fn can_mk_eqty(&self, sub: ty::t, sup: ty::t)\n+                       -> Result<(), ty::type_err> {\n+        infer::can_mk_eqty(self.infcx(), sub, sup)\n+    }\n+\n     pub fn mk_assignty(&self,\n                        expr: &ast::Expr,\n                        sub: ty::t,"}, {"sha": "f11584e9356c6461b6afbaab37f8be3d1d236f2e", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f99abae9ca7c463e7a5038b2249871fb3730aa5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f99abae9ca7c463e7a5038b2249871fb3730aa5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=0f99abae9ca7c463e7a5038b2249871fb3730aa5", "patch": "@@ -360,6 +360,17 @@ pub fn can_mk_subty(cx: &InferCtxt, a: ty::t, b: ty::t) -> ures {\n     }).to_ures()\n }\n \n+pub fn can_mk_eqty(cx: &InferCtxt, a: ty::t, b: ty::t) -> ures {\n+    debug!(\"can_mk_subty({} <: {})\", a.repr(cx.tcx), b.repr(cx.tcx));\n+    cx.probe(|| {\n+        let trace = TypeTrace {\n+            origin: Misc(codemap::DUMMY_SP),\n+            values: Types(expected_found(true, a, b))\n+        };\n+        cx.equate(true, trace).tys(a, b)\n+    }).to_ures()\n+}\n+\n pub fn mk_subr(cx: &InferCtxt,\n                origin: SubregionOrigin,\n                a: ty::Region,"}, {"sha": "410b1f94293a9e0ab571bcef2c319cf64e281ecc", "filename": "src/test/compile-fail/issue-15965.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0f99abae9ca7c463e7a5038b2249871fb3730aa5/src%2Ftest%2Fcompile-fail%2Fissue-15965.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f99abae9ca7c463e7a5038b2249871fb3730aa5/src%2Ftest%2Fcompile-fail%2Fissue-15965.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15965.rs?ref=0f99abae9ca7c463e7a5038b2249871fb3730aa5", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    return { return () } (); //~ ERROR expected function, found `!`\n+}"}, {"sha": "35adb29c9495d8aea79ca8717f6718f9e2664319", "filename": "src/test/compile-fail/issue-17033.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0f99abae9ca7c463e7a5038b2249871fb3730aa5/src%2Ftest%2Fcompile-fail%2Fissue-17033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f99abae9ca7c463e7a5038b2249871fb3730aa5/src%2Ftest%2Fcompile-fail%2Fissue-17033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17033.rs?ref=0f99abae9ca7c463e7a5038b2249871fb3730aa5", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn f<'r>(p: &'r mut fn(p: &mut ())) {\n+    p(()) //~ ERROR expected function, found `&'r mut fn(&mut ())`\n+}\n+\n+fn main() {}"}]}